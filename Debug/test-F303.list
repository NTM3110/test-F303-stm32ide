
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c580  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  0800c710  0800c710  0000d710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f8  0800d0f8  0000f240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f8  0800d0f8  0000e0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d100  0800d100  0000f240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d100  0800d100  0000e100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d104  0800d104  0000e104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800d108  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f240  2**0
                  CONTENTS
 10 .bss          00009208  20000240  20000240  0000f240  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009448  20009448  0000f240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031098  00000000  00000000  0000f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006420  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f45d  00000000  00000000  00046728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b48  00000000  00000000  00055b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b66  00000000  00000000  000576d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252d9  00000000  00000000  00059236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e704  00000000  00000000  0007e50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4bc7  00000000  00000000  000acc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001817da  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000065e4  00000000  00000000  00181820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  00187e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6f8 	.word	0x0800c6f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800c6f8 	.word	0x0800c6f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <receiveRMCDataWithAddrGSM>:
        // Set each uint32_t element individually using memset
        memset(&array[i], value, sizeof(uint32_t));  // Set 4 bytes of the uint32_t element
    }
}

void receiveRMCDataWithAddrGSM(){
 8000d14:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
	osEvent evt = osMailGet(RMC_MailQLEDId, 5000); // Wait for mail
 8000d16:	4d2e      	ldr	r5, [pc, #184]	@ (8000dd0 <receiveRMCDataWithAddrGSM+0xbc>)
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8000d18:	492e      	ldr	r1, [pc, #184]	@ (8000dd4 <receiveRMCDataWithAddrGSM+0xc0>)
 8000d1a:	482f      	ldr	r0, [pc, #188]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
void receiveRMCDataWithAddrGSM(){
 8000d1c:	b0a1      	sub	sp, #132	@ 0x84
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8000d1e:	f001 fbe9 	bl	80024f4 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQLEDId, 5000); // Wait for mail
 8000d22:	6829      	ldr	r1, [r5, #0]
 8000d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d28:	a80b      	add	r0, sp, #44	@ 0x2c
 8000d2a:	f004 fc8f 	bl	800564c <osMailGet>
	if(evt.status == osEventMail){
 8000d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d14b      	bne.n	8000dcc <receiveRMCDataWithAddrGSM+0xb8>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8000d34:	4929      	ldr	r1, [pc, #164]	@ (8000ddc <receiveRMCDataWithAddrGSM+0xc8>)
 8000d36:	4828      	ldr	r0, [pc, #160]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000d38:	f001 fbdc 	bl	80024f4 <uart_transmit_string>
		GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8000d3c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
		char addr_out[10];
		uart_transmit_string(&huart1, (uint8_t*)"Address received: \n");
 8000d3e:	4928      	ldr	r1, [pc, #160]	@ (8000de0 <receiveRMCDataWithAddrGSM+0xcc>)
 8000d40:	4825      	ldr	r0, [pc, #148]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000d42:	f001 fbd7 	bl	80024f4 <uart_transmit_string>
		sprintf(addr_out, "%08x\n\n", receivedData->address);
 8000d46:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000d48:	4926      	ldr	r1, [pc, #152]	@ (8000de4 <receiveRMCDataWithAddrGSM+0xd0>)
 8000d4a:	a808      	add	r0, sp, #32
 8000d4c:	f007 fda0 	bl	8008890 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8000d50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d54:	2208      	movs	r2, #8
 8000d56:	a908      	add	r1, sp, #32
 8000d58:	481f      	ldr	r0, [pc, #124]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000d5a:	f004 fa2d 	bl	80051b8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8000d5e:	4922      	ldr	r1, [pc, #136]	@ (8000de8 <receiveRMCDataWithAddrGSM+0xd4>)
 8000d60:	481d      	ldr	r0, [pc, #116]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	2201      	movs	r2, #1
 8000d68:	f004 fa26 	bl	80051b8 <HAL_UART_Transmit>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER : %.6f %c, %.6f %c\n", receivedData->rmc.lcation.latitude, receivedData->rmc.lcation.NS, receivedData->rmc.lcation.longitude, receivedData->rmc.lcation.EW);
 8000d6c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000d70:	9306      	str	r3, [sp, #24]
 8000d72:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000d7a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000d84:	2146      	movs	r1, #70	@ 0x46
 8000d86:	e9cd 2300 	strd	r2, r3, [sp]
 8000d8a:	a80e      	add	r0, sp, #56	@ 0x38
 8000d8c:	4a17      	ldr	r2, [pc, #92]	@ (8000dec <receiveRMCDataWithAddrGSM+0xd8>)
 8000d8e:	f007 fd4b 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8000d92:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000d94:	a90e      	add	r1, sp, #56	@ 0x38
 8000d96:	f001 fbad 	bl	80024f4 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER: %.2f, Course: %.2f, Valid: %d\n", receivedData->rmc.speed, receivedData->rmc.course, receivedData->rmc.isValid);
 8000d9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000d9c:	9304      	str	r3, [sp, #16]
 8000d9e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000da0:	f7ff fbe2 	bl	8000568 <__aeabi_f2d>
 8000da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000da8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000daa:	f7ff fbdd 	bl	8000568 <__aeabi_f2d>
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <receiveRMCDataWithAddrGSM+0xdc>)
 8000db0:	e9cd 0100 	strd	r0, r1, [sp]
 8000db4:	2146      	movs	r1, #70	@ 0x46
 8000db6:	a80e      	add	r0, sp, #56	@ 0x38
 8000db8:	f007 fd36 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <receiveRMCDataWithAddrGSM+0xc4>)
 8000dbe:	a90e      	add	r1, sp, #56	@ 0x38
 8000dc0:	f001 fb98 	bl	80024f4 <uart_transmit_string>
		osMailFree(RMC_MailQLEDId, receivedData);
 8000dc4:	6828      	ldr	r0, [r5, #0]
 8000dc6:	4621      	mov	r1, r4
 8000dc8:	f004 fc79 	bl	80056be <osMailFree>
	}
}
 8000dcc:	b021      	add	sp, #132	@ 0x84
 8000dce:	bd30      	pop	{r4, r5, pc}
 8000dd0:	2000025c 	.word	0x2000025c
 8000dd4:	0800c770 	.word	0x0800c770
 8000dd8:	20000f94 	.word	0x20000f94
 8000ddc:	0800c790 	.word	0x0800c790
 8000de0:	0800c7b3 	.word	0x0800c7b3
 8000de4:	0800c7c7 	.word	0x0800c7c7
 8000de8:	0800c7ce 	.word	0x0800c7ce
 8000dec:	0800c7d1 	.word	0x0800c7d1
 8000df0:	0800c800 	.word	0x0800c800

08000df4 <StartControllingLED>:
//        osMailFree(uint8MailQueue, receivedMail); // Free the mail memory
//    }
//}

void StartControllingLED(void const * argument)
{
 8000df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uart_transmit_string(&huart1,(uint8_t*)"\nINSIDE CONTROLLING LED \n");
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <StartControllingLED+0x38>)
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <StartControllingLED+0x3c>)
 8000dfa:	f001 fb7b 	bl	80024f4 <uart_transmit_string>
  /* USER CODE BEGIN StartControllingLED */
  /* Infinite loop */
	//RingBufferDmaU8_initADCRx(&ADC2RxDMARing, &hadc2, adc2Sentence, DMA_STACK_SIZE);

	osMailQDef(RMC_MailLEDQ, 11, GSM_MAIL_STRUCT);
 8000dfe:	2360      	movs	r3, #96	@ 0x60
 8000e00:	220b      	movs	r2, #11
	RMC_MailQLEDId = osMailCreate(osMailQ(RMC_MailLEDQ),NULL);
 8000e02:	2100      	movs	r1, #0
 8000e04:	a801      	add	r0, sp, #4
	osMailQDef(RMC_MailLEDQ, 11, GSM_MAIL_STRUCT);
 8000e06:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000e0a:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQLEDId = osMailCreate(osMailQ(RMC_MailLEDQ),NULL);
 8000e0e:	f004 fbc2 	bl	8005596 <osMailCreate>
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <StartControllingLED+0x40>)
 8000e14:	6018      	str	r0, [r3, #0]

	for(;;)
	{
		osDelay(1500);
 8000e16:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e1a:	f004 fb3d 	bl	8005498 <osDelay>
//		if(adc2Sentence[0] != 0x00){
//			sendUint32Array(adc2Sentence, DMA_STACK_SIZE, &huart1);
//			setUint32Array(adc2Sentence,DMA_STACK_SIZE, 0x00000000);
//			ADC2_ReInitializeRxDMA();
//		}
		receiveRMCDataWithAddrGSM();
 8000e1e:	f7ff ff79 	bl	8000d14 <receiveRMCDataWithAddrGSM>
		osDelay(1500);
 8000e22:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e26:	f004 fb37 	bl	8005498 <osDelay>
	for(;;)
 8000e2a:	e7f4      	b.n	8000e16 <StartControllingLED+0x22>
 8000e2c:	0800c838 	.word	0x0800c838
 8000e30:	20000f94 	.word	0x20000f94
 8000e34:	2000025c 	.word	0x2000025c

08000e38 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000e38:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000e3a:	4e0d      	ldr	r6, [pc, #52]	@ (8000e70 <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000e3c:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <sendRMCDataToFlash+0x3c>)
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000e44:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000e46:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <sendRMCDataToFlash+0x40>)
 8000e48:	f004 f9b6 	bl	80051b8 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000e4c:	6830      	ldr	r0, [r6, #0]
 8000e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e52:	f004 fbcb 	bl	80055ec <osMailAlloc>
 8000e56:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000e58:	b148      	cbz	r0, 8000e6e <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	2258      	movs	r2, #88	@ 0x58
 8000e5e:	f008 fc80 	bl	8009762 <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000e62:	6830      	ldr	r0, [r6, #0]
 8000e64:	4621      	mov	r1, r4
    }
}
 8000e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000e6a:	f004 bbc4 	b.w	80055f6 <osMailPut>
}
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	200002c0 	.word	0x200002c0
 8000e74:	0800c852 	.word	0x0800c852
 8000e78:	20000f94 	.word	0x20000f94

08000e7c <getRMC>:


void getRMC(){
 8000e7c:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000e7e:	4d3f      	ldr	r5, [pc, #252]	@ (8000f7c <getRMC+0x100>)
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	602b      	str	r3, [r5, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e86:	4b3e      	ldr	r3, [pc, #248]	@ (8000f80 <getRMC+0x104>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000e8c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000e90:	2924      	cmp	r1, #36	@ 0x24
 8000e92:	4614      	mov	r4, r2
 8000e94:	f102 0201 	add.w	r2, r2, #1
 8000e98:	d16b      	bne.n	8000f72 <getRMC+0xf6>
 8000e9a:	7819      	ldrb	r1, [r3, #0]
 8000e9c:	2947      	cmp	r1, #71	@ 0x47
 8000e9e:	d168      	bne.n	8000f72 <getRMC+0xf6>
 8000ea0:	7859      	ldrb	r1, [r3, #1]
 8000ea2:	294e      	cmp	r1, #78	@ 0x4e
 8000ea4:	d165      	bne.n	8000f72 <getRMC+0xf6>
 8000ea6:	7899      	ldrb	r1, [r3, #2]
 8000ea8:	2952      	cmp	r1, #82	@ 0x52
 8000eaa:	d162      	bne.n	8000f72 <getRMC+0xf6>
 8000eac:	78d9      	ldrb	r1, [r3, #3]
 8000eae:	294d      	cmp	r1, #77	@ 0x4d
 8000eb0:	d15f      	bne.n	8000f72 <getRMC+0xf6>
 8000eb2:	7919      	ldrb	r1, [r3, #4]
 8000eb4:	2943      	cmp	r1, #67	@ 0x43
 8000eb6:	d15c      	bne.n	8000f72 <getRMC+0xf6>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000eb8:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000ebc:	3101      	adds	r1, #1
 8000ebe:	29c8      	cmp	r1, #200	@ 0xc8
 8000ec0:	d957      	bls.n	8000f72 <getRMC+0xf6>
			isRMCExist = 1;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <getRMC+0x108>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000ec4:	4930      	ldr	r1, [pc, #192]	@ (8000f88 <getRMC+0x10c>)
 8000ec6:	4831      	ldr	r0, [pc, #196]	@ (8000f8c <getRMC+0x110>)
			isRMCExist = 1;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	f004 f971 	bl	80051b8 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f90 <getRMC+0x114>)
 8000ed8:	1933      	adds	r3, r6, r4
	int idx = 0;
 8000eda:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000edc:	7859      	ldrb	r1, [r3, #1]
 8000ede:	290a      	cmp	r1, #10
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	d140      	bne.n	8000f66 <getRMC+0xea>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <getRMC+0x114>)
	}
	if(isRMCExist == 1){
 8000ee6:	4e27      	ldr	r6, [pc, #156]	@ (8000f84 <getRMC+0x108>)
		rmc_str[i] = 0;
 8000ee8:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000eec:	2100      	movs	r1, #0
 8000eee:	4418      	add	r0, r3
 8000ef0:	f007 fe2a 	bl	8008b48 <memset>
	if(isRMCExist == 1){
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d114      	bne.n	8000f24 <getRMC+0xa8>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000efa:	4c26      	ldr	r4, [pc, #152]	@ (8000f94 <getRMC+0x118>)
 8000efc:	7a22      	ldrb	r2, [r4, #8]
 8000efe:	7921      	ldrb	r1, [r4, #4]
 8000f00:	7820      	ldrb	r0, [r4, #0]
 8000f02:	f000 f8f3 	bl	80010ec <set_time>
		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8000f06:	7c22      	ldrb	r2, [r4, #16]
 8000f08:	7d21      	ldrb	r1, [r4, #20]
 8000f0a:	7e20      	ldrb	r0, [r4, #24]
 8000f0c:	f000 f90c 	bl	8001128 <set_date>
		if(rmc.isValid == 1){
 8000f10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d104      	bne.n	8000f20 <getRMC+0xa4>
			sendRMCDataToFlash(&rmc);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ff8e 	bl	8000e38 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
			getRMC_time = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	602b      	str	r3, [r5, #0]
		}
		isRMCExist = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	6033      	str	r3, [r6, #0]
	}
	if(getRMC_time >= 500){
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f2a:	db0f      	blt.n	8000f4c <getRMC+0xd0>
		GPS_DISABLE();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4819      	ldr	r0, [pc, #100]	@ (8000f98 <getRMC+0x11c>)
 8000f32:	f002 fa8d 	bl	8003450 <HAL_GPIO_WritePin>
		osDelay(500);
 8000f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3a:	f004 faad 	bl	8005498 <osDelay>
		GPS_ENABLE();
 8000f3e:	4816      	ldr	r0, [pc, #88]	@ (8000f98 <getRMC+0x11c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	2104      	movs	r1, #4
 8000f44:	f002 fa84 	bl	8003450 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	602b      	str	r3, [r5, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000f4c:	6829      	ldr	r1, [r5, #0]
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <getRMC+0x120>)
 8000f50:	f001 fae0 	bl	8002514 <Debug_printf>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
}
 8000f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000f58:	490d      	ldr	r1, [pc, #52]	@ (8000f90 <getRMC+0x114>)
 8000f5a:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <getRMC+0x110>)
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	f004 b929 	b.w	80051b8 <HAL_UART_Transmit>
				rmc_str[idx] = gpsSentence[i];
 8000f66:	7821      	ldrb	r1, [r4, #0]
 8000f68:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	3001      	adds	r0, #1
				i++;
 8000f70:	e7b4      	b.n	8000edc <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000f72:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000f76:	d189      	bne.n	8000e8c <getRMC+0x10>
	int length = 0;
 8000f78:	2000      	movs	r0, #0
 8000f7a:	e7b3      	b.n	8000ee4 <getRMC+0x68>
 8000f7c:	20000260 	.word	0x20000260
 8000f80:	200002c4 	.word	0x200002c4
 8000f84:	20000264 	.word	0x20000264
 8000f88:	0800c868 	.word	0x0800c868
 8000f8c:	20000f94 	.word	0x20000f94
 8000f90:	20000ad4 	.word	0x20000ad4
 8000f94:	20000268 	.word	0x20000268
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	0800c875 	.word	0x0800c875

08000fa0 <StartGPS>:
void StartGPS(void const * argument)
{
 8000fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000fa2:	493f      	ldr	r1, [pc, #252]	@ (80010a0 <StartGPS+0x100>)
 8000fa4:	483f      	ldr	r0, [pc, #252]	@ (80010a4 <StartGPS+0x104>)
	/* USER CODE BEGIN StartGPS */
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
//	/* Infinite loop */
	rmc.tim.hour = 9;
 8000fa6:	4c40      	ldr	r4, [pc, #256]	@ (80010a8 <StartGPS+0x108>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
		HAL_Delay(1000);
		getRMC();
		rmc.lcation.latitude -= 0.00001;
//		rmc.tim.sec += 2;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000fa8:	4e3e      	ldr	r6, [pc, #248]	@ (80010a4 <StartGPS+0x104>)
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	220c      	movs	r2, #12
 8000fb0:	f004 f902 	bl	80051b8 <HAL_UART_Transmit>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80010ac <StartGPS+0x10c>)
 8000fb6:	493e      	ldr	r1, [pc, #248]	@ (80010b0 <StartGPS+0x110>)
 8000fb8:	483e      	ldr	r0, [pc, #248]	@ (80010b4 <StartGPS+0x114>)
 8000fba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fbe:	f000 f887 	bl	80010d0 <RingBufferDmaU8_initUSARTRx>
	rmc.tim.min = 0;
 8000fc2:	2500      	movs	r5, #0
 8000fc4:	2309      	movs	r3, #9
 8000fc6:	e9c4 3500 	strd	r3, r5, [r4]
	rmc.lcation.latitude = 20.998022;
 8000fca:	a32f      	add	r3, pc, #188	@ (adr r3, 8001088 <StartGPS+0xe8>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
	rmc.lcation.longitude = 105.794756;
 8000fd4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001090 <StartGPS+0xf0>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
	rmc.speed = 22.4;
 8000fde:	4b36      	ldr	r3, [pc, #216]	@ (80010b8 <StartGPS+0x118>)
 8000fe0:	62a3      	str	r3, [r4, #40]	@ 0x28
	rmc.course = 30.5;
 8000fe2:	4b36      	ldr	r3, [pc, #216]	@ (80010bc <StartGPS+0x11c>)
 8000fe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
	rmc.lcation.NS = 'N';
 8000fe6:	234e      	movs	r3, #78	@ 0x4e
 8000fe8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000fec:	2345      	movs	r3, #69	@ 0x45
 8000fee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
	rmc.isValid = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	6323      	str	r3, [r4, #48]	@ 0x30
	rmc.date.Mon = 11;
 8000ff6:	2117      	movs	r1, #23
 8000ff8:	230b      	movs	r3, #11
 8000ffa:	e9c4 1304 	strd	r1, r3, [r4, #16]
	rmc.date.Yr = 24;
 8000ffe:	2218      	movs	r2, #24
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001000:	4629      	mov	r1, r5
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8001002:	9301      	str	r3, [sp, #4]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001004:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8001006:	2358      	movs	r3, #88	@ 0x58
	rmc.tim.sec = 0;
 8001008:	60a5      	str	r5, [r4, #8]
	rmc.date.Yr = 24;
 800100a:	61a2      	str	r2, [r4, #24]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8001012:	f004 fac0 	bl	8005596 <osMailCreate>
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <StartGPS+0x120>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001018:	4629      	mov	r1, r5
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 800101a:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 800101c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001020:	4822      	ldr	r0, [pc, #136]	@ (80010ac <StartGPS+0x10c>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001022:	4d28      	ldr	r5, [pc, #160]	@ (80010c4 <StartGPS+0x124>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001024:	f007 fd90 	bl	8008b48 <memset>
		rmc.lcation.latitude -= 0.00001;
 8001028:	f20f 096c 	addw	r9, pc, #108	@ 0x6c
 800102c:	e9d9 8900 	ldrd	r8, r9, [r9]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001036:	4628      	mov	r0, r5
 8001038:	f002 fa0a 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001040:	f001 fad8 	bl	80025f4 <HAL_Delay>
		getRMC();
 8001044:	f7ff ff1a 	bl	8000e7c <getRMC>
		rmc.lcation.latitude -= 0.00001;
 8001048:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 800104c:	4642      	mov	r2, r8
 800104e:	464b      	mov	r3, r9
 8001050:	f7ff f92a 	bl	80002a8 <__aeabi_dsub>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8001054:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
		rmc.lcation.latitude -= 0.00001;
 8001058:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 800105c:	220d      	movs	r2, #13
 800105e:	491a      	ldr	r1, [pc, #104]	@ (80010c8 <StartGPS+0x128>)
 8001060:	4630      	mov	r0, r6
 8001062:	f004 f8a9 	bl	80051b8 <HAL_UART_Transmit>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n ");
 8001066:	4630      	mov	r0, r6
 8001068:	4918      	ldr	r1, [pc, #96]	@ (80010cc <StartGPS+0x12c>)
 800106a:	f001 fa43 	bl	80024f4 <uart_transmit_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800106e:	4628      	mov	r0, r5
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001076:	f002 f9eb 	bl	8003450 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800107e:	f001 fab9 	bl	80025f4 <HAL_Delay>
	while(1)
 8001082:	e7d5      	b.n	8001030 <StartGPS+0x90>
 8001084:	f3af 8000 	nop.w
 8001088:	5eaab042 	.word	0x5eaab042
 800108c:	4034ff7e 	.word	0x4034ff7e
 8001090:	48451330 	.word	0x48451330
 8001094:	405a72dd 	.word	0x405a72dd
 8001098:	88e368f1 	.word	0x88e368f1
 800109c:	3ee4f8b5 	.word	0x3ee4f8b5
 80010a0:	0800c88e 	.word	0x0800c88e
 80010a4:	20000f94 	.word	0x20000f94
 80010a8:	20000268 	.word	0x20000268
 80010ac:	200002c4 	.word	0x200002c4
 80010b0:	20000f0c 	.word	0x20000f0c
 80010b4:	20000ac4 	.word	0x20000ac4
 80010b8:	41b33333 	.word	0x41b33333
 80010bc:	41f40000 	.word	0x41f40000
 80010c0:	200002c0 	.word	0x200002c0
 80010c4:	48000800 	.word	0x48000800
 80010c8:	0800c89b 	.word	0x0800c89b
 80010cc:	0800c8a9 	.word	0x0800c8a9

080010d0 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 80010d0:	b410      	push	{r4}
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 80010d6:	80a3      	strh	r3, [r4, #4]
{
 80010d8:	4611      	mov	r1, r2
 80010da:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 80010dc:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 80010de:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 80010e0:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 80010e2:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 80010e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 80010e8:	f004 b98c 	b.w	8005404 <HAL_UART_Receive_DMA>

080010ec <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	4606      	mov	r6, r0
 80010f2:	460d      	mov	r5, r1
 80010f4:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 80010f6:	2100      	movs	r1, #0
 80010f8:	2211      	movs	r2, #17
 80010fa:	f10d 0007 	add.w	r0, sp, #7
 80010fe:	f007 fd23 	bl	8008b48 <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001102:	4808      	ldr	r0, [pc, #32]	@ (8001124 <set_time+0x38>)
	sTime.Hours = hr;
 8001104:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001108:	2200      	movs	r2, #0
 800110a:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 800110c:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8001110:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001114:	f002 febe 	bl	8003e94 <HAL_RTC_SetTime>
 8001118:	b108      	cbz	r0, 800111e <set_time+0x32>
	{
		Error_Handler();
 800111a:	f000 fb38 	bl	800178e <Error_Handler>
	}
}
 800111e:	b006      	add	sp, #24
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	bf00      	nop
 8001124:	20001130 	.word	0x20001130

08001128 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8001128:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 800112a:	2300      	movs	r3, #0
	sDate.Month = month;
 800112c:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8001130:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8001134:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001138:	461a      	mov	r2, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 800113c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001140:	a901      	add	r1, sp, #4
 8001142:	f002 ff01 	bl	8003f48 <HAL_RTC_SetDate>
 8001146:	b108      	cbz	r0, 800114c <set_date+0x24>
	{
		Error_Handler();
 8001148:	f000 fb21 	bl	800178e <Error_Handler>
	}
}
 800114c:	b003      	add	sp, #12
 800114e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001152:	bf00      	nop
 8001154:	20001130 	.word	0x20001130

08001158 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800115a:	4d29      	ldr	r5, [pc, #164]	@ (8001200 <get_RTC_time_date+0xa8>)
{
 800115c:	b0b3      	sub	sp, #204	@ 0xcc
 800115e:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001160:	a90d      	add	r1, sp, #52	@ 0x34
 8001162:	2200      	movs	r2, #0
 8001164:	4628      	mov	r0, r5
 8001166:	f002 ff3f 	bl	8003fe8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800116a:	a906      	add	r1, sp, #24
 800116c:	2200      	movs	r2, #0
 800116e:	4628      	mov	r0, r5
 8001170:	f002 ff5d 	bl	800402e <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001174:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8001178:	4d22      	ldr	r5, [pc, #136]	@ (8001204 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8001180:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <get_RTC_time_date+0xb0>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	210a      	movs	r1, #10
 8001186:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800118a:	a807      	add	r0, sp, #28
 800118c:	f007 fb4c 	bl	8008828 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8001190:	a907      	add	r1, sp, #28
 8001192:	4628      	mov	r0, r5
 8001194:	f001 f9ae 	bl	80024f4 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8001198:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80011a2:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <get_RTC_time_date+0xb4>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	210c      	movs	r1, #12
 80011a8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80011ac:	a80a      	add	r0, sp, #40	@ 0x28
 80011ae:	f007 fb3b 	bl	8008828 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80011b2:	a90a      	add	r1, sp, #40	@ 0x28
 80011b4:	4628      	mov	r0, r5
 80011b6:	f001 f99d 	bl	80024f4 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 80011ba:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 80011be:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 80011c2:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 80011c6:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 80011ca:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 80011ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80011d2:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 80011d4:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 80011d6:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 80011d8:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 80011da:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 80011dc:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 80011de:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <get_RTC_time_date+0xb8>)
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	a812      	add	r0, sp, #72	@ 0x48
 80011ee:	f007 fb1b 	bl	8008828 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 80011f2:	a912      	add	r1, sp, #72	@ 0x48
 80011f4:	4628      	mov	r0, r5
 80011f6:	f001 f97d 	bl	80024f4 <uart_transmit_string>
}
 80011fa:	b033      	add	sp, #204	@ 0xcc
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fe:	bf00      	nop
 8001200:	20001130 	.word	0x20001130
 8001204:	20000f94 	.word	0x20000f94
 8001208:	0800c8ed 	.word	0x0800c8ed
 800120c:	0800c8ad 	.word	0x0800c8ad
 8001210:	0800c8bf 	.word	0x0800c8bf

08001214 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <vApplicationGetIdleTaskMemory+0x10>)
 8001216:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <vApplicationGetIdleTaskMemory+0x14>)
 800121a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000d58 	.word	0x20000d58
 8001228:	20000b58 	.word	0x20000b58

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b500      	push	{lr}
 800122e:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001230:	2228      	movs	r2, #40	@ 0x28
 8001232:	2100      	movs	r1, #0
 8001234:	a805      	add	r0, sp, #20
 8001236:	f007 fc87 	bl	8008b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123a:	2214      	movs	r2, #20
 800123c:	2100      	movs	r1, #0
 800123e:	4668      	mov	r0, sp
 8001240:	f007 fc82 	bl	8008b48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	223c      	movs	r2, #60	@ 0x3c
 8001246:	2100      	movs	r1, #0
 8001248:	eb0d 0002 	add.w	r0, sp, r2
 800124c:	f007 fc7c 	bl	8008b48 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001250:	f002 f904 	bl	800345c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001254:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <SystemClock_Config+0xa0>)
 8001256:	6a13      	ldr	r3, [r2, #32]
 8001258:	f023 0318 	bic.w	r3, r3, #24
 800125c:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800125e:	2306      	movs	r3, #6
 8001260:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001262:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126c:	2002      	movs	r0, #2
 800126e:	2300      	movs	r3, #0
 8001270:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001274:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800127a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f002 f8f6 	bl	800346c <HAL_RCC_OscConfig>
 8001280:	4601      	mov	r1, r0
 8001282:	b108      	cbz	r0, 8001288 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001286:	e7fe      	b.n	8001286 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128a:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128e:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001294:	4668      	mov	r0, sp
 8001296:	f002 fb69 	bl	800396c <HAL_RCC_ClockConfig>
 800129a:	b108      	cbz	r0, 80012a0 <SystemClock_Config+0x74>
 800129c:	b672      	cpsid	i
  while (1)
 800129e:	e7fe      	b.n	800129e <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <SystemClock_Config+0xa4>)
 80012a2:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a4:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80012a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ac:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80012ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b2:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80012b4:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012b8:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ba:	f002 fc4d 	bl	8003b58 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	b108      	cbz	r0, 80012c4 <SystemClock_Config+0x98>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <SystemClock_Config+0x96>
}
 80012c4:	b01f      	add	sp, #124	@ 0x7c
 80012c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	00010187 	.word	0x00010187

080012d4 <main>:
{
 80012d4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4db8      	ldr	r5, [pc, #736]	@ (80015b8 <main+0x2e4>)
{
 80012d8:	b09a      	sub	sp, #104	@ 0x68
  HAL_Init();
 80012da:	f001 f967 	bl	80025ac <HAL_Init>
  SystemClock_Config();
 80012de:	f7ff ffa5 	bl	800122c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	2214      	movs	r2, #20
 80012e4:	2100      	movs	r1, #0
 80012e6:	a813      	add	r0, sp, #76	@ 0x4c
 80012e8:	f007 fc2e 	bl	8008b48 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80012ee:	48b3      	ldr	r0, [pc, #716]	@ (80015bc <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012f4:	616b      	str	r3, [r5, #20]
 80012f6:	696b      	ldr	r3, [r5, #20]
 80012f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	696b      	ldr	r3, [r5, #20]
 8001302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001306:	616b      	str	r3, [r5, #20]
 8001308:	696b      	ldr	r3, [r5, #20]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	9303      	str	r3, [sp, #12]
 8001310:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	696b      	ldr	r3, [r5, #20]
 8001314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001318:	616b      	str	r3, [r5, #20]
 800131a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001322:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001328:	f002 f892 	bl	8003450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 800132c:	48a3      	ldr	r0, [pc, #652]	@ (80015bc <main+0x2e8>)
 800132e:	2200      	movs	r2, #0
 8001330:	f240 2156 	movw	r1, #598	@ 0x256
 8001334:	f002 f88c 	bl	8003450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001338:	48a1      	ldr	r0, [pc, #644]	@ (80015c0 <main+0x2ec>)
 800133a:	2200      	movs	r2, #0
 800133c:	2104      	movs	r1, #4
 800133e:	f002 f887 	bl	8003450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001342:	489f      	ldr	r0, [pc, #636]	@ (80015c0 <main+0x2ec>)
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800134a:	f002 f881 	bl	8003450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800135a:	f002 f879 	bl	8003450 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2701      	movs	r7, #1
 8001360:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	4895      	ldr	r0, [pc, #596]	@ (80015bc <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001370:	f001 ffaa 	bl	80032c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8001374:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	4891      	ldr	r0, [pc, #580]	@ (80015bc <main+0x2e8>)
 8001378:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f001 ffa1 	bl	80032c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001386:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	488d      	ldr	r0, [pc, #564]	@ (80015c0 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f001 ff99 	bl	80032c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001396:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	4889      	ldr	r0, [pc, #548]	@ (80015c0 <main+0x2ec>)
 800139a:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013a8:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f001 ff8c 	bl	80032c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	4883      	ldr	r0, [pc, #524]	@ (80015c0 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013bc:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f001 ff83 	bl	80032c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	a913      	add	r1, sp, #76	@ 0x4c
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	e9cd 7815 	strd	r7, r8, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f001 ff78 	bl	80032c8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d8:	696b      	ldr	r3, [r5, #20]
 80013da:	433b      	orrs	r3, r7
 80013dc:	616b      	str	r3, [r5, #20]
 80013de:	696b      	ldr	r3, [r5, #20]
 80013e0:	403b      	ands	r3, r7
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	696b      	ldr	r3, [r5, #20]
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	616b      	str	r3, [r5, #20]
 80013ee:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 80013f0:	4d74      	ldr	r5, [pc, #464]	@ (80015c4 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80013f6:	4622      	mov	r2, r4
 80013f8:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fa:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80013fc:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001400:	f001 fe5e 	bl	80030c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001404:	200d      	movs	r0, #13
 8001406:	f001 fe8d 	bl	8003124 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800140a:	4622      	mov	r2, r4
 800140c:	2105      	movs	r1, #5
 800140e:	200f      	movs	r0, #15
 8001410:	f001 fe56 	bl	80030c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001414:	200f      	movs	r0, #15
 8001416:	f001 fe85 	bl	8003124 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800141a:	4622      	mov	r2, r4
 800141c:	2105      	movs	r1, #5
 800141e:	2010      	movs	r0, #16
 8001420:	f001 fe4e 	bl	80030c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001424:	2010      	movs	r0, #16
 8001426:	f001 fe7d 	bl	8003124 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800142a:	4622      	mov	r2, r4
 800142c:	2105      	movs	r1, #5
 800142e:	2038      	movs	r0, #56	@ 0x38
 8001430:	f001 fe46 	bl	80030c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001434:	2038      	movs	r0, #56	@ 0x38
 8001436:	f001 fe75 	bl	8003124 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 800143a:	4622      	mov	r2, r4
 800143c:	2105      	movs	r1, #5
 800143e:	203c      	movs	r0, #60	@ 0x3c
 8001440:	f001 fe3e 	bl	80030c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001444:	203c      	movs	r0, #60	@ 0x3c
 8001446:	f001 fe6d 	bl	8003124 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 800144a:	2214      	movs	r2, #20
 800144c:	4621      	mov	r1, r4
 800144e:	a813      	add	r0, sp, #76	@ 0x4c
 8001450:	f007 fb7a 	bl	8008b48 <memset>
  hrtc.Instance = RTC;
 8001454:	4b5c      	ldr	r3, [pc, #368]	@ (80015c8 <main+0x2f4>)
  RTC_DateTypeDef sDate = {0};
 8001456:	940c      	str	r4, [sp, #48]	@ 0x30
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001458:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 800145c:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8001460:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001462:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8001464:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001468:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800146e:	f002 fcbe 	bl	8003dee <HAL_RTC_Init>
 8001472:	b108      	cbz	r0, 8001478 <main+0x1a4>
 8001474:	b672      	cpsid	i
  while (1)
 8001476:	e7fe      	b.n	8001476 <main+0x1a2>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001478:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sTime.Hours = 0x0;
 800147c:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sTime.Seconds = 0x0;
 8001480:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001484:	463a      	mov	r2, r7
 8001486:	a913      	add	r1, sp, #76	@ 0x4c
 8001488:	4628      	mov	r0, r5
 800148a:	f002 fd03 	bl	8003e94 <HAL_RTC_SetTime>
 800148e:	b108      	cbz	r0, 8001494 <main+0x1c0>
 8001490:	b672      	cpsid	i
  while (1)
 8001492:	e7fe      	b.n	8001492 <main+0x1be>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001494:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <main+0x2f8>)
 8001496:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001498:	463a      	mov	r2, r7
 800149a:	a90c      	add	r1, sp, #48	@ 0x30
 800149c:	4628      	mov	r0, r5
 800149e:	f002 fd53 	bl	8003f48 <HAL_RTC_SetDate>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b108      	cbz	r0, 80014aa <main+0x1d6>
 80014a6:	b672      	cpsid	i
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <main+0x1d4>
  hspi1.Instance = SPI1;
 80014aa:	4849      	ldr	r0, [pc, #292]	@ (80015d0 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ac:	f8df e140 	ldr.w	lr, [pc, #320]	@ 80015f0 <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014b0:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014b6:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014be:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014c2:	2510      	movs	r5, #16
 80014c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c8:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80014cc:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d2:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d6:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014da:	2308      	movs	r3, #8
 80014dc:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014de:	f002 fed2 	bl	8004286 <HAL_SPI_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b108      	cbz	r0, 80014ea <main+0x216>
 80014e6:	b672      	cpsid	i
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <main+0x214>
  huart1.Instance = USART1;
 80014ea:	483a      	ldr	r0, [pc, #232]	@ (80015d4 <main+0x300>)
  huart1.Init.BaudRate = 115200;
 80014ec:	4a3a      	ldr	r2, [pc, #232]	@ (80015d8 <main+0x304>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80014f0:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001502:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8001504:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001508:	f003 ff00 	bl	800530c <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	b108      	cbz	r0, 8001514 <main+0x240>
 8001510:	b672      	cpsid	i
  while (1)
 8001512:	e7fe      	b.n	8001512 <main+0x23e>
  huart2.Instance = USART2;
 8001514:	4831      	ldr	r0, [pc, #196]	@ (80015dc <main+0x308>)
  huart2.Init.BaudRate = 9600;
 8001516:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80015f4 <main+0x320>
 800151a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800151e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001522:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001526:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800152e:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	f003 feeb 	bl	800530c <HAL_UART_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	b108      	cbz	r0, 800153e <main+0x26a>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x268>
  huart3.Instance = USART3;
 800153e:	4828      	ldr	r0, [pc, #160]	@ (80015e0 <main+0x30c>)
 8001540:	4a28      	ldr	r2, [pc, #160]	@ (80015e4 <main+0x310>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001542:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001546:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800154a:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800154e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001552:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001556:	f003 fed9 	bl	800530c <HAL_UART_Init>
 800155a:	4604      	mov	r4, r0
 800155c:	b108      	cbz	r0, 8001562 <main+0x28e>
 800155e:	b672      	cpsid	i
  while (1)
 8001560:	e7fe      	b.n	8001560 <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	462a      	mov	r2, r5
 8001564:	4601      	mov	r1, r0
 8001566:	a813      	add	r0, sp, #76	@ 0x4c
 8001568:	f007 faee 	bl	8008b48 <memset>
  htim3.Instance = TIM3;
 800156c:	4d1e      	ldr	r5, [pc, #120]	@ (80015e8 <main+0x314>)
  htim3.Init.Prescaler = 8000;
 800156e:	481f      	ldr	r0, [pc, #124]	@ (80015ec <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	940e      	str	r4, [sp, #56]	@ 0x38
  htim3.Init.Prescaler = 8000;
 8001572:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001576:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 800157a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157e:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158c:	f003 fad8 	bl	8004b40 <HAL_TIM_Base_Init>
 8001590:	b108      	cbz	r0, 8001596 <main+0x2c2>
 8001592:	b672      	cpsid	i
  while (1)
 8001594:	e7fe      	b.n	8001594 <main+0x2c0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001596:	a913      	add	r1, sp, #76	@ 0x4c
 8001598:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800159c:	f003 fb0a 	bl	8004bb4 <HAL_TIM_ConfigClockSource>
 80015a0:	b108      	cbz	r0, 80015a6 <main+0x2d2>
 80015a2:	b672      	cpsid	i
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <main+0x2d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	900c      	str	r0, [sp, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015aa:	a90c      	add	r1, sp, #48	@ 0x30
 80015ac:	4628      	mov	r0, r5
 80015ae:	f003 fb9b 	bl	8004ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b2:	b308      	cbz	r0, 80015f8 <main+0x324>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0x2e2>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000400 	.word	0x48000400
 80015c4:	20001130 	.word	0x20001130
 80015c8:	40002800 	.word	0x40002800
 80015cc:	00010101 	.word	0x00010101
 80015d0:	200010cc 	.word	0x200010cc
 80015d4:	20000f94 	.word	0x20000f94
 80015d8:	40013800 	.word	0x40013800
 80015dc:	20000f0c 	.word	0x20000f0c
 80015e0:	20000e84 	.word	0x20000e84
 80015e4:	40004800 	.word	0x40004800
 80015e8:	2000101c 	.word	0x2000101c
 80015ec:	40000400 	.word	0x40000400
 80015f0:	40013000 	.word	0x40013000
 80015f4:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	4c57      	ldr	r4, [pc, #348]	@ (8001758 <main+0x484>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80015fa:	2218      	movs	r2, #24
 80015fc:	2100      	movs	r1, #0
 80015fe:	a813      	add	r0, sp, #76	@ 0x4c
 8001600:	f007 faa2 	bl	8008b48 <memset>
  hadc2.Instance = ADC2;
 8001604:	4a55      	ldr	r2, [pc, #340]	@ (800175c <main+0x488>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001606:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001608:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160a:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800160c:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800160e:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001612:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001616:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800161c:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 800161e:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001620:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001624:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001628:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800162a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800162c:	f001 f82c 	bl	8002688 <HAL_ADC_Init>
 8001630:	b108      	cbz	r0, 8001636 <main+0x362>
 8001632:	b672      	cpsid	i
  while (1)
 8001634:	e7fe      	b.n	8001634 <main+0x360>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001636:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfig.Offset = 0;
 800163a:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Channel = ADC_CHANNEL_2;
 800163e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001640:	a913      	add	r1, sp, #76	@ 0x4c
 8001642:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001644:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001648:	f001 fb20 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800164c:	4605      	mov	r5, r0
 800164e:	b108      	cbz	r0, 8001654 <main+0x380>
 8001650:	b672      	cpsid	i
  while (1)
 8001652:	e7fe      	b.n	8001652 <main+0x37e>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001654:	4c42      	ldr	r4, [pc, #264]	@ (8001760 <main+0x48c>)
  ADC_MultiModeTypeDef multimode = {0};
 8001656:	900e      	str	r0, [sp, #56]	@ 0x38
 8001658:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800165c:	4601      	mov	r1, r0
 800165e:	2218      	movs	r2, #24
 8001660:	a813      	add	r0, sp, #76	@ 0x4c
 8001662:	f007 fa71 	bl	8008b48 <memset>
  hadc3.Instance = ADC3;
 8001666:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <main+0x490>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001668:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800166c:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001672:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001676:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167a:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 800167e:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001680:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001684:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001686:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001688:	f000 fffe 	bl	8002688 <HAL_ADC_Init>
 800168c:	b108      	cbz	r0, 8001692 <main+0x3be>
 800168e:	b672      	cpsid	i
  while (1)
 8001690:	e7fe      	b.n	8001690 <main+0x3bc>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001692:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001694:	a90c      	add	r1, sp, #48	@ 0x30
 8001696:	4620      	mov	r0, r4
 8001698:	f001 fc7c 	bl	8002f94 <HAL_ADCEx_MultiModeConfigChannel>
 800169c:	b108      	cbz	r0, 80016a2 <main+0x3ce>
 800169e:	b672      	cpsid	i
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_12;
 80016a2:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016a4:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfig.Offset = 0;
 80016a8:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ac:	a913      	add	r1, sp, #76	@ 0x4c
 80016ae:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b0:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016b4:	f001 faea 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b108      	cbz	r0, 80016c0 <main+0x3ec>
 80016bc:	b672      	cpsid	i
  while (1)
 80016be:	e7fe      	b.n	80016be <main+0x3ea>
  hspi2.Instance = SPI2;
 80016c0:	4829      	ldr	r0, [pc, #164]	@ (8001768 <main+0x494>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016c2:	492a      	ldr	r1, [pc, #168]	@ (800176c <main+0x498>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016c4:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016c6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016ca:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016da:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80016de:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016e4:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e8:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ea:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ec:	2308      	movs	r3, #8
 80016ee:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016f0:	f002 fdc9 	bl	8004286 <HAL_SPI_Init>
 80016f4:	4607      	mov	r7, r0
 80016f6:	b108      	cbz	r0, 80016fc <main+0x428>
 80016f8:	b672      	cpsid	i
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x426>
  osThreadDef(ControllingLED, StartControllingLED, osPriorityIdle, 0, 256);
 80016fc:	4c1c      	ldr	r4, [pc, #112]	@ (8001770 <main+0x49c>)
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	ad05      	add	r5, sp, #20
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001708:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControllingLEDHandle = osThreadCreate(osThread(ControllingLED), NULL);
 800170c:	4639      	mov	r1, r7
 800170e:	a805      	add	r0, sp, #20
 8001710:	f003 fe9a 	bl	8005448 <osThreadCreate>
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <main+0x4a0>)
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 8001716:	f104 060c 	add.w	r6, r4, #12
  ControllingLEDHandle = osThreadCreate(osThread(ControllingLED), NULL);
 800171a:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 800171c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800171e:	ad0c      	add	r5, sp, #48	@ 0x30
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001726:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800172a:	4639      	mov	r1, r7
 800172c:	a80c      	add	r0, sp, #48	@ 0x30
 800172e:	f003 fe8b 	bl	8005448 <osThreadCreate>
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <main+0x4a4>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8001734:	3428      	adds	r4, #40	@ 0x28
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8001736:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	ad13      	add	r5, sp, #76	@ 0x4c
 800173c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001742:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001746:	4639      	mov	r1, r7
 8001748:	a813      	add	r0, sp, #76	@ 0x4c
 800174a:	f003 fe7d 	bl	8005448 <osThreadCreate>
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <main+0x4a8>)
 8001750:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001752:	f003 fe74 	bl	800543e <osKernelStart>
  while (1)
 8001756:	e7fe      	b.n	8001756 <main+0x482>
 8001758:	20001228 	.word	0x20001228
 800175c:	50000100 	.word	0x50000100
 8001760:	200011d8 	.word	0x200011d8
 8001764:	50000400 	.word	0x50000400
 8001768:	20001068 	.word	0x20001068
 800176c:	40003800 	.word	0x40003800
 8001770:	0800c710 	.word	0x0800c710
 8001774:	20000db4 	.word	0x20000db4
 8001778:	20000db0 	.word	0x20000db0
 800177c:	20000dac 	.word	0x20000dac

08001780 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001780:	6803      	ldr	r3, [r0, #0]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001786:	d101      	bne.n	800178c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001788:	f000 bf22 	b.w	80025d0 <HAL_IncTick>
}
 800178c:	4770      	bx	lr

0800178e <Error_Handler>:
 800178e:	b672      	cpsid	i
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x2>
	...

08001794 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8001794:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001796:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800179e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80017a2:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80017a6:	f001 fe53 	bl	8003450 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 80017aa:	4810      	ldr	r0, [pc, #64]	@ (80017ec <W25_ReadStatusReg1+0x58>)
 80017ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b0:	2201      	movs	r2, #1
 80017b2:	f10d 0106 	add.w	r1, sp, #6
 80017b6:	f002 fdd4 	bl	8004362 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 80017ba:	4604      	mov	r4, r0
 80017bc:	b940      	cbnz	r0, 80017d0 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 80017be:	480b      	ldr	r0, [pc, #44]	@ (80017ec <W25_ReadStatusReg1+0x58>)
 80017c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c4:	2201      	movs	r2, #1
 80017c6:	f10d 0107 	add.w	r1, sp, #7
 80017ca:	f002 ffc4 	bl	8004756 <HAL_SPI_Receive>
 80017ce:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017da:	f001 fe39 	bl	8003450 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80017de:	b91c      	cbnz	r4, 80017e8 <W25_ReadStatusReg1+0x54>
 80017e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80017e4:	b002      	add	sp, #8
 80017e6:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80017e8:	20ff      	movs	r0, #255	@ 0xff
 80017ea:	e7fb      	b.n	80017e4 <W25_ReadStatusReg1+0x50>
 80017ec:	200010cc 	.word	0x200010cc

080017f0 <W25_Busy>:

int W25_Busy(void)
{
 80017f0:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 80017f2:	f7ff ffcf 	bl	8001794 <W25_ReadStatusReg1>
}
 80017f6:	f000 0001 	and.w	r0, r0, #1
 80017fa:	bd08      	pop	{r3, pc}

080017fc <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8001800:	f000 fef2 	bl	80025e8 <HAL_GetTick>
 8001804:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8001806:	f7ff fff3 	bl	80017f0 <W25_Busy>
 800180a:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 800180c:	f000 feec 	bl	80025e8 <HAL_GetTick>
 8001810:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8001812:	b114      	cbz	r4, 800181a <W25_DelayWhileBusy+0x1e>
 8001814:	42ab      	cmp	r3, r5
 8001816:	d3f6      	bcc.n	8001806 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8001818:	2403      	movs	r4, #3
	return retval;
}
 800181a:	4620      	mov	r0, r4
 800181c:	bd70      	pop	{r4, r5, r6, pc}

0800181e <W25_Reset>:
void W25_Reset(){
 800181e:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f001 fe11 	bl	8003450 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f001 fe0a 	bl	8003450 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001846:	f001 fe03 	bl	8003450 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f001 fdfc 	bl	8003450 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800185e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001862:	f001 fdf5 	bl	8003450 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8001866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001874:	f001 bdec 	b.w	8003450 <HAL_GPIO_WritePin>

08001878 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 800187c:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001888:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800188c:	f001 fde0 	bl	8003450 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001890:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	aa03      	add	r2, sp, #12
 8001898:	2304      	movs	r3, #4
 800189a:	f10d 010b 	add.w	r1, sp, #11
 800189e:	4820      	ldr	r0, [pc, #128]	@ (8001920 <W25_ReadJedecID+0xa8>)
 80018a0:	f002 fe29 	bl	80044f6 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 80018a4:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 80018a6:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 80018a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f001 fdce 	bl	8003450 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <W25_ReadJedecID+0xac>)
 80018b6:	aa07      	add	r2, sp, #28
 80018b8:	f103 0710 	add.w	r7, r3, #16
 80018bc:	4616      	mov	r6, r2
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	6859      	ldr	r1, [r3, #4]
 80018c2:	4614      	mov	r4, r2
 80018c4:	c403      	stmia	r4!, {r0, r1}
 80018c6:	3308      	adds	r3, #8
 80018c8:	42bb      	cmp	r3, r7
 80018ca:	4622      	mov	r2, r4
 80018cc:	d1f7      	bne.n	80018be <W25_ReadJedecID+0x46>
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 80018d2:	4630      	mov	r0, r6
 80018d4:	f7fe fcdc 	bl	8000290 <strlen>
 80018d8:	4631      	mov	r1, r6
 80018da:	b282      	uxth	r2, r0
 80018dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e0:	4811      	ldr	r0, [pc, #68]	@ (8001928 <W25_ReadJedecID+0xb0>)
 80018e2:	f003 fc69 	bl	80051b8 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80018e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80018ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	490e      	ldr	r1, [pc, #56]	@ (800192c <W25_ReadJedecID+0xb4>)
 80018f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80018f6:	a804      	add	r0, sp, #16
 80018f8:	f006 ffca 	bl	8008890 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 80018fc:	a904      	add	r1, sp, #16
 80018fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001902:	220b      	movs	r2, #11
 8001904:	4808      	ldr	r0, [pc, #32]	@ (8001928 <W25_ReadJedecID+0xb0>)
 8001906:	f003 fc57 	bl	80051b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 800190a:	4909      	ldr	r1, [pc, #36]	@ (8001930 <W25_ReadJedecID+0xb8>)
 800190c:	4806      	ldr	r0, [pc, #24]	@ (8001928 <W25_ReadJedecID+0xb0>)
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	2201      	movs	r2, #1
 8001914:	f003 fc50 	bl	80051b8 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8001918:	4628      	mov	r0, r5
 800191a:	b00d      	add	sp, #52	@ 0x34
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191e:	bf00      	nop
 8001920:	200010cc 	.word	0x200010cc
 8001924:	0800c928 	.word	0x0800c928
 8001928:	20000f94 	.word	0x20000f94
 800192c:	0800c915 	.word	0x0800c915
 8001930:	0800c926 	.word	0x0800c926

08001934 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8001934:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001936:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800193e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001942:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001946:	f001 fd83 	bl	8003450 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	f10d 0107 	add.w	r1, sp, #7
 8001952:	2201      	movs	r2, #1
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <W25_WriteEnable+0x3c>)
 8001956:	f002 fd04 	bl	8004362 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800195a:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800195c:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800195e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001966:	f001 fd73 	bl	8003450 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 800196a:	4620      	mov	r0, r4
 800196c:	b002      	add	sp, #8
 800196e:	bd10      	pop	{r4, pc}
 8001970:	200010cc 	.word	0x200010cc

08001974 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8001974:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8001976:	2320      	movs	r3, #32
 8001978:	f88d 3004 	strb.w	r3, [sp, #4]
 800197c:	0c03      	lsrs	r3, r0, #16
 800197e:	ba40      	rev16	r0, r0
 8001980:	f88d 3005 	strb.w	r3, [sp, #5]
 8001984:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8001988:	f7ff ffd4 	bl	8001934 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001996:	f001 fd5b 	bl	8003450 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800199a:	2204      	movs	r2, #4
 800199c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a0:	eb0d 0102 	add.w	r1, sp, r2
 80019a4:	4808      	ldr	r0, [pc, #32]	@ (80019c8 <W25_SectorErase+0x54>)
 80019a6:	f002 fcdc 	bl	8004362 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80019aa:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 80019ac:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80019ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b6:	f001 fd4b 	bl	8003450 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80019ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019be:	f7ff ff1d 	bl	80017fc <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 80019c2:	4620      	mov	r0, r4
 80019c4:	b002      	add	sp, #8
 80019c6:	bd10      	pop	{r4, pc}
 80019c8:	200010cc 	.word	0x200010cc

080019cc <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 80019cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80019d0:	4606      	mov	r6, r0
 80019d2:	4688      	mov	r8, r1
 80019d4:	4617      	mov	r7, r2
	int retval;
	W25_WriteEnable(); // Make sure we can write...
 80019d6:	f7ff ffad 	bl	8001934 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80019da:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8001a5c <W25_PageProgram+0x90>
	while(count) {
 80019de:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80019e0:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80019e4:	b91f      	cbnz	r7, 80019ee <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 80019e6:	4620      	mov	r0, r4
 80019e8:	b002      	add	sp, #8
 80019ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80019ee:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80019f0:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80019f2:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80019f6:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80019f8:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80019fc:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001a00:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001a0a:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8001a0e:	bf28      	it	cs
 8001a10:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001a12:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001a16:	f001 fd1b 	bl	8003450 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <W25_PageProgram+0x90>)
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	eb0d 0102 	add.w	r1, sp, r2
 8001a26:	f002 fc9c 	bl	8004362 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	b938      	cbnz	r0, 8001a3e <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	b2aa      	uxth	r2, r5
 8001a34:	4641      	mov	r1, r8
 8001a36:	4650      	mov	r0, sl
 8001a38:	f002 fc93 	bl	8004362 <HAL_SPI_Transmit>
 8001a3c:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a48:	f001 fd02 	bl	8003450 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8001a50:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8001a52:	442e      	add	r6, r5
		buf += count_this_pass;
 8001a54:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001a56:	f7ff fed1 	bl	80017fc <W25_DelayWhileBusy>
 8001a5a:	e7c3      	b.n	80019e4 <W25_PageProgram+0x18>
 8001a5c:	200010cc 	.word	0x200010cc

08001a60 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8001a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001a62:	2303      	movs	r3, #3
 8001a64:	f88d 3004 	strb.w	r3, [sp, #4]
 8001a68:	0c03      	lsrs	r3, r0, #16
 8001a6a:	ba40      	rev16	r0, r0
 8001a6c:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8001a70:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8001a7a:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001a7c:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001a7e:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001a82:	f001 fce5 	bl	8003450 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8001a86:	2204      	movs	r2, #4
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <W25_ReadData+0x60>)
 8001a8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a8e:	eb0d 0102 	add.w	r1, sp, r2
 8001a92:	f002 fc66 	bl	8004362 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8001a96:	4604      	mov	r4, r0
 8001a98:	b978      	cbnz	r0, 8001aba <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <W25_ReadData+0x60>)
 8001a9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001aa0:	b2b2      	uxth	r2, r6
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f002 fe57 	bl	8004756 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	b130      	cbz	r0, 8001aba <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab6:	f001 fccb 	bl	8003450 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8001aba:	4620      	mov	r0, r4
 8001abc:	b002      	add	sp, #8
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	200010cc 	.word	0x200010cc

08001ac4 <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001ac4:	b500      	push	{lr}
    struct tm timeinfo;
		uint8_t output_buffer[128];
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001ac6:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001ac8:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001aca:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001ace:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8001ad0:	6843      	ldr	r3, [r0, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8001ad6:	6803      	ldr	r3, [r0, #0]
 8001ad8:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8001ada:	680b      	ldr	r3, [r1, #0]
 8001adc:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8001ade:	684b      	ldr	r3, [r1, #4]
 8001ae0:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8001ae2:	688b      	ldr	r3, [r1, #8]
 8001ae4:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8001ae6:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8001aee:	f007 f919 	bl	8008d24 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8001af2:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8001af6:	3070      	adds	r0, #112	@ 0x70
 8001af8:	b00b      	add	sp, #44	@ 0x2c
 8001afa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b00 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8001b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b04:	ed2d 8b04 	vpush	{d8-d9}
 8001b08:	4604      	mov	r4, r0
 8001b0a:	b09b      	sub	sp, #108	@ 0x6c
 8001b0c:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001b10:	4601      	mov	r1, r0
 8001b12:	3010      	adds	r0, #16
 8001b14:	f7ff ffd6 	bl	8001ac4 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001b18:	69a3      	ldr	r3, [r4, #24]
 8001b1a:	9314      	str	r3, [sp, #80]	@ 0x50
 8001b1c:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001b20:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001b22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001b24:	9315      	str	r3, [sp, #84]	@ 0x54
 8001b26:	f7fe fd1f 	bl	8000568 <__aeabi_f2d>
 8001b2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8001b2e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001b30:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b34:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8001b38:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8001b3c:	f7fe fd14 	bl	8000568 <__aeabi_f2d>
 8001b40:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8001b44:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8001b48:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8001b4c:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8001b50:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8001b52:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4811      	ldr	r0, [pc, #68]	@ (8001ba0 <format_rmc_data+0xa0>)
 8001b5c:	4911      	ldr	r1, [pc, #68]	@ (8001ba4 <format_rmc_data+0xa4>)
 8001b5e:	9608      	str	r6, [sp, #32]
 8001b60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001b64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <format_rmc_data+0xa8>)
 8001b68:	f8cd 9008 	str.w	r9, [sp, #8]
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	bf08      	it	eq
 8001b70:	4601      	moveq	r1, r0
 8001b72:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001b76:	e9cd 5300 	strd	r5, r3, [sp]
 8001b7a:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8001b7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8001b80:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8001b84:	ed8d 8b06 	vstr	d8, [sp, #24]
 8001b88:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8001b8c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8001b90:	f006 fe4a 	bl	8008828 <sniprintf>
}
 8001b94:	b01b      	add	sp, #108	@ 0x6c
 8001b96:	ecbd 8b04 	vpop	{d8-d9}
 8001b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800c97a 	.word	0x0800c97a
 8001ba4:	0800c974 	.word	0x0800c974
 8001ba8:	0800c982 	.word	0x0800c982

08001bac <saveRMC>:
            osMailFree(uint8MailQueue, mail);
        }
    }
}

void saveRMC(){
 8001bac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8001bae:	4c3d      	ldr	r4, [pc, #244]	@ (8001ca4 <saveRMC+0xf8>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8001bb0:	483d      	ldr	r0, [pc, #244]	@ (8001ca8 <saveRMC+0xfc>)
 8001bb2:	f000 fcaf 	bl	8002514 <Debug_printf>
	W25_Reset();
 8001bb6:	f7ff fe32 	bl	800181e <W25_Reset>
	if (is_erased_rmc == 0){
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	b92b      	cbnz	r3, 8001bca <saveRMC+0x1e>
		W25_SectorErase(address_rmc);
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <saveRMC+0x100>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f7ff fed7 	bl	8001974 <W25_SectorErase>
		is_erased_rmc = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8001bca:	4a39      	ldr	r2, [pc, #228]	@ (8001cb0 <saveRMC+0x104>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8001bd0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001bd4:	461c      	mov	r4, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b109      	cbz	r1, 8001bde <saveRMC+0x32>
 8001bda:	7811      	ldrb	r1, [r2, #0]
 8001bdc:	b111      	cbz	r1, 8001be4 <saveRMC+0x38>
	for(size_t i = 0; i < 128; i++){
 8001bde:	2b80      	cmp	r3, #128	@ 0x80
 8001be0:	d1f6      	bne.n	8001bd0 <saveRMC+0x24>
	int k = 0;
 8001be2:	2400      	movs	r4, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08x", address_rmc);
 8001be4:	4d31      	ldr	r5, [pc, #196]	@ (8001cac <saveRMC+0x100>)
 8001be6:	4933      	ldr	r1, [pc, #204]	@ (8001cb4 <saveRMC+0x108>)
 8001be8:	682a      	ldr	r2, [r5, #0]
 8001bea:	a801      	add	r0, sp, #4
 8001bec:	f006 fe50 	bl	8008890 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8001bf0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	a901      	add	r1, sp, #4
 8001bf8:	482f      	ldr	r0, [pc, #188]	@ (8001cb8 <saveRMC+0x10c>)
 8001bfa:	f003 fadd 	bl	80051b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8001bfe:	492f      	ldr	r1, [pc, #188]	@ (8001cbc <saveRMC+0x110>)
 8001c00:	482d      	ldr	r0, [pc, #180]	@ (8001cb8 <saveRMC+0x10c>)
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	2201      	movs	r2, #1
 8001c08:	f003 fad6 	bl	80051b8 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8001c0c:	1933      	adds	r3, r6, r4
 8001c0e:	223b      	movs	r2, #59	@ 0x3b
 8001c10:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8001c12:	1ca3      	adds	r3, r4, #2
 8001c14:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8001c18:	50f1      	str	r1, [r6, r3]
 8001c1a:	18f2      	adds	r2, r6, r3
 8001c1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001c20:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8001c22:	f104 0008 	add.w	r0, r4, #8
 8001c26:	f1c4 0266 	rsb	r2, r4, #102	@ 0x66
 8001c2a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4430      	add	r0, r6
 8001c32:	f006 ff89 	bl	8008b48 <memset>
	}

//	SendUInt8ArrayToMailQueue(rmcBufferDemo,128);

	W25_Reset();
 8001c36:	f7ff fdf2 	bl	800181e <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8001c3a:	2280      	movs	r2, #128	@ 0x80
 8001c3c:	491c      	ldr	r1, [pc, #112]	@ (8001cb0 <saveRMC+0x104>)
 8001c3e:	6828      	ldr	r0, [r5, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 8001c40:	4c1f      	ldr	r4, [pc, #124]	@ (8001cc0 <saveRMC+0x114>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8001c42:	f7ff fec3 	bl	80019cc <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8001c46:	491f      	ldr	r1, [pc, #124]	@ (8001cc4 <saveRMC+0x118>)
 8001c48:	481b      	ldr	r0, [pc, #108]	@ (8001cb8 <saveRMC+0x10c>)
 8001c4a:	f000 fc53 	bl	80024f4 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8001c4e:	4918      	ldr	r1, [pc, #96]	@ (8001cb0 <saveRMC+0x104>)
 8001c50:	4819      	ldr	r0, [pc, #100]	@ (8001cb8 <saveRMC+0x10c>)
 8001c52:	f000 fc4f 	bl	80024f4 <uart_transmit_string>
	current_addr = address_rmc;
 8001c56:	682b      	ldr	r3, [r5, #0]
 8001c58:	6023      	str	r3, [r4, #0]
	address_rmc+=128;
 8001c5a:	3380      	adds	r3, #128	@ 0x80
 8001c5c:	602b      	str	r3, [r5, #0]
	if(address_rmc % 0x1000 == 0x0000){
 8001c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c62:	b92b      	cbnz	r3, 8001c70 <saveRMC+0xc4>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8001c64:	4818      	ldr	r0, [pc, #96]	@ (8001cc8 <saveRMC+0x11c>)
 8001c66:	f000 fc55 	bl	8002514 <Debug_printf>
		W25_SectorErase(address_rmc);
 8001c6a:	6828      	ldr	r0, [r5, #0]
 8001c6c:	f7ff fe82 	bl	8001974 <W25_SectorErase>
	}
	if(current_addr >= 0x89C0){
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	f648 13bf 	movw	r3, #35263	@ 0x89bf
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d904      	bls.n	8001c84 <saveRMC+0xd8>
		address_rmc = 0x3000;
 8001c7a:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8001c7e:	6028      	str	r0, [r5, #0]
		W25_SectorErase(address_rmc);
 8001c80:	f7ff fe78 	bl	8001974 <W25_SectorErase>
	}
	HAL_Delay(1000);
 8001c84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c88:	f000 fcb4 	bl	80025f4 <HAL_Delay>
	Debug_printf("\n");
 8001c8c:	480f      	ldr	r0, [pc, #60]	@ (8001ccc <saveRMC+0x120>)
 8001c8e:	f000 fc41 	bl	8002514 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8001c92:	480f      	ldr	r0, [pc, #60]	@ (8001cd0 <saveRMC+0x124>)
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	2100      	movs	r1, #0
}
 8001c98:	b004      	add	sp, #16
 8001c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8001c9e:	f006 bf53 	b.w	8008b48 <memset>
 8001ca2:	bf00      	nop
 8001ca4:	20001430 	.word	0x20001430
 8001ca8:	0800c9b4 	.word	0x0800c9b4
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20001330 	.word	0x20001330
 8001cb4:	0800c952 	.word	0x0800c952
 8001cb8:	20000f94 	.word	0x20000f94
 8001cbc:	0800c7ce 	.word	0x0800c7ce
 8001cc0:	20001434 	.word	0x20001434
 8001cc4:	0800c9d5 	.word	0x0800c9d5
 8001cc8:	0800c9f5 	.word	0x0800c9f5
 8001ccc:	0800cb52 	.word	0x0800cb52
 8001cd0:	200013b0 	.word	0x200013b0

08001cd4 <sendRMCDataWithAddrToGSM>:
		}
	}
}

void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8001cd4:	6983      	ldr	r3, [r0, #24]
 8001cd6:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8001cdc:	dd18      	ble.n	8001d10 <sendRMCDataWithAddrToGSM+0x3c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQLEDId, osWaitForever); // Allocate memory for mail
 8001cde:	4e0d      	ldr	r6, [pc, #52]	@ (8001d14 <sendRMCDataWithAddrToGSM+0x40>)
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8001ce0:	490d      	ldr	r1, [pc, #52]	@ (8001d18 <sendRMCDataWithAddrToGSM+0x44>)
 8001ce2:	480e      	ldr	r0, [pc, #56]	@ (8001d1c <sendRMCDataWithAddrToGSM+0x48>)
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	2221      	movs	r2, #33	@ 0x21
 8001cea:	f003 fa65 	bl	80051b8 <HAL_UART_Transmit>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQLEDId, osWaitForever); // Allocate memory for mail
 8001cee:	6830      	ldr	r0, [r6, #0]
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	f003 fc7a 	bl	80055ec <osMailAlloc>
 8001cf8:	4604      	mov	r4, r0
		if (mail != NULL) {
 8001cfa:	b148      	cbz	r0, 8001d10 <sendRMCDataWithAddrToGSM+0x3c>
			*mail = *mail_data; // Copy data into allocated memory
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	2260      	movs	r2, #96	@ 0x60
 8001d00:	f007 fd2f 	bl	8009762 <memcpy>
			osMailPut(RMC_MailQLEDId, mail); // Put message in queue
 8001d04:	6830      	ldr	r0, [r6, #0]
 8001d06:	4621      	mov	r1, r4
		}
	}
}
 8001d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQLEDId, mail); // Put message in queue
 8001d0c:	f003 bc73 	b.w	80055f6 <osMailPut>
}
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
 8001d12:	bf00      	nop
 8001d14:	2000025c 	.word	0x2000025c
 8001d18:	0800ca12 	.word	0x0800ca12
 8001d1c:	20000f94 	.word	0x20000f94

08001d20 <receiveRMCDataFromGPS>:
			osMailPut(addr_MailQGSMId, mail); // Send the mail
		}
	}
}

void receiveRMCDataFromGPS(void) {
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8001d22:	4f5d      	ldr	r7, [pc, #372]	@ (8001e98 <receiveRMCDataFromGPS+0x178>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8001d24:	495d      	ldr	r1, [pc, #372]	@ (8001e9c <receiveRMCDataFromGPS+0x17c>)
 8001d26:	485e      	ldr	r0, [pc, #376]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
void receiveRMCDataFromGPS(void) {
 8001d28:	b09f      	sub	sp, #124	@ 0x7c
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8001d2a:	f000 fbe3 	bl	80024f4 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	a809      	add	r0, sp, #36	@ 0x24
 8001d36:	f003 fc89 	bl	800564c <osMailGet>
	if(evt.status == osEventMail){
 8001d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	f040 80a9 	bne.w	8001e94 <receiveRMCDataFromGPS+0x174>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8001d42:	4958      	ldr	r1, [pc, #352]	@ (8001ea4 <receiveRMCDataFromGPS+0x184>)
 8001d44:	4856      	ldr	r0, [pc, #344]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
//		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
//		uart_transmit_string(&huart1, output_buffer);
//		uart_transmit_string(&huart1, (uint8_t*)"\n\n");

		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8001d46:	4c58      	ldr	r4, [pc, #352]	@ (8001ea8 <receiveRMCDataFromGPS+0x188>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8001d48:	f000 fbd4 	bl	80024f4 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8001d4c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8001d4e:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	@ 0x38
 8001d52:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8001d56:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	@ 0x48
 8001d5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8001d5e:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8001d60:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8001d62:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8001d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8001d66:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8001d6a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8001d6e:	f896 3050 	ldrb.w	r3, [r6, #80]	@ 0x50
 8001d72:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8001d76:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8001d78:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 8001d7a:	6833      	ldr	r3, [r6, #0]
 8001d7c:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 8001d7e:	6873      	ldr	r3, [r6, #4]
 8001d80:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8001d82:	68b3      	ldr	r3, [r6, #8]
 8001d84:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8001d86:	69b3      	ldr	r3, [r6, #24]
 8001d88:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8001d8a:	6973      	ldr	r3, [r6, #20]
 8001d8c:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;


		get_RTC_time_date(&rmc_flash);
 8001d8e:	4620      	mov	r0, r4
		rmc_flash.date.Day = receivedData->date.Day;
 8001d90:	6933      	ldr	r3, [r6, #16]
 8001d92:	6123      	str	r3, [r4, #16]
		get_RTC_time_date(&rmc_flash);
 8001d94:	f7ff f9e0 	bl	8001158 <get_RTC_time_date>
//		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
//		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8001d98:	68a3      	ldr	r3, [r4, #8]
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <receiveRMCDataFromGPS+0x18c>)
 8001da4:	2146      	movs	r1, #70	@ 0x46
 8001da6:	a80c      	add	r0, sp, #48	@ 0x30
 8001da8:	f006 fd3e 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001dac:	483c      	ldr	r0, [pc, #240]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
 8001dae:	a90c      	add	r1, sp, #48	@ 0x30
 8001db0:	f000 fba0 	bl	80024f4 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FROM GPS AT SPI FLASH : %d/%d/%d\n", rmc_flash.date.Day, rmc_flash.date.Mon, rmc_flash.date.Yr);
 8001db4:	69a3      	ldr	r3, [r4, #24]
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	6963      	ldr	r3, [r4, #20]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb0 <receiveRMCDataFromGPS+0x190>)
 8001dc0:	2146      	movs	r1, #70	@ 0x46
 8001dc2:	a80c      	add	r0, sp, #48	@ 0x30
 8001dc4:	f006 fd30 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001dc8:	4835      	ldr	r0, [pc, #212]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
 8001dca:	a90c      	add	r1, sp, #48	@ 0x30
 8001dcc:	f000 fb92 	bl	80024f4 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8001dd0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001dd4:	9306      	str	r3, [sp, #24]
 8001dd6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8001dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dde:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001de8:	2146      	movs	r1, #70	@ 0x46
 8001dea:	e9cd 2300 	strd	r2, r3, [sp]
 8001dee:	a80c      	add	r0, sp, #48	@ 0x30
 8001df0:	4a30      	ldr	r2, [pc, #192]	@ (8001eb4 <receiveRMCDataFromGPS+0x194>)
 8001df2:	f006 fd19 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001df6:	482a      	ldr	r0, [pc, #168]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
 8001df8:	a90c      	add	r1, sp, #48	@ 0x30
 8001dfa:	f000 fb7b 	bl	80024f4 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8001dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001e00:	9304      	str	r3, [sp, #16]
 8001e02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001e04:	f7fe fbb0 	bl	8000568 <__aeabi_f2d>
 8001e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e0c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001e0e:	f7fe fbab 	bl	8000568 <__aeabi_f2d>
 8001e12:	4a29      	ldr	r2, [pc, #164]	@ (8001eb8 <receiveRMCDataFromGPS+0x198>)
 8001e14:	e9cd 0100 	strd	r0, r1, [sp]
 8001e18:	2146      	movs	r1, #70	@ 0x46
 8001e1a:	a80c      	add	r0, sp, #48	@ 0x30
 8001e1c:	f006 fd04 	bl	8008828 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001e20:	481f      	ldr	r0, [pc, #124]	@ (8001ea0 <receiveRMCDataFromGPS+0x180>)
 8001e22:	a90c      	add	r1, sp, #48	@ 0x30
 8001e24:	f000 fb66 	bl	80024f4 <uart_transmit_string>

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8001e28:	4924      	ldr	r1, [pc, #144]	@ (8001ebc <receiveRMCDataFromGPS+0x19c>)
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff fe67 	bl	8001b00 <format_rmc_data>

		if(rmc_flash.date.Yr >= 24){
 8001e32:	69a3      	ldr	r3, [r4, #24]
 8001e34:	2b17      	cmp	r3, #23
 8001e36:	dd29      	ble.n	8001e8c <receiveRMCDataFromGPS+0x16c>
			//sendRMCDataToGSM(&rmc_flash);
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8001e38:	4d21      	ldr	r5, [pc, #132]	@ (8001ec0 <receiveRMCDataFromGPS+0x1a0>)
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
			mail_gsm.rmc.speed = rmc_flash.speed;
 8001e3a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001e3c:	62aa      	str	r2, [r5, #40]	@ 0x28
			mail_gsm.rmc.course = rmc_flash.course;
 8001e3e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001e40:	62ea      	str	r2, [r5, #44]	@ 0x2c
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8001e42:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
			mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8001e46:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8001e4a:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
			mail_gsm.rmc.isValid = rmc_flash.isValid;
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
			mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
			mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8001e4e:	61ab      	str	r3, [r5, #24]
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8001e50:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8001e54:	6963      	ldr	r3, [r4, #20]
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8001e56:	f885 2050 	strb.w	r2, [r5, #80]	@ 0x50
			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8001e5a:	616b      	str	r3, [r5, #20]
			mail_gsm.rmc.isValid = rmc_flash.isValid;
 8001e5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8001e5e:	6923      	ldr	r3, [r4, #16]
			mail_gsm.rmc.isValid = rmc_flash.isValid;
 8001e60:	632a      	str	r2, [r5, #48]	@ 0x30
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8001e62:	e9c5 010e 	strd	r0, r1, [r5, #56]	@ 0x38
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8001e66:	6822      	ldr	r2, [r4, #0]
			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8001e68:	612b      	str	r3, [r5, #16]
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8001e6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
			mail_gsm.address = current_addr;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <receiveRMCDataFromGPS+0x1a4>)
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8001e70:	602a      	str	r2, [r5, #0]
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8001e72:	6862      	ldr	r2, [r4, #4]
			mail_gsm.address = current_addr;
 8001e74:	681b      	ldr	r3, [r3, #0]
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8001e76:	606a      	str	r2, [r5, #4]
			mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8001e78:	68a2      	ldr	r2, [r4, #8]
 8001e7a:	60aa      	str	r2, [r5, #8]
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8001e7c:	e9c5 0112 	strd	r0, r1, [r5, #72]	@ 0x48
			mail_gsm.address = current_addr;
 8001e80:	65ab      	str	r3, [r5, #88]	@ 0x58
//			sendAddresstoGSM();
			saveRMC();
 8001e82:	f7ff fe93 	bl	8001bac <saveRMC>
			sendRMCDataWithAddrToGSM(&mail_gsm);
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7ff ff24 	bl	8001cd4 <sendRMCDataWithAddrToGSM>
			countRMCReceived = 0;
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	4631      	mov	r1, r6
 8001e90:	f003 fc15 	bl	80056be <osMailFree>
		// Free memory after use
//		if(rmc_flash.date.Yr >= 24)
//			countRMCReceived++;
	}
}
 8001e94:	b01f      	add	sp, #124	@ 0x7c
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e98:	200002c0 	.word	0x200002c0
 8001e9c:	0800ca34 	.word	0x0800ca34
 8001ea0:	20000f94 	.word	0x20000f94
 8001ea4:	0800ca59 	.word	0x0800ca59
 8001ea8:	200012d8 	.word	0x200012d8
 8001eac:	0800ca7a 	.word	0x0800ca7a
 8001eb0:	0800caab 	.word	0x0800caab
 8001eb4:	0800cadb 	.word	0x0800cadb
 8001eb8:	0800cb16 	.word	0x0800cb16
 8001ebc:	20001330 	.word	0x20001330
 8001ec0:	20001278 	.word	0x20001278
 8001ec4:	20001434 	.word	0x20001434

08001ec8 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8001ec8:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8001eca:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <StartSpiFlash+0xa8>)
 8001ecc:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8001f88 <StartSpiFlash+0xc0>
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8c8 3000 	str.w	r3, [r8]
{
 8001ed6:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8001ed8:	2358      	movs	r3, #88	@ 0x58
 8001eda:	220b      	movs	r2, #11
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001edc:	2100      	movs	r1, #0
 8001ede:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8001ee0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001ee4:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001ee8:	f003 fb55 	bl	8005596 <osMailCreate>
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <StartSpiFlash+0xac>)
		osDelay(1500);
		//uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8001eee:	4e22      	ldr	r6, [pc, #136]	@ (8001f78 <StartSpiFlash+0xb0>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8001ef0:	4d22      	ldr	r5, [pc, #136]	@ (8001f7c <StartSpiFlash+0xb4>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001ef2:	6018      	str	r0, [r3, #0]
		osDelay(1500);
 8001ef4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001ef8:	f003 face 	bl	8005498 <osDelay>
		W25_Reset();
 8001efc:	f7ff fc8f 	bl	800181e <W25_Reset>
		W25_ReadJedecID();
 8001f00:	f7ff fcba 	bl	8001878 <W25_ReadJedecID>
		W25_Reset();
 8001f04:	f7ff fc8b 	bl	800181e <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	f8d8 0000 	ldr.w	r0, [r8]
 8001f0e:	4631      	mov	r1, r6
 8001f10:	f7ff fda6 	bl	8001a60 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <StartSpiFlash+0xb8>)
 8001f16:	aa04      	add	r2, sp, #16
 8001f18:	f103 0c10 	add.w	ip, r3, #16
 8001f1c:	4617      	mov	r7, r2
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	4614      	mov	r4, r2
 8001f24:	c403      	stmia	r4!, {r0, r1}
 8001f26:	3308      	adds	r3, #8
 8001f28:	4563      	cmp	r3, ip
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	d1f7      	bne.n	8001f1e <StartSpiFlash+0x56>
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	889b      	ldrh	r3, [r3, #4]
 8001f32:	6020      	str	r0, [r4, #0]
 8001f34:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8001f36:	4638      	mov	r0, r7
 8001f38:	f7fe f9aa 	bl	8000290 <strlen>
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	b282      	uxth	r2, r0
 8001f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f44:	4628      	mov	r0, r5
 8001f46:	f003 f937 	bl	80051b8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	4631      	mov	r1, r6
 8001f52:	4628      	mov	r0, r5
 8001f54:	f003 f930 	bl	80051b8 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8001f58:	f7ff fee2 	bl	8001d20 <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	4909      	ldr	r1, [pc, #36]	@ (8001f84 <StartSpiFlash+0xbc>)
 8001f60:	f000 fac8 	bl	80024f4 <uart_transmit_string>
		osDelay(1500);
 8001f64:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001f68:	f003 fa96 	bl	8005498 <osDelay>
	for(;;){
 8001f6c:	e7c2      	b.n	8001ef4 <StartSpiFlash+0x2c>
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000b54 	.word	0x20000b54
 8001f78:	200013b0 	.word	0x200013b0
 8001f7c:	20000f94 	.word	0x20000f94
 8001f80:	0800cb54 	.word	0x0800cb54
 8001f84:	0800cb51 	.word	0x0800cb51
 8001f88:	20001434 	.word	0x20001434

08001f8c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_MspInit+0x38>)
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	619a      	str	r2, [r3, #24]
 8001f96:	699a      	ldr	r2, [r3, #24]
{
 8001f98:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	f002 0201 	and.w	r2, r2, #1
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fa8:	61da      	str	r2, [r3, #28]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fbe:	f001 b87f 	b.w	80030c0 <HAL_NVIC_SetPriority>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	2214      	movs	r2, #20
{
 8001fcc:	b08a      	sub	sp, #40	@ 0x28
 8001fce:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	eb0d 0002 	add.w	r0, sp, r2
 8001fd6:	f006 fdb7 	bl	8008b48 <memset>
  if(hadc->Instance==ADC2)
 8001fda:	682b      	ldr	r3, [r5, #0]
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80020d4 <HAL_ADC_MspInit+0x10c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d137      	bne.n	8002052 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8001fe4:	4c3d      	ldr	r4, [pc, #244]	@ (80020dc <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001ff4:	9201      	str	r2, [sp, #4]
 8001ff6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200a:	2620      	movs	r6, #32
 800200c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002012:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002014:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f001 f956 	bl	80032c8 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002020:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80020f0 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002024:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002028:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800202a:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800202e:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002034:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002038:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800203e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002040:	f001 f89e 	bl	8003180 <HAL_DMA_Init>
 8002044:	b108      	cbz	r0, 800204a <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8002046:	f7ff fba2 	bl	800178e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800204a:	63ac      	str	r4, [r5, #56]	@ 0x38
 800204c:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800204e:	b00a      	add	sp, #40	@ 0x28
 8002050:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8002052:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <HAL_ADC_MspInit+0x118>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d1fa      	bne.n	800204e <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 800205a:	4c22      	ldr	r4, [pc, #136]	@ (80020e4 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800205c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	4822      	ldr	r0, [pc, #136]	@ (80020e8 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002060:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002064:	615a      	str	r2, [r3, #20]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800206c:	9203      	str	r2, [sp, #12]
 800206e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002080:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002086:	2303      	movs	r3, #3
 8002088:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f001 f91c 	bl	80032c8 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002090:	2080      	movs	r0, #128	@ 0x80
 8002092:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002096:	4915      	ldr	r1, [pc, #84]	@ (80020ec <HAL_ADC_MspInit+0x124>)
 8002098:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800209a:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800209e:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80020a2:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020a4:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a6:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80020aa:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ae:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80020b0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80020b2:	f001 f865 	bl	8003180 <HAL_DMA_Init>
 80020b6:	b108      	cbz	r0, 80020bc <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 80020b8:	f7ff fb69 	bl	800178e <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020bc:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2105      	movs	r1, #5
 80020c2:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80020c4:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80020c6:	f000 fffb 	bl	80030c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80020ca:	202f      	movs	r0, #47	@ 0x2f
 80020cc:	f001 f82a 	bl	8003124 <HAL_NVIC_EnableIRQ>
}
 80020d0:	e7bd      	b.n	800204e <HAL_ADC_MspInit+0x86>
 80020d2:	bf00      	nop
 80020d4:	50000100 	.word	0x50000100
 80020d8:	40021000 	.word	0x40021000
 80020dc:	20001194 	.word	0x20001194
 80020e0:	50000400 	.word	0x50000400
 80020e4:	20001150 	.word	0x20001150
 80020e8:	48000400 	.word	0x48000400
 80020ec:	40020458 	.word	0x40020458
 80020f0:	40020408 	.word	0x40020408

080020f4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80020f4:	6802      	ldr	r2, [r0, #0]
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_RTC_MspInit+0x20>)
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10a      	bne.n	8002112 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002100:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <HAL_RTC_MspInit+0x24>)
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002112:	4770      	bx	lr
 8002114:	40002800 	.word	0x40002800
 8002118:	10908100 	.word	0x10908100

0800211c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800211c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	2214      	movs	r2, #20
{
 8002120:	b08a      	sub	sp, #40	@ 0x28
 8002122:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	2100      	movs	r1, #0
 8002126:	eb0d 0002 	add.w	r0, sp, r2
 800212a:	f006 fd0d 	bl	8008b48 <memset>
  if(hspi->Instance==SPI1)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_SPI_MspInit+0x90>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d120      	bne.n	8002178 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <HAL_SPI_MspInit+0x94>)
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	699a      	ldr	r2, [r3, #24]
 8002142:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002150:	615a      	str	r2, [r3, #20]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800215c:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800215e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002162:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002166:	2305      	movs	r3, #5
 8002168:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <HAL_SPI_MspInit+0x98>)
 800216e:	a905      	add	r1, sp, #20
 8002170:	f001 f8aa 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002174:	b00a      	add	sp, #40	@ 0x28
 8002176:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8002178:	4a0f      	ldr	r2, [pc, #60]	@ (80021b8 <HAL_SPI_MspInit+0x9c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d1fa      	bne.n	8002174 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217e:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <HAL_SPI_MspInit+0x94>)
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002186:	61da      	str	r2, [r3, #28]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800218e:	9203      	str	r2, [sp, #12]
 8002190:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021a0:	9304      	str	r3, [sp, #16]
 80021a2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021a4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80021a8:	e7d9      	b.n	800215e <HAL_SPI_MspInit+0x42>
 80021aa:	bf00      	nop
 80021ac:	40013000 	.word	0x40013000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	40003800 	.word	0x40003800

080021bc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80021bc:	6802      	ldr	r2, [r0, #0]
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <HAL_TIM_Base_MspInit+0x24>)
 80021c0:	429a      	cmp	r2, r3
{
 80021c2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80021c4:	d10a      	bne.n	80021dc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c6:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	f042 0202 	orr.w	r2, r2, #2
 80021d0:	61da      	str	r2, [r3, #28]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80021dc:	b002      	add	sp, #8
 80021de:	4770      	bx	lr
 80021e0:	40000400 	.word	0x40000400

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b530      	push	{r4, r5, lr}
 80021e6:	4605      	mov	r5, r0
 80021e8:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	2214      	movs	r2, #20
 80021ec:	2100      	movs	r1, #0
 80021ee:	a807      	add	r0, sp, #28
 80021f0:	f006 fcaa 	bl	8008b48 <memset>
  if(huart->Instance==USART1)
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_UART_MspInit+0x13c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d137      	bne.n	800226c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021fc:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80021fe:	4c4a      	ldr	r4, [pc, #296]	@ (8002328 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002206:	619a      	str	r2, [r3, #24]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800220e:	9201      	str	r2, [sp, #4]
 8002210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8002228:	2302      	movs	r3, #2
 800222a:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222e:	2203      	movs	r2, #3
 8002230:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	a907      	add	r1, sp, #28
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002238:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f001 f844 	bl	80032c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002242:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002244:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224c:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002250:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002252:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002254:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002256:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002258:	4620      	mov	r0, r4
 800225a:	f000 ff91 	bl	8003180 <HAL_DMA_Init>
 800225e:	b108      	cbz	r0, 8002264 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002260:	f7ff fa95 	bl	800178e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002264:	676c      	str	r4, [r5, #116]	@ 0x74
 8002266:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002268:	b00d      	add	sp, #52	@ 0x34
 800226a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 800226c:	4a30      	ldr	r2, [pc, #192]	@ (8002330 <HAL_UART_MspInit+0x14c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d123      	bne.n	80022ba <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <HAL_UART_MspInit+0x140>)
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800227a:	61da      	str	r2, [r3, #28]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002282:	9203      	str	r2, [sp, #12]
 8002284:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	9304      	str	r3, [sp, #16]
 8002296:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	240c      	movs	r4, #12
 800229a:	2302      	movs	r3, #2
 800229c:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a0:	f04f 0c03 	mov.w	ip, #3
 80022a4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	a907      	add	r1, sp, #28
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ac:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022b0:	4c20      	ldr	r4, [pc, #128]	@ (8002334 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f001 f809 	bl	80032c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_UART_MspInit+0x154>)
 80022b8:	e7c3      	b.n	8002242 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 80022ba:	4a20      	ldr	r2, [pc, #128]	@ (800233c <HAL_UART_MspInit+0x158>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d1d3      	bne.n	8002268 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	481f      	ldr	r0, [pc, #124]	@ (8002340 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c4:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80022c6:	4c1f      	ldr	r4, [pc, #124]	@ (8002344 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022cc:	61da      	str	r2, [r3, #28]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80022d4:	9205      	str	r2, [sp, #20]
 80022d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022f4:	2103      	movs	r1, #3
 80022f6:	2307      	movs	r3, #7
 80022f8:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	a907      	add	r1, sp, #28
 80022fe:	f000 ffe3 	bl	80032c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002302:	4811      	ldr	r0, [pc, #68]	@ (8002348 <HAL_UART_MspInit+0x164>)
 8002304:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002306:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002308:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230c:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002312:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002314:	2320      	movs	r3, #32
 8002316:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231c:	e79b      	b.n	8002256 <HAL_UART_MspInit+0x72>
 800231e:	bf00      	nop
 8002320:	40013800 	.word	0x40013800
 8002324:	40021000 	.word	0x40021000
 8002328:	20000e40 	.word	0x20000e40
 800232c:	40020058 	.word	0x40020058
 8002330:	40004400 	.word	0x40004400
 8002334:	20000dfc 	.word	0x20000dfc
 8002338:	4002006c 	.word	0x4002006c
 800233c:	40004800 	.word	0x40004800
 8002340:	48000400 	.word	0x48000400
 8002344:	20000db8 	.word	0x20000db8
 8002348:	40020030 	.word	0x40020030

0800234c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_InitTick+0x88>)
{
 800234e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	61da      	str	r2, [r3, #28]
 8002358:	69db      	ldr	r3, [r3, #28]
{
 800235a:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	9302      	str	r3, [sp, #8]
{
 8002362:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002364:	a901      	add	r1, sp, #4
 8002366:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002368:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800236a:	f001 fbd7 	bl	8003b1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800236e:	9b06      	ldr	r3, [sp, #24]
 8002370:	bb53      	cbnz	r3, 80023c8 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002372:	f001 fba3 	bl	8003abc <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002376:	4e18      	ldr	r6, [pc, #96]	@ (80023d8 <HAL_InitTick+0x8c>)
 8002378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800237c:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800237e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002382:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_InitTick+0x90>)
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 800238c:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 800238e:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8002398:	f002 fbd2 	bl	8004b40 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800239c:	4604      	mov	r4, r0
 800239e:	b980      	cbnz	r0, 80023c2 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023a0:	4630      	mov	r0, r6
 80023a2:	f002 fa8f 	bl	80048c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80023a6:	4604      	mov	r4, r0
 80023a8:	b958      	cbnz	r0, 80023c2 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f000 feba 	bl	8003124 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b0:	2d0f      	cmp	r5, #15
 80023b2:	d80d      	bhi.n	80023d0 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023b4:	4622      	mov	r2, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	201c      	movs	r0, #28
 80023ba:	f000 fe81 	bl	80030c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_InitTick+0x94>)
 80023c0:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80023c2:	4620      	mov	r0, r4
 80023c4:	b008      	add	sp, #32
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023c8:	f001 fb78 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
 80023cc:	0040      	lsls	r0, r0, #1
 80023ce:	e7d2      	b.n	8002376 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80023d0:	2401      	movs	r4, #1
 80023d2:	e7f6      	b.n	80023c2 <HAL_InitTick+0x76>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	20001438 	.word	0x20001438
 80023dc:	000f4240 	.word	0x000f4240
 80023e0:	20000010 	.word	0x20000010

080023e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler>

080023e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <HardFault_Handler>

080023e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler>

080023ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <BusFault_Handler>

080023ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler>

080023ee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ee:	4770      	bx	lr

080023f0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80023f0:	4801      	ldr	r0, [pc, #4]	@ (80023f8 <DMA1_Channel3_IRQHandler+0x8>)
 80023f2:	f000 bf22 	b.w	800323a <HAL_DMA_IRQHandler>
 80023f6:	bf00      	nop
 80023f8:	20000db8 	.word	0x20000db8

080023fc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023fc:	4801      	ldr	r0, [pc, #4]	@ (8002404 <DMA1_Channel5_IRQHandler+0x8>)
 80023fe:	f000 bf1c 	b.w	800323a <HAL_DMA_IRQHandler>
 8002402:	bf00      	nop
 8002404:	20000e40 	.word	0x20000e40

08002408 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002408:	4801      	ldr	r0, [pc, #4]	@ (8002410 <DMA1_Channel6_IRQHandler+0x8>)
 800240a:	f000 bf16 	b.w	800323a <HAL_DMA_IRQHandler>
 800240e:	bf00      	nop
 8002410:	20000dfc 	.word	0x20000dfc

08002414 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002414:	4801      	ldr	r0, [pc, #4]	@ (800241c <TIM2_IRQHandler+0x8>)
 8002416:	f002 ba8f 	b.w	8004938 <HAL_TIM_IRQHandler>
 800241a:	bf00      	nop
 800241c:	20001438 	.word	0x20001438

08002420 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002420:	4801      	ldr	r0, [pc, #4]	@ (8002428 <ADC3_IRQHandler+0x8>)
 8002422:	f000 ba51 	b.w	80028c8 <HAL_ADC_IRQHandler>
 8002426:	bf00      	nop
 8002428:	200011d8 	.word	0x200011d8

0800242c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800242c:	4801      	ldr	r0, [pc, #4]	@ (8002434 <DMA2_Channel1_IRQHandler+0x8>)
 800242e:	f000 bf04 	b.w	800323a <HAL_DMA_IRQHandler>
 8002432:	bf00      	nop
 8002434:	20001194 	.word	0x20001194

08002438 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002438:	4801      	ldr	r0, [pc, #4]	@ (8002440 <DMA2_Channel5_IRQHandler+0x8>)
 800243a:	f000 befe 	b.w	800323a <HAL_DMA_IRQHandler>
 800243e:	bf00      	nop
 8002440:	20001150 	.word	0x20001150

08002444 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002444:	2001      	movs	r0, #1
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244a:	f007 f953 	bl	80096f4 <__errno>
 800244e:	2316      	movs	r3, #22
 8002450:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	bd08      	pop	{r3, pc}

08002458 <_exit>:

void _exit (int status)
{
 8002458:	b508      	push	{r3, lr}
  errno = EINVAL;
 800245a:	f007 f94b 	bl	80096f4 <__errno>
 800245e:	2316      	movs	r3, #22
 8002460:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002462:	e7fe      	b.n	8002462 <_exit+0xa>

08002464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	460d      	mov	r5, r1
 8002468:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	460e      	mov	r6, r1
 800246c:	1b73      	subs	r3, r6, r5
 800246e:	429c      	cmp	r4, r3
 8002470:	dc01      	bgt.n	8002476 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002472:	4620      	mov	r0, r4
 8002474:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002476:	f3af 8000 	nop.w
 800247a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	e7f5      	b.n	800246c <_read+0x8>

08002480 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	460d      	mov	r5, r1
 8002484:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	460e      	mov	r6, r1
 8002488:	1b73      	subs	r3, r6, r5
 800248a:	429c      	cmp	r4, r3
 800248c:	dc01      	bgt.n	8002492 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800248e:	4620      	mov	r0, r4
 8002490:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002492:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002496:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	e7f5      	b.n	8002488 <_write+0x8>

0800249c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	4770      	bx	lr

080024a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80024a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80024a8:	2000      	movs	r0, #0
 80024aa:	4770      	bx	lr

080024ac <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80024ac:	2001      	movs	r0, #1
 80024ae:	4770      	bx	lr

080024b0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80024b0:	2000      	movs	r0, #0
 80024b2:	4770      	bx	lr

080024b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4a0b      	ldr	r2, [pc, #44]	@ (80024e4 <_sbrk+0x30>)
 80024b6:	6811      	ldr	r1, [r2, #0]
{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80024bc:	b909      	cbnz	r1, 80024c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80024be:	490a      	ldr	r1, [pc, #40]	@ (80024e8 <_sbrk+0x34>)
 80024c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	6810      	ldr	r0, [r2, #0]
 80024c4:	4909      	ldr	r1, [pc, #36]	@ (80024ec <_sbrk+0x38>)
 80024c6:	4c0a      	ldr	r4, [pc, #40]	@ (80024f0 <_sbrk+0x3c>)
 80024c8:	4403      	add	r3, r0
 80024ca:	1b09      	subs	r1, r1, r4
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d906      	bls.n	80024de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80024d0:	f007 f910 	bl	80096f4 <__errno>
 80024d4:	230c      	movs	r3, #12
 80024d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80024dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80024de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80024e0:	e7fc      	b.n	80024dc <_sbrk+0x28>
 80024e2:	bf00      	nop
 80024e4:	20001488 	.word	0x20001488
 80024e8:	20009448 	.word	0x20009448
 80024ec:	2000a000 	.word	0x2000a000
 80024f0:	00000400 	.word	0x00000400

080024f4 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80024f8:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80024fa:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80024fc:	f7fd fec8 	bl	8000290 <strlen>
 8002500:	4621      	mov	r1, r4
 8002502:	b282      	uxth	r2, r0
 8002504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002508:	4628      	mov	r0, r5
}
 800250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800250e:	f002 be53 	b.w	80051b8 <HAL_UART_Transmit>
	...

08002514 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8002514:	b40f      	push	{r0, r1, r2, r3}
 8002516:	b500      	push	{lr}
 8002518:	b0c3      	sub	sp, #268	@ 0x10c
 800251a:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 800251c:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 8002520:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002524:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8002526:	a802      	add	r0, sp, #8
 8002528:	f006 fa6c 	bl	8008a04 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <Debug_printf+0x2c>)
 800252e:	a902      	add	r1, sp, #8
 8002530:	f7ff ffe0 	bl	80024f4 <uart_transmit_string>
}
 8002534:	b043      	add	sp, #268	@ 0x10c
 8002536:	f85d eb04 	ldr.w	lr, [sp], #4
 800253a:	b004      	add	sp, #16
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000f94 	.word	0x20000f94

08002544 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4a03      	ldr	r2, [pc, #12]	@ (8002554 <SystemInit+0x10>)
 8002546:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800254a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800254e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002590 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800255c:	f7ff fff2 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002560:	480c      	ldr	r0, [pc, #48]	@ (8002594 <LoopForever+0x6>)
  ldr r1, =_edata
 8002562:	490d      	ldr	r1, [pc, #52]	@ (8002598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <LoopForever+0xe>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0a      	ldr	r2, [pc, #40]	@ (80025a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002578:	4c0a      	ldr	r4, [pc, #40]	@ (80025a4 <LoopForever+0x16>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002586:	f007 f8bb 	bl	8009700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800258a:	f7fe fea3 	bl	80012d4 <main>

0800258e <LoopForever>:

LoopForever:
    b LoopForever
 800258e:	e7fe      	b.n	800258e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002590:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002598:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800259c:	0800d108 	.word	0x0800d108
  ldr r2, =_sbss
 80025a0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80025a4:	20009448 	.word	0x20009448

080025a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC1_2_IRQHandler>
	...

080025ac <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ac:	4a07      	ldr	r2, [pc, #28]	@ (80025cc <HAL_Init+0x20>)
{
 80025ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b8:	2003      	movs	r0, #3
 80025ba:	f000 fd6f 	bl	800309c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025be:	200f      	movs	r0, #15
 80025c0:	f7ff fec4 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c4:	f7ff fce2 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80025c8:	2000      	movs	r0, #0
 80025ca:	bd08      	pop	{r3, pc}
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80025d0:	4a03      	ldr	r2, [pc, #12]	@ (80025e0 <HAL_IncTick+0x10>)
 80025d2:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <HAL_IncTick+0x14>)
 80025d4:	6811      	ldr	r1, [r2, #0]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	440b      	add	r3, r1
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	2000148c 	.word	0x2000148c
 80025e4:	2000000c 	.word	0x2000000c

080025e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80025e8:	4b01      	ldr	r3, [pc, #4]	@ (80025f0 <HAL_GetTick+0x8>)
 80025ea:	6818      	ldr	r0, [r3, #0]
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	2000148c 	.word	0x2000148c

080025f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff fff6 	bl	80025e8 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	bf1c      	itt	ne
 8002600:	4b05      	ldrne	r3, [pc, #20]	@ (8002618 <HAL_Delay+0x24>)
 8002602:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002604:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002606:	bf18      	it	ne
 8002608:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800260a:	f7ff ffed 	bl	80025e8 <HAL_GetTick>
 800260e:	1b43      	subs	r3, r0, r5
 8002610:	42a3      	cmp	r3, r4
 8002612:	d3fa      	bcc.n	800260a <HAL_Delay+0x16>
  {
  }
}
 8002614:	bd38      	pop	{r3, r4, r5, pc}
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c

0800261c <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 800261c:	4770      	bx	lr

0800261e <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002620:	4770      	bx	lr

08002622 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002622:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002624:	6803      	ldr	r3, [r0, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	f002 0203 	and.w	r2, r2, #3
 800262c:	2a01      	cmp	r2, #1
{
 800262e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002630:	d001      	beq.n	8002636 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002632:	2000      	movs	r0, #0
}
 8002634:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	07d1      	lsls	r1, r2, #31
 800263a:	d5fa      	bpl.n	8002632 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	f002 020d 	and.w	r2, r2, #13
 8002642:	2a01      	cmp	r2, #1
 8002644:	d115      	bne.n	8002672 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	f042 0202 	orr.w	r2, r2, #2
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	2203      	movs	r2, #3
 8002650:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002652:	f7ff ffc9 	bl	80025e8 <HAL_GetTick>
 8002656:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	07db      	lsls	r3, r3, #31
 800265e:	d5e8      	bpl.n	8002632 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002660:	f7ff ffc2 	bl	80025e8 <HAL_GetTick>
 8002664:	1b40      	subs	r0, r0, r5
 8002666:	2802      	cmp	r0, #2
 8002668:	d9f6      	bls.n	8002658 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	07da      	lsls	r2, r3, #31
 8002670:	d5f2      	bpl.n	8002658 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8002682:	2001      	movs	r0, #1
 8002684:	e7d6      	b.n	8002634 <ADC_Disable+0x12>
	...

08002688 <HAL_ADC_Init>:
{
 8002688:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800268e:	4604      	mov	r4, r0
 8002690:	2800      	cmp	r0, #0
 8002692:	f000 8103 	beq.w	800289c <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002696:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002698:	06d5      	lsls	r5, r2, #27
 800269a:	d46a      	bmi.n	8002772 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800269c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d035      	beq.n	800270e <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a2:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	d502      	bpl.n	80026b2 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026ac:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026ae:	009d      	lsls	r5, r3, #2
 80026b0:	d50a      	bpl.n	80026c8 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 80026b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026b4:	f023 0312 	bic.w	r3, r3, #18
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026ca:	06d9      	lsls	r1, r3, #27
 80026cc:	f100 80e0 	bmi.w	8002890 <HAL_ADC_Init+0x208>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	f040 80dd 	bne.w	8002890 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80026da:	0752      	lsls	r2, r2, #29
 80026dc:	f100 80d8 	bmi.w	8002890 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80026e0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80026e2:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80026e6:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f0:	4a6b      	ldr	r2, [pc, #428]	@ (80028a0 <HAL_ADC_Init+0x218>)
 80026f2:	d042      	beq.n	800277a <HAL_ADC_Init+0xf2>
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03e      	beq.n	8002776 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026f8:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80026fc:	4293      	cmp	r3, r2
 80026fe:	4969      	ldr	r1, [pc, #420]	@ (80028a4 <HAL_ADC_Init+0x21c>)
 8002700:	f000 80b3 	beq.w	800286a <HAL_ADC_Init+0x1e2>
 8002704:	428b      	cmp	r3, r1
 8002706:	bf18      	it	ne
 8002708:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270a:	4967      	ldr	r1, [pc, #412]	@ (80028a8 <HAL_ADC_Init+0x220>)
 800270c:	e036      	b.n	800277c <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 800270e:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8002712:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002714:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8002718:	f7ff fc56 	bl	8001fc8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	00d8      	lsls	r0, r3, #3
 8002722:	d4be      	bmi.n	80026a2 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff7c 	bl	8002622 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800272a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800272c:	06d1      	lsls	r1, r2, #27
 800272e:	d4b9      	bmi.n	80026a4 <HAL_ADC_Init+0x1c>
 8002730:	2800      	cmp	r0, #0
 8002732:	d1b7      	bne.n	80026a4 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8002734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002736:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002738:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800273c:	f023 0302 	bic.w	r3, r3, #2
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002746:	6893      	ldr	r3, [r2, #8]
 8002748:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800274c:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800274e:	6893      	ldr	r3, [r2, #8]
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002756:	4b55      	ldr	r3, [pc, #340]	@ (80028ac <HAL_ADC_Init+0x224>)
 8002758:	4a55      	ldr	r2, [pc, #340]	@ (80028b0 <HAL_ADC_Init+0x228>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002760:	220a      	movs	r2, #10
 8002762:	4353      	muls	r3, r2
            wait_loop_index--;
 8002764:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d09a      	beq.n	80026a2 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	e7f8      	b.n	8002764 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002772:	4618      	mov	r0, r3
 8002774:	e7a8      	b.n	80026c8 <HAL_ADC_Init+0x40>
 8002776:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800277a:	494e      	ldr	r1, [pc, #312]	@ (80028b4 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800277c:	689d      	ldr	r5, [r3, #8]
 800277e:	f005 0503 	and.w	r5, r5, #3
 8002782:	2d01      	cmp	r5, #1
 8002784:	d102      	bne.n	800278c <HAL_ADC_Init+0x104>
 8002786:	681d      	ldr	r5, [r3, #0]
 8002788:	07ed      	lsls	r5, r5, #31
 800278a:	d40e      	bmi.n	80027aa <HAL_ADC_Init+0x122>
 800278c:	b13a      	cbz	r2, 800279e <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800278e:	6895      	ldr	r5, [r2, #8]
 8002790:	f005 0503 	and.w	r5, r5, #3
 8002794:	2d01      	cmp	r5, #1
 8002796:	d102      	bne.n	800279e <HAL_ADC_Init+0x116>
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	07d2      	lsls	r2, r2, #31
 800279c:	d405      	bmi.n	80027aa <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800279e:	688a      	ldr	r2, [r1, #8]
 80027a0:	6865      	ldr	r5, [r4, #4]
 80027a2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80027a6:	432a      	orrs	r2, r5
 80027a8:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80027aa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027b2:	7e65      	ldrb	r5, [r4, #25]
 80027b4:	3901      	subs	r1, #1
 80027b6:	bf18      	it	ne
 80027b8:	2101      	movne	r1, #1
 80027ba:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80027be:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80027c6:	2901      	cmp	r1, #1
 80027c8:	d107      	bne.n	80027da <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027ca:	2d00      	cmp	r5, #0
 80027cc:	d14f      	bne.n	800286e <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80027d0:	3901      	subs	r1, #1
 80027d2:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80027d6:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80027dc:	2901      	cmp	r1, #1
 80027de:	d015      	beq.n	800280c <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027e0:	4d35      	ldr	r5, [pc, #212]	@ (80028b8 <HAL_ADC_Init+0x230>)
 80027e2:	42ab      	cmp	r3, r5
 80027e4:	d003      	beq.n	80027ee <HAL_ADC_Init+0x166>
 80027e6:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80027ea:	42ab      	cmp	r3, r5
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_Init+0x17c>
 80027ee:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80027f2:	d047      	beq.n	8002884 <HAL_ADC_Init+0x1fc>
 80027f4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80027f8:	d047      	beq.n	800288a <HAL_ADC_Init+0x202>
 80027fa:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80027fe:	bf08      	it	eq
 8002800:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8002804:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002806:	4315      	orrs	r5, r2
 8002808:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	f011 0f0c 	tst.w	r1, #12
 8002812:	d10c      	bne.n	800282e <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002814:	68d9      	ldr	r1, [r3, #12]
 8002816:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800281a:	f021 0102 	bic.w	r1, r1, #2
 800281e:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002820:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8002824:	7e25      	ldrb	r5, [r4, #24]
 8002826:	0049      	lsls	r1, r1, #1
 8002828:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800282c:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800282e:	68dd      	ldr	r5, [r3, #12]
 8002830:	4922      	ldr	r1, [pc, #136]	@ (80028bc <HAL_ADC_Init+0x234>)
 8002832:	4029      	ands	r1, r5
 8002834:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002836:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002838:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800283a:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800283c:	bf05      	ittet	eq
 800283e:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8002840:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002842:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002844:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002848:	bf06      	itte	eq
 800284a:	f021 010f 	biceq.w	r1, r1, #15
 800284e:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002850:	f022 020f 	bicne.w	r2, r2, #15
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002856:	2300      	movs	r3, #0
 8002858:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800285a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800285c:	f023 0303 	bic.w	r3, r3, #3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002866:	b003      	add	sp, #12
 8002868:	bd30      	pop	{r4, r5, pc}
 800286a:	460a      	mov	r2, r1
 800286c:	e74d      	b.n	800270a <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 800286e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002870:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8002874:	f041 0120 	orr.w	r1, r1, #32
 8002878:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800287c:	f041 0101 	orr.w	r1, r1, #1
 8002880:	6461      	str	r1, [r4, #68]	@ 0x44
 8002882:	e7aa      	b.n	80027da <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002884:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8002888:	e7bc      	b.n	8002804 <HAL_ADC_Init+0x17c>
 800288a:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800288e:	e7b9      	b.n	8002804 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8002890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002892:	f023 0312 	bic.w	r3, r3, #18
 8002896:	f043 0310 	orr.w	r3, r3, #16
 800289a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	e7e2      	b.n	8002866 <HAL_ADC_Init+0x1de>
 80028a0:	50000100 	.word	0x50000100
 80028a4:	50000500 	.word	0x50000500
 80028a8:	50000700 	.word	0x50000700
 80028ac:	20000008 	.word	0x20000008
 80028b0:	000f4240 	.word	0x000f4240
 80028b4:	50000300 	.word	0x50000300
 80028b8:	50000400 	.word	0x50000400
 80028bc:	fff0c007 	.word	0xfff0c007

080028c0 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 80028c0:	4770      	bx	lr

080028c2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 80028c4:	4770      	bx	lr

080028c6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028c8:	6803      	ldr	r3, [r0, #0]
{
 80028ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028cc:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028ce:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028d0:	076a      	lsls	r2, r5, #29
{
 80028d2:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028d4:	d501      	bpl.n	80028da <HAL_ADC_IRQHandler+0x12>
 80028d6:	0770      	lsls	r0, r6, #29
 80028d8:	d403      	bmi.n	80028e2 <HAL_ADC_IRQHandler+0x1a>
 80028da:	0729      	lsls	r1, r5, #28
 80028dc:	d543      	bpl.n	8002966 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028de:	0732      	lsls	r2, r6, #28
 80028e0:	d541      	bpl.n	8002966 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028e4:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028e6:	bf5e      	ittt	pl
 80028e8:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80028ea:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80028ee:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f4:	d003      	beq.n	80028fe <HAL_ADC_IRQHandler+0x36>
 80028f6:	4a90      	ldr	r2, [pc, #576]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	f040 8105 	bne.w	8002b08 <HAL_ADC_IRQHandler+0x240>
 80028fe:	4a8f      	ldr	r2, [pc, #572]	@ (8002b3c <HAL_ADC_IRQHandler+0x274>)
 8002900:	6891      	ldr	r1, [r2, #8]
 8002902:	06c9      	lsls	r1, r1, #27
 8002904:	d00c      	beq.n	8002920 <HAL_ADC_IRQHandler+0x58>
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290a:	d003      	beq.n	8002914 <HAL_ADC_IRQHandler+0x4c>
 800290c:	498a      	ldr	r1, [pc, #552]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 800290e:	428b      	cmp	r3, r1
 8002910:	f040 80ff 	bne.w	8002b12 <HAL_ADC_IRQHandler+0x24a>
 8002914:	6892      	ldr	r2, [r2, #8]
 8002916:	f002 021f 	and.w	r2, r2, #31
 800291a:	2a05      	cmp	r2, #5
 800291c:	f040 8114 	bne.w	8002b48 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002920:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002922:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002924:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002928:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800292c:	4311      	orrs	r1, r2
 800292e:	d114      	bne.n	800295a <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002930:	0729      	lsls	r1, r5, #28
 8002932:	d512      	bpl.n	800295a <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	0752      	lsls	r2, r2, #29
 8002938:	f100 8122 	bmi.w	8002b80 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	f022 020c 	bic.w	r2, r2, #12
 8002942:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002944:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002946:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800294a:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800294c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800294e:	04d8      	lsls	r0, r3, #19
 8002950:	d403      	bmi.n	800295a <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe5e 	bl	800261c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002966:	06a9      	lsls	r1, r5, #26
 8002968:	d501      	bpl.n	800296e <HAL_ADC_IRQHandler+0xa6>
 800296a:	06b2      	lsls	r2, r6, #26
 800296c:	d403      	bmi.n	8002976 <HAL_ADC_IRQHandler+0xae>
 800296e:	066b      	lsls	r3, r5, #25
 8002970:	d562      	bpl.n	8002a38 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002972:	0670      	lsls	r0, r6, #25
 8002974:	d560      	bpl.n	8002a38 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002976:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002978:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800297c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002984:	d003      	beq.n	800298e <HAL_ADC_IRQHandler+0xc6>
 8002986:	4a6c      	ldr	r2, [pc, #432]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 8002988:	4293      	cmp	r3, r2
 800298a:	f040 8102 	bne.w	8002b92 <HAL_ADC_IRQHandler+0x2ca>
 800298e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b3c <HAL_ADC_IRQHandler+0x274>)
 8002990:	6891      	ldr	r1, [r2, #8]
 8002992:	06c9      	lsls	r1, r1, #27
 8002994:	d00c      	beq.n	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299a:	d003      	beq.n	80029a4 <HAL_ADC_IRQHandler+0xdc>
 800299c:	4966      	ldr	r1, [pc, #408]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 800299e:	428b      	cmp	r3, r1
 80029a0:	f040 80fc 	bne.w	8002b9c <HAL_ADC_IRQHandler+0x2d4>
 80029a4:	6892      	ldr	r2, [r2, #8]
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2a05      	cmp	r2, #5
 80029ac:	f040 8108 	bne.w	8002bc0 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80029b0:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80029b2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80029b4:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 80029b8:	d138      	bne.n	8002a2c <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80029ba:	0191      	lsls	r1, r2, #6
 80029bc:	d506      	bpl.n	80029cc <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029be:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80029c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029c4:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80029c8:	4311      	orrs	r1, r2
 80029ca:	d12f      	bne.n	8002a2c <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80029cc:	0668      	lsls	r0, r5, #25
 80029ce:	d52d      	bpl.n	8002a2c <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80029d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d4:	d003      	beq.n	80029de <HAL_ADC_IRQHandler+0x116>
 80029d6:	4a58      	ldr	r2, [pc, #352]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	f040 810d 	bne.w	8002bf8 <HAL_ADC_IRQHandler+0x330>
 80029de:	4a57      	ldr	r2, [pc, #348]	@ (8002b3c <HAL_ADC_IRQHandler+0x274>)
 80029e0:	6891      	ldr	r1, [r2, #8]
 80029e2:	06c9      	lsls	r1, r1, #27
 80029e4:	d00c      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x138>
 80029e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ea:	d003      	beq.n	80029f4 <HAL_ADC_IRQHandler+0x12c>
 80029ec:	4952      	ldr	r1, [pc, #328]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 80029ee:	428b      	cmp	r3, r1
 80029f0:	f040 8107 	bne.w	8002c02 <HAL_ADC_IRQHandler+0x33a>
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2a06      	cmp	r2, #6
 80029fc:	f040 8113 	bne.w	8002c26 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002a00:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002a02:	0291      	lsls	r1, r2, #10
 8002a04:	d412      	bmi.n	8002a2c <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	0712      	lsls	r2, r2, #28
 8002a0a:	f100 8128 	bmi.w	8002c5e <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a14:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a1c:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a20:	05d8      	lsls	r0, r3, #23
 8002a22:	d403      	bmi.n	8002a2c <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff ff47 	bl	80028c0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	2260      	movs	r2, #96	@ 0x60
 8002a36:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a38:	0629      	lsls	r1, r5, #24
 8002a3a:	d50b      	bpl.n	8002a54 <HAL_ADC_IRQHandler+0x18c>
 8002a3c:	0632      	lsls	r2, r6, #24
 8002a3e:	d509      	bpl.n	8002a54 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a46:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff fde8 	bl	800261e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a54:	05eb      	lsls	r3, r5, #23
 8002a56:	d50c      	bpl.n	8002a72 <HAL_ADC_IRQHandler+0x1aa>
 8002a58:	05f0      	lsls	r0, r6, #23
 8002a5a:	d50a      	bpl.n	8002a72 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a62:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff2d 	bl	80028c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a70:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a72:	05a9      	lsls	r1, r5, #22
 8002a74:	d50c      	bpl.n	8002a90 <HAL_ADC_IRQHandler+0x1c8>
 8002a76:	05b2      	lsls	r2, r6, #22
 8002a78:	d50a      	bpl.n	8002a90 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a80:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff ff1f 	bl	80028c6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a90:	06eb      	lsls	r3, r5, #27
 8002a92:	d525      	bpl.n	8002ae0 <HAL_ADC_IRQHandler+0x218>
 8002a94:	06f0      	lsls	r0, r6, #27
 8002a96:	d523      	bpl.n	8002ae0 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d012      	beq.n	8002ac4 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002aa4:	f000 80e4 	beq.w	8002c70 <HAL_ADC_IRQHandler+0x3a8>
 8002aa8:	4823      	ldr	r0, [pc, #140]	@ (8002b38 <HAL_ADC_IRQHandler+0x270>)
 8002aaa:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_ADC_IRQHandler+0x278>)
 8002aac:	4923      	ldr	r1, [pc, #140]	@ (8002b3c <HAL_ADC_IRQHandler+0x274>)
 8002aae:	4282      	cmp	r2, r0
 8002ab0:	bf08      	it	eq
 8002ab2:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	06c9      	lsls	r1, r1, #27
 8002ab8:	f040 80dc 	bne.w	8002c74 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002abc:	68d3      	ldr	r3, [r2, #12]
 8002abe:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ac2:	d00a      	beq.n	8002ada <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aca:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002acc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff fda3 	bl	8002620 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	2210      	movs	r2, #16
 8002ade:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ae0:	056a      	lsls	r2, r5, #21
 8002ae2:	d510      	bpl.n	8002b06 <HAL_ADC_IRQHandler+0x23e>
 8002ae4:	0573      	lsls	r3, r6, #21
 8002ae6:	d50e      	bpl.n	8002b06 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ae8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002aea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aee:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002af0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002afe:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fede 	bl	80028c2 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_ADC_IRQHandler+0x278>)
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	06d0      	lsls	r0, r2, #27
 8002b0e:	f43f af07 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b12:	4a0b      	ldr	r2, [pc, #44]	@ (8002b40 <HAL_ADC_IRQHandler+0x278>)
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	f002 021f 	and.w	r2, r2, #31
 8002b1a:	2a05      	cmp	r2, #5
 8002b1c:	f43f af00 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <HAL_ADC_IRQHandler+0x278>)
 8002b22:	6892      	ldr	r2, [r2, #8]
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2a09      	cmp	r2, #9
 8002b2a:	f43f aef9 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <HAL_ADC_IRQHandler+0x27c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d123      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x2b4>
 8002b34:	e6f4      	b.n	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b36:	bf00      	nop
 8002b38:	50000100 	.word	0x50000100
 8002b3c:	50000300 	.word	0x50000300
 8002b40:	50000700 	.word	0x50000700
 8002b44:	50000400 	.word	0x50000400
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x28c>
 8002b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d1e5      	bne.n	8002b20 <HAL_ADC_IRQHandler+0x258>
 8002b54:	4a4a      	ldr	r2, [pc, #296]	@ (8002c80 <HAL_ADC_IRQHandler+0x3b8>)
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	f002 021f 	and.w	r2, r2, #31
 8002b5c:	2a09      	cmp	r2, #9
 8002b5e:	f43f aedf 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b66:	f43f aedb 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
 8002b6a:	4a46      	ldr	r2, [pc, #280]	@ (8002c84 <HAL_ADC_IRQHandler+0x3bc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f43f aed7 	beq.w	8002920 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b72:	4942      	ldr	r1, [pc, #264]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002b74:	428b      	cmp	r3, r1
 8002b76:	bf08      	it	eq
 8002b78:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	e6d0      	b.n	8002922 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b82:	f043 0310 	orr.w	r3, r3, #16
 8002b86:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6463      	str	r3, [r4, #68]	@ 0x44
 8002b90:	e6e3      	b.n	800295a <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b92:	4a3d      	ldr	r2, [pc, #244]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002b94:	6892      	ldr	r2, [r2, #8]
 8002b96:	06d0      	lsls	r0, r2, #27
 8002b98:	f43f af0a 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2a05      	cmp	r2, #5
 8002ba6:	f43f af03 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002baa:	4a37      	ldr	r2, [pc, #220]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	f002 021f 	and.w	r2, r2, #31
 8002bb2:	2a09      	cmp	r2, #9
 8002bb4:	f43f aefc 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002bb8:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <HAL_ADC_IRQHandler+0x3bc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x32c>
 8002bbe:	e6f7      	b.n	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc4:	d002      	beq.n	8002bcc <HAL_ADC_IRQHandler+0x304>
 8002bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d1ee      	bne.n	8002baa <HAL_ADC_IRQHandler+0x2e2>
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002c80 <HAL_ADC_IRQHandler+0x3b8>)
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	f002 021f 	and.w	r2, r2, #31
 8002bd4:	2a09      	cmp	r2, #9
 8002bd6:	f43f aeeb 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bde:	f43f aee7 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
 8002be2:	4a28      	ldr	r2, [pc, #160]	@ (8002c84 <HAL_ADC_IRQHandler+0x3bc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	f43f aee3 	beq.w	80029b0 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bea:	4924      	ldr	r1, [pc, #144]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002bec:	428b      	cmp	r3, r1
 8002bee:	bf08      	it	eq
 8002bf0:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	e6dc      	b.n	80029b2 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002bf8:	4a23      	ldr	r2, [pc, #140]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	06d0      	lsls	r0, r2, #27
 8002bfe:	f43f aeff 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c02:	4a21      	ldr	r2, [pc, #132]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2a06      	cmp	r2, #6
 8002c0c:	f43f aef8 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_ADC_IRQHandler+0x3c0>)
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2a07      	cmp	r2, #7
 8002c1a:	f43f aef1 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c1e:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_ADC_IRQHandler+0x3bc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d11a      	bne.n	8002c5a <HAL_ADC_IRQHandler+0x392>
 8002c24:	e6ec      	b.n	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c2a:	d002      	beq.n	8002c32 <HAL_ADC_IRQHandler+0x36a>
 8002c2c:	4a13      	ldr	r2, [pc, #76]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d1ee      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x348>
 8002c32:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <HAL_ADC_IRQHandler+0x3b8>)
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	f002 021f 	and.w	r2, r2, #31
 8002c3a:	2a07      	cmp	r2, #7
 8002c3c:	f43f aee0 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c44:	f43f aedc 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
 8002c48:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <HAL_ADC_IRQHandler+0x3bc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f43f aed8 	beq.w	8002a00 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c50:	490a      	ldr	r1, [pc, #40]	@ (8002c7c <HAL_ADC_IRQHandler+0x3b4>)
 8002c52:	428b      	cmp	r3, r1
 8002c54:	bf08      	it	eq
 8002c56:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002c5a:	68d2      	ldr	r2, [r2, #12]
 8002c5c:	e6d1      	b.n	8002a02 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6463      	str	r3, [r4, #68]	@ 0x44
 8002c6e:	e6dd      	b.n	8002a2c <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_ADC_IRQHandler+0x3b8>)
 8002c72:	e71f      	b.n	8002ab4 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8002c7a:	e722      	b.n	8002ac2 <HAL_ADC_IRQHandler+0x1fa>
 8002c7c:	50000100 	.word	0x50000100
 8002c80:	50000300 	.word	0x50000300
 8002c84:	50000400 	.word	0x50000400
 8002c88:	50000700 	.word	0x50000700

08002c8c <HAL_ADC_ConfigChannel>:
{
 8002c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c8e:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002c94:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c98:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f000 816a 	beq.w	8002f74 <HAL_ADC_ConfigChannel+0x2e8>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	0757      	lsls	r7, r2, #29
 8002cac:	f100 815c 	bmi.w	8002f68 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8002cb0:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8002cb2:	680c      	ldr	r4, [r1, #0]
 8002cb4:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8002cb6:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8002cb8:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8002cbc:	d82c      	bhi.n	8002d18 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8002cbe:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8002cc0:	271f      	movs	r7, #31
 8002cc2:	4097      	lsls	r7, r2
 8002cc4:	ea26 0607 	bic.w	r6, r6, r7
 8002cc8:	fa04 f202 	lsl.w	r2, r4, r2
 8002ccc:	4332      	orrs	r2, r6
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	f012 0f0c 	tst.w	r2, #12
 8002cd6:	d158      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cd8:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cda:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002cde:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002ce2:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ce6:	d93c      	bls.n	8002d62 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ce8:	699f      	ldr	r7, [r3, #24]
 8002cea:	3a1e      	subs	r2, #30
 8002cec:	4096      	lsls	r6, r2
 8002cee:	ea27 0606 	bic.w	r6, r7, r6
 8002cf2:	fa0c f202 	lsl.w	r2, ip, r2
 8002cf6:	4332      	orrs	r2, r6
 8002cf8:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	694e      	ldr	r6, [r1, #20]
 8002cfe:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002d02:	0052      	lsls	r2, r2, #1
 8002d04:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8002d06:	690a      	ldr	r2, [r1, #16]
 8002d08:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d0a:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8002d0c:	2a03      	cmp	r2, #3
 8002d0e:	d86b      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x15c>
 8002d10:	e8df f002 	tbb	[pc, r2]
 8002d14:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8002d18:	2e09      	cmp	r6, #9
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8002d1c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8002d1e:	3a1e      	subs	r2, #30
 8002d20:	271f      	movs	r7, #31
 8002d22:	4097      	lsls	r7, r2
 8002d24:	ea26 0607 	bic.w	r6, r6, r7
 8002d28:	fa04 f202 	lsl.w	r2, r4, r2
 8002d2c:	4332      	orrs	r2, r6
 8002d2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d30:	e7ce      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8002d32:	2e0e      	cmp	r6, #14
 8002d34:	f04f 061f 	mov.w	r6, #31
 8002d38:	d809      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d3a:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8002d3c:	3a3c      	subs	r2, #60	@ 0x3c
 8002d3e:	4096      	lsls	r6, r2
 8002d40:	ea27 0606 	bic.w	r6, r7, r6
 8002d44:	fa04 f202 	lsl.w	r2, r4, r2
 8002d48:	4332      	orrs	r2, r6
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d4c:	e7c0      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d4e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8002d50:	3a5a      	subs	r2, #90	@ 0x5a
 8002d52:	4096      	lsls	r6, r2
 8002d54:	ea27 0606 	bic.w	r6, r7, r6
 8002d58:	fa04 f202 	lsl.w	r2, r4, r2
 8002d5c:	4332      	orrs	r2, r6
 8002d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d60:	e7b6      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d62:	695f      	ldr	r7, [r3, #20]
 8002d64:	4096      	lsls	r6, r2
 8002d66:	ea27 0606 	bic.w	r6, r7, r6
 8002d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d6e:	ea46 060c 	orr.w	r6, r6, ip
 8002d72:	615e      	str	r6, [r3, #20]
 8002d74:	e7c1      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d76:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8002d7a:	4a7f      	ldr	r2, [pc, #508]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2ec>)
 8002d7c:	ea0c 0202 	and.w	r2, ip, r2
 8002d80:	433a      	orrs	r2, r7
 8002d82:	4332      	orrs	r2, r6
 8002d84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d88:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	2a01      	cmp	r2, #1
 8002d92:	d14d      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1a4>
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	07d6      	lsls	r6, r2, #31
 8002d98:	d54a      	bpl.n	8002e30 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d9a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8002da2:	b003      	add	sp, #12
 8002da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002da6:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8002daa:	4a73      	ldr	r2, [pc, #460]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2ec>)
 8002dac:	ea0c 0202 	and.w	r2, ip, r2
 8002db0:	433a      	orrs	r2, r7
 8002db2:	4332      	orrs	r2, r6
 8002db4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002db8:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8002dba:	e7e6      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002dbc:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8002dc0:	4a6d      	ldr	r2, [pc, #436]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2ec>)
 8002dc2:	ea0c 0202 	and.w	r2, ip, r2
 8002dc6:	433a      	orrs	r2, r7
 8002dc8:	4332      	orrs	r2, r6
 8002dca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dce:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8002dd0:	e7db      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002dd2:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8002dd6:	4a68      	ldr	r2, [pc, #416]	@ (8002f78 <HAL_ADC_ConfigChannel+0x2ec>)
 8002dd8:	ea0c 0202 	and.w	r2, ip, r2
 8002ddc:	433a      	orrs	r2, r7
 8002dde:	4332      	orrs	r2, r6
 8002de0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002de4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002de6:	e7d0      	b.n	8002d8a <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dea:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002dee:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002df0:	bf02      	ittt	eq
 8002df2:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8002df4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002df8:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dfa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dfc:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002e00:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e02:	bf02      	ittt	eq
 8002e04:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8002e06:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002e0a:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e0e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002e12:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e14:	bf02      	ittt	eq
 8002e16:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8002e18:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002e1c:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e1e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e20:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002e24:	42ba      	cmp	r2, r7
 8002e26:	d1b0      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2e:	e7d9      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e30:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e32:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e34:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e38:	d047      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e3a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002e3e:	ea21 0202 	bic.w	r2, r1, r2
 8002e42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4a:	d164      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x28a>
 8002e4c:	494b      	ldr	r1, [pc, #300]	@ (8002f7c <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e4e:	2c10      	cmp	r4, #16
 8002e50:	d166      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e52:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e54:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e58:	d19f      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5e:	4a48      	ldr	r2, [pc, #288]	@ (8002f80 <HAL_ADC_ConfigChannel+0x2f4>)
 8002e60:	d009      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x1ea>
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d069      	beq.n	8002f3a <HAL_ADC_ConfigChannel+0x2ae>
 8002e66:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	4845      	ldr	r0, [pc, #276]	@ (8002f84 <HAL_ADC_ConfigChannel+0x2f8>)
 8002e6e:	d067      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x2b4>
 8002e70:	4283      	cmp	r3, r0
 8002e72:	bf18      	it	ne
 8002e74:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e76:	6898      	ldr	r0, [r3, #8]
 8002e78:	f000 0003 	and.w	r0, r0, #3
 8002e7c:	2801      	cmp	r0, #1
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x1fa>
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	07c0      	lsls	r0, r0, #31
 8002e84:	d470      	bmi.n	8002f68 <HAL_ADC_ConfigChannel+0x2dc>
 8002e86:	b13a      	cbz	r2, 8002e98 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e88:	6890      	ldr	r0, [r2, #8]
 8002e8a:	f000 0003 	and.w	r0, r0, #3
 8002e8e:	2801      	cmp	r0, #1
 8002e90:	d102      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x20c>
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	07d2      	lsls	r2, r2, #31
 8002e96:	d467      	bmi.n	8002f68 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e98:	2c10      	cmp	r4, #16
 8002e9a:	d153      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x2b8>
 8002e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ea0:	f47f af7b 	bne.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ea4:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea6:	4a38      	ldr	r2, [pc, #224]	@ (8002f88 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ea8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eac:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eae:	4b37      	ldr	r3, [pc, #220]	@ (8002f8c <HAL_ADC_ConfigChannel+0x300>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb6:	220a      	movs	r2, #10
 8002eb8:	4353      	muls	r3, r2
            wait_loop_index--;
 8002eba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ebc:	9b01      	ldr	r3, [sp, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f43f af6b 	beq.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8002ec4:	9b01      	ldr	r3, [sp, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	e7f7      	b.n	8002eba <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eca:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ece:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ed0:	ea42 0200 	orr.w	r2, r2, r0
 8002ed4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ed8:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002eda:	d90c      	bls.n	8002ef6 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002edc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	3a1b      	subs	r2, #27
 8002ee4:	2607      	movs	r6, #7
 8002ee6:	4096      	lsls	r6, r2
 8002ee8:	ea21 0106 	bic.w	r1, r1, r6
 8002eec:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	e7a7      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ef6:	1c61      	adds	r1, r4, #1
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002efe:	2607      	movs	r6, #7
 8002f00:	408e      	lsls	r6, r1
 8002f02:	ea22 0206 	bic.w	r2, r2, r6
 8002f06:	fa00 f101 	lsl.w	r1, r0, r1
 8002f0a:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f10:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f12:	f43f af42 	beq.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
 8002f16:	4a1a      	ldr	r2, [pc, #104]	@ (8002f80 <HAL_ADC_ConfigChannel+0x2f4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d097      	beq.n	8002e4c <HAL_ADC_ConfigChannel+0x1c0>
 8002f1c:	491c      	ldr	r1, [pc, #112]	@ (8002f90 <HAL_ADC_ConfigChannel+0x304>)
 8002f1e:	e796      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f20:	2c11      	cmp	r4, #17
 8002f22:	d103      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f24:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f26:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8002f2a:	e795      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f2c:	2c12      	cmp	r4, #18
 8002f2e:	f47f af34 	bne.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f32:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f34:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002f38:	e78e      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
 8002f3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f3e:	e79a      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1ea>
 8002f40:	4602      	mov	r2, r0
 8002f42:	e798      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f44:	2c11      	cmp	r4, #17
 8002f46:	d108      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x2ce>
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	f47f af25 	bne.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f50:	688b      	ldr	r3, [r1, #8]
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f56:	608b      	str	r3, [r1, #8]
 8002f58:	e71f      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f5a:	2c12      	cmp	r4, #18
 8002f5c:	f47f af1d 	bne.w	8002d9a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f60:	688b      	ldr	r3, [r1, #8]
 8002f62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f66:	e7f6      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f68:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
 8002f72:	e713      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8002f74:	2002      	movs	r0, #2
 8002f76:	e714      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x116>
 8002f78:	83fff000 	.word	0x83fff000
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000500 	.word	0x50000500
 8002f88:	000f4240 	.word	0x000f4240
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	50000700 	.word	0x50000700

08002f94 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f96:	6804      	ldr	r4, [r0, #0]
 8002f98:	4b3c      	ldr	r3, [pc, #240]	@ (800308c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002f9a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8002f9e:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fa0:	d009      	beq.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d047      	beq.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8003090 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002fa8:	4294      	cmp	r4, r2
 8002faa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fae:	d002      	beq.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	d166      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002fb4:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8002fb6:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8002fba:	2a01      	cmp	r2, #1
 8002fbc:	d063      	beq.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002fbe:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc0:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8002fc2:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fc6:	68a2      	ldr	r2, [r4, #8]
 8002fc8:	0752      	lsls	r2, r2, #29
 8002fca:	d454      	bmi.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	0757      	lsls	r7, r2, #29
 8002fd0:	d451      	bmi.n	8003076 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd2:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8002fd6:	d031      	beq.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fd8:	4f2c      	ldr	r7, [pc, #176]	@ (800308c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002fda:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002fdc:	4e2e      	ldr	r6, [pc, #184]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002fde:	42bc      	cmp	r4, r7
 8002fe0:	bf08      	it	eq
 8002fe2:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe4:	b360      	cbz	r0, 8003040 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fe6:	6897      	ldr	r7, [r2, #8]
 8002fe8:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8002fec:	684e      	ldr	r6, [r1, #4]
 8002fee:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8002ff2:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8002ff6:	433e      	orrs	r6, r7
 8002ff8:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ffa:	68a6      	ldr	r6, [r4, #8]
 8002ffc:	f006 0603 	and.w	r6, r6, #3
 8003000:	2e01      	cmp	r6, #1
 8003002:	d102      	bne.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003004:	6824      	ldr	r4, [r4, #0]
 8003006:	07e6      	lsls	r6, r4, #31
 8003008:	d410      	bmi.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800300a:	689c      	ldr	r4, [r3, #8]
 800300c:	f004 0403 	and.w	r4, r4, #3
 8003010:	2c01      	cmp	r4, #1
 8003012:	d102      	bne.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	07dc      	lsls	r4, r3, #31
 8003018:	d408      	bmi.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800301a:	6893      	ldr	r3, [r2, #8]
 800301c:	6889      	ldr	r1, [r1, #8]
 800301e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003022:	4308      	orrs	r0, r1
 8003024:	f023 030f 	bic.w	r3, r3, #15
 8003028:	4318      	orrs	r0, r3
 800302a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800302e:	2300      	movs	r3, #0
 8003030:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003036:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800303a:	e7bc      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800303e:	e7d1      	b.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003040:	6891      	ldr	r1, [r2, #8]
 8003042:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003046:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003048:	68a1      	ldr	r1, [r4, #8]
 800304a:	f001 0103 	and.w	r1, r1, #3
 800304e:	2901      	cmp	r1, #1
 8003050:	d102      	bne.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8003052:	6821      	ldr	r1, [r4, #0]
 8003054:	07c9      	lsls	r1, r1, #31
 8003056:	d4e9      	bmi.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	f001 0103 	and.w	r1, r1, #3
 800305e:	2901      	cmp	r1, #1
 8003060:	d102      	bne.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	07db      	lsls	r3, r3, #31
 8003066:	d4e1      	bmi.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003068:	6893      	ldr	r3, [r2, #8]
 800306a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800306e:	f023 030f 	bic.w	r3, r3, #15
 8003072:	6093      	str	r3, [r2, #8]
 8003074:	e7da      	b.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003076:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 800307e:	2001      	movs	r0, #1
 8003080:	e7d5      	b.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
 8003084:	e7d6      	b.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003086:	2002      	movs	r0, #2
 8003088:	e7d4      	b.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800308a:	bf00      	nop
 800308c:	50000100 	.word	0x50000100
 8003090:	50000400 	.word	0x50000400
 8003094:	50000700 	.word	0x50000700
 8003098:	50000300 	.word	0x50000300

0800309c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4907      	ldr	r1, [pc, #28]	@ (80030bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800309e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80030b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b16      	ldr	r3, [pc, #88]	@ (800311c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c2:	b530      	push	{r4, r5, lr}
 80030c4:	68dc      	ldr	r4, [r3, #12]
 80030c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	bf28      	it	cs
 80030d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030dc:	bf8c      	ite	hi
 80030de:	3c03      	subhi	r4, #3
 80030e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e2:	fa05 f303 	lsl.w	r3, r5, r3
 80030e6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ea:	40a5      	lsls	r5, r4
 80030ec:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80030f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	bfac      	ite	ge
 80030fa:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	4a08      	ldrlt	r2, [pc, #32]	@ (8003120 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	bfb8      	it	lt
 8003106:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	b2db      	uxtb	r3, r3
 800310c:	bfaa      	itet	ge
 800310e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003118:	bd30      	pop	{r4, r5, pc}
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00
 8003120:	e000ed14 	.word	0xe000ed14

08003124 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003124:	2800      	cmp	r0, #0
 8003126:	db07      	blt.n	8003138 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003128:	0941      	lsrs	r1, r0, #5
 800312a:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_NVIC_EnableIRQ+0x18>)
 800312c:	f000 001f 	and.w	r0, r0, #31
 8003130:	2301      	movs	r3, #1
 8003132:	4083      	lsls	r3, r0
 8003134:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003140:	6802      	ldr	r2, [r0, #0]
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <DMA_CalcBaseAndBitshift+0x2c>)
 8003144:	429a      	cmp	r2, r3
 8003146:	f04f 0114 	mov.w	r1, #20
 800314a:	d808      	bhi.n	800315e <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800314c:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <DMA_CalcBaseAndBitshift+0x30>)
 800314e:	4413      	add	r3, r2
 8003150:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <DMA_CalcBaseAndBitshift+0x34>)
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003158:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800315c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <DMA_CalcBaseAndBitshift+0x38>)
 8003160:	4413      	add	r3, r2
 8003162:	4a06      	ldr	r2, [pc, #24]	@ (800317c <DMA_CalcBaseAndBitshift+0x3c>)
 8003164:	fbb3 f3f1 	udiv	r3, r3, r1
 8003168:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 800316a:	e7f5      	b.n	8003158 <DMA_CalcBaseAndBitshift+0x18>
 800316c:	40020407 	.word	0x40020407
 8003170:	bffdfff8 	.word	0xbffdfff8
 8003174:	40020000 	.word	0x40020000
 8003178:	bffdfbf8 	.word	0xbffdfbf8
 800317c:	40020400 	.word	0x40020400

08003180 <HAL_DMA_Init>:
{
 8003180:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8003182:	4604      	mov	r4, r0
 8003184:	b1e0      	cbz	r0, 80031c0 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8003186:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800318a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318c:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800318e:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003190:	432b      	orrs	r3, r5
 8003192:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003194:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003196:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003198:	6945      	ldr	r5, [r0, #20]
 800319a:	432b      	orrs	r3, r5
 800319c:	6985      	ldr	r5, [r0, #24]
 800319e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a0:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031a2:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 80031a6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80031aa:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80031ac:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80031ae:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80031b0:	f7ff ffc6 	bl	8003140 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80031b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ba:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 80031bc:	8423      	strh	r3, [r4, #32]
}
 80031be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031c0:	2001      	movs	r0, #1
 80031c2:	e7fc      	b.n	80031be <HAL_DMA_Init+0x3e>

080031c4 <HAL_DMA_Start_IT>:
{
 80031c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80031c6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80031ca:	2c01      	cmp	r4, #1
 80031cc:	d033      	beq.n	8003236 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ce:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 80031d2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80031d4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80031d6:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80031da:	f04f 0400 	mov.w	r4, #0
 80031de:	d128      	bne.n	8003232 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e0:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e2:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031e4:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e6:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031ea:	6826      	ldr	r6, [r4, #0]
 80031ec:	f026 0601 	bic.w	r6, r6, #1
 80031f0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031f2:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80031f6:	40bd      	lsls	r5, r7
 80031f8:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80031fa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031fc:	6843      	ldr	r3, [r0, #4]
 80031fe:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003200:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003202:	bf0b      	itete	eq
 8003204:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003206:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003208:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800320a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800320c:	b14b      	cbz	r3, 8003222 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003214:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2000      	movs	r0, #0
}
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f043 030a 	orr.w	r3, r3, #10
 8003228:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	e7f0      	b.n	8003214 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003232:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8003236:	2002      	movs	r0, #2
 8003238:	e7f2      	b.n	8003220 <HAL_DMA_Start_IT+0x5c>

0800323a <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800323a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800323c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800323e:	6803      	ldr	r3, [r0, #0]
{
 8003240:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003242:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003244:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003246:	2404      	movs	r4, #4
 8003248:	4094      	lsls	r4, r2
 800324a:	4234      	tst	r4, r6
 800324c:	d00e      	beq.n	800326c <HAL_DMA_IRQHandler+0x32>
 800324e:	f015 0f04 	tst.w	r5, #4
 8003252:	d00b      	beq.n	800326c <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003258:	bf5e      	ittt	pl
 800325a:	681a      	ldrpl	r2, [r3, #0]
 800325c:	f022 0204 	bicpl.w	r2, r2, #4
 8003260:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003262:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003264:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8003266:	b363      	cbz	r3, 80032c2 <HAL_DMA_IRQHandler+0x88>
}
 8003268:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800326a:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800326c:	2402      	movs	r4, #2
 800326e:	4094      	lsls	r4, r2
 8003270:	4234      	tst	r4, r6
 8003272:	d012      	beq.n	800329a <HAL_DMA_IRQHandler+0x60>
 8003274:	f015 0f02 	tst.w	r5, #2
 8003278:	d00f      	beq.n	800329a <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	0695      	lsls	r5, r2, #26
 800327e:	d406      	bmi.n	800328e <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f022 020a 	bic.w	r2, r2, #10
 8003286:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003288:	2301      	movs	r3, #1
 800328a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800328e:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003290:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003292:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003296:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003298:	e7e5      	b.n	8003266 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800329a:	2408      	movs	r4, #8
 800329c:	4094      	lsls	r4, r2
 800329e:	4234      	tst	r4, r6
 80032a0:	d00f      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x88>
 80032a2:	072c      	lsls	r4, r5, #28
 80032a4:	d50d      	bpl.n	80032c2 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032a6:	681c      	ldr	r4, [r3, #0]
 80032a8:	f024 040e 	bic.w	r4, r4, #14
 80032ac:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032ae:	2301      	movs	r3, #1
 80032b0:	fa03 f202 	lsl.w	r2, r3, r2
 80032b4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032b6:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80032b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032bc:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80032be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80032c0:	e7d1      	b.n	8003266 <HAL_DMA_IRQHandler+0x2c>
}
 80032c2:	bc70      	pop	{r4, r5, r6}
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032cc:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 800344c <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d0:	4c5c      	ldr	r4, [pc, #368]	@ (8003444 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80032d2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d4:	680a      	ldr	r2, [r1, #0]
 80032d6:	fa32 f503 	lsrs.w	r5, r2, r3
 80032da:	d102      	bne.n	80032e2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80032dc:	b003      	add	sp, #12
 80032de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e2:	2501      	movs	r5, #1
 80032e4:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80032e8:	ea18 0202 	ands.w	r2, r8, r2
 80032ec:	f000 80a0 	beq.w	8003430 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f0:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f2:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f4:	f006 0503 	and.w	r5, r6, #3
 80032f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032fc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003300:	1e6f      	subs	r7, r5, #1
 8003302:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003304:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003308:	d834      	bhi.n	8003374 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800330a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800330c:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003310:	68cf      	ldr	r7, [r1, #12]
 8003312:	fa07 f70e 	lsl.w	r7, r7, lr
 8003316:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800331a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800331c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800331e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003326:	409f      	lsls	r7, r3
 8003328:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800332c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800332e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003330:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003334:	688f      	ldr	r7, [r1, #8]
 8003336:	fa07 f70e 	lsl.w	r7, r7, lr
 800333a:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003340:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003342:	d119      	bne.n	8003378 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003344:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003348:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800334c:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003350:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003354:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003358:	f04f 0b0f 	mov.w	fp, #15
 800335c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003360:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003364:	690f      	ldr	r7, [r1, #16]
 8003366:	fa07 f70a 	lsl.w	r7, r7, sl
 800336a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800336e:	f8c8 7020 	str.w	r7, [r8, #32]
 8003372:	e001      	b.n	8003378 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003374:	2d03      	cmp	r5, #3
 8003376:	d1da      	bne.n	800332e <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003378:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800337a:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800337e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003382:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003384:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003388:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338a:	d051      	beq.n	8003430 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003390:	f045 0501 	orr.w	r5, r5, #1
 8003394:	f8c9 5018 	str.w	r5, [r9, #24]
 8003398:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800339c:	f023 0703 	bic.w	r7, r3, #3
 80033a0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80033a4:	f005 0501 	and.w	r5, r5, #1
 80033a8:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80033ac:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80033b4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033b6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80033ba:	f04f 0e0f 	mov.w	lr, #15
 80033be:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033c2:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033c6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033ca:	d033      	beq.n	8003434 <HAL_GPIO_Init+0x16c>
 80033cc:	4d1e      	ldr	r5, [pc, #120]	@ (8003448 <HAL_GPIO_Init+0x180>)
 80033ce:	42a8      	cmp	r0, r5
 80033d0:	d032      	beq.n	8003438 <HAL_GPIO_Init+0x170>
 80033d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033d6:	42a8      	cmp	r0, r5
 80033d8:	d030      	beq.n	800343c <HAL_GPIO_Init+0x174>
 80033da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033de:	42a8      	cmp	r0, r5
 80033e0:	d02e      	beq.n	8003440 <HAL_GPIO_Init+0x178>
 80033e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033e6:	42a8      	cmp	r0, r5
 80033e8:	bf14      	ite	ne
 80033ea:	2505      	movne	r5, #5
 80033ec:	2504      	moveq	r5, #4
 80033ee:	fa05 f50c 	lsl.w	r5, r5, ip
 80033f2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033f6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80033f8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80033fa:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033fc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8003400:	bf0c      	ite	eq
 8003402:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003404:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8003406:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8003408:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800340a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 800340e:	bf0c      	ite	eq
 8003410:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003412:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8003414:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8003416:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003418:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 800341c:	bf0c      	ite	eq
 800341e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003420:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8003422:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8003424:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003426:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003428:	bf54      	ite	pl
 800342a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800342c:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 800342e:	6025      	str	r5, [r4, #0]
    position++;
 8003430:	3301      	adds	r3, #1
 8003432:	e74f      	b.n	80032d4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003434:	2500      	movs	r5, #0
 8003436:	e7da      	b.n	80033ee <HAL_GPIO_Init+0x126>
 8003438:	2501      	movs	r5, #1
 800343a:	e7d8      	b.n	80033ee <HAL_GPIO_Init+0x126>
 800343c:	2502      	movs	r5, #2
 800343e:	e7d6      	b.n	80033ee <HAL_GPIO_Init+0x126>
 8003440:	2503      	movs	r5, #3
 8003442:	e7d4      	b.n	80033ee <HAL_GPIO_Init+0x126>
 8003444:	40010400 	.word	0x40010400
 8003448:	48000400 	.word	0x48000400
 800344c:	40021000 	.word	0x40021000

08003450 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	b10a      	cbz	r2, 8003456 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	6181      	str	r1, [r0, #24]
 8003454:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003456:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003458:	4770      	bx	lr
	...

0800345c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800345c:	4a02      	ldr	r2, [pc, #8]	@ (8003468 <HAL_PWR_EnableBkUpAccess+0xc>)
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	4770      	bx	lr
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	4605      	mov	r5, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	d033      	beq.n	80034de <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	07da      	lsls	r2, r3, #31
 800347a:	d411      	bmi.n	80034a0 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	079b      	lsls	r3, r3, #30
 8003480:	f100 8081 	bmi.w	8003586 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	071c      	lsls	r4, r3, #28
 8003488:	f100 80eb 	bmi.w	8003662 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	0758      	lsls	r0, r3, #29
 8003490:	f100 8130 	bmi.w	80036f4 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003494:	69eb      	ldr	r3, [r5, #28]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 81b5 	bne.w	8003806 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 800349c:	2000      	movs	r0, #0
 800349e:	e047      	b.n	8003530 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034a0:	4cb0      	ldr	r4, [pc, #704]	@ (8003764 <HAL_RCC_OscConfig+0x2f8>)
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d007      	beq.n	80034bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d115      	bne.n	80034e2 <HAL_RCC_OscConfig+0x76>
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	03df      	lsls	r7, r3, #15
 80034ba:	d512      	bpl.n	80034e2 <HAL_RCC_OscConfig+0x76>
 80034bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	6821      	ldr	r1, [r4, #0]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	fab3 f383 	clz	r3, r3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	420b      	tst	r3, r1
 80034d6:	d0d1      	beq.n	800347c <HAL_RCC_OscConfig+0x10>
 80034d8:	686b      	ldr	r3, [r5, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ce      	bne.n	800347c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80034de:	2001      	movs	r0, #1
 80034e0:	e026      	b.n	8003530 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	686a      	ldr	r2, [r5, #4]
 80034e4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80034e8:	d125      	bne.n	8003536 <HAL_RCC_OscConfig+0xca>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80034f4:	68a9      	ldr	r1, [r5, #8]
 80034f6:	f023 030f 	bic.w	r3, r3, #15
 80034fa:	430b      	orrs	r3, r1
 80034fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fe:	b352      	cbz	r2, 8003556 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8003500:	f7ff f872 	bl	80025e8 <HAL_GetTick>
 8003504:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003508:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	f04f 0801 	mov.w	r8, #1
 800350e:	fa97 f3a7 	rbit	r3, r7
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	fa97 f3a7 	rbit	r3, r7
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	fa08 f303 	lsl.w	r3, r8, r3
 8003520:	4213      	tst	r3, r2
 8003522:	d1ab      	bne.n	800347c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003524:	f7ff f860 	bl	80025e8 <HAL_GetTick>
 8003528:	1b80      	subs	r0, r0, r6
 800352a:	2864      	cmp	r0, #100	@ 0x64
 800352c:	d9ef      	bls.n	800350e <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 800352e:	2003      	movs	r0, #3
}
 8003530:	b002      	add	sp, #8
 8003532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	b932      	cbnz	r2, 8003548 <HAL_RCC_OscConfig+0xdc>
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003546:	e7d3      	b.n	80034f0 <HAL_RCC_OscConfig+0x84>
 8003548:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 800354c:	d1f5      	bne.n	800353a <HAL_RCC_OscConfig+0xce>
 800354e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	e7c9      	b.n	80034ea <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8003556:	f7ff f847 	bl	80025e8 <HAL_GetTick>
 800355a:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800355e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003560:	f04f 0801 	mov.w	r8, #1
 8003564:	fa97 f3a7 	rbit	r3, r7
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	fa97 f3a7 	rbit	r3, r7
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	fa08 f303 	lsl.w	r3, r8, r3
 8003576:	4213      	tst	r3, r2
 8003578:	d080      	beq.n	800347c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800357a:	f7ff f835 	bl	80025e8 <HAL_GetTick>
 800357e:	1b80      	subs	r0, r0, r6
 8003580:	2864      	cmp	r0, #100	@ 0x64
 8003582:	d9ef      	bls.n	8003564 <HAL_RCC_OscConfig+0xf8>
 8003584:	e7d3      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003586:	4c77      	ldr	r4, [pc, #476]	@ (8003764 <HAL_RCC_OscConfig+0x2f8>)
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	f013 0f0c 	tst.w	r3, #12
 800358e:	d007      	beq.n	80035a0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003590:	6863      	ldr	r3, [r4, #4]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11f      	bne.n	80035da <HAL_RCC_OscConfig+0x16e>
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	03de      	lsls	r6, r3, #15
 800359e:	d41c      	bmi.n	80035da <HAL_RCC_OscConfig+0x16e>
 80035a0:	2302      	movs	r3, #2
 80035a2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	6821      	ldr	r1, [r4, #0]
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	2201      	movs	r2, #1
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	420b      	tst	r3, r1
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_OscConfig+0x154>
 80035ba:	692b      	ldr	r3, [r5, #16]
 80035bc:	4293      	cmp	r3, r2
 80035be:	d18e      	bne.n	80034de <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	6821      	ldr	r1, [r4, #0]
 80035c2:	22f8      	movs	r2, #248	@ 0xf8
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	696b      	ldr	r3, [r5, #20]
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	4093      	lsls	r3, r2
 80035d0:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80035d4:	4313      	orrs	r3, r2
 80035d6:	6023      	str	r3, [r4, #0]
 80035d8:	e754      	b.n	8003484 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035da:	692a      	ldr	r2, [r5, #16]
 80035dc:	2601      	movs	r6, #1
 80035de:	b1fa      	cbz	r2, 8003620 <HAL_RCC_OscConfig+0x1b4>
 80035e0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	f04f 0802 	mov.w	r8, #2
 80035f6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80035f8:	f7fe fff6 	bl	80025e8 <HAL_GetTick>
 80035fc:	4607      	mov	r7, r0
 80035fe:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	fa98 f3a8 	rbit	r3, r8
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	fa06 f303 	lsl.w	r3, r6, r3
 8003610:	4213      	tst	r3, r2
 8003612:	d1d5      	bne.n	80035c0 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003614:	f7fe ffe8 	bl	80025e8 <HAL_GetTick>
 8003618:	1bc0      	subs	r0, r0, r7
 800361a:	2802      	cmp	r0, #2
 800361c:	d9ef      	bls.n	80035fe <HAL_RCC_OscConfig+0x192>
 800361e:	e786      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
 8003620:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800362c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	f04f 0802 	mov.w	r8, #2
 8003636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003638:	f7fe ffd6 	bl	80025e8 <HAL_GetTick>
 800363c:	4607      	mov	r7, r0
 800363e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	fa98 f3a8 	rbit	r3, r8
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	fa06 f303 	lsl.w	r3, r6, r3
 8003650:	4213      	tst	r3, r2
 8003652:	f43f af17 	beq.w	8003484 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe ffc7 	bl	80025e8 <HAL_GetTick>
 800365a:	1bc0      	subs	r0, r0, r7
 800365c:	2802      	cmp	r0, #2
 800365e:	d9ee      	bls.n	800363e <HAL_RCC_OscConfig+0x1d2>
 8003660:	e765      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003662:	69aa      	ldr	r2, [r5, #24]
 8003664:	4e3f      	ldr	r6, [pc, #252]	@ (8003764 <HAL_RCC_OscConfig+0x2f8>)
 8003666:	4940      	ldr	r1, [pc, #256]	@ (8003768 <HAL_RCC_OscConfig+0x2fc>)
 8003668:	2401      	movs	r4, #1
 800366a:	b30a      	cbz	r2, 80036b0 <HAL_RCC_OscConfig+0x244>
 800366c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	440b      	add	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	2702      	movs	r7, #2
 800367a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800367c:	f7fe ffb4 	bl	80025e8 <HAL_GetTick>
 8003680:	4680      	mov	r8, r0
 8003682:	fa97 f3a7 	rbit	r3, r7
 8003686:	fa97 f3a7 	rbit	r3, r7
 800368a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8003690:	fa97 f3a7 	rbit	r3, r7
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	fa04 f303 	lsl.w	r3, r4, r3
 800369c:	4213      	tst	r3, r2
 800369e:	f47f aef5 	bne.w	800348c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fe ffa1 	bl	80025e8 <HAL_GetTick>
 80036a6:	eba0 0008 	sub.w	r0, r0, r8
 80036aa:	2802      	cmp	r0, #2
 80036ac:	d9e9      	bls.n	8003682 <HAL_RCC_OscConfig+0x216>
 80036ae:	e73e      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
 80036b0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	440b      	add	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	2702      	movs	r7, #2
 80036be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036c0:	f7fe ff92 	bl	80025e8 <HAL_GetTick>
 80036c4:	4680      	mov	r8, r0
 80036c6:	fa97 f3a7 	rbit	r3, r7
 80036ca:	fa97 f3a7 	rbit	r3, r7
 80036ce:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d2:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80036d4:	fa97 f3a7 	rbit	r3, r7
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	fa04 f303 	lsl.w	r3, r4, r3
 80036e0:	4213      	tst	r3, r2
 80036e2:	f43f aed3 	beq.w	800348c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fe ff7f 	bl	80025e8 <HAL_GetTick>
 80036ea:	eba0 0008 	sub.w	r0, r0, r8
 80036ee:	2802      	cmp	r0, #2
 80036f0:	d9e9      	bls.n	80036c6 <HAL_RCC_OscConfig+0x25a>
 80036f2:	e71c      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4c1b      	ldr	r4, [pc, #108]	@ (8003764 <HAL_RCC_OscConfig+0x2f8>)
 80036f6:	69e3      	ldr	r3, [r4, #28]
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	d431      	bmi.n	8003760 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	69e3      	ldr	r3, [r4, #28]
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003702:	61e3      	str	r3, [r4, #28]
 8003704:	69e3      	ldr	r3, [r4, #28]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800370e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4f16      	ldr	r7, [pc, #88]	@ (800376c <HAL_RCC_OscConfig+0x300>)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	05da      	lsls	r2, r3, #23
 8003716:	d52b      	bpl.n	8003770 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003718:	68eb      	ldr	r3, [r5, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d139      	bne.n	8003792 <HAL_RCC_OscConfig+0x326>
 800371e:	6a23      	ldr	r3, [r4, #32]
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003726:	f7fe ff5f 	bl	80025e8 <HAL_GetTick>
 800372a:	2702      	movs	r7, #2
 800372c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003736:	fa97 f3a7 	rbit	r3, r7
 800373a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	6a22      	ldr	r2, [r4, #32]
 8003740:	fa97 f3a7 	rbit	r3, r7
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	fa09 f303 	lsl.w	r3, r9, r3
 800374c:	4213      	tst	r3, r2
 800374e:	d053      	beq.n	80037f8 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8003750:	2e00      	cmp	r6, #0
 8003752:	f43f ae9f 	beq.w	8003494 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003756:	69e3      	ldr	r3, [r4, #28]
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375c:	61e3      	str	r3, [r4, #28]
 800375e:	e699      	b.n	8003494 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003760:	2600      	movs	r6, #0
 8003762:	e7d5      	b.n	8003710 <HAL_RCC_OscConfig+0x2a4>
 8003764:	40021000 	.word	0x40021000
 8003768:	10908120 	.word	0x10908120
 800376c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003776:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003778:	f7fe ff36 	bl	80025e8 <HAL_GetTick>
 800377c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	05db      	lsls	r3, r3, #23
 8003782:	d4c9      	bmi.n	8003718 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fe ff30 	bl	80025e8 <HAL_GetTick>
 8003788:	eba0 0008 	sub.w	r0, r0, r8
 800378c:	2864      	cmp	r0, #100	@ 0x64
 800378e:	d9f6      	bls.n	800377e <HAL_RCC_OscConfig+0x312>
 8003790:	e6cd      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	bb1b      	cbnz	r3, 80037dc <HAL_RCC_OscConfig+0x370>
 8003794:	6a23      	ldr	r3, [r4, #32]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6223      	str	r3, [r4, #32]
 800379c:	6a23      	ldr	r3, [r4, #32]
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80037a4:	f7fe ff20 	bl	80025e8 <HAL_GetTick>
 80037a8:	2702      	movs	r7, #2
 80037aa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80037b4:	fa97 f3a7 	rbit	r3, r7
 80037b8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037bc:	6a22      	ldr	r2, [r4, #32]
 80037be:	fa97 f3a7 	rbit	r3, r7
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4213      	tst	r3, r2
 80037cc:	d0c0      	beq.n	8003750 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe ff0b 	bl	80025e8 <HAL_GetTick>
 80037d2:	eba0 0008 	sub.w	r0, r0, r8
 80037d6:	4550      	cmp	r0, sl
 80037d8:	d9ec      	bls.n	80037b4 <HAL_RCC_OscConfig+0x348>
 80037da:	e6a8      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037dc:	2b05      	cmp	r3, #5
 80037de:	6a23      	ldr	r3, [r4, #32]
 80037e0:	d103      	bne.n	80037ea <HAL_RCC_OscConfig+0x37e>
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6223      	str	r3, [r4, #32]
 80037e8:	e799      	b.n	800371e <HAL_RCC_OscConfig+0x2b2>
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6223      	str	r3, [r4, #32]
 80037f0:	6a23      	ldr	r3, [r4, #32]
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	e795      	b.n	8003724 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe fef6 	bl	80025e8 <HAL_GetTick>
 80037fc:	eba0 0008 	sub.w	r0, r0, r8
 8003800:	4550      	cmp	r0, sl
 8003802:	d998      	bls.n	8003736 <HAL_RCC_OscConfig+0x2ca>
 8003804:	e693      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003806:	4c46      	ldr	r4, [pc, #280]	@ (8003920 <HAL_RCC_OscConfig+0x4b4>)
 8003808:	6862      	ldr	r2, [r4, #4]
 800380a:	f002 020c 	and.w	r2, r2, #12
 800380e:	2a08      	cmp	r2, #8
 8003810:	d074      	beq.n	80038fc <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	2b02      	cmp	r3, #2
 8003814:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003818:	d14d      	bne.n	80038b6 <HAL_RCC_OscConfig+0x44a>
 800381a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003826:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003830:	f7fe feda 	bl	80025e8 <HAL_GetTick>
 8003834:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8003838:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800383a:	2601      	movs	r6, #1
 800383c:	fa98 f3a8 	rbit	r3, r8
 8003840:	6822      	ldr	r2, [r4, #0]
 8003842:	fa98 f3a8 	rbit	r3, r8
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	fa06 f303 	lsl.w	r3, r6, r3
 800384e:	4213      	tst	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003852:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8003856:	6862      	ldr	r2, [r4, #4]
 8003858:	430b      	orrs	r3, r1
 800385a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800385e:	4313      	orrs	r3, r2
 8003860:	6063      	str	r3, [r4, #4]
 8003862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003866:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003872:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003876:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003878:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800387a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800387c:	f7fe feb4 	bl	80025e8 <HAL_GetTick>
 8003880:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8003884:	4605      	mov	r5, r0
 8003886:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	fa96 f3a6 	rbit	r3, r6
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	fa07 f303 	lsl.w	r3, r7, r3
 8003898:	4213      	tst	r3, r2
 800389a:	f47f adff 	bne.w	800349c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fe fea3 	bl	80025e8 <HAL_GetTick>
 80038a2:	1b40      	subs	r0, r0, r5
 80038a4:	2802      	cmp	r0, #2
 80038a6:	d9ee      	bls.n	8003886 <HAL_RCC_OscConfig+0x41a>
 80038a8:	e641      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fe fe9d 	bl	80025e8 <HAL_GetTick>
 80038ae:	1bc0      	subs	r0, r0, r7
 80038b0:	2802      	cmp	r0, #2
 80038b2:	d9c3      	bls.n	800383c <HAL_RCC_OscConfig+0x3d0>
 80038b4:	e63b      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
 80038b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038c2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038cc:	f7fe fe8c 	bl	80025e8 <HAL_GetTick>
 80038d0:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80038d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d6:	2701      	movs	r7, #1
 80038d8:	fa96 f3a6 	rbit	r3, r6
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	fa96 f3a6 	rbit	r3, r6
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	fa07 f303 	lsl.w	r3, r7, r3
 80038ea:	4213      	tst	r3, r2
 80038ec:	f43f add6 	beq.w	800349c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fe fe7a 	bl	80025e8 <HAL_GetTick>
 80038f4:	1b40      	subs	r0, r0, r5
 80038f6:	2802      	cmp	r0, #2
 80038f8:	d9ee      	bls.n	80038d8 <HAL_RCC_OscConfig+0x46c>
 80038fa:	e618      	b.n	800352e <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f43f adee 	beq.w	80034de <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8003902:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003904:	6a2b      	ldr	r3, [r5, #32]
 8003906:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800390a:	429a      	cmp	r2, r3
 800390c:	f47f ade7 	bne.w	80034de <HAL_RCC_OscConfig+0x72>
 8003910:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003912:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003916:	1ac0      	subs	r0, r0, r3
 8003918:	bf18      	it	ne
 800391a:	2001      	movne	r0, #1
 800391c:	e608      	b.n	8003530 <HAL_RCC_OscConfig+0xc4>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x34>)
 8003926:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003928:	f002 010c 	and.w	r1, r2, #12
 800392c:	2908      	cmp	r1, #8
 800392e:	d111      	bne.n	8003954 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003932:	480a      	ldr	r0, [pc, #40]	@ (800395c <HAL_RCC_GetSysClockFreq+0x38>)
 8003934:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003938:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800393a:	bf44      	itt	mi
 800393c:	f003 030f 	andmi.w	r3, r3, #15
 8003940:	4a07      	ldrmi	r2, [pc, #28]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003942:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003944:	bf49      	itett	mi
 8003946:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003948:	4b06      	ldrpl	r3, [pc, #24]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800394a:	4b07      	ldrmi	r3, [pc, #28]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x44>)
 800394c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003950:	4358      	muls	r0, r3
 8003952:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003954:	4804      	ldr	r0, [pc, #16]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003956:	4770      	bx	lr
 8003958:	40021000 	.word	0x40021000
 800395c:	0800cb92 	.word	0x0800cb92
 8003960:	0800cb82 	.word	0x0800cb82
 8003964:	003d0900 	.word	0x003d0900
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_ClockConfig>:
{
 800396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003970:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003972:	4604      	mov	r4, r0
 8003974:	b910      	cbnz	r0, 800397c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003976:	2001      	movs	r0, #1
}
 8003978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa8 <HAL_RCC_ClockConfig+0x13c>)
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	428b      	cmp	r3, r1
 8003986:	d32e      	bcc.n	80039e6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	0791      	lsls	r1, r2, #30
 800398c:	d436      	bmi.n	80039fc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	07d2      	lsls	r2, r2, #31
 8003990:	d43c      	bmi.n	8003a0c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003992:	4a45      	ldr	r2, [pc, #276]	@ (8003aa8 <HAL_RCC_ClockConfig+0x13c>)
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	42ab      	cmp	r3, r5
 800399c:	d870      	bhi.n	8003a80 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	4d42      	ldr	r5, [pc, #264]	@ (8003aac <HAL_RCC_ClockConfig+0x140>)
 80039a2:	f012 0f04 	tst.w	r2, #4
 80039a6:	d177      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	0713      	lsls	r3, r2, #28
 80039aa:	d506      	bpl.n	80039ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ac:	686b      	ldr	r3, [r5, #4]
 80039ae:	6922      	ldr	r2, [r4, #16]
 80039b0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80039b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80039b8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ba:	f7ff ffb3 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80039be:	686b      	ldr	r3, [r5, #4]
 80039c0:	22f0      	movs	r2, #240	@ 0xf0
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	fab2 f282 	clz	r2, r2
 80039ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a37      	ldr	r2, [pc, #220]	@ (8003ab0 <HAL_RCC_ClockConfig+0x144>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	40d8      	lsrs	r0, r3
 80039d6:	4b37      	ldr	r3, [pc, #220]	@ (8003ab4 <HAL_RCC_ClockConfig+0x148>)
 80039d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80039da:	4b37      	ldr	r3, [pc, #220]	@ (8003ab8 <HAL_RCC_ClockConfig+0x14c>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	f7fe fcb5 	bl	800234c <HAL_InitTick>
  return HAL_OK;
 80039e2:	2000      	movs	r0, #0
 80039e4:	e7c8      	b.n	8003978 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	f023 0307 	bic.w	r3, r3, #7
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f0:	6813      	ldr	r3, [r2, #0]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	428b      	cmp	r3, r1
 80039f8:	d1bd      	bne.n	8003976 <HAL_RCC_ClockConfig+0xa>
 80039fa:	e7c5      	b.n	8003988 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	492b      	ldr	r1, [pc, #172]	@ (8003aac <HAL_RCC_ClockConfig+0x140>)
 80039fe:	68a0      	ldr	r0, [r4, #8]
 8003a00:	684b      	ldr	r3, [r1, #4]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a06:	4303      	orrs	r3, r0
 8003a08:	604b      	str	r3, [r1, #4]
 8003a0a:	e7c0      	b.n	800398e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0c:	6862      	ldr	r2, [r4, #4]
 8003a0e:	4e27      	ldr	r6, [pc, #156]	@ (8003aac <HAL_RCC_ClockConfig+0x140>)
 8003a10:	2a01      	cmp	r2, #1
 8003a12:	d124      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xf2>
 8003a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a18:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1c:	6831      	ldr	r1, [r6, #0]
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	d0a3      	beq.n	8003976 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2e:	6873      	ldr	r3, [r6, #4]
 8003a30:	f023 0303 	bic.w	r3, r3, #3
 8003a34:	4313      	orrs	r3, r2
 8003a36:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003a38:	f7fe fdd6 	bl	80025e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003a40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	6873      	ldr	r3, [r6, #4]
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a4e:	d0a0      	beq.n	8003992 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fe fdca 	bl	80025e8 <HAL_GetTick>
 8003a54:	1bc0      	subs	r0, r0, r7
 8003a56:	4540      	cmp	r0, r8
 8003a58:	d9f3      	bls.n	8003a42 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003a5a:	2003      	movs	r0, #3
 8003a5c:	e78c      	b.n	8003978 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5e:	2a02      	cmp	r2, #2
 8003a60:	bf0c      	ite	eq
 8003a62:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003a66:	2302      	movne	r3, #2
 8003a68:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	6830      	ldr	r0, [r6, #0]
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	2101      	movs	r1, #1
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	4203      	tst	r3, r0
 8003a7e:	e7d5      	b.n	8003a2c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	432b      	orrs	r3, r5
 8003a88:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	6813      	ldr	r3, [r2, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	42ab      	cmp	r3, r5
 8003a92:	f47f af70 	bne.w	8003976 <HAL_RCC_ClockConfig+0xa>
 8003a96:	e782      	b.n	800399e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	686b      	ldr	r3, [r5, #4]
 8003a9a:	68e1      	ldr	r1, [r4, #12]
 8003a9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	606b      	str	r3, [r5, #4]
 8003aa4:	e780      	b.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
 8003aa6:	bf00      	nop
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800cb72 	.word	0x0800cb72
 8003ab4:	20000008 	.word	0x20000008
 8003ab8:	20000010 	.word	0x20000010

08003abc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	fa92 f2a2 	rbit	r2, r2
 8003ac8:	fab2 f282 	clz	r2, r2
 8003acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ad0:	40d3      	lsrs	r3, r2
 8003ad2:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ad4:	5cd3      	ldrb	r3, [r2, r3]
 8003ad6:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003ad8:	6810      	ldr	r0, [r2, #0]
}    
 8003ada:	40d8      	lsrs	r0, r3
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	0800cb6a 	.word	0x0800cb6a
 8003ae8:	20000008 	.word	0x20000008

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003aec:	4b08      	ldr	r3, [pc, #32]	@ (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aee:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	fa92 f2a2 	rbit	r2, r2
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003b00:	40d3      	lsrs	r3, r2
 8003b02:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b04:	5cd3      	ldrb	r3, [r2, r3]
 8003b06:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8003b08:	6810      	ldr	r0, [r2, #0]
} 
 8003b0a:	40d8      	lsrs	r0, r3
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
 8003b14:	0800cb6a 	.word	0x0800cb6a
 8003b18:	20000008 	.word	0x20000008

08003b1c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_GetClockConfig+0x34>)
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	f002 0203 	and.w	r2, r2, #3
 8003b28:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003b30:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003b38:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	08db      	lsrs	r3, r3, #3
 8003b3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b42:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003b44:	4b03      	ldr	r3, [pc, #12]	@ (8003b54 <HAL_RCC_GetClockConfig+0x38>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	600b      	str	r3, [r1, #0]
}
 8003b4e:	4770      	bx	lr
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40022000 	.word	0x40022000

08003b58 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b58:	6803      	ldr	r3, [r0, #0]
{
 8003b5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5e:	03dd      	lsls	r5, r3, #15
{
 8003b60:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b62:	d524      	bpl.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b64:	4d78      	ldr	r5, [pc, #480]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b66:	69eb      	ldr	r3, [r5, #28]
 8003b68:	00d8      	lsls	r0, r3, #3
 8003b6a:	f100 8091 	bmi.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	69eb      	ldr	r3, [r5, #28]
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	61eb      	str	r3, [r5, #28]
 8003b76:	69eb      	ldr	r3, [r5, #28]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b80:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4f72      	ldr	r7, [pc, #456]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	05d9      	lsls	r1, r3, #23
 8003b88:	f140 8084 	bpl.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b8c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b8e:	6862      	ldr	r2, [r4, #4]
 8003b90:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003b94:	f040 8093 	bne.w	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b98:	6a2b      	ldr	r3, [r5, #32]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba4:	b11e      	cbz	r6, 8003bae <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	69eb      	ldr	r3, [r5, #28]
 8003ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	07df      	lsls	r7, r3, #31
 8003bb2:	d506      	bpl.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb4:	4964      	ldr	r1, [pc, #400]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bb6:	68a0      	ldr	r0, [r4, #8]
 8003bb8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bba:	f022 0203 	bic.w	r2, r2, #3
 8003bbe:	4302      	orrs	r2, r0
 8003bc0:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc2:	079e      	lsls	r6, r3, #30
 8003bc4:	d506      	bpl.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc6:	4960      	ldr	r1, [pc, #384]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bc8:	68e0      	ldr	r0, [r4, #12]
 8003bca:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bcc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003bd0:	4302      	orrs	r2, r0
 8003bd2:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd4:	075d      	lsls	r5, r3, #29
 8003bd6:	d506      	bpl.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd8:	495b      	ldr	r1, [pc, #364]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bda:	6920      	ldr	r0, [r4, #16]
 8003bdc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bde:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003be2:	4302      	orrs	r2, r0
 8003be4:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be6:	0698      	lsls	r0, r3, #26
 8003be8:	d506      	bpl.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bea:	4957      	ldr	r1, [pc, #348]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bec:	69e0      	ldr	r0, [r4, #28]
 8003bee:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bf0:	f022 0210 	bic.w	r2, r2, #16
 8003bf4:	4302      	orrs	r2, r0
 8003bf6:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf8:	0399      	lsls	r1, r3, #14
 8003bfa:	d506      	bpl.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bfc:	4952      	ldr	r1, [pc, #328]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bfe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003c00:	684a      	ldr	r2, [r1, #4]
 8003c02:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8003c06:	4302      	orrs	r2, r0
 8003c08:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0a:	065a      	lsls	r2, r3, #25
 8003c0c:	d506      	bpl.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c0e:	494e      	ldr	r1, [pc, #312]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c10:	6a20      	ldr	r0, [r4, #32]
 8003c12:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c14:	f022 0220 	bic.w	r2, r2, #32
 8003c18:	4302      	orrs	r2, r0
 8003c1a:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c1c:	071f      	lsls	r7, r3, #28
 8003c1e:	d506      	bpl.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c20:	4949      	ldr	r1, [pc, #292]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c22:	6960      	ldr	r0, [r4, #20]
 8003c24:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c26:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c2e:	06de      	lsls	r6, r3, #27
 8003c30:	d506      	bpl.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c32:	4945      	ldr	r1, [pc, #276]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c34:	69a0      	ldr	r0, [r4, #24]
 8003c36:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c38:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003c3c:	4302      	orrs	r2, r0
 8003c3e:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c40:	059d      	lsls	r5, r3, #22
 8003c42:	d506      	bpl.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c44:	4940      	ldr	r1, [pc, #256]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003c48:	684a      	ldr	r2, [r1, #4]
 8003c4a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8003c4e:	4302      	orrs	r2, r0
 8003c50:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c52:	0618      	lsls	r0, r3, #24
 8003c54:	d506      	bpl.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c56:	493c      	ldr	r1, [pc, #240]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003c5a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003c5c:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8003c60:	4302      	orrs	r2, r0
 8003c62:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c64:	05d9      	lsls	r1, r3, #23
 8003c66:	d506      	bpl.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c68:	4937      	ldr	r1, [pc, #220]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c6a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003c6c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003c6e:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8003c72:	4302      	orrs	r2, r0
 8003c74:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c76:	04da      	lsls	r2, r3, #19
 8003c78:	d506      	bpl.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c7a:	4933      	ldr	r1, [pc, #204]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c7c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003c7e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c84:	4302      	orrs	r2, r0
 8003c86:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c88:	049b      	lsls	r3, r3, #18
 8003c8a:	d454      	bmi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e013      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8003c90:	2600      	movs	r6, #0
 8003c92:	e776      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fca4 	bl	80025e8 <HAL_GetTick>
 8003ca0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	05da      	lsls	r2, r3, #23
 8003ca6:	f53f af71 	bmi.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fe fc9d 	bl	80025e8 <HAL_GetTick>
 8003cae:	eba0 0008 	sub.w	r0, r0, r8
 8003cb2:	2864      	cmp	r0, #100	@ 0x64
 8003cb4:	d9f5      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8003cb6:	2003      	movs	r0, #3
}
 8003cb8:	b002      	add	sp, #8
 8003cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cbe:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	f43f af68 	beq.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cc8:	6a29      	ldr	r1, [r5, #32]
 8003cca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cce:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8003cd2:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd6:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	4462      	add	r2, ip
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	2701      	movs	r7, #1
 8003ce4:	6017      	str	r7, [r2, #0]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	4463      	add	r3, ip
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cf6:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8003cf8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cfa:	f57f af4d 	bpl.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fc73 	bl	80025e8 <HAL_GetTick>
 8003d02:	f04f 0802 	mov.w	r8, #2
 8003d06:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003d0c:	fa98 f3a8 	rbit	r3, r8
 8003d10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	6a2a      	ldr	r2, [r5, #32]
 8003d16:	fa98 f3a8 	rbit	r3, r8
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	fa07 f303 	lsl.w	r3, r7, r3
 8003d22:	4213      	tst	r3, r2
 8003d24:	f47f af38 	bne.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fe fc5e 	bl	80025e8 <HAL_GetTick>
 8003d2c:	eba0 0009 	sub.w	r0, r0, r9
 8003d30:	4550      	cmp	r0, sl
 8003d32:	d9eb      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d34:	e7bf      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d36:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d3a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d44:	e7a2      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	10908100 	.word	0x10908100

08003d54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d56:	6803      	ldr	r3, [r0, #0]
 8003d58:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <HAL_RTC_WaitForSynchro+0x2c>)
 8003d5a:	60da      	str	r2, [r3, #12]
{
 8003d5c:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d5e:	f7fe fc43 	bl	80025e8 <HAL_GetTick>
 8003d62:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	069b      	lsls	r3, r3, #26
 8003d6a:	d501      	bpl.n	8003d70 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003d6c:	2000      	movs	r0, #0
}
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d70:	f7fe fc3a 	bl	80025e8 <HAL_GetTick>
 8003d74:	1b40      	subs	r0, r0, r5
 8003d76:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003d7a:	d9f3      	bls.n	8003d64 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	e7f6      	b.n	8003d6e <HAL_RTC_WaitForSynchro+0x1a>
 8003d80:	0001ff5f 	.word	0x0001ff5f

08003d84 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d84:	6803      	ldr	r3, [r0, #0]
{
 8003d86:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d88:	68dc      	ldr	r4, [r3, #12]
 8003d8a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8003d8e:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d90:	d117      	bne.n	8003dc2 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9a:	f7fe fc25 	bl	80025e8 <HAL_GetTick>
 8003d9e:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	065b      	lsls	r3, r3, #25
 8003da6:	d400      	bmi.n	8003daa <RTC_EnterInitMode+0x26>
 8003da8:	b10c      	cbz	r4, 8003dae <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8003daa:	4620      	mov	r0, r4
 8003dac:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dae:	f7fe fc1b 	bl	80025e8 <HAL_GetTick>
 8003db2:	1b80      	subs	r0, r0, r6
 8003db4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003db8:	bf82      	ittt	hi
 8003dba:	2304      	movhi	r3, #4
 8003dbc:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8003dbe:	2401      	movhi	r4, #1
 8003dc0:	e7ee      	b.n	8003da0 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2400      	movs	r4, #0
 8003dc4:	e7f1      	b.n	8003daa <RTC_EnterInitMode+0x26>

08003dc6 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dc6:	6803      	ldr	r3, [r0, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8003dce:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	069b      	lsls	r3, r3, #26
{
 8003dd6:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dd8:	d501      	bpl.n	8003dde <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8003ddc:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dde:	f7ff ffb9 	bl	8003d54 <HAL_RTC_WaitForSynchro>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d0f9      	beq.n	8003dda <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003de6:	2304      	movs	r3, #4
 8003de8:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
 8003dec:	e7f6      	b.n	8003ddc <RTC_ExitInitMode+0x16>

08003dee <HAL_RTC_Init>:
{
 8003dee:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003df0:	4604      	mov	r4, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d041      	beq.n	8003e7a <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003df6:	7f43      	ldrb	r3, [r0, #29]
 8003df8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003dfc:	b913      	cbnz	r3, 8003e04 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8003dfe:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003e00:	f7fe f978 	bl	80020f4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e04:	2302      	movs	r3, #2
 8003e06:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	06d2      	lsls	r2, r2, #27
 8003e0e:	d503      	bpl.n	8003e18 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8003e10:	2301      	movs	r3, #1
 8003e12:	7763      	strb	r3, [r4, #29]
 8003e14:	2000      	movs	r0, #0
}
 8003e16:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e18:	22ca      	movs	r2, #202	@ 0xca
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e1c:	2253      	movs	r2, #83	@ 0x53
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff ffaf 	bl	8003d84 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003e26:	bb10      	cbnz	r0, 8003e6e <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e28:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e2a:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8003e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e36:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e38:	6862      	ldr	r2, [r4, #4]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	4302      	orrs	r2, r0
 8003e3e:	6960      	ldr	r0, [r4, #20]
 8003e40:	4302      	orrs	r2, r0
 8003e42:	430a      	orrs	r2, r1
 8003e44:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e46:	68e2      	ldr	r2, [r4, #12]
 8003e48:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68a1      	ldr	r1, [r4, #8]
 8003e4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e52:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ffb6 	bl	8003dc6 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8003e5a:	b940      	cbnz	r0, 8003e6e <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e5c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e5e:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e62:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	22ff      	movs	r2, #255	@ 0xff
 8003e72:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0cb      	beq.n	8003e10 <HAL_RTC_Init+0x22>
 8003e78:	e7cd      	b.n	8003e16 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	e7cb      	b.n	8003e16 <HAL_RTC_Init+0x28>

08003e7e <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8003e7e:	2300      	movs	r3, #0

  while (number >= 10U)
 8003e80:	2809      	cmp	r0, #9
 8003e82:	d803      	bhi.n	8003e8c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e84:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003e88:	b2c0      	uxtb	r0, r0
 8003e8a:	4770      	bx	lr
    number -= 10U;
 8003e8c:	380a      	subs	r0, #10
    bcdhigh++;
 8003e8e:	3301      	adds	r3, #1
    number -= 10U;
 8003e90:	b2c0      	uxtb	r0, r0
 8003e92:	e7f5      	b.n	8003e80 <RTC_ByteToBcd2+0x2>

08003e94 <HAL_RTC_SetTime>:
{
 8003e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8003e98:	7f03      	ldrb	r3, [r0, #28]
 8003e9a:	2b01      	cmp	r3, #1
{
 8003e9c:	4606      	mov	r6, r0
 8003e9e:	460f      	mov	r7, r1
 8003ea0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003ea4:	d041      	beq.n	8003f2a <HAL_RTC_SetTime+0x96>
 8003ea6:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea8:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8003eaa:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eac:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8003eae:	7838      	ldrb	r0, [r7, #0]
 8003eb0:	787d      	ldrb	r5, [r7, #1]
 8003eb2:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003eb4:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8003eb6:	2a00      	cmp	r2, #0
 8003eb8:	d139      	bne.n	8003f2e <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003eba:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003ebe:	bf08      	it	eq
 8003ec0:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ec2:	f7ff ffdc 	bl	8003e7e <RTC_ByteToBcd2>
 8003ec6:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff ffd8 	bl	8003e7e <RTC_ByteToBcd2>
 8003ece:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7ff ffd4 	bl	8003e7e <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ed8:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8003edc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003ee0:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ee4:	23ca      	movs	r3, #202	@ 0xca
 8003ee6:	624b      	str	r3, [r1, #36]	@ 0x24
 8003ee8:	2353      	movs	r3, #83	@ 0x53
 8003eea:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003eec:	4630      	mov	r0, r6
 8003eee:	f7ff ff49 	bl	8003d84 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003ef2:	b9a8      	cbnz	r0, 8003f20 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ef4:	6832      	ldr	r2, [r6, #0]
 8003ef6:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8003efa:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8003efe:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f00:	6893      	ldr	r3, [r2, #8]
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f06:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f08:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8003f0c:	6891      	ldr	r1, [r2, #8]
 8003f0e:	4303      	orrs	r3, r0
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8003f14:	4630      	mov	r0, r6
 8003f16:	f7ff ff56 	bl	8003dc6 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003f1a:	b908      	cbnz	r0, 8003f20 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f20:	6833      	ldr	r3, [r6, #0]
 8003f22:	22ff      	movs	r2, #255	@ 0xff
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003f26:	2300      	movs	r3, #0
 8003f28:	7733      	strb	r3, [r6, #28]
}
 8003f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f2e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003f32:	bf08      	it	eq
 8003f34:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f36:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f38:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f3a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f3e:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f42:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8003f46:	e7cd      	b.n	8003ee4 <HAL_RTC_SetTime+0x50>

08003f48 <HAL_RTC_SetDate>:
{
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003f4a:	7f03      	ldrb	r3, [r0, #28]
 8003f4c:	2b01      	cmp	r3, #1
{
 8003f4e:	4605      	mov	r5, r0
 8003f50:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003f54:	d027      	beq.n	8003fa6 <HAL_RTC_SetDate+0x5e>
 8003f56:	2301      	movs	r3, #1
 8003f58:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f5a:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f5c:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f5e:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f60:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8003f62:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f64:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f66:	b1fa      	cbz	r2, 8003fa8 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f68:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8003f6c:	433b      	orrs	r3, r7
 8003f6e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f72:	682b      	ldr	r3, [r5, #0]
 8003f74:	22ca      	movs	r2, #202	@ 0xca
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f78:	2253      	movs	r2, #83	@ 0x53
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff ff01 	bl	8003d84 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003f82:	b958      	cbnz	r0, 8003f9c <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f84:	682a      	ldr	r2, [r5, #0]
 8003f86:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8003f8a:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8003f8e:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8003f90:	4628      	mov	r0, r5
 8003f92:	f7ff ff18 	bl	8003dc6 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003f96:	b908      	cbnz	r0, 8003f9c <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	22ff      	movs	r2, #255	@ 0xff
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	772b      	strb	r3, [r5, #28]
}
 8003fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003fa8:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003faa:	bf42      	ittt	mi
 8003fac:	f024 0410 	bicmi.w	r4, r4, #16
 8003fb0:	340a      	addmi	r4, #10
 8003fb2:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fb4:	f7ff ff63 	bl	8003e7e <RTC_ByteToBcd2>
 8003fb8:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fba:	7848      	ldrb	r0, [r1, #1]
 8003fbc:	f7ff ff5f 	bl	8003e7e <RTC_ByteToBcd2>
 8003fc0:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	f7ff ff5b 	bl	8003e7e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fc8:	ea40 0306 	orr.w	r3, r0, r6
 8003fcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fd0:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8003fd4:	e7cd      	b.n	8003f72 <HAL_RTC_SetDate+0x2a>

08003fd6 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003fd6:	0903      	lsrs	r3, r0, #4
 8003fd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003fdc:	f000 000f 	and.w	r0, r0, #15
 8003fe0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8003fe4:	b2c0      	uxtb	r0, r0
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_RTC_GetTime>:
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003fea:	6803      	ldr	r3, [r0, #0]
 8003fec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003fee:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ff0:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003ff2:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ff4:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ff8:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003ffc:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004000:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004002:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004006:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800400a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800400c:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800400e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004010:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004012:	b952      	cbnz	r2, 800402a <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004014:	f7ff ffdf 	bl	8003fd6 <RTC_Bcd2ToByte>
 8004018:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800401a:	4628      	mov	r0, r5
 800401c:	f7ff ffdb 	bl	8003fd6 <RTC_Bcd2ToByte>
 8004020:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004022:	4620      	mov	r0, r4
 8004024:	f7ff ffd7 	bl	8003fd6 <RTC_Bcd2ToByte>
 8004028:	7088      	strb	r0, [r1, #2]
}
 800402a:	2000      	movs	r0, #0
 800402c:	bd38      	pop	{r3, r4, r5, pc}

0800402e <HAL_RTC_GetDate>:
{
 800402e:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004030:	6803      	ldr	r3, [r0, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004034:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004038:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800403c:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004040:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004044:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004046:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004048:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800404a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800404c:	b952      	cbnz	r2, 8004064 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800404e:	f7ff ffc2 	bl	8003fd6 <RTC_Bcd2ToByte>
 8004052:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004054:	4628      	mov	r0, r5
 8004056:	f7ff ffbe 	bl	8003fd6 <RTC_Bcd2ToByte>
 800405a:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff ffba 	bl	8003fd6 <RTC_Bcd2ToByte>
 8004062:	7088      	strb	r0, [r1, #2]
}
 8004064:	2000      	movs	r0, #0
 8004066:	bd38      	pop	{r3, r4, r5, pc}

08004068 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800406a:	460e      	mov	r6, r1
 800406c:	4614      	mov	r4, r2
 800406e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004070:	f7fe faba 	bl	80025e8 <HAL_GetTick>
 8004074:	4434      	add	r4, r6
 8004076:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004078:	f7fe fab6 	bl	80025e8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800407c:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004084:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004086:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004088:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408a:	682a      	ldr	r2, [r5, #0]
 800408c:	6890      	ldr	r0, [r2, #8]
 800408e:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8004092:	d02d      	beq.n	80040f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004094:	1c73      	adds	r3, r6, #1
 8004096:	d0f9      	beq.n	800408c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004098:	f7fe faa6 	bl	80025e8 <HAL_GetTick>
 800409c:	1bc0      	subs	r0, r0, r7
 800409e:	42a0      	cmp	r0, r4
 80040a0:	d328      	bcc.n	80040f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ac:	686a      	ldr	r2, [r5, #4]
 80040ae:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80040b2:	d10a      	bne.n	80040ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 80040b4:	68aa      	ldr	r2, [r5, #8]
 80040b6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80040ba:	d002      	beq.n	80040c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040bc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80040c0:	d103      	bne.n	80040ca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ca:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80040cc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80040d0:	d107      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040e8:	2300      	movs	r3, #0
 80040ea:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040ee:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80040f0:	b003      	add	sp, #12
 80040f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80040f4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80040f6:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80040f8:	2a00      	cmp	r2, #0
      count--;
 80040fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	bf08      	it	eq
 8004102:	4614      	moveq	r4, r2
 8004104:	e7c1      	b.n	800408a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004106:	bf00      	nop
 8004108:	20000008 	.word	0x20000008

0800410c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800410c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004110:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004112:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004114:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004116:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800411a:	4605      	mov	r5, r0
 800411c:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800411e:	f7fe fa63 	bl	80025e8 <HAL_GetTick>
 8004122:	443c      	add	r4, r7
 8004124:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004126:	f7fe fa5f 	bl	80025e8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800412a:	4b29      	ldr	r3, [pc, #164]	@ (80041d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800412c:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2223      	movs	r2, #35	@ 0x23
 8004134:	4353      	muls	r3, r2
 8004136:	0d1b      	lsrs	r3, r3, #20
 8004138:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800413a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800413c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800413e:	682a      	ldr	r2, [r5, #0]
 8004140:	6890      	ldr	r0, [r2, #8]
 8004142:	4030      	ands	r0, r6
 8004144:	d038      	beq.n	80041b8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004146:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800414a:	bf01      	itttt	eq
 800414c:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8004150:	b2db      	uxtbeq	r3, r3
 8004152:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004156:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800415a:	1c7b      	adds	r3, r7, #1
 800415c:	d0f0      	beq.n	8004140 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800415e:	f7fe fa43 	bl	80025e8 <HAL_GetTick>
 8004162:	eba0 0008 	sub.w	r0, r0, r8
 8004166:	42a0      	cmp	r0, r4
 8004168:	d329      	bcc.n	80041be <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004172:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004174:	686a      	ldr	r2, [r5, #4]
 8004176:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800417a:	d10a      	bne.n	8004192 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 800417c:	68aa      	ldr	r2, [r5, #8]
 800417e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004182:	d002      	beq.n	800418a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004184:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004188:	d103      	bne.n	8004192 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004192:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004194:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004198:	d107      	bne.n	80041aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b0:	2300      	movs	r3, #0
 80041b2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80041b6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80041b8:	b003      	add	sp, #12
 80041ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80041be:	9a01      	ldr	r2, [sp, #4]
      count--;
 80041c0:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80041c2:	2a00      	cmp	r2, #0
      count--;
 80041c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	bf08      	it	eq
 80041cc:	4614      	moveq	r4, r2
 80041ce:	e7b6      	b.n	800413e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80041d0:	20000008 	.word	0x20000008

080041d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d6:	6843      	ldr	r3, [r0, #4]
 80041d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80041dc:	4604      	mov	r4, r0
 80041de:	460e      	mov	r6, r1
 80041e0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e2:	d10b      	bne.n	80041fc <SPI_EndRxTransaction+0x28>
 80041e4:	6883      	ldr	r3, [r0, #8]
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ea:	d002      	beq.n	80041f2 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f0:	d104      	bne.n	80041fc <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	6813      	ldr	r3, [r2, #0]
 80041f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fa:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	463a      	mov	r2, r7
 80041fe:	4631      	mov	r1, r6
 8004200:	4620      	mov	r0, r4
 8004202:	f7ff ff31 	bl	8004068 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004206:	4605      	mov	r5, r0
 8004208:	b128      	cbz	r0, 8004216 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800420c:	f043 0320 	orr.w	r3, r3, #32
 8004210:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004212:	2503      	movs	r5, #3
 8004214:	e013      	b.n	800423e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800421c:	d10f      	bne.n	800423e <SPI_EndRxTransaction+0x6a>
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004224:	d002      	beq.n	800422c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d108      	bne.n	800423e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800422c:	463b      	mov	r3, r7
 800422e:	4632      	mov	r2, r6
 8004230:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff ff69 	bl	800410c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800423a:	2800      	cmp	r0, #0
 800423c:	d1e5      	bne.n	800420a <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800423e:	4628      	mov	r0, r5
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004242 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004242:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004244:	4613      	mov	r3, r2
{
 8004246:	460d      	mov	r5, r1
 8004248:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800424a:	460a      	mov	r2, r1
 800424c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8004250:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004252:	f7ff ff5b 	bl	800410c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004256:	b128      	cbz	r0, 8004264 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004258:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800425a:	f043 0320 	orr.w	r3, r3, #32
 800425e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004260:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004262:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	4632      	mov	r2, r6
 8004266:	4629      	mov	r1, r5
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fefd 	bl	8004068 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800426e:	2800      	cmp	r0, #0
 8004270:	d1f2      	bne.n	8004258 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004272:	4633      	mov	r3, r6
 8004274:	462a      	mov	r2, r5
 8004276:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff ff46 	bl	800410c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004280:	2800      	cmp	r0, #0
 8004282:	d0ee      	beq.n	8004262 <SPI_EndRxTxTransaction+0x20>
 8004284:	e7e8      	b.n	8004258 <SPI_EndRxTxTransaction+0x16>

08004286 <HAL_SPI_Init>:
{
 8004286:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004288:	4604      	mov	r4, r0
 800428a:	2800      	cmp	r0, #0
 800428c:	d067      	beq.n	800435e <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800428e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15d      	bne.n	8004350 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004294:	6842      	ldr	r2, [r0, #4]
 8004296:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800429a:	d000      	beq.n	800429e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800429c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429e:	2300      	movs	r3, #0
 80042a0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80042a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80042aa:	b923      	cbnz	r3, 80042b6 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80042ac:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7fd ff33 	bl	800211c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80042b6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042b8:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80042ba:	2302      	movs	r3, #2
 80042bc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80042c0:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042c2:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80042c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ca:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	d942      	bls.n	8004358 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042d2:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042d4:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d8:	bf18      	it	ne
 80042da:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042dc:	68a6      	ldr	r6, [r4, #8]
 80042de:	6863      	ldr	r3, [r4, #4]
 80042e0:	69a1      	ldr	r1, [r4, #24]
 80042e2:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80042e6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80042ea:	4333      	orrs	r3, r6
 80042ec:	6926      	ldr	r6, [r4, #16]
 80042ee:	f006 0602 	and.w	r6, r6, #2
 80042f2:	4333      	orrs	r3, r6
 80042f4:	6966      	ldr	r6, [r4, #20]
 80042f6:	f006 0601 	and.w	r6, r6, #1
 80042fa:	4333      	orrs	r3, r6
 80042fc:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8004300:	4333      	orrs	r3, r6
 8004302:	69e6      	ldr	r6, [r4, #28]
 8004304:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004308:	4333      	orrs	r3, r6
 800430a:	6a26      	ldr	r6, [r4, #32]
 800430c:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8004310:	4333      	orrs	r3, r6
 8004312:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004314:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8004318:	4333      	orrs	r3, r6
 800431a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800431c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800431e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004320:	f006 0608 	and.w	r6, r6, #8
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 800432c:	4333      	orrs	r3, r6
 800432e:	0c09      	lsrs	r1, r1, #16
 8004330:	4303      	orrs	r3, r0
 8004332:	f001 0104 	and.w	r1, r1, #4
 8004336:	430b      	orrs	r3, r1
 8004338:	432b      	orrs	r3, r5
 800433a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800433c:	69d3      	ldr	r3, [r2, #28]
 800433e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004342:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004344:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004346:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004348:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800434a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800434e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004356:	e7a2      	b.n	800429e <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004358:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800435c:	e7bc      	b.n	80042d8 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800435e:	2001      	movs	r0, #1
 8004360:	e7f5      	b.n	800434e <HAL_SPI_Init+0xc8>

08004362 <HAL_SPI_Transmit>:
{
 8004362:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004366:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004368:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800436c:	2b01      	cmp	r3, #1
{
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004374:	f000 80bc 	beq.w	80044f0 <HAL_SPI_Transmit+0x18e>
 8004378:	2301      	movs	r3, #1
 800437a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800437e:	f7fe f933 	bl	80025e8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004382:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004386:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004388:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800438a:	fa5f f983 	uxtb.w	r9, r3
 800438e:	f040 80ac 	bne.w	80044ea <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8004392:	2d00      	cmp	r5, #0
 8004394:	d069      	beq.n	800446a <HAL_SPI_Transmit+0x108>
 8004396:	f1b8 0f00 	cmp.w	r8, #0
 800439a:	d066      	beq.n	800446a <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800439c:	2303      	movs	r3, #3
 800439e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80043a6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80043aa:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ae:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80043b0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80043b4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80043ba:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043bc:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80043c2:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c6:	d107      	bne.n	80043d8 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ce:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80043d0:	6833      	ldr	r3, [r6, #0]
 80043d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043d6:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d8:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043da:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043dc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80043de:	bf5e      	ittt	pl
 80043e0:	6833      	ldrpl	r3, [r6, #0]
 80043e2:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80043e6:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043ee:	d943      	bls.n	8004478 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f0:	b112      	cbz	r2, 80043f8 <HAL_SPI_Transmit+0x96>
 80043f2:	f1b8 0f01 	cmp.w	r8, #1
 80043f6:	d107      	bne.n	8004408 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80043fc:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fe:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004400:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004402:	3b01      	subs	r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004408:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	b9b3      	cbnz	r3, 800443c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800440e:	4652      	mov	r2, sl
 8004410:	4639      	mov	r1, r7
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff ff15 	bl	8004242 <SPI_EndRxTxTransaction>
 8004418:	2800      	cmp	r0, #0
 800441a:	d163      	bne.n	80044e4 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800441c:	68a3      	ldr	r3, [r4, #8]
 800441e:	b933      	cbnz	r3, 800442e <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	9201      	str	r2, [sp, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004430:	b9db      	cbnz	r3, 800446a <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8004432:	2201      	movs	r2, #1
 8004434:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004438:	4699      	mov	r9, r3
 800443a:	e016      	b.n	800446a <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800443c:	6822      	ldr	r2, [r4, #0]
 800443e:	6893      	ldr	r3, [r2, #8]
 8004440:	079d      	lsls	r5, r3, #30
 8004442:	d505      	bpl.n	8004450 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004444:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004446:	f833 1b02 	ldrh.w	r1, [r3], #2
 800444a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800444e:	e7d7      	b.n	8004400 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004450:	f7fe f8ca 	bl	80025e8 <HAL_GetTick>
 8004454:	eba0 000a 	sub.w	r0, r0, sl
 8004458:	42b8      	cmp	r0, r7
 800445a:	d3d5      	bcc.n	8004408 <HAL_SPI_Transmit+0xa6>
 800445c:	1c78      	adds	r0, r7, #1
 800445e:	d0d3      	beq.n	8004408 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8004460:	2301      	movs	r3, #1
 8004462:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8004466:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 800446a:	2300      	movs	r3, #0
 800446c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004470:	4648      	mov	r0, r9
 8004472:	b002      	add	sp, #8
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004478:	b112      	cbz	r2, 8004480 <HAL_SPI_Transmit+0x11e>
 800447a:	f1b8 0f01 	cmp.w	r8, #1
 800447e:	d113      	bne.n	80044a8 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8004480:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d906      	bls.n	8004496 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004488:	f835 3b02 	ldrh.w	r3, [r5], #2
 800448c:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004490:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004492:	3b02      	subs	r3, #2
 8004494:	e006      	b.n	80044a4 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004496:	782b      	ldrb	r3, [r5, #0]
 8004498:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800449a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800449c:	3301      	adds	r3, #1
 800449e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80044a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80044a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0ae      	beq.n	800440e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044b0:	6822      	ldr	r2, [r4, #0]
 80044b2:	6893      	ldr	r3, [r2, #8]
 80044b4:	0799      	lsls	r1, r3, #30
 80044b6:	d50c      	bpl.n	80044d2 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80044b8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80044bc:	b289      	uxth	r1, r1
 80044be:	2901      	cmp	r1, #1
 80044c0:	d904      	bls.n	80044cc <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80044c6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80044ca:	e7e1      	b.n	8004490 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80044d0:	e7e3      	b.n	800449a <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d2:	f7fe f889 	bl	80025e8 <HAL_GetTick>
 80044d6:	eba0 000a 	sub.w	r0, r0, sl
 80044da:	42b8      	cmp	r0, r7
 80044dc:	d3e4      	bcc.n	80044a8 <HAL_SPI_Transmit+0x146>
 80044de:	1c7b      	adds	r3, r7, #1
 80044e0:	d0e2      	beq.n	80044a8 <HAL_SPI_Transmit+0x146>
 80044e2:	e7bd      	b.n	8004460 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e4:	2320      	movs	r3, #32
 80044e6:	6623      	str	r3, [r4, #96]	@ 0x60
 80044e8:	e798      	b.n	800441c <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80044ea:	f04f 0902 	mov.w	r9, #2
 80044ee:	e7bc      	b.n	800446a <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80044f0:	f04f 0902 	mov.w	r9, #2
 80044f4:	e7bc      	b.n	8004470 <HAL_SPI_Transmit+0x10e>

080044f6 <HAL_SPI_TransmitReceive>:
{
 80044f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044fa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80044fc:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8004500:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004502:	2b01      	cmp	r3, #1
{
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
 8004508:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800450a:	f000 8122 	beq.w	8004752 <HAL_SPI_TransmitReceive+0x25c>
 800450e:	2301      	movs	r3, #1
 8004510:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004514:	f7fe f868 	bl	80025e8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004518:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800451c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800451e:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004520:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004522:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004524:	d00a      	beq.n	800453c <HAL_SPI_TransmitReceive+0x46>
 8004526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800452a:	f040 8110 	bne.w	800474e <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800452e:	68a2      	ldr	r2, [r4, #8]
 8004530:	2a00      	cmp	r2, #0
 8004532:	f040 810c 	bne.w	800474e <HAL_SPI_TransmitReceive+0x258>
 8004536:	2904      	cmp	r1, #4
 8004538:	f040 8109 	bne.w	800474e <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800453c:	b92d      	cbnz	r5, 800454a <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 800453e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8004540:	2300      	movs	r3, #0
 8004542:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800454a:	f1b9 0f00 	cmp.w	r9, #0
 800454e:	d0f6      	beq.n	800453e <HAL_SPI_TransmitReceive+0x48>
 8004550:	2e00      	cmp	r6, #0
 8004552:	d0f4      	beq.n	800453e <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004554:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004558:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800455a:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800455c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004560:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004562:	bf1c      	itt	ne
 8004564:	2205      	movne	r2, #5
 8004566:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800456a:	2200      	movs	r2, #0
 800456c:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800456e:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8004572:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8004576:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004578:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 800457c:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004580:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004582:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004584:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004586:	d801      	bhi.n	800458c <HAL_SPI_TransmitReceive+0x96>
 8004588:	2e01      	cmp	r6, #1
 800458a:	d02e      	beq.n	80045ea <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800458c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004590:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004592:	680a      	ldr	r2, [r1, #0]
 8004594:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004596:	bf5e      	ittt	pl
 8004598:	680a      	ldrpl	r2, [r1, #0]
 800459a:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 800459e:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a0:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 80045a4:	d957      	bls.n	8004656 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a6:	b10b      	cbz	r3, 80045ac <HAL_SPI_TransmitReceive+0xb6>
 80045a8:	2e01      	cmp	r6, #1
 80045aa:	d107      	bne.n	80045bc <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ac:	f835 3b02 	ldrh.w	r3, [r5], #2
 80045b0:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80045b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b4:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80045bc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045be:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	b9ab      	cbnz	r3, 80045f0 <HAL_SPI_TransmitReceive+0xfa>
 80045c4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	b98b      	cbnz	r3, 80045f0 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045cc:	4642      	mov	r2, r8
 80045ce:	4639      	mov	r1, r7
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff fe36 	bl	8004242 <SPI_EndRxTxTransaction>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	f040 80b5 	bne.w	8004746 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045dc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1ad      	bne.n	800453e <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80045e8:	e7aa      	b.n	8004540 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045ee:	e7cf      	b.n	8004590 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	688b      	ldr	r3, [r1, #8]
 80045f4:	079e      	lsls	r6, r3, #30
 80045f6:	d50d      	bpl.n	8004614 <HAL_SPI_TransmitReceive+0x11e>
 80045f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	b153      	cbz	r3, 8004614 <HAL_SPI_TransmitReceive+0x11e>
 80045fe:	b145      	cbz	r5, 8004612 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004600:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004602:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004606:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004608:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800460a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800460c:	3b01      	subs	r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004612:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	f012 0201 	ands.w	r2, r2, #1
 800461a:	d00f      	beq.n	800463c <HAL_SPI_TransmitReceive+0x146>
 800461c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004620:	b29b      	uxth	r3, r3
 8004622:	b15b      	cbz	r3, 800463c <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004626:	68c9      	ldr	r1, [r1, #12]
 8004628:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800462c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800462e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004632:	3b01      	subs	r3, #1
 8004634:	b29b      	uxth	r3, r3
 8004636:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800463a:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800463c:	f7fd ffd4 	bl	80025e8 <HAL_GetTick>
 8004640:	eba0 0008 	sub.w	r0, r0, r8
 8004644:	42b8      	cmp	r0, r7
 8004646:	d3ba      	bcc.n	80045be <HAL_SPI_TransmitReceive+0xc8>
 8004648:	1c78      	adds	r0, r7, #1
 800464a:	d0b8      	beq.n	80045be <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 800464c:	2301      	movs	r3, #1
 800464e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8004652:	2003      	movs	r0, #3
 8004654:	e774      	b.n	8004540 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004656:	b10b      	cbz	r3, 800465c <HAL_SPI_TransmitReceive+0x166>
 8004658:	2e01      	cmp	r6, #1
 800465a:	d10b      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 800465c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d909      	bls.n	8004678 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004668:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 800466a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800466c:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800466e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004670:	b29b      	uxth	r3, r3
 8004672:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004674:	2501      	movs	r5, #1
 8004676:	e048      	b.n	800470a <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004678:	782b      	ldrb	r3, [r5, #0]
 800467a:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 800467c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800467e:	3301      	adds	r3, #1
 8004680:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004682:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004684:	3b01      	subs	r3, #1
 8004686:	e7f3      	b.n	8004670 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004688:	6822      	ldr	r2, [r4, #0]
 800468a:	6893      	ldr	r3, [r2, #8]
 800468c:	0799      	lsls	r1, r3, #30
 800468e:	d511      	bpl.n	80046b4 <HAL_SPI_TransmitReceive+0x1be>
 8004690:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	b173      	cbz	r3, 80046b4 <HAL_SPI_TransmitReceive+0x1be>
 8004696:	b165      	cbz	r5, 80046b2 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8004698:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800469c:	b289      	uxth	r1, r1
 800469e:	2901      	cmp	r1, #1
 80046a0:	d93d      	bls.n	800471e <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80046a6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80046aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80046ac:	3b02      	subs	r3, #2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80046b2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	6891      	ldr	r1, [r2, #8]
 80046b8:	f011 0101 	ands.w	r1, r1, #1
 80046bc:	d01d      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x204>
 80046be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	b1cb      	cbz	r3, 80046fa <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80046c6:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80046cc:	b280      	uxth	r0, r0
 80046ce:	2801      	cmp	r0, #1
 80046d0:	d92d      	bls.n	800472e <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046d2:	68d0      	ldr	r0, [r2, #12]
 80046d4:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80046d8:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80046da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80046de:	3b02      	subs	r3, #2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80046e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ee:	bf9e      	ittt	ls
 80046f0:	6853      	ldrls	r3, [r2, #4]
 80046f2:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80046f6:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80046f8:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046fa:	f7fd ff75 	bl	80025e8 <HAL_GetTick>
 80046fe:	eba0 0008 	sub.w	r0, r0, r8
 8004702:	42b8      	cmp	r0, r7
 8004704:	d301      	bcc.n	800470a <HAL_SPI_TransmitReceive+0x214>
 8004706:	1c7b      	adds	r3, r7, #1
 8004708:	d1a0      	bne.n	800464c <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ba      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x192>
 8004712:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1b5      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x192>
 800471c:	e756      	b.n	80045cc <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004722:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004724:	3301      	adds	r3, #1
 8004726:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004728:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800472a:	3b01      	subs	r3, #1
 800472c:	e7bf      	b.n	80046ae <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800472e:	7b12      	ldrb	r2, [r2, #12]
 8004730:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004734:	3301      	adds	r3, #1
 8004736:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004738:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800473c:	3b01      	subs	r3, #1
 800473e:	b29b      	uxth	r3, r3
 8004740:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004744:	e7d8      	b.n	80046f8 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004746:	2320      	movs	r3, #32
 8004748:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800474a:	2001      	movs	r0, #1
 800474c:	e746      	b.n	80045dc <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 800474e:	2002      	movs	r0, #2
 8004750:	e6f6      	b.n	8004540 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8004752:	2002      	movs	r0, #2
 8004754:	e6f7      	b.n	8004546 <HAL_SPI_TransmitReceive+0x50>

08004756 <HAL_SPI_Receive>:
{
 8004756:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800475a:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800475c:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8004760:	2b01      	cmp	r3, #1
{
 8004762:	4604      	mov	r4, r0
 8004764:	468a      	mov	sl, r1
 8004766:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8004768:	b2de      	uxtb	r6, r3
 800476a:	f040 80a7 	bne.w	80048bc <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800476e:	6843      	ldr	r3, [r0, #4]
 8004770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004774:	d10e      	bne.n	8004794 <HAL_SPI_Receive+0x3e>
 8004776:	6883      	ldr	r3, [r0, #8]
 8004778:	b963      	cbnz	r3, 8004794 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800477a:	2304      	movs	r3, #4
 800477c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004780:	4613      	mov	r3, r2
 8004782:	9700      	str	r7, [sp, #0]
 8004784:	460a      	mov	r2, r1
 8004786:	f7ff feb6 	bl	80044f6 <HAL_SPI_TransmitReceive>
 800478a:	4606      	mov	r6, r0
}
 800478c:	4630      	mov	r0, r6
 800478e:	b002      	add	sp, #8
 8004790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8004794:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004798:	2b01      	cmp	r3, #1
 800479a:	f000 8091 	beq.w	80048c0 <HAL_SPI_Receive+0x16a>
 800479e:	2301      	movs	r3, #1
 80047a0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80047a4:	f7fd ff20 	bl	80025e8 <HAL_GetTick>
 80047a8:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 80047aa:	f1ba 0f00 	cmp.w	sl, #0
 80047ae:	d075      	beq.n	800489c <HAL_SPI_Receive+0x146>
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	d072      	beq.n	800489c <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b6:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047b8:	2304      	movs	r3, #4
 80047ba:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 80047be:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c2:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047c4:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047c6:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 80047ca:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80047cc:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ce:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d0:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d2:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047d4:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d8:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047dc:	bf8c      	ite	hi
 80047de:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e2:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80047e6:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ea:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ec:	68a3      	ldr	r3, [r4, #8]
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f2:	d107      	bne.n	8004804 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fa:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004802:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004808:	bf5e      	ittt	pl
 800480a:	682b      	ldrpl	r3, [r5, #0]
 800480c:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004810:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004812:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004816:	d923      	bls.n	8004860 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8004818:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800481c:	b29b      	uxth	r3, r3
 800481e:	b323      	cbz	r3, 800486a <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	07d2      	lsls	r2, r2, #31
 8004826:	d53d      	bpl.n	80048a4 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800482c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004830:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004832:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004836:	3b01      	subs	r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800483e:	e7eb      	b.n	8004818 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	07d0      	lsls	r0, r2, #31
 8004846:	d51d      	bpl.n	8004884 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004848:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800484a:	7b1b      	ldrb	r3, [r3, #12]
 800484c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800484e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004850:	3301      	adds	r3, #1
 8004852:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004854:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004858:	3b01      	subs	r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8004860:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1ea      	bne.n	8004840 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800486a:	464a      	mov	r2, r9
 800486c:	4639      	mov	r1, r7
 800486e:	4620      	mov	r0, r4
 8004870:	f7ff fcb0 	bl	80041d4 <SPI_EndRxTransaction>
 8004874:	b9f8      	cbnz	r0, 80048b6 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004876:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004878:	b983      	cbnz	r3, 800489c <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 800487a:	2201      	movs	r2, #1
 800487c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004880:	461e      	mov	r6, r3
 8004882:	e00b      	b.n	800489c <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004884:	f7fd feb0 	bl	80025e8 <HAL_GetTick>
 8004888:	eba0 0009 	sub.w	r0, r0, r9
 800488c:	42b8      	cmp	r0, r7
 800488e:	d3e7      	bcc.n	8004860 <HAL_SPI_Receive+0x10a>
 8004890:	1c79      	adds	r1, r7, #1
 8004892:	d0e5      	beq.n	8004860 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8004894:	2301      	movs	r3, #1
 8004896:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800489a:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 800489c:	2300      	movs	r3, #0
 800489e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80048a2:	e773      	b.n	800478c <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a4:	f7fd fea0 	bl	80025e8 <HAL_GetTick>
 80048a8:	eba0 0009 	sub.w	r0, r0, r9
 80048ac:	42b8      	cmp	r0, r7
 80048ae:	d3b3      	bcc.n	8004818 <HAL_SPI_Receive+0xc2>
 80048b0:	1c7b      	adds	r3, r7, #1
 80048b2:	d0b1      	beq.n	8004818 <HAL_SPI_Receive+0xc2>
 80048b4:	e7ee      	b.n	8004894 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b6:	2320      	movs	r3, #32
 80048b8:	6623      	str	r3, [r4, #96]	@ 0x60
 80048ba:	e7dc      	b.n	8004876 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80048bc:	2602      	movs	r6, #2
 80048be:	e7ed      	b.n	800489c <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 80048c0:	2602      	movs	r6, #2
 80048c2:	e763      	b.n	800478c <HAL_SPI_Receive+0x36>

080048c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d12b      	bne.n	8004924 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	2302      	movs	r3, #2
 80048ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d2:	6803      	ldr	r3, [r0, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <HAL_TIM_Base_Start_IT+0x64>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d012      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d00f      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 80048e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00b      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 80048f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 80048f8:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 8004900:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004904:	4293      	cmp	r3, r2
 8004906:	d107      	bne.n	8004918 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004908:	6899      	ldr	r1, [r3, #8]
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <HAL_TIM_Base_Start_IT+0x68>)
 800490c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	2a06      	cmp	r2, #6
 8004910:	d006      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x5c>
 8004912:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004916:	d003      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2000      	movs	r0, #0
 8004922:	4770      	bx	lr
    return HAL_ERROR;
 8004924:	2001      	movs	r0, #1
}
 8004926:	4770      	bx	lr
 8004928:	40012c00 	.word	0x40012c00
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004938:	6803      	ldr	r3, [r0, #0]
{
 800493a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800493c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800493e:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004940:	07b2      	lsls	r2, r6, #30
{
 8004942:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004944:	d50d      	bpl.n	8004962 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004946:	07a9      	lsls	r1, r5, #30
 8004948:	d50b      	bpl.n	8004962 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800494a:	f06f 0202 	mvn.w	r2, #2
 800494e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004950:	2201      	movs	r2, #1
 8004952:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	079a      	lsls	r2, r3, #30
 8004958:	d074      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800495a:	f7ff ffea 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	2300      	movs	r3, #0
 8004960:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004962:	0773      	lsls	r3, r6, #29
 8004964:	d510      	bpl.n	8004988 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004966:	0768      	lsls	r0, r5, #29
 8004968:	d50e      	bpl.n	8004988 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	2202      	movs	r2, #2
 8004974:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800497c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800497e:	d067      	beq.n	8004a50 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004980:	f7ff ffd7 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004984:	2300      	movs	r3, #0
 8004986:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004988:	0731      	lsls	r1, r6, #28
 800498a:	d50f      	bpl.n	80049ac <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800498c:	072a      	lsls	r2, r5, #28
 800498e:	d50d      	bpl.n	80049ac <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	f06f 0208 	mvn.w	r2, #8
 8004996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004998:	2204      	movs	r2, #4
 800499a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80049a0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a2:	d05b      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80049a4:	f7ff ffc5 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a8:	2300      	movs	r3, #0
 80049aa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ac:	06f0      	lsls	r0, r6, #27
 80049ae:	d510      	bpl.n	80049d2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049b0:	06e9      	lsls	r1, r5, #27
 80049b2:	d50e      	bpl.n	80049d2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f06f 0210 	mvn.w	r2, #16
 80049ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049bc:	2208      	movs	r2, #8
 80049be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c8:	d04e      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	f7ff ffb2 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049d2:	07f2      	lsls	r2, r6, #31
 80049d4:	d508      	bpl.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049d6:	07eb      	lsls	r3, r5, #31
 80049d8:	d506      	bpl.n	80049e8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f06f 0201 	mvn.w	r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fc fecc 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049e8:	0630      	lsls	r0, r6, #24
 80049ea:	d508      	bpl.n	80049fe <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ec:	0629      	lsls	r1, r5, #24
 80049ee:	d506      	bpl.n	80049fe <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 f9b8 	bl	8004d6e <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049fe:	05f2      	lsls	r2, r6, #23
 8004a00:	d508      	bpl.n	8004a14 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a02:	062b      	lsls	r3, r5, #24
 8004a04:	d506      	bpl.n	8004a14 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 f9ae 	bl	8004d70 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a14:	0670      	lsls	r0, r6, #25
 8004a16:	d508      	bpl.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a18:	0669      	lsls	r1, r5, #25
 8004a1a:	d506      	bpl.n	8004a2a <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a22:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7ff ff86 	bl	8004936 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a2a:	06b2      	lsls	r2, r6, #26
 8004a2c:	d522      	bpl.n	8004a74 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a2e:	06ab      	lsls	r3, r5, #26
 8004a30:	d520      	bpl.n	8004a74 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004a38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a3a:	611a      	str	r2, [r3, #16]
}
 8004a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004a40:	f000 b994 	b.w	8004d6c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	f7ff ff74 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff ff73 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a4e:	e786      	b.n	800495e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a50:	f7ff ff6e 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff ff6d 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a5a:	e793      	b.n	8004984 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5c:	f7ff ff68 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ff67 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a66:	e79f      	b.n	80049a8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a68:	f7ff ff62 	bl	8004930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff ff61 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
 8004a72:	e7ac      	b.n	80049ce <HAL_TIM_IRQHandler+0x96>
}
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a78 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a78:	4a2f      	ldr	r2, [pc, #188]	@ (8004b38 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8004a7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	4290      	cmp	r0, r2
 8004a7e:	d00e      	beq.n	8004a9e <TIM_Base_SetConfig+0x26>
 8004a80:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0x26>
 8004a86:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004a8a:	4290      	cmp	r0, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0x26>
 8004a8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a92:	4290      	cmp	r0, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0x26>
 8004a96:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004a9a:	4290      	cmp	r0, r2
 8004a9c:	d115      	bne.n	8004aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004a9e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004aa4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa6:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <TIM_Base_SetConfig+0xc0>)
 8004aa8:	4290      	cmp	r0, r2
 8004aaa:	d019      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004aac:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004ab0:	d016      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004ab2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004ab6:	4290      	cmp	r0, r2
 8004ab8:	d012      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004aba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004abe:	4290      	cmp	r0, r2
 8004ac0:	d00e      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004ac2:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004ac6:	4290      	cmp	r0, r2
 8004ac8:	d00a      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004aca:	4a1c      	ldr	r2, [pc, #112]	@ (8004b3c <TIM_Base_SetConfig+0xc4>)
 8004acc:	4290      	cmp	r0, r2
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004ad0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ad4:	4290      	cmp	r0, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0x68>
 8004ad8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004adc:	4290      	cmp	r0, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae8:	694a      	ldr	r2, [r1, #20]
 8004aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aee:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004af0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af2:	688b      	ldr	r3, [r1, #8]
 8004af4:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af6:	680b      	ldr	r3, [r1, #0]
 8004af8:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004afa:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <TIM_Base_SetConfig+0xc0>)
 8004afc:	4298      	cmp	r0, r3
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0xa8>
 8004b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b04:	4298      	cmp	r0, r3
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0xa8>
 8004b08:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004b0c:	4298      	cmp	r0, r3
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0xa8>
 8004b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b14:	4298      	cmp	r0, r3
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0xa8>
 8004b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b1c:	4298      	cmp	r0, r3
 8004b1e:	d101      	bne.n	8004b24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b20:	690b      	ldr	r3, [r1, #16]
 8004b22:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	2301      	movs	r3, #1
 8004b26:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b28:	6903      	ldr	r3, [r0, #16]
 8004b2a:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b2c:	bf42      	ittt	mi
 8004b2e:	6903      	ldrmi	r3, [r0, #16]
 8004b30:	f023 0301 	bicmi.w	r3, r3, #1
 8004b34:	6103      	strmi	r3, [r0, #16]
  }
}
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_TIM_Base_Init>:
{
 8004b40:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004b42:	4604      	mov	r4, r0
 8004b44:	b350      	cbz	r0, 8004b9c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004b4a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004b4e:	b91b      	cbnz	r3, 8004b58 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004b50:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004b54:	f7fd fb32 	bl	80021bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	1d21      	adds	r1, r4, #4
 8004b62:	f7ff ff89 	bl	8004a78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8004b6c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004b72:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004b76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004b7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004b7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004b8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004b8e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004b92:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004b9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e7fc      	b.n	8004b9a <HAL_TIM_Base_Init+0x5a>

08004ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba6:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004baa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004bae:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb0:	6082      	str	r2, [r0, #8]
}
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <HAL_TIM_ConfigClockSource>:
{
 8004bb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004bb6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004bba:	2b01      	cmp	r3, #1
{
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004bc2:	f000 808c 	beq.w	8004cde <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004bca:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8004bcc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004bce:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004bd2:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd4:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <HAL_TIM_ConfigClockSource+0x130>)
 8004bd6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bda:	680b      	ldr	r3, [r1, #0]
 8004bdc:	2b60      	cmp	r3, #96	@ 0x60
 8004bde:	d04f      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xcc>
 8004be0:	d832      	bhi.n	8004c48 <HAL_TIM_ConfigClockSource+0x94>
 8004be2:	2b40      	cmp	r3, #64	@ 0x40
 8004be4:	d064      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xfc>
 8004be6:	d816      	bhi.n	8004c16 <HAL_TIM_ConfigClockSource+0x62>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d00d      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x54>
 8004bec:	d80a      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x50>
 8004bee:	f033 0110 	bics.w	r1, r3, #16
 8004bf2:	d009      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004c00:	4610      	mov	r0, r2
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d1f5      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004c08:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004c14:	e028      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8004c16:	2b50      	cmp	r3, #80	@ 0x50
 8004c18:	d1ec      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8004c1a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c1e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c20:	6a03      	ldr	r3, [r0, #32]
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c28:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c2a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004c36:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004c38:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c3a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c3c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c42:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8004c46:	e00f      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d00d      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xb6>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c52:	d00c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xba>
 8004c54:	2b70      	cmp	r3, #112	@ 0x70
 8004c56:	d1cd      	bne.n	8004bf4 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	68cb      	ldr	r3, [r1, #12]
 8004c5a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004c5e:	f7ff ff9f 	bl	8004ba0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c62:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c68:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	e7c2      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8004c6e:	68cb      	ldr	r3, [r1, #12]
 8004c70:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004c74:	f7ff ff94 	bl	8004ba0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	6883      	ldr	r3, [r0, #8]
 8004c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c7e:	e7f3      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8004c80:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c82:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004c84:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c88:	f022 0210 	bic.w	r2, r2, #16
 8004c8c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c94:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c9c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004ca0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004ca2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ca4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004cae:	e7db      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8004cb0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004cb4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	6a03      	ldr	r3, [r0, #32]
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbe:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004ccc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004cce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004cd0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004cd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004cdc:	e7c4      	b.n	8004c68 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8004cde:	4602      	mov	r2, r0
 8004ce0:	e78e      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x4c>
 8004ce2:	bf00      	nop
 8004ce4:	fffe0088 	.word	0xfffe0088

08004ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004cee:	2b01      	cmp	r3, #1
{
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004cf6:	d032      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cfa:	4d19      	ldr	r5, [pc, #100]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d00:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8004d02:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004d04:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d06:	d002      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8004d08:	4e16      	ldr	r6, [pc, #88]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8004d0a:	42b3      	cmp	r3, r6
 8004d0c:	d103      	bne.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d0e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d10:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d14:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d16:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d1c:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1e:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8004d20:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d22:	d011      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d28:	d00e      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d38:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004d40:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d104      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d48:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004d54:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004d5a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40000400 	.word	0x40000400

08004d6c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004d70:	4770      	bx	lr

08004d72 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d72:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	e852 3f00 	ldrex	r3, [r2]
 8004d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004d80:	6802      	ldr	r2, [r0, #0]
 8004d82:	2900      	cmp	r1, #0
 8004d84:	d1f5      	bne.n	8004d72 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	f102 0308 	add.w	r3, r2, #8
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	f102 0c08 	add.w	ip, r2, #8
 8004d96:	e84c 3100 	strex	r1, r3, [ip]
 8004d9a:	2900      	cmp	r1, #0
 8004d9c:	d1f3      	bne.n	8004d86 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	e842 3100 	strex	r1, r3, [r2]
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d1f7      	bne.n	8004da4 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	2320      	movs	r3, #32
 8004db6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dbe:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004dc6:	4770      	bx	lr

08004dc8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc8:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dca:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dcc:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dce:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8004dd2:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dd4:	689c      	ldr	r4, [r3, #8]
 8004dd6:	0624      	lsls	r4, r4, #24
 8004dd8:	d50e      	bpl.n	8004df8 <UART_DMAError+0x30>
 8004dda:	2a21      	cmp	r2, #33	@ 0x21
 8004ddc:	d10c      	bne.n	8004df8 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004de8:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	e843 2400 	strex	r4, r2, [r3]
 8004df0:	2c00      	cmp	r4, #0
 8004df2:	d1f7      	bne.n	8004de4 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	2220      	movs	r2, #32
 8004df6:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	065b      	lsls	r3, r3, #25
 8004dfc:	d506      	bpl.n	8004e0c <UART_DMAError+0x44>
 8004dfe:	2922      	cmp	r1, #34	@ 0x22
 8004e00:	d104      	bne.n	8004e0c <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004e08:	f7ff ffb3 	bl	8004d72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e0c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e18:	f7ff ffd5 	bl	8004dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <HAL_UARTEx_RxEventCallback>:
}
 8004e1e:	4770      	bx	lr

08004e20 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e20:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8004e22:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004e24:	2301      	movs	r3, #1
 8004e26:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d105      	bne.n	8004e3a <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e2e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8004e32:	0849      	lsrs	r1, r1, #1
 8004e34:	f7ff fff3 	bl	8004e1e <HAL_UARTEx_RxEventCallback>
}
 8004e38:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004e3a:	f7ff ffc3 	bl	8004dc4 <HAL_UART_RxHalfCpltCallback>
}
 8004e3e:	e7fb      	b.n	8004e38 <UART_DMARxHalfCplt+0x18>

08004e40 <UART_DMAReceiveCplt>:
{
 8004e40:	b508      	push	{r3, lr}
 8004e42:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e44:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d032      	beq.n	8004eb2 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	e852 3f00 	ldrex	r3, [r2]
 8004e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004e60:	6803      	ldr	r3, [r0, #0]
 8004e62:	2900      	cmp	r1, #0
 8004e64:	d1f5      	bne.n	8004e52 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	f103 0208 	add.w	r2, r3, #8
 8004e6a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	f103 0c08 	add.w	ip, r3, #8
 8004e76:	e84c 2100 	strex	r1, r2, [ip]
 8004e7a:	2900      	cmp	r1, #0
 8004e7c:	d1f3      	bne.n	8004e66 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	f103 0208 	add.w	r2, r3, #8
 8004e82:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	f103 0c08 	add.w	ip, r3, #8
 8004e8e:	e84c 2100 	strex	r1, r2, [ip]
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d1f3      	bne.n	8004e7e <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8004e96:	2220      	movs	r2, #32
 8004e98:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004e9e:	2a01      	cmp	r2, #1
 8004ea0:	d107      	bne.n	8004eb2 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	e843 2100 	strex	r1, r2, [r3]
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	d1f7      	bne.n	8004ea2 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d104      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ebc:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8004ec0:	f7ff ffad 	bl	8004e1e <HAL_UARTEx_RxEventCallback>
}
 8004ec4:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8004ec6:	f7ff ff7c 	bl	8004dc2 <HAL_UART_RxCpltCallback>
}
 8004eca:	e7fb      	b.n	8004ec4 <UART_DMAReceiveCplt+0x84>

08004ecc <UART_SetConfig>:
{
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed0:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed4:	6925      	ldr	r5, [r4, #16]
 8004ed6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed8:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eda:	432a      	orrs	r2, r5
 8004edc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ede:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8004ef2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efc:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efe:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f00:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8004f04:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0a:	4a56      	ldr	r2, [pc, #344]	@ (8005064 <UART_SetConfig+0x198>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d112      	bne.n	8004f36 <UART_SetConfig+0x6a>
 8004f10:	4b55      	ldr	r3, [pc, #340]	@ (8005068 <UART_SetConfig+0x19c>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	f000 8091 	beq.w	8005040 <UART_SetConfig+0x174>
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d022      	beq.n	8004f68 <UART_SetConfig+0x9c>
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	f040 8092 	bne.w	800504c <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f28:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004f2c:	f040 8085 	bne.w	800503a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f30:	f7fe fcf8 	bl	8003924 <HAL_RCC_GetSysClockFreq>
        break;
 8004f34:	e06b      	b.n	800500e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f36:	4a4d      	ldr	r2, [pc, #308]	@ (800506c <UART_SetConfig+0x1a0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d12e      	bne.n	8004f9a <UART_SetConfig+0xce>
 8004f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005068 <UART_SetConfig+0x19c>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f48:	d07a      	beq.n	8005040 <UART_SetConfig+0x174>
 8004f4a:	d80a      	bhi.n	8004f62 <UART_SetConfig+0x96>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8083 	beq.w	8005058 <UART_SetConfig+0x18c>
 8004f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f56:	d0e7      	beq.n	8004f28 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8004f58:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004f5a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004f5c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8004f60:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f66:	d1f7      	bne.n	8004f58 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f68:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004f6c:	4840      	ldr	r0, [pc, #256]	@ (8005070 <UART_SetConfig+0x1a4>)
 8004f6e:	d156      	bne.n	800501e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f70:	6862      	ldr	r2, [r4, #4]
 8004f72:	0853      	lsrs	r3, r2, #1
 8004f74:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004f78:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004f80:	f1a3 0110 	sub.w	r1, r3, #16
 8004f84:	4291      	cmp	r1, r2
 8004f86:	d8e7      	bhi.n	8004f58 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f88:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004f8c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f90:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60cb      	str	r3, [r1, #12]
 8004f98:	e03b      	b.n	8005012 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	4a36      	ldr	r2, [pc, #216]	@ (8005074 <UART_SetConfig+0x1a8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d10f      	bne.n	8004fc0 <UART_SetConfig+0xf4>
 8004fa0:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <UART_SetConfig+0x19c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004fa8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fac:	d048      	beq.n	8005040 <UART_SetConfig+0x174>
 8004fae:	d804      	bhi.n	8004fba <UART_SetConfig+0xee>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d051      	beq.n	8005058 <UART_SetConfig+0x18c>
 8004fb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fb8:	e7cd      	b.n	8004f56 <UART_SetConfig+0x8a>
 8004fba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fbe:	e7d2      	b.n	8004f66 <UART_SetConfig+0x9a>
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005078 <UART_SetConfig+0x1ac>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10f      	bne.n	8004fe6 <UART_SetConfig+0x11a>
 8004fc6:	4b28      	ldr	r3, [pc, #160]	@ (8005068 <UART_SetConfig+0x19c>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fd2:	d035      	beq.n	8005040 <UART_SetConfig+0x174>
 8004fd4:	d804      	bhi.n	8004fe0 <UART_SetConfig+0x114>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03e      	beq.n	8005058 <UART_SetConfig+0x18c>
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fde:	e7ba      	b.n	8004f56 <UART_SetConfig+0x8a>
 8004fe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fe4:	e7bf      	b.n	8004f66 <UART_SetConfig+0x9a>
 8004fe6:	4a25      	ldr	r2, [pc, #148]	@ (800507c <UART_SetConfig+0x1b0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d1b5      	bne.n	8004f58 <UART_SetConfig+0x8c>
 8004fec:	4b1e      	ldr	r3, [pc, #120]	@ (8005068 <UART_SetConfig+0x19c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004ff4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ff8:	d022      	beq.n	8005040 <UART_SetConfig+0x174>
 8004ffa:	d803      	bhi.n	8005004 <UART_SetConfig+0x138>
 8004ffc:	b363      	cbz	r3, 8005058 <UART_SetConfig+0x18c>
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005002:	e7a8      	b.n	8004f56 <UART_SetConfig+0x8a>
 8005004:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005008:	e7ad      	b.n	8004f66 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800500a:	f7fe fd6f 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800500e:	2800      	cmp	r0, #0
 8005010:	d1ae      	bne.n	8004f70 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8005012:	2000      	movs	r0, #0
 8005014:	e7a1      	b.n	8004f5a <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005016:	f7fe fd51 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800501a:	2800      	cmp	r0, #0
 800501c:	d0f9      	beq.n	8005012 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800501e:	6862      	ldr	r2, [r4, #4]
 8005020:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005024:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005028:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800502c:	f1a3 0110 	sub.w	r1, r3, #16
 8005030:	4291      	cmp	r1, r2
 8005032:	d891      	bhi.n	8004f58 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	60d3      	str	r3, [r2, #12]
 8005038:	e7eb      	b.n	8005012 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7fe fc73 	bl	8003924 <HAL_RCC_GetSysClockFreq>
        break;
 800503e:	e7ec      	b.n	800501a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005040:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005044:	d094      	beq.n	8004f70 <UART_SetConfig+0xa4>
 8005046:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800504a:	e7e8      	b.n	800501e <UART_SetConfig+0x152>
 800504c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005050:	d0db      	beq.n	800500a <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005052:	f7fe fd4b 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
        break;
 8005056:	e7e0      	b.n	800501a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005058:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800505c:	d1db      	bne.n	8005016 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800505e:	f7fe fd2d 	bl	8003abc <HAL_RCC_GetPCLK1Freq>
        break;
 8005062:	e7d4      	b.n	800500e <UART_SetConfig+0x142>
 8005064:	40013800 	.word	0x40013800
 8005068:	40021000 	.word	0x40021000
 800506c:	40004400 	.word	0x40004400
 8005070:	007a1200 	.word	0x007a1200
 8005074:	40004800 	.word	0x40004800
 8005078:	40004c00 	.word	0x40004c00
 800507c:	40005000 	.word	0x40005000

08005080 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005080:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005082:	071a      	lsls	r2, r3, #28
{
 8005084:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005086:	d506      	bpl.n	8005096 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800508c:	684a      	ldr	r2, [r1, #4]
 800508e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005092:	4322      	orrs	r2, r4
 8005094:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005096:	07dc      	lsls	r4, r3, #31
 8005098:	d506      	bpl.n	80050a8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800509a:	6801      	ldr	r1, [r0, #0]
 800509c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800509e:	684a      	ldr	r2, [r1, #4]
 80050a0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80050a4:	4322      	orrs	r2, r4
 80050a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a8:	0799      	lsls	r1, r3, #30
 80050aa:	d506      	bpl.n	80050ba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ac:	6801      	ldr	r1, [r0, #0]
 80050ae:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80050b0:	684a      	ldr	r2, [r1, #4]
 80050b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050b6:	4322      	orrs	r2, r4
 80050b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ba:	075a      	lsls	r2, r3, #29
 80050bc:	d506      	bpl.n	80050cc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050be:	6801      	ldr	r1, [r0, #0]
 80050c0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80050c2:	684a      	ldr	r2, [r1, #4]
 80050c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050c8:	4322      	orrs	r2, r4
 80050ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050cc:	06dc      	lsls	r4, r3, #27
 80050ce:	d506      	bpl.n	80050de <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d0:	6801      	ldr	r1, [r0, #0]
 80050d2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80050d4:	688a      	ldr	r2, [r1, #8]
 80050d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050da:	4322      	orrs	r2, r4
 80050dc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050de:	0699      	lsls	r1, r3, #26
 80050e0:	d506      	bpl.n	80050f0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050e2:	6801      	ldr	r1, [r0, #0]
 80050e4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80050e6:	688a      	ldr	r2, [r1, #8]
 80050e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ec:	4322      	orrs	r2, r4
 80050ee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f0:	065a      	lsls	r2, r3, #25
 80050f2:	d50f      	bpl.n	8005114 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f4:	6801      	ldr	r1, [r0, #0]
 80050f6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80050f8:	684a      	ldr	r2, [r1, #4]
 80050fa:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80050fe:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005100:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005104:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	d105      	bne.n	8005114 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	684a      	ldr	r2, [r1, #4]
 800510a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800510c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005110:	4322      	orrs	r2, r4
 8005112:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	d506      	bpl.n	8005126 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005118:	6802      	ldr	r2, [r0, #0]
 800511a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800511c:	6853      	ldr	r3, [r2, #4]
 800511e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005122:	430b      	orrs	r3, r1
 8005124:	6053      	str	r3, [r2, #4]
}
 8005126:	bd10      	pop	{r4, pc}

08005128 <UART_WaitOnFlagUntilTimeout>:
{
 8005128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800512c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	4617      	mov	r7, r2
 8005136:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	69d3      	ldr	r3, [r2, #28]
 800513c:	ea35 0303 	bics.w	r3, r5, r3
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	42bb      	cmp	r3, r7
 8005148:	d001      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800514a:	2000      	movs	r0, #0
 800514c:	e022      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800514e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005152:	d0f2      	beq.n	800513a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005154:	f7fd fa48 	bl	80025e8 <HAL_GetTick>
 8005158:	eba0 0008 	sub.w	r0, r0, r8
 800515c:	4548      	cmp	r0, r9
 800515e:	d829      	bhi.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	d026      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	680b      	ldr	r3, [r1, #0]
 800516a:	075a      	lsls	r2, r3, #29
 800516c:	d5e4      	bpl.n	8005138 <UART_WaitOnFlagUntilTimeout+0x10>
 800516e:	2d80      	cmp	r5, #128	@ 0x80
 8005170:	d0e2      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0x10>
 8005172:	2d40      	cmp	r5, #64	@ 0x40
 8005174:	d0e0      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005176:	69ce      	ldr	r6, [r1, #28]
 8005178:	f016 0608 	ands.w	r6, r6, #8
 800517c:	d00c      	beq.n	8005198 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800517e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8005180:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005182:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005184:	f7ff fdf5 	bl	8004d72 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005188:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800518a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800518e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8005192:	2001      	movs	r0, #1
}
 8005194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005198:	69cb      	ldr	r3, [r1, #28]
 800519a:	051b      	lsls	r3, r3, #20
 800519c:	d5cc      	bpl.n	8005138 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051a2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fde4 	bl	8004d72 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051aa:	2320      	movs	r3, #32
 80051ac:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80051b0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80051b4:	2003      	movs	r0, #3
 80051b6:	e7ed      	b.n	8005194 <UART_WaitOnFlagUntilTimeout+0x6c>

080051b8 <HAL_UART_Transmit>:
{
 80051b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051bc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80051be:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80051c0:	2b20      	cmp	r3, #32
{
 80051c2:	4604      	mov	r4, r0
 80051c4:	460e      	mov	r6, r1
 80051c6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80051c8:	d143      	bne.n	8005252 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 80051ca:	2900      	cmp	r1, #0
 80051cc:	d043      	beq.n	8005256 <HAL_UART_Transmit+0x9e>
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d041      	beq.n	8005256 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	2500      	movs	r5, #0
 80051d6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051da:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80051dc:	f7fd fa04 	bl	80025e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80051e2:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80051ea:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80051ec:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	d103      	bne.n	80051fa <HAL_UART_Transmit+0x42>
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	b90b      	cbnz	r3, 80051fa <HAL_UART_Transmit+0x42>
 80051f6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80051f8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80051fa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005202:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005204:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005206:	b93a      	cbnz	r2, 8005218 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005208:	2140      	movs	r1, #64	@ 0x40
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff ff8c 	bl	8005128 <UART_WaitOnFlagUntilTimeout>
 8005210:	2320      	movs	r3, #32
 8005212:	b940      	cbnz	r0, 8005226 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005214:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005216:	e008      	b.n	800522a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	@ 0x80
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff ff83 	bl	8005128 <UART_WaitOnFlagUntilTimeout>
 8005222:	b128      	cbz	r0, 8005230 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8005224:	2320      	movs	r3, #32
 8005226:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005228:	2003      	movs	r0, #3
}
 800522a:	b003      	add	sp, #12
 800522c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005230:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005232:	b95e      	cbnz	r6, 800524c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005234:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005238:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800523c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800523e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005242:	3a01      	subs	r2, #1
 8005244:	b292      	uxth	r2, r2
 8005246:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800524a:	e7d6      	b.n	80051fa <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800524c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005250:	e7f4      	b.n	800523c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005252:	2002      	movs	r0, #2
 8005254:	e7e9      	b.n	800522a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8005256:	2001      	movs	r0, #1
 8005258:	e7e7      	b.n	800522a <HAL_UART_Transmit+0x72>

0800525a <UART_CheckIdleState>:
{
 800525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800525c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	2600      	movs	r6, #0
 8005260:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8005264:	f7fd f9c0 	bl	80025e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800526e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005270:	d51b      	bpl.n	80052aa <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	4632      	mov	r2, r6
 800527a:	4603      	mov	r3, r0
 800527c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff ff51 	bl	8005128 <UART_WaitOnFlagUntilTimeout>
 8005286:	b180      	cbz	r0, 80052aa <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005288:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	e852 3f00 	ldrex	r3, [r2]
 800528e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	e842 3100 	strex	r1, r3, [r2]
 8005296:	2900      	cmp	r1, #0
 8005298:	d1f6      	bne.n	8005288 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800529a:	2320      	movs	r3, #32
 800529c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800529e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80052a0:	2300      	movs	r3, #0
 80052a2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80052a6:	b002      	add	sp, #8
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	075b      	lsls	r3, r3, #29
 80052b0:	d524      	bpl.n	80052fc <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	462b      	mov	r3, r5
 80052bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff ff31 	bl	8005128 <UART_WaitOnFlagUntilTimeout>
 80052c6:	b1c8      	cbz	r0, 80052fc <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	e852 3f00 	ldrex	r3, [r2]
 80052ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	2900      	cmp	r1, #0
 80052da:	d1f5      	bne.n	80052c8 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	f102 0308 	add.w	r3, r2, #8
 80052e0:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	f102 0008 	add.w	r0, r2, #8
 80052ec:	e840 3100 	strex	r1, r3, [r0]
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d1f3      	bne.n	80052dc <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 80052f4:	2320      	movs	r3, #32
 80052f6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80052fa:	e7d0      	b.n	800529e <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 80052fc:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005300:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005302:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005308:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800530a:	e7c9      	b.n	80052a0 <UART_CheckIdleState+0x46>

0800530c <HAL_UART_Init>:
{
 800530c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800530e:	4604      	mov	r4, r0
 8005310:	b340      	cbz	r0, 8005364 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005312:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005314:	b91b      	cbnz	r3, 800531e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005316:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800531a:	f7fc ff63 	bl	80021e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800531e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005320:	2324      	movs	r3, #36	@ 0x24
 8005322:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800532e:	b113      	cbz	r3, 8005336 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff fea5 	bl	8005080 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005336:	4620      	mov	r0, r4
 8005338:	f7ff fdc8 	bl	8004ecc <UART_SetConfig>
 800533c:	2801      	cmp	r0, #1
 800533e:	d011      	beq.n	8005364 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005348:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005350:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005358:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800535a:	601a      	str	r2, [r3, #0]
}
 800535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005360:	f7ff bf7b 	b.w	800525a <UART_CheckIdleState>
}
 8005364:	2001      	movs	r0, #1
 8005366:	bd10      	pop	{r4, pc}

08005368 <UART_Start_Receive_DMA>:
{
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4613      	mov	r3, r2
 800536c:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 800536e:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8005374:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005376:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537a:	2022      	movs	r0, #34	@ 0x22
 800537c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8005380:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005382:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8005384:	b1a0      	cbz	r0, 80053b0 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005386:	4e1c      	ldr	r6, [pc, #112]	@ (80053f8 <UART_Start_Receive_DMA+0x90>)
 8005388:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800538a:	4e1c      	ldr	r6, [pc, #112]	@ (80053fc <UART_Start_Receive_DMA+0x94>)
 800538c:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800538e:	4e1c      	ldr	r6, [pc, #112]	@ (8005400 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005390:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005394:	460a      	mov	r2, r1
 8005396:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 800539a:	f7fd ff13 	bl	80031c4 <HAL_DMA_Start_IT>
 800539e:	b138      	cbz	r0, 80053b0 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053a0:	2310      	movs	r3, #16
 80053a2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80053a6:	2320      	movs	r3, #32
 80053a8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 80053ac:	2001      	movs	r0, #1
}
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053b0:	6922      	ldr	r2, [r4, #16]
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	b13a      	cbz	r2, 80053c6 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	e843 2100 	strex	r1, r2, [r3]
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d1f7      	bne.n	80053b6 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	f103 0208 	add.w	r2, r3, #8
 80053ca:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	f103 0008 	add.w	r0, r3, #8
 80053d6:	e840 2100 	strex	r1, r2, [r0]
 80053da:	2900      	cmp	r1, #0
 80053dc:	d1f3      	bne.n	80053c6 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	f103 0208 	add.w	r2, r3, #8
 80053e2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	f103 0108 	add.w	r1, r3, #8
 80053ee:	e841 2000 	strex	r0, r2, [r1]
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d1f3      	bne.n	80053de <UART_Start_Receive_DMA+0x76>
 80053f6:	e7da      	b.n	80053ae <UART_Start_Receive_DMA+0x46>
 80053f8:	08004e41 	.word	0x08004e41
 80053fc:	08004e21 	.word	0x08004e21
 8005400:	08004dc9 	.word	0x08004dc9

08005404 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005404:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005408:	2b20      	cmp	r3, #32
{
 800540a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800540c:	d112      	bne.n	8005434 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800540e:	b1a1      	cbz	r1, 800543a <HAL_UART_Receive_DMA+0x36>
 8005410:	b19a      	cbz	r2, 800543a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005414:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	d507      	bpl.n	800542e <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	e844 3500 	strex	r5, r3, [r4]
 800542a:	2d00      	cmp	r5, #0
 800542c:	d1f7      	bne.n	800541e <HAL_UART_Receive_DMA+0x1a>
}
 800542e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005430:	f7ff bf9a 	b.w	8005368 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8005434:	2002      	movs	r0, #2
}
 8005436:	bc30      	pop	{r4, r5}
 8005438:	4770      	bx	lr
      return HAL_ERROR;
 800543a:	2001      	movs	r0, #1
 800543c:	e7fb      	b.n	8005436 <HAL_UART_Receive_DMA+0x32>

0800543e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800543e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005440:	f000 fe32 	bl	80060a8 <vTaskStartScheduler>
  
  return osOK;
}
 8005444:	2000      	movs	r0, #0
 8005446:	bd08      	pop	{r3, pc}

08005448 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800544c:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800544e:	692a      	ldr	r2, [r5, #16]
 8005450:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8005454:	460b      	mov	r3, r1
 8005456:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005458:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800545c:	b176      	cbz	r6, 800547c <osThreadCreate+0x34>
 800545e:	69ad      	ldr	r5, [r5, #24]
 8005460:	b165      	cbz	r5, 800547c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8005462:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005464:	bf14      	ite	ne
 8005466:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005468:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800546a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800546e:	9400      	str	r4, [sp, #0]
 8005470:	f000 fdb5 	bl	8005fde <xTaskCreateStatic>
 8005474:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005476:	9805      	ldr	r0, [sp, #20]
}
 8005478:	b006      	add	sp, #24
 800547a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800547c:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800547e:	bf14      	ite	ne
 8005480:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005482:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005484:	ad05      	add	r5, sp, #20
 8005486:	e9cd 4500 	strd	r4, r5, [sp]
 800548a:	b292      	uxth	r2, r2
 800548c:	f000 fdde 	bl	800604c <xTaskCreate>
 8005490:	2801      	cmp	r0, #1
 8005492:	d0f0      	beq.n	8005476 <osThreadCreate+0x2e>
      return NULL;
 8005494:	2000      	movs	r0, #0
 8005496:	e7ef      	b.n	8005478 <osThreadCreate+0x30>

08005498 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005498:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800549a:	2801      	cmp	r0, #1
 800549c:	bf38      	it	cc
 800549e:	2001      	movcc	r0, #1
 80054a0:	f000 ff50 	bl	8006344 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054a4:	2000      	movs	r0, #0
 80054a6:	bd08      	pop	{r3, pc}

080054a8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80054aa:	6847      	ldr	r7, [r0, #4]
{
 80054ac:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80054ae:	2014      	movs	r0, #20
 80054b0:	f001 fa7e 	bl	80069b0 <pvPortMalloc>

  
  if (thePool) {
 80054b4:	4604      	mov	r4, r0
 80054b6:	b1b8      	cbz	r0, 80054e8 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 80054b8:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80054ba:	3703      	adds	r7, #3
 80054bc:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 80054c0:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 80054c2:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 80054c6:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80054c8:	f001 fa72 	bl	80069b0 <pvPortMalloc>
 80054cc:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 80054ce:	b140      	cbz	r0, 80054e2 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80054d0:	6830      	ldr	r0, [r6, #0]
 80054d2:	4378      	muls	r0, r7
 80054d4:	f001 fa6c 	bl	80069b0 <pvPortMalloc>
 80054d8:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 80054da:	b978      	cbnz	r0, 80054fc <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 80054dc:	6860      	ldr	r0, [r4, #4]
 80054de:	f001 faf9 	bl	8006ad4 <vPortFree>
        vPortFree(thePool);
 80054e2:	4620      	mov	r0, r4
 80054e4:	f001 faf6 	bl	8006ad4 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80054e8:	2400      	movs	r4, #0
 80054ea:	e005      	b.n	80054f8 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 80054ec:	6862      	ldr	r2, [r4, #4]
 80054ee:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80054f0:	3301      	adds	r3, #1
 80054f2:	6832      	ldr	r2, [r6, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8f9      	bhi.n	80054ec <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 80054f8:	4620      	mov	r0, r4
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 80054fc:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 80054fe:	4629      	mov	r1, r5
 8005500:	e7f7      	b.n	80054f2 <osPoolCreate+0x4a>

08005502 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8005502:	b570      	push	{r4, r5, r6, lr}
 8005504:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005506:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800550a:	b186      	cbz	r6, 800552e <osPoolAlloc+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800550c:	f3ef 8511 	mrs	r5, BASEPRI
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8005520:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005522:	68a1      	ldr	r1, [r4, #8]
 8005524:	2200      	movs	r2, #0
 8005526:	4291      	cmp	r1, r2
 8005528:	d104      	bne.n	8005534 <osPoolAlloc+0x32>
  void *p = NULL;
 800552a:	2500      	movs	r5, #0
 800552c:	e012      	b.n	8005554 <osPoolAlloc+0x52>
    vPortEnterCritical();
 800552e:	f001 f8d9 	bl	80066e4 <vPortEnterCritical>
 8005532:	e7f6      	b.n	8005522 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	4413      	add	r3, r2
 8005538:	fbb3 f0f1 	udiv	r0, r3, r1
 800553c:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 8005540:	6860      	ldr	r0, [r4, #4]
 8005542:	5cc5      	ldrb	r5, [r0, r3]
 8005544:	b96d      	cbnz	r5, 8005562 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8005546:	2201      	movs	r2, #1
 8005548:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800554a:	68e2      	ldr	r2, [r4, #12]
 800554c:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 800554e:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8005550:	fb02 5503 	mla	r5, r2, r3, r5
 8005554:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8005558:	b12b      	cbz	r3, 8005566 <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800555a:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 800555e:	4628      	mov	r0, r5
 8005560:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005562:	3201      	adds	r2, #1
 8005564:	e7df      	b.n	8005526 <osPoolAlloc+0x24>
    vPortExitCritical();
 8005566:	f001 f8dd 	bl	8006724 <vPortExitCritical>
  return p;
 800556a:	e7f8      	b.n	800555e <osPoolAlloc+0x5c>

0800556c <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 800556c:	4603      	mov	r3, r0
 800556e:	b180      	cbz	r0, 8005592 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8005570:	b179      	cbz	r1, 8005592 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8005572:	6802      	ldr	r2, [r0, #0]
 8005574:	428a      	cmp	r2, r1
 8005576:	d80c      	bhi.n	8005592 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8005578:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800557a:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 800557c:	fbb1 f2f0 	udiv	r2, r1, r0
 8005580:	fb00 1012 	mls	r0, r0, r2, r1
 8005584:	b928      	cbnz	r0, 8005592 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8005586:	6899      	ldr	r1, [r3, #8]
 8005588:	4291      	cmp	r1, r2
 800558a:	d902      	bls.n	8005592 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8005590:	4770      	bx	lr
    return osErrorParameter;
 8005592:	2080      	movs	r0, #128	@ 0x80
}
 8005594:	4770      	bx	lr

08005596 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005596:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005598:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800559a:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800559c:	9301      	str	r3, [sp, #4]
{
 800559e:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80055a0:	6843      	ldr	r3, [r0, #4]
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80055a6:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80055a8:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80055aa:	f001 fa01 	bl	80069b0 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 80055ae:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80055b0:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 80055b2:	681d      	ldr	r5, [r3, #0]
 80055b4:	b16d      	cbz	r5, 80055d2 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80055b6:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	4632      	mov	r2, r6
 80055bc:	2104      	movs	r1, #4
 80055be:	f000 f98f 	bl	80058e0 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 80055c2:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80055c4:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 80055c6:	681d      	ldr	r5, [r3, #0]
 80055c8:	686b      	ldr	r3, [r5, #4]
 80055ca:	b92b      	cbnz	r3, 80055d8 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 80055cc:	4628      	mov	r0, r5
 80055ce:	f001 fa81 	bl	8006ad4 <vPortFree>
    return NULL;
 80055d2:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 80055d4:	b004      	add	sp, #16
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80055d8:	a801      	add	r0, sp, #4
 80055da:	f7ff ff65 	bl	80054a8 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 80055de:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80055e0:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	6883      	ldr	r3, [r0, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f4      	bne.n	80055d4 <osMailCreate+0x3e>
 80055ea:	e7f0      	b.n	80055ce <osMailCreate+0x38>

080055ec <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80055ec:	b110      	cbz	r0, 80055f4 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 80055ee:	6880      	ldr	r0, [r0, #8]
 80055f0:	f7ff bf87 	b.w	8005502 <osPoolAlloc>
  
  return p;
}
 80055f4:	4770      	bx	lr

080055f6 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80055f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055f8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80055fa:	b328      	cbz	r0, 8005648 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 80055fc:	2200      	movs	r2, #0
 80055fe:	9203      	str	r2, [sp, #12]
 8005600:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005604:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8005606:	b1c3      	cbz	r3, 800563a <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005608:	4613      	mov	r3, r2
 800560a:	a901      	add	r1, sp, #4
 800560c:	aa03      	add	r2, sp, #12
 800560e:	f000 fa3d 	bl	8005a8c <xQueueGenericSendFromISR>
 8005612:	2801      	cmp	r0, #1
 8005614:	d003      	beq.n	800561e <osMailPut+0x28>
      return osErrorOS;
 8005616:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8005618:	b005      	add	sp, #20
 800561a:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	b14b      	cbz	r3, 8005636 <osMailPut+0x40>
 8005622:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	f3bf 8f6f 	isb	sy
  return osOK;
 8005636:	2000      	movs	r0, #0
 8005638:	e7ee      	b.n	8005618 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800563a:	461a      	mov	r2, r3
 800563c:	a901      	add	r1, sp, #4
 800563e:	f000 f973 	bl	8005928 <xQueueGenericSend>
 8005642:	2801      	cmp	r0, #1
 8005644:	d0f7      	beq.n	8005636 <osMailPut+0x40>
 8005646:	e7e6      	b.n	8005616 <osMailPut+0x20>
    return osErrorParameter;
 8005648:	2080      	movs	r0, #128	@ 0x80
 800564a:	e7e5      	b.n	8005618 <osMailPut+0x22>

0800564c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800564c:	b530      	push	{r4, r5, lr}
 800564e:	b085      	sub	sp, #20
 8005650:	4605      	mov	r5, r0
 8005652:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8005654:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8005656:	b911      	cbnz	r1, 800565e <osMailGet+0x12>
    event.status = osErrorParameter;
 8005658:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	e01a      	b.n	8005694 <osMailGet+0x48>
  taskWoken = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005666:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8005668:	b1e3      	cbz	r3, 80056a4 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800566a:	466a      	mov	r2, sp
 800566c:	a902      	add	r1, sp, #8
 800566e:	f000 fb07 	bl	8005c80 <xQueueReceiveFromISR>
 8005672:	1e43      	subs	r3, r0, #1
 8005674:	4258      	negs	r0, r3
 8005676:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8005678:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800567a:	0140      	lsls	r0, r0, #5
 800567c:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800567e:	b14b      	cbz	r3, 8005694 <osMailGet+0x48>
 8005680:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005688:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
    return event;
 8005694:	ab04      	add	r3, sp, #16
 8005696:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800569a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 800569e:	4628      	mov	r0, r5
 80056a0:	b005      	add	sp, #20
 80056a2:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80056a4:	a902      	add	r1, sp, #8
 80056a6:	f000 fa4d 	bl	8005b44 <xQueueReceive>
 80056aa:	2801      	cmp	r0, #1
 80056ac:	d101      	bne.n	80056b2 <osMailGet+0x66>
      event.status = osEventMail;
 80056ae:	2320      	movs	r3, #32
 80056b0:	e7d3      	b.n	800565a <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80056b2:	3c00      	subs	r4, #0
 80056b4:	bf18      	it	ne
 80056b6:	2401      	movne	r4, #1
 80056b8:	01a4      	lsls	r4, r4, #6
 80056ba:	9401      	str	r4, [sp, #4]
  return event;
 80056bc:	e7ea      	b.n	8005694 <osMailGet+0x48>

080056be <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 80056be:	b110      	cbz	r0, 80056c6 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 80056c0:	6880      	ldr	r0, [r0, #8]
 80056c2:	f7ff bf53 	b.w	800556c <osPoolFree>
}
 80056c6:	2080      	movs	r0, #128	@ 0x80
 80056c8:	4770      	bx	lr

080056ca <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ca:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056de:	4770      	bx	lr

080056e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e4:	4770      	bx	lr

080056e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80056e6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056e8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056ee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056f0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80056f2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056f4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80056f6:	3301      	adds	r3, #1
 80056f8:	6003      	str	r3, [r0, #0]
}
 80056fa:	4770      	bx	lr

080056fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056fc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056fe:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005700:	1c63      	adds	r3, r4, #1
 8005702:	d10a      	bne.n	800571a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005704:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800570a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800570c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800570e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005710:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005712:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005714:	3301      	adds	r3, #1
 8005716:	6003      	str	r3, [r0, #0]
}
 8005718:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571a:	f100 0208 	add.w	r2, r0, #8
 800571e:	4613      	mov	r3, r2
 8005720:	6852      	ldr	r2, [r2, #4]
 8005722:	6815      	ldr	r5, [r2, #0]
 8005724:	42a5      	cmp	r5, r4
 8005726:	d9fa      	bls.n	800571e <vListInsert+0x22>
 8005728:	e7ed      	b.n	8005706 <vListInsert+0xa>

0800572a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800572a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800572e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005730:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005732:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005738:	bf08      	it	eq
 800573a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800573c:	2200      	movs	r2, #0
 800573e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	3a01      	subs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005746:	6818      	ldr	r0, [r3, #0]
}
 8005748:	4770      	bx	lr

0800574a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800574e:	f000 ffc9 	bl	80066e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005752:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005754:	f000 ffe6 	bl	8006724 <vPortExitCritical>

	return xReturn;
}
 8005758:	fab4 f084 	clz	r0, r4
 800575c:	0940      	lsrs	r0, r0, #5
 800575e:	bd10      	pop	{r4, pc}

08005760 <prvCopyDataToQueue>:
{
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005764:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005766:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8005768:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800576a:	b942      	cbnz	r2, 800577e <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800576c:	6806      	ldr	r6, [r0, #0]
 800576e:	b99e      	cbnz	r6, 8005798 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005770:	6840      	ldr	r0, [r0, #4]
 8005772:	f000 feff 	bl	8006574 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005776:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005778:	3501      	adds	r5, #1
 800577a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800577c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800577e:	b96e      	cbnz	r6, 800579c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005780:	6880      	ldr	r0, [r0, #8]
 8005782:	f003 ffee 	bl	8009762 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005786:	68a3      	ldr	r3, [r4, #8]
 8005788:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800578a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800578c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800578e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005790:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005792:	bf24      	itt	cs
 8005794:	6823      	ldrcs	r3, [r4, #0]
 8005796:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005798:	2000      	movs	r0, #0
 800579a:	e7ed      	b.n	8005778 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800579c:	68c0      	ldr	r0, [r0, #12]
 800579e:	f003 ffe0 	bl	8009762 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80057a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80057a4:	68e3      	ldr	r3, [r4, #12]
 80057a6:	4251      	negs	r1, r2
 80057a8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057aa:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80057ac:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ae:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80057b0:	bf3e      	ittt	cc
 80057b2:	6863      	ldrcc	r3, [r4, #4]
 80057b4:	185b      	addcc	r3, r3, r1
 80057b6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80057b8:	2e02      	cmp	r6, #2
 80057ba:	d1ed      	bne.n	8005798 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057bc:	b10d      	cbz	r5, 80057c2 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80057be:	3d01      	subs	r5, #1
 80057c0:	e7ea      	b.n	8005798 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80057c2:	4628      	mov	r0, r5
 80057c4:	e7d8      	b.n	8005778 <prvCopyDataToQueue+0x18>

080057c6 <prvCopyDataFromQueue>:
{
 80057c6:	4603      	mov	r3, r0
 80057c8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80057cc:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057ce:	b16a      	cbz	r2, 80057ec <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80057d0:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057d2:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80057d4:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057d6:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80057d8:	bf28      	it	cs
 80057da:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80057dc:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80057de:	bf28      	it	cs
 80057e0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057e2:	68d9      	ldr	r1, [r3, #12]
}
 80057e4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057e8:	f003 bfbb 	b.w	8009762 <memcpy>
}
 80057ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <prvUnlockQueue>:
{
 80057f2:	b570      	push	{r4, r5, r6, lr}
 80057f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80057f6:	f000 ff75 	bl	80066e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80057fa:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fe:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005802:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005804:	2d00      	cmp	r5, #0
 8005806:	dc14      	bgt.n	8005832 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005808:	23ff      	movs	r3, #255	@ 0xff
 800580a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800580e:	f000 ff89 	bl	8006724 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005812:	f000 ff67 	bl	80066e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005816:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800581a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800581e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005820:	2d00      	cmp	r5, #0
 8005822:	dc12      	bgt.n	800584a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005824:	23ff      	movs	r3, #255	@ 0xff
 8005826:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800582a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800582e:	f000 bf79 	b.w	8006724 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005832:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0e7      	beq.n	8005808 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005838:	4630      	mov	r0, r6
 800583a:	f000 fdfb 	bl	8006434 <xTaskRemoveFromEventList>
 800583e:	b108      	cbz	r0, 8005844 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005840:	f000 fe82 	bl	8006548 <vTaskMissedYield>
			--cTxLock;
 8005844:	3d01      	subs	r5, #1
 8005846:	b26d      	sxtb	r5, r5
 8005848:	e7dc      	b.n	8005804 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0e9      	beq.n	8005824 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005850:	4630      	mov	r0, r6
 8005852:	f000 fdef 	bl	8006434 <xTaskRemoveFromEventList>
 8005856:	b108      	cbz	r0, 800585c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005858:	f000 fe76 	bl	8006548 <vTaskMissedYield>
				--cRxLock;
 800585c:	3d01      	subs	r5, #1
 800585e:	b26d      	sxtb	r5, r5
 8005860:	e7de      	b.n	8005820 <prvUnlockQueue+0x2e>

08005862 <xQueueGenericReset>:
{
 8005862:	b538      	push	{r3, r4, r5, lr}
 8005864:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005866:	4604      	mov	r4, r0
 8005868:	b940      	cbnz	r0, 800587c <xQueueGenericReset+0x1a>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	e7fe      	b.n	800587a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800587c:	f000 ff32 	bl	80066e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005880:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8005884:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005886:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005888:	434b      	muls	r3, r1
 800588a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800588c:	1a5b      	subs	r3, r3, r1
 800588e:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005890:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005892:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005894:	2000      	movs	r0, #0
 8005896:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005898:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800589a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800589e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80058a2:	b9a5      	cbnz	r5, 80058ce <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	b173      	cbz	r3, 80058c6 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a8:	f104 0010 	add.w	r0, r4, #16
 80058ac:	f000 fdc2 	bl	8006434 <xTaskRemoveFromEventList>
 80058b0:	b148      	cbz	r0, 80058c6 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80058b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80058b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80058c6:	f000 ff2d 	bl	8006724 <vPortExitCritical>
}
 80058ca:	2001      	movs	r0, #1
 80058cc:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058ce:	f104 0010 	add.w	r0, r4, #16
 80058d2:	f7ff fefa 	bl	80056ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058d6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80058da:	f7ff fef6 	bl	80056ca <vListInitialise>
 80058de:	e7f2      	b.n	80058c6 <xQueueGenericReset+0x64>

080058e0 <xQueueGenericCreate>:
	{
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058e4:	4606      	mov	r6, r0
 80058e6:	b940      	cbnz	r0, 80058fa <xQueueGenericCreate+0x1a>
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fa:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80058fc:	3048      	adds	r0, #72	@ 0x48
 80058fe:	f001 f857 	bl	80069b0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005902:	4604      	mov	r4, r0
 8005904:	b160      	cbz	r0, 8005920 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800590c:	b155      	cbz	r5, 8005924 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800590e:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8005912:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8005916:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005918:	2101      	movs	r1, #1
 800591a:	4620      	mov	r0, r4
 800591c:	f7ff ffa1 	bl	8005862 <xQueueGenericReset>
	}
 8005920:	4620      	mov	r0, r4
 8005922:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005924:	4603      	mov	r3, r0
 8005926:	e7f4      	b.n	8005912 <xQueueGenericCreate+0x32>

08005928 <xQueueGenericSend>:
{
 8005928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800592c:	460f      	mov	r7, r1
 800592e:	9201      	str	r2, [sp, #4]
 8005930:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005932:	4604      	mov	r4, r0
 8005934:	b940      	cbnz	r0, 8005948 <xQueueGenericSend+0x20>
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	e7fe      	b.n	8005946 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005948:	b951      	cbnz	r1, 8005960 <xQueueGenericSend+0x38>
 800594a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800594c:	b143      	cbz	r3, 8005960 <xQueueGenericSend+0x38>
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	e7fe      	b.n	800595e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005960:	2e02      	cmp	r6, #2
 8005962:	d10b      	bne.n	800597c <xQueueGenericSend+0x54>
 8005964:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d008      	beq.n	800597c <xQueueGenericSend+0x54>
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	e7fe      	b.n	800597a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800597c:	f000 fdea 	bl	8006554 <xTaskGetSchedulerState>
 8005980:	4605      	mov	r5, r0
 8005982:	b330      	cbz	r0, 80059d2 <xQueueGenericSend+0xaa>
 8005984:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005986:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800598a:	f000 feab 	bl	80066e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800598e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005990:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005992:	429a      	cmp	r2, r3
 8005994:	d301      	bcc.n	800599a <xQueueGenericSend+0x72>
 8005996:	2e02      	cmp	r6, #2
 8005998:	d127      	bne.n	80059ea <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800599a:	4632      	mov	r2, r6
 800599c:	4639      	mov	r1, r7
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff fede 	bl	8005760 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059a6:	b11b      	cbz	r3, 80059b0 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80059ac:	f000 fd42 	bl	8006434 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80059b0:	b148      	cbz	r0, 80059c6 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80059b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80059c6:	f000 fead 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 80059ca:	2001      	movs	r0, #1
}
 80059cc:	b004      	add	sp, #16
 80059ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0d6      	beq.n	8005986 <xQueueGenericSend+0x5e>
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	b91b      	cbnz	r3, 80059f6 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80059ee:	f000 fe99 	bl	8006724 <vPortExitCritical>
					return errQUEUE_FULL;
 80059f2:	2000      	movs	r0, #0
 80059f4:	e7ea      	b.n	80059cc <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80059f6:	b915      	cbnz	r5, 80059fe <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f8:	a802      	add	r0, sp, #8
 80059fa:	f000 fd5d 	bl	80064b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80059fe:	f000 fe91 	bl	8006724 <vPortExitCritical>
		vTaskSuspendAll();
 8005a02:	f000 fb89 	bl	8006118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a06:	f000 fe6d 	bl	80066e4 <vPortEnterCritical>
 8005a0a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a0e:	2bff      	cmp	r3, #255	@ 0xff
 8005a10:	bf08      	it	eq
 8005a12:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005a16:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a1a:	2bff      	cmp	r3, #255	@ 0xff
 8005a1c:	bf08      	it	eq
 8005a1e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005a22:	f000 fe7f 	bl	8006724 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a26:	a901      	add	r1, sp, #4
 8005a28:	a802      	add	r0, sp, #8
 8005a2a:	f000 fd51 	bl	80064d0 <xTaskCheckForTimeOut>
 8005a2e:	bb38      	cbnz	r0, 8005a80 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a30:	f000 fe58 	bl	80066e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a36:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d10e      	bne.n	8005a5a <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005a3c:	f000 fe72 	bl	8006724 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a40:	9901      	ldr	r1, [sp, #4]
 8005a42:	f104 0010 	add.w	r0, r4, #16
 8005a46:	f000 fcdb 	bl	8006400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fed1 	bl	80057f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a50:	f000 fc02 	bl	8006258 <xTaskResumeAll>
 8005a54:	b148      	cbz	r0, 8005a6a <xQueueGenericSend+0x142>
 8005a56:	2501      	movs	r5, #1
 8005a58:	e797      	b.n	800598a <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8005a5a:	f000 fe63 	bl	8006724 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff fec7 	bl	80057f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a64:	f000 fbf8 	bl	8006258 <xTaskResumeAll>
 8005a68:	e7f5      	b.n	8005a56 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8005a6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	e7ea      	b.n	8005a56 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff feb6 	bl	80057f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a86:	f000 fbe7 	bl	8006258 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005a8a:	e7b2      	b.n	80059f2 <xQueueGenericSend+0xca>

08005a8c <xQueueGenericSendFromISR>:
{
 8005a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a90:	4689      	mov	r9, r1
 8005a92:	4617      	mov	r7, r2
 8005a94:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005a96:	4604      	mov	r4, r0
 8005a98:	b940      	cbnz	r0, 8005aac <xQueueGenericSendFromISR+0x20>
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	e7fe      	b.n	8005aaa <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aac:	b951      	cbnz	r1, 8005ac4 <xQueueGenericSendFromISR+0x38>
 8005aae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005ab0:	b143      	cbz	r3, 8005ac4 <xQueueGenericSendFromISR+0x38>
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	e7fe      	b.n	8005ac2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac4:	2e02      	cmp	r6, #2
 8005ac6:	d10b      	bne.n	8005ae0 <xQueueGenericSendFromISR+0x54>
 8005ac8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d008      	beq.n	8005ae0 <xQueueGenericSendFromISR+0x54>
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	e7fe      	b.n	8005ade <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ae0:	f000 ff12 	bl	8006908 <vPortValidateInterruptPriority>
	__asm volatile
 8005ae4:	f3ef 8811 	mrs	r8, BASEPRI
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005af8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005afa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d301      	bcc.n	8005b04 <xQueueGenericSendFromISR+0x78>
 8005b00:	2e02      	cmp	r6, #2
 8005b02:	d11d      	bne.n	8005b40 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b04:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b08:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b0a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff fe26 	bl	8005760 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005b14:	1c6b      	adds	r3, r5, #1
 8005b16:	d10e      	bne.n	8005b36 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b1a:	b13b      	cbz	r3, 8005b2c <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b1c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005b20:	f000 fc88 	bl	8006434 <xTaskRemoveFromEventList>
 8005b24:	b110      	cbz	r0, 8005b2c <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8005b26:	b10f      	cbz	r7, 8005b2c <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8005b2c:	2001      	movs	r0, #1
	__asm volatile
 8005b2e:	f388 8811 	msr	BASEPRI, r8
}
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b36:	3501      	adds	r5, #1
 8005b38:	b26d      	sxtb	r5, r5
 8005b3a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8005b3e:	e7f5      	b.n	8005b2c <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7f4      	b.n	8005b2e <xQueueGenericSendFromISR+0xa2>

08005b44 <xQueueReceive>:
{
 8005b44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b48:	460e      	mov	r6, r1
 8005b4a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	b940      	cbnz	r0, 8005b62 <xQueueReceive+0x1e>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	e7fe      	b.n	8005b60 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b62:	b951      	cbnz	r1, 8005b7a <xQueueReceive+0x36>
 8005b64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005b66:	b143      	cbz	r3, 8005b7a <xQueueReceive+0x36>
 8005b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	e7fe      	b.n	8005b78 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b7a:	f000 fceb 	bl	8006554 <xTaskGetSchedulerState>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b318      	cbz	r0, 8005bca <xQueueReceive+0x86>
 8005b82:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005b84:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005b88:	f000 fdac 	bl	80066e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b8c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b8e:	b347      	cbz	r7, 8005be2 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b90:	4631      	mov	r1, r6
 8005b92:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b94:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b96:	f7ff fe16 	bl	80057c6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b9a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	b173      	cbz	r3, 8005bbe <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba0:	f104 0010 	add.w	r0, r4, #16
 8005ba4:	f000 fc46 	bl	8006434 <xTaskRemoveFromEventList>
 8005ba8:	b148      	cbz	r0, 8005bbe <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8005baa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005bbe:	f000 fdb1 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8005bc2:	2001      	movs	r0, #1
}
 8005bc4:	b004      	add	sp, #16
 8005bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	9b01      	ldr	r3, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0d9      	beq.n	8005b84 <xQueueReceive+0x40>
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	e7fe      	b.n	8005be0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be2:	9b01      	ldr	r3, [sp, #4]
 8005be4:	b91b      	cbnz	r3, 8005bee <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8005be6:	f000 fd9d 	bl	8006724 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005bea:	2000      	movs	r0, #0
 8005bec:	e7ea      	b.n	8005bc4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8005bee:	b915      	cbnz	r5, 8005bf6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bf0:	a802      	add	r0, sp, #8
 8005bf2:	f000 fc61 	bl	80064b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005bf6:	f000 fd95 	bl	8006724 <vPortExitCritical>
		vTaskSuspendAll();
 8005bfa:	f000 fa8d 	bl	8006118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfe:	f000 fd71 	bl	80066e4 <vPortEnterCritical>
 8005c02:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c06:	2bff      	cmp	r3, #255	@ 0xff
 8005c08:	bf08      	it	eq
 8005c0a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005c0e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c12:	2bff      	cmp	r3, #255	@ 0xff
 8005c14:	bf08      	it	eq
 8005c16:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005c1a:	f000 fd83 	bl	8006724 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c1e:	a901      	add	r1, sp, #4
 8005c20:	a802      	add	r0, sp, #8
 8005c22:	f000 fc55 	bl	80064d0 <xTaskCheckForTimeOut>
 8005c26:	bb00      	cbnz	r0, 8005c6a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff fd8e 	bl	800574a <prvIsQueueEmpty>
 8005c2e:	b1b0      	cbz	r0, 8005c5e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c30:	9901      	ldr	r1, [sp, #4]
 8005c32:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005c36:	f000 fbe3 	bl	8006400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f7ff fdd9 	bl	80057f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c40:	f000 fb0a 	bl	8006258 <xTaskResumeAll>
 8005c44:	b948      	cbnz	r0, 8005c5a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8005c46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	2501      	movs	r5, #1
 8005c5c:	e794      	b.n	8005b88 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff fdc7 	bl	80057f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c64:	f000 faf8 	bl	8006258 <xTaskResumeAll>
 8005c68:	e7f7      	b.n	8005c5a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7ff fdc1 	bl	80057f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c70:	f000 faf2 	bl	8006258 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff fd68 	bl	800574a <prvIsQueueEmpty>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d0ed      	beq.n	8005c5a <xQueueReceive+0x116>
 8005c7e:	e7b4      	b.n	8005bea <xQueueReceive+0xa6>

08005c80 <xQueueReceiveFromISR>:
{
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4689      	mov	r9, r1
 8005c86:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005c88:	4604      	mov	r4, r0
 8005c8a:	b940      	cbnz	r0, 8005c9e <xQueueReceiveFromISR+0x1e>
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	e7fe      	b.n	8005c9c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c9e:	b951      	cbnz	r1, 8005cb6 <xQueueReceiveFromISR+0x36>
 8005ca0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005ca2:	b143      	cbz	r3, 8005cb6 <xQueueReceiveFromISR+0x36>
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cb6:	f000 fe27 	bl	8006908 <vPortValidateInterruptPriority>
	__asm volatile
 8005cba:	f3ef 8711 	mrs	r7, BASEPRI
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cce:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cd0:	b30d      	cbz	r5, 8005d16 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cd2:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cd6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cd8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f7ff fd73 	bl	80057c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce0:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005ce2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ce4:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005ce6:	d111      	bne.n	8005d0c <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	b153      	cbz	r3, 8005d02 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cec:	f104 0010 	add.w	r0, r4, #16
 8005cf0:	f000 fba0 	bl	8006434 <xTaskRemoveFromEventList>
 8005cf4:	b128      	cbz	r0, 8005d02 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	d002      	beq.n	8005d02 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8005d02:	2001      	movs	r0, #1
	__asm volatile
 8005d04:	f387 8811 	msr	BASEPRI, r7
}
 8005d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	b276      	sxtb	r6, r6
 8005d10:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8005d14:	e7f5      	b.n	8005d02 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8005d16:	4628      	mov	r0, r5
 8005d18:	e7f4      	b.n	8005d04 <xQueueReceiveFromISR+0x84>
	...

08005d1c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d20:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d22:	f000 fcdf 	bl	80066e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d26:	4b2f      	ldr	r3, [pc, #188]	@ (8005de4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8005d28:	4e2f      	ldr	r6, [pc, #188]	@ (8005de8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4f2f      	ldr	r7, [pc, #188]	@ (8005dec <prvAddNewTaskToReadyList+0xd0>)
 8005d2e:	3201      	adds	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005d32:	6835      	ldr	r5, [r6, #0]
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	d14a      	bne.n	8005dce <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d38:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d11f      	bne.n	8005d80 <prvAddNewTaskToReadyList+0x64>
 8005d40:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d42:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d44:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d46:	f7ff fcc0 	bl	80056ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d4a:	2d07      	cmp	r5, #7
 8005d4c:	f108 0814 	add.w	r8, r8, #20
 8005d50:	d1f7      	bne.n	8005d42 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d52:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8005e14 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8005d56:	4d26      	ldr	r5, [pc, #152]	@ (8005df0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8005d58:	4640      	mov	r0, r8
 8005d5a:	f7ff fcb6 	bl	80056ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7ff fcb3 	bl	80056ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d64:	4823      	ldr	r0, [pc, #140]	@ (8005df4 <prvAddNewTaskToReadyList+0xd8>)
 8005d66:	f7ff fcb0 	bl	80056ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d6a:	4823      	ldr	r0, [pc, #140]	@ (8005df8 <prvAddNewTaskToReadyList+0xdc>)
 8005d6c:	f7ff fcad 	bl	80056ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d70:	4822      	ldr	r0, [pc, #136]	@ (8005dfc <prvAddNewTaskToReadyList+0xe0>)
 8005d72:	f7ff fcaa 	bl	80056ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d76:	4b22      	ldr	r3, [pc, #136]	@ (8005e00 <prvAddNewTaskToReadyList+0xe4>)
 8005d78:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d7c:	4b21      	ldr	r3, [pc, #132]	@ (8005e04 <prvAddNewTaskToReadyList+0xe8>)
 8005d7e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8005d80:	4a21      	ldr	r2, [pc, #132]	@ (8005e08 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005d82:	4922      	ldr	r1, [pc, #136]	@ (8005e0c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005d84:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005d86:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005d88:	3301      	adds	r3, #1
 8005d8a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005d8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4093      	lsls	r3, r2
 8005d92:	4303      	orrs	r3, r0
 8005d94:	2014      	movs	r0, #20
 8005d96:	600b      	str	r3, [r1, #0]
 8005d98:	fb00 7002 	mla	r0, r0, r2, r7
 8005d9c:	1d21      	adds	r1, r4, #4
 8005d9e:	f7ff fca2 	bl	80056e6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005da2:	f000 fcbf 	bl	8006724 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005da6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <prvAddNewTaskToReadyList+0xf4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b173      	cbz	r3, 8005dca <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d209      	bcs.n	8005dca <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8005db6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	f3bf 8f6f 	isb	sy
}
 8005dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005dce:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <prvAddNewTaskToReadyList+0xf4>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d1d3      	bne.n	8005d80 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dd8:	6832      	ldr	r2, [r6, #0]
 8005dda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ddc:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005dde:	bf98      	it	ls
 8005de0:	6034      	strls	r4, [r6, #0]
 8005de2:	e7cd      	b.n	8005d80 <prvAddNewTaskToReadyList+0x64>
 8005de4:	200014b4 	.word	0x200014b4
 8005de8:	200015b4 	.word	0x200015b4
 8005dec:	20001528 	.word	0x20001528
 8005df0:	20001500 	.word	0x20001500
 8005df4:	200014e4 	.word	0x200014e4
 8005df8:	200014d0 	.word	0x200014d0
 8005dfc:	200014b8 	.word	0x200014b8
 8005e00:	200014fc 	.word	0x200014fc
 8005e04:	200014f8 	.word	0x200014f8
 8005e08:	20001498 	.word	0x20001498
 8005e0c:	200014ac 	.word	0x200014ac
 8005e10:	200014a8 	.word	0x200014a8
 8005e14:	20001514 	.word	0x20001514

08005e18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e84 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1c:	4d1a      	ldr	r5, [pc, #104]	@ (8005e88 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8005e1e:	681c      	ldr	r4, [r3, #0]
{
 8005e20:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e22:	6828      	ldr	r0, [r5, #0]
 8005e24:	3004      	adds	r0, #4
{
 8005e26:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e28:	f7ff fc7f 	bl	800572a <uxListRemove>
 8005e2c:	b940      	cbnz	r0, 8005e40 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e2e:	682a      	ldr	r2, [r5, #0]
 8005e30:	4916      	ldr	r1, [pc, #88]	@ (8005e8c <prvAddCurrentTaskToDelayedList+0x74>)
 8005e32:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8005e34:	680b      	ldr	r3, [r1, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	4082      	lsls	r2, r0
 8005e3a:	ea23 0302 	bic.w	r3, r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e40:	1c73      	adds	r3, r6, #1
 8005e42:	d107      	bne.n	8005e54 <prvAddCurrentTaskToDelayedList+0x3c>
 8005e44:	b137      	cbz	r7, 8005e54 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e46:	6829      	ldr	r1, [r5, #0]
 8005e48:	4811      	ldr	r0, [pc, #68]	@ (8005e90 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e4e:	3104      	adds	r1, #4
 8005e50:	f7ff bc49 	b.w	80056e6 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	19a4      	adds	r4, r4, r6
 8005e58:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e5a:	d307      	bcc.n	8005e6c <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e94 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	6829      	ldr	r1, [r5, #0]
}
 8005e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e66:	3104      	adds	r1, #4
 8005e68:	f7ff bc48 	b.w	80056fc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	6829      	ldr	r1, [r5, #0]
 8005e72:	3104      	adds	r1, #4
 8005e74:	f7ff fc42 	bl	80056fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e78:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <prvAddCurrentTaskToDelayedList+0x84>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8005e7e:	bf88      	it	hi
 8005e80:	601c      	strhi	r4, [r3, #0]
}
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e84:	200014b0 	.word	0x200014b0
 8005e88:	200015b4 	.word	0x200015b4
 8005e8c:	200014ac 	.word	0x200014ac
 8005e90:	200014b8 	.word	0x200014b8
 8005e94:	200014f8 	.word	0x200014f8
 8005e98:	200014fc 	.word	0x200014fc
 8005e9c:	20001494 	.word	0x20001494

08005ea0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea0:	4a06      	ldr	r2, [pc, #24]	@ (8005ebc <prvResetNextTaskUnblockTime+0x1c>)
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <prvResetNextTaskUnblockTime+0x20>)
 8005ea8:	b919      	cbnz	r1, 8005eb2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb6:	68d2      	ldr	r2, [r2, #12]
 8005eb8:	6852      	ldr	r2, [r2, #4]
 8005eba:	e7f8      	b.n	8005eae <prvResetNextTaskUnblockTime+0xe>
 8005ebc:	200014fc 	.word	0x200014fc
 8005ec0:	20001494 	.word	0x20001494

08005ec4 <prvDeleteTCB>:
	{
 8005ec4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ec6:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8005eca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ecc:	b93b      	cbnz	r3, 8005ede <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8005ece:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8005ed0:	f000 fe00 	bl	8006ad4 <vPortFree>
				vPortFree( pxTCB );
 8005ed4:	4620      	mov	r0, r4
	}
 8005ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005eda:	f000 bdfb 	b.w	8006ad4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d0f9      	beq.n	8005ed6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d008      	beq.n	8005ef8 <prvDeleteTCB+0x34>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	e7fe      	b.n	8005ef6 <prvDeleteTCB+0x32>
	}
 8005ef8:	bd10      	pop	{r4, pc}
	...

08005efc <prvIdleTask>:
{
 8005efc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efe:	4c13      	ldr	r4, [pc, #76]	@ (8005f4c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f00:	4f13      	ldr	r7, [pc, #76]	@ (8005f50 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8005f02:	4d14      	ldr	r5, [pc, #80]	@ (8005f54 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	b973      	cbnz	r3, 8005f26 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f08:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <prvIdleTask+0x5c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d9f8      	bls.n	8005f02 <prvIdleTask+0x6>
				taskYIELD();
 8005f10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	e7ed      	b.n	8005f02 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8005f26:	f000 fbdd 	bl	80066e4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2e:	1d30      	adds	r0, r6, #4
 8005f30:	f7ff fbfb 	bl	800572a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005f40:	f000 fbf0 	bl	8006724 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7ff ffbd 	bl	8005ec4 <prvDeleteTCB>
 8005f4a:	e7db      	b.n	8005f04 <prvIdleTask+0x8>
 8005f4c:	200014cc 	.word	0x200014cc
 8005f50:	200014d0 	.word	0x200014d0
 8005f54:	200014b4 	.word	0x200014b4
 8005f58:	20001528 	.word	0x20001528

08005f5c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f64:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005f68:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f70:	4699      	mov	r9, r3
 8005f72:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f74:	1e4b      	subs	r3, r1, #1
 8005f76:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f7a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8005f7e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005f84:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8005f88:	b108      	cbz	r0, 8005f8e <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f8a:	428b      	cmp	r3, r1
 8005f8c:	d1f8      	bne.n	8005f80 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f8e:	9d08      	ldr	r5, [sp, #32]
 8005f90:	2d06      	cmp	r5, #6
 8005f92:	bf28      	it	cs
 8005f94:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f96:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8005f9a:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8005f9e:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fa0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fa2:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fa6:	f7ff fb9b 	bl	80056e0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fae:	f104 0018 	add.w	r0, r4, #24
 8005fb2:	f7ff fb95 	bl	80056e0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005fb6:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fba:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fbe:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fc0:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fc4:	464a      	mov	r2, r9
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f000 fb61 	bl	8006690 <pxPortInitialiseStack>
 8005fce:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005fd0:	f1b8 0f00 	cmp.w	r8, #0
 8005fd4:	d001      	beq.n	8005fda <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fd6:	f8c8 4000 	str.w	r4, [r8]
}
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005fde <xTaskCreateStatic>:
	{
 8005fde:	b570      	push	{r4, r5, r6, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005fe6:	b945      	cbnz	r5, 8005ffa <xTaskCreateStatic+0x1c>
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	e7fe      	b.n	8005ff8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005ffa:	b944      	cbnz	r4, 800600e <xTaskCreateStatic+0x30>
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	e7fe      	b.n	800600c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800600e:	2654      	movs	r6, #84	@ 0x54
 8006010:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006012:	9e05      	ldr	r6, [sp, #20]
 8006014:	2e54      	cmp	r6, #84	@ 0x54
 8006016:	d008      	beq.n	800602a <xTaskCreateStatic+0x4c>
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	e7fe      	b.n	8006028 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800602a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800602c:	2502      	movs	r5, #2
 800602e:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006032:	ad04      	add	r5, sp, #16
 8006034:	9501      	str	r5, [sp, #4]
 8006036:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006038:	9402      	str	r4, [sp, #8]
 800603a:	9500      	str	r5, [sp, #0]
 800603c:	f7ff ff8e 	bl	8005f5c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006040:	4620      	mov	r0, r4
 8006042:	f7ff fe6b 	bl	8005d1c <prvAddNewTaskToReadyList>
	}
 8006046:	9804      	ldr	r0, [sp, #16]
 8006048:	b006      	add	sp, #24
 800604a:	bd70      	pop	{r4, r5, r6, pc}

0800604c <xTaskCreate>:
	{
 800604c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006050:	4607      	mov	r7, r0
 8006052:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006054:	0090      	lsls	r0, r2, #2
	{
 8006056:	4688      	mov	r8, r1
 8006058:	4616      	mov	r6, r2
 800605a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605c:	f000 fca8 	bl	80069b0 <pvPortMalloc>
			if( pxStack != NULL )
 8006060:	4605      	mov	r5, r0
 8006062:	b920      	cbnz	r0, 800606e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006068:	b005      	add	sp, #20
 800606a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800606e:	2054      	movs	r0, #84	@ 0x54
 8006070:	f000 fc9e 	bl	80069b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006074:	4604      	mov	r4, r0
 8006076:	b198      	cbz	r0, 80060a0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006078:	2300      	movs	r3, #0
 800607a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800607e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8006080:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006086:	9002      	str	r0, [sp, #8]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4632      	mov	r2, r6
 800608c:	464b      	mov	r3, r9
 800608e:	4641      	mov	r1, r8
 8006090:	4638      	mov	r0, r7
 8006092:	f7ff ff63 	bl	8005f5c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006096:	4620      	mov	r0, r4
 8006098:	f7ff fe40 	bl	8005d1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800609c:	2001      	movs	r0, #1
 800609e:	e7e3      	b.n	8006068 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fd17 	bl	8006ad4 <vPortFree>
		if( pxNewTCB != NULL )
 80060a6:	e7dd      	b.n	8006064 <xTaskCreate+0x18>

080060a8 <vTaskStartScheduler>:
{
 80060a8:	b510      	push	{r4, lr}
 80060aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ae:	aa07      	add	r2, sp, #28
 80060b0:	a906      	add	r1, sp, #24
 80060b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060b8:	f7fb f8ac 	bl	8001214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060bc:	9b05      	ldr	r3, [sp, #20]
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	9b06      	ldr	r3, [sp, #24]
 80060c2:	9a07      	ldr	r2, [sp, #28]
 80060c4:	490f      	ldr	r1, [pc, #60]	@ (8006104 <vTaskStartScheduler+0x5c>)
 80060c6:	4810      	ldr	r0, [pc, #64]	@ (8006108 <vTaskStartScheduler+0x60>)
 80060c8:	e9cd 4300 	strd	r4, r3, [sp]
 80060cc:	4623      	mov	r3, r4
 80060ce:	f7ff ff86 	bl	8005fde <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80060d2:	b1a8      	cbz	r0, 8006100 <vTaskStartScheduler+0x58>
 80060d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80060e4:	4b09      	ldr	r3, [pc, #36]	@ (800610c <vTaskStartScheduler+0x64>)
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060ec:	4b08      	ldr	r3, [pc, #32]	@ (8006110 <vTaskStartScheduler+0x68>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060f2:	4b08      	ldr	r3, [pc, #32]	@ (8006114 <vTaskStartScheduler+0x6c>)
 80060f4:	601c      	str	r4, [r3, #0]
}
 80060f6:	b008      	add	sp, #32
 80060f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80060fc:	f000 bb82 	b.w	8006804 <xPortStartScheduler>
}
 8006100:	b008      	add	sp, #32
 8006102:	bd10      	pop	{r4, pc}
 8006104:	0800cba2 	.word	0x0800cba2
 8006108:	08005efd 	.word	0x08005efd
 800610c:	20001494 	.word	0x20001494
 8006110:	200014a8 	.word	0x200014a8
 8006114:	200014b0 	.word	0x200014b0

08006118 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006118:	4a02      	ldr	r2, [pc, #8]	@ (8006124 <vTaskSuspendAll+0xc>)
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	6013      	str	r3, [r2, #0]
}
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20001490 	.word	0x20001490

08006128 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006128:	4b40      	ldr	r3, [pc, #256]	@ (800622c <xTaskIncrementTick+0x104>)
 800612a:	681b      	ldr	r3, [r3, #0]
{
 800612c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006130:	2b00      	cmp	r3, #0
 8006132:	d174      	bne.n	800621e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006134:	4b3e      	ldr	r3, [pc, #248]	@ (8006230 <xTaskIncrementTick+0x108>)
 8006136:	681c      	ldr	r4, [r3, #0]
 8006138:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800613a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800613c:	b9bc      	cbnz	r4, 800616e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800613e:	4b3d      	ldr	r3, [pc, #244]	@ (8006234 <xTaskIncrementTick+0x10c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	b142      	cbz	r2, 8006158 <xTaskIncrementTick+0x30>
 8006146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	e7fe      	b.n	8006156 <xTaskIncrementTick+0x2e>
 8006158:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <xTaskIncrementTick+0x110>)
 800615a:	6819      	ldr	r1, [r3, #0]
 800615c:	6810      	ldr	r0, [r2, #0]
 800615e:	6018      	str	r0, [r3, #0]
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	4a36      	ldr	r2, [pc, #216]	@ (800623c <xTaskIncrementTick+0x114>)
 8006164:	6813      	ldr	r3, [r2, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	f7ff fe99 	bl	8005ea0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800616e:	4d34      	ldr	r5, [pc, #208]	@ (8006240 <xTaskIncrementTick+0x118>)
 8006170:	4e34      	ldr	r6, [pc, #208]	@ (8006244 <xTaskIncrementTick+0x11c>)
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	4f34      	ldr	r7, [pc, #208]	@ (8006248 <xTaskIncrementTick+0x120>)
 8006176:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8006178:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800617c:	d911      	bls.n	80061a2 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006182:	2114      	movs	r1, #20
 8006184:	434a      	muls	r2, r1
 8006186:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8006188:	2a02      	cmp	r2, #2
 800618a:	bf28      	it	cs
 800618c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006190:	4a2e      	ldr	r2, [pc, #184]	@ (800624c <xTaskIncrementTick+0x124>)
 8006192:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006194:	2a00      	cmp	r2, #0
}
 8006196:	bf0c      	ite	eq
 8006198:	4658      	moveq	r0, fp
 800619a:	2001      	movne	r0, #1
 800619c:	b003      	add	sp, #12
 800619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061a2:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8006234 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80061a6:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8006254 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061aa:	f8da 2000 	ldr.w	r2, [sl]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	b91a      	cbnz	r2, 80061ba <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295
 80061b6:	602a      	str	r2, [r5, #0]
					break;
 80061b8:	e7e1      	b.n	800617e <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061ba:	f8da 2000 	ldr.w	r2, [sl]
 80061be:	68d2      	ldr	r2, [r2, #12]
 80061c0:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80061c8:	428c      	cmp	r4, r1
 80061ca:	d201      	bcs.n	80061d0 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80061cc:	6029      	str	r1, [r5, #0]
						break;
 80061ce:	e7d6      	b.n	800617e <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d0:	f108 0304 	add.w	r3, r8, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	f7ff faa7 	bl	800572a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061dc:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80061e0:	b119      	cbz	r1, 80061ea <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061e2:	f108 0018 	add.w	r0, r8, #24
 80061e6:	f7ff faa0 	bl	800572a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061ea:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80061ee:	f8d9 3000 	ldr.w	r3, [r9]
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f100 	lsl.w	r1, r2, r0
 80061f8:	4319      	orrs	r1, r3
 80061fa:	f04f 0c14 	mov.w	ip, #20
 80061fe:	f8c9 1000 	str.w	r1, [r9]
 8006202:	fb0c 6000 	mla	r0, ip, r0, r6
 8006206:	9901      	ldr	r1, [sp, #4]
 8006208:	f7ff fa6d 	bl	80056e6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800620c:	6838      	ldr	r0, [r7, #0]
 800620e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006212:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006214:	4291      	cmp	r1, r2
 8006216:	bf28      	it	cs
 8006218:	f04f 0b01 	movcs.w	fp, #1
 800621c:	e7c5      	b.n	80061aa <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800621e:	4a0c      	ldr	r2, [pc, #48]	@ (8006250 <xTaskIncrementTick+0x128>)
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	3301      	adds	r3, #1
 8006224:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006226:	f04f 0b00 	mov.w	fp, #0
 800622a:	e7b1      	b.n	8006190 <xTaskIncrementTick+0x68>
 800622c:	20001490 	.word	0x20001490
 8006230:	200014b0 	.word	0x200014b0
 8006234:	200014fc 	.word	0x200014fc
 8006238:	200014f8 	.word	0x200014f8
 800623c:	2000149c 	.word	0x2000149c
 8006240:	20001494 	.word	0x20001494
 8006244:	20001528 	.word	0x20001528
 8006248:	200015b4 	.word	0x200015b4
 800624c:	200014a0 	.word	0x200014a0
 8006250:	200014a4 	.word	0x200014a4
 8006254:	200014ac 	.word	0x200014ac

08006258 <xTaskResumeAll>:
{
 8006258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800625c:	4c31      	ldr	r4, [pc, #196]	@ (8006324 <xTaskResumeAll+0xcc>)
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	b943      	cbnz	r3, 8006274 <xTaskResumeAll+0x1c>
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	e7fe      	b.n	8006272 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006274:	f000 fa36 	bl	80066e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627e:	6824      	ldr	r4, [r4, #0]
 8006280:	b12c      	cbz	r4, 800628e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006282:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006284:	f000 fa4e 	bl	8006724 <vPortExitCritical>
}
 8006288:	4620      	mov	r0, r4
 800628a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <xTaskResumeAll+0xd0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f5      	beq.n	8006282 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006296:	4d25      	ldr	r5, [pc, #148]	@ (800632c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8006298:	4e25      	ldr	r6, [pc, #148]	@ (8006330 <xTaskResumeAll+0xd8>)
 800629a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006340 <xTaskResumeAll+0xe8>
 800629e:	e01f      	b.n	80062e0 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062a0:	68eb      	ldr	r3, [r5, #12]
 80062a2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a4:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062a8:	f104 0018 	add.w	r0, r4, #24
 80062ac:	f7ff fa3d 	bl	800572a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b0:	4648      	mov	r0, r9
 80062b2:	f7ff fa3a 	bl	800572a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80062b8:	6831      	ldr	r1, [r6, #0]
 80062ba:	2701      	movs	r7, #1
 80062bc:	fa07 f302 	lsl.w	r3, r7, r2
 80062c0:	2014      	movs	r0, #20
 80062c2:	430b      	orrs	r3, r1
 80062c4:	fb00 8002 	mla	r0, r0, r2, r8
 80062c8:	4649      	mov	r1, r9
 80062ca:	6033      	str	r3, [r6, #0]
 80062cc:	f7ff fa0b 	bl	80056e6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062d0:	4b18      	ldr	r3, [pc, #96]	@ (8006334 <xTaskResumeAll+0xdc>)
 80062d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	429a      	cmp	r2, r3
 80062da:	d301      	bcc.n	80062e0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80062dc:	4b16      	ldr	r3, [pc, #88]	@ (8006338 <xTaskResumeAll+0xe0>)
 80062de:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1dc      	bne.n	80062a0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80062e6:	b10c      	cbz	r4, 80062ec <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80062e8:	f7ff fdda 	bl	8005ea0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062ec:	4d13      	ldr	r5, [pc, #76]	@ (800633c <xTaskResumeAll+0xe4>)
 80062ee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062f0:	b144      	cbz	r4, 8006304 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80062f2:	4e11      	ldr	r6, [pc, #68]	@ (8006338 <xTaskResumeAll+0xe0>)
 80062f4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80062f6:	f7ff ff17 	bl	8006128 <xTaskIncrementTick>
 80062fa:	b100      	cbz	r0, 80062fe <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80062fc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062fe:	3c01      	subs	r4, #1
 8006300:	d1f9      	bne.n	80062f6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006302:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006304:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <xTaskResumeAll+0xe0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ba      	beq.n	8006282 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800630c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006314:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006320:	2401      	movs	r4, #1
 8006322:	e7af      	b.n	8006284 <xTaskResumeAll+0x2c>
 8006324:	20001490 	.word	0x20001490
 8006328:	200014b4 	.word	0x200014b4
 800632c:	200014e4 	.word	0x200014e4
 8006330:	200014ac 	.word	0x200014ac
 8006334:	200015b4 	.word	0x200015b4
 8006338:	200014a0 	.word	0x200014a0
 800633c:	200014a4 	.word	0x200014a4
 8006340:	20001528 	.word	0x20001528

08006344 <vTaskDelay>:
	{
 8006344:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006346:	b950      	cbnz	r0, 800635e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006348:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800634c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006350:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
	}
 800635c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800635e:	4b0a      	ldr	r3, [pc, #40]	@ (8006388 <vTaskDelay+0x44>)
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	b141      	cbz	r1, 8006376 <vTaskDelay+0x32>
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	e7fe      	b.n	8006374 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006376:	f7ff fecf 	bl	8006118 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800637a:	f7ff fd4d 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800637e:	f7ff ff6b 	bl	8006258 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006382:	2800      	cmp	r0, #0
 8006384:	d0e0      	beq.n	8006348 <vTaskDelay+0x4>
 8006386:	e7e9      	b.n	800635c <vTaskDelay+0x18>
 8006388:	20001490 	.word	0x20001490

0800638c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800638c:	4b17      	ldr	r3, [pc, #92]	@ (80063ec <vTaskSwitchContext+0x60>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b17      	ldr	r3, [pc, #92]	@ (80063f0 <vTaskSwitchContext+0x64>)
{
 8006392:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006394:	b112      	cbz	r2, 800639c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006396:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800639c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800639e:	4b15      	ldr	r3, [pc, #84]	@ (80063f4 <vTaskSwitchContext+0x68>)
 80063a0:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063a2:	fab2 f282 	clz	r2, r2
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	f1c2 021f 	rsb	r2, r2, #31
 80063ac:	2314      	movs	r3, #20
 80063ae:	4912      	ldr	r1, [pc, #72]	@ (80063f8 <vTaskSwitchContext+0x6c>)
 80063b0:	4353      	muls	r3, r2
 80063b2:	18c8      	adds	r0, r1, r3
 80063b4:	58cc      	ldr	r4, [r1, r3]
 80063b6:	b944      	cbnz	r4, 80063ca <vTaskSwitchContext+0x3e>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	e7fe      	b.n	80063c8 <vTaskSwitchContext+0x3c>
 80063ca:	6844      	ldr	r4, [r0, #4]
 80063cc:	3308      	adds	r3, #8
 80063ce:	6864      	ldr	r4, [r4, #4]
 80063d0:	6044      	str	r4, [r0, #4]
 80063d2:	440b      	add	r3, r1
 80063d4:	429c      	cmp	r4, r3
 80063d6:	bf04      	itt	eq
 80063d8:	6863      	ldreq	r3, [r4, #4]
 80063da:	6043      	streq	r3, [r0, #4]
 80063dc:	2314      	movs	r3, #20
 80063de:	fb03 1102 	mla	r1, r3, r2, r1
 80063e2:	684b      	ldr	r3, [r1, #4]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <vTaskSwitchContext+0x70>)
 80063e8:	e7d6      	b.n	8006398 <vTaskSwitchContext+0xc>
 80063ea:	bf00      	nop
 80063ec:	20001490 	.word	0x20001490
 80063f0:	200014a0 	.word	0x200014a0
 80063f4:	200014ac 	.word	0x200014ac
 80063f8:	20001528 	.word	0x20001528
 80063fc:	200015b4 	.word	0x200015b4

08006400 <vTaskPlaceOnEventList>:
{
 8006400:	b510      	push	{r4, lr}
 8006402:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006404:	b940      	cbnz	r0, 8006418 <vTaskPlaceOnEventList+0x18>
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	e7fe      	b.n	8006416 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006418:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <vTaskPlaceOnEventList+0x30>)
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	3118      	adds	r1, #24
 800641e:	f7ff f96d 	bl	80056fc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006422:	4620      	mov	r0, r4
 8006424:	2101      	movs	r1, #1
}
 8006426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800642a:	f7ff bcf5 	b.w	8005e18 <prvAddCurrentTaskToDelayedList>
 800642e:	bf00      	nop
 8006430:	200015b4 	.word	0x200015b4

08006434 <xTaskRemoveFromEventList>:
{
 8006434:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006436:	68c3      	ldr	r3, [r0, #12]
 8006438:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800643a:	b944      	cbnz	r4, 800644e <xTaskRemoveFromEventList+0x1a>
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	e7fe      	b.n	800644c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800644e:	f104 0518 	add.w	r5, r4, #24
 8006452:	4628      	mov	r0, r5
 8006454:	f7ff f969 	bl	800572a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006458:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <xTaskRemoveFromEventList+0x6c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	b9e3      	cbnz	r3, 8006498 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800645e:	1d25      	adds	r5, r4, #4
 8006460:	4628      	mov	r0, r5
 8006462:	f7ff f962 	bl	800572a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006466:	490f      	ldr	r1, [pc, #60]	@ (80064a4 <xTaskRemoveFromEventList+0x70>)
 8006468:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800646a:	6808      	ldr	r0, [r1, #0]
 800646c:	2301      	movs	r3, #1
 800646e:	4093      	lsls	r3, r2
 8006470:	4303      	orrs	r3, r0
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <xTaskRemoveFromEventList+0x74>)
 8006476:	2014      	movs	r0, #20
 8006478:	4629      	mov	r1, r5
 800647a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800647e:	f7ff f932 	bl	80056e6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006482:	4b0a      	ldr	r3, [pc, #40]	@ (80064ac <xTaskRemoveFromEventList+0x78>)
 8006484:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800648c:	bf83      	ittte	hi
 800648e:	4b08      	ldrhi	r3, [pc, #32]	@ (80064b0 <xTaskRemoveFromEventList+0x7c>)
 8006490:	2001      	movhi	r0, #1
 8006492:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006494:	2000      	movls	r0, #0
}
 8006496:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006498:	4806      	ldr	r0, [pc, #24]	@ (80064b4 <xTaskRemoveFromEventList+0x80>)
 800649a:	4629      	mov	r1, r5
 800649c:	e7ef      	b.n	800647e <xTaskRemoveFromEventList+0x4a>
 800649e:	bf00      	nop
 80064a0:	20001490 	.word	0x20001490
 80064a4:	200014ac 	.word	0x200014ac
 80064a8:	20001528 	.word	0x20001528
 80064ac:	200015b4 	.word	0x200015b4
 80064b0:	200014a0 	.word	0x200014a0
 80064b4:	200014e4 	.word	0x200014e4

080064b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064b8:	4b03      	ldr	r3, [pc, #12]	@ (80064c8 <vTaskInternalSetTimeOutState+0x10>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064be:	4b03      	ldr	r3, [pc, #12]	@ (80064cc <vTaskInternalSetTimeOutState+0x14>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6043      	str	r3, [r0, #4]
}
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	2000149c 	.word	0x2000149c
 80064cc:	200014b0 	.word	0x200014b0

080064d0 <xTaskCheckForTimeOut>:
{
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80064d4:	4605      	mov	r5, r0
 80064d6:	b940      	cbnz	r0, 80064ea <xTaskCheckForTimeOut+0x1a>
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	e7fe      	b.n	80064e8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80064ea:	b941      	cbnz	r1, 80064fe <xTaskCheckForTimeOut+0x2e>
 80064ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	e7fe      	b.n	80064fc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80064fe:	f000 f8f1 	bl	80066e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006502:	4b0f      	ldr	r3, [pc, #60]	@ (8006540 <xTaskCheckForTimeOut+0x70>)
 8006504:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	d010      	beq.n	800652e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800650c:	480d      	ldr	r0, [pc, #52]	@ (8006544 <xTaskCheckForTimeOut+0x74>)
 800650e:	682e      	ldr	r6, [r5, #0]
 8006510:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006512:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006514:	4286      	cmp	r6, r0
 8006516:	d001      	beq.n	800651c <xTaskCheckForTimeOut+0x4c>
 8006518:	428a      	cmp	r2, r1
 800651a:	d90f      	bls.n	800653c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800651c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800651e:	4283      	cmp	r3, r0
 8006520:	d90a      	bls.n	8006538 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	4413      	add	r3, r2
 8006526:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006528:	4628      	mov	r0, r5
 800652a:	f7ff ffc5 	bl	80064b8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800652e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006530:	f000 f8f8 	bl	8006724 <vPortExitCritical>
}
 8006534:	4620      	mov	r0, r4
 8006536:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800653c:	2401      	movs	r4, #1
 800653e:	e7f7      	b.n	8006530 <xTaskCheckForTimeOut+0x60>
 8006540:	200014b0 	.word	0x200014b0
 8006544:	2000149c 	.word	0x2000149c

08006548 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006548:	4b01      	ldr	r3, [pc, #4]	@ (8006550 <vTaskMissedYield+0x8>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]
}
 800654e:	4770      	bx	lr
 8006550:	200014a0 	.word	0x200014a0

08006554 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006554:	4b05      	ldr	r3, [pc, #20]	@ (800656c <xTaskGetSchedulerState+0x18>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	b133      	cbz	r3, 8006568 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655a:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <xTaskGetSchedulerState+0x1c>)
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	fab0 f080 	clz	r0, r0
 8006562:	0940      	lsrs	r0, r0, #5
 8006564:	0040      	lsls	r0, r0, #1
 8006566:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006568:	2001      	movs	r0, #1
	}
 800656a:	4770      	bx	lr
 800656c:	200014a8 	.word	0x200014a8
 8006570:	20001490 	.word	0x20001490

08006574 <xTaskPriorityDisinherit>:
	{
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006576:	4604      	mov	r4, r0
 8006578:	b908      	cbnz	r0, 800657e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800657a:	2000      	movs	r0, #0
	}
 800657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800657e:	4b22      	ldr	r3, [pc, #136]	@ (8006608 <xTaskPriorityDisinherit+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4283      	cmp	r3, r0
 8006584:	d008      	beq.n	8006598 <xTaskPriorityDisinherit+0x24>
 8006586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	e7fe      	b.n	8006596 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800659a:	b943      	cbnz	r3, 80065ae <xTaskPriorityDisinherit+0x3a>
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	e7fe      	b.n	80065ac <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80065b0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80065b2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80065b6:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b8:	d0df      	beq.n	800657a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1dd      	bne.n	800657a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065be:	1d06      	adds	r6, r0, #4
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff f8b2 	bl	800572a <uxListRemove>
 80065c6:	4f11      	ldr	r7, [pc, #68]	@ (800660c <xTaskPriorityDisinherit+0x98>)
 80065c8:	4a11      	ldr	r2, [pc, #68]	@ (8006610 <xTaskPriorityDisinherit+0x9c>)
 80065ca:	b950      	cbnz	r0, 80065e2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065ce:	2314      	movs	r3, #20
 80065d0:	434b      	muls	r3, r1
 80065d2:	58fb      	ldr	r3, [r7, r3]
 80065d4:	b92b      	cbnz	r3, 80065e2 <xTaskPriorityDisinherit+0x6e>
 80065d6:	6813      	ldr	r3, [r2, #0]
 80065d8:	2501      	movs	r5, #1
 80065da:	408d      	lsls	r5, r1
 80065dc:	ea23 0305 	bic.w	r3, r3, r5
 80065e0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80065e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e6:	f1c3 0107 	rsb	r1, r3, #7
 80065ea:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ec:	6811      	ldr	r1, [r2, #0]
 80065ee:	2401      	movs	r4, #1
 80065f0:	fa04 f503 	lsl.w	r5, r4, r3
 80065f4:	2014      	movs	r0, #20
 80065f6:	430d      	orrs	r5, r1
 80065f8:	fb00 7003 	mla	r0, r0, r3, r7
 80065fc:	4631      	mov	r1, r6
 80065fe:	6015      	str	r5, [r2, #0]
 8006600:	f7ff f871 	bl	80056e6 <vListInsertEnd>
					xReturn = pdTRUE;
 8006604:	4620      	mov	r0, r4
		return xReturn;
 8006606:	e7b9      	b.n	800657c <xTaskPriorityDisinherit+0x8>
 8006608:	200015b4 	.word	0x200015b4
 800660c:	20001528 	.word	0x20001528
 8006610:	200014ac 	.word	0x200014ac

08006614 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006614:	4808      	ldr	r0, [pc, #32]	@ (8006638 <prvPortStartFirstTask+0x24>)
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	6800      	ldr	r0, [r0, #0]
 800661a:	f380 8808 	msr	MSP, r0
 800661e:	f04f 0000 	mov.w	r0, #0
 8006622:	f380 8814 	msr	CONTROL, r0
 8006626:	b662      	cpsie	i
 8006628:	b661      	cpsie	f
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	df00      	svc	0
 8006634:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006636:	0000      	.short	0x0000
 8006638:	e000ed08 	.word	0xe000ed08

0800663c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800663c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800664c <vPortEnableVFP+0x10>
 8006640:	6801      	ldr	r1, [r0, #0]
 8006642:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006646:	6001      	str	r1, [r0, #0]
 8006648:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800664a:	0000      	.short	0x0000
 800664c:	e000ed88 	.word	0xe000ed88

08006650 <prvTaskExitError>:
{
 8006650:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006656:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <prvTaskExitError+0x3c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	d008      	beq.n	8006670 <prvTaskExitError+0x20>
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	e7fe      	b.n	800666e <prvTaskExitError+0x1e>
 8006670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0fc      	beq.n	8006680 <prvTaskExitError+0x30>
}
 8006686:	b002      	add	sp, #8
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000014 	.word	0x20000014

08006690 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006690:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006694:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006698:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <pxPortInitialiseStack+0x28>)
 800669a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800669e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066a2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066aa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80066b2:	3844      	subs	r0, #68	@ 0x44
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	08006651 	.word	0x08006651
 80066bc:	00000000 	.word	0x00000000

080066c0 <SVC_Handler>:
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	200015b4 	.word	0x200015b4

080066e4 <vPortEnterCritical>:
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80066f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006720 <vPortEnterCritical+0x3c>)
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80066fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80066fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80066fe:	d10e      	bne.n	800671e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006700:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006704:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006708:	b2db      	uxtb	r3, r3
 800670a:	b143      	cbz	r3, 800671e <vPortEnterCritical+0x3a>
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	e7fe      	b.n	800671c <vPortEnterCritical+0x38>
}
 800671e:	4770      	bx	lr
 8006720:	20000014 	.word	0x20000014

08006724 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006724:	4a08      	ldr	r2, [pc, #32]	@ (8006748 <vPortExitCritical+0x24>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	b943      	cbnz	r3, 800673c <vPortExitCritical+0x18>
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	e7fe      	b.n	800673a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800673c:	3b01      	subs	r3, #1
 800673e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006740:	b90b      	cbnz	r3, 8006746 <vPortExitCritical+0x22>
	__asm volatile
 8006742:	f383 8811 	msr	BASEPRI, r3
}
 8006746:	4770      	bx	lr
 8006748:	20000014 	.word	0x20000014
 800674c:	00000000 	.word	0x00000000

08006750 <PendSV_Handler>:
	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	@ (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006774:	f380 8811 	msr	BASEPRI, r0
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f7ff fe04 	bl	800638c <vTaskSwitchContext>
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f380 8811 	msr	BASEPRI, r0
 800678c:	bc09      	pop	{r0, r3}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006796:	f01e 0f10 	tst.w	lr, #16
 800679a:	bf08      	it	eq
 800679c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a0:	f380 8809 	msr	PSP, r0
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst>:
 80067b0:	200015b4 	.word	0x200015b4

080067b4 <SysTick_Handler>:
{
 80067b4:	b508      	push	{r3, lr}
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80067c6:	f7ff fcaf 	bl	8006128 <xTaskIncrementTick>
 80067ca:	b128      	cbz	r0, 80067d8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80067d8:	2300      	movs	r3, #0
 80067da:	f383 8811 	msr	BASEPRI, r3
}
 80067de:	bd08      	pop	{r3, pc}

080067e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80067e4:	2300      	movs	r3, #0
 80067e6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067e8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ea:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <vPortSetupTimerInterrupt+0x20>)
 80067ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067fa:	2307      	movs	r3, #7
 80067fc:	6113      	str	r3, [r2, #16]
}
 80067fe:	4770      	bx	lr
 8006800:	20000008 	.word	0x20000008

08006804 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006804:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006808:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800680a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800680e:	4a38      	ldr	r2, [pc, #224]	@ (80068f0 <xPortStartScheduler+0xec>)
 8006810:	4291      	cmp	r1, r2
 8006812:	d108      	bne.n	8006826 <xPortStartScheduler+0x22>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	e7fe      	b.n	8006824 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006826:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800682a:	4b32      	ldr	r3, [pc, #200]	@ (80068f4 <xPortStartScheduler+0xf0>)
 800682c:	429a      	cmp	r2, r3
 800682e:	d108      	bne.n	8006842 <xPortStartScheduler+0x3e>
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	e7fe      	b.n	8006840 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006842:	4b2d      	ldr	r3, [pc, #180]	@ (80068f8 <xPortStartScheduler+0xf4>)
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800684a:	22ff      	movs	r2, #255	@ 0xff
 800684c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800684e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006858:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800685c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006860:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006862:	4a27      	ldr	r2, [pc, #156]	@ (8006900 <xPortStartScheduler+0xfc>)
 8006864:	2307      	movs	r3, #7
 8006866:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006868:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800686c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686e:	0609      	lsls	r1, r1, #24
 8006870:	d40a      	bmi.n	8006888 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006872:	2b03      	cmp	r3, #3
 8006874:	d011      	beq.n	800689a <xPortStartScheduler+0x96>
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	e7fe      	b.n	8006886 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006888:	3b01      	subs	r3, #1
 800688a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800688c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f88d 3003 	strb.w	r3, [sp, #3]
 8006898:	e7e6      	b.n	8006868 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800689a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800689e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068a4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068ac:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80068b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068b4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068b8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80068bc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068c0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80068c4:	f7ff ff8c 	bl	80067e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80068c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <xPortStartScheduler+0x100>)
 80068ca:	2500      	movs	r5, #0
 80068cc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80068ce:	f7ff feb5 	bl	800663c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068d2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80068d6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80068da:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80068de:	f7ff fe99 	bl	8006614 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80068e2:	f7ff fd53 	bl	800638c <vTaskSwitchContext>
	prvTaskExitError();
 80068e6:	f7ff feb3 	bl	8006650 <prvTaskExitError>
}
 80068ea:	4628      	mov	r0, r5
 80068ec:	b003      	add	sp, #12
 80068ee:	bd30      	pop	{r4, r5, pc}
 80068f0:	410fc271 	.word	0x410fc271
 80068f4:	410fc270 	.word	0x410fc270
 80068f8:	e000e400 	.word	0xe000e400
 80068fc:	200015bc 	.word	0x200015bc
 8006900:	200015b8 	.word	0x200015b8
 8006904:	20000014 	.word	0x20000014

08006908 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006908:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800690c:	2b0f      	cmp	r3, #15
 800690e:	d90e      	bls.n	800692e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006910:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <vPortValidateInterruptPriority+0x50>)
 8006912:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006914:	4a11      	ldr	r2, [pc, #68]	@ (800695c <vPortValidateInterruptPriority+0x54>)
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d908      	bls.n	800692e <vPortValidateInterruptPriority+0x26>
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	e7fe      	b.n	800692c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800692e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006932:	4a0b      	ldr	r2, [pc, #44]	@ (8006960 <vPortValidateInterruptPriority+0x58>)
 8006934:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800693e:	4293      	cmp	r3, r2
 8006940:	d908      	bls.n	8006954 <vPortValidateInterruptPriority+0x4c>
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	e7fe      	b.n	8006952 <vPortValidateInterruptPriority+0x4a>
	}
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	e000e3f0 	.word	0xe000e3f0
 800695c:	200015bc 	.word	0x200015bc
 8006960:	200015b8 	.word	0x200015b8

08006964 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006964:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006966:	4b10      	ldr	r3, [pc, #64]	@ (80069a8 <prvInsertBlockIntoFreeList+0x44>)
 8006968:	461a      	mov	r2, r3
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4283      	cmp	r3, r0
 800696e:	d3fb      	bcc.n	8006968 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006970:	6854      	ldr	r4, [r2, #4]
 8006972:	1911      	adds	r1, r2, r4
 8006974:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006976:	bf01      	itttt	eq
 8006978:	6841      	ldreq	r1, [r0, #4]
 800697a:	4610      	moveq	r0, r2
 800697c:	1909      	addeq	r1, r1, r4
 800697e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006980:	6844      	ldr	r4, [r0, #4]
 8006982:	1901      	adds	r1, r0, r4
 8006984:	428b      	cmp	r3, r1
 8006986:	d10c      	bne.n	80069a2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006988:	4908      	ldr	r1, [pc, #32]	@ (80069ac <prvInsertBlockIntoFreeList+0x48>)
 800698a:	6809      	ldr	r1, [r1, #0]
 800698c:	428b      	cmp	r3, r1
 800698e:	d003      	beq.n	8006998 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	4421      	add	r1, r4
 8006994:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006996:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006998:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800699a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800699c:	bf18      	it	ne
 800699e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069a0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069a2:	4619      	mov	r1, r3
 80069a4:	e7f8      	b.n	8006998 <prvInsertBlockIntoFreeList+0x34>
 80069a6:	bf00      	nop
 80069a8:	200015d0 	.word	0x200015d0
 80069ac:	200015cc 	.word	0x200015cc

080069b0 <pvPortMalloc>:
{
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80069b6:	f7ff fbaf 	bl	8006118 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80069ba:	4940      	ldr	r1, [pc, #256]	@ (8006abc <pvPortMalloc+0x10c>)
 80069bc:	4d40      	ldr	r5, [pc, #256]	@ (8006ac0 <pvPortMalloc+0x110>)
 80069be:	680b      	ldr	r3, [r1, #0]
 80069c0:	bb0b      	cbnz	r3, 8006a06 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80069c2:	4a40      	ldr	r2, [pc, #256]	@ (8006ac4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069c4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069c6:	bf1f      	itttt	ne
 80069c8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069ca:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069ce:	f502 42fa 	addne.w	r2, r2, #32000	@ 0x7d00
 80069d2:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069d4:	bf0c      	ite	eq
 80069d6:	f44f 43fa 	moveq.w	r3, #32000	@ 0x7d00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069da:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069dc:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069de:	4e3a      	ldr	r6, [pc, #232]	@ (8006ac8 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 80069e0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069e2:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80069e6:	2000      	movs	r0, #0
 80069e8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069ea:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80069ec:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069f0:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069f2:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80069f6:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069f8:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <pvPortMalloc+0x11c>)
 80069fa:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069fc:	4b34      	ldr	r3, [pc, #208]	@ (8006ad0 <pvPortMalloc+0x120>)
 80069fe:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a04:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a06:	682e      	ldr	r6, [r5, #0]
 8006a08:	4226      	tst	r6, r4
 8006a0a:	d152      	bne.n	8006ab2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	d043      	beq.n	8006a98 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 8006a10:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a14:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a16:	bf1c      	itt	ne
 8006a18:	f023 0307 	bicne.w	r3, r3, #7
 8006a1c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d047      	beq.n	8006ab2 <pvPortMalloc+0x102>
 8006a22:	4f2b      	ldr	r7, [pc, #172]	@ (8006ad0 <pvPortMalloc+0x120>)
 8006a24:	683c      	ldr	r4, [r7, #0]
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d343      	bcc.n	8006ab2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 8006a2a:	4a27      	ldr	r2, [pc, #156]	@ (8006ac8 <pvPortMalloc+0x118>)
 8006a2c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a2e:	6868      	ldr	r0, [r5, #4]
 8006a30:	4298      	cmp	r0, r3
 8006a32:	d204      	bcs.n	8006a3e <pvPortMalloc+0x8e>
 8006a34:	f8d5 c000 	ldr.w	ip, [r5]
 8006a38:	f1bc 0f00 	cmp.w	ip, #0
 8006a3c:	d115      	bne.n	8006a6a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006a3e:	6809      	ldr	r1, [r1, #0]
 8006a40:	42a9      	cmp	r1, r5
 8006a42:	d036      	beq.n	8006ab2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a44:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a46:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a4a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4c:	1ac2      	subs	r2, r0, r3
 8006a4e:	2a10      	cmp	r2, #16
 8006a50:	d912      	bls.n	8006a78 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a52:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a54:	0741      	lsls	r1, r0, #29
 8006a56:	d00b      	beq.n	8006a70 <pvPortMalloc+0xc0>
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	e7fe      	b.n	8006a68 <pvPortMalloc+0xb8>
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	4665      	mov	r5, ip
 8006a6e:	e7de      	b.n	8006a2e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a70:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a72:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a74:	f7ff ff76 	bl	8006964 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a78:	4914      	ldr	r1, [pc, #80]	@ (8006acc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a7a:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a7e:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a80:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a82:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8006a86:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a8a:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a8c:	bf38      	it	cc
 8006a8e:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a90:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a92:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8006a96:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006a98:	f7ff fbde 	bl	8006258 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9c:	0763      	lsls	r3, r4, #29
 8006a9e:	d00a      	beq.n	8006ab6 <pvPortMalloc+0x106>
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	e7fe      	b.n	8006ab0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 8006ab2:	2400      	movs	r4, #0
 8006ab4:	e7f0      	b.n	8006a98 <pvPortMalloc+0xe8>
}
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006abc:	200015cc 	.word	0x200015cc
 8006ac0:	200015c0 	.word	0x200015c0
 8006ac4:	200015d8 	.word	0x200015d8
 8006ac8:	200015d0 	.word	0x200015d0
 8006acc:	200015c4 	.word	0x200015c4
 8006ad0:	200015c8 	.word	0x200015c8

08006ad4 <vPortFree>:
{
 8006ad4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	b370      	cbz	r0, 8006b38 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ada:	4a18      	ldr	r2, [pc, #96]	@ (8006b3c <vPortFree+0x68>)
 8006adc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	4213      	tst	r3, r2
 8006ae4:	d108      	bne.n	8006af8 <vPortFree+0x24>
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	e7fe      	b.n	8006af6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006af8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006afc:	b141      	cbz	r1, 8006b10 <vPortFree+0x3c>
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	e7fe      	b.n	8006b0e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b10:	ea23 0302 	bic.w	r3, r3, r2
 8006b14:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006b18:	f7ff fafe 	bl	8006118 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b1c:	4a08      	ldr	r2, [pc, #32]	@ (8006b40 <vPortFree+0x6c>)
 8006b1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006b22:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b24:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b28:	440b      	add	r3, r1
 8006b2a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b2c:	f7ff ff1a 	bl	8006964 <prvInsertBlockIntoFreeList>
}
 8006b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006b34:	f7ff bb90 	b.w	8006258 <xTaskResumeAll>
}
 8006b38:	bd10      	pop	{r4, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200015c0 	.word	0x200015c0
 8006b40:	200015c8 	.word	0x200015c8

08006b44 <malloc>:
 8006b44:	4b02      	ldr	r3, [pc, #8]	@ (8006b50 <malloc+0xc>)
 8006b46:	4601      	mov	r1, r0
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	f000 b82d 	b.w	8006ba8 <_malloc_r>
 8006b4e:	bf00      	nop
 8006b50:	20000198 	.word	0x20000198

08006b54 <free>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	@ (8006b60 <free+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f003 bc75 	b.w	800a448 <_free_r>
 8006b5e:	bf00      	nop
 8006b60:	20000198 	.word	0x20000198

08006b64 <sbrk_aligned>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba4 <sbrk_aligned+0x40>)
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6831      	ldr	r1, [r6, #0]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b911      	cbnz	r1, 8006b76 <sbrk_aligned+0x12>
 8006b70:	f002 fd9e 	bl	80096b0 <_sbrk_r>
 8006b74:	6030      	str	r0, [r6, #0]
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f002 fd99 	bl	80096b0 <_sbrk_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d103      	bne.n	8006b8a <sbrk_aligned+0x26>
 8006b82:	f04f 34ff 	mov.w	r4, #4294967295
 8006b86:	4620      	mov	r0, r4
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	1cc4      	adds	r4, r0, #3
 8006b8c:	f024 0403 	bic.w	r4, r4, #3
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d0f8      	beq.n	8006b86 <sbrk_aligned+0x22>
 8006b94:	1a21      	subs	r1, r4, r0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f002 fd8a 	bl	80096b0 <_sbrk_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d1f2      	bne.n	8006b86 <sbrk_aligned+0x22>
 8006ba0:	e7ef      	b.n	8006b82 <sbrk_aligned+0x1e>
 8006ba2:	bf00      	nop
 8006ba4:	200092d8 	.word	0x200092d8

08006ba8 <_malloc_r>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d904      	bls.n	8006bce <_malloc_r+0x26>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca4 <_malloc_r+0xfc>
 8006bd2:	f000 f869 	bl	8006ca8 <__malloc_lock>
 8006bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bda:	461c      	mov	r4, r3
 8006bdc:	bb44      	cbnz	r4, 8006c30 <_malloc_r+0x88>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff ffbf 	bl	8006b64 <sbrk_aligned>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	4604      	mov	r4, r0
 8006bea:	d158      	bne.n	8006c9e <_malloc_r+0xf6>
 8006bec:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf0:	4627      	mov	r7, r4
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d143      	bne.n	8006c7e <_malloc_r+0xd6>
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d04b      	beq.n	8006c92 <_malloc_r+0xea>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4630      	mov	r0, r6
 8006c00:	eb04 0903 	add.w	r9, r4, r3
 8006c04:	f002 fd54 	bl	80096b0 <_sbrk_r>
 8006c08:	4581      	cmp	r9, r0
 8006c0a:	d142      	bne.n	8006c92 <_malloc_r+0xea>
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	1a6d      	subs	r5, r5, r1
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffa6 	bl	8006b64 <sbrk_aligned>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d03a      	beq.n	8006c92 <_malloc_r+0xea>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	442b      	add	r3, r5
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	f8d8 3000 	ldr.w	r3, [r8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	bb62      	cbnz	r2, 8006c84 <_malloc_r+0xdc>
 8006c2a:	f8c8 7000 	str.w	r7, [r8]
 8006c2e:	e00f      	b.n	8006c50 <_malloc_r+0xa8>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	d420      	bmi.n	8006c78 <_malloc_r+0xd0>
 8006c36:	2a0b      	cmp	r2, #11
 8006c38:	d917      	bls.n	8006c6a <_malloc_r+0xc2>
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	6059      	strne	r1, [r3, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	bf08      	it	eq
 8006c48:	f8c8 1000 	streq.w	r1, [r8]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f82f 	bl	8006cb4 <__malloc_unlock>
 8006c56:	f104 000b 	add.w	r0, r4, #11
 8006c5a:	1d23      	adds	r3, r4, #4
 8006c5c:	f020 0007 	bic.w	r0, r0, #7
 8006c60:	1ac2      	subs	r2, r0, r3
 8006c62:	bf1c      	itt	ne
 8006c64:	1a1b      	subne	r3, r3, r0
 8006c66:	50a3      	strne	r3, [r4, r2]
 8006c68:	e7af      	b.n	8006bca <_malloc_r+0x22>
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	f8c8 2000 	streq.w	r2, [r8]
 8006c74:	605a      	strne	r2, [r3, #4]
 8006c76:	e7eb      	b.n	8006c50 <_malloc_r+0xa8>
 8006c78:	4623      	mov	r3, r4
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7ae      	b.n	8006bdc <_malloc_r+0x34>
 8006c7e:	463c      	mov	r4, r7
 8006c80:	687f      	ldr	r7, [r7, #4]
 8006c82:	e7b6      	b.n	8006bf2 <_malloc_r+0x4a>
 8006c84:	461a      	mov	r2, r3
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d1fb      	bne.n	8006c84 <_malloc_r+0xdc>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6053      	str	r3, [r2, #4]
 8006c90:	e7de      	b.n	8006c50 <_malloc_r+0xa8>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f80c 	bl	8006cb4 <__malloc_unlock>
 8006c9c:	e794      	b.n	8006bc8 <_malloc_r+0x20>
 8006c9e:	6005      	str	r5, [r0, #0]
 8006ca0:	e7d6      	b.n	8006c50 <_malloc_r+0xa8>
 8006ca2:	bf00      	nop
 8006ca4:	200092dc 	.word	0x200092dc

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f002 bd4f 	b.w	800974c <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	20009446 	.word	0x20009446

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f002 bd4b 	b.w	8009750 <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20009446 	.word	0x20009446

08006cc0 <sulp>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	ec45 4b10 	vmov	d0, r4, r5
 8006cca:	4616      	mov	r6, r2
 8006ccc:	f004 fb0a 	bl	800b2e4 <__ulp>
 8006cd0:	ec51 0b10 	vmov	r0, r1, d0
 8006cd4:	b17e      	cbz	r6, 8006cf6 <sulp+0x36>
 8006cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd09      	ble.n	8006cf6 <sulp+0x36>
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ce8:	2400      	movs	r4, #0
 8006cea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fc91 	bl	8000618 <__aeabi_dmul>
 8006cf6:	ec41 0b10 	vmov	d0, r0, r1
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	b09f      	sub	sp, #124	@ 0x7c
 8006d06:	460c      	mov	r4, r1
 8006d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d0e:	9005      	str	r0, [sp, #20]
 8006d10:	f04f 0a00 	mov.w	sl, #0
 8006d14:	f04f 0b00 	mov.w	fp, #0
 8006d18:	460a      	mov	r2, r1
 8006d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d1c:	7811      	ldrb	r1, [r2, #0]
 8006d1e:	292b      	cmp	r1, #43	@ 0x2b
 8006d20:	d04a      	beq.n	8006db8 <_strtod_l+0xb8>
 8006d22:	d838      	bhi.n	8006d96 <_strtod_l+0x96>
 8006d24:	290d      	cmp	r1, #13
 8006d26:	d832      	bhi.n	8006d8e <_strtod_l+0x8e>
 8006d28:	2908      	cmp	r1, #8
 8006d2a:	d832      	bhi.n	8006d92 <_strtod_l+0x92>
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d03b      	beq.n	8006da8 <_strtod_l+0xa8>
 8006d30:	2200      	movs	r2, #0
 8006d32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d36:	782a      	ldrb	r2, [r5, #0]
 8006d38:	2a30      	cmp	r2, #48	@ 0x30
 8006d3a:	f040 80b3 	bne.w	8006ea4 <_strtod_l+0x1a4>
 8006d3e:	786a      	ldrb	r2, [r5, #1]
 8006d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d44:	2a58      	cmp	r2, #88	@ 0x58
 8006d46:	d16e      	bne.n	8006e26 <_strtod_l+0x126>
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4a8e      	ldr	r2, [pc, #568]	@ (8006f8c <_strtod_l+0x28c>)
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d58:	a919      	add	r1, sp, #100	@ 0x64
 8006d5a:	f003 fc27 	bl	800a5ac <__gethex>
 8006d5e:	f010 060f 	ands.w	r6, r0, #15
 8006d62:	4604      	mov	r4, r0
 8006d64:	d005      	beq.n	8006d72 <_strtod_l+0x72>
 8006d66:	2e06      	cmp	r6, #6
 8006d68:	d128      	bne.n	8006dbc <_strtod_l+0xbc>
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 858e 	bne.w	8007896 <_strtod_l+0xb96>
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d7c:	b1cb      	cbz	r3, 8006db2 <_strtod_l+0xb2>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d84:	ec43 2b10 	vmov	d0, r2, r3
 8006d88:	b01f      	add	sp, #124	@ 0x7c
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	2920      	cmp	r1, #32
 8006d90:	d1ce      	bne.n	8006d30 <_strtod_l+0x30>
 8006d92:	3201      	adds	r2, #1
 8006d94:	e7c1      	b.n	8006d1a <_strtod_l+0x1a>
 8006d96:	292d      	cmp	r1, #45	@ 0x2d
 8006d98:	d1ca      	bne.n	8006d30 <_strtod_l+0x30>
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d9e:	1c51      	adds	r1, r2, #1
 8006da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006da2:	7852      	ldrb	r2, [r2, #1]
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d1c5      	bne.n	8006d34 <_strtod_l+0x34>
 8006da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8570 	bne.w	8007892 <_strtod_l+0xb92>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	e7e5      	b.n	8006d84 <_strtod_l+0x84>
 8006db8:	2100      	movs	r1, #0
 8006dba:	e7ef      	b.n	8006d9c <_strtod_l+0x9c>
 8006dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dbe:	b13a      	cbz	r2, 8006dd0 <_strtod_l+0xd0>
 8006dc0:	2135      	movs	r1, #53	@ 0x35
 8006dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8006dc4:	f004 fb88 	bl	800b4d8 <__copybits>
 8006dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dca:	9805      	ldr	r0, [sp, #20]
 8006dcc:	f003 ff56 	bl	800ac7c <_Bfree>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dd4:	2e04      	cmp	r6, #4
 8006dd6:	d806      	bhi.n	8006de6 <_strtod_l+0xe6>
 8006dd8:	e8df f006 	tbb	[pc, r6]
 8006ddc:	201d0314 	.word	0x201d0314
 8006de0:	14          	.byte	0x14
 8006de1:	00          	.byte	0x00
 8006de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006de6:	05e1      	lsls	r1, r4, #23
 8006de8:	bf48      	it	mi
 8006dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1bb      	bne.n	8006d72 <_strtod_l+0x72>
 8006dfa:	f002 fc7b 	bl	80096f4 <__errno>
 8006dfe:	2322      	movs	r3, #34	@ 0x22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7b6      	b.n	8006d72 <_strtod_l+0x72>
 8006e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e14:	e7e7      	b.n	8006de6 <_strtod_l+0xe6>
 8006e16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f94 <_strtod_l+0x294>
 8006e1a:	e7e4      	b.n	8006de6 <_strtod_l+0xe6>
 8006e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e20:	f04f 3aff 	mov.w	sl, #4294967295
 8006e24:	e7df      	b.n	8006de6 <_strtod_l+0xe6>
 8006e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b30      	cmp	r3, #48	@ 0x30
 8006e30:	d0f9      	beq.n	8006e26 <_strtod_l+0x126>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d09d      	beq.n	8006d72 <_strtod_l+0x72>
 8006e36:	2301      	movs	r3, #1
 8006e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9308      	str	r3, [sp, #32]
 8006e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e44:	461f      	mov	r7, r3
 8006e46:	220a      	movs	r2, #10
 8006e48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e4a:	7805      	ldrb	r5, [r0, #0]
 8006e4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e50:	b2d9      	uxtb	r1, r3
 8006e52:	2909      	cmp	r1, #9
 8006e54:	d928      	bls.n	8006ea8 <_strtod_l+0x1a8>
 8006e56:	494e      	ldr	r1, [pc, #312]	@ (8006f90 <_strtod_l+0x290>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f001 fe7d 	bl	8008b58 <strncmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d032      	beq.n	8006ec8 <_strtod_l+0x1c8>
 8006e62:	2000      	movs	r0, #0
 8006e64:	462a      	mov	r2, r5
 8006e66:	4681      	mov	r9, r0
 8006e68:	463d      	mov	r5, r7
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2a65      	cmp	r2, #101	@ 0x65
 8006e6e:	d001      	beq.n	8006e74 <_strtod_l+0x174>
 8006e70:	2a45      	cmp	r2, #69	@ 0x45
 8006e72:	d114      	bne.n	8006e9e <_strtod_l+0x19e>
 8006e74:	b91d      	cbnz	r5, 8006e7e <_strtod_l+0x17e>
 8006e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e78:	4302      	orrs	r2, r0
 8006e7a:	d095      	beq.n	8006da8 <_strtod_l+0xa8>
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e80:	1c62      	adds	r2, r4, #1
 8006e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e84:	7862      	ldrb	r2, [r4, #1]
 8006e86:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e88:	d077      	beq.n	8006f7a <_strtod_l+0x27a>
 8006e8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e8c:	d07b      	beq.n	8006f86 <_strtod_l+0x286>
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e96:	2909      	cmp	r1, #9
 8006e98:	f240 8082 	bls.w	8006fa0 <_strtod_l+0x2a0>
 8006e9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	e0a2      	b.n	8006fea <_strtod_l+0x2ea>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e7c7      	b.n	8006e38 <_strtod_l+0x138>
 8006ea8:	2f08      	cmp	r7, #8
 8006eaa:	bfd5      	itete	le
 8006eac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006eae:	9908      	ldrgt	r1, [sp, #32]
 8006eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006eb8:	f100 0001 	add.w	r0, r0, #1
 8006ebc:	bfd4      	ite	le
 8006ebe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ec0:	9308      	strgt	r3, [sp, #32]
 8006ec2:	3701      	adds	r7, #1
 8006ec4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ec6:	e7bf      	b.n	8006e48 <_strtod_l+0x148>
 8006ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	b37f      	cbz	r7, 8006f32 <_strtod_l+0x232>
 8006ed2:	4681      	mov	r9, r0
 8006ed4:	463d      	mov	r5, r7
 8006ed6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d912      	bls.n	8006f04 <_strtod_l+0x204>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e7c4      	b.n	8006e6c <_strtod_l+0x16c>
 8006ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ee8:	785a      	ldrb	r2, [r3, #1]
 8006eea:	3001      	adds	r0, #1
 8006eec:	2a30      	cmp	r2, #48	@ 0x30
 8006eee:	d0f8      	beq.n	8006ee2 <_strtod_l+0x1e2>
 8006ef0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	f200 84d3 	bhi.w	80078a0 <_strtod_l+0xba0>
 8006efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006efe:	4681      	mov	r9, r0
 8006f00:	2000      	movs	r0, #0
 8006f02:	4605      	mov	r5, r0
 8006f04:	3a30      	subs	r2, #48	@ 0x30
 8006f06:	f100 0301 	add.w	r3, r0, #1
 8006f0a:	d02a      	beq.n	8006f62 <_strtod_l+0x262>
 8006f0c:	4499      	add	r9, r3
 8006f0e:	eb00 0c05 	add.w	ip, r0, r5
 8006f12:	462b      	mov	r3, r5
 8006f14:	210a      	movs	r1, #10
 8006f16:	4563      	cmp	r3, ip
 8006f18:	d10d      	bne.n	8006f36 <_strtod_l+0x236>
 8006f1a:	1c69      	adds	r1, r5, #1
 8006f1c:	4401      	add	r1, r0
 8006f1e:	4428      	add	r0, r5
 8006f20:	2808      	cmp	r0, #8
 8006f22:	dc16      	bgt.n	8006f52 <_strtod_l+0x252>
 8006f24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f26:	230a      	movs	r3, #10
 8006f28:	fb03 2300 	mla	r3, r3, r0, r2
 8006f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e018      	b.n	8006f64 <_strtod_l+0x264>
 8006f32:	4638      	mov	r0, r7
 8006f34:	e7da      	b.n	8006eec <_strtod_l+0x1ec>
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	f103 0301 	add.w	r3, r3, #1
 8006f3c:	dc03      	bgt.n	8006f46 <_strtod_l+0x246>
 8006f3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f40:	434e      	muls	r6, r1
 8006f42:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f44:	e7e7      	b.n	8006f16 <_strtod_l+0x216>
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	bfde      	ittt	le
 8006f4a:	9e08      	ldrle	r6, [sp, #32]
 8006f4c:	434e      	mulle	r6, r1
 8006f4e:	9608      	strle	r6, [sp, #32]
 8006f50:	e7e1      	b.n	8006f16 <_strtod_l+0x216>
 8006f52:	280f      	cmp	r0, #15
 8006f54:	dceb      	bgt.n	8006f2e <_strtod_l+0x22e>
 8006f56:	9808      	ldr	r0, [sp, #32]
 8006f58:	230a      	movs	r3, #10
 8006f5a:	fb03 2300 	mla	r3, r3, r0, r2
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	e7e5      	b.n	8006f2e <_strtod_l+0x22e>
 8006f62:	4629      	mov	r1, r5
 8006f64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f66:	1c50      	adds	r0, r2, #1
 8006f68:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f6a:	7852      	ldrb	r2, [r2, #1]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	460d      	mov	r5, r1
 8006f70:	e7b1      	b.n	8006ed6 <_strtod_l+0x1d6>
 8006f72:	f04f 0900 	mov.w	r9, #0
 8006f76:	2301      	movs	r3, #1
 8006f78:	e77d      	b.n	8006e76 <_strtod_l+0x176>
 8006f7a:	f04f 0c00 	mov.w	ip, #0
 8006f7e:	1ca2      	adds	r2, r4, #2
 8006f80:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f82:	78a2      	ldrb	r2, [r4, #2]
 8006f84:	e785      	b.n	8006e92 <_strtod_l+0x192>
 8006f86:	f04f 0c01 	mov.w	ip, #1
 8006f8a:	e7f8      	b.n	8006f7e <_strtod_l+0x27e>
 8006f8c:	0800cbc0 	.word	0x0800cbc0
 8006f90:	0800cba7 	.word	0x0800cba7
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f9a:	1c51      	adds	r1, r2, #1
 8006f9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f9e:	7852      	ldrb	r2, [r2, #1]
 8006fa0:	2a30      	cmp	r2, #48	@ 0x30
 8006fa2:	d0f9      	beq.n	8006f98 <_strtod_l+0x298>
 8006fa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	f63f af78 	bhi.w	8006e9e <_strtod_l+0x19e>
 8006fae:	3a30      	subs	r2, #48	@ 0x30
 8006fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fb6:	f04f 080a 	mov.w	r8, #10
 8006fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fbc:	1c56      	adds	r6, r2, #1
 8006fbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fc0:	7852      	ldrb	r2, [r2, #1]
 8006fc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fc6:	f1be 0f09 	cmp.w	lr, #9
 8006fca:	d939      	bls.n	8007040 <_strtod_l+0x340>
 8006fcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fce:	1a76      	subs	r6, r6, r1
 8006fd0:	2e08      	cmp	r6, #8
 8006fd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fd6:	dc03      	bgt.n	8006fe0 <_strtod_l+0x2e0>
 8006fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fda:	4588      	cmp	r8, r1
 8006fdc:	bfa8      	it	ge
 8006fde:	4688      	movge	r8, r1
 8006fe0:	f1bc 0f00 	cmp.w	ip, #0
 8006fe4:	d001      	beq.n	8006fea <_strtod_l+0x2ea>
 8006fe6:	f1c8 0800 	rsb	r8, r8, #0
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	d14e      	bne.n	800708c <_strtod_l+0x38c>
 8006fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ff0:	4308      	orrs	r0, r1
 8006ff2:	f47f aebe 	bne.w	8006d72 <_strtod_l+0x72>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f47f aed6 	bne.w	8006da8 <_strtod_l+0xa8>
 8006ffc:	2a69      	cmp	r2, #105	@ 0x69
 8006ffe:	d028      	beq.n	8007052 <_strtod_l+0x352>
 8007000:	dc25      	bgt.n	800704e <_strtod_l+0x34e>
 8007002:	2a49      	cmp	r2, #73	@ 0x49
 8007004:	d025      	beq.n	8007052 <_strtod_l+0x352>
 8007006:	2a4e      	cmp	r2, #78	@ 0x4e
 8007008:	f47f aece 	bne.w	8006da8 <_strtod_l+0xa8>
 800700c:	499b      	ldr	r1, [pc, #620]	@ (800727c <_strtod_l+0x57c>)
 800700e:	a819      	add	r0, sp, #100	@ 0x64
 8007010:	f003 fcee 	bl	800a9f0 <__match>
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f aec7 	beq.w	8006da8 <_strtod_l+0xa8>
 800701a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b28      	cmp	r3, #40	@ 0x28
 8007020:	d12e      	bne.n	8007080 <_strtod_l+0x380>
 8007022:	4997      	ldr	r1, [pc, #604]	@ (8007280 <_strtod_l+0x580>)
 8007024:	aa1c      	add	r2, sp, #112	@ 0x70
 8007026:	a819      	add	r0, sp, #100	@ 0x64
 8007028:	f003 fcf6 	bl	800aa18 <__hexnan>
 800702c:	2805      	cmp	r0, #5
 800702e:	d127      	bne.n	8007080 <_strtod_l+0x380>
 8007030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007032:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007036:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800703a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800703e:	e698      	b.n	8006d72 <_strtod_l+0x72>
 8007040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007042:	fb08 2101 	mla	r1, r8, r1, r2
 8007046:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800704a:	920e      	str	r2, [sp, #56]	@ 0x38
 800704c:	e7b5      	b.n	8006fba <_strtod_l+0x2ba>
 800704e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007050:	e7da      	b.n	8007008 <_strtod_l+0x308>
 8007052:	498c      	ldr	r1, [pc, #560]	@ (8007284 <_strtod_l+0x584>)
 8007054:	a819      	add	r0, sp, #100	@ 0x64
 8007056:	f003 fccb 	bl	800a9f0 <__match>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aea4 	beq.w	8006da8 <_strtod_l+0xa8>
 8007060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007062:	4989      	ldr	r1, [pc, #548]	@ (8007288 <_strtod_l+0x588>)
 8007064:	3b01      	subs	r3, #1
 8007066:	a819      	add	r0, sp, #100	@ 0x64
 8007068:	9319      	str	r3, [sp, #100]	@ 0x64
 800706a:	f003 fcc1 	bl	800a9f0 <__match>
 800706e:	b910      	cbnz	r0, 8007076 <_strtod_l+0x376>
 8007070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007072:	3301      	adds	r3, #1
 8007074:	9319      	str	r3, [sp, #100]	@ 0x64
 8007076:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007298 <_strtod_l+0x598>
 800707a:	f04f 0a00 	mov.w	sl, #0
 800707e:	e678      	b.n	8006d72 <_strtod_l+0x72>
 8007080:	4882      	ldr	r0, [pc, #520]	@ (800728c <_strtod_l+0x58c>)
 8007082:	f002 fb7d 	bl	8009780 <nan>
 8007086:	ec5b ab10 	vmov	sl, fp, d0
 800708a:	e672      	b.n	8006d72 <_strtod_l+0x72>
 800708c:	eba8 0309 	sub.w	r3, r8, r9
 8007090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007092:	9309      	str	r3, [sp, #36]	@ 0x24
 8007094:	2f00      	cmp	r7, #0
 8007096:	bf08      	it	eq
 8007098:	462f      	moveq	r7, r5
 800709a:	2d10      	cmp	r5, #16
 800709c:	462c      	mov	r4, r5
 800709e:	bfa8      	it	ge
 80070a0:	2410      	movge	r4, #16
 80070a2:	f7f9 fa3f 	bl	8000524 <__aeabi_ui2d>
 80070a6:	2d09      	cmp	r5, #9
 80070a8:	4682      	mov	sl, r0
 80070aa:	468b      	mov	fp, r1
 80070ac:	dc13      	bgt.n	80070d6 <_strtod_l+0x3d6>
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f43f ae5e 	beq.w	8006d72 <_strtod_l+0x72>
 80070b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b8:	dd78      	ble.n	80071ac <_strtod_l+0x4ac>
 80070ba:	2b16      	cmp	r3, #22
 80070bc:	dc5f      	bgt.n	800717e <_strtod_l+0x47e>
 80070be:	4974      	ldr	r1, [pc, #464]	@ (8007290 <_strtod_l+0x590>)
 80070c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c8:	4652      	mov	r2, sl
 80070ca:	465b      	mov	r3, fp
 80070cc:	f7f9 faa4 	bl	8000618 <__aeabi_dmul>
 80070d0:	4682      	mov	sl, r0
 80070d2:	468b      	mov	fp, r1
 80070d4:	e64d      	b.n	8006d72 <_strtod_l+0x72>
 80070d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007290 <_strtod_l+0x590>)
 80070d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070e0:	f7f9 fa9a 	bl	8000618 <__aeabi_dmul>
 80070e4:	4682      	mov	sl, r0
 80070e6:	9808      	ldr	r0, [sp, #32]
 80070e8:	468b      	mov	fp, r1
 80070ea:	f7f9 fa1b 	bl	8000524 <__aeabi_ui2d>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4650      	mov	r0, sl
 80070f4:	4659      	mov	r1, fp
 80070f6:	f7f9 f8d9 	bl	80002ac <__adddf3>
 80070fa:	2d0f      	cmp	r5, #15
 80070fc:	4682      	mov	sl, r0
 80070fe:	468b      	mov	fp, r1
 8007100:	ddd5      	ble.n	80070ae <_strtod_l+0x3ae>
 8007102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007104:	1b2c      	subs	r4, r5, r4
 8007106:	441c      	add	r4, r3
 8007108:	2c00      	cmp	r4, #0
 800710a:	f340 8096 	ble.w	800723a <_strtod_l+0x53a>
 800710e:	f014 030f 	ands.w	r3, r4, #15
 8007112:	d00a      	beq.n	800712a <_strtod_l+0x42a>
 8007114:	495e      	ldr	r1, [pc, #376]	@ (8007290 <_strtod_l+0x590>)
 8007116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800711a:	4652      	mov	r2, sl
 800711c:	465b      	mov	r3, fp
 800711e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007122:	f7f9 fa79 	bl	8000618 <__aeabi_dmul>
 8007126:	4682      	mov	sl, r0
 8007128:	468b      	mov	fp, r1
 800712a:	f034 040f 	bics.w	r4, r4, #15
 800712e:	d073      	beq.n	8007218 <_strtod_l+0x518>
 8007130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007134:	dd48      	ble.n	80071c8 <_strtod_l+0x4c8>
 8007136:	2400      	movs	r4, #0
 8007138:	46a0      	mov	r8, r4
 800713a:	940a      	str	r4, [sp, #40]	@ 0x28
 800713c:	46a1      	mov	r9, r4
 800713e:	9a05      	ldr	r2, [sp, #20]
 8007140:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007298 <_strtod_l+0x598>
 8007144:	2322      	movs	r3, #34	@ 0x22
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	f04f 0a00 	mov.w	sl, #0
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	f43f ae0f 	beq.w	8006d72 <_strtod_l+0x72>
 8007154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007156:	9805      	ldr	r0, [sp, #20]
 8007158:	f003 fd90 	bl	800ac7c <_Bfree>
 800715c:	9805      	ldr	r0, [sp, #20]
 800715e:	4649      	mov	r1, r9
 8007160:	f003 fd8c 	bl	800ac7c <_Bfree>
 8007164:	9805      	ldr	r0, [sp, #20]
 8007166:	4641      	mov	r1, r8
 8007168:	f003 fd88 	bl	800ac7c <_Bfree>
 800716c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	f003 fd84 	bl	800ac7c <_Bfree>
 8007174:	9805      	ldr	r0, [sp, #20]
 8007176:	4621      	mov	r1, r4
 8007178:	f003 fd80 	bl	800ac7c <_Bfree>
 800717c:	e5f9      	b.n	8006d72 <_strtod_l+0x72>
 800717e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007184:	4293      	cmp	r3, r2
 8007186:	dbbc      	blt.n	8007102 <_strtod_l+0x402>
 8007188:	4c41      	ldr	r4, [pc, #260]	@ (8007290 <_strtod_l+0x590>)
 800718a:	f1c5 050f 	rsb	r5, r5, #15
 800718e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007192:	4652      	mov	r2, sl
 8007194:	465b      	mov	r3, fp
 8007196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719a:	f7f9 fa3d 	bl	8000618 <__aeabi_dmul>
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	1b5d      	subs	r5, r3, r5
 80071a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071aa:	e78f      	b.n	80070cc <_strtod_l+0x3cc>
 80071ac:	3316      	adds	r3, #22
 80071ae:	dba8      	blt.n	8007102 <_strtod_l+0x402>
 80071b0:	4b37      	ldr	r3, [pc, #220]	@ (8007290 <_strtod_l+0x590>)
 80071b2:	eba9 0808 	sub.w	r8, r9, r8
 80071b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 fb53 	bl	800086c <__aeabi_ddiv>
 80071c6:	e783      	b.n	80070d0 <_strtod_l+0x3d0>
 80071c8:	4b32      	ldr	r3, [pc, #200]	@ (8007294 <_strtod_l+0x594>)
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	2300      	movs	r3, #0
 80071ce:	1124      	asrs	r4, r4, #4
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	461e      	mov	r6, r3
 80071d6:	2c01      	cmp	r4, #1
 80071d8:	dc21      	bgt.n	800721e <_strtod_l+0x51e>
 80071da:	b10b      	cbz	r3, 80071e0 <_strtod_l+0x4e0>
 80071dc:	4682      	mov	sl, r0
 80071de:	468b      	mov	fp, r1
 80071e0:	492c      	ldr	r1, [pc, #176]	@ (8007294 <_strtod_l+0x594>)
 80071e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071ea:	4652      	mov	r2, sl
 80071ec:	465b      	mov	r3, fp
 80071ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f2:	f7f9 fa11 	bl	8000618 <__aeabi_dmul>
 80071f6:	4b28      	ldr	r3, [pc, #160]	@ (8007298 <_strtod_l+0x598>)
 80071f8:	460a      	mov	r2, r1
 80071fa:	400b      	ands	r3, r1
 80071fc:	4927      	ldr	r1, [pc, #156]	@ (800729c <_strtod_l+0x59c>)
 80071fe:	428b      	cmp	r3, r1
 8007200:	4682      	mov	sl, r0
 8007202:	d898      	bhi.n	8007136 <_strtod_l+0x436>
 8007204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007208:	428b      	cmp	r3, r1
 800720a:	bf86      	itte	hi
 800720c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80072a0 <_strtod_l+0x5a0>
 8007210:	f04f 3aff 	movhi.w	sl, #4294967295
 8007214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007218:	2300      	movs	r3, #0
 800721a:	9308      	str	r3, [sp, #32]
 800721c:	e07a      	b.n	8007314 <_strtod_l+0x614>
 800721e:	07e2      	lsls	r2, r4, #31
 8007220:	d505      	bpl.n	800722e <_strtod_l+0x52e>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 f9f6 	bl	8000618 <__aeabi_dmul>
 800722c:	2301      	movs	r3, #1
 800722e:	9a08      	ldr	r2, [sp, #32]
 8007230:	3208      	adds	r2, #8
 8007232:	3601      	adds	r6, #1
 8007234:	1064      	asrs	r4, r4, #1
 8007236:	9208      	str	r2, [sp, #32]
 8007238:	e7cd      	b.n	80071d6 <_strtod_l+0x4d6>
 800723a:	d0ed      	beq.n	8007218 <_strtod_l+0x518>
 800723c:	4264      	negs	r4, r4
 800723e:	f014 020f 	ands.w	r2, r4, #15
 8007242:	d00a      	beq.n	800725a <_strtod_l+0x55a>
 8007244:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <_strtod_l+0x590>)
 8007246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724a:	4650      	mov	r0, sl
 800724c:	4659      	mov	r1, fp
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f7f9 fb0b 	bl	800086c <__aeabi_ddiv>
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	1124      	asrs	r4, r4, #4
 800725c:	d0dc      	beq.n	8007218 <_strtod_l+0x518>
 800725e:	2c1f      	cmp	r4, #31
 8007260:	dd20      	ble.n	80072a4 <_strtod_l+0x5a4>
 8007262:	2400      	movs	r4, #0
 8007264:	46a0      	mov	r8, r4
 8007266:	940a      	str	r4, [sp, #40]	@ 0x28
 8007268:	46a1      	mov	r9, r4
 800726a:	9a05      	ldr	r2, [sp, #20]
 800726c:	2322      	movs	r3, #34	@ 0x22
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	f04f 0b00 	mov.w	fp, #0
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	e768      	b.n	800714c <_strtod_l+0x44c>
 800727a:	bf00      	nop
 800727c:	0800cd0e 	.word	0x0800cd0e
 8007280:	0800cbac 	.word	0x0800cbac
 8007284:	0800cd06 	.word	0x0800cd06
 8007288:	0800cdf1 	.word	0x0800cdf1
 800728c:	0800cb53 	.word	0x0800cb53
 8007290:	0800cf68 	.word	0x0800cf68
 8007294:	0800cf40 	.word	0x0800cf40
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	7ca00000 	.word	0x7ca00000
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	f014 0310 	ands.w	r3, r4, #16
 80072a8:	bf18      	it	ne
 80072aa:	236a      	movne	r3, #106	@ 0x6a
 80072ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007554 <_strtod_l+0x854>)
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	2300      	movs	r3, #0
 80072b6:	07e2      	lsls	r2, r4, #31
 80072b8:	d504      	bpl.n	80072c4 <_strtod_l+0x5c4>
 80072ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072be:	f7f9 f9ab 	bl	8000618 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	1064      	asrs	r4, r4, #1
 80072c6:	f106 0608 	add.w	r6, r6, #8
 80072ca:	d1f4      	bne.n	80072b6 <_strtod_l+0x5b6>
 80072cc:	b10b      	cbz	r3, 80072d2 <_strtod_l+0x5d2>
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	b1b3      	cbz	r3, 8007304 <_strtod_l+0x604>
 80072d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	4659      	mov	r1, fp
 80072e2:	dd0f      	ble.n	8007304 <_strtod_l+0x604>
 80072e4:	2b1f      	cmp	r3, #31
 80072e6:	dd55      	ble.n	8007394 <_strtod_l+0x694>
 80072e8:	2b34      	cmp	r3, #52	@ 0x34
 80072ea:	bfde      	ittt	le
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295
 80072f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072f4:	4093      	lslle	r3, r2
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	bfcc      	ite	gt
 80072fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007300:	ea03 0b01 	andle.w	fp, r3, r1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1a6      	bne.n	8007262 <_strtod_l+0x562>
 8007314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	462b      	mov	r3, r5
 800731e:	463a      	mov	r2, r7
 8007320:	f003 fd14 	bl	800ad4c <__s2b>
 8007324:	900a      	str	r0, [sp, #40]	@ 0x28
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f af05 	beq.w	8007136 <_strtod_l+0x436>
 800732c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732e:	2a00      	cmp	r2, #0
 8007330:	eba9 0308 	sub.w	r3, r9, r8
 8007334:	bfa8      	it	ge
 8007336:	2300      	movge	r3, #0
 8007338:	9312      	str	r3, [sp, #72]	@ 0x48
 800733a:	2400      	movs	r4, #0
 800733c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007340:	9316      	str	r3, [sp, #88]	@ 0x58
 8007342:	46a0      	mov	r8, r4
 8007344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007346:	9805      	ldr	r0, [sp, #20]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	f003 fc57 	bl	800abfc <_Balloc>
 800734e:	4681      	mov	r9, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	f43f aef4 	beq.w	800713e <_strtod_l+0x43e>
 8007356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	3202      	adds	r2, #2
 800735c:	f103 010c 	add.w	r1, r3, #12
 8007360:	0092      	lsls	r2, r2, #2
 8007362:	300c      	adds	r0, #12
 8007364:	f002 f9fd 	bl	8009762 <memcpy>
 8007368:	ec4b ab10 	vmov	d0, sl, fp
 800736c:	9805      	ldr	r0, [sp, #20]
 800736e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007370:	a91b      	add	r1, sp, #108	@ 0x6c
 8007372:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007376:	f004 f825 	bl	800b3c4 <__d2b>
 800737a:	901a      	str	r0, [sp, #104]	@ 0x68
 800737c:	2800      	cmp	r0, #0
 800737e:	f43f aede 	beq.w	800713e <_strtod_l+0x43e>
 8007382:	9805      	ldr	r0, [sp, #20]
 8007384:	2101      	movs	r1, #1
 8007386:	f003 fd77 	bl	800ae78 <__i2b>
 800738a:	4680      	mov	r8, r0
 800738c:	b948      	cbnz	r0, 80073a2 <_strtod_l+0x6a2>
 800738e:	f04f 0800 	mov.w	r8, #0
 8007392:	e6d4      	b.n	800713e <_strtod_l+0x43e>
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	ea03 0a0a 	and.w	sl, r3, sl
 80073a0:	e7b0      	b.n	8007304 <_strtod_l+0x604>
 80073a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	bfab      	itete	ge
 80073aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073b2:	bfac      	ite	ge
 80073b4:	18ef      	addge	r7, r5, r3
 80073b6:	1b5e      	sublt	r6, r3, r5
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	1aed      	subs	r5, r5, r3
 80073bc:	4415      	add	r5, r2
 80073be:	4b66      	ldr	r3, [pc, #408]	@ (8007558 <_strtod_l+0x858>)
 80073c0:	3d01      	subs	r5, #1
 80073c2:	429d      	cmp	r5, r3
 80073c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073c8:	da50      	bge.n	800746c <_strtod_l+0x76c>
 80073ca:	1b5b      	subs	r3, r3, r5
 80073cc:	2b1f      	cmp	r3, #31
 80073ce:	eba2 0203 	sub.w	r2, r2, r3
 80073d2:	f04f 0101 	mov.w	r1, #1
 80073d6:	dc3d      	bgt.n	8007454 <_strtod_l+0x754>
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073de:	2300      	movs	r3, #0
 80073e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80073e2:	18bd      	adds	r5, r7, r2
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	42af      	cmp	r7, r5
 80073e8:	4416      	add	r6, r2
 80073ea:	441e      	add	r6, r3
 80073ec:	463b      	mov	r3, r7
 80073ee:	bfa8      	it	ge
 80073f0:	462b      	movge	r3, r5
 80073f2:	42b3      	cmp	r3, r6
 80073f4:	bfa8      	it	ge
 80073f6:	4633      	movge	r3, r6
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfc2      	ittt	gt
 80073fc:	1aed      	subgt	r5, r5, r3
 80073fe:	1af6      	subgt	r6, r6, r3
 8007400:	1aff      	subgt	r7, r7, r3
 8007402:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd16      	ble.n	8007436 <_strtod_l+0x736>
 8007408:	4641      	mov	r1, r8
 800740a:	9805      	ldr	r0, [sp, #20]
 800740c:	461a      	mov	r2, r3
 800740e:	f003 fdf3 	bl	800aff8 <__pow5mult>
 8007412:	4680      	mov	r8, r0
 8007414:	2800      	cmp	r0, #0
 8007416:	d0ba      	beq.n	800738e <_strtod_l+0x68e>
 8007418:	4601      	mov	r1, r0
 800741a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f003 fd41 	bl	800aea4 <__multiply>
 8007422:	900e      	str	r0, [sp, #56]	@ 0x38
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f ae8a 	beq.w	800713e <_strtod_l+0x43e>
 800742a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742c:	9805      	ldr	r0, [sp, #20]
 800742e:	f003 fc25 	bl	800ac7c <_Bfree>
 8007432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007434:	931a      	str	r3, [sp, #104]	@ 0x68
 8007436:	2d00      	cmp	r5, #0
 8007438:	dc1d      	bgt.n	8007476 <_strtod_l+0x776>
 800743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd23      	ble.n	8007488 <_strtod_l+0x788>
 8007440:	4649      	mov	r1, r9
 8007442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007444:	9805      	ldr	r0, [sp, #20]
 8007446:	f003 fdd7 	bl	800aff8 <__pow5mult>
 800744a:	4681      	mov	r9, r0
 800744c:	b9e0      	cbnz	r0, 8007488 <_strtod_l+0x788>
 800744e:	f04f 0900 	mov.w	r9, #0
 8007452:	e674      	b.n	800713e <_strtod_l+0x43e>
 8007454:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007458:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800745c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007460:	35e2      	adds	r5, #226	@ 0xe2
 8007462:	fa01 f305 	lsl.w	r3, r1, r5
 8007466:	9310      	str	r3, [sp, #64]	@ 0x40
 8007468:	9113      	str	r1, [sp, #76]	@ 0x4c
 800746a:	e7ba      	b.n	80073e2 <_strtod_l+0x6e2>
 800746c:	2300      	movs	r3, #0
 800746e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007470:	2301      	movs	r3, #1
 8007472:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007474:	e7b5      	b.n	80073e2 <_strtod_l+0x6e2>
 8007476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007478:	9805      	ldr	r0, [sp, #20]
 800747a:	462a      	mov	r2, r5
 800747c:	f003 fe16 	bl	800b0ac <__lshift>
 8007480:	901a      	str	r0, [sp, #104]	@ 0x68
 8007482:	2800      	cmp	r0, #0
 8007484:	d1d9      	bne.n	800743a <_strtod_l+0x73a>
 8007486:	e65a      	b.n	800713e <_strtod_l+0x43e>
 8007488:	2e00      	cmp	r6, #0
 800748a:	dd07      	ble.n	800749c <_strtod_l+0x79c>
 800748c:	4649      	mov	r1, r9
 800748e:	9805      	ldr	r0, [sp, #20]
 8007490:	4632      	mov	r2, r6
 8007492:	f003 fe0b 	bl	800b0ac <__lshift>
 8007496:	4681      	mov	r9, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d0d8      	beq.n	800744e <_strtod_l+0x74e>
 800749c:	2f00      	cmp	r7, #0
 800749e:	dd08      	ble.n	80074b2 <_strtod_l+0x7b2>
 80074a0:	4641      	mov	r1, r8
 80074a2:	9805      	ldr	r0, [sp, #20]
 80074a4:	463a      	mov	r2, r7
 80074a6:	f003 fe01 	bl	800b0ac <__lshift>
 80074aa:	4680      	mov	r8, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f ae46 	beq.w	800713e <_strtod_l+0x43e>
 80074b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b4:	9805      	ldr	r0, [sp, #20]
 80074b6:	464a      	mov	r2, r9
 80074b8:	f003 fe80 	bl	800b1bc <__mdiff>
 80074bc:	4604      	mov	r4, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f ae3d 	beq.w	800713e <_strtod_l+0x43e>
 80074c4:	68c3      	ldr	r3, [r0, #12]
 80074c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074c8:	2300      	movs	r3, #0
 80074ca:	60c3      	str	r3, [r0, #12]
 80074cc:	4641      	mov	r1, r8
 80074ce:	f003 fe59 	bl	800b184 <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	da46      	bge.n	8007564 <_strtod_l+0x864>
 80074d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d8:	ea53 030a 	orrs.w	r3, r3, sl
 80074dc:	d16c      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d168      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074ea:	0d1b      	lsrs	r3, r3, #20
 80074ec:	051b      	lsls	r3, r3, #20
 80074ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074f2:	d961      	bls.n	80075b8 <_strtod_l+0x8b8>
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	b913      	cbnz	r3, 80074fe <_strtod_l+0x7fe>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	dd5c      	ble.n	80075b8 <_strtod_l+0x8b8>
 80074fe:	4621      	mov	r1, r4
 8007500:	2201      	movs	r2, #1
 8007502:	9805      	ldr	r0, [sp, #20]
 8007504:	f003 fdd2 	bl	800b0ac <__lshift>
 8007508:	4641      	mov	r1, r8
 800750a:	4604      	mov	r4, r0
 800750c:	f003 fe3a 	bl	800b184 <__mcmp>
 8007510:	2800      	cmp	r0, #0
 8007512:	dd51      	ble.n	80075b8 <_strtod_l+0x8b8>
 8007514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007518:	9a08      	ldr	r2, [sp, #32]
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	051b      	lsls	r3, r3, #20
 800751e:	2a00      	cmp	r2, #0
 8007520:	d06b      	beq.n	80075fa <_strtod_l+0x8fa>
 8007522:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007526:	d868      	bhi.n	80075fa <_strtod_l+0x8fa>
 8007528:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800752c:	f67f ae9d 	bls.w	800726a <_strtod_l+0x56a>
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <_strtod_l+0x85c>)
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	2200      	movs	r2, #0
 8007538:	f7f9 f86e 	bl	8000618 <__aeabi_dmul>
 800753c:	4b08      	ldr	r3, [pc, #32]	@ (8007560 <_strtod_l+0x860>)
 800753e:	400b      	ands	r3, r1
 8007540:	4682      	mov	sl, r0
 8007542:	468b      	mov	fp, r1
 8007544:	2b00      	cmp	r3, #0
 8007546:	f47f ae05 	bne.w	8007154 <_strtod_l+0x454>
 800754a:	9a05      	ldr	r2, [sp, #20]
 800754c:	2322      	movs	r3, #34	@ 0x22
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e600      	b.n	8007154 <_strtod_l+0x454>
 8007552:	bf00      	nop
 8007554:	0800cbd8 	.word	0x0800cbd8
 8007558:	fffffc02 	.word	0xfffffc02
 800755c:	39500000 	.word	0x39500000
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007568:	d165      	bne.n	8007636 <_strtod_l+0x936>
 800756a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800756c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007570:	b35a      	cbz	r2, 80075ca <_strtod_l+0x8ca>
 8007572:	4a9f      	ldr	r2, [pc, #636]	@ (80077f0 <_strtod_l+0xaf0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d12b      	bne.n	80075d0 <_strtod_l+0x8d0>
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	4651      	mov	r1, sl
 800757c:	b303      	cbz	r3, 80075c0 <_strtod_l+0x8c0>
 800757e:	4b9d      	ldr	r3, [pc, #628]	@ (80077f4 <_strtod_l+0xaf4>)
 8007580:	465a      	mov	r2, fp
 8007582:	4013      	ands	r3, r2
 8007584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	d81b      	bhi.n	80075c6 <_strtod_l+0x8c6>
 800758e:	0d1b      	lsrs	r3, r3, #20
 8007590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	4299      	cmp	r1, r3
 800759a:	d119      	bne.n	80075d0 <_strtod_l+0x8d0>
 800759c:	4b96      	ldr	r3, [pc, #600]	@ (80077f8 <_strtod_l+0xaf8>)
 800759e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <_strtod_l+0x8aa>
 80075a4:	3101      	adds	r1, #1
 80075a6:	f43f adca 	beq.w	800713e <_strtod_l+0x43e>
 80075aa:	4b92      	ldr	r3, [pc, #584]	@ (80077f4 <_strtod_l+0xaf4>)
 80075ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ae:	401a      	ands	r2, r3
 80075b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075b4:	f04f 0a00 	mov.w	sl, #0
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1b8      	bne.n	8007530 <_strtod_l+0x830>
 80075be:	e5c9      	b.n	8007154 <_strtod_l+0x454>
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	e7e8      	b.n	8007598 <_strtod_l+0x898>
 80075c6:	4613      	mov	r3, r2
 80075c8:	e7e6      	b.n	8007598 <_strtod_l+0x898>
 80075ca:	ea53 030a 	orrs.w	r3, r3, sl
 80075ce:	d0a1      	beq.n	8007514 <_strtod_l+0x814>
 80075d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075d2:	b1db      	cbz	r3, 800760c <_strtod_l+0x90c>
 80075d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075d6:	4213      	tst	r3, r2
 80075d8:	d0ee      	beq.n	80075b8 <_strtod_l+0x8b8>
 80075da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075dc:	9a08      	ldr	r2, [sp, #32]
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	b1bb      	cbz	r3, 8007614 <_strtod_l+0x914>
 80075e4:	f7ff fb6c 	bl	8006cc0 <sulp>
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	ec53 2b10 	vmov	r2, r3, d0
 80075f0:	f7f8 fe5c 	bl	80002ac <__adddf3>
 80075f4:	4682      	mov	sl, r0
 80075f6:	468b      	mov	fp, r1
 80075f8:	e7de      	b.n	80075b8 <_strtod_l+0x8b8>
 80075fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007606:	f04f 3aff 	mov.w	sl, #4294967295
 800760a:	e7d5      	b.n	80075b8 <_strtod_l+0x8b8>
 800760c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800760e:	ea13 0f0a 	tst.w	r3, sl
 8007612:	e7e1      	b.n	80075d8 <_strtod_l+0x8d8>
 8007614:	f7ff fb54 	bl	8006cc0 <sulp>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800761c:	ec53 2b10 	vmov	r2, r3, d0
 8007620:	f7f8 fe42 	bl	80002a8 <__aeabi_dsub>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	f7f9 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007630:	2800      	cmp	r0, #0
 8007632:	d0c1      	beq.n	80075b8 <_strtod_l+0x8b8>
 8007634:	e619      	b.n	800726a <_strtod_l+0x56a>
 8007636:	4641      	mov	r1, r8
 8007638:	4620      	mov	r0, r4
 800763a:	f003 ff1b 	bl	800b474 <__ratio>
 800763e:	ec57 6b10 	vmov	r6, r7, d0
 8007642:	2200      	movs	r2, #0
 8007644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa60 	bl	8000b10 <__aeabi_dcmple>
 8007650:	2800      	cmp	r0, #0
 8007652:	d06f      	beq.n	8007734 <_strtod_l+0xa34>
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17a      	bne.n	8007750 <_strtod_l+0xa50>
 800765a:	f1ba 0f00 	cmp.w	sl, #0
 800765e:	d158      	bne.n	8007712 <_strtod_l+0xa12>
 8007660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15a      	bne.n	8007720 <_strtod_l+0xa20>
 800766a:	4b64      	ldr	r3, [pc, #400]	@ (80077fc <_strtod_l+0xafc>)
 800766c:	2200      	movs	r2, #0
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 fa43 	bl	8000afc <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d159      	bne.n	800772e <_strtod_l+0xa2e>
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	4b60      	ldr	r3, [pc, #384]	@ (8007800 <_strtod_l+0xb00>)
 8007680:	2200      	movs	r2, #0
 8007682:	f7f8 ffc9 	bl	8000618 <__aeabi_dmul>
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800768e:	9606      	str	r6, [sp, #24]
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007696:	4d57      	ldr	r5, [pc, #348]	@ (80077f4 <_strtod_l+0xaf4>)
 8007698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800769c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769e:	401d      	ands	r5, r3
 80076a0:	4b58      	ldr	r3, [pc, #352]	@ (8007804 <_strtod_l+0xb04>)
 80076a2:	429d      	cmp	r5, r3
 80076a4:	f040 80b2 	bne.w	800780c <_strtod_l+0xb0c>
 80076a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076ae:	ec4b ab10 	vmov	d0, sl, fp
 80076b2:	f003 fe17 	bl	800b2e4 <__ulp>
 80076b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ba:	ec51 0b10 	vmov	r0, r1, d0
 80076be:	f7f8 ffab 	bl	8000618 <__aeabi_dmul>
 80076c2:	4652      	mov	r2, sl
 80076c4:	465b      	mov	r3, fp
 80076c6:	f7f8 fdf1 	bl	80002ac <__adddf3>
 80076ca:	460b      	mov	r3, r1
 80076cc:	4949      	ldr	r1, [pc, #292]	@ (80077f4 <_strtod_l+0xaf4>)
 80076ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007808 <_strtod_l+0xb08>)
 80076d0:	4019      	ands	r1, r3
 80076d2:	4291      	cmp	r1, r2
 80076d4:	4682      	mov	sl, r0
 80076d6:	d942      	bls.n	800775e <_strtod_l+0xa5e>
 80076d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076da:	4b47      	ldr	r3, [pc, #284]	@ (80077f8 <_strtod_l+0xaf8>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d103      	bne.n	80076e8 <_strtod_l+0x9e8>
 80076e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e2:	3301      	adds	r3, #1
 80076e4:	f43f ad2b 	beq.w	800713e <_strtod_l+0x43e>
 80076e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077f8 <_strtod_l+0xaf8>
 80076ec:	f04f 3aff 	mov.w	sl, #4294967295
 80076f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f003 fac2 	bl	800ac7c <_Bfree>
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	4649      	mov	r1, r9
 80076fc:	f003 fabe 	bl	800ac7c <_Bfree>
 8007700:	9805      	ldr	r0, [sp, #20]
 8007702:	4641      	mov	r1, r8
 8007704:	f003 faba 	bl	800ac7c <_Bfree>
 8007708:	9805      	ldr	r0, [sp, #20]
 800770a:	4621      	mov	r1, r4
 800770c:	f003 fab6 	bl	800ac7c <_Bfree>
 8007710:	e618      	b.n	8007344 <_strtod_l+0x644>
 8007712:	f1ba 0f01 	cmp.w	sl, #1
 8007716:	d103      	bne.n	8007720 <_strtod_l+0xa20>
 8007718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f ada5 	beq.w	800726a <_strtod_l+0x56a>
 8007720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077d0 <_strtod_l+0xad0>
 8007724:	4f35      	ldr	r7, [pc, #212]	@ (80077fc <_strtod_l+0xafc>)
 8007726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800772a:	2600      	movs	r6, #0
 800772c:	e7b1      	b.n	8007692 <_strtod_l+0x992>
 800772e:	4f34      	ldr	r7, [pc, #208]	@ (8007800 <_strtod_l+0xb00>)
 8007730:	2600      	movs	r6, #0
 8007732:	e7aa      	b.n	800768a <_strtod_l+0x98a>
 8007734:	4b32      	ldr	r3, [pc, #200]	@ (8007800 <_strtod_l+0xb00>)
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	2200      	movs	r2, #0
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d09f      	beq.n	800768a <_strtod_l+0x98a>
 800774a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800774e:	e7a0      	b.n	8007692 <_strtod_l+0x992>
 8007750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077d8 <_strtod_l+0xad8>
 8007754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007758:	ec57 6b17 	vmov	r6, r7, d7
 800775c:	e799      	b.n	8007692 <_strtod_l+0x992>
 800775e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1c1      	bne.n	80076f0 <_strtod_l+0x9f0>
 800776c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	429d      	cmp	r5, r3
 8007776:	d1bb      	bne.n	80076f0 <_strtod_l+0x9f0>
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 fa94 	bl	8000ca8 <__aeabi_d2lz>
 8007780:	f7f8 ff1c 	bl	80005bc <__aeabi_l2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f8 fd8c 	bl	80002a8 <__aeabi_dsub>
 8007790:	460b      	mov	r3, r1
 8007792:	4602      	mov	r2, r0
 8007794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	ea46 060a 	orr.w	r6, r6, sl
 80077a2:	431e      	orrs	r6, r3
 80077a4:	d06f      	beq.n	8007886 <_strtod_l+0xb86>
 80077a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80077e0 <_strtod_l+0xae0>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f9 f9a6 	bl	8000afc <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f47f accf 	bne.w	8007154 <_strtod_l+0x454>
 80077b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80077e8 <_strtod_l+0xae8>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077c0:	f7f9 f9ba 	bl	8000b38 <__aeabi_dcmpgt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d093      	beq.n	80076f0 <_strtod_l+0x9f0>
 80077c8:	e4c4      	b.n	8007154 <_strtod_l+0x454>
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	00000000 	.word	0x00000000
 80077d4:	bff00000 	.word	0xbff00000
 80077d8:	00000000 	.word	0x00000000
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	94a03595 	.word	0x94a03595
 80077e4:	3fdfffff 	.word	0x3fdfffff
 80077e8:	35afe535 	.word	0x35afe535
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	000fffff 	.word	0x000fffff
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	7fefffff 	.word	0x7fefffff
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	7fe00000 	.word	0x7fe00000
 8007808:	7c9fffff 	.word	0x7c9fffff
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	b323      	cbz	r3, 800785a <_strtod_l+0xb5a>
 8007810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007814:	d821      	bhi.n	800785a <_strtod_l+0xb5a>
 8007816:	a328      	add	r3, pc, #160	@ (adr r3, 80078b8 <_strtod_l+0xbb8>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f976 	bl	8000b10 <__aeabi_dcmple>
 8007824:	b1a0      	cbz	r0, 8007850 <_strtod_l+0xb50>
 8007826:	4639      	mov	r1, r7
 8007828:	4630      	mov	r0, r6
 800782a:	f7f9 f9cd 	bl	8000bc8 <__aeabi_d2uiz>
 800782e:	2801      	cmp	r0, #1
 8007830:	bf38      	it	cc
 8007832:	2001      	movcc	r0, #1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_ui2d>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	b9fb      	cbnz	r3, 8007880 <_strtod_l+0xb80>
 8007840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007844:	9014      	str	r0, [sp, #80]	@ 0x50
 8007846:	9315      	str	r3, [sp, #84]	@ 0x54
 8007848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800784c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007856:	1b5b      	subs	r3, r3, r5
 8007858:	9311      	str	r3, [sp, #68]	@ 0x44
 800785a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800785e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007862:	f003 fd3f 	bl	800b2e4 <__ulp>
 8007866:	4650      	mov	r0, sl
 8007868:	ec53 2b10 	vmov	r2, r3, d0
 800786c:	4659      	mov	r1, fp
 800786e:	f7f8 fed3 	bl	8000618 <__aeabi_dmul>
 8007872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007876:	f7f8 fd19 	bl	80002ac <__adddf3>
 800787a:	4682      	mov	sl, r0
 800787c:	468b      	mov	fp, r1
 800787e:	e770      	b.n	8007762 <_strtod_l+0xa62>
 8007880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007884:	e7e0      	b.n	8007848 <_strtod_l+0xb48>
 8007886:	a30e      	add	r3, pc, #56	@ (adr r3, 80078c0 <_strtod_l+0xbc0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f9 f936 	bl	8000afc <__aeabi_dcmplt>
 8007890:	e798      	b.n	80077c4 <_strtod_l+0xac4>
 8007892:	2300      	movs	r3, #0
 8007894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f7ff ba6d 	b.w	8006d7a <_strtod_l+0x7a>
 80078a0:	2a65      	cmp	r2, #101	@ 0x65
 80078a2:	f43f ab66 	beq.w	8006f72 <_strtod_l+0x272>
 80078a6:	2a45      	cmp	r2, #69	@ 0x45
 80078a8:	f43f ab63 	beq.w	8006f72 <_strtod_l+0x272>
 80078ac:	2301      	movs	r3, #1
 80078ae:	f7ff bb9e 	b.w	8006fee <_strtod_l+0x2ee>
 80078b2:	bf00      	nop
 80078b4:	f3af 8000 	nop.w
 80078b8:	ffc00000 	.word	0xffc00000
 80078bc:	41dfffff 	.word	0x41dfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fcfffff 	.word	0x3fcfffff

080078c8 <_strtod_r>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	@ (80078d0 <_strtod_r+0x8>)
 80078ca:	f7ff ba19 	b.w	8006d00 <_strtod_l>
 80078ce:	bf00      	nop
 80078d0:	2000002c 	.word	0x2000002c

080078d4 <_strtol_l.constprop.0>:
 80078d4:	2b24      	cmp	r3, #36	@ 0x24
 80078d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078da:	4686      	mov	lr, r0
 80078dc:	4690      	mov	r8, r2
 80078de:	d801      	bhi.n	80078e4 <_strtol_l.constprop.0+0x10>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <_strtol_l.constprop.0+0x1e>
 80078e4:	f001 ff06 	bl	80096f4 <__errno>
 80078e8:	2316      	movs	r3, #22
 80078ea:	6003      	str	r3, [r0, #0]
 80078ec:	2000      	movs	r0, #0
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	4834      	ldr	r0, [pc, #208]	@ (80079c4 <_strtol_l.constprop.0+0xf0>)
 80078f4:	460d      	mov	r5, r1
 80078f6:	462a      	mov	r2, r5
 80078f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078fc:	5d06      	ldrb	r6, [r0, r4]
 80078fe:	f016 0608 	ands.w	r6, r6, #8
 8007902:	d1f8      	bne.n	80078f6 <_strtol_l.constprop.0+0x22>
 8007904:	2c2d      	cmp	r4, #45	@ 0x2d
 8007906:	d12d      	bne.n	8007964 <_strtol_l.constprop.0+0x90>
 8007908:	782c      	ldrb	r4, [r5, #0]
 800790a:	2601      	movs	r6, #1
 800790c:	1c95      	adds	r5, r2, #2
 800790e:	f033 0210 	bics.w	r2, r3, #16
 8007912:	d109      	bne.n	8007928 <_strtol_l.constprop.0+0x54>
 8007914:	2c30      	cmp	r4, #48	@ 0x30
 8007916:	d12a      	bne.n	800796e <_strtol_l.constprop.0+0x9a>
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791e:	2a58      	cmp	r2, #88	@ 0x58
 8007920:	d125      	bne.n	800796e <_strtol_l.constprop.0+0x9a>
 8007922:	786c      	ldrb	r4, [r5, #1]
 8007924:	2310      	movs	r3, #16
 8007926:	3502      	adds	r5, #2
 8007928:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800792c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007930:	2200      	movs	r2, #0
 8007932:	fbbc f9f3 	udiv	r9, ip, r3
 8007936:	4610      	mov	r0, r2
 8007938:	fb03 ca19 	mls	sl, r3, r9, ip
 800793c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007940:	2f09      	cmp	r7, #9
 8007942:	d81b      	bhi.n	800797c <_strtol_l.constprop.0+0xa8>
 8007944:	463c      	mov	r4, r7
 8007946:	42a3      	cmp	r3, r4
 8007948:	dd27      	ble.n	800799a <_strtol_l.constprop.0+0xc6>
 800794a:	1c57      	adds	r7, r2, #1
 800794c:	d007      	beq.n	800795e <_strtol_l.constprop.0+0x8a>
 800794e:	4581      	cmp	r9, r0
 8007950:	d320      	bcc.n	8007994 <_strtol_l.constprop.0+0xc0>
 8007952:	d101      	bne.n	8007958 <_strtol_l.constprop.0+0x84>
 8007954:	45a2      	cmp	sl, r4
 8007956:	db1d      	blt.n	8007994 <_strtol_l.constprop.0+0xc0>
 8007958:	fb00 4003 	mla	r0, r0, r3, r4
 800795c:	2201      	movs	r2, #1
 800795e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007962:	e7eb      	b.n	800793c <_strtol_l.constprop.0+0x68>
 8007964:	2c2b      	cmp	r4, #43	@ 0x2b
 8007966:	bf04      	itt	eq
 8007968:	782c      	ldrbeq	r4, [r5, #0]
 800796a:	1c95      	addeq	r5, r2, #2
 800796c:	e7cf      	b.n	800790e <_strtol_l.constprop.0+0x3a>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1da      	bne.n	8007928 <_strtol_l.constprop.0+0x54>
 8007972:	2c30      	cmp	r4, #48	@ 0x30
 8007974:	bf0c      	ite	eq
 8007976:	2308      	moveq	r3, #8
 8007978:	230a      	movne	r3, #10
 800797a:	e7d5      	b.n	8007928 <_strtol_l.constprop.0+0x54>
 800797c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007980:	2f19      	cmp	r7, #25
 8007982:	d801      	bhi.n	8007988 <_strtol_l.constprop.0+0xb4>
 8007984:	3c37      	subs	r4, #55	@ 0x37
 8007986:	e7de      	b.n	8007946 <_strtol_l.constprop.0+0x72>
 8007988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800798c:	2f19      	cmp	r7, #25
 800798e:	d804      	bhi.n	800799a <_strtol_l.constprop.0+0xc6>
 8007990:	3c57      	subs	r4, #87	@ 0x57
 8007992:	e7d8      	b.n	8007946 <_strtol_l.constprop.0+0x72>
 8007994:	f04f 32ff 	mov.w	r2, #4294967295
 8007998:	e7e1      	b.n	800795e <_strtol_l.constprop.0+0x8a>
 800799a:	1c53      	adds	r3, r2, #1
 800799c:	d108      	bne.n	80079b0 <_strtol_l.constprop.0+0xdc>
 800799e:	2322      	movs	r3, #34	@ 0x22
 80079a0:	f8ce 3000 	str.w	r3, [lr]
 80079a4:	4660      	mov	r0, ip
 80079a6:	f1b8 0f00 	cmp.w	r8, #0
 80079aa:	d0a0      	beq.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079ac:	1e69      	subs	r1, r5, #1
 80079ae:	e006      	b.n	80079be <_strtol_l.constprop.0+0xea>
 80079b0:	b106      	cbz	r6, 80079b4 <_strtol_l.constprop.0+0xe0>
 80079b2:	4240      	negs	r0, r0
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	d099      	beq.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d1f6      	bne.n	80079ac <_strtol_l.constprop.0+0xd8>
 80079be:	f8c8 1000 	str.w	r1, [r8]
 80079c2:	e794      	b.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079c4:	0800cc01 	.word	0x0800cc01

080079c8 <_strtol_r>:
 80079c8:	f7ff bf84 	b.w	80078d4 <_strtol_l.constprop.0>

080079cc <__cvt>:
 80079cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	ec57 6b10 	vmov	r6, r7, d0
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4619      	mov	r1, r3
 80079da:	463b      	mov	r3, r7
 80079dc:	bfbb      	ittet	lt
 80079de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80079e2:	461f      	movlt	r7, r3
 80079e4:	2300      	movge	r3, #0
 80079e6:	232d      	movlt	r3, #45	@ 0x2d
 80079e8:	700b      	strb	r3, [r1, #0]
 80079ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80079f0:	4691      	mov	r9, r2
 80079f2:	f023 0820 	bic.w	r8, r3, #32
 80079f6:	bfbc      	itt	lt
 80079f8:	4632      	movlt	r2, r6
 80079fa:	4616      	movlt	r6, r2
 80079fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a00:	d005      	beq.n	8007a0e <__cvt+0x42>
 8007a02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a06:	d100      	bne.n	8007a0a <__cvt+0x3e>
 8007a08:	3401      	adds	r4, #1
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	e000      	b.n	8007a10 <__cvt+0x44>
 8007a0e:	2103      	movs	r1, #3
 8007a10:	ab03      	add	r3, sp, #12
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	ab02      	add	r3, sp, #8
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	ec47 6b10 	vmov	d0, r6, r7
 8007a1c:	4653      	mov	r3, sl
 8007a1e:	4622      	mov	r2, r4
 8007a20:	f001 ff4e 	bl	80098c0 <_dtoa_r>
 8007a24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a28:	4605      	mov	r5, r0
 8007a2a:	d119      	bne.n	8007a60 <__cvt+0x94>
 8007a2c:	f019 0f01 	tst.w	r9, #1
 8007a30:	d00e      	beq.n	8007a50 <__cvt+0x84>
 8007a32:	eb00 0904 	add.w	r9, r0, r4
 8007a36:	2200      	movs	r2, #0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	f7f9 f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a42:	b108      	cbz	r0, 8007a48 <__cvt+0x7c>
 8007a44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a48:	2230      	movs	r2, #48	@ 0x30
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	454b      	cmp	r3, r9
 8007a4e:	d31e      	bcc.n	8007a8e <__cvt+0xc2>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a54:	1b5b      	subs	r3, r3, r5
 8007a56:	4628      	mov	r0, r5
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	b004      	add	sp, #16
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a64:	eb00 0904 	add.w	r9, r0, r4
 8007a68:	d1e5      	bne.n	8007a36 <__cvt+0x6a>
 8007a6a:	7803      	ldrb	r3, [r0, #0]
 8007a6c:	2b30      	cmp	r3, #48	@ 0x30
 8007a6e:	d10a      	bne.n	8007a86 <__cvt+0xba>
 8007a70:	2200      	movs	r2, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f9 f836 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a7c:	b918      	cbnz	r0, 8007a86 <__cvt+0xba>
 8007a7e:	f1c4 0401 	rsb	r4, r4, #1
 8007a82:	f8ca 4000 	str.w	r4, [sl]
 8007a86:	f8da 3000 	ldr.w	r3, [sl]
 8007a8a:	4499      	add	r9, r3
 8007a8c:	e7d3      	b.n	8007a36 <__cvt+0x6a>
 8007a8e:	1c59      	adds	r1, r3, #1
 8007a90:	9103      	str	r1, [sp, #12]
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e7d9      	b.n	8007a4a <__cvt+0x7e>

08007a96 <__exponent>:
 8007a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	bfba      	itte	lt
 8007a9c:	4249      	neglt	r1, r1
 8007a9e:	232d      	movlt	r3, #45	@ 0x2d
 8007aa0:	232b      	movge	r3, #43	@ 0x2b
 8007aa2:	2909      	cmp	r1, #9
 8007aa4:	7002      	strb	r2, [r0, #0]
 8007aa6:	7043      	strb	r3, [r0, #1]
 8007aa8:	dd29      	ble.n	8007afe <__exponent+0x68>
 8007aaa:	f10d 0307 	add.w	r3, sp, #7
 8007aae:	461d      	mov	r5, r3
 8007ab0:	270a      	movs	r7, #10
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ab8:	fb07 1416 	mls	r4, r7, r6, r1
 8007abc:	3430      	adds	r4, #48	@ 0x30
 8007abe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	2c63      	cmp	r4, #99	@ 0x63
 8007ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007aca:	4631      	mov	r1, r6
 8007acc:	dcf1      	bgt.n	8007ab2 <__exponent+0x1c>
 8007ace:	3130      	adds	r1, #48	@ 0x30
 8007ad0:	1e94      	subs	r4, r2, #2
 8007ad2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ad6:	1c41      	adds	r1, r0, #1
 8007ad8:	4623      	mov	r3, r4
 8007ada:	42ab      	cmp	r3, r5
 8007adc:	d30a      	bcc.n	8007af4 <__exponent+0x5e>
 8007ade:	f10d 0309 	add.w	r3, sp, #9
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	42ac      	cmp	r4, r5
 8007ae6:	bf88      	it	hi
 8007ae8:	2300      	movhi	r3, #0
 8007aea:	3302      	adds	r3, #2
 8007aec:	4403      	add	r3, r0
 8007aee:	1a18      	subs	r0, r3, r0
 8007af0:	b003      	add	sp, #12
 8007af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007af8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007afc:	e7ed      	b.n	8007ada <__exponent+0x44>
 8007afe:	2330      	movs	r3, #48	@ 0x30
 8007b00:	3130      	adds	r1, #48	@ 0x30
 8007b02:	7083      	strb	r3, [r0, #2]
 8007b04:	70c1      	strb	r1, [r0, #3]
 8007b06:	1d03      	adds	r3, r0, #4
 8007b08:	e7f1      	b.n	8007aee <__exponent+0x58>
	...

08007b0c <_printf_float>:
 8007b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	b08d      	sub	sp, #52	@ 0x34
 8007b12:	460c      	mov	r4, r1
 8007b14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b18:	4616      	mov	r6, r2
 8007b1a:	461f      	mov	r7, r3
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	f001 fd8f 	bl	8009640 <_localeconv_r>
 8007b22:	6803      	ldr	r3, [r0, #0]
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f8 fbb2 	bl	8000290 <strlen>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b30:	f8d8 3000 	ldr.w	r3, [r8]
 8007b34:	9005      	str	r0, [sp, #20]
 8007b36:	3307      	adds	r3, #7
 8007b38:	f023 0307 	bic.w	r3, r3, #7
 8007b3c:	f103 0208 	add.w	r2, r3, #8
 8007b40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b44:	f8d4 b000 	ldr.w	fp, [r4]
 8007b48:	f8c8 2000 	str.w	r2, [r8]
 8007b4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b54:	9307      	str	r3, [sp, #28]
 8007b56:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b62:	4b9c      	ldr	r3, [pc, #624]	@ (8007dd4 <_printf_float+0x2c8>)
 8007b64:	f04f 32ff 	mov.w	r2, #4294967295
 8007b68:	f7f8 fff0 	bl	8000b4c <__aeabi_dcmpun>
 8007b6c:	bb70      	cbnz	r0, 8007bcc <_printf_float+0xc0>
 8007b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b72:	4b98      	ldr	r3, [pc, #608]	@ (8007dd4 <_printf_float+0x2c8>)
 8007b74:	f04f 32ff 	mov.w	r2, #4294967295
 8007b78:	f7f8 ffca 	bl	8000b10 <__aeabi_dcmple>
 8007b7c:	bb30      	cbnz	r0, 8007bcc <_printf_float+0xc0>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2300      	movs	r3, #0
 8007b82:	4640      	mov	r0, r8
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7f8 ffb9 	bl	8000afc <__aeabi_dcmplt>
 8007b8a:	b110      	cbz	r0, 8007b92 <_printf_float+0x86>
 8007b8c:	232d      	movs	r3, #45	@ 0x2d
 8007b8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b92:	4a91      	ldr	r2, [pc, #580]	@ (8007dd8 <_printf_float+0x2cc>)
 8007b94:	4b91      	ldr	r3, [pc, #580]	@ (8007ddc <_printf_float+0x2d0>)
 8007b96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b9a:	bf94      	ite	ls
 8007b9c:	4690      	movls	r8, r2
 8007b9e:	4698      	movhi	r8, r3
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	f02b 0304 	bic.w	r3, fp, #4
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	9700      	str	r7, [sp, #0]
 8007bb0:	4633      	mov	r3, r6
 8007bb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f9d2 	bl	8007f60 <_printf_common>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f040 808d 	bne.w	8007cdc <_printf_float+0x1d0>
 8007bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc6:	b00d      	add	sp, #52	@ 0x34
 8007bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	4642      	mov	r2, r8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 ffba 	bl	8000b4c <__aeabi_dcmpun>
 8007bd8:	b140      	cbz	r0, 8007bec <_printf_float+0xe0>
 8007bda:	464b      	mov	r3, r9
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bfbc      	itt	lt
 8007be0:	232d      	movlt	r3, #45	@ 0x2d
 8007be2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007be6:	4a7e      	ldr	r2, [pc, #504]	@ (8007de0 <_printf_float+0x2d4>)
 8007be8:	4b7e      	ldr	r3, [pc, #504]	@ (8007de4 <_printf_float+0x2d8>)
 8007bea:	e7d4      	b.n	8007b96 <_printf_float+0x8a>
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007bf2:	9206      	str	r2, [sp, #24]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	d13b      	bne.n	8007c70 <_printf_float+0x164>
 8007bf8:	2306      	movs	r3, #6
 8007bfa:	6063      	str	r3, [r4, #4]
 8007bfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c00:	2300      	movs	r3, #0
 8007c02:	6022      	str	r2, [r4, #0]
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c0c:	ab09      	add	r3, sp, #36	@ 0x24
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	ec49 8b10 	vmov	d0, r8, r9
 8007c16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7ff fed6 	bl	80079cc <__cvt>
 8007c20:	9b06      	ldr	r3, [sp, #24]
 8007c22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c24:	2b47      	cmp	r3, #71	@ 0x47
 8007c26:	4680      	mov	r8, r0
 8007c28:	d129      	bne.n	8007c7e <_printf_float+0x172>
 8007c2a:	1cc8      	adds	r0, r1, #3
 8007c2c:	db02      	blt.n	8007c34 <_printf_float+0x128>
 8007c2e:	6863      	ldr	r3, [r4, #4]
 8007c30:	4299      	cmp	r1, r3
 8007c32:	dd41      	ble.n	8007cb8 <_printf_float+0x1ac>
 8007c34:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c38:	fa5f fa8a 	uxtb.w	sl, sl
 8007c3c:	3901      	subs	r1, #1
 8007c3e:	4652      	mov	r2, sl
 8007c40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c44:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c46:	f7ff ff26 	bl	8007a96 <__exponent>
 8007c4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c4c:	1813      	adds	r3, r2, r0
 8007c4e:	2a01      	cmp	r2, #1
 8007c50:	4681      	mov	r9, r0
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	dc02      	bgt.n	8007c5c <_printf_float+0x150>
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	07d2      	lsls	r2, r2, #31
 8007c5a:	d501      	bpl.n	8007c60 <_printf_float+0x154>
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0a2      	beq.n	8007bae <_printf_float+0xa2>
 8007c68:	232d      	movs	r3, #45	@ 0x2d
 8007c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c6e:	e79e      	b.n	8007bae <_printf_float+0xa2>
 8007c70:	9a06      	ldr	r2, [sp, #24]
 8007c72:	2a47      	cmp	r2, #71	@ 0x47
 8007c74:	d1c2      	bne.n	8007bfc <_printf_float+0xf0>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1c0      	bne.n	8007bfc <_printf_float+0xf0>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7bd      	b.n	8007bfa <_printf_float+0xee>
 8007c7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c82:	d9db      	bls.n	8007c3c <_printf_float+0x130>
 8007c84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c88:	d118      	bne.n	8007cbc <_printf_float+0x1b0>
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	6863      	ldr	r3, [r4, #4]
 8007c8e:	dd0b      	ble.n	8007ca8 <_printf_float+0x19c>
 8007c90:	6121      	str	r1, [r4, #16]
 8007c92:	b913      	cbnz	r3, 8007c9a <_printf_float+0x18e>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	07d0      	lsls	r0, r2, #31
 8007c98:	d502      	bpl.n	8007ca0 <_printf_float+0x194>
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	440b      	add	r3, r1
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ca2:	f04f 0900 	mov.w	r9, #0
 8007ca6:	e7db      	b.n	8007c60 <_printf_float+0x154>
 8007ca8:	b913      	cbnz	r3, 8007cb0 <_printf_float+0x1a4>
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	07d2      	lsls	r2, r2, #31
 8007cae:	d501      	bpl.n	8007cb4 <_printf_float+0x1a8>
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	e7f4      	b.n	8007c9e <_printf_float+0x192>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e7f2      	b.n	8007c9e <_printf_float+0x192>
 8007cb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	db05      	blt.n	8007cce <_printf_float+0x1c2>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	6121      	str	r1, [r4, #16]
 8007cc6:	07d8      	lsls	r0, r3, #31
 8007cc8:	d5ea      	bpl.n	8007ca0 <_printf_float+0x194>
 8007cca:	1c4b      	adds	r3, r1, #1
 8007ccc:	e7e7      	b.n	8007c9e <_printf_float+0x192>
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	bfd4      	ite	le
 8007cd2:	f1c1 0202 	rsble	r2, r1, #2
 8007cd6:	2201      	movgt	r2, #1
 8007cd8:	4413      	add	r3, r2
 8007cda:	e7e0      	b.n	8007c9e <_printf_float+0x192>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	055a      	lsls	r2, r3, #21
 8007ce0:	d407      	bmi.n	8007cf2 <_printf_float+0x1e6>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	d12b      	bne.n	8007d48 <_printf_float+0x23c>
 8007cf0:	e767      	b.n	8007bc2 <_printf_float+0xb6>
 8007cf2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cf6:	f240 80dd 	bls.w	8007eb4 <_printf_float+0x3a8>
 8007cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	f7f8 fef1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d033      	beq.n	8007d72 <_printf_float+0x266>
 8007d0a:	4a37      	ldr	r2, [pc, #220]	@ (8007de8 <_printf_float+0x2dc>)
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f af54 	beq.w	8007bc2 <_printf_float+0xb6>
 8007d1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d1e:	4543      	cmp	r3, r8
 8007d20:	db02      	blt.n	8007d28 <_printf_float+0x21c>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	07d8      	lsls	r0, r3, #31
 8007d26:	d50f      	bpl.n	8007d48 <_printf_float+0x23c>
 8007d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f af45 	beq.w	8007bc2 <_printf_float+0xb6>
 8007d38:	f04f 0900 	mov.w	r9, #0
 8007d3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d40:	f104 0a1a 	add.w	sl, r4, #26
 8007d44:	45c8      	cmp	r8, r9
 8007d46:	dc09      	bgt.n	8007d5c <_printf_float+0x250>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	079b      	lsls	r3, r3, #30
 8007d4c:	f100 8103 	bmi.w	8007f56 <_printf_float+0x44a>
 8007d50:	68e0      	ldr	r0, [r4, #12]
 8007d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d54:	4298      	cmp	r0, r3
 8007d56:	bfb8      	it	lt
 8007d58:	4618      	movlt	r0, r3
 8007d5a:	e734      	b.n	8007bc6 <_printf_float+0xba>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4652      	mov	r2, sl
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af2b 	beq.w	8007bc2 <_printf_float+0xb6>
 8007d6c:	f109 0901 	add.w	r9, r9, #1
 8007d70:	e7e8      	b.n	8007d44 <_printf_float+0x238>
 8007d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dc39      	bgt.n	8007dec <_printf_float+0x2e0>
 8007d78:	4a1b      	ldr	r2, [pc, #108]	@ (8007de8 <_printf_float+0x2dc>)
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f af1d 	beq.w	8007bc2 <_printf_float+0xb6>
 8007d88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d8c:	ea59 0303 	orrs.w	r3, r9, r3
 8007d90:	d102      	bne.n	8007d98 <_printf_float+0x28c>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	07d9      	lsls	r1, r3, #31
 8007d96:	d5d7      	bpl.n	8007d48 <_printf_float+0x23c>
 8007d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af0d 	beq.w	8007bc2 <_printf_float+0xb6>
 8007da8:	f04f 0a00 	mov.w	sl, #0
 8007dac:	f104 0b1a 	add.w	fp, r4, #26
 8007db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db2:	425b      	negs	r3, r3
 8007db4:	4553      	cmp	r3, sl
 8007db6:	dc01      	bgt.n	8007dbc <_printf_float+0x2b0>
 8007db8:	464b      	mov	r3, r9
 8007dba:	e793      	b.n	8007ce4 <_printf_float+0x1d8>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	465a      	mov	r2, fp
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f aefb 	beq.w	8007bc2 <_printf_float+0xb6>
 8007dcc:	f10a 0a01 	add.w	sl, sl, #1
 8007dd0:	e7ee      	b.n	8007db0 <_printf_float+0x2a4>
 8007dd2:	bf00      	nop
 8007dd4:	7fefffff 	.word	0x7fefffff
 8007dd8:	0800cd01 	.word	0x0800cd01
 8007ddc:	0800cd05 	.word	0x0800cd05
 8007de0:	0800cd09 	.word	0x0800cd09
 8007de4:	0800cd0d 	.word	0x0800cd0d
 8007de8:	0800d057 	.word	0x0800d057
 8007dec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007dee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007df2:	4553      	cmp	r3, sl
 8007df4:	bfa8      	it	ge
 8007df6:	4653      	movge	r3, sl
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	4699      	mov	r9, r3
 8007dfc:	dc36      	bgt.n	8007e6c <_printf_float+0x360>
 8007dfe:	f04f 0b00 	mov.w	fp, #0
 8007e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e06:	f104 021a 	add.w	r2, r4, #26
 8007e0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e0c:	9306      	str	r3, [sp, #24]
 8007e0e:	eba3 0309 	sub.w	r3, r3, r9
 8007e12:	455b      	cmp	r3, fp
 8007e14:	dc31      	bgt.n	8007e7a <_printf_float+0x36e>
 8007e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e18:	459a      	cmp	sl, r3
 8007e1a:	dc3a      	bgt.n	8007e92 <_printf_float+0x386>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	07da      	lsls	r2, r3, #31
 8007e20:	d437      	bmi.n	8007e92 <_printf_float+0x386>
 8007e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e24:	ebaa 0903 	sub.w	r9, sl, r3
 8007e28:	9b06      	ldr	r3, [sp, #24]
 8007e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8007e2e:	4599      	cmp	r9, r3
 8007e30:	bfa8      	it	ge
 8007e32:	4699      	movge	r9, r3
 8007e34:	f1b9 0f00 	cmp.w	r9, #0
 8007e38:	dc33      	bgt.n	8007ea2 <_printf_float+0x396>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e42:	f104 0b1a 	add.w	fp, r4, #26
 8007e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e48:	ebaa 0303 	sub.w	r3, sl, r3
 8007e4c:	eba3 0309 	sub.w	r3, r3, r9
 8007e50:	4543      	cmp	r3, r8
 8007e52:	f77f af79 	ble.w	8007d48 <_printf_float+0x23c>
 8007e56:	2301      	movs	r3, #1
 8007e58:	465a      	mov	r2, fp
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f aeae 	beq.w	8007bc2 <_printf_float+0xb6>
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	e7ec      	b.n	8007e46 <_printf_float+0x33a>
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b8      	blx	r7
 8007e74:	3001      	adds	r0, #1
 8007e76:	d1c2      	bne.n	8007dfe <_printf_float+0x2f2>
 8007e78:	e6a3      	b.n	8007bc2 <_printf_float+0xb6>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4628      	mov	r0, r5
 8007e80:	9206      	str	r2, [sp, #24]
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae9c 	beq.w	8007bc2 <_printf_float+0xb6>
 8007e8a:	9a06      	ldr	r2, [sp, #24]
 8007e8c:	f10b 0b01 	add.w	fp, fp, #1
 8007e90:	e7bb      	b.n	8007e0a <_printf_float+0x2fe>
 8007e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d1c0      	bne.n	8007e22 <_printf_float+0x316>
 8007ea0:	e68f      	b.n	8007bc2 <_printf_float+0xb6>
 8007ea2:	9a06      	ldr	r2, [sp, #24]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	4442      	add	r2, r8
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d1c3      	bne.n	8007e3a <_printf_float+0x32e>
 8007eb2:	e686      	b.n	8007bc2 <_printf_float+0xb6>
 8007eb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007eb8:	f1ba 0f01 	cmp.w	sl, #1
 8007ebc:	dc01      	bgt.n	8007ec2 <_printf_float+0x3b6>
 8007ebe:	07db      	lsls	r3, r3, #31
 8007ec0:	d536      	bpl.n	8007f30 <_printf_float+0x424>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	f43f ae78 	beq.w	8007bc2 <_printf_float+0xb6>
 8007ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	f43f ae70 	beq.w	8007bc2 <_printf_float+0xb6>
 8007ee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eee:	f7f8 fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ef2:	b9c0      	cbnz	r0, 8007f26 <_printf_float+0x41a>
 8007ef4:	4653      	mov	r3, sl
 8007ef6:	f108 0201 	add.w	r2, r8, #1
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	d10c      	bne.n	8007f1e <_printf_float+0x412>
 8007f04:	e65d      	b.n	8007bc2 <_printf_float+0xb6>
 8007f06:	2301      	movs	r3, #1
 8007f08:	465a      	mov	r2, fp
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f ae56 	beq.w	8007bc2 <_printf_float+0xb6>
 8007f16:	f108 0801 	add.w	r8, r8, #1
 8007f1a:	45d0      	cmp	r8, sl
 8007f1c:	dbf3      	blt.n	8007f06 <_printf_float+0x3fa>
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f24:	e6df      	b.n	8007ce6 <_printf_float+0x1da>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	f104 0b1a 	add.w	fp, r4, #26
 8007f2e:	e7f4      	b.n	8007f1a <_printf_float+0x40e>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4642      	mov	r2, r8
 8007f34:	e7e1      	b.n	8007efa <_printf_float+0x3ee>
 8007f36:	2301      	movs	r3, #1
 8007f38:	464a      	mov	r2, r9
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae3e 	beq.w	8007bc2 <_printf_float+0xb6>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	68e3      	ldr	r3, [r4, #12]
 8007f4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f4e:	1a5b      	subs	r3, r3, r1
 8007f50:	4543      	cmp	r3, r8
 8007f52:	dcf0      	bgt.n	8007f36 <_printf_float+0x42a>
 8007f54:	e6fc      	b.n	8007d50 <_printf_float+0x244>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0919 	add.w	r9, r4, #25
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x43e>

08007f60 <_printf_common>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	4616      	mov	r6, r2
 8007f66:	4698      	mov	r8, r3
 8007f68:	688a      	ldr	r2, [r1, #8]
 8007f6a:	690b      	ldr	r3, [r1, #16]
 8007f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	bfb8      	it	lt
 8007f74:	4613      	movlt	r3, r2
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b10a      	cbz	r2, 8007f86 <_printf_common+0x26>
 8007f82:	3301      	adds	r3, #1
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	0699      	lsls	r1, r3, #26
 8007f8a:	bf42      	ittt	mi
 8007f8c:	6833      	ldrmi	r3, [r6, #0]
 8007f8e:	3302      	addmi	r3, #2
 8007f90:	6033      	strmi	r3, [r6, #0]
 8007f92:	6825      	ldr	r5, [r4, #0]
 8007f94:	f015 0506 	ands.w	r5, r5, #6
 8007f98:	d106      	bne.n	8007fa8 <_printf_common+0x48>
 8007f9a:	f104 0a19 	add.w	sl, r4, #25
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	6832      	ldr	r2, [r6, #0]
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dc26      	bgt.n	8007ff6 <_printf_common+0x96>
 8007fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fac:	6822      	ldr	r2, [r4, #0]
 8007fae:	3b00      	subs	r3, #0
 8007fb0:	bf18      	it	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	0692      	lsls	r2, r2, #26
 8007fb6:	d42b      	bmi.n	8008010 <_printf_common+0xb0>
 8007fb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c8      	blx	r9
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d01e      	beq.n	8008004 <_printf_common+0xa4>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	6922      	ldr	r2, [r4, #16]
 8007fca:	f003 0306 	and.w	r3, r3, #6
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	bf02      	ittt	eq
 8007fd2:	68e5      	ldreq	r5, [r4, #12]
 8007fd4:	6833      	ldreq	r3, [r6, #0]
 8007fd6:	1aed      	subeq	r5, r5, r3
 8007fd8:	68a3      	ldr	r3, [r4, #8]
 8007fda:	bf0c      	ite	eq
 8007fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fe0:	2500      	movne	r5, #0
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	bfc4      	itt	gt
 8007fe6:	1a9b      	subgt	r3, r3, r2
 8007fe8:	18ed      	addgt	r5, r5, r3
 8007fea:	2600      	movs	r6, #0
 8007fec:	341a      	adds	r4, #26
 8007fee:	42b5      	cmp	r5, r6
 8007ff0:	d11a      	bne.n	8008028 <_printf_common+0xc8>
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	e008      	b.n	8008008 <_printf_common+0xa8>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	47c8      	blx	r9
 8008000:	3001      	adds	r0, #1
 8008002:	d103      	bne.n	800800c <_printf_common+0xac>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	3501      	adds	r5, #1
 800800e:	e7c6      	b.n	8007f9e <_printf_common+0x3e>
 8008010:	18e1      	adds	r1, r4, r3
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	2030      	movs	r0, #48	@ 0x30
 8008016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800801a:	4422      	add	r2, r4
 800801c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008024:	3302      	adds	r3, #2
 8008026:	e7c7      	b.n	8007fb8 <_printf_common+0x58>
 8008028:	2301      	movs	r3, #1
 800802a:	4622      	mov	r2, r4
 800802c:	4641      	mov	r1, r8
 800802e:	4638      	mov	r0, r7
 8008030:	47c8      	blx	r9
 8008032:	3001      	adds	r0, #1
 8008034:	d0e6      	beq.n	8008004 <_printf_common+0xa4>
 8008036:	3601      	adds	r6, #1
 8008038:	e7d9      	b.n	8007fee <_printf_common+0x8e>
	...

0800803c <_printf_i>:
 800803c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	7e0f      	ldrb	r7, [r1, #24]
 8008042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008044:	2f78      	cmp	r7, #120	@ 0x78
 8008046:	4691      	mov	r9, r2
 8008048:	4680      	mov	r8, r0
 800804a:	460c      	mov	r4, r1
 800804c:	469a      	mov	sl, r3
 800804e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008052:	d807      	bhi.n	8008064 <_printf_i+0x28>
 8008054:	2f62      	cmp	r7, #98	@ 0x62
 8008056:	d80a      	bhi.n	800806e <_printf_i+0x32>
 8008058:	2f00      	cmp	r7, #0
 800805a:	f000 80d2 	beq.w	8008202 <_printf_i+0x1c6>
 800805e:	2f58      	cmp	r7, #88	@ 0x58
 8008060:	f000 80b9 	beq.w	80081d6 <_printf_i+0x19a>
 8008064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800806c:	e03a      	b.n	80080e4 <_printf_i+0xa8>
 800806e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008072:	2b15      	cmp	r3, #21
 8008074:	d8f6      	bhi.n	8008064 <_printf_i+0x28>
 8008076:	a101      	add	r1, pc, #4	@ (adr r1, 800807c <_printf_i+0x40>)
 8008078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080e9 	.word	0x080080e9
 8008084:	08008065 	.word	0x08008065
 8008088:	08008065 	.word	0x08008065
 800808c:	08008065 	.word	0x08008065
 8008090:	08008065 	.word	0x08008065
 8008094:	080080e9 	.word	0x080080e9
 8008098:	08008065 	.word	0x08008065
 800809c:	08008065 	.word	0x08008065
 80080a0:	08008065 	.word	0x08008065
 80080a4:	08008065 	.word	0x08008065
 80080a8:	080081e9 	.word	0x080081e9
 80080ac:	08008113 	.word	0x08008113
 80080b0:	080081a3 	.word	0x080081a3
 80080b4:	08008065 	.word	0x08008065
 80080b8:	08008065 	.word	0x08008065
 80080bc:	0800820b 	.word	0x0800820b
 80080c0:	08008065 	.word	0x08008065
 80080c4:	08008113 	.word	0x08008113
 80080c8:	08008065 	.word	0x08008065
 80080cc:	08008065 	.word	0x08008065
 80080d0:	080081ab 	.word	0x080081ab
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6032      	str	r2, [r6, #0]
 80080dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080e4:	2301      	movs	r3, #1
 80080e6:	e09d      	b.n	8008224 <_printf_i+0x1e8>
 80080e8:	6833      	ldr	r3, [r6, #0]
 80080ea:	6820      	ldr	r0, [r4, #0]
 80080ec:	1d19      	adds	r1, r3, #4
 80080ee:	6031      	str	r1, [r6, #0]
 80080f0:	0606      	lsls	r6, r0, #24
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0xbc>
 80080f4:	681d      	ldr	r5, [r3, #0]
 80080f6:	e003      	b.n	8008100 <_printf_i+0xc4>
 80080f8:	0645      	lsls	r5, r0, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0xb8>
 80080fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008100:	2d00      	cmp	r5, #0
 8008102:	da03      	bge.n	800810c <_printf_i+0xd0>
 8008104:	232d      	movs	r3, #45	@ 0x2d
 8008106:	426d      	negs	r5, r5
 8008108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800810c:	4859      	ldr	r0, [pc, #356]	@ (8008274 <_printf_i+0x238>)
 800810e:	230a      	movs	r3, #10
 8008110:	e011      	b.n	8008136 <_printf_i+0xfa>
 8008112:	6821      	ldr	r1, [r4, #0]
 8008114:	6833      	ldr	r3, [r6, #0]
 8008116:	0608      	lsls	r0, r1, #24
 8008118:	f853 5b04 	ldr.w	r5, [r3], #4
 800811c:	d402      	bmi.n	8008124 <_printf_i+0xe8>
 800811e:	0649      	lsls	r1, r1, #25
 8008120:	bf48      	it	mi
 8008122:	b2ad      	uxthmi	r5, r5
 8008124:	2f6f      	cmp	r7, #111	@ 0x6f
 8008126:	4853      	ldr	r0, [pc, #332]	@ (8008274 <_printf_i+0x238>)
 8008128:	6033      	str	r3, [r6, #0]
 800812a:	bf14      	ite	ne
 800812c:	230a      	movne	r3, #10
 800812e:	2308      	moveq	r3, #8
 8008130:	2100      	movs	r1, #0
 8008132:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008136:	6866      	ldr	r6, [r4, #4]
 8008138:	60a6      	str	r6, [r4, #8]
 800813a:	2e00      	cmp	r6, #0
 800813c:	bfa2      	ittt	ge
 800813e:	6821      	ldrge	r1, [r4, #0]
 8008140:	f021 0104 	bicge.w	r1, r1, #4
 8008144:	6021      	strge	r1, [r4, #0]
 8008146:	b90d      	cbnz	r5, 800814c <_printf_i+0x110>
 8008148:	2e00      	cmp	r6, #0
 800814a:	d04b      	beq.n	80081e4 <_printf_i+0x1a8>
 800814c:	4616      	mov	r6, r2
 800814e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008152:	fb03 5711 	mls	r7, r3, r1, r5
 8008156:	5dc7      	ldrb	r7, [r0, r7]
 8008158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800815c:	462f      	mov	r7, r5
 800815e:	42bb      	cmp	r3, r7
 8008160:	460d      	mov	r5, r1
 8008162:	d9f4      	bls.n	800814e <_printf_i+0x112>
 8008164:	2b08      	cmp	r3, #8
 8008166:	d10b      	bne.n	8008180 <_printf_i+0x144>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	07df      	lsls	r7, r3, #31
 800816c:	d508      	bpl.n	8008180 <_printf_i+0x144>
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4299      	cmp	r1, r3
 8008174:	bfde      	ittt	le
 8008176:	2330      	movle	r3, #48	@ 0x30
 8008178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800817c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008180:	1b92      	subs	r2, r2, r6
 8008182:	6122      	str	r2, [r4, #16]
 8008184:	f8cd a000 	str.w	sl, [sp]
 8008188:	464b      	mov	r3, r9
 800818a:	aa03      	add	r2, sp, #12
 800818c:	4621      	mov	r1, r4
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fee6 	bl	8007f60 <_printf_common>
 8008194:	3001      	adds	r0, #1
 8008196:	d14a      	bne.n	800822e <_printf_i+0x1f2>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b004      	add	sp, #16
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	f043 0320 	orr.w	r3, r3, #32
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	4833      	ldr	r0, [pc, #204]	@ (8008278 <_printf_i+0x23c>)
 80081ac:	2778      	movs	r7, #120	@ 0x78
 80081ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	6831      	ldr	r1, [r6, #0]
 80081b6:	061f      	lsls	r7, r3, #24
 80081b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80081bc:	d402      	bmi.n	80081c4 <_printf_i+0x188>
 80081be:	065f      	lsls	r7, r3, #25
 80081c0:	bf48      	it	mi
 80081c2:	b2ad      	uxthmi	r5, r5
 80081c4:	6031      	str	r1, [r6, #0]
 80081c6:	07d9      	lsls	r1, r3, #31
 80081c8:	bf44      	itt	mi
 80081ca:	f043 0320 	orrmi.w	r3, r3, #32
 80081ce:	6023      	strmi	r3, [r4, #0]
 80081d0:	b11d      	cbz	r5, 80081da <_printf_i+0x19e>
 80081d2:	2310      	movs	r3, #16
 80081d4:	e7ac      	b.n	8008130 <_printf_i+0xf4>
 80081d6:	4827      	ldr	r0, [pc, #156]	@ (8008274 <_printf_i+0x238>)
 80081d8:	e7e9      	b.n	80081ae <_printf_i+0x172>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f023 0320 	bic.w	r3, r3, #32
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	e7f6      	b.n	80081d2 <_printf_i+0x196>
 80081e4:	4616      	mov	r6, r2
 80081e6:	e7bd      	b.n	8008164 <_printf_i+0x128>
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	6825      	ldr	r5, [r4, #0]
 80081ec:	6961      	ldr	r1, [r4, #20]
 80081ee:	1d18      	adds	r0, r3, #4
 80081f0:	6030      	str	r0, [r6, #0]
 80081f2:	062e      	lsls	r6, r5, #24
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	d501      	bpl.n	80081fc <_printf_i+0x1c0>
 80081f8:	6019      	str	r1, [r3, #0]
 80081fa:	e002      	b.n	8008202 <_printf_i+0x1c6>
 80081fc:	0668      	lsls	r0, r5, #25
 80081fe:	d5fb      	bpl.n	80081f8 <_printf_i+0x1bc>
 8008200:	8019      	strh	r1, [r3, #0]
 8008202:	2300      	movs	r3, #0
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	4616      	mov	r6, r2
 8008208:	e7bc      	b.n	8008184 <_printf_i+0x148>
 800820a:	6833      	ldr	r3, [r6, #0]
 800820c:	1d1a      	adds	r2, r3, #4
 800820e:	6032      	str	r2, [r6, #0]
 8008210:	681e      	ldr	r6, [r3, #0]
 8008212:	6862      	ldr	r2, [r4, #4]
 8008214:	2100      	movs	r1, #0
 8008216:	4630      	mov	r0, r6
 8008218:	f7f7 ffea 	bl	80001f0 <memchr>
 800821c:	b108      	cbz	r0, 8008222 <_printf_i+0x1e6>
 800821e:	1b80      	subs	r0, r0, r6
 8008220:	6060      	str	r0, [r4, #4]
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	2300      	movs	r3, #0
 8008228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800822c:	e7aa      	b.n	8008184 <_printf_i+0x148>
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	4632      	mov	r2, r6
 8008232:	4649      	mov	r1, r9
 8008234:	4640      	mov	r0, r8
 8008236:	47d0      	blx	sl
 8008238:	3001      	adds	r0, #1
 800823a:	d0ad      	beq.n	8008198 <_printf_i+0x15c>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	079b      	lsls	r3, r3, #30
 8008240:	d413      	bmi.n	800826a <_printf_i+0x22e>
 8008242:	68e0      	ldr	r0, [r4, #12]
 8008244:	9b03      	ldr	r3, [sp, #12]
 8008246:	4298      	cmp	r0, r3
 8008248:	bfb8      	it	lt
 800824a:	4618      	movlt	r0, r3
 800824c:	e7a6      	b.n	800819c <_printf_i+0x160>
 800824e:	2301      	movs	r3, #1
 8008250:	4632      	mov	r2, r6
 8008252:	4649      	mov	r1, r9
 8008254:	4640      	mov	r0, r8
 8008256:	47d0      	blx	sl
 8008258:	3001      	adds	r0, #1
 800825a:	d09d      	beq.n	8008198 <_printf_i+0x15c>
 800825c:	3501      	adds	r5, #1
 800825e:	68e3      	ldr	r3, [r4, #12]
 8008260:	9903      	ldr	r1, [sp, #12]
 8008262:	1a5b      	subs	r3, r3, r1
 8008264:	42ab      	cmp	r3, r5
 8008266:	dcf2      	bgt.n	800824e <_printf_i+0x212>
 8008268:	e7eb      	b.n	8008242 <_printf_i+0x206>
 800826a:	2500      	movs	r5, #0
 800826c:	f104 0619 	add.w	r6, r4, #25
 8008270:	e7f5      	b.n	800825e <_printf_i+0x222>
 8008272:	bf00      	nop
 8008274:	0800cd11 	.word	0x0800cd11
 8008278:	0800cd22 	.word	0x0800cd22

0800827c <_scanf_float>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	b087      	sub	sp, #28
 8008282:	4617      	mov	r7, r2
 8008284:	9303      	str	r3, [sp, #12]
 8008286:	688b      	ldr	r3, [r1, #8]
 8008288:	1e5a      	subs	r2, r3, #1
 800828a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800828e:	bf81      	itttt	hi
 8008290:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008294:	eb03 0b05 	addhi.w	fp, r3, r5
 8008298:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800829c:	608b      	strhi	r3, [r1, #8]
 800829e:	680b      	ldr	r3, [r1, #0]
 80082a0:	460a      	mov	r2, r1
 80082a2:	f04f 0500 	mov.w	r5, #0
 80082a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80082aa:	f842 3b1c 	str.w	r3, [r2], #28
 80082ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082b2:	4680      	mov	r8, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	bf98      	it	ls
 80082b8:	f04f 0b00 	movls.w	fp, #0
 80082bc:	9201      	str	r2, [sp, #4]
 80082be:	4616      	mov	r6, r2
 80082c0:	46aa      	mov	sl, r5
 80082c2:	46a9      	mov	r9, r5
 80082c4:	9502      	str	r5, [sp, #8]
 80082c6:	68a2      	ldr	r2, [r4, #8]
 80082c8:	b152      	cbz	r2, 80082e0 <_scanf_float+0x64>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80082d0:	d864      	bhi.n	800839c <_scanf_float+0x120>
 80082d2:	2b40      	cmp	r3, #64	@ 0x40
 80082d4:	d83c      	bhi.n	8008350 <_scanf_float+0xd4>
 80082d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80082da:	b2c8      	uxtb	r0, r1
 80082dc:	280e      	cmp	r0, #14
 80082de:	d93a      	bls.n	8008356 <_scanf_float+0xda>
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	d003      	beq.n	80082ee <_scanf_float+0x72>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f2:	f1ba 0f01 	cmp.w	sl, #1
 80082f6:	f200 8117 	bhi.w	8008528 <_scanf_float+0x2ac>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	429e      	cmp	r6, r3
 80082fe:	f200 8108 	bhi.w	8008512 <_scanf_float+0x296>
 8008302:	2001      	movs	r0, #1
 8008304:	b007      	add	sp, #28
 8008306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800830e:	2a0d      	cmp	r2, #13
 8008310:	d8e6      	bhi.n	80082e0 <_scanf_float+0x64>
 8008312:	a101      	add	r1, pc, #4	@ (adr r1, 8008318 <_scanf_float+0x9c>)
 8008314:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008318:	0800845f 	.word	0x0800845f
 800831c:	080082e1 	.word	0x080082e1
 8008320:	080082e1 	.word	0x080082e1
 8008324:	080082e1 	.word	0x080082e1
 8008328:	080084bf 	.word	0x080084bf
 800832c:	08008497 	.word	0x08008497
 8008330:	080082e1 	.word	0x080082e1
 8008334:	080082e1 	.word	0x080082e1
 8008338:	0800846d 	.word	0x0800846d
 800833c:	080082e1 	.word	0x080082e1
 8008340:	080082e1 	.word	0x080082e1
 8008344:	080082e1 	.word	0x080082e1
 8008348:	080082e1 	.word	0x080082e1
 800834c:	08008425 	.word	0x08008425
 8008350:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008354:	e7db      	b.n	800830e <_scanf_float+0x92>
 8008356:	290e      	cmp	r1, #14
 8008358:	d8c2      	bhi.n	80082e0 <_scanf_float+0x64>
 800835a:	a001      	add	r0, pc, #4	@ (adr r0, 8008360 <_scanf_float+0xe4>)
 800835c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008360:	08008415 	.word	0x08008415
 8008364:	080082e1 	.word	0x080082e1
 8008368:	08008415 	.word	0x08008415
 800836c:	080084ab 	.word	0x080084ab
 8008370:	080082e1 	.word	0x080082e1
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083fb 	.word	0x080083fb
 800837c:	080083fb 	.word	0x080083fb
 8008380:	080083fb 	.word	0x080083fb
 8008384:	080083fb 	.word	0x080083fb
 8008388:	080083fb 	.word	0x080083fb
 800838c:	080083fb 	.word	0x080083fb
 8008390:	080083fb 	.word	0x080083fb
 8008394:	080083fb 	.word	0x080083fb
 8008398:	080083fb 	.word	0x080083fb
 800839c:	2b6e      	cmp	r3, #110	@ 0x6e
 800839e:	d809      	bhi.n	80083b4 <_scanf_float+0x138>
 80083a0:	2b60      	cmp	r3, #96	@ 0x60
 80083a2:	d8b2      	bhi.n	800830a <_scanf_float+0x8e>
 80083a4:	2b54      	cmp	r3, #84	@ 0x54
 80083a6:	d07b      	beq.n	80084a0 <_scanf_float+0x224>
 80083a8:	2b59      	cmp	r3, #89	@ 0x59
 80083aa:	d199      	bne.n	80082e0 <_scanf_float+0x64>
 80083ac:	2d07      	cmp	r5, #7
 80083ae:	d197      	bne.n	80082e0 <_scanf_float+0x64>
 80083b0:	2508      	movs	r5, #8
 80083b2:	e02c      	b.n	800840e <_scanf_float+0x192>
 80083b4:	2b74      	cmp	r3, #116	@ 0x74
 80083b6:	d073      	beq.n	80084a0 <_scanf_float+0x224>
 80083b8:	2b79      	cmp	r3, #121	@ 0x79
 80083ba:	e7f6      	b.n	80083aa <_scanf_float+0x12e>
 80083bc:	6821      	ldr	r1, [r4, #0]
 80083be:	05c8      	lsls	r0, r1, #23
 80083c0:	d51b      	bpl.n	80083fa <_scanf_float+0x17e>
 80083c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80083c6:	6021      	str	r1, [r4, #0]
 80083c8:	f109 0901 	add.w	r9, r9, #1
 80083cc:	f1bb 0f00 	cmp.w	fp, #0
 80083d0:	d003      	beq.n	80083da <_scanf_float+0x15e>
 80083d2:	3201      	adds	r2, #1
 80083d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083d8:	60a2      	str	r2, [r4, #8]
 80083da:	68a3      	ldr	r3, [r4, #8]
 80083dc:	3b01      	subs	r3, #1
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	3301      	adds	r3, #1
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	f340 8087 	ble.w	8008500 <_scanf_float+0x284>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	e765      	b.n	80082c6 <_scanf_float+0x4a>
 80083fa:	eb1a 0105 	adds.w	r1, sl, r5
 80083fe:	f47f af6f 	bne.w	80082e0 <_scanf_float+0x64>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008408:	6022      	str	r2, [r4, #0]
 800840a:	460d      	mov	r5, r1
 800840c:	468a      	mov	sl, r1
 800840e:	f806 3b01 	strb.w	r3, [r6], #1
 8008412:	e7e2      	b.n	80083da <_scanf_float+0x15e>
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	0610      	lsls	r0, r2, #24
 8008418:	f57f af62 	bpl.w	80082e0 <_scanf_float+0x64>
 800841c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008420:	6022      	str	r2, [r4, #0]
 8008422:	e7f4      	b.n	800840e <_scanf_float+0x192>
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	d10e      	bne.n	8008448 <_scanf_float+0x1cc>
 800842a:	f1b9 0f00 	cmp.w	r9, #0
 800842e:	d10e      	bne.n	800844e <_scanf_float+0x1d2>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008436:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800843a:	d108      	bne.n	800844e <_scanf_float+0x1d2>
 800843c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008440:	6022      	str	r2, [r4, #0]
 8008442:	f04f 0a01 	mov.w	sl, #1
 8008446:	e7e2      	b.n	800840e <_scanf_float+0x192>
 8008448:	f1ba 0f02 	cmp.w	sl, #2
 800844c:	d055      	beq.n	80084fa <_scanf_float+0x27e>
 800844e:	2d01      	cmp	r5, #1
 8008450:	d002      	beq.n	8008458 <_scanf_float+0x1dc>
 8008452:	2d04      	cmp	r5, #4
 8008454:	f47f af44 	bne.w	80082e0 <_scanf_float+0x64>
 8008458:	3501      	adds	r5, #1
 800845a:	b2ed      	uxtb	r5, r5
 800845c:	e7d7      	b.n	800840e <_scanf_float+0x192>
 800845e:	f1ba 0f01 	cmp.w	sl, #1
 8008462:	f47f af3d 	bne.w	80082e0 <_scanf_float+0x64>
 8008466:	f04f 0a02 	mov.w	sl, #2
 800846a:	e7d0      	b.n	800840e <_scanf_float+0x192>
 800846c:	b97d      	cbnz	r5, 800848e <_scanf_float+0x212>
 800846e:	f1b9 0f00 	cmp.w	r9, #0
 8008472:	f47f af38 	bne.w	80082e6 <_scanf_float+0x6a>
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800847c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008480:	f040 8108 	bne.w	8008694 <_scanf_float+0x418>
 8008484:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	2501      	movs	r5, #1
 800848c:	e7bf      	b.n	800840e <_scanf_float+0x192>
 800848e:	2d03      	cmp	r5, #3
 8008490:	d0e2      	beq.n	8008458 <_scanf_float+0x1dc>
 8008492:	2d05      	cmp	r5, #5
 8008494:	e7de      	b.n	8008454 <_scanf_float+0x1d8>
 8008496:	2d02      	cmp	r5, #2
 8008498:	f47f af22 	bne.w	80082e0 <_scanf_float+0x64>
 800849c:	2503      	movs	r5, #3
 800849e:	e7b6      	b.n	800840e <_scanf_float+0x192>
 80084a0:	2d06      	cmp	r5, #6
 80084a2:	f47f af1d 	bne.w	80082e0 <_scanf_float+0x64>
 80084a6:	2507      	movs	r5, #7
 80084a8:	e7b1      	b.n	800840e <_scanf_float+0x192>
 80084aa:	6822      	ldr	r2, [r4, #0]
 80084ac:	0591      	lsls	r1, r2, #22
 80084ae:	f57f af17 	bpl.w	80082e0 <_scanf_float+0x64>
 80084b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80084bc:	e7a7      	b.n	800840e <_scanf_float+0x192>
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80084c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80084c8:	d006      	beq.n	80084d8 <_scanf_float+0x25c>
 80084ca:	0550      	lsls	r0, r2, #21
 80084cc:	f57f af08 	bpl.w	80082e0 <_scanf_float+0x64>
 80084d0:	f1b9 0f00 	cmp.w	r9, #0
 80084d4:	f000 80de 	beq.w	8008694 <_scanf_float+0x418>
 80084d8:	0591      	lsls	r1, r2, #22
 80084da:	bf58      	it	pl
 80084dc:	9902      	ldrpl	r1, [sp, #8]
 80084de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084e2:	bf58      	it	pl
 80084e4:	eba9 0101 	subpl.w	r1, r9, r1
 80084e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80084ec:	bf58      	it	pl
 80084ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	f04f 0900 	mov.w	r9, #0
 80084f8:	e789      	b.n	800840e <_scanf_float+0x192>
 80084fa:	f04f 0a03 	mov.w	sl, #3
 80084fe:	e786      	b.n	800840e <_scanf_float+0x192>
 8008500:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008504:	4639      	mov	r1, r7
 8008506:	4640      	mov	r0, r8
 8008508:	4798      	blx	r3
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f aedb 	beq.w	80082c6 <_scanf_float+0x4a>
 8008510:	e6e6      	b.n	80082e0 <_scanf_float+0x64>
 8008512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008516:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800851a:	463a      	mov	r2, r7
 800851c:	4640      	mov	r0, r8
 800851e:	4798      	blx	r3
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	3b01      	subs	r3, #1
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	e6e8      	b.n	80082fa <_scanf_float+0x7e>
 8008528:	1e6b      	subs	r3, r5, #1
 800852a:	2b06      	cmp	r3, #6
 800852c:	d824      	bhi.n	8008578 <_scanf_float+0x2fc>
 800852e:	2d02      	cmp	r5, #2
 8008530:	d836      	bhi.n	80085a0 <_scanf_float+0x324>
 8008532:	9b01      	ldr	r3, [sp, #4]
 8008534:	429e      	cmp	r6, r3
 8008536:	f67f aee4 	bls.w	8008302 <_scanf_float+0x86>
 800853a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800853e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008542:	463a      	mov	r2, r7
 8008544:	4640      	mov	r0, r8
 8008546:	4798      	blx	r3
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	3b01      	subs	r3, #1
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	e7f0      	b.n	8008532 <_scanf_float+0x2b6>
 8008550:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008554:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008558:	463a      	mov	r2, r7
 800855a:	4640      	mov	r0, r8
 800855c:	4798      	blx	r3
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	3b01      	subs	r3, #1
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008568:	fa5f fa8a 	uxtb.w	sl, sl
 800856c:	f1ba 0f02 	cmp.w	sl, #2
 8008570:	d1ee      	bne.n	8008550 <_scanf_float+0x2d4>
 8008572:	3d03      	subs	r5, #3
 8008574:	b2ed      	uxtb	r5, r5
 8008576:	1b76      	subs	r6, r6, r5
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	05da      	lsls	r2, r3, #23
 800857c:	d530      	bpl.n	80085e0 <_scanf_float+0x364>
 800857e:	055b      	lsls	r3, r3, #21
 8008580:	d511      	bpl.n	80085a6 <_scanf_float+0x32a>
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	429e      	cmp	r6, r3
 8008586:	f67f aebc 	bls.w	8008302 <_scanf_float+0x86>
 800858a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800858e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008592:	463a      	mov	r2, r7
 8008594:	4640      	mov	r0, r8
 8008596:	4798      	blx	r3
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	3b01      	subs	r3, #1
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	e7f0      	b.n	8008582 <_scanf_float+0x306>
 80085a0:	46aa      	mov	sl, r5
 80085a2:	46b3      	mov	fp, r6
 80085a4:	e7de      	b.n	8008564 <_scanf_float+0x2e8>
 80085a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	2965      	cmp	r1, #101	@ 0x65
 80085ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80085b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80085b6:	6123      	str	r3, [r4, #16]
 80085b8:	d00c      	beq.n	80085d4 <_scanf_float+0x358>
 80085ba:	2945      	cmp	r1, #69	@ 0x45
 80085bc:	d00a      	beq.n	80085d4 <_scanf_float+0x358>
 80085be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085c2:	463a      	mov	r2, r7
 80085c4:	4640      	mov	r0, r8
 80085c6:	4798      	blx	r3
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	1eb5      	subs	r5, r6, #2
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085d8:	463a      	mov	r2, r7
 80085da:	4640      	mov	r0, r8
 80085dc:	4798      	blx	r3
 80085de:	462e      	mov	r6, r5
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	f012 0210 	ands.w	r2, r2, #16
 80085e6:	d001      	beq.n	80085ec <_scanf_float+0x370>
 80085e8:	2000      	movs	r0, #0
 80085ea:	e68b      	b.n	8008304 <_scanf_float+0x88>
 80085ec:	7032      	strb	r2, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80085f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f8:	d11c      	bne.n	8008634 <_scanf_float+0x3b8>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	454b      	cmp	r3, r9
 80085fe:	eba3 0209 	sub.w	r2, r3, r9
 8008602:	d123      	bne.n	800864c <_scanf_float+0x3d0>
 8008604:	9901      	ldr	r1, [sp, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	4640      	mov	r0, r8
 800860a:	f7ff f95d 	bl	80078c8 <_strtod_r>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f011 0f02 	tst.w	r1, #2
 8008618:	ec57 6b10 	vmov	r6, r7, d0
 800861c:	f103 0204 	add.w	r2, r3, #4
 8008620:	d01f      	beq.n	8008662 <_scanf_float+0x3e6>
 8008622:	9903      	ldr	r1, [sp, #12]
 8008624:	600a      	str	r2, [r1, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	e9c3 6700 	strd	r6, r7, [r3]
 800862c:	68e3      	ldr	r3, [r4, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60e3      	str	r3, [r4, #12]
 8008632:	e7d9      	b.n	80085e8 <_scanf_float+0x36c>
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0e4      	beq.n	8008604 <_scanf_float+0x388>
 800863a:	9905      	ldr	r1, [sp, #20]
 800863c:	230a      	movs	r3, #10
 800863e:	3101      	adds	r1, #1
 8008640:	4640      	mov	r0, r8
 8008642:	f7ff f9c1 	bl	80079c8 <_strtol_r>
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	9e05      	ldr	r6, [sp, #20]
 800864a:	1ac2      	subs	r2, r0, r3
 800864c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008650:	429e      	cmp	r6, r3
 8008652:	bf28      	it	cs
 8008654:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008658:	4910      	ldr	r1, [pc, #64]	@ (800869c <_scanf_float+0x420>)
 800865a:	4630      	mov	r0, r6
 800865c:	f000 f918 	bl	8008890 <siprintf>
 8008660:	e7d0      	b.n	8008604 <_scanf_float+0x388>
 8008662:	f011 0f04 	tst.w	r1, #4
 8008666:	9903      	ldr	r1, [sp, #12]
 8008668:	600a      	str	r2, [r1, #0]
 800866a:	d1dc      	bne.n	8008626 <_scanf_float+0x3aa>
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	4632      	mov	r2, r6
 8008670:	463b      	mov	r3, r7
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f8 fa69 	bl	8000b4c <__aeabi_dcmpun>
 800867a:	b128      	cbz	r0, 8008688 <_scanf_float+0x40c>
 800867c:	4808      	ldr	r0, [pc, #32]	@ (80086a0 <_scanf_float+0x424>)
 800867e:	f001 f887 	bl	8009790 <nanf>
 8008682:	ed85 0a00 	vstr	s0, [r5]
 8008686:	e7d1      	b.n	800862c <_scanf_float+0x3b0>
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 fabc 	bl	8000c08 <__aeabi_d2f>
 8008690:	6028      	str	r0, [r5, #0]
 8008692:	e7cb      	b.n	800862c <_scanf_float+0x3b0>
 8008694:	f04f 0900 	mov.w	r9, #0
 8008698:	e629      	b.n	80082ee <_scanf_float+0x72>
 800869a:	bf00      	nop
 800869c:	0800cd33 	.word	0x0800cd33
 80086a0:	0800cb53 	.word	0x0800cb53

080086a4 <std>:
 80086a4:	2300      	movs	r3, #0
 80086a6:	b510      	push	{r4, lr}
 80086a8:	4604      	mov	r4, r0
 80086aa:	e9c0 3300 	strd	r3, r3, [r0]
 80086ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086b2:	6083      	str	r3, [r0, #8]
 80086b4:	8181      	strh	r1, [r0, #12]
 80086b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80086b8:	81c2      	strh	r2, [r0, #14]
 80086ba:	6183      	str	r3, [r0, #24]
 80086bc:	4619      	mov	r1, r3
 80086be:	2208      	movs	r2, #8
 80086c0:	305c      	adds	r0, #92	@ 0x5c
 80086c2:	f000 fa41 	bl	8008b48 <memset>
 80086c6:	4b0d      	ldr	r3, [pc, #52]	@ (80086fc <std+0x58>)
 80086c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008700 <std+0x5c>)
 80086cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008704 <std+0x60>)
 80086d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <std+0x64>)
 80086d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80086d6:	4b0d      	ldr	r3, [pc, #52]	@ (800870c <std+0x68>)
 80086d8:	6224      	str	r4, [r4, #32]
 80086da:	429c      	cmp	r4, r3
 80086dc:	d006      	beq.n	80086ec <std+0x48>
 80086de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086e2:	4294      	cmp	r4, r2
 80086e4:	d002      	beq.n	80086ec <std+0x48>
 80086e6:	33d0      	adds	r3, #208	@ 0xd0
 80086e8:	429c      	cmp	r4, r3
 80086ea:	d105      	bne.n	80086f8 <std+0x54>
 80086ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f4:	f001 b828 	b.w	8009748 <__retarget_lock_init_recursive>
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	08008925 	.word	0x08008925
 8008700:	0800894b 	.word	0x0800894b
 8008704:	08008983 	.word	0x08008983
 8008708:	080089a7 	.word	0x080089a7
 800870c:	200092e0 	.word	0x200092e0

08008710 <stdio_exit_handler>:
 8008710:	4a02      	ldr	r2, [pc, #8]	@ (800871c <stdio_exit_handler+0xc>)
 8008712:	4903      	ldr	r1, [pc, #12]	@ (8008720 <stdio_exit_handler+0x10>)
 8008714:	4803      	ldr	r0, [pc, #12]	@ (8008724 <stdio_exit_handler+0x14>)
 8008716:	f000 b869 	b.w	80087ec <_fwalk_sglue>
 800871a:	bf00      	nop
 800871c:	20000018 	.word	0x20000018
 8008720:	0800c059 	.word	0x0800c059
 8008724:	2000019c 	.word	0x2000019c

08008728 <cleanup_stdio>:
 8008728:	6841      	ldr	r1, [r0, #4]
 800872a:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <cleanup_stdio+0x34>)
 800872c:	4299      	cmp	r1, r3
 800872e:	b510      	push	{r4, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	d001      	beq.n	8008738 <cleanup_stdio+0x10>
 8008734:	f003 fc90 	bl	800c058 <_fflush_r>
 8008738:	68a1      	ldr	r1, [r4, #8]
 800873a:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <cleanup_stdio+0x38>)
 800873c:	4299      	cmp	r1, r3
 800873e:	d002      	beq.n	8008746 <cleanup_stdio+0x1e>
 8008740:	4620      	mov	r0, r4
 8008742:	f003 fc89 	bl	800c058 <_fflush_r>
 8008746:	68e1      	ldr	r1, [r4, #12]
 8008748:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <cleanup_stdio+0x3c>)
 800874a:	4299      	cmp	r1, r3
 800874c:	d004      	beq.n	8008758 <cleanup_stdio+0x30>
 800874e:	4620      	mov	r0, r4
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008754:	f003 bc80 	b.w	800c058 <_fflush_r>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	bf00      	nop
 800875c:	200092e0 	.word	0x200092e0
 8008760:	20009348 	.word	0x20009348
 8008764:	200093b0 	.word	0x200093b0

08008768 <global_stdio_init.part.0>:
 8008768:	b510      	push	{r4, lr}
 800876a:	4b0b      	ldr	r3, [pc, #44]	@ (8008798 <global_stdio_init.part.0+0x30>)
 800876c:	4c0b      	ldr	r4, [pc, #44]	@ (800879c <global_stdio_init.part.0+0x34>)
 800876e:	4a0c      	ldr	r2, [pc, #48]	@ (80087a0 <global_stdio_init.part.0+0x38>)
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	4620      	mov	r0, r4
 8008774:	2200      	movs	r2, #0
 8008776:	2104      	movs	r1, #4
 8008778:	f7ff ff94 	bl	80086a4 <std>
 800877c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008780:	2201      	movs	r2, #1
 8008782:	2109      	movs	r1, #9
 8008784:	f7ff ff8e 	bl	80086a4 <std>
 8008788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800878c:	2202      	movs	r2, #2
 800878e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008792:	2112      	movs	r1, #18
 8008794:	f7ff bf86 	b.w	80086a4 <std>
 8008798:	20009418 	.word	0x20009418
 800879c:	200092e0 	.word	0x200092e0
 80087a0:	08008711 	.word	0x08008711

080087a4 <__sfp_lock_acquire>:
 80087a4:	4801      	ldr	r0, [pc, #4]	@ (80087ac <__sfp_lock_acquire+0x8>)
 80087a6:	f000 bfd1 	b.w	800974c <__retarget_lock_acquire_recursive>
 80087aa:	bf00      	nop
 80087ac:	20009447 	.word	0x20009447

080087b0 <__sfp_lock_release>:
 80087b0:	4801      	ldr	r0, [pc, #4]	@ (80087b8 <__sfp_lock_release+0x8>)
 80087b2:	f000 bfcd 	b.w	8009750 <__retarget_lock_release_recursive>
 80087b6:	bf00      	nop
 80087b8:	20009447 	.word	0x20009447

080087bc <__sinit>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
 80087c0:	f7ff fff0 	bl	80087a4 <__sfp_lock_acquire>
 80087c4:	6a23      	ldr	r3, [r4, #32]
 80087c6:	b11b      	cbz	r3, 80087d0 <__sinit+0x14>
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f7ff bff0 	b.w	80087b0 <__sfp_lock_release>
 80087d0:	4b04      	ldr	r3, [pc, #16]	@ (80087e4 <__sinit+0x28>)
 80087d2:	6223      	str	r3, [r4, #32]
 80087d4:	4b04      	ldr	r3, [pc, #16]	@ (80087e8 <__sinit+0x2c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f5      	bne.n	80087c8 <__sinit+0xc>
 80087dc:	f7ff ffc4 	bl	8008768 <global_stdio_init.part.0>
 80087e0:	e7f2      	b.n	80087c8 <__sinit+0xc>
 80087e2:	bf00      	nop
 80087e4:	08008729 	.word	0x08008729
 80087e8:	20009418 	.word	0x20009418

080087ec <_fwalk_sglue>:
 80087ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f0:	4607      	mov	r7, r0
 80087f2:	4688      	mov	r8, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	2600      	movs	r6, #0
 80087f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008800:	d505      	bpl.n	800880e <_fwalk_sglue+0x22>
 8008802:	6824      	ldr	r4, [r4, #0]
 8008804:	2c00      	cmp	r4, #0
 8008806:	d1f7      	bne.n	80087f8 <_fwalk_sglue+0xc>
 8008808:	4630      	mov	r0, r6
 800880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880e:	89ab      	ldrh	r3, [r5, #12]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d907      	bls.n	8008824 <_fwalk_sglue+0x38>
 8008814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008818:	3301      	adds	r3, #1
 800881a:	d003      	beq.n	8008824 <_fwalk_sglue+0x38>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	47c0      	blx	r8
 8008822:	4306      	orrs	r6, r0
 8008824:	3568      	adds	r5, #104	@ 0x68
 8008826:	e7e9      	b.n	80087fc <_fwalk_sglue+0x10>

08008828 <sniprintf>:
 8008828:	b40c      	push	{r2, r3}
 800882a:	b530      	push	{r4, r5, lr}
 800882c:	4b17      	ldr	r3, [pc, #92]	@ (800888c <sniprintf+0x64>)
 800882e:	1e0c      	subs	r4, r1, #0
 8008830:	681d      	ldr	r5, [r3, #0]
 8008832:	b09d      	sub	sp, #116	@ 0x74
 8008834:	da08      	bge.n	8008848 <sniprintf+0x20>
 8008836:	238b      	movs	r3, #139	@ 0x8b
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	b01d      	add	sp, #116	@ 0x74
 8008840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008844:	b002      	add	sp, #8
 8008846:	4770      	bx	lr
 8008848:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800884c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008850:	bf14      	ite	ne
 8008852:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008856:	4623      	moveq	r3, r4
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9307      	str	r3, [sp, #28]
 800885c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008860:	9002      	str	r0, [sp, #8]
 8008862:	9006      	str	r0, [sp, #24]
 8008864:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008868:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800886a:	ab21      	add	r3, sp, #132	@ 0x84
 800886c:	a902      	add	r1, sp, #8
 800886e:	4628      	mov	r0, r5
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f002 ff57 	bl	800b724 <_svfiprintf_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	bfbc      	itt	lt
 800887a:	238b      	movlt	r3, #139	@ 0x8b
 800887c:	602b      	strlt	r3, [r5, #0]
 800887e:	2c00      	cmp	r4, #0
 8008880:	d0dd      	beq.n	800883e <sniprintf+0x16>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7d9      	b.n	800883e <sniprintf+0x16>
 800888a:	bf00      	nop
 800888c:	20000198 	.word	0x20000198

08008890 <siprintf>:
 8008890:	b40e      	push	{r1, r2, r3}
 8008892:	b500      	push	{lr}
 8008894:	b09c      	sub	sp, #112	@ 0x70
 8008896:	ab1d      	add	r3, sp, #116	@ 0x74
 8008898:	9002      	str	r0, [sp, #8]
 800889a:	9006      	str	r0, [sp, #24]
 800889c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80088a0:	4809      	ldr	r0, [pc, #36]	@ (80088c8 <siprintf+0x38>)
 80088a2:	9107      	str	r1, [sp, #28]
 80088a4:	9104      	str	r1, [sp, #16]
 80088a6:	4909      	ldr	r1, [pc, #36]	@ (80088cc <siprintf+0x3c>)
 80088a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ac:	9105      	str	r1, [sp, #20]
 80088ae:	6800      	ldr	r0, [r0, #0]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	a902      	add	r1, sp, #8
 80088b4:	f002 ff36 	bl	800b724 <_svfiprintf_r>
 80088b8:	9b02      	ldr	r3, [sp, #8]
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
 80088be:	b01c      	add	sp, #112	@ 0x70
 80088c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c4:	b003      	add	sp, #12
 80088c6:	4770      	bx	lr
 80088c8:	20000198 	.word	0x20000198
 80088cc:	ffff0208 	.word	0xffff0208

080088d0 <siscanf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b530      	push	{r4, r5, lr}
 80088d4:	b09c      	sub	sp, #112	@ 0x70
 80088d6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80088d8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80088dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80088e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	9006      	str	r0, [sp, #24]
 80088e8:	f7f7 fcd2 	bl	8000290 <strlen>
 80088ec:	4b0b      	ldr	r3, [pc, #44]	@ (800891c <siscanf+0x4c>)
 80088ee:	9003      	str	r0, [sp, #12]
 80088f0:	9007      	str	r0, [sp, #28]
 80088f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088f4:	480a      	ldr	r0, [pc, #40]	@ (8008920 <siscanf+0x50>)
 80088f6:	9401      	str	r4, [sp, #4]
 80088f8:	2300      	movs	r3, #0
 80088fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088fc:	9314      	str	r3, [sp, #80]	@ 0x50
 80088fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008902:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008906:	462a      	mov	r2, r5
 8008908:	4623      	mov	r3, r4
 800890a:	a902      	add	r1, sp, #8
 800890c:	6800      	ldr	r0, [r0, #0]
 800890e:	f003 f85d 	bl	800b9cc <__ssvfiscanf_r>
 8008912:	b01c      	add	sp, #112	@ 0x70
 8008914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008918:	b003      	add	sp, #12
 800891a:	4770      	bx	lr
 800891c:	08008947 	.word	0x08008947
 8008920:	20000198 	.word	0x20000198

08008924 <__sread>:
 8008924:	b510      	push	{r4, lr}
 8008926:	460c      	mov	r4, r1
 8008928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892c:	f000 feae 	bl	800968c <_read_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	bfab      	itete	ge
 8008934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008936:	89a3      	ldrhlt	r3, [r4, #12]
 8008938:	181b      	addge	r3, r3, r0
 800893a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800893e:	bfac      	ite	ge
 8008940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008942:	81a3      	strhlt	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__seofread>:
 8008946:	2000      	movs	r0, #0
 8008948:	4770      	bx	lr

0800894a <__swrite>:
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	461f      	mov	r7, r3
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	05db      	lsls	r3, r3, #23
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	4616      	mov	r6, r2
 800895a:	d505      	bpl.n	8008968 <__swrite+0x1e>
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2302      	movs	r3, #2
 8008962:	2200      	movs	r2, #0
 8008964:	f000 fe80 	bl	8009668 <_lseek_r>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	f000 bea7 	b.w	80096d0 <_write_r>

08008982 <__sseek>:
 8008982:	b510      	push	{r4, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898a:	f000 fe6d 	bl	8009668 <_lseek_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	bf15      	itete	ne
 8008994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800899a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800899e:	81a3      	strheq	r3, [r4, #12]
 80089a0:	bf18      	it	ne
 80089a2:	81a3      	strhne	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__sclose>:
 80089a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089aa:	f000 be4d 	b.w	8009648 <_close_r>

080089ae <_vsniprintf_r>:
 80089ae:	b530      	push	{r4, r5, lr}
 80089b0:	4614      	mov	r4, r2
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	b09b      	sub	sp, #108	@ 0x6c
 80089b6:	4605      	mov	r5, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	da05      	bge.n	80089c8 <_vsniprintf_r+0x1a>
 80089bc:	238b      	movs	r3, #139	@ 0x8b
 80089be:	6003      	str	r3, [r0, #0]
 80089c0:	f04f 30ff 	mov.w	r0, #4294967295
 80089c4:	b01b      	add	sp, #108	@ 0x6c
 80089c6:	bd30      	pop	{r4, r5, pc}
 80089c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80089d0:	bf14      	ite	ne
 80089d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089d6:	4623      	moveq	r3, r4
 80089d8:	9302      	str	r3, [sp, #8]
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089e0:	9100      	str	r1, [sp, #0]
 80089e2:	9104      	str	r1, [sp, #16]
 80089e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80089e8:	4669      	mov	r1, sp
 80089ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80089ec:	f002 fe9a 	bl	800b724 <_svfiprintf_r>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	bfbc      	itt	lt
 80089f4:	238b      	movlt	r3, #139	@ 0x8b
 80089f6:	602b      	strlt	r3, [r5, #0]
 80089f8:	2c00      	cmp	r4, #0
 80089fa:	d0e3      	beq.n	80089c4 <_vsniprintf_r+0x16>
 80089fc:	9b00      	ldr	r3, [sp, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e7df      	b.n	80089c4 <_vsniprintf_r+0x16>

08008a04 <vsniprintf>:
 8008a04:	b507      	push	{r0, r1, r2, lr}
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	460a      	mov	r2, r1
 8008a0c:	4601      	mov	r1, r0
 8008a0e:	4803      	ldr	r0, [pc, #12]	@ (8008a1c <vsniprintf+0x18>)
 8008a10:	6800      	ldr	r0, [r0, #0]
 8008a12:	f7ff ffcc 	bl	80089ae <_vsniprintf_r>
 8008a16:	b003      	add	sp, #12
 8008a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a1c:	20000198 	.word	0x20000198

08008a20 <__swbuf_r>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	460e      	mov	r6, r1
 8008a24:	4614      	mov	r4, r2
 8008a26:	4605      	mov	r5, r0
 8008a28:	b118      	cbz	r0, 8008a32 <__swbuf_r+0x12>
 8008a2a:	6a03      	ldr	r3, [r0, #32]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <__swbuf_r+0x12>
 8008a2e:	f7ff fec5 	bl	80087bc <__sinit>
 8008a32:	69a3      	ldr	r3, [r4, #24]
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	071a      	lsls	r2, r3, #28
 8008a3a:	d501      	bpl.n	8008a40 <__swbuf_r+0x20>
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	b943      	cbnz	r3, 8008a52 <__swbuf_r+0x32>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 f82a 	bl	8008a9c <__swsetup_r>
 8008a48:	b118      	cbz	r0, 8008a52 <__swbuf_r+0x32>
 8008a4a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a4e:	4638      	mov	r0, r7
 8008a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	1a98      	subs	r0, r3, r2
 8008a58:	6963      	ldr	r3, [r4, #20]
 8008a5a:	b2f6      	uxtb	r6, r6
 8008a5c:	4283      	cmp	r3, r0
 8008a5e:	4637      	mov	r7, r6
 8008a60:	dc05      	bgt.n	8008a6e <__swbuf_r+0x4e>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	f003 faf7 	bl	800c058 <_fflush_r>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d1ed      	bne.n	8008a4a <__swbuf_r+0x2a>
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	60a3      	str	r3, [r4, #8]
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	701e      	strb	r6, [r3, #0]
 8008a7c:	6962      	ldr	r2, [r4, #20]
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d004      	beq.n	8008a8e <__swbuf_r+0x6e>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d5e1      	bpl.n	8008a4e <__swbuf_r+0x2e>
 8008a8a:	2e0a      	cmp	r6, #10
 8008a8c:	d1df      	bne.n	8008a4e <__swbuf_r+0x2e>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f003 fae1 	bl	800c058 <_fflush_r>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0d9      	beq.n	8008a4e <__swbuf_r+0x2e>
 8008a9a:	e7d6      	b.n	8008a4a <__swbuf_r+0x2a>

08008a9c <__swsetup_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4b29      	ldr	r3, [pc, #164]	@ (8008b44 <__swsetup_r+0xa8>)
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	b118      	cbz	r0, 8008ab0 <__swsetup_r+0x14>
 8008aa8:	6a03      	ldr	r3, [r0, #32]
 8008aaa:	b90b      	cbnz	r3, 8008ab0 <__swsetup_r+0x14>
 8008aac:	f7ff fe86 	bl	80087bc <__sinit>
 8008ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab4:	0719      	lsls	r1, r3, #28
 8008ab6:	d422      	bmi.n	8008afe <__swsetup_r+0x62>
 8008ab8:	06da      	lsls	r2, r3, #27
 8008aba:	d407      	bmi.n	8008acc <__swsetup_r+0x30>
 8008abc:	2209      	movs	r2, #9
 8008abe:	602a      	str	r2, [r5, #0]
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	e033      	b.n	8008b34 <__swsetup_r+0x98>
 8008acc:	0758      	lsls	r0, r3, #29
 8008ace:	d512      	bpl.n	8008af6 <__swsetup_r+0x5a>
 8008ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad2:	b141      	cbz	r1, 8008ae6 <__swsetup_r+0x4a>
 8008ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ad8:	4299      	cmp	r1, r3
 8008ada:	d002      	beq.n	8008ae2 <__swsetup_r+0x46>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f001 fcb3 	bl	800a448 <_free_r>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	2300      	movs	r3, #0
 8008af0:	6063      	str	r3, [r4, #4]
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f043 0308 	orr.w	r3, r3, #8
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	b94b      	cbnz	r3, 8008b16 <__swsetup_r+0x7a>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b0c:	d003      	beq.n	8008b16 <__swsetup_r+0x7a>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4628      	mov	r0, r5
 8008b12:	f003 faef 	bl	800c0f4 <__smakebuf_r>
 8008b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1a:	f013 0201 	ands.w	r2, r3, #1
 8008b1e:	d00a      	beq.n	8008b36 <__swsetup_r+0x9a>
 8008b20:	2200      	movs	r2, #0
 8008b22:	60a2      	str	r2, [r4, #8]
 8008b24:	6962      	ldr	r2, [r4, #20]
 8008b26:	4252      	negs	r2, r2
 8008b28:	61a2      	str	r2, [r4, #24]
 8008b2a:	6922      	ldr	r2, [r4, #16]
 8008b2c:	b942      	cbnz	r2, 8008b40 <__swsetup_r+0xa4>
 8008b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b32:	d1c5      	bne.n	8008ac0 <__swsetup_r+0x24>
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	0799      	lsls	r1, r3, #30
 8008b38:	bf58      	it	pl
 8008b3a:	6962      	ldrpl	r2, [r4, #20]
 8008b3c:	60a2      	str	r2, [r4, #8]
 8008b3e:	e7f4      	b.n	8008b2a <__swsetup_r+0x8e>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e7f7      	b.n	8008b34 <__swsetup_r+0x98>
 8008b44:	20000198 	.word	0x20000198

08008b48 <memset>:
 8008b48:	4402      	add	r2, r0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d100      	bne.n	8008b52 <memset+0xa>
 8008b50:	4770      	bx	lr
 8008b52:	f803 1b01 	strb.w	r1, [r3], #1
 8008b56:	e7f9      	b.n	8008b4c <memset+0x4>

08008b58 <strncmp>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	b16a      	cbz	r2, 8008b78 <strncmp+0x20>
 8008b5c:	3901      	subs	r1, #1
 8008b5e:	1884      	adds	r4, r0, r2
 8008b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d103      	bne.n	8008b74 <strncmp+0x1c>
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d001      	beq.n	8008b74 <strncmp+0x1c>
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d1f5      	bne.n	8008b60 <strncmp+0x8>
 8008b74:	1ad0      	subs	r0, r2, r3
 8008b76:	bd10      	pop	{r4, pc}
 8008b78:	4610      	mov	r0, r2
 8008b7a:	e7fc      	b.n	8008b76 <strncmp+0x1e>

08008b7c <validate_structure>:
 8008b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7e:	6801      	ldr	r1, [r0, #0]
 8008b80:	293b      	cmp	r1, #59	@ 0x3b
 8008b82:	4604      	mov	r4, r0
 8008b84:	d911      	bls.n	8008baa <validate_structure+0x2e>
 8008b86:	223c      	movs	r2, #60	@ 0x3c
 8008b88:	4668      	mov	r0, sp
 8008b8a:	f000 fe07 	bl	800979c <div>
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	6863      	ldr	r3, [r4, #4]
 8008b92:	9900      	ldr	r1, [sp, #0]
 8008b94:	2a00      	cmp	r2, #0
 8008b96:	440b      	add	r3, r1
 8008b98:	6063      	str	r3, [r4, #4]
 8008b9a:	bfbb      	ittet	lt
 8008b9c:	323c      	addlt	r2, #60	@ 0x3c
 8008b9e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008ba2:	6022      	strge	r2, [r4, #0]
 8008ba4:	6022      	strlt	r2, [r4, #0]
 8008ba6:	bfb8      	it	lt
 8008ba8:	6063      	strlt	r3, [r4, #4]
 8008baa:	6861      	ldr	r1, [r4, #4]
 8008bac:	293b      	cmp	r1, #59	@ 0x3b
 8008bae:	d911      	bls.n	8008bd4 <validate_structure+0x58>
 8008bb0:	223c      	movs	r2, #60	@ 0x3c
 8008bb2:	4668      	mov	r0, sp
 8008bb4:	f000 fdf2 	bl	800979c <div>
 8008bb8:	9a01      	ldr	r2, [sp, #4]
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	9900      	ldr	r1, [sp, #0]
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	440b      	add	r3, r1
 8008bc2:	60a3      	str	r3, [r4, #8]
 8008bc4:	bfbb      	ittet	lt
 8008bc6:	323c      	addlt	r2, #60	@ 0x3c
 8008bc8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008bcc:	6062      	strge	r2, [r4, #4]
 8008bce:	6062      	strlt	r2, [r4, #4]
 8008bd0:	bfb8      	it	lt
 8008bd2:	60a3      	strlt	r3, [r4, #8]
 8008bd4:	68a1      	ldr	r1, [r4, #8]
 8008bd6:	2917      	cmp	r1, #23
 8008bd8:	d911      	bls.n	8008bfe <validate_structure+0x82>
 8008bda:	2218      	movs	r2, #24
 8008bdc:	4668      	mov	r0, sp
 8008bde:	f000 fddd 	bl	800979c <div>
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	68e3      	ldr	r3, [r4, #12]
 8008be6:	9900      	ldr	r1, [sp, #0]
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	440b      	add	r3, r1
 8008bec:	60e3      	str	r3, [r4, #12]
 8008bee:	bfbb      	ittet	lt
 8008bf0:	3218      	addlt	r2, #24
 8008bf2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008bf6:	60a2      	strge	r2, [r4, #8]
 8008bf8:	60a2      	strlt	r2, [r4, #8]
 8008bfa:	bfb8      	it	lt
 8008bfc:	60e3      	strlt	r3, [r4, #12]
 8008bfe:	6921      	ldr	r1, [r4, #16]
 8008c00:	290b      	cmp	r1, #11
 8008c02:	d911      	bls.n	8008c28 <validate_structure+0xac>
 8008c04:	220c      	movs	r2, #12
 8008c06:	4668      	mov	r0, sp
 8008c08:	f000 fdc8 	bl	800979c <div>
 8008c0c:	9a01      	ldr	r2, [sp, #4]
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	9900      	ldr	r1, [sp, #0]
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	440b      	add	r3, r1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	bfbb      	ittet	lt
 8008c1a:	320c      	addlt	r2, #12
 8008c1c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008c20:	6122      	strge	r2, [r4, #16]
 8008c22:	6122      	strlt	r2, [r4, #16]
 8008c24:	bfb8      	it	lt
 8008c26:	6163      	strlt	r3, [r4, #20]
 8008c28:	6963      	ldr	r3, [r4, #20]
 8008c2a:	079a      	lsls	r2, r3, #30
 8008c2c:	d11c      	bne.n	8008c68 <validate_structure+0xec>
 8008c2e:	2164      	movs	r1, #100	@ 0x64
 8008c30:	fb93 f2f1 	sdiv	r2, r3, r1
 8008c34:	fb01 3212 	mls	r2, r1, r2, r3
 8008c38:	b9c2      	cbnz	r2, 8008c6c <validate_structure+0xf0>
 8008c3a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008c3e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008c42:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c46:	fb02 3311 	mls	r3, r2, r1, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf14      	ite	ne
 8008c4e:	231c      	movne	r3, #28
 8008c50:	231d      	moveq	r3, #29
 8008c52:	68e2      	ldr	r2, [r4, #12]
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	dc0b      	bgt.n	8008c70 <validate_structure+0xf4>
 8008c58:	4d31      	ldr	r5, [pc, #196]	@ (8008d20 <validate_structure+0x1a4>)
 8008c5a:	200b      	movs	r0, #11
 8008c5c:	2164      	movs	r1, #100	@ 0x64
 8008c5e:	68e6      	ldr	r6, [r4, #12]
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	dd30      	ble.n	8008cc6 <validate_structure+0x14a>
 8008c64:	b003      	add	sp, #12
 8008c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c68:	231c      	movs	r3, #28
 8008c6a:	e7f2      	b.n	8008c52 <validate_structure+0xd6>
 8008c6c:	231d      	movs	r3, #29
 8008c6e:	e7f0      	b.n	8008c52 <validate_structure+0xd6>
 8008c70:	4d2b      	ldr	r5, [pc, #172]	@ (8008d20 <validate_structure+0x1a4>)
 8008c72:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008c76:	2a01      	cmp	r2, #1
 8008c78:	bf14      	ite	ne
 8008c7a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8008c7e:	4618      	moveq	r0, r3
 8008c80:	4281      	cmp	r1, r0
 8008c82:	ddef      	ble.n	8008c64 <validate_structure+0xe8>
 8008c84:	3201      	adds	r2, #1
 8008c86:	1a09      	subs	r1, r1, r0
 8008c88:	2a0c      	cmp	r2, #12
 8008c8a:	60e1      	str	r1, [r4, #12]
 8008c8c:	6122      	str	r2, [r4, #16]
 8008c8e:	d1f0      	bne.n	8008c72 <validate_structure+0xf6>
 8008c90:	6963      	ldr	r3, [r4, #20]
 8008c92:	2100      	movs	r1, #0
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	6121      	str	r1, [r4, #16]
 8008c98:	0791      	lsls	r1, r2, #30
 8008c9a:	6162      	str	r2, [r4, #20]
 8008c9c:	d13c      	bne.n	8008d18 <validate_structure+0x19c>
 8008c9e:	2164      	movs	r1, #100	@ 0x64
 8008ca0:	fb92 f0f1 	sdiv	r0, r2, r1
 8008ca4:	fb01 2210 	mls	r2, r1, r0, r2
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d137      	bne.n	8008d1c <validate_structure+0x1a0>
 8008cac:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8008cb0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008cb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8008cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bf14      	ite	ne
 8008cc0:	231c      	movne	r3, #28
 8008cc2:	231d      	moveq	r3, #29
 8008cc4:	e7d5      	b.n	8008c72 <validate_structure+0xf6>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	3a01      	subs	r2, #1
 8008cca:	6122      	str	r2, [r4, #16]
 8008ccc:	3201      	adds	r2, #1
 8008cce:	d116      	bne.n	8008cfe <validate_structure+0x182>
 8008cd0:	6963      	ldr	r3, [r4, #20]
 8008cd2:	1e5a      	subs	r2, r3, #1
 8008cd4:	0797      	lsls	r7, r2, #30
 8008cd6:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8008cda:	d119      	bne.n	8008d10 <validate_structure+0x194>
 8008cdc:	fb92 f7f1 	sdiv	r7, r2, r1
 8008ce0:	fb01 2217 	mls	r2, r1, r7, r2
 8008ce4:	b9b2      	cbnz	r2, 8008d14 <validate_structure+0x198>
 8008ce6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8008cea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008cee:	fb93 f7f2 	sdiv	r7, r3, r2
 8008cf2:	fb02 3317 	mls	r3, r2, r7, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf14      	ite	ne
 8008cfa:	231c      	movne	r3, #28
 8008cfc:	231d      	moveq	r3, #29
 8008cfe:	6922      	ldr	r2, [r4, #16]
 8008d00:	2a01      	cmp	r2, #1
 8008d02:	bf14      	ite	ne
 8008d04:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8008d08:	461a      	moveq	r2, r3
 8008d0a:	4432      	add	r2, r6
 8008d0c:	60e2      	str	r2, [r4, #12]
 8008d0e:	e7a6      	b.n	8008c5e <validate_structure+0xe2>
 8008d10:	231c      	movs	r3, #28
 8008d12:	e7f4      	b.n	8008cfe <validate_structure+0x182>
 8008d14:	231d      	movs	r3, #29
 8008d16:	e7f2      	b.n	8008cfe <validate_structure+0x182>
 8008d18:	231c      	movs	r3, #28
 8008d1a:	e7aa      	b.n	8008c72 <validate_structure+0xf6>
 8008d1c:	231d      	movs	r3, #29
 8008d1e:	e7a8      	b.n	8008c72 <validate_structure+0xf6>
 8008d20:	0800cd68 	.word	0x0800cd68

08008d24 <mktime>:
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	b085      	sub	sp, #20
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	f003 faac 	bl	800c288 <__gettzinfo>
 8008d30:	4681      	mov	r9, r0
 8008d32:	4638      	mov	r0, r7
 8008d34:	f7ff ff22 	bl	8008b7c <validate_structure>
 8008d38:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008d3c:	223c      	movs	r2, #60	@ 0x3c
 8008d3e:	fb02 4403 	mla	r4, r2, r3, r4
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	697d      	ldr	r5, [r7, #20]
 8008d46:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008d4a:	fb02 4403 	mla	r4, r2, r3, r4
 8008d4e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008d52:	4ac1      	ldr	r2, [pc, #772]	@ (8009058 <mktime+0x334>)
 8008d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008d58:	3e01      	subs	r6, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	4416      	add	r6, r2
 8008d5e:	dd11      	ble.n	8008d84 <mktime+0x60>
 8008d60:	07a9      	lsls	r1, r5, #30
 8008d62:	d10f      	bne.n	8008d84 <mktime+0x60>
 8008d64:	2264      	movs	r2, #100	@ 0x64
 8008d66:	fb95 f3f2 	sdiv	r3, r5, r2
 8008d6a:	fb02 5313 	mls	r3, r2, r3, r5
 8008d6e:	b943      	cbnz	r3, 8008d82 <mktime+0x5e>
 8008d70:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008d74:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008d78:	fb93 f1f2 	sdiv	r1, r3, r2
 8008d7c:	fb02 3311 	mls	r3, r2, r1, r3
 8008d80:	b903      	cbnz	r3, 8008d84 <mktime+0x60>
 8008d82:	3601      	adds	r6, #1
 8008d84:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008d88:	3310      	adds	r3, #16
 8008d8a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	61fe      	str	r6, [r7, #28]
 8008d92:	f200 8167 	bhi.w	8009064 <mktime+0x340>
 8008d96:	2d46      	cmp	r5, #70	@ 0x46
 8008d98:	f340 808e 	ble.w	8008eb8 <mktime+0x194>
 8008d9c:	2346      	movs	r3, #70	@ 0x46
 8008d9e:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008da2:	2164      	movs	r1, #100	@ 0x64
 8008da4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008da8:	079a      	lsls	r2, r3, #30
 8008daa:	d17f      	bne.n	8008eac <mktime+0x188>
 8008dac:	fb93 f2f1 	sdiv	r2, r3, r1
 8008db0:	fb01 3212 	mls	r2, r1, r2, r3
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d17c      	bne.n	8008eb2 <mktime+0x18e>
 8008db8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008dbc:	fb92 fef0 	sdiv	lr, r2, r0
 8008dc0:	fb00 221e 	mls	r2, r0, lr, r2
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	bf14      	ite	ne
 8008dc8:	4662      	movne	r2, ip
 8008dca:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008dce:	3301      	adds	r3, #1
 8008dd0:	429d      	cmp	r5, r3
 8008dd2:	4416      	add	r6, r2
 8008dd4:	d1e8      	bne.n	8008da8 <mktime+0x84>
 8008dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800905c <mktime+0x338>)
 8008dd8:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008ddc:	fbc6 4803 	smlal	r4, r8, r6, r3
 8008de0:	f000 f9fa 	bl	80091d8 <__tz_lock>
 8008de4:	f000 fa04 	bl	80091f0 <_tzset_unlocked>
 8008de8:	4b9d      	ldr	r3, [pc, #628]	@ (8009060 <mktime+0x33c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8140 	beq.w	8009072 <mktime+0x34e>
 8008df2:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8008df6:	6978      	ldr	r0, [r7, #20]
 8008df8:	4653      	mov	r3, sl
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	bfa8      	it	ge
 8008dfe:	2301      	movge	r3, #1
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008e06:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8008e0a:	4283      	cmp	r3, r0
 8008e0c:	f040 8096 	bne.w	8008f3c <mktime+0x218>
 8008e10:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008e14:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8008e18:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008e1c:	1a13      	subs	r3, r2, r0
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	9a02      	ldr	r2, [sp, #8]
 8008e28:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008e2c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8008e30:	ebb2 0e03 	subs.w	lr, r2, r3
 8008e34:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8008e38:	4574      	cmp	r4, lr
 8008e3a:	eb78 0201 	sbcs.w	r2, r8, r1
 8008e3e:	f280 8085 	bge.w	8008f4c <mktime+0x228>
 8008e42:	f8d9 2000 	ldr.w	r2, [r9]
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	f000 808d 	beq.w	8008f66 <mktime+0x242>
 8008e4c:	9a03      	ldr	r2, [sp, #12]
 8008e4e:	4294      	cmp	r4, r2
 8008e50:	eb78 020b 	sbcs.w	r2, r8, fp
 8008e54:	f2c0 810a 	blt.w	800906c <mktime+0x348>
 8008e58:	4574      	cmp	r4, lr
 8008e5a:	eb78 0101 	sbcs.w	r1, r8, r1
 8008e5e:	bfb4      	ite	lt
 8008e60:	f04f 0b01 	movlt.w	fp, #1
 8008e64:	f04f 0b00 	movge.w	fp, #0
 8008e68:	f1ba 0f00 	cmp.w	sl, #0
 8008e6c:	f280 8087 	bge.w	8008f7e <mktime+0x25a>
 8008e70:	f1bb 0f01 	cmp.w	fp, #1
 8008e74:	f040 80ff 	bne.w	8009076 <mktime+0x352>
 8008e78:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008e7c:	191c      	adds	r4, r3, r4
 8008e7e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008e82:	f04f 0b01 	mov.w	fp, #1
 8008e86:	f000 f9ad 	bl	80091e4 <__tz_unlock>
 8008e8a:	3604      	adds	r6, #4
 8008e8c:	2307      	movs	r3, #7
 8008e8e:	fb96 f3f3 	sdiv	r3, r6, r3
 8008e92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008e96:	1af6      	subs	r6, r6, r3
 8008e98:	f100 80db 	bmi.w	8009052 <mktime+0x32e>
 8008e9c:	f8c7 b020 	str.w	fp, [r7, #32]
 8008ea0:	61be      	str	r6, [r7, #24]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4641      	mov	r1, r8
 8008ea6:	b005      	add	sp, #20
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eac:	f240 126d 	movw	r2, #365	@ 0x16d
 8008eb0:	e78d      	b.n	8008dce <mktime+0xaa>
 8008eb2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008eb6:	e78a      	b.n	8008dce <mktime+0xaa>
 8008eb8:	d08d      	beq.n	8008dd6 <mktime+0xb2>
 8008eba:	2345      	movs	r3, #69	@ 0x45
 8008ebc:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008ec0:	2164      	movs	r1, #100	@ 0x64
 8008ec2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008ec6:	e012      	b.n	8008eee <mktime+0x1ca>
 8008ec8:	bb62      	cbnz	r2, 8008f24 <mktime+0x200>
 8008eca:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ece:	fb01 3212 	mls	r2, r1, r2, r3
 8008ed2:	bb52      	cbnz	r2, 8008f2a <mktime+0x206>
 8008ed4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008ed8:	fb92 fef0 	sdiv	lr, r2, r0
 8008edc:	fb00 221e 	mls	r2, r0, lr, r2
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	bf14      	ite	ne
 8008ee4:	4662      	movne	r2, ip
 8008ee6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008eea:	1ab6      	subs	r6, r6, r2
 8008eec:	3b01      	subs	r3, #1
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	f003 0203 	and.w	r2, r3, #3
 8008ef4:	dbe8      	blt.n	8008ec8 <mktime+0x1a4>
 8008ef6:	b9da      	cbnz	r2, 8008f30 <mktime+0x20c>
 8008ef8:	2264      	movs	r2, #100	@ 0x64
 8008efa:	fb95 f3f2 	sdiv	r3, r5, r2
 8008efe:	fb02 5313 	mls	r3, r2, r3, r5
 8008f02:	b9c3      	cbnz	r3, 8008f36 <mktime+0x212>
 8008f04:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008f08:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008f0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008f10:	fb02 3311 	mls	r3, r2, r1, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f240 136d 	movw	r3, #365	@ 0x16d
 8008f1a:	bf08      	it	eq
 8008f1c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008f20:	1af6      	subs	r6, r6, r3
 8008f22:	e758      	b.n	8008dd6 <mktime+0xb2>
 8008f24:	f240 126d 	movw	r2, #365	@ 0x16d
 8008f28:	e7df      	b.n	8008eea <mktime+0x1c6>
 8008f2a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008f2e:	e7dc      	b.n	8008eea <mktime+0x1c6>
 8008f30:	f240 136d 	movw	r3, #365	@ 0x16d
 8008f34:	e7f4      	b.n	8008f20 <mktime+0x1fc>
 8008f36:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8008f3a:	e7f1      	b.n	8008f20 <mktime+0x1fc>
 8008f3c:	f000 f8a2 	bl	8009084 <__tzcalc_limits>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f47f af65 	bne.w	8008e10 <mktime+0xec>
 8008f46:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008f4a:	e791      	b.n	8008e70 <mktime+0x14c>
 8008f4c:	9a02      	ldr	r2, [sp, #8]
 8008f4e:	1a12      	subs	r2, r2, r0
 8008f50:	9202      	str	r2, [sp, #8]
 8008f52:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8008f56:	eb6c 0c02 	sbc.w	ip, ip, r2
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	4294      	cmp	r4, r2
 8008f5e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008f62:	dbf0      	blt.n	8008f46 <mktime+0x222>
 8008f64:	e76d      	b.n	8008e42 <mktime+0x11e>
 8008f66:	9a03      	ldr	r2, [sp, #12]
 8008f68:	4294      	cmp	r4, r2
 8008f6a:	eb78 020b 	sbcs.w	r2, r8, fp
 8008f6e:	f6ff af73 	blt.w	8008e58 <mktime+0x134>
 8008f72:	f1ba 0f00 	cmp.w	sl, #0
 8008f76:	f6ff af7f 	blt.w	8008e78 <mktime+0x154>
 8008f7a:	f04f 0b01 	mov.w	fp, #1
 8008f7e:	9a01      	ldr	r2, [sp, #4]
 8008f80:	ea82 020b 	eor.w	r2, r2, fp
 8008f84:	2a01      	cmp	r2, #1
 8008f86:	f47f af73 	bne.w	8008e70 <mktime+0x14c>
 8008f8a:	f1bb 0f00 	cmp.w	fp, #0
 8008f8e:	d035      	beq.n	8008ffc <mktime+0x2d8>
 8008f90:	1a1b      	subs	r3, r3, r0
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008f98:	441a      	add	r2, r3
 8008f9a:	191c      	adds	r4, r3, r4
 8008f9c:	603a      	str	r2, [r7, #0]
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008fa4:	f7ff fdea 	bl	8008b7c <validate_structure>
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	ebb2 020a 	subs.w	r2, r2, sl
 8008fae:	f43f af5f 	beq.w	8008e70 <mktime+0x14c>
 8008fb2:	2a01      	cmp	r2, #1
 8008fb4:	dc24      	bgt.n	8009000 <mktime+0x2dc>
 8008fb6:	1c93      	adds	r3, r2, #2
 8008fb8:	bfd8      	it	le
 8008fba:	2201      	movle	r2, #1
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	18d3      	adds	r3, r2, r3
 8008fc0:	d527      	bpl.n	8009012 <mktime+0x2ee>
 8008fc2:	1e6b      	subs	r3, r5, #1
 8008fc4:	0798      	lsls	r0, r3, #30
 8008fc6:	d11e      	bne.n	8009006 <mktime+0x2e2>
 8008fc8:	2164      	movs	r1, #100	@ 0x64
 8008fca:	fb93 f0f1 	sdiv	r0, r3, r1
 8008fce:	fb01 3310 	mls	r3, r1, r0, r3
 8008fd2:	b9db      	cbnz	r3, 800900c <mktime+0x2e8>
 8008fd4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008fd8:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008fdc:	fb95 f1f3 	sdiv	r1, r5, r3
 8008fe0:	fb03 5511 	mls	r5, r3, r1, r5
 8008fe4:	2d00      	cmp	r5, #0
 8008fe6:	f240 136d 	movw	r3, #365	@ 0x16d
 8008fea:	bf18      	it	ne
 8008fec:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	4416      	add	r6, r2
 8008ff4:	e73c      	b.n	8008e70 <mktime+0x14c>
 8008ff6:	f04f 0b00 	mov.w	fp, #0
 8008ffa:	e7c0      	b.n	8008f7e <mktime+0x25a>
 8008ffc:	1ac3      	subs	r3, r0, r3
 8008ffe:	e7c8      	b.n	8008f92 <mktime+0x26e>
 8009000:	f04f 32ff 	mov.w	r2, #4294967295
 8009004:	e7da      	b.n	8008fbc <mktime+0x298>
 8009006:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800900a:	e7f1      	b.n	8008ff0 <mktime+0x2cc>
 800900c:	f240 136d 	movw	r3, #365	@ 0x16d
 8009010:	e7ee      	b.n	8008ff0 <mktime+0x2cc>
 8009012:	07a9      	lsls	r1, r5, #30
 8009014:	d117      	bne.n	8009046 <mktime+0x322>
 8009016:	2064      	movs	r0, #100	@ 0x64
 8009018:	fb95 f1f0 	sdiv	r1, r5, r0
 800901c:	fb00 5111 	mls	r1, r0, r1, r5
 8009020:	b9a1      	cbnz	r1, 800904c <mktime+0x328>
 8009022:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8009026:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800902a:	fb95 f0f1 	sdiv	r0, r5, r1
 800902e:	fb01 5510 	mls	r5, r1, r0, r5
 8009032:	2d00      	cmp	r5, #0
 8009034:	f240 116d 	movw	r1, #365	@ 0x16d
 8009038:	bf08      	it	eq
 800903a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800903e:	428b      	cmp	r3, r1
 8009040:	bfa8      	it	ge
 8009042:	1a5b      	subge	r3, r3, r1
 8009044:	e7d4      	b.n	8008ff0 <mktime+0x2cc>
 8009046:	f240 116d 	movw	r1, #365	@ 0x16d
 800904a:	e7f8      	b.n	800903e <mktime+0x31a>
 800904c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8009050:	e7f5      	b.n	800903e <mktime+0x31a>
 8009052:	3607      	adds	r6, #7
 8009054:	e722      	b.n	8008e9c <mktime+0x178>
 8009056:	bf00      	nop
 8009058:	0800cd38 	.word	0x0800cd38
 800905c:	00015180 	.word	0x00015180
 8009060:	2000943c 	.word	0x2000943c
 8009064:	f04f 34ff 	mov.w	r4, #4294967295
 8009068:	46a0      	mov	r8, r4
 800906a:	e71a      	b.n	8008ea2 <mktime+0x17e>
 800906c:	f1ba 0f00 	cmp.w	sl, #0
 8009070:	dac1      	bge.n	8008ff6 <mktime+0x2d2>
 8009072:	f04f 0b00 	mov.w	fp, #0
 8009076:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800907a:	191c      	adds	r4, r3, r4
 800907c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8009080:	e701      	b.n	8008e86 <mktime+0x162>
 8009082:	bf00      	nop

08009084 <__tzcalc_limits>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	f003 f8fd 	bl	800c288 <__gettzinfo>
 800908e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8009092:	429c      	cmp	r4, r3
 8009094:	f340 8099 	ble.w	80091ca <__tzcalc_limits+0x146>
 8009098:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800909c:	19e5      	adds	r5, r4, r7
 800909e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80090a2:	f240 126d 	movw	r2, #365	@ 0x16d
 80090a6:	10ad      	asrs	r5, r5, #2
 80090a8:	fb02 5503 	mla	r5, r2, r3, r5
 80090ac:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 80090b0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80090b4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 80090b8:	4f45      	ldr	r7, [pc, #276]	@ (80091d0 <__tzcalc_limits+0x14c>)
 80090ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80090be:	441d      	add	r5, r3
 80090c0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80090c4:	eb04 030c 	add.w	r3, r4, ip
 80090c8:	6044      	str	r4, [r0, #4]
 80090ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ce:	4601      	mov	r1, r0
 80090d0:	441d      	add	r5, r3
 80090d2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 80090d6:	7a0b      	ldrb	r3, [r1, #8]
 80090d8:	694a      	ldr	r2, [r1, #20]
 80090da:	2b4a      	cmp	r3, #74	@ 0x4a
 80090dc:	d133      	bne.n	8009146 <__tzcalc_limits+0xc2>
 80090de:	07a6      	lsls	r6, r4, #30
 80090e0:	eb05 0302 	add.w	r3, r5, r2
 80090e4:	d106      	bne.n	80090f4 <__tzcalc_limits+0x70>
 80090e6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80090ea:	fb94 f6fe 	sdiv	r6, r4, lr
 80090ee:	fb0e 4616 	mls	r6, lr, r6, r4
 80090f2:	b936      	cbnz	r6, 8009102 <__tzcalc_limits+0x7e>
 80090f4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80090f8:	fb94 f6fe 	sdiv	r6, r4, lr
 80090fc:	fb0e 4616 	mls	r6, lr, r6, r4
 8009100:	b9fe      	cbnz	r6, 8009142 <__tzcalc_limits+0xbe>
 8009102:	2a3b      	cmp	r2, #59	@ 0x3b
 8009104:	bfd4      	ite	le
 8009106:	2200      	movle	r2, #0
 8009108:	2201      	movgt	r2, #1
 800910a:	4413      	add	r3, r2
 800910c:	3b01      	subs	r3, #1
 800910e:	698a      	ldr	r2, [r1, #24]
 8009110:	17d6      	asrs	r6, r2, #31
 8009112:	fbc3 2607 	smlal	r2, r6, r3, r7
 8009116:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009118:	18d2      	adds	r2, r2, r3
 800911a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800911e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009122:	3128      	adds	r1, #40	@ 0x28
 8009124:	458c      	cmp	ip, r1
 8009126:	d1d6      	bne.n	80090d6 <__tzcalc_limits+0x52>
 8009128:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800912c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009130:	428c      	cmp	r4, r1
 8009132:	4193      	sbcs	r3, r2
 8009134:	bfb4      	ite	lt
 8009136:	2301      	movlt	r3, #1
 8009138:	2300      	movge	r3, #0
 800913a:	6003      	str	r3, [r0, #0]
 800913c:	2001      	movs	r0, #1
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	2200      	movs	r2, #0
 8009144:	e7e1      	b.n	800910a <__tzcalc_limits+0x86>
 8009146:	2b44      	cmp	r3, #68	@ 0x44
 8009148:	d101      	bne.n	800914e <__tzcalc_limits+0xca>
 800914a:	18ab      	adds	r3, r5, r2
 800914c:	e7df      	b.n	800910e <__tzcalc_limits+0x8a>
 800914e:	07a3      	lsls	r3, r4, #30
 8009150:	d105      	bne.n	800915e <__tzcalc_limits+0xda>
 8009152:	2664      	movs	r6, #100	@ 0x64
 8009154:	fb94 f3f6 	sdiv	r3, r4, r6
 8009158:	fb06 4313 	mls	r3, r6, r3, r4
 800915c:	bb7b      	cbnz	r3, 80091be <__tzcalc_limits+0x13a>
 800915e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009162:	fb94 f6f3 	sdiv	r6, r4, r3
 8009166:	fb03 4616 	mls	r6, r3, r6, r4
 800916a:	fab6 f686 	clz	r6, r6
 800916e:	0976      	lsrs	r6, r6, #5
 8009170:	f8df e060 	ldr.w	lr, [pc, #96]	@ 80091d4 <__tzcalc_limits+0x150>
 8009174:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8009178:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800917c:	462b      	mov	r3, r5
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	fb0a e606 	mla	r6, sl, r6, lr
 8009186:	f108 0801 	add.w	r8, r8, #1
 800918a:	45c1      	cmp	r9, r8
 800918c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8009190:	dc17      	bgt.n	80091c2 <__tzcalc_limits+0x13e>
 8009192:	f103 0804 	add.w	r8, r3, #4
 8009196:	2607      	movs	r6, #7
 8009198:	fb98 f6f6 	sdiv	r6, r8, r6
 800919c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80091a0:	eba8 0606 	sub.w	r6, r8, r6
 80091a4:	1b92      	subs	r2, r2, r6
 80091a6:	690e      	ldr	r6, [r1, #16]
 80091a8:	f106 36ff 	add.w	r6, r6, #4294967295
 80091ac:	bf48      	it	mi
 80091ae:	3207      	addmi	r2, #7
 80091b0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80091b4:	4432      	add	r2, r6
 80091b6:	4572      	cmp	r2, lr
 80091b8:	da05      	bge.n	80091c6 <__tzcalc_limits+0x142>
 80091ba:	4413      	add	r3, r2
 80091bc:	e7a7      	b.n	800910e <__tzcalc_limits+0x8a>
 80091be:	2601      	movs	r6, #1
 80091c0:	e7d6      	b.n	8009170 <__tzcalc_limits+0xec>
 80091c2:	4473      	add	r3, lr
 80091c4:	e7df      	b.n	8009186 <__tzcalc_limits+0x102>
 80091c6:	3a07      	subs	r2, #7
 80091c8:	e7f5      	b.n	80091b6 <__tzcalc_limits+0x132>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e7b7      	b.n	800913e <__tzcalc_limits+0xba>
 80091ce:	bf00      	nop
 80091d0:	00015180 	.word	0x00015180
 80091d4:	0800d058 	.word	0x0800d058

080091d8 <__tz_lock>:
 80091d8:	4801      	ldr	r0, [pc, #4]	@ (80091e0 <__tz_lock+0x8>)
 80091da:	f000 bab6 	b.w	800974a <__retarget_lock_acquire>
 80091de:	bf00      	nop
 80091e0:	20009444 	.word	0x20009444

080091e4 <__tz_unlock>:
 80091e4:	4801      	ldr	r0, [pc, #4]	@ (80091ec <__tz_unlock+0x8>)
 80091e6:	f000 bab2 	b.w	800974e <__retarget_lock_release>
 80091ea:	bf00      	nop
 80091ec:	20009444 	.word	0x20009444

080091f0 <_tzset_unlocked>:
 80091f0:	4b01      	ldr	r3, [pc, #4]	@ (80091f8 <_tzset_unlocked+0x8>)
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	f000 b802 	b.w	80091fc <_tzset_unlocked_r>
 80091f8:	20000198 	.word	0x20000198

080091fc <_tzset_unlocked_r>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	b08d      	sub	sp, #52	@ 0x34
 8009202:	4607      	mov	r7, r0
 8009204:	f003 f840 	bl	800c288 <__gettzinfo>
 8009208:	49bc      	ldr	r1, [pc, #752]	@ (80094fc <_tzset_unlocked_r+0x300>)
 800920a:	4dbd      	ldr	r5, [pc, #756]	@ (8009500 <_tzset_unlocked_r+0x304>)
 800920c:	4604      	mov	r4, r0
 800920e:	4638      	mov	r0, r7
 8009210:	f001 fcda 	bl	800abc8 <_getenv_r>
 8009214:	4606      	mov	r6, r0
 8009216:	bb10      	cbnz	r0, 800925e <_tzset_unlocked_r+0x62>
 8009218:	4bba      	ldr	r3, [pc, #744]	@ (8009504 <_tzset_unlocked_r+0x308>)
 800921a:	4abb      	ldr	r2, [pc, #748]	@ (8009508 <_tzset_unlocked_r+0x30c>)
 800921c:	6018      	str	r0, [r3, #0]
 800921e:	4bbb      	ldr	r3, [pc, #748]	@ (800950c <_tzset_unlocked_r+0x310>)
 8009220:	62a0      	str	r0, [r4, #40]	@ 0x28
 8009222:	6018      	str	r0, [r3, #0]
 8009224:	4bba      	ldr	r3, [pc, #744]	@ (8009510 <_tzset_unlocked_r+0x314>)
 8009226:	6520      	str	r0, [r4, #80]	@ 0x50
 8009228:	e9c3 2200 	strd	r2, r2, [r3]
 800922c:	214a      	movs	r1, #74	@ 0x4a
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8009236:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800923a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800923e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009242:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009246:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800924a:	6828      	ldr	r0, [r5, #0]
 800924c:	7221      	strb	r1, [r4, #8]
 800924e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009252:	f7fd fc7f 	bl	8006b54 <free>
 8009256:	602e      	str	r6, [r5, #0]
 8009258:	b00d      	add	sp, #52	@ 0x34
 800925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925e:	6829      	ldr	r1, [r5, #0]
 8009260:	2900      	cmp	r1, #0
 8009262:	f040 808e 	bne.w	8009382 <_tzset_unlocked_r+0x186>
 8009266:	6828      	ldr	r0, [r5, #0]
 8009268:	f7fd fc74 	bl	8006b54 <free>
 800926c:	4630      	mov	r0, r6
 800926e:	f7f7 f80f 	bl	8000290 <strlen>
 8009272:	1c41      	adds	r1, r0, #1
 8009274:	4638      	mov	r0, r7
 8009276:	f7fd fc97 	bl	8006ba8 <_malloc_r>
 800927a:	6028      	str	r0, [r5, #0]
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 8086 	bne.w	800938e <_tzset_unlocked_r+0x192>
 8009282:	4aa2      	ldr	r2, [pc, #648]	@ (800950c <_tzset_unlocked_r+0x310>)
 8009284:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009510 <_tzset_unlocked_r+0x314>
 8009288:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009504 <_tzset_unlocked_r+0x308>
 800928c:	2300      	movs	r3, #0
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	4aa0      	ldr	r2, [pc, #640]	@ (8009514 <_tzset_unlocked_r+0x318>)
 8009292:	f8ca 3000 	str.w	r3, [sl]
 8009296:	2000      	movs	r0, #0
 8009298:	2100      	movs	r1, #0
 800929a:	e9c8 2200 	strd	r2, r2, [r8]
 800929e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80092a2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80092a6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80092aa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80092ae:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 80092b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 80092b6:	224a      	movs	r2, #74	@ 0x4a
 80092b8:	7222      	strb	r2, [r4, #8]
 80092ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092bc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80092c0:	6523      	str	r3, [r4, #80]	@ 0x50
 80092c2:	7833      	ldrb	r3, [r6, #0]
 80092c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80092c6:	bf08      	it	eq
 80092c8:	3601      	addeq	r6, #1
 80092ca:	7833      	ldrb	r3, [r6, #0]
 80092cc:	2b3c      	cmp	r3, #60	@ 0x3c
 80092ce:	d162      	bne.n	8009396 <_tzset_unlocked_r+0x19a>
 80092d0:	1c75      	adds	r5, r6, #1
 80092d2:	4a91      	ldr	r2, [pc, #580]	@ (8009518 <_tzset_unlocked_r+0x31c>)
 80092d4:	4991      	ldr	r1, [pc, #580]	@ (800951c <_tzset_unlocked_r+0x320>)
 80092d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80092d8:	4628      	mov	r0, r5
 80092da:	f7ff faf9 	bl	80088d0 <siscanf>
 80092de:	2800      	cmp	r0, #0
 80092e0:	ddba      	ble.n	8009258 <_tzset_unlocked_r+0x5c>
 80092e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092e4:	1eda      	subs	r2, r3, #3
 80092e6:	2a07      	cmp	r2, #7
 80092e8:	d8b6      	bhi.n	8009258 <_tzset_unlocked_r+0x5c>
 80092ea:	5ceb      	ldrb	r3, [r5, r3]
 80092ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80092ee:	d1b3      	bne.n	8009258 <_tzset_unlocked_r+0x5c>
 80092f0:	3602      	adds	r6, #2
 80092f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f4:	18f5      	adds	r5, r6, r3
 80092f6:	5cf3      	ldrb	r3, [r6, r3]
 80092f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80092fa:	d15a      	bne.n	80093b2 <_tzset_unlocked_r+0x1b6>
 80092fc:	3501      	adds	r5, #1
 80092fe:	f04f 39ff 	mov.w	r9, #4294967295
 8009302:	2300      	movs	r3, #0
 8009304:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009308:	f8ad 3020 	strh.w	r3, [sp, #32]
 800930c:	af08      	add	r7, sp, #32
 800930e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009310:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	f10d 031e 	add.w	r3, sp, #30
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4980      	ldr	r1, [pc, #512]	@ (8009520 <_tzset_unlocked_r+0x324>)
 800931e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009320:	aa07      	add	r2, sp, #28
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff fad4 	bl	80088d0 <siscanf>
 8009328:	2800      	cmp	r0, #0
 800932a:	dd95      	ble.n	8009258 <_tzset_unlocked_r+0x5c>
 800932c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009330:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009334:	223c      	movs	r2, #60	@ 0x3c
 8009336:	fb02 6603 	mla	r6, r2, r3, r6
 800933a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800933e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009342:	fb02 6603 	mla	r6, r2, r3, r6
 8009346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009348:	fb09 f606 	mul.w	r6, r9, r6
 800934c:	eb05 0903 	add.w	r9, r5, r3
 8009350:	5ceb      	ldrb	r3, [r5, r3]
 8009352:	2b3c      	cmp	r3, #60	@ 0x3c
 8009354:	f040 80ee 	bne.w	8009534 <_tzset_unlocked_r+0x338>
 8009358:	f109 0501 	add.w	r5, r9, #1
 800935c:	4a71      	ldr	r2, [pc, #452]	@ (8009524 <_tzset_unlocked_r+0x328>)
 800935e:	496f      	ldr	r1, [pc, #444]	@ (800951c <_tzset_unlocked_r+0x320>)
 8009360:	ab0a      	add	r3, sp, #40	@ 0x28
 8009362:	4628      	mov	r0, r5
 8009364:	f7ff fab4 	bl	80088d0 <siscanf>
 8009368:	2800      	cmp	r0, #0
 800936a:	dc28      	bgt.n	80093be <_tzset_unlocked_r+0x1c2>
 800936c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009370:	2b3e      	cmp	r3, #62	@ 0x3e
 8009372:	d124      	bne.n	80093be <_tzset_unlocked_r+0x1c2>
 8009374:	4b68      	ldr	r3, [pc, #416]	@ (8009518 <_tzset_unlocked_r+0x31c>)
 8009376:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009378:	e9c8 3300 	strd	r3, r3, [r8]
 800937c:	f8ca 6000 	str.w	r6, [sl]
 8009380:	e76a      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 8009382:	f7f6 ff25 	bl	80001d0 <strcmp>
 8009386:	2800      	cmp	r0, #0
 8009388:	f47f af6d 	bne.w	8009266 <_tzset_unlocked_r+0x6a>
 800938c:	e764      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 800938e:	4631      	mov	r1, r6
 8009390:	f000 f9df 	bl	8009752 <strcpy>
 8009394:	e775      	b.n	8009282 <_tzset_unlocked_r+0x86>
 8009396:	4a60      	ldr	r2, [pc, #384]	@ (8009518 <_tzset_unlocked_r+0x31c>)
 8009398:	4963      	ldr	r1, [pc, #396]	@ (8009528 <_tzset_unlocked_r+0x32c>)
 800939a:	ab0a      	add	r3, sp, #40	@ 0x28
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff fa97 	bl	80088d0 <siscanf>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f77f af58 	ble.w	8009258 <_tzset_unlocked_r+0x5c>
 80093a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093aa:	3b03      	subs	r3, #3
 80093ac:	2b07      	cmp	r3, #7
 80093ae:	d9a0      	bls.n	80092f2 <_tzset_unlocked_r+0xf6>
 80093b0:	e752      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 80093b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80093b4:	bf08      	it	eq
 80093b6:	3501      	addeq	r5, #1
 80093b8:	f04f 0901 	mov.w	r9, #1
 80093bc:	e7a1      	b.n	8009302 <_tzset_unlocked_r+0x106>
 80093be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093c0:	1eda      	subs	r2, r3, #3
 80093c2:	2a07      	cmp	r2, #7
 80093c4:	f63f af48 	bhi.w	8009258 <_tzset_unlocked_r+0x5c>
 80093c8:	5ceb      	ldrb	r3, [r5, r3]
 80093ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80093cc:	f47f af44 	bne.w	8009258 <_tzset_unlocked_r+0x5c>
 80093d0:	f109 0902 	add.w	r9, r9, #2
 80093d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d6:	eb09 0503 	add.w	r5, r9, r3
 80093da:	f819 3003 	ldrb.w	r3, [r9, r3]
 80093de:	2b2d      	cmp	r3, #45	@ 0x2d
 80093e0:	f040 80b7 	bne.w	8009552 <_tzset_unlocked_r+0x356>
 80093e4:	3501      	adds	r5, #1
 80093e6:	f04f 39ff 	mov.w	r9, #4294967295
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80093f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80093f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80093fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80093fc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	f10d 031e 	add.w	r3, sp, #30
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4945      	ldr	r1, [pc, #276]	@ (8009520 <_tzset_unlocked_r+0x324>)
 800940a:	ab0a      	add	r3, sp, #40	@ 0x28
 800940c:	aa07      	add	r2, sp, #28
 800940e:	4628      	mov	r0, r5
 8009410:	f7ff fa5e 	bl	80088d0 <siscanf>
 8009414:	2800      	cmp	r0, #0
 8009416:	f300 80a2 	bgt.w	800955e <_tzset_unlocked_r+0x362>
 800941a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009422:	4627      	mov	r7, r4
 8009424:	441d      	add	r5, r3
 8009426:	f04f 0b00 	mov.w	fp, #0
 800942a:	782b      	ldrb	r3, [r5, #0]
 800942c:	2b2c      	cmp	r3, #44	@ 0x2c
 800942e:	bf08      	it	eq
 8009430:	3501      	addeq	r5, #1
 8009432:	f895 9000 	ldrb.w	r9, [r5]
 8009436:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800943a:	f040 80a3 	bne.w	8009584 <_tzset_unlocked_r+0x388>
 800943e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009440:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8009444:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009448:	aa09      	add	r2, sp, #36	@ 0x24
 800944a:	9200      	str	r2, [sp, #0]
 800944c:	4937      	ldr	r1, [pc, #220]	@ (800952c <_tzset_unlocked_r+0x330>)
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8009454:	4628      	mov	r0, r5
 8009456:	f7ff fa3b 	bl	80088d0 <siscanf>
 800945a:	2803      	cmp	r0, #3
 800945c:	f47f aefc 	bne.w	8009258 <_tzset_unlocked_r+0x5c>
 8009460:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8009464:	1e4b      	subs	r3, r1, #1
 8009466:	2b0b      	cmp	r3, #11
 8009468:	f63f aef6 	bhi.w	8009258 <_tzset_unlocked_r+0x5c>
 800946c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8009470:	1e53      	subs	r3, r2, #1
 8009472:	2b04      	cmp	r3, #4
 8009474:	f63f aef0 	bhi.w	8009258 <_tzset_unlocked_r+0x5c>
 8009478:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800947c:	2b06      	cmp	r3, #6
 800947e:	f63f aeeb 	bhi.w	8009258 <_tzset_unlocked_r+0x5c>
 8009482:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009486:	f887 9008 	strb.w	r9, [r7, #8]
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948e:	eb05 0903 	add.w	r9, r5, r3
 8009492:	2500      	movs	r5, #0
 8009494:	f04f 0302 	mov.w	r3, #2
 8009498:	f8ad 301c 	strh.w	r3, [sp, #28]
 800949c:	f8ad 501e 	strh.w	r5, [sp, #30]
 80094a0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80094a4:	950a      	str	r5, [sp, #40]	@ 0x28
 80094a6:	f899 3000 	ldrb.w	r3, [r9]
 80094aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80094ac:	f040 8096 	bne.w	80095dc <_tzset_unlocked_r+0x3e0>
 80094b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80094b2:	aa08      	add	r2, sp, #32
 80094b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80094b8:	f10d 021e 	add.w	r2, sp, #30
 80094bc:	9200      	str	r2, [sp, #0]
 80094be:	491c      	ldr	r1, [pc, #112]	@ (8009530 <_tzset_unlocked_r+0x334>)
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	aa07      	add	r2, sp, #28
 80094c4:	4648      	mov	r0, r9
 80094c6:	f7ff fa03 	bl	80088d0 <siscanf>
 80094ca:	42a8      	cmp	r0, r5
 80094cc:	f300 8086 	bgt.w	80095dc <_tzset_unlocked_r+0x3e0>
 80094d0:	214a      	movs	r1, #74	@ 0x4a
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80094da:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80094de:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80094e2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80094e6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80094ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80094ee:	7221      	strb	r1, [r4, #8]
 80094f0:	62a5      	str	r5, [r4, #40]	@ 0x28
 80094f2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80094f6:	6525      	str	r5, [r4, #80]	@ 0x50
 80094f8:	e6ae      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 80094fa:	bf00      	nop
 80094fc:	0800cd98 	.word	0x0800cd98
 8009500:	2000941c 	.word	0x2000941c
 8009504:	20009438 	.word	0x20009438
 8009508:	0800cd9b 	.word	0x0800cd9b
 800950c:	2000943c 	.word	0x2000943c
 8009510:	20000024 	.word	0x20000024
 8009514:	0800cb53 	.word	0x0800cb53
 8009518:	2000942c 	.word	0x2000942c
 800951c:	0800cd9f 	.word	0x0800cd9f
 8009520:	0800cdd4 	.word	0x0800cdd4
 8009524:	20009420 	.word	0x20009420
 8009528:	0800cdb2 	.word	0x0800cdb2
 800952c:	0800cdc0 	.word	0x0800cdc0
 8009530:	0800cdd3 	.word	0x0800cdd3
 8009534:	4a3e      	ldr	r2, [pc, #248]	@ (8009630 <_tzset_unlocked_r+0x434>)
 8009536:	493f      	ldr	r1, [pc, #252]	@ (8009634 <_tzset_unlocked_r+0x438>)
 8009538:	ab0a      	add	r3, sp, #40	@ 0x28
 800953a:	4648      	mov	r0, r9
 800953c:	f7ff f9c8 	bl	80088d0 <siscanf>
 8009540:	2800      	cmp	r0, #0
 8009542:	f77f af17 	ble.w	8009374 <_tzset_unlocked_r+0x178>
 8009546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009548:	3b03      	subs	r3, #3
 800954a:	2b07      	cmp	r3, #7
 800954c:	f67f af42 	bls.w	80093d4 <_tzset_unlocked_r+0x1d8>
 8009550:	e682      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 8009552:	2b2b      	cmp	r3, #43	@ 0x2b
 8009554:	bf08      	it	eq
 8009556:	3501      	addeq	r5, #1
 8009558:	f04f 0901 	mov.w	r9, #1
 800955c:	e745      	b.n	80093ea <_tzset_unlocked_r+0x1ee>
 800955e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009562:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009566:	213c      	movs	r1, #60	@ 0x3c
 8009568:	fb01 3302 	mla	r3, r1, r2, r3
 800956c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009570:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009574:	fb01 3302 	mla	r3, r1, r2, r3
 8009578:	fb09 f303 	mul.w	r3, r9, r3
 800957c:	e74f      	b.n	800941e <_tzset_unlocked_r+0x222>
 800957e:	f04f 0b01 	mov.w	fp, #1
 8009582:	e752      	b.n	800942a <_tzset_unlocked_r+0x22e>
 8009584:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8009588:	bf06      	itte	eq
 800958a:	3501      	addeq	r5, #1
 800958c:	464b      	moveq	r3, r9
 800958e:	2344      	movne	r3, #68	@ 0x44
 8009590:	220a      	movs	r2, #10
 8009592:	a90b      	add	r1, sp, #44	@ 0x2c
 8009594:	4628      	mov	r0, r5
 8009596:	9305      	str	r3, [sp, #20]
 8009598:	f002 f852 	bl	800b640 <strtoul>
 800959c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80095a0:	9b05      	ldr	r3, [sp, #20]
 80095a2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80095a6:	45a9      	cmp	r9, r5
 80095a8:	d114      	bne.n	80095d4 <_tzset_unlocked_r+0x3d8>
 80095aa:	234d      	movs	r3, #77	@ 0x4d
 80095ac:	f1bb 0f00 	cmp.w	fp, #0
 80095b0:	d107      	bne.n	80095c2 <_tzset_unlocked_r+0x3c6>
 80095b2:	7223      	strb	r3, [r4, #8]
 80095b4:	2103      	movs	r1, #3
 80095b6:	2302      	movs	r3, #2
 80095b8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80095bc:	f8c4 b014 	str.w	fp, [r4, #20]
 80095c0:	e767      	b.n	8009492 <_tzset_unlocked_r+0x296>
 80095c2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80095c6:	220b      	movs	r2, #11
 80095c8:	2301      	movs	r3, #1
 80095ca:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80095ce:	2300      	movs	r3, #0
 80095d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80095d2:	e75e      	b.n	8009492 <_tzset_unlocked_r+0x296>
 80095d4:	b280      	uxth	r0, r0
 80095d6:	723b      	strb	r3, [r7, #8]
 80095d8:	6178      	str	r0, [r7, #20]
 80095da:	e75a      	b.n	8009492 <_tzset_unlocked_r+0x296>
 80095dc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80095e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80095e4:	213c      	movs	r1, #60	@ 0x3c
 80095e6:	fb01 3302 	mla	r3, r1, r2, r3
 80095ea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80095ee:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80095f2:	fb01 3302 	mla	r3, r1, r2, r3
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80095fa:	3728      	adds	r7, #40	@ 0x28
 80095fc:	444d      	add	r5, r9
 80095fe:	f1bb 0f00 	cmp.w	fp, #0
 8009602:	d0bc      	beq.n	800957e <_tzset_unlocked_r+0x382>
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	6523      	str	r3, [r4, #80]	@ 0x50
 8009608:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <_tzset_unlocked_r+0x43c>)
 800960a:	f8c8 3000 	str.w	r3, [r8]
 800960e:	6860      	ldr	r0, [r4, #4]
 8009610:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <_tzset_unlocked_r+0x434>)
 8009612:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009614:	f8c8 3004 	str.w	r3, [r8, #4]
 8009618:	f7ff fd34 	bl	8009084 <__tzcalc_limits>
 800961c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800961e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009620:	f8ca 2000 	str.w	r2, [sl]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	4a05      	ldr	r2, [pc, #20]	@ (800963c <_tzset_unlocked_r+0x440>)
 8009628:	bf18      	it	ne
 800962a:	2301      	movne	r3, #1
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	e613      	b.n	8009258 <_tzset_unlocked_r+0x5c>
 8009630:	20009420 	.word	0x20009420
 8009634:	0800cdb2 	.word	0x0800cdb2
 8009638:	2000942c 	.word	0x2000942c
 800963c:	2000943c 	.word	0x2000943c

08009640 <_localeconv_r>:
 8009640:	4800      	ldr	r0, [pc, #0]	@ (8009644 <_localeconv_r+0x4>)
 8009642:	4770      	bx	lr
 8009644:	2000011c 	.word	0x2000011c

08009648 <_close_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	@ (8009664 <_close_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f8 ff22 	bl	800249c <_close>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_close_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_close_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20009440 	.word	0x20009440

08009668 <_lseek_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d07      	ldr	r5, [pc, #28]	@ (8009688 <_lseek_r+0x20>)
 800966c:	4604      	mov	r4, r0
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	2200      	movs	r2, #0
 8009674:	602a      	str	r2, [r5, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f7f8 ff1a 	bl	80024b0 <_lseek>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_lseek_r+0x1e>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_lseek_r+0x1e>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	20009440 	.word	0x20009440

0800968c <_read_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d07      	ldr	r5, [pc, #28]	@ (80096ac <_read_r+0x20>)
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	2200      	movs	r2, #0
 8009698:	602a      	str	r2, [r5, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	f7f8 fee2 	bl	8002464 <_read>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_read_r+0x1e>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_read_r+0x1e>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20009440 	.word	0x20009440

080096b0 <_sbrk_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d06      	ldr	r5, [pc, #24]	@ (80096cc <_sbrk_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7f8 fefa 	bl	80024b4 <_sbrk>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_sbrk_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_sbrk_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20009440 	.word	0x20009440

080096d0 <_write_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	@ (80096f0 <_write_r+0x20>)
 80096d4:	4604      	mov	r4, r0
 80096d6:	4608      	mov	r0, r1
 80096d8:	4611      	mov	r1, r2
 80096da:	2200      	movs	r2, #0
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	f7f8 fece 	bl	8002480 <_write>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_write_r+0x1e>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_write_r+0x1e>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20009440 	.word	0x20009440

080096f4 <__errno>:
 80096f4:	4b01      	ldr	r3, [pc, #4]	@ (80096fc <__errno+0x8>)
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20000198 	.word	0x20000198

08009700 <__libc_init_array>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4d0d      	ldr	r5, [pc, #52]	@ (8009738 <__libc_init_array+0x38>)
 8009704:	4c0d      	ldr	r4, [pc, #52]	@ (800973c <__libc_init_array+0x3c>)
 8009706:	1b64      	subs	r4, r4, r5
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	2600      	movs	r6, #0
 800970c:	42a6      	cmp	r6, r4
 800970e:	d109      	bne.n	8009724 <__libc_init_array+0x24>
 8009710:	4d0b      	ldr	r5, [pc, #44]	@ (8009740 <__libc_init_array+0x40>)
 8009712:	4c0c      	ldr	r4, [pc, #48]	@ (8009744 <__libc_init_array+0x44>)
 8009714:	f002 fff0 	bl	800c6f8 <_init>
 8009718:	1b64      	subs	r4, r4, r5
 800971a:	10a4      	asrs	r4, r4, #2
 800971c:	2600      	movs	r6, #0
 800971e:	42a6      	cmp	r6, r4
 8009720:	d105      	bne.n	800972e <__libc_init_array+0x2e>
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	f855 3b04 	ldr.w	r3, [r5], #4
 8009728:	4798      	blx	r3
 800972a:	3601      	adds	r6, #1
 800972c:	e7ee      	b.n	800970c <__libc_init_array+0xc>
 800972e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009732:	4798      	blx	r3
 8009734:	3601      	adds	r6, #1
 8009736:	e7f2      	b.n	800971e <__libc_init_array+0x1e>
 8009738:	0800d100 	.word	0x0800d100
 800973c:	0800d100 	.word	0x0800d100
 8009740:	0800d100 	.word	0x0800d100
 8009744:	0800d104 	.word	0x0800d104

08009748 <__retarget_lock_init_recursive>:
 8009748:	4770      	bx	lr

0800974a <__retarget_lock_acquire>:
 800974a:	4770      	bx	lr

0800974c <__retarget_lock_acquire_recursive>:
 800974c:	4770      	bx	lr

0800974e <__retarget_lock_release>:
 800974e:	4770      	bx	lr

08009750 <__retarget_lock_release_recursive>:
 8009750:	4770      	bx	lr

08009752 <strcpy>:
 8009752:	4603      	mov	r3, r0
 8009754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009758:	f803 2b01 	strb.w	r2, [r3], #1
 800975c:	2a00      	cmp	r2, #0
 800975e:	d1f9      	bne.n	8009754 <strcpy+0x2>
 8009760:	4770      	bx	lr

08009762 <memcpy>:
 8009762:	440a      	add	r2, r1
 8009764:	4291      	cmp	r1, r2
 8009766:	f100 33ff 	add.w	r3, r0, #4294967295
 800976a:	d100      	bne.n	800976e <memcpy+0xc>
 800976c:	4770      	bx	lr
 800976e:	b510      	push	{r4, lr}
 8009770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009778:	4291      	cmp	r1, r2
 800977a:	d1f9      	bne.n	8009770 <memcpy+0xe>
 800977c:	bd10      	pop	{r4, pc}
	...

08009780 <nan>:
 8009780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009788 <nan+0x8>
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	00000000 	.word	0x00000000
 800978c:	7ff80000 	.word	0x7ff80000

08009790 <nanf>:
 8009790:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009798 <nanf+0x8>
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	7fc00000 	.word	0x7fc00000

0800979c <div>:
 800979c:	b510      	push	{r4, lr}
 800979e:	fb91 f4f2 	sdiv	r4, r1, r2
 80097a2:	fb02 1114 	mls	r1, r2, r4, r1
 80097a6:	6004      	str	r4, [r0, #0]
 80097a8:	6041      	str	r1, [r0, #4]
 80097aa:	bd10      	pop	{r4, pc}

080097ac <quorem>:
 80097ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	6903      	ldr	r3, [r0, #16]
 80097b2:	690c      	ldr	r4, [r1, #16]
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	4607      	mov	r7, r0
 80097b8:	db7e      	blt.n	80098b8 <quorem+0x10c>
 80097ba:	3c01      	subs	r4, #1
 80097bc:	f101 0814 	add.w	r8, r1, #20
 80097c0:	00a3      	lsls	r3, r4, #2
 80097c2:	f100 0514 	add.w	r5, r0, #20
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d6:	3301      	adds	r3, #1
 80097d8:	429a      	cmp	r2, r3
 80097da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097de:	fbb2 f6f3 	udiv	r6, r2, r3
 80097e2:	d32e      	bcc.n	8009842 <quorem+0x96>
 80097e4:	f04f 0a00 	mov.w	sl, #0
 80097e8:	46c4      	mov	ip, r8
 80097ea:	46ae      	mov	lr, r5
 80097ec:	46d3      	mov	fp, sl
 80097ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097f2:	b298      	uxth	r0, r3
 80097f4:	fb06 a000 	mla	r0, r6, r0, sl
 80097f8:	0c02      	lsrs	r2, r0, #16
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	fb06 2303 	mla	r3, r6, r3, r2
 8009800:	f8de 2000 	ldr.w	r2, [lr]
 8009804:	b280      	uxth	r0, r0
 8009806:	b292      	uxth	r2, r2
 8009808:	1a12      	subs	r2, r2, r0
 800980a:	445a      	add	r2, fp
 800980c:	f8de 0000 	ldr.w	r0, [lr]
 8009810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009814:	b29b      	uxth	r3, r3
 8009816:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800981a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800981e:	b292      	uxth	r2, r2
 8009820:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009824:	45e1      	cmp	r9, ip
 8009826:	f84e 2b04 	str.w	r2, [lr], #4
 800982a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800982e:	d2de      	bcs.n	80097ee <quorem+0x42>
 8009830:	9b00      	ldr	r3, [sp, #0]
 8009832:	58eb      	ldr	r3, [r5, r3]
 8009834:	b92b      	cbnz	r3, 8009842 <quorem+0x96>
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	3b04      	subs	r3, #4
 800983a:	429d      	cmp	r5, r3
 800983c:	461a      	mov	r2, r3
 800983e:	d32f      	bcc.n	80098a0 <quorem+0xf4>
 8009840:	613c      	str	r4, [r7, #16]
 8009842:	4638      	mov	r0, r7
 8009844:	f001 fc9e 	bl	800b184 <__mcmp>
 8009848:	2800      	cmp	r0, #0
 800984a:	db25      	blt.n	8009898 <quorem+0xec>
 800984c:	4629      	mov	r1, r5
 800984e:	2000      	movs	r0, #0
 8009850:	f858 2b04 	ldr.w	r2, [r8], #4
 8009854:	f8d1 c000 	ldr.w	ip, [r1]
 8009858:	fa1f fe82 	uxth.w	lr, r2
 800985c:	fa1f f38c 	uxth.w	r3, ip
 8009860:	eba3 030e 	sub.w	r3, r3, lr
 8009864:	4403      	add	r3, r0
 8009866:	0c12      	lsrs	r2, r2, #16
 8009868:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800986c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009870:	b29b      	uxth	r3, r3
 8009872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009876:	45c1      	cmp	r9, r8
 8009878:	f841 3b04 	str.w	r3, [r1], #4
 800987c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009880:	d2e6      	bcs.n	8009850 <quorem+0xa4>
 8009882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800988a:	b922      	cbnz	r2, 8009896 <quorem+0xea>
 800988c:	3b04      	subs	r3, #4
 800988e:	429d      	cmp	r5, r3
 8009890:	461a      	mov	r2, r3
 8009892:	d30b      	bcc.n	80098ac <quorem+0x100>
 8009894:	613c      	str	r4, [r7, #16]
 8009896:	3601      	adds	r6, #1
 8009898:	4630      	mov	r0, r6
 800989a:	b003      	add	sp, #12
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	3b04      	subs	r3, #4
 80098a4:	2a00      	cmp	r2, #0
 80098a6:	d1cb      	bne.n	8009840 <quorem+0x94>
 80098a8:	3c01      	subs	r4, #1
 80098aa:	e7c6      	b.n	800983a <quorem+0x8e>
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	3b04      	subs	r3, #4
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	d1ef      	bne.n	8009894 <quorem+0xe8>
 80098b4:	3c01      	subs	r4, #1
 80098b6:	e7ea      	b.n	800988e <quorem+0xe2>
 80098b8:	2000      	movs	r0, #0
 80098ba:	e7ee      	b.n	800989a <quorem+0xee>
 80098bc:	0000      	movs	r0, r0
	...

080098c0 <_dtoa_r>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	69c7      	ldr	r7, [r0, #28]
 80098c6:	b099      	sub	sp, #100	@ 0x64
 80098c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80098cc:	ec55 4b10 	vmov	r4, r5, d0
 80098d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80098d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80098d4:	4683      	mov	fp, r0
 80098d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80098d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098da:	b97f      	cbnz	r7, 80098fc <_dtoa_r+0x3c>
 80098dc:	2010      	movs	r0, #16
 80098de:	f7fd f931 	bl	8006b44 <malloc>
 80098e2:	4602      	mov	r2, r0
 80098e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80098e8:	b920      	cbnz	r0, 80098f4 <_dtoa_r+0x34>
 80098ea:	4ba7      	ldr	r3, [pc, #668]	@ (8009b88 <_dtoa_r+0x2c8>)
 80098ec:	21ef      	movs	r1, #239	@ 0xef
 80098ee:	48a7      	ldr	r0, [pc, #668]	@ (8009b8c <_dtoa_r+0x2cc>)
 80098f0:	f002 fcf0 	bl	800c2d4 <__assert_func>
 80098f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098f8:	6007      	str	r7, [r0, #0]
 80098fa:	60c7      	str	r7, [r0, #12]
 80098fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009900:	6819      	ldr	r1, [r3, #0]
 8009902:	b159      	cbz	r1, 800991c <_dtoa_r+0x5c>
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	604a      	str	r2, [r1, #4]
 8009908:	2301      	movs	r3, #1
 800990a:	4093      	lsls	r3, r2
 800990c:	608b      	str	r3, [r1, #8]
 800990e:	4658      	mov	r0, fp
 8009910:	f001 f9b4 	bl	800ac7c <_Bfree>
 8009914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	1e2b      	subs	r3, r5, #0
 800991e:	bfb9      	ittee	lt
 8009920:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009924:	9303      	strlt	r3, [sp, #12]
 8009926:	2300      	movge	r3, #0
 8009928:	6033      	strge	r3, [r6, #0]
 800992a:	9f03      	ldr	r7, [sp, #12]
 800992c:	4b98      	ldr	r3, [pc, #608]	@ (8009b90 <_dtoa_r+0x2d0>)
 800992e:	bfbc      	itt	lt
 8009930:	2201      	movlt	r2, #1
 8009932:	6032      	strlt	r2, [r6, #0]
 8009934:	43bb      	bics	r3, r7
 8009936:	d112      	bne.n	800995e <_dtoa_r+0x9e>
 8009938:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800993a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009944:	4323      	orrs	r3, r4
 8009946:	f000 854d 	beq.w	800a3e4 <_dtoa_r+0xb24>
 800994a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800994c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009ba4 <_dtoa_r+0x2e4>
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 854f 	beq.w	800a3f4 <_dtoa_r+0xb34>
 8009956:	f10a 0303 	add.w	r3, sl, #3
 800995a:	f000 bd49 	b.w	800a3f0 <_dtoa_r+0xb30>
 800995e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009962:	2200      	movs	r2, #0
 8009964:	ec51 0b17 	vmov	r0, r1, d7
 8009968:	2300      	movs	r3, #0
 800996a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800996e:	f7f7 f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009972:	4680      	mov	r8, r0
 8009974:	b158      	cbz	r0, 800998e <_dtoa_r+0xce>
 8009976:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009978:	2301      	movs	r3, #1
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800997e:	b113      	cbz	r3, 8009986 <_dtoa_r+0xc6>
 8009980:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009982:	4b84      	ldr	r3, [pc, #528]	@ (8009b94 <_dtoa_r+0x2d4>)
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ba8 <_dtoa_r+0x2e8>
 800998a:	f000 bd33 	b.w	800a3f4 <_dtoa_r+0xb34>
 800998e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009992:	aa16      	add	r2, sp, #88	@ 0x58
 8009994:	a917      	add	r1, sp, #92	@ 0x5c
 8009996:	4658      	mov	r0, fp
 8009998:	f001 fd14 	bl	800b3c4 <__d2b>
 800999c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099a0:	4681      	mov	r9, r0
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d077      	beq.n	8009a96 <_dtoa_r+0x1d6>
 80099a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80099ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80099bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099c0:	4619      	mov	r1, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	4b74      	ldr	r3, [pc, #464]	@ (8009b98 <_dtoa_r+0x2d8>)
 80099c6:	f7f6 fc6f 	bl	80002a8 <__aeabi_dsub>
 80099ca:	a369      	add	r3, pc, #420	@ (adr r3, 8009b70 <_dtoa_r+0x2b0>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	f7f6 fe22 	bl	8000618 <__aeabi_dmul>
 80099d4:	a368      	add	r3, pc, #416	@ (adr r3, 8009b78 <_dtoa_r+0x2b8>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 fc67 	bl	80002ac <__adddf3>
 80099de:	4604      	mov	r4, r0
 80099e0:	4630      	mov	r0, r6
 80099e2:	460d      	mov	r5, r1
 80099e4:	f7f6 fdae 	bl	8000544 <__aeabi_i2d>
 80099e8:	a365      	add	r3, pc, #404	@ (adr r3, 8009b80 <_dtoa_r+0x2c0>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fe13 	bl	8000618 <__aeabi_dmul>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 fc57 	bl	80002ac <__adddf3>
 80099fe:	4604      	mov	r4, r0
 8009a00:	460d      	mov	r5, r1
 8009a02:	f7f7 f8b9 	bl	8000b78 <__aeabi_d2iz>
 8009a06:	2200      	movs	r2, #0
 8009a08:	4607      	mov	r7, r0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7f7 f874 	bl	8000afc <__aeabi_dcmplt>
 8009a14:	b140      	cbz	r0, 8009a28 <_dtoa_r+0x168>
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7f6 fd94 	bl	8000544 <__aeabi_i2d>
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	462b      	mov	r3, r5
 8009a20:	f7f7 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a24:	b900      	cbnz	r0, 8009a28 <_dtoa_r+0x168>
 8009a26:	3f01      	subs	r7, #1
 8009a28:	2f16      	cmp	r7, #22
 8009a2a:	d851      	bhi.n	8009ad0 <_dtoa_r+0x210>
 8009a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8009b9c <_dtoa_r+0x2dc>)
 8009a2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a3a:	f7f7 f85f 	bl	8000afc <__aeabi_dcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d048      	beq.n	8009ad4 <_dtoa_r+0x214>
 8009a42:	3f01      	subs	r7, #1
 8009a44:	2300      	movs	r3, #0
 8009a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a4a:	1b9b      	subs	r3, r3, r6
 8009a4c:	1e5a      	subs	r2, r3, #1
 8009a4e:	bf44      	itt	mi
 8009a50:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a54:	2300      	movmi	r3, #0
 8009a56:	9208      	str	r2, [sp, #32]
 8009a58:	bf54      	ite	pl
 8009a5a:	f04f 0800 	movpl.w	r8, #0
 8009a5e:	9308      	strmi	r3, [sp, #32]
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	db39      	blt.n	8009ad8 <_dtoa_r+0x218>
 8009a64:	9b08      	ldr	r3, [sp, #32]
 8009a66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009a68:	443b      	add	r3, r7
 8009a6a:	9308      	str	r3, [sp, #32]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a72:	2b09      	cmp	r3, #9
 8009a74:	d864      	bhi.n	8009b40 <_dtoa_r+0x280>
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	bfc4      	itt	gt
 8009a7a:	3b04      	subgt	r3, #4
 8009a7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a80:	f1a3 0302 	sub.w	r3, r3, #2
 8009a84:	bfcc      	ite	gt
 8009a86:	2400      	movgt	r4, #0
 8009a88:	2401      	movle	r4, #1
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d863      	bhi.n	8009b56 <_dtoa_r+0x296>
 8009a8e:	e8df f003 	tbb	[pc, r3]
 8009a92:	372a      	.short	0x372a
 8009a94:	5535      	.short	0x5535
 8009a96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009a9a:	441e      	add	r6, r3
 8009a9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	bfc1      	itttt	gt
 8009aa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009aa8:	409f      	lslgt	r7, r3
 8009aaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009aae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ab2:	bfd6      	itet	le
 8009ab4:	f1c3 0320 	rsble	r3, r3, #32
 8009ab8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009abc:	fa04 f003 	lslle.w	r0, r4, r3
 8009ac0:	f7f6 fd30 	bl	8000524 <__aeabi_ui2d>
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009aca:	3e01      	subs	r6, #1
 8009acc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ace:	e777      	b.n	80099c0 <_dtoa_r+0x100>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7b8      	b.n	8009a46 <_dtoa_r+0x186>
 8009ad4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ad6:	e7b7      	b.n	8009a48 <_dtoa_r+0x188>
 8009ad8:	427b      	negs	r3, r7
 8009ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8009adc:	2300      	movs	r3, #0
 8009ade:	eba8 0807 	sub.w	r8, r8, r7
 8009ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ae4:	e7c4      	b.n	8009a70 <_dtoa_r+0x1b0>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dc35      	bgt.n	8009b5c <_dtoa_r+0x29c>
 8009af0:	2301      	movs	r3, #1
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	9307      	str	r3, [sp, #28]
 8009af6:	461a      	mov	r2, r3
 8009af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009afa:	e00b      	b.n	8009b14 <_dtoa_r+0x254>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f3      	b.n	8009ae8 <_dtoa_r+0x228>
 8009b00:	2300      	movs	r3, #0
 8009b02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b06:	18fb      	adds	r3, r7, r3
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	9307      	str	r3, [sp, #28]
 8009b10:	bfb8      	it	lt
 8009b12:	2301      	movlt	r3, #1
 8009b14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	f102 0514 	add.w	r5, r2, #20
 8009b20:	429d      	cmp	r5, r3
 8009b22:	d91f      	bls.n	8009b64 <_dtoa_r+0x2a4>
 8009b24:	6041      	str	r1, [r0, #4]
 8009b26:	4658      	mov	r0, fp
 8009b28:	f001 f868 	bl	800abfc <_Balloc>
 8009b2c:	4682      	mov	sl, r0
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d13c      	bne.n	8009bac <_dtoa_r+0x2ec>
 8009b32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba0 <_dtoa_r+0x2e0>)
 8009b34:	4602      	mov	r2, r0
 8009b36:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b3a:	e6d8      	b.n	80098ee <_dtoa_r+0x2e>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e7e0      	b.n	8009b02 <_dtoa_r+0x242>
 8009b40:	2401      	movs	r4, #1
 8009b42:	2300      	movs	r3, #0
 8009b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b48:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2312      	movs	r3, #18
 8009b54:	e7d0      	b.n	8009af8 <_dtoa_r+0x238>
 8009b56:	2301      	movs	r3, #1
 8009b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b5a:	e7f5      	b.n	8009b48 <_dtoa_r+0x288>
 8009b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	9307      	str	r3, [sp, #28]
 8009b62:	e7d7      	b.n	8009b14 <_dtoa_r+0x254>
 8009b64:	3101      	adds	r1, #1
 8009b66:	0052      	lsls	r2, r2, #1
 8009b68:	e7d8      	b.n	8009b1c <_dtoa_r+0x25c>
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w
 8009b70:	636f4361 	.word	0x636f4361
 8009b74:	3fd287a7 	.word	0x3fd287a7
 8009b78:	8b60c8b3 	.word	0x8b60c8b3
 8009b7c:	3fc68a28 	.word	0x3fc68a28
 8009b80:	509f79fb 	.word	0x509f79fb
 8009b84:	3fd34413 	.word	0x3fd34413
 8009b88:	0800cdfb 	.word	0x0800cdfb
 8009b8c:	0800ce12 	.word	0x0800ce12
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	0800d058 	.word	0x0800d058
 8009b98:	3ff80000 	.word	0x3ff80000
 8009b9c:	0800cf68 	.word	0x0800cf68
 8009ba0:	0800ce6a 	.word	0x0800ce6a
 8009ba4:	0800cdf7 	.word	0x0800cdf7
 8009ba8:	0800d057 	.word	0x0800d057
 8009bac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bb0:	6018      	str	r0, [r3, #0]
 8009bb2:	9b07      	ldr	r3, [sp, #28]
 8009bb4:	2b0e      	cmp	r3, #14
 8009bb6:	f200 80a4 	bhi.w	8009d02 <_dtoa_r+0x442>
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	f000 80a1 	beq.w	8009d02 <_dtoa_r+0x442>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	dd33      	ble.n	8009c2c <_dtoa_r+0x36c>
 8009bc4:	4bad      	ldr	r3, [pc, #692]	@ (8009e7c <_dtoa_r+0x5bc>)
 8009bc6:	f007 020f 	and.w	r2, r7, #15
 8009bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bce:	ed93 7b00 	vldr	d7, [r3]
 8009bd2:	05f8      	lsls	r0, r7, #23
 8009bd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009bd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009bdc:	d516      	bpl.n	8009c0c <_dtoa_r+0x34c>
 8009bde:	4ba8      	ldr	r3, [pc, #672]	@ (8009e80 <_dtoa_r+0x5c0>)
 8009be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009be8:	f7f6 fe40 	bl	800086c <__aeabi_ddiv>
 8009bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf0:	f004 040f 	and.w	r4, r4, #15
 8009bf4:	2603      	movs	r6, #3
 8009bf6:	4da2      	ldr	r5, [pc, #648]	@ (8009e80 <_dtoa_r+0x5c0>)
 8009bf8:	b954      	cbnz	r4, 8009c10 <_dtoa_r+0x350>
 8009bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c02:	f7f6 fe33 	bl	800086c <__aeabi_ddiv>
 8009c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0a:	e028      	b.n	8009c5e <_dtoa_r+0x39e>
 8009c0c:	2602      	movs	r6, #2
 8009c0e:	e7f2      	b.n	8009bf6 <_dtoa_r+0x336>
 8009c10:	07e1      	lsls	r1, r4, #31
 8009c12:	d508      	bpl.n	8009c26 <_dtoa_r+0x366>
 8009c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c1c:	f7f6 fcfc 	bl	8000618 <__aeabi_dmul>
 8009c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c24:	3601      	adds	r6, #1
 8009c26:	1064      	asrs	r4, r4, #1
 8009c28:	3508      	adds	r5, #8
 8009c2a:	e7e5      	b.n	8009bf8 <_dtoa_r+0x338>
 8009c2c:	f000 80d2 	beq.w	8009dd4 <_dtoa_r+0x514>
 8009c30:	427c      	negs	r4, r7
 8009c32:	4b92      	ldr	r3, [pc, #584]	@ (8009e7c <_dtoa_r+0x5bc>)
 8009c34:	4d92      	ldr	r5, [pc, #584]	@ (8009e80 <_dtoa_r+0x5c0>)
 8009c36:	f004 020f 	and.w	r2, r4, #15
 8009c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c46:	f7f6 fce7 	bl	8000618 <__aeabi_dmul>
 8009c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c4e:	1124      	asrs	r4, r4, #4
 8009c50:	2300      	movs	r3, #0
 8009c52:	2602      	movs	r6, #2
 8009c54:	2c00      	cmp	r4, #0
 8009c56:	f040 80b2 	bne.w	8009dbe <_dtoa_r+0x4fe>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1d3      	bne.n	8009c06 <_dtoa_r+0x346>
 8009c5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 80b7 	beq.w	8009dd8 <_dtoa_r+0x518>
 8009c6a:	4b86      	ldr	r3, [pc, #536]	@ (8009e84 <_dtoa_r+0x5c4>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4620      	mov	r0, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7f6 ff43 	bl	8000afc <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f000 80ae 	beq.w	8009dd8 <_dtoa_r+0x518>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80aa 	beq.w	8009dd8 <_dtoa_r+0x518>
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	dd37      	ble.n	8009cfa <_dtoa_r+0x43a>
 8009c8a:	1e7b      	subs	r3, r7, #1
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4b7d      	ldr	r3, [pc, #500]	@ (8009e88 <_dtoa_r+0x5c8>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 fcbf 	bl	8000618 <__aeabi_dmul>
 8009c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c9e:	9c00      	ldr	r4, [sp, #0]
 8009ca0:	3601      	adds	r6, #1
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7f6 fc4e 	bl	8000544 <__aeabi_i2d>
 8009ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cac:	f7f6 fcb4 	bl	8000618 <__aeabi_dmul>
 8009cb0:	4b76      	ldr	r3, [pc, #472]	@ (8009e8c <_dtoa_r+0x5cc>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f7f6 fafa 	bl	80002ac <__adddf3>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	f040 808d 	bne.w	8009dde <_dtoa_r+0x51e>
 8009cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc8:	4b71      	ldr	r3, [pc, #452]	@ (8009e90 <_dtoa_r+0x5d0>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f7f6 faec 	bl	80002a8 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cd8:	462a      	mov	r2, r5
 8009cda:	4633      	mov	r3, r6
 8009cdc:	f7f6 ff2c 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f040 828b 	bne.w	800a1fc <_dtoa_r+0x93c>
 8009ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cea:	462a      	mov	r2, r5
 8009cec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cf0:	f7f6 ff04 	bl	8000afc <__aeabi_dcmplt>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 8128 	bne.w	8009f4a <_dtoa_r+0x68a>
 8009cfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009cfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f2c0 815a 	blt.w	8009fbe <_dtoa_r+0x6fe>
 8009d0a:	2f0e      	cmp	r7, #14
 8009d0c:	f300 8157 	bgt.w	8009fbe <_dtoa_r+0x6fe>
 8009d10:	4b5a      	ldr	r3, [pc, #360]	@ (8009e7c <_dtoa_r+0x5bc>)
 8009d12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d16:	ed93 7b00 	vldr	d7, [r3]
 8009d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	ed8d 7b00 	vstr	d7, [sp]
 8009d22:	da03      	bge.n	8009d2c <_dtoa_r+0x46c>
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f340 8101 	ble.w	8009f2e <_dtoa_r+0x66e>
 8009d2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d30:	4656      	mov	r6, sl
 8009d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fd97 	bl	800086c <__aeabi_ddiv>
 8009d3e:	f7f6 ff1b 	bl	8000b78 <__aeabi_d2iz>
 8009d42:	4680      	mov	r8, r0
 8009d44:	f7f6 fbfe 	bl	8000544 <__aeabi_i2d>
 8009d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d4c:	f7f6 fc64 	bl	8000618 <__aeabi_dmul>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d5c:	f7f6 faa4 	bl	80002a8 <__aeabi_dsub>
 8009d60:	f806 4b01 	strb.w	r4, [r6], #1
 8009d64:	9d07      	ldr	r5, [sp, #28]
 8009d66:	eba6 040a 	sub.w	r4, r6, sl
 8009d6a:	42a5      	cmp	r5, r4
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	f040 8117 	bne.w	8009fa2 <_dtoa_r+0x6e2>
 8009d74:	f7f6 fa9a 	bl	80002ac <__adddf3>
 8009d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	460d      	mov	r5, r1
 8009d80:	f7f6 feda 	bl	8000b38 <__aeabi_dcmpgt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f040 80f9 	bne.w	8009f7c <_dtoa_r+0x6bc>
 8009d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fea9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d96:	b118      	cbz	r0, 8009da0 <_dtoa_r+0x4e0>
 8009d98:	f018 0f01 	tst.w	r8, #1
 8009d9c:	f040 80ee 	bne.w	8009f7c <_dtoa_r+0x6bc>
 8009da0:	4649      	mov	r1, r9
 8009da2:	4658      	mov	r0, fp
 8009da4:	f000 ff6a 	bl	800ac7c <_Bfree>
 8009da8:	2300      	movs	r3, #0
 8009daa:	7033      	strb	r3, [r6, #0]
 8009dac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dae:	3701      	adds	r7, #1
 8009db0:	601f      	str	r7, [r3, #0]
 8009db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 831d 	beq.w	800a3f4 <_dtoa_r+0xb34>
 8009dba:	601e      	str	r6, [r3, #0]
 8009dbc:	e31a      	b.n	800a3f4 <_dtoa_r+0xb34>
 8009dbe:	07e2      	lsls	r2, r4, #31
 8009dc0:	d505      	bpl.n	8009dce <_dtoa_r+0x50e>
 8009dc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dc6:	f7f6 fc27 	bl	8000618 <__aeabi_dmul>
 8009dca:	3601      	adds	r6, #1
 8009dcc:	2301      	movs	r3, #1
 8009dce:	1064      	asrs	r4, r4, #1
 8009dd0:	3508      	adds	r5, #8
 8009dd2:	e73f      	b.n	8009c54 <_dtoa_r+0x394>
 8009dd4:	2602      	movs	r6, #2
 8009dd6:	e742      	b.n	8009c5e <_dtoa_r+0x39e>
 8009dd8:	9c07      	ldr	r4, [sp, #28]
 8009dda:	9704      	str	r7, [sp, #16]
 8009ddc:	e761      	b.n	8009ca2 <_dtoa_r+0x3e2>
 8009dde:	4b27      	ldr	r3, [pc, #156]	@ (8009e7c <_dtoa_r+0x5bc>)
 8009de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009de2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009de6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009dea:	4454      	add	r4, sl
 8009dec:	2900      	cmp	r1, #0
 8009dee:	d053      	beq.n	8009e98 <_dtoa_r+0x5d8>
 8009df0:	4928      	ldr	r1, [pc, #160]	@ (8009e94 <_dtoa_r+0x5d4>)
 8009df2:	2000      	movs	r0, #0
 8009df4:	f7f6 fd3a 	bl	800086c <__aeabi_ddiv>
 8009df8:	4633      	mov	r3, r6
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	f7f6 fa54 	bl	80002a8 <__aeabi_dsub>
 8009e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e04:	4656      	mov	r6, sl
 8009e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0a:	f7f6 feb5 	bl	8000b78 <__aeabi_d2iz>
 8009e0e:	4605      	mov	r5, r0
 8009e10:	f7f6 fb98 	bl	8000544 <__aeabi_i2d>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e1c:	f7f6 fa44 	bl	80002a8 <__aeabi_dsub>
 8009e20:	3530      	adds	r5, #48	@ 0x30
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e2a:	f806 5b01 	strb.w	r5, [r6], #1
 8009e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e32:	f7f6 fe63 	bl	8000afc <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d171      	bne.n	8009f1e <_dtoa_r+0x65e>
 8009e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e3e:	4911      	ldr	r1, [pc, #68]	@ (8009e84 <_dtoa_r+0x5c4>)
 8009e40:	2000      	movs	r0, #0
 8009e42:	f7f6 fa31 	bl	80002a8 <__aeabi_dsub>
 8009e46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e4a:	f7f6 fe57 	bl	8000afc <__aeabi_dcmplt>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f040 8095 	bne.w	8009f7e <_dtoa_r+0x6be>
 8009e54:	42a6      	cmp	r6, r4
 8009e56:	f43f af50 	beq.w	8009cfa <_dtoa_r+0x43a>
 8009e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e88 <_dtoa_r+0x5c8>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	f7f6 fbd9 	bl	8000618 <__aeabi_dmul>
 8009e66:	4b08      	ldr	r3, [pc, #32]	@ (8009e88 <_dtoa_r+0x5c8>)
 8009e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e72:	f7f6 fbd1 	bl	8000618 <__aeabi_dmul>
 8009e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e7a:	e7c4      	b.n	8009e06 <_dtoa_r+0x546>
 8009e7c:	0800cf68 	.word	0x0800cf68
 8009e80:	0800cf40 	.word	0x0800cf40
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	40240000 	.word	0x40240000
 8009e8c:	401c0000 	.word	0x401c0000
 8009e90:	40140000 	.word	0x40140000
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7f6 fbbc 	bl	8000618 <__aeabi_dmul>
 8009ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ea4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009ea6:	4656      	mov	r6, sl
 8009ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eac:	f7f6 fe64 	bl	8000b78 <__aeabi_d2iz>
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	f7f6 fb47 	bl	8000544 <__aeabi_i2d>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ebe:	f7f6 f9f3 	bl	80002a8 <__aeabi_dsub>
 8009ec2:	3530      	adds	r5, #48	@ 0x30
 8009ec4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	42a6      	cmp	r6, r4
 8009ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	d124      	bne.n	8009f22 <_dtoa_r+0x662>
 8009ed8:	4bac      	ldr	r3, [pc, #688]	@ (800a18c <_dtoa_r+0x8cc>)
 8009eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ede:	f7f6 f9e5 	bl	80002ac <__adddf3>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	f7f6 fe25 	bl	8000b38 <__aeabi_dcmpgt>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d145      	bne.n	8009f7e <_dtoa_r+0x6be>
 8009ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ef6:	49a5      	ldr	r1, [pc, #660]	@ (800a18c <_dtoa_r+0x8cc>)
 8009ef8:	2000      	movs	r0, #0
 8009efa:	f7f6 f9d5 	bl	80002a8 <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f06:	f7f6 fdf9 	bl	8000afc <__aeabi_dcmplt>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f43f aef5 	beq.w	8009cfa <_dtoa_r+0x43a>
 8009f10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f12:	1e73      	subs	r3, r6, #1
 8009f14:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f1a:	2b30      	cmp	r3, #48	@ 0x30
 8009f1c:	d0f8      	beq.n	8009f10 <_dtoa_r+0x650>
 8009f1e:	9f04      	ldr	r7, [sp, #16]
 8009f20:	e73e      	b.n	8009da0 <_dtoa_r+0x4e0>
 8009f22:	4b9b      	ldr	r3, [pc, #620]	@ (800a190 <_dtoa_r+0x8d0>)
 8009f24:	f7f6 fb78 	bl	8000618 <__aeabi_dmul>
 8009f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f2c:	e7bc      	b.n	8009ea8 <_dtoa_r+0x5e8>
 8009f2e:	d10c      	bne.n	8009f4a <_dtoa_r+0x68a>
 8009f30:	4b98      	ldr	r3, [pc, #608]	@ (800a194 <_dtoa_r+0x8d4>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f38:	f7f6 fb6e 	bl	8000618 <__aeabi_dmul>
 8009f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f40:	f7f6 fdf0 	bl	8000b24 <__aeabi_dcmpge>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f000 8157 	beq.w	800a1f8 <_dtoa_r+0x938>
 8009f4a:	2400      	movs	r4, #0
 8009f4c:	4625      	mov	r5, r4
 8009f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f50:	43db      	mvns	r3, r3
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	4656      	mov	r6, sl
 8009f56:	2700      	movs	r7, #0
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4658      	mov	r0, fp
 8009f5c:	f000 fe8e 	bl	800ac7c <_Bfree>
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	d0dc      	beq.n	8009f1e <_dtoa_r+0x65e>
 8009f64:	b12f      	cbz	r7, 8009f72 <_dtoa_r+0x6b2>
 8009f66:	42af      	cmp	r7, r5
 8009f68:	d003      	beq.n	8009f72 <_dtoa_r+0x6b2>
 8009f6a:	4639      	mov	r1, r7
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f000 fe85 	bl	800ac7c <_Bfree>
 8009f72:	4629      	mov	r1, r5
 8009f74:	4658      	mov	r0, fp
 8009f76:	f000 fe81 	bl	800ac7c <_Bfree>
 8009f7a:	e7d0      	b.n	8009f1e <_dtoa_r+0x65e>
 8009f7c:	9704      	str	r7, [sp, #16]
 8009f7e:	4633      	mov	r3, r6
 8009f80:	461e      	mov	r6, r3
 8009f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f86:	2a39      	cmp	r2, #57	@ 0x39
 8009f88:	d107      	bne.n	8009f9a <_dtoa_r+0x6da>
 8009f8a:	459a      	cmp	sl, r3
 8009f8c:	d1f8      	bne.n	8009f80 <_dtoa_r+0x6c0>
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	3201      	adds	r2, #1
 8009f92:	9204      	str	r2, [sp, #16]
 8009f94:	2230      	movs	r2, #48	@ 0x30
 8009f96:	f88a 2000 	strb.w	r2, [sl]
 8009f9a:	781a      	ldrb	r2, [r3, #0]
 8009f9c:	3201      	adds	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	e7bd      	b.n	8009f1e <_dtoa_r+0x65e>
 8009fa2:	4b7b      	ldr	r3, [pc, #492]	@ (800a190 <_dtoa_r+0x8d0>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f7f6 fb37 	bl	8000618 <__aeabi_dmul>
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	f7f6 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f43f aebb 	beq.w	8009d32 <_dtoa_r+0x472>
 8009fbc:	e6f0      	b.n	8009da0 <_dtoa_r+0x4e0>
 8009fbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fc0:	2a00      	cmp	r2, #0
 8009fc2:	f000 80db 	beq.w	800a17c <_dtoa_r+0x8bc>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc8:	2a01      	cmp	r2, #1
 8009fca:	f300 80bf 	bgt.w	800a14c <_dtoa_r+0x88c>
 8009fce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	f000 80b7 	beq.w	800a144 <_dtoa_r+0x884>
 8009fd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fdc:	4646      	mov	r6, r8
 8009fde:	9a08      	ldr	r2, [sp, #32]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	441a      	add	r2, r3
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	4498      	add	r8, r3
 8009fe8:	9208      	str	r2, [sp, #32]
 8009fea:	f000 ff45 	bl	800ae78 <__i2b>
 8009fee:	4605      	mov	r5, r0
 8009ff0:	b15e      	cbz	r6, 800a00a <_dtoa_r+0x74a>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd08      	ble.n	800a00a <_dtoa_r+0x74a>
 8009ff8:	42b3      	cmp	r3, r6
 8009ffa:	9a08      	ldr	r2, [sp, #32]
 8009ffc:	bfa8      	it	ge
 8009ffe:	4633      	movge	r3, r6
 800a000:	eba8 0803 	sub.w	r8, r8, r3
 800a004:	1af6      	subs	r6, r6, r3
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	9308      	str	r3, [sp, #32]
 800a00a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a00c:	b1f3      	cbz	r3, 800a04c <_dtoa_r+0x78c>
 800a00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80b7 	beq.w	800a184 <_dtoa_r+0x8c4>
 800a016:	b18c      	cbz	r4, 800a03c <_dtoa_r+0x77c>
 800a018:	4629      	mov	r1, r5
 800a01a:	4622      	mov	r2, r4
 800a01c:	4658      	mov	r0, fp
 800a01e:	f000 ffeb 	bl	800aff8 <__pow5mult>
 800a022:	464a      	mov	r2, r9
 800a024:	4601      	mov	r1, r0
 800a026:	4605      	mov	r5, r0
 800a028:	4658      	mov	r0, fp
 800a02a:	f000 ff3b 	bl	800aea4 <__multiply>
 800a02e:	4649      	mov	r1, r9
 800a030:	9004      	str	r0, [sp, #16]
 800a032:	4658      	mov	r0, fp
 800a034:	f000 fe22 	bl	800ac7c <_Bfree>
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	4699      	mov	r9, r3
 800a03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a03e:	1b1a      	subs	r2, r3, r4
 800a040:	d004      	beq.n	800a04c <_dtoa_r+0x78c>
 800a042:	4649      	mov	r1, r9
 800a044:	4658      	mov	r0, fp
 800a046:	f000 ffd7 	bl	800aff8 <__pow5mult>
 800a04a:	4681      	mov	r9, r0
 800a04c:	2101      	movs	r1, #1
 800a04e:	4658      	mov	r0, fp
 800a050:	f000 ff12 	bl	800ae78 <__i2b>
 800a054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a056:	4604      	mov	r4, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 81cf 	beq.w	800a3fc <_dtoa_r+0xb3c>
 800a05e:	461a      	mov	r2, r3
 800a060:	4601      	mov	r1, r0
 800a062:	4658      	mov	r0, fp
 800a064:	f000 ffc8 	bl	800aff8 <__pow5mult>
 800a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	4604      	mov	r4, r0
 800a06e:	f300 8095 	bgt.w	800a19c <_dtoa_r+0x8dc>
 800a072:	9b02      	ldr	r3, [sp, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f040 8087 	bne.w	800a188 <_dtoa_r+0x8c8>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8089 	bne.w	800a198 <_dtoa_r+0x8d8>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a08c:	0d1b      	lsrs	r3, r3, #20
 800a08e:	051b      	lsls	r3, r3, #20
 800a090:	b12b      	cbz	r3, 800a09e <_dtoa_r+0x7de>
 800a092:	9b08      	ldr	r3, [sp, #32]
 800a094:	3301      	adds	r3, #1
 800a096:	9308      	str	r3, [sp, #32]
 800a098:	f108 0801 	add.w	r8, r8, #1
 800a09c:	2301      	movs	r3, #1
 800a09e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 81b0 	beq.w	800a408 <_dtoa_r+0xb48>
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0ae:	6918      	ldr	r0, [r3, #16]
 800a0b0:	f000 fe96 	bl	800ade0 <__hi0bits>
 800a0b4:	f1c0 0020 	rsb	r0, r0, #32
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	4418      	add	r0, r3
 800a0bc:	f010 001f 	ands.w	r0, r0, #31
 800a0c0:	d077      	beq.n	800a1b2 <_dtoa_r+0x8f2>
 800a0c2:	f1c0 0320 	rsb	r3, r0, #32
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	dd6b      	ble.n	800a1a2 <_dtoa_r+0x8e2>
 800a0ca:	9b08      	ldr	r3, [sp, #32]
 800a0cc:	f1c0 001c 	rsb	r0, r0, #28
 800a0d0:	4403      	add	r3, r0
 800a0d2:	4480      	add	r8, r0
 800a0d4:	4406      	add	r6, r0
 800a0d6:	9308      	str	r3, [sp, #32]
 800a0d8:	f1b8 0f00 	cmp.w	r8, #0
 800a0dc:	dd05      	ble.n	800a0ea <_dtoa_r+0x82a>
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	4658      	mov	r0, fp
 800a0e4:	f000 ffe2 	bl	800b0ac <__lshift>
 800a0e8:	4681      	mov	r9, r0
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd05      	ble.n	800a0fc <_dtoa_r+0x83c>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	f000 ffd9 	bl	800b0ac <__lshift>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d059      	beq.n	800a1b6 <_dtoa_r+0x8f6>
 800a102:	4621      	mov	r1, r4
 800a104:	4648      	mov	r0, r9
 800a106:	f001 f83d 	bl	800b184 <__mcmp>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	da53      	bge.n	800a1b6 <_dtoa_r+0x8f6>
 800a10e:	1e7b      	subs	r3, r7, #1
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	4649      	mov	r1, r9
 800a114:	2300      	movs	r3, #0
 800a116:	220a      	movs	r2, #10
 800a118:	4658      	mov	r0, fp
 800a11a:	f000 fdd1 	bl	800acc0 <__multadd>
 800a11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a120:	4681      	mov	r9, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 8172 	beq.w	800a40c <_dtoa_r+0xb4c>
 800a128:	2300      	movs	r3, #0
 800a12a:	4629      	mov	r1, r5
 800a12c:	220a      	movs	r2, #10
 800a12e:	4658      	mov	r0, fp
 800a130:	f000 fdc6 	bl	800acc0 <__multadd>
 800a134:	9b00      	ldr	r3, [sp, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	4605      	mov	r5, r0
 800a13a:	dc67      	bgt.n	800a20c <_dtoa_r+0x94c>
 800a13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13e:	2b02      	cmp	r3, #2
 800a140:	dc41      	bgt.n	800a1c6 <_dtoa_r+0x906>
 800a142:	e063      	b.n	800a20c <_dtoa_r+0x94c>
 800a144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a146:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a14a:	e746      	b.n	8009fda <_dtoa_r+0x71a>
 800a14c:	9b07      	ldr	r3, [sp, #28]
 800a14e:	1e5c      	subs	r4, r3, #1
 800a150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a152:	42a3      	cmp	r3, r4
 800a154:	bfbf      	itttt	lt
 800a156:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a158:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a15a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a15c:	1ae3      	sublt	r3, r4, r3
 800a15e:	bfb4      	ite	lt
 800a160:	18d2      	addlt	r2, r2, r3
 800a162:	1b1c      	subge	r4, r3, r4
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	bfbc      	itt	lt
 800a168:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a16a:	2400      	movlt	r4, #0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfb5      	itete	lt
 800a170:	eba8 0603 	sublt.w	r6, r8, r3
 800a174:	9b07      	ldrge	r3, [sp, #28]
 800a176:	2300      	movlt	r3, #0
 800a178:	4646      	movge	r6, r8
 800a17a:	e730      	b.n	8009fde <_dtoa_r+0x71e>
 800a17c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a17e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a180:	4646      	mov	r6, r8
 800a182:	e735      	b.n	8009ff0 <_dtoa_r+0x730>
 800a184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a186:	e75c      	b.n	800a042 <_dtoa_r+0x782>
 800a188:	2300      	movs	r3, #0
 800a18a:	e788      	b.n	800a09e <_dtoa_r+0x7de>
 800a18c:	3fe00000 	.word	0x3fe00000
 800a190:	40240000 	.word	0x40240000
 800a194:	40140000 	.word	0x40140000
 800a198:	9b02      	ldr	r3, [sp, #8]
 800a19a:	e780      	b.n	800a09e <_dtoa_r+0x7de>
 800a19c:	2300      	movs	r3, #0
 800a19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1a0:	e782      	b.n	800a0a8 <_dtoa_r+0x7e8>
 800a1a2:	d099      	beq.n	800a0d8 <_dtoa_r+0x818>
 800a1a4:	9a08      	ldr	r2, [sp, #32]
 800a1a6:	331c      	adds	r3, #28
 800a1a8:	441a      	add	r2, r3
 800a1aa:	4498      	add	r8, r3
 800a1ac:	441e      	add	r6, r3
 800a1ae:	9208      	str	r2, [sp, #32]
 800a1b0:	e792      	b.n	800a0d8 <_dtoa_r+0x818>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	e7f6      	b.n	800a1a4 <_dtoa_r+0x8e4>
 800a1b6:	9b07      	ldr	r3, [sp, #28]
 800a1b8:	9704      	str	r7, [sp, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dc20      	bgt.n	800a200 <_dtoa_r+0x940>
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	dd1e      	ble.n	800a204 <_dtoa_r+0x944>
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f47f aec0 	bne.w	8009f4e <_dtoa_r+0x68e>
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	2205      	movs	r2, #5
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 fd74 	bl	800acc0 <__multadd>
 800a1d8:	4601      	mov	r1, r0
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4648      	mov	r0, r9
 800a1de:	f000 ffd1 	bl	800b184 <__mcmp>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f77f aeb3 	ble.w	8009f4e <_dtoa_r+0x68e>
 800a1e8:	4656      	mov	r6, sl
 800a1ea:	2331      	movs	r3, #49	@ 0x31
 800a1ec:	f806 3b01 	strb.w	r3, [r6], #1
 800a1f0:	9b04      	ldr	r3, [sp, #16]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	e6ae      	b.n	8009f56 <_dtoa_r+0x696>
 800a1f8:	9c07      	ldr	r4, [sp, #28]
 800a1fa:	9704      	str	r7, [sp, #16]
 800a1fc:	4625      	mov	r5, r4
 800a1fe:	e7f3      	b.n	800a1e8 <_dtoa_r+0x928>
 800a200:	9b07      	ldr	r3, [sp, #28]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a206:	2b00      	cmp	r3, #0
 800a208:	f000 8104 	beq.w	800a414 <_dtoa_r+0xb54>
 800a20c:	2e00      	cmp	r6, #0
 800a20e:	dd05      	ble.n	800a21c <_dtoa_r+0x95c>
 800a210:	4629      	mov	r1, r5
 800a212:	4632      	mov	r2, r6
 800a214:	4658      	mov	r0, fp
 800a216:	f000 ff49 	bl	800b0ac <__lshift>
 800a21a:	4605      	mov	r5, r0
 800a21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d05a      	beq.n	800a2d8 <_dtoa_r+0xa18>
 800a222:	6869      	ldr	r1, [r5, #4]
 800a224:	4658      	mov	r0, fp
 800a226:	f000 fce9 	bl	800abfc <_Balloc>
 800a22a:	4606      	mov	r6, r0
 800a22c:	b928      	cbnz	r0, 800a23a <_dtoa_r+0x97a>
 800a22e:	4b84      	ldr	r3, [pc, #528]	@ (800a440 <_dtoa_r+0xb80>)
 800a230:	4602      	mov	r2, r0
 800a232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a236:	f7ff bb5a 	b.w	80098ee <_dtoa_r+0x2e>
 800a23a:	692a      	ldr	r2, [r5, #16]
 800a23c:	3202      	adds	r2, #2
 800a23e:	0092      	lsls	r2, r2, #2
 800a240:	f105 010c 	add.w	r1, r5, #12
 800a244:	300c      	adds	r0, #12
 800a246:	f7ff fa8c 	bl	8009762 <memcpy>
 800a24a:	2201      	movs	r2, #1
 800a24c:	4631      	mov	r1, r6
 800a24e:	4658      	mov	r0, fp
 800a250:	f000 ff2c 	bl	800b0ac <__lshift>
 800a254:	f10a 0301 	add.w	r3, sl, #1
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	4453      	add	r3, sl
 800a25e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	462f      	mov	r7, r5
 800a268:	930a      	str	r3, [sp, #40]	@ 0x28
 800a26a:	4605      	mov	r5, r0
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	4621      	mov	r1, r4
 800a270:	3b01      	subs	r3, #1
 800a272:	4648      	mov	r0, r9
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	f7ff fa99 	bl	80097ac <quorem>
 800a27a:	4639      	mov	r1, r7
 800a27c:	9002      	str	r0, [sp, #8]
 800a27e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a282:	4648      	mov	r0, r9
 800a284:	f000 ff7e 	bl	800b184 <__mcmp>
 800a288:	462a      	mov	r2, r5
 800a28a:	9008      	str	r0, [sp, #32]
 800a28c:	4621      	mov	r1, r4
 800a28e:	4658      	mov	r0, fp
 800a290:	f000 ff94 	bl	800b1bc <__mdiff>
 800a294:	68c2      	ldr	r2, [r0, #12]
 800a296:	4606      	mov	r6, r0
 800a298:	bb02      	cbnz	r2, 800a2dc <_dtoa_r+0xa1c>
 800a29a:	4601      	mov	r1, r0
 800a29c:	4648      	mov	r0, r9
 800a29e:	f000 ff71 	bl	800b184 <__mcmp>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2aa:	f000 fce7 	bl	800ac7c <_Bfree>
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2b2:	9e07      	ldr	r6, [sp, #28]
 800a2b4:	ea43 0102 	orr.w	r1, r3, r2
 800a2b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ba:	4319      	orrs	r1, r3
 800a2bc:	d110      	bne.n	800a2e0 <_dtoa_r+0xa20>
 800a2be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2c2:	d029      	beq.n	800a318 <_dtoa_r+0xa58>
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd02      	ble.n	800a2d0 <_dtoa_r+0xa10>
 800a2ca:	9b02      	ldr	r3, [sp, #8]
 800a2cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a2d0:	9b00      	ldr	r3, [sp, #0]
 800a2d2:	f883 8000 	strb.w	r8, [r3]
 800a2d6:	e63f      	b.n	8009f58 <_dtoa_r+0x698>
 800a2d8:	4628      	mov	r0, r5
 800a2da:	e7bb      	b.n	800a254 <_dtoa_r+0x994>
 800a2dc:	2201      	movs	r2, #1
 800a2de:	e7e1      	b.n	800a2a4 <_dtoa_r+0x9e4>
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	db04      	blt.n	800a2f0 <_dtoa_r+0xa30>
 800a2e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	d120      	bne.n	800a332 <_dtoa_r+0xa72>
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	dded      	ble.n	800a2d0 <_dtoa_r+0xa10>
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	4658      	mov	r0, fp
 800a2fa:	f000 fed7 	bl	800b0ac <__lshift>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4681      	mov	r9, r0
 800a302:	f000 ff3f 	bl	800b184 <__mcmp>
 800a306:	2800      	cmp	r0, #0
 800a308:	dc03      	bgt.n	800a312 <_dtoa_r+0xa52>
 800a30a:	d1e1      	bne.n	800a2d0 <_dtoa_r+0xa10>
 800a30c:	f018 0f01 	tst.w	r8, #1
 800a310:	d0de      	beq.n	800a2d0 <_dtoa_r+0xa10>
 800a312:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a316:	d1d8      	bne.n	800a2ca <_dtoa_r+0xa0a>
 800a318:	9a00      	ldr	r2, [sp, #0]
 800a31a:	2339      	movs	r3, #57	@ 0x39
 800a31c:	7013      	strb	r3, [r2, #0]
 800a31e:	4633      	mov	r3, r6
 800a320:	461e      	mov	r6, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a328:	2a39      	cmp	r2, #57	@ 0x39
 800a32a:	d052      	beq.n	800a3d2 <_dtoa_r+0xb12>
 800a32c:	3201      	adds	r2, #1
 800a32e:	701a      	strb	r2, [r3, #0]
 800a330:	e612      	b.n	8009f58 <_dtoa_r+0x698>
 800a332:	2a00      	cmp	r2, #0
 800a334:	dd07      	ble.n	800a346 <_dtoa_r+0xa86>
 800a336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a33a:	d0ed      	beq.n	800a318 <_dtoa_r+0xa58>
 800a33c:	9a00      	ldr	r2, [sp, #0]
 800a33e:	f108 0301 	add.w	r3, r8, #1
 800a342:	7013      	strb	r3, [r2, #0]
 800a344:	e608      	b.n	8009f58 <_dtoa_r+0x698>
 800a346:	9b07      	ldr	r3, [sp, #28]
 800a348:	9a07      	ldr	r2, [sp, #28]
 800a34a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a350:	4293      	cmp	r3, r2
 800a352:	d028      	beq.n	800a3a6 <_dtoa_r+0xae6>
 800a354:	4649      	mov	r1, r9
 800a356:	2300      	movs	r3, #0
 800a358:	220a      	movs	r2, #10
 800a35a:	4658      	mov	r0, fp
 800a35c:	f000 fcb0 	bl	800acc0 <__multadd>
 800a360:	42af      	cmp	r7, r5
 800a362:	4681      	mov	r9, r0
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	f04f 020a 	mov.w	r2, #10
 800a36c:	4639      	mov	r1, r7
 800a36e:	4658      	mov	r0, fp
 800a370:	d107      	bne.n	800a382 <_dtoa_r+0xac2>
 800a372:	f000 fca5 	bl	800acc0 <__multadd>
 800a376:	4607      	mov	r7, r0
 800a378:	4605      	mov	r5, r0
 800a37a:	9b07      	ldr	r3, [sp, #28]
 800a37c:	3301      	adds	r3, #1
 800a37e:	9307      	str	r3, [sp, #28]
 800a380:	e774      	b.n	800a26c <_dtoa_r+0x9ac>
 800a382:	f000 fc9d 	bl	800acc0 <__multadd>
 800a386:	4629      	mov	r1, r5
 800a388:	4607      	mov	r7, r0
 800a38a:	2300      	movs	r3, #0
 800a38c:	220a      	movs	r2, #10
 800a38e:	4658      	mov	r0, fp
 800a390:	f000 fc96 	bl	800acc0 <__multadd>
 800a394:	4605      	mov	r5, r0
 800a396:	e7f0      	b.n	800a37a <_dtoa_r+0xaba>
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bfcc      	ite	gt
 800a39e:	461e      	movgt	r6, r3
 800a3a0:	2601      	movle	r6, #1
 800a3a2:	4456      	add	r6, sl
 800a3a4:	2700      	movs	r7, #0
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f000 fe7e 	bl	800b0ac <__lshift>
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	4681      	mov	r9, r0
 800a3b4:	f000 fee6 	bl	800b184 <__mcmp>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	dcb0      	bgt.n	800a31e <_dtoa_r+0xa5e>
 800a3bc:	d102      	bne.n	800a3c4 <_dtoa_r+0xb04>
 800a3be:	f018 0f01 	tst.w	r8, #1
 800a3c2:	d1ac      	bne.n	800a31e <_dtoa_r+0xa5e>
 800a3c4:	4633      	mov	r3, r6
 800a3c6:	461e      	mov	r6, r3
 800a3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3cc:	2a30      	cmp	r2, #48	@ 0x30
 800a3ce:	d0fa      	beq.n	800a3c6 <_dtoa_r+0xb06>
 800a3d0:	e5c2      	b.n	8009f58 <_dtoa_r+0x698>
 800a3d2:	459a      	cmp	sl, r3
 800a3d4:	d1a4      	bne.n	800a320 <_dtoa_r+0xa60>
 800a3d6:	9b04      	ldr	r3, [sp, #16]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	2331      	movs	r3, #49	@ 0x31
 800a3de:	f88a 3000 	strb.w	r3, [sl]
 800a3e2:	e5b9      	b.n	8009f58 <_dtoa_r+0x698>
 800a3e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a444 <_dtoa_r+0xb84>
 800a3ea:	b11b      	cbz	r3, 800a3f4 <_dtoa_r+0xb34>
 800a3ec:	f10a 0308 	add.w	r3, sl, #8
 800a3f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	4650      	mov	r0, sl
 800a3f6:	b019      	add	sp, #100	@ 0x64
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	f77f ae37 	ble.w	800a072 <_dtoa_r+0x7b2>
 800a404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a406:	930a      	str	r3, [sp, #40]	@ 0x28
 800a408:	2001      	movs	r0, #1
 800a40a:	e655      	b.n	800a0b8 <_dtoa_r+0x7f8>
 800a40c:	9b00      	ldr	r3, [sp, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f77f aed6 	ble.w	800a1c0 <_dtoa_r+0x900>
 800a414:	4656      	mov	r6, sl
 800a416:	4621      	mov	r1, r4
 800a418:	4648      	mov	r0, r9
 800a41a:	f7ff f9c7 	bl	80097ac <quorem>
 800a41e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a422:	f806 8b01 	strb.w	r8, [r6], #1
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	eba6 020a 	sub.w	r2, r6, sl
 800a42c:	4293      	cmp	r3, r2
 800a42e:	ddb3      	ble.n	800a398 <_dtoa_r+0xad8>
 800a430:	4649      	mov	r1, r9
 800a432:	2300      	movs	r3, #0
 800a434:	220a      	movs	r2, #10
 800a436:	4658      	mov	r0, fp
 800a438:	f000 fc42 	bl	800acc0 <__multadd>
 800a43c:	4681      	mov	r9, r0
 800a43e:	e7ea      	b.n	800a416 <_dtoa_r+0xb56>
 800a440:	0800ce6a 	.word	0x0800ce6a
 800a444:	0800cdee 	.word	0x0800cdee

0800a448 <_free_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	2900      	cmp	r1, #0
 800a44e:	d041      	beq.n	800a4d4 <_free_r+0x8c>
 800a450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a454:	1f0c      	subs	r4, r1, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfb8      	it	lt
 800a45a:	18e4      	addlt	r4, r4, r3
 800a45c:	f7fc fc24 	bl	8006ca8 <__malloc_lock>
 800a460:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d8 <_free_r+0x90>)
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	b933      	cbnz	r3, 800a474 <_free_r+0x2c>
 800a466:	6063      	str	r3, [r4, #4]
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	4628      	mov	r0, r5
 800a46c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a470:	f7fc bc20 	b.w	8006cb4 <__malloc_unlock>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d908      	bls.n	800a48a <_free_r+0x42>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	1821      	adds	r1, r4, r0
 800a47c:	428b      	cmp	r3, r1
 800a47e:	bf01      	itttt	eq
 800a480:	6819      	ldreq	r1, [r3, #0]
 800a482:	685b      	ldreq	r3, [r3, #4]
 800a484:	1809      	addeq	r1, r1, r0
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	e7ed      	b.n	800a466 <_free_r+0x1e>
 800a48a:	461a      	mov	r2, r3
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b10b      	cbz	r3, 800a494 <_free_r+0x4c>
 800a490:	42a3      	cmp	r3, r4
 800a492:	d9fa      	bls.n	800a48a <_free_r+0x42>
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	1850      	adds	r0, r2, r1
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d10b      	bne.n	800a4b4 <_free_r+0x6c>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	4401      	add	r1, r0
 800a4a0:	1850      	adds	r0, r2, r1
 800a4a2:	4283      	cmp	r3, r0
 800a4a4:	6011      	str	r1, [r2, #0]
 800a4a6:	d1e0      	bne.n	800a46a <_free_r+0x22>
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	6053      	str	r3, [r2, #4]
 800a4ae:	4408      	add	r0, r1
 800a4b0:	6010      	str	r0, [r2, #0]
 800a4b2:	e7da      	b.n	800a46a <_free_r+0x22>
 800a4b4:	d902      	bls.n	800a4bc <_free_r+0x74>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	602b      	str	r3, [r5, #0]
 800a4ba:	e7d6      	b.n	800a46a <_free_r+0x22>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	1821      	adds	r1, r4, r0
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf04      	itt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	bf04      	itt	eq
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	6054      	str	r4, [r2, #4]
 800a4d2:	e7ca      	b.n	800a46a <_free_r+0x22>
 800a4d4:	bd38      	pop	{r3, r4, r5, pc}
 800a4d6:	bf00      	nop
 800a4d8:	200092dc 	.word	0x200092dc

0800a4dc <rshift>:
 800a4dc:	6903      	ldr	r3, [r0, #16]
 800a4de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ea:	f100 0414 	add.w	r4, r0, #20
 800a4ee:	dd45      	ble.n	800a57c <rshift+0xa0>
 800a4f0:	f011 011f 	ands.w	r1, r1, #31
 800a4f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4fc:	d10c      	bne.n	800a518 <rshift+0x3c>
 800a4fe:	f100 0710 	add.w	r7, r0, #16
 800a502:	4629      	mov	r1, r5
 800a504:	42b1      	cmp	r1, r6
 800a506:	d334      	bcc.n	800a572 <rshift+0x96>
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	1eea      	subs	r2, r5, #3
 800a50e:	4296      	cmp	r6, r2
 800a510:	bf38      	it	cc
 800a512:	2300      	movcc	r3, #0
 800a514:	4423      	add	r3, r4
 800a516:	e015      	b.n	800a544 <rshift+0x68>
 800a518:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a51c:	f1c1 0820 	rsb	r8, r1, #32
 800a520:	40cf      	lsrs	r7, r1
 800a522:	f105 0e04 	add.w	lr, r5, #4
 800a526:	46a1      	mov	r9, r4
 800a528:	4576      	cmp	r6, lr
 800a52a:	46f4      	mov	ip, lr
 800a52c:	d815      	bhi.n	800a55a <rshift+0x7e>
 800a52e:	1a9a      	subs	r2, r3, r2
 800a530:	0092      	lsls	r2, r2, #2
 800a532:	3a04      	subs	r2, #4
 800a534:	3501      	adds	r5, #1
 800a536:	42ae      	cmp	r6, r5
 800a538:	bf38      	it	cc
 800a53a:	2200      	movcc	r2, #0
 800a53c:	18a3      	adds	r3, r4, r2
 800a53e:	50a7      	str	r7, [r4, r2]
 800a540:	b107      	cbz	r7, 800a544 <rshift+0x68>
 800a542:	3304      	adds	r3, #4
 800a544:	1b1a      	subs	r2, r3, r4
 800a546:	42a3      	cmp	r3, r4
 800a548:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a54c:	bf08      	it	eq
 800a54e:	2300      	moveq	r3, #0
 800a550:	6102      	str	r2, [r0, #16]
 800a552:	bf08      	it	eq
 800a554:	6143      	streq	r3, [r0, #20]
 800a556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a55a:	f8dc c000 	ldr.w	ip, [ip]
 800a55e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a562:	ea4c 0707 	orr.w	r7, ip, r7
 800a566:	f849 7b04 	str.w	r7, [r9], #4
 800a56a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a56e:	40cf      	lsrs	r7, r1
 800a570:	e7da      	b.n	800a528 <rshift+0x4c>
 800a572:	f851 cb04 	ldr.w	ip, [r1], #4
 800a576:	f847 cf04 	str.w	ip, [r7, #4]!
 800a57a:	e7c3      	b.n	800a504 <rshift+0x28>
 800a57c:	4623      	mov	r3, r4
 800a57e:	e7e1      	b.n	800a544 <rshift+0x68>

0800a580 <__hexdig_fun>:
 800a580:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a584:	2b09      	cmp	r3, #9
 800a586:	d802      	bhi.n	800a58e <__hexdig_fun+0xe>
 800a588:	3820      	subs	r0, #32
 800a58a:	b2c0      	uxtb	r0, r0
 800a58c:	4770      	bx	lr
 800a58e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a592:	2b05      	cmp	r3, #5
 800a594:	d801      	bhi.n	800a59a <__hexdig_fun+0x1a>
 800a596:	3847      	subs	r0, #71	@ 0x47
 800a598:	e7f7      	b.n	800a58a <__hexdig_fun+0xa>
 800a59a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a59e:	2b05      	cmp	r3, #5
 800a5a0:	d801      	bhi.n	800a5a6 <__hexdig_fun+0x26>
 800a5a2:	3827      	subs	r0, #39	@ 0x27
 800a5a4:	e7f1      	b.n	800a58a <__hexdig_fun+0xa>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	4770      	bx	lr
	...

0800a5ac <__gethex>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	468a      	mov	sl, r1
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	680b      	ldr	r3, [r1, #0]
 800a5b8:	9001      	str	r0, [sp, #4]
 800a5ba:	4690      	mov	r8, r2
 800a5bc:	1c9c      	adds	r4, r3, #2
 800a5be:	46a1      	mov	r9, r4
 800a5c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5c4:	2830      	cmp	r0, #48	@ 0x30
 800a5c6:	d0fa      	beq.n	800a5be <__gethex+0x12>
 800a5c8:	eba9 0303 	sub.w	r3, r9, r3
 800a5cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5d0:	f7ff ffd6 	bl	800a580 <__hexdig_fun>
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d168      	bne.n	800a6ac <__gethex+0x100>
 800a5da:	49a0      	ldr	r1, [pc, #640]	@ (800a85c <__gethex+0x2b0>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4648      	mov	r0, r9
 800a5e0:	f7fe faba 	bl	8008b58 <strncmp>
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d167      	bne.n	800a6ba <__gethex+0x10e>
 800a5ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5ee:	4626      	mov	r6, r4
 800a5f0:	f7ff ffc6 	bl	800a580 <__hexdig_fun>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d062      	beq.n	800a6be <__gethex+0x112>
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	7818      	ldrb	r0, [r3, #0]
 800a5fc:	2830      	cmp	r0, #48	@ 0x30
 800a5fe:	4699      	mov	r9, r3
 800a600:	f103 0301 	add.w	r3, r3, #1
 800a604:	d0f9      	beq.n	800a5fa <__gethex+0x4e>
 800a606:	f7ff ffbb 	bl	800a580 <__hexdig_fun>
 800a60a:	fab0 f580 	clz	r5, r0
 800a60e:	096d      	lsrs	r5, r5, #5
 800a610:	f04f 0b01 	mov.w	fp, #1
 800a614:	464a      	mov	r2, r9
 800a616:	4616      	mov	r6, r2
 800a618:	3201      	adds	r2, #1
 800a61a:	7830      	ldrb	r0, [r6, #0]
 800a61c:	f7ff ffb0 	bl	800a580 <__hexdig_fun>
 800a620:	2800      	cmp	r0, #0
 800a622:	d1f8      	bne.n	800a616 <__gethex+0x6a>
 800a624:	498d      	ldr	r1, [pc, #564]	@ (800a85c <__gethex+0x2b0>)
 800a626:	2201      	movs	r2, #1
 800a628:	4630      	mov	r0, r6
 800a62a:	f7fe fa95 	bl	8008b58 <strncmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d13f      	bne.n	800a6b2 <__gethex+0x106>
 800a632:	b944      	cbnz	r4, 800a646 <__gethex+0x9a>
 800a634:	1c74      	adds	r4, r6, #1
 800a636:	4622      	mov	r2, r4
 800a638:	4616      	mov	r6, r2
 800a63a:	3201      	adds	r2, #1
 800a63c:	7830      	ldrb	r0, [r6, #0]
 800a63e:	f7ff ff9f 	bl	800a580 <__hexdig_fun>
 800a642:	2800      	cmp	r0, #0
 800a644:	d1f8      	bne.n	800a638 <__gethex+0x8c>
 800a646:	1ba4      	subs	r4, r4, r6
 800a648:	00a7      	lsls	r7, r4, #2
 800a64a:	7833      	ldrb	r3, [r6, #0]
 800a64c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a650:	2b50      	cmp	r3, #80	@ 0x50
 800a652:	d13e      	bne.n	800a6d2 <__gethex+0x126>
 800a654:	7873      	ldrb	r3, [r6, #1]
 800a656:	2b2b      	cmp	r3, #43	@ 0x2b
 800a658:	d033      	beq.n	800a6c2 <__gethex+0x116>
 800a65a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a65c:	d034      	beq.n	800a6c8 <__gethex+0x11c>
 800a65e:	1c71      	adds	r1, r6, #1
 800a660:	2400      	movs	r4, #0
 800a662:	7808      	ldrb	r0, [r1, #0]
 800a664:	f7ff ff8c 	bl	800a580 <__hexdig_fun>
 800a668:	1e43      	subs	r3, r0, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b18      	cmp	r3, #24
 800a66e:	d830      	bhi.n	800a6d2 <__gethex+0x126>
 800a670:	f1a0 0210 	sub.w	r2, r0, #16
 800a674:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a678:	f7ff ff82 	bl	800a580 <__hexdig_fun>
 800a67c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a680:	fa5f fc8c 	uxtb.w	ip, ip
 800a684:	f1bc 0f18 	cmp.w	ip, #24
 800a688:	f04f 030a 	mov.w	r3, #10
 800a68c:	d91e      	bls.n	800a6cc <__gethex+0x120>
 800a68e:	b104      	cbz	r4, 800a692 <__gethex+0xe6>
 800a690:	4252      	negs	r2, r2
 800a692:	4417      	add	r7, r2
 800a694:	f8ca 1000 	str.w	r1, [sl]
 800a698:	b1ed      	cbz	r5, 800a6d6 <__gethex+0x12a>
 800a69a:	f1bb 0f00 	cmp.w	fp, #0
 800a69e:	bf0c      	ite	eq
 800a6a0:	2506      	moveq	r5, #6
 800a6a2:	2500      	movne	r5, #0
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	b005      	add	sp, #20
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	2500      	movs	r5, #0
 800a6ae:	462c      	mov	r4, r5
 800a6b0:	e7b0      	b.n	800a614 <__gethex+0x68>
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	d1c7      	bne.n	800a646 <__gethex+0x9a>
 800a6b6:	4627      	mov	r7, r4
 800a6b8:	e7c7      	b.n	800a64a <__gethex+0x9e>
 800a6ba:	464e      	mov	r6, r9
 800a6bc:	462f      	mov	r7, r5
 800a6be:	2501      	movs	r5, #1
 800a6c0:	e7c3      	b.n	800a64a <__gethex+0x9e>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	1cb1      	adds	r1, r6, #2
 800a6c6:	e7cc      	b.n	800a662 <__gethex+0xb6>
 800a6c8:	2401      	movs	r4, #1
 800a6ca:	e7fb      	b.n	800a6c4 <__gethex+0x118>
 800a6cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a6d0:	e7ce      	b.n	800a670 <__gethex+0xc4>
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	e7de      	b.n	800a694 <__gethex+0xe8>
 800a6d6:	eba6 0309 	sub.w	r3, r6, r9
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4629      	mov	r1, r5
 800a6de:	2b07      	cmp	r3, #7
 800a6e0:	dc0a      	bgt.n	800a6f8 <__gethex+0x14c>
 800a6e2:	9801      	ldr	r0, [sp, #4]
 800a6e4:	f000 fa8a 	bl	800abfc <_Balloc>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	b940      	cbnz	r0, 800a6fe <__gethex+0x152>
 800a6ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a860 <__gethex+0x2b4>)
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	21e4      	movs	r1, #228	@ 0xe4
 800a6f2:	485c      	ldr	r0, [pc, #368]	@ (800a864 <__gethex+0x2b8>)
 800a6f4:	f001 fdee 	bl	800c2d4 <__assert_func>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	105b      	asrs	r3, r3, #1
 800a6fc:	e7ef      	b.n	800a6de <__gethex+0x132>
 800a6fe:	f100 0a14 	add.w	sl, r0, #20
 800a702:	2300      	movs	r3, #0
 800a704:	4655      	mov	r5, sl
 800a706:	469b      	mov	fp, r3
 800a708:	45b1      	cmp	r9, r6
 800a70a:	d337      	bcc.n	800a77c <__gethex+0x1d0>
 800a70c:	f845 bb04 	str.w	fp, [r5], #4
 800a710:	eba5 050a 	sub.w	r5, r5, sl
 800a714:	10ad      	asrs	r5, r5, #2
 800a716:	6125      	str	r5, [r4, #16]
 800a718:	4658      	mov	r0, fp
 800a71a:	f000 fb61 	bl	800ade0 <__hi0bits>
 800a71e:	016d      	lsls	r5, r5, #5
 800a720:	f8d8 6000 	ldr.w	r6, [r8]
 800a724:	1a2d      	subs	r5, r5, r0
 800a726:	42b5      	cmp	r5, r6
 800a728:	dd54      	ble.n	800a7d4 <__gethex+0x228>
 800a72a:	1bad      	subs	r5, r5, r6
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fef5 	bl	800b51e <__any_on>
 800a734:	4681      	mov	r9, r0
 800a736:	b178      	cbz	r0, 800a758 <__gethex+0x1ac>
 800a738:	1e6b      	subs	r3, r5, #1
 800a73a:	1159      	asrs	r1, r3, #5
 800a73c:	f003 021f 	and.w	r2, r3, #31
 800a740:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a744:	f04f 0901 	mov.w	r9, #1
 800a748:	fa09 f202 	lsl.w	r2, r9, r2
 800a74c:	420a      	tst	r2, r1
 800a74e:	d003      	beq.n	800a758 <__gethex+0x1ac>
 800a750:	454b      	cmp	r3, r9
 800a752:	dc36      	bgt.n	800a7c2 <__gethex+0x216>
 800a754:	f04f 0902 	mov.w	r9, #2
 800a758:	4629      	mov	r1, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff febe 	bl	800a4dc <rshift>
 800a760:	442f      	add	r7, r5
 800a762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a766:	42bb      	cmp	r3, r7
 800a768:	da42      	bge.n	800a7f0 <__gethex+0x244>
 800a76a:	9801      	ldr	r0, [sp, #4]
 800a76c:	4621      	mov	r1, r4
 800a76e:	f000 fa85 	bl	800ac7c <_Bfree>
 800a772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a774:	2300      	movs	r3, #0
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	25a3      	movs	r5, #163	@ 0xa3
 800a77a:	e793      	b.n	800a6a4 <__gethex+0xf8>
 800a77c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a780:	2a2e      	cmp	r2, #46	@ 0x2e
 800a782:	d012      	beq.n	800a7aa <__gethex+0x1fe>
 800a784:	2b20      	cmp	r3, #32
 800a786:	d104      	bne.n	800a792 <__gethex+0x1e6>
 800a788:	f845 bb04 	str.w	fp, [r5], #4
 800a78c:	f04f 0b00 	mov.w	fp, #0
 800a790:	465b      	mov	r3, fp
 800a792:	7830      	ldrb	r0, [r6, #0]
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	f7ff fef3 	bl	800a580 <__hexdig_fun>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	f000 000f 	and.w	r0, r0, #15
 800a7a0:	4098      	lsls	r0, r3
 800a7a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	e7ae      	b.n	800a708 <__gethex+0x15c>
 800a7aa:	45b1      	cmp	r9, r6
 800a7ac:	d8ea      	bhi.n	800a784 <__gethex+0x1d8>
 800a7ae:	492b      	ldr	r1, [pc, #172]	@ (800a85c <__gethex+0x2b0>)
 800a7b0:	9303      	str	r3, [sp, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7fe f9cf 	bl	8008b58 <strncmp>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1e1      	bne.n	800a784 <__gethex+0x1d8>
 800a7c0:	e7a2      	b.n	800a708 <__gethex+0x15c>
 800a7c2:	1ea9      	subs	r1, r5, #2
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 feaa 	bl	800b51e <__any_on>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d0c2      	beq.n	800a754 <__gethex+0x1a8>
 800a7ce:	f04f 0903 	mov.w	r9, #3
 800a7d2:	e7c1      	b.n	800a758 <__gethex+0x1ac>
 800a7d4:	da09      	bge.n	800a7ea <__gethex+0x23e>
 800a7d6:	1b75      	subs	r5, r6, r5
 800a7d8:	4621      	mov	r1, r4
 800a7da:	9801      	ldr	r0, [sp, #4]
 800a7dc:	462a      	mov	r2, r5
 800a7de:	f000 fc65 	bl	800b0ac <__lshift>
 800a7e2:	1b7f      	subs	r7, r7, r5
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	f100 0a14 	add.w	sl, r0, #20
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	e7b8      	b.n	800a762 <__gethex+0x1b6>
 800a7f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7f4:	42bd      	cmp	r5, r7
 800a7f6:	dd6f      	ble.n	800a8d8 <__gethex+0x32c>
 800a7f8:	1bed      	subs	r5, r5, r7
 800a7fa:	42ae      	cmp	r6, r5
 800a7fc:	dc34      	bgt.n	800a868 <__gethex+0x2bc>
 800a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d022      	beq.n	800a84c <__gethex+0x2a0>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d024      	beq.n	800a854 <__gethex+0x2a8>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d115      	bne.n	800a83a <__gethex+0x28e>
 800a80e:	42ae      	cmp	r6, r5
 800a810:	d113      	bne.n	800a83a <__gethex+0x28e>
 800a812:	2e01      	cmp	r6, #1
 800a814:	d10b      	bne.n	800a82e <__gethex+0x282>
 800a816:	9a02      	ldr	r2, [sp, #8]
 800a818:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	2301      	movs	r3, #1
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	f8ca 3000 	str.w	r3, [sl]
 800a826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a828:	2562      	movs	r5, #98	@ 0x62
 800a82a:	601c      	str	r4, [r3, #0]
 800a82c:	e73a      	b.n	800a6a4 <__gethex+0xf8>
 800a82e:	1e71      	subs	r1, r6, #1
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fe74 	bl	800b51e <__any_on>
 800a836:	2800      	cmp	r0, #0
 800a838:	d1ed      	bne.n	800a816 <__gethex+0x26a>
 800a83a:	9801      	ldr	r0, [sp, #4]
 800a83c:	4621      	mov	r1, r4
 800a83e:	f000 fa1d 	bl	800ac7c <_Bfree>
 800a842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a844:	2300      	movs	r3, #0
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	2550      	movs	r5, #80	@ 0x50
 800a84a:	e72b      	b.n	800a6a4 <__gethex+0xf8>
 800a84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f3      	bne.n	800a83a <__gethex+0x28e>
 800a852:	e7e0      	b.n	800a816 <__gethex+0x26a>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1dd      	bne.n	800a816 <__gethex+0x26a>
 800a85a:	e7ee      	b.n	800a83a <__gethex+0x28e>
 800a85c:	0800cba7 	.word	0x0800cba7
 800a860:	0800ce6a 	.word	0x0800ce6a
 800a864:	0800ce7b 	.word	0x0800ce7b
 800a868:	1e6f      	subs	r7, r5, #1
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	d130      	bne.n	800a8d2 <__gethex+0x326>
 800a870:	b127      	cbz	r7, 800a87c <__gethex+0x2d0>
 800a872:	4639      	mov	r1, r7
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fe52 	bl	800b51e <__any_on>
 800a87a:	4681      	mov	r9, r0
 800a87c:	117a      	asrs	r2, r7, #5
 800a87e:	2301      	movs	r3, #1
 800a880:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a884:	f007 071f 	and.w	r7, r7, #31
 800a888:	40bb      	lsls	r3, r7
 800a88a:	4213      	tst	r3, r2
 800a88c:	4629      	mov	r1, r5
 800a88e:	4620      	mov	r0, r4
 800a890:	bf18      	it	ne
 800a892:	f049 0902 	orrne.w	r9, r9, #2
 800a896:	f7ff fe21 	bl	800a4dc <rshift>
 800a89a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a89e:	1b76      	subs	r6, r6, r5
 800a8a0:	2502      	movs	r5, #2
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	d047      	beq.n	800a938 <__gethex+0x38c>
 800a8a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d015      	beq.n	800a8dc <__gethex+0x330>
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d017      	beq.n	800a8e4 <__gethex+0x338>
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d109      	bne.n	800a8cc <__gethex+0x320>
 800a8b8:	f019 0f02 	tst.w	r9, #2
 800a8bc:	d006      	beq.n	800a8cc <__gethex+0x320>
 800a8be:	f8da 3000 	ldr.w	r3, [sl]
 800a8c2:	ea49 0903 	orr.w	r9, r9, r3
 800a8c6:	f019 0f01 	tst.w	r9, #1
 800a8ca:	d10e      	bne.n	800a8ea <__gethex+0x33e>
 800a8cc:	f045 0510 	orr.w	r5, r5, #16
 800a8d0:	e032      	b.n	800a938 <__gethex+0x38c>
 800a8d2:	f04f 0901 	mov.w	r9, #1
 800a8d6:	e7d1      	b.n	800a87c <__gethex+0x2d0>
 800a8d8:	2501      	movs	r5, #1
 800a8da:	e7e2      	b.n	800a8a2 <__gethex+0x2f6>
 800a8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8de:	f1c3 0301 	rsb	r3, r3, #1
 800a8e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0f0      	beq.n	800a8cc <__gethex+0x320>
 800a8ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8ee:	f104 0314 	add.w	r3, r4, #20
 800a8f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a908:	d01b      	beq.n	800a942 <__gethex+0x396>
 800a90a:	3201      	adds	r2, #1
 800a90c:	6002      	str	r2, [r0, #0]
 800a90e:	2d02      	cmp	r5, #2
 800a910:	f104 0314 	add.w	r3, r4, #20
 800a914:	d13c      	bne.n	800a990 <__gethex+0x3e4>
 800a916:	f8d8 2000 	ldr.w	r2, [r8]
 800a91a:	3a01      	subs	r2, #1
 800a91c:	42b2      	cmp	r2, r6
 800a91e:	d109      	bne.n	800a934 <__gethex+0x388>
 800a920:	1171      	asrs	r1, r6, #5
 800a922:	2201      	movs	r2, #1
 800a924:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a928:	f006 061f 	and.w	r6, r6, #31
 800a92c:	fa02 f606 	lsl.w	r6, r2, r6
 800a930:	421e      	tst	r6, r3
 800a932:	d13a      	bne.n	800a9aa <__gethex+0x3fe>
 800a934:	f045 0520 	orr.w	r5, r5, #32
 800a938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93a:	601c      	str	r4, [r3, #0]
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	601f      	str	r7, [r3, #0]
 800a940:	e6b0      	b.n	800a6a4 <__gethex+0xf8>
 800a942:	4299      	cmp	r1, r3
 800a944:	f843 cc04 	str.w	ip, [r3, #-4]
 800a948:	d8d9      	bhi.n	800a8fe <__gethex+0x352>
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	459b      	cmp	fp, r3
 800a94e:	db17      	blt.n	800a980 <__gethex+0x3d4>
 800a950:	6861      	ldr	r1, [r4, #4]
 800a952:	9801      	ldr	r0, [sp, #4]
 800a954:	3101      	adds	r1, #1
 800a956:	f000 f951 	bl	800abfc <_Balloc>
 800a95a:	4681      	mov	r9, r0
 800a95c:	b918      	cbnz	r0, 800a966 <__gethex+0x3ba>
 800a95e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c8 <__gethex+0x41c>)
 800a960:	4602      	mov	r2, r0
 800a962:	2184      	movs	r1, #132	@ 0x84
 800a964:	e6c5      	b.n	800a6f2 <__gethex+0x146>
 800a966:	6922      	ldr	r2, [r4, #16]
 800a968:	3202      	adds	r2, #2
 800a96a:	f104 010c 	add.w	r1, r4, #12
 800a96e:	0092      	lsls	r2, r2, #2
 800a970:	300c      	adds	r0, #12
 800a972:	f7fe fef6 	bl	8009762 <memcpy>
 800a976:	4621      	mov	r1, r4
 800a978:	9801      	ldr	r0, [sp, #4]
 800a97a:	f000 f97f 	bl	800ac7c <_Bfree>
 800a97e:	464c      	mov	r4, r9
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a988:	6122      	str	r2, [r4, #16]
 800a98a:	2201      	movs	r2, #1
 800a98c:	615a      	str	r2, [r3, #20]
 800a98e:	e7be      	b.n	800a90e <__gethex+0x362>
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	455a      	cmp	r2, fp
 800a994:	dd0b      	ble.n	800a9ae <__gethex+0x402>
 800a996:	2101      	movs	r1, #1
 800a998:	4620      	mov	r0, r4
 800a99a:	f7ff fd9f 	bl	800a4dc <rshift>
 800a99e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9a2:	3701      	adds	r7, #1
 800a9a4:	42bb      	cmp	r3, r7
 800a9a6:	f6ff aee0 	blt.w	800a76a <__gethex+0x1be>
 800a9aa:	2501      	movs	r5, #1
 800a9ac:	e7c2      	b.n	800a934 <__gethex+0x388>
 800a9ae:	f016 061f 	ands.w	r6, r6, #31
 800a9b2:	d0fa      	beq.n	800a9aa <__gethex+0x3fe>
 800a9b4:	4453      	add	r3, sl
 800a9b6:	f1c6 0620 	rsb	r6, r6, #32
 800a9ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9be:	f000 fa0f 	bl	800ade0 <__hi0bits>
 800a9c2:	42b0      	cmp	r0, r6
 800a9c4:	dbe7      	blt.n	800a996 <__gethex+0x3ea>
 800a9c6:	e7f0      	b.n	800a9aa <__gethex+0x3fe>
 800a9c8:	0800ce6a 	.word	0x0800ce6a

0800a9cc <L_shift>:
 800a9cc:	f1c2 0208 	rsb	r2, r2, #8
 800a9d0:	0092      	lsls	r2, r2, #2
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	f1c2 0620 	rsb	r6, r2, #32
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	6804      	ldr	r4, [r0, #0]
 800a9dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a9e0:	432c      	orrs	r4, r5
 800a9e2:	40d3      	lsrs	r3, r2
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9ea:	4288      	cmp	r0, r1
 800a9ec:	d3f4      	bcc.n	800a9d8 <L_shift+0xc>
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__match>:
 800a9f0:	b530      	push	{r4, r5, lr}
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fa:	b914      	cbnz	r4, 800aa02 <__match+0x12>
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	bd30      	pop	{r4, r5, pc}
 800aa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa0a:	2d19      	cmp	r5, #25
 800aa0c:	bf98      	it	ls
 800aa0e:	3220      	addls	r2, #32
 800aa10:	42a2      	cmp	r2, r4
 800aa12:	d0f0      	beq.n	800a9f6 <__match+0x6>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7f3      	b.n	800aa00 <__match+0x10>

0800aa18 <__hexnan>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	680b      	ldr	r3, [r1, #0]
 800aa1e:	6801      	ldr	r1, [r0, #0]
 800aa20:	115e      	asrs	r6, r3, #5
 800aa22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa26:	f013 031f 	ands.w	r3, r3, #31
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	bf18      	it	ne
 800aa2e:	3604      	addne	r6, #4
 800aa30:	2500      	movs	r5, #0
 800aa32:	1f37      	subs	r7, r6, #4
 800aa34:	4682      	mov	sl, r0
 800aa36:	4690      	mov	r8, r2
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa3e:	46b9      	mov	r9, r7
 800aa40:	463c      	mov	r4, r7
 800aa42:	9502      	str	r5, [sp, #8]
 800aa44:	46ab      	mov	fp, r5
 800aa46:	784a      	ldrb	r2, [r1, #1]
 800aa48:	1c4b      	adds	r3, r1, #1
 800aa4a:	9303      	str	r3, [sp, #12]
 800aa4c:	b342      	cbz	r2, 800aaa0 <__hexnan+0x88>
 800aa4e:	4610      	mov	r0, r2
 800aa50:	9105      	str	r1, [sp, #20]
 800aa52:	9204      	str	r2, [sp, #16]
 800aa54:	f7ff fd94 	bl	800a580 <__hexdig_fun>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d151      	bne.n	800ab00 <__hexnan+0xe8>
 800aa5c:	9a04      	ldr	r2, [sp, #16]
 800aa5e:	9905      	ldr	r1, [sp, #20]
 800aa60:	2a20      	cmp	r2, #32
 800aa62:	d818      	bhi.n	800aa96 <__hexnan+0x7e>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	459b      	cmp	fp, r3
 800aa68:	dd13      	ble.n	800aa92 <__hexnan+0x7a>
 800aa6a:	454c      	cmp	r4, r9
 800aa6c:	d206      	bcs.n	800aa7c <__hexnan+0x64>
 800aa6e:	2d07      	cmp	r5, #7
 800aa70:	dc04      	bgt.n	800aa7c <__hexnan+0x64>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4649      	mov	r1, r9
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff ffa8 	bl	800a9cc <L_shift>
 800aa7c:	4544      	cmp	r4, r8
 800aa7e:	d952      	bls.n	800ab26 <__hexnan+0x10e>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f1a4 0904 	sub.w	r9, r4, #4
 800aa86:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa8e:	464c      	mov	r4, r9
 800aa90:	461d      	mov	r5, r3
 800aa92:	9903      	ldr	r1, [sp, #12]
 800aa94:	e7d7      	b.n	800aa46 <__hexnan+0x2e>
 800aa96:	2a29      	cmp	r2, #41	@ 0x29
 800aa98:	d157      	bne.n	800ab4a <__hexnan+0x132>
 800aa9a:	3102      	adds	r1, #2
 800aa9c:	f8ca 1000 	str.w	r1, [sl]
 800aaa0:	f1bb 0f00 	cmp.w	fp, #0
 800aaa4:	d051      	beq.n	800ab4a <__hexnan+0x132>
 800aaa6:	454c      	cmp	r4, r9
 800aaa8:	d206      	bcs.n	800aab8 <__hexnan+0xa0>
 800aaaa:	2d07      	cmp	r5, #7
 800aaac:	dc04      	bgt.n	800aab8 <__hexnan+0xa0>
 800aaae:	462a      	mov	r2, r5
 800aab0:	4649      	mov	r1, r9
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7ff ff8a 	bl	800a9cc <L_shift>
 800aab8:	4544      	cmp	r4, r8
 800aaba:	d936      	bls.n	800ab2a <__hexnan+0x112>
 800aabc:	f1a8 0204 	sub.w	r2, r8, #4
 800aac0:	4623      	mov	r3, r4
 800aac2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aac6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaca:	429f      	cmp	r7, r3
 800aacc:	d2f9      	bcs.n	800aac2 <__hexnan+0xaa>
 800aace:	1b3b      	subs	r3, r7, r4
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	3401      	adds	r4, #1
 800aad8:	3e03      	subs	r6, #3
 800aada:	42b4      	cmp	r4, r6
 800aadc:	bf88      	it	hi
 800aade:	2304      	movhi	r3, #4
 800aae0:	4443      	add	r3, r8
 800aae2:	2200      	movs	r2, #0
 800aae4:	f843 2b04 	str.w	r2, [r3], #4
 800aae8:	429f      	cmp	r7, r3
 800aaea:	d2fb      	bcs.n	800aae4 <__hexnan+0xcc>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	b91b      	cbnz	r3, 800aaf8 <__hexnan+0xe0>
 800aaf0:	4547      	cmp	r7, r8
 800aaf2:	d128      	bne.n	800ab46 <__hexnan+0x12e>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	603b      	str	r3, [r7, #0]
 800aaf8:	2005      	movs	r0, #5
 800aafa:	b007      	add	sp, #28
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	3501      	adds	r5, #1
 800ab02:	2d08      	cmp	r5, #8
 800ab04:	f10b 0b01 	add.w	fp, fp, #1
 800ab08:	dd06      	ble.n	800ab18 <__hexnan+0x100>
 800ab0a:	4544      	cmp	r4, r8
 800ab0c:	d9c1      	bls.n	800aa92 <__hexnan+0x7a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab14:	2501      	movs	r5, #1
 800ab16:	3c04      	subs	r4, #4
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	f000 000f 	and.w	r0, r0, #15
 800ab1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	e7b5      	b.n	800aa92 <__hexnan+0x7a>
 800ab26:	2508      	movs	r5, #8
 800ab28:	e7b3      	b.n	800aa92 <__hexnan+0x7a>
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0dd      	beq.n	800aaec <__hexnan+0xd4>
 800ab30:	f1c3 0320 	rsb	r3, r3, #32
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	40da      	lsrs	r2, r3
 800ab3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab44:	e7d2      	b.n	800aaec <__hexnan+0xd4>
 800ab46:	3f04      	subs	r7, #4
 800ab48:	e7d0      	b.n	800aaec <__hexnan+0xd4>
 800ab4a:	2004      	movs	r0, #4
 800ab4c:	e7d5      	b.n	800aafa <__hexnan+0xe2>
	...

0800ab50 <_findenv_r>:
 800ab50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800abc4 <_findenv_r+0x74>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	4689      	mov	r9, r1
 800ab5c:	4617      	mov	r7, r2
 800ab5e:	f001 fbeb 	bl	800c338 <__env_lock>
 800ab62:	f8da 4000 	ldr.w	r4, [sl]
 800ab66:	b134      	cbz	r4, 800ab76 <_findenv_r+0x26>
 800ab68:	464b      	mov	r3, r9
 800ab6a:	4698      	mov	r8, r3
 800ab6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab70:	b13a      	cbz	r2, 800ab82 <_findenv_r+0x32>
 800ab72:	2a3d      	cmp	r2, #61	@ 0x3d
 800ab74:	d1f9      	bne.n	800ab6a <_findenv_r+0x1a>
 800ab76:	4630      	mov	r0, r6
 800ab78:	f001 fbe4 	bl	800c344 <__env_unlock>
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab82:	eba8 0809 	sub.w	r8, r8, r9
 800ab86:	46a3      	mov	fp, r4
 800ab88:	f854 0b04 	ldr.w	r0, [r4], #4
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d0f2      	beq.n	800ab76 <_findenv_r+0x26>
 800ab90:	4642      	mov	r2, r8
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7fd ffe0 	bl	8008b58 <strncmp>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d1f4      	bne.n	800ab86 <_findenv_r+0x36>
 800ab9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aba0:	eb03 0508 	add.w	r5, r3, r8
 800aba4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aba8:	2b3d      	cmp	r3, #61	@ 0x3d
 800abaa:	d1ec      	bne.n	800ab86 <_findenv_r+0x36>
 800abac:	f8da 3000 	ldr.w	r3, [sl]
 800abb0:	ebab 0303 	sub.w	r3, fp, r3
 800abb4:	109b      	asrs	r3, r3, #2
 800abb6:	4630      	mov	r0, r6
 800abb8:	603b      	str	r3, [r7, #0]
 800abba:	f001 fbc3 	bl	800c344 <__env_unlock>
 800abbe:	1c68      	adds	r0, r5, #1
 800abc0:	e7dd      	b.n	800ab7e <_findenv_r+0x2e>
 800abc2:	bf00      	nop
 800abc4:	20000004 	.word	0x20000004

0800abc8 <_getenv_r>:
 800abc8:	b507      	push	{r0, r1, r2, lr}
 800abca:	aa01      	add	r2, sp, #4
 800abcc:	f7ff ffc0 	bl	800ab50 <_findenv_r>
 800abd0:	b003      	add	sp, #12
 800abd2:	f85d fb04 	ldr.w	pc, [sp], #4

0800abd6 <__ascii_mbtowc>:
 800abd6:	b082      	sub	sp, #8
 800abd8:	b901      	cbnz	r1, 800abdc <__ascii_mbtowc+0x6>
 800abda:	a901      	add	r1, sp, #4
 800abdc:	b142      	cbz	r2, 800abf0 <__ascii_mbtowc+0x1a>
 800abde:	b14b      	cbz	r3, 800abf4 <__ascii_mbtowc+0x1e>
 800abe0:	7813      	ldrb	r3, [r2, #0]
 800abe2:	600b      	str	r3, [r1, #0]
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	1e10      	subs	r0, r2, #0
 800abe8:	bf18      	it	ne
 800abea:	2001      	movne	r0, #1
 800abec:	b002      	add	sp, #8
 800abee:	4770      	bx	lr
 800abf0:	4610      	mov	r0, r2
 800abf2:	e7fb      	b.n	800abec <__ascii_mbtowc+0x16>
 800abf4:	f06f 0001 	mvn.w	r0, #1
 800abf8:	e7f8      	b.n	800abec <__ascii_mbtowc+0x16>
	...

0800abfc <_Balloc>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	69c6      	ldr	r6, [r0, #28]
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	b976      	cbnz	r6, 800ac24 <_Balloc+0x28>
 800ac06:	2010      	movs	r0, #16
 800ac08:	f7fb ff9c 	bl	8006b44 <malloc>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	61e0      	str	r0, [r4, #28]
 800ac10:	b920      	cbnz	r0, 800ac1c <_Balloc+0x20>
 800ac12:	4b18      	ldr	r3, [pc, #96]	@ (800ac74 <_Balloc+0x78>)
 800ac14:	4818      	ldr	r0, [pc, #96]	@ (800ac78 <_Balloc+0x7c>)
 800ac16:	216b      	movs	r1, #107	@ 0x6b
 800ac18:	f001 fb5c 	bl	800c2d4 <__assert_func>
 800ac1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac20:	6006      	str	r6, [r0, #0]
 800ac22:	60c6      	str	r6, [r0, #12]
 800ac24:	69e6      	ldr	r6, [r4, #28]
 800ac26:	68f3      	ldr	r3, [r6, #12]
 800ac28:	b183      	cbz	r3, 800ac4c <_Balloc+0x50>
 800ac2a:	69e3      	ldr	r3, [r4, #28]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac32:	b9b8      	cbnz	r0, 800ac64 <_Balloc+0x68>
 800ac34:	2101      	movs	r1, #1
 800ac36:	fa01 f605 	lsl.w	r6, r1, r5
 800ac3a:	1d72      	adds	r2, r6, #5
 800ac3c:	0092      	lsls	r2, r2, #2
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f001 fb66 	bl	800c310 <_calloc_r>
 800ac44:	b160      	cbz	r0, 800ac60 <_Balloc+0x64>
 800ac46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac4a:	e00e      	b.n	800ac6a <_Balloc+0x6e>
 800ac4c:	2221      	movs	r2, #33	@ 0x21
 800ac4e:	2104      	movs	r1, #4
 800ac50:	4620      	mov	r0, r4
 800ac52:	f001 fb5d 	bl	800c310 <_calloc_r>
 800ac56:	69e3      	ldr	r3, [r4, #28]
 800ac58:	60f0      	str	r0, [r6, #12]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e4      	bne.n	800ac2a <_Balloc+0x2e>
 800ac60:	2000      	movs	r0, #0
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	6802      	ldr	r2, [r0, #0]
 800ac66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac70:	e7f7      	b.n	800ac62 <_Balloc+0x66>
 800ac72:	bf00      	nop
 800ac74:	0800cdfb 	.word	0x0800cdfb
 800ac78:	0800cedb 	.word	0x0800cedb

0800ac7c <_Bfree>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	69c6      	ldr	r6, [r0, #28]
 800ac80:	4605      	mov	r5, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	b976      	cbnz	r6, 800aca4 <_Bfree+0x28>
 800ac86:	2010      	movs	r0, #16
 800ac88:	f7fb ff5c 	bl	8006b44 <malloc>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	61e8      	str	r0, [r5, #28]
 800ac90:	b920      	cbnz	r0, 800ac9c <_Bfree+0x20>
 800ac92:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <_Bfree+0x3c>)
 800ac94:	4809      	ldr	r0, [pc, #36]	@ (800acbc <_Bfree+0x40>)
 800ac96:	218f      	movs	r1, #143	@ 0x8f
 800ac98:	f001 fb1c 	bl	800c2d4 <__assert_func>
 800ac9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca0:	6006      	str	r6, [r0, #0]
 800aca2:	60c6      	str	r6, [r0, #12]
 800aca4:	b13c      	cbz	r4, 800acb6 <_Bfree+0x3a>
 800aca6:	69eb      	ldr	r3, [r5, #28]
 800aca8:	6862      	ldr	r2, [r4, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acb0:	6021      	str	r1, [r4, #0]
 800acb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	0800cdfb 	.word	0x0800cdfb
 800acbc:	0800cedb 	.word	0x0800cedb

0800acc0 <__multadd>:
 800acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc4:	690d      	ldr	r5, [r1, #16]
 800acc6:	4607      	mov	r7, r0
 800acc8:	460c      	mov	r4, r1
 800acca:	461e      	mov	r6, r3
 800accc:	f101 0c14 	add.w	ip, r1, #20
 800acd0:	2000      	movs	r0, #0
 800acd2:	f8dc 3000 	ldr.w	r3, [ip]
 800acd6:	b299      	uxth	r1, r3
 800acd8:	fb02 6101 	mla	r1, r2, r1, r6
 800acdc:	0c1e      	lsrs	r6, r3, #16
 800acde:	0c0b      	lsrs	r3, r1, #16
 800ace0:	fb02 3306 	mla	r3, r2, r6, r3
 800ace4:	b289      	uxth	r1, r1
 800ace6:	3001      	adds	r0, #1
 800ace8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acec:	4285      	cmp	r5, r0
 800acee:	f84c 1b04 	str.w	r1, [ip], #4
 800acf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acf6:	dcec      	bgt.n	800acd2 <__multadd+0x12>
 800acf8:	b30e      	cbz	r6, 800ad3e <__multadd+0x7e>
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dc19      	bgt.n	800ad34 <__multadd+0x74>
 800ad00:	6861      	ldr	r1, [r4, #4]
 800ad02:	4638      	mov	r0, r7
 800ad04:	3101      	adds	r1, #1
 800ad06:	f7ff ff79 	bl	800abfc <_Balloc>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	b928      	cbnz	r0, 800ad1a <__multadd+0x5a>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	4b0c      	ldr	r3, [pc, #48]	@ (800ad44 <__multadd+0x84>)
 800ad12:	480d      	ldr	r0, [pc, #52]	@ (800ad48 <__multadd+0x88>)
 800ad14:	21ba      	movs	r1, #186	@ 0xba
 800ad16:	f001 fadd 	bl	800c2d4 <__assert_func>
 800ad1a:	6922      	ldr	r2, [r4, #16]
 800ad1c:	3202      	adds	r2, #2
 800ad1e:	f104 010c 	add.w	r1, r4, #12
 800ad22:	0092      	lsls	r2, r2, #2
 800ad24:	300c      	adds	r0, #12
 800ad26:	f7fe fd1c 	bl	8009762 <memcpy>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	f7ff ffa5 	bl	800ac7c <_Bfree>
 800ad32:	4644      	mov	r4, r8
 800ad34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad38:	3501      	adds	r5, #1
 800ad3a:	615e      	str	r6, [r3, #20]
 800ad3c:	6125      	str	r5, [r4, #16]
 800ad3e:	4620      	mov	r0, r4
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad44:	0800ce6a 	.word	0x0800ce6a
 800ad48:	0800cedb 	.word	0x0800cedb

0800ad4c <__s2b>:
 800ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	4615      	mov	r5, r2
 800ad54:	461f      	mov	r7, r3
 800ad56:	2209      	movs	r2, #9
 800ad58:	3308      	adds	r3, #8
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad60:	2100      	movs	r1, #0
 800ad62:	2201      	movs	r2, #1
 800ad64:	429a      	cmp	r2, r3
 800ad66:	db09      	blt.n	800ad7c <__s2b+0x30>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff ff47 	bl	800abfc <_Balloc>
 800ad6e:	b940      	cbnz	r0, 800ad82 <__s2b+0x36>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b19      	ldr	r3, [pc, #100]	@ (800add8 <__s2b+0x8c>)
 800ad74:	4819      	ldr	r0, [pc, #100]	@ (800addc <__s2b+0x90>)
 800ad76:	21d3      	movs	r1, #211	@ 0xd3
 800ad78:	f001 faac 	bl	800c2d4 <__assert_func>
 800ad7c:	0052      	lsls	r2, r2, #1
 800ad7e:	3101      	adds	r1, #1
 800ad80:	e7f0      	b.n	800ad64 <__s2b+0x18>
 800ad82:	9b08      	ldr	r3, [sp, #32]
 800ad84:	6143      	str	r3, [r0, #20]
 800ad86:	2d09      	cmp	r5, #9
 800ad88:	f04f 0301 	mov.w	r3, #1
 800ad8c:	6103      	str	r3, [r0, #16]
 800ad8e:	dd16      	ble.n	800adbe <__s2b+0x72>
 800ad90:	f104 0909 	add.w	r9, r4, #9
 800ad94:	46c8      	mov	r8, r9
 800ad96:	442c      	add	r4, r5
 800ad98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad9c:	4601      	mov	r1, r0
 800ad9e:	3b30      	subs	r3, #48	@ 0x30
 800ada0:	220a      	movs	r2, #10
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ff8c 	bl	800acc0 <__multadd>
 800ada8:	45a0      	cmp	r8, r4
 800adaa:	d1f5      	bne.n	800ad98 <__s2b+0x4c>
 800adac:	f1a5 0408 	sub.w	r4, r5, #8
 800adb0:	444c      	add	r4, r9
 800adb2:	1b2d      	subs	r5, r5, r4
 800adb4:	1963      	adds	r3, r4, r5
 800adb6:	42bb      	cmp	r3, r7
 800adb8:	db04      	blt.n	800adc4 <__s2b+0x78>
 800adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbe:	340a      	adds	r4, #10
 800adc0:	2509      	movs	r5, #9
 800adc2:	e7f6      	b.n	800adb2 <__s2b+0x66>
 800adc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adc8:	4601      	mov	r1, r0
 800adca:	3b30      	subs	r3, #48	@ 0x30
 800adcc:	220a      	movs	r2, #10
 800adce:	4630      	mov	r0, r6
 800add0:	f7ff ff76 	bl	800acc0 <__multadd>
 800add4:	e7ee      	b.n	800adb4 <__s2b+0x68>
 800add6:	bf00      	nop
 800add8:	0800ce6a 	.word	0x0800ce6a
 800addc:	0800cedb 	.word	0x0800cedb

0800ade0 <__hi0bits>:
 800ade0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ade4:	4603      	mov	r3, r0
 800ade6:	bf36      	itet	cc
 800ade8:	0403      	lslcc	r3, r0, #16
 800adea:	2000      	movcs	r0, #0
 800adec:	2010      	movcc	r0, #16
 800adee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adf2:	bf3c      	itt	cc
 800adf4:	021b      	lslcc	r3, r3, #8
 800adf6:	3008      	addcc	r0, #8
 800adf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adfc:	bf3c      	itt	cc
 800adfe:	011b      	lslcc	r3, r3, #4
 800ae00:	3004      	addcc	r0, #4
 800ae02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae06:	bf3c      	itt	cc
 800ae08:	009b      	lslcc	r3, r3, #2
 800ae0a:	3002      	addcc	r0, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	db05      	blt.n	800ae1c <__hi0bits+0x3c>
 800ae10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae14:	f100 0001 	add.w	r0, r0, #1
 800ae18:	bf08      	it	eq
 800ae1a:	2020      	moveq	r0, #32
 800ae1c:	4770      	bx	lr

0800ae1e <__lo0bits>:
 800ae1e:	6803      	ldr	r3, [r0, #0]
 800ae20:	4602      	mov	r2, r0
 800ae22:	f013 0007 	ands.w	r0, r3, #7
 800ae26:	d00b      	beq.n	800ae40 <__lo0bits+0x22>
 800ae28:	07d9      	lsls	r1, r3, #31
 800ae2a:	d421      	bmi.n	800ae70 <__lo0bits+0x52>
 800ae2c:	0798      	lsls	r0, r3, #30
 800ae2e:	bf49      	itett	mi
 800ae30:	085b      	lsrmi	r3, r3, #1
 800ae32:	089b      	lsrpl	r3, r3, #2
 800ae34:	2001      	movmi	r0, #1
 800ae36:	6013      	strmi	r3, [r2, #0]
 800ae38:	bf5c      	itt	pl
 800ae3a:	6013      	strpl	r3, [r2, #0]
 800ae3c:	2002      	movpl	r0, #2
 800ae3e:	4770      	bx	lr
 800ae40:	b299      	uxth	r1, r3
 800ae42:	b909      	cbnz	r1, 800ae48 <__lo0bits+0x2a>
 800ae44:	0c1b      	lsrs	r3, r3, #16
 800ae46:	2010      	movs	r0, #16
 800ae48:	b2d9      	uxtb	r1, r3
 800ae4a:	b909      	cbnz	r1, 800ae50 <__lo0bits+0x32>
 800ae4c:	3008      	adds	r0, #8
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	0719      	lsls	r1, r3, #28
 800ae52:	bf04      	itt	eq
 800ae54:	091b      	lsreq	r3, r3, #4
 800ae56:	3004      	addeq	r0, #4
 800ae58:	0799      	lsls	r1, r3, #30
 800ae5a:	bf04      	itt	eq
 800ae5c:	089b      	lsreq	r3, r3, #2
 800ae5e:	3002      	addeq	r0, #2
 800ae60:	07d9      	lsls	r1, r3, #31
 800ae62:	d403      	bmi.n	800ae6c <__lo0bits+0x4e>
 800ae64:	085b      	lsrs	r3, r3, #1
 800ae66:	f100 0001 	add.w	r0, r0, #1
 800ae6a:	d003      	beq.n	800ae74 <__lo0bits+0x56>
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	4770      	bx	lr
 800ae70:	2000      	movs	r0, #0
 800ae72:	4770      	bx	lr
 800ae74:	2020      	movs	r0, #32
 800ae76:	4770      	bx	lr

0800ae78 <__i2b>:
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	f7ff febd 	bl	800abfc <_Balloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <__i2b+0x1a>
 800ae86:	4b05      	ldr	r3, [pc, #20]	@ (800ae9c <__i2b+0x24>)
 800ae88:	4805      	ldr	r0, [pc, #20]	@ (800aea0 <__i2b+0x28>)
 800ae8a:	f240 1145 	movw	r1, #325	@ 0x145
 800ae8e:	f001 fa21 	bl	800c2d4 <__assert_func>
 800ae92:	2301      	movs	r3, #1
 800ae94:	6144      	str	r4, [r0, #20]
 800ae96:	6103      	str	r3, [r0, #16]
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0800ce6a 	.word	0x0800ce6a
 800aea0:	0800cedb 	.word	0x0800cedb

0800aea4 <__multiply>:
 800aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	4614      	mov	r4, r2
 800aeaa:	690a      	ldr	r2, [r1, #16]
 800aeac:	6923      	ldr	r3, [r4, #16]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	bfa8      	it	ge
 800aeb2:	4623      	movge	r3, r4
 800aeb4:	460f      	mov	r7, r1
 800aeb6:	bfa4      	itt	ge
 800aeb8:	460c      	movge	r4, r1
 800aeba:	461f      	movge	r7, r3
 800aebc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aec0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	6861      	ldr	r1, [r4, #4]
 800aec8:	eb0a 0609 	add.w	r6, sl, r9
 800aecc:	42b3      	cmp	r3, r6
 800aece:	b085      	sub	sp, #20
 800aed0:	bfb8      	it	lt
 800aed2:	3101      	addlt	r1, #1
 800aed4:	f7ff fe92 	bl	800abfc <_Balloc>
 800aed8:	b930      	cbnz	r0, 800aee8 <__multiply+0x44>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b44      	ldr	r3, [pc, #272]	@ (800aff0 <__multiply+0x14c>)
 800aede:	4845      	ldr	r0, [pc, #276]	@ (800aff4 <__multiply+0x150>)
 800aee0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aee4:	f001 f9f6 	bl	800c2d4 <__assert_func>
 800aee8:	f100 0514 	add.w	r5, r0, #20
 800aeec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aef0:	462b      	mov	r3, r5
 800aef2:	2200      	movs	r2, #0
 800aef4:	4543      	cmp	r3, r8
 800aef6:	d321      	bcc.n	800af3c <__multiply+0x98>
 800aef8:	f107 0114 	add.w	r1, r7, #20
 800aefc:	f104 0214 	add.w	r2, r4, #20
 800af00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800af08:	9302      	str	r3, [sp, #8]
 800af0a:	1b13      	subs	r3, r2, r4
 800af0c:	3b15      	subs	r3, #21
 800af0e:	f023 0303 	bic.w	r3, r3, #3
 800af12:	3304      	adds	r3, #4
 800af14:	f104 0715 	add.w	r7, r4, #21
 800af18:	42ba      	cmp	r2, r7
 800af1a:	bf38      	it	cc
 800af1c:	2304      	movcc	r3, #4
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	9b02      	ldr	r3, [sp, #8]
 800af22:	9103      	str	r1, [sp, #12]
 800af24:	428b      	cmp	r3, r1
 800af26:	d80c      	bhi.n	800af42 <__multiply+0x9e>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	dd03      	ble.n	800af34 <__multiply+0x90>
 800af2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05b      	beq.n	800afec <__multiply+0x148>
 800af34:	6106      	str	r6, [r0, #16]
 800af36:	b005      	add	sp, #20
 800af38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3c:	f843 2b04 	str.w	r2, [r3], #4
 800af40:	e7d8      	b.n	800aef4 <__multiply+0x50>
 800af42:	f8b1 a000 	ldrh.w	sl, [r1]
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	d024      	beq.n	800af96 <__multiply+0xf2>
 800af4c:	f104 0e14 	add.w	lr, r4, #20
 800af50:	46a9      	mov	r9, r5
 800af52:	f04f 0c00 	mov.w	ip, #0
 800af56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af5a:	f8d9 3000 	ldr.w	r3, [r9]
 800af5e:	fa1f fb87 	uxth.w	fp, r7
 800af62:	b29b      	uxth	r3, r3
 800af64:	fb0a 330b 	mla	r3, sl, fp, r3
 800af68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af6c:	f8d9 7000 	ldr.w	r7, [r9]
 800af70:	4463      	add	r3, ip
 800af72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af76:	fb0a c70b 	mla	r7, sl, fp, ip
 800af7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af7e:	b29b      	uxth	r3, r3
 800af80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af84:	4572      	cmp	r2, lr
 800af86:	f849 3b04 	str.w	r3, [r9], #4
 800af8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af8e:	d8e2      	bhi.n	800af56 <__multiply+0xb2>
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	f845 c003 	str.w	ip, [r5, r3]
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af9c:	3104      	adds	r1, #4
 800af9e:	f1b9 0f00 	cmp.w	r9, #0
 800afa2:	d021      	beq.n	800afe8 <__multiply+0x144>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	f104 0c14 	add.w	ip, r4, #20
 800afaa:	46ae      	mov	lr, r5
 800afac:	f04f 0a00 	mov.w	sl, #0
 800afb0:	f8bc b000 	ldrh.w	fp, [ip]
 800afb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afb8:	fb09 770b 	mla	r7, r9, fp, r7
 800afbc:	4457      	add	r7, sl
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afc4:	f84e 3b04 	str.w	r3, [lr], #4
 800afc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd0:	f8be 3000 	ldrh.w	r3, [lr]
 800afd4:	fb09 330a 	mla	r3, r9, sl, r3
 800afd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800afdc:	4562      	cmp	r2, ip
 800afde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afe2:	d8e5      	bhi.n	800afb0 <__multiply+0x10c>
 800afe4:	9f01      	ldr	r7, [sp, #4]
 800afe6:	51eb      	str	r3, [r5, r7]
 800afe8:	3504      	adds	r5, #4
 800afea:	e799      	b.n	800af20 <__multiply+0x7c>
 800afec:	3e01      	subs	r6, #1
 800afee:	e79b      	b.n	800af28 <__multiply+0x84>
 800aff0:	0800ce6a 	.word	0x0800ce6a
 800aff4:	0800cedb 	.word	0x0800cedb

0800aff8 <__pow5mult>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	4615      	mov	r5, r2
 800affe:	f012 0203 	ands.w	r2, r2, #3
 800b002:	4607      	mov	r7, r0
 800b004:	460e      	mov	r6, r1
 800b006:	d007      	beq.n	800b018 <__pow5mult+0x20>
 800b008:	4c25      	ldr	r4, [pc, #148]	@ (800b0a0 <__pow5mult+0xa8>)
 800b00a:	3a01      	subs	r2, #1
 800b00c:	2300      	movs	r3, #0
 800b00e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b012:	f7ff fe55 	bl	800acc0 <__multadd>
 800b016:	4606      	mov	r6, r0
 800b018:	10ad      	asrs	r5, r5, #2
 800b01a:	d03d      	beq.n	800b098 <__pow5mult+0xa0>
 800b01c:	69fc      	ldr	r4, [r7, #28]
 800b01e:	b97c      	cbnz	r4, 800b040 <__pow5mult+0x48>
 800b020:	2010      	movs	r0, #16
 800b022:	f7fb fd8f 	bl	8006b44 <malloc>
 800b026:	4602      	mov	r2, r0
 800b028:	61f8      	str	r0, [r7, #28]
 800b02a:	b928      	cbnz	r0, 800b038 <__pow5mult+0x40>
 800b02c:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a4 <__pow5mult+0xac>)
 800b02e:	481e      	ldr	r0, [pc, #120]	@ (800b0a8 <__pow5mult+0xb0>)
 800b030:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b034:	f001 f94e 	bl	800c2d4 <__assert_func>
 800b038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b03c:	6004      	str	r4, [r0, #0]
 800b03e:	60c4      	str	r4, [r0, #12]
 800b040:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b048:	b94c      	cbnz	r4, 800b05e <__pow5mult+0x66>
 800b04a:	f240 2171 	movw	r1, #625	@ 0x271
 800b04e:	4638      	mov	r0, r7
 800b050:	f7ff ff12 	bl	800ae78 <__i2b>
 800b054:	2300      	movs	r3, #0
 800b056:	f8c8 0008 	str.w	r0, [r8, #8]
 800b05a:	4604      	mov	r4, r0
 800b05c:	6003      	str	r3, [r0, #0]
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	07eb      	lsls	r3, r5, #31
 800b064:	d50a      	bpl.n	800b07c <__pow5mult+0x84>
 800b066:	4631      	mov	r1, r6
 800b068:	4622      	mov	r2, r4
 800b06a:	4638      	mov	r0, r7
 800b06c:	f7ff ff1a 	bl	800aea4 <__multiply>
 800b070:	4631      	mov	r1, r6
 800b072:	4680      	mov	r8, r0
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff fe01 	bl	800ac7c <_Bfree>
 800b07a:	4646      	mov	r6, r8
 800b07c:	106d      	asrs	r5, r5, #1
 800b07e:	d00b      	beq.n	800b098 <__pow5mult+0xa0>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	b938      	cbnz	r0, 800b094 <__pow5mult+0x9c>
 800b084:	4622      	mov	r2, r4
 800b086:	4621      	mov	r1, r4
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff ff0b 	bl	800aea4 <__multiply>
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f8c0 9000 	str.w	r9, [r0]
 800b094:	4604      	mov	r4, r0
 800b096:	e7e4      	b.n	800b062 <__pow5mult+0x6a>
 800b098:	4630      	mov	r0, r6
 800b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800cf34 	.word	0x0800cf34
 800b0a4:	0800cdfb 	.word	0x0800cdfb
 800b0a8:	0800cedb 	.word	0x0800cedb

0800b0ac <__lshift>:
 800b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	6849      	ldr	r1, [r1, #4]
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0ba:	68a3      	ldr	r3, [r4, #8]
 800b0bc:	4607      	mov	r7, r0
 800b0be:	4691      	mov	r9, r2
 800b0c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0c4:	f108 0601 	add.w	r6, r8, #1
 800b0c8:	42b3      	cmp	r3, r6
 800b0ca:	db0b      	blt.n	800b0e4 <__lshift+0x38>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fd95 	bl	800abfc <_Balloc>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b948      	cbnz	r0, 800b0ea <__lshift+0x3e>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	4b28      	ldr	r3, [pc, #160]	@ (800b17c <__lshift+0xd0>)
 800b0da:	4829      	ldr	r0, [pc, #164]	@ (800b180 <__lshift+0xd4>)
 800b0dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0e0:	f001 f8f8 	bl	800c2d4 <__assert_func>
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	e7ee      	b.n	800b0c8 <__lshift+0x1c>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f100 0114 	add.w	r1, r0, #20
 800b0f0:	f100 0210 	add.w	r2, r0, #16
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	4553      	cmp	r3, sl
 800b0f8:	db33      	blt.n	800b162 <__lshift+0xb6>
 800b0fa:	6920      	ldr	r0, [r4, #16]
 800b0fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b100:	f104 0314 	add.w	r3, r4, #20
 800b104:	f019 091f 	ands.w	r9, r9, #31
 800b108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b10c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b110:	d02b      	beq.n	800b16a <__lshift+0xbe>
 800b112:	f1c9 0e20 	rsb	lr, r9, #32
 800b116:	468a      	mov	sl, r1
 800b118:	2200      	movs	r2, #0
 800b11a:	6818      	ldr	r0, [r3, #0]
 800b11c:	fa00 f009 	lsl.w	r0, r0, r9
 800b120:	4310      	orrs	r0, r2
 800b122:	f84a 0b04 	str.w	r0, [sl], #4
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	459c      	cmp	ip, r3
 800b12c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b130:	d8f3      	bhi.n	800b11a <__lshift+0x6e>
 800b132:	ebac 0304 	sub.w	r3, ip, r4
 800b136:	3b15      	subs	r3, #21
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	3304      	adds	r3, #4
 800b13e:	f104 0015 	add.w	r0, r4, #21
 800b142:	4584      	cmp	ip, r0
 800b144:	bf38      	it	cc
 800b146:	2304      	movcc	r3, #4
 800b148:	50ca      	str	r2, [r1, r3]
 800b14a:	b10a      	cbz	r2, 800b150 <__lshift+0xa4>
 800b14c:	f108 0602 	add.w	r6, r8, #2
 800b150:	3e01      	subs	r6, #1
 800b152:	4638      	mov	r0, r7
 800b154:	612e      	str	r6, [r5, #16]
 800b156:	4621      	mov	r1, r4
 800b158:	f7ff fd90 	bl	800ac7c <_Bfree>
 800b15c:	4628      	mov	r0, r5
 800b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b162:	f842 0f04 	str.w	r0, [r2, #4]!
 800b166:	3301      	adds	r3, #1
 800b168:	e7c5      	b.n	800b0f6 <__lshift+0x4a>
 800b16a:	3904      	subs	r1, #4
 800b16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b170:	f841 2f04 	str.w	r2, [r1, #4]!
 800b174:	459c      	cmp	ip, r3
 800b176:	d8f9      	bhi.n	800b16c <__lshift+0xc0>
 800b178:	e7ea      	b.n	800b150 <__lshift+0xa4>
 800b17a:	bf00      	nop
 800b17c:	0800ce6a 	.word	0x0800ce6a
 800b180:	0800cedb 	.word	0x0800cedb

0800b184 <__mcmp>:
 800b184:	690a      	ldr	r2, [r1, #16]
 800b186:	4603      	mov	r3, r0
 800b188:	6900      	ldr	r0, [r0, #16]
 800b18a:	1a80      	subs	r0, r0, r2
 800b18c:	b530      	push	{r4, r5, lr}
 800b18e:	d10e      	bne.n	800b1ae <__mcmp+0x2a>
 800b190:	3314      	adds	r3, #20
 800b192:	3114      	adds	r1, #20
 800b194:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b198:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b19c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1a4:	4295      	cmp	r5, r2
 800b1a6:	d003      	beq.n	800b1b0 <__mcmp+0x2c>
 800b1a8:	d205      	bcs.n	800b1b6 <__mcmp+0x32>
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	bd30      	pop	{r4, r5, pc}
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	d3f3      	bcc.n	800b19c <__mcmp+0x18>
 800b1b4:	e7fb      	b.n	800b1ae <__mcmp+0x2a>
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	e7f9      	b.n	800b1ae <__mcmp+0x2a>
	...

0800b1bc <__mdiff>:
 800b1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	4689      	mov	r9, r1
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4648      	mov	r0, r9
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	f7ff ffdb 	bl	800b184 <__mcmp>
 800b1ce:	1e05      	subs	r5, r0, #0
 800b1d0:	d112      	bne.n	800b1f8 <__mdiff+0x3c>
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f7ff fd11 	bl	800abfc <_Balloc>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	b928      	cbnz	r0, 800b1ea <__mdiff+0x2e>
 800b1de:	4b3f      	ldr	r3, [pc, #252]	@ (800b2dc <__mdiff+0x120>)
 800b1e0:	f240 2137 	movw	r1, #567	@ 0x237
 800b1e4:	483e      	ldr	r0, [pc, #248]	@ (800b2e0 <__mdiff+0x124>)
 800b1e6:	f001 f875 	bl	800c2d4 <__assert_func>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	b003      	add	sp, #12
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	bfbc      	itt	lt
 800b1fa:	464b      	movlt	r3, r9
 800b1fc:	46a1      	movlt	r9, r4
 800b1fe:	4630      	mov	r0, r6
 800b200:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b204:	bfba      	itte	lt
 800b206:	461c      	movlt	r4, r3
 800b208:	2501      	movlt	r5, #1
 800b20a:	2500      	movge	r5, #0
 800b20c:	f7ff fcf6 	bl	800abfc <_Balloc>
 800b210:	4602      	mov	r2, r0
 800b212:	b918      	cbnz	r0, 800b21c <__mdiff+0x60>
 800b214:	4b31      	ldr	r3, [pc, #196]	@ (800b2dc <__mdiff+0x120>)
 800b216:	f240 2145 	movw	r1, #581	@ 0x245
 800b21a:	e7e3      	b.n	800b1e4 <__mdiff+0x28>
 800b21c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b220:	6926      	ldr	r6, [r4, #16]
 800b222:	60c5      	str	r5, [r0, #12]
 800b224:	f109 0310 	add.w	r3, r9, #16
 800b228:	f109 0514 	add.w	r5, r9, #20
 800b22c:	f104 0e14 	add.w	lr, r4, #20
 800b230:	f100 0b14 	add.w	fp, r0, #20
 800b234:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b238:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	46d9      	mov	r9, fp
 800b240:	f04f 0c00 	mov.w	ip, #0
 800b244:	9b01      	ldr	r3, [sp, #4]
 800b246:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b24a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	fa1f f38a 	uxth.w	r3, sl
 800b254:	4619      	mov	r1, r3
 800b256:	b283      	uxth	r3, r0
 800b258:	1acb      	subs	r3, r1, r3
 800b25a:	0c00      	lsrs	r0, r0, #16
 800b25c:	4463      	add	r3, ip
 800b25e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b262:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b266:	b29b      	uxth	r3, r3
 800b268:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b26c:	4576      	cmp	r6, lr
 800b26e:	f849 3b04 	str.w	r3, [r9], #4
 800b272:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b276:	d8e5      	bhi.n	800b244 <__mdiff+0x88>
 800b278:	1b33      	subs	r3, r6, r4
 800b27a:	3b15      	subs	r3, #21
 800b27c:	f023 0303 	bic.w	r3, r3, #3
 800b280:	3415      	adds	r4, #21
 800b282:	3304      	adds	r3, #4
 800b284:	42a6      	cmp	r6, r4
 800b286:	bf38      	it	cc
 800b288:	2304      	movcc	r3, #4
 800b28a:	441d      	add	r5, r3
 800b28c:	445b      	add	r3, fp
 800b28e:	461e      	mov	r6, r3
 800b290:	462c      	mov	r4, r5
 800b292:	4544      	cmp	r4, r8
 800b294:	d30e      	bcc.n	800b2b4 <__mdiff+0xf8>
 800b296:	f108 0103 	add.w	r1, r8, #3
 800b29a:	1b49      	subs	r1, r1, r5
 800b29c:	f021 0103 	bic.w	r1, r1, #3
 800b2a0:	3d03      	subs	r5, #3
 800b2a2:	45a8      	cmp	r8, r5
 800b2a4:	bf38      	it	cc
 800b2a6:	2100      	movcc	r1, #0
 800b2a8:	440b      	add	r3, r1
 800b2aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2ae:	b191      	cbz	r1, 800b2d6 <__mdiff+0x11a>
 800b2b0:	6117      	str	r7, [r2, #16]
 800b2b2:	e79d      	b.n	800b1f0 <__mdiff+0x34>
 800b2b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2b8:	46e6      	mov	lr, ip
 800b2ba:	0c08      	lsrs	r0, r1, #16
 800b2bc:	fa1c fc81 	uxtah	ip, ip, r1
 800b2c0:	4471      	add	r1, lr
 800b2c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2c6:	b289      	uxth	r1, r1
 800b2c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2cc:	f846 1b04 	str.w	r1, [r6], #4
 800b2d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2d4:	e7dd      	b.n	800b292 <__mdiff+0xd6>
 800b2d6:	3f01      	subs	r7, #1
 800b2d8:	e7e7      	b.n	800b2aa <__mdiff+0xee>
 800b2da:	bf00      	nop
 800b2dc:	0800ce6a 	.word	0x0800ce6a
 800b2e0:	0800cedb 	.word	0x0800cedb

0800b2e4 <__ulp>:
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	ed8d 0b00 	vstr	d0, [sp]
 800b2ea:	9a01      	ldr	r2, [sp, #4]
 800b2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b32c <__ulp+0x48>)
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dc08      	bgt.n	800b30a <__ulp+0x26>
 800b2f8:	425b      	negs	r3, r3
 800b2fa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b302:	da04      	bge.n	800b30e <__ulp+0x2a>
 800b304:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b308:	4113      	asrs	r3, r2
 800b30a:	2200      	movs	r2, #0
 800b30c:	e008      	b.n	800b320 <__ulp+0x3c>
 800b30e:	f1a2 0314 	sub.w	r3, r2, #20
 800b312:	2b1e      	cmp	r3, #30
 800b314:	bfda      	itte	le
 800b316:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b31a:	40da      	lsrle	r2, r3
 800b31c:	2201      	movgt	r2, #1
 800b31e:	2300      	movs	r3, #0
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	ec41 0b10 	vmov	d0, r0, r1
 800b328:	b002      	add	sp, #8
 800b32a:	4770      	bx	lr
 800b32c:	7ff00000 	.word	0x7ff00000

0800b330 <__b2d>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	6906      	ldr	r6, [r0, #16]
 800b336:	f100 0814 	add.w	r8, r0, #20
 800b33a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b33e:	1f37      	subs	r7, r6, #4
 800b340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b344:	4610      	mov	r0, r2
 800b346:	f7ff fd4b 	bl	800ade0 <__hi0bits>
 800b34a:	f1c0 0320 	rsb	r3, r0, #32
 800b34e:	280a      	cmp	r0, #10
 800b350:	600b      	str	r3, [r1, #0]
 800b352:	491b      	ldr	r1, [pc, #108]	@ (800b3c0 <__b2d+0x90>)
 800b354:	dc15      	bgt.n	800b382 <__b2d+0x52>
 800b356:	f1c0 0c0b 	rsb	ip, r0, #11
 800b35a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b35e:	45b8      	cmp	r8, r7
 800b360:	ea43 0501 	orr.w	r5, r3, r1
 800b364:	bf34      	ite	cc
 800b366:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b36a:	2300      	movcs	r3, #0
 800b36c:	3015      	adds	r0, #21
 800b36e:	fa02 f000 	lsl.w	r0, r2, r0
 800b372:	fa23 f30c 	lsr.w	r3, r3, ip
 800b376:	4303      	orrs	r3, r0
 800b378:	461c      	mov	r4, r3
 800b37a:	ec45 4b10 	vmov	d0, r4, r5
 800b37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b382:	45b8      	cmp	r8, r7
 800b384:	bf3a      	itte	cc
 800b386:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b38a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b38e:	2300      	movcs	r3, #0
 800b390:	380b      	subs	r0, #11
 800b392:	d012      	beq.n	800b3ba <__b2d+0x8a>
 800b394:	f1c0 0120 	rsb	r1, r0, #32
 800b398:	fa23 f401 	lsr.w	r4, r3, r1
 800b39c:	4082      	lsls	r2, r0
 800b39e:	4322      	orrs	r2, r4
 800b3a0:	4547      	cmp	r7, r8
 800b3a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b3a6:	bf8c      	ite	hi
 800b3a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b3ac:	2200      	movls	r2, #0
 800b3ae:	4083      	lsls	r3, r0
 800b3b0:	40ca      	lsrs	r2, r1
 800b3b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	e7de      	b.n	800b378 <__b2d+0x48>
 800b3ba:	ea42 0501 	orr.w	r5, r2, r1
 800b3be:	e7db      	b.n	800b378 <__b2d+0x48>
 800b3c0:	3ff00000 	.word	0x3ff00000

0800b3c4 <__d2b>:
 800b3c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	ec59 8b10 	vmov	r8, r9, d0
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	f7ff fc13 	bl	800abfc <_Balloc>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	b930      	cbnz	r0, 800b3e8 <__d2b+0x24>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	4b23      	ldr	r3, [pc, #140]	@ (800b46c <__d2b+0xa8>)
 800b3de:	4824      	ldr	r0, [pc, #144]	@ (800b470 <__d2b+0xac>)
 800b3e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3e4:	f000 ff76 	bl	800c2d4 <__assert_func>
 800b3e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3f0:	b10d      	cbz	r5, 800b3f6 <__d2b+0x32>
 800b3f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3fc:	d023      	beq.n	800b446 <__d2b+0x82>
 800b3fe:	4668      	mov	r0, sp
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	f7ff fd0c 	bl	800ae1e <__lo0bits>
 800b406:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b40a:	b1d0      	cbz	r0, 800b442 <__d2b+0x7e>
 800b40c:	f1c0 0320 	rsb	r3, r0, #32
 800b410:	fa02 f303 	lsl.w	r3, r2, r3
 800b414:	430b      	orrs	r3, r1
 800b416:	40c2      	lsrs	r2, r0
 800b418:	6163      	str	r3, [r4, #20]
 800b41a:	9201      	str	r2, [sp, #4]
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	61a3      	str	r3, [r4, #24]
 800b420:	2b00      	cmp	r3, #0
 800b422:	bf0c      	ite	eq
 800b424:	2201      	moveq	r2, #1
 800b426:	2202      	movne	r2, #2
 800b428:	6122      	str	r2, [r4, #16]
 800b42a:	b1a5      	cbz	r5, 800b456 <__d2b+0x92>
 800b42c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b430:	4405      	add	r5, r0
 800b432:	603d      	str	r5, [r7, #0]
 800b434:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b438:	6030      	str	r0, [r6, #0]
 800b43a:	4620      	mov	r0, r4
 800b43c:	b003      	add	sp, #12
 800b43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b442:	6161      	str	r1, [r4, #20]
 800b444:	e7ea      	b.n	800b41c <__d2b+0x58>
 800b446:	a801      	add	r0, sp, #4
 800b448:	f7ff fce9 	bl	800ae1e <__lo0bits>
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	6163      	str	r3, [r4, #20]
 800b450:	3020      	adds	r0, #32
 800b452:	2201      	movs	r2, #1
 800b454:	e7e8      	b.n	800b428 <__d2b+0x64>
 800b456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b45a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b45e:	6038      	str	r0, [r7, #0]
 800b460:	6918      	ldr	r0, [r3, #16]
 800b462:	f7ff fcbd 	bl	800ade0 <__hi0bits>
 800b466:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b46a:	e7e5      	b.n	800b438 <__d2b+0x74>
 800b46c:	0800ce6a 	.word	0x0800ce6a
 800b470:	0800cedb 	.word	0x0800cedb

0800b474 <__ratio>:
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	b085      	sub	sp, #20
 800b47a:	e9cd 1000 	strd	r1, r0, [sp]
 800b47e:	a902      	add	r1, sp, #8
 800b480:	f7ff ff56 	bl	800b330 <__b2d>
 800b484:	9800      	ldr	r0, [sp, #0]
 800b486:	a903      	add	r1, sp, #12
 800b488:	ec55 4b10 	vmov	r4, r5, d0
 800b48c:	f7ff ff50 	bl	800b330 <__b2d>
 800b490:	9b01      	ldr	r3, [sp, #4]
 800b492:	6919      	ldr	r1, [r3, #16]
 800b494:	9b00      	ldr	r3, [sp, #0]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	1ac9      	subs	r1, r1, r3
 800b49a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b49e:	1a9b      	subs	r3, r3, r2
 800b4a0:	ec5b ab10 	vmov	sl, fp, d0
 800b4a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	bfce      	itee	gt
 800b4ac:	462a      	movgt	r2, r5
 800b4ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4b2:	465a      	movle	r2, fp
 800b4b4:	462f      	mov	r7, r5
 800b4b6:	46d9      	mov	r9, fp
 800b4b8:	bfcc      	ite	gt
 800b4ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f7f5 f9cf 	bl	800086c <__aeabi_ddiv>
 800b4ce:	ec41 0b10 	vmov	d0, r0, r1
 800b4d2:	b005      	add	sp, #20
 800b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4d8 <__copybits>:
 800b4d8:	3901      	subs	r1, #1
 800b4da:	b570      	push	{r4, r5, r6, lr}
 800b4dc:	1149      	asrs	r1, r1, #5
 800b4de:	6914      	ldr	r4, [r2, #16]
 800b4e0:	3101      	adds	r1, #1
 800b4e2:	f102 0314 	add.w	r3, r2, #20
 800b4e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4ee:	1f05      	subs	r5, r0, #4
 800b4f0:	42a3      	cmp	r3, r4
 800b4f2:	d30c      	bcc.n	800b50e <__copybits+0x36>
 800b4f4:	1aa3      	subs	r3, r4, r2
 800b4f6:	3b11      	subs	r3, #17
 800b4f8:	f023 0303 	bic.w	r3, r3, #3
 800b4fc:	3211      	adds	r2, #17
 800b4fe:	42a2      	cmp	r2, r4
 800b500:	bf88      	it	hi
 800b502:	2300      	movhi	r3, #0
 800b504:	4418      	add	r0, r3
 800b506:	2300      	movs	r3, #0
 800b508:	4288      	cmp	r0, r1
 800b50a:	d305      	bcc.n	800b518 <__copybits+0x40>
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
 800b50e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b512:	f845 6f04 	str.w	r6, [r5, #4]!
 800b516:	e7eb      	b.n	800b4f0 <__copybits+0x18>
 800b518:	f840 3b04 	str.w	r3, [r0], #4
 800b51c:	e7f4      	b.n	800b508 <__copybits+0x30>

0800b51e <__any_on>:
 800b51e:	f100 0214 	add.w	r2, r0, #20
 800b522:	6900      	ldr	r0, [r0, #16]
 800b524:	114b      	asrs	r3, r1, #5
 800b526:	4298      	cmp	r0, r3
 800b528:	b510      	push	{r4, lr}
 800b52a:	db11      	blt.n	800b550 <__any_on+0x32>
 800b52c:	dd0a      	ble.n	800b544 <__any_on+0x26>
 800b52e:	f011 011f 	ands.w	r1, r1, #31
 800b532:	d007      	beq.n	800b544 <__any_on+0x26>
 800b534:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b538:	fa24 f001 	lsr.w	r0, r4, r1
 800b53c:	fa00 f101 	lsl.w	r1, r0, r1
 800b540:	428c      	cmp	r4, r1
 800b542:	d10b      	bne.n	800b55c <__any_on+0x3e>
 800b544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b548:	4293      	cmp	r3, r2
 800b54a:	d803      	bhi.n	800b554 <__any_on+0x36>
 800b54c:	2000      	movs	r0, #0
 800b54e:	bd10      	pop	{r4, pc}
 800b550:	4603      	mov	r3, r0
 800b552:	e7f7      	b.n	800b544 <__any_on+0x26>
 800b554:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b558:	2900      	cmp	r1, #0
 800b55a:	d0f5      	beq.n	800b548 <__any_on+0x2a>
 800b55c:	2001      	movs	r0, #1
 800b55e:	e7f6      	b.n	800b54e <__any_on+0x30>

0800b560 <_strtoul_l.constprop.0>:
 800b560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b564:	4e34      	ldr	r6, [pc, #208]	@ (800b638 <_strtoul_l.constprop.0+0xd8>)
 800b566:	4686      	mov	lr, r0
 800b568:	460d      	mov	r5, r1
 800b56a:	4628      	mov	r0, r5
 800b56c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b570:	5d37      	ldrb	r7, [r6, r4]
 800b572:	f017 0708 	ands.w	r7, r7, #8
 800b576:	d1f8      	bne.n	800b56a <_strtoul_l.constprop.0+0xa>
 800b578:	2c2d      	cmp	r4, #45	@ 0x2d
 800b57a:	d12f      	bne.n	800b5dc <_strtoul_l.constprop.0+0x7c>
 800b57c:	782c      	ldrb	r4, [r5, #0]
 800b57e:	2701      	movs	r7, #1
 800b580:	1c85      	adds	r5, r0, #2
 800b582:	f033 0010 	bics.w	r0, r3, #16
 800b586:	d109      	bne.n	800b59c <_strtoul_l.constprop.0+0x3c>
 800b588:	2c30      	cmp	r4, #48	@ 0x30
 800b58a:	d12c      	bne.n	800b5e6 <_strtoul_l.constprop.0+0x86>
 800b58c:	7828      	ldrb	r0, [r5, #0]
 800b58e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b592:	2858      	cmp	r0, #88	@ 0x58
 800b594:	d127      	bne.n	800b5e6 <_strtoul_l.constprop.0+0x86>
 800b596:	786c      	ldrb	r4, [r5, #1]
 800b598:	2310      	movs	r3, #16
 800b59a:	3502      	adds	r5, #2
 800b59c:	f04f 38ff 	mov.w	r8, #4294967295
 800b5a0:	2600      	movs	r6, #0
 800b5a2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b5a6:	fb03 f908 	mul.w	r9, r3, r8
 800b5aa:	ea6f 0909 	mvn.w	r9, r9
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b5b4:	f1bc 0f09 	cmp.w	ip, #9
 800b5b8:	d81c      	bhi.n	800b5f4 <_strtoul_l.constprop.0+0x94>
 800b5ba:	4664      	mov	r4, ip
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	dd2a      	ble.n	800b616 <_strtoul_l.constprop.0+0xb6>
 800b5c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b5c4:	d007      	beq.n	800b5d6 <_strtoul_l.constprop.0+0x76>
 800b5c6:	4580      	cmp	r8, r0
 800b5c8:	d322      	bcc.n	800b610 <_strtoul_l.constprop.0+0xb0>
 800b5ca:	d101      	bne.n	800b5d0 <_strtoul_l.constprop.0+0x70>
 800b5cc:	45a1      	cmp	r9, r4
 800b5ce:	db1f      	blt.n	800b610 <_strtoul_l.constprop.0+0xb0>
 800b5d0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5d4:	2601      	movs	r6, #1
 800b5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5da:	e7e9      	b.n	800b5b0 <_strtoul_l.constprop.0+0x50>
 800b5dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5de:	bf04      	itt	eq
 800b5e0:	782c      	ldrbeq	r4, [r5, #0]
 800b5e2:	1c85      	addeq	r5, r0, #2
 800b5e4:	e7cd      	b.n	800b582 <_strtoul_l.constprop.0+0x22>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d8      	bne.n	800b59c <_strtoul_l.constprop.0+0x3c>
 800b5ea:	2c30      	cmp	r4, #48	@ 0x30
 800b5ec:	bf0c      	ite	eq
 800b5ee:	2308      	moveq	r3, #8
 800b5f0:	230a      	movne	r3, #10
 800b5f2:	e7d3      	b.n	800b59c <_strtoul_l.constprop.0+0x3c>
 800b5f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b5f8:	f1bc 0f19 	cmp.w	ip, #25
 800b5fc:	d801      	bhi.n	800b602 <_strtoul_l.constprop.0+0xa2>
 800b5fe:	3c37      	subs	r4, #55	@ 0x37
 800b600:	e7dc      	b.n	800b5bc <_strtoul_l.constprop.0+0x5c>
 800b602:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b606:	f1bc 0f19 	cmp.w	ip, #25
 800b60a:	d804      	bhi.n	800b616 <_strtoul_l.constprop.0+0xb6>
 800b60c:	3c57      	subs	r4, #87	@ 0x57
 800b60e:	e7d5      	b.n	800b5bc <_strtoul_l.constprop.0+0x5c>
 800b610:	f04f 36ff 	mov.w	r6, #4294967295
 800b614:	e7df      	b.n	800b5d6 <_strtoul_l.constprop.0+0x76>
 800b616:	1c73      	adds	r3, r6, #1
 800b618:	d106      	bne.n	800b628 <_strtoul_l.constprop.0+0xc8>
 800b61a:	2322      	movs	r3, #34	@ 0x22
 800b61c:	f8ce 3000 	str.w	r3, [lr]
 800b620:	4630      	mov	r0, r6
 800b622:	b932      	cbnz	r2, 800b632 <_strtoul_l.constprop.0+0xd2>
 800b624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b628:	b107      	cbz	r7, 800b62c <_strtoul_l.constprop.0+0xcc>
 800b62a:	4240      	negs	r0, r0
 800b62c:	2a00      	cmp	r2, #0
 800b62e:	d0f9      	beq.n	800b624 <_strtoul_l.constprop.0+0xc4>
 800b630:	b106      	cbz	r6, 800b634 <_strtoul_l.constprop.0+0xd4>
 800b632:	1e69      	subs	r1, r5, #1
 800b634:	6011      	str	r1, [r2, #0]
 800b636:	e7f5      	b.n	800b624 <_strtoul_l.constprop.0+0xc4>
 800b638:	0800cc01 	.word	0x0800cc01

0800b63c <_strtoul_r>:
 800b63c:	f7ff bf90 	b.w	800b560 <_strtoul_l.constprop.0>

0800b640 <strtoul>:
 800b640:	4613      	mov	r3, r2
 800b642:	460a      	mov	r2, r1
 800b644:	4601      	mov	r1, r0
 800b646:	4802      	ldr	r0, [pc, #8]	@ (800b650 <strtoul+0x10>)
 800b648:	6800      	ldr	r0, [r0, #0]
 800b64a:	f7ff bf89 	b.w	800b560 <_strtoul_l.constprop.0>
 800b64e:	bf00      	nop
 800b650:	20000198 	.word	0x20000198

0800b654 <__ascii_wctomb>:
 800b654:	4603      	mov	r3, r0
 800b656:	4608      	mov	r0, r1
 800b658:	b141      	cbz	r1, 800b66c <__ascii_wctomb+0x18>
 800b65a:	2aff      	cmp	r2, #255	@ 0xff
 800b65c:	d904      	bls.n	800b668 <__ascii_wctomb+0x14>
 800b65e:	228a      	movs	r2, #138	@ 0x8a
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	4770      	bx	lr
 800b668:	700a      	strb	r2, [r1, #0]
 800b66a:	2001      	movs	r0, #1
 800b66c:	4770      	bx	lr

0800b66e <__ssputs_r>:
 800b66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b672:	688e      	ldr	r6, [r1, #8]
 800b674:	461f      	mov	r7, r3
 800b676:	42be      	cmp	r6, r7
 800b678:	680b      	ldr	r3, [r1, #0]
 800b67a:	4682      	mov	sl, r0
 800b67c:	460c      	mov	r4, r1
 800b67e:	4690      	mov	r8, r2
 800b680:	d82d      	bhi.n	800b6de <__ssputs_r+0x70>
 800b682:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b686:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b68a:	d026      	beq.n	800b6da <__ssputs_r+0x6c>
 800b68c:	6965      	ldr	r5, [r4, #20]
 800b68e:	6909      	ldr	r1, [r1, #16]
 800b690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b694:	eba3 0901 	sub.w	r9, r3, r1
 800b698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b69c:	1c7b      	adds	r3, r7, #1
 800b69e:	444b      	add	r3, r9
 800b6a0:	106d      	asrs	r5, r5, #1
 800b6a2:	429d      	cmp	r5, r3
 800b6a4:	bf38      	it	cc
 800b6a6:	461d      	movcc	r5, r3
 800b6a8:	0553      	lsls	r3, r2, #21
 800b6aa:	d527      	bpl.n	800b6fc <__ssputs_r+0x8e>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	f7fb fa7b 	bl	8006ba8 <_malloc_r>
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	b360      	cbz	r0, 800b710 <__ssputs_r+0xa2>
 800b6b6:	6921      	ldr	r1, [r4, #16]
 800b6b8:	464a      	mov	r2, r9
 800b6ba:	f7fe f852 	bl	8009762 <memcpy>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	6126      	str	r6, [r4, #16]
 800b6cc:	6165      	str	r5, [r4, #20]
 800b6ce:	444e      	add	r6, r9
 800b6d0:	eba5 0509 	sub.w	r5, r5, r9
 800b6d4:	6026      	str	r6, [r4, #0]
 800b6d6:	60a5      	str	r5, [r4, #8]
 800b6d8:	463e      	mov	r6, r7
 800b6da:	42be      	cmp	r6, r7
 800b6dc:	d900      	bls.n	800b6e0 <__ssputs_r+0x72>
 800b6de:	463e      	mov	r6, r7
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	f000 fdb4 	bl	800c252 <memmove>
 800b6ea:	68a3      	ldr	r3, [r4, #8]
 800b6ec:	1b9b      	subs	r3, r3, r6
 800b6ee:	60a3      	str	r3, [r4, #8]
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	4433      	add	r3, r6
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	f000 fe27 	bl	800c350 <_realloc_r>
 800b702:	4606      	mov	r6, r0
 800b704:	2800      	cmp	r0, #0
 800b706:	d1e0      	bne.n	800b6ca <__ssputs_r+0x5c>
 800b708:	6921      	ldr	r1, [r4, #16]
 800b70a:	4650      	mov	r0, sl
 800b70c:	f7fe fe9c 	bl	800a448 <_free_r>
 800b710:	230c      	movs	r3, #12
 800b712:	f8ca 3000 	str.w	r3, [sl]
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295
 800b722:	e7e9      	b.n	800b6f8 <__ssputs_r+0x8a>

0800b724 <_svfiprintf_r>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	4698      	mov	r8, r3
 800b72a:	898b      	ldrh	r3, [r1, #12]
 800b72c:	061b      	lsls	r3, r3, #24
 800b72e:	b09d      	sub	sp, #116	@ 0x74
 800b730:	4607      	mov	r7, r0
 800b732:	460d      	mov	r5, r1
 800b734:	4614      	mov	r4, r2
 800b736:	d510      	bpl.n	800b75a <_svfiprintf_r+0x36>
 800b738:	690b      	ldr	r3, [r1, #16]
 800b73a:	b973      	cbnz	r3, 800b75a <_svfiprintf_r+0x36>
 800b73c:	2140      	movs	r1, #64	@ 0x40
 800b73e:	f7fb fa33 	bl	8006ba8 <_malloc_r>
 800b742:	6028      	str	r0, [r5, #0]
 800b744:	6128      	str	r0, [r5, #16]
 800b746:	b930      	cbnz	r0, 800b756 <_svfiprintf_r+0x32>
 800b748:	230c      	movs	r3, #12
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	b01d      	add	sp, #116	@ 0x74
 800b752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b756:	2340      	movs	r3, #64	@ 0x40
 800b758:	616b      	str	r3, [r5, #20]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75e:	2320      	movs	r3, #32
 800b760:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b764:	f8cd 800c 	str.w	r8, [sp, #12]
 800b768:	2330      	movs	r3, #48	@ 0x30
 800b76a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b908 <_svfiprintf_r+0x1e4>
 800b76e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b772:	f04f 0901 	mov.w	r9, #1
 800b776:	4623      	mov	r3, r4
 800b778:	469a      	mov	sl, r3
 800b77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77e:	b10a      	cbz	r2, 800b784 <_svfiprintf_r+0x60>
 800b780:	2a25      	cmp	r2, #37	@ 0x25
 800b782:	d1f9      	bne.n	800b778 <_svfiprintf_r+0x54>
 800b784:	ebba 0b04 	subs.w	fp, sl, r4
 800b788:	d00b      	beq.n	800b7a2 <_svfiprintf_r+0x7e>
 800b78a:	465b      	mov	r3, fp
 800b78c:	4622      	mov	r2, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff ff6c 	bl	800b66e <__ssputs_r>
 800b796:	3001      	adds	r0, #1
 800b798:	f000 80a7 	beq.w	800b8ea <_svfiprintf_r+0x1c6>
 800b79c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b79e:	445a      	add	r2, fp
 800b7a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 809f 	beq.w	800b8ea <_svfiprintf_r+0x1c6>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	9307      	str	r3, [sp, #28]
 800b7be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7c4:	4654      	mov	r4, sl
 800b7c6:	2205      	movs	r2, #5
 800b7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7cc:	484e      	ldr	r0, [pc, #312]	@ (800b908 <_svfiprintf_r+0x1e4>)
 800b7ce:	f7f4 fd0f 	bl	80001f0 <memchr>
 800b7d2:	9a04      	ldr	r2, [sp, #16]
 800b7d4:	b9d8      	cbnz	r0, 800b80e <_svfiprintf_r+0xea>
 800b7d6:	06d0      	lsls	r0, r2, #27
 800b7d8:	bf44      	itt	mi
 800b7da:	2320      	movmi	r3, #32
 800b7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e0:	0711      	lsls	r1, r2, #28
 800b7e2:	bf44      	itt	mi
 800b7e4:	232b      	movmi	r3, #43	@ 0x2b
 800b7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7f0:	d015      	beq.n	800b81e <_svfiprintf_r+0xfa>
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	4654      	mov	r4, sl
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f04f 0c0a 	mov.w	ip, #10
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b802:	3b30      	subs	r3, #48	@ 0x30
 800b804:	2b09      	cmp	r3, #9
 800b806:	d94b      	bls.n	800b8a0 <_svfiprintf_r+0x17c>
 800b808:	b1b0      	cbz	r0, 800b838 <_svfiprintf_r+0x114>
 800b80a:	9207      	str	r2, [sp, #28]
 800b80c:	e014      	b.n	800b838 <_svfiprintf_r+0x114>
 800b80e:	eba0 0308 	sub.w	r3, r0, r8
 800b812:	fa09 f303 	lsl.w	r3, r9, r3
 800b816:	4313      	orrs	r3, r2
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	46a2      	mov	sl, r4
 800b81c:	e7d2      	b.n	800b7c4 <_svfiprintf_r+0xa0>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	1d19      	adds	r1, r3, #4
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	9103      	str	r1, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfbb      	ittet	lt
 800b82a:	425b      	neglt	r3, r3
 800b82c:	f042 0202 	orrlt.w	r2, r2, #2
 800b830:	9307      	strge	r3, [sp, #28]
 800b832:	9307      	strlt	r3, [sp, #28]
 800b834:	bfb8      	it	lt
 800b836:	9204      	strlt	r2, [sp, #16]
 800b838:	7823      	ldrb	r3, [r4, #0]
 800b83a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b83c:	d10a      	bne.n	800b854 <_svfiprintf_r+0x130>
 800b83e:	7863      	ldrb	r3, [r4, #1]
 800b840:	2b2a      	cmp	r3, #42	@ 0x2a
 800b842:	d132      	bne.n	800b8aa <_svfiprintf_r+0x186>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1d1a      	adds	r2, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	9203      	str	r2, [sp, #12]
 800b84c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b850:	3402      	adds	r4, #2
 800b852:	9305      	str	r3, [sp, #20]
 800b854:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b918 <_svfiprintf_r+0x1f4>
 800b858:	7821      	ldrb	r1, [r4, #0]
 800b85a:	2203      	movs	r2, #3
 800b85c:	4650      	mov	r0, sl
 800b85e:	f7f4 fcc7 	bl	80001f0 <memchr>
 800b862:	b138      	cbz	r0, 800b874 <_svfiprintf_r+0x150>
 800b864:	9b04      	ldr	r3, [sp, #16]
 800b866:	eba0 000a 	sub.w	r0, r0, sl
 800b86a:	2240      	movs	r2, #64	@ 0x40
 800b86c:	4082      	lsls	r2, r0
 800b86e:	4313      	orrs	r3, r2
 800b870:	3401      	adds	r4, #1
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b878:	4824      	ldr	r0, [pc, #144]	@ (800b90c <_svfiprintf_r+0x1e8>)
 800b87a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b87e:	2206      	movs	r2, #6
 800b880:	f7f4 fcb6 	bl	80001f0 <memchr>
 800b884:	2800      	cmp	r0, #0
 800b886:	d036      	beq.n	800b8f6 <_svfiprintf_r+0x1d2>
 800b888:	4b21      	ldr	r3, [pc, #132]	@ (800b910 <_svfiprintf_r+0x1ec>)
 800b88a:	bb1b      	cbnz	r3, 800b8d4 <_svfiprintf_r+0x1b0>
 800b88c:	9b03      	ldr	r3, [sp, #12]
 800b88e:	3307      	adds	r3, #7
 800b890:	f023 0307 	bic.w	r3, r3, #7
 800b894:	3308      	adds	r3, #8
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89a:	4433      	add	r3, r6
 800b89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89e:	e76a      	b.n	800b776 <_svfiprintf_r+0x52>
 800b8a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	e7a8      	b.n	800b7fc <_svfiprintf_r+0xd8>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	3401      	adds	r4, #1
 800b8ae:	9305      	str	r3, [sp, #20]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	f04f 0c0a 	mov.w	ip, #10
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8bc:	3a30      	subs	r2, #48	@ 0x30
 800b8be:	2a09      	cmp	r2, #9
 800b8c0:	d903      	bls.n	800b8ca <_svfiprintf_r+0x1a6>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0c6      	beq.n	800b854 <_svfiprintf_r+0x130>
 800b8c6:	9105      	str	r1, [sp, #20]
 800b8c8:	e7c4      	b.n	800b854 <_svfiprintf_r+0x130>
 800b8ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e7f0      	b.n	800b8b6 <_svfiprintf_r+0x192>
 800b8d4:	ab03      	add	r3, sp, #12
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4b0e      	ldr	r3, [pc, #56]	@ (800b914 <_svfiprintf_r+0x1f0>)
 800b8dc:	a904      	add	r1, sp, #16
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7fc f914 	bl	8007b0c <_printf_float>
 800b8e4:	1c42      	adds	r2, r0, #1
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	d1d6      	bne.n	800b898 <_svfiprintf_r+0x174>
 800b8ea:	89ab      	ldrh	r3, [r5, #12]
 800b8ec:	065b      	lsls	r3, r3, #25
 800b8ee:	f53f af2d 	bmi.w	800b74c <_svfiprintf_r+0x28>
 800b8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8f4:	e72c      	b.n	800b750 <_svfiprintf_r+0x2c>
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4b05      	ldr	r3, [pc, #20]	@ (800b914 <_svfiprintf_r+0x1f0>)
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4638      	mov	r0, r7
 800b902:	f7fc fb9b 	bl	800803c <_printf_i>
 800b906:	e7ed      	b.n	800b8e4 <_svfiprintf_r+0x1c0>
 800b908:	0800d030 	.word	0x0800d030
 800b90c:	0800d03a 	.word	0x0800d03a
 800b910:	08007b0d 	.word	0x08007b0d
 800b914:	0800b66f 	.word	0x0800b66f
 800b918:	0800d036 	.word	0x0800d036

0800b91c <_sungetc_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	1c4b      	adds	r3, r1, #1
 800b920:	4614      	mov	r4, r2
 800b922:	d103      	bne.n	800b92c <_sungetc_r+0x10>
 800b924:	f04f 35ff 	mov.w	r5, #4294967295
 800b928:	4628      	mov	r0, r5
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	8993      	ldrh	r3, [r2, #12]
 800b92e:	f023 0320 	bic.w	r3, r3, #32
 800b932:	8193      	strh	r3, [r2, #12]
 800b934:	6853      	ldr	r3, [r2, #4]
 800b936:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b938:	b2cd      	uxtb	r5, r1
 800b93a:	b18a      	cbz	r2, 800b960 <_sungetc_r+0x44>
 800b93c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b93e:	429a      	cmp	r2, r3
 800b940:	dd08      	ble.n	800b954 <_sungetc_r+0x38>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	1e5a      	subs	r2, r3, #1
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b94c:	6863      	ldr	r3, [r4, #4]
 800b94e:	3301      	adds	r3, #1
 800b950:	6063      	str	r3, [r4, #4]
 800b952:	e7e9      	b.n	800b928 <_sungetc_r+0xc>
 800b954:	4621      	mov	r1, r4
 800b956:	f000 fc42 	bl	800c1de <__submore>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d0f1      	beq.n	800b942 <_sungetc_r+0x26>
 800b95e:	e7e1      	b.n	800b924 <_sungetc_r+0x8>
 800b960:	6921      	ldr	r1, [r4, #16]
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	b141      	cbz	r1, 800b978 <_sungetc_r+0x5c>
 800b966:	4291      	cmp	r1, r2
 800b968:	d206      	bcs.n	800b978 <_sungetc_r+0x5c>
 800b96a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b96e:	42a9      	cmp	r1, r5
 800b970:	d102      	bne.n	800b978 <_sungetc_r+0x5c>
 800b972:	3a01      	subs	r2, #1
 800b974:	6022      	str	r2, [r4, #0]
 800b976:	e7ea      	b.n	800b94e <_sungetc_r+0x32>
 800b978:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b980:	6363      	str	r3, [r4, #52]	@ 0x34
 800b982:	2303      	movs	r3, #3
 800b984:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b986:	4623      	mov	r3, r4
 800b988:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	2301      	movs	r3, #1
 800b990:	e7de      	b.n	800b950 <_sungetc_r+0x34>

0800b992 <__ssrefill_r>:
 800b992:	b510      	push	{r4, lr}
 800b994:	460c      	mov	r4, r1
 800b996:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b998:	b169      	cbz	r1, 800b9b6 <__ssrefill_r+0x24>
 800b99a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b99e:	4299      	cmp	r1, r3
 800b9a0:	d001      	beq.n	800b9a6 <__ssrefill_r+0x14>
 800b9a2:	f7fe fd51 	bl	800a448 <_free_r>
 800b9a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	6360      	str	r0, [r4, #52]	@ 0x34
 800b9ae:	b113      	cbz	r3, 800b9b6 <__ssrefill_r+0x24>
 800b9b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ca:	e7f3      	b.n	800b9b4 <__ssrefill_r+0x22>

0800b9cc <__ssvfiscanf_r>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b9dc:	49a5      	ldr	r1, [pc, #660]	@ (800bc74 <__ssvfiscanf_r+0x2a8>)
 800b9de:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b9e0:	f10d 0804 	add.w	r8, sp, #4
 800b9e4:	49a4      	ldr	r1, [pc, #656]	@ (800bc78 <__ssvfiscanf_r+0x2ac>)
 800b9e6:	4fa5      	ldr	r7, [pc, #660]	@ (800bc7c <__ssvfiscanf_r+0x2b0>)
 800b9e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	7813      	ldrb	r3, [r2, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 8158 	beq.w	800bcaa <__ssvfiscanf_r+0x2de>
 800b9fa:	5cf9      	ldrb	r1, [r7, r3]
 800b9fc:	f011 0108 	ands.w	r1, r1, #8
 800ba00:	f102 0501 	add.w	r5, r2, #1
 800ba04:	d019      	beq.n	800ba3a <__ssvfiscanf_r+0x6e>
 800ba06:	6863      	ldr	r3, [r4, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	dd0f      	ble.n	800ba2c <__ssvfiscanf_r+0x60>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	5cba      	ldrb	r2, [r7, r2]
 800ba12:	0712      	lsls	r2, r2, #28
 800ba14:	d401      	bmi.n	800ba1a <__ssvfiscanf_r+0x4e>
 800ba16:	462a      	mov	r2, r5
 800ba18:	e7eb      	b.n	800b9f2 <__ssvfiscanf_r+0x26>
 800ba1a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	9245      	str	r2, [sp, #276]	@ 0x114
 800ba20:	6862      	ldr	r2, [r4, #4]
 800ba22:	3301      	adds	r3, #1
 800ba24:	3a01      	subs	r2, #1
 800ba26:	6062      	str	r2, [r4, #4]
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	e7ec      	b.n	800ba06 <__ssvfiscanf_r+0x3a>
 800ba2c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	4798      	blx	r3
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d0e9      	beq.n	800ba0c <__ssvfiscanf_r+0x40>
 800ba38:	e7ed      	b.n	800ba16 <__ssvfiscanf_r+0x4a>
 800ba3a:	2b25      	cmp	r3, #37	@ 0x25
 800ba3c:	d012      	beq.n	800ba64 <__ssvfiscanf_r+0x98>
 800ba3e:	4699      	mov	r9, r3
 800ba40:	6863      	ldr	r3, [r4, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f340 8093 	ble.w	800bb6e <__ssvfiscanf_r+0x1a2>
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	7813      	ldrb	r3, [r2, #0]
 800ba4c:	454b      	cmp	r3, r9
 800ba4e:	f040 812c 	bne.w	800bcaa <__ssvfiscanf_r+0x2de>
 800ba52:	6863      	ldr	r3, [r4, #4]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	6063      	str	r3, [r4, #4]
 800ba58:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ba5a:	3201      	adds	r2, #1
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	6022      	str	r2, [r4, #0]
 800ba60:	9345      	str	r3, [sp, #276]	@ 0x114
 800ba62:	e7d8      	b.n	800ba16 <__ssvfiscanf_r+0x4a>
 800ba64:	9141      	str	r1, [sp, #260]	@ 0x104
 800ba66:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ba68:	7853      	ldrb	r3, [r2, #1]
 800ba6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba6c:	bf02      	ittt	eq
 800ba6e:	2310      	moveq	r3, #16
 800ba70:	1c95      	addeq	r5, r2, #2
 800ba72:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ba74:	220a      	movs	r2, #10
 800ba76:	46a9      	mov	r9, r5
 800ba78:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ba7c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ba80:	2b09      	cmp	r3, #9
 800ba82:	d91e      	bls.n	800bac2 <__ssvfiscanf_r+0xf6>
 800ba84:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800bc80 <__ssvfiscanf_r+0x2b4>
 800ba88:	2203      	movs	r2, #3
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	f7f4 fbb0 	bl	80001f0 <memchr>
 800ba90:	b138      	cbz	r0, 800baa2 <__ssvfiscanf_r+0xd6>
 800ba92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ba94:	eba0 000a 	sub.w	r0, r0, sl
 800ba98:	2301      	movs	r3, #1
 800ba9a:	4083      	lsls	r3, r0
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	9341      	str	r3, [sp, #260]	@ 0x104
 800baa0:	464d      	mov	r5, r9
 800baa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800baa6:	2b78      	cmp	r3, #120	@ 0x78
 800baa8:	d806      	bhi.n	800bab8 <__ssvfiscanf_r+0xec>
 800baaa:	2b57      	cmp	r3, #87	@ 0x57
 800baac:	d810      	bhi.n	800bad0 <__ssvfiscanf_r+0x104>
 800baae:	2b25      	cmp	r3, #37	@ 0x25
 800bab0:	d0c5      	beq.n	800ba3e <__ssvfiscanf_r+0x72>
 800bab2:	d857      	bhi.n	800bb64 <__ssvfiscanf_r+0x198>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d065      	beq.n	800bb84 <__ssvfiscanf_r+0x1b8>
 800bab8:	2303      	movs	r3, #3
 800baba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800babc:	230a      	movs	r3, #10
 800babe:	9342      	str	r3, [sp, #264]	@ 0x108
 800bac0:	e078      	b.n	800bbb4 <__ssvfiscanf_r+0x1e8>
 800bac2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bac4:	fb02 1103 	mla	r1, r2, r3, r1
 800bac8:	3930      	subs	r1, #48	@ 0x30
 800baca:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bacc:	464d      	mov	r5, r9
 800bace:	e7d2      	b.n	800ba76 <__ssvfiscanf_r+0xaa>
 800bad0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bad4:	2a20      	cmp	r2, #32
 800bad6:	d8ef      	bhi.n	800bab8 <__ssvfiscanf_r+0xec>
 800bad8:	a101      	add	r1, pc, #4	@ (adr r1, 800bae0 <__ssvfiscanf_r+0x114>)
 800bada:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bade:	bf00      	nop
 800bae0:	0800bb93 	.word	0x0800bb93
 800bae4:	0800bab9 	.word	0x0800bab9
 800bae8:	0800bab9 	.word	0x0800bab9
 800baec:	0800bbed 	.word	0x0800bbed
 800baf0:	0800bab9 	.word	0x0800bab9
 800baf4:	0800bab9 	.word	0x0800bab9
 800baf8:	0800bab9 	.word	0x0800bab9
 800bafc:	0800bab9 	.word	0x0800bab9
 800bb00:	0800bab9 	.word	0x0800bab9
 800bb04:	0800bab9 	.word	0x0800bab9
 800bb08:	0800bab9 	.word	0x0800bab9
 800bb0c:	0800bc03 	.word	0x0800bc03
 800bb10:	0800bbe9 	.word	0x0800bbe9
 800bb14:	0800bb6b 	.word	0x0800bb6b
 800bb18:	0800bb6b 	.word	0x0800bb6b
 800bb1c:	0800bb6b 	.word	0x0800bb6b
 800bb20:	0800bab9 	.word	0x0800bab9
 800bb24:	0800bba5 	.word	0x0800bba5
 800bb28:	0800bab9 	.word	0x0800bab9
 800bb2c:	0800bab9 	.word	0x0800bab9
 800bb30:	0800bab9 	.word	0x0800bab9
 800bb34:	0800bab9 	.word	0x0800bab9
 800bb38:	0800bc13 	.word	0x0800bc13
 800bb3c:	0800bbad 	.word	0x0800bbad
 800bb40:	0800bb8b 	.word	0x0800bb8b
 800bb44:	0800bab9 	.word	0x0800bab9
 800bb48:	0800bab9 	.word	0x0800bab9
 800bb4c:	0800bc0f 	.word	0x0800bc0f
 800bb50:	0800bab9 	.word	0x0800bab9
 800bb54:	0800bbe9 	.word	0x0800bbe9
 800bb58:	0800bab9 	.word	0x0800bab9
 800bb5c:	0800bab9 	.word	0x0800bab9
 800bb60:	0800bb93 	.word	0x0800bb93
 800bb64:	3b45      	subs	r3, #69	@ 0x45
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d8a6      	bhi.n	800bab8 <__ssvfiscanf_r+0xec>
 800bb6a:	2305      	movs	r3, #5
 800bb6c:	e021      	b.n	800bbb2 <__ssvfiscanf_r+0x1e6>
 800bb6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bb70:	4621      	mov	r1, r4
 800bb72:	4630      	mov	r0, r6
 800bb74:	4798      	blx	r3
 800bb76:	2800      	cmp	r0, #0
 800bb78:	f43f af66 	beq.w	800ba48 <__ssvfiscanf_r+0x7c>
 800bb7c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f040 808b 	bne.w	800bc9a <__ssvfiscanf_r+0x2ce>
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	e08b      	b.n	800bca2 <__ssvfiscanf_r+0x2d6>
 800bb8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bb8c:	f042 0220 	orr.w	r2, r2, #32
 800bb90:	9241      	str	r2, [sp, #260]	@ 0x104
 800bb92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bb94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb98:	9241      	str	r2, [sp, #260]	@ 0x104
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb9e:	9242      	str	r2, [sp, #264]	@ 0x108
 800bba0:	d902      	bls.n	800bba8 <__ssvfiscanf_r+0x1dc>
 800bba2:	e005      	b.n	800bbb0 <__ssvfiscanf_r+0x1e4>
 800bba4:	2300      	movs	r3, #0
 800bba6:	9342      	str	r3, [sp, #264]	@ 0x108
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e002      	b.n	800bbb2 <__ssvfiscanf_r+0x1e6>
 800bbac:	2308      	movs	r3, #8
 800bbae:	9342      	str	r3, [sp, #264]	@ 0x108
 800bbb0:	2304      	movs	r3, #4
 800bbb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bbb4:	6863      	ldr	r3, [r4, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dd39      	ble.n	800bc2e <__ssvfiscanf_r+0x262>
 800bbba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bbbc:	0659      	lsls	r1, r3, #25
 800bbbe:	d404      	bmi.n	800bbca <__ssvfiscanf_r+0x1fe>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	781a      	ldrb	r2, [r3, #0]
 800bbc4:	5cba      	ldrb	r2, [r7, r2]
 800bbc6:	0712      	lsls	r2, r2, #28
 800bbc8:	d438      	bmi.n	800bc3c <__ssvfiscanf_r+0x270>
 800bbca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	dc47      	bgt.n	800bc60 <__ssvfiscanf_r+0x294>
 800bbd0:	466b      	mov	r3, sp
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	a941      	add	r1, sp, #260	@ 0x104
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f000 f86c 	bl	800bcb4 <_scanf_chars>
 800bbdc:	2801      	cmp	r0, #1
 800bbde:	d064      	beq.n	800bcaa <__ssvfiscanf_r+0x2de>
 800bbe0:	2802      	cmp	r0, #2
 800bbe2:	f47f af18 	bne.w	800ba16 <__ssvfiscanf_r+0x4a>
 800bbe6:	e7c9      	b.n	800bb7c <__ssvfiscanf_r+0x1b0>
 800bbe8:	220a      	movs	r2, #10
 800bbea:	e7d7      	b.n	800bb9c <__ssvfiscanf_r+0x1d0>
 800bbec:	4629      	mov	r1, r5
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f000 fabc 	bl	800c16c <__sccl>
 800bbf4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bbf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbfa:	9341      	str	r3, [sp, #260]	@ 0x104
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e7d7      	b.n	800bbb2 <__ssvfiscanf_r+0x1e6>
 800bc02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bc04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc08:	9341      	str	r3, [sp, #260]	@ 0x104
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e7d1      	b.n	800bbb2 <__ssvfiscanf_r+0x1e6>
 800bc0e:	2302      	movs	r3, #2
 800bc10:	e7cf      	b.n	800bbb2 <__ssvfiscanf_r+0x1e6>
 800bc12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bc14:	06c3      	lsls	r3, r0, #27
 800bc16:	f53f aefe 	bmi.w	800ba16 <__ssvfiscanf_r+0x4a>
 800bc1a:	9b00      	ldr	r3, [sp, #0]
 800bc1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc1e:	1d19      	adds	r1, r3, #4
 800bc20:	9100      	str	r1, [sp, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	07c0      	lsls	r0, r0, #31
 800bc26:	bf4c      	ite	mi
 800bc28:	801a      	strhmi	r2, [r3, #0]
 800bc2a:	601a      	strpl	r2, [r3, #0]
 800bc2c:	e6f3      	b.n	800ba16 <__ssvfiscanf_r+0x4a>
 800bc2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc30:	4621      	mov	r1, r4
 800bc32:	4630      	mov	r0, r6
 800bc34:	4798      	blx	r3
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d0bf      	beq.n	800bbba <__ssvfiscanf_r+0x1ee>
 800bc3a:	e79f      	b.n	800bb7c <__ssvfiscanf_r+0x1b0>
 800bc3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc3e:	3201      	adds	r2, #1
 800bc40:	9245      	str	r2, [sp, #276]	@ 0x114
 800bc42:	6862      	ldr	r2, [r4, #4]
 800bc44:	3a01      	subs	r2, #1
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	6062      	str	r2, [r4, #4]
 800bc4a:	dd02      	ble.n	800bc52 <__ssvfiscanf_r+0x286>
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	e7b6      	b.n	800bbc0 <__ssvfiscanf_r+0x1f4>
 800bc52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bc54:	4621      	mov	r1, r4
 800bc56:	4630      	mov	r0, r6
 800bc58:	4798      	blx	r3
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d0b0      	beq.n	800bbc0 <__ssvfiscanf_r+0x1f4>
 800bc5e:	e78d      	b.n	800bb7c <__ssvfiscanf_r+0x1b0>
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	dc0f      	bgt.n	800bc84 <__ssvfiscanf_r+0x2b8>
 800bc64:	466b      	mov	r3, sp
 800bc66:	4622      	mov	r2, r4
 800bc68:	a941      	add	r1, sp, #260	@ 0x104
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f000 f87c 	bl	800bd68 <_scanf_i>
 800bc70:	e7b4      	b.n	800bbdc <__ssvfiscanf_r+0x210>
 800bc72:	bf00      	nop
 800bc74:	0800b91d 	.word	0x0800b91d
 800bc78:	0800b993 	.word	0x0800b993
 800bc7c:	0800cc01 	.word	0x0800cc01
 800bc80:	0800d036 	.word	0x0800d036
 800bc84:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb0 <__ssvfiscanf_r+0x2e4>)
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f43f aec5 	beq.w	800ba16 <__ssvfiscanf_r+0x4a>
 800bc8c:	466b      	mov	r3, sp
 800bc8e:	4622      	mov	r2, r4
 800bc90:	a941      	add	r1, sp, #260	@ 0x104
 800bc92:	4630      	mov	r0, r6
 800bc94:	f7fc faf2 	bl	800827c <_scanf_float>
 800bc98:	e7a0      	b.n	800bbdc <__ssvfiscanf_r+0x210>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	065b      	lsls	r3, r3, #25
 800bc9e:	f53f af71 	bmi.w	800bb84 <__ssvfiscanf_r+0x1b8>
 800bca2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcaa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bcac:	e7f9      	b.n	800bca2 <__ssvfiscanf_r+0x2d6>
 800bcae:	bf00      	nop
 800bcb0:	0800827d 	.word	0x0800827d

0800bcb4 <_scanf_chars>:
 800bcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4615      	mov	r5, r2
 800bcba:	688a      	ldr	r2, [r1, #8]
 800bcbc:	4680      	mov	r8, r0
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	b932      	cbnz	r2, 800bcd0 <_scanf_chars+0x1c>
 800bcc2:	698a      	ldr	r2, [r1, #24]
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	bf14      	ite	ne
 800bcc8:	f04f 32ff 	movne.w	r2, #4294967295
 800bccc:	2201      	moveq	r2, #1
 800bcce:	608a      	str	r2, [r1, #8]
 800bcd0:	6822      	ldr	r2, [r4, #0]
 800bcd2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bd64 <_scanf_chars+0xb0>
 800bcd6:	06d1      	lsls	r1, r2, #27
 800bcd8:	bf5f      	itttt	pl
 800bcda:	681a      	ldrpl	r2, [r3, #0]
 800bcdc:	1d11      	addpl	r1, r2, #4
 800bcde:	6019      	strpl	r1, [r3, #0]
 800bce0:	6816      	ldrpl	r6, [r2, #0]
 800bce2:	2700      	movs	r7, #0
 800bce4:	69a0      	ldr	r0, [r4, #24]
 800bce6:	b188      	cbz	r0, 800bd0c <_scanf_chars+0x58>
 800bce8:	2801      	cmp	r0, #1
 800bcea:	d107      	bne.n	800bcfc <_scanf_chars+0x48>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	781a      	ldrb	r2, [r3, #0]
 800bcf0:	6963      	ldr	r3, [r4, #20]
 800bcf2:	5c9b      	ldrb	r3, [r3, r2]
 800bcf4:	b953      	cbnz	r3, 800bd0c <_scanf_chars+0x58>
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d031      	beq.n	800bd5e <_scanf_chars+0xaa>
 800bcfa:	e022      	b.n	800bd42 <_scanf_chars+0x8e>
 800bcfc:	2802      	cmp	r0, #2
 800bcfe:	d120      	bne.n	800bd42 <_scanf_chars+0x8e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bd08:	071b      	lsls	r3, r3, #28
 800bd0a:	d41a      	bmi.n	800bd42 <_scanf_chars+0x8e>
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	06da      	lsls	r2, r3, #27
 800bd10:	bf5e      	ittt	pl
 800bd12:	682b      	ldrpl	r3, [r5, #0]
 800bd14:	781b      	ldrbpl	r3, [r3, #0]
 800bd16:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd1a:	682a      	ldr	r2, [r5, #0]
 800bd1c:	686b      	ldr	r3, [r5, #4]
 800bd1e:	3201      	adds	r2, #1
 800bd20:	602a      	str	r2, [r5, #0]
 800bd22:	68a2      	ldr	r2, [r4, #8]
 800bd24:	3b01      	subs	r3, #1
 800bd26:	3a01      	subs	r2, #1
 800bd28:	606b      	str	r3, [r5, #4]
 800bd2a:	3701      	adds	r7, #1
 800bd2c:	60a2      	str	r2, [r4, #8]
 800bd2e:	b142      	cbz	r2, 800bd42 <_scanf_chars+0x8e>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	dcd7      	bgt.n	800bce4 <_scanf_chars+0x30>
 800bd34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	4798      	blx	r3
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d0d0      	beq.n	800bce4 <_scanf_chars+0x30>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f013 0310 	ands.w	r3, r3, #16
 800bd48:	d105      	bne.n	800bd56 <_scanf_chars+0xa2>
 800bd4a:	68e2      	ldr	r2, [r4, #12]
 800bd4c:	3201      	adds	r2, #1
 800bd4e:	60e2      	str	r2, [r4, #12]
 800bd50:	69a2      	ldr	r2, [r4, #24]
 800bd52:	b102      	cbz	r2, 800bd56 <_scanf_chars+0xa2>
 800bd54:	7033      	strb	r3, [r6, #0]
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	443b      	add	r3, r7
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	bf00      	nop
 800bd64:	0800cc01 	.word	0x0800cc01

0800bd68 <_scanf_i>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	4698      	mov	r8, r3
 800bd6e:	4b74      	ldr	r3, [pc, #464]	@ (800bf40 <_scanf_i+0x1d8>)
 800bd70:	460c      	mov	r4, r1
 800bd72:	4682      	mov	sl, r0
 800bd74:	4616      	mov	r6, r2
 800bd76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd82:	4b70      	ldr	r3, [pc, #448]	@ (800bf44 <_scanf_i+0x1dc>)
 800bd84:	69a1      	ldr	r1, [r4, #24]
 800bd86:	4a70      	ldr	r2, [pc, #448]	@ (800bf48 <_scanf_i+0x1e0>)
 800bd88:	2903      	cmp	r1, #3
 800bd8a:	bf08      	it	eq
 800bd8c:	461a      	moveq	r2, r3
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	9201      	str	r2, [sp, #4]
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bd98:	bf88      	it	hi
 800bd9a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bd9e:	4627      	mov	r7, r4
 800bda0:	bf82      	ittt	hi
 800bda2:	eb03 0905 	addhi.w	r9, r3, r5
 800bda6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bdaa:	60a3      	strhi	r3, [r4, #8]
 800bdac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bdb0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bdb4:	bf98      	it	ls
 800bdb6:	f04f 0900 	movls.w	r9, #0
 800bdba:	6023      	str	r3, [r4, #0]
 800bdbc:	463d      	mov	r5, r7
 800bdbe:	f04f 0b00 	mov.w	fp, #0
 800bdc2:	6831      	ldr	r1, [r6, #0]
 800bdc4:	ab03      	add	r3, sp, #12
 800bdc6:	7809      	ldrb	r1, [r1, #0]
 800bdc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	f7f4 fa0f 	bl	80001f0 <memchr>
 800bdd2:	b328      	cbz	r0, 800be20 <_scanf_i+0xb8>
 800bdd4:	f1bb 0f01 	cmp.w	fp, #1
 800bdd8:	d159      	bne.n	800be8e <_scanf_i+0x126>
 800bdda:	6862      	ldr	r2, [r4, #4]
 800bddc:	b92a      	cbnz	r2, 800bdea <_scanf_i+0x82>
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	2108      	movs	r1, #8
 800bde2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bde6:	6061      	str	r1, [r4, #4]
 800bde8:	6022      	str	r2, [r4, #0]
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bdf0:	6022      	str	r2, [r4, #0]
 800bdf2:	68a2      	ldr	r2, [r4, #8]
 800bdf4:	1e51      	subs	r1, r2, #1
 800bdf6:	60a1      	str	r1, [r4, #8]
 800bdf8:	b192      	cbz	r2, 800be20 <_scanf_i+0xb8>
 800bdfa:	6832      	ldr	r2, [r6, #0]
 800bdfc:	1c51      	adds	r1, r2, #1
 800bdfe:	6031      	str	r1, [r6, #0]
 800be00:	7812      	ldrb	r2, [r2, #0]
 800be02:	f805 2b01 	strb.w	r2, [r5], #1
 800be06:	6872      	ldr	r2, [r6, #4]
 800be08:	3a01      	subs	r2, #1
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	6072      	str	r2, [r6, #4]
 800be0e:	dc07      	bgt.n	800be20 <_scanf_i+0xb8>
 800be10:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800be14:	4631      	mov	r1, r6
 800be16:	4650      	mov	r0, sl
 800be18:	4790      	blx	r2
 800be1a:	2800      	cmp	r0, #0
 800be1c:	f040 8085 	bne.w	800bf2a <_scanf_i+0x1c2>
 800be20:	f10b 0b01 	add.w	fp, fp, #1
 800be24:	f1bb 0f03 	cmp.w	fp, #3
 800be28:	d1cb      	bne.n	800bdc2 <_scanf_i+0x5a>
 800be2a:	6863      	ldr	r3, [r4, #4]
 800be2c:	b90b      	cbnz	r3, 800be32 <_scanf_i+0xca>
 800be2e:	230a      	movs	r3, #10
 800be30:	6063      	str	r3, [r4, #4]
 800be32:	6863      	ldr	r3, [r4, #4]
 800be34:	4945      	ldr	r1, [pc, #276]	@ (800bf4c <_scanf_i+0x1e4>)
 800be36:	6960      	ldr	r0, [r4, #20]
 800be38:	1ac9      	subs	r1, r1, r3
 800be3a:	f000 f997 	bl	800c16c <__sccl>
 800be3e:	f04f 0b00 	mov.w	fp, #0
 800be42:	68a3      	ldr	r3, [r4, #8]
 800be44:	6822      	ldr	r2, [r4, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d03d      	beq.n	800bec6 <_scanf_i+0x15e>
 800be4a:	6831      	ldr	r1, [r6, #0]
 800be4c:	6960      	ldr	r0, [r4, #20]
 800be4e:	f891 c000 	ldrb.w	ip, [r1]
 800be52:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be56:	2800      	cmp	r0, #0
 800be58:	d035      	beq.n	800bec6 <_scanf_i+0x15e>
 800be5a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800be5e:	d124      	bne.n	800beaa <_scanf_i+0x142>
 800be60:	0510      	lsls	r0, r2, #20
 800be62:	d522      	bpl.n	800beaa <_scanf_i+0x142>
 800be64:	f10b 0b01 	add.w	fp, fp, #1
 800be68:	f1b9 0f00 	cmp.w	r9, #0
 800be6c:	d003      	beq.n	800be76 <_scanf_i+0x10e>
 800be6e:	3301      	adds	r3, #1
 800be70:	f109 39ff 	add.w	r9, r9, #4294967295
 800be74:	60a3      	str	r3, [r4, #8]
 800be76:	6873      	ldr	r3, [r6, #4]
 800be78:	3b01      	subs	r3, #1
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	6073      	str	r3, [r6, #4]
 800be7e:	dd1b      	ble.n	800beb8 <_scanf_i+0x150>
 800be80:	6833      	ldr	r3, [r6, #0]
 800be82:	3301      	adds	r3, #1
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	3b01      	subs	r3, #1
 800be8a:	60a3      	str	r3, [r4, #8]
 800be8c:	e7d9      	b.n	800be42 <_scanf_i+0xda>
 800be8e:	f1bb 0f02 	cmp.w	fp, #2
 800be92:	d1ae      	bne.n	800bdf2 <_scanf_i+0x8a>
 800be94:	6822      	ldr	r2, [r4, #0]
 800be96:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800be9a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800be9e:	d1bf      	bne.n	800be20 <_scanf_i+0xb8>
 800bea0:	2110      	movs	r1, #16
 800bea2:	6061      	str	r1, [r4, #4]
 800bea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bea8:	e7a2      	b.n	800bdf0 <_scanf_i+0x88>
 800beaa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	780b      	ldrb	r3, [r1, #0]
 800beb2:	f805 3b01 	strb.w	r3, [r5], #1
 800beb6:	e7de      	b.n	800be76 <_scanf_i+0x10e>
 800beb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bebc:	4631      	mov	r1, r6
 800bebe:	4650      	mov	r0, sl
 800bec0:	4798      	blx	r3
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d0df      	beq.n	800be86 <_scanf_i+0x11e>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	05d9      	lsls	r1, r3, #23
 800beca:	d50d      	bpl.n	800bee8 <_scanf_i+0x180>
 800becc:	42bd      	cmp	r5, r7
 800bece:	d909      	bls.n	800bee4 <_scanf_i+0x17c>
 800bed0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bed8:	4632      	mov	r2, r6
 800beda:	4650      	mov	r0, sl
 800bedc:	4798      	blx	r3
 800bede:	f105 39ff 	add.w	r9, r5, #4294967295
 800bee2:	464d      	mov	r5, r9
 800bee4:	42bd      	cmp	r5, r7
 800bee6:	d028      	beq.n	800bf3a <_scanf_i+0x1d2>
 800bee8:	6822      	ldr	r2, [r4, #0]
 800beea:	f012 0210 	ands.w	r2, r2, #16
 800beee:	d113      	bne.n	800bf18 <_scanf_i+0x1b0>
 800bef0:	702a      	strb	r2, [r5, #0]
 800bef2:	6863      	ldr	r3, [r4, #4]
 800bef4:	9e01      	ldr	r6, [sp, #4]
 800bef6:	4639      	mov	r1, r7
 800bef8:	4650      	mov	r0, sl
 800befa:	47b0      	blx	r6
 800befc:	f8d8 3000 	ldr.w	r3, [r8]
 800bf00:	6821      	ldr	r1, [r4, #0]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	f8c8 2000 	str.w	r2, [r8]
 800bf08:	f011 0f20 	tst.w	r1, #32
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	d00f      	beq.n	800bf30 <_scanf_i+0x1c8>
 800bf10:	6018      	str	r0, [r3, #0]
 800bf12:	68e3      	ldr	r3, [r4, #12]
 800bf14:	3301      	adds	r3, #1
 800bf16:	60e3      	str	r3, [r4, #12]
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	1bed      	subs	r5, r5, r7
 800bf1c:	445d      	add	r5, fp
 800bf1e:	442b      	add	r3, r5
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	2000      	movs	r0, #0
 800bf24:	b007      	add	sp, #28
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2a:	f04f 0b00 	mov.w	fp, #0
 800bf2e:	e7ca      	b.n	800bec6 <_scanf_i+0x15e>
 800bf30:	07ca      	lsls	r2, r1, #31
 800bf32:	bf4c      	ite	mi
 800bf34:	8018      	strhmi	r0, [r3, #0]
 800bf36:	6018      	strpl	r0, [r3, #0]
 800bf38:	e7eb      	b.n	800bf12 <_scanf_i+0x1aa>
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	e7f2      	b.n	800bf24 <_scanf_i+0x1bc>
 800bf3e:	bf00      	nop
 800bf40:	0800c764 	.word	0x0800c764
 800bf44:	080079c9 	.word	0x080079c9
 800bf48:	0800b63d 	.word	0x0800b63d
 800bf4c:	0800d051 	.word	0x0800d051

0800bf50 <__sflush_r>:
 800bf50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf58:	0716      	lsls	r6, r2, #28
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	d454      	bmi.n	800c00a <__sflush_r+0xba>
 800bf60:	684b      	ldr	r3, [r1, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	dc02      	bgt.n	800bf6c <__sflush_r+0x1c>
 800bf66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dd48      	ble.n	800bffe <__sflush_r+0xae>
 800bf6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf6e:	2e00      	cmp	r6, #0
 800bf70:	d045      	beq.n	800bffe <__sflush_r+0xae>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf78:	682f      	ldr	r7, [r5, #0]
 800bf7a:	6a21      	ldr	r1, [r4, #32]
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	d030      	beq.n	800bfe2 <__sflush_r+0x92>
 800bf80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	0759      	lsls	r1, r3, #29
 800bf86:	d505      	bpl.n	800bf94 <__sflush_r+0x44>
 800bf88:	6863      	ldr	r3, [r4, #4]
 800bf8a:	1ad2      	subs	r2, r2, r3
 800bf8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf8e:	b10b      	cbz	r3, 800bf94 <__sflush_r+0x44>
 800bf90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf92:	1ad2      	subs	r2, r2, r3
 800bf94:	2300      	movs	r3, #0
 800bf96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf98:	6a21      	ldr	r1, [r4, #32]
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	47b0      	blx	r6
 800bf9e:	1c43      	adds	r3, r0, #1
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	d106      	bne.n	800bfb2 <__sflush_r+0x62>
 800bfa4:	6829      	ldr	r1, [r5, #0]
 800bfa6:	291d      	cmp	r1, #29
 800bfa8:	d82b      	bhi.n	800c002 <__sflush_r+0xb2>
 800bfaa:	4a2a      	ldr	r2, [pc, #168]	@ (800c054 <__sflush_r+0x104>)
 800bfac:	410a      	asrs	r2, r1
 800bfae:	07d6      	lsls	r6, r2, #31
 800bfb0:	d427      	bmi.n	800c002 <__sflush_r+0xb2>
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	6062      	str	r2, [r4, #4]
 800bfb6:	04d9      	lsls	r1, r3, #19
 800bfb8:	6922      	ldr	r2, [r4, #16]
 800bfba:	6022      	str	r2, [r4, #0]
 800bfbc:	d504      	bpl.n	800bfc8 <__sflush_r+0x78>
 800bfbe:	1c42      	adds	r2, r0, #1
 800bfc0:	d101      	bne.n	800bfc6 <__sflush_r+0x76>
 800bfc2:	682b      	ldr	r3, [r5, #0]
 800bfc4:	b903      	cbnz	r3, 800bfc8 <__sflush_r+0x78>
 800bfc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfca:	602f      	str	r7, [r5, #0]
 800bfcc:	b1b9      	cbz	r1, 800bffe <__sflush_r+0xae>
 800bfce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfd2:	4299      	cmp	r1, r3
 800bfd4:	d002      	beq.n	800bfdc <__sflush_r+0x8c>
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f7fe fa36 	bl	800a448 <_free_r>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfe0:	e00d      	b.n	800bffe <__sflush_r+0xae>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	47b0      	blx	r6
 800bfe8:	4602      	mov	r2, r0
 800bfea:	1c50      	adds	r0, r2, #1
 800bfec:	d1c9      	bne.n	800bf82 <__sflush_r+0x32>
 800bfee:	682b      	ldr	r3, [r5, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0c6      	beq.n	800bf82 <__sflush_r+0x32>
 800bff4:	2b1d      	cmp	r3, #29
 800bff6:	d001      	beq.n	800bffc <__sflush_r+0xac>
 800bff8:	2b16      	cmp	r3, #22
 800bffa:	d11e      	bne.n	800c03a <__sflush_r+0xea>
 800bffc:	602f      	str	r7, [r5, #0]
 800bffe:	2000      	movs	r0, #0
 800c000:	e022      	b.n	800c048 <__sflush_r+0xf8>
 800c002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c006:	b21b      	sxth	r3, r3
 800c008:	e01b      	b.n	800c042 <__sflush_r+0xf2>
 800c00a:	690f      	ldr	r7, [r1, #16]
 800c00c:	2f00      	cmp	r7, #0
 800c00e:	d0f6      	beq.n	800bffe <__sflush_r+0xae>
 800c010:	0793      	lsls	r3, r2, #30
 800c012:	680e      	ldr	r6, [r1, #0]
 800c014:	bf08      	it	eq
 800c016:	694b      	ldreq	r3, [r1, #20]
 800c018:	600f      	str	r7, [r1, #0]
 800c01a:	bf18      	it	ne
 800c01c:	2300      	movne	r3, #0
 800c01e:	eba6 0807 	sub.w	r8, r6, r7
 800c022:	608b      	str	r3, [r1, #8]
 800c024:	f1b8 0f00 	cmp.w	r8, #0
 800c028:	dde9      	ble.n	800bffe <__sflush_r+0xae>
 800c02a:	6a21      	ldr	r1, [r4, #32]
 800c02c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c02e:	4643      	mov	r3, r8
 800c030:	463a      	mov	r2, r7
 800c032:	4628      	mov	r0, r5
 800c034:	47b0      	blx	r6
 800c036:	2800      	cmp	r0, #0
 800c038:	dc08      	bgt.n	800c04c <__sflush_r+0xfc>
 800c03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	f04f 30ff 	mov.w	r0, #4294967295
 800c048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c04c:	4407      	add	r7, r0
 800c04e:	eba8 0800 	sub.w	r8, r8, r0
 800c052:	e7e7      	b.n	800c024 <__sflush_r+0xd4>
 800c054:	dfbffffe 	.word	0xdfbffffe

0800c058 <_fflush_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	690b      	ldr	r3, [r1, #16]
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	b913      	cbnz	r3, 800c068 <_fflush_r+0x10>
 800c062:	2500      	movs	r5, #0
 800c064:	4628      	mov	r0, r5
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	b118      	cbz	r0, 800c072 <_fflush_r+0x1a>
 800c06a:	6a03      	ldr	r3, [r0, #32]
 800c06c:	b90b      	cbnz	r3, 800c072 <_fflush_r+0x1a>
 800c06e:	f7fc fba5 	bl	80087bc <__sinit>
 800c072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0f3      	beq.n	800c062 <_fflush_r+0xa>
 800c07a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c07c:	07d0      	lsls	r0, r2, #31
 800c07e:	d404      	bmi.n	800c08a <_fflush_r+0x32>
 800c080:	0599      	lsls	r1, r3, #22
 800c082:	d402      	bmi.n	800c08a <_fflush_r+0x32>
 800c084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c086:	f7fd fb61 	bl	800974c <__retarget_lock_acquire_recursive>
 800c08a:	4628      	mov	r0, r5
 800c08c:	4621      	mov	r1, r4
 800c08e:	f7ff ff5f 	bl	800bf50 <__sflush_r>
 800c092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c094:	07da      	lsls	r2, r3, #31
 800c096:	4605      	mov	r5, r0
 800c098:	d4e4      	bmi.n	800c064 <_fflush_r+0xc>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	059b      	lsls	r3, r3, #22
 800c09e:	d4e1      	bmi.n	800c064 <_fflush_r+0xc>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0a2:	f7fd fb55 	bl	8009750 <__retarget_lock_release_recursive>
 800c0a6:	e7dd      	b.n	800c064 <_fflush_r+0xc>

0800c0a8 <__swhatbuf_r>:
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	b096      	sub	sp, #88	@ 0x58
 800c0b4:	4615      	mov	r5, r2
 800c0b6:	461e      	mov	r6, r3
 800c0b8:	da0d      	bge.n	800c0d6 <__swhatbuf_r+0x2e>
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0c0:	f04f 0100 	mov.w	r1, #0
 800c0c4:	bf14      	ite	ne
 800c0c6:	2340      	movne	r3, #64	@ 0x40
 800c0c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	6031      	str	r1, [r6, #0]
 800c0d0:	602b      	str	r3, [r5, #0]
 800c0d2:	b016      	add	sp, #88	@ 0x58
 800c0d4:	bd70      	pop	{r4, r5, r6, pc}
 800c0d6:	466a      	mov	r2, sp
 800c0d8:	f000 f8da 	bl	800c290 <_fstat_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	dbec      	blt.n	800c0ba <__swhatbuf_r+0x12>
 800c0e0:	9901      	ldr	r1, [sp, #4]
 800c0e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c0e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c0ea:	4259      	negs	r1, r3
 800c0ec:	4159      	adcs	r1, r3
 800c0ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0f2:	e7eb      	b.n	800c0cc <__swhatbuf_r+0x24>

0800c0f4 <__smakebuf_r>:
 800c0f4:	898b      	ldrh	r3, [r1, #12]
 800c0f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0f8:	079d      	lsls	r5, r3, #30
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	d507      	bpl.n	800c110 <__smakebuf_r+0x1c>
 800c100:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	6123      	str	r3, [r4, #16]
 800c108:	2301      	movs	r3, #1
 800c10a:	6163      	str	r3, [r4, #20]
 800c10c:	b003      	add	sp, #12
 800c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c110:	ab01      	add	r3, sp, #4
 800c112:	466a      	mov	r2, sp
 800c114:	f7ff ffc8 	bl	800c0a8 <__swhatbuf_r>
 800c118:	9f00      	ldr	r7, [sp, #0]
 800c11a:	4605      	mov	r5, r0
 800c11c:	4639      	mov	r1, r7
 800c11e:	4630      	mov	r0, r6
 800c120:	f7fa fd42 	bl	8006ba8 <_malloc_r>
 800c124:	b948      	cbnz	r0, 800c13a <__smakebuf_r+0x46>
 800c126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c12a:	059a      	lsls	r2, r3, #22
 800c12c:	d4ee      	bmi.n	800c10c <__smakebuf_r+0x18>
 800c12e:	f023 0303 	bic.w	r3, r3, #3
 800c132:	f043 0302 	orr.w	r3, r3, #2
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	e7e2      	b.n	800c100 <__smakebuf_r+0xc>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	6020      	str	r0, [r4, #0]
 800c13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c14a:	b15b      	cbz	r3, 800c164 <__smakebuf_r+0x70>
 800c14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c150:	4630      	mov	r0, r6
 800c152:	f000 f8af 	bl	800c2b4 <_isatty_r>
 800c156:	b128      	cbz	r0, 800c164 <__smakebuf_r+0x70>
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	f023 0303 	bic.w	r3, r3, #3
 800c15e:	f043 0301 	orr.w	r3, r3, #1
 800c162:	81a3      	strh	r3, [r4, #12]
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	431d      	orrs	r5, r3
 800c168:	81a5      	strh	r5, [r4, #12]
 800c16a:	e7cf      	b.n	800c10c <__smakebuf_r+0x18>

0800c16c <__sccl>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	780b      	ldrb	r3, [r1, #0]
 800c170:	4604      	mov	r4, r0
 800c172:	2b5e      	cmp	r3, #94	@ 0x5e
 800c174:	bf0b      	itete	eq
 800c176:	784b      	ldrbeq	r3, [r1, #1]
 800c178:	1c4a      	addne	r2, r1, #1
 800c17a:	1c8a      	addeq	r2, r1, #2
 800c17c:	2100      	movne	r1, #0
 800c17e:	bf08      	it	eq
 800c180:	2101      	moveq	r1, #1
 800c182:	3801      	subs	r0, #1
 800c184:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c188:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c18c:	42a8      	cmp	r0, r5
 800c18e:	d1fb      	bne.n	800c188 <__sccl+0x1c>
 800c190:	b90b      	cbnz	r3, 800c196 <__sccl+0x2a>
 800c192:	1e50      	subs	r0, r2, #1
 800c194:	bd70      	pop	{r4, r5, r6, pc}
 800c196:	f081 0101 	eor.w	r1, r1, #1
 800c19a:	54e1      	strb	r1, [r4, r3]
 800c19c:	4610      	mov	r0, r2
 800c19e:	4602      	mov	r2, r0
 800c1a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c1a4:	2d2d      	cmp	r5, #45	@ 0x2d
 800c1a6:	d005      	beq.n	800c1b4 <__sccl+0x48>
 800c1a8:	2d5d      	cmp	r5, #93	@ 0x5d
 800c1aa:	d016      	beq.n	800c1da <__sccl+0x6e>
 800c1ac:	2d00      	cmp	r5, #0
 800c1ae:	d0f1      	beq.n	800c194 <__sccl+0x28>
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	e7f2      	b.n	800c19a <__sccl+0x2e>
 800c1b4:	7846      	ldrb	r6, [r0, #1]
 800c1b6:	2e5d      	cmp	r6, #93	@ 0x5d
 800c1b8:	d0fa      	beq.n	800c1b0 <__sccl+0x44>
 800c1ba:	42b3      	cmp	r3, r6
 800c1bc:	dcf8      	bgt.n	800c1b0 <__sccl+0x44>
 800c1be:	3002      	adds	r0, #2
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	3201      	adds	r2, #1
 800c1c4:	4296      	cmp	r6, r2
 800c1c6:	54a1      	strb	r1, [r4, r2]
 800c1c8:	dcfb      	bgt.n	800c1c2 <__sccl+0x56>
 800c1ca:	1af2      	subs	r2, r6, r3
 800c1cc:	3a01      	subs	r2, #1
 800c1ce:	1c5d      	adds	r5, r3, #1
 800c1d0:	42b3      	cmp	r3, r6
 800c1d2:	bfa8      	it	ge
 800c1d4:	2200      	movge	r2, #0
 800c1d6:	18ab      	adds	r3, r5, r2
 800c1d8:	e7e1      	b.n	800c19e <__sccl+0x32>
 800c1da:	4610      	mov	r0, r2
 800c1dc:	e7da      	b.n	800c194 <__sccl+0x28>

0800c1de <__submore>:
 800c1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c1e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ea:	4299      	cmp	r1, r3
 800c1ec:	d11d      	bne.n	800c22a <__submore+0x4c>
 800c1ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c1f2:	f7fa fcd9 	bl	8006ba8 <_malloc_r>
 800c1f6:	b918      	cbnz	r0, 800c200 <__submore+0x22>
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c204:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c206:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c20a:	6360      	str	r0, [r4, #52]	@ 0x34
 800c20c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c210:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c214:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c218:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c21c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c220:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c224:	6020      	str	r0, [r4, #0]
 800c226:	2000      	movs	r0, #0
 800c228:	e7e8      	b.n	800c1fc <__submore+0x1e>
 800c22a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c22c:	0077      	lsls	r7, r6, #1
 800c22e:	463a      	mov	r2, r7
 800c230:	f000 f88e 	bl	800c350 <_realloc_r>
 800c234:	4605      	mov	r5, r0
 800c236:	2800      	cmp	r0, #0
 800c238:	d0de      	beq.n	800c1f8 <__submore+0x1a>
 800c23a:	eb00 0806 	add.w	r8, r0, r6
 800c23e:	4601      	mov	r1, r0
 800c240:	4632      	mov	r2, r6
 800c242:	4640      	mov	r0, r8
 800c244:	f7fd fa8d 	bl	8009762 <memcpy>
 800c248:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c24c:	f8c4 8000 	str.w	r8, [r4]
 800c250:	e7e9      	b.n	800c226 <__submore+0x48>

0800c252 <memmove>:
 800c252:	4288      	cmp	r0, r1
 800c254:	b510      	push	{r4, lr}
 800c256:	eb01 0402 	add.w	r4, r1, r2
 800c25a:	d902      	bls.n	800c262 <memmove+0x10>
 800c25c:	4284      	cmp	r4, r0
 800c25e:	4623      	mov	r3, r4
 800c260:	d807      	bhi.n	800c272 <memmove+0x20>
 800c262:	1e43      	subs	r3, r0, #1
 800c264:	42a1      	cmp	r1, r4
 800c266:	d008      	beq.n	800c27a <memmove+0x28>
 800c268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c270:	e7f8      	b.n	800c264 <memmove+0x12>
 800c272:	4402      	add	r2, r0
 800c274:	4601      	mov	r1, r0
 800c276:	428a      	cmp	r2, r1
 800c278:	d100      	bne.n	800c27c <memmove+0x2a>
 800c27a:	bd10      	pop	{r4, pc}
 800c27c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c280:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c284:	e7f7      	b.n	800c276 <memmove+0x24>
	...

0800c288 <__gettzinfo>:
 800c288:	4800      	ldr	r0, [pc, #0]	@ (800c28c <__gettzinfo+0x4>)
 800c28a:	4770      	bx	lr
 800c28c:	200001e8 	.word	0x200001e8

0800c290 <_fstat_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d07      	ldr	r5, [pc, #28]	@ (800c2b0 <_fstat_r+0x20>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	602b      	str	r3, [r5, #0]
 800c29e:	f7f6 f900 	bl	80024a2 <_fstat>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d102      	bne.n	800c2ac <_fstat_r+0x1c>
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	b103      	cbz	r3, 800c2ac <_fstat_r+0x1c>
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20009440 	.word	0x20009440

0800c2b4 <_isatty_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d06      	ldr	r5, [pc, #24]	@ (800c2d0 <_isatty_r+0x1c>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	f7f6 f8f4 	bl	80024ac <_isatty>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_isatty_r+0x1a>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_isatty_r+0x1a>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	20009440 	.word	0x20009440

0800c2d4 <__assert_func>:
 800c2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2d6:	4614      	mov	r4, r2
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4b09      	ldr	r3, [pc, #36]	@ (800c300 <__assert_func+0x2c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	68d8      	ldr	r0, [r3, #12]
 800c2e2:	b954      	cbnz	r4, 800c2fa <__assert_func+0x26>
 800c2e4:	4b07      	ldr	r3, [pc, #28]	@ (800c304 <__assert_func+0x30>)
 800c2e6:	461c      	mov	r4, r3
 800c2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2ec:	9100      	str	r1, [sp, #0]
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	4905      	ldr	r1, [pc, #20]	@ (800c308 <__assert_func+0x34>)
 800c2f2:	f000 f85b 	bl	800c3ac <fiprintf>
 800c2f6:	f000 f86b 	bl	800c3d0 <abort>
 800c2fa:	4b04      	ldr	r3, [pc, #16]	@ (800c30c <__assert_func+0x38>)
 800c2fc:	e7f4      	b.n	800c2e8 <__assert_func+0x14>
 800c2fe:	bf00      	nop
 800c300:	20000198 	.word	0x20000198
 800c304:	0800cb53 	.word	0x0800cb53
 800c308:	0800d0c9 	.word	0x0800d0c9
 800c30c:	0800d0bc 	.word	0x0800d0bc

0800c310 <_calloc_r>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	fba1 5402 	umull	r5, r4, r1, r2
 800c316:	b93c      	cbnz	r4, 800c328 <_calloc_r+0x18>
 800c318:	4629      	mov	r1, r5
 800c31a:	f7fa fc45 	bl	8006ba8 <_malloc_r>
 800c31e:	4606      	mov	r6, r0
 800c320:	b928      	cbnz	r0, 800c32e <_calloc_r+0x1e>
 800c322:	2600      	movs	r6, #0
 800c324:	4630      	mov	r0, r6
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	220c      	movs	r2, #12
 800c32a:	6002      	str	r2, [r0, #0]
 800c32c:	e7f9      	b.n	800c322 <_calloc_r+0x12>
 800c32e:	462a      	mov	r2, r5
 800c330:	4621      	mov	r1, r4
 800c332:	f7fc fc09 	bl	8008b48 <memset>
 800c336:	e7f5      	b.n	800c324 <_calloc_r+0x14>

0800c338 <__env_lock>:
 800c338:	4801      	ldr	r0, [pc, #4]	@ (800c340 <__env_lock+0x8>)
 800c33a:	f7fd ba07 	b.w	800974c <__retarget_lock_acquire_recursive>
 800c33e:	bf00      	nop
 800c340:	20009445 	.word	0x20009445

0800c344 <__env_unlock>:
 800c344:	4801      	ldr	r0, [pc, #4]	@ (800c34c <__env_unlock+0x8>)
 800c346:	f7fd ba03 	b.w	8009750 <__retarget_lock_release_recursive>
 800c34a:	bf00      	nop
 800c34c:	20009445 	.word	0x20009445

0800c350 <_realloc_r>:
 800c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c354:	4680      	mov	r8, r0
 800c356:	4615      	mov	r5, r2
 800c358:	460c      	mov	r4, r1
 800c35a:	b921      	cbnz	r1, 800c366 <_realloc_r+0x16>
 800c35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c360:	4611      	mov	r1, r2
 800c362:	f7fa bc21 	b.w	8006ba8 <_malloc_r>
 800c366:	b92a      	cbnz	r2, 800c374 <_realloc_r+0x24>
 800c368:	f7fe f86e 	bl	800a448 <_free_r>
 800c36c:	2400      	movs	r4, #0
 800c36e:	4620      	mov	r0, r4
 800c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c374:	f000 f833 	bl	800c3de <_malloc_usable_size_r>
 800c378:	4285      	cmp	r5, r0
 800c37a:	4606      	mov	r6, r0
 800c37c:	d802      	bhi.n	800c384 <_realloc_r+0x34>
 800c37e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c382:	d8f4      	bhi.n	800c36e <_realloc_r+0x1e>
 800c384:	4629      	mov	r1, r5
 800c386:	4640      	mov	r0, r8
 800c388:	f7fa fc0e 	bl	8006ba8 <_malloc_r>
 800c38c:	4607      	mov	r7, r0
 800c38e:	2800      	cmp	r0, #0
 800c390:	d0ec      	beq.n	800c36c <_realloc_r+0x1c>
 800c392:	42b5      	cmp	r5, r6
 800c394:	462a      	mov	r2, r5
 800c396:	4621      	mov	r1, r4
 800c398:	bf28      	it	cs
 800c39a:	4632      	movcs	r2, r6
 800c39c:	f7fd f9e1 	bl	8009762 <memcpy>
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	4640      	mov	r0, r8
 800c3a4:	f7fe f850 	bl	800a448 <_free_r>
 800c3a8:	463c      	mov	r4, r7
 800c3aa:	e7e0      	b.n	800c36e <_realloc_r+0x1e>

0800c3ac <fiprintf>:
 800c3ac:	b40e      	push	{r1, r2, r3}
 800c3ae:	b503      	push	{r0, r1, lr}
 800c3b0:	4601      	mov	r1, r0
 800c3b2:	ab03      	add	r3, sp, #12
 800c3b4:	4805      	ldr	r0, [pc, #20]	@ (800c3cc <fiprintf+0x20>)
 800c3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	f000 f83f 	bl	800c440 <_vfiprintf_r>
 800c3c2:	b002      	add	sp, #8
 800c3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c8:	b003      	add	sp, #12
 800c3ca:	4770      	bx	lr
 800c3cc:	20000198 	.word	0x20000198

0800c3d0 <abort>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2006      	movs	r0, #6
 800c3d4:	f000 f974 	bl	800c6c0 <raise>
 800c3d8:	2001      	movs	r0, #1
 800c3da:	f7f6 f83d 	bl	8002458 <_exit>

0800c3de <_malloc_usable_size_r>:
 800c3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e2:	1f18      	subs	r0, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfbc      	itt	lt
 800c3e8:	580b      	ldrlt	r3, [r1, r0]
 800c3ea:	18c0      	addlt	r0, r0, r3
 800c3ec:	4770      	bx	lr

0800c3ee <__sfputc_r>:
 800c3ee:	6893      	ldr	r3, [r2, #8]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	b410      	push	{r4}
 800c3f6:	6093      	str	r3, [r2, #8]
 800c3f8:	da08      	bge.n	800c40c <__sfputc_r+0x1e>
 800c3fa:	6994      	ldr	r4, [r2, #24]
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	db01      	blt.n	800c404 <__sfputc_r+0x16>
 800c400:	290a      	cmp	r1, #10
 800c402:	d103      	bne.n	800c40c <__sfputc_r+0x1e>
 800c404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c408:	f7fc bb0a 	b.w	8008a20 <__swbuf_r>
 800c40c:	6813      	ldr	r3, [r2, #0]
 800c40e:	1c58      	adds	r0, r3, #1
 800c410:	6010      	str	r0, [r2, #0]
 800c412:	7019      	strb	r1, [r3, #0]
 800c414:	4608      	mov	r0, r1
 800c416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <__sfputs_r>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	4614      	mov	r4, r2
 800c424:	18d5      	adds	r5, r2, r3
 800c426:	42ac      	cmp	r4, r5
 800c428:	d101      	bne.n	800c42e <__sfputs_r+0x12>
 800c42a:	2000      	movs	r0, #0
 800c42c:	e007      	b.n	800c43e <__sfputs_r+0x22>
 800c42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c432:	463a      	mov	r2, r7
 800c434:	4630      	mov	r0, r6
 800c436:	f7ff ffda 	bl	800c3ee <__sfputc_r>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d1f3      	bne.n	800c426 <__sfputs_r+0xa>
 800c43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c440 <_vfiprintf_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	460d      	mov	r5, r1
 800c446:	b09d      	sub	sp, #116	@ 0x74
 800c448:	4614      	mov	r4, r2
 800c44a:	4698      	mov	r8, r3
 800c44c:	4606      	mov	r6, r0
 800c44e:	b118      	cbz	r0, 800c458 <_vfiprintf_r+0x18>
 800c450:	6a03      	ldr	r3, [r0, #32]
 800c452:	b90b      	cbnz	r3, 800c458 <_vfiprintf_r+0x18>
 800c454:	f7fc f9b2 	bl	80087bc <__sinit>
 800c458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x2a>
 800c464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c466:	f7fd f971 	bl	800974c <__retarget_lock_acquire_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	071b      	lsls	r3, r3, #28
 800c46e:	d501      	bpl.n	800c474 <_vfiprintf_r+0x34>
 800c470:	692b      	ldr	r3, [r5, #16]
 800c472:	b99b      	cbnz	r3, 800c49c <_vfiprintf_r+0x5c>
 800c474:	4629      	mov	r1, r5
 800c476:	4630      	mov	r0, r6
 800c478:	f7fc fb10 	bl	8008a9c <__swsetup_r>
 800c47c:	b170      	cbz	r0, 800c49c <_vfiprintf_r+0x5c>
 800c47e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c480:	07dc      	lsls	r4, r3, #31
 800c482:	d504      	bpl.n	800c48e <_vfiprintf_r+0x4e>
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b01d      	add	sp, #116	@ 0x74
 800c48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	0598      	lsls	r0, r3, #22
 800c492:	d4f7      	bmi.n	800c484 <_vfiprintf_r+0x44>
 800c494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c496:	f7fd f95b 	bl	8009750 <__retarget_lock_release_recursive>
 800c49a:	e7f3      	b.n	800c484 <_vfiprintf_r+0x44>
 800c49c:	2300      	movs	r3, #0
 800c49e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4aa:	2330      	movs	r3, #48	@ 0x30
 800c4ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c65c <_vfiprintf_r+0x21c>
 800c4b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4b4:	f04f 0901 	mov.w	r9, #1
 800c4b8:	4623      	mov	r3, r4
 800c4ba:	469a      	mov	sl, r3
 800c4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c0:	b10a      	cbz	r2, 800c4c6 <_vfiprintf_r+0x86>
 800c4c2:	2a25      	cmp	r2, #37	@ 0x25
 800c4c4:	d1f9      	bne.n	800c4ba <_vfiprintf_r+0x7a>
 800c4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ca:	d00b      	beq.n	800c4e4 <_vfiprintf_r+0xa4>
 800c4cc:	465b      	mov	r3, fp
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ffa2 	bl	800c41c <__sfputs_r>
 800c4d8:	3001      	adds	r0, #1
 800c4da:	f000 80a7 	beq.w	800c62c <_vfiprintf_r+0x1ec>
 800c4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e0:	445a      	add	r2, fp
 800c4e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 809f 	beq.w	800c62c <_vfiprintf_r+0x1ec>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f8:	f10a 0a01 	add.w	sl, sl, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c504:	931a      	str	r3, [sp, #104]	@ 0x68
 800c506:	4654      	mov	r4, sl
 800c508:	2205      	movs	r2, #5
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	4853      	ldr	r0, [pc, #332]	@ (800c65c <_vfiprintf_r+0x21c>)
 800c510:	f7f3 fe6e 	bl	80001f0 <memchr>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	b9d8      	cbnz	r0, 800c550 <_vfiprintf_r+0x110>
 800c518:	06d1      	lsls	r1, r2, #27
 800c51a:	bf44      	itt	mi
 800c51c:	2320      	movmi	r3, #32
 800c51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c522:	0713      	lsls	r3, r2, #28
 800c524:	bf44      	itt	mi
 800c526:	232b      	movmi	r3, #43	@ 0x2b
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c52c:	f89a 3000 	ldrb.w	r3, [sl]
 800c530:	2b2a      	cmp	r3, #42	@ 0x2a
 800c532:	d015      	beq.n	800c560 <_vfiprintf_r+0x120>
 800c534:	9a07      	ldr	r2, [sp, #28]
 800c536:	4654      	mov	r4, sl
 800c538:	2000      	movs	r0, #0
 800c53a:	f04f 0c0a 	mov.w	ip, #10
 800c53e:	4621      	mov	r1, r4
 800c540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c544:	3b30      	subs	r3, #48	@ 0x30
 800c546:	2b09      	cmp	r3, #9
 800c548:	d94b      	bls.n	800c5e2 <_vfiprintf_r+0x1a2>
 800c54a:	b1b0      	cbz	r0, 800c57a <_vfiprintf_r+0x13a>
 800c54c:	9207      	str	r2, [sp, #28]
 800c54e:	e014      	b.n	800c57a <_vfiprintf_r+0x13a>
 800c550:	eba0 0308 	sub.w	r3, r0, r8
 800c554:	fa09 f303 	lsl.w	r3, r9, r3
 800c558:	4313      	orrs	r3, r2
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	46a2      	mov	sl, r4
 800c55e:	e7d2      	b.n	800c506 <_vfiprintf_r+0xc6>
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	1d19      	adds	r1, r3, #4
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bfbb      	ittet	lt
 800c56c:	425b      	neglt	r3, r3
 800c56e:	f042 0202 	orrlt.w	r2, r2, #2
 800c572:	9307      	strge	r3, [sp, #28]
 800c574:	9307      	strlt	r3, [sp, #28]
 800c576:	bfb8      	it	lt
 800c578:	9204      	strlt	r2, [sp, #16]
 800c57a:	7823      	ldrb	r3, [r4, #0]
 800c57c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c57e:	d10a      	bne.n	800c596 <_vfiprintf_r+0x156>
 800c580:	7863      	ldrb	r3, [r4, #1]
 800c582:	2b2a      	cmp	r3, #42	@ 0x2a
 800c584:	d132      	bne.n	800c5ec <_vfiprintf_r+0x1ac>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	1d1a      	adds	r2, r3, #4
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	9203      	str	r2, [sp, #12]
 800c58e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c592:	3402      	adds	r4, #2
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c66c <_vfiprintf_r+0x22c>
 800c59a:	7821      	ldrb	r1, [r4, #0]
 800c59c:	2203      	movs	r2, #3
 800c59e:	4650      	mov	r0, sl
 800c5a0:	f7f3 fe26 	bl	80001f0 <memchr>
 800c5a4:	b138      	cbz	r0, 800c5b6 <_vfiprintf_r+0x176>
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	eba0 000a 	sub.w	r0, r0, sl
 800c5ac:	2240      	movs	r2, #64	@ 0x40
 800c5ae:	4082      	lsls	r2, r0
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	3401      	adds	r4, #1
 800c5b4:	9304      	str	r3, [sp, #16]
 800c5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ba:	4829      	ldr	r0, [pc, #164]	@ (800c660 <_vfiprintf_r+0x220>)
 800c5bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5c0:	2206      	movs	r2, #6
 800c5c2:	f7f3 fe15 	bl	80001f0 <memchr>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d03f      	beq.n	800c64a <_vfiprintf_r+0x20a>
 800c5ca:	4b26      	ldr	r3, [pc, #152]	@ (800c664 <_vfiprintf_r+0x224>)
 800c5cc:	bb1b      	cbnz	r3, 800c616 <_vfiprintf_r+0x1d6>
 800c5ce:	9b03      	ldr	r3, [sp, #12]
 800c5d0:	3307      	adds	r3, #7
 800c5d2:	f023 0307 	bic.w	r3, r3, #7
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5dc:	443b      	add	r3, r7
 800c5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e0:	e76a      	b.n	800c4b8 <_vfiprintf_r+0x78>
 800c5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	e7a8      	b.n	800c53e <_vfiprintf_r+0xfe>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	3401      	adds	r4, #1
 800c5f0:	9305      	str	r3, [sp, #20]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f04f 0c0a 	mov.w	ip, #10
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5fe:	3a30      	subs	r2, #48	@ 0x30
 800c600:	2a09      	cmp	r2, #9
 800c602:	d903      	bls.n	800c60c <_vfiprintf_r+0x1cc>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0c6      	beq.n	800c596 <_vfiprintf_r+0x156>
 800c608:	9105      	str	r1, [sp, #20]
 800c60a:	e7c4      	b.n	800c596 <_vfiprintf_r+0x156>
 800c60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c610:	4604      	mov	r4, r0
 800c612:	2301      	movs	r3, #1
 800c614:	e7f0      	b.n	800c5f8 <_vfiprintf_r+0x1b8>
 800c616:	ab03      	add	r3, sp, #12
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	462a      	mov	r2, r5
 800c61c:	4b12      	ldr	r3, [pc, #72]	@ (800c668 <_vfiprintf_r+0x228>)
 800c61e:	a904      	add	r1, sp, #16
 800c620:	4630      	mov	r0, r6
 800c622:	f7fb fa73 	bl	8007b0c <_printf_float>
 800c626:	4607      	mov	r7, r0
 800c628:	1c78      	adds	r0, r7, #1
 800c62a:	d1d6      	bne.n	800c5da <_vfiprintf_r+0x19a>
 800c62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c62e:	07d9      	lsls	r1, r3, #31
 800c630:	d405      	bmi.n	800c63e <_vfiprintf_r+0x1fe>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	059a      	lsls	r2, r3, #22
 800c636:	d402      	bmi.n	800c63e <_vfiprintf_r+0x1fe>
 800c638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c63a:	f7fd f889 	bl	8009750 <__retarget_lock_release_recursive>
 800c63e:	89ab      	ldrh	r3, [r5, #12]
 800c640:	065b      	lsls	r3, r3, #25
 800c642:	f53f af1f 	bmi.w	800c484 <_vfiprintf_r+0x44>
 800c646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c648:	e71e      	b.n	800c488 <_vfiprintf_r+0x48>
 800c64a:	ab03      	add	r3, sp, #12
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	462a      	mov	r2, r5
 800c650:	4b05      	ldr	r3, [pc, #20]	@ (800c668 <_vfiprintf_r+0x228>)
 800c652:	a904      	add	r1, sp, #16
 800c654:	4630      	mov	r0, r6
 800c656:	f7fb fcf1 	bl	800803c <_printf_i>
 800c65a:	e7e4      	b.n	800c626 <_vfiprintf_r+0x1e6>
 800c65c:	0800d030 	.word	0x0800d030
 800c660:	0800d03a 	.word	0x0800d03a
 800c664:	08007b0d 	.word	0x08007b0d
 800c668:	0800c41d 	.word	0x0800c41d
 800c66c:	0800d036 	.word	0x0800d036

0800c670 <_raise_r>:
 800c670:	291f      	cmp	r1, #31
 800c672:	b538      	push	{r3, r4, r5, lr}
 800c674:	4605      	mov	r5, r0
 800c676:	460c      	mov	r4, r1
 800c678:	d904      	bls.n	800c684 <_raise_r+0x14>
 800c67a:	2316      	movs	r3, #22
 800c67c:	6003      	str	r3, [r0, #0]
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c686:	b112      	cbz	r2, 800c68e <_raise_r+0x1e>
 800c688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c68c:	b94b      	cbnz	r3, 800c6a2 <_raise_r+0x32>
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 f830 	bl	800c6f4 <_getpid_r>
 800c694:	4622      	mov	r2, r4
 800c696:	4601      	mov	r1, r0
 800c698:	4628      	mov	r0, r5
 800c69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c69e:	f000 b817 	b.w	800c6d0 <_kill_r>
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d00a      	beq.n	800c6bc <_raise_r+0x4c>
 800c6a6:	1c59      	adds	r1, r3, #1
 800c6a8:	d103      	bne.n	800c6b2 <_raise_r+0x42>
 800c6aa:	2316      	movs	r3, #22
 800c6ac:	6003      	str	r3, [r0, #0]
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	e7e7      	b.n	800c682 <_raise_r+0x12>
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	4798      	blx	r3
 800c6bc:	2000      	movs	r0, #0
 800c6be:	e7e0      	b.n	800c682 <_raise_r+0x12>

0800c6c0 <raise>:
 800c6c0:	4b02      	ldr	r3, [pc, #8]	@ (800c6cc <raise+0xc>)
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f7ff bfd3 	b.w	800c670 <_raise_r>
 800c6ca:	bf00      	nop
 800c6cc:	20000198 	.word	0x20000198

0800c6d0 <_kill_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d07      	ldr	r5, [pc, #28]	@ (800c6f0 <_kill_r+0x20>)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	4611      	mov	r1, r2
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	f7f5 feb3 	bl	8002448 <_kill>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	d102      	bne.n	800c6ec <_kill_r+0x1c>
 800c6e6:	682b      	ldr	r3, [r5, #0]
 800c6e8:	b103      	cbz	r3, 800c6ec <_kill_r+0x1c>
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20009440 	.word	0x20009440

0800c6f4 <_getpid_r>:
 800c6f4:	f7f5 bea6 	b.w	8002444 <_getpid>

0800c6f8 <_init>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	bf00      	nop
 800c6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fe:	bc08      	pop	{r3}
 800c700:	469e      	mov	lr, r3
 800c702:	4770      	bx	lr

0800c704 <_fini>:
 800c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c706:	bf00      	nop
 800c708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70a:	bc08      	pop	{r3}
 800c70c:	469e      	mov	lr, r3
 800c70e:	4770      	bx	lr
