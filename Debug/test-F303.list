
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c80  0800ffb0  0800ffb0  00010fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c30  08012c30  00014250  2**0
                  CONTENTS
  4 .ARM          00000008  08012c30  08012c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c38  08012c38  00014250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c38  08012c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c3c  08012c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08012c40  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014250  2**0
                  CONTENTS
 10 .bss          000097ac  20000250  20000250  00014250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200099fc  200099fc  00014250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038980  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000070db  00000000  00000000  0004cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001311b  00000000  00000000  00053cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f10  00000000  00000000  00066df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002207  00000000  00000000  00068d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ca  00000000  00000000  0006af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034b0d  00000000  00000000  000903d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8f81  00000000  00000000  000c4ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019de67  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007214  00000000  00000000  0019deac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001a50c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff94 	.word	0x0800ff94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800ff94 	.word	0x0800ff94

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <copy_RMC>:
		des[i] = src[i];
	}
}

void copy_RMC(RMCSTRUCT *rmc_src, RMCSTRUCT *rmc_dest){
	rmc_src->tim.hour = rmc_dest->tim.hour;
 8000d14:	680b      	ldr	r3, [r1, #0]
 8000d16:	6003      	str	r3, [r0, #0]
	rmc_src->tim.min = rmc_dest->tim.min;
 8000d18:	684b      	ldr	r3, [r1, #4]
 8000d1a:	6043      	str	r3, [r0, #4]
	rmc_src->tim.sec = rmc_dest->tim.sec;
 8000d1c:	688b      	ldr	r3, [r1, #8]
 8000d1e:	6083      	str	r3, [r0, #8]
	rmc_src->date.Day = rmc_dest->date.Day;
 8000d20:	690b      	ldr	r3, [r1, #16]
 8000d22:	6103      	str	r3, [r0, #16]
	rmc_src->date.Mon = rmc_dest->date.Mon;
 8000d24:	694b      	ldr	r3, [r1, #20]
 8000d26:	6143      	str	r3, [r0, #20]
	rmc_src->date.Yr = rmc_dest->date.Yr;
 8000d28:	698b      	ldr	r3, [r1, #24]
 8000d2a:	6183      	str	r3, [r0, #24]
	rmc_src->lcation.latitude = rmc_dest->lcation.latitude;
 8000d2c:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8000d30:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
	rmc_src->lcation.longitude = rmc_dest->lcation.longitude;
 8000d34:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 8000d38:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
	rmc_src->lcation.NS = rmc_dest->lcation.NS;
 8000d3c:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
 8000d40:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
	rmc_src->lcation.EW = rmc_dest->lcation.EW;
 8000d44:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
 8000d48:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
	rmc_src->speed = rmc_dest->speed;
 8000d4c:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000d4e:	6283      	str	r3, [r0, #40]	@ 0x28
	rmc_src->course = rmc_dest->course;
 8000d50:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8000d52:	62c3      	str	r3, [r0, #44]	@ 0x2c
	rmc_src->isValid = rmc_dest->isValid;
 8000d54:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000d56:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8000d58:	4770      	bx	lr
	...

08000d5c <coldStart>:
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d5c:	4903      	ldr	r1, [pc, #12]	@ (8000d6c <coldStart+0x10>)
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <coldStart+0x14>)
 8000d60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d64:	220d      	movs	r2, #13
 8000d66:	f007 ba61 	b.w	800822c <HAL_UART_Transmit>
 8000d6a:	bf00      	nop
 8000d6c:	0801008c 	.word	0x0801008c
 8000d70:	200070dc 	.word	0x200070dc

08000d74 <validateChecksum>:
}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4401      	add	r1, r0
 8000d78:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d101      	bne.n	8000d82 <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e021      	b.n	8000dc6 <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d82:	461c      	mov	r4, r3
 8000d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d88:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d8a:	d1f6      	bne.n	8000d7a <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d8c:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d8e:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d90:	e002      	b.n	8000d98 <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d96:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d98:	4284      	cmp	r4, r0
 8000d9a:	d8fa      	bhi.n	8000d92 <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d9c:	1ca3      	adds	r3, r4, #2
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d212      	bcs.n	8000dc8 <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000da2:	2210      	movs	r2, #16
 8000da4:	2100      	movs	r1, #0
 8000da6:	1c60      	adds	r0, r4, #1
 8000da8:	f00a f94c 	bl	800b044 <strtol>
 8000dac:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000dae:	4629      	mov	r1, r5
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <validateChecksum+0x60>)
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000db2:	b2e4      	uxtb	r4, r4
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000db4:	f004 fa94 	bl	80052e0 <Debug_printf>
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000db8:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <validateChecksum+0x64>)
 8000dba:	4621      	mov	r1, r4
 8000dbc:	f004 fa90 	bl	80052e0 <Debug_printf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000dc0:	1b63      	subs	r3, r4, r5
 8000dc2:	4258      	negs	r0, r3
 8000dc4:	4158      	adcs	r0, r3
    }
    Debug_printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000dc6:	bd38      	pop	{r3, r4, r5, pc}
    Debug_printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <validateChecksum+0x68>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4629      	mov	r1, r5
 8000dce:	f004 fa87 	bl	80052e0 <Debug_printf>
    return 0; // Invalid checksum
 8000dd2:	e7d4      	b.n	8000d7e <validateChecksum+0xa>
 8000dd4:	0801009a 	.word	0x0801009a
 8000dd8:	080100b5 	.word	0x080100b5
 8000ddc:	080100ce 	.word	0x080100ce

08000de0 <display_rmc_data>:

void display_rmc_data() {
 8000de0:	b513      	push	{r0, r1, r4, lr}

    Debug_printf("Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000de2:	4c1d      	ldr	r4, [pc, #116]	@ (8000e58 <display_rmc_data+0x78>)
 8000de4:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <display_rmc_data+0x7c>)
 8000de6:	6821      	ldr	r1, [r4, #0]
 8000de8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000dec:	f004 fa78 	bl	80052e0 <Debug_printf>

    Debug_printf("Date: %02d/%02d/20%02d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000df0:	6921      	ldr	r1, [r4, #16]
 8000df2:	481b      	ldr	r0, [pc, #108]	@ (8000e60 <display_rmc_data+0x80>)
 8000df4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000df8:	f004 fa72 	bl	80052e0 <Debug_printf>
	
    Debug_printf("Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000dfc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000e06:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <display_rmc_data+0x84>)
 8000e08:	f004 fa6a 	bl	80052e0 <Debug_printf>

    Debug_printf("Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000e0c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <display_rmc_data+0x88>)
 8000e18:	f004 fa62 	bl	80052e0 <Debug_printf>

    Debug_printf("Speed: %.1f knots\r\n", rmc.speed);
 8000e1c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000e1e:	f7ff fba3 	bl	8000568 <__aeabi_f2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <display_rmc_data+0x8c>)
 8000e28:	f004 fa5a 	bl	80052e0 <Debug_printf>

    Debug_printf("Course: %.1f\r\n", rmc.course);
 8000e2c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000e2e:	f7ff fb9b 	bl	8000568 <__aeabi_f2d>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <display_rmc_data+0x90>)
 8000e38:	f004 fa52 	bl	80052e0 <Debug_printf>

    Debug_printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <display_rmc_data+0x94>)
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <display_rmc_data+0x98>)
 8000e42:	480e      	ldr	r0, [pc, #56]	@ (8000e7c <display_rmc_data+0x9c>)
 8000e44:	2900      	cmp	r1, #0
 8000e46:	bf0c      	ite	eq
 8000e48:	4611      	moveq	r1, r2
 8000e4a:	4619      	movne	r1, r3
}
 8000e4c:	b002      	add	sp, #8
 8000e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Debug_printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e52:	f004 ba45 	b.w	80052e0 <Debug_printf>
 8000e56:	bf00      	nop
 8000e58:	200003d0 	.word	0x200003d0
 8000e5c:	08010113 	.word	0x08010113
 8000e60:	0801012a 	.word	0x0801012a
 8000e64:	08010143 	.word	0x08010143
 8000e68:	08010157 	.word	0x08010157
 8000e6c:	0801016c 	.word	0x0801016c
 8000e70:	08010180 	.word	0x08010180
 8000e74:	0801010b 	.word	0x0801010b
 8000e78:	08010105 	.word	0x08010105
 8000e7c:	0801018f 	.word	0x0801018f

08000e80 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000e80:	b500      	push	{lr}
 8000e82:	b08b      	sub	sp, #44	@ 0x2c
    struct tm timeinfo;

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e84:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000e86:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000e8a:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e8e:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e90:	9301      	str	r3, [sp, #4]
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000e92:	3901      	subs	r1, #1
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000e98:	a801      	add	r0, sp, #4
    timeinfo.tm_mday = day;         // Day of the month
 8000e9a:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e9e:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000ea0:	f00b fa3e 	bl	800c320 <mktime>

    return epoch;
}
 8000ea4:	b00b      	add	sp, #44	@ 0x2c
 8000ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eaa:	0000      	movs	r0, r0
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eb4:	ed2d 8b02 	vpush	{d8}
 8000eb8:	b0a3      	sub	sp, #140	@ 0x8c
    int field = 0;
    uint8_t str_cpy[128];
    strcpy(str_cpy, rmc_sentence);
 8000eba:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8000ebc:	4604      	mov	r4, r0
    strcpy(str_cpy, rmc_sentence);
 8000ebe:	a802      	add	r0, sp, #8
 8000ec0:	f00b ff40 	bl	800cd44 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000ec4:	2600      	movs	r6, #0

    Debug_printf("\n");
 8000ec6:	4882      	ldr	r0, [pc, #520]	@ (80010d0 <parse_rmc+0x220>)
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000ec8:	f88d 6087 	strb.w	r6, [sp, #135]	@ 0x87
    Debug_printf("\n");
 8000ecc:	f004 fa08 	bl	80052e0 <Debug_printf>
    Debug_printf((char *)rmc_sentence);
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f004 fa05 	bl	80052e0 <Debug_printf>
    Debug_printf("\n");
 8000ed6:	487e      	ldr	r0, [pc, #504]	@ (80010d0 <parse_rmc+0x220>)
 8000ed8:	f004 fa02 	bl	80052e0 <Debug_printf>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff ff48 	bl	8000d74 <validateChecksum>
 8000ee4:	b1a0      	cbz	r0, 8000f10 <parse_rmc+0x60>
 8000ee6:	ad02      	add	r5, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000ee8:	4637      	mov	r7, r6
    while (*ptr) {
 8000eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000eee:	b9a3      	cbnz	r3, 8000f1a <parse_rmc+0x6a>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000ef0:	4c78      	ldr	r4, [pc, #480]	@ (80010d4 <parse_rmc+0x224>)
 8000ef2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10b      	bne.n	8000f10 <parse_rmc+0x60>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000ef8:	68a3      	ldr	r3, [r4, #8]
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	69a0      	ldr	r0, [r4, #24]
 8000f08:	f7ff ffba 	bl	8000e80 <convertToEpoch>
 8000f0c:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000f10:	b023      	add	sp, #140	@ 0x8c
 8000f12:	ecbd 8b02 	vpop	{d8}
 8000f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000f1a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f1c:	d001      	beq.n	8000f22 <parse_rmc+0x72>
 8000f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f20:	d1e3      	bne.n	8000eea <parse_rmc+0x3a>
            switch (field) {
 8000f22:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 8000f24:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d81d      	bhi.n	8000f68 <parse_rmc+0xb8>
 8000f2c:	e8df f003 	tbb	[pc, r3]
 8000f30:	5d271f05 	.word	0x5d271f05
 8000f34:	a79d9862 	.word	0xa79d9862
 8000f38:	b1          	.byte	0xb1
 8000f39:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000f3a:	7820      	ldrb	r0, [r4, #0]
 8000f3c:	7863      	ldrb	r3, [r4, #1]
 8000f3e:	4a65      	ldr	r2, [pc, #404]	@ (80010d4 <parse_rmc+0x224>)
 8000f40:	210a      	movs	r1, #10
 8000f42:	3830      	subs	r0, #48	@ 0x30
 8000f44:	3b30      	subs	r3, #48	@ 0x30
 8000f46:	fb01 3300 	mla	r3, r1, r0, r3
 8000f4a:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000f4c:	78a0      	ldrb	r0, [r4, #2]
 8000f4e:	78e3      	ldrb	r3, [r4, #3]
 8000f50:	3830      	subs	r0, #48	@ 0x30
 8000f52:	3b30      	subs	r3, #48	@ 0x30
 8000f54:	fb01 3300 	mla	r3, r1, r0, r3
 8000f58:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000f5a:	7920      	ldrb	r0, [r4, #4]
 8000f5c:	7963      	ldrb	r3, [r4, #5]
 8000f5e:	3830      	subs	r0, #48	@ 0x30
 8000f60:	3b30      	subs	r3, #48	@ 0x30
 8000f62:	fb01 3300 	mla	r3, r1, r0, r3
 8000f66:	6093      	str	r3, [r2, #8]
            field++;
 8000f68:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 8000f6a:	462c      	mov	r4, r5
        ptr++;
 8000f6c:	e7bd      	b.n	8000eea <parse_rmc+0x3a>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000f6e:	7823      	ldrb	r3, [r4, #0]
 8000f70:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000f74:	4253      	negs	r3, r2
 8000f76:	4153      	adcs	r3, r2
 8000f78:	4a56      	ldr	r2, [pc, #344]	@ (80010d4 <parse_rmc+0x224>)
 8000f7a:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000f7c:	e7f4      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f009 f908 	bl	800a194 <atof>
 8000f84:	4b54      	ldr	r3, [pc, #336]	@ (80010d8 <parse_rmc+0x228>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	ec51 0b10 	vmov	r0, r1, d0
 8000f8c:	f7ff fc6e 	bl	800086c <__aeabi_ddiv>
 8000f90:	4680      	mov	r8, r0
 8000f92:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000f94:	ec49 8b10 	vmov	d0, r8, r9
 8000f98:	f00e ff3a 	bl	800fe10 <floor>
 8000f9c:	ec51 0b10 	vmov	r0, r1, d0
 8000fa0:	f7ff fdea 	bl	8000b78 <__aeabi_d2iz>
 8000fa4:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000fa8:	f7ff facc 	bl	8000544 <__aeabi_i2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	f7ff f978 	bl	80002a8 <__aeabi_dsub>
 8000fb8:	f7ff fe26 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000fbc:	f7ff fad4 	bl	8000568 <__aeabi_f2d>
 8000fc0:	a341      	add	r3, pc, #260	@ (adr r3, 80010c8 <parse_rmc+0x218>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fc51 	bl	800086c <__aeabi_ddiv>
 8000fca:	f7ff fe1d 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000fce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000fd2:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000fd6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff fac3 	bl	8000568 <__aeabi_f2d>
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <parse_rmc+0x224>)
 8000fe4:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000fe8:	e7be      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.lcation.NS = rmc_sentence[0];
 8000fea:	4b3a      	ldr	r3, [pc, #232]	@ (80010d4 <parse_rmc+0x224>)
 8000fec:	7822      	ldrb	r2, [r4, #0]
 8000fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000ff2:	e7b9      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f009 f8cd 	bl	800a194 <atof>
 8000ffa:	4b37      	ldr	r3, [pc, #220]	@ (80010d8 <parse_rmc+0x228>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	ec51 0b10 	vmov	r0, r1, d0
 8001002:	f7ff fc33 	bl	800086c <__aeabi_ddiv>
 8001006:	4680      	mov	r8, r0
 8001008:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 800100a:	ec49 8b10 	vmov	d0, r8, r9
 800100e:	f00e feff 	bl	800fe10 <floor>
 8001012:	ec51 0b10 	vmov	r0, r1, d0
 8001016:	f7ff fdaf 	bl	8000b78 <__aeabi_d2iz>
 800101a:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 800101e:	f7ff fa91 	bl	8000544 <__aeabi_i2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4640      	mov	r0, r8
 8001028:	4649      	mov	r1, r9
 800102a:	f7ff f93d 	bl	80002a8 <__aeabi_dsub>
 800102e:	f7ff fdeb 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8001032:	f7ff fa99 	bl	8000568 <__aeabi_f2d>
 8001036:	a324      	add	r3, pc, #144	@ (adr r3, 80010c8 <parse_rmc+0x218>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fc16 	bl	800086c <__aeabi_ddiv>
 8001040:	f7ff fde2 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 8001044:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8001048:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 800104c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001050:	ee17 0a90 	vmov	r0, s15
 8001054:	f7ff fa88 	bl	8000568 <__aeabi_f2d>
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <parse_rmc+0x224>)
 800105a:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 800105e:	e783      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.lcation.EW = rmc_sentence[0];
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <parse_rmc+0x224>)
 8001062:	7822      	ldrb	r2, [r4, #0]
 8001064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8001068:	e77e      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.speed = atof((char *)rmc_sentence);
 800106a:	4620      	mov	r0, r4
 800106c:	f009 f892 	bl	800a194 <atof>
 8001070:	ec51 0b10 	vmov	r0, r1, d0
 8001074:	f7ff fdc8 	bl	8000c08 <__aeabi_d2f>
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <parse_rmc+0x224>)
 800107a:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 800107c:	e774      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.course = atof((char *)rmc_sentence);
 800107e:	4620      	mov	r0, r4
 8001080:	f009 f888 	bl	800a194 <atof>
 8001084:	ec51 0b10 	vmov	r0, r1, d0
 8001088:	f7ff fdbe 	bl	8000c08 <__aeabi_d2f>
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <parse_rmc+0x224>)
 800108e:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8001090:	e76a      	b.n	8000f68 <parse_rmc+0xb8>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8001092:	7820      	ldrb	r0, [r4, #0]
 8001094:	7863      	ldrb	r3, [r4, #1]
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <parse_rmc+0x224>)
 8001098:	210a      	movs	r1, #10
 800109a:	3830      	subs	r0, #48	@ 0x30
 800109c:	3b30      	subs	r3, #48	@ 0x30
 800109e:	fb01 3300 	mla	r3, r1, r0, r3
 80010a2:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 80010a4:	78a0      	ldrb	r0, [r4, #2]
 80010a6:	78e3      	ldrb	r3, [r4, #3]
 80010a8:	3830      	subs	r0, #48	@ 0x30
 80010aa:	3b30      	subs	r3, #48	@ 0x30
 80010ac:	fb01 3300 	mla	r3, r1, r0, r3
 80010b0:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 80010b2:	7920      	ldrb	r0, [r4, #4]
 80010b4:	7963      	ldrb	r3, [r4, #5]
 80010b6:	3830      	subs	r0, #48	@ 0x30
 80010b8:	3b30      	subs	r3, #48	@ 0x30
 80010ba:	fb01 3300 	mla	r3, r1, r0, r3
 80010be:	6193      	str	r3, [r2, #24]
                    break;
 80010c0:	e752      	b.n	8000f68 <parse_rmc+0xb8>
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	33333333 	.word	0x33333333
 80010cc:	3fe33333 	.word	0x3fe33333
 80010d0:	080115a9 	.word	0x080115a9
 80010d4:	200003d0 	.word	0x200003d0
 80010d8:	40590000 	.word	0x40590000

080010dc <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010dc:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 80010de:	490c      	ldr	r1, [pc, #48]	@ (8001110 <sendRMCDataToFlash+0x34>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010e0:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	220c      	movs	r2, #12
 80010e8:	480a      	ldr	r0, [pc, #40]	@ (8001114 <sendRMCDataToFlash+0x38>)
 80010ea:	f007 f89f 	bl	800822c <HAL_UART_Transmit>
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHIdHandle, rmcData, 0, 1000);
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <sendRMCDataToFlash+0x3c>)
 80010f0:	4621      	mov	r1, r4
 80010f2:	6800      	ldr	r0, [r0, #0]
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	2200      	movs	r2, #0
 80010fa:	f007 fae9 	bl	80086d0 <osMessageQueuePut>
	if (status != osOK) {
 80010fe:	4601      	mov	r1, r0
 8001100:	b120      	cbz	r0, 800110c <sendRMCDataToFlash+0x30>
	   Debug_printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <sendRMCDataToFlash+0x40>)
	}
	else{
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);

	}
}
 8001104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 8001108:	f004 b8ea 	b.w	80052e0 <Debug_printf>
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <sendRMCDataToFlash+0x44>)
 800110e:	e7f9      	b.n	8001104 <sendRMCDataToFlash+0x28>
 8001110:	0801019e 	.word	0x0801019e
 8001114:	20007164 	.word	0x20007164
 8001118:	200040e4 	.word	0x200040e4
 800111c:	080101b4 	.word	0x080101b4
 8001120:	08010205 	.word	0x08010205

08001124 <handleIncomingChar>:

int handleIncomingChar(char c) {
 8001124:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001126:	4c12      	ldr	r4, [pc, #72]	@ (8001170 <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 8001128:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800112a:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 800112c:	d112      	bne.n	8001154 <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800112e:	4d11      	ldr	r5, [pc, #68]	@ (8001174 <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001130:	4911      	ldr	r1, [pc, #68]	@ (8001178 <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001132:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001134:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001136:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001138:	f00b f808 	bl	800c14c <strstr>
 800113c:	b138      	cbz	r0, 800114e <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <handleIncomingChar+0x58>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	4629      	mov	r1, r5
 8001144:	f00a ffd9 	bl	800c0fa <strncpy>
            tempIndex = 0;
 8001148:	8026      	strh	r6, [r4, #0]
 800114a:	2001      	movs	r0, #1
    } else {
        Debug_printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 800114c:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 800114e:	8020      	strh	r0, [r4, #0]
    return 0;
 8001150:	2000      	movs	r0, #0
 8001152:	e7fb      	b.n	800114c <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 8001154:	2bfe      	cmp	r3, #254	@ 0xfe
 8001156:	d804      	bhi.n	8001162 <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	8022      	strh	r2, [r4, #0]
 800115c:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <handleIncomingChar+0x50>)
 800115e:	54d0      	strb	r0, [r2, r3]
 8001160:	e7f6      	b.n	8001150 <handleIncomingChar+0x2c>
        Debug_printf("Warning: Sentence too long, discarding\n");
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <handleIncomingChar+0x5c>)
 8001164:	f004 f8bc 	bl	80052e0 <Debug_printf>
        tempIndex = 0; // Reset if line too long
 8001168:	2300      	movs	r3, #0
 800116a:	8023      	strh	r3, [r4, #0]
 800116c:	e7f0      	b.n	8001150 <handleIncomingChar+0x2c>
 800116e:	bf00      	nop
 8001170:	2000036e 	.word	0x2000036e
 8001174:	2000026e 	.word	0x2000026e
 8001178:	08010261 	.word	0x08010261
 800117c:	2000213c 	.word	0x2000213c
 8001180:	08010268 	.word	0x08010268

08001184 <getRMC>:

void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001184:	4b41      	ldr	r3, [pc, #260]	@ (800128c <getRMC+0x108>)
 8001186:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 8001188:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800118a:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 800118c:	4d40      	ldr	r5, [pc, #256]	@ (8001290 <getRMC+0x10c>)
        char c = gpsSentence[lastReadIndex];
 800118e:	4e41      	ldr	r6, [pc, #260]	@ (8001294 <getRMC+0x110>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001190:	f5c4 54e8 	rsb	r4, r4, #7424	@ 0x1d00
 8001194:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 8001196:	882b      	ldrh	r3, [r5, #0]
 8001198:	42a3      	cmp	r3, r4
 800119a:	d14e      	bne.n	800123a <getRMC+0xb6>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist) {
 800119c:	4e3e      	ldr	r6, [pc, #248]	@ (8001298 <getRMC+0x114>)
 800119e:	4c3f      	ldr	r4, [pc, #252]	@ (800129c <getRMC+0x118>)
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	b313      	cbz	r3, 80011ea <getRMC+0x66>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
		display_rmc_data();
		get_RTC_time_date(&rmc);
 80011a4:	4d3e      	ldr	r5, [pc, #248]	@ (80012a0 <getRMC+0x11c>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 80011a6:	483f      	ldr	r0, [pc, #252]	@ (80012a4 <getRMC+0x120>)
 80011a8:	f7ff fe82 	bl	8000eb0 <parse_rmc>
		display_rmc_data();
 80011ac:	f7ff fe18 	bl	8000de0 <display_rmc_data>
		get_RTC_time_date(&rmc);
 80011b0:	4628      	mov	r0, r5
 80011b2:	f002 fa57 	bl	8003664 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 80011b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d04f      	beq.n	800125c <getRMC+0xd8>
			Debug_printf("\n\n------------ Sending RMC ------------\n\n");
 80011bc:	483a      	ldr	r0, [pc, #232]	@ (80012a8 <getRMC+0x124>)
 80011be:	f004 f88f 	bl	80052e0 <Debug_printf>
			sendRMCDataToFlash(&rmc);
 80011c2:	4628      	mov	r0, r5
 80011c4:	f7ff ff8a 	bl	80010dc <sendRMCDataToFlash>
			count_send_gps++;
 80011c8:	4a38      	ldr	r2, [pc, #224]	@ (80012ac <getRMC+0x128>)
			getRMC_time = 0;
			copy_RMC(&rmc_saved, &rmc);
 80011ca:	4839      	ldr	r0, [pc, #228]	@ (80012b0 <getRMC+0x12c>)
			count_send_gps++;
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	6013      	str	r3, [r2, #0]
			copy_RMC(&rmc_saved, &rmc);
 80011d2:	4629      	mov	r1, r5
			getRMC_time = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	6023      	str	r3, [r4, #0]
			copy_RMC(&rmc_saved, &rmc);
 80011d8:	f7ff fd9c 	bl	8000d14 <copy_RMC>
			Debug_printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
		}


        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 80011dc:	4831      	ldr	r0, [pc, #196]	@ (80012a4 <getRMC+0x120>)
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	2100      	movs	r1, #0
 80011e2:	f00a ff63 	bl	800c0ac <memset>
        isRMCExist = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	6033      	str	r3, [r6, #0]
    }

    // GPS timeout logic
    if (getRMC_time >= 150 && getRMC_time % 150 == 0) {
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	2b95      	cmp	r3, #149	@ 0x95
 80011ee:	dd0a      	ble.n	8001206 <getRMC+0x82>
 80011f0:	2296      	movs	r2, #150	@ 0x96
 80011f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80011f6:	fb02 3311 	mls	r3, r2, r1, r3
 80011fa:	b923      	cbnz	r3, 8001206 <getRMC+0x82>
        Debug_printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 80011fc:	482d      	ldr	r0, [pc, #180]	@ (80012b4 <getRMC+0x130>)
 80011fe:	f004 f86f 	bl	80052e0 <Debug_printf>
        coldStart();
 8001202:	f7ff fdab 	bl	8000d5c <coldStart>
    }

    if (getRMC_time >= 500) {
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800120c:	db0f      	blt.n	800122e <getRMC+0xaa>
        GPS_DISABLE();
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	4829      	ldr	r0, [pc, #164]	@ (80012b8 <getRMC+0x134>)
 8001214:	f005 f8a8 	bl	8006368 <HAL_GPIO_WritePin>
        osDelay(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800121c:	f007 f9f6 	bl	800860c <osDelay>
        GPS_ENABLE();
 8001220:	4825      	ldr	r0, [pc, #148]	@ (80012b8 <getRMC+0x134>)
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	f005 f89f 	bl	8006368 <HAL_GPIO_WritePin>
        getRMC_time = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	6023      	str	r3, [r4, #0]
    }

    Debug_printf("Elapsed Time: %d\n", getRMC_time);
 800122e:	6821      	ldr	r1, [r4, #0]
 8001230:	4822      	ldr	r0, [pc, #136]	@ (80012bc <getRMC+0x138>)
}
 8001232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Debug_printf("Elapsed Time: %d\n", getRMC_time);
 8001236:	f004 b853 	b.w	80052e0 <Debug_printf>
        if (handleIncomingChar(c)){
 800123a:	5cf0      	ldrb	r0, [r6, r3]
 800123c:	f7ff ff72 	bl	8001124 <handleIncomingChar>
 8001240:	b110      	cbz	r0, 8001248 <getRMC+0xc4>
            isRMCExist = 1; // `$GNRMC` sentence is ready
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <getRMC+0x114>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 8001248:	882b      	ldrh	r3, [r5, #0]
 800124a:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
 800124e:	3301      	adds	r3, #1
 8001250:	fbb3 f1f2 	udiv	r1, r3, r2
 8001254:	fb02 3311 	mls	r3, r2, r1, r3
 8001258:	802b      	strh	r3, [r5, #0]
 800125a:	e79c      	b.n	8001196 <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 800125c:	4d14      	ldr	r5, [pc, #80]	@ (80012b0 <getRMC+0x12c>)
 800125e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001260:	b183      	cbz	r3, 8001284 <getRMC+0x100>
			Debug_printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 8001262:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <getRMC+0x13c>)
 8001264:	f004 f83c 	bl	80052e0 <Debug_printf>
			get_RTC_time_date(&rmc_saved);
 8001268:	4628      	mov	r0, r5
 800126a:	f002 f9fb 	bl	8003664 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 800126e:	4628      	mov	r0, r5
 8001270:	f7ff ff34 	bl	80010dc <sendRMCDataToFlash>
			if(rmc_saved.date.Yr >= 24)
 8001274:	69ab      	ldr	r3, [r5, #24]
 8001276:	2b17      	cmp	r3, #23
 8001278:	ddb0      	ble.n	80011dc <getRMC+0x58>
				count_send_gps++;
 800127a:	4a0c      	ldr	r2, [pc, #48]	@ (80012ac <getRMC+0x128>)
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e7ab      	b.n	80011dc <getRMC+0x58>
			Debug_printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 8001284:	480f      	ldr	r0, [pc, #60]	@ (80012c4 <getRMC+0x140>)
 8001286:	f004 f82b 	bl	80052e0 <Debug_printf>
 800128a:	e7a7      	b.n	80011dc <getRMC+0x58>
 800128c:	20006fcc 	.word	0x20006fcc
 8001290:	2000026c 	.word	0x2000026c
 8001294:	2000042c 	.word	0x2000042c
 8001298:	20000374 	.word	0x20000374
 800129c:	20000370 	.word	0x20000370
 80012a0:	200003d0 	.word	0x200003d0
 80012a4:	2000213c 	.word	0x2000213c
 80012a8:	08010290 	.word	0x08010290
 80012ac:	20000428 	.word	0x20000428
 80012b0:	20000378 	.word	0x20000378
 80012b4:	08010338 	.word	0x08010338
 80012b8:	48000800 	.word	0x48000800
 80012bc:	0801037f 	.word	0x0801037f
 80012c0:	080102ba 	.word	0x080102ba
 80012c4:	080102f4 	.word	0x080102f4

080012c8 <StartGPS>:
////	HAL_UART_Transmit(&huart1, (uint8_t*)"\n",1, 1000);
//}


void StartGPS(void const * argument)
{
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 80012ca:	483d      	ldr	r0, [pc, #244]	@ (80013c0 <StartGPS+0xf8>)
	/* USER CODE BEGIN StartGPS */

	/* Infinite loop */

	rmc_saved = readFlash(0x9000);
 80012cc:	4c3d      	ldr	r4, [pc, #244]	@ (80013c4 <StartGPS+0xfc>)
{
 80012ce:	b097      	sub	sp, #92	@ 0x5c
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 80012d0:	f004 f806 	bl	80052e0 <Debug_printf>
	rmc_saved = readFlash(0x9000);
 80012d4:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80012d8:	4668      	mov	r0, sp
 80012da:	f003 fae3 	bl	80048a4 <readFlash>
 80012de:	2258      	movs	r2, #88	@ 0x58
 80012e0:	4669      	mov	r1, sp
 80012e2:	4620      	mov	r0, r4
 80012e4:	f00b fd36 	bl	800cd54 <memcpy>
	Debug_printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 80012e8:	4837      	ldr	r0, [pc, #220]	@ (80013c8 <StartGPS+0x100>)
 80012ea:	f003 fff9 	bl	80052e0 <Debug_printf>
	if(rmc_saved.isValid == 0){
 80012ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80012f0:	b9f5      	cbnz	r5, 8001330 <StartGPS+0x68>
		Debug_printf("There is not back up GPS from FLASH");
 80012f2:	4836      	ldr	r0, [pc, #216]	@ (80013cc <StartGPS+0x104>)
 80012f4:	f003 fff4 	bl	80052e0 <Debug_printf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 80012f8:	a32d      	add	r3, pc, #180	@ (adr r3, 80013b0 <StartGPS+0xe8>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 8001302:	a32d      	add	r3, pc, #180	@ (adr r3, 80013b8 <StartGPS+0xf0>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <StartGPS+0x108>)
 800130e:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <StartGPS+0x10c>)
 8001312:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 8001314:	234e      	movs	r3, #78	@ 0x4e
 8001316:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 800131a:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 800131e:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 8001320:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 8001324:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 8001328:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 800132a:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 800132c:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 800132e:	61a5      	str	r5, [r4, #24]
	}

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8001330:	4a29      	ldr	r2, [pc, #164]	@ (80013d8 <StartGPS+0x110>)
 8001332:	492a      	ldr	r1, [pc, #168]	@ (80013dc <StartGPS+0x114>)
 8001334:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <StartGPS+0x118>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001336:	4f2b      	ldr	r7, [pc, #172]	@ (80013e4 <StartGPS+0x11c>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001338:	4e2b      	ldr	r6, [pc, #172]	@ (80013e8 <StartGPS+0x120>)
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800133a:	4d2c      	ldr	r5, [pc, #176]	@ (80013ec <StartGPS+0x124>)
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 800133c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001340:	f002 f94c 	bl	80035dc <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001344:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <StartGPS+0x110>)
 8001346:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
 800134a:	2100      	movs	r1, #0
 800134c:	f00a feae 	bl	800c0ac <memset>
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001350:	4638      	mov	r0, r7
 8001352:	f003 ffc5 	bl	80052e0 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001356:	6830      	ldr	r0, [r6, #0]
		osDelay(500);
		getRMC();
		Debug_printf("\n\n ---------------------------------------------- COUNT SEND GPS: %d ---------------------------------------- \n\n", count_send_gps);
 8001358:	4c25      	ldr	r4, [pc, #148]	@ (80013f0 <StartGPS+0x128>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 800135a:	f007 f943 	bl	80085e4 <osThreadGetStackSpace>
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
 800135e:	6831      	ldr	r1, [r6, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001360:	4602      	mov	r2, r0
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
 8001362:	4824      	ldr	r0, [pc, #144]	@ (80013f4 <StartGPS+0x12c>)
 8001364:	f003 ffbc 	bl	80052e0 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800136e:	4628      	mov	r0, r5
 8001370:	f004 fffa 	bl	8006368 <HAL_GPIO_WritePin>
		osDelay(500);
 8001374:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001378:	f007 f948 	bl	800860c <osDelay>
		getRMC();
 800137c:	f7ff ff02 	bl	8001184 <getRMC>
		Debug_printf("\n\n ---------------------------------------------- COUNT SEND GPS: %d ---------------------------------------- \n\n", count_send_gps);
 8001380:	6821      	ldr	r1, [r4, #0]
 8001382:	481d      	ldr	r0, [pc, #116]	@ (80013f8 <StartGPS+0x130>)
 8001384:	f003 ffac 	bl	80052e0 <Debug_printf>
		if(count_send_gps == 29)
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	2b1d      	cmp	r3, #29
			count_send_gps = 0;
 800138c:	bf08      	it	eq
 800138e:	2300      	moveq	r3, #0
//		Debug_printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
//		Debug_printf((char*) gpsSentence);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001390:	4628      	mov	r0, r5
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f44f 7100 	mov.w	r1, #512	@ 0x200
			count_send_gps = 0;
 800139a:	bf08      	it	eq
 800139c:	6023      	streq	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800139e:	f004 ffe3 	bl	8006368 <HAL_GPIO_WritePin>
		osDelay(500);
 80013a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a6:	f007 f931 	bl	800860c <osDelay>
	{
 80013aa:	e7d1      	b.n	8001350 <StartGPS+0x88>
 80013ac:	f3af 8000 	nop.w
 80013b0:	5eaab042 	.word	0x5eaab042
 80013b4:	4034ff7e 	.word	0x4034ff7e
 80013b8:	48451330 	.word	0x48451330
 80013bc:	405a72dd 	.word	0x405a72dd
 80013c0:	08010391 	.word	0x08010391
 80013c4:	20000378 	.word	0x20000378
 80013c8:	080103cc 	.word	0x080103cc
 80013cc:	08010419 	.word	0x08010419
 80013d0:	41b33333 	.word	0x41b33333
 80013d4:	41f40000 	.word	0x41f40000
 80013d8:	2000042c 	.word	0x2000042c
 80013dc:	200070dc 	.word	0x200070dc
 80013e0:	2000212c 	.word	0x2000212c
 80013e4:	0801043d 	.word	0x0801043d
 80013e8:	20005724 	.word	0x20005724
 80013ec:	48000800 	.word	0x48000800
 80013f0:	20000428 	.word	0x20000428
 80013f4:	0801047d 	.word	0x0801047d
 80013f8:	080104ba 	.word	0x080104ba

080013fc <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM;


JT808_TerminalRegistration create_terminal_registration(){
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001400:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001402:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001404:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8001406:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800140a:	4622      	mov	r2, r4
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	4626      	mov	r6, r4
 8001412:	c603      	stmia	r6!, {r0, r1}
 8001414:	3308      	adds	r3, #8
 8001416:	42bb      	cmp	r3, r7
 8001418:	4634      	mov	r4, r6
 800141a:	d1f7      	bne.n	800140c <create_terminal_registration+0x10>
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8001420:	4613      	mov	r3, r2
 8001422:	ae0f      	add	r6, sp, #60	@ 0x3c
 8001424:	462a      	mov	r2, r5
 8001426:	461c      	mov	r4, r3
 8001428:	cc03      	ldmia	r4!, {r0, r1}
 800142a:	42b4      	cmp	r4, r6
 800142c:	6010      	str	r0, [r2, #0]
 800142e:	6051      	str	r1, [r2, #4]
 8001430:	4623      	mov	r3, r4
 8001432:	f102 0208 	add.w	r2, r2, #8
 8001436:	d1f6      	bne.n	8001426 <create_terminal_registration+0x2a>
 8001438:	6820      	ldr	r0, [r4, #0]
 800143a:	6010      	str	r0, [r2, #0]
}
 800143c:	4628      	mov	r0, r5
 800143e:	b011      	add	sp, #68	@ 0x44
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001442:	bf00      	nop
 8001444:	0800ffb0 	.word	0x0800ffb0

08001448 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8001448:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 800144a:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 800144c:	b093      	sub	sp, #76	@ 0x4c
 800144e:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8001450:	462a      	mov	r2, r5
 8001452:	4906      	ldr	r1, [pc, #24]	@ (800146c <create_location_info_report+0x24>)
 8001454:	a801      	add	r0, sp, #4
 8001456:	f00b fc7d 	bl	800cd54 <memcpy>
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
	// Copy the terminal phone number into the structure

    return location_info;
 800145a:	462a      	mov	r2, r5
 800145c:	a901      	add	r1, sp, #4
 800145e:	4620      	mov	r0, r4
 8001460:	f00b fc78 	bl	800cd54 <memcpy>
}
 8001464:	4620      	mov	r0, r4
 8001466:	b013      	add	sp, #76	@ 0x4c
 8001468:	bd30      	pop	{r4, r5, pc}
 800146a:	bf00      	nop
 800146c:	0800ffec 	.word	0x0800ffec

08001470 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001470:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001472:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001474:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8001478:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800147a:	bf0c      	ite	eq
 800147c:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001480:	f043 0304 	orrne.w	r3, r3, #4
 8001484:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8001486:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 800148a:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800148c:	bf0c      	ite	eq
 800148e:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001492:	f043 0308 	orrne.w	r3, r3, #8
 8001496:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20002228 	.word	0x20002228

080014a0 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 80014a0:	b510      	push	{r4, lr}
 80014a2:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80014a4:	f7fe fef4 	bl	8000290 <strlen>
 80014a8:	4621      	mov	r1, r4
 80014aa:	b282      	uxth	r2, r0
}
 80014ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <send_AT_command+0x1c>)
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	f006 beb9 	b.w	800822c <HAL_UART_Transmit>
 80014ba:	bf00      	nop
 80014bc:	20007054 	.word	0x20007054

080014c0 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 80014c0:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <SIM_UART_ReInitializeRxDMA+0x28>)
 80014c4:	f006 fc45 	bl	8007d52 <HAL_UART_Abort>
	if(ret != HAL_OK)
 80014c8:	b108      	cbz	r0, 80014ce <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 80014ca:	f002 fc34 	bl	8003d36 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 80014ce:	2032      	movs	r0, #50	@ 0x32
 80014d0:	f007 f89c 	bl	800860c <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 80014d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <SIM_UART_ReInitializeRxDMA+0x2c>)
 80014da:	4903      	ldr	r1, [pc, #12]	@ (80014e8 <SIM_UART_ReInitializeRxDMA+0x28>)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <SIM_UART_ReInitializeRxDMA+0x30>)
 80014de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014e2:	f002 b87b 	b.w	80035dc <RingBufferDmaU8_initUSARTRx>
 80014e6:	bf00      	nop
 80014e8:	20007054 	.word	0x20007054
 80014ec:	200024e0 	.word	0x200024e0
 80014f0:	200024d0 	.word	0x200024d0

080014f4 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 80014f4:	b508      	push	{r3, lr}
 80014f6:	4601      	mov	r1, r0
	Debug_printf("Response at command: %s\n", cmd_str);
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <receive_response+0x1c>)
 80014fa:	f003 fef1 	bl	80052e0 <Debug_printf>
	//while(response[1] == '\0'){}
	Debug_printf((char *)response);
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <receive_response+0x20>)
 8001500:	f003 feee 	bl	80052e0 <Debug_printf>
	Debug_printf("\n");
//	osDelay(1000);
}
 8001504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Debug_printf("\n");
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <receive_response+0x24>)
 800150a:	f003 bee9 	b.w	80052e0 <Debug_printf>
 800150e:	bf00      	nop
 8001510:	0801052b 	.word	0x0801052b
 8001514:	200024e0 	.word	0x200024e0
 8001518:	080115a9 	.word	0x080115a9

0800151c <init_SIM_module>:

void init_SIM_module() {
 800151c:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 800151e:	4c0b      	ldr	r4, [pc, #44]	@ (800154c <init_SIM_module+0x30>)
 8001520:	2201      	movs	r2, #1
 8001522:	4611      	mov	r1, r2
 8001524:	4620      	mov	r0, r4
 8001526:	f004 ff1f 	bl	8006368 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2102      	movs	r1, #2
 800152e:	4620      	mov	r0, r4
 8001530:	f004 ff1a 	bl	8006368 <HAL_GPIO_WritePin>
	osDelay(2000);
 8001534:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001538:	f007 f868 	bl	800860c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800153c:	4620      	mov	r0, r4
 800153e:	2201      	movs	r2, #1
}
 8001540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001544:	2102      	movs	r1, #2
 8001546:	f004 bf0f 	b.w	8006368 <HAL_GPIO_WritePin>
 800154a:	bf00      	nop
 800154c:	48000800 	.word	0x48000800

08001550 <reboot_SIM_module>:

void reboot_SIM_module(){
 8001550:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001552:	4c11      	ldr	r4, [pc, #68]	@ (8001598 <reboot_SIM_module+0x48>)
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	4620      	mov	r0, r4
 800155a:	f004 ff05 	bl	8006368 <HAL_GPIO_WritePin>
	osDelay(1500);
 800155e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001562:	f007 f853 	bl	800860c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4620      	mov	r0, r4
 800156c:	f004 fefc 	bl	8006368 <HAL_GPIO_WritePin>
	osDelay(10000);
 8001570:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001574:	f007 f84a 	bl	800860c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2102      	movs	r1, #2
 800157c:	4620      	mov	r0, r4
 800157e:	f004 fef3 	bl	8006368 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001582:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001586:	f007 f841 	bl	800860c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800158a:	4620      	mov	r0, r4
 800158c:	2201      	movs	r2, #1
}
 800158e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001592:	2102      	movs	r1, #2
 8001594:	f004 bee8 	b.w	8006368 <HAL_GPIO_WritePin>
 8001598:	48000800 	.word	0x48000800

0800159c <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 800159c:	220a      	movs	r2, #10
 800159e:	fb90 f3f2 	sdiv	r3, r0, r2
 80015a2:	fb02 0013 	mls	r0, r2, r3, r0
}
 80015a6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80015aa:	4770      	bx	lr
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 80015b0:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 80015b2:	4d43      	ldr	r5, [pc, #268]	@ (80016c0 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 80015b4:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 80015b6:	69a8      	ldr	r0, [r5, #24]
 80015b8:	f7ff fff0 	bl	800159c <convert_dec_to_hex_value>
 80015bc:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 80015c0:	6968      	ldr	r0, [r5, #20]
 80015c2:	f7ff ffeb 	bl	800159c <convert_dec_to_hex_value>
 80015c6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 80015ca:	6928      	ldr	r0, [r5, #16]
 80015cc:	f7ff ffe6 	bl	800159c <convert_dec_to_hex_value>
 80015d0:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 80015d4:	6828      	ldr	r0, [r5, #0]
 80015d6:	f7ff ffe1 	bl	800159c <convert_dec_to_hex_value>
 80015da:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 80015de:	6868      	ldr	r0, [r5, #4]
 80015e0:	f7ff ffdc 	bl	800159c <convert_dec_to_hex_value>
 80015e4:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 80015e8:	68a8      	ldr	r0, [r5, #8]
 80015ea:	f7ff ffd7 	bl	800159c <convert_dec_to_hex_value>
 80015ee:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 80015f2:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 80015f6:	a32e      	add	r3, pc, #184	@ (adr r3, 80016b0 <save_rmc_to_location_info+0x100>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f80c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001600:	ec41 0b10 	vmov	d0, r0, r1
 8001604:	f00e fc80 	bl	800ff08 <round>
 8001608:	ec51 0b10 	vmov	r0, r1, d0
 800160c:	f7ff fab4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001610:	a327      	add	r3, pc, #156	@ (adr r3, 80016b0 <save_rmc_to_location_info+0x100>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001616:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001618:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800161c:	f7fe fffc 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 8001620:	ec41 0b10 	vmov	d0, r0, r1
 8001624:	f00e fc70 	bl	800ff08 <round>
 8001628:	ec51 0b10 	vmov	r0, r1, d0
 800162c:	f7ff faa4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 8001630:	0e33      	lsrs	r3, r6, #24
 8001632:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 8001634:	1433      	asrs	r3, r6, #16
 8001636:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 8001638:	1233      	asrs	r3, r6, #8
 800163a:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 800163c:	0e03      	lsrs	r3, r0, #24
 800163e:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 8001640:	1403      	asrs	r3, r0, #16
 8001642:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 8001644:	1203      	asrs	r3, r0, #8
 8001646:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 8001648:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 800164a:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 800164c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8001650:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	ee17 0a90 	vmov	r0, s15
 800165c:	f7fe ff84 	bl	8000568 <__aeabi_f2d>
 8001660:	a315      	add	r3, pc, #84	@ (adr r3, 80016b8 <save_rmc_to_location_info+0x108>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffd7 	bl	8000618 <__aeabi_dmul>
 800166a:	ec41 0b10 	vmov	d0, r0, r1
 800166e:	f00e fc4b 	bl	800ff08 <round>
 8001672:	ec51 0b10 	vmov	r0, r1, d0
 8001676:	f7ff fa7f 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800167a:	1203      	asrs	r3, r0, #8
 800167c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800167e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001682:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001684:	f7fe ff70 	bl	8000568 <__aeabi_f2d>
 8001688:	ec41 0b10 	vmov	d0, r0, r1
 800168c:	f00e fc3c 	bl	800ff08 <round>
 8001690:	ec51 0b10 	vmov	r0, r1, d0
 8001694:	f7ff fa70 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001698:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800169a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800169e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 80016a2:	f104 0011 	add.w	r0, r4, #17
}
 80016a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 80016aa:	f7ff bee1 	b.w	8001470 <set_status_bit>
 80016ae:	bf00      	nop
 80016b0:	00000000 	.word	0x00000000
 80016b4:	412e8480 	.word	0x412e8480
 80016b8:	c083126f 	.word	0xc083126f
 80016bc:	3ffda1ca 	.word	0x3ffda1ca
 80016c0:	20002228 	.word	0x20002228

080016c4 <first_check_SIM>:

//AT
int first_check_SIM()
{
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016c6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016ca:	2100      	movs	r1, #0
 80016cc:	4847      	ldr	r0, [pc, #284]	@ (80017ec <first_check_SIM+0x128>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 80016ce:	4d48      	ldr	r5, [pc, #288]	@ (80017f0 <first_check_SIM+0x12c>)
 80016d0:	4c46      	ldr	r4, [pc, #280]	@ (80017ec <first_check_SIM+0x128>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80016d2:	4e48      	ldr	r6, [pc, #288]	@ (80017f4 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016d4:	f00a fcea 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 80016d8:	f7ff fef2 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016dc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016e0:	2100      	movs	r1, #0
 80016e2:	4842      	ldr	r0, [pc, #264]	@ (80017ec <first_check_SIM+0x128>)
 80016e4:	f00a fce2 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 80016e8:	f7ff feea 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 80016ec:	4629      	mov	r1, r5
 80016ee:	4620      	mov	r0, r4
 80016f0:	f00a fd2c 	bl	800c14c <strstr>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d056      	beq.n	80017a6 <first_check_SIM+0xe2>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80016f8:	483e      	ldr	r0, [pc, #248]	@ (80017f4 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80016fa:	4e3f      	ldr	r6, [pc, #252]	@ (80017f8 <first_check_SIM+0x134>)
 80016fc:	4d3b      	ldr	r5, [pc, #236]	@ (80017ec <first_check_SIM+0x128>)
		receive_response("First check SIM MODULE\n");
 80016fe:	4f3f      	ldr	r7, [pc, #252]	@ (80017fc <first_check_SIM+0x138>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001700:	f7ff fef8 	bl	80014f4 <receive_response>
	osDelay(1000);
 8001704:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001708:	f006 ff80 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800170c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001710:	2100      	movs	r1, #0
 8001712:	4836      	ldr	r0, [pc, #216]	@ (80017ec <first_check_SIM+0x128>)
 8001714:	f00a fcca 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001718:	f7ff fed2 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 800171c:	4838      	ldr	r0, [pc, #224]	@ (8001800 <first_check_SIM+0x13c>)
 800171e:	f7ff febf 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001722:	4631      	mov	r1, r6
 8001724:	4628      	mov	r0, r5
 8001726:	f00a fd11 	bl	800c14c <strstr>
 800172a:	4604      	mov	r4, r0
 800172c:	2800      	cmp	r0, #0
 800172e:	d145      	bne.n	80017bc <first_check_SIM+0xf8>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("First check SIM MODULE\n");
 8001730:	4832      	ldr	r0, [pc, #200]	@ (80017fc <first_check_SIM+0x138>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001732:	4e31      	ldr	r6, [pc, #196]	@ (80017f8 <first_check_SIM+0x134>)
 8001734:	4d2d      	ldr	r5, [pc, #180]	@ (80017ec <first_check_SIM+0x128>)
		receive_response("Check status of SIM MODULE\n");
 8001736:	4f33      	ldr	r7, [pc, #204]	@ (8001804 <first_check_SIM+0x140>)
	receive_response("First check SIM MODULE\n");
 8001738:	f7ff fedc 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800173c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001740:	4621      	mov	r1, r4
 8001742:	482a      	ldr	r0, [pc, #168]	@ (80017ec <first_check_SIM+0x128>)
 8001744:	f00a fcb2 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001748:	f7ff feba 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 800174c:	482e      	ldr	r0, [pc, #184]	@ (8001808 <first_check_SIM+0x144>)
 800174e:	f7ff fea7 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001752:	4631      	mov	r1, r6
 8001754:	4628      	mov	r0, r5
 8001756:	f00a fcf9 	bl	800c14c <strstr>
 800175a:	4604      	mov	r4, r0
 800175c:	bbb0      	cbnz	r0, 80017cc <first_check_SIM+0x108>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("Check status of SIM MODULE\n");
 800175e:	4829      	ldr	r0, [pc, #164]	@ (8001804 <first_check_SIM+0x140>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command("AT+CMEE=2\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001760:	4e25      	ldr	r6, [pc, #148]	@ (80017f8 <first_check_SIM+0x134>)
 8001762:	4d22      	ldr	r5, [pc, #136]	@ (80017ec <first_check_SIM+0x128>)
		receive_response("Check enable result code\n");
 8001764:	4f29      	ldr	r7, [pc, #164]	@ (800180c <first_check_SIM+0x148>)
	receive_response("Check status of SIM MODULE\n");
 8001766:	f7ff fec5 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800176a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800176e:	4621      	mov	r1, r4
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <first_check_SIM+0x128>)
 8001772:	f00a fc9b 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001776:	f7ff fea3 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CMEE=2\r\n");
 800177a:	4825      	ldr	r0, [pc, #148]	@ (8001810 <first_check_SIM+0x14c>)
 800177c:	f7ff fe90 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001780:	4631      	mov	r1, r6
 8001782:	4628      	mov	r0, r5
 8001784:	f00a fce2 	bl	800c14c <strstr>
 8001788:	4604      	mov	r4, r0
 800178a:	bb38      	cbnz	r0, 80017dc <first_check_SIM+0x118>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("Check enable result code\n");
 800178c:	481f      	ldr	r0, [pc, #124]	@ (800180c <first_check_SIM+0x148>)
 800178e:	f7ff feb1 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001792:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001796:	4621      	mov	r1, r4
 8001798:	4814      	ldr	r0, [pc, #80]	@ (80017ec <first_check_SIM+0x128>)
 800179a:	f00a fc87 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 800179e:	f7ff fe8f 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	count_check = 0;

	return 1;
}
 80017a2:	2001      	movs	r0, #1
 80017a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80017a6:	4630      	mov	r0, r6
 80017a8:	f7ff fea4 	bl	80014f4 <receive_response>
		osDelay(1000);
 80017ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017b0:	f006 ff2c 	bl	800860c <osDelay>
		osDelay(200);
 80017b4:	20c8      	movs	r0, #200	@ 0xc8
 80017b6:	f006 ff29 	bl	800860c <osDelay>
 80017ba:	e797      	b.n	80016ec <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 80017bc:	4638      	mov	r0, r7
 80017be:	f7ff fe99 	bl	80014f4 <receive_response>
		osDelay(1000);
 80017c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c6:	f006 ff21 	bl	800860c <osDelay>
 80017ca:	e7aa      	b.n	8001722 <first_check_SIM+0x5e>
		receive_response("Check status of SIM MODULE\n");
 80017cc:	4638      	mov	r0, r7
 80017ce:	f7ff fe91 	bl	80014f4 <receive_response>
		osDelay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d6:	f006 ff19 	bl	800860c <osDelay>
 80017da:	e7ba      	b.n	8001752 <first_check_SIM+0x8e>
		receive_response("Check enable result code\n");
 80017dc:	4638      	mov	r0, r7
 80017de:	f7ff fe89 	bl	80014f4 <receive_response>
		osDelay(1000);
 80017e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e6:	f006 ff11 	bl	800860c <osDelay>
 80017ea:	e7c9      	b.n	8001780 <first_check_SIM+0xbc>
 80017ec:	200024e0 	.word	0x200024e0
 80017f0:	08010568 	.word	0x08010568
 80017f4:	08010544 	.word	0x08010544
 80017f8:	080109a2 	.word	0x080109a2
 80017fc:	08010575 	.word	0x08010575
 8001800:	08010570 	.word	0x08010570
 8001804:	08010597 	.word	0x08010597
 8001808:	0801058d 	.word	0x0801058d
 800180c:	080105bf 	.word	0x080105bf
 8001810:	080105b3 	.word	0x080105b3

08001814 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 8001814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001816:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001818:	4604      	mov	r4, r0
 800181a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800181e:	b1cb      	cbz	r3, 8001854 <extract_last_12_digits_bcd+0x40>
 8001820:	2b41      	cmp	r3, #65	@ 0x41
 8001822:	d1f9      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
 8001824:	7803      	ldrb	r3, [r0, #0]
 8001826:	2b54      	cmp	r3, #84	@ 0x54
 8001828:	d1f6      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
 800182a:	7843      	ldrb	r3, [r0, #1]
 800182c:	2b2b      	cmp	r3, #43	@ 0x2b
 800182e:	d1f3      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
 8001830:	7883      	ldrb	r3, [r0, #2]
 8001832:	2b43      	cmp	r3, #67	@ 0x43
 8001834:	d1f0      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 8001836:	78c3      	ldrb	r3, [r0, #3]
 8001838:	2b47      	cmp	r3, #71	@ 0x47
 800183a:	d1ed      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
 800183c:	7903      	ldrb	r3, [r0, #4]
 800183e:	2b53      	cmp	r3, #83	@ 0x53
 8001840:	d1ea      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
 8001842:	7943      	ldrb	r3, [r0, #5]
 8001844:	2b4e      	cmp	r3, #78	@ 0x4e
 8001846:	d1e7      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001848:	7983      	ldrb	r3, [r0, #6]
 800184a:	2b3d      	cmp	r3, #61	@ 0x3d
 800184c:	d1e4      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 800184e:	79c3      	ldrb	r3, [r0, #7]
 8001850:	2b31      	cmp	r3, #49	@ 0x31
 8001852:	d1e1      	bne.n	8001818 <extract_last_12_digits_bcd+0x4>
		start++;
	}
//	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
//	uart_transmit_string( &huart1,(uint8_t *) start);
	Debug_printf("Inside Checking terminal Number: ");
 8001854:	4821      	ldr	r0, [pc, #132]	@ (80018dc <extract_last_12_digits_bcd+0xc8>)
 8001856:	f003 fd43 	bl	80052e0 <Debug_printf>
	Debug_printf((char*)start);
 800185a:	4620      	mov	r0, r4
 800185c:	f003 fd40 	bl	80052e0 <Debug_printf>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 8001860:	7823      	ldrb	r3, [r4, #0]
 8001862:	b96b      	cbnz	r3, 8001880 <extract_last_12_digits_bcd+0x6c>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 8001864:	491e      	ldr	r1, [pc, #120]	@ (80018e0 <extract_last_12_digits_bcd+0xcc>)
 8001866:	481f      	ldr	r0, [pc, #124]	@ (80018e4 <extract_last_12_digits_bcd+0xd0>)
 8001868:	f003 fd16 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 800186c:	4629      	mov	r1, r5
 800186e:	481d      	ldr	r0, [pc, #116]	@ (80018e4 <extract_last_12_digits_bcd+0xd0>)
 8001870:	f003 fd12 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001874:	491c      	ldr	r1, [pc, #112]	@ (80018e8 <extract_last_12_digits_bcd+0xd4>)
 8001876:	481b      	ldr	r0, [pc, #108]	@ (80018e4 <extract_last_12_digits_bcd+0xd0>)
 8001878:	f003 fd0e 	bl	8005298 <uart_transmit_string>
}
 800187c:	b004      	add	sp, #16
 800187e:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 8001880:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 8001882:	7821      	ldrb	r1, [r4, #0]
 8001884:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001888:	4623      	mov	r3, r4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	3401      	adds	r4, #1
 800188e:	b109      	cbz	r1, 8001894 <extract_last_12_digits_bcd+0x80>
 8001890:	2a09      	cmp	r2, #9
 8001892:	d8f6      	bhi.n	8001882 <extract_last_12_digits_bcd+0x6e>
 8001894:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 8001896:	4616      	mov	r6, r2
 8001898:	f812 1b01 	ldrb.w	r1, [r2], #1
 800189c:	3930      	subs	r1, #48	@ 0x30
 800189e:	2909      	cmp	r1, #9
 80018a0:	d9f9      	bls.n	8001896 <extract_last_12_digits_bcd+0x82>
 80018a2:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80018a4:	4911      	ldr	r1, [pc, #68]	@ (80018ec <extract_last_12_digits_bcd+0xd8>)
 80018a6:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <extract_last_12_digits_bcd+0xd0>)
 80018a8:	f003 fcf6 	bl	8005298 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80018ac:	4a10      	ldr	r2, [pc, #64]	@ (80018f0 <extract_last_12_digits_bcd+0xdc>)
 80018ae:	4623      	mov	r3, r4
 80018b0:	210a      	movs	r1, #10
 80018b2:	a801      	add	r0, sp, #4
 80018b4:	f00a fafe 	bl	800beb4 <sniprintf>
		if (digit_count >= 12) {
 80018b8:	2c0b      	cmp	r4, #11
 80018ba:	d9d3      	bls.n	8001864 <extract_last_12_digits_bcd+0x50>
			const uint8_t *last_12 = end - 12;
 80018bc:	f1a6 030c 	sub.w	r3, r6, #12
 80018c0:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018c2:	7819      	ldrb	r1, [r3, #0]
 80018c4:	785a      	ldrb	r2, [r3, #1]
 80018c6:	3930      	subs	r1, #48	@ 0x30
 80018c8:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80018ca:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018cc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80018d0:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018d2:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 80018d6:	d1f4      	bne.n	80018c2 <extract_last_12_digits_bcd+0xae>
 80018d8:	e7c4      	b.n	8001864 <extract_last_12_digits_bcd+0x50>
 80018da:	bf00      	nop
 80018dc:	080105d9 	.word	0x080105d9
 80018e0:	080105fb 	.word	0x080105fb
 80018e4:	20007164 	.word	0x20007164
 80018e8:	08010416 	.word	0x08010416
 80018ec:	08010616 	.word	0x08010616
 80018f0:	08010bf4 	.word	0x08010bf4

080018f4 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 80018f6:	488c      	ldr	r0, [pc, #560]	@ (8001b28 <check_SIM_ready+0x234>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018f8:	4e8c      	ldr	r6, [pc, #560]	@ (8001b2c <check_SIM_ready+0x238>)
 80018fa:	4d8d      	ldr	r5, [pc, #564]	@ (8001b30 <check_SIM_ready+0x23c>)
		if (count_check_sim >= 5){
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Check IMEI-0:\n");
 80018fc:	4f8d      	ldr	r7, [pc, #564]	@ (8001b34 <check_SIM_ready+0x240>)
	send_AT_command(GET_IMEI);
 80018fe:	f7ff fdcf 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001902:	2405      	movs	r4, #5
 8001904:	4631      	mov	r1, r6
 8001906:	4628      	mov	r0, r5
 8001908:	f00a fc20 	bl	800c14c <strstr>
 800190c:	2800      	cmp	r0, #0
 800190e:	f000 80dc 	beq.w	8001aca <check_SIM_ready+0x1d6>
		osDelay(1000);
	}
	receive_response("Check IMEI-0:\n");
 8001912:	4888      	ldr	r0, [pc, #544]	@ (8001b34 <check_SIM_ready+0x240>)
	count_check_sim = 0;

	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001914:	4e85      	ldr	r6, [pc, #532]	@ (8001b2c <check_SIM_ready+0x238>)
 8001916:	4d86      	ldr	r5, [pc, #536]	@ (8001b30 <check_SIM_ready+0x23c>)
		receive_response("Check SIM\n");
 8001918:	4f87      	ldr	r7, [pc, #540]	@ (8001b38 <check_SIM_ready+0x244>)
	receive_response("Check IMEI-0:\n");
 800191a:	f7ff fdeb 	bl	80014f4 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 800191e:	4987      	ldr	r1, [pc, #540]	@ (8001b3c <check_SIM_ready+0x248>)
 8001920:	4883      	ldr	r0, [pc, #524]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001922:	f7ff ff77 	bl	8001814 <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001926:	4986      	ldr	r1, [pc, #536]	@ (8001b40 <check_SIM_ready+0x24c>)
 8001928:	4886      	ldr	r0, [pc, #536]	@ (8001b44 <check_SIM_ready+0x250>)
 800192a:	f003 fcb5 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 800192e:	4983      	ldr	r1, [pc, #524]	@ (8001b3c <check_SIM_ready+0x248>)
 8001930:	4884      	ldr	r0, [pc, #528]	@ (8001b44 <check_SIM_ready+0x250>)
 8001932:	f003 fcb1 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001936:	4984      	ldr	r1, [pc, #528]	@ (8001b48 <check_SIM_ready+0x254>)
 8001938:	4882      	ldr	r0, [pc, #520]	@ (8001b44 <check_SIM_ready+0x250>)
 800193a:	f003 fcad 	bl	8005298 <uart_transmit_string>
	osDelay(100);
 800193e:	2064      	movs	r0, #100	@ 0x64
 8001940:	f006 fe64 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001944:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001948:	2100      	movs	r1, #0
 800194a:	4879      	ldr	r0, [pc, #484]	@ (8001b30 <check_SIM_ready+0x23c>)
 800194c:	f00a fbae 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001950:	f7ff fdb6 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 8001954:	487d      	ldr	r0, [pc, #500]	@ (8001b4c <check_SIM_ready+0x258>)
 8001956:	f7ff fda3 	bl	80014a0 <send_AT_command>
	osDelay(100);
 800195a:	2064      	movs	r0, #100	@ 0x64
 800195c:	f006 fe56 	bl	800860c <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001960:	2405      	movs	r4, #5
 8001962:	4631      	mov	r1, r6
 8001964:	4628      	mov	r0, r5
 8001966:	f00a fbf1 	bl	800c14c <strstr>
 800196a:	2800      	cmp	r0, #0
 800196c:	f000 80c1 	beq.w	8001af2 <check_SIM_ready+0x1fe>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 8001970:	4871      	ldr	r0, [pc, #452]	@ (8001b38 <check_SIM_ready+0x244>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001972:	4e77      	ldr	r6, [pc, #476]	@ (8001b50 <check_SIM_ready+0x25c>)
 8001974:	4d6e      	ldr	r5, [pc, #440]	@ (8001b30 <check_SIM_ready+0x23c>)
		receive_response("Check SIM CCID\n");
 8001976:	4f77      	ldr	r7, [pc, #476]	@ (8001b54 <check_SIM_ready+0x260>)
	receive_response("Check SIM\n");
 8001978:	f7ff fdbc 	bl	80014f4 <receive_response>
	osDelay(100);
 800197c:	2064      	movs	r0, #100	@ 0x64
 800197e:	f006 fe45 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001982:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001986:	2100      	movs	r1, #0
 8001988:	4869      	ldr	r0, [pc, #420]	@ (8001b30 <check_SIM_ready+0x23c>)
 800198a:	f00a fb8f 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 800198e:	f7ff fd97 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001992:	2064      	movs	r0, #100	@ 0x64
 8001994:	f006 fe3a 	bl	800860c <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001998:	486f      	ldr	r0, [pc, #444]	@ (8001b58 <check_SIM_ready+0x264>)
 800199a:	f7ff fd81 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800199e:	2405      	movs	r4, #5
 80019a0:	4631      	mov	r1, r6
 80019a2:	4628      	mov	r0, r5
 80019a4:	f00a fbd2 	bl	800c14c <strstr>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f000 80ad 	beq.w	8001b08 <check_SIM_ready+0x214>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 80019ae:	4869      	ldr	r0, [pc, #420]	@ (8001b54 <check_SIM_ready+0x260>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 80019b0:	4d6a      	ldr	r5, [pc, #424]	@ (8001b5c <check_SIM_ready+0x268>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 80019b2:	4e6b      	ldr	r6, [pc, #428]	@ (8001b60 <check_SIM_ready+0x26c>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80019b4:	4c5d      	ldr	r4, [pc, #372]	@ (8001b2c <check_SIM_ready+0x238>)
	receive_response("Check SIM CCID\n");
 80019b6:	f7ff fd9d 	bl	80014f4 <receive_response>
	osDelay(100);
 80019ba:	2064      	movs	r0, #100	@ 0x64
 80019bc:	f006 fe26 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019c4:	2100      	movs	r1, #0
 80019c6:	485a      	ldr	r0, [pc, #360]	@ (8001b30 <check_SIM_ready+0x23c>)
 80019c8:	f00a fb70 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 80019cc:	f7ff fd78 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 80019d0:	4864      	ldr	r0, [pc, #400]	@ (8001b64 <check_SIM_ready+0x270>)
 80019d2:	f7ff fd65 	bl	80014a0 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 80019d6:	4864      	ldr	r0, [pc, #400]	@ (8001b68 <check_SIM_ready+0x274>)
 80019d8:	f7ff fd8c 	bl	80014f4 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 80019dc:	4628      	mov	r0, r5
 80019de:	f7ff fd5f 	bl	80014a0 <send_AT_command>
		osDelay(150);
 80019e2:	2096      	movs	r0, #150	@ 0x96
 80019e4:	f006 fe12 	bl	800860c <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 80019e8:	4630      	mov	r0, r6
 80019ea:	f7ff fd83 	bl	80014f4 <receive_response>
		osDelay(1000);
 80019ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f2:	f006 fe0b 	bl	800860c <osDelay>
		osDelay(300);
 80019f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019fa:	f006 fe07 	bl	800860c <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80019fe:	484c      	ldr	r0, [pc, #304]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001a00:	4621      	mov	r1, r4
 8001a02:	f00a fba3 	bl	800c14c <strstr>
		if(first_pointer != NULL){
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d0e8      	beq.n	80019dc <check_SIM_ready+0xe8>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	f00a fb9d 	bl	800c14c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d0e2      	beq.n	80019dc <check_SIM_ready+0xe8>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001a16:	2064      	movs	r0, #100	@ 0x64
 8001a18:	f006 fdf8 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a20:	2100      	movs	r1, #0
 8001a22:	4843      	ldr	r0, [pc, #268]	@ (8001b30 <check_SIM_ready+0x23c>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 8001a24:	4d51      	ldr	r5, [pc, #324]	@ (8001b6c <check_SIM_ready+0x278>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 8001a26:	4e52      	ldr	r6, [pc, #328]	@ (8001b70 <check_SIM_ready+0x27c>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a28:	4c40      	ldr	r4, [pc, #256]	@ (8001b2c <check_SIM_ready+0x238>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a2a:	f00a fb3f 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a2e:	f7ff fd47 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 8001a32:	4850      	ldr	r0, [pc, #320]	@ (8001b74 <check_SIM_ready+0x280>)
 8001a34:	f7ff fd34 	bl	80014a0 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001a38:	484f      	ldr	r0, [pc, #316]	@ (8001b78 <check_SIM_ready+0x284>)
 8001a3a:	f7ff fd5b 	bl	80014f4 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f7ff fd2e 	bl	80014a0 <send_AT_command>
		osDelay(150);
 8001a44:	2096      	movs	r0, #150	@ 0x96
 8001a46:	f006 fde1 	bl	800860c <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f7ff fd52 	bl	80014f4 <receive_response>
		osDelay(1000);
 8001a50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a54:	f006 fdda 	bl	800860c <osDelay>
		osDelay(300);
 8001a58:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a5c:	f006 fdd6 	bl	800860c <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a60:	4833      	ldr	r0, [pc, #204]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001a62:	4621      	mov	r1, r4
 8001a64:	f00a fb72 	bl	800c14c <strstr>
		if(first_pointer != NULL){
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0e8      	beq.n	8001a3e <check_SIM_ready+0x14a>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	3001      	adds	r0, #1
 8001a70:	f00a fb6c 	bl	800c14c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0e2      	beq.n	8001a3e <check_SIM_ready+0x14a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001a78:	2064      	movs	r0, #100	@ 0x64
 8001a7a:	f006 fdc7 	bl	800860c <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 8001a7e:	483c      	ldr	r0, [pc, #240]	@ (8001b70 <check_SIM_ready+0x27c>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a80:	4d2a      	ldr	r5, [pc, #168]	@ (8001b2c <check_SIM_ready+0x238>)
 8001a82:	4c2b      	ldr	r4, [pc, #172]	@ (8001b30 <check_SIM_ready+0x23c>)
		if (count_check_sim >= TIME_LIMIT){
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Check Signal Quality Report\n");
 8001a84:	4e3d      	ldr	r6, [pc, #244]	@ (8001b7c <check_SIM_ready+0x288>)
	receive_response("Check Network Registration Status (PS Service)\n");
 8001a86:	f7ff fd35 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a8a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4827      	ldr	r0, [pc, #156]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001a92:	f00a fb0b 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a96:	f7ff fd13 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001a9a:	4839      	ldr	r0, [pc, #228]	@ (8001b80 <check_SIM_ready+0x28c>)
 8001a9c:	f7ff fd00 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f00a fb52 	bl	800c14c <strstr>
 8001aa8:	b3c8      	cbz	r0, 8001b1e <check_SIM_ready+0x22a>
	}
	receive_response("Check Signal Quality Report\n");
 8001aaa:	4834      	ldr	r0, [pc, #208]	@ (8001b7c <check_SIM_ready+0x288>)
 8001aac:	f7ff fd22 	bl	80014f4 <receive_response>
	osDelay(100);
 8001ab0:	2064      	movs	r0, #100	@ 0x64
 8001ab2:	f006 fdab 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ab6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001aba:	2100      	movs	r1, #0
 8001abc:	481c      	ldr	r0, [pc, #112]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001abe:	f00a faf5 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001ac2:	f7ff fcfd 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	count_check_sim = 0;
	return 1;
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	e00a      	b.n	8001ae0 <check_SIM_ready+0x1ec>
		if (count_check_sim >= 5){
 8001aca:	3c01      	subs	r4, #1
 8001acc:	d109      	bne.n	8001ae2 <check_SIM_ready+0x1ee>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ace:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4816      	ldr	r0, [pc, #88]	@ (8001b30 <check_SIM_ready+0x23c>)
 8001ad6:	f00a fae9 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ada:	f7ff fcf1 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001ade:	2000      	movs	r0, #0
}
 8001ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check IMEI-0:\n");
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	f7ff fd06 	bl	80014f4 <receive_response>
		osDelay(1000);
 8001ae8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aec:	f006 fd8e 	bl	800860c <osDelay>
 8001af0:	e708      	b.n	8001904 <check_SIM_ready+0x10>
		receive_response("Check SIM\n");
 8001af2:	4638      	mov	r0, r7
 8001af4:	f7ff fcfe 	bl	80014f4 <receive_response>
		osDelay(1000);
 8001af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afc:	f006 fd86 	bl	800860c <osDelay>
		if (count_check_sim >= 5){
 8001b00:	3c01      	subs	r4, #1
 8001b02:	f47f af2e 	bne.w	8001962 <check_SIM_ready+0x6e>
 8001b06:	e7e2      	b.n	8001ace <check_SIM_ready+0x1da>
		receive_response("Check SIM CCID\n");
 8001b08:	4638      	mov	r0, r7
 8001b0a:	f7ff fcf3 	bl	80014f4 <receive_response>
		osDelay(1000);
 8001b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b12:	f006 fd7b 	bl	800860c <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 8001b16:	3c01      	subs	r4, #1
 8001b18:	f47f af42 	bne.w	80019a0 <check_SIM_ready+0xac>
 8001b1c:	e7d7      	b.n	8001ace <check_SIM_ready+0x1da>
		receive_response("Check Signal Quality Report\n");
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7ff fce8 	bl	80014f4 <receive_response>
 8001b24:	e7bc      	b.n	8001aa0 <check_SIM_ready+0x1ac>
 8001b26:	bf00      	nop
 8001b28:	0801063e 	.word	0x0801063e
 8001b2c:	080109a2 	.word	0x080109a2
 8001b30:	200024e0 	.word	0x200024e0
 8001b34:	0801064a 	.word	0x0801064a
 8001b38:	0801067d 	.word	0x0801067d
 8001b3c:	20002220 	.word	0x20002220
 8001b40:	08010659 	.word	0x08010659
 8001b44:	20007164 	.word	0x20007164
 8001b48:	08010416 	.word	0x08010416
 8001b4c:	08010672 	.word	0x08010672
 8001b50:	080106a3 	.word	0x080106a3
 8001b54:	08010693 	.word	0x08010693
 8001b58:	08010688 	.word	0x08010688
 8001b5c:	080106ec 	.word	0x080106ec
 8001b60:	080106f7 	.word	0x080106f7
 8001b64:	080106ab 	.word	0x080106ab
 8001b68:	080106b7 	.word	0x080106b7
 8001b6c:	08010769 	.word	0x08010769
 8001b70:	08010775 	.word	0x08010775
 8001b74:	08010727 	.word	0x08010727
 8001b78:	08010734 	.word	0x08010734
 8001b7c:	080107ae 	.word	0x080107ae
 8001b80:	080107a5 	.word	0x080107a5

08001b84 <check_configure_APN>:

void check_configure_APN(){
 8001b84:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <check_configure_APN+0x18>)
 8001b88:	f7ff fc8a 	bl	80014a0 <send_AT_command>
	osDelay(150);
 8001b8c:	2096      	movs	r0, #150	@ 0x96
 8001b8e:	f006 fd3d 	bl	800860c <osDelay>
	receive_response("Check Configuring APN\n");
}
 8001b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 8001b96:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <check_configure_APN+0x1c>)
 8001b98:	f7ff bcac 	b.w	80014f4 <receive_response>
 8001b9c:	080107cb 	.word	0x080107cb
 8001ba0:	080107d9 	.word	0x080107d9

08001ba4 <configure_APN>:

int configure_APN(int context_id){
 8001ba4:	b530      	push	{r4, r5, lr}
 8001ba6:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	9204      	str	r2, [sp, #16]
 8001bac:	4a16      	ldr	r2, [pc, #88]	@ (8001c08 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001bae:	4c17      	ldr	r4, [pc, #92]	@ (8001c0c <configure_APN+0x68>)
 8001bb0:	4d17      	ldr	r5, [pc, #92]	@ (8001c10 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001bb2:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001bb6:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <configure_APN+0x70>)
 8001bb8:	9201      	str	r2, [sp, #4]
 8001bba:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001bbc:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	a806      	add	r0, sp, #24
 8001bc6:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <configure_APN+0x74>)
 8001bc8:	f00a f974 	bl	800beb4 <sniprintf>
	send_AT_command((char*)command);
 8001bcc:	a806      	add	r0, sp, #24
 8001bce:	f7ff fc67 	bl	80014a0 <send_AT_command>
	osDelay(150);
 8001bd2:	2096      	movs	r0, #150	@ 0x96
 8001bd4:	f006 fd1a 	bl	800860c <osDelay>
	receive_response("CONFIGURE APN\n");
 8001bd8:	4810      	ldr	r0, [pc, #64]	@ (8001c1c <configure_APN+0x78>)
 8001bda:	f7ff fc8b 	bl	80014f4 <receive_response>
		check_configure_APN();
 8001bde:	f7ff ffd1 	bl	8001b84 <check_configure_APN>
		osDelay(1300);
 8001be2:	f240 5014 	movw	r0, #1300	@ 0x514
 8001be6:	f006 fd11 	bl	800860c <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001bea:	4908      	ldr	r1, [pc, #32]	@ (8001c0c <configure_APN+0x68>)
 8001bec:	4628      	mov	r0, r5
 8001bee:	f00a faad 	bl	800c14c <strstr>
		if(first_pointer != NULL){
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d0f3      	beq.n	8001bde <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	f00a faa7 	bl	800c14c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d0ed      	beq.n	8001bde <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001c02:	2001      	movs	r0, #1
 8001c04:	b047      	add	sp, #284	@ 0x11c
 8001c06:	bd30      	pop	{r4, r5, pc}
 8001c08:	080115aa 	.word	0x080115aa
 8001c0c:	080109a2 	.word	0x080109a2
 8001c10:	200024e0 	.word	0x200024e0
 8001c14:	08010816 	.word	0x08010816
 8001c18:	080107f0 	.word	0x080107f0
 8001c1c:	08010820 	.word	0x08010820

08001c20 <check_activate_context>:

void check_activate_context(){
 8001c20:	b500      	push	{lr}
 8001c22:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001c24:	4906      	ldr	r1, [pc, #24]	@ (8001c40 <check_activate_context+0x20>)
 8001c26:	4668      	mov	r0, sp
 8001c28:	f00b f88c 	bl	800cd44 <strcpy>
	send_AT_command((char*)command);
 8001c2c:	4668      	mov	r0, sp
 8001c2e:	f7ff fc37 	bl	80014a0 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001c32:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <check_activate_context+0x24>)
 8001c34:	f7ff fc5e 	bl	80014f4 <receive_response>
}
 8001c38:	b021      	add	sp, #132	@ 0x84
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3e:	bf00      	nop
 8001c40:	0801082f 	.word	0x0801082f
 8001c44:	0801083b 	.word	0x0801083b

08001c48 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4c:	b0a0      	sub	sp, #128	@ 0x80
 8001c4e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001c50:	4a2c      	ldr	r2, [pc, #176]	@ (8001d04 <activate_context+0xbc>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001c52:	4f2d      	ldr	r7, [pc, #180]	@ (8001d08 <activate_context+0xc0>)
 8001c54:	4e2d      	ldr	r6, [pc, #180]	@ (8001d0c <activate_context+0xc4>)
			count_error = 0;
//			return 0;
			break;
		}

		receive_response("Check Activate Context\r\n");
 8001c56:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8001d18 <activate_context+0xd0>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001c5a:	2180      	movs	r1, #128	@ 0x80
 8001c5c:	4668      	mov	r0, sp
 8001c5e:	f00a f929 	bl	800beb4 <sniprintf>
	send_AT_command((char*)command);
 8001c62:	4668      	mov	r0, sp
 8001c64:	f7ff fc1c 	bl	80014a0 <send_AT_command>
	osDelay(150);
 8001c68:	2096      	movs	r0, #150	@ 0x96
 8001c6a:	f006 fccf 	bl	800860c <osDelay>
	receive_response("Activate Context\r\n");
 8001c6e:	4828      	ldr	r0, [pc, #160]	@ (8001d10 <activate_context+0xc8>)
 8001c70:	f7ff fc40 	bl	80014f4 <receive_response>
 8001c74:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001c76:	2400      	movs	r4, #0
		check_activate_context();
 8001c78:	f7ff ffd2 	bl	8001c20 <check_activate_context>
		osDelay(300);
 8001c7c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c80:	f006 fcc4 	bl	800860c <osDelay>
		if(count_check >= 50){
 8001c84:	3d01      	subs	r5, #1
 8001c86:	d021      	beq.n	8001ccc <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 8001c88:	4639      	mov	r1, r7
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f00a fa5e 	bl	800c14c <strstr>
 8001c90:	b340      	cbz	r0, 8001ce4 <activate_context+0x9c>
			osDelay(500);
 8001c92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c96:	f006 fcb9 	bl	800860c <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c9a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f00a fa03 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ca6:	f7ff fc0b 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001caa:	4668      	mov	r0, sp
 8001cac:	f7ff fbf8 	bl	80014a0 <send_AT_command>
			count_error++;
 8001cb0:	3401      	adds	r4, #1
			osDelay(200);
 8001cb2:	20c8      	movs	r0, #200	@ 0xc8
 8001cb4:	f006 fcaa 	bl	800860c <osDelay>
		if(count_error >= 3){
 8001cb8:	2c03      	cmp	r4, #3
 8001cba:	d113      	bne.n	8001ce4 <activate_context+0x9c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cbc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4812      	ldr	r0, [pc, #72]	@ (8001d0c <activate_context+0xc4>)
 8001cc4:	f00a f9f2 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001cc8:	f7ff fbfa 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ccc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	480e      	ldr	r0, [pc, #56]	@ (8001d0c <activate_context+0xc4>)
 8001cd4:	f00a f9ea 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001cd8:	f7ff fbf2 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001cdc:	2001      	movs	r0, #1
 8001cde:	b020      	add	sp, #128	@ 0x80
 8001ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	f7ff fc05 	bl	80014f4 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001cea:	490a      	ldr	r1, [pc, #40]	@ (8001d14 <activate_context+0xcc>)
 8001cec:	4630      	mov	r0, r6
 8001cee:	f00a fa2d 	bl	800c14c <strstr>
		if(first_pointer != NULL){
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d0c0      	beq.n	8001c78 <activate_context+0x30>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001cf6:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <activate_context+0xcc>)
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	f00a fa27 	bl	800c14c <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d0ba      	beq.n	8001c78 <activate_context+0x30>
 8001d02:	e7e3      	b.n	8001ccc <activate_context+0x84>
 8001d04:	08010853 	.word	0x08010853
 8001d08:	08010861 	.word	0x08010861
 8001d0c:	200024e0 	.word	0x200024e0
 8001d10:	0801086d 	.word	0x0801086d
 8001d14:	080109a2 	.word	0x080109a2
 8001d18:	08010867 	.word	0x08010867

08001d1c <deactivate_context>:

int deactivate_context(int context_id){
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	4604      	mov	r4, r0
 8001d20:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001d22:	2064      	movs	r0, #100	@ 0x64
 8001d24:	f006 fc72 	bl	800860c <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001d28:	4623      	mov	r3, r4
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001da0 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d2c:	4e1d      	ldr	r6, [pc, #116]	@ (8001da4 <deactivate_context+0x88>)
 8001d2e:	4d1e      	ldr	r5, [pc, #120]	@ (8001da8 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001d30:	4f1e      	ldr	r7, [pc, #120]	@ (8001dac <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	4668      	mov	r0, sp
 8001d36:	f00a f8bd 	bl	800beb4 <sniprintf>
	send_AT_command((char*)command);
 8001d3a:	4668      	mov	r0, sp
 8001d3c:	f7ff fbb0 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d40:	2415      	movs	r4, #21
 8001d42:	4631      	mov	r1, r6
 8001d44:	4628      	mov	r0, r5
 8001d46:	f00a fa01 	bl	800c14c <strstr>
 8001d4a:	b178      	cbz	r0, 8001d6c <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001d4c:	4817      	ldr	r0, [pc, #92]	@ (8001dac <deactivate_context+0x90>)
 8001d4e:	f7ff fbd1 	bl	80014f4 <receive_response>
	osDelay(100);
 8001d52:	2064      	movs	r0, #100	@ 0x64
 8001d54:	f006 fc5a 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d58:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4812      	ldr	r0, [pc, #72]	@ (8001da8 <deactivate_context+0x8c>)
 8001d60:	f00a f9a4 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d64:	f7ff fbac 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e010      	b.n	8001d8e <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	f7ff fbc1 	bl	80014f4 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001d72:	490f      	ldr	r1, [pc, #60]	@ (8001db0 <deactivate_context+0x94>)
 8001d74:	4628      	mov	r0, r5
 8001d76:	f00a f9e9 	bl	800c14c <strstr>
 8001d7a:	b150      	cbz	r0, 8001d92 <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d7c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d80:	2100      	movs	r1, #0
 8001d82:	4809      	ldr	r0, [pc, #36]	@ (8001da8 <deactivate_context+0x8c>)
 8001d84:	f00a f992 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001d88:	f7ff fb9a 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001d8c:	2000      	movs	r0, #0
}
 8001d8e:	b021      	add	sp, #132	@ 0x84
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 8001d92:	3c01      	subs	r4, #1
 8001d94:	d0f2      	beq.n	8001d7c <deactivate_context+0x60>
		osDelay(1200);
 8001d96:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001d9a:	f006 fc37 	bl	800860c <osDelay>
 8001d9e:	e7d0      	b.n	8001d42 <deactivate_context+0x26>
 8001da0:	08010880 	.word	0x08010880
 8001da4:	080109a2 	.word	0x080109a2
 8001da8:	200024e0 	.word	0x200024e0
 8001dac:	08010890 	.word	0x08010890
 8001db0:	08010861 	.word	0x08010861

08001db4 <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db8:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001dba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dbe:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001dc2:	9303      	str	r3, [sp, #12]
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <open_socket_service+0x144>)
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8001efc <open_socket_service+0x148>)
 8001dca:	4a4d      	ldr	r2, [pc, #308]	@ (8001f00 <open_socket_service+0x14c>)
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001dcc:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001f18 <open_socket_service+0x164>
		if (strstr((char *) response, "ERROR") != NULL){
 8001dd0:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8001f28 <open_socket_service+0x174>
 8001dd4:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8001f0c <open_socket_service+0x158>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001dd8:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001ddc:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001dde:	4603      	mov	r3, r0
 8001de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de4:	a826      	add	r0, sp, #152	@ 0x98
 8001de6:	f00a f865 	bl	800beb4 <sniprintf>
	send_AT_command((char *) command);
 8001dea:	a826      	add	r0, sp, #152	@ 0x98
 8001dec:	f7ff fb58 	bl	80014a0 <send_AT_command>
	osDelay(100);
 8001df0:	2064      	movs	r0, #100	@ 0x64
 8001df2:	f006 fc0b 	bl	800860c <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 8001df6:	4943      	ldr	r1, [pc, #268]	@ (8001f04 <open_socket_service+0x150>)
 8001df8:	4843      	ldr	r0, [pc, #268]	@ (8001f08 <open_socket_service+0x154>)
 8001dfa:	f003 fa4d 	bl	8005298 <uart_transmit_string>
	int count_error = 0;
 8001dfe:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001e00:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 8001e02:	4648      	mov	r0, r9
 8001e04:	f7ff fb76 	bl	80014f4 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001e08:	4651      	mov	r1, sl
 8001e0a:	4640      	mov	r0, r8
 8001e0c:	f00a f99e 	bl	800c14c <strstr>
 8001e10:	b1e8      	cbz	r0, 8001e4e <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e12:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e16:	2100      	movs	r1, #0
 8001e18:	4640      	mov	r0, r8
 8001e1a:	f00a f947 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001e1e:	f7ff fb4f 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 8001e22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e26:	f006 fbf1 	bl	800860c <osDelay>
			count_error++;
 8001e2a:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001e2c:	a826      	add	r0, sp, #152	@ 0x98
 8001e2e:	f7ff fb37 	bl	80014a0 <send_AT_command>
		}
		if(count_error >= 6){
 8001e32:	2f06      	cmp	r7, #6
 8001e34:	d10b      	bne.n	8001e4e <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e36:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e3a:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e3c:	4833      	ldr	r0, [pc, #204]	@ (8001f0c <open_socket_service+0x158>)
 8001e3e:	f00a f935 	bl	800c0ac <memset>
				SIM_UART_ReInitializeRxDMA();
 8001e42:	f7ff fb3d 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001e46:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001e48:	b066      	add	sp, #408	@ 0x198
 8001e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001e4e:	4930      	ldr	r1, [pc, #192]	@ (8001f10 <open_socket_service+0x15c>)
 8001e50:	4640      	mov	r0, r8
 8001e52:	f00a f97b 	bl	800c14c <strstr>
		elapsed_time_ms++;
 8001e56:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001e58:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <open_socket_service+0x160>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001e5a:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001e5c:	4633      	mov	r3, r6
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	a806      	add	r0, sp, #24
 8001e62:	f00a f827 	bl	800beb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001e66:	4828      	ldr	r0, [pc, #160]	@ (8001f08 <open_socket_service+0x154>)
 8001e68:	a906      	add	r1, sp, #24
 8001e6a:	f003 fa15 	bl	8005298 <uart_transmit_string>
		osDelay(1000);
 8001e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e72:	f006 fbcb 	bl	800860c <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001e76:	b90d      	cbnz	r5, 8001e7c <open_socket_service+0xc8>
 8001e78:	2e32      	cmp	r6, #50	@ 0x32
 8001e7a:	d1c2      	bne.n	8001e02 <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 8001e7c:	4826      	ldr	r0, [pc, #152]	@ (8001f18 <open_socket_service+0x164>)
 8001e7e:	f7ff fb39 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e82:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e86:	2100      	movs	r1, #0
 8001e88:	4820      	ldr	r0, [pc, #128]	@ (8001f0c <open_socket_service+0x158>)
 8001e8a:	f00a f90f 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e8e:	f7ff fb17 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001e92:	2d00      	cmp	r5, #0
 8001e94:	d0d7      	beq.n	8001e46 <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001e96:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <open_socket_service+0x168>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e98:	4e21      	ldr	r6, [pc, #132]	@ (8001f20 <open_socket_service+0x16c>)
 8001e9a:	4d1c      	ldr	r5, [pc, #112]	@ (8001f0c <open_socket_service+0x158>)
			receive_response("Check SOCKET CONNECTION\n");
 8001e9c:	4f21      	ldr	r7, [pc, #132]	@ (8001f24 <open_socket_service+0x170>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ea4:	a826      	add	r0, sp, #152	@ 0x98
 8001ea6:	f00a f805 	bl	800beb4 <sniprintf>
		send_AT_command((char*) command);
 8001eaa:	a826      	add	r0, sp, #152	@ 0x98
 8001eac:	f7ff faf8 	bl	80014a0 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001eb0:	4631      	mov	r1, r6
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f00a f94a 	bl	800c14c <strstr>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	b160      	cbz	r0, 8001ed6 <open_socket_service+0x122>
		osDelay(100);
 8001ebc:	2064      	movs	r0, #100	@ 0x64
 8001ebe:	f006 fba5 	bl	800860c <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ec2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4810      	ldr	r0, [pc, #64]	@ (8001f0c <open_socket_service+0x158>)
 8001eca:	f00a f8ef 	bl	800c0ac <memset>
		SIM_UART_ReInitializeRxDMA();
 8001ece:	f7ff faf7 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	e7b8      	b.n	8001e48 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	f7ff fb0c 	bl	80014f4 <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001edc:	4912      	ldr	r1, [pc, #72]	@ (8001f28 <open_socket_service+0x174>)
 8001ede:	4628      	mov	r0, r5
 8001ee0:	f00a f934 	bl	800c14c <strstr>
 8001ee4:	b118      	cbz	r0, 8001eee <open_socket_service+0x13a>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ee6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001eea:	4621      	mov	r1, r4
 8001eec:	e7a6      	b.n	8001e3c <open_socket_service+0x88>
			osDelay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f006 fb8b 	bl	800860c <osDelay>
 8001ef6:	e7db      	b.n	8001eb0 <open_socket_service+0xfc>
 8001ef8:	080108c9 	.word	0x080108c9
 8001efc:	080108d6 	.word	0x080108d6
 8001f00:	080108a4 	.word	0x080108a4
 8001f04:	080108da 	.word	0x080108da
 8001f08:	20007164 	.word	0x20007164
 8001f0c:	200024e0 	.word	0x200024e0
 8001f10:	08010909 	.word	0x08010909
 8001f14:	0801037f 	.word	0x0801037f
 8001f18:	080108eb 	.word	0x080108eb
 8001f1c:	08010912 	.word	0x08010912
 8001f20:	080109a2 	.word	0x080109a2
 8001f24:	08010924 	.word	0x08010924
 8001f28:	08010861 	.word	0x08010861

08001f2c <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001f30:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001f32:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001f68 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001f36:	4607      	mov	r7, r0
 8001f38:	460e      	mov	r6, r1
 8001f3a:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001f3c:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001f3e:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001f42:	42b5      	cmp	r5, r6
 8001f44:	db02      	blt.n	8001f4c <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001f46:	4620      	mov	r0, r4
 8001f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001f4c:	3402      	adds	r4, #2
 8001f4e:	4544      	cmp	r4, r8
 8001f50:	da07      	bge.n	8001f62 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001f52:	5d7a      	ldrb	r2, [r7, r5]
 8001f54:	4651      	mov	r1, sl
 8001f56:	eb09 0004 	add.w	r0, r9, r4
 8001f5a:	f009 ffdf 	bl	800bf1c <siprintf>
    for (int i = 0; i < length; i++) {
 8001f5e:	3501      	adds	r5, #1
 8001f60:	e7ef      	b.n	8001f42 <formatToHexString+0x16>
            return -1;
 8001f62:	f04f 34ff 	mov.w	r4, #4294967295
 8001f66:	e7ee      	b.n	8001f46 <formatToHexString+0x1a>
 8001f68:	08011c38 	.word	0x08011c38

08001f6c <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001f6e:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001f70:	460c      	mov	r4, r1
 8001f72:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4613      	mov	r3, r2
 8001f78:	460a      	mov	r2, r1
 8001f7a:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001f7c:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001f7e:	f7ff ffd5 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001f82:	462b      	mov	r3, r5
 8001f84:	9000      	str	r0, [sp, #0]
 8001f86:	4622      	mov	r2, r4
 8001f88:	2102      	movs	r1, #2
 8001f8a:	1c70      	adds	r0, r6, #1
 8001f8c:	f7ff ffce 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001f90:	462b      	mov	r3, r5
 8001f92:	9000      	str	r0, [sp, #0]
 8001f94:	4622      	mov	r2, r4
 8001f96:	2102      	movs	r1, #2
 8001f98:	1cf0      	adds	r0, r6, #3
 8001f9a:	f7ff ffc7 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	9000      	str	r0, [sp, #0]
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	2106      	movs	r1, #6
 8001fa6:	1d70      	adds	r0, r6, #5
 8001fa8:	f7ff ffc0 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001fac:	462b      	mov	r3, r5
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	f106 000b 	add.w	r0, r6, #11
 8001fb8:	f7ff ffb8 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	9000      	str	r0, [sp, #0]
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	f106 000d 	add.w	r0, r6, #13
 8001fc8:	f7ff ffb0 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001fcc:	462b      	mov	r3, r5
 8001fce:	9000      	str	r0, [sp, #0]
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	f106 000f 	add.w	r0, r6, #15
 8001fd8:	f7ff ffa8 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001fdc:	462b      	mov	r3, r5
 8001fde:	9000      	str	r0, [sp, #0]
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	2105      	movs	r1, #5
 8001fe4:	f106 0011 	add.w	r0, r6, #17
 8001fe8:	f7ff ffa0 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001fec:	462b      	mov	r3, r5
 8001fee:	9000      	str	r0, [sp, #0]
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	f106 0016 	add.w	r0, r6, #22
 8001ff8:	f7ff ff98 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	9000      	str	r0, [sp, #0]
 8002000:	4622      	mov	r2, r4
 8002002:	2107      	movs	r1, #7
 8002004:	f106 001e 	add.w	r0, r6, #30
 8002008:	f7ff ff90 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 800200c:	462b      	mov	r3, r5
 800200e:	9000      	str	r0, [sp, #0]
 8002010:	4622      	mov	r2, r4
 8002012:	2101      	movs	r1, #1
 8002014:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8002018:	f7ff ff88 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 800201c:	462b      	mov	r3, r5
 800201e:	9000      	str	r0, [sp, #0]
 8002020:	4622      	mov	r2, r4
 8002022:	2114      	movs	r1, #20
 8002024:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8002028:	f7ff ff80 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 800202c:	462b      	mov	r3, r5
 800202e:	9000      	str	r0, [sp, #0]
 8002030:	4622      	mov	r2, r4
 8002032:	2101      	movs	r1, #1
 8002034:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8002038:	f7ff ff78 	bl	8001f2c <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 800203c:	462b      	mov	r3, r5
 800203e:	9000      	str	r0, [sp, #0]
 8002040:	4622      	mov	r2, r4
 8002042:	2101      	movs	r1, #1
 8002044:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8002048:	f7ff ff70 	bl	8001f2c <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 800204c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8002050:	b002      	add	sp, #8
 8002052:	bd70      	pop	{r4, r5, r6, pc}

08002054 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8002054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002058:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 800205a:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 800205c:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 800205e:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8002060:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8002062:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8002064:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8002066:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 800206a:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 800206c:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8002070:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8002072:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8002076:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8002078:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 800207c:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 800207e:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8002082:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8002084:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8002088:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 800208a:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 800208e:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8002090:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8002094:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8002096:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 800209a:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 800209c:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 80020a0:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80020a2:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 80020a6:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80020a8:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 80020ac:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80020ae:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 80020b2:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80020b4:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 80020b8:	9002      	str	r0, [sp, #8]
 80020ba:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80020bc:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 80020be:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 80020c2:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 80020c4:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 80020c6:	460d      	mov	r5, r1
 80020c8:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80020ca:	490f      	ldr	r1, [pc, #60]	@ (8002108 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 80020cc:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80020ce:	2250      	movs	r2, #80	@ 0x50
 80020d0:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 80020d2:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80020d4:	f00a fe3e 	bl	800cd54 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 80020d8:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 80020dc:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 80020de:	9000      	str	r0, [sp, #0]
 80020e0:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80020e4:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80020e8:	4633      	mov	r3, r6
 80020ea:	462a      	mov	r2, r5
 80020ec:	f7ff ff1e 	bl	8001f2c <formatToHexString>
        if (writeIndex < 0) return -1;
 80020f0:	2800      	cmp	r0, #0
 80020f2:	db05      	blt.n	8002100 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 80020f4:	3401      	adds	r4, #1
 80020f6:	2c14      	cmp	r4, #20
 80020f8:	d1f1      	bne.n	80020de <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 80020fa:	b02a      	add	sp, #168	@ 0xa8
 80020fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	e7f9      	b.n	80020fa <generateLocationInfoMessage+0xa6>
 8002106:	bf00      	nop
 8002108:	08010030 	.word	0x08010030

0800210c <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 800210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002110:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8002114:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8002116:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8002118:	ae02      	add	r6, sp, #8
 800211a:	227c      	movs	r2, #124	@ 0x7c
 800211c:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 800211e:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8002120:	a803      	add	r0, sp, #12
 8002122:	6034      	str	r4, [r6, #0]
 8002124:	f009 ffc2 	bl	800c0ac <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	4631      	mov	r1, r6
 800212c:	4638      	mov	r0, r7
 800212e:	f7ff ff1d 	bl	8001f6c <generateRegistrationMessage>
	if (result < 0) {
 8002132:	42a0      	cmp	r0, r4
 8002134:	da05      	bge.n	8002142 <login_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8002136:	4930      	ldr	r1, [pc, #192]	@ (80021f8 <login_to_server+0xec>)
 8002138:	4830      	ldr	r0, [pc, #192]	@ (80021fc <login_to_server+0xf0>)
 800213a:	f003 f8ad 	bl	8005298 <uart_transmit_string>
		return 1;
 800213e:	2001      	movs	r0, #1
 8002140:	e02d      	b.n	800219e <login_to_server+0x92>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8002142:	4a2f      	ldr	r2, [pc, #188]	@ (8002200 <login_to_server+0xf4>)
 8002144:	9600      	str	r6, [sp, #0]
 8002146:	462b      	mov	r3, r5
 8002148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800214c:	a842      	add	r0, sp, #264	@ 0x108
 800214e:	f009 feb1 	bl	800beb4 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8002152:	a842      	add	r0, sp, #264	@ 0x108
 8002154:	f7ff f9a4 	bl	80014a0 <send_AT_command>

//	while(1){
	while(strstr((char *) response, CHECK_RESPONSE ) == NULL){
 8002158:	4f2a      	ldr	r7, [pc, #168]	@ (8002204 <login_to_server+0xf8>)
 800215a:	4e2b      	ldr	r6, [pc, #172]	@ (8002208 <login_to_server+0xfc>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 800215c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8002218 <login_to_server+0x10c>
	while(strstr((char *) response, CHECK_RESPONSE ) == NULL){
 8002160:	4639      	mov	r1, r7
 8002162:	4630      	mov	r0, r6
 8002164:	f009 fff2 	bl	800c14c <strstr>
 8002168:	b170      	cbz	r0, 8002188 <login_to_server+0x7c>
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response("Check sending to server\n");
 800216a:	4828      	ldr	r0, [pc, #160]	@ (800220c <login_to_server+0x100>)
 800216c:	f7ff f9c2 	bl	80014f4 <receive_response>
	osDelay(100);
 8002170:	2064      	movs	r0, #100	@ 0x64
 8002172:	f006 fa4b 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002176:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800217a:	2100      	movs	r1, #0
 800217c:	4822      	ldr	r0, [pc, #136]	@ (8002208 <login_to_server+0xfc>)
 800217e:	f009 ff95 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002182:	f7ff f99d 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002186:	e7da      	b.n	800213e <login_to_server+0x32>
		if(count_check >= 50){
 8002188:	2c32      	cmp	r4, #50	@ 0x32
 800218a:	d10c      	bne.n	80021a6 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800218c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002190:	2100      	movs	r1, #0
 8002192:	481d      	ldr	r0, [pc, #116]	@ (8002208 <login_to_server+0xfc>)
 8002194:	f009 ff8a 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002198:	f7ff f992 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800219c:	2000      	movs	r0, #0
}
 800219e:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 80021a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 80021a6:	4641      	mov	r1, r8
 80021a8:	4630      	mov	r0, r6
 80021aa:	f009 ffcf 	bl	800c14c <strstr>
 80021ae:	4605      	mov	r5, r0
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d1eb      	bne.n	800218c <login_to_server+0x80>
		if (strstr((char*)response, "closed") != NULL) {
 80021b4:	4916      	ldr	r1, [pc, #88]	@ (8002210 <login_to_server+0x104>)
 80021b6:	4630      	mov	r0, r6
 80021b8:	f009 ffc8 	bl	800c14c <strstr>
 80021bc:	b148      	cbz	r0, 80021d2 <login_to_server+0xc6>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80021be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80021c2:	4629      	mov	r1, r5
 80021c4:	4810      	ldr	r0, [pc, #64]	@ (8002208 <login_to_server+0xfc>)
 80021c6:	f009 ff71 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 80021ca:	f7ff f979 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 2;
 80021ce:	2002      	movs	r0, #2
 80021d0:	e7e5      	b.n	800219e <login_to_server+0x92>
		count_check++;
 80021d2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 80021d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <login_to_server+0x108>)
 80021d6:	4623      	mov	r3, r4
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	a822      	add	r0, sp, #136	@ 0x88
 80021dc:	f009 fe6a 	bl	800beb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80021e0:	a922      	add	r1, sp, #136	@ 0x88
 80021e2:	4806      	ldr	r0, [pc, #24]	@ (80021fc <login_to_server+0xf0>)
 80021e4:	f003 f858 	bl	8005298 <uart_transmit_string>
		receive_response("Check sending to server\n");
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <login_to_server+0x100>)
 80021ea:	f7ff f983 	bl	80014f4 <receive_response>
		osDelay(100);
 80021ee:	2064      	movs	r0, #100	@ 0x64
 80021f0:	f006 fa0c 	bl	800860c <osDelay>
 80021f4:	e7b4      	b.n	8002160 <login_to_server+0x54>
 80021f6:	bf00      	nop
 80021f8:	0801093d 	.word	0x0801093d
 80021fc:	20007164 	.word	0x20007164
 8002200:	08010967 	.word	0x08010967
 8002204:	080109a2 	.word	0x080109a2
 8002208:	200024e0 	.word	0x200024e0
 800220c:	08010984 	.word	0x08010984
 8002210:	0801097d 	.word	0x0801097d
 8002214:	0801037f 	.word	0x0801037f
 8002218:	08010861 	.word	0x08010861

0800221c <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 800221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002220:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8002224:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8002226:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8002228:	ae23      	add	r6, sp, #140	@ 0x8c
 800222a:	227f      	movs	r2, #127	@ 0x7f
 800222c:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 800222e:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8002230:	a824      	add	r0, sp, #144	@ 0x90
 8002232:	6034      	str	r4, [r6, #0]
 8002234:	f009 ff3a 	bl	800c0ac <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8002238:	2283      	movs	r2, #131	@ 0x83
 800223a:	4631      	mov	r1, r6
 800223c:	4638      	mov	r0, r7
 800223e:	f7ff ff09 	bl	8002054 <generateLocationInfoMessage>
	if (result < 0) {
 8002242:	42a0      	cmp	r0, r4
 8002244:	da05      	bge.n	8002252 <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8002246:	492e      	ldr	r1, [pc, #184]	@ (8002300 <send_location_to_server+0xe4>)
 8002248:	482e      	ldr	r0, [pc, #184]	@ (8002304 <send_location_to_server+0xe8>)
 800224a:	f003 f825 	bl	8005298 <uart_transmit_string>
		return 1;
 800224e:	2001      	movs	r0, #1
 8002250:	e031      	b.n	80022b6 <send_location_to_server+0x9a>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8002252:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <send_location_to_server+0xec>)
 8002254:	9600      	str	r6, [sp, #0]
 8002256:	462b      	mov	r3, r5
 8002258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800225c:	a844      	add	r0, sp, #272	@ 0x110
 800225e:	f009 fe29 	bl	800beb4 <sniprintf>
	send_AT_command((char*)command);
 8002262:	a844      	add	r0, sp, #272	@ 0x110
 8002264:	f7ff f91c 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, "SEND OK") == NULL){
 8002268:	4f28      	ldr	r7, [pc, #160]	@ (800230c <send_location_to_server+0xf0>)
 800226a:	4e29      	ldr	r6, [pc, #164]	@ (8002310 <send_location_to_server+0xf4>)
		char output_elapsed[128];
		osDelay(100);
		if (strstr((char*)response, "closed") != NULL) {
 800226c:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8002320 <send_location_to_server+0x104>
	while(strstr((char *) response, "SEND OK") == NULL){
 8002270:	4639      	mov	r1, r7
 8002272:	4630      	mov	r0, r6
 8002274:	f009 ff6a 	bl	800c14c <strstr>
 8002278:	4605      	mov	r5, r0
 800227a:	b158      	cbz	r0, 8002294 <send_location_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 800227c:	4825      	ldr	r0, [pc, #148]	@ (8002314 <send_location_to_server+0xf8>)
 800227e:	f7ff f939 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002282:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002286:	2100      	movs	r1, #0
 8002288:	4821      	ldr	r0, [pc, #132]	@ (8002310 <send_location_to_server+0xf4>)
 800228a:	f009 ff0f 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 800228e:	f7ff f917 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002292:	e7dc      	b.n	800224e <send_location_to_server+0x32>
		osDelay(100);
 8002294:	2064      	movs	r0, #100	@ 0x64
 8002296:	f006 f9b9 	bl	800860c <osDelay>
		if (strstr((char*)response, "closed") != NULL) {
 800229a:	4641      	mov	r1, r8
 800229c:	4630      	mov	r0, r6
 800229e:	f009 ff55 	bl	800c14c <strstr>
 80022a2:	b160      	cbz	r0, 80022be <send_location_to_server+0xa2>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022a8:	4629      	mov	r1, r5
 80022aa:	4819      	ldr	r0, [pc, #100]	@ (8002310 <send_location_to_server+0xf4>)
 80022ac:	f009 fefe 	bl	800c0ac <memset>
			 SIM_UART_ReInitializeRxDMA();
 80022b0:	f7ff f906 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 80022b4:	2002      	movs	r0, #2
}
 80022b6:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 80022ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 50){
 80022be:	2c32      	cmp	r4, #50	@ 0x32
 80022c0:	d109      	bne.n	80022d6 <send_location_to_server+0xba>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022c2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022c6:	2100      	movs	r1, #0
 80022c8:	4811      	ldr	r0, [pc, #68]	@ (8002310 <send_location_to_server+0xf4>)
 80022ca:	f009 feef 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 80022ce:	f7ff f8f7 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80022d2:	2000      	movs	r0, #0
 80022d4:	e7ef      	b.n	80022b6 <send_location_to_server+0x9a>
		if (strstr((char*) response, "ERROR") != NULL){
 80022d6:	4910      	ldr	r1, [pc, #64]	@ (8002318 <send_location_to_server+0xfc>)
 80022d8:	4630      	mov	r0, r6
 80022da:	f009 ff37 	bl	800c14c <strstr>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d1ef      	bne.n	80022c2 <send_location_to_server+0xa6>
		count_check++;
 80022e2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <send_location_to_server+0x100>)
 80022e6:	4623      	mov	r3, r4
 80022e8:	2180      	movs	r1, #128	@ 0x80
 80022ea:	a803      	add	r0, sp, #12
 80022ec:	f009 fde2 	bl	800beb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80022f0:	4804      	ldr	r0, [pc, #16]	@ (8002304 <send_location_to_server+0xe8>)
 80022f2:	a903      	add	r1, sp, #12
 80022f4:	f002 ffd0 	bl	8005298 <uart_transmit_string>
		receive_response("Check sending to server\n");
 80022f8:	4806      	ldr	r0, [pc, #24]	@ (8002314 <send_location_to_server+0xf8>)
 80022fa:	f7ff f8fb 	bl	80014f4 <receive_response>
 80022fe:	e7b7      	b.n	8002270 <send_location_to_server+0x54>
 8002300:	0801093d 	.word	0x0801093d
 8002304:	20007164 	.word	0x20007164
 8002308:	08010967 	.word	0x08010967
 800230c:	0801099d 	.word	0x0801099d
 8002310:	200024e0 	.word	0x200024e0
 8002314:	08010984 	.word	0x08010984
 8002318:	08010861 	.word	0x08010861
 800231c:	0801037f 	.word	0x0801037f
 8002320:	0801097d 	.word	0x0801097d

08002324 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8002324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002328:	4604      	mov	r4, r0
 800232a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
	int count_check = 0;
	uint8_t output[128];
	int count_resend = 0;
	int is_sent_ok = 0;

	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 800232e:	4886      	ldr	r0, [pc, #536]	@ (8002548 <check_data_sent_to_server+0x224>)
	while(count_resend < 5){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8002330:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8002590 <check_data_sent_to_server+0x26c>
		send_AT_command((char*)command);
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002334:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8002594 <check_data_sent_to_server+0x270>
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8002338:	f002 ffd2 	bl	80052e0 <Debug_printf>
 800233c:	2501      	movs	r5, #1
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 800233e:	4623      	mov	r3, r4
 8002340:	464a      	mov	r2, r9
 8002342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002346:	a844      	add	r0, sp, #272	@ 0x110
 8002348:	f009 fdb4 	bl	800beb4 <sniprintf>
		send_AT_command((char*)command);
 800234c:	a844      	add	r0, sp, #272	@ 0x110
 800234e:	f7ff f8a7 	bl	80014a0 <send_AT_command>
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002352:	1e69      	subs	r1, r5, #1
 8002354:	4650      	mov	r0, sl
 8002356:	f002 ffc3 	bl	80052e0 <Debug_printf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 800235a:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8002558 <check_data_sent_to_server+0x234>
			char output_elapsed[128];
			if (strstr((char*)response, "ERROR") != NULL){
 800235e:	f8df b238 	ldr.w	fp, [pc, #568]	@ 8002598 <check_data_sent_to_server+0x274>
		while(strstr((char *) response, "+QIRD") == NULL){
 8002362:	2700      	movs	r7, #0
 8002364:	4979      	ldr	r1, [pc, #484]	@ (800254c <check_data_sent_to_server+0x228>)
 8002366:	4640      	mov	r0, r8
 8002368:	f009 fef0 	bl	800c14c <strstr>
 800236c:	4606      	mov	r6, r0
 800236e:	b338      	cbz	r0, 80023c0 <check_data_sent_to_server+0x9c>
			count_resend++;
			count_check = 0;
			osDelay(100);
			continue;
		}
		receive_response("Check received data from server\n");
 8002370:	4877      	ldr	r0, [pc, #476]	@ (8002550 <check_data_sent_to_server+0x22c>)
 8002372:	f7ff f8bf 	bl	80014f4 <receive_response>
		char *token = strstr((char*)response, "+QIRD: ");
 8002376:	4977      	ldr	r1, [pc, #476]	@ (8002554 <check_data_sent_to_server+0x230>)
 8002378:	4877      	ldr	r0, [pc, #476]	@ (8002558 <check_data_sent_to_server+0x234>)
 800237a:	f009 fee7 	bl	800c14c <strstr>
		int value = 0;

		if (token != NULL) {
 800237e:	b110      	cbz	r0, 8002386 <check_data_sent_to_server+0x62>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8002380:	3007      	adds	r0, #7
 8002382:	f007 ff0a 	bl	800a19a <atoi>
		}
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8002386:	4603      	mov	r3, r0
 8002388:	4a74      	ldr	r2, [pc, #464]	@ (800255c <check_data_sent_to_server+0x238>)
		int value = 0;
 800238a:	4606      	mov	r6, r0
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 800238c:	2180      	movs	r1, #128	@ 0x80
 800238e:	a804      	add	r0, sp, #16
 8002390:	f009 fd90 	bl	800beb4 <sniprintf>
		uart_transmit_string(&huart1, output);
 8002394:	4872      	ldr	r0, [pc, #456]	@ (8002560 <check_data_sent_to_server+0x23c>)
 8002396:	a904      	add	r1, sp, #16
 8002398:	f002 ff7e 	bl	8005298 <uart_transmit_string>

		uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 800239c:	4971      	ldr	r1, [pc, #452]	@ (8002564 <check_data_sent_to_server+0x240>)
 800239e:	4870      	ldr	r0, [pc, #448]	@ (8002560 <check_data_sent_to_server+0x23c>)
 80023a0:	f002 ff7a 	bl	8005298 <uart_transmit_string>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80023a8:	2100      	movs	r1, #0
 80023aa:	486b      	ldr	r0, [pc, #428]	@ (8002558 <check_data_sent_to_server+0x234>)
 80023ac:	f009 fe7e 	bl	800c0ac <memset>
		SIM_UART_ReInitializeRxDMA();
 80023b0:	f7ff f886 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 80023b4:	bb1e      	cbnz	r6, 80023fe <check_data_sent_to_server+0xda>
			count_resend++;
			count_check = 0;
			osDelay(100);
 80023b6:	2064      	movs	r0, #100	@ 0x64
 80023b8:	f006 f928 	bl	800860c <osDelay>
		is_sent_ok = 1;
 80023bc:	2601      	movs	r6, #1
 80023be:	e018      	b.n	80023f2 <check_data_sent_to_server+0xce>
			if (strstr((char*)response, "ERROR") != NULL){
 80023c0:	4659      	mov	r1, fp
 80023c2:	4640      	mov	r0, r8
 80023c4:	f009 fec2 	bl	800c14c <strstr>
 80023c8:	4601      	mov	r1, r0
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d066      	beq.n	800249c <check_data_sent_to_server+0x178>
				Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 80023ce:	4866      	ldr	r0, [pc, #408]	@ (8002568 <check_data_sent_to_server+0x244>)
 80023d0:	f002 ff86 	bl	80052e0 <Debug_printf>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80023d8:	4631      	mov	r1, r6
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023da:	485f      	ldr	r0, [pc, #380]	@ (8002558 <check_data_sent_to_server+0x234>)
 80023dc:	f009 fe66 	bl	800c0ac <memset>
				SIM_UART_ReInitializeRxDMA();
 80023e0:	f7ff f86e 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
				send_AT_command((char*)command);
 80023e4:	a844      	add	r0, sp, #272	@ 0x110
 80023e6:	f7ff f85b 	bl	80014a0 <send_AT_command>
			osDelay(100);
 80023ea:	2064      	movs	r0, #100	@ 0x64
 80023ec:	f006 f90e 	bl	800860c <osDelay>
			continue;
 80023f0:	2600      	movs	r6, #0
	while(count_resend < 5){
 80023f2:	3501      	adds	r5, #1
 80023f4:	2d06      	cmp	r5, #6
 80023f6:	d1a2      	bne.n	800233e <check_data_sent_to_server+0x1a>
		}
		else break;
	}
//	osDelay(50);
// --------------------------------------------------------------End of  QIRD ------------------------------------------------------------
	if(is_sent_ok == 1){
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	f000 80a1 	beq.w	8002540 <check_data_sent_to_server+0x21c>
//		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
//		SIM_UART_ReInitializeRxDMA();
	//Reset value
		count_check = 0;
		count_resend = 0;
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 80023fe:	485b      	ldr	r0, [pc, #364]	@ (800256c <check_data_sent_to_server+0x248>)

		while(count_resend < 3){
			is_sent_ok = 1;
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8002400:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 800259c <check_data_sent_to_server+0x278>
			send_AT_command((char*)command);
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002404:	f8df a198 	ldr.w	sl, [pc, #408]	@ 80025a0 <check_data_sent_to_server+0x27c>
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 8002408:	f002 ff6a 	bl	80052e0 <Debug_printf>
		count_resend = 0;
 800240c:	2500      	movs	r5, #0
		count_check = 0;
 800240e:	462f      	mov	r7, r5
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8002410:	4623      	mov	r3, r4
 8002412:	464a      	mov	r2, r9
 8002414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002418:	a844      	add	r0, sp, #272	@ 0x110
 800241a:	f009 fd4b 	bl	800beb4 <sniprintf>
			send_AT_command((char*)command);
 800241e:	a844      	add	r0, sp, #272	@ 0x110
 8002420:	f7ff f83e 	bl	80014a0 <send_AT_command>
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002424:	4629      	mov	r1, r5
 8002426:	4650      	mov	r0, sl
 8002428:	f002 ff5a 	bl	80052e0 <Debug_printf>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800242c:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8002558 <check_data_sent_to_server+0x234>
					SIM_UART_ReInitializeRxDMA();
					send_AT_command((char*)command);
					is_sent_ok = 0;
					break;
				}
				if (strstr((char*) response, "ERROR") != NULL){
 8002430:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8002598 <check_data_sent_to_server+0x274>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002434:	494e      	ldr	r1, [pc, #312]	@ (8002570 <check_data_sent_to_server+0x24c>)
 8002436:	4640      	mov	r0, r8
 8002438:	f009 fe88 	bl	800c14c <strstr>
 800243c:	4606      	mov	r6, r0
 800243e:	2800      	cmp	r0, #0
 8002440:	d043      	beq.n	80024ca <check_data_sent_to_server+0x1a6>

			if(is_sent_ok == 0) {
				count_resend++;
				continue;
			}
			receive_response("Check sending to server\n");
 8002442:	484c      	ldr	r0, [pc, #304]	@ (8002574 <check_data_sent_to_server+0x250>)
			int sentBytes, ackedBytes, unackedBytes;

			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002444:	ae24      	add	r6, sp, #144	@ 0x90
			receive_response("Check sending to server\n");
 8002446:	f7ff f855 	bl	80014f4 <receive_response>
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 800244a:	494b      	ldr	r1, [pc, #300]	@ (8002578 <check_data_sent_to_server+0x254>)
 800244c:	4842      	ldr	r0, [pc, #264]	@ (8002558 <check_data_sent_to_server+0x234>)
 800244e:	9600      	str	r6, [sp, #0]
 8002450:	ab03      	add	r3, sp, #12
 8002452:	aa02      	add	r2, sp, #8
 8002454:	f009 fd82 	bl	800bf5c <siscanf>
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8002458:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800245a:	4a48      	ldr	r2, [pc, #288]	@ (800257c <check_data_sent_to_server+0x258>)
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 800245c:	4680      	mov	r8, r0
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	a804      	add	r0, sp, #16
 8002462:	f009 fd27 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, output);
 8002466:	483e      	ldr	r0, [pc, #248]	@ (8002560 <check_data_sent_to_server+0x23c>)
 8002468:	a904      	add	r1, sp, #16
 800246a:	f002 ff15 	bl	8005298 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800246e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002472:	2100      	movs	r1, #0
 8002474:	4838      	ldr	r0, [pc, #224]	@ (8002558 <check_data_sent_to_server+0x234>)
 8002476:	f009 fe19 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 800247a:	f7ff f821 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			if (result == 3) {
 800247e:	f1b8 0f03 	cmp.w	r8, #3
 8002482:	d15b      	bne.n	800253c <check_data_sent_to_server+0x218>
				if (unackedBytes > 0) {
 8002484:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002486:	2b00      	cmp	r3, #0
 8002488:	dc30      	bgt.n	80024ec <check_data_sent_to_server+0x1c8>
					count_resend++;
					is_sent_ok = 0;
				}
				else{
					Debug_printf("NO DATA LOSS\n");
 800248a:	483d      	ldr	r0, [pc, #244]	@ (8002580 <check_data_sent_to_server+0x25c>)
 800248c:	f002 ff28 	bl	80052e0 <Debug_printf>
					break;
 8002490:	2601      	movs	r6, #1
	}
	else{
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
	}
	return is_sent_ok;
}
 8002492:	4630      	mov	r0, r6
 8002494:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8002498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 10){
 800249c:	2f0a      	cmp	r7, #10
 800249e:	d102      	bne.n	80024a6 <check_data_sent_to_server+0x182>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024a4:	e799      	b.n	80023da <check_data_sent_to_server+0xb6>
			osDelay(100);
 80024a6:	2064      	movs	r0, #100	@ 0x64
 80024a8:	f006 f8b0 	bl	800860c <osDelay>
			snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 80024ac:	463b      	mov	r3, r7
 80024ae:	4a35      	ldr	r2, [pc, #212]	@ (8002584 <check_data_sent_to_server+0x260>)
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	a824      	add	r0, sp, #144	@ 0x90
 80024b4:	f009 fcfe 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80024b8:	4829      	ldr	r0, [pc, #164]	@ (8002560 <check_data_sent_to_server+0x23c>)
 80024ba:	a924      	add	r1, sp, #144	@ 0x90
 80024bc:	f002 feec 	bl	8005298 <uart_transmit_string>
			receive_response("Check received data from server\n");
 80024c0:	4823      	ldr	r0, [pc, #140]	@ (8002550 <check_data_sent_to_server+0x22c>)
			count_check++;
 80024c2:	3701      	adds	r7, #1
			receive_response("Check received data from server\n");
 80024c4:	f7ff f816 	bl	80014f4 <receive_response>
 80024c8:	e74c      	b.n	8002364 <check_data_sent_to_server+0x40>
				osDelay(100);
 80024ca:	2064      	movs	r0, #100	@ 0x64
 80024cc:	f006 f89e 	bl	800860c <osDelay>
				if(count_check >= 50){
 80024d0:	2f31      	cmp	r7, #49	@ 0x31
 80024d2:	dd10      	ble.n	80024f6 <check_data_sent_to_server+0x1d2>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024d8:	4631      	mov	r1, r6
 80024da:	481f      	ldr	r0, [pc, #124]	@ (8002558 <check_data_sent_to_server+0x234>)
 80024dc:	f009 fde6 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 80024e0:	f7fe ffee 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 80024e4:	a844      	add	r0, sp, #272	@ 0x110
 80024e6:	f7fe ffdb 	bl	80014a0 <send_AT_command>
					count_check = 0;
 80024ea:	4637      	mov	r7, r6
					count_resend++;
 80024ec:	3501      	adds	r5, #1
					is_sent_ok = 0;
 80024ee:	2600      	movs	r6, #0
		while(count_resend < 3){
 80024f0:	2d03      	cmp	r5, #3
 80024f2:	d18d      	bne.n	8002410 <check_data_sent_to_server+0xec>
 80024f4:	e7cd      	b.n	8002492 <check_data_sent_to_server+0x16e>
				if (strstr((char*) response, "ERROR") != NULL){
 80024f6:	4659      	mov	r1, fp
 80024f8:	4640      	mov	r0, r8
 80024fa:	f009 fe27 	bl	800c14c <strstr>
 80024fe:	b170      	cbz	r0, 800251e <check_data_sent_to_server+0x1fa>
					Debug_printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 8002500:	4821      	ldr	r0, [pc, #132]	@ (8002588 <check_data_sent_to_server+0x264>)
 8002502:	f002 feed 	bl	80052e0 <Debug_printf>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002506:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800250a:	4631      	mov	r1, r6
 800250c:	4812      	ldr	r0, [pc, #72]	@ (8002558 <check_data_sent_to_server+0x234>)
 800250e:	f009 fdcd 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002512:	f7fe ffd5 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 8002516:	a844      	add	r0, sp, #272	@ 0x110
 8002518:	f7fe ffc2 	bl	80014a0 <send_AT_command>
					break;
 800251c:	e7e6      	b.n	80024ec <check_data_sent_to_server+0x1c8>
				count_check++;
 800251e:	3701      	adds	r7, #1
				snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002520:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <check_data_sent_to_server+0x260>)
 8002522:	463b      	mov	r3, r7
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	a824      	add	r0, sp, #144	@ 0x90
 8002528:	f009 fcc4 	bl	800beb4 <sniprintf>
				uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <check_data_sent_to_server+0x23c>)
 800252e:	a924      	add	r1, sp, #144	@ 0x90
 8002530:	f002 feb2 	bl	8005298 <uart_transmit_string>
				receive_response("Check sending to server\n");
 8002534:	480f      	ldr	r0, [pc, #60]	@ (8002574 <check_data_sent_to_server+0x250>)
 8002536:	f7fe ffdd 	bl	80014f4 <receive_response>
 800253a:	e77b      	b.n	8002434 <check_data_sent_to_server+0x110>
 800253c:	2601      	movs	r6, #1
 800253e:	e7d7      	b.n	80024f0 <check_data_sent_to_server+0x1cc>
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
 8002540:	4812      	ldr	r0, [pc, #72]	@ (800258c <check_data_sent_to_server+0x268>)
 8002542:	f002 fecd 	bl	80052e0 <Debug_printf>
	return is_sent_ok;
 8002546:	e7a4      	b.n	8002492 <check_data_sent_to_server+0x16e>
 8002548:	080109a5 	.word	0x080109a5
 800254c:	08010ab7 	.word	0x08010ab7
 8002550:	08010a96 	.word	0x08010a96
 8002554:	08010abd 	.word	0x08010abd
 8002558:	200024e0 	.word	0x200024e0
 800255c:	08010ac5 	.word	0x08010ac5
 8002560:	20007164 	.word	0x20007164
 8002564:	08010ae8 	.word	0x08010ae8
 8002568:	08010a37 	.word	0x08010a37
 800256c:	08010b09 	.word	0x08010b09
 8002570:	080109a2 	.word	0x080109a2
 8002574:	08010984 	.word	0x08010984
 8002578:	08010bd7 	.word	0x08010bd7
 800257c:	08010bf7 	.word	0x08010bf7
 8002580:	08010c10 	.word	0x08010c10
 8002584:	08010a77 	.word	0x08010a77
 8002588:	08010b99 	.word	0x08010b99
 800258c:	08010c1e 	.word	0x08010c1e
 8002590:	080109de 	.word	0x080109de
 8002594:	080109ef 	.word	0x080109ef
 8002598:	08010861 	.word	0x08010861
 800259c:	08010b40 	.word	0x08010b40
 80025a0:	08010b51 	.word	0x08010b51

080025a4 <close_connection>:


int close_connection(int connect_id){
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b0c1      	sub	sp, #260	@ 0x104
 80025a8:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80025aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <close_connection+0x80>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80025ac:	4e1e      	ldr	r6, [pc, #120]	@ (8002628 <close_connection+0x84>)
 80025ae:	4d1f      	ldr	r5, [pc, #124]	@ (800262c <close_connection+0x88>)
		receive_response("Check CLOSING to server\n");
 80025b0:	4f1f      	ldr	r7, [pc, #124]	@ (8002630 <close_connection+0x8c>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80025b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b6:	4668      	mov	r0, sp
 80025b8:	f009 fc7c 	bl	800beb4 <sniprintf>
	send_AT_command((char*)command);
 80025bc:	4668      	mov	r0, sp
 80025be:	f7fe ff6f 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80025c2:	2406      	movs	r4, #6
 80025c4:	4631      	mov	r1, r6
 80025c6:	4628      	mov	r0, r5
 80025c8:	f009 fdc0 	bl	800c14c <strstr>
 80025cc:	b178      	cbz	r0, 80025ee <close_connection+0x4a>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80025ce:	4818      	ldr	r0, [pc, #96]	@ (8002630 <close_connection+0x8c>)
 80025d0:	f7fe ff90 	bl	80014f4 <receive_response>
	osDelay(100);
 80025d4:	2064      	movs	r0, #100	@ 0x64
 80025d6:	f006 f819 	bl	800860c <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025de:	2100      	movs	r1, #0
 80025e0:	4812      	ldr	r0, [pc, #72]	@ (800262c <close_connection+0x88>)
 80025e2:	f009 fd63 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 80025e6:	f7fe ff6b 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e010      	b.n	8002610 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 80025ee:	4638      	mov	r0, r7
 80025f0:	f7fe ff80 	bl	80014f4 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 80025f4:	490f      	ldr	r1, [pc, #60]	@ (8002634 <close_connection+0x90>)
 80025f6:	4628      	mov	r0, r5
 80025f8:	f009 fda8 	bl	800c14c <strstr>
 80025fc:	b150      	cbz	r0, 8002614 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002602:	2100      	movs	r1, #0
 8002604:	4809      	ldr	r0, [pc, #36]	@ (800262c <close_connection+0x88>)
 8002606:	f009 fd51 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 800260a:	f7fe ff59 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800260e:	2000      	movs	r0, #0
}
 8002610:	b041      	add	sp, #260	@ 0x104
 8002612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 5){
 8002614:	3c01      	subs	r4, #1
 8002616:	d0f2      	beq.n	80025fe <close_connection+0x5a>
		osDelay(1000);
 8002618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800261c:	f005 fff6 	bl	800860c <osDelay>
		count_check++;
 8002620:	e7d0      	b.n	80025c4 <close_connection+0x20>
 8002622:	bf00      	nop
 8002624:	08010c65 	.word	0x08010c65
 8002628:	080109a2 	.word	0x080109a2
 800262c:	200024e0 	.word	0x200024e0
 8002630:	08010c75 	.word	0x08010c75
 8002634:	08010861 	.word	0x08010861

08002638 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002638:	b510      	push	{r4, lr}
 800263a:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 800263c:	ab0d      	add	r3, sp, #52	@ 0x34
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	ab0c      	add	r3, sp, #48	@ 0x30
 8002642:	9303      	str	r3, [sp, #12]
 8002644:	ab0b      	add	r3, sp, #44	@ 0x2c
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	ab0a      	add	r3, sp, #40	@ 0x28
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	ab09      	add	r3, sp, #36	@ 0x24
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	aa07      	add	r2, sp, #28
 8002652:	ab08      	add	r3, sp, #32
 8002654:	4925      	ldr	r1, [pc, #148]	@ (80026ec <extract_time_CCLK+0xb4>)
 8002656:	f009 fc81 	bl	800bf5c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 800265a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800265c:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 800265e:	2a17      	cmp	r2, #23
		hour -= 24;
 8002660:	bfc3      	ittte	gt
 8002662:	3b17      	subgt	r3, #23
 8002664:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 8002666:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002668:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 800266a:	bfc4      	itt	gt
 800266c:	3301      	addgt	r3, #1
 800266e:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002670:	9b07      	ldr	r3, [sp, #28]
 8002672:	2b17      	cmp	r3, #23
 8002674:	dd37      	ble.n	80026e6 <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 8002676:	4c1e      	ldr	r4, [pc, #120]	@ (80026f0 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002678:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 800267a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 800267c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 800267e:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002680:	9b08      	ldr	r3, [sp, #32]
 8002682:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 8002684:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 8002686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002688:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 800268a:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 800268c:	b2c9      	uxtb	r1, r1
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 8002692:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 8002694:	f000 ffb0 	bl	80035f8 <set_time>
	set_date(year, month, day);
 8002698:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 800269c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80026a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80026a4:	f000 ffc6 	bl	8003634 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80026a8:	68a3      	ldr	r3, [r4, #8]
 80026aa:	9304      	str	r3, [sp, #16]
 80026ac:	6863      	ldr	r3, [r4, #4]
 80026ae:	9303      	str	r3, [sp, #12]
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	6963      	ldr	r3, [r4, #20]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	69a3      	ldr	r3, [r4, #24]
 80026be:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <extract_time_CCLK+0xbc>)
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	a80e      	add	r0, sp, #56	@ 0x38
 80026c4:	f009 fbf6 	bl	800beb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80026c8:	490b      	ldr	r1, [pc, #44]	@ (80026f8 <extract_time_CCLK+0xc0>)
 80026ca:	480c      	ldr	r0, [pc, #48]	@ (80026fc <extract_time_CCLK+0xc4>)
 80026cc:	f002 fde4 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80026d0:	490b      	ldr	r1, [pc, #44]	@ (8002700 <extract_time_CCLK+0xc8>)
 80026d2:	480a      	ldr	r0, [pc, #40]	@ (80026fc <extract_time_CCLK+0xc4>)
 80026d4:	f002 fde0 	bl	8005298 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80026d8:	4808      	ldr	r0, [pc, #32]	@ (80026fc <extract_time_CCLK+0xc4>)
 80026da:	a90e      	add	r1, sp, #56	@ 0x38
 80026dc:	f002 fddc 	bl	8005298 <uart_transmit_string>
	return 1;
 80026e0:	2001      	movs	r0, #1
}
 80026e2:	b02e      	add	sp, #184	@ 0xb8
 80026e4:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80026e6:	2000      	movs	r0, #0
 80026e8:	e7fb      	b.n	80026e2 <extract_time_CCLK+0xaa>
 80026ea:	bf00      	nop
 80026ec:	08010c8e 	.word	0x08010c8e
 80026f0:	20002228 	.word	0x20002228
 80026f4:	08010cbc 	.word	0x08010cbc
 80026f8:	08010cf6 	.word	0x08010cf6
 80026fc:	20007164 	.word	0x20007164
 8002700:	080115a9 	.word	0x080115a9

08002704 <getCurrentTime>:


int getCurrentTime(){
 8002704:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8002706:	4818      	ldr	r0, [pc, #96]	@ (8002768 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002708:	4d18      	ldr	r5, [pc, #96]	@ (800276c <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 800270a:	4e19      	ldr	r6, [pc, #100]	@ (8002770 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 800270c:	f7fe fec8 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002710:	2404      	movs	r4, #4
 8002712:	4818      	ldr	r0, [pc, #96]	@ (8002774 <getCurrentTime+0x70>)
 8002714:	4629      	mov	r1, r5
 8002716:	f009 fd19 	bl	800c14c <strstr>
 800271a:	b190      	cbz	r0, 8002742 <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 800271c:	4814      	ldr	r0, [pc, #80]	@ (8002770 <getCurrentTime+0x6c>)
 800271e:	f7fe fee9 	bl	80014f4 <receive_response>
	int result_extract = extract_time_CCLK(response);
 8002722:	4814      	ldr	r0, [pc, #80]	@ (8002774 <getCurrentTime+0x70>)
 8002724:	f7ff ff88 	bl	8002638 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002728:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 800272c:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800272e:	2100      	movs	r1, #0
 8002730:	4810      	ldr	r0, [pc, #64]	@ (8002774 <getCurrentTime+0x70>)
 8002732:	f009 fcbb 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002736:	f7fe fec3 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 800273a:	1e20      	subs	r0, r4, #0
 800273c:	bf18      	it	ne
 800273e:	2001      	movne	r0, #1
 8002740:	e00a      	b.n	8002758 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 8002742:	3c01      	subs	r4, #1
 8002744:	d109      	bne.n	800275a <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002746:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800274a:	4621      	mov	r1, r4
 800274c:	4809      	ldr	r0, [pc, #36]	@ (8002774 <getCurrentTime+0x70>)
 800274e:	f009 fcad 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002752:	f7fe feb5 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002756:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002758:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 800275a:	4630      	mov	r0, r6
 800275c:	f7fe feca 	bl	80014f4 <receive_response>
		osDelay(100);
 8002760:	2064      	movs	r0, #100	@ 0x64
 8002762:	f005 ff53 	bl	800860c <osDelay>
		count_check++;
 8002766:	e7d4      	b.n	8002712 <getCurrentTime+0xe>
 8002768:	08010d01 	.word	0x08010d01
 800276c:	080109a2 	.word	0x080109a2
 8002770:	08010d0c 	.word	0x08010d0c
 8002774:	200024e0 	.word	0x200024e0

08002778 <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 8002778:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800277a:	4963      	ldr	r1, [pc, #396]	@ (8002908 <receiveRMCDataWithAddrGSM+0x190>)
 800277c:	4863      	ldr	r0, [pc, #396]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 800277e:	4d64      	ldr	r5, [pc, #400]	@ (8002910 <receiveRMCDataWithAddrGSM+0x198>)
void receiveRMCDataWithAddrGSM(){
 8002780:	b09b      	sub	sp, #108	@ 0x6c
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8002782:	f002 fd89 	bl	8005298 <uart_transmit_string>
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002786:	4863      	ldr	r0, [pc, #396]	@ (8002914 <receiveRMCDataWithAddrGSM+0x19c>)
 8002788:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800278c:	6800      	ldr	r0, [r0, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	4629      	mov	r1, r5
 8002792:	f005 ffe1 	bl	8008758 <osMessageQueueGet>
	if(status == osOK){
 8002796:	2800      	cmp	r0, #0
 8002798:	f040 80a3 	bne.w	80028e2 <receiveRMCDataWithAddrGSM+0x16a>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 800279c:	495e      	ldr	r1, [pc, #376]	@ (8002918 <receiveRMCDataWithAddrGSM+0x1a0>)
 800279e:	485b      	ldr	r0, [pc, #364]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedDataGSM.address;
 80027a0:	4c5e      	ldr	r4, [pc, #376]	@ (800291c <receiveRMCDataWithAddrGSM+0x1a4>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80027a2:	f002 fd79 	bl	8005298 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80027a6:	495e      	ldr	r1, [pc, #376]	@ (8002920 <receiveRMCDataWithAddrGSM+0x1a8>)
 80027a8:	4858      	ldr	r0, [pc, #352]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
 80027aa:	f002 fd75 	bl	8005298 <uart_transmit_string>
		current_addr_gsm = receivedDataGSM.address;
 80027ae:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80027b0:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	495b      	ldr	r1, [pc, #364]	@ (8002924 <receiveRMCDataWithAddrGSM+0x1ac>)
 80027b6:	f000 fea1 	bl	80034fc <checkAddrExistInQueue>
 80027ba:	b148      	cbz	r0, 80027d0 <receiveRMCDataWithAddrGSM+0x58>
 80027bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002928 <receiveRMCDataWithAddrGSM+0x1b0>)
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	f0c0 8081 	bcc.w	80028ca <receiveRMCDataWithAddrGSM+0x152>
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80027ce:	d87c      	bhi.n	80028ca <receiveRMCDataWithAddrGSM+0x152>
//			current_addr_gsm = receivedDataGSM->address;
			Debug_printf("Saving data to variable to send to the server\n");
 80027d0:	4856      	ldr	r0, [pc, #344]	@ (800292c <receiveRMCDataWithAddrGSM+0x1b4>)
 80027d2:	f002 fd85 	bl	80052e0 <Debug_printf>
			Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	4955      	ldr	r1, [pc, #340]	@ (8002930 <receiveRMCDataWithAddrGSM+0x1b8>)
			Debug_printf("\n---------- Current data accepted at address: %s----------\n", addr_out_gsm);
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 80027da:	4c56      	ldr	r4, [pc, #344]	@ (8002934 <receiveRMCDataWithAddrGSM+0x1bc>)
			Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 80027dc:	2208      	movs	r2, #8
 80027de:	f002 fd6a 	bl	80052b6 <Uint32ToHex>
			Debug_printf("\n---------- Current data accepted at address: %s----------\n", addr_out_gsm);
 80027e2:	4953      	ldr	r1, [pc, #332]	@ (8002930 <receiveRMCDataWithAddrGSM+0x1b8>)
 80027e4:	4854      	ldr	r0, [pc, #336]	@ (8002938 <receiveRMCDataWithAddrGSM+0x1c0>)
 80027e6:	f002 fd7b 	bl	80052e0 <Debug_printf>
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 80027ea:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80027ee:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedDataGSM.rmc.lcation.longitude;
 80027f2:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80027f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedDataGSM.rmc.speed;
 80027fa:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80027fc:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedDataGSM.rmc.course;
 80027fe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002800:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedDataGSM.rmc.lcation.NS;
 8002802:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002806:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedDataGSM.rmc.lcation.EW;
 800280a:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800280e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedDataGSM.rmc.isValid;
 8002812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002814:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedDataGSM.rmc.date.Yr;
 8002816:	69ab      	ldr	r3, [r5, #24]
 8002818:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 800281a:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 800281c:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 800281e:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 8002820:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
 8002822:	692b      	ldr	r3, [r5, #16]
 8002824:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 800282a:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 800282c:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 800282e:	a808      	add	r0, sp, #32
 8002830:	e9cd 2100 	strd	r2, r1, [sp]
 8002834:	4a41      	ldr	r2, [pc, #260]	@ (800293c <receiveRMCDataWithAddrGSM+0x1c4>)
 8002836:	2146      	movs	r1, #70	@ 0x46
 8002838:	f009 fb3c 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800283c:	4833      	ldr	r0, [pc, #204]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
 800283e:	a908      	add	r1, sp, #32
 8002840:	f002 fd2a 	bl	8005298 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 8002844:	69a3      	ldr	r3, [r4, #24]
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	6963      	ldr	r3, [r4, #20]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	6923      	ldr	r3, [r4, #16]
 800284e:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <receiveRMCDataWithAddrGSM+0x1c8>)
 8002850:	2146      	movs	r1, #70	@ 0x46
 8002852:	a808      	add	r0, sp, #32
 8002854:	f009 fb2e 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002858:	482c      	ldr	r0, [pc, #176]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
 800285a:	a908      	add	r1, sp, #32
 800285c:	f002 fd1c 	bl	8005298 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedDataGSM.rmc.lcation.EW);
 8002860:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002864:	9306      	str	r3, [sp, #24]
 8002866:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800286a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800286e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002878:	2146      	movs	r1, #70	@ 0x46
 800287a:	e9cd 2300 	strd	r2, r3, [sp]
 800287e:	a808      	add	r0, sp, #32
 8002880:	4a30      	ldr	r2, [pc, #192]	@ (8002944 <receiveRMCDataWithAddrGSM+0x1cc>)
 8002882:	f009 fb17 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002886:	4821      	ldr	r0, [pc, #132]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
 8002888:	a908      	add	r1, sp, #32
 800288a:	f002 fd05 	bl	8005298 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 800288e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002894:	f7fd fe68 	bl	8000568 <__aeabi_f2d>
 8002898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800289c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800289e:	f7fd fe63 	bl	8000568 <__aeabi_f2d>
 80028a2:	4a29      	ldr	r2, [pc, #164]	@ (8002948 <receiveRMCDataWithAddrGSM+0x1d0>)
 80028a4:	e9cd 0100 	strd	r0, r1, [sp]
 80028a8:	2146      	movs	r1, #70	@ 0x46
 80028aa:	a808      	add	r0, sp, #32
 80028ac:	f009 fb02 	bl	800beb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80028b0:	4816      	ldr	r0, [pc, #88]	@ (800290c <receiveRMCDataWithAddrGSM+0x194>)
 80028b2:	a908      	add	r1, sp, #32
 80028b4:	f002 fcf0 	bl	8005298 <uart_transmit_string>

			received_RMC = 1;
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <receiveRMCDataWithAddrGSM+0x1d4>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
			count_send_gsm++;
 80028be:	4a24      	ldr	r2, [pc, #144]	@ (8002950 <receiveRMCDataWithAddrGSM+0x1d8>)
 80028c0:	6813      	ldr	r3, [r2, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	6013      	str	r3, [r2, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 80028c6:	b01b      	add	sp, #108	@ 0x6c
 80028c8:	bd30      	pop	{r4, r5, pc}
			Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 80028ca:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028cc:	4918      	ldr	r1, [pc, #96]	@ (8002930 <receiveRMCDataWithAddrGSM+0x1b8>)
 80028ce:	2208      	movs	r2, #8
 80028d0:	f002 fcf1 	bl	80052b6 <Uint32ToHex>
			Debug_printf("\n----------------Have sent data in this address successfully already: %s ----------------\n", addr_out_gsm);
 80028d4:	4916      	ldr	r1, [pc, #88]	@ (8002930 <receiveRMCDataWithAddrGSM+0x1b8>)
 80028d6:	481f      	ldr	r0, [pc, #124]	@ (8002954 <receiveRMCDataWithAddrGSM+0x1dc>)
}
 80028d8:	b01b      	add	sp, #108	@ 0x6c
 80028da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			Debug_printf("\n----------------Have sent data in this address successfully already: %s ----------------\n", addr_out_gsm);
 80028de:	f002 bcff 	b.w	80052e0 <Debug_printf>
		Debug_printf("There is no address mail left\n");
 80028e2:	481d      	ldr	r0, [pc, #116]	@ (8002958 <receiveRMCDataWithAddrGSM+0x1e0>)
 80028e4:	f002 fcfc 	bl	80052e0 <Debug_printf>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 80028e8:	4b1c      	ldr	r3, [pc, #112]	@ (800295c <receiveRMCDataWithAddrGSM+0x1e4>)
 80028ea:	681d      	ldr	r5, [r3, #0]
 80028ec:	2d01      	cmp	r5, #1
 80028ee:	d1ea      	bne.n	80028c6 <receiveRMCDataWithAddrGSM+0x14e>
 80028f0:	4c1b      	ldr	r4, [pc, #108]	@ (8002960 <receiveRMCDataWithAddrGSM+0x1e8>)
 80028f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <receiveRMCDataWithAddrGSM+0x1ec>)
 80028f4:	6822      	ldr	r2, [r4, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	d1e4      	bne.n	80028c6 <receiveRMCDataWithAddrGSM+0x14e>
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 80028fc:	481a      	ldr	r0, [pc, #104]	@ (8002968 <receiveRMCDataWithAddrGSM+0x1f0>)
 80028fe:	f002 fcef 	bl	80052e0 <Debug_printf>
			is_keep_up = 1;
 8002902:	6025      	str	r5, [r4, #0]
}
 8002904:	e7df      	b.n	80028c6 <receiveRMCDataWithAddrGSM+0x14e>
 8002906:	bf00      	nop
 8002908:	08010d16 	.word	0x08010d16
 800290c:	20007164 	.word	0x20007164
 8002910:	200021c0 	.word	0x200021c0
 8002914:	20003f88 	.word	0x20003f88
 8002918:	08010d36 	.word	0x08010d36
 800291c:	20002290 	.word	0x20002290
 8002920:	08010d59 	.word	0x08010d59
 8002924:	20002298 	.word	0x20002298
 8002928:	2000228c 	.word	0x2000228c
 800292c:	08010d7d 	.word	0x08010d7d
 8002930:	20002280 	.word	0x20002280
 8002934:	20002228 	.word	0x20002228
 8002938:	08010dac 	.word	0x08010dac
 800293c:	08010de8 	.word	0x08010de8
 8002940:	08010e11 	.word	0x08010e11
 8002944:	08010e3a 	.word	0x08010e3a
 8002948:	08010e6f 	.word	0x08010e6f
 800294c:	200024cc 	.word	0x200024cc
 8002950:	200024a4 	.word	0x200024a4
 8002954:	08010eae 	.word	0x08010eae
 8002958:	08010f09 	.word	0x08010f09
 800295c:	200024b8 	.word	0x200024b8
 8002960:	200024b4 	.word	0x200024b4
 8002964:	200024bc 	.word	0x200024bc
 8002968:	08010f28 	.word	0x08010f28

0800296c <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 800296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int count_resend = 0;
	int count_check = 0;
	int result_send_location = 1;
	while(count_resend < 3){
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002970:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8002ab4 <processUploadDataToServer+0x148>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002974:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8002ab8 <processUploadDataToServer+0x14c>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002978:	f8df a140 	ldr.w	sl, [pc, #320]	@ 8002abc <processUploadDataToServer+0x150>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 800297c:	4607      	mov	r7, r0
 800297e:	2501      	movs	r5, #1
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002980:	f8d8 0000 	ldr.w	r0, [r8]
 8002984:	f005 fe2e 	bl	80085e4 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002988:	f8d8 1000 	ldr.w	r1, [r8]
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 800298c:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 800298e:	4648      	mov	r0, r9
 8002990:	f002 fca6 	bl	80052e0 <Debug_printf>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002994:	1e69      	subs	r1, r5, #1
 8002996:	4650      	mov	r0, sl
 8002998:	f002 fca2 	bl	80052e0 <Debug_printf>
		result_send_location = send_location_to_server(0, location_info);
 800299c:	4639      	mov	r1, r7
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff fc3c 	bl	800221c <send_location_to_server>

		if(result_send_location == 1){
 80029a4:	2801      	cmp	r0, #1
		result_send_location = send_location_to_server(0, location_info);
 80029a6:	4604      	mov	r4, r0
		if(result_send_location == 1){
 80029a8:	d13e      	bne.n	8002a28 <processUploadDataToServer+0xbc>
			uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 80029aa:	4834      	ldr	r0, [pc, #208]	@ (8002a7c <processUploadDataToServer+0x110>)
 80029ac:	4934      	ldr	r1, [pc, #208]	@ (8002a80 <processUploadDataToServer+0x114>)
 80029ae:	f002 fc73 	bl	8005298 <uart_transmit_string>
			int result_check = check_data_sent_to_server(0);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fcb6 	bl	8002324 <check_data_sent_to_server>
			if(result_check){
 80029b8:	b188      	cbz	r0, 80029de <processUploadDataToServer+0x72>
				uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 80029ba:	4932      	ldr	r1, [pc, #200]	@ (8002a84 <processUploadDataToServer+0x118>)
 80029bc:	482f      	ldr	r0, [pc, #188]	@ (8002a7c <processUploadDataToServer+0x110>)
 80029be:	f002 fc6b 	bl	8005298 <uart_transmit_string>
				Debug_printf("\n\n--------------------------------- COUNT SEND GSM: %d -------------------------------------------\n\n", count_send_gsm);
 80029c2:	4b31      	ldr	r3, [pc, #196]	@ (8002a88 <processUploadDataToServer+0x11c>)
 80029c4:	4831      	ldr	r0, [pc, #196]	@ (8002a8c <processUploadDataToServer+0x120>)
 80029c6:	6819      	ldr	r1, [r3, #0]
 80029c8:	f002 fc8a 	bl	80052e0 <Debug_printf>
//				receive_response("Check location report\n");
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029cc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80029d0:	2100      	movs	r1, #0
		}
		count_check++;
		osDelay(100);
	}
	receive_response("First check SIM MODULE\n");
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029d2:	482f      	ldr	r0, [pc, #188]	@ (8002a90 <processUploadDataToServer+0x124>)
 80029d4:	f009 fb6a 	bl	800c0ac <memset>
	SIM_UART_ReInitializeRxDMA();
 80029d8:	f7fe fd72 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
	return 0;
 80029dc:	e035      	b.n	8002a4a <processUploadDataToServer+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 80029de:	492d      	ldr	r1, [pc, #180]	@ (8002a94 <processUploadDataToServer+0x128>)
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 80029e0:	4826      	ldr	r0, [pc, #152]	@ (8002a7c <processUploadDataToServer+0x110>)
 80029e2:	f002 fc59 	bl	8005298 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029e6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80029ea:	2100      	movs	r1, #0
 80029ec:	4828      	ldr	r0, [pc, #160]	@ (8002a90 <processUploadDataToServer+0x124>)
 80029ee:	f009 fb5d 	bl	800c0ac <memset>
	while(count_resend < 3){
 80029f2:	3501      	adds	r5, #1
			SIM_UART_ReInitializeRxDMA();
 80029f4:	f7fe fd64 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 80029f8:	20c8      	movs	r0, #200	@ 0xc8
 80029fa:	f005 fe07 	bl	800860c <osDelay>
	while(count_resend < 3){
 80029fe:	2d04      	cmp	r5, #4
 8002a00:	d1be      	bne.n	8002980 <processUploadDataToServer+0x14>
	send_AT_command(FIRST_CHECK);
 8002a02:	4825      	ldr	r0, [pc, #148]	@ (8002a98 <processUploadDataToServer+0x12c>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002a04:	4e25      	ldr	r6, [pc, #148]	@ (8002a9c <processUploadDataToServer+0x130>)
		receive_response("First check SIM MODULE\n");
 8002a06:	4f26      	ldr	r7, [pc, #152]	@ (8002aa0 <processUploadDataToServer+0x134>)
	send_AT_command(FIRST_CHECK);
 8002a08:	f7fe fd4a 	bl	80014a0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002a0c:	250c      	movs	r5, #12
 8002a0e:	4820      	ldr	r0, [pc, #128]	@ (8002a90 <processUploadDataToServer+0x124>)
 8002a10:	4631      	mov	r1, r6
 8002a12:	f009 fb9b 	bl	800c14c <strstr>
 8002a16:	4604      	mov	r4, r0
 8002a18:	b9e0      	cbnz	r0, 8002a54 <processUploadDataToServer+0xe8>
	receive_response("First check SIM MODULE\n");
 8002a1a:	4821      	ldr	r0, [pc, #132]	@ (8002aa0 <processUploadDataToServer+0x134>)
 8002a1c:	f7fe fd6a 	bl	80014f4 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a20:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a24:	4621      	mov	r1, r4
 8002a26:	e7d4      	b.n	80029d2 <processUploadDataToServer+0x66>
		else if(result_send_location == 2){
 8002a28:	2802      	cmp	r0, #2
 8002a2a:	d111      	bne.n	8002a50 <processUploadDataToServer+0xe4>
			receive_response("Check location report\n");
 8002a2c:	481d      	ldr	r0, [pc, #116]	@ (8002aa4 <processUploadDataToServer+0x138>)
 8002a2e:	f7fe fd61 	bl	80014f4 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a32:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a36:	2100      	movs	r1, #0
 8002a38:	4815      	ldr	r0, [pc, #84]	@ (8002a90 <processUploadDataToServer+0x124>)
 8002a3a:	f009 fb37 	bl	800c0ac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002a3e:	f7fe fd3f 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
			Debug_printf("The connection to server is closed. \n");
 8002a42:	4819      	ldr	r0, [pc, #100]	@ (8002aa8 <processUploadDataToServer+0x13c>)
 8002a44:	f002 fc4c 	bl	80052e0 <Debug_printf>
			return 2;
 8002a48:	2402      	movs	r4, #2
}
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <processUploadDataToServer+0x140>)
 8002a52:	e7c5      	b.n	80029e0 <processUploadDataToServer+0x74>
		receive_response("First check SIM MODULE\n");
 8002a54:	4638      	mov	r0, r7
 8002a56:	f7fe fd4d 	bl	80014f4 <receive_response>
		if(count_check > 10){
 8002a5a:	3d01      	subs	r5, #1
 8002a5c:	d109      	bne.n	8002a72 <processUploadDataToServer+0x106>
			Debug_printf("SIM MODULE BUG");
 8002a5e:	4814      	ldr	r0, [pc, #80]	@ (8002ab0 <processUploadDataToServer+0x144>)
 8002a60:	f002 fc3e 	bl	80052e0 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a64:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4809      	ldr	r0, [pc, #36]	@ (8002a90 <processUploadDataToServer+0x124>)
 8002a6c:	f009 fb1e 	bl	800c0ac <memset>
			return 2;
 8002a70:	e7ea      	b.n	8002a48 <processUploadDataToServer+0xdc>
		osDelay(100);
 8002a72:	2064      	movs	r0, #100	@ 0x64
 8002a74:	f005 fdca 	bl	800860c <osDelay>
 8002a78:	e7c9      	b.n	8002a0e <processUploadDataToServer+0xa2>
 8002a7a:	bf00      	nop
 8002a7c:	20007164 	.word	0x20007164
 8002a80:	0801103d 	.word	0x0801103d
 8002a84:	0801106d 	.word	0x0801106d
 8002a88:	200024a4 	.word	0x200024a4
 8002a8c:	0801107e 	.word	0x0801107e
 8002a90:	200024e0 	.word	0x200024e0
 8002a94:	080110e3 	.word	0x080110e3
 8002a98:	08010570 	.word	0x08010570
 8002a9c:	080109a2 	.word	0x080109a2
 8002aa0:	08010575 	.word	0x08010575
 8002aa4:	08011112 	.word	0x08011112
 8002aa8:	08011129 	.word	0x08011129
 8002aac:	0801114f 	.word	0x0801114f
 8002ab0:	0801119d 	.word	0x0801119d
 8002ab4:	20004f44 	.word	0x20004f44
 8002ab8:	08010f7d 	.word	0x08010f7d
 8002abc:	08010fd6 	.word	0x08010fd6

08002ac0 <StartGSM>:

void StartGSM(void const * argument)
{
 8002ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002ac4:	4881      	ldr	r0, [pc, #516]	@ (8002ccc <StartGSM+0x20c>)
					if(received_RMC == 1){
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						Debug_printf("Current stack address to be sent to the server: \n");
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002ac6:	f8df b260 	ldr.w	fp, [pc, #608]	@ 8002d28 <StartGSM+0x268>
{
 8002aca:	b0a3      	sub	sp, #140	@ 0x8c
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002acc:	f002 fc08 	bl	80052e0 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8002ad0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ad4:	4a7e      	ldr	r2, [pc, #504]	@ (8002cd0 <StartGSM+0x210>)
 8002ad6:	497f      	ldr	r1, [pc, #508]	@ (8002cd4 <StartGSM+0x214>)
 8002ad8:	487f      	ldr	r0, [pc, #508]	@ (8002cd8 <StartGSM+0x218>)
 8002ada:	f000 fd7f 	bl	80035dc <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 8002ade:	a802      	add	r0, sp, #8
 8002ae0:	f7fe fc8c 	bl	80013fc <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002ae4:	a811      	add	r0, sp, #68	@ 0x44
 8002ae6:	f7fe fcaf 	bl	8001448 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 8002aea:	487c      	ldr	r0, [pc, #496]	@ (8002cdc <StartGSM+0x21c>)
 8002aec:	f000 fc9a 	bl	8003424 <initQueue_GSM>
	init_SIM_module();
 8002af0:	f7fe fd14 	bl	800151c <init_SIM_module>
	int is_set_uniqueID = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
	int process = 0;
 8002af8:	461c      	mov	r4, r3
		osDelay(300);
 8002afa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002afe:	f005 fd85 	bl	800860c <osDelay>
		switch(process){
 8002b02:	2c08      	cmp	r4, #8
 8002b04:	d866      	bhi.n	8002bd4 <StartGSM+0x114>
 8002b06:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002b0a:	0009      	.short	0x0009
 8002b0c:	004d001c 	.word	0x004d001c
 8002b10:	00a30074 	.word	0x00a30074
 8002b14:	00d200b7 	.word	0x00d200b7
 8002b18:	045f0111 	.word	0x045f0111
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002b1c:	4970      	ldr	r1, [pc, #448]	@ (8002ce0 <StartGSM+0x220>)
 8002b1e:	4871      	ldr	r0, [pc, #452]	@ (8002ce4 <StartGSM+0x224>)
 8002b20:	f002 fbba 	bl	8005298 <uart_transmit_string>
				isReady = first_check_SIM();
 8002b24:	f7fe fdce 	bl	80016c4 <first_check_SIM>
				if(isReady) process++;
 8002b28:	4601      	mov	r1, r0
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	f040 808e 	bne.w	8002c4c <StartGSM+0x18c>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b30:	f44f 72c0 	mov.w	r2, #384	@ 0x180
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b34:	4866      	ldr	r0, [pc, #408]	@ (8002cd0 <StartGSM+0x210>)
 8002b36:	f009 fab9 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002b3a:	f7fe fcc1 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002b3e:	496a      	ldr	r1, [pc, #424]	@ (8002ce8 <StartGSM+0x228>)
 8002b40:	e01b      	b.n	8002b7a <StartGSM+0xba>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002b42:	496a      	ldr	r1, [pc, #424]	@ (8002cec <StartGSM+0x22c>)
 8002b44:	4867      	ldr	r0, [pc, #412]	@ (8002ce4 <StartGSM+0x224>)
 8002b46:	f002 fba7 	bl	8005298 <uart_transmit_string>
				osDelay(100);
 8002b4a:	2064      	movs	r0, #100	@ 0x64
 8002b4c:	f005 fd5e 	bl	800860c <osDelay>
				int check_SIM = check_SIM_ready();
 8002b50:	f7fe fed0 	bl	80018f4 <check_SIM_ready>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002b54:	9b01      	ldr	r3, [sp, #4]
				int check_SIM = check_SIM_ready();
 8002b56:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002b58:	b1b3      	cbz	r3, 8002b88 <StartGSM+0xc8>
	int process = 0;
 8002b5a:	9401      	str	r4, [sp, #4]
				osDelay(150);
 8002b5c:	2096      	movs	r0, #150	@ 0x96
 8002b5e:	f005 fd55 	bl	800860c <osDelay>
				if (check_SIM == 0){
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	f040 844d 	bne.w	8003402 <StartGSM+0x942>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b6e:	4858      	ldr	r0, [pc, #352]	@ (8002cd0 <StartGSM+0x210>)
 8002b70:	f009 fa9c 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002b74:	f7fe fca4 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8002b78:	495d      	ldr	r1, [pc, #372]	@ (8002cf0 <StartGSM+0x230>)
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002b7a:	485a      	ldr	r0, [pc, #360]	@ (8002ce4 <StartGSM+0x224>)
 8002b7c:	f002 fb8c 	bl	8005298 <uart_transmit_string>
									process++;
 8002b80:	2400      	movs	r4, #0
					reboot_SIM_module();
 8002b82:	f7fe fce5 	bl	8001550 <reboot_SIM_module>
					process = 0;
 8002b86:	e025      	b.n	8002bd4 <StartGSM+0x114>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002b88:	2801      	cmp	r0, #1
 8002b8a:	d1e7      	bne.n	8002b5c <StartGSM+0x9c>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002b8c:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <StartGSM+0x234>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	889b      	ldrh	r3, [r3, #4]
 8002b92:	f8cd 200d 	str.w	r2, [sp, #13]
 8002b96:	f8ad 3011 	strh.w	r3, [sp, #17]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002b9a:	f8cd 2049 	str.w	r2, [sp, #73]	@ 0x49
 8002b9e:	f8ad 304d 	strh.w	r3, [sp, #77]	@ 0x4d
					is_set_uniqueID = 1;
 8002ba2:	e7da      	b.n	8002b5a <StartGSM+0x9a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 8002ba4:	4954      	ldr	r1, [pc, #336]	@ (8002cf8 <StartGSM+0x238>)
 8002ba6:	484f      	ldr	r0, [pc, #316]	@ (8002ce4 <StartGSM+0x224>)
 8002ba8:	f002 fb76 	bl	8005298 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002bac:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4847      	ldr	r0, [pc, #284]	@ (8002cd0 <StartGSM+0x210>)
 8002bb4:	f009 fa7a 	bl	800c0ac <memset>
				SIM_UART_ReInitializeRxDMA();
 8002bb8:	f7fe fc82 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe fff1 	bl	8001ba4 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002bc2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4841      	ldr	r0, [pc, #260]	@ (8002cd0 <StartGSM+0x210>)
 8002bca:	f009 fa6f 	bl	800c0ac <memset>
				SIM_UART_ReInitializeRxDMA();
 8002bce:	f7fe fc77 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
				process++;
 8002bd2:	2403      	movs	r4, #3
				}
				break;
		}
		if(is_in_sending == 0 && is_disconnect == 1){
 8002bd4:	4d49      	ldr	r5, [pc, #292]	@ (8002cfc <StartGSM+0x23c>)
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	b92b      	cbnz	r3, 8002be6 <StartGSM+0x126>
 8002bda:	4b49      	ldr	r3, [pc, #292]	@ (8002d00 <StartGSM+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d18b      	bne.n	8002afa <StartGSM+0x3a>
			receiveRMCDataWithAddrGSM();
 8002be2:	f7ff fdc9 	bl	8002778 <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 8002be6:	682b      	ldr	r3, [r5, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d186      	bne.n	8002afa <StartGSM+0x3a>
			is_in_sending = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	e783      	b.n	8002afa <StartGSM+0x3a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002bf2:	4944      	ldr	r1, [pc, #272]	@ (8002d04 <StartGSM+0x244>)
 8002bf4:	483b      	ldr	r0, [pc, #236]	@ (8002ce4 <StartGSM+0x224>)
 8002bf6:	f002 fb4f 	bl	8005298 <uart_transmit_string>
				int receive_activate = activate_context(1);
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7ff f824 	bl	8001c48 <activate_context>
				if(receive_activate){
 8002c00:	4605      	mov	r5, r0
 8002c02:	b190      	cbz	r0, 8002c2a <StartGSM+0x16a>
					getCurrentTime();
 8002c04:	f7ff fd7e 	bl	8002704 <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002c08:	493f      	ldr	r1, [pc, #252]	@ (8002d08 <StartGSM+0x248>)
 8002c0a:	4836      	ldr	r0, [pc, #216]	@ (8002ce4 <StartGSM+0x224>)
 8002c0c:	f002 fb44 	bl	8005298 <uart_transmit_string>
					osDelay(200);
 8002c10:	20c8      	movs	r0, #200	@ 0xc8
 8002c12:	f005 fcfb 	bl	800860c <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c16:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	482c      	ldr	r0, [pc, #176]	@ (8002cd0 <StartGSM+0x210>)
 8002c1e:	f009 fa45 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002c22:	f7fe fc4d 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002c26:	2404      	movs	r4, #4
 8002c28:	e7d4      	b.n	8002bd4 <StartGSM+0x114>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 8002c2a:	4938      	ldr	r1, [pc, #224]	@ (8002d0c <StartGSM+0x24c>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002c2c:	482d      	ldr	r0, [pc, #180]	@ (8002ce4 <StartGSM+0x224>)
 8002c2e:	f002 fb33 	bl	8005298 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f7ff f872 	bl	8001d1c <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c38:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002c3c:	4604      	mov	r4, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4823      	ldr	r0, [pc, #140]	@ (8002cd0 <StartGSM+0x210>)
 8002c42:	f009 fa33 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002c46:	f7fe fc3b 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002c4a:	b18c      	cbz	r4, 8002c70 <StartGSM+0x1b0>
					if (receive_deactivate) process = 1;
 8002c4c:	2401      	movs	r4, #1
 8002c4e:	e7c1      	b.n	8002bd4 <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002c50:	492f      	ldr	r1, [pc, #188]	@ (8002d10 <StartGSM+0x250>)
 8002c52:	4824      	ldr	r0, [pc, #144]	@ (8002ce4 <StartGSM+0x224>)
 8002c54:	f002 fb20 	bl	8005298 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff f8a8 	bl	8001db4 <open_socket_service>
				if(received_res){
 8002c64:	4605      	mov	r5, r0
 8002c66:	2800      	cmp	r0, #0
 8002c68:	f040 83ce 	bne.w	8003408 <StartGSM+0x948>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002c6c:	4929      	ldr	r1, [pc, #164]	@ (8002d14 <StartGSM+0x254>)
 8002c6e:	e7dd      	b.n	8002c2c <StartGSM+0x16c>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c70:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c74:	4621      	mov	r1, r4
 8002c76:	e75d      	b.n	8002b34 <StartGSM+0x74>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002c78:	4927      	ldr	r1, [pc, #156]	@ (8002d18 <StartGSM+0x258>)
 8002c7a:	481a      	ldr	r0, [pc, #104]	@ (8002ce4 <StartGSM+0x224>)
					receive_response("Check terminal register\n");
 8002c7c:	4e27      	ldr	r6, [pc, #156]	@ (8002d1c <StartGSM+0x25c>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002c7e:	f002 fb0b 	bl	8005298 <uart_transmit_string>
 8002c82:	2403      	movs	r4, #3
					int result_send_login = login_to_server(0,&reg_msg);
 8002c84:	a902      	add	r1, sp, #8
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fa40 	bl	800210c <login_to_server>
 8002c8c:	4605      	mov	r5, r0
					receive_response("Check terminal register\n");
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f7fe fc30 	bl	80014f4 <receive_response>
					if(result_send_login){
 8002c94:	b125      	cbz	r5, 8002ca0 <StartGSM+0x1e0>
						Debug_printf("LOGIN TO SERVER SUCCESSFULLY\n");
 8002c96:	4822      	ldr	r0, [pc, #136]	@ (8002d20 <StartGSM+0x260>)
 8002c98:	f002 fb22 	bl	80052e0 <Debug_printf>
				else process++;
 8002c9c:	2406      	movs	r4, #6
 8002c9e:	e799      	b.n	8002bd4 <StartGSM+0x114>
					osDelay(200);
 8002ca0:	20c8      	movs	r0, #200	@ 0xc8
 8002ca2:	f005 fcb3 	bl	800860c <osDelay>
				while(count_resend_login < 3){
 8002ca6:	3c01      	subs	r4, #1
 8002ca8:	d1ec      	bne.n	8002c84 <StartGSM+0x1c4>
				else process = 8;
 8002caa:	2408      	movs	r4, #8
 8002cac:	e792      	b.n	8002bd4 <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 8002cae:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <StartGSM+0x224>)
 8002cb0:	491c      	ldr	r1, [pc, #112]	@ (8002d24 <StartGSM+0x264>)
 8002cb2:	f002 faf1 	bl	8005298 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7ff fb34 	bl	8002324 <check_data_sent_to_server>
				if(result_check_login){
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d0f4      	beq.n	8002caa <StartGSM+0x1ea>
					receive_response("Check terminal register\n");
 8002cc0:	4816      	ldr	r0, [pc, #88]	@ (8002d1c <StartGSM+0x25c>)
 8002cc2:	f7fe fc17 	bl	80014f4 <receive_response>
					process++;
 8002cc6:	2407      	movs	r4, #7
 8002cc8:	e784      	b.n	8002bd4 <StartGSM+0x114>
 8002cca:	bf00      	nop
 8002ccc:	080111ac 	.word	0x080111ac
 8002cd0:	200024e0 	.word	0x200024e0
 8002cd4:	20007054 	.word	0x20007054
 8002cd8:	200024d0 	.word	0x200024d0
 8002cdc:	20002298 	.word	0x20002298
 8002ce0:	08011203 	.word	0x08011203
 8002ce4:	20007164 	.word	0x20007164
 8002ce8:	08011211 	.word	0x08011211
 8002cec:	08011227 	.word	0x08011227
 8002cf0:	08011240 	.word	0x08011240
 8002cf4:	20002220 	.word	0x20002220
 8002cf8:	08011255 	.word	0x08011255
 8002cfc:	200024c8 	.word	0x200024c8
 8002d00:	200024bc 	.word	0x200024bc
 8002d04:	0801127d 	.word	0x0801127d
 8002d08:	080112a4 	.word	0x080112a4
 8002d0c:	080112c7 	.word	0x080112c7
 8002d10:	080112e4 	.word	0x080112e4
 8002d14:	0801130a 	.word	0x0801130a
 8002d18:	08011324 	.word	0x08011324
 8002d1c:	08011354 	.word	0x08011354
 8002d20:	0801136d 	.word	0x0801136d
 8002d24:	0801138b 	.word	0x0801138b
 8002d28:	20002290 	.word	0x20002290
				is_in_sending = 1;
 8002d2c:	4baf      	ldr	r3, [pc, #700]	@ (8002fec <StartGSM+0x52c>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002d2e:	49b0      	ldr	r1, [pc, #704]	@ (8002ff0 <StartGSM+0x530>)
 8002d30:	48b0      	ldr	r0, [pc, #704]	@ (8002ff4 <StartGSM+0x534>)
				is_in_sending = 1;
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002d36:	f002 faaf 	bl	8005298 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002d3a:	f7ff fce3 	bl	8002704 <getCurrentTime>
				if(result_get_current == 0){
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d0b3      	beq.n	8002caa <StartGSM+0x1ea>
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002d42:	4ead      	ldr	r6, [pc, #692]	@ (8002ff8 <StartGSM+0x538>)
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002d44:	4dad      	ldr	r5, [pc, #692]	@ (8002ffc <StartGSM+0x53c>)
					if(received_RMC == 1){
 8002d46:	4cae      	ldr	r4, [pc, #696]	@ (8003000 <StartGSM+0x540>)
					receiveRMCDataWithAddrGSM();
 8002d48:	f7ff fd16 	bl	8002778 <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d1fa      	bne.n	8002d48 <StartGSM+0x288>
						received_RMC = 0;
 8002d52:	2300      	movs	r3, #0
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002d54:	49ab      	ldr	r1, [pc, #684]	@ (8003004 <StartGSM+0x544>)
 8002d56:	48a7      	ldr	r0, [pc, #668]	@ (8002ff4 <StartGSM+0x534>)
						received_RMC = 0;
 8002d58:	6023      	str	r3, [r4, #0]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002d5a:	f002 fa9d 	bl	8005298 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002d5e:	a811      	add	r0, sp, #68	@ 0x44
 8002d60:	f7fe fc26 	bl	80015b0 <save_rmc_to_location_info>
						Debug_printf("Current stack address to be sent to the server: \n");
 8002d64:	48a8      	ldr	r0, [pc, #672]	@ (8003008 <StartGSM+0x548>)
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002d66:	4fa9      	ldr	r7, [pc, #676]	@ (800300c <StartGSM+0x54c>)
 8002d68:	4ca9      	ldr	r4, [pc, #676]	@ (8003010 <StartGSM+0x550>)
						Debug_printf("Current stack address to be sent to the server: \n");
 8002d6a:	f002 fab9 	bl	80052e0 <Debug_printf>
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002d6e:	2208      	movs	r2, #8
 8002d70:	f8db 0000 	ldr.w	r0, [fp]
 8002d74:	4631      	mov	r1, r6
 8002d76:	f002 fa9e 	bl	80052b6 <Uint32ToHex>
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %s\n", addr_out_gsm);
 8002d7a:	48a6      	ldr	r0, [pc, #664]	@ (8003014 <StartGSM+0x554>)
 8002d7c:	4631      	mov	r1, r6
 8002d7e:	f002 faaf 	bl	80052e0 <Debug_printf>
						send_AT_command(CHECK_SIGNAL_QUALITY);
 8002d82:	48a5      	ldr	r0, [pc, #660]	@ (8003018 <StartGSM+0x558>)
 8002d84:	f7fe fb8c 	bl	80014a0 <send_AT_command>
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002d88:	4639      	mov	r1, r7
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f009 f9de 	bl	800c14c <strstr>
 8002d90:	4601      	mov	r1, r0
 8002d92:	b950      	cbnz	r0, 8002daa <StartGSM+0x2ea>
							if (count_check_csq >= 5){
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	f340 80a4 	ble.w	8002ee4 <StartGSM+0x424>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002d9c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002da0:	4628      	mov	r0, r5
 8002da2:	f009 f983 	bl	800c0ac <memset>
								SIM_UART_ReInitializeRxDMA();
 8002da6:	f7fe fb8b 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
						receive_response("Check Signal Quality Report\n");
 8002daa:	489c      	ldr	r0, [pc, #624]	@ (800301c <StartGSM+0x55c>)
						HAL_TIM_Base_Start(&htim3);
 8002dac:	4f9c      	ldr	r7, [pc, #624]	@ (8003020 <StartGSM+0x560>)
							result_final = processUploadDataToServer(&location_info);
 8002dae:	f8df 82d0 	ldr.w	r8, [pc, #720]	@ 8003080 <StartGSM+0x5c0>
						receive_response("Check Signal Quality Report\n");
 8002db2:	f7fe fb9f 	bl	80014f4 <receive_response>
						osDelay(100);
 8002db6:	2064      	movs	r0, #100	@ 0x64
 8002db8:	f005 fc28 	bl	800860c <osDelay>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002dbc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f009 f972 	bl	800c0ac <memset>
						count_check_csq = 0;
 8002dc8:	f04f 0900 	mov.w	r9, #0
						SIM_UART_ReInitializeRxDMA();
 8002dcc:	f7fe fb78 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
						HAL_TIM_Base_Start(&htim3);
 8002dd0:	4638      	mov	r0, r7
						count_check_csq = 0;
 8002dd2:	f8c4 9000 	str.w	r9, [r4]
						HAL_TIM_Base_Start(&htim3);
 8002dd6:	f004 fd0b 	bl	80077f0 <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4c91      	ldr	r4, [pc, #580]	@ (8003024 <StartGSM+0x564>)
 8002dde:	f8c3 9024 	str.w	r9, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 8002de2:	a811      	add	r0, sp, #68	@ 0x44
 8002de4:	f7ff fdc2 	bl	800296c <processUploadDataToServer>
							if(result_final == 1){
 8002de8:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002dea:	f8c8 0000 	str.w	r0, [r8]
							if(result_final == 1){
 8002dee:	f040 814f 	bne.w	8003090 <StartGSM+0x5d0>
								uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002df2:	498d      	ldr	r1, [pc, #564]	@ (8003028 <StartGSM+0x568>)
 8002df4:	487f      	ldr	r0, [pc, #508]	@ (8002ff4 <StartGSM+0x534>)
 8002df6:	f002 fa4f 	bl	8005298 <uart_transmit_string>
								receive_response("Check location report\n");
 8002dfa:	488c      	ldr	r0, [pc, #560]	@ (800302c <StartGSM+0x56c>)
 8002dfc:	f7fe fb7a 	bl	80014f4 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002e00:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002e04:	4649      	mov	r1, r9
 8002e06:	4628      	mov	r0, r5
 8002e08:	f009 f950 	bl	800c0ac <memset>
								SIM_UART_ReInitializeRxDMA();
 8002e0c:	f7fe fb58 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	2a01      	cmp	r2, #1
 8002e14:	d06a      	beq.n	8002eec <StartGSM+0x42c>
 8002e16:	4b86      	ldr	r3, [pc, #536]	@ (8003030 <StartGSM+0x570>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 80cf 	bne.w	8002fbe <StartGSM+0x4fe>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002e20:	f8df 821c 	ldr.w	r8, [pc, #540]	@ 8003040 <StartGSM+0x580>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002e24:	4883      	ldr	r0, [pc, #524]	@ (8003034 <StartGSM+0x574>)
									if(is_keep_up == 0) num_in_mail_sent++;
 8002e26:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8003084 <StartGSM+0x5c4>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002e2a:	f002 fa59 	bl	80052e0 <Debug_printf>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002e2e:	f8db 1000 	ldr.w	r1, [fp]
 8002e32:	4640      	mov	r0, r8
 8002e34:	f000 fafe 	bl	8003434 <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002e38:	f8d9 3000 	ldr.w	r3, [r9]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d160      	bne.n	8002f02 <StartGSM+0x442>
 8002e40:	4a7d      	ldr	r2, [pc, #500]	@ (8003038 <StartGSM+0x578>)
 8002e42:	6813      	ldr	r3, [r2, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	6013      	str	r3, [r2, #0]
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002e48:	487c      	ldr	r0, [pc, #496]	@ (800303c <StartGSM+0x57c>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002e4a:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 8003058 <StartGSM+0x598>
 8002e4e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003064 <StartGSM+0x5a4>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002e52:	f002 fa45 	bl	80052e0 <Debug_printf>
									printQueue_GSM(&result_addr_queue);
 8002e56:	487a      	ldr	r0, [pc, #488]	@ (8003040 <StartGSM+0x580>)
 8002e58:	f000 fb1c 	bl	8003494 <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e60:	f8da 1000 	ldr.w	r1, [sl]
 8002e64:	3b80      	subs	r3, #128	@ 0x80
 8002e66:	428b      	cmp	r3, r1
 8002e68:	f200 80b8 	bhi.w	8002fdc <StartGSM+0x51c>
 8002e6c:	f8d8 0000 	ldr.w	r0, [r8]
 8002e70:	4973      	ldr	r1, [pc, #460]	@ (8003040 <StartGSM+0x580>)
 8002e72:	3880      	subs	r0, #128	@ 0x80
 8002e74:	f000 fb42 	bl	80034fc <checkAddrExistInQueue>
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	f000 80af 	beq.w	8002fdc <StartGSM+0x51c>
										Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002e7e:	4871      	ldr	r0, [pc, #452]	@ (8003044 <StartGSM+0x584>)
 8002e80:	f002 fa2e 	bl	80052e0 <Debug_printf>
										is_using_flash = 0;
 8002e84:	4a6a      	ldr	r2, [pc, #424]	@ (8003030 <StartGSM+0x570>)
										clearQueue_GSM(&result_addr_queue);
 8002e86:	486e      	ldr	r0, [pc, #440]	@ (8003040 <StartGSM+0x580>)
										is_using_flash = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002e8c:	f000 faf2 	bl	8003474 <clearQueue_GSM>
										count_shiftleft = 0;
 8002e90:	4a6d      	ldr	r2, [pc, #436]	@ (8003048 <StartGSM+0x588>)
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002e92:	486e      	ldr	r0, [pc, #440]	@ (800304c <StartGSM+0x58c>)
										start_addr_disconnect = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8ca 3000 	str.w	r3, [sl]
										is_keep_up = 0;
 8002e9a:	f8c9 3000 	str.w	r3, [r9]
										end_addr_disconnect = 0;
 8002e9e:	f8c8 3000 	str.w	r3, [r8]
										count_shiftleft = 0;
 8002ea2:	7013      	strb	r3, [r2, #0]
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002ea4:	f002 fa1c 	bl	80052e0 <Debug_printf>
											Debug_printf("Receiving MAIL\n");
 8002ea8:	f8df a1dc 	ldr.w	sl, [pc, #476]	@ 8003088 <StartGSM+0x5c8>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002eac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8003050 <StartGSM+0x590>
 8002eb0:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800308c <StartGSM+0x5cc>
											Debug_printf("Receiving MAIL\n");
 8002eb4:	4650      	mov	r0, sl
 8002eb6:	f002 fa13 	bl	80052e0 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002eba:	4965      	ldr	r1, [pc, #404]	@ (8003050 <StartGSM+0x590>)
 8002ebc:	f8d9 0000 	ldr.w	r0, [r9]
 8002ec0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f005 fc47 	bl	8008758 <osMessageQueueGet>
											if(status == osOK){
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d172      	bne.n	8002fb4 <StartGSM+0x4f4>
												Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 8002ece:	f8d8 0058 	ldr.w	r0, [r8, #88]	@ 0x58
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	f002 f9ee 	bl	80052b6 <Uint32ToHex>
												Debug_printf("Receiving MAIL For CLEARING: %s\n", addr_out_gsm);
 8002eda:	485e      	ldr	r0, [pc, #376]	@ (8003054 <StartGSM+0x594>)
 8002edc:	4631      	mov	r1, r6
 8002ede:	f002 f9ff 	bl	80052e0 <Debug_printf>
										while(1){
 8002ee2:	e7e7      	b.n	8002eb4 <StartGSM+0x3f4>
							receive_response("Check Signal Quality Report\n");
 8002ee4:	484d      	ldr	r0, [pc, #308]	@ (800301c <StartGSM+0x55c>)
 8002ee6:	f7fe fb05 	bl	80014f4 <receive_response>
 8002eea:	e74d      	b.n	8002d88 <StartGSM+0x2c8>
										end_addr_disconnect = current_addr_gsm;
 8002eec:	4b5a      	ldr	r3, [pc, #360]	@ (8003058 <StartGSM+0x598>)
 8002eee:	f8db 1000 	ldr.w	r1, [fp]
 8002ef2:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002ef4:	4959      	ldr	r1, [pc, #356]	@ (800305c <StartGSM+0x59c>)
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002ef6:	485a      	ldr	r0, [pc, #360]	@ (8003060 <StartGSM+0x5a0>)
										in_getting_mail_stack = 1;
 8002ef8:	600a      	str	r2, [r1, #0]
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	f002 f9f0 	bl	80052e0 <Debug_printf>
 8002f00:	e78e      	b.n	8002e20 <StartGSM+0x360>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d1a0      	bne.n	8002e48 <StartGSM+0x388>
 8002f06:	4b55      	ldr	r3, [pc, #340]	@ (800305c <StartGSM+0x59c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d19c      	bne.n	8002e48 <StartGSM+0x388>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f0e:	f8d8 0208 	ldr.w	r0, [r8, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f12:	f8d8 c200 	ldr.w	ip, [r8, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f16:	f04f 0e00 	mov.w	lr, #0
 8002f1a:	3801      	subs	r0, #1
										int count_stack = 0;
 8002f1c:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f1e:	4570      	cmp	r0, lr
 8002f20:	dc12      	bgt.n	8002f48 <StartGSM+0x488>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f22:	f04f 0e00 	mov.w	lr, #0
 8002f26:	4570      	cmp	r0, lr
 8002f28:	dc26      	bgt.n	8002f78 <StartGSM+0x4b8>
										start_addr_disconnect -= count_shiftleft * 128;
 8002f2a:	494e      	ldr	r1, [pc, #312]	@ (8003064 <StartGSM+0x5a4>)
 8002f2c:	4a46      	ldr	r2, [pc, #280]	@ (8003048 <StartGSM+0x588>)
 8002f2e:	680b      	ldr	r3, [r1, #0]
 8002f30:	7810      	ldrb	r0, [r2, #0]
 8002f32:	eba3 13c0 	sub.w	r3, r3, r0, lsl #7
 8002f36:	600b      	str	r3, [r1, #0]
										count_shiftleft = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	7013      	strb	r3, [r2, #0]
										in_getting_mail_stack = 0;
 8002f3c:	4a47      	ldr	r2, [pc, #284]	@ (800305c <StartGSM+0x59c>)
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002f3e:	484a      	ldr	r0, [pc, #296]	@ (8003068 <StartGSM+0x5a8>)
										in_getting_mail_stack = 0;
 8002f40:	6013      	str	r3, [r2, #0]
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002f42:	f002 f9cd 	bl	80052e0 <Debug_printf>
 8002f46:	e77f      	b.n	8002e48 <StartGSM+0x388>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f48:	eb0c 030e 	add.w	r3, ip, lr
 8002f4c:	4259      	negs	r1, r3
 8002f4e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f56:	bf58      	it	pl
 8002f58:	424b      	negpl	r3, r1
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002f5a:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8002f5e:	f5b1 4f9e 	cmp.w	r1, #20224	@ 0x4f00
 8002f62:	d106      	bne.n	8002f72 <StartGSM+0x4b2>
 8002f64:	3301      	adds	r3, #1
 8002f66:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002f6a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002f6e:	bf08      	it	eq
 8002f70:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f72:	f10e 0e01 	add.w	lr, lr, #1
 8002f76:	e7d2      	b.n	8002f1e <StartGSM+0x45e>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f78:	eb0c 010e 	add.w	r1, ip, lr
 8002f7c:	424b      	negs	r3, r1
 8002f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f82:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002f86:	bf58      	it	pl
 8002f88:	4259      	negpl	r1, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002f8a:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8002f8e:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002f92:	d10c      	bne.n	8002fae <StartGSM+0x4ee>
 8002f94:	1c4b      	adds	r3, r1, #1
 8002f96:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002f9a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002f9e:	bf01      	itttt	eq
 8002fa0:	01d3      	lsleq	r3, r2, #7
 8002fa2:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002fa6:	f848 3021 	streq.w	r3, [r8, r1, lsl #2]
												count_stack--;
 8002faa:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002fae:	f10e 0e01 	add.w	lr, lr, #1
 8002fb2:	e7b8      	b.n	8002f26 <StartGSM+0x466>
												Debug_printf("Have cleared out all mail queue\n");
 8002fb4:	482d      	ldr	r0, [pc, #180]	@ (800306c <StartGSM+0x5ac>)
 8002fb6:	f002 f993 	bl	80052e0 <Debug_printf>
									is_disconnect = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6023      	str	r3, [r4, #0]
								is_pushing_data = 0;
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003070 <StartGSM+0x5b0>)
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002fc0:	482c      	ldr	r0, [pc, #176]	@ (8003074 <StartGSM+0x5b4>)
								is_pushing_data = 0;
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002fca:	f002 f989 	bl	80052e0 <Debug_printf>
							Debug_printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002fce:	482a      	ldr	r0, [pc, #168]	@ (8003078 <StartGSM+0x5b8>)
 8002fd0:	f002 f986 	bl	80052e0 <Debug_printf>
							osDelay(200);
 8002fd4:	20c8      	movs	r0, #200	@ 0xc8
 8002fd6:	f005 fb19 	bl	800860c <osDelay>
 8002fda:	e6b4      	b.n	8002d46 <StartGSM+0x286>
										Debug_printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002fdc:	4827      	ldr	r0, [pc, #156]	@ (800307c <StartGSM+0x5bc>)
 8002fde:	f002 f97f 	bl	80052e0 <Debug_printf>
										is_using_flash = 1;
 8002fe2:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <StartGSM+0x570>)
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e7e7      	b.n	8002fba <StartGSM+0x4fa>
 8002fea:	bf00      	nop
 8002fec:	200024c8 	.word	0x200024c8
 8002ff0:	080113b2 	.word	0x080113b2
 8002ff4:	20007164 	.word	0x20007164
 8002ff8:	20002280 	.word	0x20002280
 8002ffc:	200024e0 	.word	0x200024e0
 8003000:	200024cc 	.word	0x200024cc
 8003004:	080113d2 	.word	0x080113d2
 8003008:	080113f3 	.word	0x080113f3
 800300c:	080109a2 	.word	0x080109a2
 8003010:	200024a8 	.word	0x200024a8
 8003014:	08011425 	.word	0x08011425
 8003018:	080107a5 	.word	0x080107a5
 800301c:	080107ae 	.word	0x080107ae
 8003020:	200071ec 	.word	0x200071ec
 8003024:	200024bc 	.word	0x200024bc
 8003028:	0801106d 	.word	0x0801106d
 800302c:	08011112 	.word	0x08011112
 8003030:	200024b8 	.word	0x200024b8
 8003034:	080114a8 	.word	0x080114a8
 8003038:	200024c0 	.word	0x200024c0
 800303c:	0801153b 	.word	0x0801153b
 8003040:	20002298 	.word	0x20002298
 8003044:	08011570 	.word	0x08011570
 8003048:	200024b0 	.word	0x200024b0
 800304c:	080115ab 	.word	0x080115ab
 8003050:	200021c0 	.word	0x200021c0
 8003054:	080115fb 	.word	0x080115fb
 8003058:	2000228c 	.word	0x2000228c
 800305c:	200024c4 	.word	0x200024c4
 8003060:	08011469 	.word	0x08011469
 8003064:	20002294 	.word	0x20002294
 8003068:	080114ea 	.word	0x080114ea
 800306c:	0801161c 	.word	0x0801161c
 8003070:	200024ac 	.word	0x200024ac
 8003074:	08011684 	.word	0x08011684
 8003078:	080116ce 	.word	0x080116ce
 800307c:	0801163d 	.word	0x0801163d
 8003080:	20000000 	.word	0x20000000
 8003084:	200024b4 	.word	0x200024b4
 8003088:	080115eb 	.word	0x080115eb
 800308c:	20003f88 	.word	0x20003f88
								uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8003090:	49b3      	ldr	r1, [pc, #716]	@ (8003360 <StartGSM+0x8a0>)
 8003092:	48b4      	ldr	r0, [pc, #720]	@ (8003364 <StartGSM+0x8a4>)
 8003094:	4fb4      	ldr	r7, [pc, #720]	@ (8003368 <StartGSM+0x8a8>)
 8003096:	f002 f8ff 	bl	8005298 <uart_transmit_string>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800309a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800309e:	4649      	mov	r1, r9
 80030a0:	48b2      	ldr	r0, [pc, #712]	@ (800336c <StartGSM+0x8ac>)
 80030a2:	f009 f803 	bl	800c0ac <memset>
								SIM_UART_ReInitializeRxDMA();
 80030a6:	f7fe fa0b 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	b95b      	cbnz	r3, 80030c6 <StartGSM+0x606>
									if(is_using_flash == 0){
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b93b      	cbnz	r3, 80030c2 <StartGSM+0x602>
										start_addr_disconnect = current_addr_gsm;
 80030b2:	4baf      	ldr	r3, [pc, #700]	@ (8003370 <StartGSM+0x8b0>)
 80030b4:	f8db 2000 	ldr.w	r2, [fp]
 80030b8:	601a      	str	r2, [r3, #0]
										Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	48ad      	ldr	r0, [pc, #692]	@ (8003374 <StartGSM+0x8b4>)
 80030be:	f002 f90f 	bl	80052e0 <Debug_printf>
									is_disconnect = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	6023      	str	r3, [r4, #0]
								if(is_using_flash == 1){
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	f040 810e 	bne.w	80032ea <StartGSM+0x82a>
									if(is_keep_up){
 80030ce:	f8df 92f4 	ldr.w	r9, [pc, #756]	@ 80033c4 <StartGSM+0x904>
 80030d2:	4ca9      	ldr	r4, [pc, #676]	@ (8003378 <StartGSM+0x8b8>)
 80030d4:	f8d9 2000 	ldr.w	r2, [r9]
 80030d8:	bb3a      	cbnz	r2, 800312a <StartGSM+0x66a>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030da:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030de:	f8d4 6200 	ldr.w	r6, [r4, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030e2:	3801      	subs	r0, #1
 80030e4:	4694      	mov	ip, r2
										int count_stack = 0;
 80030e6:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030e8:	4560      	cmp	r0, ip
 80030ea:	f300 80c1 	bgt.w	8003270 <StartGSM+0x7b0>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030ee:	4290      	cmp	r0, r2
 80030f0:	dd36      	ble.n	8003160 <StartGSM+0x6a0>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030f2:	1995      	adds	r5, r2, r6
 80030f4:	426b      	negs	r3, r5
 80030f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030fa:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 80030fe:	bf58      	it	pl
 8003100:	425d      	negpl	r5, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8003102:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8003106:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 800310a:	d10c      	bne.n	8003126 <StartGSM+0x666>
 800310c:	1c6b      	adds	r3, r5, #1
 800310e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003112:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8003116:	bf01      	itttt	eq
 8003118:	01cb      	lsleq	r3, r1, #7
 800311a:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 800311e:	f844 3025 	streq.w	r3, [r4, r5, lsl #2]
												count_stack--;
 8003122:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8003126:	3201      	adds	r2, #1
 8003128:	e7e1      	b.n	80030ee <StartGSM+0x62e>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 800312a:	4894      	ldr	r0, [pc, #592]	@ (800337c <StartGSM+0x8bc>)
												Uint32ToHex(result_addr_queue.data[idx], addr_out_gsm, 8);
 800312c:	f8df a268 	ldr.w	sl, [pc, #616]	@ 8003398 <StartGSM+0x8d8>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8003130:	f002 f8d6 	bl	80052e0 <Debug_printf>
										printQueue_GSM(&result_addr_queue);
 8003134:	4620      	mov	r0, r4
 8003136:	f000 f9ad 	bl	8003494 <printQueue_GSM>
										Debug_printf("\n--------------- Update the result address data: GSM --------------\n");
 800313a:	4891      	ldr	r0, [pc, #580]	@ (8003380 <StartGSM+0x8c0>)
 800313c:	f002 f8d0 	bl	80052e0 <Debug_printf>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8003140:	4b8b      	ldr	r3, [pc, #556]	@ (8003370 <StartGSM+0x8b0>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8003142:	2600      	movs	r6, #0
 8003144:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003148:	f8d4 5200 	ldr.w	r5, [r4, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 800314c:	42b0      	cmp	r0, r6
 800314e:	dc59      	bgt.n	8003204 <StartGSM+0x744>
										int count_shiftleft_dub = count_shiftleft;
 8003150:	4b8c      	ldr	r3, [pc, #560]	@ (8003384 <StartGSM+0x8c4>)
 8003152:	f893 c000 	ldrb.w	ip, [r3]
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8003156:	4666      	mov	r6, ip
 8003158:	01f6      	lsls	r6, r6, #7
										for (int i = 0; i < result_addr_queue.size; i++){
 800315a:	2100      	movs	r1, #0
 800315c:	4288      	cmp	r0, r1
 800315e:	dc6e      	bgt.n	800323e <StartGSM+0x77e>
									printQueue_GSM(&result_addr_queue);
 8003160:	4885      	ldr	r0, [pc, #532]	@ (8003378 <StartGSM+0x8b8>)
 8003162:	f000 f997 	bl	8003494 <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 8003166:	4b82      	ldr	r3, [pc, #520]	@ (8003370 <StartGSM+0x8b0>)
 8003168:	4986      	ldr	r1, [pc, #536]	@ (8003384 <StartGSM+0x8c4>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	780d      	ldrb	r5, [r1, #0]
 800316e:	eba2 12c5 	sub.w	r2, r2, r5, lsl #7
 8003172:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 800317a:	ea4f 10c5 	mov.w	r0, r5, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 800317e:	f0c0 808f 	bcc.w	80032a0 <StartGSM+0x7e0>
									end_addr_disconnect -= 128 *count_shiftleft;
 8003182:	4a81      	ldr	r2, [pc, #516]	@ (8003388 <StartGSM+0x8c8>)
										Debug_printf("Receiving MAIL\n");
 8003184:	f8df a234 	ldr.w	sl, [pc, #564]	@ 80033bc <StartGSM+0x8fc>
									end_addr_disconnect -= 128 *count_shiftleft;
 8003188:	6813      	ldr	r3, [r2, #0]
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 800318a:	4d80      	ldr	r5, [pc, #512]	@ (800338c <StartGSM+0x8cc>)
 800318c:	4e80      	ldr	r6, [pc, #512]	@ (8003390 <StartGSM+0x8d0>)
									end_addr_disconnect -= 128 *count_shiftleft;
 800318e:	1a1b      	subs	r3, r3, r0
 8003190:	6013      	str	r3, [r2, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8003192:	4880      	ldr	r0, [pc, #512]	@ (8003394 <StartGSM+0x8d4>)
									count_shiftleft = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	700b      	strb	r3, [r1, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8003198:	f002 f8a2 	bl	80052e0 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 800319c:	4650      	mov	r0, sl
 800319e:	f002 f89f 	bl	80052e0 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 80031a2:	497a      	ldr	r1, [pc, #488]	@ (800338c <StartGSM+0x8cc>)
 80031a4:	6830      	ldr	r0, [r6, #0]
 80031a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80031aa:	2200      	movs	r2, #0
 80031ac:	f005 fad4 	bl	8008758 <osMessageQueueGet>
										if(status == osOK){
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d179      	bne.n	80032a8 <StartGSM+0x7e8>
											Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 80031b4:	2208      	movs	r2, #8
 80031b6:	4978      	ldr	r1, [pc, #480]	@ (8003398 <StartGSM+0x8d8>)
 80031b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031ba:	f002 f87c 	bl	80052b6 <Uint32ToHex>
											Debug_printf("Receiving MAIL: %s\n", addr_out_gsm);
 80031be:	4976      	ldr	r1, [pc, #472]	@ (8003398 <StartGSM+0x8d8>)
 80031c0:	4876      	ldr	r0, [pc, #472]	@ (800339c <StartGSM+0x8dc>)
 80031c2:	f002 f88d 	bl	80052e0 <Debug_printf>
											if(is_keep_up == 0 && receivedDataGSM.address == 0x4F00){
 80031c6:	f8d9 2000 	ldr.w	r2, [r9]
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d1e6      	bne.n	800319c <StartGSM+0x6dc>
 80031ce:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80031d0:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80031d4:	d1e2      	bne.n	800319c <StartGSM+0x6dc>
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <StartGSM+0x8e0>)
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031d8:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031dc:	f8d3 c000 	ldr.w	ip, [r3]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031e0:	3180      	adds	r1, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031e2:	4594      	cmp	ip, r2
 80031e4:	ddda      	ble.n	800319c <StartGSM+0x6dc>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031e6:	1a8b      	subs	r3, r1, r2
 80031e8:	4258      	negs	r0, r3
 80031ea:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80031ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f2:	bf58      	it	pl
 80031f4:	4243      	negpl	r3, r0
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031f6:	3201      	adds	r2, #1
													result_addr_queue.data[idx] -= 128;
 80031f8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80031fc:	3880      	subs	r0, #128	@ 0x80
 80031fe:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 8003202:	e7ee      	b.n	80031e2 <StartGSM+0x722>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003204:	4435      	add	r5, r6
 8003206:	426a      	negs	r2, r5
 8003208:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800320c:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 8003210:	bf58      	it	pl
 8003212:	4255      	negpl	r5, r2
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800321a:	4290      	cmp	r0, r2
 800321c:	d20d      	bcs.n	800323a <StartGSM+0x77a>
												Uint32ToHex(result_addr_queue.data[idx], addr_out_gsm, 8);
 800321e:	2208      	movs	r2, #8
 8003220:	4651      	mov	r1, sl
 8003222:	f002 f848 	bl	80052b6 <Uint32ToHex>
												Debug_printf("CURRENT INDEX TO CHECK DELETING: %s", addr_out_gsm);
 8003226:	485f      	ldr	r0, [pc, #380]	@ (80033a4 <StartGSM+0x8e4>)
 8003228:	4651      	mov	r1, sl
 800322a:	f002 f859 	bl	80052e0 <Debug_printf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 800322e:	4852      	ldr	r0, [pc, #328]	@ (8003378 <StartGSM+0x8b8>)
 8003230:	4629      	mov	r1, r5
 8003232:	f000 f989 	bl	8003548 <deleteMiddle_GSM>
												i--;
 8003236:	4b4e      	ldr	r3, [pc, #312]	@ (8003370 <StartGSM+0x8b0>)
 8003238:	3e01      	subs	r6, #1
										for (int i = 0; i < result_addr_queue.size; i++) {
 800323a:	3601      	adds	r6, #1
 800323c:	e782      	b.n	8003144 <StartGSM+0x684>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800323e:	194b      	adds	r3, r1, r5
 8003240:	425a      	negs	r2, r3
 8003242:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800324a:	bf58      	it	pl
 800324c:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++){
 800324e:	3101      	adds	r1, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8003250:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003254:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8003258:	bf06      	itte	eq
 800325a:	ea4f 12cc 	moveq.w	r2, ip, lsl #7
 800325e:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8003262:	1b92      	subne	r2, r2, r6
 8003264:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8003268:	bf08      	it	eq
 800326a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++){
 800326e:	e775      	b.n	800315c <StartGSM+0x69c>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003270:	eb06 030c 	add.w	r3, r6, ip
 8003274:	425d      	negs	r5, r3
 8003276:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 800327a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327e:	bf58      	it	pl
 8003280:	426b      	negpl	r3, r5
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8003282:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8003286:	f5b5 4f9e 	cmp.w	r5, #20224	@ 0x4f00
 800328a:	d106      	bne.n	800329a <StartGSM+0x7da>
 800328c:	3301      	adds	r3, #1
 800328e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003292:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8003296:	bf08      	it	eq
 8003298:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800329a:	f10c 0c01 	add.w	ip, ip, #1
 800329e:	e723      	b.n	80030e8 <StartGSM+0x628>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 80032a0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e76c      	b.n	8003182 <StartGSM+0x6c2>
											Debug_printf("Have cleared out all mail queue\n");
 80032a8:	483f      	ldr	r0, [pc, #252]	@ (80033a8 <StartGSM+0x8e8>)
 80032aa:	f002 f819 	bl	80052e0 <Debug_printf>
									is_using_flash = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
								is_pushing_data = 0;
 80032b2:	4b3e      	ldr	r3, [pc, #248]	@ (80033ac <StartGSM+0x8ec>)
 80032b4:	2400      	movs	r4, #0
 80032b6:	601c      	str	r4, [r3, #0]
								if(result_final == 2){
 80032b8:	f8d8 3000 	ldr.w	r3, [r8]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d14a      	bne.n	8003356 <StartGSM+0x896>
									Debug_printf("---------------------SIM ERROR ----------------------\n");
 80032c0:	483b      	ldr	r0, [pc, #236]	@ (80033b0 <StartGSM+0x8f0>)
 80032c2:	f002 f80d 	bl	80052e0 <Debug_printf>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80032c6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032ca:	4621      	mov	r1, r4
 80032cc:	4827      	ldr	r0, [pc, #156]	@ (800336c <StartGSM+0x8ac>)
 80032ce:	f008 feed 	bl	800c0ac <memset>
									SIM_UART_ReInitializeRxDMA();
 80032d2:	f7fe f8f5 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
									uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80032d6:	4937      	ldr	r1, [pc, #220]	@ (80033b4 <StartGSM+0x8f4>)
 80032d8:	4822      	ldr	r0, [pc, #136]	@ (8003364 <StartGSM+0x8a4>)
 80032da:	f001 ffdd 	bl	8005298 <uart_transmit_string>
									reboot_SIM_module();
 80032de:	f7fe f937 	bl	8001550 <reboot_SIM_module>
				Debug_printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 80032e2:	4835      	ldr	r0, [pc, #212]	@ (80033b8 <StartGSM+0x8f8>)
 80032e4:	f001 fffc 	bl	80052e0 <Debug_printf>
				break;
 80032e8:	e474      	b.n	8002bd4 <StartGSM+0x114>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80032ea:	482a      	ldr	r0, [pc, #168]	@ (8003394 <StartGSM+0x8d4>)
										Debug_printf("Receiving MAIL\n");
 80032ec:	4f33      	ldr	r7, [pc, #204]	@ (80033bc <StartGSM+0x8fc>)
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 80032ee:	4d27      	ldr	r5, [pc, #156]	@ (800338c <StartGSM+0x8cc>)
 80032f0:	4e27      	ldr	r6, [pc, #156]	@ (8003390 <StartGSM+0x8d0>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80032f2:	f001 fff5 	bl	80052e0 <Debug_printf>
									int count_mail_end_addr = 0;
 80032f6:	2400      	movs	r4, #0
										Debug_printf("Receiving MAIL\n");
 80032f8:	4638      	mov	r0, r7
 80032fa:	f001 fff1 	bl	80052e0 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 80032fe:	4923      	ldr	r1, [pc, #140]	@ (800338c <StartGSM+0x8cc>)
 8003300:	6830      	ldr	r0, [r6, #0]
 8003302:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003306:	2200      	movs	r2, #0
 8003308:	f005 fa26 	bl	8008758 <osMessageQueueGet>
										if(status == osOK){
 800330c:	b970      	cbnz	r0, 800332c <StartGSM+0x86c>
											Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 800330e:	4922      	ldr	r1, [pc, #136]	@ (8003398 <StartGSM+0x8d8>)
 8003310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003312:	2208      	movs	r2, #8
 8003314:	f001 ffcf 	bl	80052b6 <Uint32ToHex>
											Debug_printf("Receiving MAIL: %s\n", addr_out_gsm);
 8003318:	491f      	ldr	r1, [pc, #124]	@ (8003398 <StartGSM+0x8d8>)
 800331a:	4820      	ldr	r0, [pc, #128]	@ (800339c <StartGSM+0x8dc>)
 800331c:	f001 ffe0 	bl	80052e0 <Debug_printf>
											if(receivedDataGSM.address == (FLASH_END_ADDRESS - 0X100)){
 8003320:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8003322:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8003326:	d1e7      	bne.n	80032f8 <StartGSM+0x838>
												count_mail_end_addr++;
 8003328:	3401      	adds	r4, #1
 800332a:	e7e5      	b.n	80032f8 <StartGSM+0x838>
											Debug_printf("Have cleared out all mail queue\n");
 800332c:	481e      	ldr	r0, [pc, #120]	@ (80033a8 <StartGSM+0x8e8>)
 800332e:	f001 ffd7 	bl	80052e0 <Debug_printf>
									if(count_mail_end_addr > 0){
 8003332:	2c00      	cmp	r4, #0
 8003334:	d0bd      	beq.n	80032b2 <StartGSM+0x7f2>
										if(start_addr_disconnect == (FLASH_END_ADDRESS - 0x100)){
 8003336:	4a0e      	ldr	r2, [pc, #56]	@ (8003370 <StartGSM+0x8b0>)
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											start_addr_disconnect -= count_mail_end_addr * 128;
 800333e:	bf0d      	iteet	eq
 8003340:	6813      	ldreq	r3, [r2, #0]
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 8003342:	6811      	ldrne	r1, [r2, #0]
 8003344:	f104 33ff 	addne.w	r3, r4, #4294967295
											start_addr_disconnect -= count_mail_end_addr * 128;
 8003348:	eba3 13c4 	subeq.w	r3, r3, r4, lsl #7
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 800334c:	bf18      	it	ne
 800334e:	eba1 13c3 	subne.w	r3, r1, r3, lsl #7
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e7ad      	b.n	80032b2 <StartGSM+0x7f2>
									Debug_printf("\n--------------------SENDING ERROR -----------------------\n");
 8003356:	481a      	ldr	r0, [pc, #104]	@ (80033c0 <StartGSM+0x900>)
 8003358:	f001 ffc2 	bl	80052e0 <Debug_printf>
									process++;
 800335c:	2408      	movs	r4, #8
									break;
 800335e:	e7c0      	b.n	80032e2 <StartGSM+0x822>
 8003360:	08011716 	.word	0x08011716
 8003364:	20007164 	.word	0x20007164
 8003368:	200024b8 	.word	0x200024b8
 800336c:	200024e0 	.word	0x200024e0
 8003370:	20002294 	.word	0x20002294
 8003374:	08011725 	.word	0x08011725
 8003378:	20002298 	.word	0x20002298
 800337c:	08011756 	.word	0x08011756
 8003380:	080117a3 	.word	0x080117a3
 8003384:	200024b0 	.word	0x200024b0
 8003388:	2000228c 	.word	0x2000228c
 800338c:	200021c0 	.word	0x200021c0
 8003390:	20003f88 	.word	0x20003f88
 8003394:	080115ab 	.word	0x080115ab
 8003398:	20002280 	.word	0x20002280
 800339c:	0801180c 	.word	0x0801180c
 80033a0:	200024c0 	.word	0x200024c0
 80033a4:	080117e8 	.word	0x080117e8
 80033a8:	0801161c 	.word	0x0801161c
 80033ac:	200024ac 	.word	0x200024ac
 80033b0:	08011820 	.word	0x08011820
 80033b4:	08011211 	.word	0x08011211
 80033b8:	08011893 	.word	0x08011893
 80033bc:	080115eb 	.word	0x080115eb
 80033c0:	08011857 	.word	0x08011857
 80033c4:	200024b4 	.word	0x200024b4
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80033c8:	4c11      	ldr	r4, [pc, #68]	@ (8003410 <StartGSM+0x950>)
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	f005 f90a 	bl	80085e4 <osThreadGetStackSpace>
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80033d0:	6821      	ldr	r1, [r4, #0]
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80033d2:	4602      	mov	r2, r0
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80033d4:	480f      	ldr	r0, [pc, #60]	@ (8003414 <StartGSM+0x954>)
 80033d6:	f001 ff83 	bl	80052e0 <Debug_printf>
				int result_close = close_connection(0);
 80033da:	2000      	movs	r0, #0
 80033dc:	f7ff f8e2 	bl	80025a4 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80033e0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 80033e4:	4601      	mov	r1, r0
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f43f aba4 	beq.w	8002b34 <StartGSM+0x74>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80033ec:	2100      	movs	r1, #0
 80033ee:	480a      	ldr	r0, [pc, #40]	@ (8003418 <StartGSM+0x958>)
 80033f0:	f008 fe5c 	bl	800c0ac <memset>
					SIM_UART_ReInitializeRxDMA();
 80033f4:	f7fe f864 	bl	80014c0 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 80033f8:	4908      	ldr	r1, [pc, #32]	@ (800341c <StartGSM+0x95c>)
 80033fa:	4809      	ldr	r0, [pc, #36]	@ (8003420 <StartGSM+0x960>)
 80033fc:	f001 ff4c 	bl	8005298 <uart_transmit_string>
						process = 4;
 8003400:	e411      	b.n	8002c26 <StartGSM+0x166>
				else process++;
 8003402:	2402      	movs	r4, #2
 8003404:	f7ff bbe6 	b.w	8002bd4 <StartGSM+0x114>
						process++;
 8003408:	2405      	movs	r4, #5
 800340a:	f7ff bbe3 	b.w	8002bd4 <StartGSM+0x114>
 800340e:	bf00      	nop
 8003410:	20004f44 	.word	0x20004f44
 8003414:	08010f7d 	.word	0x08010f7d
 8003418:	200024e0 	.word	0x200024e0
 800341c:	080118d3 	.word	0x080118d3
 8003420:	20007164 	.word	0x20007164

08003424 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8003424:	2300      	movs	r3, #0
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 800342e:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8003432:	4770      	bx	lr

08003434 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 8003434:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8003438:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 800343a:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 800343c:	d104      	bne.n	8003448 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 800343e:	480c      	ldr	r0, [pc, #48]	@ (8003470 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8003440:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 8003444:	f001 bf4c 	b.w	80052e0 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8003448:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 800344c:	3301      	adds	r3, #1
 800344e:	425c      	negs	r4, r3
 8003450:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003458:	bf58      	it	pl
 800345a:	4263      	negpl	r3, r4
    q->size++;
 800345c:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 800345e:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 8003462:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8003466:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 800346a:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 800346e:	4770      	bx	lr
 8003470:	080118f0 	.word	0x080118f0

08003474 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8003474:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8003476:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 800347a:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 800347c:	2100      	movs	r1, #0
 800347e:	f008 fe15 	bl	800c0ac <memset>
	}
    q->front = 0;
    q->rear = -1;
 8003482:	2300      	movs	r3, #0
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 800348c:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8003490:	bd10      	pop	{r4, pc}
	...

08003494 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8003494:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8003496:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 800349a:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 800349c:	b925      	cbnz	r5, 80034a8 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 800349e:	4813      	ldr	r0, [pc, #76]	@ (80034ec <printQueue_GSM+0x58>)
 80034a0:	f001 ff1e 	bl	80052e0 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 80034a4:	4628      	mov	r0, r5
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 80034a8:	4811      	ldr	r0, [pc, #68]	@ (80034f0 <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 80034aa:	4e12      	ldr	r6, [pc, #72]	@ (80034f4 <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 80034ac:	f001 ff18 	bl	80052e0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 80034b0:	2500      	movs	r5, #0
 80034b2:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80034b6:	42ab      	cmp	r3, r5
 80034b8:	dc05      	bgt.n	80034c6 <printQueue_GSM+0x32>
    Debug_printf("\n");
 80034ba:	480f      	ldr	r0, [pc, #60]	@ (80034f8 <printQueue_GSM+0x64>)
 80034bc:	f001 ff10 	bl	80052e0 <Debug_printf>
    return q->size;
 80034c0:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 80034c4:	e7ee      	b.n	80034a4 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 80034c6:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80034ca:	442b      	add	r3, r5
 80034cc:	425a      	negs	r2, r3
 80034ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034d6:	bf58      	it	pl
 80034d8:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 80034da:	4629      	mov	r1, r5
 80034dc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80034e0:	4630      	mov	r0, r6
 80034e2:	f001 fefd 	bl	80052e0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 80034e6:	3501      	adds	r5, #1
 80034e8:	e7e3      	b.n	80034b2 <printQueue_GSM+0x1e>
 80034ea:	bf00      	nop
 80034ec:	08011903 	.word	0x08011903
 80034f0:	08011917 	.word	0x08011917
 80034f4:	0801192d 	.word	0x0801192d
 80034f8:	080115a9 	.word	0x080115a9

080034fc <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 80034fc:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 80034fe:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 8003502:	2200      	movs	r2, #0
 8003504:	4295      	cmp	r5, r2
 8003506:	dc05      	bgt.n	8003514 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8003508:	4601      	mov	r1, r0
 800350a:	480d      	ldr	r0, [pc, #52]	@ (8003540 <checkAddrExistInQueue+0x44>)
 800350c:	f001 fee8 	bl	80052e0 <Debug_printf>
    return 0;
 8003510:	2000      	movs	r0, #0
 8003512:	e012      	b.n	800353a <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 8003514:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8003518:	4413      	add	r3, r2
 800351a:	425c      	negs	r4, r3
 800351c:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003524:	bf58      	it	pl
 8003526:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8003528:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800352c:	4283      	cmp	r3, r0
 800352e:	d105      	bne.n	800353c <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 8003530:	4601      	mov	r1, r0
 8003532:	4804      	ldr	r0, [pc, #16]	@ (8003544 <checkAddrExistInQueue+0x48>)
 8003534:	f001 fed4 	bl	80052e0 <Debug_printf>
            return 1;
 8003538:	2001      	movs	r0, #1
}
 800353a:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 800353c:	3201      	adds	r2, #1
 800353e:	e7e1      	b.n	8003504 <checkAddrExistInQueue+0x8>
 8003540:	0801193d 	.word	0x0801193d
 8003544:	08011941 	.word	0x08011941

08003548 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8003548:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 800354a:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 800354e:	b91d      	cbnz	r5, 8003558 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 8003550:	481f      	ldr	r0, [pc, #124]	@ (80035d0 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 8003552:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 8003554:	f001 bec4 	b.w	80052e0 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8003558:	2900      	cmp	r1, #0
 800355a:	db01      	blt.n	8003560 <deleteMiddle_GSM+0x18>
 800355c:	428d      	cmp	r5, r1
 800355e:	dc01      	bgt.n	8003564 <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 8003560:	481c      	ldr	r0, [pc, #112]	@ (80035d4 <deleteMiddle_GSM+0x8c>)
 8003562:	e7f6      	b.n	8003552 <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003564:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8003568:	440b      	add	r3, r1
 800356a:	425a      	negs	r2, r3
 800356c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8003574:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 800357c:	3d01      	subs	r5, #1
 800357e:	42b5      	cmp	r5, r6
 8003580:	dc0f      	bgt.n	80035a2 <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 8003582:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8003586:	337f      	adds	r3, #127	@ 0x7f
 8003588:	425a      	negs	r2, r3
 800358a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800358e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003592:	bf58      	it	pl
 8003594:	4253      	negpl	r3, r2
    q->size--;
 8003596:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 800359a:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 800359c:	480e      	ldr	r0, [pc, #56]	@ (80035d8 <deleteMiddle_GSM+0x90>)
 800359e:	f001 be9f 	b.w	80052e0 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 80035a2:	199a      	adds	r2, r3, r6
 80035a4:	4254      	negs	r4, r2
 80035a6:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80035aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ae:	bf58      	it	pl
 80035b0:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 80035b2:	1c54      	adds	r4, r2, #1
 80035b4:	4267      	negs	r7, r4
 80035b6:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80035ba:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80035be:	bf58      	it	pl
 80035c0:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 80035c2:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 80035c4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80035c8:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 80035cc:	e7d7      	b.n	800357e <deleteMiddle_GSM+0x36>
 80035ce:	bf00      	nop
 80035d0:	08011957 	.word	0x08011957
 80035d4:	0801197f 	.word	0x0801197f
 80035d8:	0801199e 	.word	0x0801199e

080035dc <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 80035dc:	b410      	push	{r4}
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 80035e2:	80a3      	strh	r3, [r4, #4]
{
 80035e4:	4611      	mov	r1, r2
 80035e6:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 80035e8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 80035ea:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 80035ec:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 80035ee:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 80035f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 80035f4:	f004 bf40 	b.w	8008478 <HAL_UART_Receive_DMA>

080035f8 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	4606      	mov	r6, r0
 80035fe:	460d      	mov	r5, r1
 8003600:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8003602:	2100      	movs	r1, #0
 8003604:	2211      	movs	r2, #17
 8003606:	f10d 0007 	add.w	r0, sp, #7
 800360a:	f008 fd4f 	bl	800c0ac <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800360e:	4808      	ldr	r0, [pc, #32]	@ (8003630 <set_time+0x38>)
	sTime.Hours = hr;
 8003610:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003614:	2200      	movs	r2, #0
 8003616:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8003618:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 800361c:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003620:	f003 fbc4 	bl	8006dac <HAL_RTC_SetTime>
 8003624:	b108      	cbz	r0, 800362a <set_time+0x32>
	{
		Error_Handler();
 8003626:	f000 fb86 	bl	8003d36 <Error_Handler>
	}
}
 800362a:	b006      	add	sp, #24
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	bf00      	nop
 8003630:	20007300 	.word	0x20007300

08003634 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8003634:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8003636:	2300      	movs	r3, #0
	sDate.Month = month;
 8003638:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 800363c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8003640:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003644:	461a      	mov	r2, r3
 8003646:	4806      	ldr	r0, [pc, #24]	@ (8003660 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003648:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800364c:	a901      	add	r1, sp, #4
 800364e:	f003 fc07 	bl	8006e60 <HAL_RTC_SetDate>
 8003652:	b108      	cbz	r0, 8003658 <set_date+0x24>
	{
		Error_Handler();
 8003654:	f000 fb6f 	bl	8003d36 <Error_Handler>
	}
}
 8003658:	b003      	add	sp, #12
 800365a:	f85d fb04 	ldr.w	pc, [sp], #4
 800365e:	bf00      	nop
 8003660:	20007300 	.word	0x20007300

08003664 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003666:	4d29      	ldr	r5, [pc, #164]	@ (800370c <get_RTC_time_date+0xa8>)
{
 8003668:	b0b3      	sub	sp, #204	@ 0xcc
 800366a:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800366c:	a90d      	add	r1, sp, #52	@ 0x34
 800366e:	2200      	movs	r2, #0
 8003670:	4628      	mov	r0, r5
 8003672:	f003 fc45 	bl	8006f00 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003676:	a906      	add	r1, sp, #24
 8003678:	2200      	movs	r2, #0
 800367a:	4628      	mov	r0, r5
 800367c:	f003 fc63 	bl	8006f46 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003680:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8003684:	4d22      	ldr	r5, [pc, #136]	@ (8003710 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 800368c:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <get_RTC_time_date+0xb0>)
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	210a      	movs	r1, #10
 8003692:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8003696:	a807      	add	r0, sp, #28
 8003698:	f008 fc0c 	bl	800beb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 800369c:	a907      	add	r1, sp, #28
 800369e:	4628      	mov	r0, r5
 80036a0:	f001 fdfa 	bl	8005298 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 80036a4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80036ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003718 <get_RTC_time_date+0xb4>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	210c      	movs	r1, #12
 80036b4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80036b8:	a80a      	add	r0, sp, #40	@ 0x28
 80036ba:	f008 fbfb 	bl	800beb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80036be:	a90a      	add	r1, sp, #40	@ 0x28
 80036c0:	4628      	mov	r0, r5
 80036c2:	f001 fde9 	bl	8005298 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 80036c6:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 80036ca:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 80036ce:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 80036d2:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 80036d6:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 80036da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80036de:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 80036e0:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 80036e2:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 80036e4:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 80036e6:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 80036e8:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 80036ea:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80036ee:	9200      	str	r2, [sp, #0]
 80036f0:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80036f4:	4a09      	ldr	r2, [pc, #36]	@ (800371c <get_RTC_time_date+0xb8>)
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	a812      	add	r0, sp, #72	@ 0x48
 80036fa:	f008 fbdb 	bl	800beb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 80036fe:	a912      	add	r1, sp, #72	@ 0x48
 8003700:	4628      	mov	r0, r5
 8003702:	f001 fdc9 	bl	8005298 <uart_transmit_string>
}
 8003706:	b033      	add	sp, #204	@ 0xcc
 8003708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370a:	bf00      	nop
 800370c:	20007300 	.word	0x20007300
 8003710:	20007164 	.word	0x20007164
 8003714:	08010ce6 	.word	0x08010ce6
 8003718:	080119c9 	.word	0x080119c9
 800371c:	080119db 	.word	0x080119db

08003720 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003720:	b510      	push	{r4, lr}
 8003722:	b086      	sub	sp, #24

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003724:	2214      	movs	r2, #20
 8003726:	2100      	movs	r1, #0
 8003728:	a801      	add	r0, sp, #4
 800372a:	f008 fcbf 	bl	800c0ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800372e:	4c16      	ldr	r4, [pc, #88]	@ (8003788 <MX_RTC_Init+0x68>)
 8003730:	4a16      	ldr	r2, [pc, #88]	@ (800378c <MX_RTC_Init+0x6c>)
  RTC_DateTypeDef sDate = {0};
 8003732:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003734:	e9c4 2300 	strd	r2, r3, [r4]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8003738:	217f      	movs	r1, #127	@ 0x7f
 800373a:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800373c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800373e:	e9c4 1202 	strd	r1, r2, [r4, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003742:	e9c4 3304 	strd	r3, r3, [r4, #16]
  RTC_DateTypeDef sDate = {0};
 8003746:	9300      	str	r3, [sp, #0]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003748:	61a3      	str	r3, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800374a:	f003 fadc 	bl	8006d06 <HAL_RTC_Init>
 800374e:	4602      	mov	r2, r0
 8003750:	b108      	cbz	r0, 8003756 <MX_RTC_Init+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003752:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003754:	e7fe      	b.n	8003754 <MX_RTC_Init+0x34>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003756:	e9cd 0004 	strd	r0, r0, [sp, #16]
  sTime.Hours = 0;
 800375a:	f8ad 0004 	strh.w	r0, [sp, #4]
  sTime.Seconds = 0;
 800375e:	f88d 0006 	strb.w	r0, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003762:	a901      	add	r1, sp, #4
 8003764:	4620      	mov	r0, r4
 8003766:	f003 fb21 	bl	8006dac <HAL_RTC_SetTime>
 800376a:	4602      	mov	r2, r0
 800376c:	b108      	cbz	r0, 8003772 <MX_RTC_Init+0x52>
 800376e:	b672      	cpsid	i
  while (1)
 8003770:	e7fe      	b.n	8003770 <MX_RTC_Init+0x50>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <MX_RTC_Init+0x70>)
 8003774:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003776:	4669      	mov	r1, sp
 8003778:	4620      	mov	r0, r4
 800377a:	f003 fb71 	bl	8006e60 <HAL_RTC_SetDate>
 800377e:	b108      	cbz	r0, 8003784 <MX_RTC_Init+0x64>
 8003780:	b672      	cpsid	i
  while (1)
 8003782:	e7fe      	b.n	8003782 <MX_RTC_Init+0x62>
}
 8003784:	b006      	add	sp, #24
 8003786:	bd10      	pop	{r4, pc}
 8003788:	20007300 	.word	0x20007300
 800378c:	40002800 	.word	0x40002800
 8003790:	00010101 	.word	0x00010101

08003794 <Initialize_RTC>:
    __HAL_RCC_PWR_CLK_ENABLE();
 8003794:	4b18      	ldr	r3, [pc, #96]	@ (80037f8 <Initialize_RTC+0x64>)
void Initialize_RTC(void) {
 8003796:	b510      	push	{r4, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800379e:	61da      	str	r2, [r3, #28]
 80037a0:	69db      	ldr	r3, [r3, #28]
void Initialize_RTC(void) {
 80037a2:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 80037ac:	f002 fde2 	bl	8006374 <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 80037b0:	4812      	ldr	r0, [pc, #72]	@ (80037fc <Initialize_RTC+0x68>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	f003 fbe9 	bl	8006f8a <HAL_RTCEx_BKUPRead>
 80037b8:	f243 24f2 	movw	r4, #13042	@ 0x32f2
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d00c      	beq.n	80037da <Initialize_RTC+0x46>
    	Debug_printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 80037c0:	480f      	ldr	r0, [pc, #60]	@ (8003800 <Initialize_RTC+0x6c>)
 80037c2:	f001 fd8d 	bl	80052e0 <Debug_printf>
        MX_RTC_Init();  // Configure RTC
 80037c6:	f7ff ffab 	bl	8003720 <MX_RTC_Init>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 80037ca:	480c      	ldr	r0, [pc, #48]	@ (80037fc <Initialize_RTC+0x68>)
 80037cc:	4622      	mov	r2, r4
 80037ce:	2101      	movs	r1, #1
}
 80037d0:	b008      	add	sp, #32
 80037d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 80037d6:	f003 bbd3 	b.w	8006f80 <HAL_RTCEx_BKUPWrite>
    	Debug_printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 80037da:	480a      	ldr	r0, [pc, #40]	@ (8003804 <Initialize_RTC+0x70>)
 80037dc:	f001 fd80 	bl	80052e0 <Debug_printf>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80037e0:	a903      	add	r1, sp, #12
 80037e2:	2200      	movs	r2, #0
 80037e4:	4805      	ldr	r0, [pc, #20]	@ (80037fc <Initialize_RTC+0x68>)
 80037e6:	f003 fb8b 	bl	8006f00 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80037ea:	2200      	movs	r2, #0
 80037ec:	a902      	add	r1, sp, #8
 80037ee:	4803      	ldr	r0, [pc, #12]	@ (80037fc <Initialize_RTC+0x68>)
 80037f0:	f003 fba9 	bl	8006f46 <HAL_RTC_GetDate>
}
 80037f4:	b008      	add	sp, #32
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	40021000 	.word	0x40021000
 80037fc:	20007300 	.word	0x20007300
 8003800:	08011a19 	.word	0x08011a19
 8003804:	08011a96 	.word	0x08011a96

08003808 <SystemClock_Config>:
{
 8003808:	b500      	push	{lr}
 800380a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800380c:	2228      	movs	r2, #40	@ 0x28
 800380e:	2100      	movs	r1, #0
 8003810:	a805      	add	r0, sp, #20
 8003812:	f008 fc4b 	bl	800c0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003816:	2214      	movs	r2, #20
 8003818:	2100      	movs	r1, #0
 800381a:	4668      	mov	r0, sp
 800381c:	f008 fc46 	bl	800c0ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003820:	223c      	movs	r2, #60	@ 0x3c
 8003822:	2100      	movs	r1, #0
 8003824:	eb0d 0002 	add.w	r0, sp, r2
 8003828:	f008 fc40 	bl	800c0ac <memset>
  HAL_PWR_EnableBkUpAccess();
 800382c:	f002 fda2 	bl	8006374 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003830:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <SystemClock_Config+0xa0>)
 8003832:	6a13      	ldr	r3, [r2, #32]
 8003834:	f023 0318 	bic.w	r3, r3, #24
 8003838:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800383a:	2306      	movs	r3, #6
 800383c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800383e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003840:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003844:	2310      	movs	r3, #16
 8003846:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003848:	2002      	movs	r0, #2
 800384a:	2300      	movs	r3, #0
 800384c:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003854:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003856:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003858:	f002 fd94 	bl	8006384 <HAL_RCC_OscConfig>
 800385c:	4601      	mov	r1, r0
 800385e:	b108      	cbz	r0, 8003864 <SystemClock_Config+0x5c>
 8003860:	b672      	cpsid	i
  while (1)
 8003862:	e7fe      	b.n	8003862 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003864:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003866:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800386a:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800386e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003870:	4668      	mov	r0, sp
 8003872:	f003 f807 	bl	8006884 <HAL_RCC_ClockConfig>
 8003876:	b108      	cbz	r0, 800387c <SystemClock_Config+0x74>
 8003878:	b672      	cpsid	i
  while (1)
 800387a:	e7fe      	b.n	800387a <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <SystemClock_Config+0xa4>)
 800387e:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003880:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003884:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003888:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800388a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800388e:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003890:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003894:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003896:	f003 f8eb 	bl	8006a70 <HAL_RCCEx_PeriphCLKConfig>
 800389a:	b108      	cbz	r0, 80038a0 <SystemClock_Config+0x98>
 800389c:	b672      	cpsid	i
  while (1)
 800389e:	e7fe      	b.n	800389e <SystemClock_Config+0x96>
}
 80038a0:	b01f      	add	sp, #124	@ 0x7c
 80038a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	00010187 	.word	0x00010187

080038b0 <main>:
{
 80038b0:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b2:	4db9      	ldr	r5, [pc, #740]	@ (8003b98 <main+0x2e8>)
{
 80038b4:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 80038b6:	f001 fdf9 	bl	80054ac <HAL_Init>
  SystemClock_Config();
 80038ba:	f7ff ffa5 	bl	8003808 <SystemClock_Config>
  	Initialize_RTC();
 80038be:	f7ff ff69 	bl	8003794 <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c2:	2214      	movs	r2, #20
 80038c4:	2100      	movs	r1, #0
 80038c6:	a808      	add	r0, sp, #32
 80038c8:	f008 fbf0 	bl	800c0ac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80038ce:	48b3      	ldr	r0, [pc, #716]	@ (8003b9c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038d4:	616b      	str	r3, [r5, #20]
 80038d6:	696b      	ldr	r3, [r5, #20]
 80038d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038dc:	9302      	str	r3, [sp, #8]
 80038de:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	696b      	ldr	r3, [r5, #20]
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e6:	616b      	str	r3, [r5, #20]
 80038e8:	696b      	ldr	r3, [r5, #20]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	9303      	str	r3, [sp, #12]
 80038f0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	696b      	ldr	r3, [r5, #20]
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f8:	616b      	str	r3, [r5, #20]
 80038fa:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80038fc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003902:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003904:	9304      	str	r3, [sp, #16]
 8003906:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003908:	f002 fd2e 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 800390c:	48a3      	ldr	r0, [pc, #652]	@ (8003b9c <main+0x2ec>)
 800390e:	2200      	movs	r2, #0
 8003910:	f240 3156 	movw	r1, #854	@ 0x356
 8003914:	f002 fd28 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003918:	48a1      	ldr	r0, [pc, #644]	@ (8003ba0 <main+0x2f0>)
 800391a:	2200      	movs	r2, #0
 800391c:	2104      	movs	r1, #4
 800391e:	f002 fd23 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003922:	489f      	ldr	r0, [pc, #636]	@ (8003ba0 <main+0x2f0>)
 8003924:	2201      	movs	r2, #1
 8003926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392a:	f002 fd1d 	bl	8006368 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800392e:	2201      	movs	r2, #1
 8003930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003938:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800393a:	f002 fd15 	bl	8006368 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393e:	2601      	movs	r6, #1
 8003940:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003944:	4895      	ldr	r0, [pc, #596]	@ (8003b9c <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003946:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003948:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394a:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003950:	f002 fc46 	bl	80061e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8003954:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003958:	4890      	ldr	r0, [pc, #576]	@ (8003b9c <main+0x2ec>)
 800395a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003960:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f002 fc3a 	bl	80061e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	488c      	ldr	r0, [pc, #560]	@ (8003ba0 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003970:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003972:	e9cd 8408 	strd	r8, r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003976:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	f002 fc32 	bl	80061e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397c:	4888      	ldr	r0, [pc, #544]	@ (8003ba0 <main+0x2f0>)
 800397e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003980:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003984:	e9cd 7608 	strd	r7, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800398c:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003990:	f002 fc26 	bl	80061e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	4882      	ldr	r0, [pc, #520]	@ (8003ba0 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003996:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399a:	e9cd 9608 	strd	r9, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399e:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f002 fc1d 	bl	80061e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80039a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	a908      	add	r1, sp, #32
 80039ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b0:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039b4:	e9cd 6a0a 	strd	r6, sl, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b8:	f002 fc12 	bl	80061e0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039bc:	696b      	ldr	r3, [r5, #20]
 80039be:	4333      	orrs	r3, r6
 80039c0:	616b      	str	r3, [r5, #20]
 80039c2:	696b      	ldr	r3, [r5, #20]
 80039c4:	4033      	ands	r3, r6
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039ca:	696b      	ldr	r3, [r5, #20]
 80039cc:	ea43 0308 	orr.w	r3, r3, r8
 80039d0:	616b      	str	r3, [r5, #20]
 80039d2:	696b      	ldr	r3, [r5, #20]
 80039d4:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80039d8:	4622      	mov	r2, r4
 80039da:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039dc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80039de:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039e0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80039e2:	f002 fad9 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80039e6:	200d      	movs	r0, #13
 80039e8:	f002 fb08 	bl	8005ffc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80039ec:	4622      	mov	r2, r4
 80039ee:	2105      	movs	r1, #5
 80039f0:	200f      	movs	r0, #15
 80039f2:	f002 fad1 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80039f6:	200f      	movs	r0, #15
 80039f8:	f002 fb00 	bl	8005ffc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80039fc:	4622      	mov	r2, r4
 80039fe:	2105      	movs	r1, #5
 8003a00:	2010      	movs	r0, #16
 8003a02:	f002 fac9 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003a06:	2010      	movs	r0, #16
 8003a08:	f002 faf8 	bl	8005ffc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	2105      	movs	r1, #5
 8003a10:	2038      	movs	r0, #56	@ 0x38
 8003a12:	f002 fac1 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003a16:	2038      	movs	r0, #56	@ 0x38
 8003a18:	f002 faf0 	bl	8005ffc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	2105      	movs	r1, #5
 8003a20:	203c      	movs	r0, #60	@ 0x3c
 8003a22:	f002 fab9 	bl	8005f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003a26:	203c      	movs	r0, #60	@ 0x3c
 8003a28:	f002 fae8 	bl	8005ffc <HAL_NVIC_EnableIRQ>
  MX_RTC_Init();
 8003a2c:	f7ff fe78 	bl	8003720 <MX_RTC_Init>
  hspi1.Instance = SPI1;
 8003a30:	485c      	ldr	r0, [pc, #368]	@ (8003ba4 <main+0x2f4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a32:	f8df e198 	ldr.w	lr, [pc, #408]	@ 8003bcc <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a36:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a38:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003a3c:	e9c0 e300 	strd	lr, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a40:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a48:	2510      	movs	r5, #16
 8003a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a4e:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003a52:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a54:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a5c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a60:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a62:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a64:	f003 fba5 	bl	80071b2 <HAL_SPI_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	b108      	cbz	r0, 8003a70 <main+0x1c0>
 8003a6c:	b672      	cpsid	i
  while (1)
 8003a6e:	e7fe      	b.n	8003a6e <main+0x1be>
  huart1.Instance = USART1;
 8003a70:	484d      	ldr	r0, [pc, #308]	@ (8003ba8 <main+0x2f8>)
  huart1.Init.BaudRate = 115200;
 8003a72:	4a4e      	ldr	r2, [pc, #312]	@ (8003bac <main+0x2fc>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a74:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003a76:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7a:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a7e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a82:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a86:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a8a:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003a8c:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a90:	f004 fc76 	bl	8008380 <HAL_UART_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	b108      	cbz	r0, 8003a9c <main+0x1ec>
 8003a98:	b672      	cpsid	i
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <main+0x1ea>
  huart2.Instance = USART2;
 8003a9c:	4844      	ldr	r0, [pc, #272]	@ (8003bb0 <main+0x300>)
  huart2.Init.BaudRate = 9600;
 8003a9e:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8003bd0 <main+0x320>
 8003aa2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003aa6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aaa:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aae:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003ab6:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aba:	f004 fc61 	bl	8008380 <HAL_UART_Init>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	b108      	cbz	r0, 8003ac6 <main+0x216>
 8003ac2:	b672      	cpsid	i
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <main+0x214>
  huart3.Instance = USART3;
 8003ac6:	483b      	ldr	r0, [pc, #236]	@ (8003bb4 <main+0x304>)
 8003ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <main+0x308>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003aca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8003ace:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ad2:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ada:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ade:	f004 fc4f 	bl	8008380 <HAL_UART_Init>
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	b108      	cbz	r0, 8003aea <main+0x23a>
 8003ae6:	b672      	cpsid	i
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <main+0x238>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aea:	462a      	mov	r2, r5
 8003aec:	4601      	mov	r1, r0
 8003aee:	a808      	add	r0, sp, #32
 8003af0:	f008 fadc 	bl	800c0ac <memset>
  htim3.Instance = TIM3;
 8003af4:	4d31      	ldr	r5, [pc, #196]	@ (8003bbc <main+0x30c>)
  htim3.Init.Prescaler = 8000;
 8003af6:	4832      	ldr	r0, [pc, #200]	@ (8003bc0 <main+0x310>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af8:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 8003afa:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003afe:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8003b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b06:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b08:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b10:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b12:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b14:	f003 ffdc 	bl	8007ad0 <HAL_TIM_Base_Init>
 8003b18:	b108      	cbz	r0, 8003b1e <main+0x26e>
 8003b1a:	b672      	cpsid	i
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <main+0x26c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b1e:	a908      	add	r1, sp, #32
 8003b20:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b22:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b26:	f004 f80d 	bl	8007b44 <HAL_TIM_ConfigClockSource>
 8003b2a:	b108      	cbz	r0, 8003b30 <main+0x280>
 8003b2c:	b672      	cpsid	i
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <main+0x27e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b30:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b32:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b34:	a905      	add	r1, sp, #20
 8003b36:	4628      	mov	r0, r5
 8003b38:	f004 f89e 	bl	8007c78 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	b108      	cbz	r0, 8003b44 <main+0x294>
 8003b40:	b672      	cpsid	i
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <main+0x292>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b44:	4c1f      	ldr	r4, [pc, #124]	@ (8003bc4 <main+0x314>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b46:	4601      	mov	r1, r0
 8003b48:	2218      	movs	r2, #24
 8003b4a:	a808      	add	r0, sp, #32
 8003b4c:	f008 faae 	bl	800c0ac <memset>
  hadc2.Instance = ADC2;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <main+0x318>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b52:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b56:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b58:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b5c:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b60:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b64:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8003b68:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003b6a:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003b6e:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b70:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b72:	f001 fcf5 	bl	8005560 <HAL_ADC_Init>
 8003b76:	b108      	cbz	r0, 8003b7c <main+0x2cc>
 8003b78:	b672      	cpsid	i
  while (1)
 8003b7a:	e7fe      	b.n	8003b7a <main+0x2ca>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b7c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8003b80:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b84:	a908      	add	r1, sp, #32
 8003b86:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b88:	e9cd 8608 	strd	r8, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b8c:	f001 ffea 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003b90:	4604      	mov	r4, r0
 8003b92:	b1f8      	cbz	r0, 8003bd4 <main+0x324>
 8003b94:	b672      	cpsid	i
  while (1)
 8003b96:	e7fe      	b.n	8003b96 <main+0x2e6>
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	48000800 	.word	0x48000800
 8003ba0:	48000400 	.word	0x48000400
 8003ba4:	2000729c 	.word	0x2000729c
 8003ba8:	20007164 	.word	0x20007164
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	200070dc 	.word	0x200070dc
 8003bb4:	20007054 	.word	0x20007054
 8003bb8:	40004800 	.word	0x40004800
 8003bbc:	200071ec 	.word	0x200071ec
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	200073f8 	.word	0x200073f8
 8003bc8:	50000100 	.word	0x50000100
 8003bcc:	40013000 	.word	0x40013000
 8003bd0:	40004400 	.word	0x40004400
  ADC_MultiModeTypeDef multimode = {0};
 8003bd4:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8003bd8:	9007      	str	r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bda:	4601      	mov	r1, r0
 8003bdc:	2218      	movs	r2, #24
 8003bde:	a808      	add	r0, sp, #32
 8003be0:	f008 fa64 	bl	800c0ac <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003be4:	483d      	ldr	r0, [pc, #244]	@ (8003cdc <main+0x42c>)
  hadc3.Instance = ADC3;
 8003be6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce0 <main+0x430>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003be8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bec:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bf0:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bf4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bf8:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 8003bfc:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003bfe:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003c02:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003c04:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003c06:	f001 fcab 	bl	8005560 <HAL_ADC_Init>
 8003c0a:	b108      	cbz	r0, 8003c10 <main+0x360>
 8003c0c:	b672      	cpsid	i
  while (1)
 8003c0e:	e7fe      	b.n	8003c0e <main+0x35e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c10:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003c12:	4832      	ldr	r0, [pc, #200]	@ (8003cdc <main+0x42c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c14:	9305      	str	r3, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003c16:	a905      	add	r1, sp, #20
 8003c18:	f002 f928 	bl	8005e6c <HAL_ADCEx_MultiModeConfigChannel>
 8003c1c:	b108      	cbz	r0, 8003c22 <main+0x372>
 8003c1e:	b672      	cpsid	i
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <main+0x370>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c22:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c24:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8003c28:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c2c:	2501      	movs	r5, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c2e:	482b      	ldr	r0, [pc, #172]	@ (8003cdc <main+0x42c>)
 8003c30:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c32:	e9cd 3508 	strd	r3, r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003c36:	f001 ff95 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	b108      	cbz	r0, 8003c42 <main+0x392>
 8003c3e:	b672      	cpsid	i
  while (1)
 8003c40:	e7fe      	b.n	8003c40 <main+0x390>
  hspi2.Instance = SPI2;
 8003c42:	4828      	ldr	r0, [pc, #160]	@ (8003ce4 <main+0x434>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c44:	4928      	ldr	r1, [pc, #160]	@ (8003ce8 <main+0x438>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c46:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c4c:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003c50:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c54:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c5c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003c60:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c62:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c66:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c6a:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c6e:	2308      	movs	r3, #8
 8003c70:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c72:	f003 fa9e 	bl	80071b2 <HAL_SPI_Init>
 8003c76:	4604      	mov	r4, r0
 8003c78:	b108      	cbz	r0, 8003c7e <main+0x3ce>
 8003c7a:	b672      	cpsid	i
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <main+0x3cc>
  osKernelInitialize();
 8003c7e:	f004 fc19 	bl	80084b4 <osKernelInitialize>
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 8003c82:	4a1a      	ldr	r2, [pc, #104]	@ (8003cec <main+0x43c>)
 8003c84:	2158      	movs	r1, #88	@ 0x58
 8003c86:	2003      	movs	r0, #3
 8003c88:	f004 fcda 	bl	8008640 <osMessageQueueNew>
 8003c8c:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <main+0x440>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 8003c8e:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <main+0x444>)
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 8003c90:	6018      	str	r0, [r3, #0]
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 8003c92:	2160      	movs	r1, #96	@ 0x60
 8003c94:	2040      	movs	r0, #64	@ 0x40
 8003c96:	f004 fcd3 	bl	8008640 <osMessageQueueNew>
 8003c9a:	4b17      	ldr	r3, [pc, #92]	@ (8003cf8 <main+0x448>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <main+0x44c>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 8003c9e:	6018      	str	r0, [r3, #0]
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8003ca0:	2180      	movs	r1, #128	@ 0x80
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f004 fccc 	bl	8008640 <osMessageQueueNew>
 8003ca8:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <main+0x450>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <main+0x454>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8003cac:	6018      	str	r0, [r3, #0]
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4815      	ldr	r0, [pc, #84]	@ (8003d08 <main+0x458>)
 8003cb2:	f004 fc3b 	bl	800852c <osThreadNew>
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <main+0x45c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003cb8:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <main+0x460>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003cba:	6018      	str	r0, [r3, #0]
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4815      	ldr	r0, [pc, #84]	@ (8003d14 <main+0x464>)
 8003cc0:	f004 fc34 	bl	800852c <osThreadNew>
 8003cc4:	4b14      	ldr	r3, [pc, #80]	@ (8003d18 <main+0x468>)
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <main+0x46c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003cc8:	6018      	str	r0, [r3, #0]
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8003cca:	4621      	mov	r1, r4
 8003ccc:	4814      	ldr	r0, [pc, #80]	@ (8003d20 <main+0x470>)
 8003cce:	f004 fc2d 	bl	800852c <osThreadNew>
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <main+0x474>)
 8003cd4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003cd6:	f004 fc09 	bl	80084ec <osKernelStart>
  while (1)
 8003cda:	e7fe      	b.n	8003cda <main+0x42a>
 8003cdc:	200073a8 	.word	0x200073a8
 8003ce0:	50000400 	.word	0x50000400
 8003ce4:	20007238 	.word	0x20007238
 8003ce8:	40003800 	.word	0x40003800
 8003cec:	08011ba8 	.word	0x08011ba8
 8003cf0:	200040e4 	.word	0x200040e4
 8003cf4:	08011b90 	.word	0x08011b90
 8003cf8:	20003f88 	.word	0x20003f88
 8003cfc:	08011b78 	.word	0x08011b78
 8003d00:	20002734 	.word	0x20002734
 8003d04:	08011be4 	.word	0x08011be4
 8003d08:	080012c9 	.word	0x080012c9
 8003d0c:	20005724 	.word	0x20005724
 8003d10:	08011c08 	.word	0x08011c08
 8003d14:	08004c25 	.word	0x08004c25
 8003d18:	20006f84 	.word	0x20006f84
 8003d1c:	08011bc0 	.word	0x08011bc0
 8003d20:	08002ac1 	.word	0x08002ac1
 8003d24:	20004f44 	.word	0x20004f44

08003d28 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003d28:	6803      	ldr	r3, [r0, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003d30:	f001 bbce 	b.w	80054d0 <HAL_IncTick>
}
 8003d34:	4770      	bx	lr

08003d36 <Error_Handler>:
 8003d36:	b672      	cpsid	i
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <Error_Handler+0x2>
	...

08003d3c <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003d3c:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003d3e:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003d4a:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003d4e:	f002 fb0b 	bl	8006368 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8003d52:	4810      	ldr	r0, [pc, #64]	@ (8003d94 <W25_ReadStatusReg1+0x58>)
 8003d54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f10d 0106 	add.w	r1, sp, #6
 8003d5e:	f003 fa96 	bl	800728e <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8003d62:	4604      	mov	r4, r0
 8003d64:	b940      	cbnz	r0, 8003d78 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8003d66:	480b      	ldr	r0, [pc, #44]	@ (8003d94 <W25_ReadStatusReg1+0x58>)
 8003d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f10d 0107 	add.w	r1, sp, #7
 8003d72:	f003 fc86 	bl	8007682 <HAL_SPI_Receive>
 8003d76:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d82:	f002 faf1 	bl	8006368 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003d86:	b91c      	cbnz	r4, 8003d90 <W25_ReadStatusReg1+0x54>
 8003d88:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003d90:	20ff      	movs	r0, #255	@ 0xff
 8003d92:	e7fb      	b.n	8003d8c <W25_ReadStatusReg1+0x50>
 8003d94:	2000729c 	.word	0x2000729c

08003d98 <W25_Busy>:

int W25_Busy(void)
{
 8003d98:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003d9a:	f7ff ffcf 	bl	8003d3c <W25_ReadStatusReg1>
}
 8003d9e:	f000 0001 	and.w	r0, r0, #1
 8003da2:	bd08      	pop	{r3, pc}

08003da4 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003da8:	f001 fb9e 	bl	80054e8 <HAL_GetTick>
 8003dac:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8003dae:	f7ff fff3 	bl	8003d98 <W25_Busy>
 8003db2:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003db4:	f001 fb98 	bl	80054e8 <HAL_GetTick>
 8003db8:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003dba:	b114      	cbz	r4, 8003dc2 <W25_DelayWhileBusy+0x1e>
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	d3f6      	bcc.n	8003dae <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003dc0:	2403      	movs	r4, #3
	return retval;
}
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}

08003dc6 <W25_Reset>:
void W25_Reset(){
 8003dc6:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd2:	f002 fac9 	bl	8006368 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003de0:	f002 fac2 	bl	8006368 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dee:	f002 fabb 	bl	8006368 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003df2:	2201      	movs	r2, #1
 8003df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dfc:	f002 fab4 	bl	8006368 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003e00:	2200      	movs	r2, #0
 8003e02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e0a:	f002 faad 	bl	8006368 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8003e12:	2201      	movs	r2, #1
 8003e14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e1c:	f002 baa4 	b.w	8006368 <HAL_GPIO_WritePin>

08003e20 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003e24:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003e26:	2200      	movs	r2, #0
 8003e28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003e30:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003e34:	f002 fa98 	bl	8006368 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003e38:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	2304      	movs	r3, #4
 8003e42:	f10d 010b 	add.w	r1, sp, #11
 8003e46:	4820      	ldr	r0, [pc, #128]	@ (8003ec8 <W25_ReadJedecID+0xa8>)
 8003e48:	f003 faeb 	bl	8007422 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003e4c:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003e4e:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003e50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e58:	f002 fa86 	bl	8006368 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <W25_ReadJedecID+0xac>)
 8003e5e:	aa07      	add	r2, sp, #28
 8003e60:	f103 0710 	add.w	r7, r3, #16
 8003e64:	4616      	mov	r6, r2
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	c403      	stmia	r4!, {r0, r1}
 8003e6e:	3308      	adds	r3, #8
 8003e70:	42bb      	cmp	r3, r7
 8003e72:	4622      	mov	r2, r4
 8003e74:	d1f7      	bne.n	8003e66 <W25_ReadJedecID+0x46>
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7fc fa08 	bl	8000290 <strlen>
 8003e80:	4631      	mov	r1, r6
 8003e82:	b282      	uxth	r2, r0
 8003e84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e88:	4811      	ldr	r0, [pc, #68]	@ (8003ed0 <W25_ReadJedecID+0xb0>)
 8003e8a:	f004 f9cf 	bl	800822c <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8003e8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003e92:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	490e      	ldr	r1, [pc, #56]	@ (8003ed4 <W25_ReadJedecID+0xb4>)
 8003e9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003e9e:	a804      	add	r0, sp, #16
 8003ea0:	f008 f83c 	bl	800bf1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003ea4:	a904      	add	r1, sp, #16
 8003ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eaa:	220b      	movs	r2, #11
 8003eac:	4808      	ldr	r0, [pc, #32]	@ (8003ed0 <W25_ReadJedecID+0xb0>)
 8003eae:	f004 f9bd 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8003eb2:	4909      	ldr	r1, [pc, #36]	@ (8003ed8 <W25_ReadJedecID+0xb8>)
 8003eb4:	4806      	ldr	r0, [pc, #24]	@ (8003ed0 <W25_ReadJedecID+0xb0>)
 8003eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f004 f9b6 	bl	800822c <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	b00d      	add	sp, #52	@ 0x34
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	2000729c 	.word	0x2000729c
 8003ecc:	08011c3d 	.word	0x08011c3d
 8003ed0:	20007164 	.word	0x20007164
 8003ed4:	08011c2c 	.word	0x08011c2c
 8003ed8:	080115a9 	.word	0x080115a9

08003edc <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003edc:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003ede:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003eea:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003eee:	f002 fa3b 	bl	8006368 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ef6:	f10d 0107 	add.w	r1, sp, #7
 8003efa:	2201      	movs	r2, #1
 8003efc:	4806      	ldr	r0, [pc, #24]	@ (8003f18 <W25_WriteEnable+0x3c>)
 8003efe:	f003 f9c6 	bl	800728e <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003f02:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003f04:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003f06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f0e:	f002 fa2b 	bl	8006368 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8003f12:	4620      	mov	r0, r4
 8003f14:	b002      	add	sp, #8
 8003f16:	bd10      	pop	{r4, pc}
 8003f18:	2000729c 	.word	0x2000729c

08003f1c <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003f1c:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003f1e:	2320      	movs	r3, #32
 8003f20:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f24:	0c03      	lsrs	r3, r0, #16
 8003f26:	ba40      	rev16	r0, r0
 8003f28:	f88d 3005 	strb.w	r3, [sp, #5]
 8003f2c:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003f30:	f7ff ffd4 	bl	8003edc <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f3e:	f002 fa13 	bl	8006368 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003f42:	2204      	movs	r2, #4
 8003f44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f48:	eb0d 0102 	add.w	r1, sp, r2
 8003f4c:	4808      	ldr	r0, [pc, #32]	@ (8003f70 <W25_SectorErase+0x54>)
 8003f4e:	f003 f99e 	bl	800728e <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003f52:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003f54:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003f56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f5e:	f002 fa03 	bl	8006368 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8003f62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f66:	f7ff ff1d 	bl	8003da4 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd10      	pop	{r4, pc}
 8003f70:	2000729c 	.word	0x2000729c

08003f74 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003f74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	4606      	mov	r6, r0
 8003f7a:	4688      	mov	r8, r1
 8003f7c:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8003f7e:	f7ff ffad 	bl	8003edc <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003f82:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8004004 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003f86:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003f88:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003f8c:	b91f      	cbnz	r7, 8003f96 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8003f8e:	4620      	mov	r0, r4
 8003f90:	b002      	add	sp, #8
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003f96:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003f98:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003f9a:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003f9e:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003fa0:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003fa4:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003fa8:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003faa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003fb6:	bf28      	it	cs
 8003fb8:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003fba:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003fbe:	f002 f9d3 	bl	8006368 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	480f      	ldr	r0, [pc, #60]	@ (8004004 <W25_PageProgram+0x90>)
 8003fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fca:	eb0d 0102 	add.w	r1, sp, r2
 8003fce:	f003 f95e 	bl	800728e <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	b938      	cbnz	r0, 8003fe6 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8003fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fda:	b2aa      	uxth	r2, r5
 8003fdc:	4641      	mov	r1, r8
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f003 f955 	bl	800728e <HAL_SPI_Transmit>
 8003fe4:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ff0:	f002 f9ba 	bl	8006368 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003ff4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003ff8:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003ffa:	442e      	add	r6, r5
		buf += count_this_pass;
 8003ffc:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003ffe:	f7ff fed1 	bl	8003da4 <W25_DelayWhileBusy>
 8004002:	e7c3      	b.n	8003f8c <W25_PageProgram+0x18>
 8004004:	2000729c 	.word	0x2000729c

08004008 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8004008:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800400a:	2303      	movs	r3, #3
 800400c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004010:	0c03      	lsrs	r3, r0, #16
 8004012:	ba40      	rev16	r0, r0
 8004014:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8004018:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800401a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800401e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8004022:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004024:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8004026:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800402a:	f002 f99d 	bl	8006368 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 800402e:	2204      	movs	r2, #4
 8004030:	480d      	ldr	r0, [pc, #52]	@ (8004068 <W25_ReadData+0x60>)
 8004032:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004036:	eb0d 0102 	add.w	r1, sp, r2
 800403a:	f003 f928 	bl	800728e <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800403e:	4604      	mov	r4, r0
 8004040:	b978      	cbnz	r0, 8004062 <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8004042:	4809      	ldr	r0, [pc, #36]	@ (8004068 <W25_ReadData+0x60>)
 8004044:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004048:	b2b2      	uxth	r2, r6
 800404a:	4629      	mov	r1, r5
 800404c:	f003 fb19 	bl	8007682 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8004050:	4604      	mov	r4, r0
 8004052:	b130      	cbz	r0, 8004062 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8004054:	2201      	movs	r2, #1
 8004056:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800405a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800405e:	f002 f983 	bl	8006368 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8004062:	4620      	mov	r0, r4
 8004064:	b002      	add	sp, #8
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	2000729c 	.word	0x2000729c

0800406c <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 800406c:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 800406e:	213b      	movs	r1, #59	@ 0x3b
 8004070:	f008 f856 	bl	800c120 <strrchr>
    if (!last_semicolon) {
 8004074:	4604      	mov	r4, r0
 8004076:	b1a0      	cbz	r0, 80040a2 <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8004078:	3001      	adds	r0, #1
 800407a:	f7fc f909 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 800407e:	2805      	cmp	r0, #5
 8004080:	d90f      	bls.n	80040a2 <IsPageValid+0x36>
 8004082:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8004084:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004088:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800408c:	2909      	cmp	r1, #9
 800408e:	d904      	bls.n	800409a <IsPageValid+0x2e>
 8004090:	f023 0320 	bic.w	r3, r3, #32
 8004094:	3b41      	subs	r3, #65	@ 0x41
 8004096:	2b05      	cmp	r3, #5
 8004098:	d803      	bhi.n	80040a2 <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 800409a:	4294      	cmp	r4, r2
 800409c:	d1f2      	bne.n	8004084 <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 800409e:	2001      	movs	r0, #1
}
 80040a0:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 80040a2:	2000      	movs	r0, #0
 80040a4:	e7fc      	b.n	80040a0 <IsPageValid+0x34>

080040a6 <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 80040a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040a8:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 80040aa:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 80040ac:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 80040ae:	a901      	add	r1, sp, #4
 80040b0:	f001 f901 	bl	80052b6 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 80040b4:	4620      	mov	r0, r4
 80040b6:	f7fc f8eb 	bl	8000290 <strlen>
 80040ba:	3806      	subs	r0, #6
 80040bc:	f8dd 2006 	ldr.w	r2, [sp, #6]
 80040c0:	5022      	str	r2, [r4, r0]
 80040c2:	1823      	adds	r3, r4, r0
 80040c4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80040c8:	809a      	strh	r2, [r3, #4]
}
 80040ca:	b004      	add	sp, #16
 80040cc:	bd10      	pop	{r4, pc}
	...

080040d0 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 80040d4:	488e      	ldr	r0, [pc, #568]	@ (8004310 <W25_ShiftLeftFlashDataByPage+0x240>)
int W25_ShiftLeftFlashDataByPage(void) {
 80040d6:	b08f      	sub	sp, #60	@ 0x3c
    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 80040d8:	f001 f902 	bl	80052e0 <Debug_printf>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 80040dc:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 80040e0:	f7ff fe71 	bl	8003dc6 <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 80040e4:	498b      	ldr	r1, [pc, #556]	@ (8004314 <W25_ShiftLeftFlashDataByPage+0x244>)
 80040e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040ea:	4630      	mov	r0, r6
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 80040ec:	f506 5980 	add.w	r9, r6, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 80040f0:	f7ff ff8a 	bl	8004008 <W25_ReadData>
 80040f4:	b138      	cbz	r0, 8004106 <W25_ShiftLeftFlashDataByPage+0x36>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 80040f6:	4888      	ldr	r0, [pc, #544]	@ (8004318 <W25_ShiftLeftFlashDataByPage+0x248>)

        // Step 2: Read the first page of the next sector (if exists)
        if (next_sector_start < FLASH_END_ADDRESS) {
        	W25_Reset();
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 80040f8:	f001 f8f2 	bl	80052e0 <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 80040fc:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 80040fe:	4620      	mov	r0, r4
 8004100:	b00f      	add	sp, #60	@ 0x3c
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "\nFirst page of Flash DATA at Reading All Sector: \n";
 8004106:	4b85      	ldr	r3, [pc, #532]	@ (800431c <W25_ShiftLeftFlashDataByPage+0x24c>)
 8004108:	aa01      	add	r2, sp, #4
 800410a:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 800410e:	4614      	mov	r4, r2
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	4615      	mov	r5, r2
 8004116:	c503      	stmia	r5!, {r0, r1}
 8004118:	3308      	adds	r3, #8
 800411a:	42bb      	cmp	r3, r7
 800411c:	462a      	mov	r2, r5
 800411e:	d1f7      	bne.n	8004110 <W25_ShiftLeftFlashDataByPage+0x40>
 8004120:	8819      	ldrh	r1, [r3, #0]
 8004122:	789b      	ldrb	r3, [r3, #2]
 8004124:	8029      	strh	r1, [r5, #0]
 8004126:	70ab      	strb	r3, [r5, #2]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004128:	4620      	mov	r0, r4
 800412a:	f7fc f8b1 	bl	8000290 <strlen>
 800412e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004132:	b282      	uxth	r2, r0
 8004134:	4621      	mov	r1, r4
 8004136:	487a      	ldr	r0, [pc, #488]	@ (8004320 <W25_ShiftLeftFlashDataByPage+0x250>)
 8004138:	f004 f878 	bl	800822c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 800413c:	4975      	ldr	r1, [pc, #468]	@ (8004314 <W25_ShiftLeftFlashDataByPage+0x244>)
 800413e:	4878      	ldr	r0, [pc, #480]	@ (8004320 <W25_ShiftLeftFlashDataByPage+0x250>)
 8004140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	f004 f871 	bl	800822c <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800414a:	4876      	ldr	r0, [pc, #472]	@ (8004324 <W25_ShiftLeftFlashDataByPage+0x254>)
 800414c:	f001 f8c8 	bl	80052e0 <Debug_printf>
        if (next_sector_start < FLASH_END_ADDRESS) {
 8004150:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 8004154:	d02e      	beq.n	80041b4 <W25_ShiftLeftFlashDataByPage+0xe4>
        	W25_Reset();
 8004156:	f7ff fe36 	bl	8003dc6 <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 800415a:	4973      	ldr	r1, [pc, #460]	@ (8004328 <W25_ShiftLeftFlashDataByPage+0x258>)
 800415c:	2280      	movs	r2, #128	@ 0x80
 800415e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004162:	f7ff ff51 	bl	8004008 <W25_ReadData>
 8004166:	b108      	cbz	r0, 800416c <W25_ShiftLeftFlashDataByPage+0x9c>
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 8004168:	4870      	ldr	r0, [pc, #448]	@ (800432c <W25_ShiftLeftFlashDataByPage+0x25c>)
 800416a:	e7c5      	b.n	80040f8 <W25_ShiftLeftFlashDataByPage+0x28>
            	char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 800416c:	4b70      	ldr	r3, [pc, #448]	@ (8004330 <W25_ShiftLeftFlashDataByPage+0x260>)
 800416e:	4622      	mov	r2, r4
 8004170:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	4615      	mov	r5, r2
 800417a:	c503      	stmia	r5!, {r0, r1}
 800417c:	3308      	adds	r3, #8
 800417e:	42bb      	cmp	r3, r7
 8004180:	462a      	mov	r2, r5
 8004182:	d1f7      	bne.n	8004174 <W25_ShiftLeftFlashDataByPage+0xa4>
 8004184:	8819      	ldrh	r1, [r3, #0]
 8004186:	789b      	ldrb	r3, [r3, #2]
 8004188:	8029      	strh	r1, [r5, #0]
 800418a:	70ab      	strb	r3, [r5, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800418c:	4620      	mov	r0, r4
 800418e:	f7fc f87f 	bl	8000290 <strlen>
 8004192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004196:	b282      	uxth	r2, r0
 8004198:	4621      	mov	r1, r4
 800419a:	4861      	ldr	r0, [pc, #388]	@ (8004320 <W25_ShiftLeftFlashDataByPage+0x250>)
 800419c:	f004 f846 	bl	800822c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 80041a0:	4961      	ldr	r1, [pc, #388]	@ (8004328 <W25_ShiftLeftFlashDataByPage+0x258>)
 80041a2:	485f      	ldr	r0, [pc, #380]	@ (8004320 <W25_ShiftLeftFlashDataByPage+0x250>)
 80041a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a8:	2280      	movs	r2, #128	@ 0x80
 80041aa:	f004 f83f 	bl	800822c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 80041ae:	485d      	ldr	r0, [pc, #372]	@ (8004324 <W25_ShiftLeftFlashDataByPage+0x254>)
 80041b0:	f001 f896 	bl	80052e0 <Debug_printf>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 80041b4:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8004314 <W25_ShiftLeftFlashDataByPage+0x244>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80041b8:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 8004320 <W25_ShiftLeftFlashDataByPage+0x250>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 80041bc:	465d      	mov	r5, fp
 80041be:	2700      	movs	r7, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 80041c0:	46aa      	mov	sl, r5
 80041c2:	3580      	adds	r5, #128	@ 0x80
 80041c4:	4628      	mov	r0, r5
 80041c6:	f7ff ff51 	bl	800406c <IsPageValid>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d04e      	beq.n	800426c <W25_ShiftLeftFlashDataByPage+0x19c>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 80041ce:	4b59      	ldr	r3, [pc, #356]	@ (8004334 <W25_ShiftLeftFlashDataByPage+0x264>)
 80041d0:	4622      	mov	r2, r4
 80041d2:	f103 0e10 	add.w	lr, r3, #16
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	4694      	mov	ip, r2
 80041dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80041e0:	3308      	adds	r3, #8
 80041e2:	4573      	cmp	r3, lr
 80041e4:	4662      	mov	r2, ip
 80041e6:	d1f6      	bne.n	80041d6 <W25_ShiftLeftFlashDataByPage+0x106>
 80041e8:	8819      	ldrh	r1, [r3, #0]
 80041ea:	789b      	ldrb	r3, [r3, #2]
 80041ec:	f8ac 1000 	strh.w	r1, [ip]
 80041f0:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7fc f84b 	bl	8000290 <strlen>
 80041fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041fe:	b282      	uxth	r2, r0
 8004200:	4621      	mov	r1, r4
 8004202:	4640      	mov	r0, r8
 8004204:	f004 f812 	bl	800822c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 8004208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800420c:	2280      	movs	r2, #128	@ 0x80
 800420e:	4629      	mov	r1, r5
 8004210:	4640      	mov	r0, r8
 8004212:	f004 f80b 	bl	800822c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8004216:	4843      	ldr	r0, [pc, #268]	@ (8004324 <W25_ShiftLeftFlashDataByPage+0x254>)
 8004218:	f001 f862 	bl	80052e0 <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 800421c:	4629      	mov	r1, r5
 800421e:	2280      	movs	r2, #128	@ 0x80
 8004220:	4650      	mov	r0, sl
 8004222:	f008 fd97 	bl	800cd54 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8004226:	19b9      	adds	r1, r7, r6
 8004228:	4650      	mov	r0, sl
 800422a:	f7ff ff3c 	bl	80040a6 <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 800422e:	3780      	adds	r7, #128	@ 0x80
 8004230:	f5b7 6f78 	cmp.w	r7, #3968	@ 0xf80
 8004234:	d1c4      	bne.n	80041c0 <W25_ShiftLeftFlashDataByPage+0xf0>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8004236:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 800423a:	d044      	beq.n	80042c6 <W25_ShiftLeftFlashDataByPage+0x1f6>
 800423c:	483a      	ldr	r0, [pc, #232]	@ (8004328 <W25_ShiftLeftFlashDataByPage+0x258>)
 800423e:	f7ff ff15 	bl	800406c <IsPageValid>
 8004242:	2800      	cmp	r0, #0
 8004244:	d03f      	beq.n	80042c6 <W25_ShiftLeftFlashDataByPage+0x1f6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8004246:	4938      	ldr	r1, [pc, #224]	@ (8004328 <W25_ShiftLeftFlashDataByPage+0x258>)
 8004248:	483b      	ldr	r0, [pc, #236]	@ (8004338 <W25_ShiftLeftFlashDataByPage+0x268>)
 800424a:	2280      	movs	r2, #128	@ 0x80
 800424c:	f008 fd82 	bl	800cd54 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8004250:	4839      	ldr	r0, [pc, #228]	@ (8004338 <W25_ShiftLeftFlashDataByPage+0x268>)
 8004252:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8004256:	f7ff ff26 	bl	80040a6 <UpdatePageAddress>
        W25_Reset();
 800425a:	f7ff fdb4 	bl	8003dc6 <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff fe5c 	bl	8003f1c <W25_SectorErase>
 8004264:	4604      	mov	r4, r0
 8004266:	b3a0      	cbz	r0, 80042d2 <W25_ShiftLeftFlashDataByPage+0x202>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 8004268:	4834      	ldr	r0, [pc, #208]	@ (800433c <W25_ShiftLeftFlashDataByPage+0x26c>)
 800426a:	e745      	b.n	80040f8 <W25_ShiftLeftFlashDataByPage+0x28>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 800426c:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <W25_ShiftLeftFlashDataByPage+0x270>)
 800426e:	4622      	mov	r2, r4
 8004270:	f103 0e10 	add.w	lr, r3, #16
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	4694      	mov	ip, r2
 800427a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800427e:	3308      	adds	r3, #8
 8004280:	4573      	cmp	r3, lr
 8004282:	4662      	mov	r2, ip
 8004284:	d1f6      	bne.n	8004274 <W25_ShiftLeftFlashDataByPage+0x1a4>
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	791b      	ldrb	r3, [r3, #4]
 800428a:	f8cc 0000 	str.w	r0, [ip]
 800428e:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004292:	4620      	mov	r0, r4
 8004294:	f7fb fffc 	bl	8000290 <strlen>
 8004298:	4621      	mov	r1, r4
 800429a:	b282      	uxth	r2, r0
 800429c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042a0:	4640      	mov	r0, r8
 80042a2:	f003 ffc3 	bl	800822c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 80042a6:	4629      	mov	r1, r5
 80042a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ac:	2280      	movs	r2, #128	@ 0x80
 80042ae:	4640      	mov	r0, r8
 80042b0:	f003 ffbc 	bl	800822c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 80042b4:	481b      	ldr	r0, [pc, #108]	@ (8004324 <W25_ShiftLeftFlashDataByPage+0x254>)
 80042b6:	f001 f813 	bl	80052e0 <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 80042ba:	2280      	movs	r2, #128	@ 0x80
 80042bc:	21ff      	movs	r1, #255	@ 0xff
 80042be:	4650      	mov	r0, sl
 80042c0:	f007 fef4 	bl	800c0ac <memset>
 80042c4:	e7b3      	b.n	800422e <W25_ShiftLeftFlashDataByPage+0x15e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 80042c6:	2280      	movs	r2, #128	@ 0x80
 80042c8:	21ff      	movs	r1, #255	@ 0xff
 80042ca:	481b      	ldr	r0, [pc, #108]	@ (8004338 <W25_ShiftLeftFlashDataByPage+0x268>)
 80042cc:	f007 feee 	bl	800c0ac <memset>
 80042d0:	e7c3      	b.n	800425a <W25_ShiftLeftFlashDataByPage+0x18a>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80042d2:	4605      	mov	r5, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 80042d4:	eb0b 0705 	add.w	r7, fp, r5
        	W25_Reset();
 80042d8:	f7ff fd75 	bl	8003dc6 <W25_Reset>
        	if (IsPageValid(page_data)) {
 80042dc:	4638      	mov	r0, r7
 80042de:	f7ff fec5 	bl	800406c <IsPageValid>
 80042e2:	b138      	cbz	r0, 80042f4 <W25_ShiftLeftFlashDataByPage+0x224>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	4639      	mov	r1, r7
 80042e8:	1970      	adds	r0, r6, r5
 80042ea:	f7ff fe43 	bl	8003f74 <W25_PageProgram>
 80042ee:	b108      	cbz	r0, 80042f4 <W25_ShiftLeftFlashDataByPage+0x224>
					Debug_printf("PAGE PROGRAM: ERROR at page offset");
 80042f0:	4814      	ldr	r0, [pc, #80]	@ (8004344 <W25_ShiftLeftFlashDataByPage+0x274>)
 80042f2:	e701      	b.n	80040f8 <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80042f4:	3580      	adds	r5, #128	@ 0x80
 80042f6:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80042fa:	d1eb      	bne.n	80042d4 <W25_ShiftLeftFlashDataByPage+0x204>
    while (current_sector_start < FLASH_END_ADDRESS) {
 80042fc:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8004300:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8004304:	f47f aeec 	bne.w	80040e0 <W25_ShiftLeftFlashDataByPage+0x10>
    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8004308:	480f      	ldr	r0, [pc, #60]	@ (8004348 <W25_ShiftLeftFlashDataByPage+0x278>)
 800430a:	f000 ffe9 	bl	80052e0 <Debug_printf>
    return HAL_OK;
 800430e:	e6f6      	b.n	80040fe <W25_ShiftLeftFlashDataByPage+0x2e>
 8004310:	08011c51 	.word	0x08011c51
 8004314:	200075e8 	.word	0x200075e8
 8004318:	08011ca1 	.word	0x08011ca1
 800431c:	08011d7e 	.word	0x08011d7e
 8004320:	20007164 	.word	0x20007164
 8004324:	080115a8 	.word	0x080115a8
 8004328:	20007568 	.word	0x20007568
 800432c:	08011cc0 	.word	0x08011cc0
 8004330:	08011db1 	.word	0x08011db1
 8004334:	08011de4 	.word	0x08011de4
 8004338:	20008568 	.word	0x20008568
 800433c:	08011cef 	.word	0x08011cef
 8004340:	08011df7 	.word	0x08011df7
 8004344:	08011d10 	.word	0x08011d10
 8004348:	08011d33 	.word	0x08011d33

0800434c <calculate_epoch_time_utc>:
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 800434c:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 800434e:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8004350:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8004352:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8004356:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8004358:	6843      	ldr	r3, [r0, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 800435e:	6803      	ldr	r3, [r0, #0]
 8004360:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8004362:	680b      	ldr	r3, [r1, #0]
 8004364:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8004366:	684b      	ldr	r3, [r1, #4]
 8004368:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 800436a:	688b      	ldr	r3, [r1, #8]
 800436c:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 800436e:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8004370:	f04f 33ff 	mov.w	r3, #4294967295
 8004374:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8004376:	f007 ffd3 	bl	800c320 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 800437a:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 800437e:	3070      	adds	r0, #112	@ 0x70
 8004380:	b00b      	add	sp, #44	@ 0x2c
 8004382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004388 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	ed2d 8b04 	vpush	{d8-d9}
 8004390:	4604      	mov	r4, r0
 8004392:	b09b      	sub	sp, #108	@ 0x6c
 8004394:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8004398:	4601      	mov	r1, r0
 800439a:	3010      	adds	r0, #16
 800439c:	f7ff ffd6 	bl	800434c <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 80043a0:	69a3      	ldr	r3, [r4, #24]
 80043a2:	9314      	str	r3, [sp, #80]	@ 0x50
 80043a4:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 80043a8:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 80043aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80043ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80043ae:	f7fc f8db 	bl	8000568 <__aeabi_f2d>
 80043b2:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 80043b6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80043b8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80043bc:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 80043c0:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 80043c4:	f7fc f8d0 	bl	8000568 <__aeabi_f2d>
 80043c8:	e9d4 9a00 	ldrd	r9, sl, [r4]
 80043cc:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 80043d0:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 80043d4:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 80043d8:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80043da:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4811      	ldr	r0, [pc, #68]	@ (8004428 <format_rmc_data+0xa0>)
 80043e4:	4911      	ldr	r1, [pc, #68]	@ (800442c <format_rmc_data+0xa4>)
 80043e6:	9608      	str	r6, [sp, #32]
 80043e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80043ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80043ee:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <format_rmc_data+0xa8>)
 80043f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80043f4:	2c00      	cmp	r4, #0
 80043f6:	bf08      	it	eq
 80043f8:	4601      	moveq	r1, r0
 80043fa:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80043fe:	e9cd 5300 	strd	r5, r3, [sp]
 8004402:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8004406:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004408:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 800440c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004410:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8004414:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004418:	f007 fd4c 	bl	800beb4 <sniprintf>
}
 800441c:	b01b      	add	sp, #108	@ 0x6c
 800441e:	ecbd 8b04 	vpop	{d8-d9}
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	0801010b 	.word	0x0801010b
 800442c:	08010105 	.word	0x08010105
 8004430:	08011e3f 	.word	0x08011e3f

08004434 <saveRMC>:


void saveRMC(){
 8004434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8004438:	4cb4      	ldr	r4, [pc, #720]	@ (800470c <saveRMC+0x2d8>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 800443a:	48b5      	ldr	r0, [pc, #724]	@ (8004710 <saveRMC+0x2dc>)
void saveRMC(){
 800443c:	b093      	sub	sp, #76	@ 0x4c
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 800443e:	f000 ff4f 	bl	80052e0 <Debug_printf>
	W25_Reset();
 8004442:	f7ff fcc0 	bl	8003dc6 <W25_Reset>
	if (is_erased_rmc == 0){
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	b92b      	cbnz	r3, 8004456 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 800444a:	4bb2      	ldr	r3, [pc, #712]	@ (8004714 <saveRMC+0x2e0>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f7ff fd65 	bl	8003f1c <W25_SectorErase>
		is_erased_rmc = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8004456:	4ab0      	ldr	r2, [pc, #704]	@ (8004718 <saveRMC+0x2e4>)
 8004458:	2300      	movs	r3, #0
 800445a:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 800445c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004460:	461d      	mov	r5, r3
 8004462:	3301      	adds	r3, #1
 8004464:	b109      	cbz	r1, 800446a <saveRMC+0x36>
 8004466:	7811      	ldrb	r1, [r2, #0]
 8004468:	b111      	cbz	r1, 8004470 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d1f6      	bne.n	800445c <saveRMC+0x28>
	int k = 0;
 800446e:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 8004470:	4faa      	ldr	r7, [pc, #680]	@ (800471c <saveRMC+0x2e8>)
 8004472:	4ca8      	ldr	r4, [pc, #672]	@ (8004714 <saveRMC+0x2e0>)
 8004474:	2208      	movs	r2, #8
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	4639      	mov	r1, r7
 800447a:	f000 ff1c 	bl	80052b6 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 800447e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004482:	2208      	movs	r2, #8
 8004484:	4639      	mov	r1, r7
 8004486:	48a6      	ldr	r0, [pc, #664]	@ (8004720 <saveRMC+0x2ec>)
 8004488:	f003 fed0 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 800448c:	49a5      	ldr	r1, [pc, #660]	@ (8004724 <saveRMC+0x2f0>)
 800448e:	48a4      	ldr	r0, [pc, #656]	@ (8004720 <saveRMC+0x2ec>)
 8004490:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004494:	2201      	movs	r2, #1
 8004496:	f003 fec9 	bl	800822c <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 800449a:	1973      	adds	r3, r6, r5
 800449c:	223b      	movs	r2, #59	@ 0x3b
 800449e:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 80044a0:	1cab      	adds	r3, r5, #2
 80044a2:	f8d7 1002 	ldr.w	r1, [r7, #2]
 80044a6:	50f1      	str	r1, [r6, r3]
 80044a8:	18f2      	adds	r2, r6, r3
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 80044ae:	f105 0008 	add.w	r0, r5, #8
 80044b2:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 80044b6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80044ba:	2100      	movs	r1, #0
 80044bc:	4430      	add	r0, r6
 80044be:	f007 fdf5 	bl	800c0ac <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c8:	b92b      	cbnz	r3, 80044d6 <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 80044ca:	4897      	ldr	r0, [pc, #604]	@ (8004728 <saveRMC+0x2f4>)
 80044cc:	f000 ff08 	bl	80052e0 <Debug_printf>
		W25_SectorErase(address_rmc);
 80044d0:	6820      	ldr	r0, [r4, #0]
 80044d2:	f7ff fd23 	bl	8003f1c <W25_SectorErase>
	}

	W25_Reset();
 80044d6:	f7ff fc76 	bl	8003dc6 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 80044da:	498f      	ldr	r1, [pc, #572]	@ (8004718 <saveRMC+0x2e4>)
 80044dc:	6820      	ldr	r0, [r4, #0]
	Debug_printf("Buffer before saving to FLASH: ");
	Debug_printf((char*)rmcBufferDemo);
	Debug_printf("\n");

	current_addr = address_rmc;
 80044de:	4d93      	ldr	r5, [pc, #588]	@ (800472c <saveRMC+0x2f8>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	f7ff fd47 	bl	8003f74 <W25_PageProgram>
	Debug_printf("Buffer before saving to FLASH: ");
 80044e6:	4892      	ldr	r0, [pc, #584]	@ (8004730 <saveRMC+0x2fc>)
 80044e8:	f000 fefa 	bl	80052e0 <Debug_printf>
	Debug_printf((char*)rmcBufferDemo);
 80044ec:	488a      	ldr	r0, [pc, #552]	@ (8004718 <saveRMC+0x2e4>)
 80044ee:	f000 fef7 	bl	80052e0 <Debug_printf>
	Debug_printf("\n");
 80044f2:	4890      	ldr	r0, [pc, #576]	@ (8004734 <saveRMC+0x300>)
 80044f4:	f000 fef4 	bl	80052e0 <Debug_printf>
	current_addr = address_rmc;
 80044f8:	6823      	ldr	r3, [r4, #0]
	Debug_printf("Buffer after saving to FLASH: ");
 80044fa:	488f      	ldr	r0, [pc, #572]	@ (8004738 <saveRMC+0x304>)
	current_addr = address_rmc;
 80044fc:	602b      	str	r3, [r5, #0]
	Debug_printf("Buffer after saving to FLASH: ");
 80044fe:	f000 feef 	bl	80052e0 <Debug_printf>
	W25_Reset();
 8004502:	f7ff fc60 	bl	8003dc6 <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004506:	2280      	movs	r2, #128	@ 0x80
 8004508:	498c      	ldr	r1, [pc, #560]	@ (800473c <saveRMC+0x308>)
 800450a:	6828      	ldr	r0, [r5, #0]
 800450c:	f7ff fd7c 	bl	8004008 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8004510:	4b8b      	ldr	r3, [pc, #556]	@ (8004740 <saveRMC+0x30c>)
 8004512:	aa01      	add	r2, sp, #4
 8004514:	f103 0c10 	add.w	ip, r3, #16
 8004518:	4617      	mov	r7, r2
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	4616      	mov	r6, r2
 8004520:	c603      	stmia	r6!, {r0, r1}
 8004522:	3308      	adds	r3, #8
 8004524:	4563      	cmp	r3, ip
 8004526:	4632      	mov	r2, r6
 8004528:	d1f7      	bne.n	800451a <saveRMC+0xe6>
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	889b      	ldrh	r3, [r3, #4]
 800452e:	6030      	str	r0, [r6, #0]
 8004530:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004532:	4638      	mov	r0, r7
 8004534:	f7fb feac 	bl	8000290 <strlen>
 8004538:	4639      	mov	r1, r7
 800453a:	b282      	uxth	r2, r0
 800453c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004540:	4877      	ldr	r0, [pc, #476]	@ (8004720 <saveRMC+0x2ec>)
 8004542:	f003 fe73 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800454a:	497c      	ldr	r1, [pc, #496]	@ (800473c <saveRMC+0x308>)
 800454c:	4874      	ldr	r0, [pc, #464]	@ (8004720 <saveRMC+0x2ec>)
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	f003 fe6c 	bl	800822c <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 8004554:	2280      	movs	r2, #128	@ 0x80
 8004556:	2100      	movs	r1, #0
 8004558:	4878      	ldr	r0, [pc, #480]	@ (800473c <saveRMC+0x308>)
 800455a:	f007 fda7 	bl	800c0ac <memset>


	Debug_printf("\n-------------------------- Updating the latest location info----------------\n");
 800455e:	4879      	ldr	r0, [pc, #484]	@ (8004744 <saveRMC+0x310>)
 8004560:	f000 febe 	bl	80052e0 <Debug_printf>
	W25_Reset();
 8004564:	f7ff fc2f 	bl	8003dc6 <W25_Reset>
	W25_SectorErase(0x9000);
 8004568:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800456c:	f7ff fcd6 	bl	8003f1c <W25_SectorErase>
	W25_Reset();
 8004570:	f7ff fc29 	bl	8003dc6 <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 8004574:	4968      	ldr	r1, [pc, #416]	@ (8004718 <saveRMC+0x2e4>)
 8004576:	2280      	movs	r2, #128	@ 0x80
 8004578:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800457c:	f7ff fcfa 	bl	8003f74 <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 8004580:	2280      	movs	r2, #128	@ 0x80
 8004582:	496e      	ldr	r1, [pc, #440]	@ (800473c <saveRMC+0x308>)
 8004584:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004588:	f7ff fd3e 	bl	8004008 <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 800458c:	4b6e      	ldr	r3, [pc, #440]	@ (8004748 <saveRMC+0x314>)
 800458e:	aa07      	add	r2, sp, #28
 8004590:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8004594:	4617      	mov	r7, r2
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
 800459a:	4616      	mov	r6, r2
 800459c:	c603      	stmia	r6!, {r0, r1}
 800459e:	3308      	adds	r3, #8
 80045a0:	4563      	cmp	r3, ip
 80045a2:	4632      	mov	r2, r6
 80045a4:	d1f7      	bne.n	8004596 <saveRMC+0x162>
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 80045aa:	4638      	mov	r0, r7
 80045ac:	f7fb fe70 	bl	8000290 <strlen>
 80045b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045b4:	b282      	uxth	r2, r0
 80045b6:	4639      	mov	r1, r7
 80045b8:	4859      	ldr	r0, [pc, #356]	@ (8004720 <saveRMC+0x2ec>)
 80045ba:	f003 fe37 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80045be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045c2:	495e      	ldr	r1, [pc, #376]	@ (800473c <saveRMC+0x308>)
 80045c4:	4856      	ldr	r0, [pc, #344]	@ (8004720 <saveRMC+0x2ec>)
 80045c6:	2280      	movs	r2, #128	@ 0x80
 80045c8:	f003 fe30 	bl	800822c <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 80045cc:	485b      	ldr	r0, [pc, #364]	@ (800473c <saveRMC+0x308>)
 80045ce:	2280      	movs	r2, #128	@ 0x80
 80045d0:	2100      	movs	r1, #0
 80045d2:	f007 fd6b 	bl	800c0ac <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 80045dc:	4b5b      	ldr	r3, [pc, #364]	@ (800474c <saveRMC+0x318>)
 80045de:	f040 80e7 	bne.w	80047b0 <saveRMC+0x37c>
		is_flash_overflow = 1;
 80045e2:	2201      	movs	r2, #1
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
 80045e4:	485a      	ldr	r0, [pc, #360]	@ (8004750 <saveRMC+0x31c>)
		is_flash_overflow = 1;
 80045e6:	601a      	str	r2, [r3, #0]
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
 80045e8:	f000 fe7a 	bl	80052e0 <Debug_printf>
		W25_Reset();
 80045ec:	f7ff fbeb 	bl	8003dc6 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80045f0:	4952      	ldr	r1, [pc, #328]	@ (800473c <saveRMC+0x308>)
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	4f57      	ldr	r7, [pc, #348]	@ (8004754 <saveRMC+0x320>)
 80045f6:	2280      	movs	r2, #128	@ 0x80
 80045f8:	f7ff fd06 	bl	8004008 <W25_ReadData>
		Debug_printf((char*) flashBufferRMCReceived);
 80045fc:	484f      	ldr	r0, [pc, #316]	@ (800473c <saveRMC+0x308>)
 80045fe:	f000 fe6f 	bl	80052e0 <Debug_printf>

		W25_ShiftLeftFlashDataByPage();
 8004602:	f7ff fd65 	bl	80040d0 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	3b80      	subs	r3, #128	@ 0x80
 800460a:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 800460c:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <saveRMC+0x324>)
 800460e:	f8d3 8000 	ldr.w	r8, [r3]
 8004612:	f1b8 0f00 	cmp.w	r8, #0
 8004616:	f040 80c6 	bne.w	80047a6 <saveRMC+0x372>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 800461a:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 800461c:	4e4f      	ldr	r6, [pc, #316]	@ (800475c <saveRMC+0x328>)
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 800461e:	4850      	ldr	r0, [pc, #320]	@ (8004760 <saveRMC+0x32c>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8004620:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8004624:	bf82      	ittt	hi
 8004626:	683b      	ldrhi	r3, [r7, #0]
 8004628:	3b80      	subhi	r3, #128	@ 0x80
 800462a:	603b      	strhi	r3, [r7, #0]
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 800462c:	f000 fe58 	bl	80052e0 <Debug_printf>
			printQueue_GSM(&result_addr_queue);
 8004630:	4630      	mov	r0, r6
 8004632:	f7fe ff2f 	bl	8003494 <printQueue_GSM>
			Debug_printf("\n---------------Update the result address data--------------\n");
 8004636:	484b      	ldr	r0, [pc, #300]	@ (8004764 <saveRMC+0x330>)
 8004638:	f000 fe52 	bl	80052e0 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800463c:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004640:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004644:	2200      	movs	r2, #0
 8004646:	4290      	cmp	r0, r2
 8004648:	dc4c      	bgt.n	80046e4 <saveRMC+0x2b0>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 800464a:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 800475c <saveRMC+0x328>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800464e:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 8004652:	4543      	cmp	r3, r8
 8004654:	f300 8092 	bgt.w	800477c <saveRMC+0x348>
			}
			printQueue_GSM(&result_addr_queue);
 8004658:	4840      	ldr	r0, [pc, #256]	@ (800475c <saveRMC+0x328>)
 800465a:	f7fe ff1b 	bl	8003494 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 800465e:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <saveRMC+0x334>)
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4291      	cmp	r1, r2
 8004666:	d902      	bls.n	800466e <saveRMC+0x23a>
				end_addr_disconnect -= 128;
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	3a80      	subs	r2, #128	@ 0x80
 800466c:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 800466e:	2208      	movs	r2, #8
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	492a      	ldr	r1, [pc, #168]	@ (800471c <saveRMC+0x2e8>)
 8004674:	f000 fe1f 	bl	80052b6 <Uint32ToHex>
		Debug_printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 8004678:	4928      	ldr	r1, [pc, #160]	@ (800471c <saveRMC+0x2e8>)
 800467a:	483c      	ldr	r0, [pc, #240]	@ (800476c <saveRMC+0x338>)
 800467c:	f000 fe30 	bl	80052e0 <Debug_printf>
		Debug_printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8004680:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <saveRMC+0x33c>)
 8004682:	483c      	ldr	r0, [pc, #240]	@ (8004774 <saveRMC+0x340>)
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	f000 fe2b 	bl	80052e0 <Debug_printf>
		current_addr -= 128;
 800468a:	682b      	ldr	r3, [r5, #0]
	    Debug_printf("\n");
 800468c:	4829      	ldr	r0, [pc, #164]	@ (8004734 <saveRMC+0x300>)
		current_addr -= 128;
 800468e:	3b80      	subs	r3, #128	@ 0x80
 8004690:	602b      	str	r3, [r5, #0]
	    Debug_printf("\n");
 8004692:	f000 fe25 	bl	80052e0 <Debug_printf>
		Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 8004696:	4838      	ldr	r0, [pc, #224]	@ (8004778 <saveRMC+0x344>)
 8004698:	f000 fe22 	bl	80052e0 <Debug_printf>
		W25_Reset();
 800469c:	f7ff fb93 	bl	8003dc6 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80046a0:	4926      	ldr	r1, [pc, #152]	@ (800473c <saveRMC+0x308>)
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	2280      	movs	r2, #128	@ 0x80
 80046a6:	f7ff fcaf 	bl	8004008 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80046aa:	4924      	ldr	r1, [pc, #144]	@ (800473c <saveRMC+0x308>)
 80046ac:	481c      	ldr	r0, [pc, #112]	@ (8004720 <saveRMC+0x2ec>)
 80046ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046b2:	2280      	movs	r2, #128	@ 0x80
 80046b4:	f003 fdba 	bl	800822c <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 80046be:	bf38      	it	cc
 80046c0:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 80046c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 80046c6:	bf38      	it	cc
 80046c8:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 80046ca:	f003 ff9f 	bl	800860c <osDelay>
	Debug_printf("\n");
 80046ce:	4819      	ldr	r0, [pc, #100]	@ (8004734 <saveRMC+0x300>)
 80046d0:	f000 fe06 	bl	80052e0 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 80046d4:	4819      	ldr	r0, [pc, #100]	@ (800473c <saveRMC+0x308>)
 80046d6:	2280      	movs	r2, #128	@ 0x80
 80046d8:	2100      	movs	r1, #0
}
 80046da:	b013      	add	sp, #76	@ 0x4c
 80046dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 80046e0:	f007 bce4 	b.w	800c0ac <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80046e4:	eb02 030c 	add.w	r3, r2, ip
 80046e8:	4259      	negs	r1, r3
 80046ea:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80046ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f2:	bf58      	it	pl
 80046f4:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 80046f6:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 80046f8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80046fc:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 8004700:	bf24      	itt	cs
 8004702:	3980      	subcs	r1, #128	@ 0x80
 8004704:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004708:	e79d      	b.n	8004646 <saveRMC+0x212>
 800470a:	bf00      	nop
 800470c:	200086e8 	.word	0x200086e8
 8004710:	08011e72 	.word	0x08011e72
 8004714:	2000000c 	.word	0x2000000c
 8004718:	200085e8 	.word	0x200085e8
 800471c:	2000744c 	.word	0x2000744c
 8004720:	20007164 	.word	0x20007164
 8004724:	08010906 	.word	0x08010906
 8004728:	08011e93 	.word	0x08011e93
 800472c:	20000008 	.word	0x20000008
 8004730:	08011eb0 	.word	0x08011eb0
 8004734:	080115a9 	.word	0x080115a9
 8004738:	08011ed0 	.word	0x08011ed0
 800473c:	20008668 	.word	0x20008668
 8004740:	08012098 	.word	0x08012098
 8004744:	08011eef 	.word	0x08011eef
 8004748:	080120ae 	.word	0x080120ae
 800474c:	200086f0 	.word	0x200086f0
 8004750:	08011f3e 	.word	0x08011f3e
 8004754:	20002294 	.word	0x20002294
 8004758:	200024b8 	.word	0x200024b8
 800475c:	20002298 	.word	0x20002298
 8004760:	08011f69 	.word	0x08011f69
 8004764:	08011fb1 	.word	0x08011fb1
 8004768:	2000228c 	.word	0x2000228c
 800476c:	08011fef 	.word	0x08011fef
 8004770:	200024b0 	.word	0x200024b0
 8004774:	0801203b 	.word	0x0801203b
 8004778:	0801206d 	.word	0x0801206d
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800477c:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 8004780:	4441      	add	r1, r8
 8004782:	424b      	negs	r3, r1
 8004784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004788:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800478c:	bf58      	it	pl
 800478e:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 8004790:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 8004794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004798:	d202      	bcs.n	80047a0 <saveRMC+0x36c>
					deleteMiddle_GSM(&result_addr_queue, idx);
 800479a:	4648      	mov	r0, r9
 800479c:	f7fe fed4 	bl	8003548 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 80047a0:	f108 0801 	add.w	r8, r8, #1
 80047a4:	e753      	b.n	800464e <saveRMC+0x21a>
			count_shiftleft++;
 80047a6:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <saveRMC+0x384>)
 80047a8:	7813      	ldrb	r3, [r2, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	7013      	strb	r3, [r2, #0]
 80047ae:	e75e      	b.n	800466e <saveRMC+0x23a>
		is_flash_overflow = 0;
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e780      	b.n	80046b8 <saveRMC+0x284>
 80047b6:	bf00      	nop
 80047b8:	200024b0 	.word	0x200024b0

080047bc <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 80047bc:	6983      	ldr	r3, [r0, #24]
 80047be:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
	if(mail_data->rmc.date.Yr >= 24){
 80047c4:	dd0c      	ble.n	80047e0 <sendRMCDataWithAddrToGSM+0x24>
		Debug_printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
 80047c6:	4807      	ldr	r0, [pc, #28]	@ (80047e4 <sendRMCDataWithAddrToGSM+0x28>)
 80047c8:	f000 fd8a 	bl	80052e0 <Debug_printf>
		osMessageQueuePut(RMC_MailQGSMIdHandle, mail_data, 0, 1000);
 80047cc:	4806      	ldr	r0, [pc, #24]	@ (80047e8 <sendRMCDataWithAddrToGSM+0x2c>)
 80047ce:	4621      	mov	r1, r4
 80047d0:	6800      	ldr	r0, [r0, #0]
	}
}
 80047d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osMessageQueuePut(RMC_MailQGSMIdHandle, mail_data, 0, 1000);
 80047d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047da:	2200      	movs	r2, #0
 80047dc:	f003 bf78 	b.w	80086d0 <osMessageQueuePut>
}
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	080120d7 	.word	0x080120d7
 80047e8:	20003f88 	.word	0x20003f88

080047ec <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 80047ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f0:	b0d4      	sub	sp, #336	@ 0x150
 80047f2:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 80047f4:	22ff      	movs	r2, #255	@ 0xff
 80047f6:	4601      	mov	r1, r0
 80047f8:	a814      	add	r0, sp, #80	@ 0x50
 80047fa:	f007 fc7e 	bl	800c0fa <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80047fe:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 8004800:	213b      	movs	r1, #59	@ 0x3b
 8004802:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8004804:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 8004808:	f007 fc8a 	bl	800c120 <strrchr>
    if (lastSemicolon) {
 800480c:	b100      	cbz	r0, 8004810 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 800480e:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8004810:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8004814:	9309      	str	r3, [sp, #36]	@ 0x24
 8004816:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800481a:	9308      	str	r3, [sp, #32]
 800481c:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 8004820:	9307      	str	r3, [sp, #28]
 8004822:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8004826:	9306      	str	r3, [sp, #24]
 8004828:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800482c:	9305      	str	r3, [sp, #20]
 800482e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8004832:	9304      	str	r3, [sp, #16]
 8004834:	f104 0308 	add.w	r3, r4, #8
 8004838:	9303      	str	r3, [sp, #12]
 800483a:	1d23      	adds	r3, r4, #4
 800483c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8004840:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8004844:	f104 0310 	add.w	r3, r4, #16
 8004848:	ad10      	add	r5, sp, #64	@ 0x40
 800484a:	ae0f      	add	r6, sp, #60	@ 0x3c
 800484c:	af0e      	add	r7, sp, #56	@ 0x38
 800484e:	f104 0218 	add.w	r2, r4, #24
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4911      	ldr	r1, [pc, #68]	@ (800489c <parseRMCString+0xb0>)
 8004856:	950d      	str	r5, [sp, #52]	@ 0x34
 8004858:	f104 0314 	add.w	r3, r4, #20
 800485c:	960c      	str	r6, [sp, #48]	@ 0x30
 800485e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004860:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004864:	a814      	add	r0, sp, #80	@ 0x50
 8004866:	f007 fb79 	bl	800bf5c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800486a:	490d      	ldr	r1, [pc, #52]	@ (80048a0 <parseRMCString+0xb4>)
 800486c:	4640      	mov	r0, r8
 800486e:	f7fb fcaf 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004872:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8004876:	17d1      	asrs	r1, r2, #31
 8004878:	0409      	lsls	r1, r1, #16
 800487a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800487e:	430b      	orrs	r3, r1
 8004880:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004882:	fab0 f080 	clz	r0, r0
 8004886:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004888:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800488c:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8004890:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004894:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8004896:	b054      	add	sp, #336	@ 0x150
 8004898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800489c:	080120f9 	.word	0x080120f9
 80048a0:	08010105 	.word	0x08010105

080048a4 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a6:	460d      	mov	r5, r1
 80048a8:	b0a7      	sub	sp, #156	@ 0x9c
	Uint32ToHex(addr, addr_out_flash, 8);
 80048aa:	2208      	movs	r2, #8
 80048ac:	4942      	ldr	r1, [pc, #264]	@ (80049b8 <readFlash+0x114>)
RMCSTRUCT readFlash(uint32_t addr){
 80048ae:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 fd00 	bl	80052b6 <Uint32ToHex>
	Debug_printf("Address received from FLASH: %s \n", addr_out_flash);
 80048b6:	4940      	ldr	r1, [pc, #256]	@ (80049b8 <readFlash+0x114>)
 80048b8:	4840      	ldr	r0, [pc, #256]	@ (80049bc <readFlash+0x118>)
 80048ba:	f000 fd11 	bl	80052e0 <Debug_printf>
	W25_Reset();
 80048be:	f7ff fa82 	bl	8003dc6 <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	493e      	ldr	r1, [pc, #248]	@ (80049c0 <readFlash+0x11c>)
 80048c6:	4628      	mov	r0, r5
 80048c8:	f7ff fb9e 	bl	8004008 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 80048cc:	4b3d      	ldr	r3, [pc, #244]	@ (80049c4 <readFlash+0x120>)
 80048ce:	aa07      	add	r2, sp, #28
 80048d0:	f103 0720 	add.w	r7, r3, #32
 80048d4:	4616      	mov	r6, r2
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
 80048da:	4615      	mov	r5, r2
 80048dc:	c503      	stmia	r5!, {r0, r1}
 80048de:	3308      	adds	r3, #8
 80048e0:	42bb      	cmp	r3, r7
 80048e2:	462a      	mov	r2, r5
 80048e4:	d1f7      	bne.n	80048d6 <readFlash+0x32>
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7fb fcd0 	bl	8000290 <strlen>
 80048f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048f4:	b282      	uxth	r2, r0
 80048f6:	4631      	mov	r1, r6
 80048f8:	4833      	ldr	r0, [pc, #204]	@ (80049c8 <readFlash+0x124>)
 80048fa:	f003 fc97 	bl	800822c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80048fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004902:	492f      	ldr	r1, [pc, #188]	@ (80049c0 <readFlash+0x11c>)
 8004904:	4830      	ldr	r0, [pc, #192]	@ (80049c8 <readFlash+0x124>)
 8004906:	2280      	movs	r2, #128	@ 0x80
 8004908:	f003 fc90 	bl	800822c <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 800490c:	2258      	movs	r2, #88	@ 0x58
 800490e:	2100      	movs	r1, #0
 8004910:	a810      	add	r0, sp, #64	@ 0x40
 8004912:	f007 fbcb 	bl	800c0ac <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 8004916:	482a      	ldr	r0, [pc, #168]	@ (80049c0 <readFlash+0x11c>)
 8004918:	a910      	add	r1, sp, #64	@ 0x40
 800491a:	f7ff ff67 	bl	80047ec <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 800491e:	4828      	ldr	r0, [pc, #160]	@ (80049c0 <readFlash+0x11c>)
 8004920:	f7ff fba4 	bl	800406c <IsPageValid>
 8004924:	4a29      	ldr	r2, [pc, #164]	@ (80049cc <readFlash+0x128>)
 8004926:	2800      	cmp	r0, #0
 8004928:	d141      	bne.n	80049ae <readFlash+0x10a>
		is_read_flash_valid = 0;
 800492a:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 800492c:	901c      	str	r0, [sp, #112]	@ 0x70
		Debug_printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 800492e:	4828      	ldr	r0, [pc, #160]	@ (80049d0 <readFlash+0x12c>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004930:	f000 fcd6 	bl	80052e0 <Debug_printf>
	}

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8004934:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 8004938:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800493a:	4826      	ldr	r0, [pc, #152]	@ (80049d4 <readFlash+0x130>)
 800493c:	f000 fcd0 	bl	80052e0 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8004940:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	@ 0x44
 8004944:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004946:	4824      	ldr	r0, [pc, #144]	@ (80049d8 <readFlash+0x134>)
 8004948:	f000 fcca 	bl	80052e0 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 800494c:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 8004950:	9304      	str	r3, [sp, #16]
 8004952:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8004956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800495a:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	481e      	ldr	r0, [pc, #120]	@ (80049dc <readFlash+0x138>)
 8004962:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 8004966:	f000 fcbb 	bl	80052e0 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 800496a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800496c:	f7fb fdfc 	bl	8000568 <__aeabi_f2d>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	481a      	ldr	r0, [pc, #104]	@ (80049e0 <readFlash+0x13c>)
 8004976:	f000 fcb3 	bl	80052e0 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 800497a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800497c:	f7fb fdf4 	bl	8000568 <__aeabi_f2d>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4817      	ldr	r0, [pc, #92]	@ (80049e4 <readFlash+0x140>)
 8004986:	f000 fcab 	bl	80052e0 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 800498a:	4b17      	ldr	r3, [pc, #92]	@ (80049e8 <readFlash+0x144>)
 800498c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800498e:	4a17      	ldr	r2, [pc, #92]	@ (80049ec <readFlash+0x148>)
 8004990:	4817      	ldr	r0, [pc, #92]	@ (80049f0 <readFlash+0x14c>)
 8004992:	2900      	cmp	r1, #0
 8004994:	bf0c      	ite	eq
 8004996:	4611      	moveq	r1, r2
 8004998:	4619      	movne	r1, r3
 800499a:	f000 fca1 	bl	80052e0 <Debug_printf>

	return rmc;
 800499e:	2258      	movs	r2, #88	@ 0x58
 80049a0:	a910      	add	r1, sp, #64	@ 0x40
 80049a2:	4620      	mov	r0, r4
 80049a4:	f008 f9d6 	bl	800cd54 <memcpy>
}
 80049a8:	4620      	mov	r0, r4
 80049aa:	b027      	add	sp, #156	@ 0x9c
 80049ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 80049ae:	2301      	movs	r3, #1
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80049b0:	4810      	ldr	r0, [pc, #64]	@ (80049f4 <readFlash+0x150>)
		is_read_flash_valid = 1;
 80049b2:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 80049b4:	931c      	str	r3, [sp, #112]	@ 0x70
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80049b6:	e7bb      	b.n	8004930 <readFlash+0x8c>
 80049b8:	2000744c 	.word	0x2000744c
 80049bc:	08012133 	.word	0x08012133
 80049c0:	20008668 	.word	0x20008668
 80049c4:	0801226f 	.word	0x0801226f
 80049c8:	20007164 	.word	0x20007164
 80049cc:	20000004 	.word	0x20000004
 80049d0:	08012155 	.word	0x08012155
 80049d4:	080121fe 	.word	0x080121fe
 80049d8:	08012214 	.word	0x08012214
 80049dc:	0801222a 	.word	0x0801222a
 80049e0:	08012246 	.word	0x08012246
 80049e4:	08012253 	.word	0x08012253
 80049e8:	08010105 	.word	0x08010105
 80049ec:	0801010b 	.word	0x0801010b
 80049f0:	08012261 	.word	0x08012261
 80049f4:	080121a6 	.word	0x080121a6

080049f8 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 80049f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 80049fa:	4871      	ldr	r0, [pc, #452]	@ (8004bc0 <receiveRMCDataFromGPS+0x1c8>)
 80049fc:	4d71      	ldr	r5, [pc, #452]	@ (8004bc4 <receiveRMCDataFromGPS+0x1cc>)
 80049fe:	6800      	ldr	r0, [r0, #0]
void receiveRMCDataFromGPS(void) {
 8004a00:	b097      	sub	sp, #92	@ 0x5c
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 8004a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a06:	2200      	movs	r2, #0
 8004a08:	4629      	mov	r1, r5
 8004a0a:	f003 fea5 	bl	8008758 <osMessageQueueGet>
	if(status == osOK){
 8004a0e:	4606      	mov	r6, r0
 8004a10:	2800      	cmp	r0, #0
 8004a12:	f040 80cd 	bne.w	8004bb0 <receiveRMCDataFromGPS+0x1b8>
		Debug_printf("\nReceived  RMC Data SPI FLASH: \n");
 8004a16:	486c      	ldr	r0, [pc, #432]	@ (8004bc8 <receiveRMCDataFromGPS+0x1d0>)
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004a18:	4c6c      	ldr	r4, [pc, #432]	@ (8004bcc <receiveRMCDataFromGPS+0x1d4>)
		Debug_printf("\nReceived  RMC Data SPI FLASH: \n");
 8004a1a:	f000 fc61 	bl	80052e0 <Debug_printf>
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004a1e:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8004a22:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedDataRMCFLASH.lcation.longitude;
 8004a26:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8004a2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedDataRMCFLASH.speed;
 8004a2e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004a30:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedDataRMCFLASH.course;
 8004a32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004a34:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedDataRMCFLASH.lcation.NS;
 8004a36:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8004a3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedDataRMCFLASH.lcation.EW;
 8004a3e:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8004a42:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedDataRMCFLASH.isValid;
 8004a46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004a48:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedDataRMCFLASH.tim.hour;
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedDataRMCFLASH.tim.min;
 8004a4e:	686b      	ldr	r3, [r5, #4]
 8004a50:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedDataRMCFLASH.tim.sec;
 8004a52:	68ab      	ldr	r3, [r5, #8]
 8004a54:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 8004a56:	69ab      	ldr	r3, [r5, #24]
		rmc_flash.date.Mon = receivedDataRMCFLASH.date.Mon;
 8004a58:	696a      	ldr	r2, [r5, #20]
 8004a5a:	6162      	str	r2, [r4, #20]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;

		if(rmc_flash.date.Yr >= 24){
 8004a5c:	2b17      	cmp	r3, #23
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 8004a5e:	692a      	ldr	r2, [r5, #16]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 8004a60:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 8004a62:	6122      	str	r2, [r4, #16]
		if(rmc_flash.date.Yr >= 24){
 8004a64:	dd4b      	ble.n	8004afe <receiveRMCDataFromGPS+0x106>
			countRMCReceived++;
 8004a66:	4f5a      	ldr	r7, [pc, #360]	@ (8004bd0 <receiveRMCDataFromGPS+0x1d8>)
			Debug_printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8004a68:	485a      	ldr	r0, [pc, #360]	@ (8004bd4 <receiveRMCDataFromGPS+0x1dc>)
			countRMCReceived++;
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	3101      	adds	r1, #1
 8004a6e:	6039      	str	r1, [r7, #0]
			Debug_printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8004a70:	f000 fc36 	bl	80052e0 <Debug_printf>


			Debug_printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8004a74:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004a78:	6821      	ldr	r1, [r4, #0]
 8004a7a:	4857      	ldr	r0, [pc, #348]	@ (8004bd8 <receiveRMCDataFromGPS+0x1e0>)
 8004a7c:	f000 fc30 	bl	80052e0 <Debug_printf>
//
//		Debug_printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		Debug_printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8004a80:	4956      	ldr	r1, [pc, #344]	@ (8004bdc <receiveRMCDataFromGPS+0x1e4>)
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fc7f 	bl	8004388 <format_rmc_data>

			if(countRMCReceived == 29){
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b1d      	cmp	r3, #29
 8004a8e:	d138      	bne.n	8004b02 <receiveRMCDataFromGPS+0x10a>

				saveRMC();
 8004a90:	f7ff fcd0 	bl	8004434 <saveRMC>
				Debug_printf("---------------------Sending the current data----------------");
 8004a94:	4852      	ldr	r0, [pc, #328]	@ (8004be0 <receiveRMCDataFromGPS+0x1e8>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004a96:	4d53      	ldr	r5, [pc, #332]	@ (8004be4 <receiveRMCDataFromGPS+0x1ec>)
				Debug_printf("---------------------Sending the current data----------------");
 8004a98:	f000 fc22 	bl	80052e0 <Debug_printf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004a9c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004aa0:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8004aa4:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8004aa8:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8004aac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004aae:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8004ab0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ab2:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8004ab4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004ab8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8004abc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004ac0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 8004ac4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ac6:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8004ad0:	68a3      	ldr	r3, [r4, #8]
 8004ad2:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8004ad4:	69a3      	ldr	r3, [r4, #24]
 8004ad6:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8004ad8:	6963      	ldr	r3, [r4, #20]
 8004ada:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8004adc:	6923      	ldr	r3, [r4, #16]
 8004ade:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 8004ae0:	4b41      	ldr	r3, [pc, #260]	@ (8004be8 <receiveRMCDataFromGPS+0x1f0>)

				Uint32ToHex(mail_gsm.address, addr_out_flash, 8);
 8004ae2:	4942      	ldr	r1, [pc, #264]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
				mail_gsm.address = current_addr;
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	65a8      	str	r0, [r5, #88]	@ 0x58
				Uint32ToHex(mail_gsm.address, addr_out_flash, 8);
 8004ae8:	2208      	movs	r2, #8
 8004aea:	f000 fbe4 	bl	80052b6 <Uint32ToHex>
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %s----------------------", addr_out_flash);
 8004aee:	493f      	ldr	r1, [pc, #252]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
 8004af0:	483f      	ldr	r0, [pc, #252]	@ (8004bf0 <receiveRMCDataFromGPS+0x1f8>)
 8004af2:	f000 fbf5 	bl	80052e0 <Debug_printf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8004af6:	4628      	mov	r0, r5
 8004af8:	f7ff fe60 	bl	80047bc <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8004afc:	603e      	str	r6, [r7, #0]
		// Free memory after use
	}
	else{
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
	}
}
 8004afe:	b017      	add	sp, #92	@ 0x5c
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Debug_printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 8004b02:	483c      	ldr	r0, [pc, #240]	@ (8004bf4 <receiveRMCDataFromGPS+0x1fc>)
 8004b04:	f000 fbec 	bl	80052e0 <Debug_printf>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8004b08:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <receiveRMCDataFromGPS+0x200>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d1f6      	bne.n	8004afe <receiveRMCDataFromGPS+0x106>
 8004b10:	4b3a      	ldr	r3, [pc, #232]	@ (8004bfc <receiveRMCDataFromGPS+0x204>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f2      	bne.n	8004afe <receiveRMCDataFromGPS+0x106>
 8004b18:	4b39      	ldr	r3, [pc, #228]	@ (8004c00 <receiveRMCDataFromGPS+0x208>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d1ee      	bne.n	8004afe <receiveRMCDataFromGPS+0x106>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 8004b20:	4c38      	ldr	r4, [pc, #224]	@ (8004c04 <receiveRMCDataFromGPS+0x20c>)
 8004b22:	4939      	ldr	r1, [pc, #228]	@ (8004c08 <receiveRMCDataFromGPS+0x210>)
 8004b24:	6820      	ldr	r0, [r4, #0]
 8004b26:	f7fe fce9 	bl	80034fc <checkAddrExistInQueue>
 8004b2a:	b1b0      	cbz	r0, 8004b5a <receiveRMCDataFromGPS+0x162>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8004b32:	d812      	bhi.n	8004b5a <receiveRMCDataFromGPS+0x162>
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004b34:	2208      	movs	r2, #8
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	492c      	ldr	r1, [pc, #176]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
 8004b3a:	f000 fbbc 	bl	80052b6 <Uint32ToHex>
						Debug_printf("\n-------SKIPPING address cause it was sent already: %s--------\n", addr_out_flash);
 8004b3e:	492b      	ldr	r1, [pc, #172]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
 8004b40:	4832      	ldr	r0, [pc, #200]	@ (8004c0c <receiveRMCDataFromGPS+0x214>)
 8004b42:	f000 fbcd 	bl	80052e0 <Debug_printf>
						if(start_addr_disconnect <= (current_addr - 128)) start_addr_disconnect +=128;
 8004b46:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <receiveRMCDataFromGPS+0x1f0>)
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3b80      	subs	r3, #128	@ 0x80
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d3d5      	bcc.n	8004afe <receiveRMCDataFromGPS+0x106>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	3380      	adds	r3, #128	@ 0x80
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	e7d1      	b.n	8004afe <receiveRMCDataFromGPS+0x106>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <receiveRMCDataFromGPS+0x218>)
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	4e2c      	ldr	r6, [pc, #176]	@ (8004c14 <receiveRMCDataFromGPS+0x21c>)
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	4921      	ldr	r1, [pc, #132]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8004b66:	4d1f      	ldr	r5, [pc, #124]	@ (8004be4 <receiveRMCDataFromGPS+0x1ec>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8004b68:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 8004b6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b70:	bf38      	it	cc
 8004b72:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004b76:	2208      	movs	r2, #8
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8004b78:	6033      	str	r3, [r6, #0]
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004b7a:	f000 fb9c 	bl	80052b6 <Uint32ToHex>
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %s -------------------\n", addr_out_flash);
 8004b7e:	491b      	ldr	r1, [pc, #108]	@ (8004bec <receiveRMCDataFromGPS+0x1f4>)
 8004b80:	4825      	ldr	r0, [pc, #148]	@ (8004c18 <receiveRMCDataFromGPS+0x220>)
 8004b82:	f000 fbad 	bl	80052e0 <Debug_printf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8004b86:	6831      	ldr	r1, [r6, #0]
 8004b88:	4668      	mov	r0, sp
 8004b8a:	f7ff fe8b 	bl	80048a4 <readFlash>
 8004b8e:	2258      	movs	r2, #88	@ 0x58
 8004b90:	4669      	mov	r1, sp
 8004b92:	4628      	mov	r0, r5
 8004b94:	f008 f8de 	bl	800cd54 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	65ab      	str	r3, [r5, #88]	@ 0x58
						if(is_read_flash_valid == 1)
 8004b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004c1c <receiveRMCDataFromGPS+0x224>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d1ac      	bne.n	8004afe <receiveRMCDataFromGPS+0x106>
							sendRMCDataWithAddrToGSM(&mail_gsm);
 8004ba4:	4628      	mov	r0, r5
}
 8004ba6:	b017      	add	sp, #92	@ 0x5c
 8004ba8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
							sendRMCDataWithAddrToGSM(&mail_gsm);
 8004bac:	f7ff be06 	b.w	80047bc <sendRMCDataWithAddrToGSM>
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	481b      	ldr	r0, [pc, #108]	@ (8004c20 <receiveRMCDataFromGPS+0x228>)
}
 8004bb4:	b017      	add	sp, #92	@ 0x5c
 8004bb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 8004bba:	f000 bb91 	b.w	80052e0 <Debug_printf>
 8004bbe:	bf00      	nop
 8004bc0:	200040e4 	.word	0x200040e4
 8004bc4:	20007458 	.word	0x20007458
 8004bc8:	08012293 	.word	0x08012293
 8004bcc:	20007510 	.word	0x20007510
 8004bd0:	20007448 	.word	0x20007448
 8004bd4:	080122b4 	.word	0x080122b4
 8004bd8:	0801231c 	.word	0x0801231c
 8004bdc:	200085e8 	.word	0x200085e8
 8004be0:	0801234b 	.word	0x0801234b
 8004be4:	200074b0 	.word	0x200074b0
 8004be8:	20000008 	.word	0x20000008
 8004bec:	2000744c 	.word	0x2000744c
 8004bf0:	08012389 	.word	0x08012389
 8004bf4:	080123d0 	.word	0x080123d0
 8004bf8:	200024b8 	.word	0x200024b8
 8004bfc:	200024bc 	.word	0x200024bc
 8004c00:	200024b4 	.word	0x200024b4
 8004c04:	20002294 	.word	0x20002294
 8004c08:	20002298 	.word	0x20002298
 8004c0c:	0801242c 	.word	0x0801242c
 8004c10:	200024b0 	.word	0x200024b0
 8004c14:	200086ec 	.word	0x200086ec
 8004c18:	0801246c 	.word	0x0801246c
 8004c1c:	20000004 	.word	0x20000004
 8004c20:	080124c1 	.word	0x080124c1

08004c24 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004c28:	482c      	ldr	r0, [pc, #176]	@ (8004cdc <StartSpiFlash+0xb8>)
	current_addr = address_rmc;
 8004c2a:	4d2d      	ldr	r5, [pc, #180]	@ (8004ce0 <StartSpiFlash+0xbc>)
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004c2c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8004d08 <StartSpiFlash+0xe4>
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004c30:	4f2c      	ldr	r7, [pc, #176]	@ (8004ce4 <StartSpiFlash+0xc0>)
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
		Uint32ToHex(current_addr, addr_out_flash, 8);
 8004c32:	4e2d      	ldr	r6, [pc, #180]	@ (8004ce8 <StartSpiFlash+0xc4>)
{
 8004c34:	b087      	sub	sp, #28
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004c36:	f000 fb53 	bl	80052e0 <Debug_printf>
	current_addr = address_rmc;
 8004c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cec <StartSpiFlash+0xc8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	602b      	str	r3, [r5, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004c40:	4c2b      	ldr	r4, [pc, #172]	@ (8004cf0 <StartSpiFlash+0xcc>)
		osDelay(125);
 8004c42:	207d      	movs	r0, #125	@ 0x7d
 8004c44:	f003 fce2 	bl	800860c <osDelay>
		Debug_printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 8004c48:	482a      	ldr	r0, [pc, #168]	@ (8004cf4 <StartSpiFlash+0xd0>)
 8004c4a:	f000 fb49 	bl	80052e0 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	f003 fcc8 	bl	80085e4 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 8004c54:	6821      	ldr	r1, [r4, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004c56:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 8004c58:	4827      	ldr	r0, [pc, #156]	@ (8004cf8 <StartSpiFlash+0xd4>)
 8004c5a:	f000 fb41 	bl	80052e0 <Debug_printf>
		W25_Reset();
 8004c5e:	f7ff f8b2 	bl	8003dc6 <W25_Reset>
		W25_ReadJedecID();
 8004c62:	f7ff f8dd 	bl	8003e20 <W25_ReadJedecID>
		W25_Reset();
 8004c66:	f7ff f8ae 	bl	8003dc6 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004c6a:	2280      	movs	r2, #128	@ 0x80
 8004c6c:	6828      	ldr	r0, [r5, #0]
 8004c6e:	4641      	mov	r1, r8
 8004c70:	f7ff f9ca 	bl	8004008 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8004c74:	4b21      	ldr	r3, [pc, #132]	@ (8004cfc <StartSpiFlash+0xd8>)
 8004c76:	466a      	mov	r2, sp
 8004c78:	f103 0c10 	add.w	ip, r3, #16
 8004c7c:	4691      	mov	r9, r2
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	4614      	mov	r4, r2
 8004c84:	c403      	stmia	r4!, {r0, r1}
 8004c86:	3308      	adds	r3, #8
 8004c88:	4563      	cmp	r3, ip
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	d1f7      	bne.n	8004c7e <StartSpiFlash+0x5a>
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	889b      	ldrh	r3, [r3, #4]
 8004c92:	6020      	str	r0, [r4, #0]
 8004c94:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004c96:	4648      	mov	r0, r9
 8004c98:	f7fb fafa 	bl	8000290 <strlen>
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	b282      	uxth	r2, r0
 8004ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	f003 fac1 	bl	800822c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cae:	4641      	mov	r1, r8
 8004cb0:	2280      	movs	r2, #128	@ 0x80
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f003 faba 	bl	800822c <HAL_UART_Transmit>
		Uint32ToHex(current_addr, addr_out_flash, 8);
 8004cb8:	2208      	movs	r2, #8
 8004cba:	6828      	ldr	r0, [r5, #0]
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	f000 fafa 	bl	80052b6 <Uint32ToHex>
		Debug_printf("\n------------- Current address FLASH: %s -------------\n", addr_out_flash);
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	480e      	ldr	r0, [pc, #56]	@ (8004d00 <StartSpiFlash+0xdc>)
 8004cc6:	f000 fb0b 	bl	80052e0 <Debug_printf>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8004cca:	f7ff fe95 	bl	80049f8 <receiveRMCDataFromGPS>
		Debug_printf("\n\n");
 8004cce:	480d      	ldr	r0, [pc, #52]	@ (8004d04 <StartSpiFlash+0xe0>)
 8004cd0:	f000 fb06 	bl	80052e0 <Debug_printf>
		osDelay(125);
 8004cd4:	207d      	movs	r0, #125	@ 0x7d
 8004cd6:	f003 fc99 	bl	800860c <osDelay>
	for(;;){
 8004cda:	e7b1      	b.n	8004c40 <StartSpiFlash+0x1c>
 8004cdc:	08012528 	.word	0x08012528
 8004ce0:	20000008 	.word	0x20000008
 8004ce4:	20007164 	.word	0x20007164
 8004ce8:	2000744c 	.word	0x2000744c
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	20006f84 	.word	0x20006f84
 8004cf4:	08012580 	.word	0x08012580
 8004cf8:	080125d2 	.word	0x080125d2
 8004cfc:	08012098 	.word	0x08012098
 8004d00:	08012631 	.word	0x08012631
 8004d04:	080115a8 	.word	0x080115a8
 8004d08:	20008668 	.word	0x20008668

08004d0c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <HAL_MspInit+0x38>)
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	619a      	str	r2, [r3, #24]
 8004d16:	699a      	ldr	r2, [r3, #24]
{
 8004d18:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	f002 0201 	and.w	r2, r2, #1
 8004d1e:	9200      	str	r2, [sp, #0]
 8004d20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d28:	61da      	str	r2, [r3, #28]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d34:	2200      	movs	r2, #0
 8004d36:	210f      	movs	r1, #15
 8004d38:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d3c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d3e:	f001 b92b 	b.w	8005f98 <HAL_NVIC_SetPriority>
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4a:	2214      	movs	r2, #20
{
 8004d4c:	b08a      	sub	sp, #40	@ 0x28
 8004d4e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d50:	2100      	movs	r1, #0
 8004d52:	eb0d 0002 	add.w	r0, sp, r2
 8004d56:	f007 f9a9 	bl	800c0ac <memset>
  if(hadc->Instance==ADC2)
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e54 <HAL_ADC_MspInit+0x10c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d137      	bne.n	8004dd2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d62:	4b3d      	ldr	r3, [pc, #244]	@ (8004e58 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8004d64:	4c3d      	ldr	r4, [pc, #244]	@ (8004e5c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d6c:	615a      	str	r2, [r3, #20]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d7e:	615a      	str	r2, [r3, #20]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	9302      	str	r3, [sp, #8]
 8004d88:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d8a:	2620      	movs	r6, #32
 8004d8c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d92:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d94:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d98:	f001 fa22 	bl	80061e0 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004da0:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8004e70 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004da4:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004da8:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004daa:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004dae:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004db4:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004db8:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dbc:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004dbe:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004dc0:	f001 f94a 	bl	8006058 <HAL_DMA_Init>
 8004dc4:	b108      	cbz	r0, 8004dca <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8004dc6:	f7fe ffb6 	bl	8003d36 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004dca:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004dcc:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004dce:	b00a      	add	sp, #40	@ 0x28
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8004dd2:	4a23      	ldr	r2, [pc, #140]	@ (8004e60 <HAL_ADC_MspInit+0x118>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d1fa      	bne.n	8004dce <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8004dda:	4c22      	ldr	r4, [pc, #136]	@ (8004e64 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004ddc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dde:	4822      	ldr	r0, [pc, #136]	@ (8004e68 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004de0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004de4:	615a      	str	r2, [r3, #20]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004dec:	9203      	str	r2, [sp, #12]
 8004dee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004df6:	615a      	str	r2, [r3, #20]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e00:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e04:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e0c:	f001 f9e8 	bl	80061e0 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e10:	2080      	movs	r0, #128	@ 0x80
 8004e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e16:	4915      	ldr	r1, [pc, #84]	@ (8004e6c <HAL_ADC_MspInit+0x124>)
 8004e18:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e1a:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004e1e:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8004e22:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004e24:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e26:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004e2a:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e2e:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004e30:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004e32:	f001 f911 	bl	8006058 <HAL_DMA_Init>
 8004e36:	b108      	cbz	r0, 8004e3c <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8004e38:	f7fe ff7d 	bl	8003d36 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004e3c:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2105      	movs	r1, #5
 8004e42:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004e44:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004e46:	f001 f8a7 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8004e4a:	202f      	movs	r0, #47	@ 0x2f
 8004e4c:	f001 f8d6 	bl	8005ffc <HAL_NVIC_EnableIRQ>
}
 8004e50:	e7bd      	b.n	8004dce <HAL_ADC_MspInit+0x86>
 8004e52:	bf00      	nop
 8004e54:	50000100 	.word	0x50000100
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	20007364 	.word	0x20007364
 8004e60:	50000400 	.word	0x50000400
 8004e64:	20007320 	.word	0x20007320
 8004e68:	48000400 	.word	0x48000400
 8004e6c:	40020458 	.word	0x40020458
 8004e70:	40020408 	.word	0x40020408

08004e74 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004e74:	6802      	ldr	r2, [r0, #0]
 8004e76:	4b07      	ldr	r3, [pc, #28]	@ (8004e94 <HAL_RTC_MspInit+0x20>)
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d10a      	bne.n	8004e92 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004e80:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <HAL_RTC_MspInit+0x24>)
 8004e86:	fab2 f282 	clz	r2, r2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	2201      	movs	r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004e92:	4770      	bx	lr
 8004e94:	40002800 	.word	0x40002800
 8004e98:	10908100 	.word	0x10908100

08004e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e9c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9e:	2214      	movs	r2, #20
{
 8004ea0:	b08a      	sub	sp, #40	@ 0x28
 8004ea2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	eb0d 0002 	add.w	r0, sp, r2
 8004eaa:	f007 f8ff 	bl	800c0ac <memset>
  if(hspi->Instance==SPI1)
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <HAL_SPI_MspInit+0x90>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d120      	bne.n	8004ef8 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_SPI_MspInit+0x94>)
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ebe:	619a      	str	r2, [r3, #24]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004ec6:	9201      	str	r2, [sp, #4]
 8004ec8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004ed0:	615a      	str	r2, [r3, #20]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004edc:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ede:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ee2:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eec:	4811      	ldr	r0, [pc, #68]	@ (8004f34 <HAL_SPI_MspInit+0x98>)
 8004eee:	a905      	add	r1, sp, #20
 8004ef0:	f001 f976 	bl	80061e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ef4:	b00a      	add	sp, #40	@ 0x28
 8004ef6:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f38 <HAL_SPI_MspInit+0x9c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d1fa      	bne.n	8004ef4 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004efe:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <HAL_SPI_MspInit+0x94>)
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f06:	61da      	str	r2, [r3, #28]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004f0e:	9203      	str	r2, [sp, #12]
 8004f10:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004f18:	615a      	str	r2, [r3, #20]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004f24:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004f28:	e7d9      	b.n	8004ede <HAL_SPI_MspInit+0x42>
 8004f2a:	bf00      	nop
 8004f2c:	40013000 	.word	0x40013000
 8004f30:	40021000 	.word	0x40021000
 8004f34:	48000400 	.word	0x48000400
 8004f38:	40003800 	.word	0x40003800

08004f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f3c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <HAL_TIM_Base_MspInit+0x3c>)
 8004f40:	6802      	ldr	r2, [r0, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d115      	bne.n	8004f72 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f46:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f4a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	f042 0202 	orr.w	r2, r2, #2
 8004f52:	61da      	str	r2, [r3, #28]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f60:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f62:	f001 f819 	bl	8005f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f66:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004f68:	b003      	add	sp, #12
 8004f6a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f6e:	f001 b845 	b.w	8005ffc <HAL_NVIC_EnableIRQ>
}
 8004f72:	b003      	add	sp, #12
 8004f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f78:	40000400 	.word	0x40000400

08004f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f7c:	b530      	push	{r4, r5, lr}
 8004f7e:	4605      	mov	r5, r0
 8004f80:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f82:	2214      	movs	r2, #20
 8004f84:	2100      	movs	r1, #0
 8004f86:	a807      	add	r0, sp, #28
 8004f88:	f007 f890 	bl	800c0ac <memset>
  if(huart->Instance==USART1)
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_UART_MspInit+0x13c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d138      	bne.n	8005006 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f94:	4b49      	ldr	r3, [pc, #292]	@ (80050bc <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004f96:	4c4a      	ldr	r4, [pc, #296]	@ (80050c0 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f9e:	619a      	str	r2, [r3, #24]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004fa6:	9201      	str	r2, [sp, #4]
 8004fa8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004fb0:	615a      	str	r2, [r3, #20]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbc:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc6:	f04f 0e03 	mov.w	lr, #3
 8004fca:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fcc:	a907      	add	r1, sp, #28
 8004fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fd2:	e9cd e30a 	strd	lr, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd6:	f001 f903 	bl	80061e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fda:	4a3a      	ldr	r2, [pc, #232]	@ (80050c4 <HAL_UART_MspInit+0x148>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fe2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fe4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004fe8:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fea:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fec:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004fee:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ff0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f001 f830 	bl	8006058 <HAL_DMA_Init>
 8004ff8:	b108      	cbz	r0, 8004ffe <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8004ffa:	f7fe fe9c 	bl	8003d36 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004ffe:	676c      	str	r4, [r5, #116]	@ 0x74
 8005000:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005002:	b00d      	add	sp, #52	@ 0x34
 8005004:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8005006:	4a30      	ldr	r2, [pc, #192]	@ (80050c8 <HAL_UART_MspInit+0x14c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d12e      	bne.n	800506a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800500c:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <HAL_UART_MspInit+0x140>)
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005014:	61da      	str	r2, [r3, #28]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800501c:	9203      	str	r2, [sp, #12]
 800501e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005026:	615a      	str	r2, [r3, #20]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	9304      	str	r3, [sp, #16]
 8005030:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	200c      	movs	r0, #12
 8005034:	2302      	movs	r3, #2
 8005036:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800503a:	2403      	movs	r4, #3
 800503c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800503e:	a907      	add	r1, sp, #28
 8005040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005044:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005048:	f001 f8ca 	bl	80061e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800504c:	4c1f      	ldr	r4, [pc, #124]	@ (80050cc <HAL_UART_MspInit+0x150>)
 800504e:	4b20      	ldr	r3, [pc, #128]	@ (80050d0 <HAL_UART_MspInit+0x154>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005050:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005052:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005054:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005056:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800505a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800505e:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005060:	2320      	movs	r3, #32
 8005062:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005068:	e7c2      	b.n	8004ff0 <HAL_UART_MspInit+0x74>
  else if(huart->Instance==USART3)
 800506a:	4a1a      	ldr	r2, [pc, #104]	@ (80050d4 <HAL_UART_MspInit+0x158>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d1c8      	bne.n	8005002 <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005072:	4819      	ldr	r0, [pc, #100]	@ (80050d8 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005074:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005076:	4c19      	ldr	r4, [pc, #100]	@ (80050dc <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005078:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800507c:	61da      	str	r2, [r3, #28]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005084:	9205      	str	r2, [sp, #20]
 8005086:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800508e:	615a      	str	r2, [r3, #20]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005096:	9306      	str	r3, [sp, #24]
 8005098:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800509e:	2302      	movs	r3, #2
 80050a0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80050a4:	2103      	movs	r1, #3
 80050a6:	2307      	movs	r3, #7
 80050a8:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ac:	a907      	add	r1, sp, #28
 80050ae:	f001 f897 	bl	80061e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80050b2:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_UART_MspInit+0x164>)
 80050b4:	e7cc      	b.n	8005050 <HAL_UART_MspInit+0xd4>
 80050b6:	bf00      	nop
 80050b8:	40013800 	.word	0x40013800
 80050bc:	40021000 	.word	0x40021000
 80050c0:	20007010 	.word	0x20007010
 80050c4:	40020058 	.word	0x40020058
 80050c8:	40004400 	.word	0x40004400
 80050cc:	20006fcc 	.word	0x20006fcc
 80050d0:	4002006c 	.word	0x4002006c
 80050d4:	40004800 	.word	0x40004800
 80050d8:	48000400 	.word	0x48000400
 80050dc:	20006f88 	.word	0x20006f88
 80050e0:	40020030 	.word	0x40020030

080050e4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_InitTick+0x88>)
{
 80050e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	61da      	str	r2, [r3, #28]
 80050f0:	69db      	ldr	r3, [r3, #28]
{
 80050f2:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	9302      	str	r3, [sp, #8]
{
 80050fa:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80050fc:	a901      	add	r1, sp, #4
 80050fe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005100:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005102:	f001 fc97 	bl	8006a34 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	bb53      	cbnz	r3, 8005160 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800510a:	f001 fc63 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800510e:	4e18      	ldr	r6, [pc, #96]	@ (8005170 <HAL_InitTick+0x8c>)
 8005110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005114:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005116:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800511a:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800511c:	4b15      	ldr	r3, [pc, #84]	@ (8005174 <HAL_InitTick+0x90>)
 800511e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005122:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8005124:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8005126:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800512c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800512e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8005130:	f002 fcce 	bl	8007ad0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8005134:	4604      	mov	r4, r0
 8005136:	b980      	cbnz	r0, 800515a <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005138:	4630      	mov	r0, r6
 800513a:	f002 fb8b 	bl	8007854 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800513e:	4604      	mov	r4, r0
 8005140:	b958      	cbnz	r0, 800515a <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005142:	201c      	movs	r0, #28
 8005144:	f000 ff5a 	bl	8005ffc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005148:	2d0f      	cmp	r5, #15
 800514a:	d80d      	bhi.n	8005168 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800514c:	4622      	mov	r2, r4
 800514e:	4629      	mov	r1, r5
 8005150:	201c      	movs	r0, #28
 8005152:	f000 ff21 	bl	8005f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005156:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <HAL_InitTick+0x94>)
 8005158:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800515a:	4620      	mov	r0, r4
 800515c:	b008      	add	sp, #32
 800515e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005160:	f001 fc38 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
 8005164:	0040      	lsls	r0, r0, #1
 8005166:	e7d2      	b.n	800510e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8005168:	2401      	movs	r4, #1
 800516a:	e7f6      	b.n	800515a <HAL_InitTick+0x76>
 800516c:	40021000 	.word	0x40021000
 8005170:	200086f4 	.word	0x200086f4
 8005174:	000f4240 	.word	0x000f4240
 8005178:	20000020 	.word	0x20000020

0800517c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800517c:	e7fe      	b.n	800517c <NMI_Handler>

0800517e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800517e:	e7fe      	b.n	800517e <HardFault_Handler>

08005180 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005180:	e7fe      	b.n	8005180 <MemManage_Handler>

08005182 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005182:	e7fe      	b.n	8005182 <BusFault_Handler>

08005184 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005184:	e7fe      	b.n	8005184 <UsageFault_Handler>

08005186 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005186:	4770      	bx	lr

08005188 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005188:	4801      	ldr	r0, [pc, #4]	@ (8005190 <DMA1_Channel3_IRQHandler+0x8>)
 800518a:	f000 bfe1 	b.w	8006150 <HAL_DMA_IRQHandler>
 800518e:	bf00      	nop
 8005190:	20006f88 	.word	0x20006f88

08005194 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005194:	4801      	ldr	r0, [pc, #4]	@ (800519c <DMA1_Channel5_IRQHandler+0x8>)
 8005196:	f000 bfdb 	b.w	8006150 <HAL_DMA_IRQHandler>
 800519a:	bf00      	nop
 800519c:	20007010 	.word	0x20007010

080051a0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80051a0:	4801      	ldr	r0, [pc, #4]	@ (80051a8 <DMA1_Channel6_IRQHandler+0x8>)
 80051a2:	f000 bfd5 	b.w	8006150 <HAL_DMA_IRQHandler>
 80051a6:	bf00      	nop
 80051a8:	20006fcc 	.word	0x20006fcc

080051ac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051ac:	4801      	ldr	r0, [pc, #4]	@ (80051b4 <TIM2_IRQHandler+0x8>)
 80051ae:	f002 bb8b 	b.w	80078c8 <HAL_TIM_IRQHandler>
 80051b2:	bf00      	nop
 80051b4:	200086f4 	.word	0x200086f4

080051b8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80051b8:	4801      	ldr	r0, [pc, #4]	@ (80051c0 <TIM3_IRQHandler+0x8>)
 80051ba:	f002 bb85 	b.w	80078c8 <HAL_TIM_IRQHandler>
 80051be:	bf00      	nop
 80051c0:	200071ec 	.word	0x200071ec

080051c4 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <ADC3_IRQHandler+0x8>)
 80051c6:	f000 baeb 	b.w	80057a0 <HAL_ADC_IRQHandler>
 80051ca:	bf00      	nop
 80051cc:	200073a8 	.word	0x200073a8

080051d0 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80051d0:	4801      	ldr	r0, [pc, #4]	@ (80051d8 <DMA2_Channel1_IRQHandler+0x8>)
 80051d2:	f000 bfbd 	b.w	8006150 <HAL_DMA_IRQHandler>
 80051d6:	bf00      	nop
 80051d8:	20007364 	.word	0x20007364

080051dc <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80051dc:	4801      	ldr	r0, [pc, #4]	@ (80051e4 <DMA2_Channel5_IRQHandler+0x8>)
 80051de:	f000 bfb7 	b.w	8006150 <HAL_DMA_IRQHandler>
 80051e2:	bf00      	nop
 80051e4:	20007320 	.word	0x20007320

080051e8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80051e8:	2001      	movs	r0, #1
 80051ea:	4770      	bx	lr

080051ec <_kill>:

int _kill(int pid, int sig)
{
 80051ec:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80051ee:	f007 fd7f 	bl	800ccf0 <__errno>
 80051f2:	2316      	movs	r3, #22
 80051f4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80051f6:	f04f 30ff 	mov.w	r0, #4294967295
 80051fa:	bd08      	pop	{r3, pc}

080051fc <_exit>:

void _exit (int status)
{
 80051fc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80051fe:	f007 fd77 	bl	800ccf0 <__errno>
 8005202:	2316      	movs	r3, #22
 8005204:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005206:	e7fe      	b.n	8005206 <_exit+0xa>

08005208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	460d      	mov	r5, r1
 800520c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800520e:	460e      	mov	r6, r1
 8005210:	1b73      	subs	r3, r6, r5
 8005212:	429c      	cmp	r4, r3
 8005214:	dc01      	bgt.n	800521a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8005216:	4620      	mov	r0, r4
 8005218:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800521a:	f3af 8000 	nop.w
 800521e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005222:	e7f5      	b.n	8005210 <_read+0x8>

08005224 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	460d      	mov	r5, r1
 8005228:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522a:	460e      	mov	r6, r1
 800522c:	1b73      	subs	r3, r6, r5
 800522e:	429c      	cmp	r4, r3
 8005230:	dc01      	bgt.n	8005236 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8005232:	4620      	mov	r0, r4
 8005234:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005236:	f816 0b01 	ldrb.w	r0, [r6], #1
 800523a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800523e:	e7f5      	b.n	800522c <_write+0x8>

08005240 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	4770      	bx	lr

08005246 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800524a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr

08005250 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005250:	2001      	movs	r0, #1
 8005252:	4770      	bx	lr

08005254 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005254:	2000      	movs	r0, #0
 8005256:	4770      	bx	lr

08005258 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005258:	4a0b      	ldr	r2, [pc, #44]	@ (8005288 <_sbrk+0x30>)
 800525a:	6811      	ldr	r1, [r2, #0]
{
 800525c:	b510      	push	{r4, lr}
 800525e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005260:	b909      	cbnz	r1, 8005266 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005262:	490a      	ldr	r1, [pc, #40]	@ (800528c <_sbrk+0x34>)
 8005264:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005266:	6810      	ldr	r0, [r2, #0]
 8005268:	4909      	ldr	r1, [pc, #36]	@ (8005290 <_sbrk+0x38>)
 800526a:	4c0a      	ldr	r4, [pc, #40]	@ (8005294 <_sbrk+0x3c>)
 800526c:	4403      	add	r3, r0
 800526e:	1b09      	subs	r1, r1, r4
 8005270:	428b      	cmp	r3, r1
 8005272:	d906      	bls.n	8005282 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005274:	f007 fd3c 	bl	800ccf0 <__errno>
 8005278:	230c      	movs	r3, #12
 800527a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800527c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005280:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005282:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005284:	e7fc      	b.n	8005280 <_sbrk+0x28>
 8005286:	bf00      	nop
 8005288:	20008744 	.word	0x20008744
 800528c:	20009a00 	.word	0x20009a00
 8005290:	2000a000 	.word	0x2000a000
 8005294:	00000400 	.word	0x00000400

08005298 <uart_transmit_string>:

#include "spi_flash.h"

uint32_t current_addr_debug = DEBUG_START_ADDRESS;

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800529c:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800529e:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80052a0:	f7fa fff6 	bl	8000290 <strlen>
 80052a4:	4621      	mov	r1, r4
 80052a6:	b282      	uxth	r2, r0
 80052a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052ac:	4628      	mov	r0, r5
}
 80052ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80052b2:	f002 bfbb 	b.w	800822c <HAL_UART_Transmit>

080052b6 <Uint32ToHex>:

void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 80052b6:	b530      	push	{r4, r5, lr}
 80052b8:	1e54      	subs	r4, r2, #1
 80052ba:	1e4d      	subs	r5, r1, #1
 80052bc:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 80052be:	1d23      	adds	r3, r4, #4
 80052c0:	d102      	bne.n	80052c8 <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 80052c2:	2300      	movs	r3, #0
 80052c4:	548b      	strb	r3, [r1, r2]
}
 80052c6:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 80052c8:	fa20 f304 	lsr.w	r3, r0, r4
 80052cc:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	bf94      	ite	ls
 80052d4:	3330      	addls	r3, #48	@ 0x30
 80052d6:	3337      	addhi	r3, #55	@ 0x37
 80052d8:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 80052dc:	3c04      	subs	r4, #4
 80052de:	e7ee      	b.n	80052be <Uint32ToHex+0x8>

080052e0 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80052e0:	b40f      	push	{r0, r1, r2, r3}
 80052e2:	b510      	push	{r4, lr}
 80052e4:	b0c4      	sub	sp, #272	@ 0x110
 80052e6:	ab46      	add	r3, sp, #280	@ 0x118

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf((char*)output_buffer, sizeof(output_buffer), format, args);
 80052e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80052ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80052f0:	9300      	str	r3, [sp, #0]
    vsnprintf((char*)output_buffer, sizeof(output_buffer), format, args);
 80052f2:	a804      	add	r0, sp, #16
 80052f4:	f006 fecc 	bl	800c090 <vsniprintf>

    if(is_saving_debug && (strstr((char *)output_buffer, "$GNRMC")) ){
 80052f8:	4b20      	ldr	r3, [pc, #128]	@ (800537c <Debug_printf+0x9c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d033      	beq.n	8005368 <Debug_printf+0x88>
 8005300:	491f      	ldr	r1, [pc, #124]	@ (8005380 <Debug_printf+0xa0>)
 8005302:	a804      	add	r0, sp, #16
 8005304:	f006 ff22 	bl	800c14c <strstr>
 8005308:	b370      	cbz	r0, 8005368 <Debug_printf+0x88>
    	uart_transmit_string(&huart1, (uint8_t*) "SAVING GNRMC OUTPUT TO FLASH AT 0X7000");
    	W25_Reset();
    	W25_PageProgram(current_addr_debug, output_buffer, 256);
 800530a:	4c1e      	ldr	r4, [pc, #120]	@ (8005384 <Debug_printf+0xa4>)
    	uart_transmit_string(&huart1, (uint8_t*) "SAVING GNRMC OUTPUT TO FLASH AT 0X7000");
 800530c:	491e      	ldr	r1, [pc, #120]	@ (8005388 <Debug_printf+0xa8>)
 800530e:	481f      	ldr	r0, [pc, #124]	@ (800538c <Debug_printf+0xac>)
 8005310:	f7ff ffc2 	bl	8005298 <uart_transmit_string>
    	W25_Reset();
 8005314:	f7fe fd57 	bl	8003dc6 <W25_Reset>
    	W25_PageProgram(current_addr_debug, output_buffer, 256);
 8005318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531c:	a904      	add	r1, sp, #16
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	f7fe fe28 	bl	8003f74 <W25_PageProgram>
    	current_addr_debug += 256;
 8005324:	6822      	ldr	r2, [r4, #0]
    	char addr_out[10];
    	sprintf(addr_out, "%08lx", current_addr_debug);
 8005326:	491a      	ldr	r1, [pc, #104]	@ (8005390 <Debug_printf+0xb0>)
    	current_addr_debug += 256;
 8005328:	f502 7280 	add.w	r2, r2, #256	@ 0x100
    	sprintf(addr_out, "%08lx", current_addr_debug);
 800532c:	a801      	add	r0, sp, #4
    	current_addr_debug += 256;
 800532e:	6022      	str	r2, [r4, #0]
    	sprintf(addr_out, "%08lx", current_addr_debug);
 8005330:	f006 fdf4 	bl	800bf1c <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8005334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005338:	2208      	movs	r2, #8
 800533a:	a901      	add	r1, sp, #4
 800533c:	4813      	ldr	r0, [pc, #76]	@ (800538c <Debug_printf+0xac>)
 800533e:	f002 ff75 	bl	800822c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8005342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005346:	4913      	ldr	r1, [pc, #76]	@ (8005394 <Debug_printf+0xb4>)
 8005348:	4810      	ldr	r0, [pc, #64]	@ (800538c <Debug_printf+0xac>)
 800534a:	2201      	movs	r2, #1
 800534c:	f002 ff6e 	bl	800822c <HAL_UART_Transmit>
    	if(current_addr_debug == 0x8F00){
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	f5b3 4f0f 	cmp.w	r3, #36608	@ 0x8f00
 8005356:	d107      	bne.n	8005368 <Debug_printf+0x88>
    		current_addr_debug = 0x7000;
 8005358:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800535c:	6023      	str	r3, [r4, #0]
    		W25_Reset();
 800535e:	f7fe fd32 	bl	8003dc6 <W25_Reset>
    		W25_SectorErase(current_addr_debug);
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	f7fe fdda 	bl	8003f1c <W25_SectorErase>
    }
    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8005368:	4808      	ldr	r0, [pc, #32]	@ (800538c <Debug_printf+0xac>)
 800536a:	a904      	add	r1, sp, #16
 800536c:	f7ff ff94 	bl	8005298 <uart_transmit_string>
}
 8005370:	b044      	add	sp, #272	@ 0x110
 8005372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005376:	b004      	add	sp, #16
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20002660 	.word	0x20002660
 8005380:	08010261 	.word	0x08010261
 8005384:	20000014 	.word	0x20000014
 8005388:	08012669 	.word	0x08012669
 800538c:	20007164 	.word	0x20007164
 8005390:	08012690 	.word	0x08012690
 8005394:	08010906 	.word	0x08010906

08005398 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005398:	4a03      	ldr	r2, [pc, #12]	@ (80053a8 <SystemInit+0x10>)
 800539a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800539e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053a6:	4770      	bx	lr
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80053ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80053b0:	f7ff fff2 	bl	8005398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053b4:	480c      	ldr	r0, [pc, #48]	@ (80053e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80053b6:	490d      	ldr	r1, [pc, #52]	@ (80053ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80053b8:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <LoopForever+0xe>)
  movs r3, #0
 80053ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053bc:	e002      	b.n	80053c4 <LoopCopyDataInit>

080053be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053c2:	3304      	adds	r3, #4

080053c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053c8:	d3f9      	bcc.n	80053be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053ca:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053cc:	4c0a      	ldr	r4, [pc, #40]	@ (80053f8 <LoopForever+0x16>)
  movs r3, #0
 80053ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053d0:	e001      	b.n	80053d6 <LoopFillZerobss>

080053d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053d4:	3204      	adds	r2, #4

080053d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053d8:	d3fb      	bcc.n	80053d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053da:	f007 fc8f 	bl	800ccfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053de:	f7fe fa67 	bl	80038b0 <main>

080053e2 <LoopForever>:

LoopForever:
    b LoopForever
 80053e2:	e7fe      	b.n	80053e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80053e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80053e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053ec:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80053f0:	08012c40 	.word	0x08012c40
  ldr r2, =_sbss
 80053f4:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80053f8:	200099fc 	.word	0x200099fc

080053fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053fc:	e7fe      	b.n	80053fc <ADC1_2_IRQHandler>

080053fe <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 80053fe:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8005400:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005402:	f7fe fc98 	bl	8003d36 <Error_Handler>
 8005406:	e7fe      	b.n	8005406 <__cxa_guard_abort.part.0+0x8>

08005408 <stm32_lock_acquire>:
{
 8005408:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800540a:	7a03      	ldrb	r3, [r0, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d903      	bls.n	8005418 <stm32_lock_acquire+0x10>
 8005410:	b672      	cpsid	i
 8005412:	f7fe fc90 	bl	8003d36 <Error_Handler>
 8005416:	e7fe      	b.n	8005416 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800541c:	f3ef 8211 	mrs	r2, BASEPRI
 8005420:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8005424:	f381 8811 	msr	BASEPRI, r1
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005434:	bd08      	pop	{r3, pc}

08005436 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005436:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8005438:	7a03      	ldrb	r3, [r0, #8]
 800543a:	3b01      	subs	r3, #1
 800543c:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800543e:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8005440:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005442:	d903      	bls.n	800544c <stm32_lock_release+0x16>
 8005444:	b672      	cpsid	i
 8005446:	f7fe fc76 	bl	8003d36 <Error_Handler>
 800544a:	e7fe      	b.n	800544a <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800544c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005450:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8005454:	bd08      	pop	{r3, pc}

08005456 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005456:	b510      	push	{r4, lr}
  if (lock == NULL)
 8005458:	4604      	mov	r4, r0
 800545a:	b920      	cbnz	r0, 8005466 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 800545c:	f007 fc48 	bl	800ccf0 <__errno>
 8005460:	2316      	movs	r3, #22
 8005462:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8005464:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005466:	200c      	movs	r0, #12
 8005468:	f004 fe9c 	bl	800a1a4 <malloc>
 800546c:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 800546e:	b120      	cbz	r0, 800547a <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8005476:	7203      	strb	r3, [r0, #8]
}
 8005478:	e7f4      	b.n	8005464 <__retarget_lock_init_recursive+0xe>
 800547a:	f7ff ffc0 	bl	80053fe <__cxa_guard_abort.part.0>

0800547e <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 800547e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005480:	b908      	cbnz	r0, 8005486 <__retarget_lock_acquire+0x8>
 8005482:	f7ff ffbc 	bl	80053fe <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8005486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800548a:	f7ff bfbd 	b.w	8005408 <stm32_lock_acquire>

0800548e <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 800548e:	f7ff bff6 	b.w	800547e <__retarget_lock_acquire>

08005492 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8005492:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005494:	b918      	cbnz	r0, 800549e <__retarget_lock_release+0xc>
 8005496:	b672      	cpsid	i
 8005498:	f7fe fc4d 	bl	8003d36 <Error_Handler>
 800549c:	e7fe      	b.n	800549c <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 800549e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80054a2:	f7ff bfc8 	b.w	8005436 <stm32_lock_release>

080054a6 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 80054a6:	f7ff bff4 	b.w	8005492 <__retarget_lock_release>
	...

080054ac <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054ac:	4a07      	ldr	r2, [pc, #28]	@ (80054cc <HAL_Init+0x20>)
{
 80054ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	f043 0310 	orr.w	r3, r3, #16
 80054b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b8:	2003      	movs	r0, #3
 80054ba:	f000 fd5b 	bl	8005f74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054be:	200f      	movs	r0, #15
 80054c0:	f7ff fe10 	bl	80050e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c4:	f7ff fc22 	bl	8004d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80054c8:	2000      	movs	r0, #0
 80054ca:	bd08      	pop	{r3, pc}
 80054cc:	40022000 	.word	0x40022000

080054d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80054d0:	4a03      	ldr	r2, [pc, #12]	@ (80054e0 <HAL_IncTick+0x10>)
 80054d2:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <HAL_IncTick+0x14>)
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	440b      	add	r3, r1
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20008778 	.word	0x20008778
 80054e4:	2000001c 	.word	0x2000001c

080054e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80054e8:	4b01      	ldr	r3, [pc, #4]	@ (80054f0 <HAL_GetTick+0x8>)
 80054ea:	6818      	ldr	r0, [r3, #0]
}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20008778 	.word	0x20008778

080054f4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80054f4:	4770      	bx	lr

080054f6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80054f6:	4770      	bx	lr

080054f8 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80054f8:	4770      	bx	lr

080054fa <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80054fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	f002 0203 	and.w	r2, r2, #3
 8005504:	2a01      	cmp	r2, #1
{
 8005506:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005508:	d001      	beq.n	800550e <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800550a:	2000      	movs	r0, #0
}
 800550c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	07d1      	lsls	r1, r2, #31
 8005512:	d5fa      	bpl.n	800550a <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	f002 020d 	and.w	r2, r2, #13
 800551a:	2a01      	cmp	r2, #1
 800551c:	d115      	bne.n	800554a <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	f042 0202 	orr.w	r2, r2, #2
 8005524:	609a      	str	r2, [r3, #8]
 8005526:	2203      	movs	r2, #3
 8005528:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800552a:	f7ff ffdd 	bl	80054e8 <HAL_GetTick>
 800552e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	07db      	lsls	r3, r3, #31
 8005536:	d5e8      	bpl.n	800550a <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005538:	f7ff ffd6 	bl	80054e8 <HAL_GetTick>
 800553c:	1b40      	subs	r0, r0, r5
 800553e:	2802      	cmp	r0, #2
 8005540:	d9f6      	bls.n	8005530 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	07da      	lsls	r2, r3, #31
 8005548:	d5f2      	bpl.n	8005530 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800554a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800554c:	f043 0310 	orr.w	r3, r3, #16
 8005550:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005552:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800555a:	2001      	movs	r0, #1
 800555c:	e7d6      	b.n	800550c <ADC_Disable+0x12>
	...

08005560 <HAL_ADC_Init>:
{
 8005560:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005566:	4604      	mov	r4, r0
 8005568:	2800      	cmp	r0, #0
 800556a:	f000 8103 	beq.w	8005774 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800556e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005570:	06d5      	lsls	r5, r2, #27
 8005572:	d46a      	bmi.n	800564a <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005574:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d035      	beq.n	80055e6 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800557a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	00d2      	lsls	r2, r2, #3
 8005582:	d502      	bpl.n	800558a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005584:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005586:	009d      	lsls	r5, r3, #2
 8005588:	d50a      	bpl.n	80055a0 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800558a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800558c:	f023 0312 	bic.w	r3, r3, #18
 8005590:	f043 0310 	orr.w	r3, r3, #16
 8005594:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005596:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800559e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80055a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055a2:	06d9      	lsls	r1, r3, #27
 80055a4:	f100 80e0 	bmi.w	8005768 <HAL_ADC_Init+0x208>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f040 80dd 	bne.w	8005768 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80055b2:	0752      	lsls	r2, r2, #29
 80055b4:	f100 80d8 	bmi.w	8005768 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80055b8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80055ba:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80055be:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80055c6:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005778 <HAL_ADC_Init+0x218>)
 80055ca:	d042      	beq.n	8005652 <HAL_ADC_Init+0xf2>
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d03e      	beq.n	800564e <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80055d0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80055d4:	4293      	cmp	r3, r2
 80055d6:	4969      	ldr	r1, [pc, #420]	@ (800577c <HAL_ADC_Init+0x21c>)
 80055d8:	f000 80b3 	beq.w	8005742 <HAL_ADC_Init+0x1e2>
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf18      	it	ne
 80055e0:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055e2:	4967      	ldr	r1, [pc, #412]	@ (8005780 <HAL_ADC_Init+0x220>)
 80055e4:	e036      	b.n	8005654 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80055e6:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80055ea:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80055ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80055f0:	f7ff fbaa 	bl	8004d48 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	00d8      	lsls	r0, r3, #3
 80055fa:	d4be      	bmi.n	800557a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ff7c 	bl	80054fa <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005602:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005604:	06d1      	lsls	r1, r2, #27
 8005606:	d4b9      	bmi.n	800557c <HAL_ADC_Init+0x1c>
 8005608:	2800      	cmp	r0, #0
 800560a:	d1b7      	bne.n	800557c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 800560c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800560e:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005610:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005614:	f023 0302 	bic.w	r3, r3, #2
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800561e:	6893      	ldr	r3, [r2, #8]
 8005620:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005624:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005626:	6893      	ldr	r3, [r2, #8]
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800562e:	4b55      	ldr	r3, [pc, #340]	@ (8005784 <HAL_ADC_Init+0x224>)
 8005630:	4a55      	ldr	r2, [pc, #340]	@ (8005788 <HAL_ADC_Init+0x228>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fbb3 f3f2 	udiv	r3, r3, r2
 8005638:	220a      	movs	r2, #10
 800563a:	4353      	muls	r3, r2
            wait_loop_index--;
 800563c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d09a      	beq.n	800557a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	3b01      	subs	r3, #1
 8005648:	e7f8      	b.n	800563c <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800564a:	4618      	mov	r0, r3
 800564c:	e7a8      	b.n	80055a0 <HAL_ADC_Init+0x40>
 800564e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005652:	494e      	ldr	r1, [pc, #312]	@ (800578c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005654:	689d      	ldr	r5, [r3, #8]
 8005656:	f005 0503 	and.w	r5, r5, #3
 800565a:	2d01      	cmp	r5, #1
 800565c:	d102      	bne.n	8005664 <HAL_ADC_Init+0x104>
 800565e:	681d      	ldr	r5, [r3, #0]
 8005660:	07ed      	lsls	r5, r5, #31
 8005662:	d40e      	bmi.n	8005682 <HAL_ADC_Init+0x122>
 8005664:	b13a      	cbz	r2, 8005676 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005666:	6895      	ldr	r5, [r2, #8]
 8005668:	f005 0503 	and.w	r5, r5, #3
 800566c:	2d01      	cmp	r5, #1
 800566e:	d102      	bne.n	8005676 <HAL_ADC_Init+0x116>
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	07d2      	lsls	r2, r2, #31
 8005674:	d405      	bmi.n	8005682 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005676:	688a      	ldr	r2, [r1, #8]
 8005678:	6865      	ldr	r5, [r4, #4]
 800567a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800567e:	432a      	orrs	r2, r5
 8005680:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005682:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005686:	430a      	orrs	r2, r1
 8005688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800568a:	7e65      	ldrb	r5, [r4, #25]
 800568c:	3901      	subs	r1, #1
 800568e:	bf18      	it	ne
 8005690:	2101      	movne	r1, #1
 8005692:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8005696:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800569a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800569e:	2901      	cmp	r1, #1
 80056a0:	d107      	bne.n	80056b2 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80056a2:	2d00      	cmp	r5, #0
 80056a4:	d14f      	bne.n	8005746 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80056a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056a8:	3901      	subs	r1, #1
 80056aa:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80056ae:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056b2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80056b4:	2901      	cmp	r1, #1
 80056b6:	d015      	beq.n	80056e4 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80056b8:	4d35      	ldr	r5, [pc, #212]	@ (8005790 <HAL_ADC_Init+0x230>)
 80056ba:	42ab      	cmp	r3, r5
 80056bc:	d003      	beq.n	80056c6 <HAL_ADC_Init+0x166>
 80056be:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80056c2:	42ab      	cmp	r3, r5
 80056c4:	d10a      	bne.n	80056dc <HAL_ADC_Init+0x17c>
 80056c6:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80056ca:	d047      	beq.n	800575c <HAL_ADC_Init+0x1fc>
 80056cc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80056d0:	d047      	beq.n	8005762 <HAL_ADC_Init+0x202>
 80056d2:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80056d6:	bf08      	it	eq
 80056d8:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80056dc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80056de:	4315      	orrs	r5, r2
 80056e0:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	f011 0f0c 	tst.w	r1, #12
 80056ea:	d10c      	bne.n	8005706 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80056ec:	68d9      	ldr	r1, [r3, #12]
 80056ee:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80056f2:	f021 0102 	bic.w	r1, r1, #2
 80056f6:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80056f8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80056fc:	7e25      	ldrb	r5, [r4, #24]
 80056fe:	0049      	lsls	r1, r1, #1
 8005700:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8005704:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8005706:	68dd      	ldr	r5, [r3, #12]
 8005708:	4922      	ldr	r1, [pc, #136]	@ (8005794 <HAL_ADC_Init+0x234>)
 800570a:	4029      	ands	r1, r5
 800570c:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800570e:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005710:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005712:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005714:	bf05      	ittet	eq
 8005716:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8005718:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800571a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800571c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005720:	bf06      	itte	eq
 8005722:	f021 010f 	biceq.w	r1, r1, #15
 8005726:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005728:	f022 020f 	bicne.w	r2, r2, #15
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800572e:	2300      	movs	r3, #0
 8005730:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005734:	f023 0303 	bic.w	r3, r3, #3
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800573e:	b003      	add	sp, #12
 8005740:	bd30      	pop	{r4, r5, pc}
 8005742:	460a      	mov	r2, r1
 8005744:	e74d      	b.n	80055e2 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8005746:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005748:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 800574c:	f041 0120 	orr.w	r1, r1, #32
 8005750:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005752:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005754:	f041 0101 	orr.w	r1, r1, #1
 8005758:	6461      	str	r1, [r4, #68]	@ 0x44
 800575a:	e7aa      	b.n	80056b2 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800575c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8005760:	e7bc      	b.n	80056dc <HAL_ADC_Init+0x17c>
 8005762:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8005766:	e7b9      	b.n	80056dc <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8005768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800576a:	f023 0312 	bic.w	r3, r3, #18
 800576e:	f043 0310 	orr.w	r3, r3, #16
 8005772:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8005774:	2001      	movs	r0, #1
 8005776:	e7e2      	b.n	800573e <HAL_ADC_Init+0x1de>
 8005778:	50000100 	.word	0x50000100
 800577c:	50000500 	.word	0x50000500
 8005780:	50000700 	.word	0x50000700
 8005784:	20000018 	.word	0x20000018
 8005788:	000f4240 	.word	0x000f4240
 800578c:	50000300 	.word	0x50000300
 8005790:	50000400 	.word	0x50000400
 8005794:	fff0c007 	.word	0xfff0c007

08005798 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8005798:	4770      	bx	lr

0800579a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 800579a:	4770      	bx	lr

0800579c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 800579c:	4770      	bx	lr

0800579e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 800579e:	4770      	bx	lr

080057a0 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80057a0:	6803      	ldr	r3, [r0, #0]
{
 80057a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80057a4:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80057a6:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80057a8:	076a      	lsls	r2, r5, #29
{
 80057aa:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80057ac:	d501      	bpl.n	80057b2 <HAL_ADC_IRQHandler+0x12>
 80057ae:	0770      	lsls	r0, r6, #29
 80057b0:	d403      	bmi.n	80057ba <HAL_ADC_IRQHandler+0x1a>
 80057b2:	0729      	lsls	r1, r5, #28
 80057b4:	d543      	bpl.n	800583e <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80057b6:	0732      	lsls	r2, r6, #28
 80057b8:	d541      	bpl.n	800583e <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80057bc:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80057be:	bf5e      	ittt	pl
 80057c0:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80057c2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80057c6:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80057c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057cc:	d003      	beq.n	80057d6 <HAL_ADC_IRQHandler+0x36>
 80057ce:	4a90      	ldr	r2, [pc, #576]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	f040 8105 	bne.w	80059e0 <HAL_ADC_IRQHandler+0x240>
 80057d6:	4a8f      	ldr	r2, [pc, #572]	@ (8005a14 <HAL_ADC_IRQHandler+0x274>)
 80057d8:	6891      	ldr	r1, [r2, #8]
 80057da:	06c9      	lsls	r1, r1, #27
 80057dc:	d00c      	beq.n	80057f8 <HAL_ADC_IRQHandler+0x58>
 80057de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e2:	d003      	beq.n	80057ec <HAL_ADC_IRQHandler+0x4c>
 80057e4:	498a      	ldr	r1, [pc, #552]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 80057e6:	428b      	cmp	r3, r1
 80057e8:	f040 80ff 	bne.w	80059ea <HAL_ADC_IRQHandler+0x24a>
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	f002 021f 	and.w	r2, r2, #31
 80057f2:	2a05      	cmp	r2, #5
 80057f4:	f040 8114 	bne.w	8005a20 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80057f8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80057fa:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80057fc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005800:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005804:	4311      	orrs	r1, r2
 8005806:	d114      	bne.n	8005832 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8005808:	0729      	lsls	r1, r5, #28
 800580a:	d512      	bpl.n	8005832 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	0752      	lsls	r2, r2, #29
 8005810:	f100 8122 	bmi.w	8005a58 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	f022 020c 	bic.w	r2, r2, #12
 800581a:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800581c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800581e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005822:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005826:	04d8      	lsls	r0, r3, #19
 8005828:	d403      	bmi.n	8005832 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800582a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fe5e 	bl	80054f4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	220c      	movs	r2, #12
 800583c:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800583e:	06a9      	lsls	r1, r5, #26
 8005840:	d501      	bpl.n	8005846 <HAL_ADC_IRQHandler+0xa6>
 8005842:	06b2      	lsls	r2, r6, #26
 8005844:	d403      	bmi.n	800584e <HAL_ADC_IRQHandler+0xae>
 8005846:	066b      	lsls	r3, r5, #25
 8005848:	d562      	bpl.n	8005910 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800584a:	0670      	lsls	r0, r6, #25
 800584c:	d560      	bpl.n	8005910 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800584e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005850:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005854:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800585c:	d003      	beq.n	8005866 <HAL_ADC_IRQHandler+0xc6>
 800585e:	4a6c      	ldr	r2, [pc, #432]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 8005860:	4293      	cmp	r3, r2
 8005862:	f040 8102 	bne.w	8005a6a <HAL_ADC_IRQHandler+0x2ca>
 8005866:	4a6b      	ldr	r2, [pc, #428]	@ (8005a14 <HAL_ADC_IRQHandler+0x274>)
 8005868:	6891      	ldr	r1, [r2, #8]
 800586a:	06c9      	lsls	r1, r1, #27
 800586c:	d00c      	beq.n	8005888 <HAL_ADC_IRQHandler+0xe8>
 800586e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005872:	d003      	beq.n	800587c <HAL_ADC_IRQHandler+0xdc>
 8005874:	4966      	ldr	r1, [pc, #408]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 8005876:	428b      	cmp	r3, r1
 8005878:	f040 80fc 	bne.w	8005a74 <HAL_ADC_IRQHandler+0x2d4>
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	f002 021f 	and.w	r2, r2, #31
 8005882:	2a05      	cmp	r2, #5
 8005884:	f040 8108 	bne.w	8005a98 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005888:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800588a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800588c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8005890:	d138      	bne.n	8005904 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005892:	0191      	lsls	r1, r2, #6
 8005894:	d506      	bpl.n	80058a4 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005896:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005898:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800589c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80058a0:	4311      	orrs	r1, r2
 80058a2:	d12f      	bne.n	8005904 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80058a4:	0668      	lsls	r0, r5, #25
 80058a6:	d52d      	bpl.n	8005904 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80058a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058ac:	d003      	beq.n	80058b6 <HAL_ADC_IRQHandler+0x116>
 80058ae:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	f040 810d 	bne.w	8005ad0 <HAL_ADC_IRQHandler+0x330>
 80058b6:	4a57      	ldr	r2, [pc, #348]	@ (8005a14 <HAL_ADC_IRQHandler+0x274>)
 80058b8:	6891      	ldr	r1, [r2, #8]
 80058ba:	06c9      	lsls	r1, r1, #27
 80058bc:	d00c      	beq.n	80058d8 <HAL_ADC_IRQHandler+0x138>
 80058be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058c2:	d003      	beq.n	80058cc <HAL_ADC_IRQHandler+0x12c>
 80058c4:	4952      	ldr	r1, [pc, #328]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 80058c6:	428b      	cmp	r3, r1
 80058c8:	f040 8107 	bne.w	8005ada <HAL_ADC_IRQHandler+0x33a>
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	f002 021f 	and.w	r2, r2, #31
 80058d2:	2a06      	cmp	r2, #6
 80058d4:	f040 8113 	bne.w	8005afe <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80058d8:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80058da:	0291      	lsls	r1, r2, #10
 80058dc:	d412      	bmi.n	8005904 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	0712      	lsls	r2, r2, #28
 80058e2:	f100 8128 	bmi.w	8005b36 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058ec:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80058ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058f4:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80058f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058f8:	05d8      	lsls	r0, r3, #23
 80058fa:	d403      	bmi.n	8005904 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff ff47 	bl	8005798 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	2260      	movs	r2, #96	@ 0x60
 800590e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005910:	0629      	lsls	r1, r5, #24
 8005912:	d50b      	bpl.n	800592c <HAL_ADC_IRQHandler+0x18c>
 8005914:	0632      	lsls	r2, r6, #24
 8005916:	d509      	bpl.n	800592c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800591a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591e:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005920:	4620      	mov	r0, r4
 8005922:	f7ff fde8 	bl	80054f6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800592c:	05eb      	lsls	r3, r5, #23
 800592e:	d50c      	bpl.n	800594a <HAL_ADC_IRQHandler+0x1aa>
 8005930:	05f0      	lsls	r0, r6, #23
 8005932:	d50a      	bpl.n	800594a <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800593c:	4620      	mov	r0, r4
 800593e:	f7ff ff2d 	bl	800579c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005948:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800594a:	05a9      	lsls	r1, r5, #22
 800594c:	d50c      	bpl.n	8005968 <HAL_ADC_IRQHandler+0x1c8>
 800594e:	05b2      	lsls	r2, r6, #22
 8005950:	d50a      	bpl.n	8005968 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005952:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005958:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff ff1f 	bl	800579e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005966:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005968:	06eb      	lsls	r3, r5, #27
 800596a:	d525      	bpl.n	80059b8 <HAL_ADC_IRQHandler+0x218>
 800596c:	06f0      	lsls	r0, r6, #27
 800596e:	d523      	bpl.n	80059b8 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005972:	2b01      	cmp	r3, #1
 8005974:	d012      	beq.n	800599c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800597c:	f000 80e4 	beq.w	8005b48 <HAL_ADC_IRQHandler+0x3a8>
 8005980:	4823      	ldr	r0, [pc, #140]	@ (8005a10 <HAL_ADC_IRQHandler+0x270>)
 8005982:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <HAL_ADC_IRQHandler+0x278>)
 8005984:	4923      	ldr	r1, [pc, #140]	@ (8005a14 <HAL_ADC_IRQHandler+0x274>)
 8005986:	4282      	cmp	r2, r0
 8005988:	bf08      	it	eq
 800598a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	06c9      	lsls	r1, r1, #27
 8005990:	f040 80dc 	bne.w	8005b4c <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005994:	68d3      	ldr	r3, [r2, #12]
 8005996:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800599a:	d00a      	beq.n	80059b2 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800599c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800599e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059a2:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80059a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80059a6:	f043 0302 	orr.w	r3, r3, #2
 80059aa:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7ff fda3 	bl	80054f8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80059b8:	056a      	lsls	r2, r5, #21
 80059ba:	d510      	bpl.n	80059de <HAL_ADC_IRQHandler+0x23e>
 80059bc:	0573      	lsls	r3, r6, #21
 80059be:	d50e      	bpl.n	80059de <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80059c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059c6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80059c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80059ca:	f043 0308 	orr.w	r3, r3, #8
 80059ce:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059d6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fede 	bl	800579a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80059de:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80059e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a18 <HAL_ADC_IRQHandler+0x278>)
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	06d0      	lsls	r0, r2, #27
 80059e6:	f43f af07 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
 80059ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005a18 <HAL_ADC_IRQHandler+0x278>)
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	f002 021f 	and.w	r2, r2, #31
 80059f2:	2a05      	cmp	r2, #5
 80059f4:	f43f af00 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
 80059f8:	4a07      	ldr	r2, [pc, #28]	@ (8005a18 <HAL_ADC_IRQHandler+0x278>)
 80059fa:	6892      	ldr	r2, [r2, #8]
 80059fc:	f002 021f 	and.w	r2, r2, #31
 8005a00:	2a09      	cmp	r2, #9
 8005a02:	f43f aef9 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
 8005a06:	4a05      	ldr	r2, [pc, #20]	@ (8005a1c <HAL_ADC_IRQHandler+0x27c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d123      	bne.n	8005a54 <HAL_ADC_IRQHandler+0x2b4>
 8005a0c:	e6f4      	b.n	80057f8 <HAL_ADC_IRQHandler+0x58>
 8005a0e:	bf00      	nop
 8005a10:	50000100 	.word	0x50000100
 8005a14:	50000300 	.word	0x50000300
 8005a18:	50000700 	.word	0x50000700
 8005a1c:	50000400 	.word	0x50000400
 8005a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a24:	d002      	beq.n	8005a2c <HAL_ADC_IRQHandler+0x28c>
 8005a26:	4a4b      	ldr	r2, [pc, #300]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d1e5      	bne.n	80059f8 <HAL_ADC_IRQHandler+0x258>
 8005a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b58 <HAL_ADC_IRQHandler+0x3b8>)
 8005a2e:	6892      	ldr	r2, [r2, #8]
 8005a30:	f002 021f 	and.w	r2, r2, #31
 8005a34:	2a09      	cmp	r2, #9
 8005a36:	f43f aedf 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
 8005a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a3e:	f43f aedb 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
 8005a42:	4a46      	ldr	r2, [pc, #280]	@ (8005b5c <HAL_ADC_IRQHandler+0x3bc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	f43f aed7 	beq.w	80057f8 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005a4a:	4942      	ldr	r1, [pc, #264]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	bf08      	it	eq
 8005a50:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005a54:	68d2      	ldr	r2, [r2, #12]
 8005a56:	e6d0      	b.n	80057fa <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a5a:	f043 0310 	orr.w	r3, r3, #16
 8005a5e:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6463      	str	r3, [r4, #68]	@ 0x44
 8005a68:	e6e3      	b.n	8005832 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005a6c:	6892      	ldr	r2, [r2, #8]
 8005a6e:	06d0      	lsls	r0, r2, #27
 8005a70:	f43f af0a 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005a74:	4a3a      	ldr	r2, [pc, #232]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005a76:	6892      	ldr	r2, [r2, #8]
 8005a78:	f002 021f 	and.w	r2, r2, #31
 8005a7c:	2a05      	cmp	r2, #5
 8005a7e:	f43f af03 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005a82:	4a37      	ldr	r2, [pc, #220]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005a84:	6892      	ldr	r2, [r2, #8]
 8005a86:	f002 021f 	and.w	r2, r2, #31
 8005a8a:	2a09      	cmp	r2, #9
 8005a8c:	f43f aefc 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005a90:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <HAL_ADC_IRQHandler+0x3bc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d11a      	bne.n	8005acc <HAL_ADC_IRQHandler+0x32c>
 8005a96:	e6f7      	b.n	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a9c:	d002      	beq.n	8005aa4 <HAL_ADC_IRQHandler+0x304>
 8005a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d1ee      	bne.n	8005a82 <HAL_ADC_IRQHandler+0x2e2>
 8005aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8005b58 <HAL_ADC_IRQHandler+0x3b8>)
 8005aa6:	6892      	ldr	r2, [r2, #8]
 8005aa8:	f002 021f 	and.w	r2, r2, #31
 8005aac:	2a09      	cmp	r2, #9
 8005aae:	f43f aeeb 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab6:	f43f aee7 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
 8005aba:	4a28      	ldr	r2, [pc, #160]	@ (8005b5c <HAL_ADC_IRQHandler+0x3bc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	f43f aee3 	beq.w	8005888 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005ac2:	4924      	ldr	r1, [pc, #144]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	bf08      	it	eq
 8005ac8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005acc:	68d2      	ldr	r2, [r2, #12]
 8005ace:	e6dc      	b.n	800588a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005ad0:	4a23      	ldr	r2, [pc, #140]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	06d0      	lsls	r0, r2, #27
 8005ad6:	f43f aeff 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005ada:	4a21      	ldr	r2, [pc, #132]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005adc:	6892      	ldr	r2, [r2, #8]
 8005ade:	f002 021f 	and.w	r2, r2, #31
 8005ae2:	2a06      	cmp	r2, #6
 8005ae4:	f43f aef8 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <HAL_ADC_IRQHandler+0x3c0>)
 8005aea:	6892      	ldr	r2, [r2, #8]
 8005aec:	f002 021f 	and.w	r2, r2, #31
 8005af0:	2a07      	cmp	r2, #7
 8005af2:	f43f aef1 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005af6:	4a19      	ldr	r2, [pc, #100]	@ (8005b5c <HAL_ADC_IRQHandler+0x3bc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d11a      	bne.n	8005b32 <HAL_ADC_IRQHandler+0x392>
 8005afc:	e6ec      	b.n	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b02:	d002      	beq.n	8005b0a <HAL_ADC_IRQHandler+0x36a>
 8005b04:	4a13      	ldr	r2, [pc, #76]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d1ee      	bne.n	8005ae8 <HAL_ADC_IRQHandler+0x348>
 8005b0a:	4a13      	ldr	r2, [pc, #76]	@ (8005b58 <HAL_ADC_IRQHandler+0x3b8>)
 8005b0c:	6892      	ldr	r2, [r2, #8]
 8005b0e:	f002 021f 	and.w	r2, r2, #31
 8005b12:	2a07      	cmp	r2, #7
 8005b14:	f43f aee0 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b1c:	f43f aedc 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
 8005b20:	4a0e      	ldr	r2, [pc, #56]	@ (8005b5c <HAL_ADC_IRQHandler+0x3bc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f43f aed8 	beq.w	80058d8 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005b28:	490a      	ldr	r1, [pc, #40]	@ (8005b54 <HAL_ADC_IRQHandler+0x3b4>)
 8005b2a:	428b      	cmp	r3, r1
 8005b2c:	bf08      	it	eq
 8005b2e:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005b32:	68d2      	ldr	r2, [r2, #12]
 8005b34:	e6d1      	b.n	80058da <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b38:	f043 0310 	orr.w	r3, r3, #16
 8005b3c:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	6463      	str	r3, [r4, #68]	@ 0x44
 8005b46:	e6dd      	b.n	8005904 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b48:	4b03      	ldr	r3, [pc, #12]	@ (8005b58 <HAL_ADC_IRQHandler+0x3b8>)
 8005b4a:	e71f      	b.n	800598c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8005b52:	e722      	b.n	800599a <HAL_ADC_IRQHandler+0x1fa>
 8005b54:	50000100 	.word	0x50000100
 8005b58:	50000300 	.word	0x50000300
 8005b5c:	50000400 	.word	0x50000400
 8005b60:	50000700 	.word	0x50000700

08005b64 <HAL_ADC_ConfigChannel>:
{
 8005b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b66:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005b6c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b70:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	f000 816a 	beq.w	8005e4c <HAL_ADC_ConfigChannel+0x2e8>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	0757      	lsls	r7, r2, #29
 8005b84:	f100 815c 	bmi.w	8005e40 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8005b88:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8005b8a:	680c      	ldr	r4, [r1, #0]
 8005b8c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8005b8e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8005b90:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8005b94:	d82c      	bhi.n	8005bf0 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8005b96:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8005b98:	271f      	movs	r7, #31
 8005b9a:	4097      	lsls	r7, r2
 8005b9c:	ea26 0607 	bic.w	r6, r6, r7
 8005ba0:	fa04 f202 	lsl.w	r2, r4, r2
 8005ba4:	4332      	orrs	r2, r6
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	f012 0f0c 	tst.w	r2, #12
 8005bae:	d158      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bb0:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bb2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005bb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005bba:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005bbe:	d93c      	bls.n	8005c3a <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bc0:	699f      	ldr	r7, [r3, #24]
 8005bc2:	3a1e      	subs	r2, #30
 8005bc4:	4096      	lsls	r6, r2
 8005bc6:	ea27 0606 	bic.w	r6, r7, r6
 8005bca:	fa0c f202 	lsl.w	r2, ip, r2
 8005bce:	4332      	orrs	r2, r6
 8005bd0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	694e      	ldr	r6, [r1, #20]
 8005bd6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005bda:	0052      	lsls	r2, r2, #1
 8005bdc:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8005bde:	690a      	ldr	r2, [r1, #16]
 8005be0:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005be2:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8005be4:	2a03      	cmp	r2, #3
 8005be6:	d86b      	bhi.n	8005cc0 <HAL_ADC_ConfigChannel+0x15c>
 8005be8:	e8df f002 	tbb	[pc, r2]
 8005bec:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8005bf0:	2e09      	cmp	r6, #9
 8005bf2:	d80a      	bhi.n	8005c0a <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8005bf4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8005bf6:	3a1e      	subs	r2, #30
 8005bf8:	271f      	movs	r7, #31
 8005bfa:	4097      	lsls	r7, r2
 8005bfc:	ea26 0607 	bic.w	r6, r6, r7
 8005c00:	fa04 f202 	lsl.w	r2, r4, r2
 8005c04:	4332      	orrs	r2, r6
 8005c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c08:	e7ce      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8005c0a:	2e0e      	cmp	r6, #14
 8005c0c:	f04f 061f 	mov.w	r6, #31
 8005c10:	d809      	bhi.n	8005c26 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005c12:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8005c14:	3a3c      	subs	r2, #60	@ 0x3c
 8005c16:	4096      	lsls	r6, r2
 8005c18:	ea27 0606 	bic.w	r6, r7, r6
 8005c1c:	fa04 f202 	lsl.w	r2, r4, r2
 8005c20:	4332      	orrs	r2, r6
 8005c22:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c24:	e7c0      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005c26:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8005c28:	3a5a      	subs	r2, #90	@ 0x5a
 8005c2a:	4096      	lsls	r6, r2
 8005c2c:	ea27 0606 	bic.w	r6, r7, r6
 8005c30:	fa04 f202 	lsl.w	r2, r4, r2
 8005c34:	4332      	orrs	r2, r6
 8005c36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c38:	e7b6      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005c3a:	695f      	ldr	r7, [r3, #20]
 8005c3c:	4096      	lsls	r6, r2
 8005c3e:	ea27 0606 	bic.w	r6, r7, r6
 8005c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8005c46:	ea46 060c 	orr.w	r6, r6, ip
 8005c4a:	615e      	str	r6, [r3, #20]
 8005c4c:	e7c1      	b.n	8005bd2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005c4e:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8005c52:	4a7f      	ldr	r2, [pc, #508]	@ (8005e50 <HAL_ADC_ConfigChannel+0x2ec>)
 8005c54:	ea0c 0202 	and.w	r2, ip, r2
 8005c58:	433a      	orrs	r2, r7
 8005c5a:	4332      	orrs	r2, r6
 8005c5c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005c60:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	f002 0203 	and.w	r2, r2, #3
 8005c68:	2a01      	cmp	r2, #1
 8005c6a:	d14d      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x1a4>
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	07d6      	lsls	r6, r2, #31
 8005c70:	d54a      	bpl.n	8005d08 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c72:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005c74:	2300      	movs	r3, #0
 8005c76:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8005c7a:	b003      	add	sp, #12
 8005c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005c7e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8005c82:	4a73      	ldr	r2, [pc, #460]	@ (8005e50 <HAL_ADC_ConfigChannel+0x2ec>)
 8005c84:	ea0c 0202 	and.w	r2, ip, r2
 8005c88:	433a      	orrs	r2, r7
 8005c8a:	4332      	orrs	r2, r6
 8005c8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005c90:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005c92:	e7e6      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005c94:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005c98:	4a6d      	ldr	r2, [pc, #436]	@ (8005e50 <HAL_ADC_ConfigChannel+0x2ec>)
 8005c9a:	ea0c 0202 	and.w	r2, ip, r2
 8005c9e:	433a      	orrs	r2, r7
 8005ca0:	4332      	orrs	r2, r6
 8005ca2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005ca6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8005ca8:	e7db      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005caa:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8005cae:	4a68      	ldr	r2, [pc, #416]	@ (8005e50 <HAL_ADC_ConfigChannel+0x2ec>)
 8005cb0:	ea0c 0202 	and.w	r2, ip, r2
 8005cb4:	433a      	orrs	r2, r7
 8005cb6:	4332      	orrs	r2, r6
 8005cb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005cbc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005cbe:	e7d0      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005cc2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005cc6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005cc8:	bf02      	ittt	eq
 8005cca:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8005ccc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005cd0:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005cd4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005cd8:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005cda:	bf02      	ittt	eq
 8005cdc:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8005cde:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005ce2:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ce4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005ce6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005cea:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005cec:	bf02      	ittt	eq
 8005cee:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8005cf0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005cf4:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cf6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005cf8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005cfc:	42ba      	cmp	r2, r7
 8005cfe:	d1b0      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005d00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d06:	e7d9      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d08:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d0a:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d0c:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d10:	d047      	beq.n	8005da2 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8005d16:	ea21 0202 	bic.w	r2, r1, r2
 8005d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d22:	d164      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x28a>
 8005d24:	494b      	ldr	r1, [pc, #300]	@ (8005e54 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d26:	2c10      	cmp	r4, #16
 8005d28:	d166      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d2a:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d2c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005d30:	d19f      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d36:	4a48      	ldr	r2, [pc, #288]	@ (8005e58 <HAL_ADC_ConfigChannel+0x2f4>)
 8005d38:	d009      	beq.n	8005d4e <HAL_ADC_ConfigChannel+0x1ea>
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d069      	beq.n	8005e12 <HAL_ADC_ConfigChannel+0x2ae>
 8005d3e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8005d42:	4293      	cmp	r3, r2
 8005d44:	4845      	ldr	r0, [pc, #276]	@ (8005e5c <HAL_ADC_ConfigChannel+0x2f8>)
 8005d46:	d067      	beq.n	8005e18 <HAL_ADC_ConfigChannel+0x2b4>
 8005d48:	4283      	cmp	r3, r0
 8005d4a:	bf18      	it	ne
 8005d4c:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005d4e:	6898      	ldr	r0, [r3, #8]
 8005d50:	f000 0003 	and.w	r0, r0, #3
 8005d54:	2801      	cmp	r0, #1
 8005d56:	d102      	bne.n	8005d5e <HAL_ADC_ConfigChannel+0x1fa>
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	07c0      	lsls	r0, r0, #31
 8005d5c:	d470      	bmi.n	8005e40 <HAL_ADC_ConfigChannel+0x2dc>
 8005d5e:	b13a      	cbz	r2, 8005d70 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005d60:	6890      	ldr	r0, [r2, #8]
 8005d62:	f000 0003 	and.w	r0, r0, #3
 8005d66:	2801      	cmp	r0, #1
 8005d68:	d102      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x20c>
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	07d2      	lsls	r2, r2, #31
 8005d6e:	d467      	bmi.n	8005e40 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d70:	2c10      	cmp	r4, #16
 8005d72:	d153      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x2b8>
 8005d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d78:	f47f af7b 	bne.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005d7c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d7e:	4a38      	ldr	r2, [pc, #224]	@ (8005e60 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005d80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d84:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d86:	4b37      	ldr	r3, [pc, #220]	@ (8005e64 <HAL_ADC_ConfigChannel+0x300>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d8e:	220a      	movs	r2, #10
 8005d90:	4353      	muls	r3, r2
            wait_loop_index--;
 8005d92:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f43f af6b 	beq.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	e7f7      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005da2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005da6:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005da8:	ea42 0200 	orr.w	r2, r2, r0
 8005dac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005db0:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005db2:	d90c      	bls.n	8005dce <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005db4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005db8:	6999      	ldr	r1, [r3, #24]
 8005dba:	3a1b      	subs	r2, #27
 8005dbc:	2607      	movs	r6, #7
 8005dbe:	4096      	lsls	r6, r2
 8005dc0:	ea21 0106 	bic.w	r1, r1, r6
 8005dc4:	fa00 f202 	lsl.w	r2, r0, r2
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	619a      	str	r2, [r3, #24]
 8005dcc:	e7a7      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005dce:	1c61      	adds	r1, r4, #1
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005dd6:	2607      	movs	r6, #7
 8005dd8:	408e      	lsls	r6, r1
 8005dda:	ea22 0206 	bic.w	r2, r2, r6
 8005dde:	fa00 f101 	lsl.w	r1, r0, r1
 8005de2:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005de8:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dea:	f43f af42 	beq.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
 8005dee:	4a1a      	ldr	r2, [pc, #104]	@ (8005e58 <HAL_ADC_ConfigChannel+0x2f4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d097      	beq.n	8005d24 <HAL_ADC_ConfigChannel+0x1c0>
 8005df4:	491c      	ldr	r1, [pc, #112]	@ (8005e68 <HAL_ADC_ConfigChannel+0x304>)
 8005df6:	e796      	b.n	8005d26 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005df8:	2c11      	cmp	r4, #17
 8005dfa:	d103      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005dfc:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005dfe:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8005e02:	e795      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005e04:	2c12      	cmp	r4, #18
 8005e06:	f47f af34 	bne.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005e0a:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005e0c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8005e10:	e78e      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x1cc>
 8005e12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005e16:	e79a      	b.n	8005d4e <HAL_ADC_ConfigChannel+0x1ea>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	e798      	b.n	8005d4e <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005e1c:	2c11      	cmp	r4, #17
 8005e1e:	d108      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x2ce>
 8005e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e24:	f47f af25 	bne.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005e28:	688b      	ldr	r3, [r1, #8]
 8005e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005e2e:	608b      	str	r3, [r1, #8]
 8005e30:	e71f      	b.n	8005c72 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e32:	2c12      	cmp	r4, #18
 8005e34:	f47f af1d 	bne.w	8005c72 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005e38:	688b      	ldr	r3, [r1, #8]
 8005e3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e3e:	e7f6      	b.n	8005e2e <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e40:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005e42:	f043 0320 	orr.w	r3, r3, #32
 8005e46:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005e48:	2001      	movs	r0, #1
 8005e4a:	e713      	b.n	8005c74 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8005e4c:	2002      	movs	r0, #2
 8005e4e:	e714      	b.n	8005c7a <HAL_ADC_ConfigChannel+0x116>
 8005e50:	83fff000 	.word	0x83fff000
 8005e54:	50000300 	.word	0x50000300
 8005e58:	50000100 	.word	0x50000100
 8005e5c:	50000500 	.word	0x50000500
 8005e60:	000f4240 	.word	0x000f4240
 8005e64:	20000018 	.word	0x20000018
 8005e68:	50000700 	.word	0x50000700

08005e6c <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005e6e:	6804      	ldr	r4, [r0, #0]
 8005e70:	4b3c      	ldr	r3, [pc, #240]	@ (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005e72:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8005e76:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005e78:	d009      	beq.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005e7a:	429c      	cmp	r4, r3
 8005e7c:	d047      	beq.n	8005f0e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8005e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f68 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005e80:	4294      	cmp	r4, r2
 8005e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e86:	d002      	beq.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d166      	bne.n	8005f5a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005e8c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8005e8e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	d063      	beq.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8005e96:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e98:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8005e9a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005e9e:	68a2      	ldr	r2, [r4, #8]
 8005ea0:	0752      	lsls	r2, r2, #29
 8005ea2:	d454      	bmi.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	0757      	lsls	r7, r2, #29
 8005ea8:	d451      	bmi.n	8005f4e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005eaa:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8005eae:	d031      	beq.n	8005f14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005eb0:	4f2c      	ldr	r7, [pc, #176]	@ (8005f64 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8005eb4:	4e2e      	ldr	r6, [pc, #184]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005eb6:	42bc      	cmp	r4, r7
 8005eb8:	bf08      	it	eq
 8005eba:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ebc:	b360      	cbz	r0, 8005f18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ebe:	6897      	ldr	r7, [r2, #8]
 8005ec0:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8005ec4:	684e      	ldr	r6, [r1, #4]
 8005ec6:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8005eca:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8005ece:	433e      	orrs	r6, r7
 8005ed0:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005ed2:	68a6      	ldr	r6, [r4, #8]
 8005ed4:	f006 0603 	and.w	r6, r6, #3
 8005ed8:	2e01      	cmp	r6, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8005edc:	6824      	ldr	r4, [r4, #0]
 8005ede:	07e6      	lsls	r6, r4, #31
 8005ee0:	d410      	bmi.n	8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005ee2:	689c      	ldr	r4, [r3, #8]
 8005ee4:	f004 0403 	and.w	r4, r4, #3
 8005ee8:	2c01      	cmp	r4, #1
 8005eea:	d102      	bne.n	8005ef2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	07dc      	lsls	r4, r3, #31
 8005ef0:	d408      	bmi.n	8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ef2:	6893      	ldr	r3, [r2, #8]
 8005ef4:	6889      	ldr	r1, [r1, #8]
 8005ef6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005efa:	4308      	orrs	r0, r1
 8005efc:	f023 030f 	bic.w	r3, r3, #15
 8005f00:	4318      	orrs	r0, r3
 8005f02:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f04:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005f06:	2300      	movs	r3, #0
 8005f08:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8005f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f12:	e7bc      	b.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f14:	4a16      	ldr	r2, [pc, #88]	@ (8005f70 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005f16:	e7d1      	b.n	8005ebc <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f18:	6891      	ldr	r1, [r2, #8]
 8005f1a:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005f1e:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f20:	68a1      	ldr	r1, [r4, #8]
 8005f22:	f001 0103 	and.w	r1, r1, #3
 8005f26:	2901      	cmp	r1, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	07c9      	lsls	r1, r1, #31
 8005f2e:	d4e9      	bmi.n	8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	f001 0103 	and.w	r1, r1, #3
 8005f36:	2901      	cmp	r1, #1
 8005f38:	d102      	bne.n	8005f40 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	07db      	lsls	r3, r3, #31
 8005f3e:	d4e1      	bmi.n	8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f46:	f023 030f 	bic.w	r3, r3, #15
 8005f4a:	6093      	str	r3, [r2, #8]
 8005f4c:	e7da      	b.n	8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f4e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005f50:	f043 0320 	orr.w	r3, r3, #32
 8005f54:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005f56:	2001      	movs	r0, #1
 8005f58:	e7d5      	b.n	8005f06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e7d6      	b.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8005f5e:	2002      	movs	r0, #2
 8005f60:	e7d4      	b.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005f62:	bf00      	nop
 8005f64:	50000100 	.word	0x50000100
 8005f68:	50000400 	.word	0x50000400
 8005f6c:	50000700 	.word	0x50000700
 8005f70:	50000300 	.word	0x50000300

08005f74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f74:	4907      	ldr	r1, [pc, #28]	@ (8005f94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005f76:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f7c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f7e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f84:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005f90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005f92:	4770      	bx	lr
 8005f94:	e000ed00 	.word	0xe000ed00

08005f98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f98:	4b16      	ldr	r3, [pc, #88]	@ (8005ff4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f9a:	b530      	push	{r4, r5, lr}
 8005f9c:	68dc      	ldr	r4, [r3, #12]
 8005f9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	bf28      	it	cs
 8005fac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb4:	bf8c      	ite	hi
 8005fb6:	3c03      	subhi	r4, #3
 8005fb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fba:	fa05 f303 	lsl.w	r3, r5, r3
 8005fbe:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc2:	40a5      	lsls	r5, r4
 8005fc4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005fca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd0:	bfac      	ite	ge
 8005fd2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd6:	4a08      	ldrlt	r2, [pc, #32]	@ (8005ff8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fdc:	bfb8      	it	lt
 8005fde:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	bfaa      	itet	ge
 8005fe6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fec:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005ff0:	bd30      	pop	{r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed00 	.word	0xe000ed00
 8005ff8:	e000ed14 	.word	0xe000ed14

08005ffc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	db07      	blt.n	8006010 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006000:	0941      	lsrs	r1, r0, #5
 8006002:	4a04      	ldr	r2, [pc, #16]	@ (8006014 <HAL_NVIC_EnableIRQ+0x18>)
 8006004:	f000 001f 	and.w	r0, r0, #31
 8006008:	2301      	movs	r3, #1
 800600a:	4083      	lsls	r3, r0
 800600c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	e000e100 	.word	0xe000e100

08006018 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006018:	6802      	ldr	r2, [r0, #0]
 800601a:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <DMA_CalcBaseAndBitshift+0x2c>)
 800601c:	429a      	cmp	r2, r3
 800601e:	f04f 0114 	mov.w	r1, #20
 8006022:	d808      	bhi.n	8006036 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006024:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <DMA_CalcBaseAndBitshift+0x30>)
 8006026:	4413      	add	r3, r2
 8006028:	4a08      	ldr	r2, [pc, #32]	@ (800604c <DMA_CalcBaseAndBitshift+0x34>)
 800602a:	fbb3 f3f1 	udiv	r3, r3, r1
 800602e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006030:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006034:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006036:	4b06      	ldr	r3, [pc, #24]	@ (8006050 <DMA_CalcBaseAndBitshift+0x38>)
 8006038:	4413      	add	r3, r2
 800603a:	4a06      	ldr	r2, [pc, #24]	@ (8006054 <DMA_CalcBaseAndBitshift+0x3c>)
 800603c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006040:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8006042:	e7f5      	b.n	8006030 <DMA_CalcBaseAndBitshift+0x18>
 8006044:	40020407 	.word	0x40020407
 8006048:	bffdfff8 	.word	0xbffdfff8
 800604c:	40020000 	.word	0x40020000
 8006050:	bffdfbf8 	.word	0xbffdfbf8
 8006054:	40020400 	.word	0x40020400

08006058 <HAL_DMA_Init>:
{
 8006058:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800605a:	4604      	mov	r4, r0
 800605c:	b1e0      	cbz	r0, 8006098 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800605e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8006062:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006064:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8006066:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006068:	432b      	orrs	r3, r5
 800606a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800606c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800606e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006070:	6945      	ldr	r5, [r0, #20]
 8006072:	432b      	orrs	r3, r5
 8006074:	6985      	ldr	r5, [r0, #24]
 8006076:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8006078:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800607a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800607e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8006082:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8006084:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8006086:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8006088:	f7ff ffc6 	bl	8006018 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800608c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800608e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006092:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8006094:	8423      	strh	r3, [r4, #32]
}
 8006096:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006098:	2001      	movs	r0, #1
 800609a:	e7fc      	b.n	8006096 <HAL_DMA_Init+0x3e>

0800609c <HAL_DMA_Start_IT>:
{
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800609e:	f890 4020 	ldrb.w	r4, [r0, #32]
 80060a2:	2c01      	cmp	r4, #1
 80060a4:	d033      	beq.n	800610e <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 80060a6:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 80060aa:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80060ac:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80060ae:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80060b2:	f04f 0400 	mov.w	r4, #0
 80060b6:	d128      	bne.n	800610a <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b8:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ba:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80060bc:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80060be:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80060c2:	6826      	ldr	r6, [r4, #0]
 80060c4:	f026 0601 	bic.w	r6, r6, #1
 80060c8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80060ca:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80060ce:	40bd      	lsls	r5, r7
 80060d0:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80060d2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060d4:	6843      	ldr	r3, [r0, #4]
 80060d6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80060d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80060da:	bf0b      	itete	eq
 80060dc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80060de:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80060e0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80060e2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80060e4:	b14b      	cbz	r3, 80060fa <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80060ec:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060f6:	2000      	movs	r0, #0
}
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	f043 030a 	orr.w	r3, r3, #10
 8006100:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	e7f0      	b.n	80060ec <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800610a:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 800610e:	2002      	movs	r0, #2
 8006110:	e7f2      	b.n	80060f8 <HAL_DMA_Start_IT+0x5c>

08006112 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8006112:	b140      	cbz	r0, 8006126 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006114:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8006118:	2b02      	cmp	r3, #2
 800611a:	d006      	beq.n	800612a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611c:	2304      	movs	r3, #4
 800611e:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8006120:	2300      	movs	r3, #0
 8006122:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8006126:	2001      	movs	r0, #1
 8006128:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800612a:	6803      	ldr	r3, [r0, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	f022 020e 	bic.w	r2, r2, #14
 8006132:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800613c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8006140:	2301      	movs	r3, #1
 8006142:	408b      	lsls	r3, r1
 8006144:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8006146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800614a:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 800614c:	2000      	movs	r0, #0
}
 800614e:	4770      	bx	lr

08006150 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006150:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006152:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006154:	6803      	ldr	r3, [r0, #0]
{
 8006156:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006158:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800615a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800615c:	2404      	movs	r4, #4
 800615e:	4094      	lsls	r4, r2
 8006160:	4234      	tst	r4, r6
 8006162:	d00e      	beq.n	8006182 <HAL_DMA_IRQHandler+0x32>
 8006164:	f015 0f04 	tst.w	r5, #4
 8006168:	d00b      	beq.n	8006182 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800616e:	bf5e      	ittt	pl
 8006170:	681a      	ldrpl	r2, [r3, #0]
 8006172:	f022 0204 	bicpl.w	r2, r2, #4
 8006176:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8006178:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800617a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800617c:	b363      	cbz	r3, 80061d8 <HAL_DMA_IRQHandler+0x88>
}
 800617e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006180:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006182:	2402      	movs	r4, #2
 8006184:	4094      	lsls	r4, r2
 8006186:	4234      	tst	r4, r6
 8006188:	d012      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x60>
 800618a:	f015 0f02 	tst.w	r5, #2
 800618e:	d00f      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	0695      	lsls	r5, r2, #26
 8006194:	d406      	bmi.n	80061a4 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	f022 020a 	bic.w	r2, r2, #10
 800619c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800619e:	2301      	movs	r3, #1
 80061a0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80061a4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80061a6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80061a8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80061ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80061ae:	e7e5      	b.n	800617c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80061b0:	2408      	movs	r4, #8
 80061b2:	4094      	lsls	r4, r2
 80061b4:	4234      	tst	r4, r6
 80061b6:	d00f      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x88>
 80061b8:	072c      	lsls	r4, r5, #28
 80061ba:	d50d      	bpl.n	80061d8 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	f024 040e 	bic.w	r4, r4, #14
 80061c2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80061c4:	2301      	movs	r3, #1
 80061c6:	fa03 f202 	lsl.w	r2, r3, r2
 80061ca:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061cc:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80061ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061d2:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80061d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80061d6:	e7d1      	b.n	800617c <HAL_DMA_IRQHandler+0x2c>
}
 80061d8:	bc70      	pop	{r4, r5, r6}
 80061da:	4770      	bx	lr

080061dc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80061dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 80061de:	4770      	bx	lr

080061e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e4:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8006364 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061e8:	4c5c      	ldr	r4, [pc, #368]	@ (800635c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80061ea:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ec:	680a      	ldr	r2, [r1, #0]
 80061ee:	fa32 f503 	lsrs.w	r5, r2, r3
 80061f2:	d102      	bne.n	80061fa <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80061f4:	b003      	add	sp, #12
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061fa:	2501      	movs	r5, #1
 80061fc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8006200:	ea18 0202 	ands.w	r2, r8, r2
 8006204:	f000 80a0 	beq.w	8006348 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006208:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800620a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800620c:	f006 0503 	and.w	r5, r6, #3
 8006210:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006214:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006218:	1e6f      	subs	r7, r5, #1
 800621a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800621c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006220:	d834      	bhi.n	800628c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8006222:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006224:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006228:	68cf      	ldr	r7, [r1, #12]
 800622a:	fa07 f70e 	lsl.w	r7, r7, lr
 800622e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006232:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006234:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006236:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800623a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800623e:	409f      	lsls	r7, r3
 8006240:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006244:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006246:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006248:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800624c:	688f      	ldr	r7, [r1, #8]
 800624e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006252:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006256:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8006258:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800625a:	d119      	bne.n	8006290 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800625c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8006260:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006264:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006268:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800626c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006270:	f04f 0b0f 	mov.w	fp, #15
 8006274:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006278:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800627c:	690f      	ldr	r7, [r1, #16]
 800627e:	fa07 f70a 	lsl.w	r7, r7, sl
 8006282:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8006286:	f8c8 7020 	str.w	r7, [r8, #32]
 800628a:	e001      	b.n	8006290 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800628c:	2d03      	cmp	r5, #3
 800628e:	d1da      	bne.n	8006246 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8006290:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006292:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006296:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800629a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800629c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80062a0:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062a2:	d051      	beq.n	8006348 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80062a8:	f045 0501 	orr.w	r5, r5, #1
 80062ac:	f8c9 5018 	str.w	r5, [r9, #24]
 80062b0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80062b4:	f023 0703 	bic.w	r7, r3, #3
 80062b8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80062bc:	f005 0501 	and.w	r5, r5, #1
 80062c0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80062c4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062c6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ca:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80062cc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80062d2:	f04f 0e0f 	mov.w	lr, #15
 80062d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062da:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062de:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062e2:	d033      	beq.n	800634c <HAL_GPIO_Init+0x16c>
 80062e4:	4d1e      	ldr	r5, [pc, #120]	@ (8006360 <HAL_GPIO_Init+0x180>)
 80062e6:	42a8      	cmp	r0, r5
 80062e8:	d032      	beq.n	8006350 <HAL_GPIO_Init+0x170>
 80062ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80062ee:	42a8      	cmp	r0, r5
 80062f0:	d030      	beq.n	8006354 <HAL_GPIO_Init+0x174>
 80062f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80062f6:	42a8      	cmp	r0, r5
 80062f8:	d02e      	beq.n	8006358 <HAL_GPIO_Init+0x178>
 80062fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80062fe:	42a8      	cmp	r0, r5
 8006300:	bf14      	ite	ne
 8006302:	2505      	movne	r5, #5
 8006304:	2504      	moveq	r5, #4
 8006306:	fa05 f50c 	lsl.w	r5, r5, ip
 800630a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800630e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8006310:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006312:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006314:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8006318:	bf0c      	ite	eq
 800631a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800631c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800631e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8006320:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006322:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8006326:	bf0c      	ite	eq
 8006328:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800632a:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 800632c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800632e:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006330:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8006334:	bf0c      	ite	eq
 8006336:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006338:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800633a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 800633c:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800633e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8006340:	bf54      	ite	pl
 8006342:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006344:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8006346:	6025      	str	r5, [r4, #0]
    position++;
 8006348:	3301      	adds	r3, #1
 800634a:	e74f      	b.n	80061ec <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800634c:	2500      	movs	r5, #0
 800634e:	e7da      	b.n	8006306 <HAL_GPIO_Init+0x126>
 8006350:	2501      	movs	r5, #1
 8006352:	e7d8      	b.n	8006306 <HAL_GPIO_Init+0x126>
 8006354:	2502      	movs	r5, #2
 8006356:	e7d6      	b.n	8006306 <HAL_GPIO_Init+0x126>
 8006358:	2503      	movs	r5, #3
 800635a:	e7d4      	b.n	8006306 <HAL_GPIO_Init+0x126>
 800635c:	40010400 	.word	0x40010400
 8006360:	48000400 	.word	0x48000400
 8006364:	40021000 	.word	0x40021000

08006368 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006368:	b10a      	cbz	r2, 800636e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800636a:	6181      	str	r1, [r0, #24]
 800636c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800636e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006370:	4770      	bx	lr
	...

08006374 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8006374:	4a02      	ldr	r2, [pc, #8]	@ (8006380 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800637c:	6013      	str	r3, [r2, #0]
}
 800637e:	4770      	bx	lr
 8006380:	40007000 	.word	0x40007000

08006384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006384:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006388:	4605      	mov	r5, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d033      	beq.n	80063f6 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638e:	6803      	ldr	r3, [r0, #0]
 8006390:	07da      	lsls	r2, r3, #31
 8006392:	d411      	bmi.n	80063b8 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	079b      	lsls	r3, r3, #30
 8006398:	f100 8081 	bmi.w	800649e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	071c      	lsls	r4, r3, #28
 80063a0:	f100 80eb 	bmi.w	800657a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	0758      	lsls	r0, r3, #29
 80063a8:	f100 8130 	bmi.w	800660c <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ac:	69eb      	ldr	r3, [r5, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 81b5 	bne.w	800671e <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 80063b4:	2000      	movs	r0, #0
 80063b6:	e047      	b.n	8006448 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80063b8:	4cb0      	ldr	r4, [pc, #704]	@ (800667c <HAL_RCC_OscConfig+0x2f8>)
 80063ba:	6863      	ldr	r3, [r4, #4]
 80063bc:	f003 030c 	and.w	r3, r3, #12
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d007      	beq.n	80063d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d115      	bne.n	80063fa <HAL_RCC_OscConfig+0x76>
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	03df      	lsls	r7, r3, #15
 80063d2:	d512      	bpl.n	80063fa <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063dc:	6821      	ldr	r1, [r4, #0]
 80063de:	fa93 f3a3 	rbit	r3, r3
 80063e2:	2201      	movs	r2, #1
 80063e4:	fab3 f383 	clz	r3, r3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	420b      	tst	r3, r1
 80063ee:	d0d1      	beq.n	8006394 <HAL_RCC_OscConfig+0x10>
 80063f0:	686b      	ldr	r3, [r5, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1ce      	bne.n	8006394 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
 80063f8:	e026      	b.n	8006448 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fa:	686a      	ldr	r2, [r5, #4]
 80063fc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006400:	d125      	bne.n	800644e <HAL_RCC_OscConfig+0xca>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006408:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800640a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800640c:	68a9      	ldr	r1, [r5, #8]
 800640e:	f023 030f 	bic.w	r3, r3, #15
 8006412:	430b      	orrs	r3, r1
 8006414:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006416:	b352      	cbz	r2, 800646e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8006418:	f7ff f866 	bl	80054e8 <HAL_GetTick>
 800641c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006420:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	f04f 0801 	mov.w	r8, #1
 8006426:	fa97 f3a7 	rbit	r3, r7
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	fa97 f3a7 	rbit	r3, r7
 8006430:	fab3 f383 	clz	r3, r3
 8006434:	fa08 f303 	lsl.w	r3, r8, r3
 8006438:	4213      	tst	r3, r2
 800643a:	d1ab      	bne.n	8006394 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800643c:	f7ff f854 	bl	80054e8 <HAL_GetTick>
 8006440:	1b80      	subs	r0, r0, r6
 8006442:	2864      	cmp	r0, #100	@ 0x64
 8006444:	d9ef      	bls.n	8006426 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8006446:	2003      	movs	r0, #3
}
 8006448:	b002      	add	sp, #8
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	b932      	cbnz	r2, 8006460 <HAL_RCC_OscConfig+0xdc>
 8006452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800645e:	e7d3      	b.n	8006408 <HAL_RCC_OscConfig+0x84>
 8006460:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8006464:	d1f5      	bne.n	8006452 <HAL_RCC_OscConfig+0xce>
 8006466:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	e7c9      	b.n	8006402 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 800646e:	f7ff f83b 	bl	80054e8 <HAL_GetTick>
 8006472:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006476:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006478:	f04f 0801 	mov.w	r8, #1
 800647c:	fa97 f3a7 	rbit	r3, r7
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	fa97 f3a7 	rbit	r3, r7
 8006486:	fab3 f383 	clz	r3, r3
 800648a:	fa08 f303 	lsl.w	r3, r8, r3
 800648e:	4213      	tst	r3, r2
 8006490:	d080      	beq.n	8006394 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006492:	f7ff f829 	bl	80054e8 <HAL_GetTick>
 8006496:	1b80      	subs	r0, r0, r6
 8006498:	2864      	cmp	r0, #100	@ 0x64
 800649a:	d9ef      	bls.n	800647c <HAL_RCC_OscConfig+0xf8>
 800649c:	e7d3      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800649e:	4c77      	ldr	r4, [pc, #476]	@ (800667c <HAL_RCC_OscConfig+0x2f8>)
 80064a0:	6863      	ldr	r3, [r4, #4]
 80064a2:	f013 0f0c 	tst.w	r3, #12
 80064a6:	d007      	beq.n	80064b8 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d11f      	bne.n	80064f2 <HAL_RCC_OscConfig+0x16e>
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	03de      	lsls	r6, r3, #15
 80064b6:	d41c      	bmi.n	80064f2 <HAL_RCC_OscConfig+0x16e>
 80064b8:	2302      	movs	r3, #2
 80064ba:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	6821      	ldr	r1, [r4, #0]
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	2201      	movs	r2, #1
 80064c6:	fab3 f383 	clz	r3, r3
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	420b      	tst	r3, r1
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_OscConfig+0x154>
 80064d2:	692b      	ldr	r3, [r5, #16]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d18e      	bne.n	80063f6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d8:	6821      	ldr	r1, [r4, #0]
 80064da:	22f8      	movs	r2, #248	@ 0xf8
 80064dc:	fa92 f2a2 	rbit	r2, r2
 80064e0:	696b      	ldr	r3, [r5, #20]
 80064e2:	fab2 f282 	clz	r2, r2
 80064e6:	4093      	lsls	r3, r2
 80064e8:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80064ec:	4313      	orrs	r3, r2
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	e754      	b.n	800639c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064f2:	692a      	ldr	r2, [r5, #16]
 80064f4:	2601      	movs	r6, #1
 80064f6:	b1fa      	cbz	r2, 8006538 <HAL_RCC_OscConfig+0x1b4>
 80064f8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006504:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	f04f 0802 	mov.w	r8, #2
 800650e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006510:	f7fe ffea 	bl	80054e8 <HAL_GetTick>
 8006514:	4607      	mov	r7, r0
 8006516:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	fa98 f3a8 	rbit	r3, r8
 8006520:	fab3 f383 	clz	r3, r3
 8006524:	fa06 f303 	lsl.w	r3, r6, r3
 8006528:	4213      	tst	r3, r2
 800652a:	d1d5      	bne.n	80064d8 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800652c:	f7fe ffdc 	bl	80054e8 <HAL_GetTick>
 8006530:	1bc0      	subs	r0, r0, r7
 8006532:	2802      	cmp	r0, #2
 8006534:	d9ef      	bls.n	8006516 <HAL_RCC_OscConfig+0x192>
 8006536:	e786      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
 8006538:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800653c:	fab3 f383 	clz	r3, r3
 8006540:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006544:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	f04f 0802 	mov.w	r8, #2
 800654e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006550:	f7fe ffca 	bl	80054e8 <HAL_GetTick>
 8006554:	4607      	mov	r7, r0
 8006556:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	6822      	ldr	r2, [r4, #0]
 800655c:	fa98 f3a8 	rbit	r3, r8
 8006560:	fab3 f383 	clz	r3, r3
 8006564:	fa06 f303 	lsl.w	r3, r6, r3
 8006568:	4213      	tst	r3, r2
 800656a:	f43f af17 	beq.w	800639c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800656e:	f7fe ffbb 	bl	80054e8 <HAL_GetTick>
 8006572:	1bc0      	subs	r0, r0, r7
 8006574:	2802      	cmp	r0, #2
 8006576:	d9ee      	bls.n	8006556 <HAL_RCC_OscConfig+0x1d2>
 8006578:	e765      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800657a:	69aa      	ldr	r2, [r5, #24]
 800657c:	4e3f      	ldr	r6, [pc, #252]	@ (800667c <HAL_RCC_OscConfig+0x2f8>)
 800657e:	4940      	ldr	r1, [pc, #256]	@ (8006680 <HAL_RCC_OscConfig+0x2fc>)
 8006580:	2401      	movs	r4, #1
 8006582:	b30a      	cbz	r2, 80065c8 <HAL_RCC_OscConfig+0x244>
 8006584:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8006588:	fab3 f383 	clz	r3, r3
 800658c:	440b      	add	r3, r1
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	2702      	movs	r7, #2
 8006592:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8006594:	f7fe ffa8 	bl	80054e8 <HAL_GetTick>
 8006598:	4680      	mov	r8, r0
 800659a:	fa97 f3a7 	rbit	r3, r7
 800659e:	fa97 f3a7 	rbit	r3, r7
 80065a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a6:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80065a8:	fa97 f3a7 	rbit	r3, r7
 80065ac:	fab3 f383 	clz	r3, r3
 80065b0:	fa04 f303 	lsl.w	r3, r4, r3
 80065b4:	4213      	tst	r3, r2
 80065b6:	f47f aef5 	bne.w	80063a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ba:	f7fe ff95 	bl	80054e8 <HAL_GetTick>
 80065be:	eba0 0008 	sub.w	r0, r0, r8
 80065c2:	2802      	cmp	r0, #2
 80065c4:	d9e9      	bls.n	800659a <HAL_RCC_OscConfig+0x216>
 80065c6:	e73e      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
 80065c8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80065cc:	fab3 f383 	clz	r3, r3
 80065d0:	440b      	add	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	2702      	movs	r7, #2
 80065d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80065d8:	f7fe ff86 	bl	80054e8 <HAL_GetTick>
 80065dc:	4680      	mov	r8, r0
 80065de:	fa97 f3a7 	rbit	r3, r7
 80065e2:	fa97 f3a7 	rbit	r3, r7
 80065e6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ea:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80065ec:	fa97 f3a7 	rbit	r3, r7
 80065f0:	fab3 f383 	clz	r3, r3
 80065f4:	fa04 f303 	lsl.w	r3, r4, r3
 80065f8:	4213      	tst	r3, r2
 80065fa:	f43f aed3 	beq.w	80063a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fe:	f7fe ff73 	bl	80054e8 <HAL_GetTick>
 8006602:	eba0 0008 	sub.w	r0, r0, r8
 8006606:	2802      	cmp	r0, #2
 8006608:	d9e9      	bls.n	80065de <HAL_RCC_OscConfig+0x25a>
 800660a:	e71c      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660c:	4c1b      	ldr	r4, [pc, #108]	@ (800667c <HAL_RCC_OscConfig+0x2f8>)
 800660e:	69e3      	ldr	r3, [r4, #28]
 8006610:	00d9      	lsls	r1, r3, #3
 8006612:	d431      	bmi.n	8006678 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006614:	69e3      	ldr	r3, [r4, #28]
 8006616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661a:	61e3      	str	r3, [r4, #28]
 800661c:	69e3      	ldr	r3, [r4, #28]
 800661e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006626:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	4f16      	ldr	r7, [pc, #88]	@ (8006684 <HAL_RCC_OscConfig+0x300>)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	05da      	lsls	r2, r3, #23
 800662e:	d52b      	bpl.n	8006688 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006630:	68eb      	ldr	r3, [r5, #12]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d139      	bne.n	80066aa <HAL_RCC_OscConfig+0x326>
 8006636:	6a23      	ldr	r3, [r4, #32]
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800663e:	f7fe ff53 	bl	80054e8 <HAL_GetTick>
 8006642:	2702      	movs	r7, #2
 8006644:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006646:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f241 3a88 	movw	sl, #5000	@ 0x1388
 800664e:	fa97 f3a7 	rbit	r3, r7
 8006652:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006656:	6a22      	ldr	r2, [r4, #32]
 8006658:	fa97 f3a7 	rbit	r3, r7
 800665c:	fab3 f383 	clz	r3, r3
 8006660:	fa09 f303 	lsl.w	r3, r9, r3
 8006664:	4213      	tst	r3, r2
 8006666:	d053      	beq.n	8006710 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8006668:	2e00      	cmp	r6, #0
 800666a:	f43f ae9f 	beq.w	80063ac <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800666e:	69e3      	ldr	r3, [r4, #28]
 8006670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006674:	61e3      	str	r3, [r4, #28]
 8006676:	e699      	b.n	80063ac <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006678:	2600      	movs	r6, #0
 800667a:	e7d5      	b.n	8006628 <HAL_RCC_OscConfig+0x2a4>
 800667c:	40021000 	.word	0x40021000
 8006680:	10908120 	.word	0x10908120
 8006684:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006690:	f7fe ff2a 	bl	80054e8 <HAL_GetTick>
 8006694:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	05db      	lsls	r3, r3, #23
 800669a:	d4c9      	bmi.n	8006630 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669c:	f7fe ff24 	bl	80054e8 <HAL_GetTick>
 80066a0:	eba0 0008 	sub.w	r0, r0, r8
 80066a4:	2864      	cmp	r0, #100	@ 0x64
 80066a6:	d9f6      	bls.n	8006696 <HAL_RCC_OscConfig+0x312>
 80066a8:	e6cd      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066aa:	bb1b      	cbnz	r3, 80066f4 <HAL_RCC_OscConfig+0x370>
 80066ac:	6a23      	ldr	r3, [r4, #32]
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	6223      	str	r3, [r4, #32]
 80066b4:	6a23      	ldr	r3, [r4, #32]
 80066b6:	f023 0304 	bic.w	r3, r3, #4
 80066ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80066bc:	f7fe ff14 	bl	80054e8 <HAL_GetTick>
 80066c0:	2702      	movs	r7, #2
 80066c2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c4:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80066cc:	fa97 f3a7 	rbit	r3, r7
 80066d0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d4:	6a22      	ldr	r2, [r4, #32]
 80066d6:	fa97 f3a7 	rbit	r3, r7
 80066da:	fab3 f383 	clz	r3, r3
 80066de:	fa09 f303 	lsl.w	r3, r9, r3
 80066e2:	4213      	tst	r3, r2
 80066e4:	d0c0      	beq.n	8006668 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fe feff 	bl	80054e8 <HAL_GetTick>
 80066ea:	eba0 0008 	sub.w	r0, r0, r8
 80066ee:	4550      	cmp	r0, sl
 80066f0:	d9ec      	bls.n	80066cc <HAL_RCC_OscConfig+0x348>
 80066f2:	e6a8      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	6a23      	ldr	r3, [r4, #32]
 80066f8:	d103      	bne.n	8006702 <HAL_RCC_OscConfig+0x37e>
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	6223      	str	r3, [r4, #32]
 8006700:	e799      	b.n	8006636 <HAL_RCC_OscConfig+0x2b2>
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	6223      	str	r3, [r4, #32]
 8006708:	6a23      	ldr	r3, [r4, #32]
 800670a:	f023 0304 	bic.w	r3, r3, #4
 800670e:	e795      	b.n	800663c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7fe feea 	bl	80054e8 <HAL_GetTick>
 8006714:	eba0 0008 	sub.w	r0, r0, r8
 8006718:	4550      	cmp	r0, sl
 800671a:	d998      	bls.n	800664e <HAL_RCC_OscConfig+0x2ca>
 800671c:	e693      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800671e:	4c46      	ldr	r4, [pc, #280]	@ (8006838 <HAL_RCC_OscConfig+0x4b4>)
 8006720:	6862      	ldr	r2, [r4, #4]
 8006722:	f002 020c 	and.w	r2, r2, #12
 8006726:	2a08      	cmp	r2, #8
 8006728:	d074      	beq.n	8006814 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800672a:	2b02      	cmp	r3, #2
 800672c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006730:	d14d      	bne.n	80067ce <HAL_RCC_OscConfig+0x44a>
 8006732:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006736:	fab3 f383 	clz	r3, r3
 800673a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800673e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006748:	f7fe fece 	bl	80054e8 <HAL_GetTick>
 800674c:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8006750:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006752:	2601      	movs	r6, #1
 8006754:	fa98 f3a8 	rbit	r3, r8
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	fa98 f3a8 	rbit	r3, r8
 800675e:	fab3 f383 	clz	r3, r3
 8006762:	fa06 f303 	lsl.w	r3, r6, r3
 8006766:	4213      	tst	r3, r2
 8006768:	d12b      	bne.n	80067c2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800676a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800676e:	6862      	ldr	r2, [r4, #4]
 8006770:	430b      	orrs	r3, r1
 8006772:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8006776:	4313      	orrs	r3, r2
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800677e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006782:	fab3 f383 	clz	r3, r3
 8006786:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800678a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800678e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006790:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8006792:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006794:	f7fe fea8 	bl	80054e8 <HAL_GetTick>
 8006798:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800679c:	4605      	mov	r5, r0
 800679e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a2:	6822      	ldr	r2, [r4, #0]
 80067a4:	fa96 f3a6 	rbit	r3, r6
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	fa07 f303 	lsl.w	r3, r7, r3
 80067b0:	4213      	tst	r3, r2
 80067b2:	f47f adff 	bne.w	80063b4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b6:	f7fe fe97 	bl	80054e8 <HAL_GetTick>
 80067ba:	1b40      	subs	r0, r0, r5
 80067bc:	2802      	cmp	r0, #2
 80067be:	d9ee      	bls.n	800679e <HAL_RCC_OscConfig+0x41a>
 80067c0:	e641      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c2:	f7fe fe91 	bl	80054e8 <HAL_GetTick>
 80067c6:	1bc0      	subs	r0, r0, r7
 80067c8:	2802      	cmp	r0, #2
 80067ca:	d9c3      	bls.n	8006754 <HAL_RCC_OscConfig+0x3d0>
 80067cc:	e63b      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
 80067ce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80067d2:	fab3 f383 	clz	r3, r3
 80067d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80067da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80067e4:	f7fe fe80 	bl	80054e8 <HAL_GetTick>
 80067e8:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80067ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ee:	2701      	movs	r7, #1
 80067f0:	fa96 f3a6 	rbit	r3, r6
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	fa96 f3a6 	rbit	r3, r6
 80067fa:	fab3 f383 	clz	r3, r3
 80067fe:	fa07 f303 	lsl.w	r3, r7, r3
 8006802:	4213      	tst	r3, r2
 8006804:	f43f add6 	beq.w	80063b4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006808:	f7fe fe6e 	bl	80054e8 <HAL_GetTick>
 800680c:	1b40      	subs	r0, r0, r5
 800680e:	2802      	cmp	r0, #2
 8006810:	d9ee      	bls.n	80067f0 <HAL_RCC_OscConfig+0x46c>
 8006812:	e618      	b.n	8006446 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006814:	2b01      	cmp	r3, #1
 8006816:	f43f adee 	beq.w	80063f6 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 800681a:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800681c:	6a2b      	ldr	r3, [r5, #32]
 800681e:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8006822:	429a      	cmp	r2, r3
 8006824:	f47f ade7 	bne.w	80063f6 <HAL_RCC_OscConfig+0x72>
 8006828:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800682a:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800682e:	1ac0      	subs	r0, r0, r3
 8006830:	bf18      	it	ne
 8006832:	2001      	movne	r0, #1
 8006834:	e608      	b.n	8006448 <HAL_RCC_OscConfig+0xc4>
 8006836:	bf00      	nop
 8006838:	40021000 	.word	0x40021000

0800683c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x34>)
 800683e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006840:	f002 010c 	and.w	r1, r2, #12
 8006844:	2908      	cmp	r1, #8
 8006846:	d111      	bne.n	800686c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800684a:	480a      	ldr	r0, [pc, #40]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x38>)
 800684c:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006850:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006852:	bf44      	itt	mi
 8006854:	f003 030f 	andmi.w	r3, r3, #15
 8006858:	4a07      	ldrmi	r2, [pc, #28]	@ (8006878 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800685a:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800685c:	bf49      	itett	mi
 800685e:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006860:	4b06      	ldrpl	r3, [pc, #24]	@ (800687c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006862:	4b07      	ldrmi	r3, [pc, #28]	@ (8006880 <HAL_RCC_GetSysClockFreq+0x44>)
 8006864:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006868:	4358      	muls	r0, r3
 800686a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800686c:	4804      	ldr	r0, [pc, #16]	@ (8006880 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800686e:	4770      	bx	lr
 8006870:	40021000 	.word	0x40021000
 8006874:	080126be 	.word	0x080126be
 8006878:	080126ae 	.word	0x080126ae
 800687c:	003d0900 	.word	0x003d0900
 8006880:	007a1200 	.word	0x007a1200

08006884 <HAL_RCC_ClockConfig>:
{
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800688a:	4604      	mov	r4, r0
 800688c:	b910      	cbnz	r0, 8006894 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800688e:	2001      	movs	r0, #1
}
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4a4a      	ldr	r2, [pc, #296]	@ (80069c0 <HAL_RCC_ClockConfig+0x13c>)
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	428b      	cmp	r3, r1
 800689e:	d32e      	bcc.n	80068fe <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	0791      	lsls	r1, r2, #30
 80068a4:	d436      	bmi.n	8006914 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068a6:	07d2      	lsls	r2, r2, #31
 80068a8:	d43c      	bmi.n	8006924 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068aa:	4a45      	ldr	r2, [pc, #276]	@ (80069c0 <HAL_RCC_ClockConfig+0x13c>)
 80068ac:	6813      	ldr	r3, [r2, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	42ab      	cmp	r3, r5
 80068b4:	d870      	bhi.n	8006998 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	4d42      	ldr	r5, [pc, #264]	@ (80069c4 <HAL_RCC_ClockConfig+0x140>)
 80068ba:	f012 0f04 	tst.w	r2, #4
 80068be:	d177      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c0:	0713      	lsls	r3, r2, #28
 80068c2:	d506      	bpl.n	80068d2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068c4:	686b      	ldr	r3, [r5, #4]
 80068c6:	6922      	ldr	r2, [r4, #16]
 80068c8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80068cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80068d0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80068d2:	f7ff ffb3 	bl	800683c <HAL_RCC_GetSysClockFreq>
 80068d6:	686b      	ldr	r3, [r5, #4]
 80068d8:	22f0      	movs	r2, #240	@ 0xf0
 80068da:	fa92 f2a2 	rbit	r2, r2
 80068de:	fab2 f282 	clz	r2, r2
 80068e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068e6:	40d3      	lsrs	r3, r2
 80068e8:	4a37      	ldr	r2, [pc, #220]	@ (80069c8 <HAL_RCC_ClockConfig+0x144>)
 80068ea:	5cd3      	ldrb	r3, [r2, r3]
 80068ec:	40d8      	lsrs	r0, r3
 80068ee:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <HAL_RCC_ClockConfig+0x148>)
 80068f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80068f2:	4b37      	ldr	r3, [pc, #220]	@ (80069d0 <HAL_RCC_ClockConfig+0x14c>)
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f7fe fbf5 	bl	80050e4 <HAL_InitTick>
  return HAL_OK;
 80068fa:	2000      	movs	r0, #0
 80068fc:	e7c8      	b.n	8006890 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	430b      	orrs	r3, r1
 8006906:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006908:	6813      	ldr	r3, [r2, #0]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	428b      	cmp	r3, r1
 8006910:	d1bd      	bne.n	800688e <HAL_RCC_ClockConfig+0xa>
 8006912:	e7c5      	b.n	80068a0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	492b      	ldr	r1, [pc, #172]	@ (80069c4 <HAL_RCC_ClockConfig+0x140>)
 8006916:	68a0      	ldr	r0, [r4, #8]
 8006918:	684b      	ldr	r3, [r1, #4]
 800691a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800691e:	4303      	orrs	r3, r0
 8006920:	604b      	str	r3, [r1, #4]
 8006922:	e7c0      	b.n	80068a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006924:	6862      	ldr	r2, [r4, #4]
 8006926:	4e27      	ldr	r6, [pc, #156]	@ (80069c4 <HAL_RCC_ClockConfig+0x140>)
 8006928:	2a01      	cmp	r2, #1
 800692a:	d124      	bne.n	8006976 <HAL_RCC_ClockConfig+0xf2>
 800692c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006930:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006934:	6831      	ldr	r1, [r6, #0]
 8006936:	fa93 f3a3 	rbit	r3, r3
 800693a:	fab3 f383 	clz	r3, r3
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006944:	d0a3      	beq.n	800688e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006946:	6873      	ldr	r3, [r6, #4]
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	4313      	orrs	r3, r2
 800694e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006950:	f7fe fdca 	bl	80054e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006954:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006958:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695a:	6873      	ldr	r3, [r6, #4]
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	f003 030c 	and.w	r3, r3, #12
 8006962:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006966:	d0a0      	beq.n	80068aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006968:	f7fe fdbe 	bl	80054e8 <HAL_GetTick>
 800696c:	1bc0      	subs	r0, r0, r7
 800696e:	4540      	cmp	r0, r8
 8006970:	d9f3      	bls.n	800695a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006972:	2003      	movs	r0, #3
 8006974:	e78c      	b.n	8006890 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006976:	2a02      	cmp	r2, #2
 8006978:	bf0c      	ite	eq
 800697a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 800697e:	2302      	movne	r3, #2
 8006980:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006984:	6830      	ldr	r0, [r6, #0]
 8006986:	fa93 f3a3 	rbit	r3, r3
 800698a:	2101      	movs	r1, #1
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	4203      	tst	r3, r0
 8006996:	e7d5      	b.n	8006944 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006998:	6813      	ldr	r3, [r2, #0]
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	432b      	orrs	r3, r5
 80069a0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	42ab      	cmp	r3, r5
 80069aa:	f47f af70 	bne.w	800688e <HAL_RCC_ClockConfig+0xa>
 80069ae:	e782      	b.n	80068b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b0:	686b      	ldr	r3, [r5, #4]
 80069b2:	68e1      	ldr	r1, [r4, #12]
 80069b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80069b8:	430b      	orrs	r3, r1
 80069ba:	606b      	str	r3, [r5, #4]
 80069bc:	e780      	b.n	80068c0 <HAL_RCC_ClockConfig+0x3c>
 80069be:	bf00      	nop
 80069c0:	40022000 	.word	0x40022000
 80069c4:	40021000 	.word	0x40021000
 80069c8:	0801269e 	.word	0x0801269e
 80069cc:	20000018 	.word	0x20000018
 80069d0:	20000020 	.word	0x20000020

080069d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80069d4:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	fa92 f2a2 	rbit	r2, r2
 80069e0:	fab2 f282 	clz	r2, r2
 80069e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069e8:	40d3      	lsrs	r3, r2
 80069ea:	4a04      	ldr	r2, [pc, #16]	@ (80069fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ec:	5cd3      	ldrb	r3, [r2, r3]
 80069ee:	4a04      	ldr	r2, [pc, #16]	@ (8006a00 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80069f0:	6810      	ldr	r0, [r2, #0]
}    
 80069f2:	40d8      	lsrs	r0, r3
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40021000 	.word	0x40021000
 80069fc:	08012696 	.word	0x08012696
 8006a00:	20000018 	.word	0x20000018

08006a04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006a04:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a06:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	fa92 f2a2 	rbit	r2, r2
 8006a10:	fab2 f282 	clz	r2, r2
 8006a14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006a18:	40d3      	lsrs	r3, r2
 8006a1a:	4a04      	ldr	r2, [pc, #16]	@ (8006a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a1c:	5cd3      	ldrb	r3, [r2, r3]
 8006a1e:	4a04      	ldr	r2, [pc, #16]	@ (8006a30 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006a20:	6810      	ldr	r0, [r2, #0]
} 
 8006a22:	40d8      	lsrs	r0, r3
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	08012696 	.word	0x08012696
 8006a30:	20000018 	.word	0x20000018

08006a34 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a34:	230f      	movs	r3, #15
 8006a36:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a38:	4b0b      	ldr	r3, [pc, #44]	@ (8006a68 <HAL_RCC_GetClockConfig+0x34>)
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	f002 0203 	and.w	r2, r2, #3
 8006a40:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006a48:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006a50:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	08db      	lsrs	r3, r3, #3
 8006a56:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a5a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006a5c:	4b03      	ldr	r3, [pc, #12]	@ (8006a6c <HAL_RCC_GetClockConfig+0x38>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	600b      	str	r3, [r1, #0]
}
 8006a66:	4770      	bx	lr
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	40022000 	.word	0x40022000

08006a70 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a70:	6803      	ldr	r3, [r0, #0]
{
 8006a72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a76:	03dd      	lsls	r5, r3, #15
{
 8006a78:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a7a:	d524      	bpl.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7c:	4d78      	ldr	r5, [pc, #480]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006a7e:	69eb      	ldr	r3, [r5, #28]
 8006a80:	00d8      	lsls	r0, r3, #3
 8006a82:	f100 8091 	bmi.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	69eb      	ldr	r3, [r5, #28]
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	61eb      	str	r3, [r5, #28]
 8006a8e:	69eb      	ldr	r3, [r5, #28]
 8006a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006a98:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9a:	4f72      	ldr	r7, [pc, #456]	@ (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	05d9      	lsls	r1, r3, #23
 8006aa0:	f140 8084 	bpl.w	8006bac <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aa4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006aac:	f040 8093 	bne.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006ab0:	6a2b      	ldr	r3, [r5, #32]
 8006ab2:	6862      	ldr	r2, [r4, #4]
 8006ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006abc:	b11e      	cbz	r6, 8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abe:	69eb      	ldr	r3, [r5, #28]
 8006ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ac4:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	07df      	lsls	r7, r3, #31
 8006aca:	d506      	bpl.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006acc:	4964      	ldr	r1, [pc, #400]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006ace:	68a0      	ldr	r0, [r4, #8]
 8006ad0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006ad2:	f022 0203 	bic.w	r2, r2, #3
 8006ad6:	4302      	orrs	r2, r0
 8006ad8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ada:	079e      	lsls	r6, r3, #30
 8006adc:	d506      	bpl.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ade:	4960      	ldr	r1, [pc, #384]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006ae0:	68e0      	ldr	r0, [r4, #12]
 8006ae2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006ae4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8006ae8:	4302      	orrs	r2, r0
 8006aea:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006aec:	075d      	lsls	r5, r3, #29
 8006aee:	d506      	bpl.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006af0:	495b      	ldr	r1, [pc, #364]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006af2:	6920      	ldr	r0, [r4, #16]
 8006af4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006af6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8006afa:	4302      	orrs	r2, r0
 8006afc:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006afe:	0698      	lsls	r0, r3, #26
 8006b00:	d506      	bpl.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b02:	4957      	ldr	r1, [pc, #348]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b04:	69e0      	ldr	r0, [r4, #28]
 8006b06:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006b08:	f022 0210 	bic.w	r2, r2, #16
 8006b0c:	4302      	orrs	r2, r0
 8006b0e:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b10:	0399      	lsls	r1, r3, #14
 8006b12:	d506      	bpl.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006b14:	4952      	ldr	r1, [pc, #328]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006b18:	684a      	ldr	r2, [r1, #4]
 8006b1a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8006b1e:	4302      	orrs	r2, r0
 8006b20:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b22:	065a      	lsls	r2, r3, #25
 8006b24:	d506      	bpl.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b26:	494e      	ldr	r1, [pc, #312]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b28:	6a20      	ldr	r0, [r4, #32]
 8006b2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006b2c:	f022 0220 	bic.w	r2, r2, #32
 8006b30:	4302      	orrs	r2, r0
 8006b32:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b34:	071f      	lsls	r7, r3, #28
 8006b36:	d506      	bpl.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b38:	4949      	ldr	r1, [pc, #292]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b3a:	6960      	ldr	r0, [r4, #20]
 8006b3c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006b3e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006b42:	4302      	orrs	r2, r0
 8006b44:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b46:	06de      	lsls	r6, r3, #27
 8006b48:	d506      	bpl.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b4a:	4945      	ldr	r1, [pc, #276]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b4c:	69a0      	ldr	r0, [r4, #24]
 8006b4e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006b50:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006b54:	4302      	orrs	r2, r0
 8006b56:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b58:	059d      	lsls	r5, r3, #22
 8006b5a:	d506      	bpl.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b5c:	4940      	ldr	r1, [pc, #256]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b5e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006b60:	684a      	ldr	r2, [r1, #4]
 8006b62:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8006b66:	4302      	orrs	r2, r0
 8006b68:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b6a:	0618      	lsls	r0, r3, #24
 8006b6c:	d506      	bpl.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b6e:	493c      	ldr	r1, [pc, #240]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006b72:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006b74:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8006b78:	4302      	orrs	r2, r0
 8006b7a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006b7c:	05d9      	lsls	r1, r3, #23
 8006b7e:	d506      	bpl.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006b80:	4937      	ldr	r1, [pc, #220]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006b84:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006b86:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8006b8a:	4302      	orrs	r2, r0
 8006b8c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b8e:	04da      	lsls	r2, r3, #19
 8006b90:	d506      	bpl.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b92:	4933      	ldr	r1, [pc, #204]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006b94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006b96:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b9c:	4302      	orrs	r2, r0
 8006b9e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006ba0:	049b      	lsls	r3, r3, #18
 8006ba2:	d454      	bmi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e013      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8006ba8:	2600      	movs	r6, #0
 8006baa:	e776      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006bb4:	f7fe fc98 	bl	80054e8 <HAL_GetTick>
 8006bb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	05da      	lsls	r2, r3, #23
 8006bbe:	f53f af71 	bmi.w	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc2:	f7fe fc91 	bl	80054e8 <HAL_GetTick>
 8006bc6:	eba0 0008 	sub.w	r0, r0, r8
 8006bca:	2864      	cmp	r0, #100	@ 0x64
 8006bcc:	d9f5      	bls.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8006bce:	2003      	movs	r0, #3
}
 8006bd0:	b002      	add	sp, #8
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	f43f af68 	beq.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be0:	6a29      	ldr	r1, [r5, #32]
 8006be2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006be6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8006bea:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bee:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006bf2:	fab2 f282 	clz	r2, r2
 8006bf6:	4462      	add	r2, ip
 8006bf8:	0092      	lsls	r2, r2, #2
 8006bfa:	2701      	movs	r7, #1
 8006bfc:	6017      	str	r7, [r2, #0]
 8006bfe:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c02:	fab3 f383 	clz	r3, r3
 8006c06:	4463      	add	r3, ip
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c0e:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8006c10:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c12:	f57f af4d 	bpl.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8006c16:	f7fe fc67 	bl	80054e8 <HAL_GetTick>
 8006c1a:	f04f 0802 	mov.w	r8, #2
 8006c1e:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c20:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006c24:	fa98 f3a8 	rbit	r3, r8
 8006c28:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	6a2a      	ldr	r2, [r5, #32]
 8006c2e:	fa98 f3a8 	rbit	r3, r8
 8006c32:	fab3 f383 	clz	r3, r3
 8006c36:	fa07 f303 	lsl.w	r3, r7, r3
 8006c3a:	4213      	tst	r3, r2
 8006c3c:	f47f af38 	bne.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fe fc52 	bl	80054e8 <HAL_GetTick>
 8006c44:	eba0 0009 	sub.w	r0, r0, r9
 8006c48:	4550      	cmp	r0, sl
 8006c4a:	d9eb      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006c4c:	e7bf      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006c4e:	4a04      	ldr	r2, [pc, #16]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006c50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c52:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c5c:	e7a2      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40007000 	.word	0x40007000
 8006c68:	10908100 	.word	0x10908100

08006c6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c6e:	6803      	ldr	r3, [r0, #0]
 8006c70:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <HAL_RTC_WaitForSynchro+0x2c>)
 8006c72:	60da      	str	r2, [r3, #12]
{
 8006c74:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c76:	f7fe fc37 	bl	80054e8 <HAL_GetTick>
 8006c7a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	069b      	lsls	r3, r3, #26
 8006c82:	d501      	bpl.n	8006c88 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006c84:	2000      	movs	r0, #0
}
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c88:	f7fe fc2e 	bl	80054e8 <HAL_GetTick>
 8006c8c:	1b40      	subs	r0, r0, r5
 8006c8e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006c92:	d9f3      	bls.n	8006c7c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006c94:	2003      	movs	r0, #3
 8006c96:	e7f6      	b.n	8006c86 <HAL_RTC_WaitForSynchro+0x1a>
 8006c98:	0001ff5f 	.word	0x0001ff5f

08006c9c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c9c:	6803      	ldr	r3, [r0, #0]
{
 8006c9e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ca0:	68dc      	ldr	r4, [r3, #12]
 8006ca2:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8006ca6:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ca8:	d117      	bne.n	8006cda <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006cb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb2:	f7fe fc19 	bl	80054e8 <HAL_GetTick>
 8006cb6:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	065b      	lsls	r3, r3, #25
 8006cbe:	d400      	bmi.n	8006cc2 <RTC_EnterInitMode+0x26>
 8006cc0:	b10c      	cbz	r4, 8006cc6 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cc6:	f7fe fc0f 	bl	80054e8 <HAL_GetTick>
 8006cca:	1b80      	subs	r0, r0, r6
 8006ccc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cd0:	bf82      	ittt	hi
 8006cd2:	2304      	movhi	r3, #4
 8006cd4:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8006cd6:	2401      	movhi	r4, #1
 8006cd8:	e7ee      	b.n	8006cb8 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2400      	movs	r4, #0
 8006cdc:	e7f1      	b.n	8006cc2 <RTC_EnterInitMode+0x26>

08006cde <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cde:	6803      	ldr	r3, [r0, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8006ce6:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ce8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	069b      	lsls	r3, r3, #26
{
 8006cee:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cf0:	d501      	bpl.n	8006cf6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8006cf4:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cf6:	f7ff ffb9 	bl	8006c6c <HAL_RTC_WaitForSynchro>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d0f9      	beq.n	8006cf2 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cfe:	2304      	movs	r3, #4
 8006d00:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006d02:	2001      	movs	r0, #1
 8006d04:	e7f6      	b.n	8006cf4 <RTC_ExitInitMode+0x16>

08006d06 <HAL_RTC_Init>:
{
 8006d06:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006d08:	4604      	mov	r4, r0
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d041      	beq.n	8006d92 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d0e:	7f43      	ldrb	r3, [r0, #29]
 8006d10:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d14:	b913      	cbnz	r3, 8006d1c <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8006d16:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006d18:	f7fe f8ac 	bl	8004e74 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	06d2      	lsls	r2, r2, #27
 8006d26:	d503      	bpl.n	8006d30 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	7763      	strb	r3, [r4, #29]
 8006d2c:	2000      	movs	r0, #0
}
 8006d2e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d30:	22ca      	movs	r2, #202	@ 0xca
 8006d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d34:	2253      	movs	r2, #83	@ 0x53
 8006d36:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff ffaf 	bl	8006c9c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006d3e:	bb10      	cbnz	r0, 8006d86 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d40:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d42:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8006d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d4e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d50:	6862      	ldr	r2, [r4, #4]
 8006d52:	6899      	ldr	r1, [r3, #8]
 8006d54:	4302      	orrs	r2, r0
 8006d56:	6960      	ldr	r0, [r4, #20]
 8006d58:	4302      	orrs	r2, r0
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d5e:	68e2      	ldr	r2, [r4, #12]
 8006d60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	68a1      	ldr	r1, [r4, #8]
 8006d66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006d6a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7ff ffb6 	bl	8006cde <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006d72:	b940      	cbnz	r0, 8006d86 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d74:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d76:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d7e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d82:	430a      	orrs	r2, r1
 8006d84:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	22ff      	movs	r2, #255	@ 0xff
 8006d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d0cb      	beq.n	8006d28 <HAL_RTC_Init+0x22>
 8006d90:	e7cd      	b.n	8006d2e <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006d92:	2001      	movs	r0, #1
 8006d94:	e7cb      	b.n	8006d2e <HAL_RTC_Init+0x28>

08006d96 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006d96:	2300      	movs	r3, #0

  while (number >= 10U)
 8006d98:	2809      	cmp	r0, #9
 8006d9a:	d803      	bhi.n	8006da4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006d9c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006da0:	b2c0      	uxtb	r0, r0
 8006da2:	4770      	bx	lr
    number -= 10U;
 8006da4:	380a      	subs	r0, #10
    bcdhigh++;
 8006da6:	3301      	adds	r3, #1
    number -= 10U;
 8006da8:	b2c0      	uxtb	r0, r0
 8006daa:	e7f5      	b.n	8006d98 <RTC_ByteToBcd2+0x2>

08006dac <HAL_RTC_SetTime>:
{
 8006dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8006db0:	7f03      	ldrb	r3, [r0, #28]
 8006db2:	2b01      	cmp	r3, #1
{
 8006db4:	4606      	mov	r6, r0
 8006db6:	460f      	mov	r7, r1
 8006db8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006dbc:	d041      	beq.n	8006e42 <HAL_RTC_SetTime+0x96>
 8006dbe:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dc0:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8006dc2:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dc4:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8006dc6:	7838      	ldrb	r0, [r7, #0]
 8006dc8:	787d      	ldrb	r5, [r7, #1]
 8006dca:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dcc:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d139      	bne.n	8006e46 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dd2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006dd6:	bf08      	it	eq
 8006dd8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dda:	f7ff ffdc 	bl	8006d96 <RTC_ByteToBcd2>
 8006dde:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7ff ffd8 	bl	8006d96 <RTC_ByteToBcd2>
 8006de6:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ffd4 	bl	8006d96 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006dee:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006df0:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8006df4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006df8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dfc:	23ca      	movs	r3, #202	@ 0xca
 8006dfe:	624b      	str	r3, [r1, #36]	@ 0x24
 8006e00:	2353      	movs	r3, #83	@ 0x53
 8006e02:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ff49 	bl	8006c9c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006e0a:	b9a8      	cbnz	r0, 8006e38 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e0c:	6832      	ldr	r2, [r6, #0]
 8006e0e:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8006e12:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8006e16:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006e18:	6893      	ldr	r3, [r2, #8]
 8006e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e1e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e20:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006e24:	6891      	ldr	r1, [r2, #8]
 8006e26:	4303      	orrs	r3, r0
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ff56 	bl	8006cde <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006e32:	b908      	cbnz	r0, 8006e38 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8006e34:	2301      	movs	r3, #1
 8006e36:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	22ff      	movs	r2, #255	@ 0xff
 8006e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	7733      	strb	r3, [r6, #28]
}
 8006e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e46:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006e4a:	bf08      	it	eq
 8006e4c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e4e:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e50:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e52:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e56:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e5a:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006e5e:	e7cd      	b.n	8006dfc <HAL_RTC_SetTime+0x50>

08006e60 <HAL_RTC_SetDate>:
{
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006e62:	7f03      	ldrb	r3, [r0, #28]
 8006e64:	2b01      	cmp	r3, #1
{
 8006e66:	4605      	mov	r5, r0
 8006e68:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006e6c:	d027      	beq.n	8006ebe <HAL_RTC_SetDate+0x5e>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e72:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e74:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e76:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e78:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006e7a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e7c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e7e:	b1fa      	cbz	r2, 8006ec0 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e80:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006e84:	433b      	orrs	r3, r7
 8006e86:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	22ca      	movs	r2, #202	@ 0xca
 8006e8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e90:	2253      	movs	r2, #83	@ 0x53
 8006e92:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7ff ff01 	bl	8006c9c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006e9a:	b958      	cbnz	r0, 8006eb4 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e9c:	682a      	ldr	r2, [r5, #0]
 8006e9e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8006ea2:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8006ea6:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff ff18 	bl	8006cde <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006eae:	b908      	cbnz	r0, 8006eb4 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	772b      	strb	r3, [r5, #28]
}
 8006ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006ec0:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006ec2:	bf42      	ittt	mi
 8006ec4:	f024 0410 	bicmi.w	r4, r4, #16
 8006ec8:	340a      	addmi	r4, #10
 8006eca:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ecc:	f7ff ff63 	bl	8006d96 <RTC_ByteToBcd2>
 8006ed0:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ed2:	7848      	ldrb	r0, [r1, #1]
 8006ed4:	f7ff ff5f 	bl	8006d96 <RTC_ByteToBcd2>
 8006ed8:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006eda:	4638      	mov	r0, r7
 8006edc:	f7ff ff5b 	bl	8006d96 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006ee0:	ea40 0306 	orr.w	r3, r0, r6
 8006ee4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ee8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8006eec:	e7cd      	b.n	8006e8a <HAL_RTC_SetDate+0x2a>

08006eee <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006eee:	0903      	lsrs	r3, r0, #4
 8006ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006ef4:	f000 000f 	and.w	r0, r0, #15
 8006ef8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8006efc:	b2c0      	uxtb	r0, r0
 8006efe:	4770      	bx	lr

08006f00 <HAL_RTC_GetTime>:
{
 8006f00:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006f02:	6803      	ldr	r3, [r0, #0]
 8006f04:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006f06:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f08:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006f0a:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f0c:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006f10:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006f14:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006f18:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006f1a:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006f1e:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006f22:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006f24:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006f26:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006f28:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006f2a:	b952      	cbnz	r2, 8006f42 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f2c:	f7ff ffdf 	bl	8006eee <RTC_Bcd2ToByte>
 8006f30:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f32:	4628      	mov	r0, r5
 8006f34:	f7ff ffdb 	bl	8006eee <RTC_Bcd2ToByte>
 8006f38:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7ff ffd7 	bl	8006eee <RTC_Bcd2ToByte>
 8006f40:	7088      	strb	r0, [r1, #2]
}
 8006f42:	2000      	movs	r0, #0
 8006f44:	bd38      	pop	{r3, r4, r5, pc}

08006f46 <HAL_RTC_GetDate>:
{
 8006f46:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f48:	6803      	ldr	r3, [r0, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f4c:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f50:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f54:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f58:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f5c:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f5e:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f60:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006f62:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006f64:	b952      	cbnz	r2, 8006f7c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f66:	f7ff ffc2 	bl	8006eee <RTC_Bcd2ToByte>
 8006f6a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7ff ffbe 	bl	8006eee <RTC_Bcd2ToByte>
 8006f72:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7ff ffba 	bl	8006eee <RTC_Bcd2ToByte>
 8006f7a:	7088      	strb	r0, [r1, #2]
}
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}

08006f80 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006f80:	6803      	ldr	r3, [r0, #0]
 8006f82:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006f84:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006f88:	4770      	bx	lr

08006f8a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006f8a:	6803      	ldr	r3, [r0, #0]
 8006f8c:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006f8e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8006f92:	4770      	bx	lr

08006f94 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f96:	460e      	mov	r6, r1
 8006f98:	4614      	mov	r4, r2
 8006f9a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f9c:	f7fe faa4 	bl	80054e8 <HAL_GetTick>
 8006fa0:	4434      	add	r4, r6
 8006fa2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006fa4:	f7fe faa0 	bl	80054e8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fa8:	4b22      	ldr	r3, [pc, #136]	@ (8007034 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006fb0:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006fb2:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fb4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fb6:	682a      	ldr	r2, [r5, #0]
 8006fb8:	6890      	ldr	r0, [r2, #8]
 8006fba:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006fbe:	d02d      	beq.n	800701c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	1c73      	adds	r3, r6, #1
 8006fc2:	d0f9      	beq.n	8006fb8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fc4:	f7fe fa90 	bl	80054e8 <HAL_GetTick>
 8006fc8:	1bc0      	subs	r0, r0, r7
 8006fca:	42a0      	cmp	r0, r4
 8006fcc:	d328      	bcc.n	8007020 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd8:	686a      	ldr	r2, [r5, #4]
 8006fda:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006fde:	d10a      	bne.n	8006ff6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8006fe0:	68aa      	ldr	r2, [r5, #8]
 8006fe2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006fe6:	d002      	beq.n	8006fee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006fec:	d103      	bne.n	8006ff6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ff6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006ff8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006ffc:	d107      	bne.n	800700e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800700c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800700e:	2301      	movs	r3, #1
 8007010:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007014:	2300      	movs	r3, #0
 8007016:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800701a:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 800701c:	b003      	add	sp, #12
 800701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8007020:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007022:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8007024:	2a00      	cmp	r2, #0
      count--;
 8007026:	f103 33ff 	add.w	r3, r3, #4294967295
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	bf08      	it	eq
 800702e:	4614      	moveq	r4, r2
 8007030:	e7c1      	b.n	8006fb6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8007032:	bf00      	nop
 8007034:	20000018 	.word	0x20000018

08007038 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800703c:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800703e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007040:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8007042:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007046:	4605      	mov	r5, r0
 8007048:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800704a:	f7fe fa4d 	bl	80054e8 <HAL_GetTick>
 800704e:	443c      	add	r4, r7
 8007050:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8007052:	f7fe fa49 	bl	80054e8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007056:	4b29      	ldr	r3, [pc, #164]	@ (80070fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007058:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2223      	movs	r2, #35	@ 0x23
 8007060:	4353      	muls	r3, r2
 8007062:	0d1b      	lsrs	r3, r3, #20
 8007064:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8007066:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007068:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800706a:	682a      	ldr	r2, [r5, #0]
 800706c:	6890      	ldr	r0, [r2, #8]
 800706e:	4030      	ands	r0, r6
 8007070:	d038      	beq.n	80070e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007072:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007076:	bf01      	itttt	eq
 8007078:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 800707c:	b2db      	uxtbeq	r3, r3
 800707e:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007082:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007086:	1c7b      	adds	r3, r7, #1
 8007088:	d0f0      	beq.n	800706c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800708a:	f7fe fa2d 	bl	80054e8 <HAL_GetTick>
 800708e:	eba0 0008 	sub.w	r0, r0, r8
 8007092:	42a0      	cmp	r0, r4
 8007094:	d329      	bcc.n	80070ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800709e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a0:	686a      	ldr	r2, [r5, #4]
 80070a2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80070a6:	d10a      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 80070a8:	68aa      	ldr	r2, [r5, #8]
 80070aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80070ae:	d002      	beq.n	80070b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80070b4:	d103      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070be:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80070c0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80070c4:	d107      	bne.n	80070d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070dc:	2300      	movs	r3, #0
 80070de:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070e2:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80070e4:	b003      	add	sp, #12
 80070e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80070ea:	9a01      	ldr	r2, [sp, #4]
      count--;
 80070ec:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80070ee:	2a00      	cmp	r2, #0
      count--;
 80070f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	bf08      	it	eq
 80070f8:	4614      	moveq	r4, r2
 80070fa:	e7b6      	b.n	800706a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80070fc:	20000018 	.word	0x20000018

08007100 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007102:	6843      	ldr	r3, [r0, #4]
 8007104:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8007108:	4604      	mov	r4, r0
 800710a:	460e      	mov	r6, r1
 800710c:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710e:	d10b      	bne.n	8007128 <SPI_EndRxTransaction+0x28>
 8007110:	6883      	ldr	r3, [r0, #8]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007116:	d002      	beq.n	800711e <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711c:	d104      	bne.n	8007128 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800711e:	6822      	ldr	r2, [r4, #0]
 8007120:	6813      	ldr	r3, [r2, #0]
 8007122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007126:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007128:	463a      	mov	r2, r7
 800712a:	4631      	mov	r1, r6
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff ff31 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007132:	4605      	mov	r5, r0
 8007134:	b128      	cbz	r0, 8007142 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007136:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007138:	f043 0320 	orr.w	r3, r3, #32
 800713c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800713e:	2503      	movs	r5, #3
 8007140:	e013      	b.n	800716a <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007148:	d10f      	bne.n	800716a <SPI_EndRxTransaction+0x6a>
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007150:	d002      	beq.n	8007158 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007156:	d108      	bne.n	800716a <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007158:	463b      	mov	r3, r7
 800715a:	4632      	mov	r2, r6
 800715c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff ff69 	bl	8007038 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007166:	2800      	cmp	r0, #0
 8007168:	d1e5      	bne.n	8007136 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800716a:	4628      	mov	r0, r5
 800716c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800716e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800716e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007170:	4613      	mov	r3, r2
{
 8007172:	460d      	mov	r5, r1
 8007174:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007176:	460a      	mov	r2, r1
 8007178:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 800717c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800717e:	f7ff ff5b 	bl	8007038 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007182:	b128      	cbz	r0, 8007190 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007184:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800718c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800718e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007190:	4632      	mov	r2, r6
 8007192:	4629      	mov	r1, r5
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff fefd 	bl	8006f94 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800719a:	2800      	cmp	r0, #0
 800719c:	d1f2      	bne.n	8007184 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800719e:	4633      	mov	r3, r6
 80071a0:	462a      	mov	r2, r5
 80071a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff ff46 	bl	8007038 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d0ee      	beq.n	800718e <SPI_EndRxTxTransaction+0x20>
 80071b0:	e7e8      	b.n	8007184 <SPI_EndRxTxTransaction+0x16>

080071b2 <HAL_SPI_Init>:
{
 80071b2:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80071b4:	4604      	mov	r4, r0
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d067      	beq.n	800728a <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d15d      	bne.n	800727c <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c0:	6842      	ldr	r2, [r0, #4]
 80071c2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80071c6:	d000      	beq.n	80071ca <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c8:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ce:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80071d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071d6:	b923      	cbnz	r3, 80071e2 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80071d8:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80071dc:	4620      	mov	r0, r4
 80071de:	f7fd fe5d 	bl	8004e9c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80071e2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071e4:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80071e6:	2302      	movs	r3, #2
 80071e8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80071ec:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071ee:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80071f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	d942      	bls.n	8007284 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071fe:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007200:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007204:	bf18      	it	ne
 8007206:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007208:	68a6      	ldr	r6, [r4, #8]
 800720a:	6863      	ldr	r3, [r4, #4]
 800720c:	69a1      	ldr	r1, [r4, #24]
 800720e:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8007212:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8007216:	4333      	orrs	r3, r6
 8007218:	6926      	ldr	r6, [r4, #16]
 800721a:	f006 0602 	and.w	r6, r6, #2
 800721e:	4333      	orrs	r3, r6
 8007220:	6966      	ldr	r6, [r4, #20]
 8007222:	f006 0601 	and.w	r6, r6, #1
 8007226:	4333      	orrs	r3, r6
 8007228:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 800722c:	4333      	orrs	r3, r6
 800722e:	69e6      	ldr	r6, [r4, #28]
 8007230:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8007234:	4333      	orrs	r3, r6
 8007236:	6a26      	ldr	r6, [r4, #32]
 8007238:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 800723c:	4333      	orrs	r3, r6
 800723e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007240:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8007244:	4333      	orrs	r3, r6
 8007246:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007248:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800724a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800724c:	f006 0608 	and.w	r6, r6, #8
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8007258:	4333      	orrs	r3, r6
 800725a:	0c09      	lsrs	r1, r1, #16
 800725c:	4303      	orrs	r3, r0
 800725e:	f001 0104 	and.w	r1, r1, #4
 8007262:	430b      	orrs	r3, r1
 8007264:	432b      	orrs	r3, r5
 8007266:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007268:	69d3      	ldr	r3, [r2, #28]
 800726a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800726e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007270:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8007272:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007274:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007276:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800727a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800727c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800727e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007282:	e7a2      	b.n	80071ca <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007284:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8007288:	e7bc      	b.n	8007204 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800728a:	2001      	movs	r0, #1
 800728c:	e7f5      	b.n	800727a <HAL_SPI_Init+0xc8>

0800728e <HAL_SPI_Transmit>:
{
 800728e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007292:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8007294:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8007298:	2b01      	cmp	r3, #1
{
 800729a:	4604      	mov	r4, r0
 800729c:	460d      	mov	r5, r1
 800729e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80072a0:	f000 80bc 	beq.w	800741c <HAL_SPI_Transmit+0x18e>
 80072a4:	2301      	movs	r3, #1
 80072a6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80072aa:	f7fe f91d 	bl	80054e8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80072ae:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80072b2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80072b4:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80072b6:	fa5f f983 	uxtb.w	r9, r3
 80072ba:	f040 80ac 	bne.w	8007416 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d069      	beq.n	8007396 <HAL_SPI_Transmit+0x108>
 80072c2:	f1b8 0f00 	cmp.w	r8, #0
 80072c6:	d066      	beq.n	8007396 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072c8:	2303      	movs	r3, #3
 80072ca:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80072d2:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80072d6:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072da:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80072dc:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80072e0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e4:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80072e6:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072e8:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80072ee:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f2:	d107      	bne.n	8007304 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fa:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80072fc:	6833      	ldr	r3, [r6, #0]
 80072fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007302:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007304:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007306:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007308:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800730a:	bf5e      	ittt	pl
 800730c:	6833      	ldrpl	r3, [r6, #0]
 800730e:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8007312:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007314:	68e3      	ldr	r3, [r4, #12]
 8007316:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800731a:	d943      	bls.n	80073a4 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800731c:	b112      	cbz	r2, 8007324 <HAL_SPI_Transmit+0x96>
 800731e:	f1b8 0f01 	cmp.w	r8, #1
 8007322:	d107      	bne.n	8007334 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007324:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007328:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800732a:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800732c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800732e:	3b01      	subs	r3, #1
 8007330:	b29b      	uxth	r3, r3
 8007332:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8007334:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	b9b3      	cbnz	r3, 8007368 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800733a:	4652      	mov	r2, sl
 800733c:	4639      	mov	r1, r7
 800733e:	4620      	mov	r0, r4
 8007340:	f7ff ff15 	bl	800716e <SPI_EndRxTxTransaction>
 8007344:	2800      	cmp	r0, #0
 8007346:	d163      	bne.n	8007410 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007348:	68a3      	ldr	r3, [r4, #8]
 800734a:	b933      	cbnz	r3, 800735a <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	9201      	str	r2, [sp, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800735c:	b9db      	cbnz	r3, 8007396 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800735e:	2201      	movs	r2, #1
 8007360:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007364:	4699      	mov	r9, r3
 8007366:	e016      	b.n	8007396 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	6893      	ldr	r3, [r2, #8]
 800736c:	079d      	lsls	r5, r3, #30
 800736e:	d505      	bpl.n	800737c <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007370:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007372:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007376:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007378:	63a3      	str	r3, [r4, #56]	@ 0x38
 800737a:	e7d7      	b.n	800732c <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800737c:	f7fe f8b4 	bl	80054e8 <HAL_GetTick>
 8007380:	eba0 000a 	sub.w	r0, r0, sl
 8007384:	42b8      	cmp	r0, r7
 8007386:	d3d5      	bcc.n	8007334 <HAL_SPI_Transmit+0xa6>
 8007388:	1c78      	adds	r0, r7, #1
 800738a:	d0d3      	beq.n	8007334 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 800738c:	2301      	movs	r3, #1
 800738e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8007392:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8007396:	2300      	movs	r3, #0
 8007398:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800739c:	4648      	mov	r0, r9
 800739e:	b002      	add	sp, #8
 80073a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a4:	b112      	cbz	r2, 80073ac <HAL_SPI_Transmit+0x11e>
 80073a6:	f1b8 0f01 	cmp.w	r8, #1
 80073aa:	d113      	bne.n	80073d4 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 80073ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d906      	bls.n	80073c2 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80073b8:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ba:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073be:	3b02      	subs	r3, #2
 80073c0:	e006      	b.n	80073d0 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073c2:	782b      	ldrb	r3, [r5, #0]
 80073c4:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80073c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80073c8:	3301      	adds	r3, #1
 80073ca:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80073cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80073d4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0ae      	beq.n	800733a <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073dc:	6822      	ldr	r2, [r4, #0]
 80073de:	6893      	ldr	r3, [r2, #8]
 80073e0:	0799      	lsls	r1, r3, #30
 80073e2:	d50c      	bpl.n	80073fe <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80073e4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80073e8:	b289      	uxth	r1, r1
 80073ea:	2901      	cmp	r1, #1
 80073ec:	d904      	bls.n	80073f8 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ee:	f833 1b02 	ldrh.w	r1, [r3], #2
 80073f2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80073f6:	e7e1      	b.n	80073bc <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80073fc:	e7e3      	b.n	80073c6 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fe:	f7fe f873 	bl	80054e8 <HAL_GetTick>
 8007402:	eba0 000a 	sub.w	r0, r0, sl
 8007406:	42b8      	cmp	r0, r7
 8007408:	d3e4      	bcc.n	80073d4 <HAL_SPI_Transmit+0x146>
 800740a:	1c7b      	adds	r3, r7, #1
 800740c:	d0e2      	beq.n	80073d4 <HAL_SPI_Transmit+0x146>
 800740e:	e7bd      	b.n	800738c <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007410:	2320      	movs	r3, #32
 8007412:	6623      	str	r3, [r4, #96]	@ 0x60
 8007414:	e798      	b.n	8007348 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8007416:	f04f 0902 	mov.w	r9, #2
 800741a:	e7bc      	b.n	8007396 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 800741c:	f04f 0902 	mov.w	r9, #2
 8007420:	e7bc      	b.n	800739c <HAL_SPI_Transmit+0x10e>

08007422 <HAL_SPI_TransmitReceive>:
{
 8007422:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007426:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007428:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 800742c:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800742e:	2b01      	cmp	r3, #1
{
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8007436:	f000 8122 	beq.w	800767e <HAL_SPI_TransmitReceive+0x25c>
 800743a:	2301      	movs	r3, #1
 800743c:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8007440:	f7fe f852 	bl	80054e8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007444:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007448:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800744a:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800744c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800744e:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007450:	d00a      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x46>
 8007452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007456:	f040 8110 	bne.w	800767a <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800745a:	68a2      	ldr	r2, [r4, #8]
 800745c:	2a00      	cmp	r2, #0
 800745e:	f040 810c 	bne.w	800767a <HAL_SPI_TransmitReceive+0x258>
 8007462:	2904      	cmp	r1, #4
 8007464:	f040 8109 	bne.w	800767a <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007468:	b92d      	cbnz	r5, 8007476 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 800746a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800746c:	2300      	movs	r3, #0
 800746e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d0f6      	beq.n	800746a <HAL_SPI_TransmitReceive+0x48>
 800747c:	2e00      	cmp	r6, #0
 800747e:	d0f4      	beq.n	800746a <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007480:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007484:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007486:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007488:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800748c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800748e:	bf1c      	itt	ne
 8007490:	2205      	movne	r2, #5
 8007492:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007496:	2200      	movs	r2, #0
 8007498:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800749a:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800749e:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 80074a2:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80074a4:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 80074a8:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ac:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074ae:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80074b0:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80074b2:	d801      	bhi.n	80074b8 <HAL_SPI_TransmitReceive+0x96>
 80074b4:	2e01      	cmp	r6, #1
 80074b6:	d02e      	beq.n	8007516 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074bc:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074be:	680a      	ldr	r2, [r1, #0]
 80074c0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80074c2:	bf5e      	ittt	pl
 80074c4:	680a      	ldrpl	r2, [r1, #0]
 80074c6:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80074ca:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074cc:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 80074d0:	d957      	bls.n	8007582 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d2:	b10b      	cbz	r3, 80074d8 <HAL_SPI_TransmitReceive+0xb6>
 80074d4:	2e01      	cmp	r6, #1
 80074d6:	d107      	bne.n	80074e8 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80074dc:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80074de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e0:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80074e8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	b9ab      	cbnz	r3, 800751c <HAL_SPI_TransmitReceive+0xfa>
 80074f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b98b      	cbnz	r3, 800751c <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074f8:	4642      	mov	r2, r8
 80074fa:	4639      	mov	r1, r7
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff fe36 	bl	800716e <SPI_EndRxTxTransaction>
 8007502:	2800      	cmp	r0, #0
 8007504:	f040 80b5 	bne.w	8007672 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007508:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1ad      	bne.n	800746a <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 800750e:	2301      	movs	r3, #1
 8007510:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8007514:	e7aa      	b.n	800746c <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007516:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800751a:	e7cf      	b.n	80074bc <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800751c:	6821      	ldr	r1, [r4, #0]
 800751e:	688b      	ldr	r3, [r1, #8]
 8007520:	079e      	lsls	r6, r3, #30
 8007522:	d50d      	bpl.n	8007540 <HAL_SPI_TransmitReceive+0x11e>
 8007524:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	b153      	cbz	r3, 8007540 <HAL_SPI_TransmitReceive+0x11e>
 800752a:	b145      	cbz	r5, 800753e <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800752e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007532:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007534:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007536:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007538:	3b01      	subs	r3, #1
 800753a:	b29b      	uxth	r3, r3
 800753c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800753e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007540:	688a      	ldr	r2, [r1, #8]
 8007542:	f012 0201 	ands.w	r2, r2, #1
 8007546:	d00f      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x146>
 8007548:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800754c:	b29b      	uxth	r3, r3
 800754e:	b15b      	cbz	r3, 8007568 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007552:	68c9      	ldr	r1, [r1, #12]
 8007554:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007558:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800755a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800755e:	3b01      	subs	r3, #1
 8007560:	b29b      	uxth	r3, r3
 8007562:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8007566:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007568:	f7fd ffbe 	bl	80054e8 <HAL_GetTick>
 800756c:	eba0 0008 	sub.w	r0, r0, r8
 8007570:	42b8      	cmp	r0, r7
 8007572:	d3ba      	bcc.n	80074ea <HAL_SPI_TransmitReceive+0xc8>
 8007574:	1c78      	adds	r0, r7, #1
 8007576:	d0b8      	beq.n	80074ea <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8007578:	2301      	movs	r3, #1
 800757a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800757e:	2003      	movs	r0, #3
 8007580:	e774      	b.n	800746c <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007582:	b10b      	cbz	r3, 8007588 <HAL_SPI_TransmitReceive+0x166>
 8007584:	2e01      	cmp	r6, #1
 8007586:	d10b      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8007588:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	d909      	bls.n	80075a4 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007590:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007594:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8007596:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007598:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800759a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 800759c:	b29b      	uxth	r3, r3
 800759e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80075a0:	2501      	movs	r5, #1
 80075a2:	e048      	b.n	8007636 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075a4:	782b      	ldrb	r3, [r5, #0]
 80075a6:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 80075a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80075aa:	3301      	adds	r3, #1
 80075ac:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80075ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075b0:	3b01      	subs	r3, #1
 80075b2:	e7f3      	b.n	800759c <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	6893      	ldr	r3, [r2, #8]
 80075b8:	0799      	lsls	r1, r3, #30
 80075ba:	d511      	bpl.n	80075e0 <HAL_SPI_TransmitReceive+0x1be>
 80075bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b173      	cbz	r3, 80075e0 <HAL_SPI_TransmitReceive+0x1be>
 80075c2:	b165      	cbz	r5, 80075de <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80075c4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80075c8:	b289      	uxth	r1, r1
 80075ca:	2901      	cmp	r1, #1
 80075cc:	d93d      	bls.n	800764a <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ce:	f833 1b02 	ldrh.w	r1, [r3], #2
 80075d2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d4:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80075d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80075d8:	3b02      	subs	r3, #2
 80075da:	b29b      	uxth	r3, r3
 80075dc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80075de:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	6891      	ldr	r1, [r2, #8]
 80075e4:	f011 0101 	ands.w	r1, r1, #1
 80075e8:	d01d      	beq.n	8007626 <HAL_SPI_TransmitReceive+0x204>
 80075ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	b1cb      	cbz	r3, 8007626 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80075f2:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80075f8:	b280      	uxth	r0, r0
 80075fa:	2801      	cmp	r0, #1
 80075fc:	d92d      	bls.n	800765a <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075fe:	68d0      	ldr	r0, [r2, #12]
 8007600:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007604:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007606:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800760a:	3b02      	subs	r3, #2
 800760c:	b29b      	uxth	r3, r3
 800760e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007612:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800761a:	bf9e      	ittt	ls
 800761c:	6853      	ldrls	r3, [r2, #4]
 800761e:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8007622:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8007624:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007626:	f7fd ff5f 	bl	80054e8 <HAL_GetTick>
 800762a:	eba0 0008 	sub.w	r0, r0, r8
 800762e:	42b8      	cmp	r0, r7
 8007630:	d301      	bcc.n	8007636 <HAL_SPI_TransmitReceive+0x214>
 8007632:	1c7b      	adds	r3, r7, #1
 8007634:	d1a0      	bne.n	8007578 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007636:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ba      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x192>
 800763e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1b5      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x192>
 8007648:	e756      	b.n	80074f8 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800764e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007650:	3301      	adds	r3, #1
 8007652:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8007654:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007656:	3b01      	subs	r3, #1
 8007658:	e7bf      	b.n	80075da <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800765a:	7b12      	ldrb	r2, [r2, #12]
 800765c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800765e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007660:	3301      	adds	r3, #1
 8007662:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8007664:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007668:	3b01      	subs	r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007670:	e7d8      	b.n	8007624 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007672:	2320      	movs	r3, #32
 8007674:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007676:	2001      	movs	r0, #1
 8007678:	e746      	b.n	8007508 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 800767a:	2002      	movs	r0, #2
 800767c:	e6f6      	b.n	800746c <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 800767e:	2002      	movs	r0, #2
 8007680:	e6f7      	b.n	8007472 <HAL_SPI_TransmitReceive+0x50>

08007682 <HAL_SPI_Receive>:
{
 8007682:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007686:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8007688:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 800768c:	2b01      	cmp	r3, #1
{
 800768e:	4604      	mov	r4, r0
 8007690:	468a      	mov	sl, r1
 8007692:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8007694:	b2de      	uxtb	r6, r3
 8007696:	f040 80a7 	bne.w	80077e8 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800769a:	6843      	ldr	r3, [r0, #4]
 800769c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a0:	d10e      	bne.n	80076c0 <HAL_SPI_Receive+0x3e>
 80076a2:	6883      	ldr	r3, [r0, #8]
 80076a4:	b963      	cbnz	r3, 80076c0 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076a6:	2304      	movs	r3, #4
 80076a8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076ac:	4613      	mov	r3, r2
 80076ae:	9700      	str	r7, [sp, #0]
 80076b0:	460a      	mov	r2, r1
 80076b2:	f7ff feb6 	bl	8007422 <HAL_SPI_TransmitReceive>
 80076b6:	4606      	mov	r6, r0
}
 80076b8:	4630      	mov	r0, r6
 80076ba:	b002      	add	sp, #8
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 80076c0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	f000 8091 	beq.w	80077ec <HAL_SPI_Receive+0x16a>
 80076ca:	2301      	movs	r3, #1
 80076cc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80076d0:	f7fd ff0a 	bl	80054e8 <HAL_GetTick>
 80076d4:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 80076d6:	f1ba 0f00 	cmp.w	sl, #0
 80076da:	d075      	beq.n	80077c8 <HAL_SPI_Receive+0x146>
 80076dc:	f1b8 0f00 	cmp.w	r8, #0
 80076e0:	d072      	beq.n	80077c8 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e2:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076e4:	2304      	movs	r3, #4
 80076e6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 80076ea:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ee:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076f0:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80076f2:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 80076f6:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80076f8:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076fa:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076fc:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076fe:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007700:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007704:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007708:	bf8c      	ite	hi
 800770a:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800770e:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8007712:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007716:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800771e:	d107      	bne.n	8007730 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007726:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800772e:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8007734:	bf5e      	ittt	pl
 8007736:	682b      	ldrpl	r3, [r5, #0]
 8007738:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800773c:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800773e:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8007742:	d923      	bls.n	800778c <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8007744:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007748:	b29b      	uxth	r3, r3
 800774a:	b323      	cbz	r3, 8007796 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	07d2      	lsls	r2, r2, #31
 8007752:	d53d      	bpl.n	80077d0 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007758:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800775c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800775e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007762:	3b01      	subs	r3, #1
 8007764:	b29b      	uxth	r3, r3
 8007766:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800776a:	e7eb      	b.n	8007744 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	07d0      	lsls	r0, r2, #31
 8007772:	d51d      	bpl.n	80077b0 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007774:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007776:	7b1b      	ldrb	r3, [r3, #12]
 8007778:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800777a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800777c:	3301      	adds	r3, #1
 800777e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007780:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007784:	3b01      	subs	r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800778c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1ea      	bne.n	800776c <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007796:	464a      	mov	r2, r9
 8007798:	4639      	mov	r1, r7
 800779a:	4620      	mov	r0, r4
 800779c:	f7ff fcb0 	bl	8007100 <SPI_EndRxTransaction>
 80077a0:	b9f8      	cbnz	r0, 80077e2 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80077a4:	b983      	cbnz	r3, 80077c8 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 80077a6:	2201      	movs	r2, #1
 80077a8:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077ac:	461e      	mov	r6, r3
 80077ae:	e00b      	b.n	80077c8 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b0:	f7fd fe9a 	bl	80054e8 <HAL_GetTick>
 80077b4:	eba0 0009 	sub.w	r0, r0, r9
 80077b8:	42b8      	cmp	r0, r7
 80077ba:	d3e7      	bcc.n	800778c <HAL_SPI_Receive+0x10a>
 80077bc:	1c79      	adds	r1, r7, #1
 80077be:	d0e5      	beq.n	800778c <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80077c6:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 80077c8:	2300      	movs	r3, #0
 80077ca:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80077ce:	e773      	b.n	80076b8 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d0:	f7fd fe8a 	bl	80054e8 <HAL_GetTick>
 80077d4:	eba0 0009 	sub.w	r0, r0, r9
 80077d8:	42b8      	cmp	r0, r7
 80077da:	d3b3      	bcc.n	8007744 <HAL_SPI_Receive+0xc2>
 80077dc:	1c7b      	adds	r3, r7, #1
 80077de:	d0b1      	beq.n	8007744 <HAL_SPI_Receive+0xc2>
 80077e0:	e7ee      	b.n	80077c0 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e2:	2320      	movs	r3, #32
 80077e4:	6623      	str	r3, [r4, #96]	@ 0x60
 80077e6:	e7dc      	b.n	80077a2 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80077e8:	2602      	movs	r6, #2
 80077ea:	e7ed      	b.n	80077c8 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 80077ec:	2602      	movs	r6, #2
 80077ee:	e763      	b.n	80076b8 <HAL_SPI_Receive+0x36>

080077f0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077f0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d127      	bne.n	8007848 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077fa:	4a14      	ldr	r2, [pc, #80]	@ (800784c <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80077fc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007800:	6803      	ldr	r3, [r0, #0]
 8007802:	4293      	cmp	r3, r2
 8007804:	d012      	beq.n	800782c <HAL_TIM_Base_Start+0x3c>
 8007806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780a:	d00f      	beq.n	800782c <HAL_TIM_Base_Start+0x3c>
 800780c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007810:	4293      	cmp	r3, r2
 8007812:	d00b      	beq.n	800782c <HAL_TIM_Base_Start+0x3c>
 8007814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007818:	4293      	cmp	r3, r2
 800781a:	d007      	beq.n	800782c <HAL_TIM_Base_Start+0x3c>
 800781c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <HAL_TIM_Base_Start+0x3c>
 8007824:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007828:	4293      	cmp	r3, r2
 800782a:	d107      	bne.n	800783c <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800782c:	6899      	ldr	r1, [r3, #8]
 800782e:	4a08      	ldr	r2, [pc, #32]	@ (8007850 <HAL_TIM_Base_Start+0x60>)
 8007830:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007832:	2a06      	cmp	r2, #6
 8007834:	d006      	beq.n	8007844 <HAL_TIM_Base_Start+0x54>
 8007836:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800783a:	d003      	beq.n	8007844 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
    return HAL_ERROR;
 8007848:	2001      	movs	r0, #1
}
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	00010007 	.word	0x00010007

08007854 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007854:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007858:	2b01      	cmp	r3, #1
 800785a:	d12b      	bne.n	80078b4 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	2302      	movs	r3, #2
 800785e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007862:	6803      	ldr	r3, [r0, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	f042 0201 	orr.w	r2, r2, #1
 800786a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800786c:	4a12      	ldr	r2, [pc, #72]	@ (80078b8 <HAL_TIM_Base_Start_IT+0x64>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d012      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007876:	d00f      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 8007878:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 8007880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 8007888:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <HAL_TIM_Base_Start_IT+0x44>
 8007890:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007894:	4293      	cmp	r3, r2
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007898:	6899      	ldr	r1, [r3, #8]
 800789a:	4a08      	ldr	r2, [pc, #32]	@ (80078bc <HAL_TIM_Base_Start_IT+0x68>)
 800789c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800789e:	2a06      	cmp	r2, #6
 80078a0:	d006      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x5c>
 80078a2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80078a6:	d003      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	f042 0201 	orr.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80078b0:	2000      	movs	r0, #0
 80078b2:	4770      	bx	lr
    return HAL_ERROR;
 80078b4:	2001      	movs	r0, #1
}
 80078b6:	4770      	bx	lr
 80078b8:	40012c00 	.word	0x40012c00
 80078bc:	00010007 	.word	0x00010007

080078c0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80078c0:	4770      	bx	lr

080078c2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80078c8:	6803      	ldr	r3, [r0, #0]
{
 80078ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80078cc:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078ce:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078d0:	07b2      	lsls	r2, r6, #30
{
 80078d2:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078d4:	d50d      	bpl.n	80078f2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078d6:	07a9      	lsls	r1, r5, #30
 80078d8:	d50b      	bpl.n	80078f2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078da:	f06f 0202 	mvn.w	r2, #2
 80078de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078e0:	2201      	movs	r2, #1
 80078e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	079a      	lsls	r2, r3, #30
 80078e8:	d074      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80078ea:	f7ff ffea 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	2300      	movs	r3, #0
 80078f0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078f2:	0773      	lsls	r3, r6, #29
 80078f4:	d510      	bpl.n	8007918 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078f6:	0768      	lsls	r0, r5, #29
 80078f8:	d50e      	bpl.n	8007918 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f06f 0204 	mvn.w	r2, #4
 8007900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007902:	2202      	movs	r2, #2
 8007904:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800790c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800790e:	d067      	beq.n	80079e0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007910:	f7ff ffd7 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007914:	2300      	movs	r3, #0
 8007916:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007918:	0731      	lsls	r1, r6, #28
 800791a:	d50f      	bpl.n	800793c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800791c:	072a      	lsls	r2, r5, #28
 800791e:	d50d      	bpl.n	800793c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	f06f 0208 	mvn.w	r2, #8
 8007926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007928:	2204      	movs	r2, #4
 800792a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007930:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007932:	d05b      	beq.n	80079ec <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8007934:	f7ff ffc5 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007938:	2300      	movs	r3, #0
 800793a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800793c:	06f0      	lsls	r0, r6, #27
 800793e:	d510      	bpl.n	8007962 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007940:	06e9      	lsls	r1, r5, #27
 8007942:	d50e      	bpl.n	8007962 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	f06f 0210 	mvn.w	r2, #16
 800794a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794c:	2208      	movs	r2, #8
 800794e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007956:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007958:	d04e      	beq.n	80079f8 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800795a:	f7ff ffb2 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	2300      	movs	r3, #0
 8007960:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007962:	07f2      	lsls	r2, r6, #31
 8007964:	d508      	bpl.n	8007978 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007966:	07eb      	lsls	r3, r5, #31
 8007968:	d506      	bpl.n	8007978 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f06f 0201 	mvn.w	r2, #1
 8007970:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007972:	4620      	mov	r0, r4
 8007974:	f7fc f9d8 	bl	8003d28 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007978:	0630      	lsls	r0, r6, #24
 800797a:	d508      	bpl.n	800798e <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800797c:	0629      	lsls	r1, r5, #24
 800797e:	d506      	bpl.n	800798e <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007986:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007988:	4620      	mov	r0, r4
 800798a:	f000 f9b8 	bl	8007cfe <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800798e:	05f2      	lsls	r2, r6, #23
 8007990:	d508      	bpl.n	80079a4 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007992:	062b      	lsls	r3, r5, #24
 8007994:	d506      	bpl.n	80079a4 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800799c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 f9ae 	bl	8007d00 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079a4:	0670      	lsls	r0, r6, #25
 80079a6:	d508      	bpl.n	80079ba <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079a8:	0669      	lsls	r1, r5, #25
 80079aa:	d506      	bpl.n	80079ba <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80079b4:	4620      	mov	r0, r4
 80079b6:	f7ff ff86 	bl	80078c6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079ba:	06b2      	lsls	r2, r6, #26
 80079bc:	d522      	bpl.n	8007a04 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079be:	06ab      	lsls	r3, r5, #26
 80079c0:	d520      	bpl.n	8007a04 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80079c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079ca:	611a      	str	r2, [r3, #16]
}
 80079cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80079d0:	f000 b994 	b.w	8007cfc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d4:	f7ff ff74 	bl	80078c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff ff73 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80079de:	e786      	b.n	80078ee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e0:	f7ff ff6e 	bl	80078c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff ff6d 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80079ea:	e793      	b.n	8007914 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ec:	f7ff ff68 	bl	80078c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7ff ff67 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80079f6:	e79f      	b.n	8007938 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f8:	f7ff ff62 	bl	80078c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7ff ff61 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007a02:	e7ac      	b.n	800795e <HAL_TIM_IRQHandler+0x96>
}
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a08 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a08:	4a2f      	ldr	r2, [pc, #188]	@ (8007ac8 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8007a0a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a0c:	4290      	cmp	r0, r2
 8007a0e:	d00e      	beq.n	8007a2e <TIM_Base_SetConfig+0x26>
 8007a10:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0x26>
 8007a16:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007a1a:	4290      	cmp	r0, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0x26>
 8007a1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a22:	4290      	cmp	r0, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0x26>
 8007a26:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007a2a:	4290      	cmp	r0, r2
 8007a2c:	d115      	bne.n	8007a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007a2e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a34:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a36:	4a24      	ldr	r2, [pc, #144]	@ (8007ac8 <TIM_Base_SetConfig+0xc0>)
 8007a38:	4290      	cmp	r0, r2
 8007a3a:	d019      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a3c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007a40:	d016      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a42:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007a46:	4290      	cmp	r0, r2
 8007a48:	d012      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a4e:	4290      	cmp	r0, r2
 8007a50:	d00e      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a52:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007a56:	4290      	cmp	r0, r2
 8007a58:	d00a      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8007acc <TIM_Base_SetConfig+0xc4>)
 8007a5c:	4290      	cmp	r0, r2
 8007a5e:	d007      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a64:	4290      	cmp	r0, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0x68>
 8007a68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a6c:	4290      	cmp	r0, r2
 8007a6e:	d103      	bne.n	8007a78 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a70:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a76:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a78:	694a      	ldr	r2, [r1, #20]
 8007a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007a80:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a82:	688b      	ldr	r3, [r1, #8]
 8007a84:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a86:	680b      	ldr	r3, [r1, #0]
 8007a88:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <TIM_Base_SetConfig+0xc0>)
 8007a8c:	4298      	cmp	r0, r3
 8007a8e:	d00f      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa8>
 8007a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a94:	4298      	cmp	r0, r3
 8007a96:	d00b      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa8>
 8007a98:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007a9c:	4298      	cmp	r0, r3
 8007a9e:	d007      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa8>
 8007aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	d003      	beq.n	8007ab0 <TIM_Base_SetConfig+0xa8>
 8007aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aac:	4298      	cmp	r0, r3
 8007aae:	d101      	bne.n	8007ab4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab0:	690b      	ldr	r3, [r1, #16]
 8007ab2:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ab8:	6903      	ldr	r3, [r0, #16]
 8007aba:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007abc:	bf42      	ittt	mi
 8007abe:	6903      	ldrmi	r3, [r0, #16]
 8007ac0:	f023 0301 	bicmi.w	r3, r3, #1
 8007ac4:	6103      	strmi	r3, [r0, #16]
  }
}
 8007ac6:	4770      	bx	lr
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40014000 	.word	0x40014000

08007ad0 <HAL_TIM_Base_Init>:
{
 8007ad0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	b350      	cbz	r0, 8007b2c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007ada:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007ade:	b91b      	cbnz	r3, 8007ae8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007ae0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007ae4:	f7fd fa2a 	bl	8004f3c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af0:	1d21      	adds	r1, r4, #4
 8007af2:	f7ff ff89 	bl	8007a08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8007afc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007b02:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007b06:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007b0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007b0e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8007b1a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007b1e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007b22:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007b26:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8007b2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	e7fc      	b.n	8007b2a <HAL_TIM_Base_Init+0x5a>

08007b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b30:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b32:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b34:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b36:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b3a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007b3e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b40:	6082      	str	r2, [r0, #8]
}
 8007b42:	bd10      	pop	{r4, pc}

08007b44 <HAL_TIM_ConfigClockSource>:
{
 8007b44:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007b46:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007b4a:	2b01      	cmp	r3, #1
{
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007b52:	f000 808c 	beq.w	8007c6e <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007b56:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007b5a:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007b5e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007b62:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b64:	4b43      	ldr	r3, [pc, #268]	@ (8007c74 <HAL_TIM_ConfigClockSource+0x130>)
 8007b66:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007b6a:	680b      	ldr	r3, [r1, #0]
 8007b6c:	2b60      	cmp	r3, #96	@ 0x60
 8007b6e:	d04f      	beq.n	8007c10 <HAL_TIM_ConfigClockSource+0xcc>
 8007b70:	d832      	bhi.n	8007bd8 <HAL_TIM_ConfigClockSource+0x94>
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d064      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0xfc>
 8007b76:	d816      	bhi.n	8007ba6 <HAL_TIM_ConfigClockSource+0x62>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d00d      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x54>
 8007b7c:	d80a      	bhi.n	8007b94 <HAL_TIM_ConfigClockSource+0x50>
 8007b7e:	f033 0110 	bics.w	r1, r3, #16
 8007b82:	d009      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007b90:	4610      	mov	r0, r2
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007b94:	2b30      	cmp	r3, #48	@ 0x30
 8007b96:	d1f5      	bne.n	8007b84 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8007b98:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007ba4:	e028      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8007ba6:	2b50      	cmp	r3, #80	@ 0x50
 8007ba8:	d1ec      	bne.n	8007b84 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8007baa:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007bac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007bae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb0:	6a03      	ldr	r3, [r0, #32]
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007bc6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007bc8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007bca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007bcc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bd2:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8007bd6:	e00f      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8007bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bdc:	d00d      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0xb6>
 8007bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be2:	d00c      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0xba>
 8007be4:	2b70      	cmp	r3, #112	@ 0x70
 8007be6:	d1cd      	bne.n	8007b84 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8007be8:	68cb      	ldr	r3, [r1, #12]
 8007bea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007bee:	f7ff ff9f 	bl	8007b30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bf2:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007bf8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	e7c2      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8007bfe:	68cb      	ldr	r3, [r1, #12]
 8007c00:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007c04:	f7ff ff94 	bl	8007b30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c08:	6883      	ldr	r3, [r0, #8]
 8007c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c0e:	e7f3      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8007c10:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c12:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8007c14:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007c16:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c18:	f022 0210 	bic.w	r2, r2, #16
 8007c1c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c24:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c2c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007c30:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007c32:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007c34:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007c3e:	e7db      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8007c40:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007c42:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007c44:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c46:	6a03      	ldr	r3, [r0, #32]
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c50:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007c5c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007c5e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007c60:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007c62:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c68:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007c6c:	e7c4      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8007c6e:	4602      	mov	r2, r0
 8007c70:	e78e      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x4c>
 8007c72:	bf00      	nop
 8007c74:	fffe0088 	.word	0xfffe0088

08007c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c78:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c7a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007c7e:	2b01      	cmp	r3, #1
{
 8007c80:	4604      	mov	r4, r0
 8007c82:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007c86:	d032      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c88:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c8a:	4d19      	ldr	r5, [pc, #100]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c90:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007c92:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007c94:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c96:	d002      	beq.n	8007c9e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8007c98:	4e16      	ldr	r6, [pc, #88]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007c9a:	42b3      	cmp	r3, r6
 8007c9c:	d103      	bne.n	8007ca6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c9e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ca0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ca4:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca6:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cac:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cae:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007cb0:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb2:	d011      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb8:	d00e      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007cba:	4a0f      	ldr	r2, [pc, #60]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007cc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d007      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007cc8:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007cd0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d104      	bne.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cda:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cde:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007ce4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ce6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007cea:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40000400 	.word	0x40000400

08007cfc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007cfc:	4770      	bx	lr

08007cfe <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007d00:	4770      	bx	lr

08007d02 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d02:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	e852 3f00 	ldrex	r3, [r2]
 8007d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007d10:	6802      	ldr	r2, [r0, #0]
 8007d12:	2900      	cmp	r1, #0
 8007d14:	d1f5      	bne.n	8007d02 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	f102 0308 	add.w	r3, r2, #8
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	f102 0c08 	add.w	ip, r2, #8
 8007d26:	e84c 3100 	strex	r1, r3, [ip]
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d1f3      	bne.n	8007d16 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d107      	bne.n	8007d44 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d38:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	e842 3100 	strex	r1, r3, [r2]
 8007d40:	2900      	cmp	r1, #0
 8007d42:	d1f7      	bne.n	8007d34 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d44:	2320      	movs	r3, #32
 8007d46:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d4e:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8007d50:	4770      	bx	lr

08007d52 <HAL_UART_Abort>:
{
 8007d52:	b510      	push	{r4, lr}
 8007d54:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d56:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	e852 3f00 	ldrex	r3, [r2]
 8007d5c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d1f5      	bne.n	8007d56 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	f103 0208 	add.w	r2, r3, #8
 8007d6e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	f103 0008 	add.w	r0, r3, #8
 8007d7a:	e840 2100 	strex	r1, r2, [r0]
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d1f3      	bne.n	8007d6a <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d82:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007d84:	2a01      	cmp	r2, #1
 8007d86:	d107      	bne.n	8007d98 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007d8c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	e843 2100 	strex	r1, r2, [r3]
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d1f7      	bne.n	8007d88 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	0612      	lsls	r2, r2, #24
 8007d9c:	d51b      	bpl.n	8007dd6 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	f103 0208 	add.w	r2, r3, #8
 8007da2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	f103 0008 	add.w	r0, r3, #8
 8007dae:	e840 2100 	strex	r1, r2, [r0]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d1f3      	bne.n	8007d9e <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8007db6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007db8:	b168      	cbz	r0, 8007dd6 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8007dba:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007dbc:	f7fe f9a9 	bl	8006112 <HAL_DMA_Abort>
 8007dc0:	b148      	cbz	r0, 8007dd6 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007dc2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007dc4:	f7fe fa0a 	bl	80061dc <HAL_DMA_GetError>
 8007dc8:	2820      	cmp	r0, #32
 8007dca:	d104      	bne.n	8007dd6 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007dd2:	2003      	movs	r0, #3
}
 8007dd4:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	6893      	ldr	r3, [r2, #8]
 8007dda:	065b      	lsls	r3, r3, #25
 8007ddc:	d516      	bpl.n	8007e0c <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	f102 0308 	add.w	r3, r2, #8
 8007de2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	f102 0008 	add.w	r0, r2, #8
 8007dee:	e840 3100 	strex	r1, r3, [r0]
 8007df2:	2900      	cmp	r1, #0
 8007df4:	d1f3      	bne.n	8007dde <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8007df6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007df8:	b140      	cbz	r0, 8007e0c <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8007dfa:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007dfc:	f7fe f989 	bl	8006112 <HAL_DMA_Abort>
 8007e00:	b120      	cbz	r0, 8007e0c <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007e02:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007e04:	f7fe f9ea 	bl	80061dc <HAL_DMA_GetError>
 8007e08:	2820      	cmp	r0, #32
 8007e0a:	d0df      	beq.n	8007dcc <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007e0c:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8007e0e:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007e10:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8007e12:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007e16:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007e1a:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e1c:	699a      	ldr	r2, [r3, #24]
 8007e1e:	f042 0208 	orr.w	r2, r2, #8
 8007e22:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8007e24:	2320      	movs	r3, #32
 8007e26:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e28:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8007e32:	e7cf      	b.n	8007dd4 <HAL_UART_Abort+0x82>

08007e34 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007e34:	4770      	bx	lr

08007e36 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8007e36:	4770      	bx	lr

08007e38 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007e38:	4770      	bx	lr

08007e3a <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e3c:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e3e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e40:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8007e44:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e46:	689c      	ldr	r4, [r3, #8]
 8007e48:	0624      	lsls	r4, r4, #24
 8007e4a:	d50e      	bpl.n	8007e6a <UART_DMAError+0x30>
 8007e4c:	2a21      	cmp	r2, #33	@ 0x21
 8007e4e:	d10c      	bne.n	8007e6a <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e5a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	e843 2400 	strex	r4, r2, [r3]
 8007e62:	2c00      	cmp	r4, #0
 8007e64:	d1f7      	bne.n	8007e56 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8007e66:	2220      	movs	r2, #32
 8007e68:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	065b      	lsls	r3, r3, #25
 8007e6e:	d506      	bpl.n	8007e7e <UART_DMAError+0x44>
 8007e70:	2922      	cmp	r1, #34	@ 0x22
 8007e72:	d104      	bne.n	8007e7e <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007e7a:	f7ff ff42 	bl	8007d02 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e7e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007e82:	f043 0310 	orr.w	r3, r3, #16
 8007e86:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e8a:	f7ff ffd5 	bl	8007e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8e:	bd10      	pop	{r4, pc}

08007e90 <HAL_UARTEx_RxEventCallback>:
}
 8007e90:	4770      	bx	lr

08007e92 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e92:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007e94:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e96:	2301      	movs	r3, #1
 8007e98:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d105      	bne.n	8007eac <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ea0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007ea4:	0849      	lsrs	r1, r1, #1
 8007ea6:	f7ff fff3 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
}
 8007eaa:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007eac:	f7ff ffc3 	bl	8007e36 <HAL_UART_RxHalfCpltCallback>
}
 8007eb0:	e7fb      	b.n	8007eaa <UART_DMARxHalfCplt+0x18>

08007eb2 <UART_DMAReceiveCplt>:
{
 8007eb2:	b508      	push	{r3, lr}
 8007eb4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d032      	beq.n	8007f24 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	e852 3f00 	ldrex	r3, [r2]
 8007eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007ed2:	6803      	ldr	r3, [r0, #0]
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d1f5      	bne.n	8007ec4 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	f103 0208 	add.w	r2, r3, #8
 8007edc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	f103 0c08 	add.w	ip, r3, #8
 8007ee8:	e84c 2100 	strex	r1, r2, [ip]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d1f3      	bne.n	8007ed8 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	f103 0208 	add.w	r2, r3, #8
 8007ef4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	f103 0c08 	add.w	ip, r3, #8
 8007f00:	e84c 2100 	strex	r1, r2, [ip]
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d1f3      	bne.n	8007ef0 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0e:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	d107      	bne.n	8007f24 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	e843 2100 	strex	r1, r2, [r3]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d1f7      	bne.n	8007f14 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f24:	2300      	movs	r3, #0
 8007f26:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f28:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d104      	bne.n	8007f38 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f2e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007f32:	f7ff ffad 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
}
 8007f36:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007f38:	f7ff ff7c 	bl	8007e34 <HAL_UART_RxCpltCallback>
}
 8007f3c:	e7fb      	b.n	8007f36 <UART_DMAReceiveCplt+0x84>
	...

08007f40 <UART_SetConfig>:
{
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f44:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f46:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f48:	6925      	ldr	r5, [r4, #16]
 8007f4a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f4c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f4e:	432a      	orrs	r2, r5
 8007f50:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f52:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f56:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f58:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f5c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8007f66:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f68:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f70:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f72:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f74:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007f78:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7e:	4a56      	ldr	r2, [pc, #344]	@ (80080d8 <UART_SetConfig+0x198>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d112      	bne.n	8007faa <UART_SetConfig+0x6a>
 8007f84:	4b55      	ldr	r3, [pc, #340]	@ (80080dc <UART_SetConfig+0x19c>)
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	f000 8091 	beq.w	80080b4 <UART_SetConfig+0x174>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d022      	beq.n	8007fdc <UART_SetConfig+0x9c>
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	f040 8092 	bne.w	80080c0 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007fa0:	f040 8085 	bne.w	80080ae <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007fa4:	f7fe fc4a 	bl	800683c <HAL_RCC_GetSysClockFreq>
        break;
 8007fa8:	e06b      	b.n	8008082 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007faa:	4a4d      	ldr	r2, [pc, #308]	@ (80080e0 <UART_SetConfig+0x1a0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d12e      	bne.n	800800e <UART_SetConfig+0xce>
 8007fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80080dc <UART_SetConfig+0x19c>)
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fbc:	d07a      	beq.n	80080b4 <UART_SetConfig+0x174>
 8007fbe:	d80a      	bhi.n	8007fd6 <UART_SetConfig+0x96>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8083 	beq.w	80080cc <UART_SetConfig+0x18c>
 8007fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fca:	d0e7      	beq.n	8007f9c <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007fcc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007fce:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007fd0:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8007fd4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007fda:	d1f7      	bne.n	8007fcc <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fdc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007fe0:	4840      	ldr	r0, [pc, #256]	@ (80080e4 <UART_SetConfig+0x1a4>)
 8007fe2:	d156      	bne.n	8008092 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fe4:	6862      	ldr	r2, [r4, #4]
 8007fe6:	0853      	lsrs	r3, r2, #1
 8007fe8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007fec:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007ff4:	f1a3 0110 	sub.w	r1, r3, #16
 8007ff8:	4291      	cmp	r1, r2
 8007ffa:	d8e7      	bhi.n	8007fcc <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffc:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8008000:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008002:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008004:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008008:	4313      	orrs	r3, r2
 800800a:	60cb      	str	r3, [r1, #12]
 800800c:	e03b      	b.n	8008086 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800e:	4a36      	ldr	r2, [pc, #216]	@ (80080e8 <UART_SetConfig+0x1a8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d10f      	bne.n	8008034 <UART_SetConfig+0xf4>
 8008014:	4b31      	ldr	r3, [pc, #196]	@ (80080dc <UART_SetConfig+0x19c>)
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800801c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008020:	d048      	beq.n	80080b4 <UART_SetConfig+0x174>
 8008022:	d804      	bhi.n	800802e <UART_SetConfig+0xee>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d051      	beq.n	80080cc <UART_SetConfig+0x18c>
 8008028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800802c:	e7cd      	b.n	8007fca <UART_SetConfig+0x8a>
 800802e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008032:	e7d2      	b.n	8007fda <UART_SetConfig+0x9a>
 8008034:	4a2d      	ldr	r2, [pc, #180]	@ (80080ec <UART_SetConfig+0x1ac>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10f      	bne.n	800805a <UART_SetConfig+0x11a>
 800803a:	4b28      	ldr	r3, [pc, #160]	@ (80080dc <UART_SetConfig+0x19c>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008042:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008046:	d035      	beq.n	80080b4 <UART_SetConfig+0x174>
 8008048:	d804      	bhi.n	8008054 <UART_SetConfig+0x114>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d03e      	beq.n	80080cc <UART_SetConfig+0x18c>
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008052:	e7ba      	b.n	8007fca <UART_SetConfig+0x8a>
 8008054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008058:	e7bf      	b.n	8007fda <UART_SetConfig+0x9a>
 800805a:	4a25      	ldr	r2, [pc, #148]	@ (80080f0 <UART_SetConfig+0x1b0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d1b5      	bne.n	8007fcc <UART_SetConfig+0x8c>
 8008060:	4b1e      	ldr	r3, [pc, #120]	@ (80080dc <UART_SetConfig+0x19c>)
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800806c:	d022      	beq.n	80080b4 <UART_SetConfig+0x174>
 800806e:	d803      	bhi.n	8008078 <UART_SetConfig+0x138>
 8008070:	b363      	cbz	r3, 80080cc <UART_SetConfig+0x18c>
 8008072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008076:	e7a8      	b.n	8007fca <UART_SetConfig+0x8a>
 8008078:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800807c:	e7ad      	b.n	8007fda <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800807e:	f7fe fcc1 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008082:	2800      	cmp	r0, #0
 8008084:	d1ae      	bne.n	8007fe4 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8008086:	2000      	movs	r0, #0
 8008088:	e7a1      	b.n	8007fce <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800808a:	f7fe fca3 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800808e:	2800      	cmp	r0, #0
 8008090:	d0f9      	beq.n	8008086 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008092:	6862      	ldr	r2, [r4, #4]
 8008094:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8008098:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80080a0:	f1a3 0110 	sub.w	r1, r3, #16
 80080a4:	4291      	cmp	r1, r2
 80080a6:	d891      	bhi.n	8007fcc <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	60d3      	str	r3, [r2, #12]
 80080ac:	e7eb      	b.n	8008086 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 80080ae:	f7fe fbc5 	bl	800683c <HAL_RCC_GetSysClockFreq>
        break;
 80080b2:	e7ec      	b.n	800808e <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080b4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80080b8:	d094      	beq.n	8007fe4 <UART_SetConfig+0xa4>
 80080ba:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80080be:	e7e8      	b.n	8008092 <UART_SetConfig+0x152>
 80080c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80080c4:	d0db      	beq.n	800807e <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c6:	f7fe fc9d 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
        break;
 80080ca:	e7e0      	b.n	800808e <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80080d0:	d1db      	bne.n	800808a <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d2:	f7fe fc7f 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
        break;
 80080d6:	e7d4      	b.n	8008082 <UART_SetConfig+0x142>
 80080d8:	40013800 	.word	0x40013800
 80080dc:	40021000 	.word	0x40021000
 80080e0:	40004400 	.word	0x40004400
 80080e4:	007a1200 	.word	0x007a1200
 80080e8:	40004800 	.word	0x40004800
 80080ec:	40004c00 	.word	0x40004c00
 80080f0:	40005000 	.word	0x40005000

080080f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80080f6:	071a      	lsls	r2, r3, #28
{
 80080f8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fa:	d506      	bpl.n	800810a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fc:	6801      	ldr	r1, [r0, #0]
 80080fe:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008100:	684a      	ldr	r2, [r1, #4]
 8008102:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008106:	4322      	orrs	r2, r4
 8008108:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800810a:	07dc      	lsls	r4, r3, #31
 800810c:	d506      	bpl.n	800811c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800810e:	6801      	ldr	r1, [r0, #0]
 8008110:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008112:	684a      	ldr	r2, [r1, #4]
 8008114:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008118:	4322      	orrs	r2, r4
 800811a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800811c:	0799      	lsls	r1, r3, #30
 800811e:	d506      	bpl.n	800812e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008120:	6801      	ldr	r1, [r0, #0]
 8008122:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008124:	684a      	ldr	r2, [r1, #4]
 8008126:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800812a:	4322      	orrs	r2, r4
 800812c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800812e:	075a      	lsls	r2, r3, #29
 8008130:	d506      	bpl.n	8008140 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008132:	6801      	ldr	r1, [r0, #0]
 8008134:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008136:	684a      	ldr	r2, [r1, #4]
 8008138:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800813c:	4322      	orrs	r2, r4
 800813e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008140:	06dc      	lsls	r4, r3, #27
 8008142:	d506      	bpl.n	8008152 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008144:	6801      	ldr	r1, [r0, #0]
 8008146:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008148:	688a      	ldr	r2, [r1, #8]
 800814a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800814e:	4322      	orrs	r2, r4
 8008150:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008152:	0699      	lsls	r1, r3, #26
 8008154:	d506      	bpl.n	8008164 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008156:	6801      	ldr	r1, [r0, #0]
 8008158:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800815a:	688a      	ldr	r2, [r1, #8]
 800815c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008160:	4322      	orrs	r2, r4
 8008162:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008164:	065a      	lsls	r2, r3, #25
 8008166:	d50f      	bpl.n	8008188 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800816c:	684a      	ldr	r2, [r1, #4]
 800816e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008172:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008174:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008178:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800817a:	d105      	bne.n	8008188 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800817c:	684a      	ldr	r2, [r1, #4]
 800817e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008180:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008184:	4322      	orrs	r2, r4
 8008186:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	d506      	bpl.n	800819a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800818c:	6802      	ldr	r2, [r0, #0]
 800818e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8008190:	6853      	ldr	r3, [r2, #4]
 8008192:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008196:	430b      	orrs	r3, r1
 8008198:	6053      	str	r3, [r2, #4]
}
 800819a:	bd10      	pop	{r4, pc}

0800819c <UART_WaitOnFlagUntilTimeout>:
{
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081a4:	4604      	mov	r4, r0
 80081a6:	460d      	mov	r5, r1
 80081a8:	4617      	mov	r7, r2
 80081aa:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	69d3      	ldr	r3, [r2, #28]
 80081b0:	ea35 0303 	bics.w	r3, r5, r3
 80081b4:	bf0c      	ite	eq
 80081b6:	2301      	moveq	r3, #1
 80081b8:	2300      	movne	r3, #0
 80081ba:	42bb      	cmp	r3, r7
 80081bc:	d001      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80081be:	2000      	movs	r0, #0
 80081c0:	e022      	b.n	8008208 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80081c2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80081c6:	d0f2      	beq.n	80081ae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c8:	f7fd f98e 	bl	80054e8 <HAL_GetTick>
 80081cc:	eba0 0008 	sub.w	r0, r0, r8
 80081d0:	4548      	cmp	r0, r9
 80081d2:	d829      	bhi.n	8008228 <UART_WaitOnFlagUntilTimeout+0x8c>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	d026      	beq.n	8008228 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	680b      	ldr	r3, [r1, #0]
 80081de:	075a      	lsls	r2, r3, #29
 80081e0:	d5e4      	bpl.n	80081ac <UART_WaitOnFlagUntilTimeout+0x10>
 80081e2:	2d80      	cmp	r5, #128	@ 0x80
 80081e4:	d0e2      	beq.n	80081ac <UART_WaitOnFlagUntilTimeout+0x10>
 80081e6:	2d40      	cmp	r5, #64	@ 0x40
 80081e8:	d0e0      	beq.n	80081ac <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081ea:	69ce      	ldr	r6, [r1, #28]
 80081ec:	f016 0608 	ands.w	r6, r6, #8
 80081f0:	d00c      	beq.n	800820c <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081f2:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80081f4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081f6:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80081f8:	f7ff fd83 	bl	8007d02 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80081fc:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081fe:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8008202:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8008206:	2001      	movs	r0, #1
}
 8008208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800820c:	69cb      	ldr	r3, [r1, #28]
 800820e:	051b      	lsls	r3, r3, #20
 8008210:	d5cc      	bpl.n	80081ac <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008212:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008216:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff fd72 	bl	8007d02 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800821e:	2320      	movs	r3, #32
 8008220:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8008224:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8008228:	2003      	movs	r0, #3
 800822a:	e7ed      	b.n	8008208 <UART_WaitOnFlagUntilTimeout+0x6c>

0800822c <HAL_UART_Transmit>:
{
 800822c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008232:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008234:	2b20      	cmp	r3, #32
{
 8008236:	4604      	mov	r4, r0
 8008238:	460e      	mov	r6, r1
 800823a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800823c:	d143      	bne.n	80082c6 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800823e:	2900      	cmp	r1, #0
 8008240:	d043      	beq.n	80082ca <HAL_UART_Transmit+0x9e>
 8008242:	2a00      	cmp	r2, #0
 8008244:	d041      	beq.n	80082ca <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008246:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	2500      	movs	r5, #0
 800824a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800824e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8008250:	f7fd f94a 	bl	80054e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008254:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008256:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800825e:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8008260:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008264:	d103      	bne.n	800826e <HAL_UART_Transmit+0x42>
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	b90b      	cbnz	r3, 800826e <HAL_UART_Transmit+0x42>
 800826a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800826c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800826e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008272:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8008276:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008278:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 800827a:	b93a      	cbnz	r2, 800828c <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800827c:	2140      	movs	r1, #64	@ 0x40
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff ff8c 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8008284:	2320      	movs	r3, #32
 8008286:	b940      	cbnz	r0, 800829a <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8008288:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800828a:	e008      	b.n	800829e <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800828c:	2200      	movs	r2, #0
 800828e:	2180      	movs	r1, #128	@ 0x80
 8008290:	4620      	mov	r0, r4
 8008292:	f7ff ff83 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 8008296:	b128      	cbz	r0, 80082a4 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8008298:	2320      	movs	r3, #32
 800829a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800829c:	2003      	movs	r0, #3
}
 800829e:	b003      	add	sp, #12
 80082a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082a4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80082a6:	b95e      	cbnz	r6, 80082c0 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082a8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082b0:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80082b2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80082b6:	3a01      	subs	r2, #1
 80082b8:	b292      	uxth	r2, r2
 80082ba:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80082be:	e7d6      	b.n	800826e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082c0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80082c4:	e7f4      	b.n	80082b0 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80082c6:	2002      	movs	r0, #2
 80082c8:	e7e9      	b.n	800829e <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80082ca:	2001      	movs	r0, #1
 80082cc:	e7e7      	b.n	800829e <HAL_UART_Transmit+0x72>

080082ce <UART_CheckIdleState>:
{
 80082ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d2:	2600      	movs	r6, #0
 80082d4:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80082d8:	f7fd f906 	bl	80054e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80082e2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e4:	d51b      	bpl.n	800831e <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4632      	mov	r2, r6
 80082ee:	4603      	mov	r3, r0
 80082f0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7ff ff51 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 80082fa:	b180      	cbz	r0, 800831e <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80082fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	e852 3f00 	ldrex	r3, [r2]
 8008302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	e842 3100 	strex	r1, r3, [r2]
 800830a:	2900      	cmp	r1, #0
 800830c:	d1f6      	bne.n	80082fc <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800830e:	2320      	movs	r3, #32
 8008310:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8008312:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8008314:	2300      	movs	r3, #0
 8008316:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 800831a:	b002      	add	sp, #8
 800831c:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	075b      	lsls	r3, r3, #29
 8008324:	d524      	bpl.n	8008370 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2200      	movs	r2, #0
 800832e:	462b      	mov	r3, r5
 8008330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008334:	4620      	mov	r0, r4
 8008336:	f7ff ff31 	bl	800819c <UART_WaitOnFlagUntilTimeout>
 800833a:	b1c8      	cbz	r0, 8008370 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800833c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	e852 3f00 	ldrex	r3, [r2]
 8008342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	2900      	cmp	r1, #0
 800834e:	d1f5      	bne.n	800833c <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	f102 0308 	add.w	r3, r2, #8
 8008354:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008358:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	f102 0008 	add.w	r0, r2, #8
 8008360:	e840 3100 	strex	r1, r3, [r0]
 8008364:	2900      	cmp	r1, #0
 8008366:	d1f3      	bne.n	8008350 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8008368:	2320      	movs	r3, #32
 800836a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800836e:	e7d0      	b.n	8008312 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8008370:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008374:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008376:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800837c:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800837e:	e7c9      	b.n	8008314 <UART_CheckIdleState+0x46>

08008380 <HAL_UART_Init>:
{
 8008380:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008382:	4604      	mov	r4, r0
 8008384:	b340      	cbz	r0, 80083d8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008386:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008388:	b91b      	cbnz	r3, 8008392 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800838a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800838e:	f7fc fdf5 	bl	8004f7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8008392:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008394:	2324      	movs	r3, #36	@ 0x24
 8008396:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8008398:	6813      	ldr	r3, [r2, #0]
 800839a:	f023 0301 	bic.w	r3, r3, #1
 800839e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083a2:	b113      	cbz	r3, 80083aa <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff fea5 	bl	80080f4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7ff fdc8 	bl	8007f40 <UART_SetConfig>
 80083b0:	2801      	cmp	r0, #1
 80083b2:	d011      	beq.n	80083d8 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80083cc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80083d4:	f7ff bf7b 	b.w	80082ce <UART_CheckIdleState>
}
 80083d8:	2001      	movs	r0, #1
 80083da:	bd10      	pop	{r4, pc}

080083dc <UART_Start_Receive_DMA>:
{
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4613      	mov	r3, r2
 80083e0:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80083e2:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e6:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80083e8:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ea:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083ee:	2022      	movs	r0, #34	@ 0x22
 80083f0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80083f4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083f6:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80083f8:	b1a0      	cbz	r0, 8008424 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083fa:	4e1c      	ldr	r6, [pc, #112]	@ (800846c <UART_Start_Receive_DMA+0x90>)
 80083fc:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083fe:	4e1c      	ldr	r6, [pc, #112]	@ (8008470 <UART_Start_Receive_DMA+0x94>)
 8008400:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008402:	4e1c      	ldr	r6, [pc, #112]	@ (8008474 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8008404:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008408:	460a      	mov	r2, r1
 800840a:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 800840e:	f7fd fe45 	bl	800609c <HAL_DMA_Start_IT>
 8008412:	b138      	cbz	r0, 8008424 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008414:	2310      	movs	r3, #16
 8008416:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800841a:	2320      	movs	r3, #32
 800841c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8008420:	2001      	movs	r0, #1
}
 8008422:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	b13a      	cbz	r2, 800843a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800842e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	e843 2100 	strex	r1, r2, [r3]
 8008436:	2900      	cmp	r1, #0
 8008438:	d1f7      	bne.n	800842a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	f103 0208 	add.w	r2, r3, #8
 800843e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008442:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	f103 0008 	add.w	r0, r3, #8
 800844a:	e840 2100 	strex	r1, r2, [r0]
 800844e:	2900      	cmp	r1, #0
 8008450:	d1f3      	bne.n	800843a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	f103 0208 	add.w	r2, r3, #8
 8008456:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	f103 0108 	add.w	r1, r3, #8
 8008462:	e841 2000 	strex	r0, r2, [r1]
 8008466:	2800      	cmp	r0, #0
 8008468:	d1f3      	bne.n	8008452 <UART_Start_Receive_DMA+0x76>
 800846a:	e7da      	b.n	8008422 <UART_Start_Receive_DMA+0x46>
 800846c:	08007eb3 	.word	0x08007eb3
 8008470:	08007e93 	.word	0x08007e93
 8008474:	08007e3b 	.word	0x08007e3b

08008478 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008478:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800847c:	2b20      	cmp	r3, #32
{
 800847e:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008480:	d112      	bne.n	80084a8 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8008482:	b1a1      	cbz	r1, 80084ae <HAL_UART_Receive_DMA+0x36>
 8008484:	b19a      	cbz	r2, 80084ae <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008486:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008488:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800848a:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	d507      	bpl.n	80084a2 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	e844 3500 	strex	r5, r3, [r4]
 800849e:	2d00      	cmp	r5, #0
 80084a0:	d1f7      	bne.n	8008492 <HAL_UART_Receive_DMA+0x1a>
}
 80084a2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084a4:	f7ff bf9a 	b.w	80083dc <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80084a8:	2002      	movs	r0, #2
}
 80084aa:	bc30      	pop	{r4, r5}
 80084ac:	4770      	bx	lr
      return HAL_ERROR;
 80084ae:	2001      	movs	r0, #1
 80084b0:	e7fb      	b.n	80084aa <HAL_UART_Receive_DMA+0x32>
	...

080084b4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084b4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80084b8:	b113      	cbz	r3, 80084c0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80084ba:	f06f 0005 	mvn.w	r0, #5
 80084be:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f8      	bne.n	80084ba <osKernelInitialize+0x6>
 80084c8:	4b07      	ldr	r3, [pc, #28]	@ (80084e8 <osKernelInitialize+0x34>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	2802      	cmp	r0, #2
 80084ce:	d106      	bne.n	80084de <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084d0:	f3ef 8311 	mrs	r3, BASEPRI
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f0      	bne.n	80084ba <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80084dc:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80084de:	2800      	cmp	r0, #0
 80084e0:	d1fa      	bne.n	80084d8 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084e6:	4770      	bx	lr
 80084e8:	20008b34 	.word	0x20008b34

080084ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084ec:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f2:	b113      	cbz	r3, 80084fa <osKernelStart+0xe>
    stat = osErrorISR;
 80084f4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80084f8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084fa:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d1f8      	bne.n	80084f4 <osKernelStart+0x8>
 8008502:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <osKernelStart+0x3c>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	2a02      	cmp	r2, #2
 8008508:	d106      	bne.n	8008518 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800850a:	f3ef 8311 	mrs	r3, BASEPRI
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <osKernelStart+0x8>
      stat = osError;
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008516:	e7ef      	b.n	80084f8 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8008518:	2a01      	cmp	r2, #1
 800851a:	d1fa      	bne.n	8008512 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 800851c:	2202      	movs	r2, #2
 800851e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008520:	f000 fee2 	bl	80092e8 <vTaskStartScheduler>
      stat = osOK;
 8008524:	4620      	mov	r0, r4
 8008526:	e7e7      	b.n	80084f8 <osKernelStart+0xc>
 8008528:	20008b34 	.word	0x20008b34

0800852c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800852c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852e:	b087      	sub	sp, #28
 8008530:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008532:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008534:	460b      	mov	r3, r1
  hTask = NULL;
 8008536:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008538:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800853c:	bb52      	cbnz	r2, 8008594 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853e:	f3ef 8210 	mrs	r2, PRIMASK
 8008542:	bb3a      	cbnz	r2, 8008594 <osThreadNew+0x68>
 8008544:	4a26      	ldr	r2, [pc, #152]	@ (80085e0 <osThreadNew+0xb4>)
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	2a02      	cmp	r2, #2
 800854a:	d102      	bne.n	8008552 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800854c:	f3ef 8211 	mrs	r2, BASEPRI
 8008550:	bb02      	cbnz	r2, 8008594 <osThreadNew+0x68>
 8008552:	b1f8      	cbz	r0, 8008594 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8008554:	2200      	movs	r2, #0
 8008556:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800855a:	2c00      	cmp	r4, #0
 800855c:	d030      	beq.n	80085c0 <osThreadNew+0x94>
      if (attr->name != NULL) {
 800855e:	6821      	ldr	r1, [r4, #0]
 8008560:	b909      	cbnz	r1, 8008566 <osThreadNew+0x3a>
    name  = &empty;
 8008562:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008566:	69a5      	ldr	r5, [r4, #24]
 8008568:	2d00      	cmp	r5, #0
 800856a:	bf08      	it	eq
 800856c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800856e:	1e6a      	subs	r2, r5, #1
 8008570:	2a37      	cmp	r2, #55	@ 0x37
 8008572:	46ac      	mov	ip, r5
 8008574:	d82a      	bhi.n	80085cc <osThreadNew+0xa0>
 8008576:	6862      	ldr	r2, [r4, #4]
 8008578:	07d2      	lsls	r2, r2, #31
 800857a:	d427      	bmi.n	80085cc <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800857c:	6966      	ldr	r6, [r4, #20]
 800857e:	b166      	cbz	r6, 800859a <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008580:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008582:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008586:	b157      	cbz	r7, 800859e <osThreadNew+0x72>
 8008588:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 800858c:	d902      	bls.n	8008594 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800858e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008590:	b104      	cbz	r4, 8008594 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008592:	b9ee      	cbnz	r6, 80085d0 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008594:	9805      	ldr	r0, [sp, #20]
}
 8008596:	b007      	add	sp, #28
 8008598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800859a:	2240      	movs	r2, #64	@ 0x40
 800859c:	e7f1      	b.n	8008582 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800859e:	f1be 0f00 	cmp.w	lr, #0
 80085a2:	d1f7      	bne.n	8008594 <osThreadNew+0x68>
      if (mem == 0) {
 80085a4:	6924      	ldr	r4, [r4, #16]
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d1f4      	bne.n	8008594 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80085aa:	ac05      	add	r4, sp, #20
 80085ac:	e9cd c400 	strd	ip, r4, [sp]
 80085b0:	b292      	uxth	r2, r2
 80085b2:	f000 fe6b 	bl	800928c <xTaskCreate>
 80085b6:	2801      	cmp	r0, #1
          hTask = NULL;
 80085b8:	bf1c      	itt	ne
 80085ba:	2300      	movne	r3, #0
 80085bc:	9305      	strne	r3, [sp, #20]
 80085be:	e7e9      	b.n	8008594 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 80085c0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80085c4:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 80085c6:	f10d 0113 	add.w	r1, sp, #19
 80085ca:	e7ee      	b.n	80085aa <osThreadNew+0x7e>
        return (NULL);
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7e2      	b.n	8008596 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085d0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80085d4:	9500      	str	r5, [sp, #0]
 80085d6:	f000 fe22 	bl	800921e <xTaskCreateStatic>
 80085da:	9005      	str	r0, [sp, #20]
 80085dc:	e7da      	b.n	8008594 <osThreadNew+0x68>
 80085de:	bf00      	nop
 80085e0:	20008b34 	.word	0x20008b34

080085e4 <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e4:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80085e8:	b963      	cbnz	r3, 8008604 <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ea:	f3ef 8310 	mrs	r3, PRIMASK
 80085ee:	b94b      	cbnz	r3, 8008604 <osThreadGetStackSpace+0x20>
 80085f0:	4b05      	ldr	r3, [pc, #20]	@ (8008608 <osThreadGetStackSpace+0x24>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d102      	bne.n	80085fe <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085f8:	f3ef 8311 	mrs	r3, BASEPRI
 80085fc:	b913      	cbnz	r3, 8008604 <osThreadGetStackSpace+0x20>
 80085fe:	b108      	cbz	r0, 8008604 <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8008600:	f001 b8f4 	b.w	80097ec <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 8008604:	2000      	movs	r0, #0
 8008606:	4770      	bx	lr
 8008608:	20008b34 	.word	0x20008b34

0800860c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800860c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800860e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008612:	b113      	cbz	r3, 800861a <osDelay+0xe>
    stat = osErrorISR;
 8008614:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008618:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f8      	bne.n	8008614 <osDelay+0x8>
 8008622:	4b06      	ldr	r3, [pc, #24]	@ (800863c <osDelay+0x30>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800862a:	f3ef 8311 	mrs	r3, BASEPRI
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f0      	bne.n	8008614 <osDelay+0x8>
    if (ticks != 0U) {
 8008632:	b108      	cbz	r0, 8008638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008634:	f000 ffb6 	bl	80095a4 <vTaskDelay>
    stat = osOK;
 8008638:	2000      	movs	r0, #0
  return (stat);
 800863a:	e7ed      	b.n	8008618 <osDelay+0xc>
 800863c:	20008b34 	.word	0x20008b34

08008640 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008642:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008644:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008648:	b11b      	cbz	r3, 8008652 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800864a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800864c:	4628      	mov	r0, r5
 800864e:	b002      	add	sp, #8
 8008650:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008652:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1f7      	bne.n	800864a <osMessageQueueNew+0xa>
 800865a:	4b1c      	ldr	r3, [pc, #112]	@ (80086cc <osMessageQueueNew+0x8c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d103      	bne.n	800866a <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008662:	f3ef 8311 	mrs	r3, BASEPRI
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1ef      	bne.n	800864a <osMessageQueueNew+0xa>
 800866a:	2800      	cmp	r0, #0
 800866c:	d0ed      	beq.n	800864a <osMessageQueueNew+0xa>
 800866e:	2900      	cmp	r1, #0
 8008670:	d0eb      	beq.n	800864a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8008672:	b1ec      	cbz	r4, 80086b0 <osMessageQueueNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008674:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8008678:	b193      	cbz	r3, 80086a0 <osMessageQueueNew+0x60>
 800867a:	2a4f      	cmp	r2, #79	@ 0x4f
 800867c:	d9e5      	bls.n	800864a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800867e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008680:	2a00      	cmp	r2, #0
 8008682:	d0e2      	beq.n	800864a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008684:	6966      	ldr	r6, [r4, #20]
 8008686:	fb01 f500 	mul.w	r5, r1, r0
 800868a:	42ae      	cmp	r6, r5
 800868c:	d3dd      	bcc.n	800864a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800868e:	2500      	movs	r5, #0
 8008690:	9500      	str	r5, [sp, #0]
 8008692:	f000 f9c6 	bl	8008a22 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008696:	4605      	mov	r5, r0
 8008698:	2800      	cmp	r0, #0
 800869a:	d0d6      	beq.n	800864a <osMessageQueueNew+0xa>
        name = attr->name;
 800869c:	6824      	ldr	r4, [r4, #0]
 800869e:	e00f      	b.n	80086c0 <osMessageQueueNew+0x80>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	d1d2      	bne.n	800864a <osMessageQueueNew+0xa>
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1cf      	bne.n	800864a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1cc      	bne.n	800864a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80086b0:	2200      	movs	r2, #0
 80086b2:	f000 fa03 	bl	8008abc <xQueueGenericCreate>
    if (hQueue != NULL) {
 80086b6:	4605      	mov	r5, r0
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0c6      	beq.n	800864a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80086bc:	2c00      	cmp	r4, #0
 80086be:	d1ed      	bne.n	800869c <osMessageQueueNew+0x5c>
      vQueueAddToRegistry (hQueue, name);
 80086c0:	4621      	mov	r1, r4
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 fc1a 	bl	8008efc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80086c8:	e7c0      	b.n	800864c <osMessageQueueNew+0xc>
 80086ca:	bf00      	nop
 80086cc:	20008b34 	.word	0x20008b34

080086d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80086d0:	b513      	push	{r0, r1, r4, lr}
 80086d2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80086d8:	b123      	cbz	r3, 80086e4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086da:	b9e8      	cbnz	r0, 8008718 <osMessageQueuePut+0x48>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 80086dc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80086e0:	b002      	add	sp, #8
 80086e2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086e4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f6      	bne.n	80086da <osMessageQueuePut+0xa>
 80086ec:	4b19      	ldr	r3, [pc, #100]	@ (8008754 <osMessageQueuePut+0x84>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d103      	bne.n	80086fc <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086f4:	f3ef 8311 	mrs	r3, BASEPRI
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1ee      	bne.n	80086da <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d0ed      	beq.n	80086dc <osMessageQueuePut+0xc>
 8008700:	2900      	cmp	r1, #0
 8008702:	d0eb      	beq.n	80086dc <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008704:	2300      	movs	r3, #0
 8008706:	4622      	mov	r2, r4
 8008708:	f000 f9ff 	bl	8008b0a <xQueueGenericSend>
 800870c:	2801      	cmp	r0, #1
 800870e:	d013      	beq.n	8008738 <osMessageQueuePut+0x68>
        if (timeout != 0U) {
 8008710:	b16c      	cbz	r4, 800872e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8008712:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008716:	e7e3      	b.n	80086e0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008718:	2900      	cmp	r1, #0
 800871a:	d0df      	beq.n	80086dc <osMessageQueuePut+0xc>
 800871c:	2c00      	cmp	r4, #0
 800871e:	d1dd      	bne.n	80086dc <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008720:	4623      	mov	r3, r4
 8008722:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008724:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008726:	f000 faa2 	bl	8008c6e <xQueueGenericSendFromISR>
 800872a:	2801      	cmp	r0, #1
 800872c:	d002      	beq.n	8008734 <osMessageQueuePut+0x64>
        stat = osErrorResource;
 800872e:	f06f 0002 	mvn.w	r0, #2
 8008732:	e7d5      	b.n	80086e0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	b90b      	cbnz	r3, 800873c <osMessageQueuePut+0x6c>
  stat = osOK;
 8008738:	2000      	movs	r0, #0
 800873a:	e7d1      	b.n	80086e0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 800873c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008744:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	e7f2      	b.n	8008738 <osMessageQueuePut+0x68>
 8008752:	bf00      	nop
 8008754:	20008b34 	.word	0x20008b34

08008758 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008758:	b513      	push	{r0, r1, r4, lr}
 800875a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800875c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008760:	b123      	cbz	r3, 800876c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008762:	b9e0      	cbnz	r0, 800879e <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8008764:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8008768:	b002      	add	sp, #8
 800876a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800876c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f6      	bne.n	8008762 <osMessageQueueGet+0xa>
 8008774:	4b18      	ldr	r3, [pc, #96]	@ (80087d8 <osMessageQueueGet+0x80>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b02      	cmp	r3, #2
 800877a:	d103      	bne.n	8008784 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800877c:	f3ef 8311 	mrs	r3, BASEPRI
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ee      	bne.n	8008762 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008784:	2800      	cmp	r0, #0
 8008786:	d0ed      	beq.n	8008764 <osMessageQueueGet+0xc>
 8008788:	2900      	cmp	r1, #0
 800878a:	d0eb      	beq.n	8008764 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800878c:	4622      	mov	r2, r4
 800878e:	f000 faca 	bl	8008d26 <xQueueReceive>
 8008792:	2801      	cmp	r0, #1
 8008794:	d012      	beq.n	80087bc <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 8008796:	b164      	cbz	r4, 80087b2 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8008798:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800879c:	e7e4      	b.n	8008768 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800879e:	2900      	cmp	r1, #0
 80087a0:	d0e0      	beq.n	8008764 <osMessageQueueGet+0xc>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	d1de      	bne.n	8008764 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80087a6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80087a8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80087aa:	f000 fb5a 	bl	8008e62 <xQueueReceiveFromISR>
 80087ae:	2801      	cmp	r0, #1
 80087b0:	d002      	beq.n	80087b8 <osMessageQueueGet+0x60>
        stat = osErrorResource;
 80087b2:	f06f 0002 	mvn.w	r0, #2
 80087b6:	e7d7      	b.n	8008768 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	b90b      	cbnz	r3, 80087c0 <osMessageQueueGet+0x68>
  stat = osOK;
 80087bc:	2000      	movs	r0, #0
 80087be:	e7d3      	b.n	8008768 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80087c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	e7f2      	b.n	80087bc <osMessageQueueGet+0x64>
 80087d6:	bf00      	nop
 80087d8:	20008b34 	.word	0x20008b34

080087dc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087dc:	4b03      	ldr	r3, [pc, #12]	@ (80087ec <vApplicationGetIdleTaskMemory+0x10>)
 80087de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087e0:	4b03      	ldr	r3, [pc, #12]	@ (80087f0 <vApplicationGetIdleTaskMemory+0x14>)
 80087e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087e4:	2340      	movs	r3, #64	@ 0x40
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20008ad8 	.word	0x20008ad8
 80087f0:	200089d8 	.word	0x200089d8

080087f4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087f4:	4b03      	ldr	r3, [pc, #12]	@ (8008804 <vApplicationGetTimerTaskMemory+0x10>)
 80087f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087f8:	4b03      	ldr	r3, [pc, #12]	@ (8008808 <vApplicationGetTimerTaskMemory+0x14>)
 80087fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087fc:	2380      	movs	r3, #128	@ 0x80
 80087fe:	6013      	str	r3, [r2, #0]
}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	2000897c 	.word	0x2000897c
 8008808:	2000877c 	.word	0x2000877c

0800880c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800880c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008810:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008814:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008818:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800881a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008820:	4770      	bx	lr

08008822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008826:	4770      	bx	lr

08008828 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008828:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800882a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008830:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008832:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008834:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008836:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008838:	3301      	adds	r3, #1
 800883a:	6003      	str	r3, [r0, #0]
}
 800883c:	4770      	bx	lr

0800883e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800883e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008840:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008842:	1c63      	adds	r3, r4, #1
 8008844:	d10a      	bne.n	800885c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008846:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800884c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800884e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008850:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008852:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008854:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008856:	3301      	adds	r3, #1
 8008858:	6003      	str	r3, [r0, #0]
}
 800885a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800885c:	f100 0208 	add.w	r2, r0, #8
 8008860:	4613      	mov	r3, r2
 8008862:	6852      	ldr	r2, [r2, #4]
 8008864:	6815      	ldr	r5, [r2, #0]
 8008866:	42a5      	cmp	r5, r4
 8008868:	d9fa      	bls.n	8008860 <vListInsert+0x22>
 800886a:	e7ed      	b.n	8008848 <vListInsert+0xa>

0800886c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800886c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008870:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008872:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008874:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008876:	6859      	ldr	r1, [r3, #4]
 8008878:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800887a:	bf08      	it	eq
 800887c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800887e:	2200      	movs	r2, #0
 8008880:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	3a01      	subs	r2, #1
 8008886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008888:	6818      	ldr	r0, [r3, #0]
}
 800888a:	4770      	bx	lr

0800888c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800888c:	b510      	push	{r4, lr}
 800888e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008890:	f001 fa50 	bl	8009d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008894:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008896:	f001 fa6d 	bl	8009d74 <vPortExitCritical>

	return xReturn;
}
 800889a:	fab4 f084 	clz	r0, r4
 800889e:	0940      	lsrs	r0, r0, #5
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <prvCopyDataToQueue>:
{
 80088a2:	b570      	push	{r4, r5, r6, lr}
 80088a4:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088a6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80088aa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ac:	b942      	cbnz	r2, 80088c0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088ae:	6806      	ldr	r6, [r0, #0]
 80088b0:	b99e      	cbnz	r6, 80088da <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80088b2:	6840      	ldr	r0, [r0, #4]
 80088b4:	f000 ffba 	bl	800982c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80088b8:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088ba:	3501      	adds	r5, #1
 80088bc:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80088be:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80088c0:	b96e      	cbnz	r6, 80088de <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088c2:	6880      	ldr	r0, [r0, #8]
 80088c4:	f004 fa46 	bl	800cd54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088c8:	68a3      	ldr	r3, [r4, #8]
 80088ca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80088cc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ce:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088d0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088d2:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d4:	bf24      	itt	cs
 80088d6:	6823      	ldrcs	r3, [r4, #0]
 80088d8:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80088da:	2000      	movs	r0, #0
 80088dc:	e7ed      	b.n	80088ba <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088de:	68c0      	ldr	r0, [r0, #12]
 80088e0:	f004 fa38 	bl	800cd54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088e4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	4251      	negs	r1, r2
 80088ea:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ec:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088ee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088f0:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80088f2:	bf3e      	ittt	cc
 80088f4:	6863      	ldrcc	r3, [r4, #4]
 80088f6:	185b      	addcc	r3, r3, r1
 80088f8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80088fa:	2e02      	cmp	r6, #2
 80088fc:	d1ed      	bne.n	80088da <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088fe:	b10d      	cbz	r5, 8008904 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008900:	3d01      	subs	r5, #1
 8008902:	e7ea      	b.n	80088da <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008904:	4628      	mov	r0, r5
 8008906:	e7d8      	b.n	80088ba <prvCopyDataToQueue+0x18>

08008908 <prvCopyDataFromQueue>:
{
 8008908:	4603      	mov	r3, r0
 800890a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800890c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800890e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008910:	b16a      	cbz	r2, 800892e <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008912:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008914:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008916:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008918:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800891a:	bf28      	it	cs
 800891c:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800891e:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008920:	bf28      	it	cs
 8008922:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008924:	68d9      	ldr	r1, [r3, #12]
}
 8008926:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800892a:	f004 ba13 	b.w	800cd54 <memcpy>
}
 800892e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008932:	4770      	bx	lr

08008934 <prvUnlockQueue>:
{
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008938:	f001 f9fc 	bl	8009d34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800893c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008940:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008944:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008946:	2d00      	cmp	r5, #0
 8008948:	dc14      	bgt.n	8008974 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800894a:	23ff      	movs	r3, #255	@ 0xff
 800894c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8008950:	f001 fa10 	bl	8009d74 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008954:	f001 f9ee 	bl	8009d34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008958:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800895c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008960:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008962:	2d00      	cmp	r5, #0
 8008964:	dc12      	bgt.n	800898c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008966:	23ff      	movs	r3, #255	@ 0xff
 8008968:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800896c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008970:	f001 ba00 	b.w	8009d74 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008974:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0e7      	beq.n	800894a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800897a:	4630      	mov	r0, r6
 800897c:	f000 fea8 	bl	80096d0 <xTaskRemoveFromEventList>
 8008980:	b108      	cbz	r0, 8008986 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008982:	f000 ff2d 	bl	80097e0 <vTaskMissedYield>
			--cTxLock;
 8008986:	3d01      	subs	r5, #1
 8008988:	b26d      	sxtb	r5, r5
 800898a:	e7dc      	b.n	8008946 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0e9      	beq.n	8008966 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008992:	4630      	mov	r0, r6
 8008994:	f000 fe9c 	bl	80096d0 <xTaskRemoveFromEventList>
 8008998:	b108      	cbz	r0, 800899e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800899a:	f000 ff21 	bl	80097e0 <vTaskMissedYield>
				--cRxLock;
 800899e:	3d01      	subs	r5, #1
 80089a0:	b26d      	sxtb	r5, r5
 80089a2:	e7de      	b.n	8008962 <prvUnlockQueue+0x2e>

080089a4 <xQueueGenericReset>:
{
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80089a8:	4604      	mov	r4, r0
 80089aa:	b940      	cbnz	r0, 80089be <xQueueGenericReset+0x1a>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	e7fe      	b.n	80089bc <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80089be:	f001 f9b9 	bl	8009d34 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089c2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80089c6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089c8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089ca:	434b      	muls	r3, r1
 80089cc:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80089ce:	1a5b      	subs	r3, r3, r1
 80089d0:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089d2:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 80089d4:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089d6:	2000      	movs	r0, #0
 80089d8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80089da:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089e0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80089e4:	b9a5      	cbnz	r5, 8008a10 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	b173      	cbz	r3, 8008a08 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ea:	f104 0010 	add.w	r0, r4, #16
 80089ee:	f000 fe6f 	bl	80096d0 <xTaskRemoveFromEventList>
 80089f2:	b148      	cbz	r0, 8008a08 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80089f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008a08:	f001 f9b4 	bl	8009d74 <vPortExitCritical>
}
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a10:	f104 0010 	add.w	r0, r4, #16
 8008a14:	f7ff fefa 	bl	800880c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008a1c:	f7ff fef6 	bl	800880c <vListInitialise>
 8008a20:	e7f2      	b.n	8008a08 <xQueueGenericReset+0x64>

08008a22 <xQueueGenericCreateStatic>:
	{
 8008a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a24:	460d      	mov	r5, r1
 8008a26:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a28:	b940      	cbnz	r0, 8008a3c <xQueueGenericCreateStatic+0x1a>
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	e7fe      	b.n	8008a3a <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008a3c:	b943      	cbnz	r3, 8008a50 <xQueueGenericCreateStatic+0x2e>
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	e7fe      	b.n	8008a4e <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a50:	b14a      	cbz	r2, 8008a66 <xQueueGenericCreateStatic+0x44>
 8008a52:	b991      	cbnz	r1, 8008a7a <xQueueGenericCreateStatic+0x58>
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	e7fe      	b.n	8008a64 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a66:	b141      	cbz	r1, 8008a7a <xQueueGenericCreateStatic+0x58>
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	e7fe      	b.n	8008a78 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a7a:	2350      	movs	r3, #80	@ 0x50
 8008a7c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	2b50      	cmp	r3, #80	@ 0x50
 8008a82:	d008      	beq.n	8008a96 <xQueueGenericCreateStatic+0x74>
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	e7fe      	b.n	8008a94 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a96:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	bf08      	it	eq
 8008a9c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008a9e:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008aa2:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008aa6:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7ff ff7b 	bl	80089a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008aae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008ab2:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	b003      	add	sp, #12
 8008aba:	bd30      	pop	{r4, r5, pc}

08008abc <xQueueGenericCreate>:
	{
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	460d      	mov	r5, r1
 8008ac0:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	b940      	cbnz	r0, 8008ad8 <xQueueGenericCreate+0x1c>
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	e7fe      	b.n	8008ad6 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008ada:	3050      	adds	r0, #80	@ 0x50
 8008adc:	f001 fa90 	bl	800a000 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	b170      	cbz	r0, 8008b02 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008aea:	b165      	cbz	r5, 8008b06 <xQueueGenericCreate+0x4a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008aec:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8008af0:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8008af4:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008af6:	2101      	movs	r1, #1
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7ff ff53 	bl	80089a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008afe:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8008b02:	4620      	mov	r0, r4
 8008b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b06:	4603      	mov	r3, r0
 8008b08:	e7f2      	b.n	8008af0 <xQueueGenericCreate+0x34>

08008b0a <xQueueGenericSend>:
{
 8008b0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008b0e:	460f      	mov	r7, r1
 8008b10:	9201      	str	r2, [sp, #4]
 8008b12:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008b14:	4604      	mov	r4, r0
 8008b16:	b940      	cbnz	r0, 8008b2a <xQueueGenericSend+0x20>
 8008b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	e7fe      	b.n	8008b28 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b2a:	b951      	cbnz	r1, 8008b42 <xQueueGenericSend+0x38>
 8008b2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008b2e:	b143      	cbz	r3, 8008b42 <xQueueGenericSend+0x38>
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	e7fe      	b.n	8008b40 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b42:	2e02      	cmp	r6, #2
 8008b44:	d10b      	bne.n	8008b5e <xQueueGenericSend+0x54>
 8008b46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d008      	beq.n	8008b5e <xQueueGenericSend+0x54>
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	e7fe      	b.n	8008b5c <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5e:	f000 fe55 	bl	800980c <xTaskGetSchedulerState>
 8008b62:	4605      	mov	r5, r0
 8008b64:	b330      	cbz	r0, 8008bb4 <xQueueGenericSend+0xaa>
 8008b66:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008b68:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008b6c:	f001 f8e2 	bl	8009d34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008b72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d301      	bcc.n	8008b7c <xQueueGenericSend+0x72>
 8008b78:	2e02      	cmp	r6, #2
 8008b7a:	d127      	bne.n	8008bcc <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7ff fe8e 	bl	80088a2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b88:	b11b      	cbz	r3, 8008b92 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008b8e:	f000 fd9f 	bl	80096d0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008b92:	b148      	cbz	r0, 8008ba8 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008b94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008ba8:	f001 f8e4 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 8008bac:	2001      	movs	r0, #1
}
 8008bae:	b004      	add	sp, #16
 8008bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0d6      	beq.n	8008b68 <xQueueGenericSend+0x5e>
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	e7fe      	b.n	8008bca <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	b91b      	cbnz	r3, 8008bd8 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8008bd0:	f001 f8d0 	bl	8009d74 <vPortExitCritical>
					return errQUEUE_FULL;
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e7ea      	b.n	8008bae <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8008bd8:	b915      	cbnz	r5, 8008be0 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bda:	a802      	add	r0, sp, #8
 8008bdc:	f000 fdb8 	bl	8009750 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008be0:	f001 f8c8 	bl	8009d74 <vPortExitCritical>
		vTaskSuspendAll();
 8008be4:	f000 fbc6 	bl	8009374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008be8:	f001 f8a4 	bl	8009d34 <vPortEnterCritical>
 8008bec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008bf0:	2bff      	cmp	r3, #255	@ 0xff
 8008bf2:	bf08      	it	eq
 8008bf4:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008bf8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008bfc:	2bff      	cmp	r3, #255	@ 0xff
 8008bfe:	bf08      	it	eq
 8008c00:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008c04:	f001 f8b6 	bl	8009d74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c08:	a901      	add	r1, sp, #4
 8008c0a:	a802      	add	r0, sp, #8
 8008c0c:	f000 fdac 	bl	8009768 <xTaskCheckForTimeOut>
 8008c10:	bb38      	cbnz	r0, 8008c62 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c12:	f001 f88f 	bl	8009d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008c18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d10e      	bne.n	8008c3c <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008c1e:	f001 f8a9 	bl	8009d74 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c22:	9901      	ldr	r1, [sp, #4]
 8008c24:	f104 0010 	add.w	r0, r4, #16
 8008c28:	f000 fd1a 	bl	8009660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff fe81 	bl	8008934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c32:	f000 fc43 	bl	80094bc <xTaskResumeAll>
 8008c36:	b148      	cbz	r0, 8008c4c <xQueueGenericSend+0x142>
 8008c38:	2501      	movs	r5, #1
 8008c3a:	e797      	b.n	8008b6c <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8008c3c:	f001 f89a 	bl	8009d74 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008c40:	4620      	mov	r0, r4
 8008c42:	f7ff fe77 	bl	8008934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c46:	f000 fc39 	bl	80094bc <xTaskResumeAll>
 8008c4a:	e7f5      	b.n	8008c38 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8008c4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	e7ea      	b.n	8008c38 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff fe66 	bl	8008934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c68:	f000 fc28 	bl	80094bc <xTaskResumeAll>
			return errQUEUE_FULL;
 8008c6c:	e7b2      	b.n	8008bd4 <xQueueGenericSend+0xca>

08008c6e <xQueueGenericSendFromISR>:
{
 8008c6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c72:	4689      	mov	r9, r1
 8008c74:	4617      	mov	r7, r2
 8008c76:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008c78:	4604      	mov	r4, r0
 8008c7a:	b940      	cbnz	r0, 8008c8e <xQueueGenericSendFromISR+0x20>
 8008c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	e7fe      	b.n	8008c8c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c8e:	b951      	cbnz	r1, 8008ca6 <xQueueGenericSendFromISR+0x38>
 8008c90:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008c92:	b143      	cbz	r3, 8008ca6 <xQueueGenericSendFromISR+0x38>
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	e7fe      	b.n	8008ca4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ca6:	2e02      	cmp	r6, #2
 8008ca8:	d10b      	bne.n	8008cc2 <xQueueGenericSendFromISR+0x54>
 8008caa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d008      	beq.n	8008cc2 <xQueueGenericSendFromISR+0x54>
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cc2:	f001 f949 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 8008cc6:	f3ef 8811 	mrs	r8, BASEPRI
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008cdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d301      	bcc.n	8008ce6 <xQueueGenericSendFromISR+0x78>
 8008ce2:	2e02      	cmp	r6, #2
 8008ce4:	d11d      	bne.n	8008d22 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ce6:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cea:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f7ff fdd6 	bl	80088a2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008cf6:	1c6b      	adds	r3, r5, #1
 8008cf8:	d10e      	bne.n	8008d18 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008cfc:	b13b      	cbz	r3, 8008d0e <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cfe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008d02:	f000 fce5 	bl	80096d0 <xTaskRemoveFromEventList>
 8008d06:	b110      	cbz	r0, 8008d0e <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008d08:	b10f      	cbz	r7, 8008d0e <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8008d0e:	2001      	movs	r0, #1
	__asm volatile
 8008d10:	f388 8811 	msr	BASEPRI, r8
}
 8008d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d18:	3501      	adds	r5, #1
 8008d1a:	b26d      	sxtb	r5, r5
 8008d1c:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008d20:	e7f5      	b.n	8008d0e <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8008d22:	2000      	movs	r0, #0
 8008d24:	e7f4      	b.n	8008d10 <xQueueGenericSendFromISR+0xa2>

08008d26 <xQueueReceive>:
{
 8008d26:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008d2a:	460e      	mov	r6, r1
 8008d2c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008d2e:	4604      	mov	r4, r0
 8008d30:	b940      	cbnz	r0, 8008d44 <xQueueReceive+0x1e>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	e7fe      	b.n	8008d42 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d44:	b951      	cbnz	r1, 8008d5c <xQueueReceive+0x36>
 8008d46:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008d48:	b143      	cbz	r3, 8008d5c <xQueueReceive+0x36>
 8008d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	e7fe      	b.n	8008d5a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d5c:	f000 fd56 	bl	800980c <xTaskGetSchedulerState>
 8008d60:	4605      	mov	r5, r0
 8008d62:	b318      	cbz	r0, 8008dac <xQueueReceive+0x86>
 8008d64:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008d66:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008d6a:	f000 ffe3 	bl	8009d34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d6e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d70:	b347      	cbz	r7, 8008dc4 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d72:	4631      	mov	r1, r6
 8008d74:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d76:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d78:	f7ff fdc6 	bl	8008908 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d7c:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	b173      	cbz	r3, 8008da0 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d82:	f104 0010 	add.w	r0, r4, #16
 8008d86:	f000 fca3 	bl	80096d0 <xTaskRemoveFromEventList>
 8008d8a:	b148      	cbz	r0, 8008da0 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008d8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008da0:	f000 ffe8 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 8008da4:	2001      	movs	r0, #1
}
 8008da6:	b004      	add	sp, #16
 8008da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0d9      	beq.n	8008d66 <xQueueReceive+0x40>
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	e7fe      	b.n	8008dc2 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	b91b      	cbnz	r3, 8008dd0 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008dc8:	f000 ffd4 	bl	8009d74 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e7ea      	b.n	8008da6 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008dd0:	b915      	cbnz	r5, 8008dd8 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd2:	a802      	add	r0, sp, #8
 8008dd4:	f000 fcbc 	bl	8009750 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008dd8:	f000 ffcc 	bl	8009d74 <vPortExitCritical>
		vTaskSuspendAll();
 8008ddc:	f000 faca 	bl	8009374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008de0:	f000 ffa8 	bl	8009d34 <vPortEnterCritical>
 8008de4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008de8:	2bff      	cmp	r3, #255	@ 0xff
 8008dea:	bf08      	it	eq
 8008dec:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008df0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008df4:	2bff      	cmp	r3, #255	@ 0xff
 8008df6:	bf08      	it	eq
 8008df8:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008dfc:	f000 ffba 	bl	8009d74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e00:	a901      	add	r1, sp, #4
 8008e02:	a802      	add	r0, sp, #8
 8008e04:	f000 fcb0 	bl	8009768 <xTaskCheckForTimeOut>
 8008e08:	bb00      	cbnz	r0, 8008e4c <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f7ff fd3e 	bl	800888c <prvIsQueueEmpty>
 8008e10:	b1b0      	cbz	r0, 8008e40 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e12:	9901      	ldr	r1, [sp, #4]
 8008e14:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008e18:	f000 fc22 	bl	8009660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7ff fd89 	bl	8008934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e22:	f000 fb4b 	bl	80094bc <xTaskResumeAll>
 8008e26:	b948      	cbnz	r0, 8008e3c <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008e28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	2501      	movs	r5, #1
 8008e3e:	e794      	b.n	8008d6a <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff fd77 	bl	8008934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e46:	f000 fb39 	bl	80094bc <xTaskResumeAll>
 8008e4a:	e7f7      	b.n	8008e3c <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f7ff fd71 	bl	8008934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e52:	f000 fb33 	bl	80094bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e56:	4620      	mov	r0, r4
 8008e58:	f7ff fd18 	bl	800888c <prvIsQueueEmpty>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d0ed      	beq.n	8008e3c <xQueueReceive+0x116>
 8008e60:	e7b4      	b.n	8008dcc <xQueueReceive+0xa6>

08008e62 <xQueueReceiveFromISR>:
{
 8008e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e66:	4689      	mov	r9, r1
 8008e68:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	b940      	cbnz	r0, 8008e80 <xQueueReceiveFromISR+0x1e>
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	e7fe      	b.n	8008e7e <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e80:	b951      	cbnz	r1, 8008e98 <xQueueReceiveFromISR+0x36>
 8008e82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008e84:	b143      	cbz	r3, 8008e98 <xQueueReceiveFromISR+0x36>
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	e7fe      	b.n	8008e96 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e98:	f001 f85e 	bl	8009f58 <vPortValidateInterruptPriority>
	__asm volatile
 8008e9c:	f3ef 8711 	mrs	r7, BASEPRI
 8008ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eb0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eb2:	b30d      	cbz	r5, 8008ef8 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008eb4:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eb8:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8008eba:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7ff fd23 	bl	8008908 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ec2:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008ec4:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ec6:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008ec8:	d111      	bne.n	8008eee <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	b153      	cbz	r3, 8008ee4 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ece:	f104 0010 	add.w	r0, r4, #16
 8008ed2:	f000 fbfd 	bl	80096d0 <xTaskRemoveFromEventList>
 8008ed6:	b128      	cbz	r0, 8008ee4 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008ed8:	f1b8 0f00 	cmp.w	r8, #0
 8008edc:	d002      	beq.n	8008ee4 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008ee4:	2001      	movs	r0, #1
	__asm volatile
 8008ee6:	f387 8811 	msr	BASEPRI, r7
}
 8008eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008eee:	3601      	adds	r6, #1
 8008ef0:	b276      	sxtb	r6, r6
 8008ef2:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8008ef6:	e7f5      	b.n	8008ee4 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e7f4      	b.n	8008ee6 <xQueueReceiveFromISR+0x84>

08008efc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008efc:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008efe:	4a07      	ldr	r2, [pc, #28]	@ (8008f1c <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f00:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f02:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8008f06:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008f0a:	b91d      	cbnz	r5, 8008f14 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f10:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f12:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f14:	3301      	adds	r3, #1
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d1f3      	bne.n	8008f02 <vQueueAddToRegistry+0x6>
 8008f1a:	e7fa      	b.n	8008f12 <vQueueAddToRegistry+0x16>
 8008f1c:	20008b38 	.word	0x20008b38

08008f20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4604      	mov	r4, r0
 8008f24:	460d      	mov	r5, r1
 8008f26:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f28:	f000 ff04 	bl	8009d34 <vPortEnterCritical>
 8008f2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008f30:	2bff      	cmp	r3, #255	@ 0xff
 8008f32:	bf04      	itt	eq
 8008f34:	2300      	moveq	r3, #0
 8008f36:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008f3a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008f3e:	2bff      	cmp	r3, #255	@ 0xff
 8008f40:	bf04      	itt	eq
 8008f42:	2300      	moveq	r3, #0
 8008f44:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8008f48:	f000 ff14 	bl	8009d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008f4e:	b92b      	cbnz	r3, 8008f5c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f50:	4632      	mov	r2, r6
 8008f52:	4629      	mov	r1, r5
 8008f54:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008f58:	f000 fb9c 	bl	8009694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f5c:	4620      	mov	r0, r4
	}
 8008f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008f62:	f7ff bce7 	b.w	8008934 <prvUnlockQueue>
	...

08008f68 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f6e:	f000 fee1 	bl	8009d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f72:	4b30      	ldr	r3, [pc, #192]	@ (8009034 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008f74:	4e30      	ldr	r6, [pc, #192]	@ (8009038 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	4f30      	ldr	r7, [pc, #192]	@ (800903c <prvAddNewTaskToReadyList+0xd4>)
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008f7e:	6835      	ldr	r5, [r6, #0]
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	d14b      	bne.n	800901c <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f84:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d11f      	bne.n	8008fcc <prvAddNewTaskToReadyList+0x64>
 8008f8c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f8e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f90:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f92:	f7ff fc3b 	bl	800880c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f96:	2d38      	cmp	r5, #56	@ 0x38
 8008f98:	f108 0814 	add.w	r8, r8, #20
 8008f9c:	d1f7      	bne.n	8008f8e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f9e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8009064 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8008fa2:	4d27      	ldr	r5, [pc, #156]	@ (8009040 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	f7ff fc31 	bl	800880c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008faa:	4628      	mov	r0, r5
 8008fac:	f7ff fc2e 	bl	800880c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fb0:	4824      	ldr	r0, [pc, #144]	@ (8009044 <prvAddNewTaskToReadyList+0xdc>)
 8008fb2:	f7ff fc2b 	bl	800880c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fb6:	4824      	ldr	r0, [pc, #144]	@ (8009048 <prvAddNewTaskToReadyList+0xe0>)
 8008fb8:	f7ff fc28 	bl	800880c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fbc:	4823      	ldr	r0, [pc, #140]	@ (800904c <prvAddNewTaskToReadyList+0xe4>)
 8008fbe:	f7ff fc25 	bl	800880c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fc2:	4b23      	ldr	r3, [pc, #140]	@ (8009050 <prvAddNewTaskToReadyList+0xe8>)
 8008fc4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fc8:	4b22      	ldr	r3, [pc, #136]	@ (8009054 <prvAddNewTaskToReadyList+0xec>)
 8008fca:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008fcc:	4a22      	ldr	r2, [pc, #136]	@ (8009058 <prvAddNewTaskToReadyList+0xf0>)
 8008fce:	6813      	ldr	r3, [r2, #0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008fd4:	4a21      	ldr	r2, [pc, #132]	@ (800905c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fd6:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008fd8:	6811      	ldr	r1, [r2, #0]
 8008fda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fdc:	2014      	movs	r0, #20
 8008fde:	428b      	cmp	r3, r1
 8008fe0:	fb00 7003 	mla	r0, r0, r3, r7
 8008fe4:	f104 0104 	add.w	r1, r4, #4
 8008fe8:	bf88      	it	hi
 8008fea:	6013      	strhi	r3, [r2, #0]
 8008fec:	f7ff fc1c 	bl	8008828 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008ff0:	f000 fec0 	bl	8009d74 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8009060 <prvAddNewTaskToReadyList+0xf8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	b173      	cbz	r3, 8009018 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ffa:	6833      	ldr	r3, [r6, #0]
 8008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009000:	429a      	cmp	r2, r3
 8009002:	d209      	bcs.n	8009018 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8009004:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800900c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
}
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800901c:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <prvAddNewTaskToReadyList+0xf8>)
 800901e:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009020:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8009022:	2a00      	cmp	r2, #0
 8009024:	d1d2      	bne.n	8008fcc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800902a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800902c:	bf98      	it	ls
 800902e:	6034      	strls	r4, [r6, #0]
 8009030:	e7cc      	b.n	8008fcc <prvAddNewTaskToReadyList+0x64>
 8009032:	bf00      	nop
 8009034:	20008c5c 	.word	0x20008c5c
 8009038:	20009130 	.word	0x20009130
 800903c:	20008cd0 	.word	0x20008cd0
 8009040:	20008ca8 	.word	0x20008ca8
 8009044:	20008c8c 	.word	0x20008c8c
 8009048:	20008c78 	.word	0x20008c78
 800904c:	20008c60 	.word	0x20008c60
 8009050:	20008ca4 	.word	0x20008ca4
 8009054:	20008ca0 	.word	0x20008ca0
 8009058:	20008c40 	.word	0x20008c40
 800905c:	20008c54 	.word	0x20008c54
 8009060:	20008c50 	.word	0x20008c50
 8009064:	20008cbc 	.word	0x20008cbc

08009068 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800906a:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800906c:	4d15      	ldr	r5, [pc, #84]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800906e:	681c      	ldr	r4, [r3, #0]
{
 8009070:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009072:	6828      	ldr	r0, [r5, #0]
 8009074:	3004      	adds	r0, #4
{
 8009076:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009078:	f7ff fbf8 	bl	800886c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800907c:	1c73      	adds	r3, r6, #1
 800907e:	d107      	bne.n	8009090 <prvAddCurrentTaskToDelayedList+0x28>
 8009080:	b137      	cbz	r7, 8009090 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009082:	6829      	ldr	r1, [r5, #0]
 8009084:	4810      	ldr	r0, [pc, #64]	@ (80090c8 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009086:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908a:	3104      	adds	r1, #4
 800908c:	f7ff bbcc 	b.w	8008828 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	19a4      	adds	r4, r4, r6
 8009094:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009096:	d307      	bcc.n	80090a8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009098:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <prvAddCurrentTaskToDelayedList+0x64>)
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	6829      	ldr	r1, [r5, #0]
}
 800909e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a2:	3104      	adds	r1, #4
 80090a4:	f7ff bbcb 	b.w	800883e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a8:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <prvAddCurrentTaskToDelayedList+0x68>)
 80090aa:	6818      	ldr	r0, [r3, #0]
 80090ac:	6829      	ldr	r1, [r5, #0]
 80090ae:	3104      	adds	r1, #4
 80090b0:	f7ff fbc5 	bl	800883e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090b4:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80090ba:	bf88      	it	hi
 80090bc:	601c      	strhi	r4, [r3, #0]
}
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	20008c58 	.word	0x20008c58
 80090c4:	20009130 	.word	0x20009130
 80090c8:	20008c60 	.word	0x20008c60
 80090cc:	20008ca0 	.word	0x20008ca0
 80090d0:	20008ca4 	.word	0x20008ca4
 80090d4:	20008c3c 	.word	0x20008c3c

080090d8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090d8:	4a06      	ldr	r2, [pc, #24]	@ (80090f4 <prvResetNextTaskUnblockTime+0x1c>)
 80090da:	6813      	ldr	r3, [r2, #0]
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <prvResetNextTaskUnblockTime+0x20>)
 80090e0:	b919      	cbnz	r1, 80090ea <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090e6:	601a      	str	r2, [r3, #0]
}
 80090e8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80090ea:	6812      	ldr	r2, [r2, #0]
 80090ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090ee:	68d2      	ldr	r2, [r2, #12]
 80090f0:	6852      	ldr	r2, [r2, #4]
 80090f2:	e7f8      	b.n	80090e6 <prvResetNextTaskUnblockTime+0xe>
 80090f4:	20008ca4 	.word	0x20008ca4
 80090f8:	20008c3c 	.word	0x20008c3c

080090fc <prvDeleteTCB>:
	{
 80090fc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090fe:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 8009102:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009104:	b93b      	cbnz	r3, 8009116 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8009106:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009108:	f001 f80c 	bl	800a124 <vPortFree>
				vPortFree( pxTCB );
 800910c:	4620      	mov	r0, r4
	}
 800910e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009112:	f001 b807 	b.w	800a124 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009116:	2b01      	cmp	r3, #1
 8009118:	d0f9      	beq.n	800910e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800911a:	2b02      	cmp	r3, #2
 800911c:	d008      	beq.n	8009130 <prvDeleteTCB+0x34>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	e7fe      	b.n	800912e <prvDeleteTCB+0x32>
	}
 8009130:	bd10      	pop	{r4, pc}
	...

08009134 <prvIdleTask>:
{
 8009134:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009136:	4c13      	ldr	r4, [pc, #76]	@ (8009184 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009138:	4f13      	ldr	r7, [pc, #76]	@ (8009188 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800913a:	4d14      	ldr	r5, [pc, #80]	@ (800918c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	b973      	cbnz	r3, 800915e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009140:	4b13      	ldr	r3, [pc, #76]	@ (8009190 <prvIdleTask+0x5c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d9f8      	bls.n	800913a <prvIdleTask+0x6>
				taskYIELD();
 8009148:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800914c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009150:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	e7ed      	b.n	800913a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800915e:	f000 fde9 	bl	8009d34 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009166:	1d30      	adds	r0, r6, #4
 8009168:	f7ff fb80 	bl	800886c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	3b01      	subs	r3, #1
 8009176:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009178:	f000 fdfc 	bl	8009d74 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800917c:	4630      	mov	r0, r6
 800917e:	f7ff ffbd 	bl	80090fc <prvDeleteTCB>
 8009182:	e7db      	b.n	800913c <prvIdleTask+0x8>
 8009184:	20008c74 	.word	0x20008c74
 8009188:	20008c78 	.word	0x20008c78
 800918c:	20008c5c 	.word	0x20008c5c
 8009190:	20008cd0 	.word	0x20008cd0

08009194 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009198:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800919c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800919e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091a0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80091a2:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091a4:	21a5      	movs	r1, #165	@ 0xa5
 80091a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80091a8:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091aa:	f002 ff7f 	bl	800c0ac <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80091ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80091b0:	3e04      	subs	r6, #4
 80091b2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80091b4:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091b8:	1e6b      	subs	r3, r5, #1
 80091ba:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80091be:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091c0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80091c4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80091c8:	b109      	cbz	r1, 80091ce <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ca:	42ab      	cmp	r3, r5
 80091cc:	d1f8      	bne.n	80091c0 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091ce:	9d08      	ldr	r5, [sp, #32]
 80091d0:	2d37      	cmp	r5, #55	@ 0x37
 80091d2:	bf28      	it	cs
 80091d4:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091d6:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 80091da:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 80091de:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091e0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091e2:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091e6:	f7ff fb1c 	bl	8008822 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ea:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091ee:	f104 0018 	add.w	r0, r4, #24
 80091f2:	f7ff fb16 	bl	8008822 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80091f6:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091fa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091fe:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009200:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009204:	4642      	mov	r2, r8
 8009206:	4639      	mov	r1, r7
 8009208:	4630      	mov	r0, r6
 800920a:	f000 fd6b 	bl	8009ce4 <pxPortInitialiseStack>
 800920e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009210:	f1b9 0f00 	cmp.w	r9, #0
 8009214:	d001      	beq.n	800921a <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009216:	f8c9 4000 	str.w	r4, [r9]
}
 800921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800921e <xTaskCreateStatic>:
	{
 800921e:	b570      	push	{r4, r5, r6, lr}
 8009220:	b086      	sub	sp, #24
 8009222:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009226:	b945      	cbnz	r5, 800923a <xTaskCreateStatic+0x1c>
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	e7fe      	b.n	8009238 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800923a:	b944      	cbnz	r4, 800924e <xTaskCreateStatic+0x30>
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	e7fe      	b.n	800924c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800924e:	265c      	movs	r6, #92	@ 0x5c
 8009250:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009252:	9e05      	ldr	r6, [sp, #20]
 8009254:	2e5c      	cmp	r6, #92	@ 0x5c
 8009256:	d008      	beq.n	800926a <xTaskCreateStatic+0x4c>
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	e7fe      	b.n	8009268 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800926a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800926c:	2502      	movs	r5, #2
 800926e:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009272:	ad04      	add	r5, sp, #16
 8009274:	9501      	str	r5, [sp, #4]
 8009276:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009278:	9402      	str	r4, [sp, #8]
 800927a:	9500      	str	r5, [sp, #0]
 800927c:	f7ff ff8a 	bl	8009194 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fe71 	bl	8008f68 <prvAddNewTaskToReadyList>
	}
 8009286:	9804      	ldr	r0, [sp, #16]
 8009288:	b006      	add	sp, #24
 800928a:	bd70      	pop	{r4, r5, r6, pc}

0800928c <xTaskCreate>:
	{
 800928c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009290:	4607      	mov	r7, r0
 8009292:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009294:	0090      	lsls	r0, r2, #2
	{
 8009296:	4688      	mov	r8, r1
 8009298:	4616      	mov	r6, r2
 800929a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929c:	f000 feb0 	bl	800a000 <pvPortMalloc>
			if( pxStack != NULL )
 80092a0:	4605      	mov	r5, r0
 80092a2:	b920      	cbnz	r0, 80092ae <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80092a8:	b005      	add	sp, #20
 80092aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80092ae:	205c      	movs	r0, #92	@ 0x5c
 80092b0:	f000 fea6 	bl	800a000 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80092b4:	4604      	mov	r4, r0
 80092b6:	b198      	cbz	r0, 80092e0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092b8:	2300      	movs	r3, #0
 80092ba:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80092c0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092c6:	9002      	str	r0, [sp, #8]
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4632      	mov	r2, r6
 80092cc:	464b      	mov	r3, r9
 80092ce:	4641      	mov	r1, r8
 80092d0:	4638      	mov	r0, r7
 80092d2:	f7ff ff5f 	bl	8009194 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7ff fe46 	bl	8008f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092dc:	2001      	movs	r0, #1
 80092de:	e7e3      	b.n	80092a8 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 ff1f 	bl	800a124 <vPortFree>
		if( pxNewTCB != NULL )
 80092e6:	e7dd      	b.n	80092a4 <xTaskCreate+0x18>

080092e8 <vTaskStartScheduler>:
{
 80092e8:	b510      	push	{r4, lr}
 80092ea:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092ec:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092ee:	aa07      	add	r2, sp, #28
 80092f0:	a906      	add	r1, sp, #24
 80092f2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092f8:	f7ff fa70 	bl	80087dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092fc:	9b05      	ldr	r3, [sp, #20]
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	9b06      	ldr	r3, [sp, #24]
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	4916      	ldr	r1, [pc, #88]	@ (8009360 <vTaskStartScheduler+0x78>)
 8009306:	4817      	ldr	r0, [pc, #92]	@ (8009364 <vTaskStartScheduler+0x7c>)
 8009308:	e9cd 4300 	strd	r4, r3, [sp]
 800930c:	4623      	mov	r3, r4
 800930e:	f7ff ff86 	bl	800921e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009312:	b318      	cbz	r0, 800935c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8009314:	f000 fb1e 	bl	8009954 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009318:	2801      	cmp	r0, #1
 800931a:	d114      	bne.n	8009346 <vTaskStartScheduler+0x5e>
 800931c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800932c:	4b0e      	ldr	r3, [pc, #56]	@ (8009368 <vTaskStartScheduler+0x80>)
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009334:	4b0d      	ldr	r3, [pc, #52]	@ (800936c <vTaskStartScheduler+0x84>)
 8009336:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009338:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <vTaskStartScheduler+0x88>)
 800933a:	601c      	str	r4, [r3, #0]
}
 800933c:	b008      	add	sp, #32
 800933e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009342:	f000 bd87 	b.w	8009e54 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009346:	3001      	adds	r0, #1
 8009348:	d108      	bne.n	800935c <vTaskStartScheduler+0x74>
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	e7fe      	b.n	800935a <vTaskStartScheduler+0x72>
}
 800935c:	b008      	add	sp, #32
 800935e:	bd10      	pop	{r4, pc}
 8009360:	080126ce 	.word	0x080126ce
 8009364:	08009135 	.word	0x08009135
 8009368:	20008c3c 	.word	0x20008c3c
 800936c:	20008c50 	.word	0x20008c50
 8009370:	20008c58 	.word	0x20008c58

08009374 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009374:	4a02      	ldr	r2, [pc, #8]	@ (8009380 <vTaskSuspendAll+0xc>)
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	3301      	adds	r3, #1
 800937a:	6013      	str	r3, [r2, #0]
}
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20008c38 	.word	0x20008c38

08009384 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009384:	4b01      	ldr	r3, [pc, #4]	@ (800938c <xTaskGetTickCount+0x8>)
 8009386:	6818      	ldr	r0, [r3, #0]
}
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20008c58 	.word	0x20008c58

08009390 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009390:	4b3f      	ldr	r3, [pc, #252]	@ (8009490 <xTaskIncrementTick+0x100>)
 8009392:	681b      	ldr	r3, [r3, #0]
{
 8009394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009398:	2b00      	cmp	r3, #0
 800939a:	d171      	bne.n	8009480 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800939c:	4b3d      	ldr	r3, [pc, #244]	@ (8009494 <xTaskIncrementTick+0x104>)
 800939e:	681c      	ldr	r4, [r3, #0]
 80093a0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80093a2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093a4:	b9bc      	cbnz	r4, 80093d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80093a6:	4b3c      	ldr	r3, [pc, #240]	@ (8009498 <xTaskIncrementTick+0x108>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	b142      	cbz	r2, 80093c0 <xTaskIncrementTick+0x30>
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	e7fe      	b.n	80093be <xTaskIncrementTick+0x2e>
 80093c0:	4a36      	ldr	r2, [pc, #216]	@ (800949c <xTaskIncrementTick+0x10c>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6810      	ldr	r0, [r2, #0]
 80093c6:	6018      	str	r0, [r3, #0]
 80093c8:	6011      	str	r1, [r2, #0]
 80093ca:	4a35      	ldr	r2, [pc, #212]	@ (80094a0 <xTaskIncrementTick+0x110>)
 80093cc:	6813      	ldr	r3, [r2, #0]
 80093ce:	3301      	adds	r3, #1
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	f7ff fe81 	bl	80090d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093d6:	4d33      	ldr	r5, [pc, #204]	@ (80094a4 <xTaskIncrementTick+0x114>)
 80093d8:	4e33      	ldr	r6, [pc, #204]	@ (80094a8 <xTaskIncrementTick+0x118>)
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	4f33      	ldr	r7, [pc, #204]	@ (80094ac <xTaskIncrementTick+0x11c>)
 80093de:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80093e0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093e4:	d911      	bls.n	800940a <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093ea:	2114      	movs	r1, #20
 80093ec:	434a      	muls	r2, r1
 80093ee:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80093f0:	2a02      	cmp	r2, #2
 80093f2:	bf28      	it	cs
 80093f4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80093f8:	4a2d      	ldr	r2, [pc, #180]	@ (80094b0 <xTaskIncrementTick+0x120>)
 80093fa:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80093fc:	2a00      	cmp	r2, #0
}
 80093fe:	bf0c      	ite	eq
 8009400:	4658      	moveq	r0, fp
 8009402:	2001      	movne	r0, #1
 8009404:	b003      	add	sp, #12
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800940a:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8009498 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800940e:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 80094b8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009412:	f8d9 2000 	ldr.w	r2, [r9]
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	b91a      	cbnz	r2, 8009422 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800941a:	f04f 32ff 	mov.w	r2, #4294967295
 800941e:	602a      	str	r2, [r5, #0]
					break;
 8009420:	e7e1      	b.n	80093e6 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009422:	f8d9 2000 	ldr.w	r2, [r9]
 8009426:	68d2      	ldr	r2, [r2, #12]
 8009428:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800942c:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8009430:	428c      	cmp	r4, r1
 8009432:	d201      	bcs.n	8009438 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8009434:	6029      	str	r1, [r5, #0]
						break;
 8009436:	e7d6      	b.n	80093e6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009438:	f108 0304 	add.w	r3, r8, #4
 800943c:	4618      	mov	r0, r3
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	f7ff fa14 	bl	800886c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009444:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8009448:	b119      	cbz	r1, 8009452 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944a:	f108 0018 	add.w	r0, r8, #24
 800944e:	f7ff fa0d 	bl	800886c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009452:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8009456:	f8da 1000 	ldr.w	r1, [sl]
 800945a:	2314      	movs	r3, #20
 800945c:	4288      	cmp	r0, r1
 800945e:	bf88      	it	hi
 8009460:	f8ca 0000 	strhi.w	r0, [sl]
 8009464:	9901      	ldr	r1, [sp, #4]
 8009466:	fb03 6000 	mla	r0, r3, r0, r6
 800946a:	f7ff f9dd 	bl	8008828 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800946e:	6838      	ldr	r0, [r7, #0]
 8009470:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8009474:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8009476:	4291      	cmp	r1, r2
 8009478:	bf28      	it	cs
 800947a:	f04f 0b01 	movcs.w	fp, #1
 800947e:	e7c8      	b.n	8009412 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8009480:	4a0c      	ldr	r2, [pc, #48]	@ (80094b4 <xTaskIncrementTick+0x124>)
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009488:	f04f 0b00 	mov.w	fp, #0
 800948c:	e7b4      	b.n	80093f8 <xTaskIncrementTick+0x68>
 800948e:	bf00      	nop
 8009490:	20008c38 	.word	0x20008c38
 8009494:	20008c58 	.word	0x20008c58
 8009498:	20008ca4 	.word	0x20008ca4
 800949c:	20008ca0 	.word	0x20008ca0
 80094a0:	20008c44 	.word	0x20008c44
 80094a4:	20008c3c 	.word	0x20008c3c
 80094a8:	20008cd0 	.word	0x20008cd0
 80094ac:	20009130 	.word	0x20009130
 80094b0:	20008c48 	.word	0x20008c48
 80094b4:	20008c4c 	.word	0x20008c4c
 80094b8:	20008c54 	.word	0x20008c54

080094bc <xTaskResumeAll>:
{
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80094c0:	4c30      	ldr	r4, [pc, #192]	@ (8009584 <xTaskResumeAll+0xc8>)
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	b943      	cbnz	r3, 80094d8 <xTaskResumeAll+0x1c>
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	e7fe      	b.n	80094d6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80094d8:	f000 fc2c 	bl	8009d34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	3b01      	subs	r3, #1
 80094e0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094e2:	6824      	ldr	r4, [r4, #0]
 80094e4:	b12c      	cbz	r4, 80094f2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80094e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80094e8:	f000 fc44 	bl	8009d74 <vPortExitCritical>
}
 80094ec:	4620      	mov	r0, r4
 80094ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094f2:	4b25      	ldr	r3, [pc, #148]	@ (8009588 <xTaskResumeAll+0xcc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0f5      	beq.n	80094e6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094fa:	4d24      	ldr	r5, [pc, #144]	@ (800958c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80094fc:	4e24      	ldr	r6, [pc, #144]	@ (8009590 <xTaskResumeAll+0xd4>)
 80094fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80095a0 <xTaskResumeAll+0xe4>
 8009502:	e01d      	b.n	8009540 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009504:	68eb      	ldr	r3, [r5, #12]
 8009506:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009508:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800950a:	f104 0018 	add.w	r0, r4, #24
 800950e:	f7ff f9ad 	bl	800886c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009512:	4638      	mov	r0, r7
 8009514:	f7ff f9aa 	bl	800886c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009518:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800951a:	6832      	ldr	r2, [r6, #0]
 800951c:	2014      	movs	r0, #20
 800951e:	4293      	cmp	r3, r2
 8009520:	fb00 8003 	mla	r0, r0, r3, r8
 8009524:	4639      	mov	r1, r7
 8009526:	bf88      	it	hi
 8009528:	6033      	strhi	r3, [r6, #0]
 800952a:	f7ff f97d 	bl	8008828 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800952e:	4b19      	ldr	r3, [pc, #100]	@ (8009594 <xTaskResumeAll+0xd8>)
 8009530:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	429a      	cmp	r2, r3
 8009538:	d302      	bcc.n	8009540 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800953a:	4b17      	ldr	r3, [pc, #92]	@ (8009598 <xTaskResumeAll+0xdc>)
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1de      	bne.n	8009504 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009546:	b10c      	cbz	r4, 800954c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8009548:	f7ff fdc6 	bl	80090d8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800954c:	4d13      	ldr	r5, [pc, #76]	@ (800959c <xTaskResumeAll+0xe0>)
 800954e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009550:	b144      	cbz	r4, 8009564 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8009552:	4e11      	ldr	r6, [pc, #68]	@ (8009598 <xTaskResumeAll+0xdc>)
 8009554:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009556:	f7ff ff1b 	bl	8009390 <xTaskIncrementTick>
 800955a:	b100      	cbz	r0, 800955e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800955c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800955e:	3c01      	subs	r4, #1
 8009560:	d1f9      	bne.n	8009556 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8009562:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009564:	4b0c      	ldr	r3, [pc, #48]	@ (8009598 <xTaskResumeAll+0xdc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0bc      	beq.n	80094e6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800956c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009574:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009580:	2401      	movs	r4, #1
 8009582:	e7b1      	b.n	80094e8 <xTaskResumeAll+0x2c>
 8009584:	20008c38 	.word	0x20008c38
 8009588:	20008c5c 	.word	0x20008c5c
 800958c:	20008c8c 	.word	0x20008c8c
 8009590:	20008c54 	.word	0x20008c54
 8009594:	20009130 	.word	0x20009130
 8009598:	20008c48 	.word	0x20008c48
 800959c:	20008c4c 	.word	0x20008c4c
 80095a0:	20008cd0 	.word	0x20008cd0

080095a4 <vTaskDelay>:
	{
 80095a4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095a6:	b950      	cbnz	r0, 80095be <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80095a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80095ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	f3bf 8f6f 	isb	sy
	}
 80095bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80095be:	4b0a      	ldr	r3, [pc, #40]	@ (80095e8 <vTaskDelay+0x44>)
 80095c0:	6819      	ldr	r1, [r3, #0]
 80095c2:	b141      	cbz	r1, 80095d6 <vTaskDelay+0x32>
 80095c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	e7fe      	b.n	80095d4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80095d6:	f7ff fecd 	bl	8009374 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095da:	f7ff fd45 	bl	8009068 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80095de:	f7ff ff6d 	bl	80094bc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0e0      	beq.n	80095a8 <vTaskDelay+0x4>
 80095e6:	e7e9      	b.n	80095bc <vTaskDelay+0x18>
 80095e8:	20008c38 	.word	0x20008c38

080095ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ec:	4b17      	ldr	r3, [pc, #92]	@ (800964c <vTaskSwitchContext+0x60>)
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	4b17      	ldr	r3, [pc, #92]	@ (8009650 <vTaskSwitchContext+0x64>)
{
 80095f2:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095f4:	b112      	cbz	r2, 80095fc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80095f6:	2201      	movs	r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
}
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80095fc:	4d15      	ldr	r5, [pc, #84]	@ (8009654 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 80095fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009600:	682a      	ldr	r2, [r5, #0]
 8009602:	4915      	ldr	r1, [pc, #84]	@ (8009658 <vTaskSwitchContext+0x6c>)
 8009604:	2614      	movs	r6, #20
 8009606:	fb06 f302 	mul.w	r3, r6, r2
 800960a:	18c8      	adds	r0, r1, r3
 800960c:	58cc      	ldr	r4, [r1, r3]
 800960e:	b18c      	cbz	r4, 8009634 <vTaskSwitchContext+0x48>
 8009610:	6844      	ldr	r4, [r0, #4]
 8009612:	3308      	adds	r3, #8
 8009614:	6864      	ldr	r4, [r4, #4]
 8009616:	6044      	str	r4, [r0, #4]
 8009618:	440b      	add	r3, r1
 800961a:	429c      	cmp	r4, r3
 800961c:	bf04      	itt	eq
 800961e:	6863      	ldreq	r3, [r4, #4]
 8009620:	6043      	streq	r3, [r0, #4]
 8009622:	2314      	movs	r3, #20
 8009624:	fb03 1102 	mla	r1, r3, r2, r1
 8009628:	684b      	ldr	r3, [r1, #4]
 800962a:	68d9      	ldr	r1, [r3, #12]
 800962c:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <vTaskSwitchContext+0x70>)
 800962e:	6019      	str	r1, [r3, #0]
 8009630:	602a      	str	r2, [r5, #0]
}
 8009632:	e7e2      	b.n	80095fa <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009634:	b942      	cbnz	r2, 8009648 <vTaskSwitchContext+0x5c>
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	e7fe      	b.n	8009646 <vTaskSwitchContext+0x5a>
 8009648:	3a01      	subs	r2, #1
 800964a:	e7dc      	b.n	8009606 <vTaskSwitchContext+0x1a>
 800964c:	20008c38 	.word	0x20008c38
 8009650:	20008c48 	.word	0x20008c48
 8009654:	20008c54 	.word	0x20008c54
 8009658:	20008cd0 	.word	0x20008cd0
 800965c:	20009130 	.word	0x20009130

08009660 <vTaskPlaceOnEventList>:
{
 8009660:	b510      	push	{r4, lr}
 8009662:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009664:	b940      	cbnz	r0, 8009678 <vTaskPlaceOnEventList+0x18>
 8009666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	e7fe      	b.n	8009676 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009678:	4b05      	ldr	r3, [pc, #20]	@ (8009690 <vTaskPlaceOnEventList+0x30>)
 800967a:	6819      	ldr	r1, [r3, #0]
 800967c:	3118      	adds	r1, #24
 800967e:	f7ff f8de 	bl	800883e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009682:	4620      	mov	r0, r4
 8009684:	2101      	movs	r1, #1
}
 8009686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800968a:	f7ff bced 	b.w	8009068 <prvAddCurrentTaskToDelayedList>
 800968e:	bf00      	nop
 8009690:	20009130 	.word	0x20009130

08009694 <vTaskPlaceOnEventListRestricted>:
	{
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	460d      	mov	r5, r1
 8009698:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800969a:	b940      	cbnz	r0, 80096ae <vTaskPlaceOnEventListRestricted+0x1a>
 800969c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	e7fe      	b.n	80096ac <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ae:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <vTaskPlaceOnEventListRestricted+0x38>)
 80096b0:	6819      	ldr	r1, [r3, #0]
 80096b2:	3118      	adds	r1, #24
 80096b4:	f7ff f8b8 	bl	8008828 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80096b8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ba:	4621      	mov	r1, r4
 80096bc:	bf0c      	ite	eq
 80096be:	4628      	moveq	r0, r5
 80096c0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80096c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096c8:	f7ff bcce 	b.w	8009068 <prvAddCurrentTaskToDelayedList>
 80096cc:	20009130 	.word	0x20009130

080096d0 <xTaskRemoveFromEventList>:
{
 80096d0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80096d2:	68c3      	ldr	r3, [r0, #12]
 80096d4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80096d6:	b944      	cbnz	r4, 80096ea <xTaskRemoveFromEventList+0x1a>
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	e7fe      	b.n	80096e8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096ea:	f104 0518 	add.w	r5, r4, #24
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff f8bc 	bl	800886c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f4:	4b10      	ldr	r3, [pc, #64]	@ (8009738 <xTaskRemoveFromEventList+0x68>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b9db      	cbnz	r3, 8009732 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096fa:	1d25      	adds	r5, r4, #4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f7ff f8b5 	bl	800886c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009702:	4a0e      	ldr	r2, [pc, #56]	@ (800973c <xTaskRemoveFromEventList+0x6c>)
 8009704:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009706:	6811      	ldr	r1, [r2, #0]
 8009708:	428b      	cmp	r3, r1
 800970a:	bf88      	it	hi
 800970c:	6013      	strhi	r3, [r2, #0]
 800970e:	4a0c      	ldr	r2, [pc, #48]	@ (8009740 <xTaskRemoveFromEventList+0x70>)
 8009710:	2014      	movs	r0, #20
 8009712:	4629      	mov	r1, r5
 8009714:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009718:	f7ff f886 	bl	8008828 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800971c:	4b09      	ldr	r3, [pc, #36]	@ (8009744 <xTaskRemoveFromEventList+0x74>)
 800971e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009726:	bf83      	ittte	hi
 8009728:	4b07      	ldrhi	r3, [pc, #28]	@ (8009748 <xTaskRemoveFromEventList+0x78>)
 800972a:	2001      	movhi	r0, #1
 800972c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800972e:	2000      	movls	r0, #0
}
 8009730:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009732:	4806      	ldr	r0, [pc, #24]	@ (800974c <xTaskRemoveFromEventList+0x7c>)
 8009734:	4629      	mov	r1, r5
 8009736:	e7ef      	b.n	8009718 <xTaskRemoveFromEventList+0x48>
 8009738:	20008c38 	.word	0x20008c38
 800973c:	20008c54 	.word	0x20008c54
 8009740:	20008cd0 	.word	0x20008cd0
 8009744:	20009130 	.word	0x20009130
 8009748:	20008c48 	.word	0x20008c48
 800974c:	20008c8c 	.word	0x20008c8c

08009750 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009750:	4b03      	ldr	r3, [pc, #12]	@ (8009760 <vTaskInternalSetTimeOutState+0x10>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009756:	4b03      	ldr	r3, [pc, #12]	@ (8009764 <vTaskInternalSetTimeOutState+0x14>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6043      	str	r3, [r0, #4]
}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20008c44 	.word	0x20008c44
 8009764:	20008c58 	.word	0x20008c58

08009768 <xTaskCheckForTimeOut>:
{
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800976c:	4605      	mov	r5, r0
 800976e:	b940      	cbnz	r0, 8009782 <xTaskCheckForTimeOut+0x1a>
 8009770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	e7fe      	b.n	8009780 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009782:	b941      	cbnz	r1, 8009796 <xTaskCheckForTimeOut+0x2e>
 8009784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	e7fe      	b.n	8009794 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009796:	f000 facd 	bl	8009d34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800979a:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <xTaskCheckForTimeOut+0x70>)
 800979c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	d010      	beq.n	80097c6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097a4:	480d      	ldr	r0, [pc, #52]	@ (80097dc <xTaskCheckForTimeOut+0x74>)
 80097a6:	682e      	ldr	r6, [r5, #0]
 80097a8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097aa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ac:	4286      	cmp	r6, r0
 80097ae:	d001      	beq.n	80097b4 <xTaskCheckForTimeOut+0x4c>
 80097b0:	428a      	cmp	r2, r1
 80097b2:	d90f      	bls.n	80097d4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097b4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097b6:	4283      	cmp	r3, r0
 80097b8:	d90a      	bls.n	80097d0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80097ba:	1a5b      	subs	r3, r3, r1
 80097bc:	4413      	add	r3, r2
 80097be:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097c0:	4628      	mov	r0, r5
 80097c2:	f7ff ffc5 	bl	8009750 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80097c6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80097c8:	f000 fad4 	bl	8009d74 <vPortExitCritical>
}
 80097cc:	4620      	mov	r0, r4
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80097d4:	2401      	movs	r4, #1
 80097d6:	e7f7      	b.n	80097c8 <xTaskCheckForTimeOut+0x60>
 80097d8:	20008c58 	.word	0x20008c58
 80097dc:	20008c44 	.word	0x20008c44

080097e0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80097e0:	4b01      	ldr	r3, [pc, #4]	@ (80097e8 <vTaskMissedYield+0x8>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
}
 80097e6:	4770      	bx	lr
 80097e8:	20008c48 	.word	0x20008c48

080097ec <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80097ec:	b908      	cbnz	r0, 80097f2 <uxTaskGetStackHighWaterMark+0x6>
 80097ee:	4b06      	ldr	r3, [pc, #24]	@ (8009808 <uxTaskGetStackHighWaterMark+0x1c>)
 80097f0:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80097f2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 80097f4:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80097f6:	5c13      	ldrb	r3, [r2, r0]
 80097f8:	2ba5      	cmp	r3, #165	@ 0xa5
 80097fa:	d002      	beq.n	8009802 <uxTaskGetStackHighWaterMark+0x16>
	}
 80097fc:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8009800:	4770      	bx	lr
			ulCount++;
 8009802:	3001      	adds	r0, #1
 8009804:	e7f7      	b.n	80097f6 <uxTaskGetStackHighWaterMark+0xa>
 8009806:	bf00      	nop
 8009808:	20009130 	.word	0x20009130

0800980c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800980c:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <xTaskGetSchedulerState+0x18>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	b133      	cbz	r3, 8009820 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009812:	4b05      	ldr	r3, [pc, #20]	@ (8009828 <xTaskGetSchedulerState+0x1c>)
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	fab0 f080 	clz	r0, r0
 800981a:	0940      	lsrs	r0, r0, #5
 800981c:	0040      	lsls	r0, r0, #1
 800981e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009820:	2001      	movs	r0, #1
	}
 8009822:	4770      	bx	lr
 8009824:	20008c50 	.word	0x20008c50
 8009828:	20008c38 	.word	0x20008c38

0800982c <xTaskPriorityDisinherit>:
	{
 800982c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800982e:	b908      	cbnz	r0, 8009834 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009830:	2000      	movs	r0, #0
	}
 8009832:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009834:	4b1b      	ldr	r3, [pc, #108]	@ (80098a4 <xTaskPriorityDisinherit+0x78>)
 8009836:	681c      	ldr	r4, [r3, #0]
 8009838:	4284      	cmp	r4, r0
 800983a:	d008      	beq.n	800984e <xTaskPriorityDisinherit+0x22>
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	e7fe      	b.n	800984c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800984e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009850:	b943      	cbnz	r3, 8009864 <xTaskPriorityDisinherit+0x38>
 8009852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	e7fe      	b.n	8009862 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009864:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009866:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009868:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800986a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800986c:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800986e:	d0df      	beq.n	8009830 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1dd      	bne.n	8009830 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009874:	1d25      	adds	r5, r4, #4
 8009876:	4628      	mov	r0, r5
 8009878:	f7fe fff8 	bl	800886c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800987c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800987e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009880:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009884:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009886:	4a08      	ldr	r2, [pc, #32]	@ (80098a8 <xTaskPriorityDisinherit+0x7c>)
 8009888:	6811      	ldr	r1, [r2, #0]
 800988a:	428b      	cmp	r3, r1
 800988c:	bf88      	it	hi
 800988e:	6013      	strhi	r3, [r2, #0]
 8009890:	4a06      	ldr	r2, [pc, #24]	@ (80098ac <xTaskPriorityDisinherit+0x80>)
 8009892:	2014      	movs	r0, #20
 8009894:	fb00 2003 	mla	r0, r0, r3, r2
 8009898:	4629      	mov	r1, r5
 800989a:	f7fe ffc5 	bl	8008828 <vListInsertEnd>
					xReturn = pdTRUE;
 800989e:	2001      	movs	r0, #1
		return xReturn;
 80098a0:	e7c7      	b.n	8009832 <xTaskPriorityDisinherit+0x6>
 80098a2:	bf00      	nop
 80098a4:	20009130 	.word	0x20009130
 80098a8:	20008c54 	.word	0x20008c54
 80098ac:	20008cd0 	.word	0x20008cd0

080098b0 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80098b0:	4291      	cmp	r1, r2
{
 80098b2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098b4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098b6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80098b8:	d80a      	bhi.n	80098d0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ba:	1ad2      	subs	r2, r2, r3
 80098bc:	6983      	ldr	r3, [r0, #24]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d20d      	bcs.n	80098de <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098c2:	4b08      	ldr	r3, [pc, #32]	@ (80098e4 <prvInsertTimerInActiveList+0x34>)
 80098c4:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	f7fe ffb9 	bl	800883e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80098cc:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80098ce:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d201      	bcs.n	80098d8 <prvInsertTimerInActiveList+0x28>
 80098d4:	4299      	cmp	r1, r3
 80098d6:	d202      	bcs.n	80098de <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098d8:	4b03      	ldr	r3, [pc, #12]	@ (80098e8 <prvInsertTimerInActiveList+0x38>)
 80098da:	1d01      	adds	r1, r0, #4
 80098dc:	e7f3      	b.n	80098c6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80098de:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80098e0:	e7f5      	b.n	80098ce <prvInsertTimerInActiveList+0x1e>
 80098e2:	bf00      	nop
 80098e4:	20009230 	.word	0x20009230
 80098e8:	20009234 	.word	0x20009234

080098ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80098ee:	4c11      	ldr	r4, [pc, #68]	@ (8009934 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80098f0:	f000 fa20 	bl	8009d34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80098f4:	6825      	ldr	r5, [r4, #0]
 80098f6:	b9bd      	cbnz	r5, 8009928 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80098f8:	4f0f      	ldr	r7, [pc, #60]	@ (8009938 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80098fa:	4e10      	ldr	r6, [pc, #64]	@ (800993c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7fe ff85 	bl	800880c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009902:	4630      	mov	r0, r6
 8009904:	f7fe ff82 	bl	800880c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009908:	4b0d      	ldr	r3, [pc, #52]	@ (8009940 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800990a:	4a0e      	ldr	r2, [pc, #56]	@ (8009944 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 800990c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800990e:	4b0e      	ldr	r3, [pc, #56]	@ (8009948 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009910:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009912:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009914:	200a      	movs	r0, #10
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <prvCheckForValidListAndQueue+0x60>)
 8009918:	9500      	str	r5, [sp, #0]
 800991a:	f7ff f882 	bl	8008a22 <xQueueGenericCreateStatic>
 800991e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009920:	b110      	cbz	r0, 8009928 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009922:	490b      	ldr	r1, [pc, #44]	@ (8009950 <prvCheckForValidListAndQueue+0x64>)
 8009924:	f7ff faea 	bl	8008efc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009928:	b003      	add	sp, #12
 800992a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800992e:	f000 ba21 	b.w	8009d74 <vPortExitCritical>
 8009932:	bf00      	nop
 8009934:	2000922c 	.word	0x2000922c
 8009938:	2000924c 	.word	0x2000924c
 800993c:	20009238 	.word	0x20009238
 8009940:	20009234 	.word	0x20009234
 8009944:	20009184 	.word	0x20009184
 8009948:	20009230 	.word	0x20009230
 800994c:	20009134 	.word	0x20009134
 8009950:	080126d3 	.word	0x080126d3

08009954 <xTimerCreateTimerTask>:
{
 8009954:	b510      	push	{r4, lr}
 8009956:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009958:	f7ff ffc8 	bl	80098ec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800995c:	4b12      	ldr	r3, [pc, #72]	@ (80099a8 <xTimerCreateTimerTask+0x54>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	b1b3      	cbz	r3, 8009990 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009962:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009964:	aa07      	add	r2, sp, #28
 8009966:	a906      	add	r1, sp, #24
 8009968:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800996a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800996e:	f7fe ff41 	bl	80087f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009972:	9b05      	ldr	r3, [sp, #20]
 8009974:	9302      	str	r3, [sp, #8]
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	2302      	movs	r3, #2
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	9a07      	ldr	r2, [sp, #28]
 8009980:	490a      	ldr	r1, [pc, #40]	@ (80099ac <xTimerCreateTimerTask+0x58>)
 8009982:	480b      	ldr	r0, [pc, #44]	@ (80099b0 <xTimerCreateTimerTask+0x5c>)
 8009984:	4623      	mov	r3, r4
 8009986:	f7ff fc4a 	bl	800921e <xTaskCreateStatic>
 800998a:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <xTimerCreateTimerTask+0x60>)
 800998c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800998e:	b940      	cbnz	r0, 80099a2 <xTimerCreateTimerTask+0x4e>
 8009990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80099a0:	e7fe      	b.n	80099a0 <xTimerCreateTimerTask+0x4c>
}
 80099a2:	2001      	movs	r0, #1
 80099a4:	b008      	add	sp, #32
 80099a6:	bd10      	pop	{r4, pc}
 80099a8:	2000922c 	.word	0x2000922c
 80099ac:	080126d8 	.word	0x080126d8
 80099b0:	08009ab1 	.word	0x08009ab1
 80099b4:	20009228 	.word	0x20009228

080099b8 <xTimerGenericCommand>:
{
 80099b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099ba:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80099bc:	4604      	mov	r4, r0
{
 80099be:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80099c0:	b940      	cbnz	r0, 80099d4 <xTimerGenericCommand+0x1c>
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	e7fe      	b.n	80099d2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80099d4:	4d0d      	ldr	r5, [pc, #52]	@ (8009a0c <xTimerGenericCommand+0x54>)
 80099d6:	6828      	ldr	r0, [r5, #0]
 80099d8:	b180      	cbz	r0, 80099fc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099da:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099dc:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80099e0:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099e2:	dc0d      	bgt.n	8009a00 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099e4:	f7ff ff12 	bl	800980c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099e8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099ea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099ec:	bf08      	it	eq
 80099ee:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099f0:	6828      	ldr	r0, [r5, #0]
 80099f2:	bf18      	it	ne
 80099f4:	461a      	movne	r2, r3
 80099f6:	4669      	mov	r1, sp
 80099f8:	f7ff f887 	bl	8008b0a <xQueueGenericSend>
}
 80099fc:	b004      	add	sp, #16
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a00:	2300      	movs	r3, #0
 8009a02:	4669      	mov	r1, sp
 8009a04:	f7ff f933 	bl	8008c6e <xQueueGenericSendFromISR>
 8009a08:	e7f8      	b.n	80099fc <xTimerGenericCommand+0x44>
 8009a0a:	bf00      	nop
 8009a0c:	2000922c 	.word	0x2000922c

08009a10 <prvSampleTimeNow>:
{
 8009a10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009a14:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8009aac <prvSampleTimeNow+0x9c>
{
 8009a18:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009a1a:	f7ff fcb3 	bl	8009384 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a22:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8009a24:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009a26:	d909      	bls.n	8009a3c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a28:	4f1e      	ldr	r7, [pc, #120]	@ (8009aa4 <prvSampleTimeNow+0x94>)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	b96a      	cbnz	r2, 8009a4c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009a30:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa8 <prvSampleTimeNow+0x98>)
 8009a32:	6811      	ldr	r1, [r2, #0]
 8009a34:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8009a36:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <prvSampleTimeNow+0x2e>
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009a40:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009a42:	f8c8 5000 	str.w	r5, [r8]
}
 8009a46:	b002      	add	sp, #8
 8009a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a4c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a4e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a50:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a54:	f104 0a04 	add.w	sl, r4, #4
 8009a58:	4650      	mov	r0, sl
 8009a5a:	f7fe ff07 	bl	800886c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009a60:	4620      	mov	r0, r4
 8009a62:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a64:	69e3      	ldr	r3, [r4, #28]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d1df      	bne.n	8009a2a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a6a:	69a3      	ldr	r3, [r4, #24]
 8009a6c:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8009a6e:	4599      	cmp	r9, r3
 8009a70:	d206      	bcs.n	8009a80 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a74:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a76:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a78:	4651      	mov	r1, sl
 8009a7a:	f7fe fee0 	bl	800883e <vListInsert>
 8009a7e:	e7d4      	b.n	8009a2a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a80:	2300      	movs	r3, #0
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	464a      	mov	r2, r9
 8009a86:	4619      	mov	r1, r3
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff ff95 	bl	80099b8 <xTimerGenericCommand>
				configASSERT( xResult );
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1cb      	bne.n	8009a2a <prvSampleTimeNow+0x1a>
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	e7fe      	b.n	8009aa2 <prvSampleTimeNow+0x92>
 8009aa4:	20009234 	.word	0x20009234
 8009aa8:	20009230 	.word	0x20009230
 8009aac:	20009224 	.word	0x20009224

08009ab0 <prvTimerTask>:
{
 8009ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ab4:	4e69      	ldr	r6, [pc, #420]	@ (8009c5c <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ab6:	4f6a      	ldr	r7, [pc, #424]	@ (8009c60 <prvTimerTask+0x1b0>)
{
 8009ab8:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aba:	6833      	ldr	r3, [r6, #0]
 8009abc:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	d033      	beq.n	8009b2a <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009ac8:	f7ff fc54 	bl	8009374 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009acc:	a804      	add	r0, sp, #16
 8009ace:	f7ff ff9f 	bl	8009a10 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009ad2:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ad4:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009ad6:	2c00      	cmp	r4, #0
 8009ad8:	d175      	bne.n	8009bc6 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ada:	2d00      	cmp	r5, #0
 8009adc:	d058      	beq.n	8009b90 <prvTimerTask+0xe0>
 8009ade:	4540      	cmp	r0, r8
 8009ae0:	d35c      	bcc.n	8009b9c <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8009ae2:	f7ff fceb 	bl	80094bc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ae6:	6833      	ldr	r3, [r6, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aec:	1d28      	adds	r0, r5, #4
 8009aee:	f7fe febd 	bl	800886c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009af2:	69eb      	ldr	r3, [r5, #28]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d11a      	bne.n	8009b2e <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009af8:	69a9      	ldr	r1, [r5, #24]
 8009afa:	4643      	mov	r3, r8
 8009afc:	464a      	mov	r2, r9
 8009afe:	4441      	add	r1, r8
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7ff fed5 	bl	80098b0 <prvInsertTimerInActiveList>
 8009b06:	b190      	cbz	r0, 8009b2e <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b08:	9400      	str	r4, [sp, #0]
 8009b0a:	4623      	mov	r3, r4
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7ff ff51 	bl	80099b8 <xTimerGenericCommand>
			configASSERT( xResult );
 8009b16:	b950      	cbnz	r0, 8009b2e <prvTimerTask+0x7e>
 8009b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	e7fe      	b.n	8009b28 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8009b2a:	46a8      	mov	r8, r5
 8009b2c:	e7cc      	b.n	8009ac8 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b2e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009b30:	4628      	mov	r0, r5
 8009b32:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b34:	6838      	ldr	r0, [r7, #0]
 8009b36:	2200      	movs	r2, #0
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	f7ff f8f4 	bl	8008d26 <xQueueReceive>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0bb      	beq.n	8009aba <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b42:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b44:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	db40      	blt.n	8009bcc <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b4a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b4c:	6963      	ldr	r3, [r4, #20]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d143      	bne.n	8009bda <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b52:	a803      	add	r0, sp, #12
 8009b54:	f7ff ff5c 	bl	8009a10 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009b58:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b5a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009b5c:	2b09      	cmp	r3, #9
 8009b5e:	d8e9      	bhi.n	8009b34 <prvTimerTask+0x84>
 8009b60:	a101      	add	r1, pc, #4	@ (adr r1, 8009b68 <prvTimerTask+0xb8>)
 8009b62:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009be3 	.word	0x08009be3
 8009b6c:	08009be3 	.word	0x08009be3
 8009b70:	08009be3 	.word	0x08009be3
 8009b74:	08009b35 	.word	0x08009b35
 8009b78:	08009c27 	.word	0x08009c27
 8009b7c:	08009c4b 	.word	0x08009c4b
 8009b80:	08009be3 	.word	0x08009be3
 8009b84:	08009be3 	.word	0x08009be3
 8009b88:	08009b35 	.word	0x08009b35
 8009b8c:	08009c27 	.word	0x08009c27
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b90:	4b34      	ldr	r3, [pc, #208]	@ (8009c64 <prvTimerTask+0x1b4>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681c      	ldr	r4, [r3, #0]
 8009b96:	fab4 f484 	clz	r4, r4
 8009b9a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b9c:	6838      	ldr	r0, [r7, #0]
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	eba8 0109 	sub.w	r1, r8, r9
 8009ba4:	f7ff f9bc 	bl	8008f20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ba8:	f7ff fc88 	bl	80094bc <xTaskResumeAll>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d1c1      	bne.n	8009b34 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009bb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	e7b6      	b.n	8009b34 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8009bc6:	f7ff fc79 	bl	80094bc <xTaskResumeAll>
}
 8009bca:	e7b3      	b.n	8009b34 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bcc:	9b05      	ldr	r3, [sp, #20]
 8009bce:	9907      	ldr	r1, [sp, #28]
 8009bd0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bd2:	9b04      	ldr	r3, [sp, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	dbad      	blt.n	8009b34 <prvTimerTask+0x84>
 8009bd8:	e7b7      	b.n	8009b4a <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bda:	1d20      	adds	r0, r4, #4
 8009bdc:	f7fe fe46 	bl	800886c <uxListRemove>
 8009be0:	e7b7      	b.n	8009b52 <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009be2:	69a1      	ldr	r1, [r4, #24]
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	4620      	mov	r0, r4
 8009be8:	4419      	add	r1, r3
 8009bea:	f7ff fe61 	bl	80098b0 <prvInsertTimerInActiveList>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d0a0      	beq.n	8009b34 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bf8:	69e3      	ldr	r3, [r4, #28]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d19a      	bne.n	8009b34 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bfe:	69a2      	ldr	r2, [r4, #24]
 8009c00:	9905      	ldr	r1, [sp, #20]
 8009c02:	2300      	movs	r3, #0
 8009c04:	440a      	add	r2, r1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fed4 	bl	80099b8 <xTimerGenericCommand>
							configASSERT( xResult );
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d18f      	bne.n	8009b34 <prvTimerTask+0x84>
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	e7fe      	b.n	8009c24 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c26:	9905      	ldr	r1, [sp, #20]
 8009c28:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c2a:	b941      	cbnz	r1, 8009c3e <prvTimerTask+0x18e>
 8009c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	e7fe      	b.n	8009c3c <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4401      	add	r1, r0
 8009c42:	4620      	mov	r0, r4
 8009c44:	f7ff fe34 	bl	80098b0 <prvInsertTimerInActiveList>
					break;
 8009c48:	e774      	b.n	8009b34 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c4a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f47f af70 	bne.w	8009b34 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fa65 	bl	800a124 <vPortFree>
 8009c5a:	e76b      	b.n	8009b34 <prvTimerTask+0x84>
 8009c5c:	20009234 	.word	0x20009234
 8009c60:	2000922c 	.word	0x2000922c
 8009c64:	20009230 	.word	0x20009230

08009c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c68:	4808      	ldr	r0, [pc, #32]	@ (8009c8c <prvPortStartFirstTask+0x24>)
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	6800      	ldr	r0, [r0, #0]
 8009c6e:	f380 8808 	msr	MSP, r0
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8814 	msr	CONTROL, r0
 8009c7a:	b662      	cpsie	i
 8009c7c:	b661      	cpsie	f
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	df00      	svc	0
 8009c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c8a:	0000      	.short	0x0000
 8009c8c:	e000ed08 	.word	0xe000ed08

08009c90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c90:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ca0 <vPortEnableVFP+0x10>
 8009c94:	6801      	ldr	r1, [r0, #0]
 8009c96:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c9a:	6001      	str	r1, [r0, #0]
 8009c9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c9e:	0000      	.short	0x0000
 8009ca0:	e000ed88 	.word	0xe000ed88

08009ca4 <prvTaskExitError>:
{
 8009ca4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <prvTaskExitError+0x3c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	d008      	beq.n	8009cc4 <prvTaskExitError+0x20>
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	e7fe      	b.n	8009cc2 <prvTaskExitError+0x1e>
 8009cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009cd4:	9b01      	ldr	r3, [sp, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0fc      	beq.n	8009cd4 <prvTaskExitError+0x30>
}
 8009cda:	b002      	add	sp, #8
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000024 	.word	0x20000024

08009ce4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ce8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cec:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <pxPortInitialiseStack+0x28>)
 8009cee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cf2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cf6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cfa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cfe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d02:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009d06:	3844      	subs	r0, #68	@ 0x44
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	08009ca5 	.word	0x08009ca5

08009d10 <SVC_Handler>:
	__asm volatile (
 8009d10:	4b07      	ldr	r3, [pc, #28]	@ (8009d30 <pxCurrentTCBConst2>)
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	6808      	ldr	r0, [r1, #0]
 8009d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1a:	f380 8809 	msr	PSP, r0
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8811 	msr	BASEPRI, r0
 8009d2a:	4770      	bx	lr
 8009d2c:	f3af 8000 	nop.w

08009d30 <pxCurrentTCBConst2>:
 8009d30:	20009130 	.word	0x20009130

08009d34 <vPortEnterCritical>:
 8009d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009d44:	4a0a      	ldr	r2, [pc, #40]	@ (8009d70 <vPortEnterCritical+0x3c>)
 8009d46:	6813      	ldr	r3, [r2, #0]
 8009d48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009d4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009d4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009d4e:	d10e      	bne.n	8009d6e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d54:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	b143      	cbz	r3, 8009d6e <vPortEnterCritical+0x3a>
 8009d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	e7fe      	b.n	8009d6c <vPortEnterCritical+0x38>
}
 8009d6e:	4770      	bx	lr
 8009d70:	20000024 	.word	0x20000024

08009d74 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009d74:	4a08      	ldr	r2, [pc, #32]	@ (8009d98 <vPortExitCritical+0x24>)
 8009d76:	6813      	ldr	r3, [r2, #0]
 8009d78:	b943      	cbnz	r3, 8009d8c <vPortExitCritical+0x18>
 8009d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	e7fe      	b.n	8009d8a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d90:	b90b      	cbnz	r3, 8009d96 <vPortExitCritical+0x22>
	__asm volatile
 8009d92:	f383 8811 	msr	BASEPRI, r3
}
 8009d96:	4770      	bx	lr
 8009d98:	20000024 	.word	0x20000024
 8009d9c:	00000000 	.word	0x00000000

08009da0 <PendSV_Handler>:
	__asm volatile
 8009da0:	f3ef 8009 	mrs	r0, PSP
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4b15      	ldr	r3, [pc, #84]	@ (8009e00 <pxCurrentTCBConst>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	f01e 0f10 	tst.w	lr, #16
 8009db0:	bf08      	it	eq
 8009db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	6010      	str	r0, [r2, #0]
 8009dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009dc4:	f380 8811 	msr	BASEPRI, r0
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f7ff fc0c 	bl	80095ec <vTaskSwitchContext>
 8009dd4:	f04f 0000 	mov.w	r0, #0
 8009dd8:	f380 8811 	msr	BASEPRI, r0
 8009ddc:	bc09      	pop	{r0, r3}
 8009dde:	6819      	ldr	r1, [r3, #0]
 8009de0:	6808      	ldr	r0, [r1, #0]
 8009de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de6:	f01e 0f10 	tst.w	lr, #16
 8009dea:	bf08      	it	eq
 8009dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009df0:	f380 8809 	msr	PSP, r0
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w

08009e00 <pxCurrentTCBConst>:
 8009e00:	20009130 	.word	0x20009130

08009e04 <SysTick_Handler>:
{
 8009e04:	b508      	push	{r3, lr}
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009e16:	f7ff fabb 	bl	8009390 <xTaskIncrementTick>
 8009e1a:	b128      	cbz	r0, 8009e28 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f383 8811 	msr	BASEPRI, r3
}
 8009e2e:	bd08      	pop	{r3, pc}

08009e30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e30:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009e34:	2300      	movs	r3, #0
 8009e36:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e38:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e3a:	4b05      	ldr	r3, [pc, #20]	@ (8009e50 <vPortSetupTimerInterrupt+0x20>)
 8009e3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e46:	3b01      	subs	r3, #1
 8009e48:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e4a:	2307      	movs	r3, #7
 8009e4c:	6113      	str	r3, [r2, #16]
}
 8009e4e:	4770      	bx	lr
 8009e50:	20000018 	.word	0x20000018

08009e54 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e5a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8009e5e:	4a38      	ldr	r2, [pc, #224]	@ (8009f40 <xPortStartScheduler+0xec>)
 8009e60:	4291      	cmp	r1, r2
 8009e62:	d108      	bne.n	8009e76 <xPortStartScheduler+0x22>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	e7fe      	b.n	8009e74 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009e7a:	4b32      	ldr	r3, [pc, #200]	@ (8009f44 <xPortStartScheduler+0xf0>)
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d108      	bne.n	8009e92 <xPortStartScheduler+0x3e>
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	e7fe      	b.n	8009e90 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e92:	4b2d      	ldr	r3, [pc, #180]	@ (8009f48 <xPortStartScheduler+0xf4>)
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	b2d2      	uxtb	r2, r2
 8009e98:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e9a:	22ff      	movs	r2, #255	@ 0xff
 8009e9c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e9e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8009f4c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ea8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009eac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eb0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009eb2:	4a27      	ldr	r2, [pc, #156]	@ (8009f50 <xPortStartScheduler+0xfc>)
 8009eb4:	2307      	movs	r3, #7
 8009eb6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eb8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8009ebc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ebe:	0609      	lsls	r1, r1, #24
 8009ec0:	d40a      	bmi.n	8009ed8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d011      	beq.n	8009eea <xPortStartScheduler+0x96>
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	e7fe      	b.n	8009ed6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009edc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f88d 3003 	strb.w	r3, [sp, #3]
 8009ee8:	e7e6      	b.n	8009eb8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009eee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ef4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009efc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f04:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f08:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009f0c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f10:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009f14:	f7ff ff8c 	bl	8009e30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009f18:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <xPortStartScheduler+0x100>)
 8009f1a:	2500      	movs	r5, #0
 8009f1c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009f1e:	f7ff feb7 	bl	8009c90 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f22:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009f26:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f2a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009f2e:	f7ff fe9b 	bl	8009c68 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009f32:	f7ff fb5b 	bl	80095ec <vTaskSwitchContext>
	prvTaskExitError();
 8009f36:	f7ff feb5 	bl	8009ca4 <prvTaskExitError>
}
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	b003      	add	sp, #12
 8009f3e:	bd30      	pop	{r4, r5, pc}
 8009f40:	410fc271 	.word	0x410fc271
 8009f44:	410fc270 	.word	0x410fc270
 8009f48:	e000e400 	.word	0xe000e400
 8009f4c:	20009264 	.word	0x20009264
 8009f50:	20009260 	.word	0x20009260
 8009f54:	20000024 	.word	0x20000024

08009f58 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f58:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f5c:	2b0f      	cmp	r3, #15
 8009f5e:	d90e      	bls.n	8009f7e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f60:	4a11      	ldr	r2, [pc, #68]	@ (8009fa8 <vPortValidateInterruptPriority+0x50>)
 8009f62:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f64:	4a11      	ldr	r2, [pc, #68]	@ (8009fac <vPortValidateInterruptPriority+0x54>)
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d908      	bls.n	8009f7e <vPortValidateInterruptPriority+0x26>
 8009f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	e7fe      	b.n	8009f7c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f82:	4a0b      	ldr	r2, [pc, #44]	@ (8009fb0 <vPortValidateInterruptPriority+0x58>)
 8009f84:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009f88:	6812      	ldr	r2, [r2, #0]
 8009f8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d908      	bls.n	8009fa4 <vPortValidateInterruptPriority+0x4c>
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	e7fe      	b.n	8009fa2 <vPortValidateInterruptPriority+0x4a>
	}
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	e000e3f0 	.word	0xe000e3f0
 8009fac:	20009264 	.word	0x20009264
 8009fb0:	20009260 	.word	0x20009260

08009fb4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fb4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fb6:	4b10      	ldr	r3, [pc, #64]	@ (8009ff8 <prvInsertBlockIntoFreeList+0x44>)
 8009fb8:	461a      	mov	r2, r3
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4283      	cmp	r3, r0
 8009fbe:	d3fb      	bcc.n	8009fb8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fc0:	6854      	ldr	r4, [r2, #4]
 8009fc2:	1911      	adds	r1, r2, r4
 8009fc4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fc6:	bf01      	itttt	eq
 8009fc8:	6841      	ldreq	r1, [r0, #4]
 8009fca:	4610      	moveq	r0, r2
 8009fcc:	1909      	addeq	r1, r1, r4
 8009fce:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fd0:	6844      	ldr	r4, [r0, #4]
 8009fd2:	1901      	adds	r1, r0, r4
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	d10c      	bne.n	8009ff2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fd8:	4908      	ldr	r1, [pc, #32]	@ (8009ffc <prvInsertBlockIntoFreeList+0x48>)
 8009fda:	6809      	ldr	r1, [r1, #0]
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	d003      	beq.n	8009fe8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fe0:	6859      	ldr	r1, [r3, #4]
 8009fe2:	4421      	add	r1, r4
 8009fe4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fe6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fe8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fea:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fec:	bf18      	it	ne
 8009fee:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ff0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	e7f8      	b.n	8009fe8 <prvInsertBlockIntoFreeList+0x34>
 8009ff6:	bf00      	nop
 8009ff8:	20009278 	.word	0x20009278
 8009ffc:	20009274 	.word	0x20009274

0800a000 <pvPortMalloc>:
{
 800a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a004:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a006:	f7ff f9b5 	bl	8009374 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a00a:	4940      	ldr	r1, [pc, #256]	@ (800a10c <pvPortMalloc+0x10c>)
 800a00c:	4d40      	ldr	r5, [pc, #256]	@ (800a110 <pvPortMalloc+0x110>)
 800a00e:	680b      	ldr	r3, [r1, #0]
 800a010:	bb0b      	cbnz	r3, 800a056 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a012:	4a40      	ldr	r2, [pc, #256]	@ (800a114 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a014:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a016:	bf1f      	itttt	ne
 800a018:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a01a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a01e:	f202 620e 	addwne	r2, r2, #1550	@ 0x60e
 800a022:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a024:	bf0c      	ite	eq
 800a026:	f240 630e 	movweq	r3, #1550	@ 0x60e
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a02a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a02c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a02e:	4e3a      	ldr	r6, [pc, #232]	@ (800a118 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800a030:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a032:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800a036:	2000      	movs	r0, #0
 800a038:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a03a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800a03c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a040:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a042:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800a046:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a048:	4b34      	ldr	r3, [pc, #208]	@ (800a11c <pvPortMalloc+0x11c>)
 800a04a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a04c:	4b34      	ldr	r3, [pc, #208]	@ (800a120 <pvPortMalloc+0x120>)
 800a04e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a054:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a056:	682e      	ldr	r6, [r5, #0]
 800a058:	4226      	tst	r6, r4
 800a05a:	d152      	bne.n	800a102 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800a05c:	2c00      	cmp	r4, #0
 800a05e:	d043      	beq.n	800a0e8 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800a060:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a064:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a066:	bf1c      	itt	ne
 800a068:	f023 0307 	bicne.w	r3, r3, #7
 800a06c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d047      	beq.n	800a102 <pvPortMalloc+0x102>
 800a072:	4f2b      	ldr	r7, [pc, #172]	@ (800a120 <pvPortMalloc+0x120>)
 800a074:	683c      	ldr	r4, [r7, #0]
 800a076:	429c      	cmp	r4, r3
 800a078:	d343      	bcc.n	800a102 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800a07a:	4a27      	ldr	r2, [pc, #156]	@ (800a118 <pvPortMalloc+0x118>)
 800a07c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a07e:	6868      	ldr	r0, [r5, #4]
 800a080:	4298      	cmp	r0, r3
 800a082:	d204      	bcs.n	800a08e <pvPortMalloc+0x8e>
 800a084:	f8d5 c000 	ldr.w	ip, [r5]
 800a088:	f1bc 0f00 	cmp.w	ip, #0
 800a08c:	d115      	bne.n	800a0ba <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a08e:	6809      	ldr	r1, [r1, #0]
 800a090:	42a9      	cmp	r1, r5
 800a092:	d036      	beq.n	800a102 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a094:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a096:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a09a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a09c:	1ac2      	subs	r2, r0, r3
 800a09e:	2a10      	cmp	r2, #16
 800a0a0:	d912      	bls.n	800a0c8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0a2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a4:	0741      	lsls	r1, r0, #29
 800a0a6:	d00b      	beq.n	800a0c0 <pvPortMalloc+0xc0>
 800a0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	e7fe      	b.n	800a0b8 <pvPortMalloc+0xb8>
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4665      	mov	r5, ip
 800a0be:	e7de      	b.n	800a07e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0c0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0c2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0c4:	f7ff ff76 	bl	8009fb4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0c8:	4914      	ldr	r1, [pc, #80]	@ (800a11c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0ca:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0cc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0ce:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0d0:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0d2:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 800a0d6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0da:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0dc:	bf38      	it	cc
 800a0de:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0e0:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0e2:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800a0e6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a0e8:	f7ff f9e8 	bl	80094bc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0ec:	0763      	lsls	r3, r4, #29
 800a0ee:	d00a      	beq.n	800a106 <pvPortMalloc+0x106>
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	e7fe      	b.n	800a100 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800a102:	2400      	movs	r4, #0
 800a104:	e7f0      	b.n	800a0e8 <pvPortMalloc+0xe8>
}
 800a106:	4620      	mov	r0, r4
 800a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a10c:	20009274 	.word	0x20009274
 800a110:	20009268 	.word	0x20009268
 800a114:	20009280 	.word	0x20009280
 800a118:	20009278 	.word	0x20009278
 800a11c:	2000926c 	.word	0x2000926c
 800a120:	20009270 	.word	0x20009270

0800a124 <vPortFree>:
{
 800a124:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a126:	4604      	mov	r4, r0
 800a128:	b370      	cbz	r0, 800a188 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a12a:	4a18      	ldr	r2, [pc, #96]	@ (800a18c <vPortFree+0x68>)
 800a12c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	4213      	tst	r3, r2
 800a134:	d108      	bne.n	800a148 <vPortFree+0x24>
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	e7fe      	b.n	800a146 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a148:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a14c:	b141      	cbz	r1, 800a160 <vPortFree+0x3c>
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	e7fe      	b.n	800a15e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a160:	ea23 0302 	bic.w	r3, r3, r2
 800a164:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a168:	f7ff f904 	bl	8009374 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a16c:	4a08      	ldr	r2, [pc, #32]	@ (800a190 <vPortFree+0x6c>)
 800a16e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a172:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a174:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a178:	440b      	add	r3, r1
 800a17a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a17c:	f7ff ff1a 	bl	8009fb4 <prvInsertBlockIntoFreeList>
}
 800a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a184:	f7ff b99a 	b.w	80094bc <xTaskResumeAll>
}
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	bf00      	nop
 800a18c:	20009268 	.word	0x20009268
 800a190:	20009270 	.word	0x20009270

0800a194 <atof>:
 800a194:	2100      	movs	r1, #0
 800a196:	f000 becd 	b.w	800af34 <strtod>

0800a19a <atoi>:
 800a19a:	220a      	movs	r2, #10
 800a19c:	2100      	movs	r1, #0
 800a19e:	f000 bf51 	b.w	800b044 <strtol>
	...

0800a1a4 <malloc>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	@ (800a1b0 <malloc+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f000 b82d 	b.w	800a208 <_malloc_r>
 800a1ae:	bf00      	nop
 800a1b0:	200001a8 	.word	0x200001a8

0800a1b4 <free>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	@ (800a1c0 <free+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f003 bc3d 	b.w	800da38 <_free_r>
 800a1be:	bf00      	nop
 800a1c0:	200001a8 	.word	0x200001a8

0800a1c4 <sbrk_aligned>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	4e0f      	ldr	r6, [pc, #60]	@ (800a204 <sbrk_aligned+0x40>)
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	6831      	ldr	r1, [r6, #0]
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	b911      	cbnz	r1, 800a1d6 <sbrk_aligned+0x12>
 800a1d0:	f002 fd6c 	bl	800ccac <_sbrk_r>
 800a1d4:	6030      	str	r0, [r6, #0]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f002 fd67 	bl	800ccac <_sbrk_r>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	d103      	bne.n	800a1ea <sbrk_aligned+0x26>
 800a1e2:	f04f 34ff 	mov.w	r4, #4294967295
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ea:	1cc4      	adds	r4, r0, #3
 800a1ec:	f024 0403 	bic.w	r4, r4, #3
 800a1f0:	42a0      	cmp	r0, r4
 800a1f2:	d0f8      	beq.n	800a1e6 <sbrk_aligned+0x22>
 800a1f4:	1a21      	subs	r1, r4, r0
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f002 fd58 	bl	800ccac <_sbrk_r>
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d1f2      	bne.n	800a1e6 <sbrk_aligned+0x22>
 800a200:	e7ef      	b.n	800a1e2 <sbrk_aligned+0x1e>
 800a202:	bf00      	nop
 800a204:	20009890 	.word	0x20009890

0800a208 <_malloc_r>:
 800a208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a20c:	1ccd      	adds	r5, r1, #3
 800a20e:	f025 0503 	bic.w	r5, r5, #3
 800a212:	3508      	adds	r5, #8
 800a214:	2d0c      	cmp	r5, #12
 800a216:	bf38      	it	cc
 800a218:	250c      	movcc	r5, #12
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	4606      	mov	r6, r0
 800a21e:	db01      	blt.n	800a224 <_malloc_r+0x1c>
 800a220:	42a9      	cmp	r1, r5
 800a222:	d904      	bls.n	800a22e <_malloc_r+0x26>
 800a224:	230c      	movs	r3, #12
 800a226:	6033      	str	r3, [r6, #0]
 800a228:	2000      	movs	r0, #0
 800a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a304 <_malloc_r+0xfc>
 800a232:	f000 f869 	bl	800a308 <__malloc_lock>
 800a236:	f8d8 3000 	ldr.w	r3, [r8]
 800a23a:	461c      	mov	r4, r3
 800a23c:	bb44      	cbnz	r4, 800a290 <_malloc_r+0x88>
 800a23e:	4629      	mov	r1, r5
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff ffbf 	bl	800a1c4 <sbrk_aligned>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	4604      	mov	r4, r0
 800a24a:	d158      	bne.n	800a2fe <_malloc_r+0xf6>
 800a24c:	f8d8 4000 	ldr.w	r4, [r8]
 800a250:	4627      	mov	r7, r4
 800a252:	2f00      	cmp	r7, #0
 800a254:	d143      	bne.n	800a2de <_malloc_r+0xd6>
 800a256:	2c00      	cmp	r4, #0
 800a258:	d04b      	beq.n	800a2f2 <_malloc_r+0xea>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	4639      	mov	r1, r7
 800a25e:	4630      	mov	r0, r6
 800a260:	eb04 0903 	add.w	r9, r4, r3
 800a264:	f002 fd22 	bl	800ccac <_sbrk_r>
 800a268:	4581      	cmp	r9, r0
 800a26a:	d142      	bne.n	800a2f2 <_malloc_r+0xea>
 800a26c:	6821      	ldr	r1, [r4, #0]
 800a26e:	1a6d      	subs	r5, r5, r1
 800a270:	4629      	mov	r1, r5
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff ffa6 	bl	800a1c4 <sbrk_aligned>
 800a278:	3001      	adds	r0, #1
 800a27a:	d03a      	beq.n	800a2f2 <_malloc_r+0xea>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	442b      	add	r3, r5
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	f8d8 3000 	ldr.w	r3, [r8]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	bb62      	cbnz	r2, 800a2e4 <_malloc_r+0xdc>
 800a28a:	f8c8 7000 	str.w	r7, [r8]
 800a28e:	e00f      	b.n	800a2b0 <_malloc_r+0xa8>
 800a290:	6822      	ldr	r2, [r4, #0]
 800a292:	1b52      	subs	r2, r2, r5
 800a294:	d420      	bmi.n	800a2d8 <_malloc_r+0xd0>
 800a296:	2a0b      	cmp	r2, #11
 800a298:	d917      	bls.n	800a2ca <_malloc_r+0xc2>
 800a29a:	1961      	adds	r1, r4, r5
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	6025      	str	r5, [r4, #0]
 800a2a0:	bf18      	it	ne
 800a2a2:	6059      	strne	r1, [r3, #4]
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	bf08      	it	eq
 800a2a8:	f8c8 1000 	streq.w	r1, [r8]
 800a2ac:	5162      	str	r2, [r4, r5]
 800a2ae:	604b      	str	r3, [r1, #4]
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 f82f 	bl	800a314 <__malloc_unlock>
 800a2b6:	f104 000b 	add.w	r0, r4, #11
 800a2ba:	1d23      	adds	r3, r4, #4
 800a2bc:	f020 0007 	bic.w	r0, r0, #7
 800a2c0:	1ac2      	subs	r2, r0, r3
 800a2c2:	bf1c      	itt	ne
 800a2c4:	1a1b      	subne	r3, r3, r0
 800a2c6:	50a3      	strne	r3, [r4, r2]
 800a2c8:	e7af      	b.n	800a22a <_malloc_r+0x22>
 800a2ca:	6862      	ldr	r2, [r4, #4]
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	bf0c      	ite	eq
 800a2d0:	f8c8 2000 	streq.w	r2, [r8]
 800a2d4:	605a      	strne	r2, [r3, #4]
 800a2d6:	e7eb      	b.n	800a2b0 <_malloc_r+0xa8>
 800a2d8:	4623      	mov	r3, r4
 800a2da:	6864      	ldr	r4, [r4, #4]
 800a2dc:	e7ae      	b.n	800a23c <_malloc_r+0x34>
 800a2de:	463c      	mov	r4, r7
 800a2e0:	687f      	ldr	r7, [r7, #4]
 800a2e2:	e7b6      	b.n	800a252 <_malloc_r+0x4a>
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	d1fb      	bne.n	800a2e4 <_malloc_r+0xdc>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	6053      	str	r3, [r2, #4]
 800a2f0:	e7de      	b.n	800a2b0 <_malloc_r+0xa8>
 800a2f2:	230c      	movs	r3, #12
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f000 f80c 	bl	800a314 <__malloc_unlock>
 800a2fc:	e794      	b.n	800a228 <_malloc_r+0x20>
 800a2fe:	6005      	str	r5, [r0, #0]
 800a300:	e7d6      	b.n	800a2b0 <_malloc_r+0xa8>
 800a302:	bf00      	nop
 800a304:	20009894 	.word	0x20009894

0800a308 <__malloc_lock>:
 800a308:	4801      	ldr	r0, [pc, #4]	@ (800a310 <__malloc_lock+0x8>)
 800a30a:	f7fb b8c0 	b.w	800548e <__retarget_lock_acquire_recursive>
 800a30e:	bf00      	nop
 800a310:	20008760 	.word	0x20008760

0800a314 <__malloc_unlock>:
 800a314:	4801      	ldr	r0, [pc, #4]	@ (800a31c <__malloc_unlock+0x8>)
 800a316:	f7fb b8c6 	b.w	80054a6 <__retarget_lock_release_recursive>
 800a31a:	bf00      	nop
 800a31c:	20008760 	.word	0x20008760

0800a320 <sulp>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	ec45 4b10 	vmov	d0, r4, r5
 800a32a:	4616      	mov	r6, r2
 800a32c:	f004 fad2 	bl	800e8d4 <__ulp>
 800a330:	ec51 0b10 	vmov	r0, r1, d0
 800a334:	b17e      	cbz	r6, 800a356 <sulp+0x36>
 800a336:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a33a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a33e:	2b00      	cmp	r3, #0
 800a340:	dd09      	ble.n	800a356 <sulp+0x36>
 800a342:	051b      	lsls	r3, r3, #20
 800a344:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a348:	2400      	movs	r4, #0
 800a34a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	f7f6 f961 	bl	8000618 <__aeabi_dmul>
 800a356:	ec41 0b10 	vmov	d0, r0, r1
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	0000      	movs	r0, r0
	...

0800a360 <_strtod_l>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	b09f      	sub	sp, #124	@ 0x7c
 800a366:	460c      	mov	r4, r1
 800a368:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a36a:	2200      	movs	r2, #0
 800a36c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a36e:	9005      	str	r0, [sp, #20]
 800a370:	f04f 0a00 	mov.w	sl, #0
 800a374:	f04f 0b00 	mov.w	fp, #0
 800a378:	460a      	mov	r2, r1
 800a37a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a37c:	7811      	ldrb	r1, [r2, #0]
 800a37e:	292b      	cmp	r1, #43	@ 0x2b
 800a380:	d04a      	beq.n	800a418 <_strtod_l+0xb8>
 800a382:	d838      	bhi.n	800a3f6 <_strtod_l+0x96>
 800a384:	290d      	cmp	r1, #13
 800a386:	d832      	bhi.n	800a3ee <_strtod_l+0x8e>
 800a388:	2908      	cmp	r1, #8
 800a38a:	d832      	bhi.n	800a3f2 <_strtod_l+0x92>
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d03b      	beq.n	800a408 <_strtod_l+0xa8>
 800a390:	2200      	movs	r2, #0
 800a392:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a394:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a396:	782a      	ldrb	r2, [r5, #0]
 800a398:	2a30      	cmp	r2, #48	@ 0x30
 800a39a:	f040 80b3 	bne.w	800a504 <_strtod_l+0x1a4>
 800a39e:	786a      	ldrb	r2, [r5, #1]
 800a3a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3a4:	2a58      	cmp	r2, #88	@ 0x58
 800a3a6:	d16e      	bne.n	800a486 <_strtod_l+0x126>
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4a8e      	ldr	r2, [pc, #568]	@ (800a5ec <_strtod_l+0x28c>)
 800a3b4:	9805      	ldr	r0, [sp, #20]
 800a3b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a3b8:	a919      	add	r1, sp, #100	@ 0x64
 800a3ba:	f003 fbef 	bl	800db9c <__gethex>
 800a3be:	f010 060f 	ands.w	r6, r0, #15
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	d005      	beq.n	800a3d2 <_strtod_l+0x72>
 800a3c6:	2e06      	cmp	r6, #6
 800a3c8:	d128      	bne.n	800a41c <_strtod_l+0xbc>
 800a3ca:	3501      	adds	r5, #1
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800a3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 858e 	bne.w	800aef6 <_strtod_l+0xb96>
 800a3da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3dc:	b1cb      	cbz	r3, 800a412 <_strtod_l+0xb2>
 800a3de:	4652      	mov	r2, sl
 800a3e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a3e4:	ec43 2b10 	vmov	d0, r2, r3
 800a3e8:	b01f      	add	sp, #124	@ 0x7c
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	2920      	cmp	r1, #32
 800a3f0:	d1ce      	bne.n	800a390 <_strtod_l+0x30>
 800a3f2:	3201      	adds	r2, #1
 800a3f4:	e7c1      	b.n	800a37a <_strtod_l+0x1a>
 800a3f6:	292d      	cmp	r1, #45	@ 0x2d
 800a3f8:	d1ca      	bne.n	800a390 <_strtod_l+0x30>
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3fe:	1c51      	adds	r1, r2, #1
 800a400:	9119      	str	r1, [sp, #100]	@ 0x64
 800a402:	7852      	ldrb	r2, [r2, #1]
 800a404:	2a00      	cmp	r2, #0
 800a406:	d1c5      	bne.n	800a394 <_strtod_l+0x34>
 800a408:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a40a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 8570 	bne.w	800aef2 <_strtod_l+0xb92>
 800a412:	4652      	mov	r2, sl
 800a414:	465b      	mov	r3, fp
 800a416:	e7e5      	b.n	800a3e4 <_strtod_l+0x84>
 800a418:	2100      	movs	r1, #0
 800a41a:	e7ef      	b.n	800a3fc <_strtod_l+0x9c>
 800a41c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a41e:	b13a      	cbz	r2, 800a430 <_strtod_l+0xd0>
 800a420:	2135      	movs	r1, #53	@ 0x35
 800a422:	a81c      	add	r0, sp, #112	@ 0x70
 800a424:	f004 fb50 	bl	800eac8 <__copybits>
 800a428:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a42a:	9805      	ldr	r0, [sp, #20]
 800a42c:	f003 ff1e 	bl	800e26c <_Bfree>
 800a430:	3e01      	subs	r6, #1
 800a432:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a434:	2e04      	cmp	r6, #4
 800a436:	d806      	bhi.n	800a446 <_strtod_l+0xe6>
 800a438:	e8df f006 	tbb	[pc, r6]
 800a43c:	201d0314 	.word	0x201d0314
 800a440:	14          	.byte	0x14
 800a441:	00          	.byte	0x00
 800a442:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a446:	05e1      	lsls	r1, r4, #23
 800a448:	bf48      	it	mi
 800a44a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a44e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a452:	0d1b      	lsrs	r3, r3, #20
 800a454:	051b      	lsls	r3, r3, #20
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1bb      	bne.n	800a3d2 <_strtod_l+0x72>
 800a45a:	f002 fc49 	bl	800ccf0 <__errno>
 800a45e:	2322      	movs	r3, #34	@ 0x22
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	e7b6      	b.n	800a3d2 <_strtod_l+0x72>
 800a464:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a468:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a46c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a470:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a474:	e7e7      	b.n	800a446 <_strtod_l+0xe6>
 800a476:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a5f4 <_strtod_l+0x294>
 800a47a:	e7e4      	b.n	800a446 <_strtod_l+0xe6>
 800a47c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a480:	f04f 3aff 	mov.w	sl, #4294967295
 800a484:	e7df      	b.n	800a446 <_strtod_l+0xe6>
 800a486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a48c:	785b      	ldrb	r3, [r3, #1]
 800a48e:	2b30      	cmp	r3, #48	@ 0x30
 800a490:	d0f9      	beq.n	800a486 <_strtod_l+0x126>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d09d      	beq.n	800a3d2 <_strtod_l+0x72>
 800a496:	2301      	movs	r3, #1
 800a498:	9309      	str	r3, [sp, #36]	@ 0x24
 800a49a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a49c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9308      	str	r3, [sp, #32]
 800a4a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a4:	461f      	mov	r7, r3
 800a4a6:	220a      	movs	r2, #10
 800a4a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a4aa:	7805      	ldrb	r5, [r0, #0]
 800a4ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a4b0:	b2d9      	uxtb	r1, r3
 800a4b2:	2909      	cmp	r1, #9
 800a4b4:	d928      	bls.n	800a508 <_strtod_l+0x1a8>
 800a4b6:	494e      	ldr	r1, [pc, #312]	@ (800a5f0 <_strtod_l+0x290>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f001 fe0c 	bl	800c0d6 <strncmp>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d032      	beq.n	800a528 <_strtod_l+0x1c8>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4681      	mov	r9, r0
 800a4c8:	463d      	mov	r5, r7
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2a65      	cmp	r2, #101	@ 0x65
 800a4ce:	d001      	beq.n	800a4d4 <_strtod_l+0x174>
 800a4d0:	2a45      	cmp	r2, #69	@ 0x45
 800a4d2:	d114      	bne.n	800a4fe <_strtod_l+0x19e>
 800a4d4:	b91d      	cbnz	r5, 800a4de <_strtod_l+0x17e>
 800a4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d8:	4302      	orrs	r2, r0
 800a4da:	d095      	beq.n	800a408 <_strtod_l+0xa8>
 800a4dc:	2500      	movs	r5, #0
 800a4de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a4e0:	1c62      	adds	r2, r4, #1
 800a4e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4e4:	7862      	ldrb	r2, [r4, #1]
 800a4e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a4e8:	d077      	beq.n	800a5da <_strtod_l+0x27a>
 800a4ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800a4ec:	d07b      	beq.n	800a5e6 <_strtod_l+0x286>
 800a4ee:	f04f 0c00 	mov.w	ip, #0
 800a4f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4f6:	2909      	cmp	r1, #9
 800a4f8:	f240 8082 	bls.w	800a600 <_strtod_l+0x2a0>
 800a4fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4fe:	f04f 0800 	mov.w	r8, #0
 800a502:	e0a2      	b.n	800a64a <_strtod_l+0x2ea>
 800a504:	2300      	movs	r3, #0
 800a506:	e7c7      	b.n	800a498 <_strtod_l+0x138>
 800a508:	2f08      	cmp	r7, #8
 800a50a:	bfd5      	itete	le
 800a50c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a50e:	9908      	ldrgt	r1, [sp, #32]
 800a510:	fb02 3301 	mlale	r3, r2, r1, r3
 800a514:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a518:	f100 0001 	add.w	r0, r0, #1
 800a51c:	bfd4      	ite	le
 800a51e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a520:	9308      	strgt	r3, [sp, #32]
 800a522:	3701      	adds	r7, #1
 800a524:	9019      	str	r0, [sp, #100]	@ 0x64
 800a526:	e7bf      	b.n	800a4a8 <_strtod_l+0x148>
 800a528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a52e:	785a      	ldrb	r2, [r3, #1]
 800a530:	b37f      	cbz	r7, 800a592 <_strtod_l+0x232>
 800a532:	4681      	mov	r9, r0
 800a534:	463d      	mov	r5, r7
 800a536:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a53a:	2b09      	cmp	r3, #9
 800a53c:	d912      	bls.n	800a564 <_strtod_l+0x204>
 800a53e:	2301      	movs	r3, #1
 800a540:	e7c4      	b.n	800a4cc <_strtod_l+0x16c>
 800a542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	9219      	str	r2, [sp, #100]	@ 0x64
 800a548:	785a      	ldrb	r2, [r3, #1]
 800a54a:	3001      	adds	r0, #1
 800a54c:	2a30      	cmp	r2, #48	@ 0x30
 800a54e:	d0f8      	beq.n	800a542 <_strtod_l+0x1e2>
 800a550:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a554:	2b08      	cmp	r3, #8
 800a556:	f200 84d3 	bhi.w	800af00 <_strtod_l+0xba0>
 800a55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a55c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a55e:	4681      	mov	r9, r0
 800a560:	2000      	movs	r0, #0
 800a562:	4605      	mov	r5, r0
 800a564:	3a30      	subs	r2, #48	@ 0x30
 800a566:	f100 0301 	add.w	r3, r0, #1
 800a56a:	d02a      	beq.n	800a5c2 <_strtod_l+0x262>
 800a56c:	4499      	add	r9, r3
 800a56e:	eb00 0c05 	add.w	ip, r0, r5
 800a572:	462b      	mov	r3, r5
 800a574:	210a      	movs	r1, #10
 800a576:	4563      	cmp	r3, ip
 800a578:	d10d      	bne.n	800a596 <_strtod_l+0x236>
 800a57a:	1c69      	adds	r1, r5, #1
 800a57c:	4401      	add	r1, r0
 800a57e:	4428      	add	r0, r5
 800a580:	2808      	cmp	r0, #8
 800a582:	dc16      	bgt.n	800a5b2 <_strtod_l+0x252>
 800a584:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a586:	230a      	movs	r3, #10
 800a588:	fb03 2300 	mla	r3, r3, r0, r2
 800a58c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a58e:	2300      	movs	r3, #0
 800a590:	e018      	b.n	800a5c4 <_strtod_l+0x264>
 800a592:	4638      	mov	r0, r7
 800a594:	e7da      	b.n	800a54c <_strtod_l+0x1ec>
 800a596:	2b08      	cmp	r3, #8
 800a598:	f103 0301 	add.w	r3, r3, #1
 800a59c:	dc03      	bgt.n	800a5a6 <_strtod_l+0x246>
 800a59e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a5a0:	434e      	muls	r6, r1
 800a5a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a5a4:	e7e7      	b.n	800a576 <_strtod_l+0x216>
 800a5a6:	2b10      	cmp	r3, #16
 800a5a8:	bfde      	ittt	le
 800a5aa:	9e08      	ldrle	r6, [sp, #32]
 800a5ac:	434e      	mulle	r6, r1
 800a5ae:	9608      	strle	r6, [sp, #32]
 800a5b0:	e7e1      	b.n	800a576 <_strtod_l+0x216>
 800a5b2:	280f      	cmp	r0, #15
 800a5b4:	dceb      	bgt.n	800a58e <_strtod_l+0x22e>
 800a5b6:	9808      	ldr	r0, [sp, #32]
 800a5b8:	230a      	movs	r3, #10
 800a5ba:	fb03 2300 	mla	r3, r3, r0, r2
 800a5be:	9308      	str	r3, [sp, #32]
 800a5c0:	e7e5      	b.n	800a58e <_strtod_l+0x22e>
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5c6:	1c50      	adds	r0, r2, #1
 800a5c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5ca:	7852      	ldrb	r2, [r2, #1]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	e7b1      	b.n	800a536 <_strtod_l+0x1d6>
 800a5d2:	f04f 0900 	mov.w	r9, #0
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e77d      	b.n	800a4d6 <_strtod_l+0x176>
 800a5da:	f04f 0c00 	mov.w	ip, #0
 800a5de:	1ca2      	adds	r2, r4, #2
 800a5e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5e2:	78a2      	ldrb	r2, [r4, #2]
 800a5e4:	e785      	b.n	800a4f2 <_strtod_l+0x192>
 800a5e6:	f04f 0c01 	mov.w	ip, #1
 800a5ea:	e7f8      	b.n	800a5de <_strtod_l+0x27e>
 800a5ec:	080126f8 	.word	0x080126f8
 800a5f0:	080126e0 	.word	0x080126e0
 800a5f4:	7ff00000 	.word	0x7ff00000
 800a5f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5fa:	1c51      	adds	r1, r2, #1
 800a5fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5fe:	7852      	ldrb	r2, [r2, #1]
 800a600:	2a30      	cmp	r2, #48	@ 0x30
 800a602:	d0f9      	beq.n	800a5f8 <_strtod_l+0x298>
 800a604:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a608:	2908      	cmp	r1, #8
 800a60a:	f63f af78 	bhi.w	800a4fe <_strtod_l+0x19e>
 800a60e:	3a30      	subs	r2, #48	@ 0x30
 800a610:	920e      	str	r2, [sp, #56]	@ 0x38
 800a612:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a614:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a616:	f04f 080a 	mov.w	r8, #10
 800a61a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a61c:	1c56      	adds	r6, r2, #1
 800a61e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a620:	7852      	ldrb	r2, [r2, #1]
 800a622:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a626:	f1be 0f09 	cmp.w	lr, #9
 800a62a:	d939      	bls.n	800a6a0 <_strtod_l+0x340>
 800a62c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a62e:	1a76      	subs	r6, r6, r1
 800a630:	2e08      	cmp	r6, #8
 800a632:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a636:	dc03      	bgt.n	800a640 <_strtod_l+0x2e0>
 800a638:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a63a:	4588      	cmp	r8, r1
 800a63c:	bfa8      	it	ge
 800a63e:	4688      	movge	r8, r1
 800a640:	f1bc 0f00 	cmp.w	ip, #0
 800a644:	d001      	beq.n	800a64a <_strtod_l+0x2ea>
 800a646:	f1c8 0800 	rsb	r8, r8, #0
 800a64a:	2d00      	cmp	r5, #0
 800a64c:	d14e      	bne.n	800a6ec <_strtod_l+0x38c>
 800a64e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a650:	4308      	orrs	r0, r1
 800a652:	f47f aebe 	bne.w	800a3d2 <_strtod_l+0x72>
 800a656:	2b00      	cmp	r3, #0
 800a658:	f47f aed6 	bne.w	800a408 <_strtod_l+0xa8>
 800a65c:	2a69      	cmp	r2, #105	@ 0x69
 800a65e:	d028      	beq.n	800a6b2 <_strtod_l+0x352>
 800a660:	dc25      	bgt.n	800a6ae <_strtod_l+0x34e>
 800a662:	2a49      	cmp	r2, #73	@ 0x49
 800a664:	d025      	beq.n	800a6b2 <_strtod_l+0x352>
 800a666:	2a4e      	cmp	r2, #78	@ 0x4e
 800a668:	f47f aece 	bne.w	800a408 <_strtod_l+0xa8>
 800a66c:	499b      	ldr	r1, [pc, #620]	@ (800a8dc <_strtod_l+0x57c>)
 800a66e:	a819      	add	r0, sp, #100	@ 0x64
 800a670:	f003 fcb6 	bl	800dfe0 <__match>
 800a674:	2800      	cmp	r0, #0
 800a676:	f43f aec7 	beq.w	800a408 <_strtod_l+0xa8>
 800a67a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b28      	cmp	r3, #40	@ 0x28
 800a680:	d12e      	bne.n	800a6e0 <_strtod_l+0x380>
 800a682:	4997      	ldr	r1, [pc, #604]	@ (800a8e0 <_strtod_l+0x580>)
 800a684:	aa1c      	add	r2, sp, #112	@ 0x70
 800a686:	a819      	add	r0, sp, #100	@ 0x64
 800a688:	f003 fcbe 	bl	800e008 <__hexnan>
 800a68c:	2805      	cmp	r0, #5
 800a68e:	d127      	bne.n	800a6e0 <_strtod_l+0x380>
 800a690:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a692:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a696:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a69a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a69e:	e698      	b.n	800a3d2 <_strtod_l+0x72>
 800a6a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a6a2:	fb08 2101 	mla	r1, r8, r1, r2
 800a6a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a6aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ac:	e7b5      	b.n	800a61a <_strtod_l+0x2ba>
 800a6ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800a6b0:	e7da      	b.n	800a668 <_strtod_l+0x308>
 800a6b2:	498c      	ldr	r1, [pc, #560]	@ (800a8e4 <_strtod_l+0x584>)
 800a6b4:	a819      	add	r0, sp, #100	@ 0x64
 800a6b6:	f003 fc93 	bl	800dfe0 <__match>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f43f aea4 	beq.w	800a408 <_strtod_l+0xa8>
 800a6c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6c2:	4989      	ldr	r1, [pc, #548]	@ (800a8e8 <_strtod_l+0x588>)
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	a819      	add	r0, sp, #100	@ 0x64
 800a6c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6ca:	f003 fc89 	bl	800dfe0 <__match>
 800a6ce:	b910      	cbnz	r0, 800a6d6 <_strtod_l+0x376>
 800a6d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a8f8 <_strtod_l+0x598>
 800a6da:	f04f 0a00 	mov.w	sl, #0
 800a6de:	e678      	b.n	800a3d2 <_strtod_l+0x72>
 800a6e0:	4882      	ldr	r0, [pc, #520]	@ (800a8ec <_strtod_l+0x58c>)
 800a6e2:	f002 fb45 	bl	800cd70 <nan>
 800a6e6:	ec5b ab10 	vmov	sl, fp, d0
 800a6ea:	e672      	b.n	800a3d2 <_strtod_l+0x72>
 800a6ec:	eba8 0309 	sub.w	r3, r8, r9
 800a6f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f4:	2f00      	cmp	r7, #0
 800a6f6:	bf08      	it	eq
 800a6f8:	462f      	moveq	r7, r5
 800a6fa:	2d10      	cmp	r5, #16
 800a6fc:	462c      	mov	r4, r5
 800a6fe:	bfa8      	it	ge
 800a700:	2410      	movge	r4, #16
 800a702:	f7f5 ff0f 	bl	8000524 <__aeabi_ui2d>
 800a706:	2d09      	cmp	r5, #9
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	dc13      	bgt.n	800a736 <_strtod_l+0x3d6>
 800a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	f43f ae5e 	beq.w	800a3d2 <_strtod_l+0x72>
 800a716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a718:	dd78      	ble.n	800a80c <_strtod_l+0x4ac>
 800a71a:	2b16      	cmp	r3, #22
 800a71c:	dc5f      	bgt.n	800a7de <_strtod_l+0x47e>
 800a71e:	4974      	ldr	r1, [pc, #464]	@ (800a8f0 <_strtod_l+0x590>)
 800a720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	f7f5 ff74 	bl	8000618 <__aeabi_dmul>
 800a730:	4682      	mov	sl, r0
 800a732:	468b      	mov	fp, r1
 800a734:	e64d      	b.n	800a3d2 <_strtod_l+0x72>
 800a736:	4b6e      	ldr	r3, [pc, #440]	@ (800a8f0 <_strtod_l+0x590>)
 800a738:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a73c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a740:	f7f5 ff6a 	bl	8000618 <__aeabi_dmul>
 800a744:	4682      	mov	sl, r0
 800a746:	9808      	ldr	r0, [sp, #32]
 800a748:	468b      	mov	fp, r1
 800a74a:	f7f5 feeb 	bl	8000524 <__aeabi_ui2d>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4650      	mov	r0, sl
 800a754:	4659      	mov	r1, fp
 800a756:	f7f5 fda9 	bl	80002ac <__adddf3>
 800a75a:	2d0f      	cmp	r5, #15
 800a75c:	4682      	mov	sl, r0
 800a75e:	468b      	mov	fp, r1
 800a760:	ddd5      	ble.n	800a70e <_strtod_l+0x3ae>
 800a762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a764:	1b2c      	subs	r4, r5, r4
 800a766:	441c      	add	r4, r3
 800a768:	2c00      	cmp	r4, #0
 800a76a:	f340 8096 	ble.w	800a89a <_strtod_l+0x53a>
 800a76e:	f014 030f 	ands.w	r3, r4, #15
 800a772:	d00a      	beq.n	800a78a <_strtod_l+0x42a>
 800a774:	495e      	ldr	r1, [pc, #376]	@ (800a8f0 <_strtod_l+0x590>)
 800a776:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a77a:	4652      	mov	r2, sl
 800a77c:	465b      	mov	r3, fp
 800a77e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a782:	f7f5 ff49 	bl	8000618 <__aeabi_dmul>
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	f034 040f 	bics.w	r4, r4, #15
 800a78e:	d073      	beq.n	800a878 <_strtod_l+0x518>
 800a790:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a794:	dd48      	ble.n	800a828 <_strtod_l+0x4c8>
 800a796:	2400      	movs	r4, #0
 800a798:	46a0      	mov	r8, r4
 800a79a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a79c:	46a1      	mov	r9, r4
 800a79e:	9a05      	ldr	r2, [sp, #20]
 800a7a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a8f8 <_strtod_l+0x598>
 800a7a4:	2322      	movs	r3, #34	@ 0x22
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	f04f 0a00 	mov.w	sl, #0
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f43f ae0f 	beq.w	800a3d2 <_strtod_l+0x72>
 800a7b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b6:	9805      	ldr	r0, [sp, #20]
 800a7b8:	f003 fd58 	bl	800e26c <_Bfree>
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	4649      	mov	r1, r9
 800a7c0:	f003 fd54 	bl	800e26c <_Bfree>
 800a7c4:	9805      	ldr	r0, [sp, #20]
 800a7c6:	4641      	mov	r1, r8
 800a7c8:	f003 fd50 	bl	800e26c <_Bfree>
 800a7cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7ce:	9805      	ldr	r0, [sp, #20]
 800a7d0:	f003 fd4c 	bl	800e26c <_Bfree>
 800a7d4:	9805      	ldr	r0, [sp, #20]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f003 fd48 	bl	800e26c <_Bfree>
 800a7dc:	e5f9      	b.n	800a3d2 <_strtod_l+0x72>
 800a7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	dbbc      	blt.n	800a762 <_strtod_l+0x402>
 800a7e8:	4c41      	ldr	r4, [pc, #260]	@ (800a8f0 <_strtod_l+0x590>)
 800a7ea:	f1c5 050f 	rsb	r5, r5, #15
 800a7ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	f7f5 ff0d 	bl	8000618 <__aeabi_dmul>
 800a7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a800:	1b5d      	subs	r5, r3, r5
 800a802:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a806:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a80a:	e78f      	b.n	800a72c <_strtod_l+0x3cc>
 800a80c:	3316      	adds	r3, #22
 800a80e:	dba8      	blt.n	800a762 <_strtod_l+0x402>
 800a810:	4b37      	ldr	r3, [pc, #220]	@ (800a8f0 <_strtod_l+0x590>)
 800a812:	eba9 0808 	sub.w	r8, r9, r8
 800a816:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a81a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a81e:	4650      	mov	r0, sl
 800a820:	4659      	mov	r1, fp
 800a822:	f7f6 f823 	bl	800086c <__aeabi_ddiv>
 800a826:	e783      	b.n	800a730 <_strtod_l+0x3d0>
 800a828:	4b32      	ldr	r3, [pc, #200]	@ (800a8f4 <_strtod_l+0x594>)
 800a82a:	9308      	str	r3, [sp, #32]
 800a82c:	2300      	movs	r3, #0
 800a82e:	1124      	asrs	r4, r4, #4
 800a830:	4650      	mov	r0, sl
 800a832:	4659      	mov	r1, fp
 800a834:	461e      	mov	r6, r3
 800a836:	2c01      	cmp	r4, #1
 800a838:	dc21      	bgt.n	800a87e <_strtod_l+0x51e>
 800a83a:	b10b      	cbz	r3, 800a840 <_strtod_l+0x4e0>
 800a83c:	4682      	mov	sl, r0
 800a83e:	468b      	mov	fp, r1
 800a840:	492c      	ldr	r1, [pc, #176]	@ (800a8f4 <_strtod_l+0x594>)
 800a842:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a846:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a84a:	4652      	mov	r2, sl
 800a84c:	465b      	mov	r3, fp
 800a84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a852:	f7f5 fee1 	bl	8000618 <__aeabi_dmul>
 800a856:	4b28      	ldr	r3, [pc, #160]	@ (800a8f8 <_strtod_l+0x598>)
 800a858:	460a      	mov	r2, r1
 800a85a:	400b      	ands	r3, r1
 800a85c:	4927      	ldr	r1, [pc, #156]	@ (800a8fc <_strtod_l+0x59c>)
 800a85e:	428b      	cmp	r3, r1
 800a860:	4682      	mov	sl, r0
 800a862:	d898      	bhi.n	800a796 <_strtod_l+0x436>
 800a864:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a868:	428b      	cmp	r3, r1
 800a86a:	bf86      	itte	hi
 800a86c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a900 <_strtod_l+0x5a0>
 800a870:	f04f 3aff 	movhi.w	sl, #4294967295
 800a874:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a878:	2300      	movs	r3, #0
 800a87a:	9308      	str	r3, [sp, #32]
 800a87c:	e07a      	b.n	800a974 <_strtod_l+0x614>
 800a87e:	07e2      	lsls	r2, r4, #31
 800a880:	d505      	bpl.n	800a88e <_strtod_l+0x52e>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fec6 	bl	8000618 <__aeabi_dmul>
 800a88c:	2301      	movs	r3, #1
 800a88e:	9a08      	ldr	r2, [sp, #32]
 800a890:	3208      	adds	r2, #8
 800a892:	3601      	adds	r6, #1
 800a894:	1064      	asrs	r4, r4, #1
 800a896:	9208      	str	r2, [sp, #32]
 800a898:	e7cd      	b.n	800a836 <_strtod_l+0x4d6>
 800a89a:	d0ed      	beq.n	800a878 <_strtod_l+0x518>
 800a89c:	4264      	negs	r4, r4
 800a89e:	f014 020f 	ands.w	r2, r4, #15
 800a8a2:	d00a      	beq.n	800a8ba <_strtod_l+0x55a>
 800a8a4:	4b12      	ldr	r3, [pc, #72]	@ (800a8f0 <_strtod_l+0x590>)
 800a8a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 ffdb 	bl	800086c <__aeabi_ddiv>
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	468b      	mov	fp, r1
 800a8ba:	1124      	asrs	r4, r4, #4
 800a8bc:	d0dc      	beq.n	800a878 <_strtod_l+0x518>
 800a8be:	2c1f      	cmp	r4, #31
 800a8c0:	dd20      	ble.n	800a904 <_strtod_l+0x5a4>
 800a8c2:	2400      	movs	r4, #0
 800a8c4:	46a0      	mov	r8, r4
 800a8c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8c8:	46a1      	mov	r9, r4
 800a8ca:	9a05      	ldr	r2, [sp, #20]
 800a8cc:	2322      	movs	r3, #34	@ 0x22
 800a8ce:	f04f 0a00 	mov.w	sl, #0
 800a8d2:	f04f 0b00 	mov.w	fp, #0
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	e768      	b.n	800a7ac <_strtod_l+0x44c>
 800a8da:	bf00      	nop
 800a8dc:	08012846 	.word	0x08012846
 800a8e0:	080126e4 	.word	0x080126e4
 800a8e4:	0801283e 	.word	0x0801283e
 800a8e8:	08012927 	.word	0x08012927
 800a8ec:	080115aa 	.word	0x080115aa
 800a8f0:	08012aa0 	.word	0x08012aa0
 800a8f4:	08012a78 	.word	0x08012a78
 800a8f8:	7ff00000 	.word	0x7ff00000
 800a8fc:	7ca00000 	.word	0x7ca00000
 800a900:	7fefffff 	.word	0x7fefffff
 800a904:	f014 0310 	ands.w	r3, r4, #16
 800a908:	bf18      	it	ne
 800a90a:	236a      	movne	r3, #106	@ 0x6a
 800a90c:	4ea9      	ldr	r6, [pc, #676]	@ (800abb4 <_strtod_l+0x854>)
 800a90e:	9308      	str	r3, [sp, #32]
 800a910:	4650      	mov	r0, sl
 800a912:	4659      	mov	r1, fp
 800a914:	2300      	movs	r3, #0
 800a916:	07e2      	lsls	r2, r4, #31
 800a918:	d504      	bpl.n	800a924 <_strtod_l+0x5c4>
 800a91a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a91e:	f7f5 fe7b 	bl	8000618 <__aeabi_dmul>
 800a922:	2301      	movs	r3, #1
 800a924:	1064      	asrs	r4, r4, #1
 800a926:	f106 0608 	add.w	r6, r6, #8
 800a92a:	d1f4      	bne.n	800a916 <_strtod_l+0x5b6>
 800a92c:	b10b      	cbz	r3, 800a932 <_strtod_l+0x5d2>
 800a92e:	4682      	mov	sl, r0
 800a930:	468b      	mov	fp, r1
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	b1b3      	cbz	r3, 800a964 <_strtod_l+0x604>
 800a936:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a93a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a93e:	2b00      	cmp	r3, #0
 800a940:	4659      	mov	r1, fp
 800a942:	dd0f      	ble.n	800a964 <_strtod_l+0x604>
 800a944:	2b1f      	cmp	r3, #31
 800a946:	dd55      	ble.n	800a9f4 <_strtod_l+0x694>
 800a948:	2b34      	cmp	r3, #52	@ 0x34
 800a94a:	bfde      	ittt	le
 800a94c:	f04f 33ff 	movle.w	r3, #4294967295
 800a950:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a954:	4093      	lslle	r3, r2
 800a956:	f04f 0a00 	mov.w	sl, #0
 800a95a:	bfcc      	ite	gt
 800a95c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a960:	ea03 0b01 	andle.w	fp, r3, r1
 800a964:	2200      	movs	r2, #0
 800a966:	2300      	movs	r3, #0
 800a968:	4650      	mov	r0, sl
 800a96a:	4659      	mov	r1, fp
 800a96c:	f7f6 f8bc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a970:	2800      	cmp	r0, #0
 800a972:	d1a6      	bne.n	800a8c2 <_strtod_l+0x562>
 800a974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a97a:	9805      	ldr	r0, [sp, #20]
 800a97c:	462b      	mov	r3, r5
 800a97e:	463a      	mov	r2, r7
 800a980:	f003 fcdc 	bl	800e33c <__s2b>
 800a984:	900a      	str	r0, [sp, #40]	@ 0x28
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f af05 	beq.w	800a796 <_strtod_l+0x436>
 800a98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a98e:	2a00      	cmp	r2, #0
 800a990:	eba9 0308 	sub.w	r3, r9, r8
 800a994:	bfa8      	it	ge
 800a996:	2300      	movge	r3, #0
 800a998:	9312      	str	r3, [sp, #72]	@ 0x48
 800a99a:	2400      	movs	r4, #0
 800a99c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a9a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a9a2:	46a0      	mov	r8, r4
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a6:	9805      	ldr	r0, [sp, #20]
 800a9a8:	6859      	ldr	r1, [r3, #4]
 800a9aa:	f003 fc1f 	bl	800e1ec <_Balloc>
 800a9ae:	4681      	mov	r9, r0
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	f43f aef4 	beq.w	800a79e <_strtod_l+0x43e>
 800a9b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9b8:	691a      	ldr	r2, [r3, #16]
 800a9ba:	3202      	adds	r2, #2
 800a9bc:	f103 010c 	add.w	r1, r3, #12
 800a9c0:	0092      	lsls	r2, r2, #2
 800a9c2:	300c      	adds	r0, #12
 800a9c4:	f002 f9c6 	bl	800cd54 <memcpy>
 800a9c8:	ec4b ab10 	vmov	d0, sl, fp
 800a9cc:	9805      	ldr	r0, [sp, #20]
 800a9ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a9d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a9d6:	f003 ffed 	bl	800e9b4 <__d2b>
 800a9da:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	f43f aede 	beq.w	800a79e <_strtod_l+0x43e>
 800a9e2:	9805      	ldr	r0, [sp, #20]
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	f003 fd3f 	bl	800e468 <__i2b>
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	b948      	cbnz	r0, 800aa02 <_strtod_l+0x6a2>
 800a9ee:	f04f 0800 	mov.w	r8, #0
 800a9f2:	e6d4      	b.n	800a79e <_strtod_l+0x43e>
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9fc:	ea03 0a0a 	and.w	sl, r3, sl
 800aa00:	e7b0      	b.n	800a964 <_strtod_l+0x604>
 800aa02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aa04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	bfab      	itete	ge
 800aa0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aa0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aa0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aa10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aa12:	bfac      	ite	ge
 800aa14:	18ef      	addge	r7, r5, r3
 800aa16:	1b5e      	sublt	r6, r3, r5
 800aa18:	9b08      	ldr	r3, [sp, #32]
 800aa1a:	1aed      	subs	r5, r5, r3
 800aa1c:	4415      	add	r5, r2
 800aa1e:	4b66      	ldr	r3, [pc, #408]	@ (800abb8 <_strtod_l+0x858>)
 800aa20:	3d01      	subs	r5, #1
 800aa22:	429d      	cmp	r5, r3
 800aa24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aa28:	da50      	bge.n	800aacc <_strtod_l+0x76c>
 800aa2a:	1b5b      	subs	r3, r3, r5
 800aa2c:	2b1f      	cmp	r3, #31
 800aa2e:	eba2 0203 	sub.w	r2, r2, r3
 800aa32:	f04f 0101 	mov.w	r1, #1
 800aa36:	dc3d      	bgt.n	800aab4 <_strtod_l+0x754>
 800aa38:	fa01 f303 	lsl.w	r3, r1, r3
 800aa3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa42:	18bd      	adds	r5, r7, r2
 800aa44:	9b08      	ldr	r3, [sp, #32]
 800aa46:	42af      	cmp	r7, r5
 800aa48:	4416      	add	r6, r2
 800aa4a:	441e      	add	r6, r3
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	bfa8      	it	ge
 800aa50:	462b      	movge	r3, r5
 800aa52:	42b3      	cmp	r3, r6
 800aa54:	bfa8      	it	ge
 800aa56:	4633      	movge	r3, r6
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfc2      	ittt	gt
 800aa5c:	1aed      	subgt	r5, r5, r3
 800aa5e:	1af6      	subgt	r6, r6, r3
 800aa60:	1aff      	subgt	r7, r7, r3
 800aa62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd16      	ble.n	800aa96 <_strtod_l+0x736>
 800aa68:	4641      	mov	r1, r8
 800aa6a:	9805      	ldr	r0, [sp, #20]
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f003 fdbb 	bl	800e5e8 <__pow5mult>
 800aa72:	4680      	mov	r8, r0
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0ba      	beq.n	800a9ee <_strtod_l+0x68e>
 800aa78:	4601      	mov	r1, r0
 800aa7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa7c:	9805      	ldr	r0, [sp, #20]
 800aa7e:	f003 fd09 	bl	800e494 <__multiply>
 800aa82:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f43f ae8a 	beq.w	800a79e <_strtod_l+0x43e>
 800aa8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	f003 fbed 	bl	800e26c <_Bfree>
 800aa92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa94:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	dc1d      	bgt.n	800aad6 <_strtod_l+0x776>
 800aa9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd23      	ble.n	800aae8 <_strtod_l+0x788>
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aaa4:	9805      	ldr	r0, [sp, #20]
 800aaa6:	f003 fd9f 	bl	800e5e8 <__pow5mult>
 800aaaa:	4681      	mov	r9, r0
 800aaac:	b9e0      	cbnz	r0, 800aae8 <_strtod_l+0x788>
 800aaae:	f04f 0900 	mov.w	r9, #0
 800aab2:	e674      	b.n	800a79e <_strtod_l+0x43e>
 800aab4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aab8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aabc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aac0:	35e2      	adds	r5, #226	@ 0xe2
 800aac2:	fa01 f305 	lsl.w	r3, r1, r5
 800aac6:	9310      	str	r3, [sp, #64]	@ 0x40
 800aac8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aaca:	e7ba      	b.n	800aa42 <_strtod_l+0x6e2>
 800aacc:	2300      	movs	r3, #0
 800aace:	9310      	str	r3, [sp, #64]	@ 0x40
 800aad0:	2301      	movs	r3, #1
 800aad2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aad4:	e7b5      	b.n	800aa42 <_strtod_l+0x6e2>
 800aad6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aad8:	9805      	ldr	r0, [sp, #20]
 800aada:	462a      	mov	r2, r5
 800aadc:	f003 fdde 	bl	800e69c <__lshift>
 800aae0:	901a      	str	r0, [sp, #104]	@ 0x68
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d1d9      	bne.n	800aa9a <_strtod_l+0x73a>
 800aae6:	e65a      	b.n	800a79e <_strtod_l+0x43e>
 800aae8:	2e00      	cmp	r6, #0
 800aaea:	dd07      	ble.n	800aafc <_strtod_l+0x79c>
 800aaec:	4649      	mov	r1, r9
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	f003 fdd3 	bl	800e69c <__lshift>
 800aaf6:	4681      	mov	r9, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0d8      	beq.n	800aaae <_strtod_l+0x74e>
 800aafc:	2f00      	cmp	r7, #0
 800aafe:	dd08      	ble.n	800ab12 <_strtod_l+0x7b2>
 800ab00:	4641      	mov	r1, r8
 800ab02:	9805      	ldr	r0, [sp, #20]
 800ab04:	463a      	mov	r2, r7
 800ab06:	f003 fdc9 	bl	800e69c <__lshift>
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f43f ae46 	beq.w	800a79e <_strtod_l+0x43e>
 800ab12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab14:	9805      	ldr	r0, [sp, #20]
 800ab16:	464a      	mov	r2, r9
 800ab18:	f003 fe48 	bl	800e7ac <__mdiff>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f43f ae3d 	beq.w	800a79e <_strtod_l+0x43e>
 800ab24:	68c3      	ldr	r3, [r0, #12]
 800ab26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60c3      	str	r3, [r0, #12]
 800ab2c:	4641      	mov	r1, r8
 800ab2e:	f003 fe21 	bl	800e774 <__mcmp>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	da46      	bge.n	800abc4 <_strtod_l+0x864>
 800ab36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab38:	ea53 030a 	orrs.w	r3, r3, sl
 800ab3c:	d16c      	bne.n	800ac18 <_strtod_l+0x8b8>
 800ab3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d168      	bne.n	800ac18 <_strtod_l+0x8b8>
 800ab46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab4a:	0d1b      	lsrs	r3, r3, #20
 800ab4c:	051b      	lsls	r3, r3, #20
 800ab4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab52:	d961      	bls.n	800ac18 <_strtod_l+0x8b8>
 800ab54:	6963      	ldr	r3, [r4, #20]
 800ab56:	b913      	cbnz	r3, 800ab5e <_strtod_l+0x7fe>
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	dd5c      	ble.n	800ac18 <_strtod_l+0x8b8>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	2201      	movs	r2, #1
 800ab62:	9805      	ldr	r0, [sp, #20]
 800ab64:	f003 fd9a 	bl	800e69c <__lshift>
 800ab68:	4641      	mov	r1, r8
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	f003 fe02 	bl	800e774 <__mcmp>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	dd51      	ble.n	800ac18 <_strtod_l+0x8b8>
 800ab74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab78:	9a08      	ldr	r2, [sp, #32]
 800ab7a:	0d1b      	lsrs	r3, r3, #20
 800ab7c:	051b      	lsls	r3, r3, #20
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	d06b      	beq.n	800ac5a <_strtod_l+0x8fa>
 800ab82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab86:	d868      	bhi.n	800ac5a <_strtod_l+0x8fa>
 800ab88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab8c:	f67f ae9d 	bls.w	800a8ca <_strtod_l+0x56a>
 800ab90:	4b0a      	ldr	r3, [pc, #40]	@ (800abbc <_strtod_l+0x85c>)
 800ab92:	4650      	mov	r0, sl
 800ab94:	4659      	mov	r1, fp
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7f5 fd3e 	bl	8000618 <__aeabi_dmul>
 800ab9c:	4b08      	ldr	r3, [pc, #32]	@ (800abc0 <_strtod_l+0x860>)
 800ab9e:	400b      	ands	r3, r1
 800aba0:	4682      	mov	sl, r0
 800aba2:	468b      	mov	fp, r1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f47f ae05 	bne.w	800a7b4 <_strtod_l+0x454>
 800abaa:	9a05      	ldr	r2, [sp, #20]
 800abac:	2322      	movs	r3, #34	@ 0x22
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	e600      	b.n	800a7b4 <_strtod_l+0x454>
 800abb2:	bf00      	nop
 800abb4:	08012710 	.word	0x08012710
 800abb8:	fffffc02 	.word	0xfffffc02
 800abbc:	39500000 	.word	0x39500000
 800abc0:	7ff00000 	.word	0x7ff00000
 800abc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abc8:	d165      	bne.n	800ac96 <_strtod_l+0x936>
 800abca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abd0:	b35a      	cbz	r2, 800ac2a <_strtod_l+0x8ca>
 800abd2:	4a9f      	ldr	r2, [pc, #636]	@ (800ae50 <_strtod_l+0xaf0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d12b      	bne.n	800ac30 <_strtod_l+0x8d0>
 800abd8:	9b08      	ldr	r3, [sp, #32]
 800abda:	4651      	mov	r1, sl
 800abdc:	b303      	cbz	r3, 800ac20 <_strtod_l+0x8c0>
 800abde:	4b9d      	ldr	r3, [pc, #628]	@ (800ae54 <_strtod_l+0xaf4>)
 800abe0:	465a      	mov	r2, fp
 800abe2:	4013      	ands	r3, r2
 800abe4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800abe8:	f04f 32ff 	mov.w	r2, #4294967295
 800abec:	d81b      	bhi.n	800ac26 <_strtod_l+0x8c6>
 800abee:	0d1b      	lsrs	r3, r3, #20
 800abf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800abf4:	fa02 f303 	lsl.w	r3, r2, r3
 800abf8:	4299      	cmp	r1, r3
 800abfa:	d119      	bne.n	800ac30 <_strtod_l+0x8d0>
 800abfc:	4b96      	ldr	r3, [pc, #600]	@ (800ae58 <_strtod_l+0xaf8>)
 800abfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d102      	bne.n	800ac0a <_strtod_l+0x8aa>
 800ac04:	3101      	adds	r1, #1
 800ac06:	f43f adca 	beq.w	800a79e <_strtod_l+0x43e>
 800ac0a:	4b92      	ldr	r3, [pc, #584]	@ (800ae54 <_strtod_l+0xaf4>)
 800ac0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac0e:	401a      	ands	r2, r3
 800ac10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ac14:	f04f 0a00 	mov.w	sl, #0
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1b8      	bne.n	800ab90 <_strtod_l+0x830>
 800ac1e:	e5c9      	b.n	800a7b4 <_strtod_l+0x454>
 800ac20:	f04f 33ff 	mov.w	r3, #4294967295
 800ac24:	e7e8      	b.n	800abf8 <_strtod_l+0x898>
 800ac26:	4613      	mov	r3, r2
 800ac28:	e7e6      	b.n	800abf8 <_strtod_l+0x898>
 800ac2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ac2e:	d0a1      	beq.n	800ab74 <_strtod_l+0x814>
 800ac30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac32:	b1db      	cbz	r3, 800ac6c <_strtod_l+0x90c>
 800ac34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac36:	4213      	tst	r3, r2
 800ac38:	d0ee      	beq.n	800ac18 <_strtod_l+0x8b8>
 800ac3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3c:	9a08      	ldr	r2, [sp, #32]
 800ac3e:	4650      	mov	r0, sl
 800ac40:	4659      	mov	r1, fp
 800ac42:	b1bb      	cbz	r3, 800ac74 <_strtod_l+0x914>
 800ac44:	f7ff fb6c 	bl	800a320 <sulp>
 800ac48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac4c:	ec53 2b10 	vmov	r2, r3, d0
 800ac50:	f7f5 fb2c 	bl	80002ac <__adddf3>
 800ac54:	4682      	mov	sl, r0
 800ac56:	468b      	mov	fp, r1
 800ac58:	e7de      	b.n	800ac18 <_strtod_l+0x8b8>
 800ac5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac66:	f04f 3aff 	mov.w	sl, #4294967295
 800ac6a:	e7d5      	b.n	800ac18 <_strtod_l+0x8b8>
 800ac6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac6e:	ea13 0f0a 	tst.w	r3, sl
 800ac72:	e7e1      	b.n	800ac38 <_strtod_l+0x8d8>
 800ac74:	f7ff fb54 	bl	800a320 <sulp>
 800ac78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac7c:	ec53 2b10 	vmov	r2, r3, d0
 800ac80:	f7f5 fb12 	bl	80002a8 <__aeabi_dsub>
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4682      	mov	sl, r0
 800ac8a:	468b      	mov	fp, r1
 800ac8c:	f7f5 ff2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d0c1      	beq.n	800ac18 <_strtod_l+0x8b8>
 800ac94:	e619      	b.n	800a8ca <_strtod_l+0x56a>
 800ac96:	4641      	mov	r1, r8
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f003 fee3 	bl	800ea64 <__ratio>
 800ac9e:	ec57 6b10 	vmov	r6, r7, d0
 800aca2:	2200      	movs	r2, #0
 800aca4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aca8:	4630      	mov	r0, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 ff30 	bl	8000b10 <__aeabi_dcmple>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d06f      	beq.n	800ad94 <_strtod_l+0xa34>
 800acb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d17a      	bne.n	800adb0 <_strtod_l+0xa50>
 800acba:	f1ba 0f00 	cmp.w	sl, #0
 800acbe:	d158      	bne.n	800ad72 <_strtod_l+0xa12>
 800acc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d15a      	bne.n	800ad80 <_strtod_l+0xa20>
 800acca:	4b64      	ldr	r3, [pc, #400]	@ (800ae5c <_strtod_l+0xafc>)
 800accc:	2200      	movs	r2, #0
 800acce:	4630      	mov	r0, r6
 800acd0:	4639      	mov	r1, r7
 800acd2:	f7f5 ff13 	bl	8000afc <__aeabi_dcmplt>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d159      	bne.n	800ad8e <_strtod_l+0xa2e>
 800acda:	4630      	mov	r0, r6
 800acdc:	4639      	mov	r1, r7
 800acde:	4b60      	ldr	r3, [pc, #384]	@ (800ae60 <_strtod_l+0xb00>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	f7f5 fc99 	bl	8000618 <__aeabi_dmul>
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800acee:	9606      	str	r6, [sp, #24]
 800acf0:	9307      	str	r3, [sp, #28]
 800acf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acf6:	4d57      	ldr	r5, [pc, #348]	@ (800ae54 <_strtod_l+0xaf4>)
 800acf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acfe:	401d      	ands	r5, r3
 800ad00:	4b58      	ldr	r3, [pc, #352]	@ (800ae64 <_strtod_l+0xb04>)
 800ad02:	429d      	cmp	r5, r3
 800ad04:	f040 80b2 	bne.w	800ae6c <_strtod_l+0xb0c>
 800ad08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ad0e:	ec4b ab10 	vmov	d0, sl, fp
 800ad12:	f003 fddf 	bl	800e8d4 <__ulp>
 800ad16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad1a:	ec51 0b10 	vmov	r0, r1, d0
 800ad1e:	f7f5 fc7b 	bl	8000618 <__aeabi_dmul>
 800ad22:	4652      	mov	r2, sl
 800ad24:	465b      	mov	r3, fp
 800ad26:	f7f5 fac1 	bl	80002ac <__adddf3>
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4949      	ldr	r1, [pc, #292]	@ (800ae54 <_strtod_l+0xaf4>)
 800ad2e:	4a4e      	ldr	r2, [pc, #312]	@ (800ae68 <_strtod_l+0xb08>)
 800ad30:	4019      	ands	r1, r3
 800ad32:	4291      	cmp	r1, r2
 800ad34:	4682      	mov	sl, r0
 800ad36:	d942      	bls.n	800adbe <_strtod_l+0xa5e>
 800ad38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad3a:	4b47      	ldr	r3, [pc, #284]	@ (800ae58 <_strtod_l+0xaf8>)
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d103      	bne.n	800ad48 <_strtod_l+0x9e8>
 800ad40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad42:	3301      	adds	r3, #1
 800ad44:	f43f ad2b 	beq.w	800a79e <_strtod_l+0x43e>
 800ad48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ae58 <_strtod_l+0xaf8>
 800ad4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ad50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad52:	9805      	ldr	r0, [sp, #20]
 800ad54:	f003 fa8a 	bl	800e26c <_Bfree>
 800ad58:	9805      	ldr	r0, [sp, #20]
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	f003 fa86 	bl	800e26c <_Bfree>
 800ad60:	9805      	ldr	r0, [sp, #20]
 800ad62:	4641      	mov	r1, r8
 800ad64:	f003 fa82 	bl	800e26c <_Bfree>
 800ad68:	9805      	ldr	r0, [sp, #20]
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	f003 fa7e 	bl	800e26c <_Bfree>
 800ad70:	e618      	b.n	800a9a4 <_strtod_l+0x644>
 800ad72:	f1ba 0f01 	cmp.w	sl, #1
 800ad76:	d103      	bne.n	800ad80 <_strtod_l+0xa20>
 800ad78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f43f ada5 	beq.w	800a8ca <_strtod_l+0x56a>
 800ad80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ae30 <_strtod_l+0xad0>
 800ad84:	4f35      	ldr	r7, [pc, #212]	@ (800ae5c <_strtod_l+0xafc>)
 800ad86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	e7b1      	b.n	800acf2 <_strtod_l+0x992>
 800ad8e:	4f34      	ldr	r7, [pc, #208]	@ (800ae60 <_strtod_l+0xb00>)
 800ad90:	2600      	movs	r6, #0
 800ad92:	e7aa      	b.n	800acea <_strtod_l+0x98a>
 800ad94:	4b32      	ldr	r3, [pc, #200]	@ (800ae60 <_strtod_l+0xb00>)
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7f5 fc3c 	bl	8000618 <__aeabi_dmul>
 800ada0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d09f      	beq.n	800acea <_strtod_l+0x98a>
 800adaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800adae:	e7a0      	b.n	800acf2 <_strtod_l+0x992>
 800adb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ae38 <_strtod_l+0xad8>
 800adb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800adb8:	ec57 6b17 	vmov	r6, r7, d7
 800adbc:	e799      	b.n	800acf2 <_strtod_l+0x992>
 800adbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800adc2:	9b08      	ldr	r3, [sp, #32]
 800adc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1c1      	bne.n	800ad50 <_strtod_l+0x9f0>
 800adcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800add0:	0d1b      	lsrs	r3, r3, #20
 800add2:	051b      	lsls	r3, r3, #20
 800add4:	429d      	cmp	r5, r3
 800add6:	d1bb      	bne.n	800ad50 <_strtod_l+0x9f0>
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 ff64 	bl	8000ca8 <__aeabi_d2lz>
 800ade0:	f7f5 fbec 	bl	80005bc <__aeabi_l2d>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fa5c 	bl	80002a8 <__aeabi_dsub>
 800adf0:	460b      	mov	r3, r1
 800adf2:	4602      	mov	r2, r0
 800adf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800adf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800adfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adfe:	ea46 060a 	orr.w	r6, r6, sl
 800ae02:	431e      	orrs	r6, r3
 800ae04:	d06f      	beq.n	800aee6 <_strtod_l+0xb86>
 800ae06:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae40 <_strtod_l+0xae0>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 fe76 	bl	8000afc <__aeabi_dcmplt>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	f47f accf 	bne.w	800a7b4 <_strtod_l+0x454>
 800ae16:	a30c      	add	r3, pc, #48	@ (adr r3, 800ae48 <_strtod_l+0xae8>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae20:	f7f5 fe8a 	bl	8000b38 <__aeabi_dcmpgt>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d093      	beq.n	800ad50 <_strtod_l+0x9f0>
 800ae28:	e4c4      	b.n	800a7b4 <_strtod_l+0x454>
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w
 800ae30:	00000000 	.word	0x00000000
 800ae34:	bff00000 	.word	0xbff00000
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3ff00000 	.word	0x3ff00000
 800ae40:	94a03595 	.word	0x94a03595
 800ae44:	3fdfffff 	.word	0x3fdfffff
 800ae48:	35afe535 	.word	0x35afe535
 800ae4c:	3fe00000 	.word	0x3fe00000
 800ae50:	000fffff 	.word	0x000fffff
 800ae54:	7ff00000 	.word	0x7ff00000
 800ae58:	7fefffff 	.word	0x7fefffff
 800ae5c:	3ff00000 	.word	0x3ff00000
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	7fe00000 	.word	0x7fe00000
 800ae68:	7c9fffff 	.word	0x7c9fffff
 800ae6c:	9b08      	ldr	r3, [sp, #32]
 800ae6e:	b323      	cbz	r3, 800aeba <_strtod_l+0xb5a>
 800ae70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae74:	d821      	bhi.n	800aeba <_strtod_l+0xb5a>
 800ae76:	a328      	add	r3, pc, #160	@ (adr r3, 800af18 <_strtod_l+0xbb8>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	4639      	mov	r1, r7
 800ae80:	f7f5 fe46 	bl	8000b10 <__aeabi_dcmple>
 800ae84:	b1a0      	cbz	r0, 800aeb0 <_strtod_l+0xb50>
 800ae86:	4639      	mov	r1, r7
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7f5 fe9d 	bl	8000bc8 <__aeabi_d2uiz>
 800ae8e:	2801      	cmp	r0, #1
 800ae90:	bf38      	it	cc
 800ae92:	2001      	movcc	r0, #1
 800ae94:	f7f5 fb46 	bl	8000524 <__aeabi_ui2d>
 800ae98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	b9fb      	cbnz	r3, 800aee0 <_strtod_l+0xb80>
 800aea0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aea4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aea6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aea8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aeac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aeb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aeb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aeb6:	1b5b      	subs	r3, r3, r5
 800aeb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aeba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aebe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aec2:	f003 fd07 	bl	800e8d4 <__ulp>
 800aec6:	4650      	mov	r0, sl
 800aec8:	ec53 2b10 	vmov	r2, r3, d0
 800aecc:	4659      	mov	r1, fp
 800aece:	f7f5 fba3 	bl	8000618 <__aeabi_dmul>
 800aed2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aed6:	f7f5 f9e9 	bl	80002ac <__adddf3>
 800aeda:	4682      	mov	sl, r0
 800aedc:	468b      	mov	fp, r1
 800aede:	e770      	b.n	800adc2 <_strtod_l+0xa62>
 800aee0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aee4:	e7e0      	b.n	800aea8 <_strtod_l+0xb48>
 800aee6:	a30e      	add	r3, pc, #56	@ (adr r3, 800af20 <_strtod_l+0xbc0>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 fe06 	bl	8000afc <__aeabi_dcmplt>
 800aef0:	e798      	b.n	800ae24 <_strtod_l+0xac4>
 800aef2:	2300      	movs	r3, #0
 800aef4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aef6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	f7ff ba6d 	b.w	800a3da <_strtod_l+0x7a>
 800af00:	2a65      	cmp	r2, #101	@ 0x65
 800af02:	f43f ab66 	beq.w	800a5d2 <_strtod_l+0x272>
 800af06:	2a45      	cmp	r2, #69	@ 0x45
 800af08:	f43f ab63 	beq.w	800a5d2 <_strtod_l+0x272>
 800af0c:	2301      	movs	r3, #1
 800af0e:	f7ff bb9e 	b.w	800a64e <_strtod_l+0x2ee>
 800af12:	bf00      	nop
 800af14:	f3af 8000 	nop.w
 800af18:	ffc00000 	.word	0xffc00000
 800af1c:	41dfffff 	.word	0x41dfffff
 800af20:	94a03595 	.word	0x94a03595
 800af24:	3fcfffff 	.word	0x3fcfffff

0800af28 <_strtod_r>:
 800af28:	4b01      	ldr	r3, [pc, #4]	@ (800af30 <_strtod_r+0x8>)
 800af2a:	f7ff ba19 	b.w	800a360 <_strtod_l>
 800af2e:	bf00      	nop
 800af30:	2000003c 	.word	0x2000003c

0800af34 <strtod>:
 800af34:	460a      	mov	r2, r1
 800af36:	4601      	mov	r1, r0
 800af38:	4802      	ldr	r0, [pc, #8]	@ (800af44 <strtod+0x10>)
 800af3a:	4b03      	ldr	r3, [pc, #12]	@ (800af48 <strtod+0x14>)
 800af3c:	6800      	ldr	r0, [r0, #0]
 800af3e:	f7ff ba0f 	b.w	800a360 <_strtod_l>
 800af42:	bf00      	nop
 800af44:	200001a8 	.word	0x200001a8
 800af48:	2000003c 	.word	0x2000003c

0800af4c <_strtol_l.constprop.0>:
 800af4c:	2b24      	cmp	r3, #36	@ 0x24
 800af4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af52:	4686      	mov	lr, r0
 800af54:	4690      	mov	r8, r2
 800af56:	d801      	bhi.n	800af5c <_strtol_l.constprop.0+0x10>
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d106      	bne.n	800af6a <_strtol_l.constprop.0+0x1e>
 800af5c:	f001 fec8 	bl	800ccf0 <__errno>
 800af60:	2316      	movs	r3, #22
 800af62:	6003      	str	r3, [r0, #0]
 800af64:	2000      	movs	r0, #0
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	4834      	ldr	r0, [pc, #208]	@ (800b03c <_strtol_l.constprop.0+0xf0>)
 800af6c:	460d      	mov	r5, r1
 800af6e:	462a      	mov	r2, r5
 800af70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af74:	5d06      	ldrb	r6, [r0, r4]
 800af76:	f016 0608 	ands.w	r6, r6, #8
 800af7a:	d1f8      	bne.n	800af6e <_strtol_l.constprop.0+0x22>
 800af7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af7e:	d12d      	bne.n	800afdc <_strtol_l.constprop.0+0x90>
 800af80:	782c      	ldrb	r4, [r5, #0]
 800af82:	2601      	movs	r6, #1
 800af84:	1c95      	adds	r5, r2, #2
 800af86:	f033 0210 	bics.w	r2, r3, #16
 800af8a:	d109      	bne.n	800afa0 <_strtol_l.constprop.0+0x54>
 800af8c:	2c30      	cmp	r4, #48	@ 0x30
 800af8e:	d12a      	bne.n	800afe6 <_strtol_l.constprop.0+0x9a>
 800af90:	782a      	ldrb	r2, [r5, #0]
 800af92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af96:	2a58      	cmp	r2, #88	@ 0x58
 800af98:	d125      	bne.n	800afe6 <_strtol_l.constprop.0+0x9a>
 800af9a:	786c      	ldrb	r4, [r5, #1]
 800af9c:	2310      	movs	r3, #16
 800af9e:	3502      	adds	r5, #2
 800afa0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800afa4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800afa8:	2200      	movs	r2, #0
 800afaa:	fbbc f9f3 	udiv	r9, ip, r3
 800afae:	4610      	mov	r0, r2
 800afb0:	fb03 ca19 	mls	sl, r3, r9, ip
 800afb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800afb8:	2f09      	cmp	r7, #9
 800afba:	d81b      	bhi.n	800aff4 <_strtol_l.constprop.0+0xa8>
 800afbc:	463c      	mov	r4, r7
 800afbe:	42a3      	cmp	r3, r4
 800afc0:	dd27      	ble.n	800b012 <_strtol_l.constprop.0+0xc6>
 800afc2:	1c57      	adds	r7, r2, #1
 800afc4:	d007      	beq.n	800afd6 <_strtol_l.constprop.0+0x8a>
 800afc6:	4581      	cmp	r9, r0
 800afc8:	d320      	bcc.n	800b00c <_strtol_l.constprop.0+0xc0>
 800afca:	d101      	bne.n	800afd0 <_strtol_l.constprop.0+0x84>
 800afcc:	45a2      	cmp	sl, r4
 800afce:	db1d      	blt.n	800b00c <_strtol_l.constprop.0+0xc0>
 800afd0:	fb00 4003 	mla	r0, r0, r3, r4
 800afd4:	2201      	movs	r2, #1
 800afd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afda:	e7eb      	b.n	800afb4 <_strtol_l.constprop.0+0x68>
 800afdc:	2c2b      	cmp	r4, #43	@ 0x2b
 800afde:	bf04      	itt	eq
 800afe0:	782c      	ldrbeq	r4, [r5, #0]
 800afe2:	1c95      	addeq	r5, r2, #2
 800afe4:	e7cf      	b.n	800af86 <_strtol_l.constprop.0+0x3a>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1da      	bne.n	800afa0 <_strtol_l.constprop.0+0x54>
 800afea:	2c30      	cmp	r4, #48	@ 0x30
 800afec:	bf0c      	ite	eq
 800afee:	2308      	moveq	r3, #8
 800aff0:	230a      	movne	r3, #10
 800aff2:	e7d5      	b.n	800afa0 <_strtol_l.constprop.0+0x54>
 800aff4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aff8:	2f19      	cmp	r7, #25
 800affa:	d801      	bhi.n	800b000 <_strtol_l.constprop.0+0xb4>
 800affc:	3c37      	subs	r4, #55	@ 0x37
 800affe:	e7de      	b.n	800afbe <_strtol_l.constprop.0+0x72>
 800b000:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b004:	2f19      	cmp	r7, #25
 800b006:	d804      	bhi.n	800b012 <_strtol_l.constprop.0+0xc6>
 800b008:	3c57      	subs	r4, #87	@ 0x57
 800b00a:	e7d8      	b.n	800afbe <_strtol_l.constprop.0+0x72>
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295
 800b010:	e7e1      	b.n	800afd6 <_strtol_l.constprop.0+0x8a>
 800b012:	1c53      	adds	r3, r2, #1
 800b014:	d108      	bne.n	800b028 <_strtol_l.constprop.0+0xdc>
 800b016:	2322      	movs	r3, #34	@ 0x22
 800b018:	f8ce 3000 	str.w	r3, [lr]
 800b01c:	4660      	mov	r0, ip
 800b01e:	f1b8 0f00 	cmp.w	r8, #0
 800b022:	d0a0      	beq.n	800af66 <_strtol_l.constprop.0+0x1a>
 800b024:	1e69      	subs	r1, r5, #1
 800b026:	e006      	b.n	800b036 <_strtol_l.constprop.0+0xea>
 800b028:	b106      	cbz	r6, 800b02c <_strtol_l.constprop.0+0xe0>
 800b02a:	4240      	negs	r0, r0
 800b02c:	f1b8 0f00 	cmp.w	r8, #0
 800b030:	d099      	beq.n	800af66 <_strtol_l.constprop.0+0x1a>
 800b032:	2a00      	cmp	r2, #0
 800b034:	d1f6      	bne.n	800b024 <_strtol_l.constprop.0+0xd8>
 800b036:	f8c8 1000 	str.w	r1, [r8]
 800b03a:	e794      	b.n	800af66 <_strtol_l.constprop.0+0x1a>
 800b03c:	08012739 	.word	0x08012739

0800b040 <_strtol_r>:
 800b040:	f7ff bf84 	b.w	800af4c <_strtol_l.constprop.0>

0800b044 <strtol>:
 800b044:	4613      	mov	r3, r2
 800b046:	460a      	mov	r2, r1
 800b048:	4601      	mov	r1, r0
 800b04a:	4802      	ldr	r0, [pc, #8]	@ (800b054 <strtol+0x10>)
 800b04c:	6800      	ldr	r0, [r0, #0]
 800b04e:	f7ff bf7d 	b.w	800af4c <_strtol_l.constprop.0>
 800b052:	bf00      	nop
 800b054:	200001a8 	.word	0x200001a8

0800b058 <__cvt>:
 800b058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	ec57 6b10 	vmov	r6, r7, d0
 800b060:	2f00      	cmp	r7, #0
 800b062:	460c      	mov	r4, r1
 800b064:	4619      	mov	r1, r3
 800b066:	463b      	mov	r3, r7
 800b068:	bfbb      	ittet	lt
 800b06a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b06e:	461f      	movlt	r7, r3
 800b070:	2300      	movge	r3, #0
 800b072:	232d      	movlt	r3, #45	@ 0x2d
 800b074:	700b      	strb	r3, [r1, #0]
 800b076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b078:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b07c:	4691      	mov	r9, r2
 800b07e:	f023 0820 	bic.w	r8, r3, #32
 800b082:	bfbc      	itt	lt
 800b084:	4632      	movlt	r2, r6
 800b086:	4616      	movlt	r6, r2
 800b088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b08c:	d005      	beq.n	800b09a <__cvt+0x42>
 800b08e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b092:	d100      	bne.n	800b096 <__cvt+0x3e>
 800b094:	3401      	adds	r4, #1
 800b096:	2102      	movs	r1, #2
 800b098:	e000      	b.n	800b09c <__cvt+0x44>
 800b09a:	2103      	movs	r1, #3
 800b09c:	ab03      	add	r3, sp, #12
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	ab02      	add	r3, sp, #8
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	ec47 6b10 	vmov	d0, r6, r7
 800b0a8:	4653      	mov	r3, sl
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	f001 ff00 	bl	800ceb0 <_dtoa_r>
 800b0b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	d119      	bne.n	800b0ec <__cvt+0x94>
 800b0b8:	f019 0f01 	tst.w	r9, #1
 800b0bc:	d00e      	beq.n	800b0dc <__cvt+0x84>
 800b0be:	eb00 0904 	add.w	r9, r0, r4
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0ce:	b108      	cbz	r0, 800b0d4 <__cvt+0x7c>
 800b0d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0d4:	2230      	movs	r2, #48	@ 0x30
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	454b      	cmp	r3, r9
 800b0da:	d31e      	bcc.n	800b11a <__cvt+0xc2>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0e0:	1b5b      	subs	r3, r3, r5
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	b004      	add	sp, #16
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0f0:	eb00 0904 	add.w	r9, r0, r4
 800b0f4:	d1e5      	bne.n	800b0c2 <__cvt+0x6a>
 800b0f6:	7803      	ldrb	r3, [r0, #0]
 800b0f8:	2b30      	cmp	r3, #48	@ 0x30
 800b0fa:	d10a      	bne.n	800b112 <__cvt+0xba>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2300      	movs	r3, #0
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 fcf0 	bl	8000ae8 <__aeabi_dcmpeq>
 800b108:	b918      	cbnz	r0, 800b112 <__cvt+0xba>
 800b10a:	f1c4 0401 	rsb	r4, r4, #1
 800b10e:	f8ca 4000 	str.w	r4, [sl]
 800b112:	f8da 3000 	ldr.w	r3, [sl]
 800b116:	4499      	add	r9, r3
 800b118:	e7d3      	b.n	800b0c2 <__cvt+0x6a>
 800b11a:	1c59      	adds	r1, r3, #1
 800b11c:	9103      	str	r1, [sp, #12]
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	e7d9      	b.n	800b0d6 <__cvt+0x7e>

0800b122 <__exponent>:
 800b122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b124:	2900      	cmp	r1, #0
 800b126:	bfba      	itte	lt
 800b128:	4249      	neglt	r1, r1
 800b12a:	232d      	movlt	r3, #45	@ 0x2d
 800b12c:	232b      	movge	r3, #43	@ 0x2b
 800b12e:	2909      	cmp	r1, #9
 800b130:	7002      	strb	r2, [r0, #0]
 800b132:	7043      	strb	r3, [r0, #1]
 800b134:	dd29      	ble.n	800b18a <__exponent+0x68>
 800b136:	f10d 0307 	add.w	r3, sp, #7
 800b13a:	461d      	mov	r5, r3
 800b13c:	270a      	movs	r7, #10
 800b13e:	461a      	mov	r2, r3
 800b140:	fbb1 f6f7 	udiv	r6, r1, r7
 800b144:	fb07 1416 	mls	r4, r7, r6, r1
 800b148:	3430      	adds	r4, #48	@ 0x30
 800b14a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b14e:	460c      	mov	r4, r1
 800b150:	2c63      	cmp	r4, #99	@ 0x63
 800b152:	f103 33ff 	add.w	r3, r3, #4294967295
 800b156:	4631      	mov	r1, r6
 800b158:	dcf1      	bgt.n	800b13e <__exponent+0x1c>
 800b15a:	3130      	adds	r1, #48	@ 0x30
 800b15c:	1e94      	subs	r4, r2, #2
 800b15e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b162:	1c41      	adds	r1, r0, #1
 800b164:	4623      	mov	r3, r4
 800b166:	42ab      	cmp	r3, r5
 800b168:	d30a      	bcc.n	800b180 <__exponent+0x5e>
 800b16a:	f10d 0309 	add.w	r3, sp, #9
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	42ac      	cmp	r4, r5
 800b172:	bf88      	it	hi
 800b174:	2300      	movhi	r3, #0
 800b176:	3302      	adds	r3, #2
 800b178:	4403      	add	r3, r0
 800b17a:	1a18      	subs	r0, r3, r0
 800b17c:	b003      	add	sp, #12
 800b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b180:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b184:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b188:	e7ed      	b.n	800b166 <__exponent+0x44>
 800b18a:	2330      	movs	r3, #48	@ 0x30
 800b18c:	3130      	adds	r1, #48	@ 0x30
 800b18e:	7083      	strb	r3, [r0, #2]
 800b190:	70c1      	strb	r1, [r0, #3]
 800b192:	1d03      	adds	r3, r0, #4
 800b194:	e7f1      	b.n	800b17a <__exponent+0x58>
	...

0800b198 <_printf_float>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	b08d      	sub	sp, #52	@ 0x34
 800b19e:	460c      	mov	r4, r1
 800b1a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	f001 fd47 	bl	800cc3c <_localeconv_r>
 800b1ae:	6803      	ldr	r3, [r0, #0]
 800b1b0:	9304      	str	r3, [sp, #16]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f5 f86c 	bl	8000290 <strlen>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	9005      	str	r0, [sp, #20]
 800b1c2:	3307      	adds	r3, #7
 800b1c4:	f023 0307 	bic.w	r3, r3, #7
 800b1c8:	f103 0208 	add.w	r2, r3, #8
 800b1cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1d0:	f8d4 b000 	ldr.w	fp, [r4]
 800b1d4:	f8c8 2000 	str.w	r2, [r8]
 800b1d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b1e0:	9307      	str	r3, [sp, #28]
 800b1e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b1ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ee:	4b9c      	ldr	r3, [pc, #624]	@ (800b460 <_printf_float+0x2c8>)
 800b1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f4:	f7f5 fcaa 	bl	8000b4c <__aeabi_dcmpun>
 800b1f8:	bb70      	cbnz	r0, 800b258 <_printf_float+0xc0>
 800b1fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1fe:	4b98      	ldr	r3, [pc, #608]	@ (800b460 <_printf_float+0x2c8>)
 800b200:	f04f 32ff 	mov.w	r2, #4294967295
 800b204:	f7f5 fc84 	bl	8000b10 <__aeabi_dcmple>
 800b208:	bb30      	cbnz	r0, 800b258 <_printf_float+0xc0>
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4640      	mov	r0, r8
 800b210:	4649      	mov	r1, r9
 800b212:	f7f5 fc73 	bl	8000afc <__aeabi_dcmplt>
 800b216:	b110      	cbz	r0, 800b21e <_printf_float+0x86>
 800b218:	232d      	movs	r3, #45	@ 0x2d
 800b21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21e:	4a91      	ldr	r2, [pc, #580]	@ (800b464 <_printf_float+0x2cc>)
 800b220:	4b91      	ldr	r3, [pc, #580]	@ (800b468 <_printf_float+0x2d0>)
 800b222:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b226:	bf94      	ite	ls
 800b228:	4690      	movls	r8, r2
 800b22a:	4698      	movhi	r8, r3
 800b22c:	2303      	movs	r3, #3
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	f02b 0304 	bic.w	r3, fp, #4
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	f04f 0900 	mov.w	r9, #0
 800b23a:	9700      	str	r7, [sp, #0]
 800b23c:	4633      	mov	r3, r6
 800b23e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f9d2 	bl	800b5ec <_printf_common>
 800b248:	3001      	adds	r0, #1
 800b24a:	f040 808d 	bne.w	800b368 <_printf_float+0x1d0>
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295
 800b252:	b00d      	add	sp, #52	@ 0x34
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	4642      	mov	r2, r8
 800b25a:	464b      	mov	r3, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 fc74 	bl	8000b4c <__aeabi_dcmpun>
 800b264:	b140      	cbz	r0, 800b278 <_printf_float+0xe0>
 800b266:	464b      	mov	r3, r9
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfbc      	itt	lt
 800b26c:	232d      	movlt	r3, #45	@ 0x2d
 800b26e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b272:	4a7e      	ldr	r2, [pc, #504]	@ (800b46c <_printf_float+0x2d4>)
 800b274:	4b7e      	ldr	r3, [pc, #504]	@ (800b470 <_printf_float+0x2d8>)
 800b276:	e7d4      	b.n	800b222 <_printf_float+0x8a>
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b27e:	9206      	str	r2, [sp, #24]
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	d13b      	bne.n	800b2fc <_printf_float+0x164>
 800b284:	2306      	movs	r3, #6
 800b286:	6063      	str	r3, [r4, #4]
 800b288:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b28c:	2300      	movs	r3, #0
 800b28e:	6022      	str	r2, [r4, #0]
 800b290:	9303      	str	r3, [sp, #12]
 800b292:	ab0a      	add	r3, sp, #40	@ 0x28
 800b294:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b298:	ab09      	add	r3, sp, #36	@ 0x24
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	6861      	ldr	r1, [r4, #4]
 800b29e:	ec49 8b10 	vmov	d0, r8, r9
 800b2a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f7ff fed6 	bl	800b058 <__cvt>
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2b0:	2b47      	cmp	r3, #71	@ 0x47
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	d129      	bne.n	800b30a <_printf_float+0x172>
 800b2b6:	1cc8      	adds	r0, r1, #3
 800b2b8:	db02      	blt.n	800b2c0 <_printf_float+0x128>
 800b2ba:	6863      	ldr	r3, [r4, #4]
 800b2bc:	4299      	cmp	r1, r3
 800b2be:	dd41      	ble.n	800b344 <_printf_float+0x1ac>
 800b2c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2c4:	fa5f fa8a 	uxtb.w	sl, sl
 800b2c8:	3901      	subs	r1, #1
 800b2ca:	4652      	mov	r2, sl
 800b2cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2d2:	f7ff ff26 	bl	800b122 <__exponent>
 800b2d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2d8:	1813      	adds	r3, r2, r0
 800b2da:	2a01      	cmp	r2, #1
 800b2dc:	4681      	mov	r9, r0
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	dc02      	bgt.n	800b2e8 <_printf_float+0x150>
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	07d2      	lsls	r2, r2, #31
 800b2e6:	d501      	bpl.n	800b2ec <_printf_float+0x154>
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0a2      	beq.n	800b23a <_printf_float+0xa2>
 800b2f4:	232d      	movs	r3, #45	@ 0x2d
 800b2f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2fa:	e79e      	b.n	800b23a <_printf_float+0xa2>
 800b2fc:	9a06      	ldr	r2, [sp, #24]
 800b2fe:	2a47      	cmp	r2, #71	@ 0x47
 800b300:	d1c2      	bne.n	800b288 <_printf_float+0xf0>
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1c0      	bne.n	800b288 <_printf_float+0xf0>
 800b306:	2301      	movs	r3, #1
 800b308:	e7bd      	b.n	800b286 <_printf_float+0xee>
 800b30a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b30e:	d9db      	bls.n	800b2c8 <_printf_float+0x130>
 800b310:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b314:	d118      	bne.n	800b348 <_printf_float+0x1b0>
 800b316:	2900      	cmp	r1, #0
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	dd0b      	ble.n	800b334 <_printf_float+0x19c>
 800b31c:	6121      	str	r1, [r4, #16]
 800b31e:	b913      	cbnz	r3, 800b326 <_printf_float+0x18e>
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	07d0      	lsls	r0, r2, #31
 800b324:	d502      	bpl.n	800b32c <_printf_float+0x194>
 800b326:	3301      	adds	r3, #1
 800b328:	440b      	add	r3, r1
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b32e:	f04f 0900 	mov.w	r9, #0
 800b332:	e7db      	b.n	800b2ec <_printf_float+0x154>
 800b334:	b913      	cbnz	r3, 800b33c <_printf_float+0x1a4>
 800b336:	6822      	ldr	r2, [r4, #0]
 800b338:	07d2      	lsls	r2, r2, #31
 800b33a:	d501      	bpl.n	800b340 <_printf_float+0x1a8>
 800b33c:	3302      	adds	r3, #2
 800b33e:	e7f4      	b.n	800b32a <_printf_float+0x192>
 800b340:	2301      	movs	r3, #1
 800b342:	e7f2      	b.n	800b32a <_printf_float+0x192>
 800b344:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b34a:	4299      	cmp	r1, r3
 800b34c:	db05      	blt.n	800b35a <_printf_float+0x1c2>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	6121      	str	r1, [r4, #16]
 800b352:	07d8      	lsls	r0, r3, #31
 800b354:	d5ea      	bpl.n	800b32c <_printf_float+0x194>
 800b356:	1c4b      	adds	r3, r1, #1
 800b358:	e7e7      	b.n	800b32a <_printf_float+0x192>
 800b35a:	2900      	cmp	r1, #0
 800b35c:	bfd4      	ite	le
 800b35e:	f1c1 0202 	rsble	r2, r1, #2
 800b362:	2201      	movgt	r2, #1
 800b364:	4413      	add	r3, r2
 800b366:	e7e0      	b.n	800b32a <_printf_float+0x192>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	055a      	lsls	r2, r3, #21
 800b36c:	d407      	bmi.n	800b37e <_printf_float+0x1e6>
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	4642      	mov	r2, r8
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	d12b      	bne.n	800b3d4 <_printf_float+0x23c>
 800b37c:	e767      	b.n	800b24e <_printf_float+0xb6>
 800b37e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b382:	f240 80dd 	bls.w	800b540 <_printf_float+0x3a8>
 800b386:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b38a:	2200      	movs	r2, #0
 800b38c:	2300      	movs	r3, #0
 800b38e:	f7f5 fbab 	bl	8000ae8 <__aeabi_dcmpeq>
 800b392:	2800      	cmp	r0, #0
 800b394:	d033      	beq.n	800b3fe <_printf_float+0x266>
 800b396:	4a37      	ldr	r2, [pc, #220]	@ (800b474 <_printf_float+0x2dc>)
 800b398:	2301      	movs	r3, #1
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	f43f af54 	beq.w	800b24e <_printf_float+0xb6>
 800b3a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b3aa:	4543      	cmp	r3, r8
 800b3ac:	db02      	blt.n	800b3b4 <_printf_float+0x21c>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	07d8      	lsls	r0, r3, #31
 800b3b2:	d50f      	bpl.n	800b3d4 <_printf_float+0x23c>
 800b3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af45 	beq.w	800b24e <_printf_float+0xb6>
 800b3c4:	f04f 0900 	mov.w	r9, #0
 800b3c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3cc:	f104 0a1a 	add.w	sl, r4, #26
 800b3d0:	45c8      	cmp	r8, r9
 800b3d2:	dc09      	bgt.n	800b3e8 <_printf_float+0x250>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	079b      	lsls	r3, r3, #30
 800b3d8:	f100 8103 	bmi.w	800b5e2 <_printf_float+0x44a>
 800b3dc:	68e0      	ldr	r0, [r4, #12]
 800b3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	bfb8      	it	lt
 800b3e4:	4618      	movlt	r0, r3
 800b3e6:	e734      	b.n	800b252 <_printf_float+0xba>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af2b 	beq.w	800b24e <_printf_float+0xb6>
 800b3f8:	f109 0901 	add.w	r9, r9, #1
 800b3fc:	e7e8      	b.n	800b3d0 <_printf_float+0x238>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc39      	bgt.n	800b478 <_printf_float+0x2e0>
 800b404:	4a1b      	ldr	r2, [pc, #108]	@ (800b474 <_printf_float+0x2dc>)
 800b406:	2301      	movs	r3, #1
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af1d 	beq.w	800b24e <_printf_float+0xb6>
 800b414:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b418:	ea59 0303 	orrs.w	r3, r9, r3
 800b41c:	d102      	bne.n	800b424 <_printf_float+0x28c>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	07d9      	lsls	r1, r3, #31
 800b422:	d5d7      	bpl.n	800b3d4 <_printf_float+0x23c>
 800b424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af0d 	beq.w	800b24e <_printf_float+0xb6>
 800b434:	f04f 0a00 	mov.w	sl, #0
 800b438:	f104 0b1a 	add.w	fp, r4, #26
 800b43c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b43e:	425b      	negs	r3, r3
 800b440:	4553      	cmp	r3, sl
 800b442:	dc01      	bgt.n	800b448 <_printf_float+0x2b0>
 800b444:	464b      	mov	r3, r9
 800b446:	e793      	b.n	800b370 <_printf_float+0x1d8>
 800b448:	2301      	movs	r3, #1
 800b44a:	465a      	mov	r2, fp
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f aefb 	beq.w	800b24e <_printf_float+0xb6>
 800b458:	f10a 0a01 	add.w	sl, sl, #1
 800b45c:	e7ee      	b.n	800b43c <_printf_float+0x2a4>
 800b45e:	bf00      	nop
 800b460:	7fefffff 	.word	0x7fefffff
 800b464:	08012839 	.word	0x08012839
 800b468:	0801283d 	.word	0x0801283d
 800b46c:	08012841 	.word	0x08012841
 800b470:	08012845 	.word	0x08012845
 800b474:	0801268e 	.word	0x0801268e
 800b478:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b47a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b47e:	4553      	cmp	r3, sl
 800b480:	bfa8      	it	ge
 800b482:	4653      	movge	r3, sl
 800b484:	2b00      	cmp	r3, #0
 800b486:	4699      	mov	r9, r3
 800b488:	dc36      	bgt.n	800b4f8 <_printf_float+0x360>
 800b48a:	f04f 0b00 	mov.w	fp, #0
 800b48e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b492:	f104 021a 	add.w	r2, r4, #26
 800b496:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b498:	9306      	str	r3, [sp, #24]
 800b49a:	eba3 0309 	sub.w	r3, r3, r9
 800b49e:	455b      	cmp	r3, fp
 800b4a0:	dc31      	bgt.n	800b506 <_printf_float+0x36e>
 800b4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a4:	459a      	cmp	sl, r3
 800b4a6:	dc3a      	bgt.n	800b51e <_printf_float+0x386>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d437      	bmi.n	800b51e <_printf_float+0x386>
 800b4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b0:	ebaa 0903 	sub.w	r9, sl, r3
 800b4b4:	9b06      	ldr	r3, [sp, #24]
 800b4b6:	ebaa 0303 	sub.w	r3, sl, r3
 800b4ba:	4599      	cmp	r9, r3
 800b4bc:	bfa8      	it	ge
 800b4be:	4699      	movge	r9, r3
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	dc33      	bgt.n	800b52e <_printf_float+0x396>
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ce:	f104 0b1a 	add.w	fp, r4, #26
 800b4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b4d8:	eba3 0309 	sub.w	r3, r3, r9
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	f77f af79 	ble.w	800b3d4 <_printf_float+0x23c>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	465a      	mov	r2, fp
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f aeae 	beq.w	800b24e <_printf_float+0xb6>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	e7ec      	b.n	800b4d2 <_printf_float+0x33a>
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	d1c2      	bne.n	800b48a <_printf_float+0x2f2>
 800b504:	e6a3      	b.n	800b24e <_printf_float+0xb6>
 800b506:	2301      	movs	r3, #1
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	9206      	str	r2, [sp, #24]
 800b50e:	47b8      	blx	r7
 800b510:	3001      	adds	r0, #1
 800b512:	f43f ae9c 	beq.w	800b24e <_printf_float+0xb6>
 800b516:	9a06      	ldr	r2, [sp, #24]
 800b518:	f10b 0b01 	add.w	fp, fp, #1
 800b51c:	e7bb      	b.n	800b496 <_printf_float+0x2fe>
 800b51e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	d1c0      	bne.n	800b4ae <_printf_float+0x316>
 800b52c:	e68f      	b.n	800b24e <_printf_float+0xb6>
 800b52e:	9a06      	ldr	r2, [sp, #24]
 800b530:	464b      	mov	r3, r9
 800b532:	4442      	add	r2, r8
 800b534:	4631      	mov	r1, r6
 800b536:	4628      	mov	r0, r5
 800b538:	47b8      	blx	r7
 800b53a:	3001      	adds	r0, #1
 800b53c:	d1c3      	bne.n	800b4c6 <_printf_float+0x32e>
 800b53e:	e686      	b.n	800b24e <_printf_float+0xb6>
 800b540:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b544:	f1ba 0f01 	cmp.w	sl, #1
 800b548:	dc01      	bgt.n	800b54e <_printf_float+0x3b6>
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d536      	bpl.n	800b5bc <_printf_float+0x424>
 800b54e:	2301      	movs	r3, #1
 800b550:	4642      	mov	r2, r8
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae78 	beq.w	800b24e <_printf_float+0xb6>
 800b55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b562:	4631      	mov	r1, r6
 800b564:	4628      	mov	r0, r5
 800b566:	47b8      	blx	r7
 800b568:	3001      	adds	r0, #1
 800b56a:	f43f ae70 	beq.w	800b24e <_printf_float+0xb6>
 800b56e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b572:	2200      	movs	r2, #0
 800b574:	2300      	movs	r3, #0
 800b576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b57a:	f7f5 fab5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b57e:	b9c0      	cbnz	r0, 800b5b2 <_printf_float+0x41a>
 800b580:	4653      	mov	r3, sl
 800b582:	f108 0201 	add.w	r2, r8, #1
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	d10c      	bne.n	800b5aa <_printf_float+0x412>
 800b590:	e65d      	b.n	800b24e <_printf_float+0xb6>
 800b592:	2301      	movs	r3, #1
 800b594:	465a      	mov	r2, fp
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f ae56 	beq.w	800b24e <_printf_float+0xb6>
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	45d0      	cmp	r8, sl
 800b5a8:	dbf3      	blt.n	800b592 <_printf_float+0x3fa>
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b5b0:	e6df      	b.n	800b372 <_printf_float+0x1da>
 800b5b2:	f04f 0800 	mov.w	r8, #0
 800b5b6:	f104 0b1a 	add.w	fp, r4, #26
 800b5ba:	e7f4      	b.n	800b5a6 <_printf_float+0x40e>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	4642      	mov	r2, r8
 800b5c0:	e7e1      	b.n	800b586 <_printf_float+0x3ee>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	464a      	mov	r2, r9
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b8      	blx	r7
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f43f ae3e 	beq.w	800b24e <_printf_float+0xb6>
 800b5d2:	f108 0801 	add.w	r8, r8, #1
 800b5d6:	68e3      	ldr	r3, [r4, #12]
 800b5d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5da:	1a5b      	subs	r3, r3, r1
 800b5dc:	4543      	cmp	r3, r8
 800b5de:	dcf0      	bgt.n	800b5c2 <_printf_float+0x42a>
 800b5e0:	e6fc      	b.n	800b3dc <_printf_float+0x244>
 800b5e2:	f04f 0800 	mov.w	r8, #0
 800b5e6:	f104 0919 	add.w	r9, r4, #25
 800b5ea:	e7f4      	b.n	800b5d6 <_printf_float+0x43e>

0800b5ec <_printf_common>:
 800b5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	4698      	mov	r8, r3
 800b5f4:	688a      	ldr	r2, [r1, #8]
 800b5f6:	690b      	ldr	r3, [r1, #16]
 800b5f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	bfb8      	it	lt
 800b600:	4613      	movlt	r3, r2
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b608:	4607      	mov	r7, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b10a      	cbz	r2, 800b612 <_printf_common+0x26>
 800b60e:	3301      	adds	r3, #1
 800b610:	6033      	str	r3, [r6, #0]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	0699      	lsls	r1, r3, #26
 800b616:	bf42      	ittt	mi
 800b618:	6833      	ldrmi	r3, [r6, #0]
 800b61a:	3302      	addmi	r3, #2
 800b61c:	6033      	strmi	r3, [r6, #0]
 800b61e:	6825      	ldr	r5, [r4, #0]
 800b620:	f015 0506 	ands.w	r5, r5, #6
 800b624:	d106      	bne.n	800b634 <_printf_common+0x48>
 800b626:	f104 0a19 	add.w	sl, r4, #25
 800b62a:	68e3      	ldr	r3, [r4, #12]
 800b62c:	6832      	ldr	r2, [r6, #0]
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	42ab      	cmp	r3, r5
 800b632:	dc26      	bgt.n	800b682 <_printf_common+0x96>
 800b634:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	3b00      	subs	r3, #0
 800b63c:	bf18      	it	ne
 800b63e:	2301      	movne	r3, #1
 800b640:	0692      	lsls	r2, r2, #26
 800b642:	d42b      	bmi.n	800b69c <_printf_common+0xb0>
 800b644:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b648:	4641      	mov	r1, r8
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c8      	blx	r9
 800b64e:	3001      	adds	r0, #1
 800b650:	d01e      	beq.n	800b690 <_printf_common+0xa4>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	f003 0306 	and.w	r3, r3, #6
 800b65a:	2b04      	cmp	r3, #4
 800b65c:	bf02      	ittt	eq
 800b65e:	68e5      	ldreq	r5, [r4, #12]
 800b660:	6833      	ldreq	r3, [r6, #0]
 800b662:	1aed      	subeq	r5, r5, r3
 800b664:	68a3      	ldr	r3, [r4, #8]
 800b666:	bf0c      	ite	eq
 800b668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b66c:	2500      	movne	r5, #0
 800b66e:	4293      	cmp	r3, r2
 800b670:	bfc4      	itt	gt
 800b672:	1a9b      	subgt	r3, r3, r2
 800b674:	18ed      	addgt	r5, r5, r3
 800b676:	2600      	movs	r6, #0
 800b678:	341a      	adds	r4, #26
 800b67a:	42b5      	cmp	r5, r6
 800b67c:	d11a      	bne.n	800b6b4 <_printf_common+0xc8>
 800b67e:	2000      	movs	r0, #0
 800b680:	e008      	b.n	800b694 <_printf_common+0xa8>
 800b682:	2301      	movs	r3, #1
 800b684:	4652      	mov	r2, sl
 800b686:	4641      	mov	r1, r8
 800b688:	4638      	mov	r0, r7
 800b68a:	47c8      	blx	r9
 800b68c:	3001      	adds	r0, #1
 800b68e:	d103      	bne.n	800b698 <_printf_common+0xac>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b698:	3501      	adds	r5, #1
 800b69a:	e7c6      	b.n	800b62a <_printf_common+0x3e>
 800b69c:	18e1      	adds	r1, r4, r3
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	2030      	movs	r0, #48	@ 0x30
 800b6a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6a6:	4422      	add	r2, r4
 800b6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6b0:	3302      	adds	r3, #2
 800b6b2:	e7c7      	b.n	800b644 <_printf_common+0x58>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	4641      	mov	r1, r8
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c8      	blx	r9
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d0e6      	beq.n	800b690 <_printf_common+0xa4>
 800b6c2:	3601      	adds	r6, #1
 800b6c4:	e7d9      	b.n	800b67a <_printf_common+0x8e>
	...

0800b6c8 <_printf_i>:
 800b6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	7e0f      	ldrb	r7, [r1, #24]
 800b6ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6d0:	2f78      	cmp	r7, #120	@ 0x78
 800b6d2:	4691      	mov	r9, r2
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6de:	d807      	bhi.n	800b6f0 <_printf_i+0x28>
 800b6e0:	2f62      	cmp	r7, #98	@ 0x62
 800b6e2:	d80a      	bhi.n	800b6fa <_printf_i+0x32>
 800b6e4:	2f00      	cmp	r7, #0
 800b6e6:	f000 80d2 	beq.w	800b88e <_printf_i+0x1c6>
 800b6ea:	2f58      	cmp	r7, #88	@ 0x58
 800b6ec:	f000 80b9 	beq.w	800b862 <_printf_i+0x19a>
 800b6f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6f8:	e03a      	b.n	800b770 <_printf_i+0xa8>
 800b6fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6fe:	2b15      	cmp	r3, #21
 800b700:	d8f6      	bhi.n	800b6f0 <_printf_i+0x28>
 800b702:	a101      	add	r1, pc, #4	@ (adr r1, 800b708 <_printf_i+0x40>)
 800b704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b708:	0800b761 	.word	0x0800b761
 800b70c:	0800b775 	.word	0x0800b775
 800b710:	0800b6f1 	.word	0x0800b6f1
 800b714:	0800b6f1 	.word	0x0800b6f1
 800b718:	0800b6f1 	.word	0x0800b6f1
 800b71c:	0800b6f1 	.word	0x0800b6f1
 800b720:	0800b775 	.word	0x0800b775
 800b724:	0800b6f1 	.word	0x0800b6f1
 800b728:	0800b6f1 	.word	0x0800b6f1
 800b72c:	0800b6f1 	.word	0x0800b6f1
 800b730:	0800b6f1 	.word	0x0800b6f1
 800b734:	0800b875 	.word	0x0800b875
 800b738:	0800b79f 	.word	0x0800b79f
 800b73c:	0800b82f 	.word	0x0800b82f
 800b740:	0800b6f1 	.word	0x0800b6f1
 800b744:	0800b6f1 	.word	0x0800b6f1
 800b748:	0800b897 	.word	0x0800b897
 800b74c:	0800b6f1 	.word	0x0800b6f1
 800b750:	0800b79f 	.word	0x0800b79f
 800b754:	0800b6f1 	.word	0x0800b6f1
 800b758:	0800b6f1 	.word	0x0800b6f1
 800b75c:	0800b837 	.word	0x0800b837
 800b760:	6833      	ldr	r3, [r6, #0]
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6032      	str	r2, [r6, #0]
 800b768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b76c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b770:	2301      	movs	r3, #1
 800b772:	e09d      	b.n	800b8b0 <_printf_i+0x1e8>
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	1d19      	adds	r1, r3, #4
 800b77a:	6031      	str	r1, [r6, #0]
 800b77c:	0606      	lsls	r6, r0, #24
 800b77e:	d501      	bpl.n	800b784 <_printf_i+0xbc>
 800b780:	681d      	ldr	r5, [r3, #0]
 800b782:	e003      	b.n	800b78c <_printf_i+0xc4>
 800b784:	0645      	lsls	r5, r0, #25
 800b786:	d5fb      	bpl.n	800b780 <_printf_i+0xb8>
 800b788:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b78c:	2d00      	cmp	r5, #0
 800b78e:	da03      	bge.n	800b798 <_printf_i+0xd0>
 800b790:	232d      	movs	r3, #45	@ 0x2d
 800b792:	426d      	negs	r5, r5
 800b794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b798:	4859      	ldr	r0, [pc, #356]	@ (800b900 <_printf_i+0x238>)
 800b79a:	230a      	movs	r3, #10
 800b79c:	e011      	b.n	800b7c2 <_printf_i+0xfa>
 800b79e:	6821      	ldr	r1, [r4, #0]
 800b7a0:	6833      	ldr	r3, [r6, #0]
 800b7a2:	0608      	lsls	r0, r1, #24
 800b7a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7a8:	d402      	bmi.n	800b7b0 <_printf_i+0xe8>
 800b7aa:	0649      	lsls	r1, r1, #25
 800b7ac:	bf48      	it	mi
 800b7ae:	b2ad      	uxthmi	r5, r5
 800b7b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7b2:	4853      	ldr	r0, [pc, #332]	@ (800b900 <_printf_i+0x238>)
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	bf14      	ite	ne
 800b7b8:	230a      	movne	r3, #10
 800b7ba:	2308      	moveq	r3, #8
 800b7bc:	2100      	movs	r1, #0
 800b7be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7c2:	6866      	ldr	r6, [r4, #4]
 800b7c4:	60a6      	str	r6, [r4, #8]
 800b7c6:	2e00      	cmp	r6, #0
 800b7c8:	bfa2      	ittt	ge
 800b7ca:	6821      	ldrge	r1, [r4, #0]
 800b7cc:	f021 0104 	bicge.w	r1, r1, #4
 800b7d0:	6021      	strge	r1, [r4, #0]
 800b7d2:	b90d      	cbnz	r5, 800b7d8 <_printf_i+0x110>
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	d04b      	beq.n	800b870 <_printf_i+0x1a8>
 800b7d8:	4616      	mov	r6, r2
 800b7da:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7de:	fb03 5711 	mls	r7, r3, r1, r5
 800b7e2:	5dc7      	ldrb	r7, [r0, r7]
 800b7e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7e8:	462f      	mov	r7, r5
 800b7ea:	42bb      	cmp	r3, r7
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	d9f4      	bls.n	800b7da <_printf_i+0x112>
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d10b      	bne.n	800b80c <_printf_i+0x144>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	07df      	lsls	r7, r3, #31
 800b7f8:	d508      	bpl.n	800b80c <_printf_i+0x144>
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	6861      	ldr	r1, [r4, #4]
 800b7fe:	4299      	cmp	r1, r3
 800b800:	bfde      	ittt	le
 800b802:	2330      	movle	r3, #48	@ 0x30
 800b804:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b808:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b80c:	1b92      	subs	r2, r2, r6
 800b80e:	6122      	str	r2, [r4, #16]
 800b810:	f8cd a000 	str.w	sl, [sp]
 800b814:	464b      	mov	r3, r9
 800b816:	aa03      	add	r2, sp, #12
 800b818:	4621      	mov	r1, r4
 800b81a:	4640      	mov	r0, r8
 800b81c:	f7ff fee6 	bl	800b5ec <_printf_common>
 800b820:	3001      	adds	r0, #1
 800b822:	d14a      	bne.n	800b8ba <_printf_i+0x1f2>
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	b004      	add	sp, #16
 800b82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	f043 0320 	orr.w	r3, r3, #32
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	4833      	ldr	r0, [pc, #204]	@ (800b904 <_printf_i+0x23c>)
 800b838:	2778      	movs	r7, #120	@ 0x78
 800b83a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	6831      	ldr	r1, [r6, #0]
 800b842:	061f      	lsls	r7, r3, #24
 800b844:	f851 5b04 	ldr.w	r5, [r1], #4
 800b848:	d402      	bmi.n	800b850 <_printf_i+0x188>
 800b84a:	065f      	lsls	r7, r3, #25
 800b84c:	bf48      	it	mi
 800b84e:	b2ad      	uxthmi	r5, r5
 800b850:	6031      	str	r1, [r6, #0]
 800b852:	07d9      	lsls	r1, r3, #31
 800b854:	bf44      	itt	mi
 800b856:	f043 0320 	orrmi.w	r3, r3, #32
 800b85a:	6023      	strmi	r3, [r4, #0]
 800b85c:	b11d      	cbz	r5, 800b866 <_printf_i+0x19e>
 800b85e:	2310      	movs	r3, #16
 800b860:	e7ac      	b.n	800b7bc <_printf_i+0xf4>
 800b862:	4827      	ldr	r0, [pc, #156]	@ (800b900 <_printf_i+0x238>)
 800b864:	e7e9      	b.n	800b83a <_printf_i+0x172>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	f023 0320 	bic.w	r3, r3, #32
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	e7f6      	b.n	800b85e <_printf_i+0x196>
 800b870:	4616      	mov	r6, r2
 800b872:	e7bd      	b.n	800b7f0 <_printf_i+0x128>
 800b874:	6833      	ldr	r3, [r6, #0]
 800b876:	6825      	ldr	r5, [r4, #0]
 800b878:	6961      	ldr	r1, [r4, #20]
 800b87a:	1d18      	adds	r0, r3, #4
 800b87c:	6030      	str	r0, [r6, #0]
 800b87e:	062e      	lsls	r6, r5, #24
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	d501      	bpl.n	800b888 <_printf_i+0x1c0>
 800b884:	6019      	str	r1, [r3, #0]
 800b886:	e002      	b.n	800b88e <_printf_i+0x1c6>
 800b888:	0668      	lsls	r0, r5, #25
 800b88a:	d5fb      	bpl.n	800b884 <_printf_i+0x1bc>
 800b88c:	8019      	strh	r1, [r3, #0]
 800b88e:	2300      	movs	r3, #0
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	4616      	mov	r6, r2
 800b894:	e7bc      	b.n	800b810 <_printf_i+0x148>
 800b896:	6833      	ldr	r3, [r6, #0]
 800b898:	1d1a      	adds	r2, r3, #4
 800b89a:	6032      	str	r2, [r6, #0]
 800b89c:	681e      	ldr	r6, [r3, #0]
 800b89e:	6862      	ldr	r2, [r4, #4]
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7f4 fca4 	bl	80001f0 <memchr>
 800b8a8:	b108      	cbz	r0, 800b8ae <_printf_i+0x1e6>
 800b8aa:	1b80      	subs	r0, r0, r6
 800b8ac:	6060      	str	r0, [r4, #4]
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8b8:	e7aa      	b.n	800b810 <_printf_i+0x148>
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4649      	mov	r1, r9
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	47d0      	blx	sl
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d0ad      	beq.n	800b824 <_printf_i+0x15c>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	079b      	lsls	r3, r3, #30
 800b8cc:	d413      	bmi.n	800b8f6 <_printf_i+0x22e>
 800b8ce:	68e0      	ldr	r0, [r4, #12]
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	4298      	cmp	r0, r3
 800b8d4:	bfb8      	it	lt
 800b8d6:	4618      	movlt	r0, r3
 800b8d8:	e7a6      	b.n	800b828 <_printf_i+0x160>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4649      	mov	r1, r9
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	47d0      	blx	sl
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d09d      	beq.n	800b824 <_printf_i+0x15c>
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	68e3      	ldr	r3, [r4, #12]
 800b8ec:	9903      	ldr	r1, [sp, #12]
 800b8ee:	1a5b      	subs	r3, r3, r1
 800b8f0:	42ab      	cmp	r3, r5
 800b8f2:	dcf2      	bgt.n	800b8da <_printf_i+0x212>
 800b8f4:	e7eb      	b.n	800b8ce <_printf_i+0x206>
 800b8f6:	2500      	movs	r5, #0
 800b8f8:	f104 0619 	add.w	r6, r4, #25
 800b8fc:	e7f5      	b.n	800b8ea <_printf_i+0x222>
 800b8fe:	bf00      	nop
 800b900:	08012849 	.word	0x08012849
 800b904:	0801285a 	.word	0x0801285a

0800b908 <_scanf_float>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	b087      	sub	sp, #28
 800b90e:	4617      	mov	r7, r2
 800b910:	9303      	str	r3, [sp, #12]
 800b912:	688b      	ldr	r3, [r1, #8]
 800b914:	1e5a      	subs	r2, r3, #1
 800b916:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b91a:	bf81      	itttt	hi
 800b91c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b920:	eb03 0b05 	addhi.w	fp, r3, r5
 800b924:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b928:	608b      	strhi	r3, [r1, #8]
 800b92a:	680b      	ldr	r3, [r1, #0]
 800b92c:	460a      	mov	r2, r1
 800b92e:	f04f 0500 	mov.w	r5, #0
 800b932:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b936:	f842 3b1c 	str.w	r3, [r2], #28
 800b93a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b93e:	4680      	mov	r8, r0
 800b940:	460c      	mov	r4, r1
 800b942:	bf98      	it	ls
 800b944:	f04f 0b00 	movls.w	fp, #0
 800b948:	9201      	str	r2, [sp, #4]
 800b94a:	4616      	mov	r6, r2
 800b94c:	46aa      	mov	sl, r5
 800b94e:	46a9      	mov	r9, r5
 800b950:	9502      	str	r5, [sp, #8]
 800b952:	68a2      	ldr	r2, [r4, #8]
 800b954:	b152      	cbz	r2, 800b96c <_scanf_float+0x64>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b95c:	d864      	bhi.n	800ba28 <_scanf_float+0x120>
 800b95e:	2b40      	cmp	r3, #64	@ 0x40
 800b960:	d83c      	bhi.n	800b9dc <_scanf_float+0xd4>
 800b962:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b966:	b2c8      	uxtb	r0, r1
 800b968:	280e      	cmp	r0, #14
 800b96a:	d93a      	bls.n	800b9e2 <_scanf_float+0xda>
 800b96c:	f1b9 0f00 	cmp.w	r9, #0
 800b970:	d003      	beq.n	800b97a <_scanf_float+0x72>
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b97e:	f1ba 0f01 	cmp.w	sl, #1
 800b982:	f200 8117 	bhi.w	800bbb4 <_scanf_float+0x2ac>
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	429e      	cmp	r6, r3
 800b98a:	f200 8108 	bhi.w	800bb9e <_scanf_float+0x296>
 800b98e:	2001      	movs	r0, #1
 800b990:	b007      	add	sp, #28
 800b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b996:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b99a:	2a0d      	cmp	r2, #13
 800b99c:	d8e6      	bhi.n	800b96c <_scanf_float+0x64>
 800b99e:	a101      	add	r1, pc, #4	@ (adr r1, 800b9a4 <_scanf_float+0x9c>)
 800b9a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b9a4:	0800baeb 	.word	0x0800baeb
 800b9a8:	0800b96d 	.word	0x0800b96d
 800b9ac:	0800b96d 	.word	0x0800b96d
 800b9b0:	0800b96d 	.word	0x0800b96d
 800b9b4:	0800bb4b 	.word	0x0800bb4b
 800b9b8:	0800bb23 	.word	0x0800bb23
 800b9bc:	0800b96d 	.word	0x0800b96d
 800b9c0:	0800b96d 	.word	0x0800b96d
 800b9c4:	0800baf9 	.word	0x0800baf9
 800b9c8:	0800b96d 	.word	0x0800b96d
 800b9cc:	0800b96d 	.word	0x0800b96d
 800b9d0:	0800b96d 	.word	0x0800b96d
 800b9d4:	0800b96d 	.word	0x0800b96d
 800b9d8:	0800bab1 	.word	0x0800bab1
 800b9dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b9e0:	e7db      	b.n	800b99a <_scanf_float+0x92>
 800b9e2:	290e      	cmp	r1, #14
 800b9e4:	d8c2      	bhi.n	800b96c <_scanf_float+0x64>
 800b9e6:	a001      	add	r0, pc, #4	@ (adr r0, 800b9ec <_scanf_float+0xe4>)
 800b9e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b9ec:	0800baa1 	.word	0x0800baa1
 800b9f0:	0800b96d 	.word	0x0800b96d
 800b9f4:	0800baa1 	.word	0x0800baa1
 800b9f8:	0800bb37 	.word	0x0800bb37
 800b9fc:	0800b96d 	.word	0x0800b96d
 800ba00:	0800ba49 	.word	0x0800ba49
 800ba04:	0800ba87 	.word	0x0800ba87
 800ba08:	0800ba87 	.word	0x0800ba87
 800ba0c:	0800ba87 	.word	0x0800ba87
 800ba10:	0800ba87 	.word	0x0800ba87
 800ba14:	0800ba87 	.word	0x0800ba87
 800ba18:	0800ba87 	.word	0x0800ba87
 800ba1c:	0800ba87 	.word	0x0800ba87
 800ba20:	0800ba87 	.word	0x0800ba87
 800ba24:	0800ba87 	.word	0x0800ba87
 800ba28:	2b6e      	cmp	r3, #110	@ 0x6e
 800ba2a:	d809      	bhi.n	800ba40 <_scanf_float+0x138>
 800ba2c:	2b60      	cmp	r3, #96	@ 0x60
 800ba2e:	d8b2      	bhi.n	800b996 <_scanf_float+0x8e>
 800ba30:	2b54      	cmp	r3, #84	@ 0x54
 800ba32:	d07b      	beq.n	800bb2c <_scanf_float+0x224>
 800ba34:	2b59      	cmp	r3, #89	@ 0x59
 800ba36:	d199      	bne.n	800b96c <_scanf_float+0x64>
 800ba38:	2d07      	cmp	r5, #7
 800ba3a:	d197      	bne.n	800b96c <_scanf_float+0x64>
 800ba3c:	2508      	movs	r5, #8
 800ba3e:	e02c      	b.n	800ba9a <_scanf_float+0x192>
 800ba40:	2b74      	cmp	r3, #116	@ 0x74
 800ba42:	d073      	beq.n	800bb2c <_scanf_float+0x224>
 800ba44:	2b79      	cmp	r3, #121	@ 0x79
 800ba46:	e7f6      	b.n	800ba36 <_scanf_float+0x12e>
 800ba48:	6821      	ldr	r1, [r4, #0]
 800ba4a:	05c8      	lsls	r0, r1, #23
 800ba4c:	d51b      	bpl.n	800ba86 <_scanf_float+0x17e>
 800ba4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ba52:	6021      	str	r1, [r4, #0]
 800ba54:	f109 0901 	add.w	r9, r9, #1
 800ba58:	f1bb 0f00 	cmp.w	fp, #0
 800ba5c:	d003      	beq.n	800ba66 <_scanf_float+0x15e>
 800ba5e:	3201      	adds	r2, #1
 800ba60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba64:	60a2      	str	r2, [r4, #8]
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	60a3      	str	r3, [r4, #8]
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	f340 8087 	ble.w	800bb8c <_scanf_float+0x284>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	3301      	adds	r3, #1
 800ba82:	603b      	str	r3, [r7, #0]
 800ba84:	e765      	b.n	800b952 <_scanf_float+0x4a>
 800ba86:	eb1a 0105 	adds.w	r1, sl, r5
 800ba8a:	f47f af6f 	bne.w	800b96c <_scanf_float+0x64>
 800ba8e:	6822      	ldr	r2, [r4, #0]
 800ba90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	460d      	mov	r5, r1
 800ba98:	468a      	mov	sl, r1
 800ba9a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba9e:	e7e2      	b.n	800ba66 <_scanf_float+0x15e>
 800baa0:	6822      	ldr	r2, [r4, #0]
 800baa2:	0610      	lsls	r0, r2, #24
 800baa4:	f57f af62 	bpl.w	800b96c <_scanf_float+0x64>
 800baa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800baac:	6022      	str	r2, [r4, #0]
 800baae:	e7f4      	b.n	800ba9a <_scanf_float+0x192>
 800bab0:	f1ba 0f00 	cmp.w	sl, #0
 800bab4:	d10e      	bne.n	800bad4 <_scanf_float+0x1cc>
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	d10e      	bne.n	800bada <_scanf_float+0x1d2>
 800babc:	6822      	ldr	r2, [r4, #0]
 800babe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bac2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bac6:	d108      	bne.n	800bada <_scanf_float+0x1d2>
 800bac8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bacc:	6022      	str	r2, [r4, #0]
 800bace:	f04f 0a01 	mov.w	sl, #1
 800bad2:	e7e2      	b.n	800ba9a <_scanf_float+0x192>
 800bad4:	f1ba 0f02 	cmp.w	sl, #2
 800bad8:	d055      	beq.n	800bb86 <_scanf_float+0x27e>
 800bada:	2d01      	cmp	r5, #1
 800badc:	d002      	beq.n	800bae4 <_scanf_float+0x1dc>
 800bade:	2d04      	cmp	r5, #4
 800bae0:	f47f af44 	bne.w	800b96c <_scanf_float+0x64>
 800bae4:	3501      	adds	r5, #1
 800bae6:	b2ed      	uxtb	r5, r5
 800bae8:	e7d7      	b.n	800ba9a <_scanf_float+0x192>
 800baea:	f1ba 0f01 	cmp.w	sl, #1
 800baee:	f47f af3d 	bne.w	800b96c <_scanf_float+0x64>
 800baf2:	f04f 0a02 	mov.w	sl, #2
 800baf6:	e7d0      	b.n	800ba9a <_scanf_float+0x192>
 800baf8:	b97d      	cbnz	r5, 800bb1a <_scanf_float+0x212>
 800bafa:	f1b9 0f00 	cmp.w	r9, #0
 800bafe:	f47f af38 	bne.w	800b972 <_scanf_float+0x6a>
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bb0c:	f040 8108 	bne.w	800bd20 <_scanf_float+0x418>
 800bb10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb14:	6022      	str	r2, [r4, #0]
 800bb16:	2501      	movs	r5, #1
 800bb18:	e7bf      	b.n	800ba9a <_scanf_float+0x192>
 800bb1a:	2d03      	cmp	r5, #3
 800bb1c:	d0e2      	beq.n	800bae4 <_scanf_float+0x1dc>
 800bb1e:	2d05      	cmp	r5, #5
 800bb20:	e7de      	b.n	800bae0 <_scanf_float+0x1d8>
 800bb22:	2d02      	cmp	r5, #2
 800bb24:	f47f af22 	bne.w	800b96c <_scanf_float+0x64>
 800bb28:	2503      	movs	r5, #3
 800bb2a:	e7b6      	b.n	800ba9a <_scanf_float+0x192>
 800bb2c:	2d06      	cmp	r5, #6
 800bb2e:	f47f af1d 	bne.w	800b96c <_scanf_float+0x64>
 800bb32:	2507      	movs	r5, #7
 800bb34:	e7b1      	b.n	800ba9a <_scanf_float+0x192>
 800bb36:	6822      	ldr	r2, [r4, #0]
 800bb38:	0591      	lsls	r1, r2, #22
 800bb3a:	f57f af17 	bpl.w	800b96c <_scanf_float+0x64>
 800bb3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bb42:	6022      	str	r2, [r4, #0]
 800bb44:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb48:	e7a7      	b.n	800ba9a <_scanf_float+0x192>
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bb50:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb54:	d006      	beq.n	800bb64 <_scanf_float+0x25c>
 800bb56:	0550      	lsls	r0, r2, #21
 800bb58:	f57f af08 	bpl.w	800b96c <_scanf_float+0x64>
 800bb5c:	f1b9 0f00 	cmp.w	r9, #0
 800bb60:	f000 80de 	beq.w	800bd20 <_scanf_float+0x418>
 800bb64:	0591      	lsls	r1, r2, #22
 800bb66:	bf58      	it	pl
 800bb68:	9902      	ldrpl	r1, [sp, #8]
 800bb6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb6e:	bf58      	it	pl
 800bb70:	eba9 0101 	subpl.w	r1, r9, r1
 800bb74:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb78:	bf58      	it	pl
 800bb7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb7e:	6022      	str	r2, [r4, #0]
 800bb80:	f04f 0900 	mov.w	r9, #0
 800bb84:	e789      	b.n	800ba9a <_scanf_float+0x192>
 800bb86:	f04f 0a03 	mov.w	sl, #3
 800bb8a:	e786      	b.n	800ba9a <_scanf_float+0x192>
 800bb8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb90:	4639      	mov	r1, r7
 800bb92:	4640      	mov	r0, r8
 800bb94:	4798      	blx	r3
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f43f aedb 	beq.w	800b952 <_scanf_float+0x4a>
 800bb9c:	e6e6      	b.n	800b96c <_scanf_float+0x64>
 800bb9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bba6:	463a      	mov	r2, r7
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4798      	blx	r3
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	6123      	str	r3, [r4, #16]
 800bbb2:	e6e8      	b.n	800b986 <_scanf_float+0x7e>
 800bbb4:	1e6b      	subs	r3, r5, #1
 800bbb6:	2b06      	cmp	r3, #6
 800bbb8:	d824      	bhi.n	800bc04 <_scanf_float+0x2fc>
 800bbba:	2d02      	cmp	r5, #2
 800bbbc:	d836      	bhi.n	800bc2c <_scanf_float+0x324>
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	429e      	cmp	r6, r3
 800bbc2:	f67f aee4 	bls.w	800b98e <_scanf_float+0x86>
 800bbc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbce:	463a      	mov	r2, r7
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	4798      	blx	r3
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	e7f0      	b.n	800bbbe <_scanf_float+0x2b6>
 800bbdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbe0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bbe4:	463a      	mov	r2, r7
 800bbe6:	4640      	mov	r0, r8
 800bbe8:	4798      	blx	r3
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	3b01      	subs	r3, #1
 800bbee:	6123      	str	r3, [r4, #16]
 800bbf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbf4:	fa5f fa8a 	uxtb.w	sl, sl
 800bbf8:	f1ba 0f02 	cmp.w	sl, #2
 800bbfc:	d1ee      	bne.n	800bbdc <_scanf_float+0x2d4>
 800bbfe:	3d03      	subs	r5, #3
 800bc00:	b2ed      	uxtb	r5, r5
 800bc02:	1b76      	subs	r6, r6, r5
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	05da      	lsls	r2, r3, #23
 800bc08:	d530      	bpl.n	800bc6c <_scanf_float+0x364>
 800bc0a:	055b      	lsls	r3, r3, #21
 800bc0c:	d511      	bpl.n	800bc32 <_scanf_float+0x32a>
 800bc0e:	9b01      	ldr	r3, [sp, #4]
 800bc10:	429e      	cmp	r6, r3
 800bc12:	f67f aebc 	bls.w	800b98e <_scanf_float+0x86>
 800bc16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc1e:	463a      	mov	r2, r7
 800bc20:	4640      	mov	r0, r8
 800bc22:	4798      	blx	r3
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	6123      	str	r3, [r4, #16]
 800bc2a:	e7f0      	b.n	800bc0e <_scanf_float+0x306>
 800bc2c:	46aa      	mov	sl, r5
 800bc2e:	46b3      	mov	fp, r6
 800bc30:	e7de      	b.n	800bbf0 <_scanf_float+0x2e8>
 800bc32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	2965      	cmp	r1, #101	@ 0x65
 800bc3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bc42:	6123      	str	r3, [r4, #16]
 800bc44:	d00c      	beq.n	800bc60 <_scanf_float+0x358>
 800bc46:	2945      	cmp	r1, #69	@ 0x45
 800bc48:	d00a      	beq.n	800bc60 <_scanf_float+0x358>
 800bc4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc4e:	463a      	mov	r2, r7
 800bc50:	4640      	mov	r0, r8
 800bc52:	4798      	blx	r3
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	1eb5      	subs	r5, r6, #2
 800bc5e:	6123      	str	r3, [r4, #16]
 800bc60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc64:	463a      	mov	r2, r7
 800bc66:	4640      	mov	r0, r8
 800bc68:	4798      	blx	r3
 800bc6a:	462e      	mov	r6, r5
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	f012 0210 	ands.w	r2, r2, #16
 800bc72:	d001      	beq.n	800bc78 <_scanf_float+0x370>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e68b      	b.n	800b990 <_scanf_float+0x88>
 800bc78:	7032      	strb	r2, [r6, #0]
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc84:	d11c      	bne.n	800bcc0 <_scanf_float+0x3b8>
 800bc86:	9b02      	ldr	r3, [sp, #8]
 800bc88:	454b      	cmp	r3, r9
 800bc8a:	eba3 0209 	sub.w	r2, r3, r9
 800bc8e:	d123      	bne.n	800bcd8 <_scanf_float+0x3d0>
 800bc90:	9901      	ldr	r1, [sp, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	4640      	mov	r0, r8
 800bc96:	f7ff f947 	bl	800af28 <_strtod_r>
 800bc9a:	9b03      	ldr	r3, [sp, #12]
 800bc9c:	6821      	ldr	r1, [r4, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f011 0f02 	tst.w	r1, #2
 800bca4:	ec57 6b10 	vmov	r6, r7, d0
 800bca8:	f103 0204 	add.w	r2, r3, #4
 800bcac:	d01f      	beq.n	800bcee <_scanf_float+0x3e6>
 800bcae:	9903      	ldr	r1, [sp, #12]
 800bcb0:	600a      	str	r2, [r1, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	e9c3 6700 	strd	r6, r7, [r3]
 800bcb8:	68e3      	ldr	r3, [r4, #12]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	60e3      	str	r3, [r4, #12]
 800bcbe:	e7d9      	b.n	800bc74 <_scanf_float+0x36c>
 800bcc0:	9b04      	ldr	r3, [sp, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0e4      	beq.n	800bc90 <_scanf_float+0x388>
 800bcc6:	9905      	ldr	r1, [sp, #20]
 800bcc8:	230a      	movs	r3, #10
 800bcca:	3101      	adds	r1, #1
 800bccc:	4640      	mov	r0, r8
 800bcce:	f7ff f9b7 	bl	800b040 <_strtol_r>
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	9e05      	ldr	r6, [sp, #20]
 800bcd6:	1ac2      	subs	r2, r0, r3
 800bcd8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bcdc:	429e      	cmp	r6, r3
 800bcde:	bf28      	it	cs
 800bce0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bce4:	4910      	ldr	r1, [pc, #64]	@ (800bd28 <_scanf_float+0x420>)
 800bce6:	4630      	mov	r0, r6
 800bce8:	f000 f918 	bl	800bf1c <siprintf>
 800bcec:	e7d0      	b.n	800bc90 <_scanf_float+0x388>
 800bcee:	f011 0f04 	tst.w	r1, #4
 800bcf2:	9903      	ldr	r1, [sp, #12]
 800bcf4:	600a      	str	r2, [r1, #0]
 800bcf6:	d1dc      	bne.n	800bcb2 <_scanf_float+0x3aa>
 800bcf8:	681d      	ldr	r5, [r3, #0]
 800bcfa:	4632      	mov	r2, r6
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	4630      	mov	r0, r6
 800bd00:	4639      	mov	r1, r7
 800bd02:	f7f4 ff23 	bl	8000b4c <__aeabi_dcmpun>
 800bd06:	b128      	cbz	r0, 800bd14 <_scanf_float+0x40c>
 800bd08:	4808      	ldr	r0, [pc, #32]	@ (800bd2c <_scanf_float+0x424>)
 800bd0a:	f001 f839 	bl	800cd80 <nanf>
 800bd0e:	ed85 0a00 	vstr	s0, [r5]
 800bd12:	e7d1      	b.n	800bcb8 <_scanf_float+0x3b0>
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 ff76 	bl	8000c08 <__aeabi_d2f>
 800bd1c:	6028      	str	r0, [r5, #0]
 800bd1e:	e7cb      	b.n	800bcb8 <_scanf_float+0x3b0>
 800bd20:	f04f 0900 	mov.w	r9, #0
 800bd24:	e629      	b.n	800b97a <_scanf_float+0x72>
 800bd26:	bf00      	nop
 800bd28:	0801286b 	.word	0x0801286b
 800bd2c:	080115aa 	.word	0x080115aa

0800bd30 <std>:
 800bd30:	2300      	movs	r3, #0
 800bd32:	b510      	push	{r4, lr}
 800bd34:	4604      	mov	r4, r0
 800bd36:	e9c0 3300 	strd	r3, r3, [r0]
 800bd3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd3e:	6083      	str	r3, [r0, #8]
 800bd40:	8181      	strh	r1, [r0, #12]
 800bd42:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd44:	81c2      	strh	r2, [r0, #14]
 800bd46:	6183      	str	r3, [r0, #24]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	2208      	movs	r2, #8
 800bd4c:	305c      	adds	r0, #92	@ 0x5c
 800bd4e:	f000 f9ad 	bl	800c0ac <memset>
 800bd52:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <std+0x58>)
 800bd54:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd56:	4b0d      	ldr	r3, [pc, #52]	@ (800bd8c <std+0x5c>)
 800bd58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd90 <std+0x60>)
 800bd5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <std+0x64>)
 800bd60:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd62:	4b0d      	ldr	r3, [pc, #52]	@ (800bd98 <std+0x68>)
 800bd64:	6224      	str	r4, [r4, #32]
 800bd66:	429c      	cmp	r4, r3
 800bd68:	d006      	beq.n	800bd78 <std+0x48>
 800bd6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd6e:	4294      	cmp	r4, r2
 800bd70:	d002      	beq.n	800bd78 <std+0x48>
 800bd72:	33d0      	adds	r3, #208	@ 0xd0
 800bd74:	429c      	cmp	r4, r3
 800bd76:	d105      	bne.n	800bd84 <std+0x54>
 800bd78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd80:	f7f9 bb69 	b.w	8005456 <__retarget_lock_init_recursive>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	bf00      	nop
 800bd88:	0800bfb1 	.word	0x0800bfb1
 800bd8c:	0800bfd7 	.word	0x0800bfd7
 800bd90:	0800c00f 	.word	0x0800c00f
 800bd94:	0800c033 	.word	0x0800c033
 800bd98:	20009898 	.word	0x20009898

0800bd9c <stdio_exit_handler>:
 800bd9c:	4a02      	ldr	r2, [pc, #8]	@ (800bda8 <stdio_exit_handler+0xc>)
 800bd9e:	4903      	ldr	r1, [pc, #12]	@ (800bdac <stdio_exit_handler+0x10>)
 800bda0:	4803      	ldr	r0, [pc, #12]	@ (800bdb0 <stdio_exit_handler+0x14>)
 800bda2:	f000 b869 	b.w	800be78 <_fwalk_sglue>
 800bda6:	bf00      	nop
 800bda8:	20000028 	.word	0x20000028
 800bdac:	0800f649 	.word	0x0800f649
 800bdb0:	200001ac 	.word	0x200001ac

0800bdb4 <cleanup_stdio>:
 800bdb4:	6841      	ldr	r1, [r0, #4]
 800bdb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bde8 <cleanup_stdio+0x34>)
 800bdb8:	4299      	cmp	r1, r3
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	d001      	beq.n	800bdc4 <cleanup_stdio+0x10>
 800bdc0:	f003 fc42 	bl	800f648 <_fflush_r>
 800bdc4:	68a1      	ldr	r1, [r4, #8]
 800bdc6:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <cleanup_stdio+0x38>)
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d002      	beq.n	800bdd2 <cleanup_stdio+0x1e>
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f003 fc3b 	bl	800f648 <_fflush_r>
 800bdd2:	68e1      	ldr	r1, [r4, #12]
 800bdd4:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <cleanup_stdio+0x3c>)
 800bdd6:	4299      	cmp	r1, r3
 800bdd8:	d004      	beq.n	800bde4 <cleanup_stdio+0x30>
 800bdda:	4620      	mov	r0, r4
 800bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde0:	f003 bc32 	b.w	800f648 <_fflush_r>
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	bf00      	nop
 800bde8:	20009898 	.word	0x20009898
 800bdec:	20009900 	.word	0x20009900
 800bdf0:	20009968 	.word	0x20009968

0800bdf4 <global_stdio_init.part.0>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	4b0b      	ldr	r3, [pc, #44]	@ (800be24 <global_stdio_init.part.0+0x30>)
 800bdf8:	4c0b      	ldr	r4, [pc, #44]	@ (800be28 <global_stdio_init.part.0+0x34>)
 800bdfa:	4a0c      	ldr	r2, [pc, #48]	@ (800be2c <global_stdio_init.part.0+0x38>)
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	4620      	mov	r0, r4
 800be00:	2200      	movs	r2, #0
 800be02:	2104      	movs	r1, #4
 800be04:	f7ff ff94 	bl	800bd30 <std>
 800be08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800be0c:	2201      	movs	r2, #1
 800be0e:	2109      	movs	r1, #9
 800be10:	f7ff ff8e 	bl	800bd30 <std>
 800be14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be18:	2202      	movs	r2, #2
 800be1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be1e:	2112      	movs	r1, #18
 800be20:	f7ff bf86 	b.w	800bd30 <std>
 800be24:	200099d0 	.word	0x200099d0
 800be28:	20009898 	.word	0x20009898
 800be2c:	0800bd9d 	.word	0x0800bd9d

0800be30 <__sfp_lock_acquire>:
 800be30:	4801      	ldr	r0, [pc, #4]	@ (800be38 <__sfp_lock_acquire+0x8>)
 800be32:	f7f9 bb2c 	b.w	800548e <__retarget_lock_acquire_recursive>
 800be36:	bf00      	nop
 800be38:	2000876c 	.word	0x2000876c

0800be3c <__sfp_lock_release>:
 800be3c:	4801      	ldr	r0, [pc, #4]	@ (800be44 <__sfp_lock_release+0x8>)
 800be3e:	f7f9 bb32 	b.w	80054a6 <__retarget_lock_release_recursive>
 800be42:	bf00      	nop
 800be44:	2000876c 	.word	0x2000876c

0800be48 <__sinit>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	4604      	mov	r4, r0
 800be4c:	f7ff fff0 	bl	800be30 <__sfp_lock_acquire>
 800be50:	6a23      	ldr	r3, [r4, #32]
 800be52:	b11b      	cbz	r3, 800be5c <__sinit+0x14>
 800be54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be58:	f7ff bff0 	b.w	800be3c <__sfp_lock_release>
 800be5c:	4b04      	ldr	r3, [pc, #16]	@ (800be70 <__sinit+0x28>)
 800be5e:	6223      	str	r3, [r4, #32]
 800be60:	4b04      	ldr	r3, [pc, #16]	@ (800be74 <__sinit+0x2c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f5      	bne.n	800be54 <__sinit+0xc>
 800be68:	f7ff ffc4 	bl	800bdf4 <global_stdio_init.part.0>
 800be6c:	e7f2      	b.n	800be54 <__sinit+0xc>
 800be6e:	bf00      	nop
 800be70:	0800bdb5 	.word	0x0800bdb5
 800be74:	200099d0 	.word	0x200099d0

0800be78 <_fwalk_sglue>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4607      	mov	r7, r0
 800be7e:	4688      	mov	r8, r1
 800be80:	4614      	mov	r4, r2
 800be82:	2600      	movs	r6, #0
 800be84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be88:	f1b9 0901 	subs.w	r9, r9, #1
 800be8c:	d505      	bpl.n	800be9a <_fwalk_sglue+0x22>
 800be8e:	6824      	ldr	r4, [r4, #0]
 800be90:	2c00      	cmp	r4, #0
 800be92:	d1f7      	bne.n	800be84 <_fwalk_sglue+0xc>
 800be94:	4630      	mov	r0, r6
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d907      	bls.n	800beb0 <_fwalk_sglue+0x38>
 800bea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bea4:	3301      	adds	r3, #1
 800bea6:	d003      	beq.n	800beb0 <_fwalk_sglue+0x38>
 800bea8:	4629      	mov	r1, r5
 800beaa:	4638      	mov	r0, r7
 800beac:	47c0      	blx	r8
 800beae:	4306      	orrs	r6, r0
 800beb0:	3568      	adds	r5, #104	@ 0x68
 800beb2:	e7e9      	b.n	800be88 <_fwalk_sglue+0x10>

0800beb4 <sniprintf>:
 800beb4:	b40c      	push	{r2, r3}
 800beb6:	b530      	push	{r4, r5, lr}
 800beb8:	4b17      	ldr	r3, [pc, #92]	@ (800bf18 <sniprintf+0x64>)
 800beba:	1e0c      	subs	r4, r1, #0
 800bebc:	681d      	ldr	r5, [r3, #0]
 800bebe:	b09d      	sub	sp, #116	@ 0x74
 800bec0:	da08      	bge.n	800bed4 <sniprintf+0x20>
 800bec2:	238b      	movs	r3, #139	@ 0x8b
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	b01d      	add	sp, #116	@ 0x74
 800becc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bed0:	b002      	add	sp, #8
 800bed2:	4770      	bx	lr
 800bed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bedc:	bf14      	ite	ne
 800bede:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bee2:	4623      	moveq	r3, r4
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800beec:	9002      	str	r0, [sp, #8]
 800beee:	9006      	str	r0, [sp, #24]
 800bef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bef6:	ab21      	add	r3, sp, #132	@ 0x84
 800bef8:	a902      	add	r1, sp, #8
 800befa:	4628      	mov	r0, r5
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	f002 ff09 	bl	800ed14 <_svfiprintf_r>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	bfbc      	itt	lt
 800bf06:	238b      	movlt	r3, #139	@ 0x8b
 800bf08:	602b      	strlt	r3, [r5, #0]
 800bf0a:	2c00      	cmp	r4, #0
 800bf0c:	d0dd      	beq.n	800beca <sniprintf+0x16>
 800bf0e:	9b02      	ldr	r3, [sp, #8]
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	e7d9      	b.n	800beca <sniprintf+0x16>
 800bf16:	bf00      	nop
 800bf18:	200001a8 	.word	0x200001a8

0800bf1c <siprintf>:
 800bf1c:	b40e      	push	{r1, r2, r3}
 800bf1e:	b500      	push	{lr}
 800bf20:	b09c      	sub	sp, #112	@ 0x70
 800bf22:	ab1d      	add	r3, sp, #116	@ 0x74
 800bf24:	9002      	str	r0, [sp, #8]
 800bf26:	9006      	str	r0, [sp, #24]
 800bf28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf2c:	4809      	ldr	r0, [pc, #36]	@ (800bf54 <siprintf+0x38>)
 800bf2e:	9107      	str	r1, [sp, #28]
 800bf30:	9104      	str	r1, [sp, #16]
 800bf32:	4909      	ldr	r1, [pc, #36]	@ (800bf58 <siprintf+0x3c>)
 800bf34:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf38:	9105      	str	r1, [sp, #20]
 800bf3a:	6800      	ldr	r0, [r0, #0]
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	a902      	add	r1, sp, #8
 800bf40:	f002 fee8 	bl	800ed14 <_svfiprintf_r>
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	b01c      	add	sp, #112	@ 0x70
 800bf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf50:	b003      	add	sp, #12
 800bf52:	4770      	bx	lr
 800bf54:	200001a8 	.word	0x200001a8
 800bf58:	ffff0208 	.word	0xffff0208

0800bf5c <siscanf>:
 800bf5c:	b40e      	push	{r1, r2, r3}
 800bf5e:	b530      	push	{r4, r5, lr}
 800bf60:	b09c      	sub	sp, #112	@ 0x70
 800bf62:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bf64:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bf68:	f854 5b04 	ldr.w	r5, [r4], #4
 800bf6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bf70:	9002      	str	r0, [sp, #8]
 800bf72:	9006      	str	r0, [sp, #24]
 800bf74:	f7f4 f98c 	bl	8000290 <strlen>
 800bf78:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <siscanf+0x4c>)
 800bf7a:	9003      	str	r0, [sp, #12]
 800bf7c:	9007      	str	r0, [sp, #28]
 800bf7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf80:	480a      	ldr	r0, [pc, #40]	@ (800bfac <siscanf+0x50>)
 800bf82:	9401      	str	r4, [sp, #4]
 800bf84:	2300      	movs	r3, #0
 800bf86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf88:	9314      	str	r3, [sp, #80]	@ 0x50
 800bf8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf92:	462a      	mov	r2, r5
 800bf94:	4623      	mov	r3, r4
 800bf96:	a902      	add	r1, sp, #8
 800bf98:	6800      	ldr	r0, [r0, #0]
 800bf9a:	f003 f80f 	bl	800efbc <__ssvfiscanf_r>
 800bf9e:	b01c      	add	sp, #112	@ 0x70
 800bfa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfa4:	b003      	add	sp, #12
 800bfa6:	4770      	bx	lr
 800bfa8:	0800bfd3 	.word	0x0800bfd3
 800bfac:	200001a8 	.word	0x200001a8

0800bfb0 <__sread>:
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	f000 fe66 	bl	800cc88 <_read_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	bfab      	itete	ge
 800bfc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfc4:	181b      	addge	r3, r3, r0
 800bfc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfca:	bfac      	ite	ge
 800bfcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfce:	81a3      	strhlt	r3, [r4, #12]
 800bfd0:	bd10      	pop	{r4, pc}

0800bfd2 <__seofread>:
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	4770      	bx	lr

0800bfd6 <__swrite>:
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	461f      	mov	r7, r3
 800bfdc:	898b      	ldrh	r3, [r1, #12]
 800bfde:	05db      	lsls	r3, r3, #23
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	4616      	mov	r6, r2
 800bfe6:	d505      	bpl.n	800bff4 <__swrite+0x1e>
 800bfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfec:	2302      	movs	r3, #2
 800bfee:	2200      	movs	r2, #0
 800bff0:	f000 fe38 	bl	800cc64 <_lseek_r>
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	4632      	mov	r2, r6
 800c002:	463b      	mov	r3, r7
 800c004:	4628      	mov	r0, r5
 800c006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c00a:	f000 be5f 	b.w	800cccc <_write_r>

0800c00e <__sseek>:
 800c00e:	b510      	push	{r4, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c016:	f000 fe25 	bl	800cc64 <_lseek_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	bf15      	itete	ne
 800c020:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c02a:	81a3      	strheq	r3, [r4, #12]
 800c02c:	bf18      	it	ne
 800c02e:	81a3      	strhne	r3, [r4, #12]
 800c030:	bd10      	pop	{r4, pc}

0800c032 <__sclose>:
 800c032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c036:	f000 be05 	b.w	800cc44 <_close_r>

0800c03a <_vsniprintf_r>:
 800c03a:	b530      	push	{r4, r5, lr}
 800c03c:	4614      	mov	r4, r2
 800c03e:	2c00      	cmp	r4, #0
 800c040:	b09b      	sub	sp, #108	@ 0x6c
 800c042:	4605      	mov	r5, r0
 800c044:	461a      	mov	r2, r3
 800c046:	da05      	bge.n	800c054 <_vsniprintf_r+0x1a>
 800c048:	238b      	movs	r3, #139	@ 0x8b
 800c04a:	6003      	str	r3, [r0, #0]
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	b01b      	add	sp, #108	@ 0x6c
 800c052:	bd30      	pop	{r4, r5, pc}
 800c054:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c058:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c05c:	bf14      	ite	ne
 800c05e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c062:	4623      	moveq	r3, r4
 800c064:	9302      	str	r3, [sp, #8]
 800c066:	9305      	str	r3, [sp, #20]
 800c068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c06c:	9100      	str	r1, [sp, #0]
 800c06e:	9104      	str	r1, [sp, #16]
 800c070:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c074:	4669      	mov	r1, sp
 800c076:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c078:	f002 fe4c 	bl	800ed14 <_svfiprintf_r>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	bfbc      	itt	lt
 800c080:	238b      	movlt	r3, #139	@ 0x8b
 800c082:	602b      	strlt	r3, [r5, #0]
 800c084:	2c00      	cmp	r4, #0
 800c086:	d0e3      	beq.n	800c050 <_vsniprintf_r+0x16>
 800c088:	9b00      	ldr	r3, [sp, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	e7df      	b.n	800c050 <_vsniprintf_r+0x16>

0800c090 <vsniprintf>:
 800c090:	b507      	push	{r0, r1, r2, lr}
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	4613      	mov	r3, r2
 800c096:	460a      	mov	r2, r1
 800c098:	4601      	mov	r1, r0
 800c09a:	4803      	ldr	r0, [pc, #12]	@ (800c0a8 <vsniprintf+0x18>)
 800c09c:	6800      	ldr	r0, [r0, #0]
 800c09e:	f7ff ffcc 	bl	800c03a <_vsniprintf_r>
 800c0a2:	b003      	add	sp, #12
 800c0a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0a8:	200001a8 	.word	0x200001a8

0800c0ac <memset>:
 800c0ac:	4402      	add	r2, r0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d100      	bne.n	800c0b6 <memset+0xa>
 800c0b4:	4770      	bx	lr
 800c0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ba:	e7f9      	b.n	800c0b0 <memset+0x4>

0800c0bc <strchr>:
 800c0bc:	b2c9      	uxtb	r1, r1
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0c6:	b112      	cbz	r2, 800c0ce <strchr+0x12>
 800c0c8:	428a      	cmp	r2, r1
 800c0ca:	d1f9      	bne.n	800c0c0 <strchr+0x4>
 800c0cc:	4770      	bx	lr
 800c0ce:	2900      	cmp	r1, #0
 800c0d0:	bf18      	it	ne
 800c0d2:	2000      	movne	r0, #0
 800c0d4:	4770      	bx	lr

0800c0d6 <strncmp>:
 800c0d6:	b510      	push	{r4, lr}
 800c0d8:	b16a      	cbz	r2, 800c0f6 <strncmp+0x20>
 800c0da:	3901      	subs	r1, #1
 800c0dc:	1884      	adds	r4, r0, r2
 800c0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d103      	bne.n	800c0f2 <strncmp+0x1c>
 800c0ea:	42a0      	cmp	r0, r4
 800c0ec:	d001      	beq.n	800c0f2 <strncmp+0x1c>
 800c0ee:	2a00      	cmp	r2, #0
 800c0f0:	d1f5      	bne.n	800c0de <strncmp+0x8>
 800c0f2:	1ad0      	subs	r0, r2, r3
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	e7fc      	b.n	800c0f4 <strncmp+0x1e>

0800c0fa <strncpy>:
 800c0fa:	b510      	push	{r4, lr}
 800c0fc:	3901      	subs	r1, #1
 800c0fe:	4603      	mov	r3, r0
 800c100:	b132      	cbz	r2, 800c110 <strncpy+0x16>
 800c102:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c106:	f803 4b01 	strb.w	r4, [r3], #1
 800c10a:	3a01      	subs	r2, #1
 800c10c:	2c00      	cmp	r4, #0
 800c10e:	d1f7      	bne.n	800c100 <strncpy+0x6>
 800c110:	441a      	add	r2, r3
 800c112:	2100      	movs	r1, #0
 800c114:	4293      	cmp	r3, r2
 800c116:	d100      	bne.n	800c11a <strncpy+0x20>
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	f803 1b01 	strb.w	r1, [r3], #1
 800c11e:	e7f9      	b.n	800c114 <strncpy+0x1a>

0800c120 <strrchr>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c126:	4603      	mov	r3, r0
 800c128:	d10e      	bne.n	800c148 <strrchr+0x28>
 800c12a:	4621      	mov	r1, r4
 800c12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c130:	f7ff bfc4 	b.w	800c0bc <strchr>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	4605      	mov	r5, r0
 800c138:	4621      	mov	r1, r4
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff ffbe 	bl	800c0bc <strchr>
 800c140:	2800      	cmp	r0, #0
 800c142:	d1f7      	bne.n	800c134 <strrchr+0x14>
 800c144:	4628      	mov	r0, r5
 800c146:	bd38      	pop	{r3, r4, r5, pc}
 800c148:	2500      	movs	r5, #0
 800c14a:	e7f5      	b.n	800c138 <strrchr+0x18>

0800c14c <strstr>:
 800c14c:	780a      	ldrb	r2, [r1, #0]
 800c14e:	b570      	push	{r4, r5, r6, lr}
 800c150:	b96a      	cbnz	r2, 800c16e <strstr+0x22>
 800c152:	bd70      	pop	{r4, r5, r6, pc}
 800c154:	429a      	cmp	r2, r3
 800c156:	d109      	bne.n	800c16c <strstr+0x20>
 800c158:	460c      	mov	r4, r1
 800c15a:	4605      	mov	r5, r0
 800c15c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0f6      	beq.n	800c152 <strstr+0x6>
 800c164:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c168:	429e      	cmp	r6, r3
 800c16a:	d0f7      	beq.n	800c15c <strstr+0x10>
 800c16c:	3001      	adds	r0, #1
 800c16e:	7803      	ldrb	r3, [r0, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1ef      	bne.n	800c154 <strstr+0x8>
 800c174:	4618      	mov	r0, r3
 800c176:	e7ec      	b.n	800c152 <strstr+0x6>

0800c178 <validate_structure>:
 800c178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c17a:	6801      	ldr	r1, [r0, #0]
 800c17c:	293b      	cmp	r1, #59	@ 0x3b
 800c17e:	4604      	mov	r4, r0
 800c180:	d911      	bls.n	800c1a6 <validate_structure+0x2e>
 800c182:	223c      	movs	r2, #60	@ 0x3c
 800c184:	4668      	mov	r0, sp
 800c186:	f000 fe01 	bl	800cd8c <div>
 800c18a:	9a01      	ldr	r2, [sp, #4]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	9900      	ldr	r1, [sp, #0]
 800c190:	2a00      	cmp	r2, #0
 800c192:	440b      	add	r3, r1
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	bfbb      	ittet	lt
 800c198:	323c      	addlt	r2, #60	@ 0x3c
 800c19a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c19e:	6022      	strge	r2, [r4, #0]
 800c1a0:	6022      	strlt	r2, [r4, #0]
 800c1a2:	bfb8      	it	lt
 800c1a4:	6063      	strlt	r3, [r4, #4]
 800c1a6:	6861      	ldr	r1, [r4, #4]
 800c1a8:	293b      	cmp	r1, #59	@ 0x3b
 800c1aa:	d911      	bls.n	800c1d0 <validate_structure+0x58>
 800c1ac:	223c      	movs	r2, #60	@ 0x3c
 800c1ae:	4668      	mov	r0, sp
 800c1b0:	f000 fdec 	bl	800cd8c <div>
 800c1b4:	9a01      	ldr	r2, [sp, #4]
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	2a00      	cmp	r2, #0
 800c1bc:	440b      	add	r3, r1
 800c1be:	60a3      	str	r3, [r4, #8]
 800c1c0:	bfbb      	ittet	lt
 800c1c2:	323c      	addlt	r2, #60	@ 0x3c
 800c1c4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1c8:	6062      	strge	r2, [r4, #4]
 800c1ca:	6062      	strlt	r2, [r4, #4]
 800c1cc:	bfb8      	it	lt
 800c1ce:	60a3      	strlt	r3, [r4, #8]
 800c1d0:	68a1      	ldr	r1, [r4, #8]
 800c1d2:	2917      	cmp	r1, #23
 800c1d4:	d911      	bls.n	800c1fa <validate_structure+0x82>
 800c1d6:	2218      	movs	r2, #24
 800c1d8:	4668      	mov	r0, sp
 800c1da:	f000 fdd7 	bl	800cd8c <div>
 800c1de:	9a01      	ldr	r2, [sp, #4]
 800c1e0:	68e3      	ldr	r3, [r4, #12]
 800c1e2:	9900      	ldr	r1, [sp, #0]
 800c1e4:	2a00      	cmp	r2, #0
 800c1e6:	440b      	add	r3, r1
 800c1e8:	60e3      	str	r3, [r4, #12]
 800c1ea:	bfbb      	ittet	lt
 800c1ec:	3218      	addlt	r2, #24
 800c1ee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1f2:	60a2      	strge	r2, [r4, #8]
 800c1f4:	60a2      	strlt	r2, [r4, #8]
 800c1f6:	bfb8      	it	lt
 800c1f8:	60e3      	strlt	r3, [r4, #12]
 800c1fa:	6921      	ldr	r1, [r4, #16]
 800c1fc:	290b      	cmp	r1, #11
 800c1fe:	d911      	bls.n	800c224 <validate_structure+0xac>
 800c200:	220c      	movs	r2, #12
 800c202:	4668      	mov	r0, sp
 800c204:	f000 fdc2 	bl	800cd8c <div>
 800c208:	9a01      	ldr	r2, [sp, #4]
 800c20a:	6963      	ldr	r3, [r4, #20]
 800c20c:	9900      	ldr	r1, [sp, #0]
 800c20e:	2a00      	cmp	r2, #0
 800c210:	440b      	add	r3, r1
 800c212:	6163      	str	r3, [r4, #20]
 800c214:	bfbb      	ittet	lt
 800c216:	320c      	addlt	r2, #12
 800c218:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c21c:	6122      	strge	r2, [r4, #16]
 800c21e:	6122      	strlt	r2, [r4, #16]
 800c220:	bfb8      	it	lt
 800c222:	6163      	strlt	r3, [r4, #20]
 800c224:	6963      	ldr	r3, [r4, #20]
 800c226:	079a      	lsls	r2, r3, #30
 800c228:	d11c      	bne.n	800c264 <validate_structure+0xec>
 800c22a:	2164      	movs	r1, #100	@ 0x64
 800c22c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c230:	fb01 3212 	mls	r2, r1, r2, r3
 800c234:	b9c2      	cbnz	r2, 800c268 <validate_structure+0xf0>
 800c236:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800c23a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c23e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c242:	fb02 3311 	mls	r3, r2, r1, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	bf14      	ite	ne
 800c24a:	231c      	movne	r3, #28
 800c24c:	231d      	moveq	r3, #29
 800c24e:	68e2      	ldr	r2, [r4, #12]
 800c250:	2a00      	cmp	r2, #0
 800c252:	dc0b      	bgt.n	800c26c <validate_structure+0xf4>
 800c254:	4d31      	ldr	r5, [pc, #196]	@ (800c31c <validate_structure+0x1a4>)
 800c256:	200b      	movs	r0, #11
 800c258:	2164      	movs	r1, #100	@ 0x64
 800c25a:	68e6      	ldr	r6, [r4, #12]
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	dd30      	ble.n	800c2c2 <validate_structure+0x14a>
 800c260:	b003      	add	sp, #12
 800c262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c264:	231c      	movs	r3, #28
 800c266:	e7f2      	b.n	800c24e <validate_structure+0xd6>
 800c268:	231d      	movs	r3, #29
 800c26a:	e7f0      	b.n	800c24e <validate_structure+0xd6>
 800c26c:	4d2b      	ldr	r5, [pc, #172]	@ (800c31c <validate_structure+0x1a4>)
 800c26e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c272:	2a01      	cmp	r2, #1
 800c274:	bf14      	ite	ne
 800c276:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800c27a:	4618      	moveq	r0, r3
 800c27c:	4281      	cmp	r1, r0
 800c27e:	ddef      	ble.n	800c260 <validate_structure+0xe8>
 800c280:	3201      	adds	r2, #1
 800c282:	1a09      	subs	r1, r1, r0
 800c284:	2a0c      	cmp	r2, #12
 800c286:	60e1      	str	r1, [r4, #12]
 800c288:	6122      	str	r2, [r4, #16]
 800c28a:	d1f0      	bne.n	800c26e <validate_structure+0xf6>
 800c28c:	6963      	ldr	r3, [r4, #20]
 800c28e:	2100      	movs	r1, #0
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	6121      	str	r1, [r4, #16]
 800c294:	0791      	lsls	r1, r2, #30
 800c296:	6162      	str	r2, [r4, #20]
 800c298:	d13c      	bne.n	800c314 <validate_structure+0x19c>
 800c29a:	2164      	movs	r1, #100	@ 0x64
 800c29c:	fb92 f0f1 	sdiv	r0, r2, r1
 800c2a0:	fb01 2210 	mls	r2, r1, r0, r2
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d137      	bne.n	800c318 <validate_structure+0x1a0>
 800c2a8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800c2ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c2b0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c2b4:	fb02 3311 	mls	r3, r2, r1, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bf14      	ite	ne
 800c2bc:	231c      	movne	r3, #28
 800c2be:	231d      	moveq	r3, #29
 800c2c0:	e7d5      	b.n	800c26e <validate_structure+0xf6>
 800c2c2:	6922      	ldr	r2, [r4, #16]
 800c2c4:	3a01      	subs	r2, #1
 800c2c6:	6122      	str	r2, [r4, #16]
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	d116      	bne.n	800c2fa <validate_structure+0x182>
 800c2cc:	6963      	ldr	r3, [r4, #20]
 800c2ce:	1e5a      	subs	r2, r3, #1
 800c2d0:	0797      	lsls	r7, r2, #30
 800c2d2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800c2d6:	d119      	bne.n	800c30c <validate_structure+0x194>
 800c2d8:	fb92 f7f1 	sdiv	r7, r2, r1
 800c2dc:	fb01 2217 	mls	r2, r1, r7, r2
 800c2e0:	b9b2      	cbnz	r2, 800c310 <validate_structure+0x198>
 800c2e2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800c2e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c2ea:	fb93 f7f2 	sdiv	r7, r3, r2
 800c2ee:	fb02 3317 	mls	r3, r2, r7, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bf14      	ite	ne
 800c2f6:	231c      	movne	r3, #28
 800c2f8:	231d      	moveq	r3, #29
 800c2fa:	6922      	ldr	r2, [r4, #16]
 800c2fc:	2a01      	cmp	r2, #1
 800c2fe:	bf14      	ite	ne
 800c300:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800c304:	461a      	moveq	r2, r3
 800c306:	4432      	add	r2, r6
 800c308:	60e2      	str	r2, [r4, #12]
 800c30a:	e7a6      	b.n	800c25a <validate_structure+0xe2>
 800c30c:	231c      	movs	r3, #28
 800c30e:	e7f4      	b.n	800c2fa <validate_structure+0x182>
 800c310:	231d      	movs	r3, #29
 800c312:	e7f2      	b.n	800c2fa <validate_structure+0x182>
 800c314:	231c      	movs	r3, #28
 800c316:	e7aa      	b.n	800c26e <validate_structure+0xf6>
 800c318:	231d      	movs	r3, #29
 800c31a:	e7a8      	b.n	800c26e <validate_structure+0xf6>
 800c31c:	080128a0 	.word	0x080128a0

0800c320 <mktime>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	b085      	sub	sp, #20
 800c326:	4607      	mov	r7, r0
 800c328:	f003 fa44 	bl	800f7b4 <__gettzinfo>
 800c32c:	4681      	mov	r9, r0
 800c32e:	4638      	mov	r0, r7
 800c330:	f7ff ff22 	bl	800c178 <validate_structure>
 800c334:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c338:	223c      	movs	r2, #60	@ 0x3c
 800c33a:	fb02 4403 	mla	r4, r2, r3, r4
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	697d      	ldr	r5, [r7, #20]
 800c342:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c346:	fb02 4403 	mla	r4, r2, r3, r4
 800c34a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800c34e:	4ac1      	ldr	r2, [pc, #772]	@ (800c654 <mktime+0x334>)
 800c350:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c354:	3e01      	subs	r6, #1
 800c356:	2b01      	cmp	r3, #1
 800c358:	4416      	add	r6, r2
 800c35a:	dd11      	ble.n	800c380 <mktime+0x60>
 800c35c:	07a9      	lsls	r1, r5, #30
 800c35e:	d10f      	bne.n	800c380 <mktime+0x60>
 800c360:	2264      	movs	r2, #100	@ 0x64
 800c362:	fb95 f3f2 	sdiv	r3, r5, r2
 800c366:	fb02 5313 	mls	r3, r2, r3, r5
 800c36a:	b943      	cbnz	r3, 800c37e <mktime+0x5e>
 800c36c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c370:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c374:	fb93 f1f2 	sdiv	r1, r3, r2
 800c378:	fb02 3311 	mls	r3, r2, r1, r3
 800c37c:	b903      	cbnz	r3, 800c380 <mktime+0x60>
 800c37e:	3601      	adds	r6, #1
 800c380:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800c384:	3310      	adds	r3, #16
 800c386:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800c38a:	4293      	cmp	r3, r2
 800c38c:	61fe      	str	r6, [r7, #28]
 800c38e:	f200 8167 	bhi.w	800c660 <mktime+0x340>
 800c392:	2d46      	cmp	r5, #70	@ 0x46
 800c394:	f340 808e 	ble.w	800c4b4 <mktime+0x194>
 800c398:	2346      	movs	r3, #70	@ 0x46
 800c39a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c39e:	2164      	movs	r1, #100	@ 0x64
 800c3a0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c3a4:	079a      	lsls	r2, r3, #30
 800c3a6:	d17f      	bne.n	800c4a8 <mktime+0x188>
 800c3a8:	fb93 f2f1 	sdiv	r2, r3, r1
 800c3ac:	fb01 3212 	mls	r2, r1, r2, r3
 800c3b0:	2a00      	cmp	r2, #0
 800c3b2:	d17c      	bne.n	800c4ae <mktime+0x18e>
 800c3b4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c3b8:	fb92 fef0 	sdiv	lr, r2, r0
 800c3bc:	fb00 221e 	mls	r2, r0, lr, r2
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	bf14      	ite	ne
 800c3c4:	4662      	movne	r2, ip
 800c3c6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	4416      	add	r6, r2
 800c3d0:	d1e8      	bne.n	800c3a4 <mktime+0x84>
 800c3d2:	4ba1      	ldr	r3, [pc, #644]	@ (800c658 <mktime+0x338>)
 800c3d4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c3d8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c3dc:	f000 f9fa 	bl	800c7d4 <__tz_lock>
 800c3e0:	f000 fa04 	bl	800c7ec <_tzset_unlocked>
 800c3e4:	4b9d      	ldr	r3, [pc, #628]	@ (800c65c <mktime+0x33c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 8140 	beq.w	800c66e <mktime+0x34e>
 800c3ee:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c3f2:	6978      	ldr	r0, [r7, #20]
 800c3f4:	4653      	mov	r3, sl
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	bfa8      	it	ge
 800c3fa:	2301      	movge	r3, #1
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c402:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c406:	4283      	cmp	r3, r0
 800c408:	f040 8096 	bne.w	800c538 <mktime+0x218>
 800c40c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c410:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c414:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c418:	1a13      	subs	r3, r2, r0
 800c41a:	9303      	str	r3, [sp, #12]
 800c41c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800c420:	9302      	str	r3, [sp, #8]
 800c422:	9a02      	ldr	r2, [sp, #8]
 800c424:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c428:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800c42c:	ebb2 0e03 	subs.w	lr, r2, r3
 800c430:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c434:	4574      	cmp	r4, lr
 800c436:	eb78 0201 	sbcs.w	r2, r8, r1
 800c43a:	f280 8085 	bge.w	800c548 <mktime+0x228>
 800c43e:	f8d9 2000 	ldr.w	r2, [r9]
 800c442:	2a00      	cmp	r2, #0
 800c444:	f000 808d 	beq.w	800c562 <mktime+0x242>
 800c448:	9a03      	ldr	r2, [sp, #12]
 800c44a:	4294      	cmp	r4, r2
 800c44c:	eb78 020b 	sbcs.w	r2, r8, fp
 800c450:	f2c0 810a 	blt.w	800c668 <mktime+0x348>
 800c454:	4574      	cmp	r4, lr
 800c456:	eb78 0101 	sbcs.w	r1, r8, r1
 800c45a:	bfb4      	ite	lt
 800c45c:	f04f 0b01 	movlt.w	fp, #1
 800c460:	f04f 0b00 	movge.w	fp, #0
 800c464:	f1ba 0f00 	cmp.w	sl, #0
 800c468:	f280 8087 	bge.w	800c57a <mktime+0x25a>
 800c46c:	f1bb 0f01 	cmp.w	fp, #1
 800c470:	f040 80ff 	bne.w	800c672 <mktime+0x352>
 800c474:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800c478:	191c      	adds	r4, r3, r4
 800c47a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c47e:	f04f 0b01 	mov.w	fp, #1
 800c482:	f000 f9ad 	bl	800c7e0 <__tz_unlock>
 800c486:	3604      	adds	r6, #4
 800c488:	2307      	movs	r3, #7
 800c48a:	fb96 f3f3 	sdiv	r3, r6, r3
 800c48e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c492:	1af6      	subs	r6, r6, r3
 800c494:	f100 80db 	bmi.w	800c64e <mktime+0x32e>
 800c498:	f8c7 b020 	str.w	fp, [r7, #32]
 800c49c:	61be      	str	r6, [r7, #24]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	b005      	add	sp, #20
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800c4ac:	e78d      	b.n	800c3ca <mktime+0xaa>
 800c4ae:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c4b2:	e78a      	b.n	800c3ca <mktime+0xaa>
 800c4b4:	d08d      	beq.n	800c3d2 <mktime+0xb2>
 800c4b6:	2345      	movs	r3, #69	@ 0x45
 800c4b8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c4bc:	2164      	movs	r1, #100	@ 0x64
 800c4be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c4c2:	e012      	b.n	800c4ea <mktime+0x1ca>
 800c4c4:	bb62      	cbnz	r2, 800c520 <mktime+0x200>
 800c4c6:	fb93 f2f1 	sdiv	r2, r3, r1
 800c4ca:	fb01 3212 	mls	r2, r1, r2, r3
 800c4ce:	bb52      	cbnz	r2, 800c526 <mktime+0x206>
 800c4d0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c4d4:	fb92 fef0 	sdiv	lr, r2, r0
 800c4d8:	fb00 221e 	mls	r2, r0, lr, r2
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	bf14      	ite	ne
 800c4e0:	4662      	movne	r2, ip
 800c4e2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c4e6:	1ab6      	subs	r6, r6, r2
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	429d      	cmp	r5, r3
 800c4ec:	f003 0203 	and.w	r2, r3, #3
 800c4f0:	dbe8      	blt.n	800c4c4 <mktime+0x1a4>
 800c4f2:	b9da      	cbnz	r2, 800c52c <mktime+0x20c>
 800c4f4:	2264      	movs	r2, #100	@ 0x64
 800c4f6:	fb95 f3f2 	sdiv	r3, r5, r2
 800c4fa:	fb02 5313 	mls	r3, r2, r3, r5
 800c4fe:	b9c3      	cbnz	r3, 800c532 <mktime+0x212>
 800c500:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c504:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c508:	fb93 f1f2 	sdiv	r1, r3, r2
 800c50c:	fb02 3311 	mls	r3, r2, r1, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	f240 136d 	movw	r3, #365	@ 0x16d
 800c516:	bf08      	it	eq
 800c518:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800c51c:	1af6      	subs	r6, r6, r3
 800c51e:	e758      	b.n	800c3d2 <mktime+0xb2>
 800c520:	f240 126d 	movw	r2, #365	@ 0x16d
 800c524:	e7df      	b.n	800c4e6 <mktime+0x1c6>
 800c526:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c52a:	e7dc      	b.n	800c4e6 <mktime+0x1c6>
 800c52c:	f240 136d 	movw	r3, #365	@ 0x16d
 800c530:	e7f4      	b.n	800c51c <mktime+0x1fc>
 800c532:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800c536:	e7f1      	b.n	800c51c <mktime+0x1fc>
 800c538:	f000 f8a2 	bl	800c680 <__tzcalc_limits>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f47f af65 	bne.w	800c40c <mktime+0xec>
 800c542:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c546:	e791      	b.n	800c46c <mktime+0x14c>
 800c548:	9a02      	ldr	r2, [sp, #8]
 800c54a:	1a12      	subs	r2, r2, r0
 800c54c:	9202      	str	r2, [sp, #8]
 800c54e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c552:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c556:	9a02      	ldr	r2, [sp, #8]
 800c558:	4294      	cmp	r4, r2
 800c55a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c55e:	dbf0      	blt.n	800c542 <mktime+0x222>
 800c560:	e76d      	b.n	800c43e <mktime+0x11e>
 800c562:	9a03      	ldr	r2, [sp, #12]
 800c564:	4294      	cmp	r4, r2
 800c566:	eb78 020b 	sbcs.w	r2, r8, fp
 800c56a:	f6ff af73 	blt.w	800c454 <mktime+0x134>
 800c56e:	f1ba 0f00 	cmp.w	sl, #0
 800c572:	f6ff af7f 	blt.w	800c474 <mktime+0x154>
 800c576:	f04f 0b01 	mov.w	fp, #1
 800c57a:	9a01      	ldr	r2, [sp, #4]
 800c57c:	ea82 020b 	eor.w	r2, r2, fp
 800c580:	2a01      	cmp	r2, #1
 800c582:	f47f af73 	bne.w	800c46c <mktime+0x14c>
 800c586:	f1bb 0f00 	cmp.w	fp, #0
 800c58a:	d035      	beq.n	800c5f8 <mktime+0x2d8>
 800c58c:	1a1b      	subs	r3, r3, r0
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c594:	441a      	add	r2, r3
 800c596:	191c      	adds	r4, r3, r4
 800c598:	603a      	str	r2, [r7, #0]
 800c59a:	4638      	mov	r0, r7
 800c59c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c5a0:	f7ff fdea 	bl	800c178 <validate_structure>
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	ebb2 020a 	subs.w	r2, r2, sl
 800c5aa:	f43f af5f 	beq.w	800c46c <mktime+0x14c>
 800c5ae:	2a01      	cmp	r2, #1
 800c5b0:	dc24      	bgt.n	800c5fc <mktime+0x2dc>
 800c5b2:	1c93      	adds	r3, r2, #2
 800c5b4:	bfd8      	it	le
 800c5b6:	2201      	movle	r2, #1
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	18d3      	adds	r3, r2, r3
 800c5bc:	d527      	bpl.n	800c60e <mktime+0x2ee>
 800c5be:	1e6b      	subs	r3, r5, #1
 800c5c0:	0798      	lsls	r0, r3, #30
 800c5c2:	d11e      	bne.n	800c602 <mktime+0x2e2>
 800c5c4:	2164      	movs	r1, #100	@ 0x64
 800c5c6:	fb93 f0f1 	sdiv	r0, r3, r1
 800c5ca:	fb01 3310 	mls	r3, r1, r0, r3
 800c5ce:	b9db      	cbnz	r3, 800c608 <mktime+0x2e8>
 800c5d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c5d4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800c5d8:	fb95 f1f3 	sdiv	r1, r5, r3
 800c5dc:	fb03 5511 	mls	r5, r3, r1, r5
 800c5e0:	2d00      	cmp	r5, #0
 800c5e2:	f240 136d 	movw	r3, #365	@ 0x16d
 800c5e6:	bf18      	it	ne
 800c5e8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800c5ec:	61fb      	str	r3, [r7, #28]
 800c5ee:	4416      	add	r6, r2
 800c5f0:	e73c      	b.n	800c46c <mktime+0x14c>
 800c5f2:	f04f 0b00 	mov.w	fp, #0
 800c5f6:	e7c0      	b.n	800c57a <mktime+0x25a>
 800c5f8:	1ac3      	subs	r3, r0, r3
 800c5fa:	e7c8      	b.n	800c58e <mktime+0x26e>
 800c5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c600:	e7da      	b.n	800c5b8 <mktime+0x298>
 800c602:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800c606:	e7f1      	b.n	800c5ec <mktime+0x2cc>
 800c608:	f240 136d 	movw	r3, #365	@ 0x16d
 800c60c:	e7ee      	b.n	800c5ec <mktime+0x2cc>
 800c60e:	07a9      	lsls	r1, r5, #30
 800c610:	d117      	bne.n	800c642 <mktime+0x322>
 800c612:	2064      	movs	r0, #100	@ 0x64
 800c614:	fb95 f1f0 	sdiv	r1, r5, r0
 800c618:	fb00 5111 	mls	r1, r0, r1, r5
 800c61c:	b9a1      	cbnz	r1, 800c648 <mktime+0x328>
 800c61e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c622:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800c626:	fb95 f0f1 	sdiv	r0, r5, r1
 800c62a:	fb01 5510 	mls	r5, r1, r0, r5
 800c62e:	2d00      	cmp	r5, #0
 800c630:	f240 116d 	movw	r1, #365	@ 0x16d
 800c634:	bf08      	it	eq
 800c636:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800c63a:	428b      	cmp	r3, r1
 800c63c:	bfa8      	it	ge
 800c63e:	1a5b      	subge	r3, r3, r1
 800c640:	e7d4      	b.n	800c5ec <mktime+0x2cc>
 800c642:	f240 116d 	movw	r1, #365	@ 0x16d
 800c646:	e7f8      	b.n	800c63a <mktime+0x31a>
 800c648:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800c64c:	e7f5      	b.n	800c63a <mktime+0x31a>
 800c64e:	3607      	adds	r6, #7
 800c650:	e722      	b.n	800c498 <mktime+0x178>
 800c652:	bf00      	nop
 800c654:	08012870 	.word	0x08012870
 800c658:	00015180 	.word	0x00015180
 800c65c:	200099f4 	.word	0x200099f4
 800c660:	f04f 34ff 	mov.w	r4, #4294967295
 800c664:	46a0      	mov	r8, r4
 800c666:	e71a      	b.n	800c49e <mktime+0x17e>
 800c668:	f1ba 0f00 	cmp.w	sl, #0
 800c66c:	dac1      	bge.n	800c5f2 <mktime+0x2d2>
 800c66e:	f04f 0b00 	mov.w	fp, #0
 800c672:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c676:	191c      	adds	r4, r3, r4
 800c678:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c67c:	e701      	b.n	800c482 <mktime+0x162>
 800c67e:	bf00      	nop

0800c680 <__tzcalc_limits>:
 800c680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	4604      	mov	r4, r0
 800c686:	f003 f895 	bl	800f7b4 <__gettzinfo>
 800c68a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800c68e:	429c      	cmp	r4, r3
 800c690:	f340 8099 	ble.w	800c7c6 <__tzcalc_limits+0x146>
 800c694:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800c698:	19e5      	adds	r5, r4, r7
 800c69a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800c69e:	f240 126d 	movw	r2, #365	@ 0x16d
 800c6a2:	10ad      	asrs	r5, r5, #2
 800c6a4:	fb02 5503 	mla	r5, r2, r3, r5
 800c6a8:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800c6ac:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800c6b0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800c6b4:	4f45      	ldr	r7, [pc, #276]	@ (800c7cc <__tzcalc_limits+0x14c>)
 800c6b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ba:	441d      	add	r5, r3
 800c6bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c6c0:	eb04 030c 	add.w	r3, r4, ip
 800c6c4:	6044      	str	r4, [r0, #4]
 800c6c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	441d      	add	r5, r3
 800c6ce:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800c6d2:	7a0b      	ldrb	r3, [r1, #8]
 800c6d4:	694a      	ldr	r2, [r1, #20]
 800c6d6:	2b4a      	cmp	r3, #74	@ 0x4a
 800c6d8:	d133      	bne.n	800c742 <__tzcalc_limits+0xc2>
 800c6da:	07a6      	lsls	r6, r4, #30
 800c6dc:	eb05 0302 	add.w	r3, r5, r2
 800c6e0:	d106      	bne.n	800c6f0 <__tzcalc_limits+0x70>
 800c6e2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800c6e6:	fb94 f6fe 	sdiv	r6, r4, lr
 800c6ea:	fb0e 4616 	mls	r6, lr, r6, r4
 800c6ee:	b936      	cbnz	r6, 800c6fe <__tzcalc_limits+0x7e>
 800c6f0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800c6f4:	fb94 f6fe 	sdiv	r6, r4, lr
 800c6f8:	fb0e 4616 	mls	r6, lr, r6, r4
 800c6fc:	b9fe      	cbnz	r6, 800c73e <__tzcalc_limits+0xbe>
 800c6fe:	2a3b      	cmp	r2, #59	@ 0x3b
 800c700:	bfd4      	ite	le
 800c702:	2200      	movle	r2, #0
 800c704:	2201      	movgt	r2, #1
 800c706:	4413      	add	r3, r2
 800c708:	3b01      	subs	r3, #1
 800c70a:	698a      	ldr	r2, [r1, #24]
 800c70c:	17d6      	asrs	r6, r2, #31
 800c70e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800c712:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c714:	18d2      	adds	r2, r2, r3
 800c716:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800c71a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c71e:	3128      	adds	r1, #40	@ 0x28
 800c720:	458c      	cmp	ip, r1
 800c722:	d1d6      	bne.n	800c6d2 <__tzcalc_limits+0x52>
 800c724:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800c728:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800c72c:	428c      	cmp	r4, r1
 800c72e:	4193      	sbcs	r3, r2
 800c730:	bfb4      	ite	lt
 800c732:	2301      	movlt	r3, #1
 800c734:	2300      	movge	r3, #0
 800c736:	6003      	str	r3, [r0, #0]
 800c738:	2001      	movs	r0, #1
 800c73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73e:	2200      	movs	r2, #0
 800c740:	e7e1      	b.n	800c706 <__tzcalc_limits+0x86>
 800c742:	2b44      	cmp	r3, #68	@ 0x44
 800c744:	d101      	bne.n	800c74a <__tzcalc_limits+0xca>
 800c746:	18ab      	adds	r3, r5, r2
 800c748:	e7df      	b.n	800c70a <__tzcalc_limits+0x8a>
 800c74a:	07a3      	lsls	r3, r4, #30
 800c74c:	d105      	bne.n	800c75a <__tzcalc_limits+0xda>
 800c74e:	2664      	movs	r6, #100	@ 0x64
 800c750:	fb94 f3f6 	sdiv	r3, r4, r6
 800c754:	fb06 4313 	mls	r3, r6, r3, r4
 800c758:	bb7b      	cbnz	r3, 800c7ba <__tzcalc_limits+0x13a>
 800c75a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c75e:	fb94 f6f3 	sdiv	r6, r4, r3
 800c762:	fb03 4616 	mls	r6, r3, r6, r4
 800c766:	fab6 f686 	clz	r6, r6
 800c76a:	0976      	lsrs	r6, r6, #5
 800c76c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800c7d0 <__tzcalc_limits+0x150>
 800c770:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c774:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800c778:	462b      	mov	r3, r5
 800c77a:	f04f 0800 	mov.w	r8, #0
 800c77e:	fb0a e606 	mla	r6, sl, r6, lr
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	45c1      	cmp	r9, r8
 800c788:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800c78c:	dc17      	bgt.n	800c7be <__tzcalc_limits+0x13e>
 800c78e:	f103 0804 	add.w	r8, r3, #4
 800c792:	2607      	movs	r6, #7
 800c794:	fb98 f6f6 	sdiv	r6, r8, r6
 800c798:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c79c:	eba8 0606 	sub.w	r6, r8, r6
 800c7a0:	1b92      	subs	r2, r2, r6
 800c7a2:	690e      	ldr	r6, [r1, #16]
 800c7a4:	f106 36ff 	add.w	r6, r6, #4294967295
 800c7a8:	bf48      	it	mi
 800c7aa:	3207      	addmi	r2, #7
 800c7ac:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c7b0:	4432      	add	r2, r6
 800c7b2:	4572      	cmp	r2, lr
 800c7b4:	da05      	bge.n	800c7c2 <__tzcalc_limits+0x142>
 800c7b6:	4413      	add	r3, r2
 800c7b8:	e7a7      	b.n	800c70a <__tzcalc_limits+0x8a>
 800c7ba:	2601      	movs	r6, #1
 800c7bc:	e7d6      	b.n	800c76c <__tzcalc_limits+0xec>
 800c7be:	4473      	add	r3, lr
 800c7c0:	e7df      	b.n	800c782 <__tzcalc_limits+0x102>
 800c7c2:	3a07      	subs	r2, #7
 800c7c4:	e7f5      	b.n	800c7b2 <__tzcalc_limits+0x132>
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	e7b7      	b.n	800c73a <__tzcalc_limits+0xba>
 800c7ca:	bf00      	nop
 800c7cc:	00015180 	.word	0x00015180
 800c7d0:	08012b90 	.word	0x08012b90

0800c7d4 <__tz_lock>:
 800c7d4:	4801      	ldr	r0, [pc, #4]	@ (800c7dc <__tz_lock+0x8>)
 800c7d6:	f7f8 be52 	b.w	800547e <__retarget_lock_acquire>
 800c7da:	bf00      	nop
 800c7dc:	20008748 	.word	0x20008748

0800c7e0 <__tz_unlock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	@ (800c7e8 <__tz_unlock+0x8>)
 800c7e2:	f7f8 be56 	b.w	8005492 <__retarget_lock_release>
 800c7e6:	bf00      	nop
 800c7e8:	20008748 	.word	0x20008748

0800c7ec <_tzset_unlocked>:
 800c7ec:	4b01      	ldr	r3, [pc, #4]	@ (800c7f4 <_tzset_unlocked+0x8>)
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	f000 b802 	b.w	800c7f8 <_tzset_unlocked_r>
 800c7f4:	200001a8 	.word	0x200001a8

0800c7f8 <_tzset_unlocked_r>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	b08d      	sub	sp, #52	@ 0x34
 800c7fe:	4607      	mov	r7, r0
 800c800:	f002 ffd8 	bl	800f7b4 <__gettzinfo>
 800c804:	49bc      	ldr	r1, [pc, #752]	@ (800caf8 <_tzset_unlocked_r+0x300>)
 800c806:	4dbd      	ldr	r5, [pc, #756]	@ (800cafc <_tzset_unlocked_r+0x304>)
 800c808:	4604      	mov	r4, r0
 800c80a:	4638      	mov	r0, r7
 800c80c:	f001 fcd4 	bl	800e1b8 <_getenv_r>
 800c810:	4606      	mov	r6, r0
 800c812:	bb10      	cbnz	r0, 800c85a <_tzset_unlocked_r+0x62>
 800c814:	4bba      	ldr	r3, [pc, #744]	@ (800cb00 <_tzset_unlocked_r+0x308>)
 800c816:	4abb      	ldr	r2, [pc, #748]	@ (800cb04 <_tzset_unlocked_r+0x30c>)
 800c818:	6018      	str	r0, [r3, #0]
 800c81a:	4bbb      	ldr	r3, [pc, #748]	@ (800cb08 <_tzset_unlocked_r+0x310>)
 800c81c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800c81e:	6018      	str	r0, [r3, #0]
 800c820:	4bba      	ldr	r3, [pc, #744]	@ (800cb0c <_tzset_unlocked_r+0x314>)
 800c822:	6520      	str	r0, [r4, #80]	@ 0x50
 800c824:	e9c3 2200 	strd	r2, r2, [r3]
 800c828:	214a      	movs	r1, #74	@ 0x4a
 800c82a:	2200      	movs	r2, #0
 800c82c:	2300      	movs	r3, #0
 800c82e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800c832:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800c836:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800c83a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c83e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c842:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c846:	6828      	ldr	r0, [r5, #0]
 800c848:	7221      	strb	r1, [r4, #8]
 800c84a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c84e:	f7fd fcb1 	bl	800a1b4 <free>
 800c852:	602e      	str	r6, [r5, #0]
 800c854:	b00d      	add	sp, #52	@ 0x34
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	6829      	ldr	r1, [r5, #0]
 800c85c:	2900      	cmp	r1, #0
 800c85e:	f040 808e 	bne.w	800c97e <_tzset_unlocked_r+0x186>
 800c862:	6828      	ldr	r0, [r5, #0]
 800c864:	f7fd fca6 	bl	800a1b4 <free>
 800c868:	4630      	mov	r0, r6
 800c86a:	f7f3 fd11 	bl	8000290 <strlen>
 800c86e:	1c41      	adds	r1, r0, #1
 800c870:	4638      	mov	r0, r7
 800c872:	f7fd fcc9 	bl	800a208 <_malloc_r>
 800c876:	6028      	str	r0, [r5, #0]
 800c878:	2800      	cmp	r0, #0
 800c87a:	f040 8086 	bne.w	800c98a <_tzset_unlocked_r+0x192>
 800c87e:	4aa2      	ldr	r2, [pc, #648]	@ (800cb08 <_tzset_unlocked_r+0x310>)
 800c880:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800cb0c <_tzset_unlocked_r+0x314>
 800c884:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800cb00 <_tzset_unlocked_r+0x308>
 800c888:	2300      	movs	r3, #0
 800c88a:	6013      	str	r3, [r2, #0]
 800c88c:	4aa0      	ldr	r2, [pc, #640]	@ (800cb10 <_tzset_unlocked_r+0x318>)
 800c88e:	f8ca 3000 	str.w	r3, [sl]
 800c892:	2000      	movs	r0, #0
 800c894:	2100      	movs	r1, #0
 800c896:	e9c8 2200 	strd	r2, r2, [r8]
 800c89a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800c89e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800c8a2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800c8a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800c8aa:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800c8ae:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800c8b2:	224a      	movs	r2, #74	@ 0x4a
 800c8b4:	7222      	strb	r2, [r4, #8]
 800c8b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8b8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800c8bc:	6523      	str	r3, [r4, #80]	@ 0x50
 800c8be:	7833      	ldrb	r3, [r6, #0]
 800c8c0:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8c2:	bf08      	it	eq
 800c8c4:	3601      	addeq	r6, #1
 800c8c6:	7833      	ldrb	r3, [r6, #0]
 800c8c8:	2b3c      	cmp	r3, #60	@ 0x3c
 800c8ca:	d162      	bne.n	800c992 <_tzset_unlocked_r+0x19a>
 800c8cc:	1c75      	adds	r5, r6, #1
 800c8ce:	4a91      	ldr	r2, [pc, #580]	@ (800cb14 <_tzset_unlocked_r+0x31c>)
 800c8d0:	4991      	ldr	r1, [pc, #580]	@ (800cb18 <_tzset_unlocked_r+0x320>)
 800c8d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7ff fb41 	bl	800bf5c <siscanf>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	ddba      	ble.n	800c854 <_tzset_unlocked_r+0x5c>
 800c8de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8e0:	1eda      	subs	r2, r3, #3
 800c8e2:	2a07      	cmp	r2, #7
 800c8e4:	d8b6      	bhi.n	800c854 <_tzset_unlocked_r+0x5c>
 800c8e6:	5ceb      	ldrb	r3, [r5, r3]
 800c8e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8ea:	d1b3      	bne.n	800c854 <_tzset_unlocked_r+0x5c>
 800c8ec:	3602      	adds	r6, #2
 800c8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f0:	18f5      	adds	r5, r6, r3
 800c8f2:	5cf3      	ldrb	r3, [r6, r3]
 800c8f4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c8f6:	d15a      	bne.n	800c9ae <_tzset_unlocked_r+0x1b6>
 800c8f8:	3501      	adds	r5, #1
 800c8fa:	f04f 39ff 	mov.w	r9, #4294967295
 800c8fe:	2300      	movs	r3, #0
 800c900:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c904:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c908:	af08      	add	r7, sp, #32
 800c90a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c90c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800c910:	9303      	str	r3, [sp, #12]
 800c912:	f10d 031e 	add.w	r3, sp, #30
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	4980      	ldr	r1, [pc, #512]	@ (800cb1c <_tzset_unlocked_r+0x324>)
 800c91a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c91c:	aa07      	add	r2, sp, #28
 800c91e:	4628      	mov	r0, r5
 800c920:	f7ff fb1c 	bl	800bf5c <siscanf>
 800c924:	2800      	cmp	r0, #0
 800c926:	dd95      	ble.n	800c854 <_tzset_unlocked_r+0x5c>
 800c928:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c92c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800c930:	223c      	movs	r2, #60	@ 0x3c
 800c932:	fb02 6603 	mla	r6, r2, r3, r6
 800c936:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c93a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c93e:	fb02 6603 	mla	r6, r2, r3, r6
 800c942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c944:	fb09 f606 	mul.w	r6, r9, r6
 800c948:	eb05 0903 	add.w	r9, r5, r3
 800c94c:	5ceb      	ldrb	r3, [r5, r3]
 800c94e:	2b3c      	cmp	r3, #60	@ 0x3c
 800c950:	f040 80ee 	bne.w	800cb30 <_tzset_unlocked_r+0x338>
 800c954:	f109 0501 	add.w	r5, r9, #1
 800c958:	4a71      	ldr	r2, [pc, #452]	@ (800cb20 <_tzset_unlocked_r+0x328>)
 800c95a:	496f      	ldr	r1, [pc, #444]	@ (800cb18 <_tzset_unlocked_r+0x320>)
 800c95c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c95e:	4628      	mov	r0, r5
 800c960:	f7ff fafc 	bl	800bf5c <siscanf>
 800c964:	2800      	cmp	r0, #0
 800c966:	dc28      	bgt.n	800c9ba <_tzset_unlocked_r+0x1c2>
 800c968:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c96c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c96e:	d124      	bne.n	800c9ba <_tzset_unlocked_r+0x1c2>
 800c970:	4b68      	ldr	r3, [pc, #416]	@ (800cb14 <_tzset_unlocked_r+0x31c>)
 800c972:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c974:	e9c8 3300 	strd	r3, r3, [r8]
 800c978:	f8ca 6000 	str.w	r6, [sl]
 800c97c:	e76a      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800c97e:	f7f3 fc27 	bl	80001d0 <strcmp>
 800c982:	2800      	cmp	r0, #0
 800c984:	f47f af6d 	bne.w	800c862 <_tzset_unlocked_r+0x6a>
 800c988:	e764      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800c98a:	4631      	mov	r1, r6
 800c98c:	f000 f9da 	bl	800cd44 <strcpy>
 800c990:	e775      	b.n	800c87e <_tzset_unlocked_r+0x86>
 800c992:	4a60      	ldr	r2, [pc, #384]	@ (800cb14 <_tzset_unlocked_r+0x31c>)
 800c994:	4963      	ldr	r1, [pc, #396]	@ (800cb24 <_tzset_unlocked_r+0x32c>)
 800c996:	ab0a      	add	r3, sp, #40	@ 0x28
 800c998:	4630      	mov	r0, r6
 800c99a:	f7ff fadf 	bl	800bf5c <siscanf>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f77f af58 	ble.w	800c854 <_tzset_unlocked_r+0x5c>
 800c9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9a6:	3b03      	subs	r3, #3
 800c9a8:	2b07      	cmp	r3, #7
 800c9aa:	d9a0      	bls.n	800c8ee <_tzset_unlocked_r+0xf6>
 800c9ac:	e752      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800c9ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800c9b0:	bf08      	it	eq
 800c9b2:	3501      	addeq	r5, #1
 800c9b4:	f04f 0901 	mov.w	r9, #1
 800c9b8:	e7a1      	b.n	800c8fe <_tzset_unlocked_r+0x106>
 800c9ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9bc:	1eda      	subs	r2, r3, #3
 800c9be:	2a07      	cmp	r2, #7
 800c9c0:	f63f af48 	bhi.w	800c854 <_tzset_unlocked_r+0x5c>
 800c9c4:	5ceb      	ldrb	r3, [r5, r3]
 800c9c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9c8:	f47f af44 	bne.w	800c854 <_tzset_unlocked_r+0x5c>
 800c9cc:	f109 0902 	add.w	r9, r9, #2
 800c9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9d2:	eb09 0503 	add.w	r5, r9, r3
 800c9d6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c9da:	2b2d      	cmp	r3, #45	@ 0x2d
 800c9dc:	f040 80b7 	bne.w	800cb4e <_tzset_unlocked_r+0x356>
 800c9e0:	3501      	adds	r5, #1
 800c9e2:	f04f 39ff 	mov.w	r9, #4294967295
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c9ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c9f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c9f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	f10d 031e 	add.w	r3, sp, #30
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	4945      	ldr	r1, [pc, #276]	@ (800cb1c <_tzset_unlocked_r+0x324>)
 800ca06:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca08:	aa07      	add	r2, sp, #28
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f7ff faa6 	bl	800bf5c <siscanf>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f300 80a2 	bgt.w	800cb5a <_tzset_unlocked_r+0x362>
 800ca16:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca1e:	4627      	mov	r7, r4
 800ca20:	441d      	add	r5, r3
 800ca22:	f04f 0b00 	mov.w	fp, #0
 800ca26:	782b      	ldrb	r3, [r5, #0]
 800ca28:	2b2c      	cmp	r3, #44	@ 0x2c
 800ca2a:	bf08      	it	eq
 800ca2c:	3501      	addeq	r5, #1
 800ca2e:	f895 9000 	ldrb.w	r9, [r5]
 800ca32:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800ca36:	f040 80a3 	bne.w	800cb80 <_tzset_unlocked_r+0x388>
 800ca3a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca3c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800ca40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ca44:	aa09      	add	r2, sp, #36	@ 0x24
 800ca46:	9200      	str	r2, [sp, #0]
 800ca48:	4937      	ldr	r1, [pc, #220]	@ (800cb28 <_tzset_unlocked_r+0x330>)
 800ca4a:	9303      	str	r3, [sp, #12]
 800ca4c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7ff fa83 	bl	800bf5c <siscanf>
 800ca56:	2803      	cmp	r0, #3
 800ca58:	f47f aefc 	bne.w	800c854 <_tzset_unlocked_r+0x5c>
 800ca5c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ca60:	1e4b      	subs	r3, r1, #1
 800ca62:	2b0b      	cmp	r3, #11
 800ca64:	f63f aef6 	bhi.w	800c854 <_tzset_unlocked_r+0x5c>
 800ca68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800ca6c:	1e53      	subs	r3, r2, #1
 800ca6e:	2b04      	cmp	r3, #4
 800ca70:	f63f aef0 	bhi.w	800c854 <_tzset_unlocked_r+0x5c>
 800ca74:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800ca78:	2b06      	cmp	r3, #6
 800ca7a:	f63f aeeb 	bhi.w	800c854 <_tzset_unlocked_r+0x5c>
 800ca7e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ca82:	f887 9008 	strb.w	r9, [r7, #8]
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8a:	eb05 0903 	add.w	r9, r5, r3
 800ca8e:	2500      	movs	r5, #0
 800ca90:	f04f 0302 	mov.w	r3, #2
 800ca94:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ca98:	f8ad 501e 	strh.w	r5, [sp, #30]
 800ca9c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800caa0:	950a      	str	r5, [sp, #40]	@ 0x28
 800caa2:	f899 3000 	ldrb.w	r3, [r9]
 800caa6:	2b2f      	cmp	r3, #47	@ 0x2f
 800caa8:	f040 8096 	bne.w	800cbd8 <_tzset_unlocked_r+0x3e0>
 800caac:	ab0a      	add	r3, sp, #40	@ 0x28
 800caae:	aa08      	add	r2, sp, #32
 800cab0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cab4:	f10d 021e 	add.w	r2, sp, #30
 800cab8:	9200      	str	r2, [sp, #0]
 800caba:	491c      	ldr	r1, [pc, #112]	@ (800cb2c <_tzset_unlocked_r+0x334>)
 800cabc:	9303      	str	r3, [sp, #12]
 800cabe:	aa07      	add	r2, sp, #28
 800cac0:	4648      	mov	r0, r9
 800cac2:	f7ff fa4b 	bl	800bf5c <siscanf>
 800cac6:	42a8      	cmp	r0, r5
 800cac8:	f300 8086 	bgt.w	800cbd8 <_tzset_unlocked_r+0x3e0>
 800cacc:	214a      	movs	r1, #74	@ 0x4a
 800cace:	2200      	movs	r2, #0
 800cad0:	2300      	movs	r3, #0
 800cad2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800cad6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cada:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cade:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800cae2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800cae6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800caea:	7221      	strb	r1, [r4, #8]
 800caec:	62a5      	str	r5, [r4, #40]	@ 0x28
 800caee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800caf2:	6525      	str	r5, [r4, #80]	@ 0x50
 800caf4:	e6ae      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800caf6:	bf00      	nop
 800caf8:	080128d0 	.word	0x080128d0
 800cafc:	200099d4 	.word	0x200099d4
 800cb00:	200099f0 	.word	0x200099f0
 800cb04:	080128d3 	.word	0x080128d3
 800cb08:	200099f4 	.word	0x200099f4
 800cb0c:	20000034 	.word	0x20000034
 800cb10:	080115aa 	.word	0x080115aa
 800cb14:	200099e4 	.word	0x200099e4
 800cb18:	080128d7 	.word	0x080128d7
 800cb1c:	0801290c 	.word	0x0801290c
 800cb20:	200099d8 	.word	0x200099d8
 800cb24:	080128ea 	.word	0x080128ea
 800cb28:	080128f8 	.word	0x080128f8
 800cb2c:	0801290b 	.word	0x0801290b
 800cb30:	4a3e      	ldr	r2, [pc, #248]	@ (800cc2c <_tzset_unlocked_r+0x434>)
 800cb32:	493f      	ldr	r1, [pc, #252]	@ (800cc30 <_tzset_unlocked_r+0x438>)
 800cb34:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb36:	4648      	mov	r0, r9
 800cb38:	f7ff fa10 	bl	800bf5c <siscanf>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f77f af17 	ble.w	800c970 <_tzset_unlocked_r+0x178>
 800cb42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb44:	3b03      	subs	r3, #3
 800cb46:	2b07      	cmp	r3, #7
 800cb48:	f67f af42 	bls.w	800c9d0 <_tzset_unlocked_r+0x1d8>
 800cb4c:	e682      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800cb4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb50:	bf08      	it	eq
 800cb52:	3501      	addeq	r5, #1
 800cb54:	f04f 0901 	mov.w	r9, #1
 800cb58:	e745      	b.n	800c9e6 <_tzset_unlocked_r+0x1ee>
 800cb5a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cb5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cb62:	213c      	movs	r1, #60	@ 0x3c
 800cb64:	fb01 3302 	mla	r3, r1, r2, r3
 800cb68:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cb6c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800cb70:	fb01 3302 	mla	r3, r1, r2, r3
 800cb74:	fb09 f303 	mul.w	r3, r9, r3
 800cb78:	e74f      	b.n	800ca1a <_tzset_unlocked_r+0x222>
 800cb7a:	f04f 0b01 	mov.w	fp, #1
 800cb7e:	e752      	b.n	800ca26 <_tzset_unlocked_r+0x22e>
 800cb80:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800cb84:	bf06      	itte	eq
 800cb86:	3501      	addeq	r5, #1
 800cb88:	464b      	moveq	r3, r9
 800cb8a:	2344      	movne	r3, #68	@ 0x44
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	a90b      	add	r1, sp, #44	@ 0x2c
 800cb90:	4628      	mov	r0, r5
 800cb92:	9305      	str	r3, [sp, #20]
 800cb94:	f002 f84c 	bl	800ec30 <strtoul>
 800cb98:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800cb9c:	9b05      	ldr	r3, [sp, #20]
 800cb9e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800cba2:	45a9      	cmp	r9, r5
 800cba4:	d114      	bne.n	800cbd0 <_tzset_unlocked_r+0x3d8>
 800cba6:	234d      	movs	r3, #77	@ 0x4d
 800cba8:	f1bb 0f00 	cmp.w	fp, #0
 800cbac:	d107      	bne.n	800cbbe <_tzset_unlocked_r+0x3c6>
 800cbae:	7223      	strb	r3, [r4, #8]
 800cbb0:	2103      	movs	r1, #3
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800cbb8:	f8c4 b014 	str.w	fp, [r4, #20]
 800cbbc:	e767      	b.n	800ca8e <_tzset_unlocked_r+0x296>
 800cbbe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800cbc2:	220b      	movs	r2, #11
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800cbce:	e75e      	b.n	800ca8e <_tzset_unlocked_r+0x296>
 800cbd0:	b280      	uxth	r0, r0
 800cbd2:	723b      	strb	r3, [r7, #8]
 800cbd4:	6178      	str	r0, [r7, #20]
 800cbd6:	e75a      	b.n	800ca8e <_tzset_unlocked_r+0x296>
 800cbd8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cbdc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cbe0:	213c      	movs	r1, #60	@ 0x3c
 800cbe2:	fb01 3302 	mla	r3, r1, r2, r3
 800cbe6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cbea:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800cbee:	fb01 3302 	mla	r3, r1, r2, r3
 800cbf2:	61bb      	str	r3, [r7, #24]
 800cbf4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800cbf6:	3728      	adds	r7, #40	@ 0x28
 800cbf8:	444d      	add	r5, r9
 800cbfa:	f1bb 0f00 	cmp.w	fp, #0
 800cbfe:	d0bc      	beq.n	800cb7a <_tzset_unlocked_r+0x382>
 800cc00:	9b04      	ldr	r3, [sp, #16]
 800cc02:	6523      	str	r3, [r4, #80]	@ 0x50
 800cc04:	4b0b      	ldr	r3, [pc, #44]	@ (800cc34 <_tzset_unlocked_r+0x43c>)
 800cc06:	f8c8 3000 	str.w	r3, [r8]
 800cc0a:	6860      	ldr	r0, [r4, #4]
 800cc0c:	4b07      	ldr	r3, [pc, #28]	@ (800cc2c <_tzset_unlocked_r+0x434>)
 800cc0e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800cc10:	f8c8 3004 	str.w	r3, [r8, #4]
 800cc14:	f7ff fd34 	bl	800c680 <__tzcalc_limits>
 800cc18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800cc1a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cc1c:	f8ca 2000 	str.w	r2, [sl]
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	4a05      	ldr	r2, [pc, #20]	@ (800cc38 <_tzset_unlocked_r+0x440>)
 800cc24:	bf18      	it	ne
 800cc26:	2301      	movne	r3, #1
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	e613      	b.n	800c854 <_tzset_unlocked_r+0x5c>
 800cc2c:	200099d8 	.word	0x200099d8
 800cc30:	080128ea 	.word	0x080128ea
 800cc34:	200099e4 	.word	0x200099e4
 800cc38:	200099f4 	.word	0x200099f4

0800cc3c <_localeconv_r>:
 800cc3c:	4800      	ldr	r0, [pc, #0]	@ (800cc40 <_localeconv_r+0x4>)
 800cc3e:	4770      	bx	lr
 800cc40:	2000012c 	.word	0x2000012c

0800cc44 <_close_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d06      	ldr	r5, [pc, #24]	@ (800cc60 <_close_r+0x1c>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	f7f8 faf6 	bl	8005240 <_close>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_close_r+0x1a>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_close_r+0x1a>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	200099f8 	.word	0x200099f8

0800cc64 <_lseek_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4d07      	ldr	r5, [pc, #28]	@ (800cc84 <_lseek_r+0x20>)
 800cc68:	4604      	mov	r4, r0
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	2200      	movs	r2, #0
 800cc70:	602a      	str	r2, [r5, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	f7f8 faee 	bl	8005254 <_lseek>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_lseek_r+0x1e>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_lseek_r+0x1e>
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	200099f8 	.word	0x200099f8

0800cc88 <_read_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d07      	ldr	r5, [pc, #28]	@ (800cca8 <_read_r+0x20>)
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	4608      	mov	r0, r1
 800cc90:	4611      	mov	r1, r2
 800cc92:	2200      	movs	r2, #0
 800cc94:	602a      	str	r2, [r5, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f7f8 fab6 	bl	8005208 <_read>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d102      	bne.n	800cca6 <_read_r+0x1e>
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	b103      	cbz	r3, 800cca6 <_read_r+0x1e>
 800cca4:	6023      	str	r3, [r4, #0]
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
 800cca8:	200099f8 	.word	0x200099f8

0800ccac <_sbrk_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4d06      	ldr	r5, [pc, #24]	@ (800ccc8 <_sbrk_r+0x1c>)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	f7f8 face 	bl	8005258 <_sbrk>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_sbrk_r+0x1a>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_sbrk_r+0x1a>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	200099f8 	.word	0x200099f8

0800cccc <_write_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d07      	ldr	r5, [pc, #28]	@ (800ccec <_write_r+0x20>)
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4608      	mov	r0, r1
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	602a      	str	r2, [r5, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7f8 faa2 	bl	8005224 <_write>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_write_r+0x1e>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_write_r+0x1e>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	200099f8 	.word	0x200099f8

0800ccf0 <__errno>:
 800ccf0:	4b01      	ldr	r3, [pc, #4]	@ (800ccf8 <__errno+0x8>)
 800ccf2:	6818      	ldr	r0, [r3, #0]
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	200001a8 	.word	0x200001a8

0800ccfc <__libc_init_array>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	4d0d      	ldr	r5, [pc, #52]	@ (800cd34 <__libc_init_array+0x38>)
 800cd00:	4c0d      	ldr	r4, [pc, #52]	@ (800cd38 <__libc_init_array+0x3c>)
 800cd02:	1b64      	subs	r4, r4, r5
 800cd04:	10a4      	asrs	r4, r4, #2
 800cd06:	2600      	movs	r6, #0
 800cd08:	42a6      	cmp	r6, r4
 800cd0a:	d109      	bne.n	800cd20 <__libc_init_array+0x24>
 800cd0c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd3c <__libc_init_array+0x40>)
 800cd0e:	4c0c      	ldr	r4, [pc, #48]	@ (800cd40 <__libc_init_array+0x44>)
 800cd10:	f003 f940 	bl	800ff94 <_init>
 800cd14:	1b64      	subs	r4, r4, r5
 800cd16:	10a4      	asrs	r4, r4, #2
 800cd18:	2600      	movs	r6, #0
 800cd1a:	42a6      	cmp	r6, r4
 800cd1c:	d105      	bne.n	800cd2a <__libc_init_array+0x2e>
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd24:	4798      	blx	r3
 800cd26:	3601      	adds	r6, #1
 800cd28:	e7ee      	b.n	800cd08 <__libc_init_array+0xc>
 800cd2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd2e:	4798      	blx	r3
 800cd30:	3601      	adds	r6, #1
 800cd32:	e7f2      	b.n	800cd1a <__libc_init_array+0x1e>
 800cd34:	08012c38 	.word	0x08012c38
 800cd38:	08012c38 	.word	0x08012c38
 800cd3c:	08012c38 	.word	0x08012c38
 800cd40:	08012c3c 	.word	0x08012c3c

0800cd44 <strcpy>:
 800cd44:	4603      	mov	r3, r0
 800cd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd4a:	f803 2b01 	strb.w	r2, [r3], #1
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	d1f9      	bne.n	800cd46 <strcpy+0x2>
 800cd52:	4770      	bx	lr

0800cd54 <memcpy>:
 800cd54:	440a      	add	r2, r1
 800cd56:	4291      	cmp	r1, r2
 800cd58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd5c:	d100      	bne.n	800cd60 <memcpy+0xc>
 800cd5e:	4770      	bx	lr
 800cd60:	b510      	push	{r4, lr}
 800cd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd6a:	4291      	cmp	r1, r2
 800cd6c:	d1f9      	bne.n	800cd62 <memcpy+0xe>
 800cd6e:	bd10      	pop	{r4, pc}

0800cd70 <nan>:
 800cd70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd78 <nan+0x8>
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	7ff80000 	.word	0x7ff80000

0800cd80 <nanf>:
 800cd80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cd88 <nanf+0x8>
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	7fc00000 	.word	0x7fc00000

0800cd8c <div>:
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	fb91 f4f2 	sdiv	r4, r1, r2
 800cd92:	fb02 1114 	mls	r1, r2, r4, r1
 800cd96:	6004      	str	r4, [r0, #0]
 800cd98:	6041      	str	r1, [r0, #4]
 800cd9a:	bd10      	pop	{r4, pc}

0800cd9c <quorem>:
 800cd9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	6903      	ldr	r3, [r0, #16]
 800cda2:	690c      	ldr	r4, [r1, #16]
 800cda4:	42a3      	cmp	r3, r4
 800cda6:	4607      	mov	r7, r0
 800cda8:	db7e      	blt.n	800cea8 <quorem+0x10c>
 800cdaa:	3c01      	subs	r4, #1
 800cdac:	f101 0814 	add.w	r8, r1, #20
 800cdb0:	00a3      	lsls	r3, r4, #2
 800cdb2:	f100 0514 	add.w	r5, r0, #20
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cdc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdce:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdd2:	d32e      	bcc.n	800ce32 <quorem+0x96>
 800cdd4:	f04f 0a00 	mov.w	sl, #0
 800cdd8:	46c4      	mov	ip, r8
 800cdda:	46ae      	mov	lr, r5
 800cddc:	46d3      	mov	fp, sl
 800cdde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cde2:	b298      	uxth	r0, r3
 800cde4:	fb06 a000 	mla	r0, r6, r0, sl
 800cde8:	0c02      	lsrs	r2, r0, #16
 800cdea:	0c1b      	lsrs	r3, r3, #16
 800cdec:	fb06 2303 	mla	r3, r6, r3, r2
 800cdf0:	f8de 2000 	ldr.w	r2, [lr]
 800cdf4:	b280      	uxth	r0, r0
 800cdf6:	b292      	uxth	r2, r2
 800cdf8:	1a12      	subs	r2, r2, r0
 800cdfa:	445a      	add	r2, fp
 800cdfc:	f8de 0000 	ldr.w	r0, [lr]
 800ce00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ce0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ce0e:	b292      	uxth	r2, r2
 800ce10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ce14:	45e1      	cmp	r9, ip
 800ce16:	f84e 2b04 	str.w	r2, [lr], #4
 800ce1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ce1e:	d2de      	bcs.n	800cdde <quorem+0x42>
 800ce20:	9b00      	ldr	r3, [sp, #0]
 800ce22:	58eb      	ldr	r3, [r5, r3]
 800ce24:	b92b      	cbnz	r3, 800ce32 <quorem+0x96>
 800ce26:	9b01      	ldr	r3, [sp, #4]
 800ce28:	3b04      	subs	r3, #4
 800ce2a:	429d      	cmp	r5, r3
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	d32f      	bcc.n	800ce90 <quorem+0xf4>
 800ce30:	613c      	str	r4, [r7, #16]
 800ce32:	4638      	mov	r0, r7
 800ce34:	f001 fc9e 	bl	800e774 <__mcmp>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	db25      	blt.n	800ce88 <quorem+0xec>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	2000      	movs	r0, #0
 800ce40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce44:	f8d1 c000 	ldr.w	ip, [r1]
 800ce48:	fa1f fe82 	uxth.w	lr, r2
 800ce4c:	fa1f f38c 	uxth.w	r3, ip
 800ce50:	eba3 030e 	sub.w	r3, r3, lr
 800ce54:	4403      	add	r3, r0
 800ce56:	0c12      	lsrs	r2, r2, #16
 800ce58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ce5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce66:	45c1      	cmp	r9, r8
 800ce68:	f841 3b04 	str.w	r3, [r1], #4
 800ce6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce70:	d2e6      	bcs.n	800ce40 <quorem+0xa4>
 800ce72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce7a:	b922      	cbnz	r2, 800ce86 <quorem+0xea>
 800ce7c:	3b04      	subs	r3, #4
 800ce7e:	429d      	cmp	r5, r3
 800ce80:	461a      	mov	r2, r3
 800ce82:	d30b      	bcc.n	800ce9c <quorem+0x100>
 800ce84:	613c      	str	r4, [r7, #16]
 800ce86:	3601      	adds	r6, #1
 800ce88:	4630      	mov	r0, r6
 800ce8a:	b003      	add	sp, #12
 800ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce90:	6812      	ldr	r2, [r2, #0]
 800ce92:	3b04      	subs	r3, #4
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	d1cb      	bne.n	800ce30 <quorem+0x94>
 800ce98:	3c01      	subs	r4, #1
 800ce9a:	e7c6      	b.n	800ce2a <quorem+0x8e>
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	3b04      	subs	r3, #4
 800cea0:	2a00      	cmp	r2, #0
 800cea2:	d1ef      	bne.n	800ce84 <quorem+0xe8>
 800cea4:	3c01      	subs	r4, #1
 800cea6:	e7ea      	b.n	800ce7e <quorem+0xe2>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e7ee      	b.n	800ce8a <quorem+0xee>
 800ceac:	0000      	movs	r0, r0
	...

0800ceb0 <_dtoa_r>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	69c7      	ldr	r7, [r0, #28]
 800ceb6:	b099      	sub	sp, #100	@ 0x64
 800ceb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cebc:	ec55 4b10 	vmov	r4, r5, d0
 800cec0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cec2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cec4:	4683      	mov	fp, r0
 800cec6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceca:	b97f      	cbnz	r7, 800ceec <_dtoa_r+0x3c>
 800cecc:	2010      	movs	r0, #16
 800cece:	f7fd f969 	bl	800a1a4 <malloc>
 800ced2:	4602      	mov	r2, r0
 800ced4:	f8cb 001c 	str.w	r0, [fp, #28]
 800ced8:	b920      	cbnz	r0, 800cee4 <_dtoa_r+0x34>
 800ceda:	4ba7      	ldr	r3, [pc, #668]	@ (800d178 <_dtoa_r+0x2c8>)
 800cedc:	21ef      	movs	r1, #239	@ 0xef
 800cede:	48a7      	ldr	r0, [pc, #668]	@ (800d17c <_dtoa_r+0x2cc>)
 800cee0:	f002 fc6c 	bl	800f7bc <__assert_func>
 800cee4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cee8:	6007      	str	r7, [r0, #0]
 800ceea:	60c7      	str	r7, [r0, #12]
 800ceec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cef0:	6819      	ldr	r1, [r3, #0]
 800cef2:	b159      	cbz	r1, 800cf0c <_dtoa_r+0x5c>
 800cef4:	685a      	ldr	r2, [r3, #4]
 800cef6:	604a      	str	r2, [r1, #4]
 800cef8:	2301      	movs	r3, #1
 800cefa:	4093      	lsls	r3, r2
 800cefc:	608b      	str	r3, [r1, #8]
 800cefe:	4658      	mov	r0, fp
 800cf00:	f001 f9b4 	bl	800e26c <_Bfree>
 800cf04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	1e2b      	subs	r3, r5, #0
 800cf0e:	bfb9      	ittee	lt
 800cf10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cf14:	9303      	strlt	r3, [sp, #12]
 800cf16:	2300      	movge	r3, #0
 800cf18:	6033      	strge	r3, [r6, #0]
 800cf1a:	9f03      	ldr	r7, [sp, #12]
 800cf1c:	4b98      	ldr	r3, [pc, #608]	@ (800d180 <_dtoa_r+0x2d0>)
 800cf1e:	bfbc      	itt	lt
 800cf20:	2201      	movlt	r2, #1
 800cf22:	6032      	strlt	r2, [r6, #0]
 800cf24:	43bb      	bics	r3, r7
 800cf26:	d112      	bne.n	800cf4e <_dtoa_r+0x9e>
 800cf28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cf2e:	6013      	str	r3, [r2, #0]
 800cf30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf34:	4323      	orrs	r3, r4
 800cf36:	f000 854d 	beq.w	800d9d4 <_dtoa_r+0xb24>
 800cf3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d194 <_dtoa_r+0x2e4>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 854f 	beq.w	800d9e4 <_dtoa_r+0xb34>
 800cf46:	f10a 0303 	add.w	r3, sl, #3
 800cf4a:	f000 bd49 	b.w	800d9e0 <_dtoa_r+0xb30>
 800cf4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf52:	2200      	movs	r2, #0
 800cf54:	ec51 0b17 	vmov	r0, r1, d7
 800cf58:	2300      	movs	r3, #0
 800cf5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cf5e:	f7f3 fdc3 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf62:	4680      	mov	r8, r0
 800cf64:	b158      	cbz	r0, 800cf7e <_dtoa_r+0xce>
 800cf66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cf68:	2301      	movs	r3, #1
 800cf6a:	6013      	str	r3, [r2, #0]
 800cf6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf6e:	b113      	cbz	r3, 800cf76 <_dtoa_r+0xc6>
 800cf70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf72:	4b84      	ldr	r3, [pc, #528]	@ (800d184 <_dtoa_r+0x2d4>)
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d198 <_dtoa_r+0x2e8>
 800cf7a:	f000 bd33 	b.w	800d9e4 <_dtoa_r+0xb34>
 800cf7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cf82:	aa16      	add	r2, sp, #88	@ 0x58
 800cf84:	a917      	add	r1, sp, #92	@ 0x5c
 800cf86:	4658      	mov	r0, fp
 800cf88:	f001 fd14 	bl	800e9b4 <__d2b>
 800cf8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cf90:	4681      	mov	r9, r0
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	d077      	beq.n	800d086 <_dtoa_r+0x1d6>
 800cf96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cf9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cfa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cfac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	4b74      	ldr	r3, [pc, #464]	@ (800d188 <_dtoa_r+0x2d8>)
 800cfb6:	f7f3 f977 	bl	80002a8 <__aeabi_dsub>
 800cfba:	a369      	add	r3, pc, #420	@ (adr r3, 800d160 <_dtoa_r+0x2b0>)
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f7f3 fb2a 	bl	8000618 <__aeabi_dmul>
 800cfc4:	a368      	add	r3, pc, #416	@ (adr r3, 800d168 <_dtoa_r+0x2b8>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f7f3 f96f 	bl	80002ac <__adddf3>
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	f7f3 fab6 	bl	8000544 <__aeabi_i2d>
 800cfd8:	a365      	add	r3, pc, #404	@ (adr r3, 800d170 <_dtoa_r+0x2c0>)
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	f7f3 fb1b 	bl	8000618 <__aeabi_dmul>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f7f3 f95f 	bl	80002ac <__adddf3>
 800cfee:	4604      	mov	r4, r0
 800cff0:	460d      	mov	r5, r1
 800cff2:	f7f3 fdc1 	bl	8000b78 <__aeabi_d2iz>
 800cff6:	2200      	movs	r2, #0
 800cff8:	4607      	mov	r7, r0
 800cffa:	2300      	movs	r3, #0
 800cffc:	4620      	mov	r0, r4
 800cffe:	4629      	mov	r1, r5
 800d000:	f7f3 fd7c 	bl	8000afc <__aeabi_dcmplt>
 800d004:	b140      	cbz	r0, 800d018 <_dtoa_r+0x168>
 800d006:	4638      	mov	r0, r7
 800d008:	f7f3 fa9c 	bl	8000544 <__aeabi_i2d>
 800d00c:	4622      	mov	r2, r4
 800d00e:	462b      	mov	r3, r5
 800d010:	f7f3 fd6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d014:	b900      	cbnz	r0, 800d018 <_dtoa_r+0x168>
 800d016:	3f01      	subs	r7, #1
 800d018:	2f16      	cmp	r7, #22
 800d01a:	d851      	bhi.n	800d0c0 <_dtoa_r+0x210>
 800d01c:	4b5b      	ldr	r3, [pc, #364]	@ (800d18c <_dtoa_r+0x2dc>)
 800d01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d02a:	f7f3 fd67 	bl	8000afc <__aeabi_dcmplt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d048      	beq.n	800d0c4 <_dtoa_r+0x214>
 800d032:	3f01      	subs	r7, #1
 800d034:	2300      	movs	r3, #0
 800d036:	9312      	str	r3, [sp, #72]	@ 0x48
 800d038:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d03a:	1b9b      	subs	r3, r3, r6
 800d03c:	1e5a      	subs	r2, r3, #1
 800d03e:	bf44      	itt	mi
 800d040:	f1c3 0801 	rsbmi	r8, r3, #1
 800d044:	2300      	movmi	r3, #0
 800d046:	9208      	str	r2, [sp, #32]
 800d048:	bf54      	ite	pl
 800d04a:	f04f 0800 	movpl.w	r8, #0
 800d04e:	9308      	strmi	r3, [sp, #32]
 800d050:	2f00      	cmp	r7, #0
 800d052:	db39      	blt.n	800d0c8 <_dtoa_r+0x218>
 800d054:	9b08      	ldr	r3, [sp, #32]
 800d056:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d058:	443b      	add	r3, r7
 800d05a:	9308      	str	r3, [sp, #32]
 800d05c:	2300      	movs	r3, #0
 800d05e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d062:	2b09      	cmp	r3, #9
 800d064:	d864      	bhi.n	800d130 <_dtoa_r+0x280>
 800d066:	2b05      	cmp	r3, #5
 800d068:	bfc4      	itt	gt
 800d06a:	3b04      	subgt	r3, #4
 800d06c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d070:	f1a3 0302 	sub.w	r3, r3, #2
 800d074:	bfcc      	ite	gt
 800d076:	2400      	movgt	r4, #0
 800d078:	2401      	movle	r4, #1
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d863      	bhi.n	800d146 <_dtoa_r+0x296>
 800d07e:	e8df f003 	tbb	[pc, r3]
 800d082:	372a      	.short	0x372a
 800d084:	5535      	.short	0x5535
 800d086:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d08a:	441e      	add	r6, r3
 800d08c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d090:	2b20      	cmp	r3, #32
 800d092:	bfc1      	itttt	gt
 800d094:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d098:	409f      	lslgt	r7, r3
 800d09a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d09e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d0a2:	bfd6      	itet	le
 800d0a4:	f1c3 0320 	rsble	r3, r3, #32
 800d0a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800d0ac:	fa04 f003 	lslle.w	r0, r4, r3
 800d0b0:	f7f3 fa38 	bl	8000524 <__aeabi_ui2d>
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d0ba:	3e01      	subs	r6, #1
 800d0bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800d0be:	e777      	b.n	800cfb0 <_dtoa_r+0x100>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e7b8      	b.n	800d036 <_dtoa_r+0x186>
 800d0c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d0c6:	e7b7      	b.n	800d038 <_dtoa_r+0x188>
 800d0c8:	427b      	negs	r3, r7
 800d0ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	eba8 0807 	sub.w	r8, r8, r7
 800d0d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0d4:	e7c4      	b.n	800d060 <_dtoa_r+0x1b0>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dc35      	bgt.n	800d14c <_dtoa_r+0x29c>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	9307      	str	r3, [sp, #28]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0ea:	e00b      	b.n	800d104 <_dtoa_r+0x254>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e7f3      	b.n	800d0d8 <_dtoa_r+0x228>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0f6:	18fb      	adds	r3, r7, r3
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	9307      	str	r3, [sp, #28]
 800d100:	bfb8      	it	lt
 800d102:	2301      	movlt	r3, #1
 800d104:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d108:	2100      	movs	r1, #0
 800d10a:	2204      	movs	r2, #4
 800d10c:	f102 0514 	add.w	r5, r2, #20
 800d110:	429d      	cmp	r5, r3
 800d112:	d91f      	bls.n	800d154 <_dtoa_r+0x2a4>
 800d114:	6041      	str	r1, [r0, #4]
 800d116:	4658      	mov	r0, fp
 800d118:	f001 f868 	bl	800e1ec <_Balloc>
 800d11c:	4682      	mov	sl, r0
 800d11e:	2800      	cmp	r0, #0
 800d120:	d13c      	bne.n	800d19c <_dtoa_r+0x2ec>
 800d122:	4b1b      	ldr	r3, [pc, #108]	@ (800d190 <_dtoa_r+0x2e0>)
 800d124:	4602      	mov	r2, r0
 800d126:	f240 11af 	movw	r1, #431	@ 0x1af
 800d12a:	e6d8      	b.n	800cede <_dtoa_r+0x2e>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e7e0      	b.n	800d0f2 <_dtoa_r+0x242>
 800d130:	2401      	movs	r4, #1
 800d132:	2300      	movs	r3, #0
 800d134:	9309      	str	r3, [sp, #36]	@ 0x24
 800d136:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d138:	f04f 33ff 	mov.w	r3, #4294967295
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	2200      	movs	r2, #0
 800d142:	2312      	movs	r3, #18
 800d144:	e7d0      	b.n	800d0e8 <_dtoa_r+0x238>
 800d146:	2301      	movs	r3, #1
 800d148:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d14a:	e7f5      	b.n	800d138 <_dtoa_r+0x288>
 800d14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	9307      	str	r3, [sp, #28]
 800d152:	e7d7      	b.n	800d104 <_dtoa_r+0x254>
 800d154:	3101      	adds	r1, #1
 800d156:	0052      	lsls	r2, r2, #1
 800d158:	e7d8      	b.n	800d10c <_dtoa_r+0x25c>
 800d15a:	bf00      	nop
 800d15c:	f3af 8000 	nop.w
 800d160:	636f4361 	.word	0x636f4361
 800d164:	3fd287a7 	.word	0x3fd287a7
 800d168:	8b60c8b3 	.word	0x8b60c8b3
 800d16c:	3fc68a28 	.word	0x3fc68a28
 800d170:	509f79fb 	.word	0x509f79fb
 800d174:	3fd34413 	.word	0x3fd34413
 800d178:	08012931 	.word	0x08012931
 800d17c:	08012948 	.word	0x08012948
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	0801268f 	.word	0x0801268f
 800d188:	3ff80000 	.word	0x3ff80000
 800d18c:	08012aa0 	.word	0x08012aa0
 800d190:	080129a0 	.word	0x080129a0
 800d194:	0801292d 	.word	0x0801292d
 800d198:	0801268e 	.word	0x0801268e
 800d19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1a0:	6018      	str	r0, [r3, #0]
 800d1a2:	9b07      	ldr	r3, [sp, #28]
 800d1a4:	2b0e      	cmp	r3, #14
 800d1a6:	f200 80a4 	bhi.w	800d2f2 <_dtoa_r+0x442>
 800d1aa:	2c00      	cmp	r4, #0
 800d1ac:	f000 80a1 	beq.w	800d2f2 <_dtoa_r+0x442>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	dd33      	ble.n	800d21c <_dtoa_r+0x36c>
 800d1b4:	4bad      	ldr	r3, [pc, #692]	@ (800d46c <_dtoa_r+0x5bc>)
 800d1b6:	f007 020f 	and.w	r2, r7, #15
 800d1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1be:	ed93 7b00 	vldr	d7, [r3]
 800d1c2:	05f8      	lsls	r0, r7, #23
 800d1c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d1c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d1cc:	d516      	bpl.n	800d1fc <_dtoa_r+0x34c>
 800d1ce:	4ba8      	ldr	r3, [pc, #672]	@ (800d470 <_dtoa_r+0x5c0>)
 800d1d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1d8:	f7f3 fb48 	bl	800086c <__aeabi_ddiv>
 800d1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1e0:	f004 040f 	and.w	r4, r4, #15
 800d1e4:	2603      	movs	r6, #3
 800d1e6:	4da2      	ldr	r5, [pc, #648]	@ (800d470 <_dtoa_r+0x5c0>)
 800d1e8:	b954      	cbnz	r4, 800d200 <_dtoa_r+0x350>
 800d1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f2:	f7f3 fb3b 	bl	800086c <__aeabi_ddiv>
 800d1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fa:	e028      	b.n	800d24e <_dtoa_r+0x39e>
 800d1fc:	2602      	movs	r6, #2
 800d1fe:	e7f2      	b.n	800d1e6 <_dtoa_r+0x336>
 800d200:	07e1      	lsls	r1, r4, #31
 800d202:	d508      	bpl.n	800d216 <_dtoa_r+0x366>
 800d204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d208:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d20c:	f7f3 fa04 	bl	8000618 <__aeabi_dmul>
 800d210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d214:	3601      	adds	r6, #1
 800d216:	1064      	asrs	r4, r4, #1
 800d218:	3508      	adds	r5, #8
 800d21a:	e7e5      	b.n	800d1e8 <_dtoa_r+0x338>
 800d21c:	f000 80d2 	beq.w	800d3c4 <_dtoa_r+0x514>
 800d220:	427c      	negs	r4, r7
 800d222:	4b92      	ldr	r3, [pc, #584]	@ (800d46c <_dtoa_r+0x5bc>)
 800d224:	4d92      	ldr	r5, [pc, #584]	@ (800d470 <_dtoa_r+0x5c0>)
 800d226:	f004 020f 	and.w	r2, r4, #15
 800d22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d236:	f7f3 f9ef 	bl	8000618 <__aeabi_dmul>
 800d23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d23e:	1124      	asrs	r4, r4, #4
 800d240:	2300      	movs	r3, #0
 800d242:	2602      	movs	r6, #2
 800d244:	2c00      	cmp	r4, #0
 800d246:	f040 80b2 	bne.w	800d3ae <_dtoa_r+0x4fe>
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1d3      	bne.n	800d1f6 <_dtoa_r+0x346>
 800d24e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d250:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 80b7 	beq.w	800d3c8 <_dtoa_r+0x518>
 800d25a:	4b86      	ldr	r3, [pc, #536]	@ (800d474 <_dtoa_r+0x5c4>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	4620      	mov	r0, r4
 800d260:	4629      	mov	r1, r5
 800d262:	f7f3 fc4b 	bl	8000afc <__aeabi_dcmplt>
 800d266:	2800      	cmp	r0, #0
 800d268:	f000 80ae 	beq.w	800d3c8 <_dtoa_r+0x518>
 800d26c:	9b07      	ldr	r3, [sp, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f000 80aa 	beq.w	800d3c8 <_dtoa_r+0x518>
 800d274:	9b00      	ldr	r3, [sp, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	dd37      	ble.n	800d2ea <_dtoa_r+0x43a>
 800d27a:	1e7b      	subs	r3, r7, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	4620      	mov	r0, r4
 800d280:	4b7d      	ldr	r3, [pc, #500]	@ (800d478 <_dtoa_r+0x5c8>)
 800d282:	2200      	movs	r2, #0
 800d284:	4629      	mov	r1, r5
 800d286:	f7f3 f9c7 	bl	8000618 <__aeabi_dmul>
 800d28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d28e:	9c00      	ldr	r4, [sp, #0]
 800d290:	3601      	adds	r6, #1
 800d292:	4630      	mov	r0, r6
 800d294:	f7f3 f956 	bl	8000544 <__aeabi_i2d>
 800d298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d29c:	f7f3 f9bc 	bl	8000618 <__aeabi_dmul>
 800d2a0:	4b76      	ldr	r3, [pc, #472]	@ (800d47c <_dtoa_r+0x5cc>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f7f3 f802 	bl	80002ac <__adddf3>
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	f040 808d 	bne.w	800d3ce <_dtoa_r+0x51e>
 800d2b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2b8:	4b71      	ldr	r3, [pc, #452]	@ (800d480 <_dtoa_r+0x5d0>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f7f2 fff4 	bl	80002a8 <__aeabi_dsub>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4633      	mov	r3, r6
 800d2cc:	f7f3 fc34 	bl	8000b38 <__aeabi_dcmpgt>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	f040 828b 	bne.w	800d7ec <_dtoa_r+0x93c>
 800d2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2da:	462a      	mov	r2, r5
 800d2dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d2e0:	f7f3 fc0c 	bl	8000afc <__aeabi_dcmplt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f040 8128 	bne.w	800d53a <_dtoa_r+0x68a>
 800d2ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d2ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d2f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f2c0 815a 	blt.w	800d5ae <_dtoa_r+0x6fe>
 800d2fa:	2f0e      	cmp	r7, #14
 800d2fc:	f300 8157 	bgt.w	800d5ae <_dtoa_r+0x6fe>
 800d300:	4b5a      	ldr	r3, [pc, #360]	@ (800d46c <_dtoa_r+0x5bc>)
 800d302:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d306:	ed93 7b00 	vldr	d7, [r3]
 800d30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	ed8d 7b00 	vstr	d7, [sp]
 800d312:	da03      	bge.n	800d31c <_dtoa_r+0x46c>
 800d314:	9b07      	ldr	r3, [sp, #28]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f340 8101 	ble.w	800d51e <_dtoa_r+0x66e>
 800d31c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d320:	4656      	mov	r6, sl
 800d322:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d326:	4620      	mov	r0, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	f7f3 fa9f 	bl	800086c <__aeabi_ddiv>
 800d32e:	f7f3 fc23 	bl	8000b78 <__aeabi_d2iz>
 800d332:	4680      	mov	r8, r0
 800d334:	f7f3 f906 	bl	8000544 <__aeabi_i2d>
 800d338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d33c:	f7f3 f96c 	bl	8000618 <__aeabi_dmul>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	4620      	mov	r0, r4
 800d346:	4629      	mov	r1, r5
 800d348:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d34c:	f7f2 ffac 	bl	80002a8 <__aeabi_dsub>
 800d350:	f806 4b01 	strb.w	r4, [r6], #1
 800d354:	9d07      	ldr	r5, [sp, #28]
 800d356:	eba6 040a 	sub.w	r4, r6, sl
 800d35a:	42a5      	cmp	r5, r4
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	f040 8117 	bne.w	800d592 <_dtoa_r+0x6e2>
 800d364:	f7f2 ffa2 	bl	80002ac <__adddf3>
 800d368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d36c:	4604      	mov	r4, r0
 800d36e:	460d      	mov	r5, r1
 800d370:	f7f3 fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 800d374:	2800      	cmp	r0, #0
 800d376:	f040 80f9 	bne.w	800d56c <_dtoa_r+0x6bc>
 800d37a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d37e:	4620      	mov	r0, r4
 800d380:	4629      	mov	r1, r5
 800d382:	f7f3 fbb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d386:	b118      	cbz	r0, 800d390 <_dtoa_r+0x4e0>
 800d388:	f018 0f01 	tst.w	r8, #1
 800d38c:	f040 80ee 	bne.w	800d56c <_dtoa_r+0x6bc>
 800d390:	4649      	mov	r1, r9
 800d392:	4658      	mov	r0, fp
 800d394:	f000 ff6a 	bl	800e26c <_Bfree>
 800d398:	2300      	movs	r3, #0
 800d39a:	7033      	strb	r3, [r6, #0]
 800d39c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d39e:	3701      	adds	r7, #1
 800d3a0:	601f      	str	r7, [r3, #0]
 800d3a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 831d 	beq.w	800d9e4 <_dtoa_r+0xb34>
 800d3aa:	601e      	str	r6, [r3, #0]
 800d3ac:	e31a      	b.n	800d9e4 <_dtoa_r+0xb34>
 800d3ae:	07e2      	lsls	r2, r4, #31
 800d3b0:	d505      	bpl.n	800d3be <_dtoa_r+0x50e>
 800d3b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3b6:	f7f3 f92f 	bl	8000618 <__aeabi_dmul>
 800d3ba:	3601      	adds	r6, #1
 800d3bc:	2301      	movs	r3, #1
 800d3be:	1064      	asrs	r4, r4, #1
 800d3c0:	3508      	adds	r5, #8
 800d3c2:	e73f      	b.n	800d244 <_dtoa_r+0x394>
 800d3c4:	2602      	movs	r6, #2
 800d3c6:	e742      	b.n	800d24e <_dtoa_r+0x39e>
 800d3c8:	9c07      	ldr	r4, [sp, #28]
 800d3ca:	9704      	str	r7, [sp, #16]
 800d3cc:	e761      	b.n	800d292 <_dtoa_r+0x3e2>
 800d3ce:	4b27      	ldr	r3, [pc, #156]	@ (800d46c <_dtoa_r+0x5bc>)
 800d3d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d3da:	4454      	add	r4, sl
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	d053      	beq.n	800d488 <_dtoa_r+0x5d8>
 800d3e0:	4928      	ldr	r1, [pc, #160]	@ (800d484 <_dtoa_r+0x5d4>)
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f7f3 fa42 	bl	800086c <__aeabi_ddiv>
 800d3e8:	4633      	mov	r3, r6
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	f7f2 ff5c 	bl	80002a8 <__aeabi_dsub>
 800d3f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d3f4:	4656      	mov	r6, sl
 800d3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3fa:	f7f3 fbbd 	bl	8000b78 <__aeabi_d2iz>
 800d3fe:	4605      	mov	r5, r0
 800d400:	f7f3 f8a0 	bl	8000544 <__aeabi_i2d>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40c:	f7f2 ff4c 	bl	80002a8 <__aeabi_dsub>
 800d410:	3530      	adds	r5, #48	@ 0x30
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d41a:	f806 5b01 	strb.w	r5, [r6], #1
 800d41e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d422:	f7f3 fb6b 	bl	8000afc <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	d171      	bne.n	800d50e <_dtoa_r+0x65e>
 800d42a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d42e:	4911      	ldr	r1, [pc, #68]	@ (800d474 <_dtoa_r+0x5c4>)
 800d430:	2000      	movs	r0, #0
 800d432:	f7f2 ff39 	bl	80002a8 <__aeabi_dsub>
 800d436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d43a:	f7f3 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800d43e:	2800      	cmp	r0, #0
 800d440:	f040 8095 	bne.w	800d56e <_dtoa_r+0x6be>
 800d444:	42a6      	cmp	r6, r4
 800d446:	f43f af50 	beq.w	800d2ea <_dtoa_r+0x43a>
 800d44a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d44e:	4b0a      	ldr	r3, [pc, #40]	@ (800d478 <_dtoa_r+0x5c8>)
 800d450:	2200      	movs	r2, #0
 800d452:	f7f3 f8e1 	bl	8000618 <__aeabi_dmul>
 800d456:	4b08      	ldr	r3, [pc, #32]	@ (800d478 <_dtoa_r+0x5c8>)
 800d458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d45c:	2200      	movs	r2, #0
 800d45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d462:	f7f3 f8d9 	bl	8000618 <__aeabi_dmul>
 800d466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d46a:	e7c4      	b.n	800d3f6 <_dtoa_r+0x546>
 800d46c:	08012aa0 	.word	0x08012aa0
 800d470:	08012a78 	.word	0x08012a78
 800d474:	3ff00000 	.word	0x3ff00000
 800d478:	40240000 	.word	0x40240000
 800d47c:	401c0000 	.word	0x401c0000
 800d480:	40140000 	.word	0x40140000
 800d484:	3fe00000 	.word	0x3fe00000
 800d488:	4631      	mov	r1, r6
 800d48a:	4628      	mov	r0, r5
 800d48c:	f7f3 f8c4 	bl	8000618 <__aeabi_dmul>
 800d490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d494:	9415      	str	r4, [sp, #84]	@ 0x54
 800d496:	4656      	mov	r6, sl
 800d498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d49c:	f7f3 fb6c 	bl	8000b78 <__aeabi_d2iz>
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	f7f3 f84f 	bl	8000544 <__aeabi_i2d>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ae:	f7f2 fefb 	bl	80002a8 <__aeabi_dsub>
 800d4b2:	3530      	adds	r5, #48	@ 0x30
 800d4b4:	f806 5b01 	strb.w	r5, [r6], #1
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	42a6      	cmp	r6, r4
 800d4be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4c2:	f04f 0200 	mov.w	r2, #0
 800d4c6:	d124      	bne.n	800d512 <_dtoa_r+0x662>
 800d4c8:	4bac      	ldr	r3, [pc, #688]	@ (800d77c <_dtoa_r+0x8cc>)
 800d4ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d4ce:	f7f2 feed 	bl	80002ac <__adddf3>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4da:	f7f3 fb2d 	bl	8000b38 <__aeabi_dcmpgt>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d145      	bne.n	800d56e <_dtoa_r+0x6be>
 800d4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d4e6:	49a5      	ldr	r1, [pc, #660]	@ (800d77c <_dtoa_r+0x8cc>)
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	f7f2 fedd 	bl	80002a8 <__aeabi_dsub>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4f6:	f7f3 fb01 	bl	8000afc <__aeabi_dcmplt>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	f43f aef5 	beq.w	800d2ea <_dtoa_r+0x43a>
 800d500:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d502:	1e73      	subs	r3, r6, #1
 800d504:	9315      	str	r3, [sp, #84]	@ 0x54
 800d506:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d50a:	2b30      	cmp	r3, #48	@ 0x30
 800d50c:	d0f8      	beq.n	800d500 <_dtoa_r+0x650>
 800d50e:	9f04      	ldr	r7, [sp, #16]
 800d510:	e73e      	b.n	800d390 <_dtoa_r+0x4e0>
 800d512:	4b9b      	ldr	r3, [pc, #620]	@ (800d780 <_dtoa_r+0x8d0>)
 800d514:	f7f3 f880 	bl	8000618 <__aeabi_dmul>
 800d518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d51c:	e7bc      	b.n	800d498 <_dtoa_r+0x5e8>
 800d51e:	d10c      	bne.n	800d53a <_dtoa_r+0x68a>
 800d520:	4b98      	ldr	r3, [pc, #608]	@ (800d784 <_dtoa_r+0x8d4>)
 800d522:	2200      	movs	r2, #0
 800d524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d528:	f7f3 f876 	bl	8000618 <__aeabi_dmul>
 800d52c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d530:	f7f3 faf8 	bl	8000b24 <__aeabi_dcmpge>
 800d534:	2800      	cmp	r0, #0
 800d536:	f000 8157 	beq.w	800d7e8 <_dtoa_r+0x938>
 800d53a:	2400      	movs	r4, #0
 800d53c:	4625      	mov	r5, r4
 800d53e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d540:	43db      	mvns	r3, r3
 800d542:	9304      	str	r3, [sp, #16]
 800d544:	4656      	mov	r6, sl
 800d546:	2700      	movs	r7, #0
 800d548:	4621      	mov	r1, r4
 800d54a:	4658      	mov	r0, fp
 800d54c:	f000 fe8e 	bl	800e26c <_Bfree>
 800d550:	2d00      	cmp	r5, #0
 800d552:	d0dc      	beq.n	800d50e <_dtoa_r+0x65e>
 800d554:	b12f      	cbz	r7, 800d562 <_dtoa_r+0x6b2>
 800d556:	42af      	cmp	r7, r5
 800d558:	d003      	beq.n	800d562 <_dtoa_r+0x6b2>
 800d55a:	4639      	mov	r1, r7
 800d55c:	4658      	mov	r0, fp
 800d55e:	f000 fe85 	bl	800e26c <_Bfree>
 800d562:	4629      	mov	r1, r5
 800d564:	4658      	mov	r0, fp
 800d566:	f000 fe81 	bl	800e26c <_Bfree>
 800d56a:	e7d0      	b.n	800d50e <_dtoa_r+0x65e>
 800d56c:	9704      	str	r7, [sp, #16]
 800d56e:	4633      	mov	r3, r6
 800d570:	461e      	mov	r6, r3
 800d572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d576:	2a39      	cmp	r2, #57	@ 0x39
 800d578:	d107      	bne.n	800d58a <_dtoa_r+0x6da>
 800d57a:	459a      	cmp	sl, r3
 800d57c:	d1f8      	bne.n	800d570 <_dtoa_r+0x6c0>
 800d57e:	9a04      	ldr	r2, [sp, #16]
 800d580:	3201      	adds	r2, #1
 800d582:	9204      	str	r2, [sp, #16]
 800d584:	2230      	movs	r2, #48	@ 0x30
 800d586:	f88a 2000 	strb.w	r2, [sl]
 800d58a:	781a      	ldrb	r2, [r3, #0]
 800d58c:	3201      	adds	r2, #1
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	e7bd      	b.n	800d50e <_dtoa_r+0x65e>
 800d592:	4b7b      	ldr	r3, [pc, #492]	@ (800d780 <_dtoa_r+0x8d0>)
 800d594:	2200      	movs	r2, #0
 800d596:	f7f3 f83f 	bl	8000618 <__aeabi_dmul>
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f7f3 faa1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f43f aebb 	beq.w	800d322 <_dtoa_r+0x472>
 800d5ac:	e6f0      	b.n	800d390 <_dtoa_r+0x4e0>
 800d5ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	f000 80db 	beq.w	800d76c <_dtoa_r+0x8bc>
 800d5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5b8:	2a01      	cmp	r2, #1
 800d5ba:	f300 80bf 	bgt.w	800d73c <_dtoa_r+0x88c>
 800d5be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d5c0:	2a00      	cmp	r2, #0
 800d5c2:	f000 80b7 	beq.w	800d734 <_dtoa_r+0x884>
 800d5c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d5ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d5cc:	4646      	mov	r6, r8
 800d5ce:	9a08      	ldr	r2, [sp, #32]
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	441a      	add	r2, r3
 800d5d4:	4658      	mov	r0, fp
 800d5d6:	4498      	add	r8, r3
 800d5d8:	9208      	str	r2, [sp, #32]
 800d5da:	f000 ff45 	bl	800e468 <__i2b>
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b15e      	cbz	r6, 800d5fa <_dtoa_r+0x74a>
 800d5e2:	9b08      	ldr	r3, [sp, #32]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	dd08      	ble.n	800d5fa <_dtoa_r+0x74a>
 800d5e8:	42b3      	cmp	r3, r6
 800d5ea:	9a08      	ldr	r2, [sp, #32]
 800d5ec:	bfa8      	it	ge
 800d5ee:	4633      	movge	r3, r6
 800d5f0:	eba8 0803 	sub.w	r8, r8, r3
 800d5f4:	1af6      	subs	r6, r6, r3
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	9308      	str	r3, [sp, #32]
 800d5fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5fc:	b1f3      	cbz	r3, 800d63c <_dtoa_r+0x78c>
 800d5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d600:	2b00      	cmp	r3, #0
 800d602:	f000 80b7 	beq.w	800d774 <_dtoa_r+0x8c4>
 800d606:	b18c      	cbz	r4, 800d62c <_dtoa_r+0x77c>
 800d608:	4629      	mov	r1, r5
 800d60a:	4622      	mov	r2, r4
 800d60c:	4658      	mov	r0, fp
 800d60e:	f000 ffeb 	bl	800e5e8 <__pow5mult>
 800d612:	464a      	mov	r2, r9
 800d614:	4601      	mov	r1, r0
 800d616:	4605      	mov	r5, r0
 800d618:	4658      	mov	r0, fp
 800d61a:	f000 ff3b 	bl	800e494 <__multiply>
 800d61e:	4649      	mov	r1, r9
 800d620:	9004      	str	r0, [sp, #16]
 800d622:	4658      	mov	r0, fp
 800d624:	f000 fe22 	bl	800e26c <_Bfree>
 800d628:	9b04      	ldr	r3, [sp, #16]
 800d62a:	4699      	mov	r9, r3
 800d62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d62e:	1b1a      	subs	r2, r3, r4
 800d630:	d004      	beq.n	800d63c <_dtoa_r+0x78c>
 800d632:	4649      	mov	r1, r9
 800d634:	4658      	mov	r0, fp
 800d636:	f000 ffd7 	bl	800e5e8 <__pow5mult>
 800d63a:	4681      	mov	r9, r0
 800d63c:	2101      	movs	r1, #1
 800d63e:	4658      	mov	r0, fp
 800d640:	f000 ff12 	bl	800e468 <__i2b>
 800d644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d646:	4604      	mov	r4, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 81cf 	beq.w	800d9ec <_dtoa_r+0xb3c>
 800d64e:	461a      	mov	r2, r3
 800d650:	4601      	mov	r1, r0
 800d652:	4658      	mov	r0, fp
 800d654:	f000 ffc8 	bl	800e5e8 <__pow5mult>
 800d658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	4604      	mov	r4, r0
 800d65e:	f300 8095 	bgt.w	800d78c <_dtoa_r+0x8dc>
 800d662:	9b02      	ldr	r3, [sp, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	f040 8087 	bne.w	800d778 <_dtoa_r+0x8c8>
 800d66a:	9b03      	ldr	r3, [sp, #12]
 800d66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d670:	2b00      	cmp	r3, #0
 800d672:	f040 8089 	bne.w	800d788 <_dtoa_r+0x8d8>
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d67c:	0d1b      	lsrs	r3, r3, #20
 800d67e:	051b      	lsls	r3, r3, #20
 800d680:	b12b      	cbz	r3, 800d68e <_dtoa_r+0x7de>
 800d682:	9b08      	ldr	r3, [sp, #32]
 800d684:	3301      	adds	r3, #1
 800d686:	9308      	str	r3, [sp, #32]
 800d688:	f108 0801 	add.w	r8, r8, #1
 800d68c:	2301      	movs	r3, #1
 800d68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 81b0 	beq.w	800d9f8 <_dtoa_r+0xb48>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d69e:	6918      	ldr	r0, [r3, #16]
 800d6a0:	f000 fe96 	bl	800e3d0 <__hi0bits>
 800d6a4:	f1c0 0020 	rsb	r0, r0, #32
 800d6a8:	9b08      	ldr	r3, [sp, #32]
 800d6aa:	4418      	add	r0, r3
 800d6ac:	f010 001f 	ands.w	r0, r0, #31
 800d6b0:	d077      	beq.n	800d7a2 <_dtoa_r+0x8f2>
 800d6b2:	f1c0 0320 	rsb	r3, r0, #32
 800d6b6:	2b04      	cmp	r3, #4
 800d6b8:	dd6b      	ble.n	800d792 <_dtoa_r+0x8e2>
 800d6ba:	9b08      	ldr	r3, [sp, #32]
 800d6bc:	f1c0 001c 	rsb	r0, r0, #28
 800d6c0:	4403      	add	r3, r0
 800d6c2:	4480      	add	r8, r0
 800d6c4:	4406      	add	r6, r0
 800d6c6:	9308      	str	r3, [sp, #32]
 800d6c8:	f1b8 0f00 	cmp.w	r8, #0
 800d6cc:	dd05      	ble.n	800d6da <_dtoa_r+0x82a>
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	4642      	mov	r2, r8
 800d6d2:	4658      	mov	r0, fp
 800d6d4:	f000 ffe2 	bl	800e69c <__lshift>
 800d6d8:	4681      	mov	r9, r0
 800d6da:	9b08      	ldr	r3, [sp, #32]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dd05      	ble.n	800d6ec <_dtoa_r+0x83c>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4658      	mov	r0, fp
 800d6e6:	f000 ffd9 	bl	800e69c <__lshift>
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d059      	beq.n	800d7a6 <_dtoa_r+0x8f6>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4648      	mov	r0, r9
 800d6f6:	f001 f83d 	bl	800e774 <__mcmp>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	da53      	bge.n	800d7a6 <_dtoa_r+0x8f6>
 800d6fe:	1e7b      	subs	r3, r7, #1
 800d700:	9304      	str	r3, [sp, #16]
 800d702:	4649      	mov	r1, r9
 800d704:	2300      	movs	r3, #0
 800d706:	220a      	movs	r2, #10
 800d708:	4658      	mov	r0, fp
 800d70a:	f000 fdd1 	bl	800e2b0 <__multadd>
 800d70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d710:	4681      	mov	r9, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 8172 	beq.w	800d9fc <_dtoa_r+0xb4c>
 800d718:	2300      	movs	r3, #0
 800d71a:	4629      	mov	r1, r5
 800d71c:	220a      	movs	r2, #10
 800d71e:	4658      	mov	r0, fp
 800d720:	f000 fdc6 	bl	800e2b0 <__multadd>
 800d724:	9b00      	ldr	r3, [sp, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	4605      	mov	r5, r0
 800d72a:	dc67      	bgt.n	800d7fc <_dtoa_r+0x94c>
 800d72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d72e:	2b02      	cmp	r3, #2
 800d730:	dc41      	bgt.n	800d7b6 <_dtoa_r+0x906>
 800d732:	e063      	b.n	800d7fc <_dtoa_r+0x94c>
 800d734:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d73a:	e746      	b.n	800d5ca <_dtoa_r+0x71a>
 800d73c:	9b07      	ldr	r3, [sp, #28]
 800d73e:	1e5c      	subs	r4, r3, #1
 800d740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d742:	42a3      	cmp	r3, r4
 800d744:	bfbf      	itttt	lt
 800d746:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d748:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d74a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d74c:	1ae3      	sublt	r3, r4, r3
 800d74e:	bfb4      	ite	lt
 800d750:	18d2      	addlt	r2, r2, r3
 800d752:	1b1c      	subge	r4, r3, r4
 800d754:	9b07      	ldr	r3, [sp, #28]
 800d756:	bfbc      	itt	lt
 800d758:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d75a:	2400      	movlt	r4, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	bfb5      	itete	lt
 800d760:	eba8 0603 	sublt.w	r6, r8, r3
 800d764:	9b07      	ldrge	r3, [sp, #28]
 800d766:	2300      	movlt	r3, #0
 800d768:	4646      	movge	r6, r8
 800d76a:	e730      	b.n	800d5ce <_dtoa_r+0x71e>
 800d76c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d76e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d770:	4646      	mov	r6, r8
 800d772:	e735      	b.n	800d5e0 <_dtoa_r+0x730>
 800d774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d776:	e75c      	b.n	800d632 <_dtoa_r+0x782>
 800d778:	2300      	movs	r3, #0
 800d77a:	e788      	b.n	800d68e <_dtoa_r+0x7de>
 800d77c:	3fe00000 	.word	0x3fe00000
 800d780:	40240000 	.word	0x40240000
 800d784:	40140000 	.word	0x40140000
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	e780      	b.n	800d68e <_dtoa_r+0x7de>
 800d78c:	2300      	movs	r3, #0
 800d78e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d790:	e782      	b.n	800d698 <_dtoa_r+0x7e8>
 800d792:	d099      	beq.n	800d6c8 <_dtoa_r+0x818>
 800d794:	9a08      	ldr	r2, [sp, #32]
 800d796:	331c      	adds	r3, #28
 800d798:	441a      	add	r2, r3
 800d79a:	4498      	add	r8, r3
 800d79c:	441e      	add	r6, r3
 800d79e:	9208      	str	r2, [sp, #32]
 800d7a0:	e792      	b.n	800d6c8 <_dtoa_r+0x818>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	e7f6      	b.n	800d794 <_dtoa_r+0x8e4>
 800d7a6:	9b07      	ldr	r3, [sp, #28]
 800d7a8:	9704      	str	r7, [sp, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dc20      	bgt.n	800d7f0 <_dtoa_r+0x940>
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b2:	2b02      	cmp	r3, #2
 800d7b4:	dd1e      	ble.n	800d7f4 <_dtoa_r+0x944>
 800d7b6:	9b00      	ldr	r3, [sp, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f47f aec0 	bne.w	800d53e <_dtoa_r+0x68e>
 800d7be:	4621      	mov	r1, r4
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	4658      	mov	r0, fp
 800d7c4:	f000 fd74 	bl	800e2b0 <__multadd>
 800d7c8:	4601      	mov	r1, r0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4648      	mov	r0, r9
 800d7ce:	f000 ffd1 	bl	800e774 <__mcmp>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f77f aeb3 	ble.w	800d53e <_dtoa_r+0x68e>
 800d7d8:	4656      	mov	r6, sl
 800d7da:	2331      	movs	r3, #49	@ 0x31
 800d7dc:	f806 3b01 	strb.w	r3, [r6], #1
 800d7e0:	9b04      	ldr	r3, [sp, #16]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	9304      	str	r3, [sp, #16]
 800d7e6:	e6ae      	b.n	800d546 <_dtoa_r+0x696>
 800d7e8:	9c07      	ldr	r4, [sp, #28]
 800d7ea:	9704      	str	r7, [sp, #16]
 800d7ec:	4625      	mov	r5, r4
 800d7ee:	e7f3      	b.n	800d7d8 <_dtoa_r+0x928>
 800d7f0:	9b07      	ldr	r3, [sp, #28]
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 8104 	beq.w	800da04 <_dtoa_r+0xb54>
 800d7fc:	2e00      	cmp	r6, #0
 800d7fe:	dd05      	ble.n	800d80c <_dtoa_r+0x95c>
 800d800:	4629      	mov	r1, r5
 800d802:	4632      	mov	r2, r6
 800d804:	4658      	mov	r0, fp
 800d806:	f000 ff49 	bl	800e69c <__lshift>
 800d80a:	4605      	mov	r5, r0
 800d80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d05a      	beq.n	800d8c8 <_dtoa_r+0xa18>
 800d812:	6869      	ldr	r1, [r5, #4]
 800d814:	4658      	mov	r0, fp
 800d816:	f000 fce9 	bl	800e1ec <_Balloc>
 800d81a:	4606      	mov	r6, r0
 800d81c:	b928      	cbnz	r0, 800d82a <_dtoa_r+0x97a>
 800d81e:	4b84      	ldr	r3, [pc, #528]	@ (800da30 <_dtoa_r+0xb80>)
 800d820:	4602      	mov	r2, r0
 800d822:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d826:	f7ff bb5a 	b.w	800cede <_dtoa_r+0x2e>
 800d82a:	692a      	ldr	r2, [r5, #16]
 800d82c:	3202      	adds	r2, #2
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	f105 010c 	add.w	r1, r5, #12
 800d834:	300c      	adds	r0, #12
 800d836:	f7ff fa8d 	bl	800cd54 <memcpy>
 800d83a:	2201      	movs	r2, #1
 800d83c:	4631      	mov	r1, r6
 800d83e:	4658      	mov	r0, fp
 800d840:	f000 ff2c 	bl	800e69c <__lshift>
 800d844:	f10a 0301 	add.w	r3, sl, #1
 800d848:	9307      	str	r3, [sp, #28]
 800d84a:	9b00      	ldr	r3, [sp, #0]
 800d84c:	4453      	add	r3, sl
 800d84e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d850:	9b02      	ldr	r3, [sp, #8]
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	462f      	mov	r7, r5
 800d858:	930a      	str	r3, [sp, #40]	@ 0x28
 800d85a:	4605      	mov	r5, r0
 800d85c:	9b07      	ldr	r3, [sp, #28]
 800d85e:	4621      	mov	r1, r4
 800d860:	3b01      	subs	r3, #1
 800d862:	4648      	mov	r0, r9
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	f7ff fa99 	bl	800cd9c <quorem>
 800d86a:	4639      	mov	r1, r7
 800d86c:	9002      	str	r0, [sp, #8]
 800d86e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d872:	4648      	mov	r0, r9
 800d874:	f000 ff7e 	bl	800e774 <__mcmp>
 800d878:	462a      	mov	r2, r5
 800d87a:	9008      	str	r0, [sp, #32]
 800d87c:	4621      	mov	r1, r4
 800d87e:	4658      	mov	r0, fp
 800d880:	f000 ff94 	bl	800e7ac <__mdiff>
 800d884:	68c2      	ldr	r2, [r0, #12]
 800d886:	4606      	mov	r6, r0
 800d888:	bb02      	cbnz	r2, 800d8cc <_dtoa_r+0xa1c>
 800d88a:	4601      	mov	r1, r0
 800d88c:	4648      	mov	r0, r9
 800d88e:	f000 ff71 	bl	800e774 <__mcmp>
 800d892:	4602      	mov	r2, r0
 800d894:	4631      	mov	r1, r6
 800d896:	4658      	mov	r0, fp
 800d898:	920e      	str	r2, [sp, #56]	@ 0x38
 800d89a:	f000 fce7 	bl	800e26c <_Bfree>
 800d89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8a2:	9e07      	ldr	r6, [sp, #28]
 800d8a4:	ea43 0102 	orr.w	r1, r3, r2
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8aa:	4319      	orrs	r1, r3
 800d8ac:	d110      	bne.n	800d8d0 <_dtoa_r+0xa20>
 800d8ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d8b2:	d029      	beq.n	800d908 <_dtoa_r+0xa58>
 800d8b4:	9b08      	ldr	r3, [sp, #32]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	dd02      	ble.n	800d8c0 <_dtoa_r+0xa10>
 800d8ba:	9b02      	ldr	r3, [sp, #8]
 800d8bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d8c0:	9b00      	ldr	r3, [sp, #0]
 800d8c2:	f883 8000 	strb.w	r8, [r3]
 800d8c6:	e63f      	b.n	800d548 <_dtoa_r+0x698>
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	e7bb      	b.n	800d844 <_dtoa_r+0x994>
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	e7e1      	b.n	800d894 <_dtoa_r+0x9e4>
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	db04      	blt.n	800d8e0 <_dtoa_r+0xa30>
 800d8d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8d8:	430b      	orrs	r3, r1
 800d8da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8dc:	430b      	orrs	r3, r1
 800d8de:	d120      	bne.n	800d922 <_dtoa_r+0xa72>
 800d8e0:	2a00      	cmp	r2, #0
 800d8e2:	dded      	ble.n	800d8c0 <_dtoa_r+0xa10>
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4658      	mov	r0, fp
 800d8ea:	f000 fed7 	bl	800e69c <__lshift>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4681      	mov	r9, r0
 800d8f2:	f000 ff3f 	bl	800e774 <__mcmp>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	dc03      	bgt.n	800d902 <_dtoa_r+0xa52>
 800d8fa:	d1e1      	bne.n	800d8c0 <_dtoa_r+0xa10>
 800d8fc:	f018 0f01 	tst.w	r8, #1
 800d900:	d0de      	beq.n	800d8c0 <_dtoa_r+0xa10>
 800d902:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d906:	d1d8      	bne.n	800d8ba <_dtoa_r+0xa0a>
 800d908:	9a00      	ldr	r2, [sp, #0]
 800d90a:	2339      	movs	r3, #57	@ 0x39
 800d90c:	7013      	strb	r3, [r2, #0]
 800d90e:	4633      	mov	r3, r6
 800d910:	461e      	mov	r6, r3
 800d912:	3b01      	subs	r3, #1
 800d914:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d918:	2a39      	cmp	r2, #57	@ 0x39
 800d91a:	d052      	beq.n	800d9c2 <_dtoa_r+0xb12>
 800d91c:	3201      	adds	r2, #1
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	e612      	b.n	800d548 <_dtoa_r+0x698>
 800d922:	2a00      	cmp	r2, #0
 800d924:	dd07      	ble.n	800d936 <_dtoa_r+0xa86>
 800d926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d92a:	d0ed      	beq.n	800d908 <_dtoa_r+0xa58>
 800d92c:	9a00      	ldr	r2, [sp, #0]
 800d92e:	f108 0301 	add.w	r3, r8, #1
 800d932:	7013      	strb	r3, [r2, #0]
 800d934:	e608      	b.n	800d548 <_dtoa_r+0x698>
 800d936:	9b07      	ldr	r3, [sp, #28]
 800d938:	9a07      	ldr	r2, [sp, #28]
 800d93a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d93e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d940:	4293      	cmp	r3, r2
 800d942:	d028      	beq.n	800d996 <_dtoa_r+0xae6>
 800d944:	4649      	mov	r1, r9
 800d946:	2300      	movs	r3, #0
 800d948:	220a      	movs	r2, #10
 800d94a:	4658      	mov	r0, fp
 800d94c:	f000 fcb0 	bl	800e2b0 <__multadd>
 800d950:	42af      	cmp	r7, r5
 800d952:	4681      	mov	r9, r0
 800d954:	f04f 0300 	mov.w	r3, #0
 800d958:	f04f 020a 	mov.w	r2, #10
 800d95c:	4639      	mov	r1, r7
 800d95e:	4658      	mov	r0, fp
 800d960:	d107      	bne.n	800d972 <_dtoa_r+0xac2>
 800d962:	f000 fca5 	bl	800e2b0 <__multadd>
 800d966:	4607      	mov	r7, r0
 800d968:	4605      	mov	r5, r0
 800d96a:	9b07      	ldr	r3, [sp, #28]
 800d96c:	3301      	adds	r3, #1
 800d96e:	9307      	str	r3, [sp, #28]
 800d970:	e774      	b.n	800d85c <_dtoa_r+0x9ac>
 800d972:	f000 fc9d 	bl	800e2b0 <__multadd>
 800d976:	4629      	mov	r1, r5
 800d978:	4607      	mov	r7, r0
 800d97a:	2300      	movs	r3, #0
 800d97c:	220a      	movs	r2, #10
 800d97e:	4658      	mov	r0, fp
 800d980:	f000 fc96 	bl	800e2b0 <__multadd>
 800d984:	4605      	mov	r5, r0
 800d986:	e7f0      	b.n	800d96a <_dtoa_r+0xaba>
 800d988:	9b00      	ldr	r3, [sp, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bfcc      	ite	gt
 800d98e:	461e      	movgt	r6, r3
 800d990:	2601      	movle	r6, #1
 800d992:	4456      	add	r6, sl
 800d994:	2700      	movs	r7, #0
 800d996:	4649      	mov	r1, r9
 800d998:	2201      	movs	r2, #1
 800d99a:	4658      	mov	r0, fp
 800d99c:	f000 fe7e 	bl	800e69c <__lshift>
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4681      	mov	r9, r0
 800d9a4:	f000 fee6 	bl	800e774 <__mcmp>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	dcb0      	bgt.n	800d90e <_dtoa_r+0xa5e>
 800d9ac:	d102      	bne.n	800d9b4 <_dtoa_r+0xb04>
 800d9ae:	f018 0f01 	tst.w	r8, #1
 800d9b2:	d1ac      	bne.n	800d90e <_dtoa_r+0xa5e>
 800d9b4:	4633      	mov	r3, r6
 800d9b6:	461e      	mov	r6, r3
 800d9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9bc:	2a30      	cmp	r2, #48	@ 0x30
 800d9be:	d0fa      	beq.n	800d9b6 <_dtoa_r+0xb06>
 800d9c0:	e5c2      	b.n	800d548 <_dtoa_r+0x698>
 800d9c2:	459a      	cmp	sl, r3
 800d9c4:	d1a4      	bne.n	800d910 <_dtoa_r+0xa60>
 800d9c6:	9b04      	ldr	r3, [sp, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	9304      	str	r3, [sp, #16]
 800d9cc:	2331      	movs	r3, #49	@ 0x31
 800d9ce:	f88a 3000 	strb.w	r3, [sl]
 800d9d2:	e5b9      	b.n	800d548 <_dtoa_r+0x698>
 800d9d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800da34 <_dtoa_r+0xb84>
 800d9da:	b11b      	cbz	r3, 800d9e4 <_dtoa_r+0xb34>
 800d9dc:	f10a 0308 	add.w	r3, sl, #8
 800d9e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	4650      	mov	r0, sl
 800d9e6:	b019      	add	sp, #100	@ 0x64
 800d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	f77f ae37 	ble.w	800d662 <_dtoa_r+0x7b2>
 800d9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	e655      	b.n	800d6a8 <_dtoa_r+0x7f8>
 800d9fc:	9b00      	ldr	r3, [sp, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f77f aed6 	ble.w	800d7b0 <_dtoa_r+0x900>
 800da04:	4656      	mov	r6, sl
 800da06:	4621      	mov	r1, r4
 800da08:	4648      	mov	r0, r9
 800da0a:	f7ff f9c7 	bl	800cd9c <quorem>
 800da0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800da12:	f806 8b01 	strb.w	r8, [r6], #1
 800da16:	9b00      	ldr	r3, [sp, #0]
 800da18:	eba6 020a 	sub.w	r2, r6, sl
 800da1c:	4293      	cmp	r3, r2
 800da1e:	ddb3      	ble.n	800d988 <_dtoa_r+0xad8>
 800da20:	4649      	mov	r1, r9
 800da22:	2300      	movs	r3, #0
 800da24:	220a      	movs	r2, #10
 800da26:	4658      	mov	r0, fp
 800da28:	f000 fc42 	bl	800e2b0 <__multadd>
 800da2c:	4681      	mov	r9, r0
 800da2e:	e7ea      	b.n	800da06 <_dtoa_r+0xb56>
 800da30:	080129a0 	.word	0x080129a0
 800da34:	08012924 	.word	0x08012924

0800da38 <_free_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4605      	mov	r5, r0
 800da3c:	2900      	cmp	r1, #0
 800da3e:	d041      	beq.n	800dac4 <_free_r+0x8c>
 800da40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da44:	1f0c      	subs	r4, r1, #4
 800da46:	2b00      	cmp	r3, #0
 800da48:	bfb8      	it	lt
 800da4a:	18e4      	addlt	r4, r4, r3
 800da4c:	f7fc fc5c 	bl	800a308 <__malloc_lock>
 800da50:	4a1d      	ldr	r2, [pc, #116]	@ (800dac8 <_free_r+0x90>)
 800da52:	6813      	ldr	r3, [r2, #0]
 800da54:	b933      	cbnz	r3, 800da64 <_free_r+0x2c>
 800da56:	6063      	str	r3, [r4, #4]
 800da58:	6014      	str	r4, [r2, #0]
 800da5a:	4628      	mov	r0, r5
 800da5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da60:	f7fc bc58 	b.w	800a314 <__malloc_unlock>
 800da64:	42a3      	cmp	r3, r4
 800da66:	d908      	bls.n	800da7a <_free_r+0x42>
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	1821      	adds	r1, r4, r0
 800da6c:	428b      	cmp	r3, r1
 800da6e:	bf01      	itttt	eq
 800da70:	6819      	ldreq	r1, [r3, #0]
 800da72:	685b      	ldreq	r3, [r3, #4]
 800da74:	1809      	addeq	r1, r1, r0
 800da76:	6021      	streq	r1, [r4, #0]
 800da78:	e7ed      	b.n	800da56 <_free_r+0x1e>
 800da7a:	461a      	mov	r2, r3
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	b10b      	cbz	r3, 800da84 <_free_r+0x4c>
 800da80:	42a3      	cmp	r3, r4
 800da82:	d9fa      	bls.n	800da7a <_free_r+0x42>
 800da84:	6811      	ldr	r1, [r2, #0]
 800da86:	1850      	adds	r0, r2, r1
 800da88:	42a0      	cmp	r0, r4
 800da8a:	d10b      	bne.n	800daa4 <_free_r+0x6c>
 800da8c:	6820      	ldr	r0, [r4, #0]
 800da8e:	4401      	add	r1, r0
 800da90:	1850      	adds	r0, r2, r1
 800da92:	4283      	cmp	r3, r0
 800da94:	6011      	str	r1, [r2, #0]
 800da96:	d1e0      	bne.n	800da5a <_free_r+0x22>
 800da98:	6818      	ldr	r0, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	6053      	str	r3, [r2, #4]
 800da9e:	4408      	add	r0, r1
 800daa0:	6010      	str	r0, [r2, #0]
 800daa2:	e7da      	b.n	800da5a <_free_r+0x22>
 800daa4:	d902      	bls.n	800daac <_free_r+0x74>
 800daa6:	230c      	movs	r3, #12
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	e7d6      	b.n	800da5a <_free_r+0x22>
 800daac:	6820      	ldr	r0, [r4, #0]
 800daae:	1821      	adds	r1, r4, r0
 800dab0:	428b      	cmp	r3, r1
 800dab2:	bf04      	itt	eq
 800dab4:	6819      	ldreq	r1, [r3, #0]
 800dab6:	685b      	ldreq	r3, [r3, #4]
 800dab8:	6063      	str	r3, [r4, #4]
 800daba:	bf04      	itt	eq
 800dabc:	1809      	addeq	r1, r1, r0
 800dabe:	6021      	streq	r1, [r4, #0]
 800dac0:	6054      	str	r4, [r2, #4]
 800dac2:	e7ca      	b.n	800da5a <_free_r+0x22>
 800dac4:	bd38      	pop	{r3, r4, r5, pc}
 800dac6:	bf00      	nop
 800dac8:	20009894 	.word	0x20009894

0800dacc <rshift>:
 800dacc:	6903      	ldr	r3, [r0, #16]
 800dace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dad6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dada:	f100 0414 	add.w	r4, r0, #20
 800dade:	dd45      	ble.n	800db6c <rshift+0xa0>
 800dae0:	f011 011f 	ands.w	r1, r1, #31
 800dae4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dae8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800daec:	d10c      	bne.n	800db08 <rshift+0x3c>
 800daee:	f100 0710 	add.w	r7, r0, #16
 800daf2:	4629      	mov	r1, r5
 800daf4:	42b1      	cmp	r1, r6
 800daf6:	d334      	bcc.n	800db62 <rshift+0x96>
 800daf8:	1a9b      	subs	r3, r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	1eea      	subs	r2, r5, #3
 800dafe:	4296      	cmp	r6, r2
 800db00:	bf38      	it	cc
 800db02:	2300      	movcc	r3, #0
 800db04:	4423      	add	r3, r4
 800db06:	e015      	b.n	800db34 <rshift+0x68>
 800db08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db0c:	f1c1 0820 	rsb	r8, r1, #32
 800db10:	40cf      	lsrs	r7, r1
 800db12:	f105 0e04 	add.w	lr, r5, #4
 800db16:	46a1      	mov	r9, r4
 800db18:	4576      	cmp	r6, lr
 800db1a:	46f4      	mov	ip, lr
 800db1c:	d815      	bhi.n	800db4a <rshift+0x7e>
 800db1e:	1a9a      	subs	r2, r3, r2
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	3a04      	subs	r2, #4
 800db24:	3501      	adds	r5, #1
 800db26:	42ae      	cmp	r6, r5
 800db28:	bf38      	it	cc
 800db2a:	2200      	movcc	r2, #0
 800db2c:	18a3      	adds	r3, r4, r2
 800db2e:	50a7      	str	r7, [r4, r2]
 800db30:	b107      	cbz	r7, 800db34 <rshift+0x68>
 800db32:	3304      	adds	r3, #4
 800db34:	1b1a      	subs	r2, r3, r4
 800db36:	42a3      	cmp	r3, r4
 800db38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db3c:	bf08      	it	eq
 800db3e:	2300      	moveq	r3, #0
 800db40:	6102      	str	r2, [r0, #16]
 800db42:	bf08      	it	eq
 800db44:	6143      	streq	r3, [r0, #20]
 800db46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db4a:	f8dc c000 	ldr.w	ip, [ip]
 800db4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800db52:	ea4c 0707 	orr.w	r7, ip, r7
 800db56:	f849 7b04 	str.w	r7, [r9], #4
 800db5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db5e:	40cf      	lsrs	r7, r1
 800db60:	e7da      	b.n	800db18 <rshift+0x4c>
 800db62:	f851 cb04 	ldr.w	ip, [r1], #4
 800db66:	f847 cf04 	str.w	ip, [r7, #4]!
 800db6a:	e7c3      	b.n	800daf4 <rshift+0x28>
 800db6c:	4623      	mov	r3, r4
 800db6e:	e7e1      	b.n	800db34 <rshift+0x68>

0800db70 <__hexdig_fun>:
 800db70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800db74:	2b09      	cmp	r3, #9
 800db76:	d802      	bhi.n	800db7e <__hexdig_fun+0xe>
 800db78:	3820      	subs	r0, #32
 800db7a:	b2c0      	uxtb	r0, r0
 800db7c:	4770      	bx	lr
 800db7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800db82:	2b05      	cmp	r3, #5
 800db84:	d801      	bhi.n	800db8a <__hexdig_fun+0x1a>
 800db86:	3847      	subs	r0, #71	@ 0x47
 800db88:	e7f7      	b.n	800db7a <__hexdig_fun+0xa>
 800db8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800db8e:	2b05      	cmp	r3, #5
 800db90:	d801      	bhi.n	800db96 <__hexdig_fun+0x26>
 800db92:	3827      	subs	r0, #39	@ 0x27
 800db94:	e7f1      	b.n	800db7a <__hexdig_fun+0xa>
 800db96:	2000      	movs	r0, #0
 800db98:	4770      	bx	lr
	...

0800db9c <__gethex>:
 800db9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	b085      	sub	sp, #20
 800dba2:	468a      	mov	sl, r1
 800dba4:	9302      	str	r3, [sp, #8]
 800dba6:	680b      	ldr	r3, [r1, #0]
 800dba8:	9001      	str	r0, [sp, #4]
 800dbaa:	4690      	mov	r8, r2
 800dbac:	1c9c      	adds	r4, r3, #2
 800dbae:	46a1      	mov	r9, r4
 800dbb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dbb4:	2830      	cmp	r0, #48	@ 0x30
 800dbb6:	d0fa      	beq.n	800dbae <__gethex+0x12>
 800dbb8:	eba9 0303 	sub.w	r3, r9, r3
 800dbbc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dbc0:	f7ff ffd6 	bl	800db70 <__hexdig_fun>
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d168      	bne.n	800dc9c <__gethex+0x100>
 800dbca:	49a0      	ldr	r1, [pc, #640]	@ (800de4c <__gethex+0x2b0>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	4648      	mov	r0, r9
 800dbd0:	f7fe fa81 	bl	800c0d6 <strncmp>
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d167      	bne.n	800dcaa <__gethex+0x10e>
 800dbda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dbde:	4626      	mov	r6, r4
 800dbe0:	f7ff ffc6 	bl	800db70 <__hexdig_fun>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d062      	beq.n	800dcae <__gethex+0x112>
 800dbe8:	4623      	mov	r3, r4
 800dbea:	7818      	ldrb	r0, [r3, #0]
 800dbec:	2830      	cmp	r0, #48	@ 0x30
 800dbee:	4699      	mov	r9, r3
 800dbf0:	f103 0301 	add.w	r3, r3, #1
 800dbf4:	d0f9      	beq.n	800dbea <__gethex+0x4e>
 800dbf6:	f7ff ffbb 	bl	800db70 <__hexdig_fun>
 800dbfa:	fab0 f580 	clz	r5, r0
 800dbfe:	096d      	lsrs	r5, r5, #5
 800dc00:	f04f 0b01 	mov.w	fp, #1
 800dc04:	464a      	mov	r2, r9
 800dc06:	4616      	mov	r6, r2
 800dc08:	3201      	adds	r2, #1
 800dc0a:	7830      	ldrb	r0, [r6, #0]
 800dc0c:	f7ff ffb0 	bl	800db70 <__hexdig_fun>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1f8      	bne.n	800dc06 <__gethex+0x6a>
 800dc14:	498d      	ldr	r1, [pc, #564]	@ (800de4c <__gethex+0x2b0>)
 800dc16:	2201      	movs	r2, #1
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7fe fa5c 	bl	800c0d6 <strncmp>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d13f      	bne.n	800dca2 <__gethex+0x106>
 800dc22:	b944      	cbnz	r4, 800dc36 <__gethex+0x9a>
 800dc24:	1c74      	adds	r4, r6, #1
 800dc26:	4622      	mov	r2, r4
 800dc28:	4616      	mov	r6, r2
 800dc2a:	3201      	adds	r2, #1
 800dc2c:	7830      	ldrb	r0, [r6, #0]
 800dc2e:	f7ff ff9f 	bl	800db70 <__hexdig_fun>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d1f8      	bne.n	800dc28 <__gethex+0x8c>
 800dc36:	1ba4      	subs	r4, r4, r6
 800dc38:	00a7      	lsls	r7, r4, #2
 800dc3a:	7833      	ldrb	r3, [r6, #0]
 800dc3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dc40:	2b50      	cmp	r3, #80	@ 0x50
 800dc42:	d13e      	bne.n	800dcc2 <__gethex+0x126>
 800dc44:	7873      	ldrb	r3, [r6, #1]
 800dc46:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc48:	d033      	beq.n	800dcb2 <__gethex+0x116>
 800dc4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc4c:	d034      	beq.n	800dcb8 <__gethex+0x11c>
 800dc4e:	1c71      	adds	r1, r6, #1
 800dc50:	2400      	movs	r4, #0
 800dc52:	7808      	ldrb	r0, [r1, #0]
 800dc54:	f7ff ff8c 	bl	800db70 <__hexdig_fun>
 800dc58:	1e43      	subs	r3, r0, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b18      	cmp	r3, #24
 800dc5e:	d830      	bhi.n	800dcc2 <__gethex+0x126>
 800dc60:	f1a0 0210 	sub.w	r2, r0, #16
 800dc64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc68:	f7ff ff82 	bl	800db70 <__hexdig_fun>
 800dc6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800dc70:	fa5f fc8c 	uxtb.w	ip, ip
 800dc74:	f1bc 0f18 	cmp.w	ip, #24
 800dc78:	f04f 030a 	mov.w	r3, #10
 800dc7c:	d91e      	bls.n	800dcbc <__gethex+0x120>
 800dc7e:	b104      	cbz	r4, 800dc82 <__gethex+0xe6>
 800dc80:	4252      	negs	r2, r2
 800dc82:	4417      	add	r7, r2
 800dc84:	f8ca 1000 	str.w	r1, [sl]
 800dc88:	b1ed      	cbz	r5, 800dcc6 <__gethex+0x12a>
 800dc8a:	f1bb 0f00 	cmp.w	fp, #0
 800dc8e:	bf0c      	ite	eq
 800dc90:	2506      	moveq	r5, #6
 800dc92:	2500      	movne	r5, #0
 800dc94:	4628      	mov	r0, r5
 800dc96:	b005      	add	sp, #20
 800dc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9c:	2500      	movs	r5, #0
 800dc9e:	462c      	mov	r4, r5
 800dca0:	e7b0      	b.n	800dc04 <__gethex+0x68>
 800dca2:	2c00      	cmp	r4, #0
 800dca4:	d1c7      	bne.n	800dc36 <__gethex+0x9a>
 800dca6:	4627      	mov	r7, r4
 800dca8:	e7c7      	b.n	800dc3a <__gethex+0x9e>
 800dcaa:	464e      	mov	r6, r9
 800dcac:	462f      	mov	r7, r5
 800dcae:	2501      	movs	r5, #1
 800dcb0:	e7c3      	b.n	800dc3a <__gethex+0x9e>
 800dcb2:	2400      	movs	r4, #0
 800dcb4:	1cb1      	adds	r1, r6, #2
 800dcb6:	e7cc      	b.n	800dc52 <__gethex+0xb6>
 800dcb8:	2401      	movs	r4, #1
 800dcba:	e7fb      	b.n	800dcb4 <__gethex+0x118>
 800dcbc:	fb03 0002 	mla	r0, r3, r2, r0
 800dcc0:	e7ce      	b.n	800dc60 <__gethex+0xc4>
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	e7de      	b.n	800dc84 <__gethex+0xe8>
 800dcc6:	eba6 0309 	sub.w	r3, r6, r9
 800dcca:	3b01      	subs	r3, #1
 800dccc:	4629      	mov	r1, r5
 800dcce:	2b07      	cmp	r3, #7
 800dcd0:	dc0a      	bgt.n	800dce8 <__gethex+0x14c>
 800dcd2:	9801      	ldr	r0, [sp, #4]
 800dcd4:	f000 fa8a 	bl	800e1ec <_Balloc>
 800dcd8:	4604      	mov	r4, r0
 800dcda:	b940      	cbnz	r0, 800dcee <__gethex+0x152>
 800dcdc:	4b5c      	ldr	r3, [pc, #368]	@ (800de50 <__gethex+0x2b4>)
 800dcde:	4602      	mov	r2, r0
 800dce0:	21e4      	movs	r1, #228	@ 0xe4
 800dce2:	485c      	ldr	r0, [pc, #368]	@ (800de54 <__gethex+0x2b8>)
 800dce4:	f001 fd6a 	bl	800f7bc <__assert_func>
 800dce8:	3101      	adds	r1, #1
 800dcea:	105b      	asrs	r3, r3, #1
 800dcec:	e7ef      	b.n	800dcce <__gethex+0x132>
 800dcee:	f100 0a14 	add.w	sl, r0, #20
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	4655      	mov	r5, sl
 800dcf6:	469b      	mov	fp, r3
 800dcf8:	45b1      	cmp	r9, r6
 800dcfa:	d337      	bcc.n	800dd6c <__gethex+0x1d0>
 800dcfc:	f845 bb04 	str.w	fp, [r5], #4
 800dd00:	eba5 050a 	sub.w	r5, r5, sl
 800dd04:	10ad      	asrs	r5, r5, #2
 800dd06:	6125      	str	r5, [r4, #16]
 800dd08:	4658      	mov	r0, fp
 800dd0a:	f000 fb61 	bl	800e3d0 <__hi0bits>
 800dd0e:	016d      	lsls	r5, r5, #5
 800dd10:	f8d8 6000 	ldr.w	r6, [r8]
 800dd14:	1a2d      	subs	r5, r5, r0
 800dd16:	42b5      	cmp	r5, r6
 800dd18:	dd54      	ble.n	800ddc4 <__gethex+0x228>
 800dd1a:	1bad      	subs	r5, r5, r6
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 fef5 	bl	800eb0e <__any_on>
 800dd24:	4681      	mov	r9, r0
 800dd26:	b178      	cbz	r0, 800dd48 <__gethex+0x1ac>
 800dd28:	1e6b      	subs	r3, r5, #1
 800dd2a:	1159      	asrs	r1, r3, #5
 800dd2c:	f003 021f 	and.w	r2, r3, #31
 800dd30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dd34:	f04f 0901 	mov.w	r9, #1
 800dd38:	fa09 f202 	lsl.w	r2, r9, r2
 800dd3c:	420a      	tst	r2, r1
 800dd3e:	d003      	beq.n	800dd48 <__gethex+0x1ac>
 800dd40:	454b      	cmp	r3, r9
 800dd42:	dc36      	bgt.n	800ddb2 <__gethex+0x216>
 800dd44:	f04f 0902 	mov.w	r9, #2
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7ff febe 	bl	800dacc <rshift>
 800dd50:	442f      	add	r7, r5
 800dd52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd56:	42bb      	cmp	r3, r7
 800dd58:	da42      	bge.n	800dde0 <__gethex+0x244>
 800dd5a:	9801      	ldr	r0, [sp, #4]
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	f000 fa85 	bl	800e26c <_Bfree>
 800dd62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd64:	2300      	movs	r3, #0
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	25a3      	movs	r5, #163	@ 0xa3
 800dd6a:	e793      	b.n	800dc94 <__gethex+0xf8>
 800dd6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dd70:	2a2e      	cmp	r2, #46	@ 0x2e
 800dd72:	d012      	beq.n	800dd9a <__gethex+0x1fe>
 800dd74:	2b20      	cmp	r3, #32
 800dd76:	d104      	bne.n	800dd82 <__gethex+0x1e6>
 800dd78:	f845 bb04 	str.w	fp, [r5], #4
 800dd7c:	f04f 0b00 	mov.w	fp, #0
 800dd80:	465b      	mov	r3, fp
 800dd82:	7830      	ldrb	r0, [r6, #0]
 800dd84:	9303      	str	r3, [sp, #12]
 800dd86:	f7ff fef3 	bl	800db70 <__hexdig_fun>
 800dd8a:	9b03      	ldr	r3, [sp, #12]
 800dd8c:	f000 000f 	and.w	r0, r0, #15
 800dd90:	4098      	lsls	r0, r3
 800dd92:	ea4b 0b00 	orr.w	fp, fp, r0
 800dd96:	3304      	adds	r3, #4
 800dd98:	e7ae      	b.n	800dcf8 <__gethex+0x15c>
 800dd9a:	45b1      	cmp	r9, r6
 800dd9c:	d8ea      	bhi.n	800dd74 <__gethex+0x1d8>
 800dd9e:	492b      	ldr	r1, [pc, #172]	@ (800de4c <__gethex+0x2b0>)
 800dda0:	9303      	str	r3, [sp, #12]
 800dda2:	2201      	movs	r2, #1
 800dda4:	4630      	mov	r0, r6
 800dda6:	f7fe f996 	bl	800c0d6 <strncmp>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d1e1      	bne.n	800dd74 <__gethex+0x1d8>
 800ddb0:	e7a2      	b.n	800dcf8 <__gethex+0x15c>
 800ddb2:	1ea9      	subs	r1, r5, #2
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 feaa 	bl	800eb0e <__any_on>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d0c2      	beq.n	800dd44 <__gethex+0x1a8>
 800ddbe:	f04f 0903 	mov.w	r9, #3
 800ddc2:	e7c1      	b.n	800dd48 <__gethex+0x1ac>
 800ddc4:	da09      	bge.n	800ddda <__gethex+0x23e>
 800ddc6:	1b75      	subs	r5, r6, r5
 800ddc8:	4621      	mov	r1, r4
 800ddca:	9801      	ldr	r0, [sp, #4]
 800ddcc:	462a      	mov	r2, r5
 800ddce:	f000 fc65 	bl	800e69c <__lshift>
 800ddd2:	1b7f      	subs	r7, r7, r5
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	f100 0a14 	add.w	sl, r0, #20
 800ddda:	f04f 0900 	mov.w	r9, #0
 800ddde:	e7b8      	b.n	800dd52 <__gethex+0x1b6>
 800dde0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dde4:	42bd      	cmp	r5, r7
 800dde6:	dd6f      	ble.n	800dec8 <__gethex+0x32c>
 800dde8:	1bed      	subs	r5, r5, r7
 800ddea:	42ae      	cmp	r6, r5
 800ddec:	dc34      	bgt.n	800de58 <__gethex+0x2bc>
 800ddee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d022      	beq.n	800de3c <__gethex+0x2a0>
 800ddf6:	2b03      	cmp	r3, #3
 800ddf8:	d024      	beq.n	800de44 <__gethex+0x2a8>
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d115      	bne.n	800de2a <__gethex+0x28e>
 800ddfe:	42ae      	cmp	r6, r5
 800de00:	d113      	bne.n	800de2a <__gethex+0x28e>
 800de02:	2e01      	cmp	r6, #1
 800de04:	d10b      	bne.n	800de1e <__gethex+0x282>
 800de06:	9a02      	ldr	r2, [sp, #8]
 800de08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	2301      	movs	r3, #1
 800de10:	6123      	str	r3, [r4, #16]
 800de12:	f8ca 3000 	str.w	r3, [sl]
 800de16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de18:	2562      	movs	r5, #98	@ 0x62
 800de1a:	601c      	str	r4, [r3, #0]
 800de1c:	e73a      	b.n	800dc94 <__gethex+0xf8>
 800de1e:	1e71      	subs	r1, r6, #1
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fe74 	bl	800eb0e <__any_on>
 800de26:	2800      	cmp	r0, #0
 800de28:	d1ed      	bne.n	800de06 <__gethex+0x26a>
 800de2a:	9801      	ldr	r0, [sp, #4]
 800de2c:	4621      	mov	r1, r4
 800de2e:	f000 fa1d 	bl	800e26c <_Bfree>
 800de32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de34:	2300      	movs	r3, #0
 800de36:	6013      	str	r3, [r2, #0]
 800de38:	2550      	movs	r5, #80	@ 0x50
 800de3a:	e72b      	b.n	800dc94 <__gethex+0xf8>
 800de3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1f3      	bne.n	800de2a <__gethex+0x28e>
 800de42:	e7e0      	b.n	800de06 <__gethex+0x26a>
 800de44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1dd      	bne.n	800de06 <__gethex+0x26a>
 800de4a:	e7ee      	b.n	800de2a <__gethex+0x28e>
 800de4c:	080126e0 	.word	0x080126e0
 800de50:	080129a0 	.word	0x080129a0
 800de54:	080129b1 	.word	0x080129b1
 800de58:	1e6f      	subs	r7, r5, #1
 800de5a:	f1b9 0f00 	cmp.w	r9, #0
 800de5e:	d130      	bne.n	800dec2 <__gethex+0x326>
 800de60:	b127      	cbz	r7, 800de6c <__gethex+0x2d0>
 800de62:	4639      	mov	r1, r7
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fe52 	bl	800eb0e <__any_on>
 800de6a:	4681      	mov	r9, r0
 800de6c:	117a      	asrs	r2, r7, #5
 800de6e:	2301      	movs	r3, #1
 800de70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800de74:	f007 071f 	and.w	r7, r7, #31
 800de78:	40bb      	lsls	r3, r7
 800de7a:	4213      	tst	r3, r2
 800de7c:	4629      	mov	r1, r5
 800de7e:	4620      	mov	r0, r4
 800de80:	bf18      	it	ne
 800de82:	f049 0902 	orrne.w	r9, r9, #2
 800de86:	f7ff fe21 	bl	800dacc <rshift>
 800de8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800de8e:	1b76      	subs	r6, r6, r5
 800de90:	2502      	movs	r5, #2
 800de92:	f1b9 0f00 	cmp.w	r9, #0
 800de96:	d047      	beq.n	800df28 <__gethex+0x38c>
 800de98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d015      	beq.n	800decc <__gethex+0x330>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d017      	beq.n	800ded4 <__gethex+0x338>
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d109      	bne.n	800debc <__gethex+0x320>
 800dea8:	f019 0f02 	tst.w	r9, #2
 800deac:	d006      	beq.n	800debc <__gethex+0x320>
 800deae:	f8da 3000 	ldr.w	r3, [sl]
 800deb2:	ea49 0903 	orr.w	r9, r9, r3
 800deb6:	f019 0f01 	tst.w	r9, #1
 800deba:	d10e      	bne.n	800deda <__gethex+0x33e>
 800debc:	f045 0510 	orr.w	r5, r5, #16
 800dec0:	e032      	b.n	800df28 <__gethex+0x38c>
 800dec2:	f04f 0901 	mov.w	r9, #1
 800dec6:	e7d1      	b.n	800de6c <__gethex+0x2d0>
 800dec8:	2501      	movs	r5, #1
 800deca:	e7e2      	b.n	800de92 <__gethex+0x2f6>
 800decc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dece:	f1c3 0301 	rsb	r3, r3, #1
 800ded2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ded4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0f0      	beq.n	800debc <__gethex+0x320>
 800deda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dede:	f104 0314 	add.w	r3, r4, #20
 800dee2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dee6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800deea:	f04f 0c00 	mov.w	ip, #0
 800deee:	4618      	mov	r0, r3
 800def0:	f853 2b04 	ldr.w	r2, [r3], #4
 800def4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800def8:	d01b      	beq.n	800df32 <__gethex+0x396>
 800defa:	3201      	adds	r2, #1
 800defc:	6002      	str	r2, [r0, #0]
 800defe:	2d02      	cmp	r5, #2
 800df00:	f104 0314 	add.w	r3, r4, #20
 800df04:	d13c      	bne.n	800df80 <__gethex+0x3e4>
 800df06:	f8d8 2000 	ldr.w	r2, [r8]
 800df0a:	3a01      	subs	r2, #1
 800df0c:	42b2      	cmp	r2, r6
 800df0e:	d109      	bne.n	800df24 <__gethex+0x388>
 800df10:	1171      	asrs	r1, r6, #5
 800df12:	2201      	movs	r2, #1
 800df14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df18:	f006 061f 	and.w	r6, r6, #31
 800df1c:	fa02 f606 	lsl.w	r6, r2, r6
 800df20:	421e      	tst	r6, r3
 800df22:	d13a      	bne.n	800df9a <__gethex+0x3fe>
 800df24:	f045 0520 	orr.w	r5, r5, #32
 800df28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df2a:	601c      	str	r4, [r3, #0]
 800df2c:	9b02      	ldr	r3, [sp, #8]
 800df2e:	601f      	str	r7, [r3, #0]
 800df30:	e6b0      	b.n	800dc94 <__gethex+0xf8>
 800df32:	4299      	cmp	r1, r3
 800df34:	f843 cc04 	str.w	ip, [r3, #-4]
 800df38:	d8d9      	bhi.n	800deee <__gethex+0x352>
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	459b      	cmp	fp, r3
 800df3e:	db17      	blt.n	800df70 <__gethex+0x3d4>
 800df40:	6861      	ldr	r1, [r4, #4]
 800df42:	9801      	ldr	r0, [sp, #4]
 800df44:	3101      	adds	r1, #1
 800df46:	f000 f951 	bl	800e1ec <_Balloc>
 800df4a:	4681      	mov	r9, r0
 800df4c:	b918      	cbnz	r0, 800df56 <__gethex+0x3ba>
 800df4e:	4b1a      	ldr	r3, [pc, #104]	@ (800dfb8 <__gethex+0x41c>)
 800df50:	4602      	mov	r2, r0
 800df52:	2184      	movs	r1, #132	@ 0x84
 800df54:	e6c5      	b.n	800dce2 <__gethex+0x146>
 800df56:	6922      	ldr	r2, [r4, #16]
 800df58:	3202      	adds	r2, #2
 800df5a:	f104 010c 	add.w	r1, r4, #12
 800df5e:	0092      	lsls	r2, r2, #2
 800df60:	300c      	adds	r0, #12
 800df62:	f7fe fef7 	bl	800cd54 <memcpy>
 800df66:	4621      	mov	r1, r4
 800df68:	9801      	ldr	r0, [sp, #4]
 800df6a:	f000 f97f 	bl	800e26c <_Bfree>
 800df6e:	464c      	mov	r4, r9
 800df70:	6923      	ldr	r3, [r4, #16]
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df78:	6122      	str	r2, [r4, #16]
 800df7a:	2201      	movs	r2, #1
 800df7c:	615a      	str	r2, [r3, #20]
 800df7e:	e7be      	b.n	800defe <__gethex+0x362>
 800df80:	6922      	ldr	r2, [r4, #16]
 800df82:	455a      	cmp	r2, fp
 800df84:	dd0b      	ble.n	800df9e <__gethex+0x402>
 800df86:	2101      	movs	r1, #1
 800df88:	4620      	mov	r0, r4
 800df8a:	f7ff fd9f 	bl	800dacc <rshift>
 800df8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df92:	3701      	adds	r7, #1
 800df94:	42bb      	cmp	r3, r7
 800df96:	f6ff aee0 	blt.w	800dd5a <__gethex+0x1be>
 800df9a:	2501      	movs	r5, #1
 800df9c:	e7c2      	b.n	800df24 <__gethex+0x388>
 800df9e:	f016 061f 	ands.w	r6, r6, #31
 800dfa2:	d0fa      	beq.n	800df9a <__gethex+0x3fe>
 800dfa4:	4453      	add	r3, sl
 800dfa6:	f1c6 0620 	rsb	r6, r6, #32
 800dfaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfae:	f000 fa0f 	bl	800e3d0 <__hi0bits>
 800dfb2:	42b0      	cmp	r0, r6
 800dfb4:	dbe7      	blt.n	800df86 <__gethex+0x3ea>
 800dfb6:	e7f0      	b.n	800df9a <__gethex+0x3fe>
 800dfb8:	080129a0 	.word	0x080129a0

0800dfbc <L_shift>:
 800dfbc:	f1c2 0208 	rsb	r2, r2, #8
 800dfc0:	0092      	lsls	r2, r2, #2
 800dfc2:	b570      	push	{r4, r5, r6, lr}
 800dfc4:	f1c2 0620 	rsb	r6, r2, #32
 800dfc8:	6843      	ldr	r3, [r0, #4]
 800dfca:	6804      	ldr	r4, [r0, #0]
 800dfcc:	fa03 f506 	lsl.w	r5, r3, r6
 800dfd0:	432c      	orrs	r4, r5
 800dfd2:	40d3      	lsrs	r3, r2
 800dfd4:	6004      	str	r4, [r0, #0]
 800dfd6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dfda:	4288      	cmp	r0, r1
 800dfdc:	d3f4      	bcc.n	800dfc8 <L_shift+0xc>
 800dfde:	bd70      	pop	{r4, r5, r6, pc}

0800dfe0 <__match>:
 800dfe0:	b530      	push	{r4, r5, lr}
 800dfe2:	6803      	ldr	r3, [r0, #0]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfea:	b914      	cbnz	r4, 800dff2 <__match+0x12>
 800dfec:	6003      	str	r3, [r0, #0]
 800dfee:	2001      	movs	r0, #1
 800dff0:	bd30      	pop	{r4, r5, pc}
 800dff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dff6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dffa:	2d19      	cmp	r5, #25
 800dffc:	bf98      	it	ls
 800dffe:	3220      	addls	r2, #32
 800e000:	42a2      	cmp	r2, r4
 800e002:	d0f0      	beq.n	800dfe6 <__match+0x6>
 800e004:	2000      	movs	r0, #0
 800e006:	e7f3      	b.n	800dff0 <__match+0x10>

0800e008 <__hexnan>:
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	680b      	ldr	r3, [r1, #0]
 800e00e:	6801      	ldr	r1, [r0, #0]
 800e010:	115e      	asrs	r6, r3, #5
 800e012:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e016:	f013 031f 	ands.w	r3, r3, #31
 800e01a:	b087      	sub	sp, #28
 800e01c:	bf18      	it	ne
 800e01e:	3604      	addne	r6, #4
 800e020:	2500      	movs	r5, #0
 800e022:	1f37      	subs	r7, r6, #4
 800e024:	4682      	mov	sl, r0
 800e026:	4690      	mov	r8, r2
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e02e:	46b9      	mov	r9, r7
 800e030:	463c      	mov	r4, r7
 800e032:	9502      	str	r5, [sp, #8]
 800e034:	46ab      	mov	fp, r5
 800e036:	784a      	ldrb	r2, [r1, #1]
 800e038:	1c4b      	adds	r3, r1, #1
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	b342      	cbz	r2, 800e090 <__hexnan+0x88>
 800e03e:	4610      	mov	r0, r2
 800e040:	9105      	str	r1, [sp, #20]
 800e042:	9204      	str	r2, [sp, #16]
 800e044:	f7ff fd94 	bl	800db70 <__hexdig_fun>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d151      	bne.n	800e0f0 <__hexnan+0xe8>
 800e04c:	9a04      	ldr	r2, [sp, #16]
 800e04e:	9905      	ldr	r1, [sp, #20]
 800e050:	2a20      	cmp	r2, #32
 800e052:	d818      	bhi.n	800e086 <__hexnan+0x7e>
 800e054:	9b02      	ldr	r3, [sp, #8]
 800e056:	459b      	cmp	fp, r3
 800e058:	dd13      	ble.n	800e082 <__hexnan+0x7a>
 800e05a:	454c      	cmp	r4, r9
 800e05c:	d206      	bcs.n	800e06c <__hexnan+0x64>
 800e05e:	2d07      	cmp	r5, #7
 800e060:	dc04      	bgt.n	800e06c <__hexnan+0x64>
 800e062:	462a      	mov	r2, r5
 800e064:	4649      	mov	r1, r9
 800e066:	4620      	mov	r0, r4
 800e068:	f7ff ffa8 	bl	800dfbc <L_shift>
 800e06c:	4544      	cmp	r4, r8
 800e06e:	d952      	bls.n	800e116 <__hexnan+0x10e>
 800e070:	2300      	movs	r3, #0
 800e072:	f1a4 0904 	sub.w	r9, r4, #4
 800e076:	f844 3c04 	str.w	r3, [r4, #-4]
 800e07a:	f8cd b008 	str.w	fp, [sp, #8]
 800e07e:	464c      	mov	r4, r9
 800e080:	461d      	mov	r5, r3
 800e082:	9903      	ldr	r1, [sp, #12]
 800e084:	e7d7      	b.n	800e036 <__hexnan+0x2e>
 800e086:	2a29      	cmp	r2, #41	@ 0x29
 800e088:	d157      	bne.n	800e13a <__hexnan+0x132>
 800e08a:	3102      	adds	r1, #2
 800e08c:	f8ca 1000 	str.w	r1, [sl]
 800e090:	f1bb 0f00 	cmp.w	fp, #0
 800e094:	d051      	beq.n	800e13a <__hexnan+0x132>
 800e096:	454c      	cmp	r4, r9
 800e098:	d206      	bcs.n	800e0a8 <__hexnan+0xa0>
 800e09a:	2d07      	cmp	r5, #7
 800e09c:	dc04      	bgt.n	800e0a8 <__hexnan+0xa0>
 800e09e:	462a      	mov	r2, r5
 800e0a0:	4649      	mov	r1, r9
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff ff8a 	bl	800dfbc <L_shift>
 800e0a8:	4544      	cmp	r4, r8
 800e0aa:	d936      	bls.n	800e11a <__hexnan+0x112>
 800e0ac:	f1a8 0204 	sub.w	r2, r8, #4
 800e0b0:	4623      	mov	r3, r4
 800e0b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0ba:	429f      	cmp	r7, r3
 800e0bc:	d2f9      	bcs.n	800e0b2 <__hexnan+0xaa>
 800e0be:	1b3b      	subs	r3, r7, r4
 800e0c0:	f023 0303 	bic.w	r3, r3, #3
 800e0c4:	3304      	adds	r3, #4
 800e0c6:	3401      	adds	r4, #1
 800e0c8:	3e03      	subs	r6, #3
 800e0ca:	42b4      	cmp	r4, r6
 800e0cc:	bf88      	it	hi
 800e0ce:	2304      	movhi	r3, #4
 800e0d0:	4443      	add	r3, r8
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f843 2b04 	str.w	r2, [r3], #4
 800e0d8:	429f      	cmp	r7, r3
 800e0da:	d2fb      	bcs.n	800e0d4 <__hexnan+0xcc>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	b91b      	cbnz	r3, 800e0e8 <__hexnan+0xe0>
 800e0e0:	4547      	cmp	r7, r8
 800e0e2:	d128      	bne.n	800e136 <__hexnan+0x12e>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	2005      	movs	r0, #5
 800e0ea:	b007      	add	sp, #28
 800e0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f0:	3501      	adds	r5, #1
 800e0f2:	2d08      	cmp	r5, #8
 800e0f4:	f10b 0b01 	add.w	fp, fp, #1
 800e0f8:	dd06      	ble.n	800e108 <__hexnan+0x100>
 800e0fa:	4544      	cmp	r4, r8
 800e0fc:	d9c1      	bls.n	800e082 <__hexnan+0x7a>
 800e0fe:	2300      	movs	r3, #0
 800e100:	f844 3c04 	str.w	r3, [r4, #-4]
 800e104:	2501      	movs	r5, #1
 800e106:	3c04      	subs	r4, #4
 800e108:	6822      	ldr	r2, [r4, #0]
 800e10a:	f000 000f 	and.w	r0, r0, #15
 800e10e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e112:	6020      	str	r0, [r4, #0]
 800e114:	e7b5      	b.n	800e082 <__hexnan+0x7a>
 800e116:	2508      	movs	r5, #8
 800e118:	e7b3      	b.n	800e082 <__hexnan+0x7a>
 800e11a:	9b01      	ldr	r3, [sp, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0dd      	beq.n	800e0dc <__hexnan+0xd4>
 800e120:	f1c3 0320 	rsb	r3, r3, #32
 800e124:	f04f 32ff 	mov.w	r2, #4294967295
 800e128:	40da      	lsrs	r2, r3
 800e12a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e12e:	4013      	ands	r3, r2
 800e130:	f846 3c04 	str.w	r3, [r6, #-4]
 800e134:	e7d2      	b.n	800e0dc <__hexnan+0xd4>
 800e136:	3f04      	subs	r7, #4
 800e138:	e7d0      	b.n	800e0dc <__hexnan+0xd4>
 800e13a:	2004      	movs	r0, #4
 800e13c:	e7d5      	b.n	800e0ea <__hexnan+0xe2>
	...

0800e140 <_findenv_r>:
 800e140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800e1b4 <_findenv_r+0x74>
 800e148:	4606      	mov	r6, r0
 800e14a:	4689      	mov	r9, r1
 800e14c:	4617      	mov	r7, r2
 800e14e:	f001 fb67 	bl	800f820 <__env_lock>
 800e152:	f8da 4000 	ldr.w	r4, [sl]
 800e156:	b134      	cbz	r4, 800e166 <_findenv_r+0x26>
 800e158:	464b      	mov	r3, r9
 800e15a:	4698      	mov	r8, r3
 800e15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e160:	b13a      	cbz	r2, 800e172 <_findenv_r+0x32>
 800e162:	2a3d      	cmp	r2, #61	@ 0x3d
 800e164:	d1f9      	bne.n	800e15a <_findenv_r+0x1a>
 800e166:	4630      	mov	r0, r6
 800e168:	f001 fb60 	bl	800f82c <__env_unlock>
 800e16c:	2000      	movs	r0, #0
 800e16e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	eba8 0809 	sub.w	r8, r8, r9
 800e176:	46a3      	mov	fp, r4
 800e178:	f854 0b04 	ldr.w	r0, [r4], #4
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d0f2      	beq.n	800e166 <_findenv_r+0x26>
 800e180:	4642      	mov	r2, r8
 800e182:	4649      	mov	r1, r9
 800e184:	f7fd ffa7 	bl	800c0d6 <strncmp>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d1f4      	bne.n	800e176 <_findenv_r+0x36>
 800e18c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e190:	eb03 0508 	add.w	r5, r3, r8
 800e194:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e198:	2b3d      	cmp	r3, #61	@ 0x3d
 800e19a:	d1ec      	bne.n	800e176 <_findenv_r+0x36>
 800e19c:	f8da 3000 	ldr.w	r3, [sl]
 800e1a0:	ebab 0303 	sub.w	r3, fp, r3
 800e1a4:	109b      	asrs	r3, r3, #2
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	603b      	str	r3, [r7, #0]
 800e1aa:	f001 fb3f 	bl	800f82c <__env_unlock>
 800e1ae:	1c68      	adds	r0, r5, #1
 800e1b0:	e7dd      	b.n	800e16e <_findenv_r+0x2e>
 800e1b2:	bf00      	nop
 800e1b4:	20000010 	.word	0x20000010

0800e1b8 <_getenv_r>:
 800e1b8:	b507      	push	{r0, r1, r2, lr}
 800e1ba:	aa01      	add	r2, sp, #4
 800e1bc:	f7ff ffc0 	bl	800e140 <_findenv_r>
 800e1c0:	b003      	add	sp, #12
 800e1c2:	f85d fb04 	ldr.w	pc, [sp], #4

0800e1c6 <__ascii_mbtowc>:
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	b901      	cbnz	r1, 800e1cc <__ascii_mbtowc+0x6>
 800e1ca:	a901      	add	r1, sp, #4
 800e1cc:	b142      	cbz	r2, 800e1e0 <__ascii_mbtowc+0x1a>
 800e1ce:	b14b      	cbz	r3, 800e1e4 <__ascii_mbtowc+0x1e>
 800e1d0:	7813      	ldrb	r3, [r2, #0]
 800e1d2:	600b      	str	r3, [r1, #0]
 800e1d4:	7812      	ldrb	r2, [r2, #0]
 800e1d6:	1e10      	subs	r0, r2, #0
 800e1d8:	bf18      	it	ne
 800e1da:	2001      	movne	r0, #1
 800e1dc:	b002      	add	sp, #8
 800e1de:	4770      	bx	lr
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	e7fb      	b.n	800e1dc <__ascii_mbtowc+0x16>
 800e1e4:	f06f 0001 	mvn.w	r0, #1
 800e1e8:	e7f8      	b.n	800e1dc <__ascii_mbtowc+0x16>
	...

0800e1ec <_Balloc>:
 800e1ec:	b570      	push	{r4, r5, r6, lr}
 800e1ee:	69c6      	ldr	r6, [r0, #28]
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	b976      	cbnz	r6, 800e214 <_Balloc+0x28>
 800e1f6:	2010      	movs	r0, #16
 800e1f8:	f7fb ffd4 	bl	800a1a4 <malloc>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	61e0      	str	r0, [r4, #28]
 800e200:	b920      	cbnz	r0, 800e20c <_Balloc+0x20>
 800e202:	4b18      	ldr	r3, [pc, #96]	@ (800e264 <_Balloc+0x78>)
 800e204:	4818      	ldr	r0, [pc, #96]	@ (800e268 <_Balloc+0x7c>)
 800e206:	216b      	movs	r1, #107	@ 0x6b
 800e208:	f001 fad8 	bl	800f7bc <__assert_func>
 800e20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e210:	6006      	str	r6, [r0, #0]
 800e212:	60c6      	str	r6, [r0, #12]
 800e214:	69e6      	ldr	r6, [r4, #28]
 800e216:	68f3      	ldr	r3, [r6, #12]
 800e218:	b183      	cbz	r3, 800e23c <_Balloc+0x50>
 800e21a:	69e3      	ldr	r3, [r4, #28]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e222:	b9b8      	cbnz	r0, 800e254 <_Balloc+0x68>
 800e224:	2101      	movs	r1, #1
 800e226:	fa01 f605 	lsl.w	r6, r1, r5
 800e22a:	1d72      	adds	r2, r6, #5
 800e22c:	0092      	lsls	r2, r2, #2
 800e22e:	4620      	mov	r0, r4
 800e230:	f001 fae2 	bl	800f7f8 <_calloc_r>
 800e234:	b160      	cbz	r0, 800e250 <_Balloc+0x64>
 800e236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e23a:	e00e      	b.n	800e25a <_Balloc+0x6e>
 800e23c:	2221      	movs	r2, #33	@ 0x21
 800e23e:	2104      	movs	r1, #4
 800e240:	4620      	mov	r0, r4
 800e242:	f001 fad9 	bl	800f7f8 <_calloc_r>
 800e246:	69e3      	ldr	r3, [r4, #28]
 800e248:	60f0      	str	r0, [r6, #12]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1e4      	bne.n	800e21a <_Balloc+0x2e>
 800e250:	2000      	movs	r0, #0
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	6802      	ldr	r2, [r0, #0]
 800e256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e25a:	2300      	movs	r3, #0
 800e25c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e260:	e7f7      	b.n	800e252 <_Balloc+0x66>
 800e262:	bf00      	nop
 800e264:	08012931 	.word	0x08012931
 800e268:	08012a11 	.word	0x08012a11

0800e26c <_Bfree>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	69c6      	ldr	r6, [r0, #28]
 800e270:	4605      	mov	r5, r0
 800e272:	460c      	mov	r4, r1
 800e274:	b976      	cbnz	r6, 800e294 <_Bfree+0x28>
 800e276:	2010      	movs	r0, #16
 800e278:	f7fb ff94 	bl	800a1a4 <malloc>
 800e27c:	4602      	mov	r2, r0
 800e27e:	61e8      	str	r0, [r5, #28]
 800e280:	b920      	cbnz	r0, 800e28c <_Bfree+0x20>
 800e282:	4b09      	ldr	r3, [pc, #36]	@ (800e2a8 <_Bfree+0x3c>)
 800e284:	4809      	ldr	r0, [pc, #36]	@ (800e2ac <_Bfree+0x40>)
 800e286:	218f      	movs	r1, #143	@ 0x8f
 800e288:	f001 fa98 	bl	800f7bc <__assert_func>
 800e28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e290:	6006      	str	r6, [r0, #0]
 800e292:	60c6      	str	r6, [r0, #12]
 800e294:	b13c      	cbz	r4, 800e2a6 <_Bfree+0x3a>
 800e296:	69eb      	ldr	r3, [r5, #28]
 800e298:	6862      	ldr	r2, [r4, #4]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2a0:	6021      	str	r1, [r4, #0]
 800e2a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	08012931 	.word	0x08012931
 800e2ac:	08012a11 	.word	0x08012a11

0800e2b0 <__multadd>:
 800e2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b4:	690d      	ldr	r5, [r1, #16]
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	461e      	mov	r6, r3
 800e2bc:	f101 0c14 	add.w	ip, r1, #20
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e2c6:	b299      	uxth	r1, r3
 800e2c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e2cc:	0c1e      	lsrs	r6, r3, #16
 800e2ce:	0c0b      	lsrs	r3, r1, #16
 800e2d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e2d4:	b289      	uxth	r1, r1
 800e2d6:	3001      	adds	r0, #1
 800e2d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2dc:	4285      	cmp	r5, r0
 800e2de:	f84c 1b04 	str.w	r1, [ip], #4
 800e2e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2e6:	dcec      	bgt.n	800e2c2 <__multadd+0x12>
 800e2e8:	b30e      	cbz	r6, 800e32e <__multadd+0x7e>
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	42ab      	cmp	r3, r5
 800e2ee:	dc19      	bgt.n	800e324 <__multadd+0x74>
 800e2f0:	6861      	ldr	r1, [r4, #4]
 800e2f2:	4638      	mov	r0, r7
 800e2f4:	3101      	adds	r1, #1
 800e2f6:	f7ff ff79 	bl	800e1ec <_Balloc>
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	b928      	cbnz	r0, 800e30a <__multadd+0x5a>
 800e2fe:	4602      	mov	r2, r0
 800e300:	4b0c      	ldr	r3, [pc, #48]	@ (800e334 <__multadd+0x84>)
 800e302:	480d      	ldr	r0, [pc, #52]	@ (800e338 <__multadd+0x88>)
 800e304:	21ba      	movs	r1, #186	@ 0xba
 800e306:	f001 fa59 	bl	800f7bc <__assert_func>
 800e30a:	6922      	ldr	r2, [r4, #16]
 800e30c:	3202      	adds	r2, #2
 800e30e:	f104 010c 	add.w	r1, r4, #12
 800e312:	0092      	lsls	r2, r2, #2
 800e314:	300c      	adds	r0, #12
 800e316:	f7fe fd1d 	bl	800cd54 <memcpy>
 800e31a:	4621      	mov	r1, r4
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff ffa5 	bl	800e26c <_Bfree>
 800e322:	4644      	mov	r4, r8
 800e324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e328:	3501      	adds	r5, #1
 800e32a:	615e      	str	r6, [r3, #20]
 800e32c:	6125      	str	r5, [r4, #16]
 800e32e:	4620      	mov	r0, r4
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e334:	080129a0 	.word	0x080129a0
 800e338:	08012a11 	.word	0x08012a11

0800e33c <__s2b>:
 800e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e340:	460c      	mov	r4, r1
 800e342:	4615      	mov	r5, r2
 800e344:	461f      	mov	r7, r3
 800e346:	2209      	movs	r2, #9
 800e348:	3308      	adds	r3, #8
 800e34a:	4606      	mov	r6, r0
 800e34c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e350:	2100      	movs	r1, #0
 800e352:	2201      	movs	r2, #1
 800e354:	429a      	cmp	r2, r3
 800e356:	db09      	blt.n	800e36c <__s2b+0x30>
 800e358:	4630      	mov	r0, r6
 800e35a:	f7ff ff47 	bl	800e1ec <_Balloc>
 800e35e:	b940      	cbnz	r0, 800e372 <__s2b+0x36>
 800e360:	4602      	mov	r2, r0
 800e362:	4b19      	ldr	r3, [pc, #100]	@ (800e3c8 <__s2b+0x8c>)
 800e364:	4819      	ldr	r0, [pc, #100]	@ (800e3cc <__s2b+0x90>)
 800e366:	21d3      	movs	r1, #211	@ 0xd3
 800e368:	f001 fa28 	bl	800f7bc <__assert_func>
 800e36c:	0052      	lsls	r2, r2, #1
 800e36e:	3101      	adds	r1, #1
 800e370:	e7f0      	b.n	800e354 <__s2b+0x18>
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	6143      	str	r3, [r0, #20]
 800e376:	2d09      	cmp	r5, #9
 800e378:	f04f 0301 	mov.w	r3, #1
 800e37c:	6103      	str	r3, [r0, #16]
 800e37e:	dd16      	ble.n	800e3ae <__s2b+0x72>
 800e380:	f104 0909 	add.w	r9, r4, #9
 800e384:	46c8      	mov	r8, r9
 800e386:	442c      	add	r4, r5
 800e388:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e38c:	4601      	mov	r1, r0
 800e38e:	3b30      	subs	r3, #48	@ 0x30
 800e390:	220a      	movs	r2, #10
 800e392:	4630      	mov	r0, r6
 800e394:	f7ff ff8c 	bl	800e2b0 <__multadd>
 800e398:	45a0      	cmp	r8, r4
 800e39a:	d1f5      	bne.n	800e388 <__s2b+0x4c>
 800e39c:	f1a5 0408 	sub.w	r4, r5, #8
 800e3a0:	444c      	add	r4, r9
 800e3a2:	1b2d      	subs	r5, r5, r4
 800e3a4:	1963      	adds	r3, r4, r5
 800e3a6:	42bb      	cmp	r3, r7
 800e3a8:	db04      	blt.n	800e3b4 <__s2b+0x78>
 800e3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ae:	340a      	adds	r4, #10
 800e3b0:	2509      	movs	r5, #9
 800e3b2:	e7f6      	b.n	800e3a2 <__s2b+0x66>
 800e3b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3b8:	4601      	mov	r1, r0
 800e3ba:	3b30      	subs	r3, #48	@ 0x30
 800e3bc:	220a      	movs	r2, #10
 800e3be:	4630      	mov	r0, r6
 800e3c0:	f7ff ff76 	bl	800e2b0 <__multadd>
 800e3c4:	e7ee      	b.n	800e3a4 <__s2b+0x68>
 800e3c6:	bf00      	nop
 800e3c8:	080129a0 	.word	0x080129a0
 800e3cc:	08012a11 	.word	0x08012a11

0800e3d0 <__hi0bits>:
 800e3d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	bf36      	itet	cc
 800e3d8:	0403      	lslcc	r3, r0, #16
 800e3da:	2000      	movcs	r0, #0
 800e3dc:	2010      	movcc	r0, #16
 800e3de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3e2:	bf3c      	itt	cc
 800e3e4:	021b      	lslcc	r3, r3, #8
 800e3e6:	3008      	addcc	r0, #8
 800e3e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3ec:	bf3c      	itt	cc
 800e3ee:	011b      	lslcc	r3, r3, #4
 800e3f0:	3004      	addcc	r0, #4
 800e3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3f6:	bf3c      	itt	cc
 800e3f8:	009b      	lslcc	r3, r3, #2
 800e3fa:	3002      	addcc	r0, #2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	db05      	blt.n	800e40c <__hi0bits+0x3c>
 800e400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e404:	f100 0001 	add.w	r0, r0, #1
 800e408:	bf08      	it	eq
 800e40a:	2020      	moveq	r0, #32
 800e40c:	4770      	bx	lr

0800e40e <__lo0bits>:
 800e40e:	6803      	ldr	r3, [r0, #0]
 800e410:	4602      	mov	r2, r0
 800e412:	f013 0007 	ands.w	r0, r3, #7
 800e416:	d00b      	beq.n	800e430 <__lo0bits+0x22>
 800e418:	07d9      	lsls	r1, r3, #31
 800e41a:	d421      	bmi.n	800e460 <__lo0bits+0x52>
 800e41c:	0798      	lsls	r0, r3, #30
 800e41e:	bf49      	itett	mi
 800e420:	085b      	lsrmi	r3, r3, #1
 800e422:	089b      	lsrpl	r3, r3, #2
 800e424:	2001      	movmi	r0, #1
 800e426:	6013      	strmi	r3, [r2, #0]
 800e428:	bf5c      	itt	pl
 800e42a:	6013      	strpl	r3, [r2, #0]
 800e42c:	2002      	movpl	r0, #2
 800e42e:	4770      	bx	lr
 800e430:	b299      	uxth	r1, r3
 800e432:	b909      	cbnz	r1, 800e438 <__lo0bits+0x2a>
 800e434:	0c1b      	lsrs	r3, r3, #16
 800e436:	2010      	movs	r0, #16
 800e438:	b2d9      	uxtb	r1, r3
 800e43a:	b909      	cbnz	r1, 800e440 <__lo0bits+0x32>
 800e43c:	3008      	adds	r0, #8
 800e43e:	0a1b      	lsrs	r3, r3, #8
 800e440:	0719      	lsls	r1, r3, #28
 800e442:	bf04      	itt	eq
 800e444:	091b      	lsreq	r3, r3, #4
 800e446:	3004      	addeq	r0, #4
 800e448:	0799      	lsls	r1, r3, #30
 800e44a:	bf04      	itt	eq
 800e44c:	089b      	lsreq	r3, r3, #2
 800e44e:	3002      	addeq	r0, #2
 800e450:	07d9      	lsls	r1, r3, #31
 800e452:	d403      	bmi.n	800e45c <__lo0bits+0x4e>
 800e454:	085b      	lsrs	r3, r3, #1
 800e456:	f100 0001 	add.w	r0, r0, #1
 800e45a:	d003      	beq.n	800e464 <__lo0bits+0x56>
 800e45c:	6013      	str	r3, [r2, #0]
 800e45e:	4770      	bx	lr
 800e460:	2000      	movs	r0, #0
 800e462:	4770      	bx	lr
 800e464:	2020      	movs	r0, #32
 800e466:	4770      	bx	lr

0800e468 <__i2b>:
 800e468:	b510      	push	{r4, lr}
 800e46a:	460c      	mov	r4, r1
 800e46c:	2101      	movs	r1, #1
 800e46e:	f7ff febd 	bl	800e1ec <_Balloc>
 800e472:	4602      	mov	r2, r0
 800e474:	b928      	cbnz	r0, 800e482 <__i2b+0x1a>
 800e476:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <__i2b+0x24>)
 800e478:	4805      	ldr	r0, [pc, #20]	@ (800e490 <__i2b+0x28>)
 800e47a:	f240 1145 	movw	r1, #325	@ 0x145
 800e47e:	f001 f99d 	bl	800f7bc <__assert_func>
 800e482:	2301      	movs	r3, #1
 800e484:	6144      	str	r4, [r0, #20]
 800e486:	6103      	str	r3, [r0, #16]
 800e488:	bd10      	pop	{r4, pc}
 800e48a:	bf00      	nop
 800e48c:	080129a0 	.word	0x080129a0
 800e490:	08012a11 	.word	0x08012a11

0800e494 <__multiply>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4614      	mov	r4, r2
 800e49a:	690a      	ldr	r2, [r1, #16]
 800e49c:	6923      	ldr	r3, [r4, #16]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	bfa8      	it	ge
 800e4a2:	4623      	movge	r3, r4
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	bfa4      	itt	ge
 800e4a8:	460c      	movge	r4, r1
 800e4aa:	461f      	movge	r7, r3
 800e4ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e4b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e4b4:	68a3      	ldr	r3, [r4, #8]
 800e4b6:	6861      	ldr	r1, [r4, #4]
 800e4b8:	eb0a 0609 	add.w	r6, sl, r9
 800e4bc:	42b3      	cmp	r3, r6
 800e4be:	b085      	sub	sp, #20
 800e4c0:	bfb8      	it	lt
 800e4c2:	3101      	addlt	r1, #1
 800e4c4:	f7ff fe92 	bl	800e1ec <_Balloc>
 800e4c8:	b930      	cbnz	r0, 800e4d8 <__multiply+0x44>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	4b44      	ldr	r3, [pc, #272]	@ (800e5e0 <__multiply+0x14c>)
 800e4ce:	4845      	ldr	r0, [pc, #276]	@ (800e5e4 <__multiply+0x150>)
 800e4d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4d4:	f001 f972 	bl	800f7bc <__assert_func>
 800e4d8:	f100 0514 	add.w	r5, r0, #20
 800e4dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4543      	cmp	r3, r8
 800e4e6:	d321      	bcc.n	800e52c <__multiply+0x98>
 800e4e8:	f107 0114 	add.w	r1, r7, #20
 800e4ec:	f104 0214 	add.w	r2, r4, #20
 800e4f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e4f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e4f8:	9302      	str	r3, [sp, #8]
 800e4fa:	1b13      	subs	r3, r2, r4
 800e4fc:	3b15      	subs	r3, #21
 800e4fe:	f023 0303 	bic.w	r3, r3, #3
 800e502:	3304      	adds	r3, #4
 800e504:	f104 0715 	add.w	r7, r4, #21
 800e508:	42ba      	cmp	r2, r7
 800e50a:	bf38      	it	cc
 800e50c:	2304      	movcc	r3, #4
 800e50e:	9301      	str	r3, [sp, #4]
 800e510:	9b02      	ldr	r3, [sp, #8]
 800e512:	9103      	str	r1, [sp, #12]
 800e514:	428b      	cmp	r3, r1
 800e516:	d80c      	bhi.n	800e532 <__multiply+0x9e>
 800e518:	2e00      	cmp	r6, #0
 800e51a:	dd03      	ble.n	800e524 <__multiply+0x90>
 800e51c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e520:	2b00      	cmp	r3, #0
 800e522:	d05b      	beq.n	800e5dc <__multiply+0x148>
 800e524:	6106      	str	r6, [r0, #16]
 800e526:	b005      	add	sp, #20
 800e528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52c:	f843 2b04 	str.w	r2, [r3], #4
 800e530:	e7d8      	b.n	800e4e4 <__multiply+0x50>
 800e532:	f8b1 a000 	ldrh.w	sl, [r1]
 800e536:	f1ba 0f00 	cmp.w	sl, #0
 800e53a:	d024      	beq.n	800e586 <__multiply+0xf2>
 800e53c:	f104 0e14 	add.w	lr, r4, #20
 800e540:	46a9      	mov	r9, r5
 800e542:	f04f 0c00 	mov.w	ip, #0
 800e546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e54a:	f8d9 3000 	ldr.w	r3, [r9]
 800e54e:	fa1f fb87 	uxth.w	fp, r7
 800e552:	b29b      	uxth	r3, r3
 800e554:	fb0a 330b 	mla	r3, sl, fp, r3
 800e558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e55c:	f8d9 7000 	ldr.w	r7, [r9]
 800e560:	4463      	add	r3, ip
 800e562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e566:	fb0a c70b 	mla	r7, sl, fp, ip
 800e56a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e56e:	b29b      	uxth	r3, r3
 800e570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e574:	4572      	cmp	r2, lr
 800e576:	f849 3b04 	str.w	r3, [r9], #4
 800e57a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e57e:	d8e2      	bhi.n	800e546 <__multiply+0xb2>
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	f845 c003 	str.w	ip, [r5, r3]
 800e586:	9b03      	ldr	r3, [sp, #12]
 800e588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e58c:	3104      	adds	r1, #4
 800e58e:	f1b9 0f00 	cmp.w	r9, #0
 800e592:	d021      	beq.n	800e5d8 <__multiply+0x144>
 800e594:	682b      	ldr	r3, [r5, #0]
 800e596:	f104 0c14 	add.w	ip, r4, #20
 800e59a:	46ae      	mov	lr, r5
 800e59c:	f04f 0a00 	mov.w	sl, #0
 800e5a0:	f8bc b000 	ldrh.w	fp, [ip]
 800e5a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e5a8:	fb09 770b 	mla	r7, r9, fp, r7
 800e5ac:	4457      	add	r7, sl
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5b4:	f84e 3b04 	str.w	r3, [lr], #4
 800e5b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5c0:	f8be 3000 	ldrh.w	r3, [lr]
 800e5c4:	fb09 330a 	mla	r3, r9, sl, r3
 800e5c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e5cc:	4562      	cmp	r2, ip
 800e5ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5d2:	d8e5      	bhi.n	800e5a0 <__multiply+0x10c>
 800e5d4:	9f01      	ldr	r7, [sp, #4]
 800e5d6:	51eb      	str	r3, [r5, r7]
 800e5d8:	3504      	adds	r5, #4
 800e5da:	e799      	b.n	800e510 <__multiply+0x7c>
 800e5dc:	3e01      	subs	r6, #1
 800e5de:	e79b      	b.n	800e518 <__multiply+0x84>
 800e5e0:	080129a0 	.word	0x080129a0
 800e5e4:	08012a11 	.word	0x08012a11

0800e5e8 <__pow5mult>:
 800e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	f012 0203 	ands.w	r2, r2, #3
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	d007      	beq.n	800e608 <__pow5mult+0x20>
 800e5f8:	4c25      	ldr	r4, [pc, #148]	@ (800e690 <__pow5mult+0xa8>)
 800e5fa:	3a01      	subs	r2, #1
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e602:	f7ff fe55 	bl	800e2b0 <__multadd>
 800e606:	4606      	mov	r6, r0
 800e608:	10ad      	asrs	r5, r5, #2
 800e60a:	d03d      	beq.n	800e688 <__pow5mult+0xa0>
 800e60c:	69fc      	ldr	r4, [r7, #28]
 800e60e:	b97c      	cbnz	r4, 800e630 <__pow5mult+0x48>
 800e610:	2010      	movs	r0, #16
 800e612:	f7fb fdc7 	bl	800a1a4 <malloc>
 800e616:	4602      	mov	r2, r0
 800e618:	61f8      	str	r0, [r7, #28]
 800e61a:	b928      	cbnz	r0, 800e628 <__pow5mult+0x40>
 800e61c:	4b1d      	ldr	r3, [pc, #116]	@ (800e694 <__pow5mult+0xac>)
 800e61e:	481e      	ldr	r0, [pc, #120]	@ (800e698 <__pow5mult+0xb0>)
 800e620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e624:	f001 f8ca 	bl	800f7bc <__assert_func>
 800e628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e62c:	6004      	str	r4, [r0, #0]
 800e62e:	60c4      	str	r4, [r0, #12]
 800e630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e638:	b94c      	cbnz	r4, 800e64e <__pow5mult+0x66>
 800e63a:	f240 2171 	movw	r1, #625	@ 0x271
 800e63e:	4638      	mov	r0, r7
 800e640:	f7ff ff12 	bl	800e468 <__i2b>
 800e644:	2300      	movs	r3, #0
 800e646:	f8c8 0008 	str.w	r0, [r8, #8]
 800e64a:	4604      	mov	r4, r0
 800e64c:	6003      	str	r3, [r0, #0]
 800e64e:	f04f 0900 	mov.w	r9, #0
 800e652:	07eb      	lsls	r3, r5, #31
 800e654:	d50a      	bpl.n	800e66c <__pow5mult+0x84>
 800e656:	4631      	mov	r1, r6
 800e658:	4622      	mov	r2, r4
 800e65a:	4638      	mov	r0, r7
 800e65c:	f7ff ff1a 	bl	800e494 <__multiply>
 800e660:	4631      	mov	r1, r6
 800e662:	4680      	mov	r8, r0
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff fe01 	bl	800e26c <_Bfree>
 800e66a:	4646      	mov	r6, r8
 800e66c:	106d      	asrs	r5, r5, #1
 800e66e:	d00b      	beq.n	800e688 <__pow5mult+0xa0>
 800e670:	6820      	ldr	r0, [r4, #0]
 800e672:	b938      	cbnz	r0, 800e684 <__pow5mult+0x9c>
 800e674:	4622      	mov	r2, r4
 800e676:	4621      	mov	r1, r4
 800e678:	4638      	mov	r0, r7
 800e67a:	f7ff ff0b 	bl	800e494 <__multiply>
 800e67e:	6020      	str	r0, [r4, #0]
 800e680:	f8c0 9000 	str.w	r9, [r0]
 800e684:	4604      	mov	r4, r0
 800e686:	e7e4      	b.n	800e652 <__pow5mult+0x6a>
 800e688:	4630      	mov	r0, r6
 800e68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68e:	bf00      	nop
 800e690:	08012a6c 	.word	0x08012a6c
 800e694:	08012931 	.word	0x08012931
 800e698:	08012a11 	.word	0x08012a11

0800e69c <__lshift>:
 800e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	6849      	ldr	r1, [r1, #4]
 800e6a4:	6923      	ldr	r3, [r4, #16]
 800e6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	4691      	mov	r9, r2
 800e6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6b4:	f108 0601 	add.w	r6, r8, #1
 800e6b8:	42b3      	cmp	r3, r6
 800e6ba:	db0b      	blt.n	800e6d4 <__lshift+0x38>
 800e6bc:	4638      	mov	r0, r7
 800e6be:	f7ff fd95 	bl	800e1ec <_Balloc>
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	b948      	cbnz	r0, 800e6da <__lshift+0x3e>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	4b28      	ldr	r3, [pc, #160]	@ (800e76c <__lshift+0xd0>)
 800e6ca:	4829      	ldr	r0, [pc, #164]	@ (800e770 <__lshift+0xd4>)
 800e6cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6d0:	f001 f874 	bl	800f7bc <__assert_func>
 800e6d4:	3101      	adds	r1, #1
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	e7ee      	b.n	800e6b8 <__lshift+0x1c>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f100 0114 	add.w	r1, r0, #20
 800e6e0:	f100 0210 	add.w	r2, r0, #16
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	4553      	cmp	r3, sl
 800e6e8:	db33      	blt.n	800e752 <__lshift+0xb6>
 800e6ea:	6920      	ldr	r0, [r4, #16]
 800e6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6f0:	f104 0314 	add.w	r3, r4, #20
 800e6f4:	f019 091f 	ands.w	r9, r9, #31
 800e6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e700:	d02b      	beq.n	800e75a <__lshift+0xbe>
 800e702:	f1c9 0e20 	rsb	lr, r9, #32
 800e706:	468a      	mov	sl, r1
 800e708:	2200      	movs	r2, #0
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	fa00 f009 	lsl.w	r0, r0, r9
 800e710:	4310      	orrs	r0, r2
 800e712:	f84a 0b04 	str.w	r0, [sl], #4
 800e716:	f853 2b04 	ldr.w	r2, [r3], #4
 800e71a:	459c      	cmp	ip, r3
 800e71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e720:	d8f3      	bhi.n	800e70a <__lshift+0x6e>
 800e722:	ebac 0304 	sub.w	r3, ip, r4
 800e726:	3b15      	subs	r3, #21
 800e728:	f023 0303 	bic.w	r3, r3, #3
 800e72c:	3304      	adds	r3, #4
 800e72e:	f104 0015 	add.w	r0, r4, #21
 800e732:	4584      	cmp	ip, r0
 800e734:	bf38      	it	cc
 800e736:	2304      	movcc	r3, #4
 800e738:	50ca      	str	r2, [r1, r3]
 800e73a:	b10a      	cbz	r2, 800e740 <__lshift+0xa4>
 800e73c:	f108 0602 	add.w	r6, r8, #2
 800e740:	3e01      	subs	r6, #1
 800e742:	4638      	mov	r0, r7
 800e744:	612e      	str	r6, [r5, #16]
 800e746:	4621      	mov	r1, r4
 800e748:	f7ff fd90 	bl	800e26c <_Bfree>
 800e74c:	4628      	mov	r0, r5
 800e74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e752:	f842 0f04 	str.w	r0, [r2, #4]!
 800e756:	3301      	adds	r3, #1
 800e758:	e7c5      	b.n	800e6e6 <__lshift+0x4a>
 800e75a:	3904      	subs	r1, #4
 800e75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e760:	f841 2f04 	str.w	r2, [r1, #4]!
 800e764:	459c      	cmp	ip, r3
 800e766:	d8f9      	bhi.n	800e75c <__lshift+0xc0>
 800e768:	e7ea      	b.n	800e740 <__lshift+0xa4>
 800e76a:	bf00      	nop
 800e76c:	080129a0 	.word	0x080129a0
 800e770:	08012a11 	.word	0x08012a11

0800e774 <__mcmp>:
 800e774:	690a      	ldr	r2, [r1, #16]
 800e776:	4603      	mov	r3, r0
 800e778:	6900      	ldr	r0, [r0, #16]
 800e77a:	1a80      	subs	r0, r0, r2
 800e77c:	b530      	push	{r4, r5, lr}
 800e77e:	d10e      	bne.n	800e79e <__mcmp+0x2a>
 800e780:	3314      	adds	r3, #20
 800e782:	3114      	adds	r1, #20
 800e784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e78c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e794:	4295      	cmp	r5, r2
 800e796:	d003      	beq.n	800e7a0 <__mcmp+0x2c>
 800e798:	d205      	bcs.n	800e7a6 <__mcmp+0x32>
 800e79a:	f04f 30ff 	mov.w	r0, #4294967295
 800e79e:	bd30      	pop	{r4, r5, pc}
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	d3f3      	bcc.n	800e78c <__mcmp+0x18>
 800e7a4:	e7fb      	b.n	800e79e <__mcmp+0x2a>
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	e7f9      	b.n	800e79e <__mcmp+0x2a>
	...

0800e7ac <__mdiff>:
 800e7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b0:	4689      	mov	r9, r1
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	f7ff ffdb 	bl	800e774 <__mcmp>
 800e7be:	1e05      	subs	r5, r0, #0
 800e7c0:	d112      	bne.n	800e7e8 <__mdiff+0x3c>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7ff fd11 	bl	800e1ec <_Balloc>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	b928      	cbnz	r0, 800e7da <__mdiff+0x2e>
 800e7ce:	4b3f      	ldr	r3, [pc, #252]	@ (800e8cc <__mdiff+0x120>)
 800e7d0:	f240 2137 	movw	r1, #567	@ 0x237
 800e7d4:	483e      	ldr	r0, [pc, #248]	@ (800e8d0 <__mdiff+0x124>)
 800e7d6:	f000 fff1 	bl	800f7bc <__assert_func>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	b003      	add	sp, #12
 800e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e8:	bfbc      	itt	lt
 800e7ea:	464b      	movlt	r3, r9
 800e7ec:	46a1      	movlt	r9, r4
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7f4:	bfba      	itte	lt
 800e7f6:	461c      	movlt	r4, r3
 800e7f8:	2501      	movlt	r5, #1
 800e7fa:	2500      	movge	r5, #0
 800e7fc:	f7ff fcf6 	bl	800e1ec <_Balloc>
 800e800:	4602      	mov	r2, r0
 800e802:	b918      	cbnz	r0, 800e80c <__mdiff+0x60>
 800e804:	4b31      	ldr	r3, [pc, #196]	@ (800e8cc <__mdiff+0x120>)
 800e806:	f240 2145 	movw	r1, #581	@ 0x245
 800e80a:	e7e3      	b.n	800e7d4 <__mdiff+0x28>
 800e80c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e810:	6926      	ldr	r6, [r4, #16]
 800e812:	60c5      	str	r5, [r0, #12]
 800e814:	f109 0310 	add.w	r3, r9, #16
 800e818:	f109 0514 	add.w	r5, r9, #20
 800e81c:	f104 0e14 	add.w	lr, r4, #20
 800e820:	f100 0b14 	add.w	fp, r0, #20
 800e824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	46d9      	mov	r9, fp
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	9b01      	ldr	r3, [sp, #4]
 800e836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e83a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	fa1f f38a 	uxth.w	r3, sl
 800e844:	4619      	mov	r1, r3
 800e846:	b283      	uxth	r3, r0
 800e848:	1acb      	subs	r3, r1, r3
 800e84a:	0c00      	lsrs	r0, r0, #16
 800e84c:	4463      	add	r3, ip
 800e84e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e856:	b29b      	uxth	r3, r3
 800e858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e85c:	4576      	cmp	r6, lr
 800e85e:	f849 3b04 	str.w	r3, [r9], #4
 800e862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e866:	d8e5      	bhi.n	800e834 <__mdiff+0x88>
 800e868:	1b33      	subs	r3, r6, r4
 800e86a:	3b15      	subs	r3, #21
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	3415      	adds	r4, #21
 800e872:	3304      	adds	r3, #4
 800e874:	42a6      	cmp	r6, r4
 800e876:	bf38      	it	cc
 800e878:	2304      	movcc	r3, #4
 800e87a:	441d      	add	r5, r3
 800e87c:	445b      	add	r3, fp
 800e87e:	461e      	mov	r6, r3
 800e880:	462c      	mov	r4, r5
 800e882:	4544      	cmp	r4, r8
 800e884:	d30e      	bcc.n	800e8a4 <__mdiff+0xf8>
 800e886:	f108 0103 	add.w	r1, r8, #3
 800e88a:	1b49      	subs	r1, r1, r5
 800e88c:	f021 0103 	bic.w	r1, r1, #3
 800e890:	3d03      	subs	r5, #3
 800e892:	45a8      	cmp	r8, r5
 800e894:	bf38      	it	cc
 800e896:	2100      	movcc	r1, #0
 800e898:	440b      	add	r3, r1
 800e89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e89e:	b191      	cbz	r1, 800e8c6 <__mdiff+0x11a>
 800e8a0:	6117      	str	r7, [r2, #16]
 800e8a2:	e79d      	b.n	800e7e0 <__mdiff+0x34>
 800e8a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8a8:	46e6      	mov	lr, ip
 800e8aa:	0c08      	lsrs	r0, r1, #16
 800e8ac:	fa1c fc81 	uxtah	ip, ip, r1
 800e8b0:	4471      	add	r1, lr
 800e8b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8b6:	b289      	uxth	r1, r1
 800e8b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8bc:	f846 1b04 	str.w	r1, [r6], #4
 800e8c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8c4:	e7dd      	b.n	800e882 <__mdiff+0xd6>
 800e8c6:	3f01      	subs	r7, #1
 800e8c8:	e7e7      	b.n	800e89a <__mdiff+0xee>
 800e8ca:	bf00      	nop
 800e8cc:	080129a0 	.word	0x080129a0
 800e8d0:	08012a11 	.word	0x08012a11

0800e8d4 <__ulp>:
 800e8d4:	b082      	sub	sp, #8
 800e8d6:	ed8d 0b00 	vstr	d0, [sp]
 800e8da:	9a01      	ldr	r2, [sp, #4]
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e91c <__ulp+0x48>)
 800e8de:	4013      	ands	r3, r2
 800e8e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dc08      	bgt.n	800e8fa <__ulp+0x26>
 800e8e8:	425b      	negs	r3, r3
 800e8ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8f2:	da04      	bge.n	800e8fe <__ulp+0x2a>
 800e8f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e8f8:	4113      	asrs	r3, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	e008      	b.n	800e910 <__ulp+0x3c>
 800e8fe:	f1a2 0314 	sub.w	r3, r2, #20
 800e902:	2b1e      	cmp	r3, #30
 800e904:	bfda      	itte	le
 800e906:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e90a:	40da      	lsrle	r2, r3
 800e90c:	2201      	movgt	r2, #1
 800e90e:	2300      	movs	r3, #0
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	ec41 0b10 	vmov	d0, r0, r1
 800e918:	b002      	add	sp, #8
 800e91a:	4770      	bx	lr
 800e91c:	7ff00000 	.word	0x7ff00000

0800e920 <__b2d>:
 800e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e924:	6906      	ldr	r6, [r0, #16]
 800e926:	f100 0814 	add.w	r8, r0, #20
 800e92a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e92e:	1f37      	subs	r7, r6, #4
 800e930:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e934:	4610      	mov	r0, r2
 800e936:	f7ff fd4b 	bl	800e3d0 <__hi0bits>
 800e93a:	f1c0 0320 	rsb	r3, r0, #32
 800e93e:	280a      	cmp	r0, #10
 800e940:	600b      	str	r3, [r1, #0]
 800e942:	491b      	ldr	r1, [pc, #108]	@ (800e9b0 <__b2d+0x90>)
 800e944:	dc15      	bgt.n	800e972 <__b2d+0x52>
 800e946:	f1c0 0c0b 	rsb	ip, r0, #11
 800e94a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e94e:	45b8      	cmp	r8, r7
 800e950:	ea43 0501 	orr.w	r5, r3, r1
 800e954:	bf34      	ite	cc
 800e956:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e95a:	2300      	movcs	r3, #0
 800e95c:	3015      	adds	r0, #21
 800e95e:	fa02 f000 	lsl.w	r0, r2, r0
 800e962:	fa23 f30c 	lsr.w	r3, r3, ip
 800e966:	4303      	orrs	r3, r0
 800e968:	461c      	mov	r4, r3
 800e96a:	ec45 4b10 	vmov	d0, r4, r5
 800e96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e972:	45b8      	cmp	r8, r7
 800e974:	bf3a      	itte	cc
 800e976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e97a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e97e:	2300      	movcs	r3, #0
 800e980:	380b      	subs	r0, #11
 800e982:	d012      	beq.n	800e9aa <__b2d+0x8a>
 800e984:	f1c0 0120 	rsb	r1, r0, #32
 800e988:	fa23 f401 	lsr.w	r4, r3, r1
 800e98c:	4082      	lsls	r2, r0
 800e98e:	4322      	orrs	r2, r4
 800e990:	4547      	cmp	r7, r8
 800e992:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e996:	bf8c      	ite	hi
 800e998:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e99c:	2200      	movls	r2, #0
 800e99e:	4083      	lsls	r3, r0
 800e9a0:	40ca      	lsrs	r2, r1
 800e9a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	e7de      	b.n	800e968 <__b2d+0x48>
 800e9aa:	ea42 0501 	orr.w	r5, r2, r1
 800e9ae:	e7db      	b.n	800e968 <__b2d+0x48>
 800e9b0:	3ff00000 	.word	0x3ff00000

0800e9b4 <__d2b>:
 800e9b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	2101      	movs	r1, #1
 800e9bc:	ec59 8b10 	vmov	r8, r9, d0
 800e9c0:	4616      	mov	r6, r2
 800e9c2:	f7ff fc13 	bl	800e1ec <_Balloc>
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	b930      	cbnz	r0, 800e9d8 <__d2b+0x24>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	4b23      	ldr	r3, [pc, #140]	@ (800ea5c <__d2b+0xa8>)
 800e9ce:	4824      	ldr	r0, [pc, #144]	@ (800ea60 <__d2b+0xac>)
 800e9d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9d4:	f000 fef2 	bl	800f7bc <__assert_func>
 800e9d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9e0:	b10d      	cbz	r5, 800e9e6 <__d2b+0x32>
 800e9e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	f1b8 0300 	subs.w	r3, r8, #0
 800e9ec:	d023      	beq.n	800ea36 <__d2b+0x82>
 800e9ee:	4668      	mov	r0, sp
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	f7ff fd0c 	bl	800e40e <__lo0bits>
 800e9f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e9fa:	b1d0      	cbz	r0, 800ea32 <__d2b+0x7e>
 800e9fc:	f1c0 0320 	rsb	r3, r0, #32
 800ea00:	fa02 f303 	lsl.w	r3, r2, r3
 800ea04:	430b      	orrs	r3, r1
 800ea06:	40c2      	lsrs	r2, r0
 800ea08:	6163      	str	r3, [r4, #20]
 800ea0a:	9201      	str	r2, [sp, #4]
 800ea0c:	9b01      	ldr	r3, [sp, #4]
 800ea0e:	61a3      	str	r3, [r4, #24]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	bf0c      	ite	eq
 800ea14:	2201      	moveq	r2, #1
 800ea16:	2202      	movne	r2, #2
 800ea18:	6122      	str	r2, [r4, #16]
 800ea1a:	b1a5      	cbz	r5, 800ea46 <__d2b+0x92>
 800ea1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea20:	4405      	add	r5, r0
 800ea22:	603d      	str	r5, [r7, #0]
 800ea24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea28:	6030      	str	r0, [r6, #0]
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	b003      	add	sp, #12
 800ea2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea32:	6161      	str	r1, [r4, #20]
 800ea34:	e7ea      	b.n	800ea0c <__d2b+0x58>
 800ea36:	a801      	add	r0, sp, #4
 800ea38:	f7ff fce9 	bl	800e40e <__lo0bits>
 800ea3c:	9b01      	ldr	r3, [sp, #4]
 800ea3e:	6163      	str	r3, [r4, #20]
 800ea40:	3020      	adds	r0, #32
 800ea42:	2201      	movs	r2, #1
 800ea44:	e7e8      	b.n	800ea18 <__d2b+0x64>
 800ea46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea4e:	6038      	str	r0, [r7, #0]
 800ea50:	6918      	ldr	r0, [r3, #16]
 800ea52:	f7ff fcbd 	bl	800e3d0 <__hi0bits>
 800ea56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea5a:	e7e5      	b.n	800ea28 <__d2b+0x74>
 800ea5c:	080129a0 	.word	0x080129a0
 800ea60:	08012a11 	.word	0x08012a11

0800ea64 <__ratio>:
 800ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	e9cd 1000 	strd	r1, r0, [sp]
 800ea6e:	a902      	add	r1, sp, #8
 800ea70:	f7ff ff56 	bl	800e920 <__b2d>
 800ea74:	9800      	ldr	r0, [sp, #0]
 800ea76:	a903      	add	r1, sp, #12
 800ea78:	ec55 4b10 	vmov	r4, r5, d0
 800ea7c:	f7ff ff50 	bl	800e920 <__b2d>
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	6919      	ldr	r1, [r3, #16]
 800ea84:	9b00      	ldr	r3, [sp, #0]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	1ac9      	subs	r1, r1, r3
 800ea8a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea8e:	1a9b      	subs	r3, r3, r2
 800ea90:	ec5b ab10 	vmov	sl, fp, d0
 800ea94:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bfce      	itee	gt
 800ea9c:	462a      	movgt	r2, r5
 800ea9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eaa2:	465a      	movle	r2, fp
 800eaa4:	462f      	mov	r7, r5
 800eaa6:	46d9      	mov	r9, fp
 800eaa8:	bfcc      	ite	gt
 800eaaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eaae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eab2:	464b      	mov	r3, r9
 800eab4:	4652      	mov	r2, sl
 800eab6:	4620      	mov	r0, r4
 800eab8:	4639      	mov	r1, r7
 800eaba:	f7f1 fed7 	bl	800086c <__aeabi_ddiv>
 800eabe:	ec41 0b10 	vmov	d0, r0, r1
 800eac2:	b005      	add	sp, #20
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eac8 <__copybits>:
 800eac8:	3901      	subs	r1, #1
 800eaca:	b570      	push	{r4, r5, r6, lr}
 800eacc:	1149      	asrs	r1, r1, #5
 800eace:	6914      	ldr	r4, [r2, #16]
 800ead0:	3101      	adds	r1, #1
 800ead2:	f102 0314 	add.w	r3, r2, #20
 800ead6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eada:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eade:	1f05      	subs	r5, r0, #4
 800eae0:	42a3      	cmp	r3, r4
 800eae2:	d30c      	bcc.n	800eafe <__copybits+0x36>
 800eae4:	1aa3      	subs	r3, r4, r2
 800eae6:	3b11      	subs	r3, #17
 800eae8:	f023 0303 	bic.w	r3, r3, #3
 800eaec:	3211      	adds	r2, #17
 800eaee:	42a2      	cmp	r2, r4
 800eaf0:	bf88      	it	hi
 800eaf2:	2300      	movhi	r3, #0
 800eaf4:	4418      	add	r0, r3
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	4288      	cmp	r0, r1
 800eafa:	d305      	bcc.n	800eb08 <__copybits+0x40>
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb02:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb06:	e7eb      	b.n	800eae0 <__copybits+0x18>
 800eb08:	f840 3b04 	str.w	r3, [r0], #4
 800eb0c:	e7f4      	b.n	800eaf8 <__copybits+0x30>

0800eb0e <__any_on>:
 800eb0e:	f100 0214 	add.w	r2, r0, #20
 800eb12:	6900      	ldr	r0, [r0, #16]
 800eb14:	114b      	asrs	r3, r1, #5
 800eb16:	4298      	cmp	r0, r3
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	db11      	blt.n	800eb40 <__any_on+0x32>
 800eb1c:	dd0a      	ble.n	800eb34 <__any_on+0x26>
 800eb1e:	f011 011f 	ands.w	r1, r1, #31
 800eb22:	d007      	beq.n	800eb34 <__any_on+0x26>
 800eb24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb28:	fa24 f001 	lsr.w	r0, r4, r1
 800eb2c:	fa00 f101 	lsl.w	r1, r0, r1
 800eb30:	428c      	cmp	r4, r1
 800eb32:	d10b      	bne.n	800eb4c <__any_on+0x3e>
 800eb34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d803      	bhi.n	800eb44 <__any_on+0x36>
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	4603      	mov	r3, r0
 800eb42:	e7f7      	b.n	800eb34 <__any_on+0x26>
 800eb44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	d0f5      	beq.n	800eb38 <__any_on+0x2a>
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	e7f6      	b.n	800eb3e <__any_on+0x30>

0800eb50 <_strtoul_l.constprop.0>:
 800eb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb54:	4e34      	ldr	r6, [pc, #208]	@ (800ec28 <_strtoul_l.constprop.0+0xd8>)
 800eb56:	4686      	mov	lr, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb60:	5d37      	ldrb	r7, [r6, r4]
 800eb62:	f017 0708 	ands.w	r7, r7, #8
 800eb66:	d1f8      	bne.n	800eb5a <_strtoul_l.constprop.0+0xa>
 800eb68:	2c2d      	cmp	r4, #45	@ 0x2d
 800eb6a:	d12f      	bne.n	800ebcc <_strtoul_l.constprop.0+0x7c>
 800eb6c:	782c      	ldrb	r4, [r5, #0]
 800eb6e:	2701      	movs	r7, #1
 800eb70:	1c85      	adds	r5, r0, #2
 800eb72:	f033 0010 	bics.w	r0, r3, #16
 800eb76:	d109      	bne.n	800eb8c <_strtoul_l.constprop.0+0x3c>
 800eb78:	2c30      	cmp	r4, #48	@ 0x30
 800eb7a:	d12c      	bne.n	800ebd6 <_strtoul_l.constprop.0+0x86>
 800eb7c:	7828      	ldrb	r0, [r5, #0]
 800eb7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800eb82:	2858      	cmp	r0, #88	@ 0x58
 800eb84:	d127      	bne.n	800ebd6 <_strtoul_l.constprop.0+0x86>
 800eb86:	786c      	ldrb	r4, [r5, #1]
 800eb88:	2310      	movs	r3, #16
 800eb8a:	3502      	adds	r5, #2
 800eb8c:	f04f 38ff 	mov.w	r8, #4294967295
 800eb90:	2600      	movs	r6, #0
 800eb92:	fbb8 f8f3 	udiv	r8, r8, r3
 800eb96:	fb03 f908 	mul.w	r9, r3, r8
 800eb9a:	ea6f 0909 	mvn.w	r9, r9
 800eb9e:	4630      	mov	r0, r6
 800eba0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eba4:	f1bc 0f09 	cmp.w	ip, #9
 800eba8:	d81c      	bhi.n	800ebe4 <_strtoul_l.constprop.0+0x94>
 800ebaa:	4664      	mov	r4, ip
 800ebac:	42a3      	cmp	r3, r4
 800ebae:	dd2a      	ble.n	800ec06 <_strtoul_l.constprop.0+0xb6>
 800ebb0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ebb4:	d007      	beq.n	800ebc6 <_strtoul_l.constprop.0+0x76>
 800ebb6:	4580      	cmp	r8, r0
 800ebb8:	d322      	bcc.n	800ec00 <_strtoul_l.constprop.0+0xb0>
 800ebba:	d101      	bne.n	800ebc0 <_strtoul_l.constprop.0+0x70>
 800ebbc:	45a1      	cmp	r9, r4
 800ebbe:	db1f      	blt.n	800ec00 <_strtoul_l.constprop.0+0xb0>
 800ebc0:	fb00 4003 	mla	r0, r0, r3, r4
 800ebc4:	2601      	movs	r6, #1
 800ebc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebca:	e7e9      	b.n	800eba0 <_strtoul_l.constprop.0+0x50>
 800ebcc:	2c2b      	cmp	r4, #43	@ 0x2b
 800ebce:	bf04      	itt	eq
 800ebd0:	782c      	ldrbeq	r4, [r5, #0]
 800ebd2:	1c85      	addeq	r5, r0, #2
 800ebd4:	e7cd      	b.n	800eb72 <_strtoul_l.constprop.0+0x22>
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1d8      	bne.n	800eb8c <_strtoul_l.constprop.0+0x3c>
 800ebda:	2c30      	cmp	r4, #48	@ 0x30
 800ebdc:	bf0c      	ite	eq
 800ebde:	2308      	moveq	r3, #8
 800ebe0:	230a      	movne	r3, #10
 800ebe2:	e7d3      	b.n	800eb8c <_strtoul_l.constprop.0+0x3c>
 800ebe4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ebe8:	f1bc 0f19 	cmp.w	ip, #25
 800ebec:	d801      	bhi.n	800ebf2 <_strtoul_l.constprop.0+0xa2>
 800ebee:	3c37      	subs	r4, #55	@ 0x37
 800ebf0:	e7dc      	b.n	800ebac <_strtoul_l.constprop.0+0x5c>
 800ebf2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ebf6:	f1bc 0f19 	cmp.w	ip, #25
 800ebfa:	d804      	bhi.n	800ec06 <_strtoul_l.constprop.0+0xb6>
 800ebfc:	3c57      	subs	r4, #87	@ 0x57
 800ebfe:	e7d5      	b.n	800ebac <_strtoul_l.constprop.0+0x5c>
 800ec00:	f04f 36ff 	mov.w	r6, #4294967295
 800ec04:	e7df      	b.n	800ebc6 <_strtoul_l.constprop.0+0x76>
 800ec06:	1c73      	adds	r3, r6, #1
 800ec08:	d106      	bne.n	800ec18 <_strtoul_l.constprop.0+0xc8>
 800ec0a:	2322      	movs	r3, #34	@ 0x22
 800ec0c:	f8ce 3000 	str.w	r3, [lr]
 800ec10:	4630      	mov	r0, r6
 800ec12:	b932      	cbnz	r2, 800ec22 <_strtoul_l.constprop.0+0xd2>
 800ec14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec18:	b107      	cbz	r7, 800ec1c <_strtoul_l.constprop.0+0xcc>
 800ec1a:	4240      	negs	r0, r0
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	d0f9      	beq.n	800ec14 <_strtoul_l.constprop.0+0xc4>
 800ec20:	b106      	cbz	r6, 800ec24 <_strtoul_l.constprop.0+0xd4>
 800ec22:	1e69      	subs	r1, r5, #1
 800ec24:	6011      	str	r1, [r2, #0]
 800ec26:	e7f5      	b.n	800ec14 <_strtoul_l.constprop.0+0xc4>
 800ec28:	08012739 	.word	0x08012739

0800ec2c <_strtoul_r>:
 800ec2c:	f7ff bf90 	b.w	800eb50 <_strtoul_l.constprop.0>

0800ec30 <strtoul>:
 800ec30:	4613      	mov	r3, r2
 800ec32:	460a      	mov	r2, r1
 800ec34:	4601      	mov	r1, r0
 800ec36:	4802      	ldr	r0, [pc, #8]	@ (800ec40 <strtoul+0x10>)
 800ec38:	6800      	ldr	r0, [r0, #0]
 800ec3a:	f7ff bf89 	b.w	800eb50 <_strtoul_l.constprop.0>
 800ec3e:	bf00      	nop
 800ec40:	200001a8 	.word	0x200001a8

0800ec44 <__ascii_wctomb>:
 800ec44:	4603      	mov	r3, r0
 800ec46:	4608      	mov	r0, r1
 800ec48:	b141      	cbz	r1, 800ec5c <__ascii_wctomb+0x18>
 800ec4a:	2aff      	cmp	r2, #255	@ 0xff
 800ec4c:	d904      	bls.n	800ec58 <__ascii_wctomb+0x14>
 800ec4e:	228a      	movs	r2, #138	@ 0x8a
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	f04f 30ff 	mov.w	r0, #4294967295
 800ec56:	4770      	bx	lr
 800ec58:	700a      	strb	r2, [r1, #0]
 800ec5a:	2001      	movs	r0, #1
 800ec5c:	4770      	bx	lr

0800ec5e <__ssputs_r>:
 800ec5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec62:	688e      	ldr	r6, [r1, #8]
 800ec64:	461f      	mov	r7, r3
 800ec66:	42be      	cmp	r6, r7
 800ec68:	680b      	ldr	r3, [r1, #0]
 800ec6a:	4682      	mov	sl, r0
 800ec6c:	460c      	mov	r4, r1
 800ec6e:	4690      	mov	r8, r2
 800ec70:	d82d      	bhi.n	800ecce <__ssputs_r+0x70>
 800ec72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec76:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ec7a:	d026      	beq.n	800ecca <__ssputs_r+0x6c>
 800ec7c:	6965      	ldr	r5, [r4, #20]
 800ec7e:	6909      	ldr	r1, [r1, #16]
 800ec80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec84:	eba3 0901 	sub.w	r9, r3, r1
 800ec88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec8c:	1c7b      	adds	r3, r7, #1
 800ec8e:	444b      	add	r3, r9
 800ec90:	106d      	asrs	r5, r5, #1
 800ec92:	429d      	cmp	r5, r3
 800ec94:	bf38      	it	cc
 800ec96:	461d      	movcc	r5, r3
 800ec98:	0553      	lsls	r3, r2, #21
 800ec9a:	d527      	bpl.n	800ecec <__ssputs_r+0x8e>
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	f7fb fab3 	bl	800a208 <_malloc_r>
 800eca2:	4606      	mov	r6, r0
 800eca4:	b360      	cbz	r0, 800ed00 <__ssputs_r+0xa2>
 800eca6:	6921      	ldr	r1, [r4, #16]
 800eca8:	464a      	mov	r2, r9
 800ecaa:	f7fe f853 	bl	800cd54 <memcpy>
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ecb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecb8:	81a3      	strh	r3, [r4, #12]
 800ecba:	6126      	str	r6, [r4, #16]
 800ecbc:	6165      	str	r5, [r4, #20]
 800ecbe:	444e      	add	r6, r9
 800ecc0:	eba5 0509 	sub.w	r5, r5, r9
 800ecc4:	6026      	str	r6, [r4, #0]
 800ecc6:	60a5      	str	r5, [r4, #8]
 800ecc8:	463e      	mov	r6, r7
 800ecca:	42be      	cmp	r6, r7
 800eccc:	d900      	bls.n	800ecd0 <__ssputs_r+0x72>
 800ecce:	463e      	mov	r6, r7
 800ecd0:	6820      	ldr	r0, [r4, #0]
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	4641      	mov	r1, r8
 800ecd6:	f000 fd52 	bl	800f77e <memmove>
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	1b9b      	subs	r3, r3, r6
 800ecde:	60a3      	str	r3, [r4, #8]
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	4433      	add	r3, r6
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	2000      	movs	r0, #0
 800ece8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecec:	462a      	mov	r2, r5
 800ecee:	f000 fda3 	bl	800f838 <_realloc_r>
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d1e0      	bne.n	800ecba <__ssputs_r+0x5c>
 800ecf8:	6921      	ldr	r1, [r4, #16]
 800ecfa:	4650      	mov	r0, sl
 800ecfc:	f7fe fe9c 	bl	800da38 <_free_r>
 800ed00:	230c      	movs	r3, #12
 800ed02:	f8ca 3000 	str.w	r3, [sl]
 800ed06:	89a3      	ldrh	r3, [r4, #12]
 800ed08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed0c:	81a3      	strh	r3, [r4, #12]
 800ed0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed12:	e7e9      	b.n	800ece8 <__ssputs_r+0x8a>

0800ed14 <_svfiprintf_r>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	4698      	mov	r8, r3
 800ed1a:	898b      	ldrh	r3, [r1, #12]
 800ed1c:	061b      	lsls	r3, r3, #24
 800ed1e:	b09d      	sub	sp, #116	@ 0x74
 800ed20:	4607      	mov	r7, r0
 800ed22:	460d      	mov	r5, r1
 800ed24:	4614      	mov	r4, r2
 800ed26:	d510      	bpl.n	800ed4a <_svfiprintf_r+0x36>
 800ed28:	690b      	ldr	r3, [r1, #16]
 800ed2a:	b973      	cbnz	r3, 800ed4a <_svfiprintf_r+0x36>
 800ed2c:	2140      	movs	r1, #64	@ 0x40
 800ed2e:	f7fb fa6b 	bl	800a208 <_malloc_r>
 800ed32:	6028      	str	r0, [r5, #0]
 800ed34:	6128      	str	r0, [r5, #16]
 800ed36:	b930      	cbnz	r0, 800ed46 <_svfiprintf_r+0x32>
 800ed38:	230c      	movs	r3, #12
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	b01d      	add	sp, #116	@ 0x74
 800ed42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed46:	2340      	movs	r3, #64	@ 0x40
 800ed48:	616b      	str	r3, [r5, #20]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed4e:	2320      	movs	r3, #32
 800ed50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed58:	2330      	movs	r3, #48	@ 0x30
 800ed5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eef8 <_svfiprintf_r+0x1e4>
 800ed5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed62:	f04f 0901 	mov.w	r9, #1
 800ed66:	4623      	mov	r3, r4
 800ed68:	469a      	mov	sl, r3
 800ed6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed6e:	b10a      	cbz	r2, 800ed74 <_svfiprintf_r+0x60>
 800ed70:	2a25      	cmp	r2, #37	@ 0x25
 800ed72:	d1f9      	bne.n	800ed68 <_svfiprintf_r+0x54>
 800ed74:	ebba 0b04 	subs.w	fp, sl, r4
 800ed78:	d00b      	beq.n	800ed92 <_svfiprintf_r+0x7e>
 800ed7a:	465b      	mov	r3, fp
 800ed7c:	4622      	mov	r2, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	4638      	mov	r0, r7
 800ed82:	f7ff ff6c 	bl	800ec5e <__ssputs_r>
 800ed86:	3001      	adds	r0, #1
 800ed88:	f000 80a7 	beq.w	800eeda <_svfiprintf_r+0x1c6>
 800ed8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed8e:	445a      	add	r2, fp
 800ed90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed92:	f89a 3000 	ldrb.w	r3, [sl]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f000 809f 	beq.w	800eeda <_svfiprintf_r+0x1c6>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eda2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eda6:	f10a 0a01 	add.w	sl, sl, #1
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	9307      	str	r3, [sp, #28]
 800edae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800edb4:	4654      	mov	r4, sl
 800edb6:	2205      	movs	r2, #5
 800edb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edbc:	484e      	ldr	r0, [pc, #312]	@ (800eef8 <_svfiprintf_r+0x1e4>)
 800edbe:	f7f1 fa17 	bl	80001f0 <memchr>
 800edc2:	9a04      	ldr	r2, [sp, #16]
 800edc4:	b9d8      	cbnz	r0, 800edfe <_svfiprintf_r+0xea>
 800edc6:	06d0      	lsls	r0, r2, #27
 800edc8:	bf44      	itt	mi
 800edca:	2320      	movmi	r3, #32
 800edcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edd0:	0711      	lsls	r1, r2, #28
 800edd2:	bf44      	itt	mi
 800edd4:	232b      	movmi	r3, #43	@ 0x2b
 800edd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edda:	f89a 3000 	ldrb.w	r3, [sl]
 800edde:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede0:	d015      	beq.n	800ee0e <_svfiprintf_r+0xfa>
 800ede2:	9a07      	ldr	r2, [sp, #28]
 800ede4:	4654      	mov	r4, sl
 800ede6:	2000      	movs	r0, #0
 800ede8:	f04f 0c0a 	mov.w	ip, #10
 800edec:	4621      	mov	r1, r4
 800edee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edf2:	3b30      	subs	r3, #48	@ 0x30
 800edf4:	2b09      	cmp	r3, #9
 800edf6:	d94b      	bls.n	800ee90 <_svfiprintf_r+0x17c>
 800edf8:	b1b0      	cbz	r0, 800ee28 <_svfiprintf_r+0x114>
 800edfa:	9207      	str	r2, [sp, #28]
 800edfc:	e014      	b.n	800ee28 <_svfiprintf_r+0x114>
 800edfe:	eba0 0308 	sub.w	r3, r0, r8
 800ee02:	fa09 f303 	lsl.w	r3, r9, r3
 800ee06:	4313      	orrs	r3, r2
 800ee08:	9304      	str	r3, [sp, #16]
 800ee0a:	46a2      	mov	sl, r4
 800ee0c:	e7d2      	b.n	800edb4 <_svfiprintf_r+0xa0>
 800ee0e:	9b03      	ldr	r3, [sp, #12]
 800ee10:	1d19      	adds	r1, r3, #4
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	9103      	str	r1, [sp, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bfbb      	ittet	lt
 800ee1a:	425b      	neglt	r3, r3
 800ee1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ee20:	9307      	strge	r3, [sp, #28]
 800ee22:	9307      	strlt	r3, [sp, #28]
 800ee24:	bfb8      	it	lt
 800ee26:	9204      	strlt	r2, [sp, #16]
 800ee28:	7823      	ldrb	r3, [r4, #0]
 800ee2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee2c:	d10a      	bne.n	800ee44 <_svfiprintf_r+0x130>
 800ee2e:	7863      	ldrb	r3, [r4, #1]
 800ee30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee32:	d132      	bne.n	800ee9a <_svfiprintf_r+0x186>
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	1d1a      	adds	r2, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	9203      	str	r2, [sp, #12]
 800ee3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee40:	3402      	adds	r4, #2
 800ee42:	9305      	str	r3, [sp, #20]
 800ee44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef08 <_svfiprintf_r+0x1f4>
 800ee48:	7821      	ldrb	r1, [r4, #0]
 800ee4a:	2203      	movs	r2, #3
 800ee4c:	4650      	mov	r0, sl
 800ee4e:	f7f1 f9cf 	bl	80001f0 <memchr>
 800ee52:	b138      	cbz	r0, 800ee64 <_svfiprintf_r+0x150>
 800ee54:	9b04      	ldr	r3, [sp, #16]
 800ee56:	eba0 000a 	sub.w	r0, r0, sl
 800ee5a:	2240      	movs	r2, #64	@ 0x40
 800ee5c:	4082      	lsls	r2, r0
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	3401      	adds	r4, #1
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee68:	4824      	ldr	r0, [pc, #144]	@ (800eefc <_svfiprintf_r+0x1e8>)
 800ee6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee6e:	2206      	movs	r2, #6
 800ee70:	f7f1 f9be 	bl	80001f0 <memchr>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d036      	beq.n	800eee6 <_svfiprintf_r+0x1d2>
 800ee78:	4b21      	ldr	r3, [pc, #132]	@ (800ef00 <_svfiprintf_r+0x1ec>)
 800ee7a:	bb1b      	cbnz	r3, 800eec4 <_svfiprintf_r+0x1b0>
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	3307      	adds	r3, #7
 800ee80:	f023 0307 	bic.w	r3, r3, #7
 800ee84:	3308      	adds	r3, #8
 800ee86:	9303      	str	r3, [sp, #12]
 800ee88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee8a:	4433      	add	r3, r6
 800ee8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee8e:	e76a      	b.n	800ed66 <_svfiprintf_r+0x52>
 800ee90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee94:	460c      	mov	r4, r1
 800ee96:	2001      	movs	r0, #1
 800ee98:	e7a8      	b.n	800edec <_svfiprintf_r+0xd8>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	3401      	adds	r4, #1
 800ee9e:	9305      	str	r3, [sp, #20]
 800eea0:	4619      	mov	r1, r3
 800eea2:	f04f 0c0a 	mov.w	ip, #10
 800eea6:	4620      	mov	r0, r4
 800eea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeac:	3a30      	subs	r2, #48	@ 0x30
 800eeae:	2a09      	cmp	r2, #9
 800eeb0:	d903      	bls.n	800eeba <_svfiprintf_r+0x1a6>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d0c6      	beq.n	800ee44 <_svfiprintf_r+0x130>
 800eeb6:	9105      	str	r1, [sp, #20]
 800eeb8:	e7c4      	b.n	800ee44 <_svfiprintf_r+0x130>
 800eeba:	fb0c 2101 	mla	r1, ip, r1, r2
 800eebe:	4604      	mov	r4, r0
 800eec0:	2301      	movs	r3, #1
 800eec2:	e7f0      	b.n	800eea6 <_svfiprintf_r+0x192>
 800eec4:	ab03      	add	r3, sp, #12
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	462a      	mov	r2, r5
 800eeca:	4b0e      	ldr	r3, [pc, #56]	@ (800ef04 <_svfiprintf_r+0x1f0>)
 800eecc:	a904      	add	r1, sp, #16
 800eece:	4638      	mov	r0, r7
 800eed0:	f7fc f962 	bl	800b198 <_printf_float>
 800eed4:	1c42      	adds	r2, r0, #1
 800eed6:	4606      	mov	r6, r0
 800eed8:	d1d6      	bne.n	800ee88 <_svfiprintf_r+0x174>
 800eeda:	89ab      	ldrh	r3, [r5, #12]
 800eedc:	065b      	lsls	r3, r3, #25
 800eede:	f53f af2d 	bmi.w	800ed3c <_svfiprintf_r+0x28>
 800eee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eee4:	e72c      	b.n	800ed40 <_svfiprintf_r+0x2c>
 800eee6:	ab03      	add	r3, sp, #12
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	462a      	mov	r2, r5
 800eeec:	4b05      	ldr	r3, [pc, #20]	@ (800ef04 <_svfiprintf_r+0x1f0>)
 800eeee:	a904      	add	r1, sp, #16
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7fc fbe9 	bl	800b6c8 <_printf_i>
 800eef6:	e7ed      	b.n	800eed4 <_svfiprintf_r+0x1c0>
 800eef8:	08012b68 	.word	0x08012b68
 800eefc:	08012b72 	.word	0x08012b72
 800ef00:	0800b199 	.word	0x0800b199
 800ef04:	0800ec5f 	.word	0x0800ec5f
 800ef08:	08012b6e 	.word	0x08012b6e

0800ef0c <_sungetc_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	1c4b      	adds	r3, r1, #1
 800ef10:	4614      	mov	r4, r2
 800ef12:	d103      	bne.n	800ef1c <_sungetc_r+0x10>
 800ef14:	f04f 35ff 	mov.w	r5, #4294967295
 800ef18:	4628      	mov	r0, r5
 800ef1a:	bd38      	pop	{r3, r4, r5, pc}
 800ef1c:	8993      	ldrh	r3, [r2, #12]
 800ef1e:	f023 0320 	bic.w	r3, r3, #32
 800ef22:	8193      	strh	r3, [r2, #12]
 800ef24:	6853      	ldr	r3, [r2, #4]
 800ef26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef28:	b2cd      	uxtb	r5, r1
 800ef2a:	b18a      	cbz	r2, 800ef50 <_sungetc_r+0x44>
 800ef2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	dd08      	ble.n	800ef44 <_sungetc_r+0x38>
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	1e5a      	subs	r2, r3, #1
 800ef36:	6022      	str	r2, [r4, #0]
 800ef38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ef3c:	6863      	ldr	r3, [r4, #4]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	6063      	str	r3, [r4, #4]
 800ef42:	e7e9      	b.n	800ef18 <_sungetc_r+0xc>
 800ef44:	4621      	mov	r1, r4
 800ef46:	f000 fbe0 	bl	800f70a <__submore>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d0f1      	beq.n	800ef32 <_sungetc_r+0x26>
 800ef4e:	e7e1      	b.n	800ef14 <_sungetc_r+0x8>
 800ef50:	6921      	ldr	r1, [r4, #16]
 800ef52:	6822      	ldr	r2, [r4, #0]
 800ef54:	b141      	cbz	r1, 800ef68 <_sungetc_r+0x5c>
 800ef56:	4291      	cmp	r1, r2
 800ef58:	d206      	bcs.n	800ef68 <_sungetc_r+0x5c>
 800ef5a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ef5e:	42a9      	cmp	r1, r5
 800ef60:	d102      	bne.n	800ef68 <_sungetc_r+0x5c>
 800ef62:	3a01      	subs	r2, #1
 800ef64:	6022      	str	r2, [r4, #0]
 800ef66:	e7ea      	b.n	800ef3e <_sungetc_r+0x32>
 800ef68:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ef6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef72:	2303      	movs	r3, #3
 800ef74:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ef76:	4623      	mov	r3, r4
 800ef78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e7de      	b.n	800ef40 <_sungetc_r+0x34>

0800ef82 <__ssrefill_r>:
 800ef82:	b510      	push	{r4, lr}
 800ef84:	460c      	mov	r4, r1
 800ef86:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ef88:	b169      	cbz	r1, 800efa6 <__ssrefill_r+0x24>
 800ef8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef8e:	4299      	cmp	r1, r3
 800ef90:	d001      	beq.n	800ef96 <__ssrefill_r+0x14>
 800ef92:	f7fe fd51 	bl	800da38 <_free_r>
 800ef96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef98:	6063      	str	r3, [r4, #4]
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	6360      	str	r0, [r4, #52]	@ 0x34
 800ef9e:	b113      	cbz	r3, 800efa6 <__ssrefill_r+0x24>
 800efa0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	bd10      	pop	{r4, pc}
 800efa6:	6923      	ldr	r3, [r4, #16]
 800efa8:	6023      	str	r3, [r4, #0]
 800efaa:	2300      	movs	r3, #0
 800efac:	6063      	str	r3, [r4, #4]
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	f043 0320 	orr.w	r3, r3, #32
 800efb4:	81a3      	strh	r3, [r4, #12]
 800efb6:	f04f 30ff 	mov.w	r0, #4294967295
 800efba:	e7f3      	b.n	800efa4 <__ssrefill_r+0x22>

0800efbc <__ssvfiscanf_r>:
 800efbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc0:	460c      	mov	r4, r1
 800efc2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800efc6:	2100      	movs	r1, #0
 800efc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800efcc:	49a5      	ldr	r1, [pc, #660]	@ (800f264 <__ssvfiscanf_r+0x2a8>)
 800efce:	91a0      	str	r1, [sp, #640]	@ 0x280
 800efd0:	f10d 0804 	add.w	r8, sp, #4
 800efd4:	49a4      	ldr	r1, [pc, #656]	@ (800f268 <__ssvfiscanf_r+0x2ac>)
 800efd6:	4fa5      	ldr	r7, [pc, #660]	@ (800f26c <__ssvfiscanf_r+0x2b0>)
 800efd8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800efdc:	4606      	mov	r6, r0
 800efde:	91a1      	str	r1, [sp, #644]	@ 0x284
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	7813      	ldrb	r3, [r2, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 8158 	beq.w	800f29a <__ssvfiscanf_r+0x2de>
 800efea:	5cf9      	ldrb	r1, [r7, r3]
 800efec:	f011 0108 	ands.w	r1, r1, #8
 800eff0:	f102 0501 	add.w	r5, r2, #1
 800eff4:	d019      	beq.n	800f02a <__ssvfiscanf_r+0x6e>
 800eff6:	6863      	ldr	r3, [r4, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dd0f      	ble.n	800f01c <__ssvfiscanf_r+0x60>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	781a      	ldrb	r2, [r3, #0]
 800f000:	5cba      	ldrb	r2, [r7, r2]
 800f002:	0712      	lsls	r2, r2, #28
 800f004:	d401      	bmi.n	800f00a <__ssvfiscanf_r+0x4e>
 800f006:	462a      	mov	r2, r5
 800f008:	e7eb      	b.n	800efe2 <__ssvfiscanf_r+0x26>
 800f00a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f00c:	3201      	adds	r2, #1
 800f00e:	9245      	str	r2, [sp, #276]	@ 0x114
 800f010:	6862      	ldr	r2, [r4, #4]
 800f012:	3301      	adds	r3, #1
 800f014:	3a01      	subs	r2, #1
 800f016:	6062      	str	r2, [r4, #4]
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	e7ec      	b.n	800eff6 <__ssvfiscanf_r+0x3a>
 800f01c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f01e:	4621      	mov	r1, r4
 800f020:	4630      	mov	r0, r6
 800f022:	4798      	blx	r3
 800f024:	2800      	cmp	r0, #0
 800f026:	d0e9      	beq.n	800effc <__ssvfiscanf_r+0x40>
 800f028:	e7ed      	b.n	800f006 <__ssvfiscanf_r+0x4a>
 800f02a:	2b25      	cmp	r3, #37	@ 0x25
 800f02c:	d012      	beq.n	800f054 <__ssvfiscanf_r+0x98>
 800f02e:	4699      	mov	r9, r3
 800f030:	6863      	ldr	r3, [r4, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	f340 8093 	ble.w	800f15e <__ssvfiscanf_r+0x1a2>
 800f038:	6822      	ldr	r2, [r4, #0]
 800f03a:	7813      	ldrb	r3, [r2, #0]
 800f03c:	454b      	cmp	r3, r9
 800f03e:	f040 812c 	bne.w	800f29a <__ssvfiscanf_r+0x2de>
 800f042:	6863      	ldr	r3, [r4, #4]
 800f044:	3b01      	subs	r3, #1
 800f046:	6063      	str	r3, [r4, #4]
 800f048:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f04a:	3201      	adds	r2, #1
 800f04c:	3301      	adds	r3, #1
 800f04e:	6022      	str	r2, [r4, #0]
 800f050:	9345      	str	r3, [sp, #276]	@ 0x114
 800f052:	e7d8      	b.n	800f006 <__ssvfiscanf_r+0x4a>
 800f054:	9141      	str	r1, [sp, #260]	@ 0x104
 800f056:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f058:	7853      	ldrb	r3, [r2, #1]
 800f05a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f05c:	bf02      	ittt	eq
 800f05e:	2310      	moveq	r3, #16
 800f060:	1c95      	addeq	r5, r2, #2
 800f062:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f064:	220a      	movs	r2, #10
 800f066:	46a9      	mov	r9, r5
 800f068:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f06c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f070:	2b09      	cmp	r3, #9
 800f072:	d91e      	bls.n	800f0b2 <__ssvfiscanf_r+0xf6>
 800f074:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f270 <__ssvfiscanf_r+0x2b4>
 800f078:	2203      	movs	r2, #3
 800f07a:	4650      	mov	r0, sl
 800f07c:	f7f1 f8b8 	bl	80001f0 <memchr>
 800f080:	b138      	cbz	r0, 800f092 <__ssvfiscanf_r+0xd6>
 800f082:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f084:	eba0 000a 	sub.w	r0, r0, sl
 800f088:	2301      	movs	r3, #1
 800f08a:	4083      	lsls	r3, r0
 800f08c:	4313      	orrs	r3, r2
 800f08e:	9341      	str	r3, [sp, #260]	@ 0x104
 800f090:	464d      	mov	r5, r9
 800f092:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f096:	2b78      	cmp	r3, #120	@ 0x78
 800f098:	d806      	bhi.n	800f0a8 <__ssvfiscanf_r+0xec>
 800f09a:	2b57      	cmp	r3, #87	@ 0x57
 800f09c:	d810      	bhi.n	800f0c0 <__ssvfiscanf_r+0x104>
 800f09e:	2b25      	cmp	r3, #37	@ 0x25
 800f0a0:	d0c5      	beq.n	800f02e <__ssvfiscanf_r+0x72>
 800f0a2:	d857      	bhi.n	800f154 <__ssvfiscanf_r+0x198>
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d065      	beq.n	800f174 <__ssvfiscanf_r+0x1b8>
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f0ac:	230a      	movs	r3, #10
 800f0ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0b0:	e078      	b.n	800f1a4 <__ssvfiscanf_r+0x1e8>
 800f0b2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f0b4:	fb02 1103 	mla	r1, r2, r3, r1
 800f0b8:	3930      	subs	r1, #48	@ 0x30
 800f0ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f0bc:	464d      	mov	r5, r9
 800f0be:	e7d2      	b.n	800f066 <__ssvfiscanf_r+0xaa>
 800f0c0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f0c4:	2a20      	cmp	r2, #32
 800f0c6:	d8ef      	bhi.n	800f0a8 <__ssvfiscanf_r+0xec>
 800f0c8:	a101      	add	r1, pc, #4	@ (adr r1, 800f0d0 <__ssvfiscanf_r+0x114>)
 800f0ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f0ce:	bf00      	nop
 800f0d0:	0800f183 	.word	0x0800f183
 800f0d4:	0800f0a9 	.word	0x0800f0a9
 800f0d8:	0800f0a9 	.word	0x0800f0a9
 800f0dc:	0800f1dd 	.word	0x0800f1dd
 800f0e0:	0800f0a9 	.word	0x0800f0a9
 800f0e4:	0800f0a9 	.word	0x0800f0a9
 800f0e8:	0800f0a9 	.word	0x0800f0a9
 800f0ec:	0800f0a9 	.word	0x0800f0a9
 800f0f0:	0800f0a9 	.word	0x0800f0a9
 800f0f4:	0800f0a9 	.word	0x0800f0a9
 800f0f8:	0800f0a9 	.word	0x0800f0a9
 800f0fc:	0800f1f3 	.word	0x0800f1f3
 800f100:	0800f1d9 	.word	0x0800f1d9
 800f104:	0800f15b 	.word	0x0800f15b
 800f108:	0800f15b 	.word	0x0800f15b
 800f10c:	0800f15b 	.word	0x0800f15b
 800f110:	0800f0a9 	.word	0x0800f0a9
 800f114:	0800f195 	.word	0x0800f195
 800f118:	0800f0a9 	.word	0x0800f0a9
 800f11c:	0800f0a9 	.word	0x0800f0a9
 800f120:	0800f0a9 	.word	0x0800f0a9
 800f124:	0800f0a9 	.word	0x0800f0a9
 800f128:	0800f203 	.word	0x0800f203
 800f12c:	0800f19d 	.word	0x0800f19d
 800f130:	0800f17b 	.word	0x0800f17b
 800f134:	0800f0a9 	.word	0x0800f0a9
 800f138:	0800f0a9 	.word	0x0800f0a9
 800f13c:	0800f1ff 	.word	0x0800f1ff
 800f140:	0800f0a9 	.word	0x0800f0a9
 800f144:	0800f1d9 	.word	0x0800f1d9
 800f148:	0800f0a9 	.word	0x0800f0a9
 800f14c:	0800f0a9 	.word	0x0800f0a9
 800f150:	0800f183 	.word	0x0800f183
 800f154:	3b45      	subs	r3, #69	@ 0x45
 800f156:	2b02      	cmp	r3, #2
 800f158:	d8a6      	bhi.n	800f0a8 <__ssvfiscanf_r+0xec>
 800f15a:	2305      	movs	r3, #5
 800f15c:	e021      	b.n	800f1a2 <__ssvfiscanf_r+0x1e6>
 800f15e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f160:	4621      	mov	r1, r4
 800f162:	4630      	mov	r0, r6
 800f164:	4798      	blx	r3
 800f166:	2800      	cmp	r0, #0
 800f168:	f43f af66 	beq.w	800f038 <__ssvfiscanf_r+0x7c>
 800f16c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f16e:	2800      	cmp	r0, #0
 800f170:	f040 808b 	bne.w	800f28a <__ssvfiscanf_r+0x2ce>
 800f174:	f04f 30ff 	mov.w	r0, #4294967295
 800f178:	e08b      	b.n	800f292 <__ssvfiscanf_r+0x2d6>
 800f17a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f17c:	f042 0220 	orr.w	r2, r2, #32
 800f180:	9241      	str	r2, [sp, #260]	@ 0x104
 800f182:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f188:	9241      	str	r2, [sp, #260]	@ 0x104
 800f18a:	2210      	movs	r2, #16
 800f18c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f18e:	9242      	str	r2, [sp, #264]	@ 0x108
 800f190:	d902      	bls.n	800f198 <__ssvfiscanf_r+0x1dc>
 800f192:	e005      	b.n	800f1a0 <__ssvfiscanf_r+0x1e4>
 800f194:	2300      	movs	r3, #0
 800f196:	9342      	str	r3, [sp, #264]	@ 0x108
 800f198:	2303      	movs	r3, #3
 800f19a:	e002      	b.n	800f1a2 <__ssvfiscanf_r+0x1e6>
 800f19c:	2308      	movs	r3, #8
 800f19e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f1a0:	2304      	movs	r3, #4
 800f1a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f1a4:	6863      	ldr	r3, [r4, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	dd39      	ble.n	800f21e <__ssvfiscanf_r+0x262>
 800f1aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1ac:	0659      	lsls	r1, r3, #25
 800f1ae:	d404      	bmi.n	800f1ba <__ssvfiscanf_r+0x1fe>
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	781a      	ldrb	r2, [r3, #0]
 800f1b4:	5cba      	ldrb	r2, [r7, r2]
 800f1b6:	0712      	lsls	r2, r2, #28
 800f1b8:	d438      	bmi.n	800f22c <__ssvfiscanf_r+0x270>
 800f1ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	dc47      	bgt.n	800f250 <__ssvfiscanf_r+0x294>
 800f1c0:	466b      	mov	r3, sp
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	a941      	add	r1, sp, #260	@ 0x104
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f000 f86c 	bl	800f2a4 <_scanf_chars>
 800f1cc:	2801      	cmp	r0, #1
 800f1ce:	d064      	beq.n	800f29a <__ssvfiscanf_r+0x2de>
 800f1d0:	2802      	cmp	r0, #2
 800f1d2:	f47f af18 	bne.w	800f006 <__ssvfiscanf_r+0x4a>
 800f1d6:	e7c9      	b.n	800f16c <__ssvfiscanf_r+0x1b0>
 800f1d8:	220a      	movs	r2, #10
 800f1da:	e7d7      	b.n	800f18c <__ssvfiscanf_r+0x1d0>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	4640      	mov	r0, r8
 800f1e0:	f000 fa5a 	bl	800f698 <__sccl>
 800f1e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1ea:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e7d7      	b.n	800f1a2 <__ssvfiscanf_r+0x1e6>
 800f1f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f1f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1f8:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e7d1      	b.n	800f1a2 <__ssvfiscanf_r+0x1e6>
 800f1fe:	2302      	movs	r3, #2
 800f200:	e7cf      	b.n	800f1a2 <__ssvfiscanf_r+0x1e6>
 800f202:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f204:	06c3      	lsls	r3, r0, #27
 800f206:	f53f aefe 	bmi.w	800f006 <__ssvfiscanf_r+0x4a>
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f20e:	1d19      	adds	r1, r3, #4
 800f210:	9100      	str	r1, [sp, #0]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	07c0      	lsls	r0, r0, #31
 800f216:	bf4c      	ite	mi
 800f218:	801a      	strhmi	r2, [r3, #0]
 800f21a:	601a      	strpl	r2, [r3, #0]
 800f21c:	e6f3      	b.n	800f006 <__ssvfiscanf_r+0x4a>
 800f21e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f220:	4621      	mov	r1, r4
 800f222:	4630      	mov	r0, r6
 800f224:	4798      	blx	r3
 800f226:	2800      	cmp	r0, #0
 800f228:	d0bf      	beq.n	800f1aa <__ssvfiscanf_r+0x1ee>
 800f22a:	e79f      	b.n	800f16c <__ssvfiscanf_r+0x1b0>
 800f22c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f22e:	3201      	adds	r2, #1
 800f230:	9245      	str	r2, [sp, #276]	@ 0x114
 800f232:	6862      	ldr	r2, [r4, #4]
 800f234:	3a01      	subs	r2, #1
 800f236:	2a00      	cmp	r2, #0
 800f238:	6062      	str	r2, [r4, #4]
 800f23a:	dd02      	ble.n	800f242 <__ssvfiscanf_r+0x286>
 800f23c:	3301      	adds	r3, #1
 800f23e:	6023      	str	r3, [r4, #0]
 800f240:	e7b6      	b.n	800f1b0 <__ssvfiscanf_r+0x1f4>
 800f242:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f244:	4621      	mov	r1, r4
 800f246:	4630      	mov	r0, r6
 800f248:	4798      	blx	r3
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d0b0      	beq.n	800f1b0 <__ssvfiscanf_r+0x1f4>
 800f24e:	e78d      	b.n	800f16c <__ssvfiscanf_r+0x1b0>
 800f250:	2b04      	cmp	r3, #4
 800f252:	dc0f      	bgt.n	800f274 <__ssvfiscanf_r+0x2b8>
 800f254:	466b      	mov	r3, sp
 800f256:	4622      	mov	r2, r4
 800f258:	a941      	add	r1, sp, #260	@ 0x104
 800f25a:	4630      	mov	r0, r6
 800f25c:	f000 f87c 	bl	800f358 <_scanf_i>
 800f260:	e7b4      	b.n	800f1cc <__ssvfiscanf_r+0x210>
 800f262:	bf00      	nop
 800f264:	0800ef0d 	.word	0x0800ef0d
 800f268:	0800ef83 	.word	0x0800ef83
 800f26c:	08012739 	.word	0x08012739
 800f270:	08012b6e 	.word	0x08012b6e
 800f274:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a0 <__ssvfiscanf_r+0x2e4>)
 800f276:	2b00      	cmp	r3, #0
 800f278:	f43f aec5 	beq.w	800f006 <__ssvfiscanf_r+0x4a>
 800f27c:	466b      	mov	r3, sp
 800f27e:	4622      	mov	r2, r4
 800f280:	a941      	add	r1, sp, #260	@ 0x104
 800f282:	4630      	mov	r0, r6
 800f284:	f7fc fb40 	bl	800b908 <_scanf_float>
 800f288:	e7a0      	b.n	800f1cc <__ssvfiscanf_r+0x210>
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	065b      	lsls	r3, r3, #25
 800f28e:	f53f af71 	bmi.w	800f174 <__ssvfiscanf_r+0x1b8>
 800f292:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f29a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f29c:	e7f9      	b.n	800f292 <__ssvfiscanf_r+0x2d6>
 800f29e:	bf00      	nop
 800f2a0:	0800b909 	.word	0x0800b909

0800f2a4 <_scanf_chars>:
 800f2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a8:	4615      	mov	r5, r2
 800f2aa:	688a      	ldr	r2, [r1, #8]
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	460c      	mov	r4, r1
 800f2b0:	b932      	cbnz	r2, 800f2c0 <_scanf_chars+0x1c>
 800f2b2:	698a      	ldr	r2, [r1, #24]
 800f2b4:	2a00      	cmp	r2, #0
 800f2b6:	bf14      	ite	ne
 800f2b8:	f04f 32ff 	movne.w	r2, #4294967295
 800f2bc:	2201      	moveq	r2, #1
 800f2be:	608a      	str	r2, [r1, #8]
 800f2c0:	6822      	ldr	r2, [r4, #0]
 800f2c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f354 <_scanf_chars+0xb0>
 800f2c6:	06d1      	lsls	r1, r2, #27
 800f2c8:	bf5f      	itttt	pl
 800f2ca:	681a      	ldrpl	r2, [r3, #0]
 800f2cc:	1d11      	addpl	r1, r2, #4
 800f2ce:	6019      	strpl	r1, [r3, #0]
 800f2d0:	6816      	ldrpl	r6, [r2, #0]
 800f2d2:	2700      	movs	r7, #0
 800f2d4:	69a0      	ldr	r0, [r4, #24]
 800f2d6:	b188      	cbz	r0, 800f2fc <_scanf_chars+0x58>
 800f2d8:	2801      	cmp	r0, #1
 800f2da:	d107      	bne.n	800f2ec <_scanf_chars+0x48>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	781a      	ldrb	r2, [r3, #0]
 800f2e0:	6963      	ldr	r3, [r4, #20]
 800f2e2:	5c9b      	ldrb	r3, [r3, r2]
 800f2e4:	b953      	cbnz	r3, 800f2fc <_scanf_chars+0x58>
 800f2e6:	2f00      	cmp	r7, #0
 800f2e8:	d031      	beq.n	800f34e <_scanf_chars+0xaa>
 800f2ea:	e022      	b.n	800f332 <_scanf_chars+0x8e>
 800f2ec:	2802      	cmp	r0, #2
 800f2ee:	d120      	bne.n	800f332 <_scanf_chars+0x8e>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f2f8:	071b      	lsls	r3, r3, #28
 800f2fa:	d41a      	bmi.n	800f332 <_scanf_chars+0x8e>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	06da      	lsls	r2, r3, #27
 800f300:	bf5e      	ittt	pl
 800f302:	682b      	ldrpl	r3, [r5, #0]
 800f304:	781b      	ldrbpl	r3, [r3, #0]
 800f306:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f30a:	682a      	ldr	r2, [r5, #0]
 800f30c:	686b      	ldr	r3, [r5, #4]
 800f30e:	3201      	adds	r2, #1
 800f310:	602a      	str	r2, [r5, #0]
 800f312:	68a2      	ldr	r2, [r4, #8]
 800f314:	3b01      	subs	r3, #1
 800f316:	3a01      	subs	r2, #1
 800f318:	606b      	str	r3, [r5, #4]
 800f31a:	3701      	adds	r7, #1
 800f31c:	60a2      	str	r2, [r4, #8]
 800f31e:	b142      	cbz	r2, 800f332 <_scanf_chars+0x8e>
 800f320:	2b00      	cmp	r3, #0
 800f322:	dcd7      	bgt.n	800f2d4 <_scanf_chars+0x30>
 800f324:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f328:	4629      	mov	r1, r5
 800f32a:	4640      	mov	r0, r8
 800f32c:	4798      	blx	r3
 800f32e:	2800      	cmp	r0, #0
 800f330:	d0d0      	beq.n	800f2d4 <_scanf_chars+0x30>
 800f332:	6823      	ldr	r3, [r4, #0]
 800f334:	f013 0310 	ands.w	r3, r3, #16
 800f338:	d105      	bne.n	800f346 <_scanf_chars+0xa2>
 800f33a:	68e2      	ldr	r2, [r4, #12]
 800f33c:	3201      	adds	r2, #1
 800f33e:	60e2      	str	r2, [r4, #12]
 800f340:	69a2      	ldr	r2, [r4, #24]
 800f342:	b102      	cbz	r2, 800f346 <_scanf_chars+0xa2>
 800f344:	7033      	strb	r3, [r6, #0]
 800f346:	6923      	ldr	r3, [r4, #16]
 800f348:	443b      	add	r3, r7
 800f34a:	6123      	str	r3, [r4, #16]
 800f34c:	2000      	movs	r0, #0
 800f34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f352:	bf00      	nop
 800f354:	08012739 	.word	0x08012739

0800f358 <_scanf_i>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	4698      	mov	r8, r3
 800f35e:	4b74      	ldr	r3, [pc, #464]	@ (800f530 <_scanf_i+0x1d8>)
 800f360:	460c      	mov	r4, r1
 800f362:	4682      	mov	sl, r0
 800f364:	4616      	mov	r6, r2
 800f366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f36a:	b087      	sub	sp, #28
 800f36c:	ab03      	add	r3, sp, #12
 800f36e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f372:	4b70      	ldr	r3, [pc, #448]	@ (800f534 <_scanf_i+0x1dc>)
 800f374:	69a1      	ldr	r1, [r4, #24]
 800f376:	4a70      	ldr	r2, [pc, #448]	@ (800f538 <_scanf_i+0x1e0>)
 800f378:	2903      	cmp	r1, #3
 800f37a:	bf08      	it	eq
 800f37c:	461a      	moveq	r2, r3
 800f37e:	68a3      	ldr	r3, [r4, #8]
 800f380:	9201      	str	r2, [sp, #4]
 800f382:	1e5a      	subs	r2, r3, #1
 800f384:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f388:	bf88      	it	hi
 800f38a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f38e:	4627      	mov	r7, r4
 800f390:	bf82      	ittt	hi
 800f392:	eb03 0905 	addhi.w	r9, r3, r5
 800f396:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f39a:	60a3      	strhi	r3, [r4, #8]
 800f39c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f3a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f3a4:	bf98      	it	ls
 800f3a6:	f04f 0900 	movls.w	r9, #0
 800f3aa:	6023      	str	r3, [r4, #0]
 800f3ac:	463d      	mov	r5, r7
 800f3ae:	f04f 0b00 	mov.w	fp, #0
 800f3b2:	6831      	ldr	r1, [r6, #0]
 800f3b4:	ab03      	add	r3, sp, #12
 800f3b6:	7809      	ldrb	r1, [r1, #0]
 800f3b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	f7f0 ff17 	bl	80001f0 <memchr>
 800f3c2:	b328      	cbz	r0, 800f410 <_scanf_i+0xb8>
 800f3c4:	f1bb 0f01 	cmp.w	fp, #1
 800f3c8:	d159      	bne.n	800f47e <_scanf_i+0x126>
 800f3ca:	6862      	ldr	r2, [r4, #4]
 800f3cc:	b92a      	cbnz	r2, 800f3da <_scanf_i+0x82>
 800f3ce:	6822      	ldr	r2, [r4, #0]
 800f3d0:	2108      	movs	r1, #8
 800f3d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f3d6:	6061      	str	r1, [r4, #4]
 800f3d8:	6022      	str	r2, [r4, #0]
 800f3da:	6822      	ldr	r2, [r4, #0]
 800f3dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f3e0:	6022      	str	r2, [r4, #0]
 800f3e2:	68a2      	ldr	r2, [r4, #8]
 800f3e4:	1e51      	subs	r1, r2, #1
 800f3e6:	60a1      	str	r1, [r4, #8]
 800f3e8:	b192      	cbz	r2, 800f410 <_scanf_i+0xb8>
 800f3ea:	6832      	ldr	r2, [r6, #0]
 800f3ec:	1c51      	adds	r1, r2, #1
 800f3ee:	6031      	str	r1, [r6, #0]
 800f3f0:	7812      	ldrb	r2, [r2, #0]
 800f3f2:	f805 2b01 	strb.w	r2, [r5], #1
 800f3f6:	6872      	ldr	r2, [r6, #4]
 800f3f8:	3a01      	subs	r2, #1
 800f3fa:	2a00      	cmp	r2, #0
 800f3fc:	6072      	str	r2, [r6, #4]
 800f3fe:	dc07      	bgt.n	800f410 <_scanf_i+0xb8>
 800f400:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f404:	4631      	mov	r1, r6
 800f406:	4650      	mov	r0, sl
 800f408:	4790      	blx	r2
 800f40a:	2800      	cmp	r0, #0
 800f40c:	f040 8085 	bne.w	800f51a <_scanf_i+0x1c2>
 800f410:	f10b 0b01 	add.w	fp, fp, #1
 800f414:	f1bb 0f03 	cmp.w	fp, #3
 800f418:	d1cb      	bne.n	800f3b2 <_scanf_i+0x5a>
 800f41a:	6863      	ldr	r3, [r4, #4]
 800f41c:	b90b      	cbnz	r3, 800f422 <_scanf_i+0xca>
 800f41e:	230a      	movs	r3, #10
 800f420:	6063      	str	r3, [r4, #4]
 800f422:	6863      	ldr	r3, [r4, #4]
 800f424:	4945      	ldr	r1, [pc, #276]	@ (800f53c <_scanf_i+0x1e4>)
 800f426:	6960      	ldr	r0, [r4, #20]
 800f428:	1ac9      	subs	r1, r1, r3
 800f42a:	f000 f935 	bl	800f698 <__sccl>
 800f42e:	f04f 0b00 	mov.w	fp, #0
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	6822      	ldr	r2, [r4, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d03d      	beq.n	800f4b6 <_scanf_i+0x15e>
 800f43a:	6831      	ldr	r1, [r6, #0]
 800f43c:	6960      	ldr	r0, [r4, #20]
 800f43e:	f891 c000 	ldrb.w	ip, [r1]
 800f442:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f446:	2800      	cmp	r0, #0
 800f448:	d035      	beq.n	800f4b6 <_scanf_i+0x15e>
 800f44a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f44e:	d124      	bne.n	800f49a <_scanf_i+0x142>
 800f450:	0510      	lsls	r0, r2, #20
 800f452:	d522      	bpl.n	800f49a <_scanf_i+0x142>
 800f454:	f10b 0b01 	add.w	fp, fp, #1
 800f458:	f1b9 0f00 	cmp.w	r9, #0
 800f45c:	d003      	beq.n	800f466 <_scanf_i+0x10e>
 800f45e:	3301      	adds	r3, #1
 800f460:	f109 39ff 	add.w	r9, r9, #4294967295
 800f464:	60a3      	str	r3, [r4, #8]
 800f466:	6873      	ldr	r3, [r6, #4]
 800f468:	3b01      	subs	r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	6073      	str	r3, [r6, #4]
 800f46e:	dd1b      	ble.n	800f4a8 <_scanf_i+0x150>
 800f470:	6833      	ldr	r3, [r6, #0]
 800f472:	3301      	adds	r3, #1
 800f474:	6033      	str	r3, [r6, #0]
 800f476:	68a3      	ldr	r3, [r4, #8]
 800f478:	3b01      	subs	r3, #1
 800f47a:	60a3      	str	r3, [r4, #8]
 800f47c:	e7d9      	b.n	800f432 <_scanf_i+0xda>
 800f47e:	f1bb 0f02 	cmp.w	fp, #2
 800f482:	d1ae      	bne.n	800f3e2 <_scanf_i+0x8a>
 800f484:	6822      	ldr	r2, [r4, #0]
 800f486:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f48a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f48e:	d1bf      	bne.n	800f410 <_scanf_i+0xb8>
 800f490:	2110      	movs	r1, #16
 800f492:	6061      	str	r1, [r4, #4]
 800f494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f498:	e7a2      	b.n	800f3e0 <_scanf_i+0x88>
 800f49a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f49e:	6022      	str	r2, [r4, #0]
 800f4a0:	780b      	ldrb	r3, [r1, #0]
 800f4a2:	f805 3b01 	strb.w	r3, [r5], #1
 800f4a6:	e7de      	b.n	800f466 <_scanf_i+0x10e>
 800f4a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4650      	mov	r0, sl
 800f4b0:	4798      	blx	r3
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d0df      	beq.n	800f476 <_scanf_i+0x11e>
 800f4b6:	6823      	ldr	r3, [r4, #0]
 800f4b8:	05d9      	lsls	r1, r3, #23
 800f4ba:	d50d      	bpl.n	800f4d8 <_scanf_i+0x180>
 800f4bc:	42bd      	cmp	r5, r7
 800f4be:	d909      	bls.n	800f4d4 <_scanf_i+0x17c>
 800f4c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f4c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4c8:	4632      	mov	r2, r6
 800f4ca:	4650      	mov	r0, sl
 800f4cc:	4798      	blx	r3
 800f4ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800f4d2:	464d      	mov	r5, r9
 800f4d4:	42bd      	cmp	r5, r7
 800f4d6:	d028      	beq.n	800f52a <_scanf_i+0x1d2>
 800f4d8:	6822      	ldr	r2, [r4, #0]
 800f4da:	f012 0210 	ands.w	r2, r2, #16
 800f4de:	d113      	bne.n	800f508 <_scanf_i+0x1b0>
 800f4e0:	702a      	strb	r2, [r5, #0]
 800f4e2:	6863      	ldr	r3, [r4, #4]
 800f4e4:	9e01      	ldr	r6, [sp, #4]
 800f4e6:	4639      	mov	r1, r7
 800f4e8:	4650      	mov	r0, sl
 800f4ea:	47b0      	blx	r6
 800f4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f0:	6821      	ldr	r1, [r4, #0]
 800f4f2:	1d1a      	adds	r2, r3, #4
 800f4f4:	f8c8 2000 	str.w	r2, [r8]
 800f4f8:	f011 0f20 	tst.w	r1, #32
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	d00f      	beq.n	800f520 <_scanf_i+0x1c8>
 800f500:	6018      	str	r0, [r3, #0]
 800f502:	68e3      	ldr	r3, [r4, #12]
 800f504:	3301      	adds	r3, #1
 800f506:	60e3      	str	r3, [r4, #12]
 800f508:	6923      	ldr	r3, [r4, #16]
 800f50a:	1bed      	subs	r5, r5, r7
 800f50c:	445d      	add	r5, fp
 800f50e:	442b      	add	r3, r5
 800f510:	6123      	str	r3, [r4, #16]
 800f512:	2000      	movs	r0, #0
 800f514:	b007      	add	sp, #28
 800f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51a:	f04f 0b00 	mov.w	fp, #0
 800f51e:	e7ca      	b.n	800f4b6 <_scanf_i+0x15e>
 800f520:	07ca      	lsls	r2, r1, #31
 800f522:	bf4c      	ite	mi
 800f524:	8018      	strhmi	r0, [r3, #0]
 800f526:	6018      	strpl	r0, [r3, #0]
 800f528:	e7eb      	b.n	800f502 <_scanf_i+0x1aa>
 800f52a:	2001      	movs	r0, #1
 800f52c:	e7f2      	b.n	800f514 <_scanf_i+0x1bc>
 800f52e:	bf00      	nop
 800f530:	08010080 	.word	0x08010080
 800f534:	0800b041 	.word	0x0800b041
 800f538:	0800ec2d 	.word	0x0800ec2d
 800f53c:	08012b89 	.word	0x08012b89

0800f540 <__sflush_r>:
 800f540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	0716      	lsls	r6, r2, #28
 800f54a:	4605      	mov	r5, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	d454      	bmi.n	800f5fa <__sflush_r+0xba>
 800f550:	684b      	ldr	r3, [r1, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	dc02      	bgt.n	800f55c <__sflush_r+0x1c>
 800f556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dd48      	ble.n	800f5ee <__sflush_r+0xae>
 800f55c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f55e:	2e00      	cmp	r6, #0
 800f560:	d045      	beq.n	800f5ee <__sflush_r+0xae>
 800f562:	2300      	movs	r3, #0
 800f564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f568:	682f      	ldr	r7, [r5, #0]
 800f56a:	6a21      	ldr	r1, [r4, #32]
 800f56c:	602b      	str	r3, [r5, #0]
 800f56e:	d030      	beq.n	800f5d2 <__sflush_r+0x92>
 800f570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	0759      	lsls	r1, r3, #29
 800f576:	d505      	bpl.n	800f584 <__sflush_r+0x44>
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	1ad2      	subs	r2, r2, r3
 800f57c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f57e:	b10b      	cbz	r3, 800f584 <__sflush_r+0x44>
 800f580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f582:	1ad2      	subs	r2, r2, r3
 800f584:	2300      	movs	r3, #0
 800f586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f588:	6a21      	ldr	r1, [r4, #32]
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b0      	blx	r6
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	89a3      	ldrh	r3, [r4, #12]
 800f592:	d106      	bne.n	800f5a2 <__sflush_r+0x62>
 800f594:	6829      	ldr	r1, [r5, #0]
 800f596:	291d      	cmp	r1, #29
 800f598:	d82b      	bhi.n	800f5f2 <__sflush_r+0xb2>
 800f59a:	4a2a      	ldr	r2, [pc, #168]	@ (800f644 <__sflush_r+0x104>)
 800f59c:	410a      	asrs	r2, r1
 800f59e:	07d6      	lsls	r6, r2, #31
 800f5a0:	d427      	bmi.n	800f5f2 <__sflush_r+0xb2>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	6062      	str	r2, [r4, #4]
 800f5a6:	04d9      	lsls	r1, r3, #19
 800f5a8:	6922      	ldr	r2, [r4, #16]
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	d504      	bpl.n	800f5b8 <__sflush_r+0x78>
 800f5ae:	1c42      	adds	r2, r0, #1
 800f5b0:	d101      	bne.n	800f5b6 <__sflush_r+0x76>
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	b903      	cbnz	r3, 800f5b8 <__sflush_r+0x78>
 800f5b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ba:	602f      	str	r7, [r5, #0]
 800f5bc:	b1b9      	cbz	r1, 800f5ee <__sflush_r+0xae>
 800f5be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5c2:	4299      	cmp	r1, r3
 800f5c4:	d002      	beq.n	800f5cc <__sflush_r+0x8c>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7fe fa36 	bl	800da38 <_free_r>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5d0:	e00d      	b.n	800f5ee <__sflush_r+0xae>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b0      	blx	r6
 800f5d8:	4602      	mov	r2, r0
 800f5da:	1c50      	adds	r0, r2, #1
 800f5dc:	d1c9      	bne.n	800f572 <__sflush_r+0x32>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d0c6      	beq.n	800f572 <__sflush_r+0x32>
 800f5e4:	2b1d      	cmp	r3, #29
 800f5e6:	d001      	beq.n	800f5ec <__sflush_r+0xac>
 800f5e8:	2b16      	cmp	r3, #22
 800f5ea:	d11e      	bne.n	800f62a <__sflush_r+0xea>
 800f5ec:	602f      	str	r7, [r5, #0]
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	e022      	b.n	800f638 <__sflush_r+0xf8>
 800f5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5f6:	b21b      	sxth	r3, r3
 800f5f8:	e01b      	b.n	800f632 <__sflush_r+0xf2>
 800f5fa:	690f      	ldr	r7, [r1, #16]
 800f5fc:	2f00      	cmp	r7, #0
 800f5fe:	d0f6      	beq.n	800f5ee <__sflush_r+0xae>
 800f600:	0793      	lsls	r3, r2, #30
 800f602:	680e      	ldr	r6, [r1, #0]
 800f604:	bf08      	it	eq
 800f606:	694b      	ldreq	r3, [r1, #20]
 800f608:	600f      	str	r7, [r1, #0]
 800f60a:	bf18      	it	ne
 800f60c:	2300      	movne	r3, #0
 800f60e:	eba6 0807 	sub.w	r8, r6, r7
 800f612:	608b      	str	r3, [r1, #8]
 800f614:	f1b8 0f00 	cmp.w	r8, #0
 800f618:	dde9      	ble.n	800f5ee <__sflush_r+0xae>
 800f61a:	6a21      	ldr	r1, [r4, #32]
 800f61c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f61e:	4643      	mov	r3, r8
 800f620:	463a      	mov	r2, r7
 800f622:	4628      	mov	r0, r5
 800f624:	47b0      	blx	r6
 800f626:	2800      	cmp	r0, #0
 800f628:	dc08      	bgt.n	800f63c <__sflush_r+0xfc>
 800f62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f632:	81a3      	strh	r3, [r4, #12]
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	4407      	add	r7, r0
 800f63e:	eba8 0800 	sub.w	r8, r8, r0
 800f642:	e7e7      	b.n	800f614 <__sflush_r+0xd4>
 800f644:	dfbffffe 	.word	0xdfbffffe

0800f648 <_fflush_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	690b      	ldr	r3, [r1, #16]
 800f64c:	4605      	mov	r5, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	b913      	cbnz	r3, 800f658 <_fflush_r+0x10>
 800f652:	2500      	movs	r5, #0
 800f654:	4628      	mov	r0, r5
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	b118      	cbz	r0, 800f662 <_fflush_r+0x1a>
 800f65a:	6a03      	ldr	r3, [r0, #32]
 800f65c:	b90b      	cbnz	r3, 800f662 <_fflush_r+0x1a>
 800f65e:	f7fc fbf3 	bl	800be48 <__sinit>
 800f662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d0f3      	beq.n	800f652 <_fflush_r+0xa>
 800f66a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f66c:	07d0      	lsls	r0, r2, #31
 800f66e:	d404      	bmi.n	800f67a <_fflush_r+0x32>
 800f670:	0599      	lsls	r1, r3, #22
 800f672:	d402      	bmi.n	800f67a <_fflush_r+0x32>
 800f674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f676:	f7f5 ff0a 	bl	800548e <__retarget_lock_acquire_recursive>
 800f67a:	4628      	mov	r0, r5
 800f67c:	4621      	mov	r1, r4
 800f67e:	f7ff ff5f 	bl	800f540 <__sflush_r>
 800f682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f684:	07da      	lsls	r2, r3, #31
 800f686:	4605      	mov	r5, r0
 800f688:	d4e4      	bmi.n	800f654 <_fflush_r+0xc>
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	059b      	lsls	r3, r3, #22
 800f68e:	d4e1      	bmi.n	800f654 <_fflush_r+0xc>
 800f690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f692:	f7f5 ff08 	bl	80054a6 <__retarget_lock_release_recursive>
 800f696:	e7dd      	b.n	800f654 <_fflush_r+0xc>

0800f698 <__sccl>:
 800f698:	b570      	push	{r4, r5, r6, lr}
 800f69a:	780b      	ldrb	r3, [r1, #0]
 800f69c:	4604      	mov	r4, r0
 800f69e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f6a0:	bf0b      	itete	eq
 800f6a2:	784b      	ldrbeq	r3, [r1, #1]
 800f6a4:	1c4a      	addne	r2, r1, #1
 800f6a6:	1c8a      	addeq	r2, r1, #2
 800f6a8:	2100      	movne	r1, #0
 800f6aa:	bf08      	it	eq
 800f6ac:	2101      	moveq	r1, #1
 800f6ae:	3801      	subs	r0, #1
 800f6b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f6b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f6b8:	42a8      	cmp	r0, r5
 800f6ba:	d1fb      	bne.n	800f6b4 <__sccl+0x1c>
 800f6bc:	b90b      	cbnz	r3, 800f6c2 <__sccl+0x2a>
 800f6be:	1e50      	subs	r0, r2, #1
 800f6c0:	bd70      	pop	{r4, r5, r6, pc}
 800f6c2:	f081 0101 	eor.w	r1, r1, #1
 800f6c6:	54e1      	strb	r1, [r4, r3]
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f6d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800f6d2:	d005      	beq.n	800f6e0 <__sccl+0x48>
 800f6d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800f6d6:	d016      	beq.n	800f706 <__sccl+0x6e>
 800f6d8:	2d00      	cmp	r5, #0
 800f6da:	d0f1      	beq.n	800f6c0 <__sccl+0x28>
 800f6dc:	462b      	mov	r3, r5
 800f6de:	e7f2      	b.n	800f6c6 <__sccl+0x2e>
 800f6e0:	7846      	ldrb	r6, [r0, #1]
 800f6e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800f6e4:	d0fa      	beq.n	800f6dc <__sccl+0x44>
 800f6e6:	42b3      	cmp	r3, r6
 800f6e8:	dcf8      	bgt.n	800f6dc <__sccl+0x44>
 800f6ea:	3002      	adds	r0, #2
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	3201      	adds	r2, #1
 800f6f0:	4296      	cmp	r6, r2
 800f6f2:	54a1      	strb	r1, [r4, r2]
 800f6f4:	dcfb      	bgt.n	800f6ee <__sccl+0x56>
 800f6f6:	1af2      	subs	r2, r6, r3
 800f6f8:	3a01      	subs	r2, #1
 800f6fa:	1c5d      	adds	r5, r3, #1
 800f6fc:	42b3      	cmp	r3, r6
 800f6fe:	bfa8      	it	ge
 800f700:	2200      	movge	r2, #0
 800f702:	18ab      	adds	r3, r5, r2
 800f704:	e7e1      	b.n	800f6ca <__sccl+0x32>
 800f706:	4610      	mov	r0, r2
 800f708:	e7da      	b.n	800f6c0 <__sccl+0x28>

0800f70a <__submore>:
 800f70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70e:	460c      	mov	r4, r1
 800f710:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f716:	4299      	cmp	r1, r3
 800f718:	d11d      	bne.n	800f756 <__submore+0x4c>
 800f71a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f71e:	f7fa fd73 	bl	800a208 <_malloc_r>
 800f722:	b918      	cbnz	r0, 800f72c <__submore+0x22>
 800f724:	f04f 30ff 	mov.w	r0, #4294967295
 800f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f72c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f730:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f732:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f736:	6360      	str	r0, [r4, #52]	@ 0x34
 800f738:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f73c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f740:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f744:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f748:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f74c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f750:	6020      	str	r0, [r4, #0]
 800f752:	2000      	movs	r0, #0
 800f754:	e7e8      	b.n	800f728 <__submore+0x1e>
 800f756:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f758:	0077      	lsls	r7, r6, #1
 800f75a:	463a      	mov	r2, r7
 800f75c:	f000 f86c 	bl	800f838 <_realloc_r>
 800f760:	4605      	mov	r5, r0
 800f762:	2800      	cmp	r0, #0
 800f764:	d0de      	beq.n	800f724 <__submore+0x1a>
 800f766:	eb00 0806 	add.w	r8, r0, r6
 800f76a:	4601      	mov	r1, r0
 800f76c:	4632      	mov	r2, r6
 800f76e:	4640      	mov	r0, r8
 800f770:	f7fd faf0 	bl	800cd54 <memcpy>
 800f774:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f778:	f8c4 8000 	str.w	r8, [r4]
 800f77c:	e7e9      	b.n	800f752 <__submore+0x48>

0800f77e <memmove>:
 800f77e:	4288      	cmp	r0, r1
 800f780:	b510      	push	{r4, lr}
 800f782:	eb01 0402 	add.w	r4, r1, r2
 800f786:	d902      	bls.n	800f78e <memmove+0x10>
 800f788:	4284      	cmp	r4, r0
 800f78a:	4623      	mov	r3, r4
 800f78c:	d807      	bhi.n	800f79e <memmove+0x20>
 800f78e:	1e43      	subs	r3, r0, #1
 800f790:	42a1      	cmp	r1, r4
 800f792:	d008      	beq.n	800f7a6 <memmove+0x28>
 800f794:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f798:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f79c:	e7f8      	b.n	800f790 <memmove+0x12>
 800f79e:	4402      	add	r2, r0
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	428a      	cmp	r2, r1
 800f7a4:	d100      	bne.n	800f7a8 <memmove+0x2a>
 800f7a6:	bd10      	pop	{r4, pc}
 800f7a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7b0:	e7f7      	b.n	800f7a2 <memmove+0x24>
	...

0800f7b4 <__gettzinfo>:
 800f7b4:	4800      	ldr	r0, [pc, #0]	@ (800f7b8 <__gettzinfo+0x4>)
 800f7b6:	4770      	bx	lr
 800f7b8:	200001f8 	.word	0x200001f8

0800f7bc <__assert_func>:
 800f7bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7be:	4614      	mov	r4, r2
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	4b09      	ldr	r3, [pc, #36]	@ (800f7e8 <__assert_func+0x2c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4605      	mov	r5, r0
 800f7c8:	68d8      	ldr	r0, [r3, #12]
 800f7ca:	b954      	cbnz	r4, 800f7e2 <__assert_func+0x26>
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <__assert_func+0x30>)
 800f7ce:	461c      	mov	r4, r3
 800f7d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7d4:	9100      	str	r1, [sp, #0]
 800f7d6:	462b      	mov	r3, r5
 800f7d8:	4905      	ldr	r1, [pc, #20]	@ (800f7f0 <__assert_func+0x34>)
 800f7da:	f000 f85b 	bl	800f894 <fiprintf>
 800f7de:	f000 f86b 	bl	800f8b8 <abort>
 800f7e2:	4b04      	ldr	r3, [pc, #16]	@ (800f7f4 <__assert_func+0x38>)
 800f7e4:	e7f4      	b.n	800f7d0 <__assert_func+0x14>
 800f7e6:	bf00      	nop
 800f7e8:	200001a8 	.word	0x200001a8
 800f7ec:	080115aa 	.word	0x080115aa
 800f7f0:	08012c01 	.word	0x08012c01
 800f7f4:	08012bf4 	.word	0x08012bf4

0800f7f8 <_calloc_r>:
 800f7f8:	b570      	push	{r4, r5, r6, lr}
 800f7fa:	fba1 5402 	umull	r5, r4, r1, r2
 800f7fe:	b93c      	cbnz	r4, 800f810 <_calloc_r+0x18>
 800f800:	4629      	mov	r1, r5
 800f802:	f7fa fd01 	bl	800a208 <_malloc_r>
 800f806:	4606      	mov	r6, r0
 800f808:	b928      	cbnz	r0, 800f816 <_calloc_r+0x1e>
 800f80a:	2600      	movs	r6, #0
 800f80c:	4630      	mov	r0, r6
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
 800f810:	220c      	movs	r2, #12
 800f812:	6002      	str	r2, [r0, #0]
 800f814:	e7f9      	b.n	800f80a <_calloc_r+0x12>
 800f816:	462a      	mov	r2, r5
 800f818:	4621      	mov	r1, r4
 800f81a:	f7fc fc47 	bl	800c0ac <memset>
 800f81e:	e7f5      	b.n	800f80c <_calloc_r+0x14>

0800f820 <__env_lock>:
 800f820:	4801      	ldr	r0, [pc, #4]	@ (800f828 <__env_lock+0x8>)
 800f822:	f7f5 be34 	b.w	800548e <__retarget_lock_acquire_recursive>
 800f826:	bf00      	nop
 800f828:	20008754 	.word	0x20008754

0800f82c <__env_unlock>:
 800f82c:	4801      	ldr	r0, [pc, #4]	@ (800f834 <__env_unlock+0x8>)
 800f82e:	f7f5 be3a 	b.w	80054a6 <__retarget_lock_release_recursive>
 800f832:	bf00      	nop
 800f834:	20008754 	.word	0x20008754

0800f838 <_realloc_r>:
 800f838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83c:	4680      	mov	r8, r0
 800f83e:	4615      	mov	r5, r2
 800f840:	460c      	mov	r4, r1
 800f842:	b921      	cbnz	r1, 800f84e <_realloc_r+0x16>
 800f844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f848:	4611      	mov	r1, r2
 800f84a:	f7fa bcdd 	b.w	800a208 <_malloc_r>
 800f84e:	b92a      	cbnz	r2, 800f85c <_realloc_r+0x24>
 800f850:	f7fe f8f2 	bl	800da38 <_free_r>
 800f854:	2400      	movs	r4, #0
 800f856:	4620      	mov	r0, r4
 800f858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f85c:	f000 f833 	bl	800f8c6 <_malloc_usable_size_r>
 800f860:	4285      	cmp	r5, r0
 800f862:	4606      	mov	r6, r0
 800f864:	d802      	bhi.n	800f86c <_realloc_r+0x34>
 800f866:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f86a:	d8f4      	bhi.n	800f856 <_realloc_r+0x1e>
 800f86c:	4629      	mov	r1, r5
 800f86e:	4640      	mov	r0, r8
 800f870:	f7fa fcca 	bl	800a208 <_malloc_r>
 800f874:	4607      	mov	r7, r0
 800f876:	2800      	cmp	r0, #0
 800f878:	d0ec      	beq.n	800f854 <_realloc_r+0x1c>
 800f87a:	42b5      	cmp	r5, r6
 800f87c:	462a      	mov	r2, r5
 800f87e:	4621      	mov	r1, r4
 800f880:	bf28      	it	cs
 800f882:	4632      	movcs	r2, r6
 800f884:	f7fd fa66 	bl	800cd54 <memcpy>
 800f888:	4621      	mov	r1, r4
 800f88a:	4640      	mov	r0, r8
 800f88c:	f7fe f8d4 	bl	800da38 <_free_r>
 800f890:	463c      	mov	r4, r7
 800f892:	e7e0      	b.n	800f856 <_realloc_r+0x1e>

0800f894 <fiprintf>:
 800f894:	b40e      	push	{r1, r2, r3}
 800f896:	b503      	push	{r0, r1, lr}
 800f898:	4601      	mov	r1, r0
 800f89a:	ab03      	add	r3, sp, #12
 800f89c:	4805      	ldr	r0, [pc, #20]	@ (800f8b4 <fiprintf+0x20>)
 800f89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a2:	6800      	ldr	r0, [r0, #0]
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	f000 f83f 	bl	800f928 <_vfiprintf_r>
 800f8aa:	b002      	add	sp, #8
 800f8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8b0:	b003      	add	sp, #12
 800f8b2:	4770      	bx	lr
 800f8b4:	200001a8 	.word	0x200001a8

0800f8b8 <abort>:
 800f8b8:	b508      	push	{r3, lr}
 800f8ba:	2006      	movs	r0, #6
 800f8bc:	f000 fa08 	bl	800fcd0 <raise>
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	f7f5 fc9b 	bl	80051fc <_exit>

0800f8c6 <_malloc_usable_size_r>:
 800f8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8ca:	1f18      	subs	r0, r3, #4
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	bfbc      	itt	lt
 800f8d0:	580b      	ldrlt	r3, [r1, r0]
 800f8d2:	18c0      	addlt	r0, r0, r3
 800f8d4:	4770      	bx	lr

0800f8d6 <__sfputc_r>:
 800f8d6:	6893      	ldr	r3, [r2, #8]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	b410      	push	{r4}
 800f8de:	6093      	str	r3, [r2, #8]
 800f8e0:	da08      	bge.n	800f8f4 <__sfputc_r+0x1e>
 800f8e2:	6994      	ldr	r4, [r2, #24]
 800f8e4:	42a3      	cmp	r3, r4
 800f8e6:	db01      	blt.n	800f8ec <__sfputc_r+0x16>
 800f8e8:	290a      	cmp	r1, #10
 800f8ea:	d103      	bne.n	800f8f4 <__sfputc_r+0x1e>
 800f8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8f0:	f000 b932 	b.w	800fb58 <__swbuf_r>
 800f8f4:	6813      	ldr	r3, [r2, #0]
 800f8f6:	1c58      	adds	r0, r3, #1
 800f8f8:	6010      	str	r0, [r2, #0]
 800f8fa:	7019      	strb	r1, [r3, #0]
 800f8fc:	4608      	mov	r0, r1
 800f8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <__sfputs_r>:
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f906:	4606      	mov	r6, r0
 800f908:	460f      	mov	r7, r1
 800f90a:	4614      	mov	r4, r2
 800f90c:	18d5      	adds	r5, r2, r3
 800f90e:	42ac      	cmp	r4, r5
 800f910:	d101      	bne.n	800f916 <__sfputs_r+0x12>
 800f912:	2000      	movs	r0, #0
 800f914:	e007      	b.n	800f926 <__sfputs_r+0x22>
 800f916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f91a:	463a      	mov	r2, r7
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff ffda 	bl	800f8d6 <__sfputc_r>
 800f922:	1c43      	adds	r3, r0, #1
 800f924:	d1f3      	bne.n	800f90e <__sfputs_r+0xa>
 800f926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f928 <_vfiprintf_r>:
 800f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	460d      	mov	r5, r1
 800f92e:	b09d      	sub	sp, #116	@ 0x74
 800f930:	4614      	mov	r4, r2
 800f932:	4698      	mov	r8, r3
 800f934:	4606      	mov	r6, r0
 800f936:	b118      	cbz	r0, 800f940 <_vfiprintf_r+0x18>
 800f938:	6a03      	ldr	r3, [r0, #32]
 800f93a:	b90b      	cbnz	r3, 800f940 <_vfiprintf_r+0x18>
 800f93c:	f7fc fa84 	bl	800be48 <__sinit>
 800f940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f942:	07d9      	lsls	r1, r3, #31
 800f944:	d405      	bmi.n	800f952 <_vfiprintf_r+0x2a>
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	059a      	lsls	r2, r3, #22
 800f94a:	d402      	bmi.n	800f952 <_vfiprintf_r+0x2a>
 800f94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f94e:	f7f5 fd9e 	bl	800548e <__retarget_lock_acquire_recursive>
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	071b      	lsls	r3, r3, #28
 800f956:	d501      	bpl.n	800f95c <_vfiprintf_r+0x34>
 800f958:	692b      	ldr	r3, [r5, #16]
 800f95a:	b99b      	cbnz	r3, 800f984 <_vfiprintf_r+0x5c>
 800f95c:	4629      	mov	r1, r5
 800f95e:	4630      	mov	r0, r6
 800f960:	f000 f938 	bl	800fbd4 <__swsetup_r>
 800f964:	b170      	cbz	r0, 800f984 <_vfiprintf_r+0x5c>
 800f966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f968:	07dc      	lsls	r4, r3, #31
 800f96a:	d504      	bpl.n	800f976 <_vfiprintf_r+0x4e>
 800f96c:	f04f 30ff 	mov.w	r0, #4294967295
 800f970:	b01d      	add	sp, #116	@ 0x74
 800f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f976:	89ab      	ldrh	r3, [r5, #12]
 800f978:	0598      	lsls	r0, r3, #22
 800f97a:	d4f7      	bmi.n	800f96c <_vfiprintf_r+0x44>
 800f97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f97e:	f7f5 fd92 	bl	80054a6 <__retarget_lock_release_recursive>
 800f982:	e7f3      	b.n	800f96c <_vfiprintf_r+0x44>
 800f984:	2300      	movs	r3, #0
 800f986:	9309      	str	r3, [sp, #36]	@ 0x24
 800f988:	2320      	movs	r3, #32
 800f98a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f992:	2330      	movs	r3, #48	@ 0x30
 800f994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb44 <_vfiprintf_r+0x21c>
 800f998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f99c:	f04f 0901 	mov.w	r9, #1
 800f9a0:	4623      	mov	r3, r4
 800f9a2:	469a      	mov	sl, r3
 800f9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9a8:	b10a      	cbz	r2, 800f9ae <_vfiprintf_r+0x86>
 800f9aa:	2a25      	cmp	r2, #37	@ 0x25
 800f9ac:	d1f9      	bne.n	800f9a2 <_vfiprintf_r+0x7a>
 800f9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f9b2:	d00b      	beq.n	800f9cc <_vfiprintf_r+0xa4>
 800f9b4:	465b      	mov	r3, fp
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f7ff ffa2 	bl	800f904 <__sfputs_r>
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	f000 80a7 	beq.w	800fb14 <_vfiprintf_r+0x1ec>
 800f9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9c8:	445a      	add	r2, fp
 800f9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 809f 	beq.w	800fb14 <_vfiprintf_r+0x1ec>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9e0:	f10a 0a01 	add.w	sl, sl, #1
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	9307      	str	r3, [sp, #28]
 800f9e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9ee:	4654      	mov	r4, sl
 800f9f0:	2205      	movs	r2, #5
 800f9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9f6:	4853      	ldr	r0, [pc, #332]	@ (800fb44 <_vfiprintf_r+0x21c>)
 800f9f8:	f7f0 fbfa 	bl	80001f0 <memchr>
 800f9fc:	9a04      	ldr	r2, [sp, #16]
 800f9fe:	b9d8      	cbnz	r0, 800fa38 <_vfiprintf_r+0x110>
 800fa00:	06d1      	lsls	r1, r2, #27
 800fa02:	bf44      	itt	mi
 800fa04:	2320      	movmi	r3, #32
 800fa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa0a:	0713      	lsls	r3, r2, #28
 800fa0c:	bf44      	itt	mi
 800fa0e:	232b      	movmi	r3, #43	@ 0x2b
 800fa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa14:	f89a 3000 	ldrb.w	r3, [sl]
 800fa18:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa1a:	d015      	beq.n	800fa48 <_vfiprintf_r+0x120>
 800fa1c:	9a07      	ldr	r2, [sp, #28]
 800fa1e:	4654      	mov	r4, sl
 800fa20:	2000      	movs	r0, #0
 800fa22:	f04f 0c0a 	mov.w	ip, #10
 800fa26:	4621      	mov	r1, r4
 800fa28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa2c:	3b30      	subs	r3, #48	@ 0x30
 800fa2e:	2b09      	cmp	r3, #9
 800fa30:	d94b      	bls.n	800faca <_vfiprintf_r+0x1a2>
 800fa32:	b1b0      	cbz	r0, 800fa62 <_vfiprintf_r+0x13a>
 800fa34:	9207      	str	r2, [sp, #28]
 800fa36:	e014      	b.n	800fa62 <_vfiprintf_r+0x13a>
 800fa38:	eba0 0308 	sub.w	r3, r0, r8
 800fa3c:	fa09 f303 	lsl.w	r3, r9, r3
 800fa40:	4313      	orrs	r3, r2
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	46a2      	mov	sl, r4
 800fa46:	e7d2      	b.n	800f9ee <_vfiprintf_r+0xc6>
 800fa48:	9b03      	ldr	r3, [sp, #12]
 800fa4a:	1d19      	adds	r1, r3, #4
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	9103      	str	r1, [sp, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	bfbb      	ittet	lt
 800fa54:	425b      	neglt	r3, r3
 800fa56:	f042 0202 	orrlt.w	r2, r2, #2
 800fa5a:	9307      	strge	r3, [sp, #28]
 800fa5c:	9307      	strlt	r3, [sp, #28]
 800fa5e:	bfb8      	it	lt
 800fa60:	9204      	strlt	r2, [sp, #16]
 800fa62:	7823      	ldrb	r3, [r4, #0]
 800fa64:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa66:	d10a      	bne.n	800fa7e <_vfiprintf_r+0x156>
 800fa68:	7863      	ldrb	r3, [r4, #1]
 800fa6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa6c:	d132      	bne.n	800fad4 <_vfiprintf_r+0x1ac>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	1d1a      	adds	r2, r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	9203      	str	r2, [sp, #12]
 800fa76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa7a:	3402      	adds	r4, #2
 800fa7c:	9305      	str	r3, [sp, #20]
 800fa7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb54 <_vfiprintf_r+0x22c>
 800fa82:	7821      	ldrb	r1, [r4, #0]
 800fa84:	2203      	movs	r2, #3
 800fa86:	4650      	mov	r0, sl
 800fa88:	f7f0 fbb2 	bl	80001f0 <memchr>
 800fa8c:	b138      	cbz	r0, 800fa9e <_vfiprintf_r+0x176>
 800fa8e:	9b04      	ldr	r3, [sp, #16]
 800fa90:	eba0 000a 	sub.w	r0, r0, sl
 800fa94:	2240      	movs	r2, #64	@ 0x40
 800fa96:	4082      	lsls	r2, r0
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	3401      	adds	r4, #1
 800fa9c:	9304      	str	r3, [sp, #16]
 800fa9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faa2:	4829      	ldr	r0, [pc, #164]	@ (800fb48 <_vfiprintf_r+0x220>)
 800faa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800faa8:	2206      	movs	r2, #6
 800faaa:	f7f0 fba1 	bl	80001f0 <memchr>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d03f      	beq.n	800fb32 <_vfiprintf_r+0x20a>
 800fab2:	4b26      	ldr	r3, [pc, #152]	@ (800fb4c <_vfiprintf_r+0x224>)
 800fab4:	bb1b      	cbnz	r3, 800fafe <_vfiprintf_r+0x1d6>
 800fab6:	9b03      	ldr	r3, [sp, #12]
 800fab8:	3307      	adds	r3, #7
 800faba:	f023 0307 	bic.w	r3, r3, #7
 800fabe:	3308      	adds	r3, #8
 800fac0:	9303      	str	r3, [sp, #12]
 800fac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fac4:	443b      	add	r3, r7
 800fac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fac8:	e76a      	b.n	800f9a0 <_vfiprintf_r+0x78>
 800faca:	fb0c 3202 	mla	r2, ip, r2, r3
 800face:	460c      	mov	r4, r1
 800fad0:	2001      	movs	r0, #1
 800fad2:	e7a8      	b.n	800fa26 <_vfiprintf_r+0xfe>
 800fad4:	2300      	movs	r3, #0
 800fad6:	3401      	adds	r4, #1
 800fad8:	9305      	str	r3, [sp, #20]
 800fada:	4619      	mov	r1, r3
 800fadc:	f04f 0c0a 	mov.w	ip, #10
 800fae0:	4620      	mov	r0, r4
 800fae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fae6:	3a30      	subs	r2, #48	@ 0x30
 800fae8:	2a09      	cmp	r2, #9
 800faea:	d903      	bls.n	800faf4 <_vfiprintf_r+0x1cc>
 800faec:	2b00      	cmp	r3, #0
 800faee:	d0c6      	beq.n	800fa7e <_vfiprintf_r+0x156>
 800faf0:	9105      	str	r1, [sp, #20]
 800faf2:	e7c4      	b.n	800fa7e <_vfiprintf_r+0x156>
 800faf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800faf8:	4604      	mov	r4, r0
 800fafa:	2301      	movs	r3, #1
 800fafc:	e7f0      	b.n	800fae0 <_vfiprintf_r+0x1b8>
 800fafe:	ab03      	add	r3, sp, #12
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	462a      	mov	r2, r5
 800fb04:	4b12      	ldr	r3, [pc, #72]	@ (800fb50 <_vfiprintf_r+0x228>)
 800fb06:	a904      	add	r1, sp, #16
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f7fb fb45 	bl	800b198 <_printf_float>
 800fb0e:	4607      	mov	r7, r0
 800fb10:	1c78      	adds	r0, r7, #1
 800fb12:	d1d6      	bne.n	800fac2 <_vfiprintf_r+0x19a>
 800fb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb16:	07d9      	lsls	r1, r3, #31
 800fb18:	d405      	bmi.n	800fb26 <_vfiprintf_r+0x1fe>
 800fb1a:	89ab      	ldrh	r3, [r5, #12]
 800fb1c:	059a      	lsls	r2, r3, #22
 800fb1e:	d402      	bmi.n	800fb26 <_vfiprintf_r+0x1fe>
 800fb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb22:	f7f5 fcc0 	bl	80054a6 <__retarget_lock_release_recursive>
 800fb26:	89ab      	ldrh	r3, [r5, #12]
 800fb28:	065b      	lsls	r3, r3, #25
 800fb2a:	f53f af1f 	bmi.w	800f96c <_vfiprintf_r+0x44>
 800fb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb30:	e71e      	b.n	800f970 <_vfiprintf_r+0x48>
 800fb32:	ab03      	add	r3, sp, #12
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	462a      	mov	r2, r5
 800fb38:	4b05      	ldr	r3, [pc, #20]	@ (800fb50 <_vfiprintf_r+0x228>)
 800fb3a:	a904      	add	r1, sp, #16
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f7fb fdc3 	bl	800b6c8 <_printf_i>
 800fb42:	e7e4      	b.n	800fb0e <_vfiprintf_r+0x1e6>
 800fb44:	08012b68 	.word	0x08012b68
 800fb48:	08012b72 	.word	0x08012b72
 800fb4c:	0800b199 	.word	0x0800b199
 800fb50:	0800f905 	.word	0x0800f905
 800fb54:	08012b6e 	.word	0x08012b6e

0800fb58 <__swbuf_r>:
 800fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5a:	460e      	mov	r6, r1
 800fb5c:	4614      	mov	r4, r2
 800fb5e:	4605      	mov	r5, r0
 800fb60:	b118      	cbz	r0, 800fb6a <__swbuf_r+0x12>
 800fb62:	6a03      	ldr	r3, [r0, #32]
 800fb64:	b90b      	cbnz	r3, 800fb6a <__swbuf_r+0x12>
 800fb66:	f7fc f96f 	bl	800be48 <__sinit>
 800fb6a:	69a3      	ldr	r3, [r4, #24]
 800fb6c:	60a3      	str	r3, [r4, #8]
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	071a      	lsls	r2, r3, #28
 800fb72:	d501      	bpl.n	800fb78 <__swbuf_r+0x20>
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	b943      	cbnz	r3, 800fb8a <__swbuf_r+0x32>
 800fb78:	4621      	mov	r1, r4
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	f000 f82a 	bl	800fbd4 <__swsetup_r>
 800fb80:	b118      	cbz	r0, 800fb8a <__swbuf_r+0x32>
 800fb82:	f04f 37ff 	mov.w	r7, #4294967295
 800fb86:	4638      	mov	r0, r7
 800fb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	6922      	ldr	r2, [r4, #16]
 800fb8e:	1a98      	subs	r0, r3, r2
 800fb90:	6963      	ldr	r3, [r4, #20]
 800fb92:	b2f6      	uxtb	r6, r6
 800fb94:	4283      	cmp	r3, r0
 800fb96:	4637      	mov	r7, r6
 800fb98:	dc05      	bgt.n	800fba6 <__swbuf_r+0x4e>
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	4628      	mov	r0, r5
 800fb9e:	f7ff fd53 	bl	800f648 <_fflush_r>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d1ed      	bne.n	800fb82 <__swbuf_r+0x2a>
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	60a3      	str	r3, [r4, #8]
 800fbac:	6823      	ldr	r3, [r4, #0]
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	6022      	str	r2, [r4, #0]
 800fbb2:	701e      	strb	r6, [r3, #0]
 800fbb4:	6962      	ldr	r2, [r4, #20]
 800fbb6:	1c43      	adds	r3, r0, #1
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d004      	beq.n	800fbc6 <__swbuf_r+0x6e>
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	07db      	lsls	r3, r3, #31
 800fbc0:	d5e1      	bpl.n	800fb86 <__swbuf_r+0x2e>
 800fbc2:	2e0a      	cmp	r6, #10
 800fbc4:	d1df      	bne.n	800fb86 <__swbuf_r+0x2e>
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	4628      	mov	r0, r5
 800fbca:	f7ff fd3d 	bl	800f648 <_fflush_r>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d0d9      	beq.n	800fb86 <__swbuf_r+0x2e>
 800fbd2:	e7d6      	b.n	800fb82 <__swbuf_r+0x2a>

0800fbd4 <__swsetup_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4b29      	ldr	r3, [pc, #164]	@ (800fc7c <__swsetup_r+0xa8>)
 800fbd8:	4605      	mov	r5, r0
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	460c      	mov	r4, r1
 800fbde:	b118      	cbz	r0, 800fbe8 <__swsetup_r+0x14>
 800fbe0:	6a03      	ldr	r3, [r0, #32]
 800fbe2:	b90b      	cbnz	r3, 800fbe8 <__swsetup_r+0x14>
 800fbe4:	f7fc f930 	bl	800be48 <__sinit>
 800fbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbec:	0719      	lsls	r1, r3, #28
 800fbee:	d422      	bmi.n	800fc36 <__swsetup_r+0x62>
 800fbf0:	06da      	lsls	r2, r3, #27
 800fbf2:	d407      	bmi.n	800fc04 <__swsetup_r+0x30>
 800fbf4:	2209      	movs	r2, #9
 800fbf6:	602a      	str	r2, [r5, #0]
 800fbf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbfc:	81a3      	strh	r3, [r4, #12]
 800fbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800fc02:	e033      	b.n	800fc6c <__swsetup_r+0x98>
 800fc04:	0758      	lsls	r0, r3, #29
 800fc06:	d512      	bpl.n	800fc2e <__swsetup_r+0x5a>
 800fc08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc0a:	b141      	cbz	r1, 800fc1e <__swsetup_r+0x4a>
 800fc0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc10:	4299      	cmp	r1, r3
 800fc12:	d002      	beq.n	800fc1a <__swsetup_r+0x46>
 800fc14:	4628      	mov	r0, r5
 800fc16:	f7fd ff0f 	bl	800da38 <_free_r>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc1e:	89a3      	ldrh	r3, [r4, #12]
 800fc20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc24:	81a3      	strh	r3, [r4, #12]
 800fc26:	2300      	movs	r3, #0
 800fc28:	6063      	str	r3, [r4, #4]
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	6023      	str	r3, [r4, #0]
 800fc2e:	89a3      	ldrh	r3, [r4, #12]
 800fc30:	f043 0308 	orr.w	r3, r3, #8
 800fc34:	81a3      	strh	r3, [r4, #12]
 800fc36:	6923      	ldr	r3, [r4, #16]
 800fc38:	b94b      	cbnz	r3, 800fc4e <__swsetup_r+0x7a>
 800fc3a:	89a3      	ldrh	r3, [r4, #12]
 800fc3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc44:	d003      	beq.n	800fc4e <__swsetup_r+0x7a>
 800fc46:	4621      	mov	r1, r4
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f000 f883 	bl	800fd54 <__smakebuf_r>
 800fc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc52:	f013 0201 	ands.w	r2, r3, #1
 800fc56:	d00a      	beq.n	800fc6e <__swsetup_r+0x9a>
 800fc58:	2200      	movs	r2, #0
 800fc5a:	60a2      	str	r2, [r4, #8]
 800fc5c:	6962      	ldr	r2, [r4, #20]
 800fc5e:	4252      	negs	r2, r2
 800fc60:	61a2      	str	r2, [r4, #24]
 800fc62:	6922      	ldr	r2, [r4, #16]
 800fc64:	b942      	cbnz	r2, 800fc78 <__swsetup_r+0xa4>
 800fc66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc6a:	d1c5      	bne.n	800fbf8 <__swsetup_r+0x24>
 800fc6c:	bd38      	pop	{r3, r4, r5, pc}
 800fc6e:	0799      	lsls	r1, r3, #30
 800fc70:	bf58      	it	pl
 800fc72:	6962      	ldrpl	r2, [r4, #20]
 800fc74:	60a2      	str	r2, [r4, #8]
 800fc76:	e7f4      	b.n	800fc62 <__swsetup_r+0x8e>
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e7f7      	b.n	800fc6c <__swsetup_r+0x98>
 800fc7c:	200001a8 	.word	0x200001a8

0800fc80 <_raise_r>:
 800fc80:	291f      	cmp	r1, #31
 800fc82:	b538      	push	{r3, r4, r5, lr}
 800fc84:	4605      	mov	r5, r0
 800fc86:	460c      	mov	r4, r1
 800fc88:	d904      	bls.n	800fc94 <_raise_r+0x14>
 800fc8a:	2316      	movs	r3, #22
 800fc8c:	6003      	str	r3, [r0, #0]
 800fc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc96:	b112      	cbz	r2, 800fc9e <_raise_r+0x1e>
 800fc98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc9c:	b94b      	cbnz	r3, 800fcb2 <_raise_r+0x32>
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f000 f830 	bl	800fd04 <_getpid_r>
 800fca4:	4622      	mov	r2, r4
 800fca6:	4601      	mov	r1, r0
 800fca8:	4628      	mov	r0, r5
 800fcaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcae:	f000 b817 	b.w	800fce0 <_kill_r>
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d00a      	beq.n	800fccc <_raise_r+0x4c>
 800fcb6:	1c59      	adds	r1, r3, #1
 800fcb8:	d103      	bne.n	800fcc2 <_raise_r+0x42>
 800fcba:	2316      	movs	r3, #22
 800fcbc:	6003      	str	r3, [r0, #0]
 800fcbe:	2001      	movs	r0, #1
 800fcc0:	e7e7      	b.n	800fc92 <_raise_r+0x12>
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fcc8:	4620      	mov	r0, r4
 800fcca:	4798      	blx	r3
 800fccc:	2000      	movs	r0, #0
 800fcce:	e7e0      	b.n	800fc92 <_raise_r+0x12>

0800fcd0 <raise>:
 800fcd0:	4b02      	ldr	r3, [pc, #8]	@ (800fcdc <raise+0xc>)
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	f7ff bfd3 	b.w	800fc80 <_raise_r>
 800fcda:	bf00      	nop
 800fcdc:	200001a8 	.word	0x200001a8

0800fce0 <_kill_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d07      	ldr	r5, [pc, #28]	@ (800fd00 <_kill_r+0x20>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	4611      	mov	r1, r2
 800fcec:	602b      	str	r3, [r5, #0]
 800fcee:	f7f5 fa7d 	bl	80051ec <_kill>
 800fcf2:	1c43      	adds	r3, r0, #1
 800fcf4:	d102      	bne.n	800fcfc <_kill_r+0x1c>
 800fcf6:	682b      	ldr	r3, [r5, #0]
 800fcf8:	b103      	cbz	r3, 800fcfc <_kill_r+0x1c>
 800fcfa:	6023      	str	r3, [r4, #0]
 800fcfc:	bd38      	pop	{r3, r4, r5, pc}
 800fcfe:	bf00      	nop
 800fd00:	200099f8 	.word	0x200099f8

0800fd04 <_getpid_r>:
 800fd04:	f7f5 ba70 	b.w	80051e8 <_getpid>

0800fd08 <__swhatbuf_r>:
 800fd08:	b570      	push	{r4, r5, r6, lr}
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd10:	2900      	cmp	r1, #0
 800fd12:	b096      	sub	sp, #88	@ 0x58
 800fd14:	4615      	mov	r5, r2
 800fd16:	461e      	mov	r6, r3
 800fd18:	da0d      	bge.n	800fd36 <__swhatbuf_r+0x2e>
 800fd1a:	89a3      	ldrh	r3, [r4, #12]
 800fd1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd20:	f04f 0100 	mov.w	r1, #0
 800fd24:	bf14      	ite	ne
 800fd26:	2340      	movne	r3, #64	@ 0x40
 800fd28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	6031      	str	r1, [r6, #0]
 800fd30:	602b      	str	r3, [r5, #0]
 800fd32:	b016      	add	sp, #88	@ 0x58
 800fd34:	bd70      	pop	{r4, r5, r6, pc}
 800fd36:	466a      	mov	r2, sp
 800fd38:	f000 f848 	bl	800fdcc <_fstat_r>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	dbec      	blt.n	800fd1a <__swhatbuf_r+0x12>
 800fd40:	9901      	ldr	r1, [sp, #4]
 800fd42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd4a:	4259      	negs	r1, r3
 800fd4c:	4159      	adcs	r1, r3
 800fd4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd52:	e7eb      	b.n	800fd2c <__swhatbuf_r+0x24>

0800fd54 <__smakebuf_r>:
 800fd54:	898b      	ldrh	r3, [r1, #12]
 800fd56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd58:	079d      	lsls	r5, r3, #30
 800fd5a:	4606      	mov	r6, r0
 800fd5c:	460c      	mov	r4, r1
 800fd5e:	d507      	bpl.n	800fd70 <__smakebuf_r+0x1c>
 800fd60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	6123      	str	r3, [r4, #16]
 800fd68:	2301      	movs	r3, #1
 800fd6a:	6163      	str	r3, [r4, #20]
 800fd6c:	b003      	add	sp, #12
 800fd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd70:	ab01      	add	r3, sp, #4
 800fd72:	466a      	mov	r2, sp
 800fd74:	f7ff ffc8 	bl	800fd08 <__swhatbuf_r>
 800fd78:	9f00      	ldr	r7, [sp, #0]
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	4639      	mov	r1, r7
 800fd7e:	4630      	mov	r0, r6
 800fd80:	f7fa fa42 	bl	800a208 <_malloc_r>
 800fd84:	b948      	cbnz	r0, 800fd9a <__smakebuf_r+0x46>
 800fd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd8a:	059a      	lsls	r2, r3, #22
 800fd8c:	d4ee      	bmi.n	800fd6c <__smakebuf_r+0x18>
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	f043 0302 	orr.w	r3, r3, #2
 800fd96:	81a3      	strh	r3, [r4, #12]
 800fd98:	e7e2      	b.n	800fd60 <__smakebuf_r+0xc>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	6020      	str	r0, [r4, #0]
 800fd9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fda2:	81a3      	strh	r3, [r4, #12]
 800fda4:	9b01      	ldr	r3, [sp, #4]
 800fda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fdaa:	b15b      	cbz	r3, 800fdc4 <__smakebuf_r+0x70>
 800fdac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f000 f81d 	bl	800fdf0 <_isatty_r>
 800fdb6:	b128      	cbz	r0, 800fdc4 <__smakebuf_r+0x70>
 800fdb8:	89a3      	ldrh	r3, [r4, #12]
 800fdba:	f023 0303 	bic.w	r3, r3, #3
 800fdbe:	f043 0301 	orr.w	r3, r3, #1
 800fdc2:	81a3      	strh	r3, [r4, #12]
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	431d      	orrs	r5, r3
 800fdc8:	81a5      	strh	r5, [r4, #12]
 800fdca:	e7cf      	b.n	800fd6c <__smakebuf_r+0x18>

0800fdcc <_fstat_r>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	4d07      	ldr	r5, [pc, #28]	@ (800fdec <_fstat_r+0x20>)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	4608      	mov	r0, r1
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	602b      	str	r3, [r5, #0]
 800fdda:	f7f5 fa34 	bl	8005246 <_fstat>
 800fdde:	1c43      	adds	r3, r0, #1
 800fde0:	d102      	bne.n	800fde8 <_fstat_r+0x1c>
 800fde2:	682b      	ldr	r3, [r5, #0]
 800fde4:	b103      	cbz	r3, 800fde8 <_fstat_r+0x1c>
 800fde6:	6023      	str	r3, [r4, #0]
 800fde8:	bd38      	pop	{r3, r4, r5, pc}
 800fdea:	bf00      	nop
 800fdec:	200099f8 	.word	0x200099f8

0800fdf0 <_isatty_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	4d06      	ldr	r5, [pc, #24]	@ (800fe0c <_isatty_r+0x1c>)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	4608      	mov	r0, r1
 800fdfa:	602b      	str	r3, [r5, #0]
 800fdfc:	f7f5 fa28 	bl	8005250 <_isatty>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_isatty_r+0x1a>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_isatty_r+0x1a>
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	200099f8 	.word	0x200099f8

0800fe10 <floor>:
 800fe10:	ec51 0b10 	vmov	r0, r1, d0
 800fe14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fe20:	2e13      	cmp	r6, #19
 800fe22:	460c      	mov	r4, r1
 800fe24:	4605      	mov	r5, r0
 800fe26:	4680      	mov	r8, r0
 800fe28:	dc34      	bgt.n	800fe94 <floor+0x84>
 800fe2a:	2e00      	cmp	r6, #0
 800fe2c:	da17      	bge.n	800fe5e <floor+0x4e>
 800fe2e:	a332      	add	r3, pc, #200	@ (adr r3, 800fef8 <floor+0xe8>)
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	f7f0 fa3a 	bl	80002ac <__adddf3>
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f7f0 fe7c 	bl	8000b38 <__aeabi_dcmpgt>
 800fe40:	b150      	cbz	r0, 800fe58 <floor+0x48>
 800fe42:	2c00      	cmp	r4, #0
 800fe44:	da55      	bge.n	800fef2 <floor+0xe2>
 800fe46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fe4a:	432c      	orrs	r4, r5
 800fe4c:	2500      	movs	r5, #0
 800fe4e:	42ac      	cmp	r4, r5
 800fe50:	4c2b      	ldr	r4, [pc, #172]	@ (800ff00 <floor+0xf0>)
 800fe52:	bf08      	it	eq
 800fe54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fe58:	4621      	mov	r1, r4
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	e023      	b.n	800fea6 <floor+0x96>
 800fe5e:	4f29      	ldr	r7, [pc, #164]	@ (800ff04 <floor+0xf4>)
 800fe60:	4137      	asrs	r7, r6
 800fe62:	ea01 0307 	and.w	r3, r1, r7
 800fe66:	4303      	orrs	r3, r0
 800fe68:	d01d      	beq.n	800fea6 <floor+0x96>
 800fe6a:	a323      	add	r3, pc, #140	@ (adr r3, 800fef8 <floor+0xe8>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	f7f0 fa1c 	bl	80002ac <__adddf3>
 800fe74:	2200      	movs	r2, #0
 800fe76:	2300      	movs	r3, #0
 800fe78:	f7f0 fe5e 	bl	8000b38 <__aeabi_dcmpgt>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d0eb      	beq.n	800fe58 <floor+0x48>
 800fe80:	2c00      	cmp	r4, #0
 800fe82:	bfbe      	ittt	lt
 800fe84:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fe88:	4133      	asrlt	r3, r6
 800fe8a:	18e4      	addlt	r4, r4, r3
 800fe8c:	ea24 0407 	bic.w	r4, r4, r7
 800fe90:	2500      	movs	r5, #0
 800fe92:	e7e1      	b.n	800fe58 <floor+0x48>
 800fe94:	2e33      	cmp	r6, #51	@ 0x33
 800fe96:	dd0a      	ble.n	800feae <floor+0x9e>
 800fe98:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fe9c:	d103      	bne.n	800fea6 <floor+0x96>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	460b      	mov	r3, r1
 800fea2:	f7f0 fa03 	bl	80002ac <__adddf3>
 800fea6:	ec41 0b10 	vmov	d0, r0, r1
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800feb2:	f04f 37ff 	mov.w	r7, #4294967295
 800feb6:	40df      	lsrs	r7, r3
 800feb8:	4207      	tst	r7, r0
 800feba:	d0f4      	beq.n	800fea6 <floor+0x96>
 800febc:	a30e      	add	r3, pc, #56	@ (adr r3, 800fef8 <floor+0xe8>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	f7f0 f9f3 	bl	80002ac <__adddf3>
 800fec6:	2200      	movs	r2, #0
 800fec8:	2300      	movs	r3, #0
 800feca:	f7f0 fe35 	bl	8000b38 <__aeabi_dcmpgt>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d0c2      	beq.n	800fe58 <floor+0x48>
 800fed2:	2c00      	cmp	r4, #0
 800fed4:	da0a      	bge.n	800feec <floor+0xdc>
 800fed6:	2e14      	cmp	r6, #20
 800fed8:	d101      	bne.n	800fede <floor+0xce>
 800feda:	3401      	adds	r4, #1
 800fedc:	e006      	b.n	800feec <floor+0xdc>
 800fede:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fee2:	2301      	movs	r3, #1
 800fee4:	40b3      	lsls	r3, r6
 800fee6:	441d      	add	r5, r3
 800fee8:	4545      	cmp	r5, r8
 800feea:	d3f6      	bcc.n	800feda <floor+0xca>
 800feec:	ea25 0507 	bic.w	r5, r5, r7
 800fef0:	e7b2      	b.n	800fe58 <floor+0x48>
 800fef2:	2500      	movs	r5, #0
 800fef4:	462c      	mov	r4, r5
 800fef6:	e7af      	b.n	800fe58 <floor+0x48>
 800fef8:	8800759c 	.word	0x8800759c
 800fefc:	7e37e43c 	.word	0x7e37e43c
 800ff00:	bff00000 	.word	0xbff00000
 800ff04:	000fffff 	.word	0x000fffff

0800ff08 <round>:
 800ff08:	ec51 0b10 	vmov	r0, r1, d0
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ff12:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ff16:	2a13      	cmp	r2, #19
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	dc1b      	bgt.n	800ff56 <round+0x4e>
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	da0b      	bge.n	800ff3a <round+0x32>
 800ff22:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ff26:	3201      	adds	r2, #1
 800ff28:	bf04      	itt	eq
 800ff2a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff2e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ff32:	2200      	movs	r2, #0
 800ff34:	4619      	mov	r1, r3
 800ff36:	4610      	mov	r0, r2
 800ff38:	e015      	b.n	800ff66 <round+0x5e>
 800ff3a:	4c15      	ldr	r4, [pc, #84]	@ (800ff90 <round+0x88>)
 800ff3c:	4114      	asrs	r4, r2
 800ff3e:	ea04 0601 	and.w	r6, r4, r1
 800ff42:	4306      	orrs	r6, r0
 800ff44:	d00f      	beq.n	800ff66 <round+0x5e>
 800ff46:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ff4a:	fa41 f202 	asr.w	r2, r1, r2
 800ff4e:	4413      	add	r3, r2
 800ff50:	ea23 0304 	bic.w	r3, r3, r4
 800ff54:	e7ed      	b.n	800ff32 <round+0x2a>
 800ff56:	2a33      	cmp	r2, #51	@ 0x33
 800ff58:	dd08      	ble.n	800ff6c <round+0x64>
 800ff5a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ff5e:	d102      	bne.n	800ff66 <round+0x5e>
 800ff60:	4602      	mov	r2, r0
 800ff62:	f7f0 f9a3 	bl	80002ac <__adddf3>
 800ff66:	ec41 0b10 	vmov	d0, r0, r1
 800ff6a:	bd70      	pop	{r4, r5, r6, pc}
 800ff6c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ff70:	f04f 34ff 	mov.w	r4, #4294967295
 800ff74:	40f4      	lsrs	r4, r6
 800ff76:	4204      	tst	r4, r0
 800ff78:	d0f5      	beq.n	800ff66 <round+0x5e>
 800ff7a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ff7e:	2201      	movs	r2, #1
 800ff80:	408a      	lsls	r2, r1
 800ff82:	1952      	adds	r2, r2, r5
 800ff84:	bf28      	it	cs
 800ff86:	3301      	addcs	r3, #1
 800ff88:	ea22 0204 	bic.w	r2, r2, r4
 800ff8c:	e7d2      	b.n	800ff34 <round+0x2c>
 800ff8e:	bf00      	nop
 800ff90:	000fffff 	.word	0x000fffff

0800ff94 <_init>:
 800ff94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff96:	bf00      	nop
 800ff98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff9a:	bc08      	pop	{r3}
 800ff9c:	469e      	mov	lr, r3
 800ff9e:	4770      	bx	lr

0800ffa0 <_fini>:
 800ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa2:	bf00      	nop
 800ffa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffa6:	bc08      	pop	{r3}
 800ffa8:	469e      	mov	lr, r3
 800ffaa:	4770      	bx	lr
