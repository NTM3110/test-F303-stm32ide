
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  0800ed88  0800ed88  0000fd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010af8  08010af8  00012248  2**0
                  CONTENTS
  4 .ARM          00000008  08010af8  08010af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b00  08010b00  00012248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b00  08010b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b04  08010b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08010b08  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012248  2**0
                  CONTENTS
 10 .bss          0000961c  20000248  20000248  00012248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009864  20009864  00012248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030bac  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000619e  00000000  00000000  00042e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f494  00000000  00000000  00048fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  00058458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ba3  00000000  00000000  00059f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006ab0  00000000  00000000  0005bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002de90  00000000  00000000  000625bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5cd1  00000000  00000000  0009044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016611c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006668  00000000  00000000  00166160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0016c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed6c 	.word	0x0800ed6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800ed6c 	.word	0x0800ed6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d16:	4e0d      	ldr	r6, [pc, #52]	@ (8000d4c <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <sendRMCDataToFlash+0x3c>)
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d20:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <sendRMCDataToFlash+0x40>)
 8000d24:	f006 fc78 	bl	8007618 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	f006 feaf 	bl	8007a90 <osMailAlloc>
 8000d32:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000d34:	b148      	cbz	r0, 8000d4a <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000d36:	4629      	mov	r1, r5
 8000d38:	2258      	movs	r2, #88	@ 0x58
 8000d3a:	f00a ff70 	bl	800bc1e <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d3e:	6830      	ldr	r0, [r6, #0]
 8000d40:	4621      	mov	r1, r4
    }
}
 8000d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d46:	f006 bea8 	b.w	8007a9a <osMailPut>
}
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	200002c8 	.word	0x200002c8
 8000d50:	0800eeb8 	.word	0x0800eeb8
 8000d54:	20001250 	.word	0x20001250

08000d58 <getRMC>:


void getRMC(){
 8000d58:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000d5a:	4c3a      	ldr	r4, [pc, #232]	@ (8000e44 <getRMC+0xec>)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <getRMC+0xf0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000d68:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d6c:	2924      	cmp	r1, #36	@ 0x24
 8000d6e:	4615      	mov	r5, r2
 8000d70:	f102 0201 	add.w	r2, r2, #1
 8000d74:	d160      	bne.n	8000e38 <getRMC+0xe0>
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	2947      	cmp	r1, #71	@ 0x47
 8000d7a:	d15d      	bne.n	8000e38 <getRMC+0xe0>
 8000d7c:	7859      	ldrb	r1, [r3, #1]
 8000d7e:	294e      	cmp	r1, #78	@ 0x4e
 8000d80:	d15a      	bne.n	8000e38 <getRMC+0xe0>
 8000d82:	7899      	ldrb	r1, [r3, #2]
 8000d84:	2952      	cmp	r1, #82	@ 0x52
 8000d86:	d157      	bne.n	8000e38 <getRMC+0xe0>
 8000d88:	78d9      	ldrb	r1, [r3, #3]
 8000d8a:	294d      	cmp	r1, #77	@ 0x4d
 8000d8c:	d154      	bne.n	8000e38 <getRMC+0xe0>
 8000d8e:	7919      	ldrb	r1, [r3, #4]
 8000d90:	2943      	cmp	r1, #67	@ 0x43
 8000d92:	d151      	bne.n	8000e38 <getRMC+0xe0>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000d94:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000d98:	3101      	adds	r1, #1
 8000d9a:	29c8      	cmp	r1, #200	@ 0xc8
 8000d9c:	d94c      	bls.n	8000e38 <getRMC+0xe0>
			isRMCExist = 1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <getRMC+0xf4>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da0:	492b      	ldr	r1, [pc, #172]	@ (8000e50 <getRMC+0xf8>)
 8000da2:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <getRMC+0xfc>)
			isRMCExist = 1;
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	220c      	movs	r2, #12
 8000dae:	f006 fc33 	bl	8007618 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000db2:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <getRMC+0x100>)
 8000db4:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000db6:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000db8:	7859      	ldrb	r1, [r3, #1]
 8000dba:	290a      	cmp	r1, #10
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	d135      	bne.n	8000e2c <getRMC+0xd4>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <getRMC+0x100>)
	}
	if(isRMCExist == 1){
 8000dc2:	4d22      	ldr	r5, [pc, #136]	@ (8000e4c <getRMC+0xf4>)
		rmc_str[i] = 0;
 8000dc4:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4418      	add	r0, r3
 8000dcc:	f00a f8ce 	bl	800af6c <memset>
	if(isRMCExist == 1){
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <getRMC+0x92>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		if(rmc.isValid == 1){
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <getRMC+0x104>)
 8000dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d103      	bne.n	8000de6 <getRMC+0x8e>
			sendRMCDataToFlash(&rmc);
 8000dde:	f7ff ff99 	bl	8000d14 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
			getRMC_time = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	602b      	str	r3, [r5, #0]
	}
	if(getRMC_time >= 500){
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000df0:	db0f      	blt.n	8000e12 <getRMC+0xba>
		GPS_DISABLE();
 8000df2:	2201      	movs	r2, #1
 8000df4:	2104      	movs	r1, #4
 8000df6:	481a      	ldr	r0, [pc, #104]	@ (8000e60 <getRMC+0x108>)
 8000df8:	f004 fcb6 	bl	8005768 <HAL_GPIO_WritePin>
		osDelay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f006 fd7a 	bl	80078f8 <osDelay>
		GPS_ENABLE();
 8000e04:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <getRMC+0x108>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f004 fcad 	bl	8005768 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <getRMC+0x10c>)
 8000e16:	f003 fce9 	bl	80047ec <Debug_printf>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
}
 8000e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <getRMC+0x100>)
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <getRMC+0xfc>)
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	f006 bbf6 	b.w	8007618 <HAL_UART_Transmit>
				rmc_str[idx] = gpsSentence[i];
 8000e2c:	7829      	ldrb	r1, [r5, #0]
 8000e2e:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000e32:	3301      	adds	r3, #1
 8000e34:	3001      	adds	r0, #1
				i++;
 8000e36:	e7bf      	b.n	8000db8 <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e38:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000e3c:	d194      	bne.n	8000d68 <getRMC+0x10>
	int length = 0;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e7be      	b.n	8000dc0 <getRMC+0x68>
 8000e42:	bf00      	nop
 8000e44:	20000264 	.word	0x20000264
 8000e48:	200002cc 	.word	0x200002cc
 8000e4c:	20000268 	.word	0x20000268
 8000e50:	0800eece 	.word	0x0800eece
 8000e54:	20001250 	.word	0x20001250
 8000e58:	20000adc 	.word	0x20000adc
 8000e5c:	20000270 	.word	0x20000270
 8000e60:	48000800 	.word	0x48000800
 8000e64:	0800eedb 	.word	0x0800eedb

08000e68 <StartGPS>:


void StartGPS(void const * argument)
{
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e6a:	4935      	ldr	r1, [pc, #212]	@ (8000f40 <StartGPS+0xd8>)
 8000e6c:	4835      	ldr	r0, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
		//rmc.lcation.latitude -= 0.000001;
//		rmc.tim.sec += 2;
//		rmc.lcation.latitude = route[count].latitude;
//		rmc.lcation.longitude = route[count].longitude;
//		count++;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000e6e:	4d35      	ldr	r5, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e74:	220c      	movs	r2, #12
 8000e76:	f006 fbcf 	bl	8007618 <HAL_UART_Transmit>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000e7a:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <StartGPS+0xe0>)
 8000e7c:	4933      	ldr	r1, [pc, #204]	@ (8000f4c <StartGPS+0xe4>)
 8000e7e:	4834      	ldr	r0, [pc, #208]	@ (8000f50 <StartGPS+0xe8>)
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	f001 ff5a 	bl	8002d3c <RingBufferDmaU8_initUSARTRx>
	rmc.tim.hour = 0;
 8000e88:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <StartGPS+0xec>)
	rmc.speed = 22.4;
 8000e8a:	4a33      	ldr	r2, [pc, #204]	@ (8000f58 <StartGPS+0xf0>)
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.lcation.latitude = 20.998022;
 8000e8e:	a128      	add	r1, pc, #160	@ (adr r1, 8000f30 <StartGPS+0xc8>)
 8000e90:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.course = 30.5;
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <StartGPS+0xf4>)
 8000e96:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000e98:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000e9c:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000e9e:	a126      	add	r1, pc, #152	@ (adr r1, 8000f38 <StartGPS+0xd0>)
 8000ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000ea8:	2245      	movs	r2, #69	@ 0x45
	rmc.tim.hour = 0;
 8000eaa:	2400      	movs	r4, #0
	rmc.lcation.EW = 'E';
 8000eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
 8000eb0:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000eb2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.min = 0;
 8000eb6:	e9c3 4400 	strd	r4, r4, [r3]
	rmc.date.Mon = 0;
 8000eba:	e9c3 4404 	strd	r4, r4, [r3, #16]
	rmc.tim.sec = 0;
 8000ebe:	609c      	str	r4, [r3, #8]
	rmc.isValid = 1;
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Yr = 0;
 8000ec2:	619c      	str	r4, [r3, #24]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ec4:	220b      	movs	r2, #11
 8000ec6:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ec8:	4621      	mov	r1, r4
 8000eca:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ecc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000ed0:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ed4:	f006 fdb1 	bl	8007a3a <osMailCreate>
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <StartGPS+0xf8>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000eda:	4621      	mov	r1, r4
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000edc:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <StartGPS+0xe0>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee4:	4c1f      	ldr	r4, [pc, #124]	@ (8000f64 <StartGPS+0xfc>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee6:	f00a f841 	bl	800af6c <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f004 fc39 	bl	8005768 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000ef6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000efa:	f003 fce7 	bl	80048cc <HAL_Delay>
		getRMC();
 8000efe:	f7ff ff2b 	bl	8000d58 <getRMC>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	220d      	movs	r2, #13
 8000f08:	4917      	ldr	r1, [pc, #92]	@ (8000f68 <StartGPS+0x100>)
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f006 fb84 	bl	8007618 <HAL_UART_Transmit>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n ");
 8000f10:	4628      	mov	r0, r5
 8000f12:	4916      	ldr	r1, [pc, #88]	@ (8000f6c <StartGPS+0x104>)
 8000f14:	f003 fc5a 	bl	80047cc <uart_transmit_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f18:	4620      	mov	r0, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f20:	f004 fc22 	bl	8005768 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000f24:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f28:	f003 fcd0 	bl	80048cc <HAL_Delay>
	while(1)
 8000f2c:	e7dd      	b.n	8000eea <StartGPS+0x82>
 8000f2e:	bf00      	nop
 8000f30:	5eaab042 	.word	0x5eaab042
 8000f34:	4034ff7e 	.word	0x4034ff7e
 8000f38:	48451330 	.word	0x48451330
 8000f3c:	405a72dd 	.word	0x405a72dd
 8000f40:	0800eef4 	.word	0x0800eef4
 8000f44:	20001250 	.word	0x20001250
 8000f48:	200002cc 	.word	0x200002cc
 8000f4c:	200011c8 	.word	0x200011c8
 8000f50:	20000acc 	.word	0x20000acc
 8000f54:	20000270 	.word	0x20000270
 8000f58:	41b33333 	.word	0x41b33333
 8000f5c:	41f40000 	.word	0x41f40000
 8000f60:	200002c8 	.word	0x200002c8
 8000f64:	48000800 	.word	0x48000800
 8000f68:	0800ef01 	.word	0x0800ef01
 8000f6c:	0800ef0f 	.word	0x0800ef0f

08000f70 <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};

uint8_t flashBufferMailReceived[128];

JT808_TerminalRegistration create_terminal_registration(){
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000f74:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000f76:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000f78:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000f7a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000f7e:	4622      	mov	r2, r4
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	4626      	mov	r6, r4
 8000f86:	c603      	stmia	r6!, {r0, r1}
 8000f88:	3308      	adds	r3, #8
 8000f8a:	42bb      	cmp	r3, r7
 8000f8c:	4634      	mov	r4, r6
 8000f8e:	d1f7      	bne.n	8000f80 <create_terminal_registration+0x10>
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000f94:	4613      	mov	r3, r2
 8000f96:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000f98:	462a      	mov	r2, r5
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	cc03      	ldmia	r4!, {r0, r1}
 8000f9e:	42b4      	cmp	r4, r6
 8000fa0:	6010      	str	r0, [r2, #0]
 8000fa2:	6051      	str	r1, [r2, #4]
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	f102 0208 	add.w	r2, r2, #8
 8000faa:	d1f6      	bne.n	8000f9a <create_terminal_registration+0x2a>
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	6010      	str	r0, [r2, #0]
}
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	b011      	add	sp, #68	@ 0x44
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800ed88 	.word	0x0800ed88

08000fbc <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000fbc:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000fbe:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000fc0:	b093      	sub	sp, #76	@ 0x4c
 8000fc2:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000fc4:	462a      	mov	r2, r5
 8000fc6:	4906      	ldr	r1, [pc, #24]	@ (8000fe0 <create_location_info_report+0x24>)
 8000fc8:	a801      	add	r0, sp, #4
 8000fca:	f00a fe28 	bl	800bc1e <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000fce:	462a      	mov	r2, r5
 8000fd0:	a901      	add	r1, sp, #4
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f00a fe23 	bl	800bc1e <memcpy>
}
 8000fd8:	4620      	mov	r0, r4
 8000fda:	b013      	add	sp, #76	@ 0x4c
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800edc4 	.word	0x0800edc4

08000fe4 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fe6:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe8:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000fec:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fee:	bf0c      	ite	eq
 8000ff0:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ff4:	f043 0304 	orrne.w	r3, r3, #4
 8000ff8:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000ffa:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000ffe:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001000:	bf0c      	ite	eq
 8001002:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001006:	f043 0308 	orrne.w	r3, r3, #8
 800100a:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000be8 	.word	0x20000be8

08001014 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001018:	f7ff f93a 	bl	8000290 <strlen>
 800101c:	4621      	mov	r1, r4
 800101e:	b282      	uxth	r2, r0
}
 8001020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <send_AT_command+0x1c>)
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	f006 baf5 	b.w	8007618 <HAL_UART_Transmit>
 800102e:	bf00      	nop
 8001030:	20001140 	.word	0x20001140

08001034 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001034:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001038:	f006 f881 	bl	800713e <HAL_UART_Abort>
	if(ret != HAL_OK)
 800103c:	b108      	cbz	r0, 8001042 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800103e:	f002 f9e8 	bl	8003412 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8001042:	2032      	movs	r0, #50	@ 0x32
 8001044:	f006 fc58 	bl	80078f8 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <SIM_UART_ReInitializeRxDMA+0x2c>)
 800104e:	4903      	ldr	r1, [pc, #12]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <SIM_UART_ReInitializeRxDMA+0x30>)
 8001052:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001056:	f001 be71 	b.w	8002d3c <RingBufferDmaU8_initUSARTRx>
 800105a:	bf00      	nop
 800105c:	20001140 	.word	0x20001140
 8001060:	20000c74 	.word	0x20000c74
 8001064:	20000c64 	.word	0x20000c64

08001068 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001068:	f7ff b912 	b.w	8000290 <strlen>

0800106c <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 800106c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800106e:	4c10      	ldr	r4, [pc, #64]	@ (80010b0 <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001072:	4d11      	ldr	r5, [pc, #68]	@ (80010b8 <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 8001074:	b0a1      	sub	sp, #132	@ 0x84
 8001076:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	4668      	mov	r0, sp
 800107c:	f009 fe7a 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8001080:	4669      	mov	r1, sp
 8001082:	4620      	mov	r0, r4
 8001084:	f003 fba2 	bl	80047cc <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff ffed 	bl	8001068 <find_length>
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	b282      	uxth	r2, r0
 8001094:	4629      	mov	r1, r5
 8001096:	4620      	mov	r0, r4
 8001098:	f006 fabe 	bl	8007618 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 800109c:	4907      	ldr	r1, [pc, #28]	@ (80010bc <receive_response+0x50>)
 800109e:	4620      	mov	r0, r4
 80010a0:	f003 fb94 	bl	80047cc <uart_transmit_string>
	osDelay(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a8:	f006 fc26 	bl	80078f8 <osDelay>
}
 80010ac:	b021      	add	sp, #132	@ 0x84
 80010ae:	bd30      	pop	{r4, r5, pc}
 80010b0:	20001250 	.word	0x20001250
 80010b4:	0800ef13 	.word	0x0800ef13
 80010b8:	20000c74 	.word	0x20000c74
 80010bc:	0800fc58 	.word	0x0800fc58

080010c0 <init_SIM_module>:

void init_SIM_module() {
 80010c0:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80010c2:	4c0b      	ldr	r4, [pc, #44]	@ (80010f0 <init_SIM_module+0x30>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	4611      	mov	r1, r2
 80010c8:	4620      	mov	r0, r4
 80010ca:	f004 fb4d 	bl	8005768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2102      	movs	r1, #2
 80010d2:	4620      	mov	r0, r4
 80010d4:	f004 fb48 	bl	8005768 <HAL_GPIO_WritePin>
	osDelay(2000);
 80010d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010dc:	f006 fc0c 	bl	80078f8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e0:	4620      	mov	r0, r4
 80010e2:	2201      	movs	r2, #1
}
 80010e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e8:	2102      	movs	r1, #2
 80010ea:	f004 bb3d 	b.w	8005768 <HAL_GPIO_WritePin>
 80010ee:	bf00      	nop
 80010f0:	48000800 	.word	0x48000800

080010f4 <reboot_SIM_module>:

void reboot_SIM_module(){
 80010f4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010f6:	4c11      	ldr	r4, [pc, #68]	@ (800113c <reboot_SIM_module+0x48>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	4620      	mov	r0, r4
 80010fe:	f004 fb33 	bl	8005768 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001102:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001106:	f006 fbf7 	bl	80078f8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2102      	movs	r1, #2
 800110e:	4620      	mov	r0, r4
 8001110:	f004 fb2a 	bl	8005768 <HAL_GPIO_WritePin>
	osDelay(10000);
 8001114:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001118:	f006 fbee 	bl	80078f8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	4620      	mov	r0, r4
 8001122:	f004 fb21 	bl	8005768 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001126:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800112a:	f006 fbe5 	bl	80078f8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800112e:	4620      	mov	r0, r4
 8001130:	2201      	movs	r2, #1
}
 8001132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001136:	2102      	movs	r1, #2
 8001138:	f004 bb16 	b.w	8005768 <HAL_GPIO_WritePin>
 800113c:	48000800 	.word	0x48000800

08001140 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001140:	220a      	movs	r2, #10
 8001142:	fb90 f3f2 	sdiv	r3, r0, r2
 8001146:	fb02 0013 	mls	r0, r2, r3, r0
}
 800114a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800114e:	4770      	bx	lr

08001150 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001150:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001152:	4d43      	ldr	r5, [pc, #268]	@ (8001260 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001154:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001156:	69a8      	ldr	r0, [r5, #24]
 8001158:	f7ff fff2 	bl	8001140 <convert_dec_to_hex_value>
 800115c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001160:	6968      	ldr	r0, [r5, #20]
 8001162:	f7ff ffed 	bl	8001140 <convert_dec_to_hex_value>
 8001166:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800116a:	6928      	ldr	r0, [r5, #16]
 800116c:	f7ff ffe8 	bl	8001140 <convert_dec_to_hex_value>
 8001170:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001174:	6828      	ldr	r0, [r5, #0]
 8001176:	f7ff ffe3 	bl	8001140 <convert_dec_to_hex_value>
 800117a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800117e:	6868      	ldr	r0, [r5, #4]
 8001180:	f7ff ffde 	bl	8001140 <convert_dec_to_hex_value>
 8001184:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001188:	68a8      	ldr	r0, [r5, #8]
 800118a:	f7ff ffd9 	bl	8001140 <convert_dec_to_hex_value>
 800118e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001192:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001196:	a32e      	add	r3, pc, #184	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa3c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011a0:	ec41 0b10 	vmov	d0, r0, r1
 80011a4:	f00d fd9c 	bl	800ece0 <round>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f7ff fce4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b0:	a327      	add	r3, pc, #156	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011b6:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011c0:	ec41 0b10 	vmov	d0, r0, r1
 80011c4:	f00d fd8c 	bl	800ece0 <round>
 80011c8:	ec51 0b10 	vmov	r0, r1, d0
 80011cc:	f7ff fcd4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011d0:	0e33      	lsrs	r3, r6, #24
 80011d2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011d4:	1433      	asrs	r3, r6, #16
 80011d6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011d8:	1233      	asrs	r3, r6, #8
 80011da:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011dc:	0e03      	lsrs	r3, r0, #24
 80011de:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011e0:	1403      	asrs	r3, r0, #16
 80011e2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011e4:	1203      	asrs	r3, r0, #8
 80011e6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011e8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011ea:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011ec:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011f0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9b4 	bl	8000568 <__aeabi_f2d>
 8001200:	a315      	add	r3, pc, #84	@ (adr r3, 8001258 <save_rmc_to_location_info+0x108>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa07 	bl	8000618 <__aeabi_dmul>
 800120a:	ec41 0b10 	vmov	d0, r0, r1
 800120e:	f00d fd67 	bl	800ece0 <round>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	f7ff fcaf 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800121a:	1203      	asrs	r3, r0, #8
 800121c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800121e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001222:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	ec41 0b10 	vmov	d0, r0, r1
 800122c:	f00d fd58 	bl	800ece0 <round>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	f7ff fca0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001238:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800123a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800123e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001242:	f104 0011 	add.w	r0, r4, #17
}
 8001246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800124a:	f7ff becb 	b.w	8000fe4 <set_status_bit>
 800124e:	bf00      	nop
 8001250:	00000000 	.word	0x00000000
 8001254:	412e8480 	.word	0x412e8480
 8001258:	c083126f 	.word	0xc083126f
 800125c:	3ffda1ca 	.word	0x3ffda1ca
 8001260:	20000be8 	.word	0x20000be8

08001264 <first_check_SIM>:
    return 1;
}

//AT
int first_check_SIM()
{
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001266:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800126a:	2100      	movs	r1, #0
 800126c:	482f      	ldr	r0, [pc, #188]	@ (800132c <first_check_SIM+0xc8>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800126e:	4d30      	ldr	r5, [pc, #192]	@ (8001330 <first_check_SIM+0xcc>)
 8001270:	4c2e      	ldr	r4, [pc, #184]	@ (800132c <first_check_SIM+0xc8>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001272:	4e30      	ldr	r6, [pc, #192]	@ (8001334 <first_check_SIM+0xd0>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001274:	f009 fe7a 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001278:	f7ff fedc 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800127c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001280:	2100      	movs	r1, #0
 8001282:	482a      	ldr	r0, [pc, #168]	@ (800132c <first_check_SIM+0xc8>)
 8001284:	f009 fe72 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001288:	f7ff fed4 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f009 febc 	bl	800b00c <strstr>
 8001294:	2800      	cmp	r0, #0
 8001296:	d03a      	beq.n	800130e <first_check_SIM+0xaa>
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001298:	4826      	ldr	r0, [pc, #152]	@ (8001334 <first_check_SIM+0xd0>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800129a:	4e27      	ldr	r6, [pc, #156]	@ (8001338 <first_check_SIM+0xd4>)
 800129c:	4d23      	ldr	r5, [pc, #140]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("First check SIM MODULE\n");
 800129e:	4f27      	ldr	r7, [pc, #156]	@ (800133c <first_check_SIM+0xd8>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80012a0:	f7ff fee4 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012a8:	2100      	movs	r1, #0
 80012aa:	4820      	ldr	r0, [pc, #128]	@ (800132c <first_check_SIM+0xc8>)
 80012ac:	f009 fe5e 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012b0:	f7ff fec0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <first_check_SIM+0xdc>)
 80012b6:	f7ff fead 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012ba:	4631      	mov	r1, r6
 80012bc:	4628      	mov	r0, r5
 80012be:	f009 fea5 	bl	800b00c <strstr>
 80012c2:	4604      	mov	r4, r0
 80012c4:	bb50      	cbnz	r0, 800131c <first_check_SIM+0xb8>
	}
	receive_response("First check SIM MODULE\n");
 80012c6:	481d      	ldr	r0, [pc, #116]	@ (800133c <first_check_SIM+0xd8>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012c8:	4e1b      	ldr	r6, [pc, #108]	@ (8001338 <first_check_SIM+0xd4>)
 80012ca:	4d18      	ldr	r5, [pc, #96]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("Check status of SIM MODULE\n");
 80012cc:	4f1d      	ldr	r7, [pc, #116]	@ (8001344 <first_check_SIM+0xe0>)
	receive_response("First check SIM MODULE\n");
 80012ce:	f7ff fecd 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012d6:	4621      	mov	r1, r4
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <first_check_SIM+0xc8>)
 80012da:	f009 fe47 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012de:	f7ff fea9 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <first_check_SIM+0xe4>)
 80012e4:	f7ff fe96 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012e8:	4631      	mov	r1, r6
 80012ea:	4628      	mov	r0, r5
 80012ec:	f009 fe8e 	bl	800b00c <strstr>
 80012f0:	4604      	mov	r4, r0
 80012f2:	b9b8      	cbnz	r0, 8001324 <first_check_SIM+0xc0>
	}
	receive_response("Check status of SIM MODULE\n");
 80012f4:	4813      	ldr	r0, [pc, #76]	@ (8001344 <first_check_SIM+0xe0>)
 80012f6:	f7ff feb9 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012fe:	4621      	mov	r1, r4
 8001300:	480a      	ldr	r0, [pc, #40]	@ (800132c <first_check_SIM+0xc8>)
 8001302:	f009 fe33 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001306:	f7ff fe95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 800130a:	2001      	movs	r0, #1
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff feac 	bl	800106c <receive_response>
		osDelay(200);
 8001314:	20c8      	movs	r0, #200	@ 0xc8
 8001316:	f006 faef 	bl	80078f8 <osDelay>
 800131a:	e7b7      	b.n	800128c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 800131c:	4638      	mov	r0, r7
 800131e:	f7ff fea5 	bl	800106c <receive_response>
 8001322:	e7ca      	b.n	80012ba <first_check_SIM+0x56>
		receive_response("Check status of SIM MODULE\n");
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff fea1 	bl	800106c <receive_response>
 800132a:	e7dd      	b.n	80012e8 <first_check_SIM+0x84>
 800132c:	20000c74 	.word	0x20000c74
 8001330:	0800efd9 	.word	0x0800efd9
 8001334:	0800efb5 	.word	0x0800efb5
 8001338:	0800effe 	.word	0x0800effe
 800133c:	0800efe6 	.word	0x0800efe6
 8001340:	0800efe1 	.word	0x0800efe1
 8001344:	0800f00b 	.word	0x0800f00b
 8001348:	0800f001 	.word	0x0800f001

0800134c <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800134c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800134e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001350:	4604      	mov	r4, r0
 8001352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001356:	b1cb      	cbz	r3, 800138c <extract_last_12_digits_bcd+0x40>
 8001358:	2b41      	cmp	r3, #65	@ 0x41
 800135a:	d1f9      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800135c:	7803      	ldrb	r3, [r0, #0]
 800135e:	2b54      	cmp	r3, #84	@ 0x54
 8001360:	d1f6      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001362:	7843      	ldrb	r3, [r0, #1]
 8001364:	2b2b      	cmp	r3, #43	@ 0x2b
 8001366:	d1f3      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001368:	7883      	ldrb	r3, [r0, #2]
 800136a:	2b43      	cmp	r3, #67	@ 0x43
 800136c:	d1f0      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800136e:	78c3      	ldrb	r3, [r0, #3]
 8001370:	2b47      	cmp	r3, #71	@ 0x47
 8001372:	d1ed      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001374:	7903      	ldrb	r3, [r0, #4]
 8001376:	2b53      	cmp	r3, #83	@ 0x53
 8001378:	d1ea      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800137a:	7943      	ldrb	r3, [r0, #5]
 800137c:	2b4e      	cmp	r3, #78	@ 0x4e
 800137e:	d1e7      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001380:	7983      	ldrb	r3, [r0, #6]
 8001382:	2b3d      	cmp	r3, #61	@ 0x3d
 8001384:	d1e4      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001386:	79c3      	ldrb	r3, [r0, #7]
 8001388:	2b31      	cmp	r3, #49	@ 0x31
 800138a:	d1e1      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800138c:	4922      	ldr	r1, [pc, #136]	@ (8001418 <extract_last_12_digits_bcd+0xcc>)
 800138e:	4823      	ldr	r0, [pc, #140]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001390:	f003 fa1c 	bl	80047cc <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001394:	4821      	ldr	r0, [pc, #132]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001396:	4621      	mov	r1, r4
 8001398:	f003 fa18 	bl	80047cc <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800139c:	7823      	ldrb	r3, [r4, #0]
 800139e:	b96b      	cbnz	r3, 80013bc <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 80013a0:	491f      	ldr	r1, [pc, #124]	@ (8001420 <extract_last_12_digits_bcd+0xd4>)
 80013a2:	481e      	ldr	r0, [pc, #120]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013a4:	f003 fa12 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 80013a8:	4629      	mov	r1, r5
 80013aa:	481c      	ldr	r0, [pc, #112]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013ac:	f003 fa0e 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80013b0:	491c      	ldr	r1, [pc, #112]	@ (8001424 <extract_last_12_digits_bcd+0xd8>)
 80013b2:	481a      	ldr	r0, [pc, #104]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013b4:	f003 fa0a 	bl	80047cc <uart_transmit_string>
}
 80013b8:	b004      	add	sp, #16
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 80013bc:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 80013be:	7821      	ldrb	r1, [r4, #0]
 80013c0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80013c4:	4623      	mov	r3, r4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	3401      	adds	r4, #1
 80013ca:	b109      	cbz	r1, 80013d0 <extract_last_12_digits_bcd+0x84>
 80013cc:	2a09      	cmp	r2, #9
 80013ce:	d8f6      	bhi.n	80013be <extract_last_12_digits_bcd+0x72>
 80013d0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80013d2:	4616      	mov	r6, r2
 80013d4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013d8:	3930      	subs	r1, #48	@ 0x30
 80013da:	2909      	cmp	r1, #9
 80013dc:	d9f9      	bls.n	80013d2 <extract_last_12_digits_bcd+0x86>
 80013de:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80013e0:	4911      	ldr	r1, [pc, #68]	@ (8001428 <extract_last_12_digits_bcd+0xdc>)
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013e4:	f003 f9f2 	bl	80047cc <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80013e8:	4a10      	ldr	r2, [pc, #64]	@ (800142c <extract_last_12_digits_bcd+0xe0>)
 80013ea:	4623      	mov	r3, r4
 80013ec:	210a      	movs	r1, #10
 80013ee:	a801      	add	r0, sp, #4
 80013f0:	f009 fcc0 	bl	800ad74 <sniprintf>
		if (digit_count >= 12) {
 80013f4:	2c0b      	cmp	r4, #11
 80013f6:	d9d3      	bls.n	80013a0 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80013f8:	f1a6 030c 	sub.w	r3, r6, #12
 80013fc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013fe:	7819      	ldrb	r1, [r3, #0]
 8001400:	785a      	ldrb	r2, [r3, #1]
 8001402:	3930      	subs	r1, #48	@ 0x30
 8001404:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 8001406:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001408:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 800140c:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800140e:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 8001412:	d1f4      	bne.n	80013fe <extract_last_12_digits_bcd+0xb2>
 8001414:	e7c4      	b.n	80013a0 <extract_last_12_digits_bcd+0x54>
 8001416:	bf00      	nop
 8001418:	0800f027 	.word	0x0800f027
 800141c:	20001250 	.word	0x20001250
 8001420:	0800f049 	.word	0x0800f049
 8001424:	0800fc8e 	.word	0x0800fc8e
 8001428:	0800f064 	.word	0x0800f064
 800142c:	0800f494 	.word	0x0800f494

08001430 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001432:	488f      	ldr	r0, [pc, #572]	@ (8001670 <check_SIM_ready+0x240>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001434:	4d8f      	ldr	r5, [pc, #572]	@ (8001674 <check_SIM_ready+0x244>)
 8001436:	4c90      	ldr	r4, [pc, #576]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check IMEI-0:\n");
 8001438:	4e90      	ldr	r6, [pc, #576]	@ (800167c <check_SIM_ready+0x24c>)
	send_AT_command(GET_IMEI);
 800143a:	f7ff fdeb 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800143e:	4629      	mov	r1, r5
 8001440:	4620      	mov	r0, r4
 8001442:	f009 fde3 	bl	800b00c <strstr>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 80ef 	beq.w	800162a <check_SIM_ready+0x1fa>
	}
	receive_response("Check IMEI-0:\n");
 800144c:	488b      	ldr	r0, [pc, #556]	@ (800167c <check_SIM_ready+0x24c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800144e:	4d89      	ldr	r5, [pc, #548]	@ (8001674 <check_SIM_ready+0x244>)
 8001450:	4c89      	ldr	r4, [pc, #548]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001452:	4e8b      	ldr	r6, [pc, #556]	@ (8001680 <check_SIM_ready+0x250>)
	receive_response("Check IMEI-0:\n");
 8001454:	f7ff fe0a 	bl	800106c <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001458:	498a      	ldr	r1, [pc, #552]	@ (8001684 <check_SIM_ready+0x254>)
 800145a:	4887      	ldr	r0, [pc, #540]	@ (8001678 <check_SIM_ready+0x248>)
 800145c:	f7ff ff76 	bl	800134c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001460:	4989      	ldr	r1, [pc, #548]	@ (8001688 <check_SIM_ready+0x258>)
 8001462:	488a      	ldr	r0, [pc, #552]	@ (800168c <check_SIM_ready+0x25c>)
 8001464:	f003 f9b2 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 8001468:	4986      	ldr	r1, [pc, #536]	@ (8001684 <check_SIM_ready+0x254>)
 800146a:	4888      	ldr	r0, [pc, #544]	@ (800168c <check_SIM_ready+0x25c>)
 800146c:	f003 f9ae 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001470:	4987      	ldr	r1, [pc, #540]	@ (8001690 <check_SIM_ready+0x260>)
 8001472:	4886      	ldr	r0, [pc, #536]	@ (800168c <check_SIM_ready+0x25c>)
 8001474:	f003 f9aa 	bl	80047cc <uart_transmit_string>
	osDelay(100);
 8001478:	2064      	movs	r0, #100	@ 0x64
 800147a:	f006 fa3d 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800147e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001482:	2100      	movs	r1, #0
 8001484:	487c      	ldr	r0, [pc, #496]	@ (8001678 <check_SIM_ready+0x248>)
 8001486:	f009 fd71 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 800148a:	f7ff fdd3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 800148e:	4881      	ldr	r0, [pc, #516]	@ (8001694 <check_SIM_ready+0x264>)
 8001490:	f7ff fdc0 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001494:	4629      	mov	r1, r5
 8001496:	4620      	mov	r0, r4
 8001498:	f009 fdb8 	bl	800b00c <strstr>
 800149c:	2800      	cmp	r0, #0
 800149e:	f000 80c8 	beq.w	8001632 <check_SIM_ready+0x202>
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 80014a2:	4877      	ldr	r0, [pc, #476]	@ (8001680 <check_SIM_ready+0x250>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014a4:	4e73      	ldr	r6, [pc, #460]	@ (8001674 <check_SIM_ready+0x244>)
 80014a6:	4d74      	ldr	r5, [pc, #464]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM\n");
 80014a8:	4f7b      	ldr	r7, [pc, #492]	@ (8001698 <check_SIM_ready+0x268>)
	receive_response("Check MODEL IDENTIFICATION\n");
 80014aa:	f7ff fddf 	bl	800106c <receive_response>
	osDelay(100);
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f006 fa22 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014b4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014b8:	2100      	movs	r1, #0
 80014ba:	486f      	ldr	r0, [pc, #444]	@ (8001678 <check_SIM_ready+0x248>)
 80014bc:	f009 fd56 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014c0:	f7ff fdb8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80014c4:	4875      	ldr	r0, [pc, #468]	@ (800169c <check_SIM_ready+0x26c>)
 80014c6:	f7ff fda5 	bl	8001014 <send_AT_command>
	osDelay(100);
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f006 fa14 	bl	80078f8 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014d0:	2405      	movs	r4, #5
 80014d2:	4631      	mov	r1, r6
 80014d4:	4628      	mov	r0, r5
 80014d6:	f009 fd99 	bl	800b00c <strstr>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f000 80ad 	beq.w	800163a <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 80014e0:	486d      	ldr	r0, [pc, #436]	@ (8001698 <check_SIM_ready+0x268>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80014e2:	4e6f      	ldr	r6, [pc, #444]	@ (80016a0 <check_SIM_ready+0x270>)
 80014e4:	4d64      	ldr	r5, [pc, #400]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM CCID\n");
 80014e6:	4f6f      	ldr	r7, [pc, #444]	@ (80016a4 <check_SIM_ready+0x274>)
	receive_response("Check SIM\n");
 80014e8:	f7ff fdc0 	bl	800106c <receive_response>
	osDelay(100);
 80014ec:	2064      	movs	r0, #100	@ 0x64
 80014ee:	f006 fa03 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014f6:	2100      	movs	r1, #0
 80014f8:	485f      	ldr	r0, [pc, #380]	@ (8001678 <check_SIM_ready+0x248>)
 80014fa:	f009 fd37 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014fe:	f7ff fd99 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001502:	2064      	movs	r0, #100	@ 0x64
 8001504:	f006 f9f8 	bl	80078f8 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001508:	4867      	ldr	r0, [pc, #412]	@ (80016a8 <check_SIM_ready+0x278>)
 800150a:	f7ff fd83 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800150e:	2405      	movs	r4, #5
 8001510:	4631      	mov	r1, r6
 8001512:	4628      	mov	r0, r5
 8001514:	f009 fd7a 	bl	800b00c <strstr>
 8001518:	2800      	cmp	r0, #0
 800151a:	f000 809e 	beq.w	800165a <check_SIM_ready+0x22a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 800151e:	4861      	ldr	r0, [pc, #388]	@ (80016a4 <check_SIM_ready+0x274>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001520:	4d62      	ldr	r5, [pc, #392]	@ (80016ac <check_SIM_ready+0x27c>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001522:	4e63      	ldr	r6, [pc, #396]	@ (80016b0 <check_SIM_ready+0x280>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001524:	4c53      	ldr	r4, [pc, #332]	@ (8001674 <check_SIM_ready+0x244>)
	receive_response("Check SIM CCID\n");
 8001526:	f7ff fda1 	bl	800106c <receive_response>
	osDelay(100);
 800152a:	2064      	movs	r0, #100	@ 0x64
 800152c:	f006 f9e4 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001530:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001534:	2100      	movs	r1, #0
 8001536:	4850      	ldr	r0, [pc, #320]	@ (8001678 <check_SIM_ready+0x248>)
 8001538:	f009 fd18 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 800153c:	f7ff fd7a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001540:	485c      	ldr	r0, [pc, #368]	@ (80016b4 <check_SIM_ready+0x284>)
 8001542:	f7ff fd67 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001546:	485c      	ldr	r0, [pc, #368]	@ (80016b8 <check_SIM_ready+0x288>)
 8001548:	f7ff fd90 	bl	800106c <receive_response>
		send_AT_command("AT+CREG?\r\n");
 800154c:	4628      	mov	r0, r5
 800154e:	f7ff fd61 	bl	8001014 <send_AT_command>
		osDelay(150);
 8001552:	2096      	movs	r0, #150	@ 0x96
 8001554:	f006 f9d0 	bl	80078f8 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001558:	4630      	mov	r0, r6
 800155a:	f7ff fd87 	bl	800106c <receive_response>
		osDelay(300);
 800155e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001562:	f006 f9c9 	bl	80078f8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001566:	4844      	ldr	r0, [pc, #272]	@ (8001678 <check_SIM_ready+0x248>)
 8001568:	4621      	mov	r1, r4
 800156a:	f009 fd4f 	bl	800b00c <strstr>
		if(first_pointer != NULL){
 800156e:	2800      	cmp	r0, #0
 8001570:	d0ec      	beq.n	800154c <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001572:	4621      	mov	r1, r4
 8001574:	3001      	adds	r0, #1
 8001576:	f009 fd49 	bl	800b00c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800157a:	2800      	cmp	r0, #0
 800157c:	d0e6      	beq.n	800154c <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f006 f9ba 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001584:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001588:	2100      	movs	r1, #0
 800158a:	483b      	ldr	r0, [pc, #236]	@ (8001678 <check_SIM_ready+0x248>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 800158c:	4d4b      	ldr	r5, [pc, #300]	@ (80016bc <check_SIM_ready+0x28c>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 800158e:	4e4c      	ldr	r6, [pc, #304]	@ (80016c0 <check_SIM_ready+0x290>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001590:	4c38      	ldr	r4, [pc, #224]	@ (8001674 <check_SIM_ready+0x244>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001592:	f009 fceb 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001596:	f7ff fd4d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 800159a:	484a      	ldr	r0, [pc, #296]	@ (80016c4 <check_SIM_ready+0x294>)
 800159c:	f7ff fd3a 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 80015a0:	4849      	ldr	r0, [pc, #292]	@ (80016c8 <check_SIM_ready+0x298>)
 80015a2:	f7ff fd63 	bl	800106c <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fd34 	bl	8001014 <send_AT_command>
		osDelay(150);
 80015ac:	2096      	movs	r0, #150	@ 0x96
 80015ae:	f006 f9a3 	bl	80078f8 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 80015b2:	4630      	mov	r0, r6
 80015b4:	f7ff fd5a 	bl	800106c <receive_response>
		osDelay(300);
 80015b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015bc:	f006 f99c 	bl	80078f8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <check_SIM_ready+0x248>)
 80015c2:	4621      	mov	r1, r4
 80015c4:	f009 fd22 	bl	800b00c <strstr>
		if(first_pointer != NULL){
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0ec      	beq.n	80015a6 <check_SIM_ready+0x176>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80015cc:	4621      	mov	r1, r4
 80015ce:	3001      	adds	r0, #1
 80015d0:	f009 fd1c 	bl	800b00c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d0e6      	beq.n	80015a6 <check_SIM_ready+0x176>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80015d8:	2064      	movs	r0, #100	@ 0x64
 80015da:	f006 f98d 	bl	80078f8 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 80015de:	4838      	ldr	r0, [pc, #224]	@ (80016c0 <check_SIM_ready+0x290>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015e0:	4d24      	ldr	r5, [pc, #144]	@ (8001674 <check_SIM_ready+0x244>)
 80015e2:	4c25      	ldr	r4, [pc, #148]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check Signal Quality Report\n");
 80015e4:	4e39      	ldr	r6, [pc, #228]	@ (80016cc <check_SIM_ready+0x29c>)
	receive_response("Check Network Registration Status (PS Service)\n");
 80015e6:	f7ff fd41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015ee:	2100      	movs	r1, #0
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <check_SIM_ready+0x248>)
 80015f2:	f009 fcbb 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015f6:	f7ff fd1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80015fa:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <check_SIM_ready+0x2a0>)
 80015fc:	f7ff fd0a 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001600:	4629      	mov	r1, r5
 8001602:	4620      	mov	r0, r4
 8001604:	f009 fd02 	bl	800b00c <strstr>
 8001608:	b370      	cbz	r0, 8001668 <check_SIM_ready+0x238>
	}
	receive_response("Check Signal Quality Report\n");
 800160a:	4830      	ldr	r0, [pc, #192]	@ (80016cc <check_SIM_ready+0x29c>)
 800160c:	f7ff fd2e 	bl	800106c <receive_response>
	osDelay(100);
 8001610:	2064      	movs	r0, #100	@ 0x64
 8001612:	f006 f971 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001616:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800161a:	2100      	movs	r1, #0
 800161c:	4816      	ldr	r0, [pc, #88]	@ (8001678 <check_SIM_ready+0x248>)
 800161e:	f009 fca5 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001622:	f7ff fd07 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	

	return 1;
 8001626:	2001      	movs	r0, #1
 8001628:	e016      	b.n	8001658 <check_SIM_ready+0x228>
		receive_response("Check IMEI-0:\n");
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff fd1e 	bl	800106c <receive_response>
 8001630:	e705      	b.n	800143e <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001632:	4630      	mov	r0, r6
 8001634:	f7ff fd1a 	bl	800106c <receive_response>
 8001638:	e72c      	b.n	8001494 <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 800163a:	4638      	mov	r0, r7
 800163c:	f7ff fd16 	bl	800106c <receive_response>
		if (count_check_sim >= 5){
 8001640:	3c01      	subs	r4, #1
 8001642:	f47f af46 	bne.w	80014d2 <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001646:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800164a:	2100      	movs	r1, #0
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <check_SIM_ready+0x248>)
 800164e:	f009 fc8d 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001652:	f7ff fcef 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001656:	2000      	movs	r0, #0
}
 8001658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fd06 	bl	800106c <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 8001660:	3c01      	subs	r4, #1
 8001662:	f47f af55 	bne.w	8001510 <check_SIM_ready+0xe0>
 8001666:	e7ee      	b.n	8001646 <check_SIM_ready+0x216>
		receive_response("Check Signal Quality Report\n");
 8001668:	4630      	mov	r0, r6
 800166a:	f7ff fcff 	bl	800106c <receive_response>
 800166e:	e7c7      	b.n	8001600 <check_SIM_ready+0x1d0>
 8001670:	0800f08c 	.word	0x0800f08c
 8001674:	0800effe 	.word	0x0800effe
 8001678:	20000c74 	.word	0x20000c74
 800167c:	0800f098 	.word	0x0800f098
 8001680:	0800f0ca 	.word	0x0800f0ca
 8001684:	20000bdc 	.word	0x20000bdc
 8001688:	0800f0a7 	.word	0x0800f0a7
 800168c:	20001250 	.word	0x20001250
 8001690:	0800fc8e 	.word	0x0800fc8e
 8001694:	0800f0c0 	.word	0x0800f0c0
 8001698:	0800f0f1 	.word	0x0800f0f1
 800169c:	0800f0e6 	.word	0x0800f0e6
 80016a0:	0800f117 	.word	0x0800f117
 80016a4:	0800f107 	.word	0x0800f107
 80016a8:	0800f0fc 	.word	0x0800f0fc
 80016ac:	0800f160 	.word	0x0800f160
 80016b0:	0800f16b 	.word	0x0800f16b
 80016b4:	0800f11f 	.word	0x0800f11f
 80016b8:	0800f12b 	.word	0x0800f12b
 80016bc:	0800f1dd 	.word	0x0800f1dd
 80016c0:	0800f1e9 	.word	0x0800f1e9
 80016c4:	0800f19b 	.word	0x0800f19b
 80016c8:	0800f1a8 	.word	0x0800f1a8
 80016cc:	0800f222 	.word	0x0800f222
 80016d0:	0800f219 	.word	0x0800f219

080016d4 <check_configure_APN>:

void check_configure_APN(){
 80016d4:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <check_configure_APN+0x18>)
 80016d8:	f7ff fc9c 	bl	8001014 <send_AT_command>
	osDelay(150);
 80016dc:	2096      	movs	r0, #150	@ 0x96
 80016de:	f006 f90b 	bl	80078f8 <osDelay>
	receive_response("Check Configuring APN\n");
}
 80016e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 80016e6:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <check_configure_APN+0x1c>)
 80016e8:	f7ff bcc0 	b.w	800106c <receive_response>
 80016ec:	0800f23f 	.word	0x0800f23f
 80016f0:	0800f24d 	.word	0x0800f24d

080016f4 <configure_APN>:

int configure_APN(int context_id){
 80016f4:	b530      	push	{r4, r5, lr}
 80016f6:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016f8:	2200      	movs	r2, #0
 80016fa:	9204      	str	r2, [sp, #16]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80016fe:	4c17      	ldr	r4, [pc, #92]	@ (800175c <configure_APN+0x68>)
 8001700:	4d17      	ldr	r5, [pc, #92]	@ (8001760 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001702:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <configure_APN+0x70>)
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	2201      	movs	r2, #1
int configure_APN(int context_id){
 800170c:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800170e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	a806      	add	r0, sp, #24
 8001716:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <configure_APN+0x74>)
 8001718:	f009 fb2c 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 800171c:	a806      	add	r0, sp, #24
 800171e:	f7ff fc79 	bl	8001014 <send_AT_command>
	osDelay(150);
 8001722:	2096      	movs	r0, #150	@ 0x96
 8001724:	f006 f8e8 	bl	80078f8 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001728:	4810      	ldr	r0, [pc, #64]	@ (800176c <configure_APN+0x78>)
 800172a:	f7ff fc9f 	bl	800106c <receive_response>
		check_configure_APN();
 800172e:	f7ff ffd1 	bl	80016d4 <check_configure_APN>
		osDelay(300);
 8001732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001736:	f006 f8df 	bl	80078f8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <configure_APN+0x68>)
 800173c:	4628      	mov	r0, r5
 800173e:	f009 fc65 	bl	800b00c <strstr>
		if(first_pointer != NULL){
 8001742:	2800      	cmp	r0, #0
 8001744:	d0f3      	beq.n	800172e <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001746:	4621      	mov	r1, r4
 8001748:	3001      	adds	r0, #1
 800174a:	f009 fc5f 	bl	800b00c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800174e:	2800      	cmp	r0, #0
 8001750:	d0ed      	beq.n	800172e <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001752:	2001      	movs	r0, #1
 8001754:	b047      	add	sp, #284	@ 0x11c
 8001756:	bd30      	pop	{r4, r5, pc}
 8001758:	0800fc59 	.word	0x0800fc59
 800175c:	0800effe 	.word	0x0800effe
 8001760:	20000c74 	.word	0x20000c74
 8001764:	0800f28a 	.word	0x0800f28a
 8001768:	0800f264 	.word	0x0800f264
 800176c:	0800f294 	.word	0x0800f294

08001770 <check_activate_context>:

void check_activate_context(){
 8001770:	b500      	push	{lr}
 8001772:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001774:	4906      	ldr	r1, [pc, #24]	@ (8001790 <check_activate_context+0x20>)
 8001776:	4668      	mov	r0, sp
 8001778:	f00a fa49 	bl	800bc0e <strcpy>
	send_AT_command((char*)command);
 800177c:	4668      	mov	r0, sp
 800177e:	f7ff fc49 	bl	8001014 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001782:	4804      	ldr	r0, [pc, #16]	@ (8001794 <check_activate_context+0x24>)
 8001784:	f7ff fc72 	bl	800106c <receive_response>
}
 8001788:	b021      	add	sp, #132	@ 0x84
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
 800178e:	bf00      	nop
 8001790:	0800f2a3 	.word	0x0800f2a3
 8001794:	0800f2af 	.word	0x0800f2af

08001798 <activate_context>:
		// Wait until the counter reaches 1000
		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
	}
	is_40s = 1;
}
int activate_context(int context_id){
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	b0a0      	sub	sp, #128	@ 0x80
 800179e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017a0:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <activate_context+0xd0>)
	osDelay(150);
	receive_response("Activate Context\r\n");
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	int count_check = 0;
	HAL_TIM_Base_Start(&htim3);
 80017a2:	4c32      	ldr	r4, [pc, #200]	@ (800186c <activate_context+0xd4>)
		osDelay(300);
		if(count_check >= 50){
			count_check = 0;
			return 0;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 80017a4:	4f32      	ldr	r7, [pc, #200]	@ (8001870 <activate_context+0xd8>)
 80017a6:	4e33      	ldr	r6, [pc, #204]	@ (8001874 <activate_context+0xdc>)
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}

		receive_response("Check Activate Context\r\n");
 80017a8:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001880 <activate_context+0xe8>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	4668      	mov	r0, sp
 80017b0:	f009 fae0 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 80017b4:	4668      	mov	r0, sp
 80017b6:	f7ff fc2d 	bl	8001014 <send_AT_command>
	osDelay(150);
 80017ba:	2096      	movs	r0, #150	@ 0x96
 80017bc:	f006 f89c 	bl	80078f8 <osDelay>
	receive_response("Activate Context\r\n");
 80017c0:	482d      	ldr	r0, [pc, #180]	@ (8001878 <activate_context+0xe0>)
 80017c2:	f7ff fc53 	bl	800106c <receive_response>
	HAL_TIM_Base_Start(&htim3);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f005 fa08 	bl	8006bdc <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	2400      	movs	r4, #0
 80017d0:	625c      	str	r4, [r3, #36]	@ 0x24
 80017d2:	2533      	movs	r5, #51	@ 0x33
		check_activate_context();
 80017d4:	f7ff ffcc 	bl	8001770 <check_activate_context>
		osDelay(300);
 80017d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017dc:	f006 f88c 	bl	80078f8 <osDelay>
		if(count_check >= 50){
 80017e0:	3d01      	subs	r5, #1
 80017e2:	d021      	beq.n	8001828 <activate_context+0x90>
		if (strstr((char*)response, "ERROR") != NULL){
 80017e4:	4639      	mov	r1, r7
 80017e6:	4630      	mov	r0, r6
 80017e8:	f009 fc10 	bl	800b00c <strstr>
 80017ec:	b300      	cbz	r0, 8001830 <activate_context+0x98>
			osDelay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017f2:	f006 f881 	bl	80078f8 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017fa:	2100      	movs	r1, #0
 80017fc:	4630      	mov	r0, r6
 80017fe:	f009 fbb5 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001802:	f7ff fc17 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001806:	4668      	mov	r0, sp
 8001808:	f7ff fc04 	bl	8001014 <send_AT_command>
			count_error++;
 800180c:	3401      	adds	r4, #1
			osDelay(200);
 800180e:	20c8      	movs	r0, #200	@ 0xc8
 8001810:	f006 f872 	bl	80078f8 <osDelay>
		if(count_error >=3){
 8001814:	2c03      	cmp	r4, #3
 8001816:	d10b      	bne.n	8001830 <activate_context+0x98>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001818:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800181c:	2100      	movs	r1, #0
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <activate_context+0xdc>)
 8001820:	f009 fba4 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001824:	f7ff fc06 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001828:	2000      	movs	r0, #0
	}
	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 800182a:	b020      	add	sp, #128	@ 0x80
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001830:	4640      	mov	r0, r8
 8001832:	f7ff fc1b 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001836:	4911      	ldr	r1, [pc, #68]	@ (800187c <activate_context+0xe4>)
 8001838:	4630      	mov	r0, r6
 800183a:	f009 fbe7 	bl	800b00c <strstr>
		if(first_pointer != NULL){
 800183e:	2800      	cmp	r0, #0
 8001840:	d0c8      	beq.n	80017d4 <activate_context+0x3c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001842:	490e      	ldr	r1, [pc, #56]	@ (800187c <activate_context+0xe4>)
 8001844:	3001      	adds	r0, #1
 8001846:	f009 fbe1 	bl	800b00c <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 800184a:	2800      	cmp	r0, #0
 800184c:	d0c2      	beq.n	80017d4 <activate_context+0x3c>
	HAL_TIM_Base_Start(&htim3);
 800184e:	4807      	ldr	r0, [pc, #28]	@ (800186c <activate_context+0xd4>)
 8001850:	f005 f9c4 	bl	8006bdc <HAL_TIM_Base_Start>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001854:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001858:	2100      	movs	r1, #0
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <activate_context+0xdc>)
 800185c:	f009 fb86 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001860:	f7ff fbe8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001864:	2001      	movs	r0, #1
 8001866:	e7e0      	b.n	800182a <activate_context+0x92>
 8001868:	0800f2c7 	.word	0x0800f2c7
 800186c:	200012d8 	.word	0x200012d8
 8001870:	0800f2d5 	.word	0x0800f2d5
 8001874:	20000c74 	.word	0x20000c74
 8001878:	0800f2e1 	.word	0x0800f2e1
 800187c:	0800effe 	.word	0x0800effe
 8001880:	0800f2db 	.word	0x0800f2db

08001884 <deactivate_context>:

int deactivate_context(int context_id){
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 800188a:	2064      	movs	r0, #100	@ 0x64
 800188c:	f006 f834 	bl	80078f8 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001890:	4623      	mov	r3, r4
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001894:	4e1d      	ldr	r6, [pc, #116]	@ (800190c <deactivate_context+0x88>)
 8001896:	4d1e      	ldr	r5, [pc, #120]	@ (8001910 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001898:	4f1e      	ldr	r7, [pc, #120]	@ (8001914 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	4668      	mov	r0, sp
 800189e:	f009 fa69 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 80018a2:	4668      	mov	r0, sp
 80018a4:	f7ff fbb6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018a8:	2415      	movs	r4, #21
 80018aa:	4631      	mov	r1, r6
 80018ac:	4628      	mov	r0, r5
 80018ae:	f009 fbad 	bl	800b00c <strstr>
 80018b2:	b178      	cbz	r0, 80018d4 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 80018b4:	4817      	ldr	r0, [pc, #92]	@ (8001914 <deactivate_context+0x90>)
 80018b6:	f7ff fbd9 	bl	800106c <receive_response>
	osDelay(100);
 80018ba:	2064      	movs	r0, #100	@ 0x64
 80018bc:	f006 f81c 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018c4:	2100      	movs	r1, #0
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <deactivate_context+0x8c>)
 80018c8:	f009 fb50 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80018cc:	f7ff fbb2 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e010      	b.n	80018f6 <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 80018d4:	4638      	mov	r0, r7
 80018d6:	f7ff fbc9 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80018da:	490f      	ldr	r1, [pc, #60]	@ (8001918 <deactivate_context+0x94>)
 80018dc:	4628      	mov	r0, r5
 80018de:	f009 fb95 	bl	800b00c <strstr>
 80018e2:	b150      	cbz	r0, 80018fa <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018e4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018e8:	2100      	movs	r1, #0
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <deactivate_context+0x8c>)
 80018ec:	f009 fb3e 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 80018f0:	f7ff fba0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	b021      	add	sp, #132	@ 0x84
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 80018fa:	3c01      	subs	r4, #1
 80018fc:	d0f2      	beq.n	80018e4 <deactivate_context+0x60>
		osDelay(200);
 80018fe:	20c8      	movs	r0, #200	@ 0xc8
 8001900:	f005 fffa 	bl	80078f8 <osDelay>
 8001904:	e7d1      	b.n	80018aa <deactivate_context+0x26>
 8001906:	bf00      	nop
 8001908:	0800f2f4 	.word	0x0800f2f4
 800190c:	0800effe 	.word	0x0800effe
 8001910:	20000c74 	.word	0x20000c74
 8001914:	0800f304 	.word	0x0800f304
 8001918:	0800f2d5 	.word	0x0800f2d5

0800191c <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 800191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001920:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001926:	f241 3397 	movw	r3, #5015	@ 0x1397
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <open_socket_service+0x13c>)
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <open_socket_service+0x140>)
 8001932:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <open_socket_service+0x144>)
	//time_t start = time(NULL);
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001934:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8001a78 <open_socket_service+0x15c>
		if (strstr((char *) response, "ERROR") != NULL){
 8001938:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8001a88 <open_socket_service+0x16c>
 800193c:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8001a6c <open_socket_service+0x150>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001940:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001944:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001946:	4603      	mov	r3, r0
 8001948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800194c:	a826      	add	r0, sp, #152	@ 0x98
 800194e:	f009 fa11 	bl	800ad74 <sniprintf>
	send_AT_command((char *) command);
 8001952:	a826      	add	r0, sp, #152	@ 0x98
 8001954:	f7ff fb5e 	bl	8001014 <send_AT_command>
	osDelay(100);
 8001958:	2064      	movs	r0, #100	@ 0x64
 800195a:	f005 ffcd 	bl	80078f8 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 800195e:	4941      	ldr	r1, [pc, #260]	@ (8001a64 <open_socket_service+0x148>)
 8001960:	4841      	ldr	r0, [pc, #260]	@ (8001a68 <open_socket_service+0x14c>)
 8001962:	f002 ff33 	bl	80047cc <uart_transmit_string>
	int count_error = 0;
 8001966:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001968:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 800196a:	4648      	mov	r0, r9
 800196c:	f7ff fb7e 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001970:	4651      	mov	r1, sl
 8001972:	4640      	mov	r0, r8
 8001974:	f009 fb4a 	bl	800b00c <strstr>
 8001978:	b1e8      	cbz	r0, 80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800197a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800197e:	2100      	movs	r1, #0
 8001980:	4640      	mov	r0, r8
 8001982:	f009 faf3 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001986:	f7ff fb55 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 800198a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800198e:	f005 ffb3 	bl	80078f8 <osDelay>
			count_error++;
 8001992:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001994:	a826      	add	r0, sp, #152	@ 0x98
 8001996:	f7ff fb3d 	bl	8001014 <send_AT_command>
		}
		if(count_error >= 6){
 800199a:	2f06      	cmp	r7, #6
 800199c:	d10b      	bne.n	80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800199e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019a2:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019a4:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <open_socket_service+0x150>)
 80019a6:	f009 fae1 	bl	800af6c <memset>
				SIM_UART_ReInitializeRxDMA();
 80019aa:	f7ff fb43 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80019ae:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 80019b0:	b066      	add	sp, #408	@ 0x198
 80019b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019b6:	492e      	ldr	r1, [pc, #184]	@ (8001a70 <open_socket_service+0x154>)
 80019b8:	4640      	mov	r0, r8
 80019ba:	f009 fb27 	bl	800b00c <strstr>
		elapsed_time_ms++;
 80019be:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <open_socket_service+0x158>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019c2:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c4:	4633      	mov	r3, r6
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	a806      	add	r0, sp, #24
 80019ca:	f009 f9d3 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80019ce:	4826      	ldr	r0, [pc, #152]	@ (8001a68 <open_socket_service+0x14c>)
 80019d0:	a906      	add	r1, sp, #24
 80019d2:	f002 fefb 	bl	80047cc <uart_transmit_string>
		osDelay(300);
 80019d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019da:	f005 ff8d 	bl	80078f8 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 80019de:	b90d      	cbnz	r5, 80019e4 <open_socket_service+0xc8>
 80019e0:	2e32      	cmp	r6, #50	@ 0x32
 80019e2:	d1c2      	bne.n	800196a <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <open_socket_service+0x15c>)
 80019e6:	f7ff fb41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019ee:	2100      	movs	r1, #0
 80019f0:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <open_socket_service+0x150>)
 80019f2:	f009 fabb 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 80019f6:	f7ff fb1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	d0d7      	beq.n	80019ae <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019fe:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <open_socket_service+0x160>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a00:	4e1f      	ldr	r6, [pc, #124]	@ (8001a80 <open_socket_service+0x164>)
 8001a02:	4d1a      	ldr	r5, [pc, #104]	@ (8001a6c <open_socket_service+0x150>)
			receive_response("Check SOCKET CONNECTION\n");
 8001a04:	4f1f      	ldr	r7, [pc, #124]	@ (8001a84 <open_socket_service+0x168>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001a06:	4623      	mov	r3, r4
 8001a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0c:	a826      	add	r0, sp, #152	@ 0x98
 8001a0e:	f009 f9b1 	bl	800ad74 <sniprintf>
		send_AT_command((char*) command);
 8001a12:	a826      	add	r0, sp, #152	@ 0x98
 8001a14:	f7ff fafe 	bl	8001014 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f009 faf6 	bl	800b00c <strstr>
 8001a20:	4604      	mov	r4, r0
 8001a22:	b160      	cbz	r0, 8001a3e <open_socket_service+0x122>
		osDelay(100);
 8001a24:	2064      	movs	r0, #100	@ 0x64
 8001a26:	f005 ff67 	bl	80078f8 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a2e:	2100      	movs	r1, #0
 8001a30:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <open_socket_service+0x150>)
 8001a32:	f009 fa9b 	bl	800af6c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a36:	f7ff fafd 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7b8      	b.n	80019b0 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001a3e:	4638      	mov	r0, r7
 8001a40:	f7ff fb14 	bl	800106c <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001a44:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <open_socket_service+0x16c>)
 8001a46:	4628      	mov	r0, r5
 8001a48:	f009 fae0 	bl	800b00c <strstr>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d0e3      	beq.n	8001a18 <open_socket_service+0xfc>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a50:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a54:	4621      	mov	r1, r4
 8001a56:	e7a5      	b.n	80019a4 <open_socket_service+0x88>
 8001a58:	0800f33d 	.word	0x0800f33d
 8001a5c:	0800f34c 	.word	0x0800f34c
 8001a60:	0800f318 	.word	0x0800f318
 8001a64:	0800f350 	.word	0x0800f350
 8001a68:	20001250 	.word	0x20001250
 8001a6c:	20000c74 	.word	0x20000c74
 8001a70:	0800f37f 	.word	0x0800f37f
 8001a74:	0800f388 	.word	0x0800f388
 8001a78:	0800f361 	.word	0x0800f361
 8001a7c:	0800f39a 	.word	0x0800f39a
 8001a80:	0800effe 	.word	0x0800effe
 8001a84:	0800f3ac 	.word	0x0800f3ac
 8001a88:	0800f2d5 	.word	0x0800f2d5

08001a8c <check_socket_connection>:

//QPING command
void check_socket_connection(int context_ID){
 8001a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a90:	b0c3      	sub	sp, #268	@ 0x10c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a92:	4a29      	ldr	r2, [pc, #164]	@ (8001b38 <check_socket_connection+0xac>)
 8001a94:	9200      	str	r2, [sp, #0]
void check_socket_connection(int context_ID){
 8001a96:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <check_socket_connection+0xb0>)
	char *second_pointer = NULL;
	char *third_pointer = NULL;
	char *fourth_pointer = NULL;
	char *fifth_pointer = NULL;
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
		receive_response("Check SOCKET CONNECTION\n");
 8001a9a:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8001b40 <check_socket_connection+0xb4>
		first_pointer = strstr((char*)response, "+QPING:");
 8001a9e:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001b48 <check_socket_connection+0xbc>
 8001aa2:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8001b44 <check_socket_connection+0xb8>
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	a802      	add	r0, sp, #8
 8001aac:	f009 f962 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 8001ab0:	a802      	add	r0, sp, #8
 8001ab2:	f7ff faaf 	bl	8001014 <send_AT_command>
	char *fifth_pointer = NULL;
 8001ab6:	2400      	movs	r4, #0
	char *fourth_pointer = NULL;
 8001ab8:	4627      	mov	r7, r4
	char *third_pointer = NULL;
 8001aba:	4626      	mov	r6, r4
	char *second_pointer = NULL;
 8001abc:	4625      	mov	r5, r4
		receive_response("Check SOCKET CONNECTION\n");
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f7ff fad4 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, "+QPING:");
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4658      	mov	r0, fp
 8001ac8:	f009 faa0 	bl	800b00c <strstr>
		if(first_pointer != NULL){
 8001acc:	4681      	mov	r9, r0
 8001ace:	b120      	cbz	r0, 8001ada <check_socket_connection+0x4e>
			 second_pointer = strstr(first_pointer+1, "+QPING:");
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	f009 fa9a 	bl	800b00c <strstr>
 8001ad8:	4605      	mov	r5, r0
		}
		if(second_pointer != NULL){
 8001ada:	b125      	cbz	r5, 8001ae6 <check_socket_connection+0x5a>
			 third_pointer = strstr(second_pointer+1, "+QPING:");
 8001adc:	4641      	mov	r1, r8
 8001ade:	1c68      	adds	r0, r5, #1
 8001ae0:	f009 fa94 	bl	800b00c <strstr>
 8001ae4:	4606      	mov	r6, r0
		}
		if(third_pointer != NULL){
 8001ae6:	b126      	cbz	r6, 8001af2 <check_socket_connection+0x66>
			 fourth_pointer = strstr(third_pointer+1, "+QPING:");
 8001ae8:	4641      	mov	r1, r8
 8001aea:	1c70      	adds	r0, r6, #1
 8001aec:	f009 fa8e 	bl	800b00c <strstr>
 8001af0:	4607      	mov	r7, r0
		}
		if(fourth_pointer != NULL){
 8001af2:	b127      	cbz	r7, 8001afe <check_socket_connection+0x72>
			 fifth_pointer = strstr(fourth_pointer+1, "+QPING:");
 8001af4:	4641      	mov	r1, r8
 8001af6:	1c78      	adds	r0, r7, #1
 8001af8:	f009 fa88 	bl	800b00c <strstr>
 8001afc:	4604      	mov	r4, r0
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
 8001afe:	f1b9 0f00 	cmp.w	r9, #0
 8001b02:	d0dc      	beq.n	8001abe <check_socket_connection+0x32>
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	d0da      	beq.n	8001abe <check_socket_connection+0x32>
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	d0d8      	beq.n	8001abe <check_socket_connection+0x32>
 8001b0c:	2f00      	cmp	r7, #0
 8001b0e:	d0d6      	beq.n	8001abe <check_socket_connection+0x32>
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d0d4      	beq.n	8001abe <check_socket_connection+0x32>
		}
	}
	receive_response("Check SOCKET CONNECTION\n");
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <check_socket_connection+0xb4>)
 8001b16:	f7ff faa9 	bl	800106c <receive_response>
	osDelay(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f005 feec 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b20:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b24:	2100      	movs	r1, #0
 8001b26:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <check_socket_connection+0xb8>)
 8001b28:	f009 fa20 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b2c:	f7ff fa82 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
}
 8001b30:	b043      	add	sp, #268	@ 0x10c
 8001b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	0800f33d 	.word	0x0800f33d
 8001b3c:	0800f3c5 	.word	0x0800f3c5
 8001b40:	0800f3ac 	.word	0x0800f3ac
 8001b44:	20000c74 	.word	0x20000c74
 8001b48:	0800f3d8 	.word	0x0800f3d8

08001b4c <formatToHexString>:

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001b50:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b52:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001b88 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b56:	4607      	mov	r7, r0
 8001b58:	460e      	mov	r6, r1
 8001b5a:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001b5c:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b5e:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001b62:	42b5      	cmp	r5, r6
 8001b64:	db02      	blt.n	8001b6c <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001b66:	4620      	mov	r0, r4
 8001b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001b6c:	3402      	adds	r4, #2
 8001b6e:	4544      	cmp	r4, r8
 8001b70:	da07      	bge.n	8001b82 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b72:	5d7a      	ldrb	r2, [r7, r5]
 8001b74:	4651      	mov	r1, sl
 8001b76:	eb09 0004 	add.w	r0, r9, r4
 8001b7a:	f009 f92f 	bl	800addc <siprintf>
    for (int i = 0; i < length; i++) {
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7ef      	b.n	8001b62 <formatToHexString+0x16>
            return -1;
 8001b82:	f04f 34ff 	mov.w	r4, #4294967295
 8001b86:	e7ee      	b.n	8001b66 <formatToHexString+0x1a>
 8001b88:	0800ff1d 	.word	0x0800ff1d

08001b8c <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b8e:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b90:	460c      	mov	r4, r1
 8001b92:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	460a      	mov	r2, r1
 8001b9a:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b9c:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b9e:	f7ff ffd5 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	2102      	movs	r1, #2
 8001baa:	1c70      	adds	r0, r6, #1
 8001bac:	f7ff ffce 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	1cf0      	adds	r0, r6, #3
 8001bba:	f7ff ffc7 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	9000      	str	r0, [sp, #0]
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	2106      	movs	r1, #6
 8001bc6:	1d70      	adds	r0, r6, #5
 8001bc8:	f7ff ffc0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001bcc:	462b      	mov	r3, r5
 8001bce:	9000      	str	r0, [sp, #0]
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	f106 000b 	add.w	r0, r6, #11
 8001bd8:	f7ff ffb8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001bdc:	462b      	mov	r3, r5
 8001bde:	9000      	str	r0, [sp, #0]
 8001be0:	4622      	mov	r2, r4
 8001be2:	2102      	movs	r1, #2
 8001be4:	f106 000d 	add.w	r0, r6, #13
 8001be8:	f7ff ffb0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001bec:	462b      	mov	r3, r5
 8001bee:	9000      	str	r0, [sp, #0]
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	f106 000f 	add.w	r0, r6, #15
 8001bf8:	f7ff ffa8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	9000      	str	r0, [sp, #0]
 8001c00:	4622      	mov	r2, r4
 8001c02:	2105      	movs	r1, #5
 8001c04:	f106 0011 	add.w	r0, r6, #17
 8001c08:	f7ff ffa0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	9000      	str	r0, [sp, #0]
 8001c10:	4622      	mov	r2, r4
 8001c12:	2108      	movs	r1, #8
 8001c14:	f106 0016 	add.w	r0, r6, #22
 8001c18:	f7ff ff98 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	9000      	str	r0, [sp, #0]
 8001c20:	4622      	mov	r2, r4
 8001c22:	2107      	movs	r1, #7
 8001c24:	f106 001e 	add.w	r0, r6, #30
 8001c28:	f7ff ff90 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	9000      	str	r0, [sp, #0]
 8001c30:	4622      	mov	r2, r4
 8001c32:	2101      	movs	r1, #1
 8001c34:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001c38:	f7ff ff88 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	9000      	str	r0, [sp, #0]
 8001c40:	4622      	mov	r2, r4
 8001c42:	2114      	movs	r1, #20
 8001c44:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001c48:	f7ff ff80 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	4622      	mov	r2, r4
 8001c52:	2101      	movs	r1, #1
 8001c54:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001c58:	f7ff ff78 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	9000      	str	r0, [sp, #0]
 8001c60:	4622      	mov	r2, r4
 8001c62:	2101      	movs	r1, #1
 8001c64:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001c68:	f7ff ff70 	bl	8001b4c <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001c6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001c70:	b002      	add	sp, #8
 8001c72:	bd70      	pop	{r4, r5, r6, pc}

08001c74 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c78:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001c7a:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001c7c:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001c7e:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001c80:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c82:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001c84:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c86:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001c8a:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c8c:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001c90:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c92:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001c96:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c98:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001c9c:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001c9e:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001ca2:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001ca4:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001caa:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001cae:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb0:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001cb4:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb6:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001cba:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cbc:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001cc0:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc2:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001cc6:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc8:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001ccc:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cce:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001cd2:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cd4:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001cd8:	9002      	str	r0, [sp, #8]
 8001cda:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cdc:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001cde:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001ce2:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001ce4:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cea:	490f      	ldr	r1, [pc, #60]	@ (8001d28 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001cec:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cee:	2250      	movs	r2, #80	@ 0x50
 8001cf0:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001cf2:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cf4:	f009 ff93 	bl	800bc1e <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cf8:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001cfc:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cfe:	9000      	str	r0, [sp, #0]
 8001d00:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001d04:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001d08:	4633      	mov	r3, r6
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	f7ff ff1e 	bl	8001b4c <formatToHexString>
        if (writeIndex < 0) return -1;
 8001d10:	2800      	cmp	r0, #0
 8001d12:	db05      	blt.n	8001d20 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001d14:	3401      	adds	r4, #1
 8001d16:	2c14      	cmp	r4, #20
 8001d18:	d1f1      	bne.n	8001cfe <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001d1a:	b02a      	add	sp, #168	@ 0xa8
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e7f9      	b.n	8001d1a <generateLocationInfoMessage+0xa6>
 8001d26:	bf00      	nop
 8001d28:	0800ee08 	.word	0x0800ee08

08001d2c <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001d32:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d34:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001d36:	ae02      	add	r6, sp, #8
 8001d38:	227c      	movs	r2, #124	@ 0x7c
 8001d3a:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d3c:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001d3e:	a803      	add	r0, sp, #12
 8001d40:	6034      	str	r4, [r6, #0]
 8001d42:	f009 f913 	bl	800af6c <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	4631      	mov	r1, r6
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff ff1e 	bl	8001b8c <generateRegistrationMessage>
	if (result < 0) {
 8001d50:	42a0      	cmp	r0, r4
 8001d52:	da05      	bge.n	8001d60 <login_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001d54:	4926      	ldr	r1, [pc, #152]	@ (8001df0 <login_to_server+0xc4>)
 8001d56:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <login_to_server+0xc8>)
 8001d58:	f002 fd38 	bl	80047cc <uart_transmit_string>
		return 1;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e02f      	b.n	8001dc0 <login_to_server+0x94>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001d60:	462b      	mov	r3, r5
 8001d62:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <login_to_server+0xcc>)
 8001d64:	9600      	str	r6, [sp, #0]
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	a842      	add	r0, sp, #264	@ 0x108
 8001d6c:	f009 f802 	bl	800ad74 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001d70:	a842      	add	r0, sp, #264	@ 0x108
 8001d72:	f7ff f94f 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d76:	4e21      	ldr	r6, [pc, #132]	@ (8001dfc <login_to_server+0xd0>)
 8001d78:	4d21      	ldr	r5, [pc, #132]	@ (8001e00 <login_to_server+0xd4>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001d7a:	4f22      	ldr	r7, [pc, #136]	@ (8001e04 <login_to_server+0xd8>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f009 f944 	bl	800b00c <strstr>
 8001d84:	b170      	cbz	r0, 8001da4 <login_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001d86:	481f      	ldr	r0, [pc, #124]	@ (8001e04 <login_to_server+0xd8>)
 8001d88:	f7ff f970 	bl	800106c <receive_response>
	osDelay(100);
 8001d8c:	2064      	movs	r0, #100	@ 0x64
 8001d8e:	f005 fdb3 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d96:	2100      	movs	r1, #0
 8001d98:	4819      	ldr	r0, [pc, #100]	@ (8001e00 <login_to_server+0xd4>)
 8001d9a:	f009 f8e7 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d9e:	f7ff f949 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001da2:	e7db      	b.n	8001d5c <login_to_server+0x30>
		receive_response("Check sending to server\n");
 8001da4:	4638      	mov	r0, r7
 8001da6:	f7ff f961 	bl	800106c <receive_response>
		if(count_check >= 3){
 8001daa:	2c03      	cmp	r4, #3
 8001dac:	d10b      	bne.n	8001dc6 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001dae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001db2:	2100      	movs	r1, #0
 8001db4:	4812      	ldr	r0, [pc, #72]	@ (8001e00 <login_to_server+0xd4>)
 8001db6:	f009 f8d9 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001dba:	f7ff f93b 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <login_to_server+0xdc>)
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f009 f91f 	bl	800b00c <strstr>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1ed      	bne.n	8001dae <login_to_server+0x82>
		count_check++;
 8001dd2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <login_to_server+0xe0>)
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	a822      	add	r0, sp, #136	@ 0x88
 8001ddc:	f008 ffca 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001de0:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <login_to_server+0xc8>)
 8001de2:	a922      	add	r1, sp, #136	@ 0x88
 8001de4:	f002 fcf2 	bl	80047cc <uart_transmit_string>
		osDelay(200);
 8001de8:	20c8      	movs	r0, #200	@ 0xc8
 8001dea:	f005 fd85 	bl	80078f8 <osDelay>
 8001dee:	e7c5      	b.n	8001d7c <login_to_server+0x50>
 8001df0:	0800f3e0 	.word	0x0800f3e0
 8001df4:	20001250 	.word	0x20001250
 8001df8:	0800f40a 	.word	0x0800f40a
 8001dfc:	0800effe 	.word	0x0800effe
 8001e00:	20000c74 	.word	0x20000c74
 8001e04:	0800f420 	.word	0x0800f420
 8001e08:	0800f2d5 	.word	0x0800f2d5
 8001e0c:	0800f388 	.word	0x0800f388

08001e10 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001e18:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e1a:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001e1c:	ae23      	add	r6, sp, #140	@ 0x8c
 8001e1e:	227f      	movs	r2, #127	@ 0x7f
 8001e20:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e22:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001e24:	a824      	add	r0, sp, #144	@ 0x90
 8001e26:	6034      	str	r4, [r6, #0]
 8001e28:	f009 f8a0 	bl	800af6c <memset>
	int count_check = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001e2c:	2283      	movs	r2, #131	@ 0x83
 8001e2e:	4631      	mov	r1, r6
 8001e30:	4638      	mov	r0, r7
 8001e32:	f7ff ff1f 	bl	8001c74 <generateLocationInfoMessage>
	if (result < 0) {
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	da05      	bge.n	8001e46 <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001e3a:	4930      	ldr	r1, [pc, #192]	@ (8001efc <send_location_to_server+0xec>)
 8001e3c:	4830      	ldr	r0, [pc, #192]	@ (8001f00 <send_location_to_server+0xf0>)
 8001e3e:	f002 fcc5 	bl	80047cc <uart_transmit_string>
		return 1;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e030      	b.n	8001ea8 <send_location_to_server+0x98>
	}

	// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <send_location_to_server+0xf4>)
 8001e48:	9600      	str	r6, [sp, #0]
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e50:	a844      	add	r0, sp, #272	@ 0x110
 8001e52:	f008 ff8f 	bl	800ad74 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001e56:	a844      	add	r0, sp, #272	@ 0x110
 8001e58:	f7ff f8dc 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, "+QIURC") == NULL){
 8001e5c:	4f2a      	ldr	r7, [pc, #168]	@ (8001f08 <send_location_to_server+0xf8>)
 8001e5e:	4e2b      	ldr	r6, [pc, #172]	@ (8001f0c <send_location_to_server+0xfc>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001e60:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8001f10 <send_location_to_server+0x100>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e64:	4639      	mov	r1, r7
 8001e66:	4630      	mov	r0, r6
 8001e68:	f009 f8d0 	bl	800b00c <strstr>
 8001e6c:	b170      	cbz	r0, 8001e8c <send_location_to_server+0x7c>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001e6e:	4828      	ldr	r0, [pc, #160]	@ (8001f10 <send_location_to_server+0x100>)
 8001e70:	f7ff f8fc 	bl	800106c <receive_response>
	osDelay(100);
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	f005 fd3f 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4822      	ldr	r0, [pc, #136]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e82:	f009 f873 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e86:	f7ff f8d5 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e8a:	e7da      	b.n	8001e42 <send_location_to_server+0x32>
		receive_response("Check sending to server\n");
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	f7ff f8ed 	bl	800106c <receive_response>
		if(count_check >= 6){
 8001e92:	2c06      	cmp	r4, #6
 8001e94:	d10c      	bne.n	8001eb0 <send_location_to_server+0xa0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	481b      	ldr	r0, [pc, #108]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e9e:	f009 f865 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ea2:	f7ff f8c7 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001ea6:	2000      	movs	r0, #0
}
 8001ea8:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001eb0:	4918      	ldr	r1, [pc, #96]	@ (8001f14 <send_location_to_server+0x104>)
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f009 f8aa 	bl	800b00c <strstr>
 8001eb8:	4605      	mov	r5, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1eb      	bne.n	8001e96 <send_location_to_server+0x86>
		 if (strstr((char*)response, "closed") != NULL) {
 8001ebe:	4916      	ldr	r1, [pc, #88]	@ (8001f18 <send_location_to_server+0x108>)
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f009 f8a3 	bl	800b00c <strstr>
 8001ec6:	b148      	cbz	r0, 8001edc <send_location_to_server+0xcc>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ec8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ecc:	4629      	mov	r1, r5
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <send_location_to_server+0xfc>)
 8001ed0:	f009 f84c 	bl	800af6c <memset>
			 SIM_UART_ReInitializeRxDMA();
 8001ed4:	f7ff f8ae 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8001ed8:	2002      	movs	r0, #2
 8001eda:	e7e5      	b.n	8001ea8 <send_location_to_server+0x98>
		count_check++;
 8001edc:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <send_location_to_server+0x10c>)
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	a803      	add	r0, sp, #12
 8001ee6:	f008 ff45 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <send_location_to_server+0xf0>)
 8001eec:	a903      	add	r1, sp, #12
 8001eee:	f002 fc6d 	bl	80047cc <uart_transmit_string>
		osDelay(200);
 8001ef2:	20c8      	movs	r0, #200	@ 0xc8
 8001ef4:	f005 fd00 	bl	80078f8 <osDelay>
 8001ef8:	e7b4      	b.n	8001e64 <send_location_to_server+0x54>
 8001efa:	bf00      	nop
 8001efc:	0800f3e0 	.word	0x0800f3e0
 8001f00:	20001250 	.word	0x20001250
 8001f04:	0800f40a 	.word	0x0800f40a
 8001f08:	0800f440 	.word	0x0800f440
 8001f0c:	20000c74 	.word	0x20000c74
 8001f10:	0800f420 	.word	0x0800f420
 8001f14:	0800f2d5 	.word	0x0800f2d5
 8001f18:	0800f439 	.word	0x0800f439
 8001f1c:	0800f388 	.word	0x0800f388

08001f20 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	b0e6      	sub	sp, #408	@ 0x198
	uint8_t command[256];
	int count_check = 0;
	uint8_t output[128];
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <check_data_sent_to_server+0x168>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f2a:	4f58      	ldr	r7, [pc, #352]	@ (800208c <check_data_sent_to_server+0x16c>)
 8001f2c:	4e58      	ldr	r6, [pc, #352]	@ (8002090 <check_data_sent_to_server+0x170>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f2e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80020a8 <check_data_sent_to_server+0x188>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
int check_data_sent_to_server(int connect_id){
 8001f36:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f38:	a826      	add	r0, sp, #152	@ 0x98
 8001f3a:	f008 ff1b 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 8001f3e:	a826      	add	r0, sp, #152	@ 0x98
 8001f40:	f7ff f868 	bl	8001014 <send_AT_command>
	int count_check = 0;
 8001f44:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f46:	4639      	mov	r1, r7
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f009 f85f 	bl	800b00c <strstr>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d063      	beq.n	800201a <check_data_sent_to_server+0xfa>
		receive_response("Check sending to server\n");
	}

	int sentBytes, ackedBytes, unackedBytes;

	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f52:	ad05      	add	r5, sp, #20
 8001f54:	494f      	ldr	r1, [pc, #316]	@ (8002094 <check_data_sent_to_server+0x174>)
 8001f56:	484e      	ldr	r0, [pc, #312]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	ab04      	add	r3, sp, #16
 8001f5c:	aa03      	add	r2, sp, #12
 8001f5e:	f008 ff5d 	bl	800ae1c <siscanf>
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f62:	9b05      	ldr	r3, [sp, #20]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	@ (8002098 <check_data_sent_to_server+0x178>)
	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f66:	4606      	mov	r6, r0
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	a806      	add	r0, sp, #24
 8001f6c:	f008 ff02 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001f70:	484a      	ldr	r0, [pc, #296]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001f72:	a906      	add	r1, sp, #24
 8001f74:	f002 fc2a 	bl	80047cc <uart_transmit_string>

	if (result == 3) {
 8001f78:	2e03      	cmp	r6, #3
 8001f7a:	d102      	bne.n	8001f82 <check_data_sent_to_server+0x62>
		if (unackedBytes > 0) {
 8001f7c:	9b05      	ldr	r3, [sp, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc55      	bgt.n	800202e <check_data_sent_to_server+0x10e>
			return 0;
		}
	}
	receive_response("Check sending to server\n");
 8001f82:	4847      	ldr	r0, [pc, #284]	@ (80020a0 <check_data_sent_to_server+0x180>)
	osDelay(200);

	count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f84:	4e47      	ldr	r6, [pc, #284]	@ (80020a4 <check_data_sent_to_server+0x184>)
 8001f86:	4d42      	ldr	r5, [pc, #264]	@ (8002090 <check_data_sent_to_server+0x170>)
		osDelay(300);
		if (strstr((char*)response, "ERROR") != NULL){
 8001f88:	4f47      	ldr	r7, [pc, #284]	@ (80020a8 <check_data_sent_to_server+0x188>)
	receive_response("Check sending to server\n");
 8001f8a:	f7ff f86f 	bl	800106c <receive_response>
	osDelay(100);
 8001f8e:	2064      	movs	r0, #100	@ 0x64
 8001f90:	f005 fcb2 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f98:	2100      	movs	r1, #0
 8001f9a:	483d      	ldr	r0, [pc, #244]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f9c:	f008 ffe6 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001fa0:	f7ff f848 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(200);
 8001fa4:	20c8      	movs	r0, #200	@ 0xc8
 8001fa6:	f005 fca7 	bl	80078f8 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001faa:	4a40      	ldr	r2, [pc, #256]	@ (80020ac <check_data_sent_to_server+0x18c>)
 8001fac:	4623      	mov	r3, r4
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	a826      	add	r0, sp, #152	@ 0x98
 8001fb4:	f008 fede 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 8001fb8:	a826      	add	r0, sp, #152	@ 0x98
 8001fba:	f7ff f82b 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001fbe:	4631      	mov	r1, r6
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f009 f823 	bl	800b00c <strstr>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d04d      	beq.n	8002066 <check_data_sent_to_server+0x146>
			return 0;
		}
		osDelay(200);
		receive_response("Check received data from server\n");
	}
	receive_response("Check received data from server\n");
 8001fca:	4839      	ldr	r0, [pc, #228]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8001fcc:	f7ff f84e 	bl	800106c <receive_response>
	char *token = strstr((char*)response, "+QIRD: ");
 8001fd0:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <check_data_sent_to_server+0x194>)
 8001fd2:	482f      	ldr	r0, [pc, #188]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001fd4:	f009 f81a 	bl	800b00c <strstr>
	int value = 0;

	if (token != NULL) {
 8001fd8:	b110      	cbz	r0, 8001fe0 <check_data_sent_to_server+0xc0>
		value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8001fda:	3007      	adds	r0, #7
 8001fdc:	f007 f84a 	bl	8009074 <atoi>
	int value = 0;
 8001fe0:	4604      	mov	r4, r0
	}
	snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <check_data_sent_to_server+0x198>)
 8001fe8:	a806      	add	r0, sp, #24
 8001fea:	f008 fec3 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001fee:	482b      	ldr	r0, [pc, #172]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001ff0:	a906      	add	r1, sp, #24
 8001ff2:	f002 fbeb 	bl	80047cc <uart_transmit_string>
	if(value == 0) return 0;
 8001ff6:	b1d4      	cbz	r4, 800202e <check_data_sent_to_server+0x10e>

	osDelay(100);
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	f005 fc7d 	bl	80078f8 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8001ffe:	492f      	ldr	r1, [pc, #188]	@ (80020bc <check_data_sent_to_server+0x19c>)
 8002000:	4826      	ldr	r0, [pc, #152]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002002:	f002 fbe3 	bl	80047cc <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002006:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800200a:	2100      	movs	r1, #0
 800200c:	4820      	ldr	r0, [pc, #128]	@ (8002090 <check_data_sent_to_server+0x170>)
 800200e:	f008 ffad 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002012:	f7ff f80f 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002016:	2001      	movs	r0, #1
 8002018:	e00a      	b.n	8002030 <check_data_sent_to_server+0x110>
		if(count_check >= 6){
 800201a:	2d06      	cmp	r5, #6
 800201c:	d10b      	bne.n	8002036 <check_data_sent_to_server+0x116>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800201e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002022:	2100      	movs	r1, #0
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <check_data_sent_to_server+0x170>)
 8002026:	f008 ffa1 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 800202a:	f7ff f803 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	int value = 0;
 800202e:	2000      	movs	r0, #0
}
 8002030:	b066      	add	sp, #408	@ 0x198
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8002036:	4641      	mov	r1, r8
 8002038:	4630      	mov	r0, r6
 800203a:	f008 ffe7 	bl	800b00c <strstr>
 800203e:	2800      	cmp	r0, #0
 8002040:	d1ed      	bne.n	800201e <check_data_sent_to_server+0xfe>
		count_check++;
 8002042:	3501      	adds	r5, #1
		osDelay(200);
 8002044:	20c8      	movs	r0, #200	@ 0xc8
 8002046:	f005 fc57 	bl	80078f8 <osDelay>
		snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 800204a:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <check_data_sent_to_server+0x1a0>)
 800204c:	462b      	mov	r3, r5
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	a806      	add	r0, sp, #24
 8002052:	f008 fe8f 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002056:	4811      	ldr	r0, [pc, #68]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002058:	a906      	add	r1, sp, #24
 800205a:	f002 fbb7 	bl	80047cc <uart_transmit_string>
		receive_response("Check sending to server\n");
 800205e:	4810      	ldr	r0, [pc, #64]	@ (80020a0 <check_data_sent_to_server+0x180>)
 8002060:	f7ff f804 	bl	800106c <receive_response>
 8002064:	e76f      	b.n	8001f46 <check_data_sent_to_server+0x26>
		osDelay(300);
 8002066:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800206a:	f005 fc45 	bl	80078f8 <osDelay>
		if (strstr((char*)response, "ERROR") != NULL){
 800206e:	4639      	mov	r1, r7
 8002070:	4628      	mov	r0, r5
 8002072:	f008 ffcb 	bl	800b00c <strstr>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1d1      	bne.n	800201e <check_data_sent_to_server+0xfe>
		osDelay(200);
 800207a:	20c8      	movs	r0, #200	@ 0xc8
 800207c:	f005 fc3c 	bl	80078f8 <osDelay>
		receive_response("Check received data from server\n");
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8002082:	f7fe fff3 	bl	800106c <receive_response>
 8002086:	e79a      	b.n	8001fbe <check_data_sent_to_server+0x9e>
 8002088:	0800f447 	.word	0x0800f447
 800208c:	0800effe 	.word	0x0800effe
 8002090:	20000c74 	.word	0x20000c74
 8002094:	0800f477 	.word	0x0800f477
 8002098:	0800f497 	.word	0x0800f497
 800209c:	20001250 	.word	0x20001250
 80020a0:	0800f420 	.word	0x0800f420
 80020a4:	0800f4e3 	.word	0x0800f4e3
 80020a8:	0800f2d5 	.word	0x0800f2d5
 80020ac:	0800f4b0 	.word	0x0800f4b0
 80020b0:	0800f4c2 	.word	0x0800f4c2
 80020b4:	0800f4e9 	.word	0x0800f4e9
 80020b8:	0800f4f1 	.word	0x0800f4f1
 80020bc:	0800f514 	.word	0x0800f514
 80020c0:	0800f458 	.word	0x0800f458

080020c4 <close_connection>:


int close_connection(int connect_id){
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b0c1      	sub	sp, #260	@ 0x104
 80020c8:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <close_connection+0x78>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020cc:	4e1c      	ldr	r6, [pc, #112]	@ (8002140 <close_connection+0x7c>)
 80020ce:	4d1d      	ldr	r5, [pc, #116]	@ (8002144 <close_connection+0x80>)
		receive_response("Check CLOSING to server\n");
 80020d0:	4f1d      	ldr	r7, [pc, #116]	@ (8002148 <close_connection+0x84>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020d6:	4668      	mov	r0, sp
 80020d8:	f008 fe4c 	bl	800ad74 <sniprintf>
	send_AT_command((char*)command);
 80020dc:	4668      	mov	r0, sp
 80020de:	f7fe ff99 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020e2:	2406      	movs	r4, #6
 80020e4:	4631      	mov	r1, r6
 80020e6:	4628      	mov	r0, r5
 80020e8:	f008 ff90 	bl	800b00c <strstr>
 80020ec:	b178      	cbz	r0, 800210e <close_connection+0x4a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80020ee:	4816      	ldr	r0, [pc, #88]	@ (8002148 <close_connection+0x84>)
 80020f0:	f7fe ffbc 	bl	800106c <receive_response>
	osDelay(100);
 80020f4:	2064      	movs	r0, #100	@ 0x64
 80020f6:	f005 fbff 	bl	80078f8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020fe:	2100      	movs	r1, #0
 8002100:	4810      	ldr	r0, [pc, #64]	@ (8002144 <close_connection+0x80>)
 8002102:	f008 ff33 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002106:	f7fe ff95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800210a:	2001      	movs	r0, #1
 800210c:	e010      	b.n	8002130 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 800210e:	4638      	mov	r0, r7
 8002110:	f7fe ffac 	bl	800106c <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 8002114:	490d      	ldr	r1, [pc, #52]	@ (800214c <close_connection+0x88>)
 8002116:	4628      	mov	r0, r5
 8002118:	f008 ff78 	bl	800b00c <strstr>
 800211c:	b150      	cbz	r0, 8002134 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800211e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002122:	2100      	movs	r1, #0
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <close_connection+0x80>)
 8002126:	f008 ff21 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 800212a:	f7fe ff83 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800212e:	2000      	movs	r0, #0
}
 8002130:	b041      	add	sp, #260	@ 0x104
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >=5){
 8002134:	3c01      	subs	r4, #1
 8002136:	d1d5      	bne.n	80020e4 <close_connection+0x20>
 8002138:	e7f1      	b.n	800211e <close_connection+0x5a>
 800213a:	bf00      	nop
 800213c:	0800f535 	.word	0x0800f535
 8002140:	0800effe 	.word	0x0800effe
 8002144:	20000c74 	.word	0x20000c74
 8002148:	0800f545 	.word	0x0800f545
 800214c:	0800f2d5 	.word	0x0800f2d5

08002150 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002150:	b510      	push	{r4, lr}
 8002152:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8002154:	ab0d      	add	r3, sp, #52	@ 0x34
 8002156:	9304      	str	r3, [sp, #16]
 8002158:	ab0c      	add	r3, sp, #48	@ 0x30
 800215a:	9303      	str	r3, [sp, #12]
 800215c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	ab0a      	add	r3, sp, #40	@ 0x28
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	ab09      	add	r3, sp, #36	@ 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	aa07      	add	r2, sp, #28
 800216a:	ab08      	add	r3, sp, #32
 800216c:	4925      	ldr	r1, [pc, #148]	@ (8002204 <extract_time_CCLK+0xb4>)
 800216e:	f008 fe55 	bl	800ae1c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002174:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8002176:	2a17      	cmp	r2, #23
		hour -= 24;
 8002178:	bfc3      	ittte	gt
 800217a:	3b17      	subgt	r3, #23
 800217c:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 800217e:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002180:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002182:	bfc4      	itt	gt
 8002184:	3301      	addgt	r3, #1
 8002186:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002188:	9b07      	ldr	r3, [sp, #28]
 800218a:	2b17      	cmp	r3, #23
 800218c:	dd37      	ble.n	80021fe <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 800218e:	4c1e      	ldr	r4, [pc, #120]	@ (8002208 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002190:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002192:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002194:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 8002196:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002198:	9b08      	ldr	r3, [sp, #32]
 800219a:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 800219c:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 800219e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 80021a0:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 80021a2:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 80021aa:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 80021ac:	f000 fdd4 	bl	8002d58 <set_time>
	set_date(year, month, day);
 80021b0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80021b4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80021b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80021bc:	f000 fdea 	bl	8002d94 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80021c0:	68a3      	ldr	r3, [r4, #8]
 80021c2:	9304      	str	r3, [sp, #16]
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	6963      	ldr	r3, [r4, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	69a3      	ldr	r3, [r4, #24]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <extract_time_CCLK+0xbc>)
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	a80e      	add	r0, sp, #56	@ 0x38
 80021dc:	f008 fdca 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80021e0:	490b      	ldr	r1, [pc, #44]	@ (8002210 <extract_time_CCLK+0xc0>)
 80021e2:	480c      	ldr	r0, [pc, #48]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021e4:	f002 faf2 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80021e8:	490b      	ldr	r1, [pc, #44]	@ (8002218 <extract_time_CCLK+0xc8>)
 80021ea:	480a      	ldr	r0, [pc, #40]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021ec:	f002 faee 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80021f0:	4808      	ldr	r0, [pc, #32]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021f2:	a90e      	add	r1, sp, #56	@ 0x38
 80021f4:	f002 faea 	bl	80047cc <uart_transmit_string>
	return 1;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	b02e      	add	sp, #184	@ 0xb8
 80021fc:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80021fe:	2000      	movs	r0, #0
 8002200:	e7fb      	b.n	80021fa <extract_time_CCLK+0xaa>
 8002202:	bf00      	nop
 8002204:	0800f55e 	.word	0x0800f55e
 8002208:	20000be8 	.word	0x20000be8
 800220c:	0800ef55 	.word	0x0800ef55
 8002210:	0800ef8f 	.word	0x0800ef8f
 8002214:	20001250 	.word	0x20001250
 8002218:	0800fc58 	.word	0x0800fc58

0800221c <getCurrentTime>:


int getCurrentTime(){
 800221c:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 800221e:	4818      	ldr	r0, [pc, #96]	@ (8002280 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002220:	4d18      	ldr	r5, [pc, #96]	@ (8002284 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8002222:	4e19      	ldr	r6, [pc, #100]	@ (8002288 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8002224:	f7fe fef6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002228:	2404      	movs	r4, #4
 800222a:	4818      	ldr	r0, [pc, #96]	@ (800228c <getCurrentTime+0x70>)
 800222c:	4629      	mov	r1, r5
 800222e:	f008 feed 	bl	800b00c <strstr>
 8002232:	b190      	cbz	r0, 800225a <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8002234:	4814      	ldr	r0, [pc, #80]	@ (8002288 <getCurrentTime+0x6c>)
 8002236:	f7fe ff19 	bl	800106c <receive_response>
	int result_extract = extract_time_CCLK(response);
 800223a:	4814      	ldr	r0, [pc, #80]	@ (800228c <getCurrentTime+0x70>)
 800223c:	f7ff ff88 	bl	8002150 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002240:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 8002244:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002246:	2100      	movs	r1, #0
 8002248:	4810      	ldr	r0, [pc, #64]	@ (800228c <getCurrentTime+0x70>)
 800224a:	f008 fe8f 	bl	800af6c <memset>
	SIM_UART_ReInitializeRxDMA();
 800224e:	f7fe fef1 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8002252:	1e20      	subs	r0, r4, #0
 8002254:	bf18      	it	ne
 8002256:	2001      	movne	r0, #1
 8002258:	e00a      	b.n	8002270 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 800225a:	3c01      	subs	r4, #1
 800225c:	d109      	bne.n	8002272 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800225e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002262:	4621      	mov	r1, r4
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <getCurrentTime+0x70>)
 8002266:	f008 fe81 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 800226a:	f7fe fee3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800226e:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002270:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8002272:	4630      	mov	r0, r6
 8002274:	f7fe fefa 	bl	800106c <receive_response>
		osDelay(100);
 8002278:	2064      	movs	r0, #100	@ 0x64
 800227a:	f005 fb3d 	bl	80078f8 <osDelay>
		count_check++;
 800227e:	e7d4      	b.n	800222a <getCurrentTime+0xe>
 8002280:	0800f58c 	.word	0x0800f58c
 8002284:	0800effe 	.word	0x0800effe
 8002288:	0800f597 	.word	0x0800f597
 800228c:	20000c74 	.word	0x20000c74

08002290 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	b0d4      	sub	sp, #336	@ 0x150
 8002296:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8002298:	22ff      	movs	r2, #255	@ 0xff
 800229a:	4601      	mov	r1, r0
 800229c:	a814      	add	r0, sp, #80	@ 0x50
 800229e:	f008 fe8c 	bl	800afba <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a2:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80022a4:	213b      	movs	r1, #59	@ 0x3b
 80022a6:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a8:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80022ac:	f008 fe98 	bl	800afe0 <strrchr>
    if (lastSemicolon) {
 80022b0:	b100      	cbz	r0, 80022b4 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80022b2:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80022b4:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80022b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80022ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80022be:	9308      	str	r3, [sp, #32]
 80022c0:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80022c4:	9307      	str	r3, [sp, #28]
 80022c6:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80022ca:	9306      	str	r3, [sp, #24]
 80022cc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80022d0:	9305      	str	r3, [sp, #20]
 80022d2:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	f104 0308 	add.w	r3, r4, #8
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	1d23      	adds	r3, r4, #4
 80022e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80022e4:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80022e8:	f104 0310 	add.w	r3, r4, #16
 80022ec:	ad10      	add	r5, sp, #64	@ 0x40
 80022ee:	ae0f      	add	r6, sp, #60	@ 0x3c
 80022f0:	af0e      	add	r7, sp, #56	@ 0x38
 80022f2:	f104 0218 	add.w	r2, r4, #24
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4911      	ldr	r1, [pc, #68]	@ (8002340 <parseRMCString+0xb0>)
 80022fa:	950d      	str	r5, [sp, #52]	@ 0x34
 80022fc:	f104 0314 	add.w	r3, r4, #20
 8002300:	960c      	str	r6, [sp, #48]	@ 0x30
 8002302:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002304:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002308:	a814      	add	r0, sp, #80	@ 0x50
 800230a:	f008 fd87 	bl	800ae1c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <parseRMCString+0xb4>)
 8002310:	4640      	mov	r0, r8
 8002312:	f7fd ff5d 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8002316:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800231a:	17d1      	asrs	r1, r2, #31
 800231c:	0409      	lsls	r1, r1, #16
 800231e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002322:	430b      	orrs	r3, r1
 8002324:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002326:	fab0 f080 	clz	r0, r0
 800232a:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800232c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002330:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8002334:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002338:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800233a:	b054      	add	sp, #336	@ 0x150
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002340:	0800f5a1 	.word	0x0800f5a1
 8002344:	0800f5db 	.word	0x0800f5db

08002348 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	460d      	mov	r5, r1
 800234c:	b0ab      	sub	sp, #172	@ 0xac
	char addr_out[10];
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 800234e:	4940      	ldr	r1, [pc, #256]	@ (8002450 <readFlash+0x108>)
RMCSTRUCT readFlash(uint32_t addr){
 8002350:	4604      	mov	r4, r0
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 8002352:	4840      	ldr	r0, [pc, #256]	@ (8002454 <readFlash+0x10c>)
 8002354:	f002 fa3a 	bl	80047cc <uart_transmit_string>
	sprintf(addr_out, "%08lx", (addr));
 8002358:	493f      	ldr	r1, [pc, #252]	@ (8002458 <readFlash+0x110>)
 800235a:	462a      	mov	r2, r5
 800235c:	a806      	add	r0, sp, #24
 800235e:	f008 fd3d 	bl	800addc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002366:	2208      	movs	r2, #8
 8002368:	a906      	add	r1, sp, #24
 800236a:	483a      	ldr	r0, [pc, #232]	@ (8002454 <readFlash+0x10c>)
 800236c:	f005 f954 	bl	8007618 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002374:	4939      	ldr	r1, [pc, #228]	@ (800245c <readFlash+0x114>)
 8002376:	4837      	ldr	r0, [pc, #220]	@ (8002454 <readFlash+0x10c>)
 8002378:	2201      	movs	r2, #1
 800237a:	f005 f94d 	bl	8007618 <HAL_UART_Transmit>
	W25_Reset();
 800237e:	f001 f890 	bl	80034a2 <W25_Reset>
	W25_ReadData(addr, flashBufferMailReceived, 128);
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	4936      	ldr	r1, [pc, #216]	@ (8002460 <readFlash+0x118>)
 8002386:	4628      	mov	r0, r5
 8002388:	f001 f9ac 	bl	80036e4 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <readFlash+0x11c>)
 800238e:	aa09      	add	r2, sp, #36	@ 0x24
 8002390:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8002394:	4616      	mov	r6, r2
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	4615      	mov	r5, r2
 800239c:	c503      	stmia	r5!, {r0, r1}
 800239e:	3308      	adds	r3, #8
 80023a0:	42bb      	cmp	r3, r7
 80023a2:	462a      	mov	r2, r5
 80023a4:	d1f7      	bne.n	8002396 <readFlash+0x4e>
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80023aa:	4630      	mov	r0, r6
 80023ac:	f7fd ff70 	bl	8000290 <strlen>
 80023b0:	4631      	mov	r1, r6
 80023b2:	b282      	uxth	r2, r0
 80023b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b8:	4826      	ldr	r0, [pc, #152]	@ (8002454 <readFlash+0x10c>)
 80023ba:	f005 f92d 	bl	8007618 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferMailReceived, sizeof(flashBufferMailReceived), 1000);
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	4926      	ldr	r1, [pc, #152]	@ (8002460 <readFlash+0x118>)
 80023c6:	4823      	ldr	r0, [pc, #140]	@ (8002454 <readFlash+0x10c>)
 80023c8:	f005 f926 	bl	8007618 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferMailReceived, &rmc);
 80023cc:	a914      	add	r1, sp, #80	@ 0x50
 80023ce:	4824      	ldr	r0, [pc, #144]	@ (8002460 <readFlash+0x118>)
 80023d0:	f7ff ff5e 	bl	8002290 <parseRMCString>

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 80023d4:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	@ 0x60
 80023d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80023da:	4823      	ldr	r0, [pc, #140]	@ (8002468 <readFlash+0x120>)
 80023dc:	f002 fa06 	bl	80047ec <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80023e0:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	@ 0x54
 80023e4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80023e6:	4821      	ldr	r0, [pc, #132]	@ (800246c <readFlash+0x124>)
 80023e8:	f002 fa00 	bl	80047ec <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80023ec:	f89d 30a0 	ldrb.w	r3, [sp, #160]	@ 0xa0
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 80023f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023fa:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	481b      	ldr	r0, [pc, #108]	@ (8002470 <readFlash+0x128>)
 8002402:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8002406:	f002 f9f1 	bl	80047ec <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 800240a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800240c:	f7fe f8ac 	bl	8000568 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4817      	ldr	r0, [pc, #92]	@ (8002474 <readFlash+0x12c>)
 8002416:	f002 f9e9 	bl	80047ec <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 800241a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800241c:	f7fe f8a4 	bl	8000568 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4814      	ldr	r0, [pc, #80]	@ (8002478 <readFlash+0x130>)
 8002426:	f002 f9e1 	bl	80047ec <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <readFlash+0x134>)
 800242c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800242e:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <readFlash+0x138>)
 8002430:	4814      	ldr	r0, [pc, #80]	@ (8002484 <readFlash+0x13c>)
 8002432:	2900      	cmp	r1, #0
 8002434:	bf0c      	ite	eq
 8002436:	4611      	moveq	r1, r2
 8002438:	4619      	movne	r1, r3
 800243a:	f002 f9d7 	bl	80047ec <Debug_printf>

	return rmc;
 800243e:	2258      	movs	r2, #88	@ 0x58
 8002440:	a914      	add	r1, sp, #80	@ 0x50
 8002442:	4620      	mov	r0, r4
 8002444:	f009 fbeb 	bl	800bc1e <memcpy>
}
 8002448:	4620      	mov	r0, r4
 800244a:	b02b      	add	sp, #172	@ 0xac
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244e:	bf00      	nop
 8002450:	0800f5e9 	.word	0x0800f5e9
 8002454:	20001250 	.word	0x20001250
 8002458:	0800fd24 	.word	0x0800fd24
 800245c:	0800f70b 	.word	0x0800f70b
 8002460:	20000b5c 	.word	0x20000b5c
 8002464:	0800f679 	.word	0x0800f679
 8002468:	0800f608 	.word	0x0800f608
 800246c:	0800f61e 	.word	0x0800f61e
 8002470:	0800f634 	.word	0x0800f634
 8002474:	0800f650 	.word	0x0800f650
 8002478:	0800f65d 	.word	0x0800f65d
 800247c:	0800f5db 	.word	0x0800f5db
 8002480:	0800f5e1 	.word	0x0800f5e1
 8002484:	0800f66b 	.word	0x0800f66b

08002488 <receiveRMCDataWithAddrGSM>:

void receiveRMCDataWithAddrGSM(){
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t output_buffer[70];
	GSM_MAIL_STRUCT *receivedData;
	int is_exist_rmc = 0;
	if(is_using_flash == 0){
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <receiveRMCDataWithAddrGSM+0x228>)
 800248c:	4e89      	ldr	r6, [pc, #548]	@ (80026b4 <receiveRMCDataWithAddrGSM+0x22c>)
 800248e:	681d      	ldr	r5, [r3, #0]
void receiveRMCDataWithAddrGSM(){
 8002490:	b0c7      	sub	sp, #284	@ 0x11c
	if(is_using_flash == 0){
 8002492:	2d00      	cmp	r5, #0
 8002494:	f040 80c0 	bne.w	8002618 <receiveRMCDataWithAddrGSM+0x190>
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002498:	4f87      	ldr	r7, [pc, #540]	@ (80026b8 <receiveRMCDataWithAddrGSM+0x230>)
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800249a:	4988      	ldr	r1, [pc, #544]	@ (80026bc <receiveRMCDataWithAddrGSM+0x234>)
 800249c:	4888      	ldr	r0, [pc, #544]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800249e:	f002 f995 	bl	80047cc <uart_transmit_string>
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024a8:	a834      	add	r0, sp, #208	@ 0xd0
 80024aa:	f005 fb21 	bl	8007af0 <osMailGet>
		if(evt.status == osEventMail){
 80024ae:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80ad 	bne.w	8002610 <receiveRMCDataWithAddrGSM+0x188>
			uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80024b6:	4983      	ldr	r1, [pc, #524]	@ (80026c4 <receiveRMCDataWithAddrGSM+0x23c>)
 80024b8:	4881      	ldr	r0, [pc, #516]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024ba:	f002 f987 	bl	80047cc <uart_transmit_string>
			uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80024be:	4982      	ldr	r1, [pc, #520]	@ (80026c8 <receiveRMCDataWithAddrGSM+0x240>)
 80024c0:	487f      	ldr	r0, [pc, #508]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024c2:	f002 f983 	bl	80047cc <uart_transmit_string>
			receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 80024c6:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
			char addr_out[11];
			sprintf(addr_out, "%08lx", receivedData->address);
 80024c8:	4980      	ldr	r1, [pc, #512]	@ (80026cc <receiveRMCDataWithAddrGSM+0x244>)
 80024ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80024cc:	a81f      	add	r0, sp, #124	@ 0x7c
 80024ce:	f008 fc85 	bl	800addc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 10, 1000);
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	220a      	movs	r2, #10
 80024d8:	a91f      	add	r1, sp, #124	@ 0x7c
 80024da:	4879      	ldr	r0, [pc, #484]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024dc:	f005 f89c 	bl	8007618 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n\r\n", 1, 1000);
 80024e0:	497b      	ldr	r1, [pc, #492]	@ (80026d0 <receiveRMCDataWithAddrGSM+0x248>)
 80024e2:	4877      	ldr	r0, [pc, #476]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e8:	2201      	movs	r2, #1
 80024ea:	f005 f895 	bl	8007618 <HAL_UART_Transmit>

			snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime SENDING TO SERVER at GSM: %d:%d:%d\n", receivedData->rmc.tim.hour, receivedData->rmc.tim.min, receivedData->rmc.tim.sec);
 80024ee:	68a3      	ldr	r3, [r4, #8]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	4a76      	ldr	r2, [pc, #472]	@ (80026d4 <receiveRMCDataWithAddrGSM+0x24c>)
 80024fa:	2146      	movs	r1, #70	@ 0x46
 80024fc:	a822      	add	r0, sp, #136	@ 0x88
 80024fe:	f008 fc39 	bl	800ad74 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002502:	486f      	ldr	r0, [pc, #444]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002504:	a922      	add	r1, sp, #136	@ 0x88
 8002506:	f002 f961 	bl	80047cc <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", receivedData->rmc.date.Day, receivedData->rmc.date.Mon, receivedData->rmc.date.Yr);
 800250a:	69a3      	ldr	r3, [r4, #24]
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <receiveRMCDataWithAddrGSM+0x250>)
 8002516:	2146      	movs	r1, #70	@ 0x46
 8002518:	a822      	add	r0, sp, #136	@ 0x88
 800251a:	f008 fc2b 	bl	800ad74 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800251e:	4868      	ldr	r0, [pc, #416]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002520:	a922      	add	r1, sp, #136	@ 0x88
 8002522:	f002 f953 	bl	80047cc <uart_transmit_string>
			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", receivedData->rmc.lcation.latitude, receivedData->rmc.lcation.NS, receivedData->rmc.lcation.longitude, receivedData->rmc.lcation.EW);
 8002526:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800252a:	9306      	str	r3, [sp, #24]
 800252c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002534:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800253e:	2146      	movs	r1, #70	@ 0x46
 8002540:	e9cd 2300 	strd	r2, r3, [sp]
 8002544:	a822      	add	r0, sp, #136	@ 0x88
 8002546:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <receiveRMCDataWithAddrGSM+0x254>)
 8002548:	f008 fc14 	bl	800ad74 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800254c:	485c      	ldr	r0, [pc, #368]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800254e:	a922      	add	r1, sp, #136	@ 0x88
 8002550:	f002 f93c 	bl	80047cc <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->rmc.speed, receivedData->rmc.course, receivedData->rmc.isValid);
 8002554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002556:	9304      	str	r3, [sp, #16]
 8002558:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800255a:	f7fe f805 	bl	8000568 <__aeabi_f2d>
 800255e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002562:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002564:	f7fe f800 	bl	8000568 <__aeabi_f2d>
 8002568:	4a5d      	ldr	r2, [pc, #372]	@ (80026e0 <receiveRMCDataWithAddrGSM+0x258>)
 800256a:	e9cd 0100 	strd	r0, r1, [sp]
 800256e:	2146      	movs	r1, #70	@ 0x46
 8002570:	a822      	add	r0, sp, #136	@ 0x88
 8002572:	f008 fbff 	bl	800ad74 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002576:	4852      	ldr	r0, [pc, #328]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002578:	a922      	add	r1, sp, #136	@ 0x88
 800257a:	f002 f927 	bl	80047cc <uart_transmit_string>
			osMailFree(RMC_MailQGSMId, receivedData);
 800257e:	4621      	mov	r1, r4
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f005 faee 	bl	8007b62 <osMailFree>
			Debug_printf("Saving data to variable to send to the server\n");
 8002586:	4857      	ldr	r0, [pc, #348]	@ (80026e4 <receiveRMCDataWithAddrGSM+0x25c>)
 8002588:	f002 f930 	bl	80047ec <Debug_printf>
			current_addr_gsm = receivedData->address;
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800258e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002590:	601a      	str	r2, [r3, #0]
			is_exist_rmc = 1;
			if(is_ready_to_send == 0 && mode == MAIL){
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002594:	6831      	ldr	r1, [r6, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	d108      	bne.n	80025ae <receiveRMCDataWithAddrGSM+0x126>
				mode = STORAGE;
 800259c:	2201      	movs	r2, #1
 800259e:	6032      	str	r2, [r6, #0]
				start_addr_not_ready = current_addr_gsm;
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <receiveRMCDataWithAddrGSM+0x268>)
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a4:	4853      	ldr	r0, [pc, #332]	@ (80026f4 <receiveRMCDataWithAddrGSM+0x26c>)
				start_addr_not_ready = current_addr_gsm;
 80025a6:	601a      	str	r2, [r3, #0]
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f002 f91f 	bl	80047ec <Debug_printf>
			is_exist_rmc = 1;
 80025ae:	2501      	movs	r5, #1
		}
		else{
			Debug_printf("There is no address mail left\n");
		}
	}
	if(mode == MAIL){
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d132      	bne.n	800261c <receiveRMCDataWithAddrGSM+0x194>
		Debug_printf("\n\n -------------Inside GETTING FROM MAIL mode------------\n\n");
 80025b6:	4850      	ldr	r0, [pc, #320]	@ (80026f8 <receiveRMCDataWithAddrGSM+0x270>)
 80025b8:	f002 f918 	bl	80047ec <Debug_printf>
		if(is_exist_rmc){
 80025bc:	2d00      	cmp	r5, #0
 80025be:	d025      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025c0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
			rmc_jt.speed = receivedData->rmc.speed;
 80025c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025ca:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 80025ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80025d2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
			rmc_jt.course = receivedData->rmc.course;
 80025d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 80025da:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 80025e2:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 80025ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 80025ee:	69a2      	ldr	r2, [r4, #24]
 80025f0:	619a      	str	r2, [r3, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 80025f2:	6962      	ldr	r2, [r4, #20]
 80025f4:	615a      	str	r2, [r3, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 80025f6:	6922      	ldr	r2, [r4, #16]
 80025f8:	611a      	str	r2, [r3, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	601a      	str	r2, [r3, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 80025fe:	6862      	ldr	r2, [r4, #4]
 8002600:	605a      	str	r2, [r3, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002602:	68a2      	ldr	r2, [r4, #8]
 8002604:	609a      	str	r2, [r3, #8]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
				if(is_in_sending)
					rmc_jt = readFlash(current_addr_not_ready);
				received_RMC = 1;
 8002606:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <receiveRMCDataWithAddrGSM+0x278>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
			}
		}

	}
}
 800260c:	b047      	add	sp, #284	@ 0x11c
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_printf("There is no address mail left\n");
 8002610:	483c      	ldr	r0, [pc, #240]	@ (8002704 <receiveRMCDataWithAddrGSM+0x27c>)
 8002612:	f002 f8eb 	bl	80047ec <Debug_printf>
 8002616:	e7cb      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
	int is_exist_rmc = 0;
 8002618:	2500      	movs	r5, #0
 800261a:	e7c9      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
		Debug_printf("\n\n -------------Inside GETTING FROM FLASH mode------------\n\n");
 800261c:	483a      	ldr	r0, [pc, #232]	@ (8002708 <receiveRMCDataWithAddrGSM+0x280>)
 800261e:	f002 f8e5 	bl	80047ec <Debug_printf>
		if(is_ready_to_send){
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <receiveRMCDataWithAddrGSM+0x218>
			sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", start_addr_disconnect);
 800262a:	4c38      	ldr	r4, [pc, #224]	@ (800270c <receiveRMCDataWithAddrGSM+0x284>)
 800262c:	4938      	ldr	r1, [pc, #224]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	a834      	add	r0, sp, #208	@ 0xd0
 8002632:	f008 fbd3 	bl	800addc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263a:	2246      	movs	r2, #70	@ 0x46
 800263c:	a934      	add	r1, sp, #208	@ 0xd0
 800263e:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002640:	f004 ffea 	bl	8007618 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002648:	4932      	ldr	r1, [pc, #200]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800264c:	2201      	movs	r2, #1
 800264e:	f004 ffe3 	bl	8007618 <HAL_UART_Transmit>
			memset(addr_out, 0x00, 70);
 8002652:	2246      	movs	r2, #70	@ 0x46
 8002654:	2100      	movs	r1, #0
 8002656:	a834      	add	r0, sp, #208	@ 0xd0
 8002658:	f008 fc88 	bl	800af6c <memset>
			sprintf(addr_out, "Current Address RECEIVED FROM MAIL QUEUE: %08lx", current_addr_gsm);
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800265e:	492e      	ldr	r1, [pc, #184]	@ (8002718 <receiveRMCDataWithAddrGSM+0x290>)
 8002660:	681a      	ldr	r2, [r3, #0]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002662:	a834      	add	r0, sp, #208	@ 0xd0
 8002664:	f008 fbba 	bl	800addc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266c:	2246      	movs	r2, #70	@ 0x46
 800266e:	a934      	add	r1, sp, #208	@ 0xd0
 8002670:	4813      	ldr	r0, [pc, #76]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002672:	f004 ffd1 	bl	8007618 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	4926      	ldr	r1, [pc, #152]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800267e:	2201      	movs	r2, #1
 8002680:	f004 ffca 	bl	8007618 <HAL_UART_Transmit>
				if(is_in_sending)
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <receiveRMCDataWithAddrGSM+0x294>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0bc      	beq.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
					rmc_jt = readFlash(current_addr_not_ready);
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	a808      	add	r0, sp, #32
 8002690:	f7ff fe5a 	bl	8002348 <readFlash>
 8002694:	2258      	movs	r2, #88	@ 0x58
 8002696:	a908      	add	r1, sp, #32
 8002698:	4818      	ldr	r0, [pc, #96]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
 800269a:	f009 fac0 	bl	800bc1e <memcpy>
 800269e:	e7b2      	b.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
			if(current_addr_not_ready != 0){
 80026a0:	4c1f      	ldr	r4, [pc, #124]	@ (8002720 <receiveRMCDataWithAddrGSM+0x298>)
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0b1      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	4919      	ldr	r1, [pc, #100]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 80026ac:	e7d9      	b.n	8002662 <receiveRMCDataWithAddrGSM+0x1da>
 80026ae:	bf00      	nop
 80026b0:	20000c54 	.word	0x20000c54
 80026b4:	20000c4c 	.word	0x20000c4c
 80026b8:	20000e0c 	.word	0x20000e0c
 80026bc:	0800f6a2 	.word	0x0800f6a2
 80026c0:	20001250 	.word	0x20001250
 80026c4:	0800f6c2 	.word	0x0800f6c2
 80026c8:	0800f6e5 	.word	0x0800f6e5
 80026cc:	0800fd24 	.word	0x0800fd24
 80026d0:	0800f709 	.word	0x0800f709
 80026d4:	0800f70e 	.word	0x0800f70e
 80026d8:	0800f739 	.word	0x0800f739
 80026dc:	0800f762 	.word	0x0800f762
 80026e0:	0800f797 	.word	0x0800f797
 80026e4:	0800f7d6 	.word	0x0800f7d6
 80026e8:	20000df8 	.word	0x20000df8
 80026ec:	20000c58 	.word	0x20000c58
 80026f0:	20000c48 	.word	0x20000c48
 80026f4:	0800f805 	.word	0x0800f805
 80026f8:	0800f852 	.word	0x0800f852
 80026fc:	20000be8 	.word	0x20000be8
 8002700:	20000c5c 	.word	0x20000c5c
 8002704:	0800f833 	.word	0x0800f833
 8002708:	0800f88e 	.word	0x0800f88e
 800270c:	20000dfc 	.word	0x20000dfc
 8002710:	0800f8cb 	.word	0x0800f8cb
 8002714:	0800f70b 	.word	0x0800f70b
 8002718:	0800f90d 	.word	0x0800f90d
 800271c:	20000c50 	.word	0x20000c50
 8002720:	20000c40 	.word	0x20000c40

08002724 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002724:	b510      	push	{r4, lr}
 8002726:	4601      	mov	r1, r0
	int result_send_location = send_location_to_server(0, location_info);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fb71 	bl	8001e10 <send_location_to_server>

	if(result_send_location){
 800272e:	b338      	cbz	r0, 8002780 <processUploadDataToServer+0x5c>
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002730:	4916      	ldr	r1, [pc, #88]	@ (800278c <processUploadDataToServer+0x68>)
 8002732:	4817      	ldr	r0, [pc, #92]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002734:	f002 f84a 	bl	80047cc <uart_transmit_string>
		int result_check = check_data_sent_to_server(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fbf1 	bl	8001f20 <check_data_sent_to_server>
		if(result_check){
 800273e:	4604      	mov	r4, r0
 8002740:	b180      	cbz	r0, 8002764 <processUploadDataToServer+0x40>
			uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002742:	4914      	ldr	r1, [pc, #80]	@ (8002794 <processUploadDataToServer+0x70>)
 8002744:	4812      	ldr	r0, [pc, #72]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002746:	f002 f841 	bl	80047cc <uart_transmit_string>
			receive_response("Check location report\n");
 800274a:	4813      	ldr	r0, [pc, #76]	@ (8002798 <processUploadDataToServer+0x74>)
 800274c:	f7fe fc8e 	bl	800106c <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002750:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002754:	2100      	movs	r1, #0
 8002756:	4811      	ldr	r0, [pc, #68]	@ (800279c <processUploadDataToServer+0x78>)
 8002758:	f008 fc08 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 800275c:	f7fe fc6a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 1;
 8002760:	2001      	movs	r0, #1
	}
	else{
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
		return 0;
	}
}
 8002762:	bd10      	pop	{r4, pc}
			uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR  (CHECKING SENDING RESULT ERROR)\n");
 8002764:	490e      	ldr	r1, [pc, #56]	@ (80027a0 <processUploadDataToServer+0x7c>)
 8002766:	480a      	ldr	r0, [pc, #40]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002768:	f002 f830 	bl	80047cc <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800276c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002770:	4621      	mov	r1, r4
 8002772:	480a      	ldr	r0, [pc, #40]	@ (800279c <processUploadDataToServer+0x78>)
 8002774:	f008 fbfa 	bl	800af6c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002778:	f7fe fc5c 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800277c:	2000      	movs	r0, #0
 800277e:	e7f0      	b.n	8002762 <processUploadDataToServer+0x3e>
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
 8002780:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <processUploadDataToServer+0x80>)
 8002782:	4803      	ldr	r0, [pc, #12]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002784:	f002 f822 	bl	80047cc <uart_transmit_string>
		return 0;
 8002788:	e7f8      	b.n	800277c <processUploadDataToServer+0x58>
 800278a:	bf00      	nop
 800278c:	0800f93d 	.word	0x0800f93d
 8002790:	20001250 	.word	0x20001250
 8002794:	0800f96d 	.word	0x0800f96d
 8002798:	0800f97e 	.word	0x0800f97e
 800279c:	20000c74 	.word	0x20000c74
 80027a0:	0800f995 	.word	0x0800f995
 80027a4:	0800f9c5 	.word	0x0800f9c5

080027a8 <StartGSM>:

void StartGSM(void const * argument)
{
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027ac:	4987      	ldr	r1, [pc, #540]	@ (80029cc <StartGSM+0x224>)
 80027ae:	4888      	ldr	r0, [pc, #544]	@ (80029d0 <StartGSM+0x228>)
					process = 4;
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
					SIM_UART_ReInitializeRxDMA();
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80027b0:	4c87      	ldr	r4, [pc, #540]	@ (80029d0 <StartGSM+0x228>)
{
 80027b2:	b0d9      	sub	sp, #356	@ 0x164
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027b4:	f002 f80a 	bl	80047cc <uart_transmit_string>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80027b8:	4a86      	ldr	r2, [pc, #536]	@ (80029d4 <StartGSM+0x22c>)
 80027ba:	4987      	ldr	r1, [pc, #540]	@ (80029d8 <StartGSM+0x230>)
 80027bc:	4887      	ldr	r0, [pc, #540]	@ (80029dc <StartGSM+0x234>)
 80027be:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027c2:	f000 fabb 	bl	8002d3c <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80027c6:	a806      	add	r0, sp, #24
 80027c8:	f7fe fbd2 	bl	8000f70 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 80027cc:	a815      	add	r0, sp, #84	@ 0x54
 80027ce:	f7fe fbf5 	bl	8000fbc <create_location_info_report>
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027d2:	220b      	movs	r2, #11
 80027d4:	2304      	movs	r3, #4
 80027d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027da:	2100      	movs	r1, #0
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027dc:	ab02      	add	r3, sp, #8
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027de:	a803      	add	r0, sp, #12
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027e0:	9305      	str	r3, [sp, #20]
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027e2:	f005 f92a 	bl	8007a3a <osMailCreate>
 80027e6:	4b7e      	ldr	r3, [pc, #504]	@ (80029e0 <StartGSM+0x238>)
 80027e8:	6018      	str	r0, [r3, #0]
	init_SIM_module();
 80027ea:	f7fe fc69 	bl	80010c0 <init_SIM_module>
	int is_set_uniqueID = 0;
 80027ee:	2700      	movs	r7, #0
	int process = 0;
 80027f0:	463e      	mov	r6, r7
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80027f2:	487c      	ldr	r0, [pc, #496]	@ (80029e4 <StartGSM+0x23c>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027fa:	f002 ffb5 	bl	8005768 <HAL_GPIO_WritePin>
		osDelay(300);
 80027fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002802:	f005 f879 	bl	80078f8 <osDelay>
		switch(process){
 8002806:	2e08      	cmp	r6, #8
 8002808:	d84f      	bhi.n	80028aa <StartGSM+0x102>
 800280a:	e8df f016 	tbh	[pc, r6, lsl #1]
 800280e:	0009      	.short	0x0009
 8002810:	00610022 	.word	0x00610022
 8002814:	00a9007a 	.word	0x00a9007a
 8002818:	00d100c4 	.word	0x00d100c4
 800281c:	023c010f 	.word	0x023c010f
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002820:	4971      	ldr	r1, [pc, #452]	@ (80029e8 <StartGSM+0x240>)
 8002822:	4620      	mov	r0, r4
 8002824:	f001 ffd2 	bl	80047cc <uart_transmit_string>
				isReady = first_check_SIM();
 8002828:	f7fe fd1c 	bl	8001264 <first_check_SIM>
				if(isReady) process++;
 800282c:	4601      	mov	r1, r0
 800282e:	2800      	cmp	r0, #0
 8002830:	f040 8094 	bne.w	800295c <StartGSM+0x1b4>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002834:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002838:	4866      	ldr	r0, [pc, #408]	@ (80029d4 <StartGSM+0x22c>)
 800283a:	f008 fb97 	bl	800af6c <memset>
					SIM_UART_ReInitializeRxDMA();
 800283e:	f7fe fbf9 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002842:	496a      	ldr	r1, [pc, #424]	@ (80029ec <StartGSM+0x244>)
 8002844:	4620      	mov	r0, r4
 8002846:	f001 ffc1 	bl	80047cc <uart_transmit_string>
							process++;
 800284a:	2500      	movs	r5, #0
					reboot_SIM_module();
 800284c:	f7fe fc52 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 8002850:	e02a      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002852:	4967      	ldr	r1, [pc, #412]	@ (80029f0 <StartGSM+0x248>)
 8002854:	4620      	mov	r0, r4
 8002856:	f001 ffb9 	bl	80047cc <uart_transmit_string>
				osDelay(100);
 800285a:	2064      	movs	r0, #100	@ 0x64
 800285c:	f005 f84c 	bl	80078f8 <osDelay>
				int check_SIM = check_SIM_ready();
 8002860:	f7fe fde6 	bl	8001430 <check_SIM_ready>
 8002864:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0){
 8002866:	b957      	cbnz	r7, 800287e <StartGSM+0xd6>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002868:	4b62      	ldr	r3, [pc, #392]	@ (80029f4 <StartGSM+0x24c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	889b      	ldrh	r3, [r3, #4]
 800286e:	f8cd 201d 	str.w	r2, [sp, #29]
 8002872:	f8ad 3021 	strh.w	r3, [sp, #33]	@ 0x21
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002876:	f8cd 2059 	str.w	r2, [sp, #89]	@ 0x59
 800287a:	f8ad 305d 	strh.w	r3, [sp, #93]	@ 0x5d
				osDelay(150);
 800287e:	2096      	movs	r0, #150	@ 0x96
 8002880:	f005 f83a 	bl	80078f8 <osDelay>
				if (check_SIM == 0){
 8002884:	2d00      	cmp	r5, #0
 8002886:	f040 8212 	bne.w	8002cae <StartGSM+0x506>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800288a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800288e:	4629      	mov	r1, r5
 8002890:	4850      	ldr	r0, [pc, #320]	@ (80029d4 <StartGSM+0x22c>)
 8002892:	f008 fb6b 	bl	800af6c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002896:	f7fe fbcd 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 800289a:	4957      	ldr	r1, [pc, #348]	@ (80029f8 <StartGSM+0x250>)
 800289c:	4620      	mov	r0, r4
 800289e:	f001 ff95 	bl	80047cc <uart_transmit_string>
					reboot_SIM_module();
 80028a2:	f7fe fc27 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 80028a6:	4637      	mov	r7, r6
 80028a8:	462e      	mov	r6, r5
				}
				break;
		}
		receiveRMCDataWithAddrGSM();
 80028aa:	f7ff fded 	bl	8002488 <receiveRMCDataWithAddrGSM>

		Debug_printf("\nHello from GSM\n");
 80028ae:	4853      	ldr	r0, [pc, #332]	@ (80029fc <StartGSM+0x254>)
 80028b0:	f001 ff9c 	bl	80047ec <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	484b      	ldr	r0, [pc, #300]	@ (80029e4 <StartGSM+0x23c>)
 80028b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028bc:	f002 ff54 	bl	8005768 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80028c0:	4620      	mov	r0, r4
 80028c2:	494f      	ldr	r1, [pc, #316]	@ (8002a00 <StartGSM+0x258>)
 80028c4:	f001 ff82 	bl	80047cc <uart_transmit_string>
		osDelay(200);
 80028c8:	20c8      	movs	r0, #200	@ 0xc8
 80028ca:	f005 f815 	bl	80078f8 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80028ce:	e790      	b.n	80027f2 <StartGSM+0x4a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80028d0:	494c      	ldr	r1, [pc, #304]	@ (8002a04 <StartGSM+0x25c>)
 80028d2:	4620      	mov	r0, r4
 80028d4:	f001 ff7a 	bl	80047cc <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028dc:	2100      	movs	r1, #0
 80028de:	483d      	ldr	r0, [pc, #244]	@ (80029d4 <StartGSM+0x22c>)
 80028e0:	f008 fb44 	bl	800af6c <memset>
				SIM_UART_ReInitializeRxDMA();
 80028e4:	f7fe fba6 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7fe ff03 	bl	80016f4 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028f2:	2100      	movs	r1, #0
 80028f4:	4837      	ldr	r0, [pc, #220]	@ (80029d4 <StartGSM+0x22c>)
 80028f6:	f008 fb39 	bl	800af6c <memset>
				process++;
 80028fa:	2503      	movs	r5, #3
				SIM_UART_ReInitializeRxDMA();
 80028fc:	f7fe fb9a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				break;
 8002900:	e7d2      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002902:	4941      	ldr	r1, [pc, #260]	@ (8002a08 <StartGSM+0x260>)
 8002904:	4620      	mov	r0, r4
 8002906:	f001 ff61 	bl	80047cc <uart_transmit_string>
				int receive_activate = activate_context(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f7fe ff44 	bl	8001798 <activate_context>
				if(receive_activate){
 8002910:	4606      	mov	r6, r0
 8002912:	b190      	cbz	r0, 800293a <StartGSM+0x192>
					getCurrentTime();
 8002914:	f7ff fc82 	bl	800221c <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002918:	493c      	ldr	r1, [pc, #240]	@ (8002a0c <StartGSM+0x264>)
 800291a:	4620      	mov	r0, r4
 800291c:	f001 ff56 	bl	80047cc <uart_transmit_string>
					osDelay(200);
 8002920:	20c8      	movs	r0, #200	@ 0xc8
 8002922:	f004 ffe9 	bl	80078f8 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002926:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800292a:	2100      	movs	r1, #0
 800292c:	4829      	ldr	r0, [pc, #164]	@ (80029d4 <StartGSM+0x22c>)
 800292e:	f008 fb1d 	bl	800af6c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002932:	f7fe fb7f 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002936:	2504      	movs	r5, #4
 8002938:	e7b6      	b.n	80028a8 <StartGSM+0x100>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 800293a:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <StartGSM+0x268>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800293c:	4620      	mov	r0, r4
 800293e:	f001 ff45 	bl	80047cc <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002942:	2001      	movs	r0, #1
 8002944:	f7fe ff9e 	bl	8001884 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002948:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 800294c:	4605      	mov	r5, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800294e:	4631      	mov	r1, r6
 8002950:	4820      	ldr	r0, [pc, #128]	@ (80029d4 <StartGSM+0x22c>)
 8002952:	f008 fb0b 	bl	800af6c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002956:	f7fe fb6d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 800295a:	b1c5      	cbz	r5, 800298e <StartGSM+0x1e6>
					if (receive_deactivate) process = 1;
 800295c:	2501      	movs	r5, #1
 800295e:	e7a3      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002960:	492c      	ldr	r1, [pc, #176]	@ (8002a14 <StartGSM+0x26c>)
 8002962:	4620      	mov	r0, r4
 8002964:	f001 ff32 	bl	80047cc <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002968:	2300      	movs	r3, #0
 800296a:	461a      	mov	r2, r3
 800296c:	4619      	mov	r1, r3
 800296e:	2001      	movs	r0, #1
 8002970:	f7fe ffd4 	bl	800191c <open_socket_service>
				if(received_res){
 8002974:	4606      	mov	r6, r0
 8002976:	b140      	cbz	r0, 800298a <StartGSM+0x1e2>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 8002978:	4927      	ldr	r1, [pc, #156]	@ (8002a18 <StartGSM+0x270>)
 800297a:	4620      	mov	r0, r4
 800297c:	f001 ff26 	bl	80047cc <uart_transmit_string>
					check_socket_connection(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff f883 	bl	8001a8c <check_socket_connection>
					process++;
 8002986:	2505      	movs	r5, #5
 8002988:	e78e      	b.n	80028a8 <StartGSM+0x100>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800298a:	4924      	ldr	r1, [pc, #144]	@ (8002a1c <StartGSM+0x274>)
 800298c:	e7d6      	b.n	800293c <StartGSM+0x194>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800298e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002992:	4629      	mov	r1, r5
 8002994:	e750      	b.n	8002838 <StartGSM+0x90>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002996:	4922      	ldr	r1, [pc, #136]	@ (8002a20 <StartGSM+0x278>)
 8002998:	4620      	mov	r0, r4
 800299a:	f001 ff17 	bl	80047cc <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 800299e:	a906      	add	r1, sp, #24
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff f9c3 	bl	8001d2c <login_to_server>
				if(result_send_login){
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f040 8184 	bne.w	8002cb4 <StartGSM+0x50c>
				else process = 8;
 80029ac:	2508      	movs	r5, #8
 80029ae:	e77b      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 80029b0:	4620      	mov	r0, r4
 80029b2:	491c      	ldr	r1, [pc, #112]	@ (8002a24 <StartGSM+0x27c>)
 80029b4:	f001 ff0a 	bl	80047cc <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fab1 	bl	8001f20 <check_data_sent_to_server>
				if(result_check_login){
 80029be:	2800      	cmp	r0, #0
 80029c0:	d0f4      	beq.n	80029ac <StartGSM+0x204>
					receive_response("Check terminal register\n");
 80029c2:	4819      	ldr	r0, [pc, #100]	@ (8002a28 <StartGSM+0x280>)
 80029c4:	f7fe fb52 	bl	800106c <receive_response>
					process++;
 80029c8:	2507      	movs	r5, #7
 80029ca:	e76d      	b.n	80028a8 <StartGSM+0x100>
 80029cc:	0800f9e4 	.word	0x0800f9e4
 80029d0:	20001250 	.word	0x20001250
 80029d4:	20000c74 	.word	0x20000c74
 80029d8:	20001140 	.word	0x20001140
 80029dc:	20000c64 	.word	0x20000c64
 80029e0:	20000e08 	.word	0x20000e08
 80029e4:	48000800 	.word	0x48000800
 80029e8:	0800fa09 	.word	0x0800fa09
 80029ec:	0800fa17 	.word	0x0800fa17
 80029f0:	0800fa2d 	.word	0x0800fa2d
 80029f4:	20000bdc 	.word	0x20000bdc
 80029f8:	0800fa46 	.word	0x0800fa46
 80029fc:	0800fea3 	.word	0x0800fea3
 8002a00:	0800fc57 	.word	0x0800fc57
 8002a04:	0800fa5b 	.word	0x0800fa5b
 8002a08:	0800fa83 	.word	0x0800fa83
 8002a0c:	0800faaa 	.word	0x0800faaa
 8002a10:	0800facd 	.word	0x0800facd
 8002a14:	0800faea 	.word	0x0800faea
 8002a18:	0800fb10 	.word	0x0800fb10
 8002a1c:	0800fb30 	.word	0x0800fb30
 8002a20:	0800fb4a 	.word	0x0800fb4a
 8002a24:	0800fb7a 	.word	0x0800fb7a
 8002a28:	0800fba1 	.word	0x0800fba1
				is_in_sending = 1;
 8002a2c:	4ba2      	ldr	r3, [pc, #648]	@ (8002cb8 <StartGSM+0x510>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a2e:	49a3      	ldr	r1, [pc, #652]	@ (8002cbc <StartGSM+0x514>)
				is_in_sending = 1;
 8002a30:	2501      	movs	r5, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a32:	4620      	mov	r0, r4
				is_in_sending = 1;
 8002a34:	601d      	str	r5, [r3, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a36:	f001 fec9 	bl	80047cc <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002a3a:	f7ff fbef 	bl	800221c <getCurrentTime>
				if(result_get_current == 0){
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d0b4      	beq.n	80029ac <StartGSM+0x204>
				end_addr_not_ready = current_addr_gsm;
 8002a42:	4e9f      	ldr	r6, [pc, #636]	@ (8002cc0 <StartGSM+0x518>)
 8002a44:	f8df a2e4 	ldr.w	sl, [pc, #740]	@ 8002d2c <StartGSM+0x584>
 8002a48:	6833      	ldr	r3, [r6, #0]
 8002a4a:	f8ca 3000 	str.w	r3, [sl]
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a4e:	f8da 2000 	ldr.w	r2, [sl]
 8002a52:	499c      	ldr	r1, [pc, #624]	@ (8002cc4 <StartGSM+0x51c>)
					if(is_ready_to_send == 0){
 8002a54:	f8df 82d8 	ldr.w	r8, [pc, #728]	@ 8002d30 <StartGSM+0x588>
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a58:	a826      	add	r0, sp, #152	@ 0x98
 8002a5a:	f008 f9bf 	bl	800addc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a62:	2246      	movs	r2, #70	@ 0x46
 8002a64:	a926      	add	r1, sp, #152	@ 0x98
 8002a66:	4620      	mov	r0, r4
 8002a68:	f004 fdd6 	bl	8007618 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a6c:	462a      	mov	r2, r5
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	4995      	ldr	r1, [pc, #596]	@ (8002cc8 <StartGSM+0x520>)
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002a74:	4d95      	ldr	r5, [pc, #596]	@ (8002ccc <StartGSM+0x524>)
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a76:	4620      	mov	r0, r4
 8002a78:	f004 fdce 	bl	8007618 <HAL_UART_Transmit>
				current_addr_not_ready = start_addr_not_ready;
 8002a7c:	4b94      	ldr	r3, [pc, #592]	@ (8002cd0 <StartGSM+0x528>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b94      	ldr	r3, [pc, #592]	@ (8002cd4 <StartGSM+0x52c>)
 8002a82:	601a      	str	r2, [r3, #0]
					if(is_ready_to_send == 0){
 8002a84:	f8d8 b000 	ldr.w	fp, [r8]
 8002a88:	f1bb 0f00 	cmp.w	fp, #0
 8002a8c:	f040 80b0 	bne.w	8002bf0 <StartGSM+0x448>
						sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002a90:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 8002cd4 <StartGSM+0x52c>
 8002a94:	4990      	ldr	r1, [pc, #576]	@ (8002cd8 <StartGSM+0x530>)
 8002a96:	f8d9 2000 	ldr.w	r2, [r9]
 8002a9a:	a838      	add	r0, sp, #224	@ 0xe0
 8002a9c:	f008 f99e 	bl	800addc <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa4:	2246      	movs	r2, #70	@ 0x46
 8002aa6:	a938      	add	r1, sp, #224	@ 0xe0
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f004 fdb5 	bl	8007618 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4984      	ldr	r1, [pc, #528]	@ (8002cc8 <StartGSM+0x520>)
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f004 fdae 	bl	8007618 <HAL_UART_Transmit>
						if(current_addr_not_ready <= end_addr_not_ready){
 8002abc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ac0:	f8da 3000 	ldr.w	r3, [sl]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <StartGSM+0x534>)
 8002ac8:	f04f 0201 	mov.w	r2, #1
 8002acc:	f200 8085 	bhi.w	8002bda <StartGSM+0x432>
							is_using_flash = 1;
 8002ad0:	601a      	str	r2, [r3, #0]
							receiveRMCDataWithAddrGSM();
 8002ad2:	f7ff fcd9 	bl	8002488 <receiveRMCDataWithAddrGSM>
							current_addr_not_ready += 128;
 8002ad6:	f8d9 3000 	ldr.w	r3, [r9]
 8002ada:	3380      	adds	r3, #128	@ 0x80
 8002adc:	f8c9 3000 	str.w	r3, [r9]
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002ae0:	682a      	ldr	r2, [r5, #0]
 8002ae2:	6833      	ldr	r3, [r6, #0]
 8002ae4:	f8df 924c 	ldr.w	r9, [pc, #588]	@ 8002d34 <StartGSM+0x58c>
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10a      	bne.n	8002b02 <StartGSM+0x35a>
 8002aec:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce0 <StartGSM+0x538>)
 8002aee:	4a7b      	ldr	r2, [pc, #492]	@ (8002cdc <StartGSM+0x534>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	d104      	bne.n	8002b02 <StartGSM+0x35a>
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002af8:	487a      	ldr	r0, [pc, #488]	@ (8002ce4 <StartGSM+0x53c>)
						received_RMC = 0;
 8002afa:	f8c9 3000 	str.w	r3, [r9]
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002afe:	f001 fe75 	bl	80047ec <Debug_printf>
					if(received_RMC == 1){
 8002b02:	f8d9 3000 	ldr.w	r3, [r9]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d163      	bne.n	8002bd2 <StartGSM+0x42a>
						received_RMC = 0;
 8002b0a:	2300      	movs	r3, #0
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b0c:	4976      	ldr	r1, [pc, #472]	@ (8002ce8 <StartGSM+0x540>)
						received_RMC = 0;
 8002b0e:	f8c9 3000 	str.w	r3, [r9]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b12:	4620      	mov	r0, r4
 8002b14:	f001 fe5a 	bl	80047cc <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002b18:	a815      	add	r0, sp, #84	@ 0x54
 8002b1a:	f7fe fb19 	bl	8001150 <save_rmc_to_location_info>
						if(is_ready_to_send == 1){
 8002b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d16a      	bne.n	8002bfc <StartGSM+0x454>
							Debug_printf("Current stack address to be sent to the server: \n");
 8002b26:	4871      	ldr	r0, [pc, #452]	@ (8002cec <StartGSM+0x544>)
 8002b28:	f001 fe60 	bl	80047ec <Debug_printf>
							if(mode == MAIL)
 8002b2c:	4b70      	ldr	r3, [pc, #448]	@ (8002cf0 <StartGSM+0x548>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d160      	bne.n	8002bf6 <StartGSM+0x44e>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx", current_addr_gsm);
 8002b34:	6832      	ldr	r2, [r6, #0]
 8002b36:	496f      	ldr	r1, [pc, #444]	@ (8002cf4 <StartGSM+0x54c>)
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002b38:	a838      	add	r0, sp, #224	@ 0xe0
 8002b3a:	f008 f94f 	bl	800addc <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 128, 1000);
 8002b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	a938      	add	r1, sp, #224	@ 0xe0
 8002b46:	4620      	mov	r0, r4
 8002b48:	f004 fd66 	bl	8007618 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002b4c:	495e      	ldr	r1, [pc, #376]	@ (8002cc8 <StartGSM+0x520>)
 8002b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b52:	2201      	movs	r2, #1
 8002b54:	4620      	mov	r0, r4
 8002b56:	f004 fd5f 	bl	8007618 <HAL_UART_Transmit>
						int result_final = processUploadDataToServer(&location_info);
 8002b5a:	a815      	add	r0, sp, #84	@ 0x54
 8002b5c:	f7ff fde2 	bl	8002724 <processUploadDataToServer>
						if(result_final == 1){
 8002b60:	2801      	cmp	r0, #1
 8002b62:	d155      	bne.n	8002c10 <StartGSM+0x468>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b64:	4964      	ldr	r1, [pc, #400]	@ (8002cf8 <StartGSM+0x550>)
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b66:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8002cf0 <StartGSM+0x548>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f001 fe2e 	bl	80047cc <uart_transmit_string>
							receive_response("Check location report\n");
 8002b70:	4862      	ldr	r0, [pc, #392]	@ (8002cfc <StartGSM+0x554>)
 8002b72:	f7fe fa7b 	bl	800106c <receive_response>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4860      	ldr	r0, [pc, #384]	@ (8002d00 <StartGSM+0x558>)
 8002b7e:	f008 f9f5 	bl	800af6c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002b82:	f7fe fa57 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b86:	f8d9 3000 	ldr.w	r3, [r9]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d121      	bne.n	8002bd2 <StartGSM+0x42a>
 8002b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d11d      	bne.n	8002bd2 <StartGSM+0x42a>
								is_disconnect = 0;
 8002b96:	4952      	ldr	r1, [pc, #328]	@ (8002ce0 <StartGSM+0x538>)
								end_addr_disconnect = current_addr_gsm;
 8002b98:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 8002d38 <StartGSM+0x590>
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002b9c:	4859      	ldr	r0, [pc, #356]	@ (8002d04 <StartGSM+0x55c>)
 8002b9e:	9301      	str	r3, [sp, #4]
								is_disconnect = 0;
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	600a      	str	r2, [r1, #0]
								end_addr_disconnect = current_addr_gsm;
 8002ba4:	6831      	ldr	r1, [r6, #0]
 8002ba6:	f8cb 1000 	str.w	r1, [fp]
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002baa:	f8db 1000 	ldr.w	r1, [fp]
 8002bae:	f001 fe1d 	bl	80047ec <Debug_printf>
								if(start_addr_disconnect >= (end_addr_disconnect)){
 8002bb2:	6828      	ldr	r0, [r5, #0]
 8002bb4:	f8db 1000 	ldr.w	r1, [fp]
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8002cdc <StartGSM+0x534>
 8002bbe:	4288      	cmp	r0, r1
 8002bc0:	d320      	bcc.n	8002c04 <StartGSM+0x45c>
									Debug_printf("\n\n\n---------------Starting to get catch-up location data from MAIL QUEUE-------------\n\n\n\n");
 8002bc2:	4851      	ldr	r0, [pc, #324]	@ (8002d08 <StartGSM+0x560>)
 8002bc4:	f001 fe12 	bl	80047ec <Debug_printf>
									mode = MAIL;
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c9 2000 	str.w	r2, [r9]
									is_using_flash = 0;
 8002bce:	f8cb 2000 	str.w	r2, [fp]
					osDelay(200);
 8002bd2:	20c8      	movs	r0, #200	@ 0xc8
 8002bd4:	f004 fe90 	bl	80078f8 <osDelay>
					if(is_ready_to_send == 0){
 8002bd8:	e754      	b.n	8002a84 <StartGSM+0x2dc>
							is_ready_to_send = 1;
 8002bda:	f8c8 2000 	str.w	r2, [r8]
							mode = MAIL;
 8002bde:	4a44      	ldr	r2, [pc, #272]	@ (8002cf0 <StartGSM+0x548>)
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002be0:	484a      	ldr	r0, [pc, #296]	@ (8002d0c <StartGSM+0x564>)
							mode = MAIL;
 8002be2:	f8c2 b000 	str.w	fp, [r2]
							is_using_flash = 0;
 8002be6:	f8c3 b000 	str.w	fp, [r3]
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002bea:	f001 fdff 	bl	80047ec <Debug_printf>
 8002bee:	e777      	b.n	8002ae0 <StartGSM+0x338>
						receiveRMCDataWithAddrGSM();
 8002bf0:	f7ff fc4a 	bl	8002488 <receiveRMCDataWithAddrGSM>
 8002bf4:	e774      	b.n	8002ae0 <StartGSM+0x338>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM FLASH MEMORY)  %08lx",  start_addr_disconnect);
 8002bf6:	682a      	ldr	r2, [r5, #0]
 8002bf8:	4945      	ldr	r1, [pc, #276]	@ (8002d10 <StartGSM+0x568>)
 8002bfa:	e79d      	b.n	8002b38 <StartGSM+0x390>
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002bfc:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <StartGSM+0x52c>)
 8002bfe:	4945      	ldr	r1, [pc, #276]	@ (8002d14 <StartGSM+0x56c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	e799      	b.n	8002b38 <StartGSM+0x390>
									is_using_flash = 1;
 8002c04:	f8cb 3000 	str.w	r3, [fp]
									start_addr_disconnect += 128;
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	3380      	adds	r3, #128	@ 0x80
 8002c0c:	602b      	str	r3, [r5, #0]
 8002c0e:	e7e0      	b.n	8002bd2 <StartGSM+0x42a>
						else if(result_final == 2){
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d112      	bne.n	8002c3a <StartGSM+0x492>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c14:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4839      	ldr	r0, [pc, #228]	@ (8002d00 <StartGSM+0x558>)
 8002c1c:	f008 f9a6 	bl	800af6c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002c20:	f7fe fa08 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002c24:	493c      	ldr	r1, [pc, #240]	@ (8002d18 <StartGSM+0x570>)
 8002c26:	483d      	ldr	r0, [pc, #244]	@ (8002d1c <StartGSM+0x574>)
 8002c28:	f001 fdd0 	bl	80047cc <uart_transmit_string>
							reboot_SIM_module();
 8002c2c:	f7fe fa62 	bl	80010f4 <reboot_SIM_module>
							process = 0;
 8002c30:	2500      	movs	r5, #0
				is_in_sending = 0;
 8002c32:	4a21      	ldr	r2, [pc, #132]	@ (8002cb8 <StartGSM+0x510>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	6013      	str	r3, [r2, #0]
				break;
 8002c38:	e636      	b.n	80028a8 <StartGSM+0x100>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002c3a:	4939      	ldr	r1, [pc, #228]	@ (8002d20 <StartGSM+0x578>)
							if(is_disconnect == 0){
 8002c3c:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002ce0 <StartGSM+0x538>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002c40:	4620      	mov	r0, r4
 8002c42:	f001 fdc3 	bl	80047cc <uart_transmit_string>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	482c      	ldr	r0, [pc, #176]	@ (8002d00 <StartGSM+0x558>)
 8002c4e:	f008 f98d 	bl	800af6c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002c52:	f7fe f9ef 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(is_disconnect == 0){
 8002c56:	f8d9 3000 	ldr.w	r3, [r9]
 8002c5a:	b993      	cbnz	r3, 8002c82 <StartGSM+0x4da>
								if(is_using_flash == 0){
 8002c5c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8002cdc <StartGSM+0x534>
 8002c60:	f8d8 3000 	ldr.w	r3, [r8]
 8002c64:	b92b      	cbnz	r3, 8002c72 <StartGSM+0x4ca>
									start_addr_disconnect = current_addr_gsm;
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	602b      	str	r3, [r5, #0]
									Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002c6a:	6829      	ldr	r1, [r5, #0]
 8002c6c:	482d      	ldr	r0, [pc, #180]	@ (8002d24 <StartGSM+0x57c>)
 8002c6e:	f001 fdbd 	bl	80047ec <Debug_printf>
								mode = STORAGE;
 8002c72:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf0 <StartGSM+0x548>)
 8002c74:	2301      	movs	r3, #1
 8002c76:	6013      	str	r3, [r2, #0]
								is_disconnect = 1;
 8002c78:	f8c9 3000 	str.w	r3, [r9]
								is_using_flash = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c8 3000 	str.w	r3, [r8]
							process++;
 8002c82:	2508      	movs	r5, #8
 8002c84:	e7d5      	b.n	8002c32 <StartGSM+0x48a>
				int result_close = close_connection(0);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fa1c 	bl	80020c4 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c8c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8002c90:	4601      	mov	r1, r0
 8002c92:	2800      	cmp	r0, #0
 8002c94:	f43f add0 	beq.w	8002838 <StartGSM+0x90>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4819      	ldr	r0, [pc, #100]	@ (8002d00 <StartGSM+0x558>)
 8002c9c:	f008 f966 	bl	800af6c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002ca0:	f7fe f9c8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002ca4:	4920      	ldr	r1, [pc, #128]	@ (8002d28 <StartGSM+0x580>)
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f001 fd90 	bl	80047cc <uart_transmit_string>
					process = 4;
 8002cac:	e643      	b.n	8002936 <StartGSM+0x18e>
 8002cae:	4637      	mov	r7, r6
				else process++;
 8002cb0:	2502      	movs	r5, #2
 8002cb2:	e5f9      	b.n	80028a8 <StartGSM+0x100>
					process++;
 8002cb4:	2506      	movs	r5, #6
 8002cb6:	e5f7      	b.n	80028a8 <StartGSM+0x100>
 8002cb8:	20000c50 	.word	0x20000c50
 8002cbc:	0800fbba 	.word	0x0800fbba
 8002cc0:	20000df8 	.word	0x20000df8
 8002cc4:	0800fbda 	.word	0x0800fbda
 8002cc8:	0800f70b 	.word	0x0800f70b
 8002ccc:	20000dfc 	.word	0x20000dfc
 8002cd0:	20000c48 	.word	0x20000c48
 8002cd4:	20000c40 	.word	0x20000c40
 8002cd8:	0800f8cb 	.word	0x0800f8cb
 8002cdc:	20000c54 	.word	0x20000c54
 8002ce0:	20000c60 	.word	0x20000c60
 8002ce4:	0800fc5a 	.word	0x0800fc5a
 8002ce8:	0800fc91 	.word	0x0800fc91
 8002cec:	0800fcb2 	.word	0x0800fcb2
 8002cf0:	20000c4c 	.word	0x20000c4c
 8002cf4:	0800fce4 	.word	0x0800fce4
 8002cf8:	0800f96d 	.word	0x0800f96d
 8002cfc:	0800f97e 	.word	0x0800f97e
 8002d00:	20000c74 	.word	0x20000c74
 8002d04:	0800fdaa 	.word	0x0800fdaa
 8002d08:	0800fdec 	.word	0x0800fdec
 8002d0c:	0800fc03 	.word	0x0800fc03
 8002d10:	0800fd2a 	.word	0x0800fd2a
 8002d14:	0800fd72 	.word	0x0800fd72
 8002d18:	0800fa17 	.word	0x0800fa17
 8002d1c:	20001250 	.word	0x20001250
 8002d20:	0800fe46 	.word	0x0800fe46
 8002d24:	0800fe55 	.word	0x0800fe55
 8002d28:	0800fe86 	.word	0x0800fe86
 8002d2c:	20000c44 	.word	0x20000c44
 8002d30:	20000c58 	.word	0x20000c58
 8002d34:	20000c5c 	.word	0x20000c5c
 8002d38:	20000df4 	.word	0x20000df4

08002d3c <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002d3c:	b410      	push	{r4}
 8002d3e:	4604      	mov	r4, r0
 8002d40:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8002d42:	80a3      	strh	r3, [r4, #4]
{
 8002d44:	4611      	mov	r1, r2
 8002d46:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002d48:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002d4a:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002d4c:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002d4e:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002d50:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8002d54:	f004 bd86 	b.w	8007864 <HAL_UART_Receive_DMA>

08002d58 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8002d62:	2100      	movs	r1, #0
 8002d64:	2211      	movs	r2, #17
 8002d66:	f10d 0007 	add.w	r0, sp, #7
 8002d6a:	f008 f8ff 	bl	800af6c <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d6e:	4808      	ldr	r0, [pc, #32]	@ (8002d90 <set_time+0x38>)
	sTime.Hours = hr;
 8002d70:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d74:	2200      	movs	r2, #0
 8002d76:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8002d78:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8002d7c:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d80:	f003 fa14 	bl	80061ac <HAL_RTC_SetTime>
 8002d84:	b108      	cbz	r0, 8002d8a <set_time+0x32>
	{
		Error_Handler();
 8002d86:	f000 fb44 	bl	8003412 <Error_Handler>
	}
}
 8002d8a:	b006      	add	sp, #24
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	bf00      	nop
 8002d90:	200013ec 	.word	0x200013ec

08002d94 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8002d94:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8002d96:	2300      	movs	r3, #0
	sDate.Month = month;
 8002d98:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8002d9c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8002da0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002da4:	461a      	mov	r2, r3
 8002da6:	4806      	ldr	r0, [pc, #24]	@ (8002dc0 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8002da8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002dac:	a901      	add	r1, sp, #4
 8002dae:	f003 fa57 	bl	8006260 <HAL_RTC_SetDate>
 8002db2:	b108      	cbz	r0, 8002db8 <set_date+0x24>
	{
		Error_Handler();
 8002db4:	f000 fb2d 	bl	8003412 <Error_Handler>
	}
}
 8002db8:	b003      	add	sp, #12
 8002dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dbe:	bf00      	nop
 8002dc0:	200013ec 	.word	0x200013ec

08002dc4 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002dc6:	4d29      	ldr	r5, [pc, #164]	@ (8002e6c <get_RTC_time_date+0xa8>)
{
 8002dc8:	b0b3      	sub	sp, #204	@ 0xcc
 8002dca:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002dcc:	a90d      	add	r1, sp, #52	@ 0x34
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f003 fa95 	bl	8006300 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002dd6:	a906      	add	r1, sp, #24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f003 fab3 	bl	8006346 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002de0:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002de4:	4d22      	ldr	r5, [pc, #136]	@ (8002e70 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8002dec:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <get_RTC_time_date+0xb0>)
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	210a      	movs	r1, #10
 8002df2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8002df6:	a807      	add	r0, sp, #28
 8002df8:	f007 ffbc 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002dfc:	a907      	add	r1, sp, #28
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f001 fce4 	bl	80047cc <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8002e04:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e78 <get_RTC_time_date+0xb4>)
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	210c      	movs	r1, #12
 8002e14:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002e18:	a80a      	add	r0, sp, #40	@ 0x28
 8002e1a:	f007 ffab 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 8002e1e:	a90a      	add	r1, sp, #40	@ 0x28
 8002e20:	4628      	mov	r0, r5
 8002e22:	f001 fcd3 	bl	80047cc <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 8002e26:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 8002e2a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 8002e2e:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8002e32:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8002e36:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 8002e3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002e3e:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8002e40:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8002e42:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8002e44:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8002e46:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8002e48:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 8002e4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002e4e:	9200      	str	r2, [sp, #0]
 8002e50:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8002e54:	4a09      	ldr	r2, [pc, #36]	@ (8002e7c <get_RTC_time_date+0xb8>)
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	a812      	add	r0, sp, #72	@ 0x48
 8002e5a:	f007 ff8b 	bl	800ad74 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8002e5e:	a912      	add	r1, sp, #72	@ 0x48
 8002e60:	4628      	mov	r0, r5
 8002e62:	f001 fcb3 	bl	80047cc <uart_transmit_string>
}
 8002e66:	b033      	add	sp, #204	@ 0xcc
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200013ec 	.word	0x200013ec
 8002e70:	20001250 	.word	0x20001250
 8002e74:	0800ef7f 	.word	0x0800ef7f
 8002e78:	0800feb4 	.word	0x0800feb4
 8002e7c:	0800fec6 	.word	0x0800fec6

08002e80 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <vApplicationGetIdleTaskMemory+0x10>)
 8002e82:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <vApplicationGetIdleTaskMemory+0x14>)
 8002e86:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20001010 	.word	0x20001010
 8002e94:	20000e10 	.word	0x20000e10

08002e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b500      	push	{lr}
 8002e9a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9c:	2228      	movs	r2, #40	@ 0x28
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	a805      	add	r0, sp, #20
 8002ea2:	f008 f863 	bl	800af6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea6:	2214      	movs	r2, #20
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4668      	mov	r0, sp
 8002eac:	f008 f85e 	bl	800af6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb0:	223c      	movs	r2, #60	@ 0x3c
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	eb0d 0002 	add.w	r0, sp, r2
 8002eb8:	f008 f858 	bl	800af6c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ebc:	f002 fc5a 	bl	8005774 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <SystemClock_Config+0xa0>)
 8002ec2:	6a13      	ldr	r3, [r2, #32]
 8002ec4:	f023 0318 	bic.w	r3, r3, #24
 8002ec8:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ece:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ed0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ed8:	2002      	movs	r0, #2
 8002eda:	2300      	movs	r3, #0
 8002edc:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ee0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ee6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee8:	f002 fc4c 	bl	8005784 <HAL_RCC_OscConfig>
 8002eec:	4601      	mov	r1, r0
 8002eee:	b108      	cbz	r0, 8002ef4 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ef6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002efa:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002efe:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f00:	4668      	mov	r0, sp
 8002f02:	f002 febf 	bl	8005c84 <HAL_RCC_ClockConfig>
 8002f06:	b108      	cbz	r0, 8002f0c <SystemClock_Config+0x74>
 8002f08:	b672      	cpsid	i
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <SystemClock_Config+0xa4>)
 8002f0e:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f10:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f18:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1e:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f20:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f24:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f26:	f002 ffa3 	bl	8005e70 <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	b108      	cbz	r0, 8002f30 <SystemClock_Config+0x98>
 8002f2c:	b672      	cpsid	i
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <SystemClock_Config+0x96>
}
 8002f30:	b01f      	add	sp, #124	@ 0x7c
 8002f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	00010187 	.word	0x00010187

08002f40 <main>:
{
 8002f40:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	4db9      	ldr	r5, [pc, #740]	@ (8003228 <main+0x2e8>)
{
 8002f44:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8002f46:	f001 fc9d 	bl	8004884 <HAL_Init>
  SystemClock_Config();
 8002f4a:	f7ff ffa5 	bl	8002e98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4e:	2214      	movs	r2, #20
 8002f50:	2100      	movs	r1, #0
 8002f52:	a815      	add	r0, sp, #84	@ 0x54
 8002f54:	f008 f80a 	bl	800af6c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f58:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f5a:	48b4      	ldr	r0, [pc, #720]	@ (800322c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f60:	616b      	str	r3, [r5, #20]
 8002f62:	696b      	ldr	r3, [r5, #20]
 8002f64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f68:	9302      	str	r3, [sp, #8]
 8002f6a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6c:	696b      	ldr	r3, [r5, #20]
 8002f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f72:	616b      	str	r3, [r5, #20]
 8002f74:	696b      	ldr	r3, [r5, #20]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	9303      	str	r3, [sp, #12]
 8002f7c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	696b      	ldr	r3, [r5, #20]
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	616b      	str	r3, [r5, #20]
 8002f86:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f88:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f8e:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f94:	f002 fbe8 	bl	8005768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8002f98:	48a4      	ldr	r0, [pc, #656]	@ (800322c <main+0x2ec>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f240 2156 	movw	r1, #598	@ 0x256
 8002fa0:	f002 fbe2 	bl	8005768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fa4:	48a2      	ldr	r0, [pc, #648]	@ (8003230 <main+0x2f0>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2104      	movs	r1, #4
 8002faa:	f002 fbdd 	bl	8005768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002fae:	48a0      	ldr	r0, [pc, #640]	@ (8003230 <main+0x2f0>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fb6:	f002 fbd7 	bl	8005768 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002fc6:	f002 fbcf 	bl	8005768 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fca:	2701      	movs	r7, #1
 8002fcc:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	4896      	ldr	r0, [pc, #600]	@ (800322c <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd2:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd4:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fdc:	f002 fb00 	bl	80055e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002fe0:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	eb0d 0103 	add.w	r1, sp, r3
 8002fe6:	4891      	ldr	r0, [pc, #580]	@ (800322c <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff0:	f002 faf6 	bl	80055e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ff4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	488e      	ldr	r0, [pc, #568]	@ (8003230 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffc:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f002 faee 	bl	80055e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003004:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003006:	488a      	ldr	r0, [pc, #552]	@ (8003230 <main+0x2f0>)
 8003008:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300a:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003012:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003016:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301a:	f002 fae1 	bl	80055e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	4884      	ldr	r0, [pc, #528]	@ (8003230 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003020:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003026:	e9cd 6715 	strd	r6, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800302a:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	f002 fad8 	bl	80055e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	a915      	add	r1, sp, #84	@ 0x54
 8003036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303e:	e9cd 7817 	strd	r7, r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	f002 facd 	bl	80055e0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003046:	696b      	ldr	r3, [r5, #20]
 8003048:	433b      	orrs	r3, r7
 800304a:	616b      	str	r3, [r5, #20]
 800304c:	696b      	ldr	r3, [r5, #20]
 800304e:	403b      	ands	r3, r7
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003054:	696b      	ldr	r3, [r5, #20]
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	616b      	str	r3, [r5, #20]
 800305c:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 800305e:	4d75      	ldr	r5, [pc, #468]	@ (8003234 <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003060:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003064:	4622      	mov	r2, r4
 8003066:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003068:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800306a:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 800306c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800306e:	f002 f993 	bl	8005398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003072:	200d      	movs	r0, #13
 8003074:	f002 f9c2 	bl	80053fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003078:	4622      	mov	r2, r4
 800307a:	2105      	movs	r1, #5
 800307c:	200f      	movs	r0, #15
 800307e:	f002 f98b 	bl	8005398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003082:	200f      	movs	r0, #15
 8003084:	f002 f9ba 	bl	80053fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003088:	4622      	mov	r2, r4
 800308a:	2105      	movs	r1, #5
 800308c:	2010      	movs	r0, #16
 800308e:	f002 f983 	bl	8005398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003092:	2010      	movs	r0, #16
 8003094:	f002 f9b2 	bl	80053fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003098:	4622      	mov	r2, r4
 800309a:	2105      	movs	r1, #5
 800309c:	2038      	movs	r0, #56	@ 0x38
 800309e:	f002 f97b 	bl	8005398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80030a2:	2038      	movs	r0, #56	@ 0x38
 80030a4:	f002 f9aa 	bl	80053fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80030a8:	4622      	mov	r2, r4
 80030aa:	2105      	movs	r1, #5
 80030ac:	203c      	movs	r0, #60	@ 0x3c
 80030ae:	f002 f973 	bl	8005398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80030b2:	203c      	movs	r0, #60	@ 0x3c
 80030b4:	f002 f9a2 	bl	80053fc <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 80030b8:	2214      	movs	r2, #20
 80030ba:	4621      	mov	r1, r4
 80030bc:	a815      	add	r0, sp, #84	@ 0x54
 80030be:	f007 ff55 	bl	800af6c <memset>
  hrtc.Instance = RTC;
 80030c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003238 <main+0x2f8>)
  RTC_DateTypeDef sDate = {0};
 80030c4:	940e      	str	r4, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030c6:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 80030ca:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 80030ce:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030d0:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80030d2:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030d6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030da:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030dc:	f003 f813 	bl	8006106 <HAL_RTC_Init>
 80030e0:	b108      	cbz	r0, 80030e6 <main+0x1a6>
 80030e2:	b672      	cpsid	i
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030e6:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sTime.Hours = 0x0;
 80030ea:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
  sTime.Seconds = 0x0;
 80030ee:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030f2:	463a      	mov	r2, r7
 80030f4:	a915      	add	r1, sp, #84	@ 0x54
 80030f6:	4628      	mov	r0, r5
 80030f8:	f003 f858 	bl	80061ac <HAL_RTC_SetTime>
 80030fc:	b108      	cbz	r0, 8003102 <main+0x1c2>
 80030fe:	b672      	cpsid	i
  while (1)
 8003100:	e7fe      	b.n	8003100 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003102:	4b4e      	ldr	r3, [pc, #312]	@ (800323c <main+0x2fc>)
 8003104:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003106:	463a      	mov	r2, r7
 8003108:	a90e      	add	r1, sp, #56	@ 0x38
 800310a:	4628      	mov	r0, r5
 800310c:	f003 f8a8 	bl	8006260 <HAL_RTC_SetDate>
 8003110:	4603      	mov	r3, r0
 8003112:	b108      	cbz	r0, 8003118 <main+0x1d8>
 8003114:	b672      	cpsid	i
  while (1)
 8003116:	e7fe      	b.n	8003116 <main+0x1d6>
  hspi1.Instance = SPI1;
 8003118:	4849      	ldr	r0, [pc, #292]	@ (8003240 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800311a:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8003260 <main+0x320>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800311e:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003120:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003124:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003128:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800312c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003130:	2510      	movs	r5, #16
 8003132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003136:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800313a:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800313c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003140:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003144:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003146:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003148:	2308      	movs	r3, #8
 800314a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800314c:	f003 fa27 	bl	800659e <HAL_SPI_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	b108      	cbz	r0, 8003158 <main+0x218>
 8003154:	b672      	cpsid	i
  while (1)
 8003156:	e7fe      	b.n	8003156 <main+0x216>
  huart1.Instance = USART1;
 8003158:	483a      	ldr	r0, [pc, #232]	@ (8003244 <main+0x304>)
  huart1.Init.BaudRate = 115200;
 800315a:	4a3b      	ldr	r2, [pc, #236]	@ (8003248 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800315c:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 800315e:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003162:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003164:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003168:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003170:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003172:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003176:	f004 faf9 	bl	800776c <HAL_UART_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	b108      	cbz	r0, 8003182 <main+0x242>
 800317e:	b672      	cpsid	i
  while (1)
 8003180:	e7fe      	b.n	8003180 <main+0x240>
  huart2.Instance = USART2;
 8003182:	4832      	ldr	r0, [pc, #200]	@ (800324c <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 8003184:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003264 <main+0x324>
 8003188:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800318c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003190:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003194:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003198:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800319c:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031a0:	f004 fae4 	bl	800776c <HAL_UART_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b108      	cbz	r0, 80031ac <main+0x26c>
 80031a8:	b672      	cpsid	i
  while (1)
 80031aa:	e7fe      	b.n	80031aa <main+0x26a>
  huart3.Instance = USART3;
 80031ac:	4828      	ldr	r0, [pc, #160]	@ (8003250 <main+0x310>)
 80031ae:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80031b4:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b8:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031c0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031c4:	f004 fad2 	bl	800776c <HAL_UART_Init>
 80031c8:	4604      	mov	r4, r0
 80031ca:	b108      	cbz	r0, 80031d0 <main+0x290>
 80031cc:	b672      	cpsid	i
  while (1)
 80031ce:	e7fe      	b.n	80031ce <main+0x28e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d0:	462a      	mov	r2, r5
 80031d2:	4601      	mov	r1, r0
 80031d4:	a815      	add	r0, sp, #84	@ 0x54
 80031d6:	f007 fec9 	bl	800af6c <memset>
  htim3.Instance = TIM3;
 80031da:	4d1f      	ldr	r5, [pc, #124]	@ (8003258 <main+0x318>)
  htim3.Init.Prescaler = 8000;
 80031dc:	481f      	ldr	r0, [pc, #124]	@ (800325c <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031de:	9410      	str	r4, [sp, #64]	@ 0x40
  htim3.Init.Prescaler = 8000;
 80031e0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80031e4:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 80031e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031ec:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ee:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f2:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f6:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031fa:	f003 fe5f 	bl	8006ebc <HAL_TIM_Base_Init>
 80031fe:	b108      	cbz	r0, 8003204 <main+0x2c4>
 8003200:	b672      	cpsid	i
  while (1)
 8003202:	e7fe      	b.n	8003202 <main+0x2c2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003204:	a915      	add	r1, sp, #84	@ 0x54
 8003206:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003208:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800320a:	f003 fe91 	bl	8006f30 <HAL_TIM_ConfigClockSource>
 800320e:	b108      	cbz	r0, 8003214 <main+0x2d4>
 8003210:	b672      	cpsid	i
  while (1)
 8003212:	e7fe      	b.n	8003212 <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003214:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003216:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003218:	a90e      	add	r1, sp, #56	@ 0x38
 800321a:	4628      	mov	r0, r5
 800321c:	f003 ff22 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 8003220:	b310      	cbz	r0, 8003268 <main+0x328>
 8003222:	b672      	cpsid	i
  while (1)
 8003224:	e7fe      	b.n	8003224 <main+0x2e4>
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	48000800 	.word	0x48000800
 8003230:	48000400 	.word	0x48000400
 8003234:	200013ec 	.word	0x200013ec
 8003238:	40002800 	.word	0x40002800
 800323c:	00010101 	.word	0x00010101
 8003240:	20001388 	.word	0x20001388
 8003244:	20001250 	.word	0x20001250
 8003248:	40013800 	.word	0x40013800
 800324c:	200011c8 	.word	0x200011c8
 8003250:	20001140 	.word	0x20001140
 8003254:	40004800 	.word	0x40004800
 8003258:	200012d8 	.word	0x200012d8
 800325c:	40000400 	.word	0x40000400
 8003260:	40013000 	.word	0x40013000
 8003264:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003268:	4c5b      	ldr	r4, [pc, #364]	@ (80033d8 <main+0x498>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800326a:	2218      	movs	r2, #24
 800326c:	2100      	movs	r1, #0
 800326e:	a815      	add	r0, sp, #84	@ 0x54
 8003270:	f007 fe7c 	bl	800af6c <memset>
  hadc2.Instance = ADC2;
 8003274:	4a59      	ldr	r2, [pc, #356]	@ (80033dc <main+0x49c>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003276:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003278:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800327a:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800327c:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800327e:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003282:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003286:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800328a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800328c:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 800328e:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003290:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003294:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003296:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003298:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800329a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800329c:	f001 fb60 	bl	8004960 <HAL_ADC_Init>
 80032a0:	b108      	cbz	r0, 80032a6 <main+0x366>
 80032a2:	b672      	cpsid	i
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <main+0x364>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032a6:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 80032aa:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.Channel = ADC_CHANNEL_2;
 80032ae:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032b0:	a915      	add	r1, sp, #84	@ 0x54
 80032b2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032b4:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032b8:	f001 fe54 	bl	8004f64 <HAL_ADC_ConfigChannel>
 80032bc:	4605      	mov	r5, r0
 80032be:	b108      	cbz	r0, 80032c4 <main+0x384>
 80032c0:	b672      	cpsid	i
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <main+0x382>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80032c4:	4c46      	ldr	r4, [pc, #280]	@ (80033e0 <main+0x4a0>)
  ADC_MultiModeTypeDef multimode = {0};
 80032c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80032c8:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 80032cc:	4601      	mov	r1, r0
 80032ce:	2218      	movs	r2, #24
 80032d0:	a815      	add	r0, sp, #84	@ 0x54
 80032d2:	f007 fe4b 	bl	800af6c <memset>
  hadc3.Instance = ADC3;
 80032d6:	4b43      	ldr	r3, [pc, #268]	@ (80033e4 <main+0x4a4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80032d8:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032dc:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032de:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032e2:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ea:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 80032ee:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80032f0:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80032f4:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032f6:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032f8:	f001 fb32 	bl	8004960 <HAL_ADC_Init>
 80032fc:	b108      	cbz	r0, 8003302 <main+0x3c2>
 80032fe:	b672      	cpsid	i
  while (1)
 8003300:	e7fe      	b.n	8003300 <main+0x3c0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003302:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003304:	a90e      	add	r1, sp, #56	@ 0x38
 8003306:	4620      	mov	r0, r4
 8003308:	f001 ffb0 	bl	800526c <HAL_ADCEx_MultiModeConfigChannel>
 800330c:	b108      	cbz	r0, 8003312 <main+0x3d2>
 800330e:	b672      	cpsid	i
  while (1)
 8003310:	e7fe      	b.n	8003310 <main+0x3d0>
  sConfig.Channel = ADC_CHANNEL_12;
 8003312:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003314:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 8003318:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800331c:	a915      	add	r1, sp, #84	@ 0x54
 800331e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003320:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003324:	f001 fe1e 	bl	8004f64 <HAL_ADC_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	b108      	cbz	r0, 8003330 <main+0x3f0>
 800332c:	b672      	cpsid	i
  while (1)
 800332e:	e7fe      	b.n	800332e <main+0x3ee>
  hspi2.Instance = SPI2;
 8003330:	482d      	ldr	r0, [pc, #180]	@ (80033e8 <main+0x4a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003332:	492e      	ldr	r1, [pc, #184]	@ (80033ec <main+0x4ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003334:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003336:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800333a:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800333e:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003342:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003346:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800334a:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 800334e:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003350:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003354:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003358:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800335a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800335c:	2308      	movs	r3, #8
 800335e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003360:	f003 f91d 	bl	800659e <HAL_SPI_Init>
 8003364:	4607      	mov	r7, r0
 8003366:	b108      	cbz	r0, 800336c <main+0x42c>
 8003368:	b672      	cpsid	i
  while (1)
 800336a:	e7fe      	b.n	800336a <main+0x42a>
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 800336c:	4631      	mov	r1, r6
  osSemaphoreDef(timerBinarySem);
 800336e:	e9cd 0005 	strd	r0, r0, [sp, #20]
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 8003372:	a805      	add	r0, sp, #20
 8003374:	f004 fac8 	bl	8007908 <osSemaphoreCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 8003378:	4c1d      	ldr	r4, [pc, #116]	@ (80033f0 <main+0x4b0>)
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 800337a:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <main+0x4b4>)
 800337c:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 800337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003380:	ad07      	add	r5, sp, #28
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003388:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800338c:	4639      	mov	r1, r7
 800338e:	a807      	add	r0, sp, #28
 8003390:	f004 fa8a 	bl	80078a8 <osThreadCreate>
 8003394:	4b18      	ldr	r3, [pc, #96]	@ (80033f8 <main+0x4b8>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8003396:	f104 060c 	add.w	r6, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800339a:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 800339c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800339e:	ad0e      	add	r5, sp, #56	@ 0x38
 80033a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80033a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80033aa:	4639      	mov	r1, r7
 80033ac:	a80e      	add	r0, sp, #56	@ 0x38
 80033ae:	f004 fa7b 	bl	80078a8 <osThreadCreate>
 80033b2:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <main+0x4bc>)
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1560);
 80033b4:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80033b6:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1560);
 80033b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ba:	ad15      	add	r5, sp, #84	@ 0x54
 80033bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 80033c6:	4639      	mov	r1, r7
 80033c8:	a815      	add	r0, sp, #84	@ 0x54
 80033ca:	f004 fa6d 	bl	80078a8 <osThreadCreate>
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <main+0x4c0>)
 80033d0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80033d2:	f004 fa64 	bl	800789e <osKernelStart>
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <main+0x496>
 80033d8:	200014e4 	.word	0x200014e4
 80033dc:	50000100 	.word	0x50000100
 80033e0:	20001494 	.word	0x20001494
 80033e4:	50000400 	.word	0x50000400
 80033e8:	20001324 	.word	0x20001324
 80033ec:	40003800 	.word	0x40003800
 80033f0:	0800ee58 	.word	0x0800ee58
 80033f4:	20001064 	.word	0x20001064
 80033f8:	20001070 	.word	0x20001070
 80033fc:	2000106c 	.word	0x2000106c
 8003400:	20001068 	.word	0x20001068

08003404 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003404:	6803      	ldr	r3, [r0, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800340a:	d101      	bne.n	8003410 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800340c:	f001 ba4c 	b.w	80048a8 <HAL_IncTick>
}
 8003410:	4770      	bx	lr

08003412 <Error_Handler>:
 8003412:	b672      	cpsid	i
  while (1)
 8003414:	e7fe      	b.n	8003414 <Error_Handler+0x2>
	...

08003418 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003418:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800341a:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003426:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800342a:	f002 f99d 	bl	8005768 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 800342e:	4810      	ldr	r0, [pc, #64]	@ (8003470 <W25_ReadStatusReg1+0x58>)
 8003430:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003434:	2201      	movs	r2, #1
 8003436:	f10d 0106 	add.w	r1, sp, #6
 800343a:	f003 f91e 	bl	800667a <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 800343e:	4604      	mov	r4, r0
 8003440:	b940      	cbnz	r0, 8003454 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8003442:	480b      	ldr	r0, [pc, #44]	@ (8003470 <W25_ReadStatusReg1+0x58>)
 8003444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003448:	2201      	movs	r2, #1
 800344a:	f10d 0107 	add.w	r1, sp, #7
 800344e:	f003 fb0e 	bl	8006a6e <HAL_SPI_Receive>
 8003452:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003454:	2201      	movs	r2, #1
 8003456:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800345a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800345e:	f002 f983 	bl	8005768 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003462:	b91c      	cbnz	r4, 800346c <W25_ReadStatusReg1+0x54>
 8003464:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003468:	b002      	add	sp, #8
 800346a:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 800346c:	20ff      	movs	r0, #255	@ 0xff
 800346e:	e7fb      	b.n	8003468 <W25_ReadStatusReg1+0x50>
 8003470:	20001388 	.word	0x20001388

08003474 <W25_Busy>:

int W25_Busy(void)
{
 8003474:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003476:	f7ff ffcf 	bl	8003418 <W25_ReadStatusReg1>
}
 800347a:	f000 0001 	and.w	r0, r0, #1
 800347e:	bd08      	pop	{r3, pc}

08003480 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003484:	f001 fa1c 	bl	80048c0 <HAL_GetTick>
 8003488:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 800348a:	f7ff fff3 	bl	8003474 <W25_Busy>
 800348e:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003490:	f001 fa16 	bl	80048c0 <HAL_GetTick>
 8003494:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003496:	b114      	cbz	r4, 800349e <W25_DelayWhileBusy+0x1e>
 8003498:	42ab      	cmp	r3, r5
 800349a:	d3f6      	bcc.n	800348a <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 800349c:	2403      	movs	r4, #3
	return retval;
}
 800349e:	4620      	mov	r0, r4
 80034a0:	bd70      	pop	{r4, r5, r6, pc}

080034a2 <W25_Reset>:
void W25_Reset(){
 80034a2:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 80034a4:	2200      	movs	r2, #0
 80034a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ae:	f002 f95b 	bl	8005768 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80034b2:	2201      	movs	r2, #1
 80034b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034bc:	f002 f954 	bl	8005768 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80034c0:	2200      	movs	r2, #0
 80034c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ca:	f002 f94d 	bl	8005768 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80034ce:	2201      	movs	r2, #1
 80034d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d8:	f002 f946 	bl	8005768 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e6:	f002 f93f 	bl	8005768 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 80034ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 80034ee:	2201      	movs	r2, #1
 80034f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034f8:	f002 b936 	b.w	8005768 <HAL_GPIO_WritePin>

080034fc <W25_ReadJedecID>:

int W25_ReadJedecID() {
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003500:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 800350c:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003510:	f002 f92a 	bl	8005768 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003514:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	aa03      	add	r2, sp, #12
 800351c:	2304      	movs	r3, #4
 800351e:	f10d 010b 	add.w	r1, sp, #11
 8003522:	4820      	ldr	r0, [pc, #128]	@ (80035a4 <W25_ReadJedecID+0xa8>)
 8003524:	f003 f973 	bl	800680e <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003528:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 800352a:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 800352c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003534:	f002 f918 	bl	8005768 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <W25_ReadJedecID+0xac>)
 800353a:	aa07      	add	r2, sp, #28
 800353c:	f103 0710 	add.w	r7, r3, #16
 8003540:	4616      	mov	r6, r2
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	4614      	mov	r4, r2
 8003548:	c403      	stmia	r4!, {r0, r1}
 800354a:	3308      	adds	r3, #8
 800354c:	42bb      	cmp	r3, r7
 800354e:	4622      	mov	r2, r4
 8003550:	d1f7      	bne.n	8003542 <W25_ReadJedecID+0x46>
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003556:	4630      	mov	r0, r6
 8003558:	f7fc fe9a 	bl	8000290 <strlen>
 800355c:	4631      	mov	r1, r6
 800355e:	b282      	uxth	r2, r0
 8003560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003564:	4811      	ldr	r0, [pc, #68]	@ (80035ac <W25_ReadJedecID+0xb0>)
 8003566:	f004 f857 	bl	8007618 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 800356a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800356e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	490e      	ldr	r1, [pc, #56]	@ (80035b0 <W25_ReadJedecID+0xb4>)
 8003576:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800357a:	a804      	add	r0, sp, #16
 800357c:	f007 fc2e 	bl	800addc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003580:	a904      	add	r1, sp, #16
 8003582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003586:	220b      	movs	r2, #11
 8003588:	4808      	ldr	r0, [pc, #32]	@ (80035ac <W25_ReadJedecID+0xb0>)
 800358a:	f004 f845 	bl	8007618 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 800358e:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <W25_ReadJedecID+0xb8>)
 8003590:	4806      	ldr	r0, [pc, #24]	@ (80035ac <W25_ReadJedecID+0xb0>)
 8003592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003596:	2201      	movs	r2, #1
 8003598:	f004 f83e 	bl	8007618 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 800359c:	4628      	mov	r0, r5
 800359e:	b00d      	add	sp, #52	@ 0x34
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20001388 	.word	0x20001388
 80035a8:	0800ff24 	.word	0x0800ff24
 80035ac:	20001250 	.word	0x20001250
 80035b0:	0800ff11 	.word	0x0800ff11
 80035b4:	0800ff22 	.word	0x0800ff22

080035b8 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 80035b8:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80035ba:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80035c6:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035ca:	f002 f8cd 	bl	8005768 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80035ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035d2:	f10d 0107 	add.w	r1, sp, #7
 80035d6:	2201      	movs	r2, #1
 80035d8:	4806      	ldr	r0, [pc, #24]	@ (80035f4 <W25_WriteEnable+0x3c>)
 80035da:	f003 f84e 	bl	800667a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80035de:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80035e0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80035e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ea:	f002 f8bd 	bl	8005768 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 80035ee:	4620      	mov	r0, r4
 80035f0:	b002      	add	sp, #8
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	20001388 	.word	0x20001388

080035f8 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 80035f8:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 80035fa:	2320      	movs	r3, #32
 80035fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8003600:	0c03      	lsrs	r3, r0, #16
 8003602:	ba40      	rev16	r0, r0
 8003604:	f88d 3005 	strb.w	r3, [sp, #5]
 8003608:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 800360c:	f7ff ffd4 	bl	80035b8 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003610:	2200      	movs	r2, #0
 8003612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800361a:	f002 f8a5 	bl	8005768 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800361e:	2204      	movs	r2, #4
 8003620:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003624:	eb0d 0102 	add.w	r1, sp, r2
 8003628:	4808      	ldr	r0, [pc, #32]	@ (800364c <W25_SectorErase+0x54>)
 800362a:	f003 f826 	bl	800667a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800362e:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003630:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800363a:	f002 f895 	bl	8005768 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 800363e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003642:	f7ff ff1d 	bl	8003480 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003646:	4620      	mov	r0, r4
 8003648:	b002      	add	sp, #8
 800364a:	bd10      	pop	{r4, pc}
 800364c:	20001388 	.word	0x20001388

08003650 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003650:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	4606      	mov	r6, r0
 8003656:	4688      	mov	r8, r1
 8003658:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 800365a:	f7ff ffad 	bl	80035b8 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800365e:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80036e0 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003662:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003664:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003668:	b91f      	cbnz	r7, 8003672 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 800366a:	4620      	mov	r0, r4
 800366c:	b002      	add	sp, #8
 800366e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003672:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003674:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003676:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 800367a:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800367c:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003680:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003684:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003686:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800368a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800368e:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003692:	bf28      	it	cs
 8003694:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003696:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800369a:	f002 f865 	bl	8005768 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800369e:	2204      	movs	r2, #4
 80036a0:	480f      	ldr	r0, [pc, #60]	@ (80036e0 <W25_PageProgram+0x90>)
 80036a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036a6:	eb0d 0102 	add.w	r1, sp, r2
 80036aa:	f002 ffe6 	bl	800667a <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 80036ae:	4604      	mov	r4, r0
 80036b0:	b938      	cbnz	r0, 80036c2 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 80036b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036b6:	b2aa      	uxth	r2, r5
 80036b8:	4641      	mov	r1, r8
 80036ba:	4650      	mov	r0, sl
 80036bc:	f002 ffdd 	bl	800667a <HAL_SPI_Transmit>
 80036c0:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 80036c2:	2201      	movs	r2, #1
 80036c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036cc:	f002 f84c 	bl	8005768 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80036d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 80036d4:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 80036d6:	442e      	add	r6, r5
		buf += count_this_pass;
 80036d8:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80036da:	f7ff fed1 	bl	8003480 <W25_DelayWhileBusy>
 80036de:	e7c3      	b.n	8003668 <W25_PageProgram+0x18>
 80036e0:	20001388 	.word	0x20001388

080036e4 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 80036e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 80036e6:	2303      	movs	r3, #3
 80036e8:	f88d 3004 	strb.w	r3, [sp, #4]
 80036ec:	0c03      	lsrs	r3, r0, #16
 80036ee:	ba40      	rev16	r0, r0
 80036f0:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 80036f4:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 80036fe:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003700:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003702:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003706:	f002 f82f 	bl	8005768 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 800370a:	2204      	movs	r2, #4
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <W25_ReadData+0x60>)
 800370e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003712:	eb0d 0102 	add.w	r1, sp, r2
 8003716:	f002 ffb0 	bl	800667a <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800371a:	4604      	mov	r4, r0
 800371c:	b978      	cbnz	r0, 800373e <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 800371e:	4809      	ldr	r0, [pc, #36]	@ (8003744 <W25_ReadData+0x60>)
 8003720:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003724:	b2b2      	uxth	r2, r6
 8003726:	4629      	mov	r1, r5
 8003728:	f003 f9a1 	bl	8006a6e <HAL_SPI_Receive>
	if(retval != HAL_OK)
 800372c:	4604      	mov	r4, r0
 800372e:	b130      	cbz	r0, 800373e <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003730:	2201      	movs	r2, #1
 8003732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373a:	f002 f815 	bl	8005768 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 800373e:	4620      	mov	r0, r4
 8003740:	b002      	add	sp, #8
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	20001388 	.word	0x20001388

08003748 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8003748:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 800374a:	213b      	movs	r1, #59	@ 0x3b
 800374c:	f007 fc48 	bl	800afe0 <strrchr>
    if (!last_semicolon) {
 8003750:	4604      	mov	r4, r0
 8003752:	b190      	cbz	r0, 800377a <IsPageValid+0x32>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8003754:	3001      	adds	r0, #1
 8003756:	f7fc fd9b 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 800375a:	2805      	cmp	r0, #5
 800375c:	d90d      	bls.n	800377a <IsPageValid+0x32>
 800375e:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8003760:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003764:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8003768:	2909      	cmp	r1, #9
 800376a:	d902      	bls.n	8003772 <IsPageValid+0x2a>
 800376c:	3b61      	subs	r3, #97	@ 0x61
 800376e:	2b05      	cmp	r3, #5
 8003770:	d803      	bhi.n	800377a <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 8003772:	4294      	cmp	r4, r2
 8003774:	d1f4      	bne.n	8003760 <IsPageValid+0x18>
                (last_param[i] < 'a' || last_param[i] > 'f')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8003776:	2001      	movs	r0, #1
}
 8003778:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 800377a:	2000      	movs	r0, #0
 800377c:	e7fc      	b.n	8003778 <IsPageValid+0x30>
	...

08003780 <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003780:	b513      	push	{r0, r1, r4, lr}
 8003782:	460b      	mov	r3, r1
 8003784:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 8003786:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <UpdatePageAddress+0x28>)
 8003788:	2107      	movs	r1, #7
 800378a:	4668      	mov	r0, sp
 800378c:	f007 faf2 	bl	800ad74 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 8003790:	4620      	mov	r0, r4
 8003792:	f7fc fd7d 	bl	8000290 <strlen>
 8003796:	1f83      	subs	r3, r0, #6
 8003798:	9800      	ldr	r0, [sp, #0]
 800379a:	50e0      	str	r0, [r4, r3]
 800379c:	18e2      	adds	r2, r4, r3
 800379e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80037a2:	8093      	strh	r3, [r2, #4]
}
 80037a4:	b002      	add	sp, #8
 80037a6:	bd10      	pop	{r4, pc}
 80037a8:	0800ff38 	.word	0x0800ff38

080037ac <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 80037b0:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
int W25_ShiftLeftFlashDataByPage(void) {
 80037b4:	b08f      	sub	sp, #60	@ 0x3c

    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 80037b6:	f7ff fe74 	bl	80034a2 <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 80037ba:	498e      	ldr	r1, [pc, #568]	@ (80039f4 <W25_ShiftLeftFlashDataByPage+0x248>)
 80037bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037c0:	4630      	mov	r0, r6
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 80037c2:	f506 5980 	add.w	r9, r6, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 80037c6:	f7ff ff8d 	bl	80036e4 <W25_ReadData>
 80037ca:	b138      	cbz	r0, 80037dc <W25_ShiftLeftFlashDataByPage+0x30>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 80037cc:	488a      	ldr	r0, [pc, #552]	@ (80039f8 <W25_ShiftLeftFlashDataByPage+0x24c>)

        // Step 2: Read the first page of the next sector (if exists)
        if (next_sector_start < FLASH_END_ADDRESS) {
        	W25_Reset();
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
            	Debug_printf("READING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 80037ce:	f001 f80d 	bl	80047ec <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 80037d2:	2401      	movs	r4, #1
        // Move to the next sector
        current_sector_start = next_sector_start;
    }

    return HAL_OK;
}
 80037d4:	4620      	mov	r0, r4
 80037d6:	b00f      	add	sp, #60	@ 0x3c
 80037d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "First page of Flash DATA at Reading All Sector: \n";
 80037dc:	4b87      	ldr	r3, [pc, #540]	@ (80039fc <W25_ShiftLeftFlashDataByPage+0x250>)
 80037de:	aa01      	add	r2, sp, #4
 80037e0:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 80037e4:	4614      	mov	r4, r2
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	4615      	mov	r5, r2
 80037ec:	c503      	stmia	r5!, {r0, r1}
 80037ee:	3308      	adds	r3, #8
 80037f0:	42bb      	cmp	r3, r7
 80037f2:	462a      	mov	r2, r5
 80037f4:	d1f7      	bne.n	80037e6 <W25_ShiftLeftFlashDataByPage+0x3a>
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	802b      	strh	r3, [r5, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7fc fd48 	bl	8000290 <strlen>
 8003800:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003804:	b282      	uxth	r2, r0
 8003806:	4621      	mov	r1, r4
 8003808:	487d      	ldr	r0, [pc, #500]	@ (8003a00 <W25_ShiftLeftFlashDataByPage+0x254>)
 800380a:	f003 ff05 	bl	8007618 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 800380e:	4979      	ldr	r1, [pc, #484]	@ (80039f4 <W25_ShiftLeftFlashDataByPage+0x248>)
 8003810:	487b      	ldr	r0, [pc, #492]	@ (8003a00 <W25_ShiftLeftFlashDataByPage+0x254>)
 8003812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	f003 fefe 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800381c:	4879      	ldr	r0, [pc, #484]	@ (8003a04 <W25_ShiftLeftFlashDataByPage+0x258>)
 800381e:	f000 ffe5 	bl	80047ec <Debug_printf>
        if (next_sector_start < FLASH_END_ADDRESS) {
 8003822:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 8003826:	d02e      	beq.n	8003886 <W25_ShiftLeftFlashDataByPage+0xda>
        	W25_Reset();
 8003828:	f7ff fe3b 	bl	80034a2 <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 800382c:	4976      	ldr	r1, [pc, #472]	@ (8003a08 <W25_ShiftLeftFlashDataByPage+0x25c>)
 800382e:	2280      	movs	r2, #128	@ 0x80
 8003830:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003834:	f7ff ff56 	bl	80036e4 <W25_ReadData>
 8003838:	b108      	cbz	r0, 800383e <W25_ShiftLeftFlashDataByPage+0x92>
            	Debug_printf("READING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 800383a:	4874      	ldr	r0, [pc, #464]	@ (8003a0c <W25_ShiftLeftFlashDataByPage+0x260>)
 800383c:	e7c7      	b.n	80037ce <W25_ShiftLeftFlashDataByPage+0x22>
            	char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 800383e:	4b74      	ldr	r3, [pc, #464]	@ (8003a10 <W25_ShiftLeftFlashDataByPage+0x264>)
 8003840:	4622      	mov	r2, r4
 8003842:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	4615      	mov	r5, r2
 800384c:	c503      	stmia	r5!, {r0, r1}
 800384e:	3308      	adds	r3, #8
 8003850:	42bb      	cmp	r3, r7
 8003852:	462a      	mov	r2, r5
 8003854:	d1f7      	bne.n	8003846 <W25_ShiftLeftFlashDataByPage+0x9a>
 8003856:	8819      	ldrh	r1, [r3, #0]
 8003858:	789b      	ldrb	r3, [r3, #2]
 800385a:	8029      	strh	r1, [r5, #0]
 800385c:	70ab      	strb	r3, [r5, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800385e:	4620      	mov	r0, r4
 8003860:	f7fc fd16 	bl	8000290 <strlen>
 8003864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003868:	b282      	uxth	r2, r0
 800386a:	4621      	mov	r1, r4
 800386c:	4864      	ldr	r0, [pc, #400]	@ (8003a00 <W25_ShiftLeftFlashDataByPage+0x254>)
 800386e:	f003 fed3 	bl	8007618 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 8003872:	4965      	ldr	r1, [pc, #404]	@ (8003a08 <W25_ShiftLeftFlashDataByPage+0x25c>)
 8003874:	4862      	ldr	r0, [pc, #392]	@ (8003a00 <W25_ShiftLeftFlashDataByPage+0x254>)
 8003876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	f003 fecc 	bl	8007618 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8003880:	4860      	ldr	r0, [pc, #384]	@ (8003a04 <W25_ShiftLeftFlashDataByPage+0x258>)
 8003882:	f000 ffb3 	bl	80047ec <Debug_printf>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003886:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80039f4 <W25_ShiftLeftFlashDataByPage+0x248>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800388a:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8003a00 <W25_ShiftLeftFlashDataByPage+0x254>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 800388e:	465d      	mov	r5, fp
 8003890:	2700      	movs	r7, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003892:	46aa      	mov	sl, r5
 8003894:	3580      	adds	r5, #128	@ 0x80
 8003896:	4628      	mov	r0, r5
 8003898:	f7ff ff56 	bl	8003748 <IsPageValid>
 800389c:	3780      	adds	r7, #128	@ 0x80
            	Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 800389e:	4639      	mov	r1, r7
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d052      	beq.n	800394a <W25_ShiftLeftFlashDataByPage+0x19e>
            	Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 80038a4:	485b      	ldr	r0, [pc, #364]	@ (8003a14 <W25_ShiftLeftFlashDataByPage+0x268>)
 80038a6:	f000 ffa1 	bl	80047ec <Debug_printf>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 80038aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a18 <W25_ShiftLeftFlashDataByPage+0x26c>)
 80038ac:	4622      	mov	r2, r4
 80038ae:	f103 0e10 	add.w	lr, r3, #16
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	4694      	mov	ip, r2
 80038b8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80038bc:	3308      	adds	r3, #8
 80038be:	4573      	cmp	r3, lr
 80038c0:	4662      	mov	r2, ip
 80038c2:	d1f6      	bne.n	80038b2 <W25_ShiftLeftFlashDataByPage+0x106>
 80038c4:	8819      	ldrh	r1, [r3, #0]
 80038c6:	789b      	ldrb	r3, [r3, #2]
 80038c8:	f8ac 1000 	strh.w	r1, [ip]
 80038cc:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80038d0:	4620      	mov	r0, r4
 80038d2:	f7fc fcdd 	bl	8000290 <strlen>
 80038d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038da:	b282      	uxth	r2, r0
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f003 fe9a 	bl	8007618 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 80038e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	4629      	mov	r1, r5
 80038ec:	4640      	mov	r0, r8
 80038ee:	f003 fe93 	bl	8007618 <HAL_UART_Transmit>
				Debug_printf("\n");
 80038f2:	484a      	ldr	r0, [pc, #296]	@ (8003a1c <W25_ShiftLeftFlashDataByPage+0x270>)
 80038f4:	f000 ff7a 	bl	80047ec <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 80038f8:	4629      	mov	r1, r5
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	4650      	mov	r0, sl
 80038fe:	f008 f98e 	bl	800bc1e <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8003902:	f1a6 0180 	sub.w	r1, r6, #128	@ 0x80
 8003906:	4439      	add	r1, r7
 8003908:	4650      	mov	r0, sl
 800390a:	f7ff ff39 	bl	8003780 <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 800390e:	f5b7 6f78 	cmp.w	r7, #3968	@ 0xf80
 8003912:	d1be      	bne.n	8003892 <W25_ShiftLeftFlashDataByPage+0xe6>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8003914:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 8003918:	d047      	beq.n	80039aa <W25_ShiftLeftFlashDataByPage+0x1fe>
 800391a:	483b      	ldr	r0, [pc, #236]	@ (8003a08 <W25_ShiftLeftFlashDataByPage+0x25c>)
 800391c:	f7ff ff14 	bl	8003748 <IsPageValid>
 8003920:	2800      	cmp	r0, #0
 8003922:	d042      	beq.n	80039aa <W25_ShiftLeftFlashDataByPage+0x1fe>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8003924:	4938      	ldr	r1, [pc, #224]	@ (8003a08 <W25_ShiftLeftFlashDataByPage+0x25c>)
 8003926:	483e      	ldr	r0, [pc, #248]	@ (8003a20 <W25_ShiftLeftFlashDataByPage+0x274>)
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	f008 f978 	bl	800bc1e <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 800392e:	483c      	ldr	r0, [pc, #240]	@ (8003a20 <W25_ShiftLeftFlashDataByPage+0x274>)
 8003930:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8003934:	f7ff ff24 	bl	8003780 <UpdatePageAddress>
        W25_Reset();
 8003938:	f7ff fdb3 	bl	80034a2 <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 800393c:	4630      	mov	r0, r6
 800393e:	f7ff fe5b 	bl	80035f8 <W25_SectorErase>
 8003942:	4604      	mov	r4, r0
 8003944:	b3b8      	cbz	r0, 80039b6 <W25_ShiftLeftFlashDataByPage+0x20a>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 8003946:	4837      	ldr	r0, [pc, #220]	@ (8003a24 <W25_ShiftLeftFlashDataByPage+0x278>)
 8003948:	e741      	b.n	80037ce <W25_ShiftLeftFlashDataByPage+0x22>
            	Debug_printf("-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 800394a:	4837      	ldr	r0, [pc, #220]	@ (8003a28 <W25_ShiftLeftFlashDataByPage+0x27c>)
 800394c:	f000 ff4e 	bl	80047ec <Debug_printf>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 8003950:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <W25_ShiftLeftFlashDataByPage+0x280>)
 8003952:	4622      	mov	r2, r4
 8003954:	f103 0e10 	add.w	lr, r3, #16
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	4694      	mov	ip, r2
 800395e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003962:	3308      	adds	r3, #8
 8003964:	4573      	cmp	r3, lr
 8003966:	4662      	mov	r2, ip
 8003968:	d1f6      	bne.n	8003958 <W25_ShiftLeftFlashDataByPage+0x1ac>
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	791b      	ldrb	r3, [r3, #4]
 800396e:	f8cc 0000 	str.w	r0, [ip]
 8003972:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003976:	4620      	mov	r0, r4
 8003978:	f7fc fc8a 	bl	8000290 <strlen>
 800397c:	4621      	mov	r1, r4
 800397e:	b282      	uxth	r2, r0
 8003980:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003984:	4640      	mov	r0, r8
 8003986:	f003 fe47 	bl	8007618 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 800398a:	4629      	mov	r1, r5
 800398c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003990:	2280      	movs	r2, #128	@ 0x80
 8003992:	4640      	mov	r0, r8
 8003994:	f003 fe40 	bl	8007618 <HAL_UART_Transmit>
				Debug_printf("\n");
 8003998:	4820      	ldr	r0, [pc, #128]	@ (8003a1c <W25_ShiftLeftFlashDataByPage+0x270>)
 800399a:	f000 ff27 	bl	80047ec <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	21ff      	movs	r1, #255	@ 0xff
 80039a2:	4650      	mov	r0, sl
 80039a4:	f007 fae2 	bl	800af6c <memset>
 80039a8:	e7b1      	b.n	800390e <W25_ShiftLeftFlashDataByPage+0x162>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 80039aa:	2280      	movs	r2, #128	@ 0x80
 80039ac:	21ff      	movs	r1, #255	@ 0xff
 80039ae:	481c      	ldr	r0, [pc, #112]	@ (8003a20 <W25_ShiftLeftFlashDataByPage+0x274>)
 80039b0:	f007 fadc 	bl	800af6c <memset>
 80039b4:	e7c0      	b.n	8003938 <W25_ShiftLeftFlashDataByPage+0x18c>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80039b6:	4605      	mov	r5, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 80039b8:	eb0b 0705 	add.w	r7, fp, r5
        	W25_Reset();
 80039bc:	f7ff fd71 	bl	80034a2 <W25_Reset>
        	if (IsPageValid(page_data)) {
 80039c0:	4638      	mov	r0, r7
 80039c2:	f7ff fec1 	bl	8003748 <IsPageValid>
 80039c6:	b150      	cbz	r0, 80039de <W25_ShiftLeftFlashDataByPage+0x232>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 80039c8:	2280      	movs	r2, #128	@ 0x80
 80039ca:	4639      	mov	r1, r7
 80039cc:	19a8      	adds	r0, r5, r6
 80039ce:	f7ff fe3f 	bl	8003650 <W25_PageProgram>
 80039d2:	b120      	cbz	r0, 80039de <W25_ShiftLeftFlashDataByPage+0x232>
					Debug_printf("PAGE PROGRAM: ERROR at page offset %08lx\n", offset);
 80039d4:	4816      	ldr	r0, [pc, #88]	@ (8003a30 <W25_ShiftLeftFlashDataByPage+0x284>)
 80039d6:	4629      	mov	r1, r5
 80039d8:	f000 ff08 	bl	80047ec <Debug_printf>
					return HAL_ERROR; // Exit if write fails
 80039dc:	e6f9      	b.n	80037d2 <W25_ShiftLeftFlashDataByPage+0x26>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80039de:	3580      	adds	r5, #128	@ 0x80
 80039e0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80039e4:	d1e8      	bne.n	80039b8 <W25_ShiftLeftFlashDataByPage+0x20c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 80039e6:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 80039ea:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 80039ee:	f47f aee2 	bne.w	80037b6 <W25_ShiftLeftFlashDataByPage+0xa>
 80039f2:	e6ef      	b.n	80037d4 <W25_ShiftLeftFlashDataByPage+0x28>
 80039f4:	200017f4 	.word	0x200017f4
 80039f8:	0800ff3e 	.word	0x0800ff3e
 80039fc:	0801001d 	.word	0x0801001d
 8003a00:	20001250 	.word	0x20001250
 8003a04:	0800fc57 	.word	0x0800fc57
 8003a08:	200016f4 	.word	0x200016f4
 8003a0c:	0800ff5d 	.word	0x0800ff5d
 8003a10:	0801004f 	.word	0x0801004f
 8003a14:	0800ff8b 	.word	0x0800ff8b
 8003a18:	08010082 	.word	0x08010082
 8003a1c:	0800fc58 	.word	0x0800fc58
 8003a20:	20002774 	.word	0x20002774
 8003a24:	0800ffd2 	.word	0x0800ffd2
 8003a28:	0800ffad 	.word	0x0800ffad
 8003a2c:	08010095 	.word	0x08010095
 8003a30:	0800fff3 	.word	0x0800fff3

08003a34 <W25_ShiftLeftEntireFlashBySector>:


int W25_ShiftLeftEntireFlashBySector(uint32_t current_sector_start) {
 8003a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	4604      	mov	r4, r0
	Debug_printf("\nINSIDE SHIFT LEFT ENTIRE FLASH BY SECTOR\n");
 8003a3a:	4842      	ldr	r0, [pc, #264]	@ (8003b44 <W25_ShiftLeftEntireFlashBySector+0x110>)
    // Step 1: Start from the first sector and loop through the entire Flash
    while (current_sector_start <= FLASH_END_ADDRESS) {

        // Read the current sector into the buffer
        W25_Reset();
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003a3c:	4f42      	ldr	r7, [pc, #264]	@ (8003b48 <W25_ShiftLeftEntireFlashBySector+0x114>)
            Debug_printf("READING CURRENT SECTOR ERROR at %08lx\n", current_sector_start);
            return HAL_ERROR;
        }
        Debug_printf("First Page Data of Current Address: \n");
 8003a3e:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8003b74 <W25_ShiftLeftEntireFlashBySector+0x140>
		HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8003a42:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8003b64 <W25_ShiftLeftEntireFlashBySector+0x130>
	Debug_printf("\nINSIDE SHIFT LEFT ENTIRE FLASH BY SECTOR\n");
 8003a46:	f000 fed1 	bl	80047ec <Debug_printf>
    Debug_printf("CURRENT SECTOR START ADDRESS %08lx\n", current_sector_start);
 8003a4a:	4840      	ldr	r0, [pc, #256]	@ (8003b4c <W25_ShiftLeftEntireFlashBySector+0x118>)
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	f000 fecd 	bl	80047ec <Debug_printf>
    uint32_t previous_sector_start = current_sector_start - SECTOR_SIZE;
 8003a52:	f5a4 5580 	sub.w	r5, r4, #4096	@ 0x1000
    while (current_sector_start <= FLASH_END_ADDRESS) {
 8003a56:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8003a5a:	f5b6 4fa0 	cmp.w	r6, #20480	@ 0x5000
 8003a5e:	d842      	bhi.n	8003ae6 <W25_ShiftLeftEntireFlashBySector+0xb2>
        W25_Reset();
 8003a60:	f7ff fd1f 	bl	80034a2 <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003a64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a68:	4639      	mov	r1, r7
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff fe3a 	bl	80036e4 <W25_ReadData>
 8003a70:	b130      	cbz	r0, 8003a80 <W25_ShiftLeftEntireFlashBySector+0x4c>
            Debug_printf("READING CURRENT SECTOR ERROR at %08lx\n", current_sector_start);
 8003a72:	4837      	ldr	r0, [pc, #220]	@ (8003b50 <W25_ShiftLeftEntireFlashBySector+0x11c>)
 8003a74:	4631      	mov	r1, r6

        // If it's not the first sector, read the first page of the previous sector
        if (previous_sector_start >= FLASH_START_ADDRESS) {
            W25_Reset();
            if (W25_ReadData(previous_sector_start, previous_page_buffer, PAGE_SIZE) != HAL_OK) {
                Debug_printf("READING FIRST PAGE OF PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 8003a76:	f000 feb9 	bl	80047ec <Debug_printf>
            return HAL_ERROR;
 8003a7a:	2001      	movs	r0, #1
        current_sector_start += SECTOR_SIZE;
        previous_sector_start += SECTOR_SIZE;
    }

    return HAL_OK;
}
 8003a7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Debug_printf("First Page Data of Current Address: \n");
 8003a80:	4640      	mov	r0, r8
 8003a82:	f000 feb3 	bl	80047ec <Debug_printf>
		HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8003a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a8a:	2280      	movs	r2, #128	@ 0x80
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4648      	mov	r0, r9
 8003a90:	f003 fdc2 	bl	8007618 <HAL_UART_Transmit>
		Debug_printf("\n");
 8003a94:	482f      	ldr	r0, [pc, #188]	@ (8003b54 <W25_ShiftLeftEntireFlashBySector+0x120>)
 8003a96:	f000 fea9 	bl	80047ec <Debug_printf>
        if (previous_sector_start >= FLASH_START_ADDRESS) {
 8003a9a:	f5b5 5f40 	cmp.w	r5, #12288	@ 0x3000
 8003a9e:	d324      	bcc.n	8003aea <W25_ShiftLeftEntireFlashBySector+0xb6>
            W25_Reset();
 8003aa0:	f7ff fcff 	bl	80034a2 <W25_Reset>
            if (W25_ReadData(previous_sector_start, previous_page_buffer, PAGE_SIZE) != HAL_OK) {
 8003aa4:	492c      	ldr	r1, [pc, #176]	@ (8003b58 <W25_ShiftLeftEntireFlashBySector+0x124>)
 8003aa6:	2280      	movs	r2, #128	@ 0x80
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f7ff fe1b 	bl	80036e4 <W25_ReadData>
 8003aae:	b110      	cbz	r0, 8003ab6 <W25_ShiftLeftEntireFlashBySector+0x82>
                Debug_printf("READING FIRST PAGE OF PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 8003ab0:	482a      	ldr	r0, [pc, #168]	@ (8003b5c <W25_ShiftLeftEntireFlashBySector+0x128>)
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	e7df      	b.n	8003a76 <W25_ShiftLeftEntireFlashBySector+0x42>
            Debug_printf("First Page Data of Previous Address: \n");
 8003ab6:	482a      	ldr	r0, [pc, #168]	@ (8003b60 <W25_ShiftLeftEntireFlashBySector+0x12c>)
 8003ab8:	f000 fe98 	bl	80047ec <Debug_printf>
			HAL_UART_Transmit(&huart1, previous_page_buffer, 128, 1000);
 8003abc:	4926      	ldr	r1, [pc, #152]	@ (8003b58 <W25_ShiftLeftEntireFlashBySector+0x124>)
 8003abe:	4829      	ldr	r0, [pc, #164]	@ (8003b64 <W25_ShiftLeftEntireFlashBySector+0x130>)
 8003ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	f003 fda7 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n");
 8003aca:	4822      	ldr	r0, [pc, #136]	@ (8003b54 <W25_ShiftLeftEntireFlashBySector+0x120>)
 8003acc:	f000 fe8e 	bl	80047ec <Debug_printf>
        if (IsPageValid(current_sector_buffer) == 0  && IsPageValid(previous_page_buffer) == 0) {
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff fe39 	bl	8003748 <IsPageValid>
 8003ad6:	b970      	cbnz	r0, 8003af6 <W25_ShiftLeftEntireFlashBySector+0xc2>
 8003ad8:	481f      	ldr	r0, [pc, #124]	@ (8003b58 <W25_ShiftLeftEntireFlashBySector+0x124>)
 8003ada:	f7ff fe35 	bl	8003748 <IsPageValid>
 8003ade:	b950      	cbnz	r0, 8003af6 <W25_ShiftLeftEntireFlashBySector+0xc2>
            Debug_printf("Both the first page of the current and previous sectors are empty. Stopping shift left.\n");
 8003ae0:	4821      	ldr	r0, [pc, #132]	@ (8003b68 <W25_ShiftLeftEntireFlashBySector+0x134>)
 8003ae2:	f000 fe83 	bl	80047ec <Debug_printf>
    return HAL_OK;
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e7c8      	b.n	8003a7c <W25_ShiftLeftEntireFlashBySector+0x48>
            memset(previous_page_buffer, 0xFF, PAGE_SIZE);  // No previous sector, use invalid data
 8003aea:	2280      	movs	r2, #128	@ 0x80
 8003aec:	21ff      	movs	r1, #255	@ 0xff
 8003aee:	481a      	ldr	r0, [pc, #104]	@ (8003b58 <W25_ShiftLeftEntireFlashBySector+0x124>)
 8003af0:	f007 fa3c 	bl	800af6c <memset>
 8003af4:	e7ec      	b.n	8003ad0 <W25_ShiftLeftEntireFlashBySector+0x9c>
        W25_Reset();
 8003af6:	f7ff fcd4 	bl	80034a2 <W25_Reset>
        if (W25_SectorErase(previous_sector_start) != HAL_OK) {
 8003afa:	4628      	mov	r0, r5
 8003afc:	f7ff fd7c 	bl	80035f8 <W25_SectorErase>
 8003b00:	4604      	mov	r4, r0
 8003b02:	b110      	cbz	r0, 8003b0a <W25_ShiftLeftEntireFlashBySector+0xd6>
            Debug_printf("ERASING PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 8003b04:	4819      	ldr	r0, [pc, #100]	@ (8003b6c <W25_ShiftLeftEntireFlashBySector+0x138>)
 8003b06:	4629      	mov	r1, r5
 8003b08:	e7b5      	b.n	8003a76 <W25_ShiftLeftEntireFlashBySector+0x42>
            uint8_t *page_data = current_sector_buffer + offset;
 8003b0a:	eb07 0b04 	add.w	fp, r7, r4
            if (IsPageValid(page_data)) {
 8003b0e:	4658      	mov	r0, fp
 8003b10:	f7ff fe1a 	bl	8003748 <IsPageValid>
 8003b14:	b1a0      	cbz	r0, 8003b40 <W25_ShiftLeftEntireFlashBySector+0x10c>
                UpdatePageAddress(page_data, previous_sector_start + offset); // Update the page address
 8003b16:	eb05 0a04 	add.w	sl, r5, r4
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	4658      	mov	r0, fp
 8003b1e:	f7ff fe2f 	bl	8003780 <UpdatePageAddress>
            W25_Reset();
 8003b22:	f7ff fcbe 	bl	80034a2 <W25_Reset>
            if (W25_PageProgram(previous_sector_start + offset, page_data, PAGE_SIZE) != HAL_OK) {
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	4659      	mov	r1, fp
 8003b2a:	4650      	mov	r0, sl
 8003b2c:	f7ff fd90 	bl	8003650 <W25_PageProgram>
 8003b30:	b110      	cbz	r0, 8003b38 <W25_ShiftLeftEntireFlashBySector+0x104>
                Debug_printf("WRITING PAGE ERROR at %08lx\n", previous_sector_start + offset);
 8003b32:	480f      	ldr	r0, [pc, #60]	@ (8003b70 <W25_ShiftLeftEntireFlashBySector+0x13c>)
 8003b34:	4651      	mov	r1, sl
 8003b36:	e79e      	b.n	8003a76 <W25_ShiftLeftEntireFlashBySector+0x42>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003b38:	3480      	adds	r4, #128	@ 0x80
 8003b3a:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003b3e:	d1e4      	bne.n	8003b0a <W25_ShiftLeftEntireFlashBySector+0xd6>
 8003b40:	4635      	mov	r5, r6
 8003b42:	e788      	b.n	8003a56 <W25_ShiftLeftEntireFlashBySector+0x22>
 8003b44:	080100aa 	.word	0x080100aa
 8003b48:	200017f4 	.word	0x200017f4
 8003b4c:	080100d5 	.word	0x080100d5
 8003b50:	080100f9 	.word	0x080100f9
 8003b54:	0800fc58 	.word	0x0800fc58
 8003b58:	20001774 	.word	0x20001774
 8003b5c:	08010146 	.word	0x08010146
 8003b60:	0801017c 	.word	0x0801017c
 8003b64:	20001250 	.word	0x20001250
 8003b68:	080101a3 	.word	0x080101a3
 8003b6c:	080101fc 	.word	0x080101fc
 8003b70:	08010224 	.word	0x08010224
 8003b74:	08010120 	.word	0x08010120

08003b78 <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003b78:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003b7a:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003b7c:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003b7e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003b82:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003b84:	6843      	ldr	r3, [r0, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003b8e:	680b      	ldr	r3, [r1, #0]
 8003b90:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003b92:	684b      	ldr	r3, [r1, #4]
 8003b94:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003b96:	688b      	ldr	r3, [r1, #8]
 8003b98:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8003b9a:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003ba2:	f007 fb1d 	bl	800b1e0 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003ba6:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003baa:	3070      	adds	r0, #112	@ 0x70
 8003bac:	b00b      	add	sp, #44	@ 0x2c
 8003bae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003bb4 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	ed2d 8b04 	vpush	{d8-d9}
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	b09b      	sub	sp, #108	@ 0x6c
 8003bc0:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	3010      	adds	r0, #16
 8003bc8:	f7ff ffd6 	bl	8003b78 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003bcc:	69a3      	ldr	r3, [r4, #24]
 8003bce:	9314      	str	r3, [sp, #80]	@ 0x50
 8003bd0:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003bd4:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003bd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003bd8:	9315      	str	r3, [sp, #84]	@ 0x54
 8003bda:	f7fc fcc5 	bl	8000568 <__aeabi_f2d>
 8003bde:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8003be2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003be4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003be8:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003bec:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003bf0:	f7fc fcba 	bl	8000568 <__aeabi_f2d>
 8003bf4:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003bf8:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003bfc:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003c00:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8003c04:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003c06:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4811      	ldr	r0, [pc, #68]	@ (8003c54 <format_rmc_data+0xa0>)
 8003c10:	4911      	ldr	r1, [pc, #68]	@ (8003c58 <format_rmc_data+0xa4>)
 8003c12:	9608      	str	r6, [sp, #32]
 8003c14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003c18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c1a:	4a10      	ldr	r2, [pc, #64]	@ (8003c5c <format_rmc_data+0xa8>)
 8003c1c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	bf08      	it	eq
 8003c24:	4601      	moveq	r1, r0
 8003c26:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003c2a:	e9cd 5300 	strd	r5, r3, [sp]
 8003c2e:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8003c32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c34:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8003c38:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003c3c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003c40:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003c44:	f007 f896 	bl	800ad74 <sniprintf>
}
 8003c48:	b01b      	add	sp, #108	@ 0x6c
 8003c4a:	ecbd 8b04 	vpop	{d8-d9}
 8003c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	0800f5e1 	.word	0x0800f5e1
 8003c58:	0800f5db 	.word	0x0800f5db
 8003c5c:	08010274 	.word	0x08010274

08003c60 <saveRMC>:


void saveRMC(){
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8003c64:	4c6a      	ldr	r4, [pc, #424]	@ (8003e10 <saveRMC+0x1b0>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003c66:	486b      	ldr	r0, [pc, #428]	@ (8003e14 <saveRMC+0x1b4>)
void saveRMC(){
 8003c68:	b085      	sub	sp, #20
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003c6a:	f000 fdbf 	bl	80047ec <Debug_printf>
	W25_Reset();
 8003c6e:	f7ff fc18 	bl	80034a2 <W25_Reset>
	if (is_erased_rmc == 0){
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	b92b      	cbnz	r3, 8003c82 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 8003c76:	4b68      	ldr	r3, [pc, #416]	@ (8003e18 <saveRMC+0x1b8>)
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f7ff fcbd 	bl	80035f8 <W25_SectorErase>
		is_erased_rmc = 1;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8003c82:	4a66      	ldr	r2, [pc, #408]	@ (8003e1c <saveRMC+0x1bc>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003c88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	b109      	cbz	r1, 8003c96 <saveRMC+0x36>
 8003c92:	7811      	ldrb	r1, [r2, #0]
 8003c94:	b111      	cbz	r1, 8003c9c <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 8003c96:	2b80      	cmp	r3, #128	@ 0x80
 8003c98:	d1f6      	bne.n	8003c88 <saveRMC+0x28>
	int k = 0;
 8003c9a:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
 8003c9c:	4c5e      	ldr	r4, [pc, #376]	@ (8003e18 <saveRMC+0x1b8>)
 8003c9e:	4960      	ldr	r1, [pc, #384]	@ (8003e20 <saveRMC+0x1c0>)
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	a801      	add	r0, sp, #4
 8003ca4:	f007 f89a 	bl	800addc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8003ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cac:	2208      	movs	r2, #8
 8003cae:	a901      	add	r1, sp, #4
 8003cb0:	485c      	ldr	r0, [pc, #368]	@ (8003e24 <saveRMC+0x1c4>)
 8003cb2:	f003 fcb1 	bl	8007618 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003cb6:	495c      	ldr	r1, [pc, #368]	@ (8003e28 <saveRMC+0x1c8>)
 8003cb8:	485a      	ldr	r0, [pc, #360]	@ (8003e24 <saveRMC+0x1c4>)
 8003cba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f003 fcaa 	bl	8007618 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8003cc4:	1973      	adds	r3, r6, r5
 8003cc6:	223b      	movs	r2, #59	@ 0x3b
 8003cc8:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8003cca:	1cab      	adds	r3, r5, #2
 8003ccc:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8003cd0:	50f1      	str	r1, [r6, r3]
 8003cd2:	18f2      	adds	r2, r6, r3
 8003cd4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003cd8:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8003cda:	f105 0008 	add.w	r0, r5, #8
 8003cde:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8003ce2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4430      	add	r0, r6
 8003cea:	f007 f93f 	bl	800af6c <memset>
	}

//	SendUInt8ArrayToMailQueue(rmcBufferDemo,128);
	if(address_rmc % 0x1000 == 0x0000){
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	b92b      	cbnz	r3, 8003d02 <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8003cf6:	484d      	ldr	r0, [pc, #308]	@ (8003e2c <saveRMC+0x1cc>)
 8003cf8:	f000 fd78 	bl	80047ec <Debug_printf>
		W25_SectorErase(address_rmc);
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	f7ff fc7b 	bl	80035f8 <W25_SectorErase>
	}

	W25_Reset();
 8003d02:	f7ff fbce 	bl	80034a2 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003d06:	2280      	movs	r2, #128	@ 0x80
 8003d08:	4944      	ldr	r1, [pc, #272]	@ (8003e1c <saveRMC+0x1bc>)
 8003d0a:	6820      	ldr	r0, [r4, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 8003d0c:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8003e4c <saveRMC+0x1ec>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003d10:	f7ff fc9e 	bl	8003650 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8003d14:	4946      	ldr	r1, [pc, #280]	@ (8003e30 <saveRMC+0x1d0>)
 8003d16:	4843      	ldr	r0, [pc, #268]	@ (8003e24 <saveRMC+0x1c4>)
 8003d18:	f000 fd58 	bl	80047cc <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8003d1c:	493f      	ldr	r1, [pc, #252]	@ (8003e1c <saveRMC+0x1bc>)
 8003d1e:	4841      	ldr	r0, [pc, #260]	@ (8003e24 <saveRMC+0x1c4>)
 8003d20:	f000 fd54 	bl	80047cc <uart_transmit_string>
	current_addr = address_rmc;
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	f8c8 3000 	str.w	r3, [r8]
	if(address_rmc == 0x4F80){
 8003d2a:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <saveRMC+0x1d4>)
 8003d30:	d16b      	bne.n	8003e0a <saveRMC+0x1aa>
		is_flash_overflow = 1;
		int loop_time = (result_address - FLASH_START_ADDRESS)/128;
 8003d32:	f8df 911c 	ldr.w	r9, [pc, #284]	@ 8003e50 <saveRMC+0x1f0>
		if(result_address == FLASH_START_ADDRESS) loop_time = 1;
		for(size_t i = 0; i < loop_time; i++){
			Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003d36:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 8003e54 <saveRMC+0x1f4>
			W25_Reset();
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003d3a:	4e3f      	ldr	r6, [pc, #252]	@ (8003e38 <saveRMC+0x1d8>)
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003d3c:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 8003e24 <saveRMC+0x1c4>
		is_flash_overflow = 1;
 8003d40:	2501      	movs	r5, #1
 8003d42:	601d      	str	r5, [r3, #0]
		int loop_time = (result_address - FLASH_START_ADDRESS)/128;
 8003d44:	f8d9 3000 	ldr.w	r3, [r9]
		if(result_address == FLASH_START_ADDRESS) loop_time = 1;
 8003d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
		int loop_time = (result_address - FLASH_START_ADDRESS)/128;
 8003d4c:	bf1c      	itt	ne
 8003d4e:	f5a3 5340 	subne.w	r3, r3, #12288	@ 0x3000
 8003d52:	09dd      	lsrne	r5, r3, #7
		for(size_t i = 0; i < loop_time; i++){
 8003d54:	2700      	movs	r7, #0
 8003d56:	42af      	cmp	r7, r5
			Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003d58:	6821      	ldr	r1, [r4, #0]
		for(size_t i = 0; i < loop_time; i++){
 8003d5a:	d115      	bne.n	8003d88 <saveRMC+0x128>
		}
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < 0x4F80)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 8003d62:	bf38      	it	cc
 8003d64:	3380      	addcc	r3, #128	@ 0x80
	HAL_Delay(1000);
 8003d66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8003d6a:	bf38      	it	cc
 8003d6c:	6023      	strcc	r3, [r4, #0]
	HAL_Delay(1000);
 8003d6e:	f000 fdad 	bl	80048cc <HAL_Delay>
	Debug_printf("\n");
 8003d72:	4832      	ldr	r0, [pc, #200]	@ (8003e3c <saveRMC+0x1dc>)
 8003d74:	f000 fd3a 	bl	80047ec <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8003d78:	482f      	ldr	r0, [pc, #188]	@ (8003e38 <saveRMC+0x1d8>)
 8003d7a:	2280      	movs	r2, #128	@ 0x80
 8003d7c:	2100      	movs	r1, #0
}
 8003d7e:	b005      	add	sp, #20
 8003d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8003d84:	f007 b8f2 	b.w	800af6c <memset>
			Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003d88:	4658      	mov	r0, fp
 8003d8a:	f000 fd2f 	bl	80047ec <Debug_printf>
			W25_Reset();
 8003d8e:	f7ff fb88 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	4631      	mov	r1, r6
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	f7ff fca4 	bl	80036e4 <W25_ReadData>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003d9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003da0:	2280      	movs	r2, #128	@ 0x80
 8003da2:	4631      	mov	r1, r6
 8003da4:	4650      	mov	r0, sl
 8003da6:	f003 fc37 	bl	8007618 <HAL_UART_Transmit>
			W25_ShiftLeftFlashDataByPage();
 8003daa:	f7ff fcff 	bl	80037ac <W25_ShiftLeftFlashDataByPage>
			if(result_address > FLASH_START_ADDRESS){
 8003dae:	f8d9 3000 	ldr.w	r3, [r9]
 8003db2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003db6:	d909      	bls.n	8003dcc <saveRMC+0x16c>
				result_address -=128;
 8003db8:	3b80      	subs	r3, #128	@ 0x80
 8003dba:	f8c9 3000 	str.w	r3, [r9]
				address_rmc -=128;
 8003dbe:	6823      	ldr	r3, [r4, #0]
				start_addr_disconnect -= 128;
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <saveRMC+0x1e0>)
				address_rmc -=128;
 8003dc2:	3b80      	subs	r3, #128	@ 0x80
 8003dc4:	6023      	str	r3, [r4, #0]
				start_addr_disconnect -= 128;
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	3b80      	subs	r3, #128	@ 0x80
 8003dca:	6013      	str	r3, [r2, #0]
			current_addr -= 128;
 8003dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd0:	3b80      	subs	r3, #128	@ 0x80
 8003dd2:	f8c8 3000 	str.w	r3, [r8]
			if(end_addr_disconnect > 0)
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <saveRMC+0x1e4>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	b112      	cbz	r2, 8003de2 <saveRMC+0x182>
				end_addr_disconnect -= 128;
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	3a80      	subs	r2, #128	@ 0x80
 8003de0:	601a      	str	r2, [r3, #0]
			Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003de2:	6821      	ldr	r1, [r4, #0]
 8003de4:	4818      	ldr	r0, [pc, #96]	@ (8003e48 <saveRMC+0x1e8>)
 8003de6:	f000 fd01 	bl	80047ec <Debug_printf>
			W25_Reset();
 8003dea:	f7ff fb5a 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	4631      	mov	r1, r6
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	f7ff fc76 	bl	80036e4 <W25_ReadData>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003df8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dfc:	2280      	movs	r2, #128	@ 0x80
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4650      	mov	r0, sl
 8003e02:	f003 fc09 	bl	8007618 <HAL_UART_Transmit>
		for(size_t i = 0; i < loop_time; i++){
 8003e06:	3701      	adds	r7, #1
 8003e08:	e7a5      	b.n	8003d56 <saveRMC+0xf6>
		is_flash_overflow = 0;
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e7a5      	b.n	8003d5c <saveRMC+0xfc>
 8003e10:	200016f0 	.word	0x200016f0
 8003e14:	080102a7 	.word	0x080102a7
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	200015f0 	.word	0x200015f0
 8003e20:	0800fd24 	.word	0x0800fd24
 8003e24:	20001250 	.word	0x20001250
 8003e28:	0800f70b 	.word	0x0800f70b
 8003e2c:	080102c8 	.word	0x080102c8
 8003e30:	080102e5 	.word	0x080102e5
 8003e34:	20000e00 	.word	0x20000e00
 8003e38:	20001670 	.word	0x20001670
 8003e3c:	0800fc58 	.word	0x0800fc58
 8003e40:	20000dfc 	.word	0x20000dfc
 8003e44:	20000df4 	.word	0x20000df4
 8003e48:	08010337 	.word	0x08010337
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	20000e04 	.word	0x20000e04
 8003e54:	08010305 	.word	0x08010305

08003e58 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8003e60:	dd18      	ble.n	8003e94 <sendRMCDataWithAddrToGSM+0x3c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003e62:	4e0d      	ldr	r6, [pc, #52]	@ (8003e98 <sendRMCDataWithAddrToGSM+0x40>)
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8003e64:	490d      	ldr	r1, [pc, #52]	@ (8003e9c <sendRMCDataWithAddrToGSM+0x44>)
 8003e66:	480e      	ldr	r0, [pc, #56]	@ (8003ea0 <sendRMCDataWithAddrToGSM+0x48>)
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6c:	2221      	movs	r2, #33	@ 0x21
 8003e6e:	f003 fbd3 	bl	8007618 <HAL_UART_Transmit>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003e72:	6830      	ldr	r0, [r6, #0]
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	f003 fe0a 	bl	8007a90 <osMailAlloc>
 8003e7c:	4604      	mov	r4, r0
		if (mail != NULL) {
 8003e7e:	b148      	cbz	r0, 8003e94 <sendRMCDataWithAddrToGSM+0x3c>
			*mail = *mail_data; // Copy data into allocated memory
 8003e80:	4629      	mov	r1, r5
 8003e82:	2260      	movs	r2, #96	@ 0x60
 8003e84:	f007 fecb 	bl	800bc1e <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003e88:	6830      	ldr	r0, [r6, #0]
 8003e8a:	4621      	mov	r1, r4
		}
	}
}
 8003e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003e90:	f003 be03 	b.w	8007a9a <osMailPut>
}
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	bf00      	nop
 8003e98:	20000e0c 	.word	0x20000e0c
 8003e9c:	08010368 	.word	0x08010368
 8003ea0:	20001250 	.word	0x20001250

08003ea4 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003ea6:	4e64      	ldr	r6, [pc, #400]	@ (8004038 <receiveRMCDataFromGPS+0x194>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8003ea8:	4964      	ldr	r1, [pc, #400]	@ (800403c <receiveRMCDataFromGPS+0x198>)
 8003eaa:	4865      	ldr	r0, [pc, #404]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
void receiveRMCDataFromGPS(void) {
 8003eac:	b09f      	sub	sp, #124	@ 0x7c
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8003eae:	f000 fc8d 	bl	80047cc <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003eb2:	6831      	ldr	r1, [r6, #0]
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	a809      	add	r0, sp, #36	@ 0x24
 8003eba:	f003 fe19 	bl	8007af0 <osMailGet>
	if(evt.status == osEventMail){
 8003ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	f040 80b6 	bne.w	8004032 <receiveRMCDataFromGPS+0x18e>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003ec6:	495f      	ldr	r1, [pc, #380]	@ (8004044 <receiveRMCDataFromGPS+0x1a0>)
 8003ec8:	485d      	ldr	r0, [pc, #372]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8003eca:	4c5f      	ldr	r4, [pc, #380]	@ (8004048 <receiveRMCDataFromGPS+0x1a4>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003ecc:	f000 fc7e 	bl	80047cc <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8003ed0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8003ed2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8003ed6:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8003eda:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8003ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8003ee2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003ee4:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8003ee6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8003eea:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8003eee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8003ef2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8003ef6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8003efa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003efc:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 8003f02:	686b      	ldr	r3, [r5, #4]
 8003f04:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8003f06:	68ab      	ldr	r3, [r5, #8]
 8003f08:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8003f0a:	69ab      	ldr	r3, [r5, #24]
 8003f0c:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8003f0e:	696b      	ldr	r3, [r5, #20]
 8003f10:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;


		get_RTC_time_date(&rmc_flash);
 8003f12:	4620      	mov	r0, r4
		rmc_flash.date.Day = receivedData->date.Day;
 8003f14:	692b      	ldr	r3, [r5, #16]
 8003f16:	6123      	str	r3, [r4, #16]
		get_RTC_time_date(&rmc_flash);
 8003f18:	f7fe ff54 	bl	8002dc4 <get_RTC_time_date>

		snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	4a49      	ldr	r2, [pc, #292]	@ (800404c <receiveRMCDataFromGPS+0x1a8>)
 8003f28:	2146      	movs	r1, #70	@ 0x46
 8003f2a:	a80c      	add	r0, sp, #48	@ 0x30
 8003f2c:	f006 ff22 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003f30:	4843      	ldr	r0, [pc, #268]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
 8003f32:	a90c      	add	r1, sp, #48	@ 0x30
 8003f34:	f000 fc4a 	bl	80047cc <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FROM GPS AT SPI FLASH : %d/%d/%d\n", rmc_flash.date.Day, rmc_flash.date.Mon, rmc_flash.date.Yr);
 8003f38:	69a3      	ldr	r3, [r4, #24]
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	6963      	ldr	r3, [r4, #20]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	4a43      	ldr	r2, [pc, #268]	@ (8004050 <receiveRMCDataFromGPS+0x1ac>)
 8003f44:	2146      	movs	r1, #70	@ 0x46
 8003f46:	a80c      	add	r0, sp, #48	@ 0x30
 8003f48:	f006 ff14 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003f4c:	483c      	ldr	r0, [pc, #240]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
 8003f4e:	a90c      	add	r1, sp, #48	@ 0x30
 8003f50:	f000 fc3c 	bl	80047cc <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8003f54:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003f58:	9306      	str	r3, [sp, #24]
 8003f5a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003f5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003f6c:	2146      	movs	r1, #70	@ 0x46
 8003f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f72:	a80c      	add	r0, sp, #48	@ 0x30
 8003f74:	4a37      	ldr	r2, [pc, #220]	@ (8004054 <receiveRMCDataFromGPS+0x1b0>)
 8003f76:	f006 fefd 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003f7a:	4831      	ldr	r0, [pc, #196]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
 8003f7c:	a90c      	add	r1, sp, #48	@ 0x30
 8003f7e:	f000 fc25 	bl	80047cc <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8003f82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003f88:	f7fc faee 	bl	8000568 <__aeabi_f2d>
 8003f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f90:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003f92:	f7fc fae9 	bl	8000568 <__aeabi_f2d>
 8003f96:	4a30      	ldr	r2, [pc, #192]	@ (8004058 <receiveRMCDataFromGPS+0x1b4>)
 8003f98:	e9cd 0100 	strd	r0, r1, [sp]
 8003f9c:	2146      	movs	r1, #70	@ 0x46
 8003f9e:	a80c      	add	r0, sp, #48	@ 0x30
 8003fa0:	f006 fee8 	bl	800ad74 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003fa4:	4826      	ldr	r0, [pc, #152]	@ (8004040 <receiveRMCDataFromGPS+0x19c>)
 8003fa6:	a90c      	add	r1, sp, #48	@ 0x30
 8003fa8:	f000 fc10 	bl	80047cc <uart_transmit_string>

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8003fac:	492b      	ldr	r1, [pc, #172]	@ (800405c <receiveRMCDataFromGPS+0x1b8>)
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f7ff fdff 	bl	8003bb4 <format_rmc_data>

		if(rmc_flash.date.Yr >= 24 && countRMCReceived == 6){
 8003fb6:	69a3      	ldr	r3, [r4, #24]
 8003fb8:	2b17      	cmp	r3, #23
 8003fba:	dd2f      	ble.n	800401c <receiveRMCDataFromGPS+0x178>
 8003fbc:	4f28      	ldr	r7, [pc, #160]	@ (8004060 <receiveRMCDataFromGPS+0x1bc>)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d12b      	bne.n	800401c <receiveRMCDataFromGPS+0x178>
			saveRMC();
 8003fc4:	f7ff fe4c 	bl	8003c60 <saveRMC>
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8003fc8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003fcc:	4825      	ldr	r0, [pc, #148]	@ (8004064 <receiveRMCDataFromGPS+0x1c0>)
 8003fce:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8003fd2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003fd6:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
			mail_gsm.rmc.speed = rmc_flash.speed;
 8003fda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fdc:	6283      	str	r3, [r0, #40]	@ 0x28
			mail_gsm.rmc.course = rmc_flash.course;
 8003fde:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003fe0:	62c3      	str	r3, [r0, #44]	@ 0x2c
			mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8003fe2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003fe6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8003fea:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003fee:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
			mail_gsm.rmc.isValid = rmc_flash.isValid;
 8003ff2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ff4:	6303      	str	r3, [r0, #48]	@ 0x30
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	6003      	str	r3, [r0, #0]
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	6043      	str	r3, [r0, #4]
			mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	6083      	str	r3, [r0, #8]
			mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8004002:	69a3      	ldr	r3, [r4, #24]
 8004004:	6183      	str	r3, [r0, #24]
			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	6143      	str	r3, [r0, #20]
			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	6103      	str	r3, [r0, #16]
			mail_gsm.address = current_addr;
 800400e:	4b16      	ldr	r3, [pc, #88]	@ (8004068 <receiveRMCDataFromGPS+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6583      	str	r3, [r0, #88]	@ 0x58
			sendRMCDataWithAddrToGSM(&mail_gsm);
 8004014:	f7ff ff20 	bl	8003e58 <sendRMCDataWithAddrToGSM>
			countRMCReceived = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	603b      	str	r3, [r7, #0]
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 800401c:	6830      	ldr	r0, [r6, #0]
 800401e:	4629      	mov	r1, r5
 8004020:	f003 fd9f 	bl	8007b62 <osMailFree>
		// Free memory after use
		if(rmc_flash.date.Yr >= 24)
 8004024:	69a3      	ldr	r3, [r4, #24]
 8004026:	2b17      	cmp	r3, #23
			countRMCReceived++;
 8004028:	bfc1      	itttt	gt
 800402a:	4a0d      	ldrgt	r2, [pc, #52]	@ (8004060 <receiveRMCDataFromGPS+0x1bc>)
 800402c:	6813      	ldrgt	r3, [r2, #0]
 800402e:	3301      	addgt	r3, #1
 8004030:	6013      	strgt	r3, [r2, #0]
	}
}
 8004032:	b01f      	add	sp, #124	@ 0x7c
 8004034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004036:	bf00      	nop
 8004038:	200002c8 	.word	0x200002c8
 800403c:	0801038a 	.word	0x0801038a
 8004040:	20001250 	.word	0x20001250
 8004044:	080103af 	.word	0x080103af
 8004048:	20001598 	.word	0x20001598
 800404c:	080103d0 	.word	0x080103d0
 8004050:	08010401 	.word	0x08010401
 8004054:	08010431 	.word	0x08010431
 8004058:	0801046c 	.word	0x0801046c
 800405c:	200015f0 	.word	0x200015f0
 8004060:	20001534 	.word	0x20001534
 8004064:	20001538 	.word	0x20001538
 8004068:	20000000 	.word	0x20000000

0800406c <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 800406c:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 800406e:	4e68      	ldr	r6, [pc, #416]	@ (8004210 <StartSpiFlash+0x1a4>)
 8004070:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8004238 <StartSpiFlash+0x1cc>
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	f8c9 3000 	str.w	r3, [r9]
{
 800407a:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 800407c:	2360      	movs	r3, #96	@ 0x60
 800407e:	2280      	movs	r2, #128	@ 0x80
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8004080:	2100      	movs	r1, #0
 8004082:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8004084:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004088:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 800408c:	f003 fcd5 	bl	8007a3a <osMailCreate>
 8004090:	4b60      	ldr	r3, [pc, #384]	@ (8004214 <StartSpiFlash+0x1a8>)
	result_address = 0x3280;
 8004092:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800423c <StartSpiFlash+0x1d0>
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8004096:	6018      	str	r0, [r3, #0]

	for(;;){
		if(result_address % 0x1000 == 0x0000 && result_address >= 0x4000){
			osDelay(500);
			W25_Reset();
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8004098:	4c5f      	ldr	r4, [pc, #380]	@ (8004218 <StartSpiFlash+0x1ac>)
			Debug_printf("Current address data before shifting left:");
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800409a:	4d60      	ldr	r5, [pc, #384]	@ (800421c <StartSpiFlash+0x1b0>)
			Debug_printf("\n\n");
 800409c:	4f60      	ldr	r7, [pc, #384]	@ (8004220 <StartSpiFlash+0x1b4>)
	result_address = 0x3280;
 800409e:	f44f 534a 	mov.w	r3, #12928	@ 0x3280
 80040a2:	f8c8 3000 	str.w	r3, [r8]
		if(result_address % 0x1000 == 0x0000 && result_address >= 0x4000){
 80040a6:	f8d8 3000 	ldr.w	r3, [r8]
 80040aa:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d16e      	bne.n	8004190 <StartSpiFlash+0x124>
 80040b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b6:	d36b      	bcc.n	8004190 <StartSpiFlash+0x124>
			osDelay(500);
 80040b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040bc:	f003 fc1c 	bl	80078f8 <osDelay>
			W25_Reset();
 80040c0:	f7ff f9ef 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	4621      	mov	r1, r4
 80040c8:	6830      	ldr	r0, [r6, #0]
 80040ca:	f7ff fb0b 	bl	80036e4 <W25_ReadData>
			Debug_printf("Current address data before shifting left:");
 80040ce:	4855      	ldr	r0, [pc, #340]	@ (8004224 <StartSpiFlash+0x1b8>)
 80040d0:	f000 fb8c 	bl	80047ec <Debug_printf>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80040d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040d8:	2280      	movs	r2, #128	@ 0x80
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f003 fa9b 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 80040e2:	4638      	mov	r0, r7
 80040e4:	f000 fb82 	bl	80047ec <Debug_printf>

			W25_Reset();
 80040e8:	f7ff f9db 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc - 0x1000, flashBufferRMCReceived, 128);
 80040ec:	6830      	ldr	r0, [r6, #0]
 80040ee:	2280      	movs	r2, #128	@ 0x80
 80040f0:	4621      	mov	r1, r4
 80040f2:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 80040f6:	f7ff faf5 	bl	80036e4 <W25_ReadData>
			Debug_printf("Previous address data before shifting left:");
 80040fa:	484b      	ldr	r0, [pc, #300]	@ (8004228 <StartSpiFlash+0x1bc>)
 80040fc:	f000 fb76 	bl	80047ec <Debug_printf>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004100:	2280      	movs	r2, #128	@ 0x80
 8004102:	4621      	mov	r1, r4
 8004104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004108:	4628      	mov	r0, r5
 800410a:	f003 fa85 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800410e:	4638      	mov	r0, r7
 8004110:	f000 fb6c 	bl	80047ec <Debug_printf>

			W25_ShiftLeftEntireFlashBySector(result_address);
 8004114:	f8d8 0000 	ldr.w	r0, [r8]
 8004118:	f7ff fc8c 	bl	8003a34 <W25_ShiftLeftEntireFlashBySector>
			address_rmc -= 0x1000;
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8004122:	6033      	str	r3, [r6, #0]
			current_addr -= 0x1000;
 8004124:	f8d9 3000 	ldr.w	r3, [r9]
 8004128:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800412c:	f8c9 3000 	str.w	r3, [r9]
			result_address-= 0x1000;
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8004138:	f8c8 3000 	str.w	r3, [r8]

			W25_Reset();
 800413c:	f7ff f9b1 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8004140:	2280      	movs	r2, #128	@ 0x80
 8004142:	4621      	mov	r1, r4
 8004144:	6830      	ldr	r0, [r6, #0]
 8004146:	f7ff facd 	bl	80036e4 <W25_ReadData>
			Debug_printf("Current address data after shifting left:");
 800414a:	4838      	ldr	r0, [pc, #224]	@ (800422c <StartSpiFlash+0x1c0>)
 800414c:	f000 fb4e 	bl	80047ec <Debug_printf>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004154:	2280      	movs	r2, #128	@ 0x80
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f003 fa5d 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800415e:	4638      	mov	r0, r7
 8004160:	f000 fb44 	bl	80047ec <Debug_printf>

			W25_Reset();
 8004164:	f7ff f99d 	bl	80034a2 <W25_Reset>
			W25_ReadData(address_rmc - 0x1000, flashBufferRMCReceived, 128);
 8004168:	6830      	ldr	r0, [r6, #0]
 800416a:	2280      	movs	r2, #128	@ 0x80
 800416c:	4621      	mov	r1, r4
 800416e:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8004172:	f7ff fab7 	bl	80036e4 <W25_ReadData>
			Debug_printf("Previous address data after shifting left:");
 8004176:	482e      	ldr	r0, [pc, #184]	@ (8004230 <StartSpiFlash+0x1c4>)
 8004178:	f000 fb38 	bl	80047ec <Debug_printf>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800417c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004180:	2280      	movs	r2, #128	@ 0x80
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f003 fa47 	bl	8007618 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800418a:	4638      	mov	r0, r7
 800418c:	f000 fb2e 	bl	80047ec <Debug_printf>

		}
		osDelay(500);
 8004190:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004194:	f003 fbb0 	bl	80078f8 <osDelay>
		//uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
		W25_Reset();
 8004198:	f7ff f983 	bl	80034a2 <W25_Reset>
		W25_ReadJedecID();
 800419c:	f7ff f9ae 	bl	80034fc <W25_ReadJedecID>
		W25_Reset();
 80041a0:	f7ff f97f 	bl	80034a2 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80041a4:	2280      	movs	r2, #128	@ 0x80
 80041a6:	f8d9 0000 	ldr.w	r0, [r9]
 80041aa:	4621      	mov	r1, r4
 80041ac:	f7ff fa9a 	bl	80036e4 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 80041b0:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <StartSpiFlash+0x1c8>)
 80041b2:	aa04      	add	r2, sp, #16
 80041b4:	f103 0e10 	add.w	lr, r3, #16
 80041b8:	4692      	mov	sl, r2
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	4694      	mov	ip, r2
 80041c0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80041c4:	3308      	adds	r3, #8
 80041c6:	4573      	cmp	r3, lr
 80041c8:	4662      	mov	r2, ip
 80041ca:	d1f6      	bne.n	80041ba <StartSpiFlash+0x14e>
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	889b      	ldrh	r3, [r3, #4]
 80041d0:	f8cc 0000 	str.w	r0, [ip]
 80041d4:	f8ac 3004 	strh.w	r3, [ip, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80041d8:	4650      	mov	r0, sl
 80041da:	f7fc f859 	bl	8000290 <strlen>
 80041de:	4651      	mov	r1, sl
 80041e0:	b282      	uxth	r2, r0
 80041e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041e6:	4628      	mov	r0, r5
 80041e8:	f003 fa16 	bl	8007618 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80041ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f003 fa0f 	bl	8007618 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 80041fa:	f7ff fe53 	bl	8003ea4 <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80041fe:	4628      	mov	r0, r5
 8004200:	4639      	mov	r1, r7
 8004202:	f000 fae3 	bl	80047cc <uart_transmit_string>
		osDelay(1500);
 8004206:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800420a:	f003 fb75 	bl	80078f8 <osDelay>
	for(;;){
 800420e:	e74a      	b.n	80040a6 <StartSpiFlash+0x3a>
 8004210:	20000004 	.word	0x20000004
 8004214:	20000e0c 	.word	0x20000e0c
 8004218:	20001670 	.word	0x20001670
 800421c:	20001250 	.word	0x20001250
 8004220:	0800fc57 	.word	0x0800fc57
 8004224:	080104aa 	.word	0x080104aa
 8004228:	080104d5 	.word	0x080104d5
 800422c:	08010501 	.word	0x08010501
 8004230:	0801052b 	.word	0x0801052b
 8004234:	08010556 	.word	0x08010556
 8004238:	20000000 	.word	0x20000000
 800423c:	20000e04 	.word	0x20000e04

08004240 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <HAL_MspInit+0x38>)
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	619a      	str	r2, [r3, #24]
 800424a:	699a      	ldr	r2, [r3, #24]
{
 800424c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	f002 0201 	and.w	r2, r2, #1
 8004252:	9200      	str	r2, [sp, #0]
 8004254:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800425c:	61da      	str	r2, [r3, #28]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004268:	2200      	movs	r2, #0
 800426a:	210f      	movs	r1, #15
 800426c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004270:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004272:	f001 b891 	b.w	8005398 <HAL_NVIC_SetPriority>
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800427c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427e:	2214      	movs	r2, #20
{
 8004280:	b08a      	sub	sp, #40	@ 0x28
 8004282:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	2100      	movs	r1, #0
 8004286:	eb0d 0002 	add.w	r0, sp, r2
 800428a:	f006 fe6f 	bl	800af6c <memset>
  if(hadc->Instance==ADC2)
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	4a3d      	ldr	r2, [pc, #244]	@ (8004388 <HAL_ADC_MspInit+0x10c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d137      	bne.n	8004306 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004296:	4b3d      	ldr	r3, [pc, #244]	@ (800438c <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8004298:	4c3d      	ldr	r4, [pc, #244]	@ (8004390 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80042a0:	615a      	str	r2, [r3, #20]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80042a8:	9201      	str	r2, [sp, #4]
 80042aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80042b2:	615a      	str	r2, [r3, #20]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042be:	2620      	movs	r6, #32
 80042c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042c6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042c8:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042cc:	f001 f988 	bl	80055e0 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042d4:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80043a4 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042d8:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042dc:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042de:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80042e2:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e8:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80042ec:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f0:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80042f2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80042f4:	f001 f8b0 	bl	8005458 <HAL_DMA_Init>
 80042f8:	b108      	cbz	r0, 80042fe <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80042fa:	f7ff f88a 	bl	8003412 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80042fe:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004300:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004302:	b00a      	add	sp, #40	@ 0x28
 8004304:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8004306:	4a23      	ldr	r2, [pc, #140]	@ (8004394 <HAL_ADC_MspInit+0x118>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d1fa      	bne.n	8004302 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800430c:	4b1f      	ldr	r3, [pc, #124]	@ (800438c <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 800430e:	4c22      	ldr	r4, [pc, #136]	@ (8004398 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004310:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004312:	4822      	ldr	r0, [pc, #136]	@ (800439c <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004314:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004318:	615a      	str	r2, [r3, #20]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004320:	9203      	str	r2, [sp, #12]
 8004322:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800432a:	615a      	str	r2, [r3, #20]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004332:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004334:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004338:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800433a:	2303      	movs	r3, #3
 800433c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004340:	f001 f94e 	bl	80055e0 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004344:	2080      	movs	r0, #128	@ 0x80
 8004346:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800434a:	4915      	ldr	r1, [pc, #84]	@ (80043a0 <HAL_ADC_MspInit+0x124>)
 800434c:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800434e:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004352:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8004356:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004358:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800435a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800435e:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004362:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004364:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004366:	f001 f877 	bl	8005458 <HAL_DMA_Init>
 800436a:	b108      	cbz	r0, 8004370 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 800436c:	f7ff f851 	bl	8003412 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004370:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004372:	2200      	movs	r2, #0
 8004374:	2105      	movs	r1, #5
 8004376:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004378:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800437a:	f001 f80d 	bl	8005398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800437e:	202f      	movs	r0, #47	@ 0x2f
 8004380:	f001 f83c 	bl	80053fc <HAL_NVIC_EnableIRQ>
}
 8004384:	e7bd      	b.n	8004302 <HAL_ADC_MspInit+0x86>
 8004386:	bf00      	nop
 8004388:	50000100 	.word	0x50000100
 800438c:	40021000 	.word	0x40021000
 8004390:	20001450 	.word	0x20001450
 8004394:	50000400 	.word	0x50000400
 8004398:	2000140c 	.word	0x2000140c
 800439c:	48000400 	.word	0x48000400
 80043a0:	40020458 	.word	0x40020458
 80043a4:	40020408 	.word	0x40020408

080043a8 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80043a8:	6802      	ldr	r2, [r0, #0]
 80043aa:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <HAL_RTC_MspInit+0x20>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d10a      	bne.n	80043c6 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043b4:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <HAL_RTC_MspInit+0x24>)
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80043c6:	4770      	bx	lr
 80043c8:	40002800 	.word	0x40002800
 80043cc:	10908100 	.word	0x10908100

080043d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043d0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d2:	2214      	movs	r2, #20
{
 80043d4:	b08a      	sub	sp, #40	@ 0x28
 80043d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	2100      	movs	r1, #0
 80043da:	eb0d 0002 	add.w	r0, sp, r2
 80043de:	f006 fdc5 	bl	800af6c <memset>
  if(hspi->Instance==SPI1)
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <HAL_SPI_MspInit+0x90>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d120      	bne.n	800442c <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <HAL_SPI_MspInit+0x94>)
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043f2:	619a      	str	r2, [r3, #24]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004404:	615a      	str	r2, [r3, #20]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800440c:	9302      	str	r3, [sp, #8]
 800440e:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004410:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004412:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004414:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004416:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800441a:	2305      	movs	r3, #5
 800441c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004420:	4811      	ldr	r0, [pc, #68]	@ (8004468 <HAL_SPI_MspInit+0x98>)
 8004422:	a905      	add	r1, sp, #20
 8004424:	f001 f8dc 	bl	80055e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004428:	b00a      	add	sp, #40	@ 0x28
 800442a:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800442c:	4a0f      	ldr	r2, [pc, #60]	@ (800446c <HAL_SPI_MspInit+0x9c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d1fa      	bne.n	8004428 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004432:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_SPI_MspInit+0x94>)
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	61da      	str	r2, [r3, #28]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800444c:	615a      	str	r2, [r3, #20]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004454:	9304      	str	r3, [sp, #16]
 8004456:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004458:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800445c:	e7d9      	b.n	8004412 <HAL_SPI_MspInit+0x42>
 800445e:	bf00      	nop
 8004460:	40013000 	.word	0x40013000
 8004464:	40021000 	.word	0x40021000
 8004468:	48000400 	.word	0x48000400
 800446c:	40003800 	.word	0x40003800

08004470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004470:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004472:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_TIM_Base_MspInit+0x3c>)
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d115      	bne.n	80044a6 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800447a:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800447e:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	f042 0202 	orr.w	r2, r2, #2
 8004486:	61da      	str	r2, [r3, #28]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004494:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004496:	f000 ff7f 	bl	8005398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800449a:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800449c:	b003      	add	sp, #12
 800449e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044a2:	f000 bfab 	b.w	80053fc <HAL_NVIC_EnableIRQ>
}
 80044a6:	b003      	add	sp, #12
 80044a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044ac:	40000400 	.word	0x40000400

080044b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044b0:	b530      	push	{r4, r5, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b6:	2214      	movs	r2, #20
 80044b8:	2100      	movs	r1, #0
 80044ba:	a807      	add	r0, sp, #28
 80044bc:	f006 fd56 	bl	800af6c <memset>
  if(huart->Instance==USART1)
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	4a4a      	ldr	r2, [pc, #296]	@ (80045ec <HAL_UART_MspInit+0x13c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d137      	bne.n	8004538 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c8:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80044ca:	4c4a      	ldr	r4, [pc, #296]	@ (80045f4 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044d2:	619a      	str	r2, [r3, #24]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80044da:	9201      	str	r2, [sp, #4]
 80044dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044e4:	615a      	str	r2, [r3, #20]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ec:	9302      	str	r3, [sp, #8]
 80044ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 80044f4:	2302      	movs	r3, #2
 80044f6:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044fa:	2203      	movs	r2, #3
 80044fc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fe:	a907      	add	r1, sp, #28
 8004500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004504:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f001 f86a 	bl	80055e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800450c:	4b3a      	ldr	r3, [pc, #232]	@ (80045f8 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800450e:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004510:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004512:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004514:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004518:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800451c:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800451e:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004520:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004522:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004524:	4620      	mov	r0, r4
 8004526:	f000 ff97 	bl	8005458 <HAL_DMA_Init>
 800452a:	b108      	cbz	r0, 8004530 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 800452c:	f7fe ff71 	bl	8003412 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004530:	676c      	str	r4, [r5, #116]	@ 0x74
 8004532:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004534:	b00d      	add	sp, #52	@ 0x34
 8004536:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8004538:	4a30      	ldr	r2, [pc, #192]	@ (80045fc <HAL_UART_MspInit+0x14c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d123      	bne.n	8004586 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800453e:	4b2c      	ldr	r3, [pc, #176]	@ (80045f0 <HAL_UART_MspInit+0x140>)
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004546:	61da      	str	r2, [r3, #28]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800454e:	9203      	str	r2, [sp, #12]
 8004550:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004558:	615a      	str	r2, [r3, #20]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004564:	240c      	movs	r4, #12
 8004566:	2302      	movs	r3, #2
 8004568:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800456c:	f04f 0c03 	mov.w	ip, #3
 8004570:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004572:	a907      	add	r1, sp, #28
 8004574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004578:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800457c:	4c20      	ldr	r4, [pc, #128]	@ (8004600 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	f001 f82f 	bl	80055e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004582:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <HAL_UART_MspInit+0x154>)
 8004584:	e7c3      	b.n	800450e <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 8004586:	4a20      	ldr	r2, [pc, #128]	@ (8004608 <HAL_UART_MspInit+0x158>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d1d3      	bne.n	8004534 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458e:	481f      	ldr	r0, [pc, #124]	@ (800460c <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004590:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004592:	4c1f      	ldr	r4, [pc, #124]	@ (8004610 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004594:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004598:	61da      	str	r2, [r3, #28]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80045a0:	9205      	str	r2, [sp, #20]
 80045a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80045aa:	615a      	str	r2, [r3, #20]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b4:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	2302      	movs	r3, #2
 80045bc:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045c0:	2103      	movs	r1, #3
 80045c2:	2307      	movs	r3, #7
 80045c4:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	a907      	add	r1, sp, #28
 80045ca:	f001 f809 	bl	80055e0 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ce:	4811      	ldr	r0, [pc, #68]	@ (8004614 <HAL_UART_MspInit+0x164>)
 80045d0:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045d2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045d4:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045d8:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045dc:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045de:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80045e0:	2320      	movs	r3, #32
 80045e2:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80045e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045e8:	e79b      	b.n	8004522 <HAL_UART_MspInit+0x72>
 80045ea:	bf00      	nop
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40021000 	.word	0x40021000
 80045f4:	200010fc 	.word	0x200010fc
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40004400 	.word	0x40004400
 8004600:	200010b8 	.word	0x200010b8
 8004604:	4002006c 	.word	0x4002006c
 8004608:	40004800 	.word	0x40004800
 800460c:	48000400 	.word	0x48000400
 8004610:	20001074 	.word	0x20001074
 8004614:	40020030 	.word	0x40020030

08004618 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004618:	4b21      	ldr	r3, [pc, #132]	@ (80046a0 <HAL_InitTick+0x88>)
{
 800461a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	61da      	str	r2, [r3, #28]
 8004624:	69db      	ldr	r3, [r3, #28]
{
 8004626:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	9302      	str	r3, [sp, #8]
{
 800462e:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004630:	a901      	add	r1, sp, #4
 8004632:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004634:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004636:	f001 fbfd 	bl	8005e34 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800463a:	9b06      	ldr	r3, [sp, #24]
 800463c:	bb53      	cbnz	r3, 8004694 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800463e:	f001 fbc9 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004642:	4e18      	ldr	r6, [pc, #96]	@ (80046a4 <HAL_InitTick+0x8c>)
 8004644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004648:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800464a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800464e:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004650:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <HAL_InitTick+0x90>)
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004658:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 800465a:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004660:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004662:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004664:	f002 fc2a 	bl	8006ebc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004668:	4604      	mov	r4, r0
 800466a:	b980      	cbnz	r0, 800468e <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800466c:	4630      	mov	r0, r6
 800466e:	f002 fae7 	bl	8006c40 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004672:	4604      	mov	r4, r0
 8004674:	b958      	cbnz	r0, 800468e <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004676:	201c      	movs	r0, #28
 8004678:	f000 fec0 	bl	80053fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467c:	2d0f      	cmp	r5, #15
 800467e:	d80d      	bhi.n	800469c <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004680:	4622      	mov	r2, r4
 8004682:	4629      	mov	r1, r5
 8004684:	201c      	movs	r0, #28
 8004686:	f000 fe87 	bl	8005398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <HAL_InitTick+0x94>)
 800468c:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800468e:	4620      	mov	r0, r4
 8004690:	b008      	add	sp, #32
 8004692:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004694:	f001 fb9e 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
 8004698:	0040      	lsls	r0, r0, #1
 800469a:	e7d2      	b.n	8004642 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 800469c:	2401      	movs	r4, #1
 800469e:	e7f6      	b.n	800468e <HAL_InitTick+0x76>
 80046a0:	40021000 	.word	0x40021000
 80046a4:	200027f4 	.word	0x200027f4
 80046a8:	000f4240 	.word	0x000f4240
 80046ac:	20000014 	.word	0x20000014

080046b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046b0:	e7fe      	b.n	80046b0 <NMI_Handler>

080046b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046b2:	e7fe      	b.n	80046b2 <HardFault_Handler>

080046b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046b4:	e7fe      	b.n	80046b4 <MemManage_Handler>

080046b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046b6:	e7fe      	b.n	80046b6 <BusFault_Handler>

080046b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046b8:	e7fe      	b.n	80046b8 <UsageFault_Handler>

080046ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ba:	4770      	bx	lr

080046bc <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80046bc:	4801      	ldr	r0, [pc, #4]	@ (80046c4 <DMA1_Channel3_IRQHandler+0x8>)
 80046be:	f000 bf47 	b.w	8005550 <HAL_DMA_IRQHandler>
 80046c2:	bf00      	nop
 80046c4:	20001074 	.word	0x20001074

080046c8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046c8:	4801      	ldr	r0, [pc, #4]	@ (80046d0 <DMA1_Channel5_IRQHandler+0x8>)
 80046ca:	f000 bf41 	b.w	8005550 <HAL_DMA_IRQHandler>
 80046ce:	bf00      	nop
 80046d0:	200010fc 	.word	0x200010fc

080046d4 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <DMA1_Channel6_IRQHandler+0x8>)
 80046d6:	f000 bf3b 	b.w	8005550 <HAL_DMA_IRQHandler>
 80046da:	bf00      	nop
 80046dc:	200010b8 	.word	0x200010b8

080046e0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <TIM2_IRQHandler+0x8>)
 80046e2:	f002 bae7 	b.w	8006cb4 <HAL_TIM_IRQHandler>
 80046e6:	bf00      	nop
 80046e8:	200027f4 	.word	0x200027f4

080046ec <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046ec:	4801      	ldr	r0, [pc, #4]	@ (80046f4 <TIM3_IRQHandler+0x8>)
 80046ee:	f002 bae1 	b.w	8006cb4 <HAL_TIM_IRQHandler>
 80046f2:	bf00      	nop
 80046f4:	200012d8 	.word	0x200012d8

080046f8 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80046f8:	4801      	ldr	r0, [pc, #4]	@ (8004700 <ADC3_IRQHandler+0x8>)
 80046fa:	f000 ba51 	b.w	8004ba0 <HAL_ADC_IRQHandler>
 80046fe:	bf00      	nop
 8004700:	20001494 	.word	0x20001494

08004704 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004704:	4801      	ldr	r0, [pc, #4]	@ (800470c <DMA2_Channel1_IRQHandler+0x8>)
 8004706:	f000 bf23 	b.w	8005550 <HAL_DMA_IRQHandler>
 800470a:	bf00      	nop
 800470c:	20001450 	.word	0x20001450

08004710 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004710:	4801      	ldr	r0, [pc, #4]	@ (8004718 <DMA2_Channel5_IRQHandler+0x8>)
 8004712:	f000 bf1d 	b.w	8005550 <HAL_DMA_IRQHandler>
 8004716:	bf00      	nop
 8004718:	2000140c 	.word	0x2000140c

0800471c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800471c:	2001      	movs	r0, #1
 800471e:	4770      	bx	lr

08004720 <_kill>:

int _kill(int pid, int sig)
{
 8004720:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004722:	f007 fa45 	bl	800bbb0 <__errno>
 8004726:	2316      	movs	r3, #22
 8004728:	6003      	str	r3, [r0, #0]
  return -1;
}
 800472a:	f04f 30ff 	mov.w	r0, #4294967295
 800472e:	bd08      	pop	{r3, pc}

08004730 <_exit>:

void _exit (int status)
{
 8004730:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004732:	f007 fa3d 	bl	800bbb0 <__errno>
 8004736:	2316      	movs	r3, #22
 8004738:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800473a:	e7fe      	b.n	800473a <_exit+0xa>

0800473c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	460d      	mov	r5, r1
 8004740:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004742:	460e      	mov	r6, r1
 8004744:	1b73      	subs	r3, r6, r5
 8004746:	429c      	cmp	r4, r3
 8004748:	dc01      	bgt.n	800474e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800474a:	4620      	mov	r0, r4
 800474c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800474e:	f3af 8000 	nop.w
 8004752:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004756:	e7f5      	b.n	8004744 <_read+0x8>

08004758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	460d      	mov	r5, r1
 800475c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	460e      	mov	r6, r1
 8004760:	1b73      	subs	r3, r6, r5
 8004762:	429c      	cmp	r4, r3
 8004764:	dc01      	bgt.n	800476a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004766:	4620      	mov	r0, r4
 8004768:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800476a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800476e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004772:	e7f5      	b.n	8004760 <_write+0x8>

08004774 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	4770      	bx	lr

0800477a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800477a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800477e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004780:	2000      	movs	r0, #0
 8004782:	4770      	bx	lr

08004784 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004784:	2001      	movs	r0, #1
 8004786:	4770      	bx	lr

08004788 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004788:	2000      	movs	r0, #0
 800478a:	4770      	bx	lr

0800478c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800478c:	4a0b      	ldr	r2, [pc, #44]	@ (80047bc <_sbrk+0x30>)
 800478e:	6811      	ldr	r1, [r2, #0]
{
 8004790:	b510      	push	{r4, lr}
 8004792:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004794:	b909      	cbnz	r1, 800479a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004796:	490a      	ldr	r1, [pc, #40]	@ (80047c0 <_sbrk+0x34>)
 8004798:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800479a:	6810      	ldr	r0, [r2, #0]
 800479c:	4909      	ldr	r1, [pc, #36]	@ (80047c4 <_sbrk+0x38>)
 800479e:	4c0a      	ldr	r4, [pc, #40]	@ (80047c8 <_sbrk+0x3c>)
 80047a0:	4403      	add	r3, r0
 80047a2:	1b09      	subs	r1, r1, r4
 80047a4:	428b      	cmp	r3, r1
 80047a6:	d906      	bls.n	80047b6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80047a8:	f007 fa02 	bl	800bbb0 <__errno>
 80047ac:	230c      	movs	r3, #12
 80047ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80047b4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80047b6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80047b8:	e7fc      	b.n	80047b4 <_sbrk+0x28>
 80047ba:	bf00      	nop
 80047bc:	20002844 	.word	0x20002844
 80047c0:	20009868 	.word	0x20009868
 80047c4:	2000a000 	.word	0x2000a000
 80047c8:	00000400 	.word	0x00000400

080047cc <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80047d0:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80047d2:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80047d4:	f7fb fd5c 	bl	8000290 <strlen>
 80047d8:	4621      	mov	r1, r4
 80047da:	b282      	uxth	r2, r0
 80047dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047e0:	4628      	mov	r0, r5
}
 80047e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80047e6:	f002 bf17 	b.w	8007618 <HAL_UART_Transmit>
	...

080047ec <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80047ec:	b40f      	push	{r0, r1, r2, r3}
 80047ee:	b500      	push	{lr}
 80047f0:	b0c3      	sub	sp, #268	@ 0x10c
 80047f2:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80047f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80047f8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80047fc:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80047fe:	a802      	add	r0, sp, #8
 8004800:	f006 fba6 	bl	800af50 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8004804:	4804      	ldr	r0, [pc, #16]	@ (8004818 <Debug_printf+0x2c>)
 8004806:	a902      	add	r1, sp, #8
 8004808:	f7ff ffe0 	bl	80047cc <uart_transmit_string>
}
 800480c:	b043      	add	sp, #268	@ 0x10c
 800480e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004812:	b004      	add	sp, #16
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20001250 	.word	0x20001250

0800481c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800481c:	4a03      	ldr	r2, [pc, #12]	@ (800482c <SystemInit+0x10>)
 800481e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004826:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004868 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004834:	f7ff fff2 	bl	800481c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004838:	480c      	ldr	r0, [pc, #48]	@ (800486c <LoopForever+0x6>)
  ldr r1, =_edata
 800483a:	490d      	ldr	r1, [pc, #52]	@ (8004870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800483c:	4a0d      	ldr	r2, [pc, #52]	@ (8004874 <LoopForever+0xe>)
  movs r3, #0
 800483e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004840:	e002      	b.n	8004848 <LoopCopyDataInit>

08004842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004846:	3304      	adds	r3, #4

08004848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800484c:	d3f9      	bcc.n	8004842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800484e:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004850:	4c0a      	ldr	r4, [pc, #40]	@ (800487c <LoopForever+0x16>)
  movs r3, #0
 8004852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004854:	e001      	b.n	800485a <LoopFillZerobss>

08004856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004858:	3204      	adds	r2, #4

0800485a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800485c:	d3fb      	bcc.n	8004856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800485e:	f007 f9ad 	bl	800bbbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004862:	f7fe fb6d 	bl	8002f40 <main>

08004866 <LoopForever>:

LoopForever:
    b LoopForever
 8004866:	e7fe      	b.n	8004866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004868:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800486c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004870:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004874:	08010b08 	.word	0x08010b08
  ldr r2, =_sbss
 8004878:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800487c:	20009864 	.word	0x20009864

08004880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004880:	e7fe      	b.n	8004880 <ADC1_2_IRQHandler>
	...

08004884 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004884:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <HAL_Init+0x20>)
{
 8004886:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004888:	6813      	ldr	r3, [r2, #0]
 800488a:	f043 0310 	orr.w	r3, r3, #16
 800488e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004890:	2003      	movs	r0, #3
 8004892:	f000 fd6f 	bl	8005374 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004896:	200f      	movs	r0, #15
 8004898:	f7ff febe 	bl	8004618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800489c:	f7ff fcd0 	bl	8004240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80048a0:	2000      	movs	r0, #0
 80048a2:	bd08      	pop	{r3, pc}
 80048a4:	40022000 	.word	0x40022000

080048a8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80048a8:	4a03      	ldr	r2, [pc, #12]	@ (80048b8 <HAL_IncTick+0x10>)
 80048aa:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <HAL_IncTick+0x14>)
 80048ac:	6811      	ldr	r1, [r2, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	440b      	add	r3, r1
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20002848 	.word	0x20002848
 80048bc:	20000010 	.word	0x20000010

080048c0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80048c0:	4b01      	ldr	r3, [pc, #4]	@ (80048c8 <HAL_GetTick+0x8>)
 80048c2:	6818      	ldr	r0, [r3, #0]
}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20002848 	.word	0x20002848

080048cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048d0:	f7ff fff6 	bl	80048c0 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048d4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80048d6:	bf1c      	itt	ne
 80048d8:	4b05      	ldrne	r3, [pc, #20]	@ (80048f0 <HAL_Delay+0x24>)
 80048da:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80048dc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80048de:	bf18      	it	ne
 80048e0:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80048e2:	f7ff ffed 	bl	80048c0 <HAL_GetTick>
 80048e6:	1b43      	subs	r3, r0, r5
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d3fa      	bcc.n	80048e2 <HAL_Delay+0x16>
  {
  }
}
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	20000010 	.word	0x20000010

080048f4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80048f4:	4770      	bx	lr

080048f6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80048f6:	4770      	bx	lr

080048f8 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80048f8:	4770      	bx	lr

080048fa <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048fa:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048fc:	6803      	ldr	r3, [r0, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	f002 0203 	and.w	r2, r2, #3
 8004904:	2a01      	cmp	r2, #1
{
 8004906:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004908:	d001      	beq.n	800490e <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800490a:	2000      	movs	r0, #0
}
 800490c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	07d1      	lsls	r1, r2, #31
 8004912:	d5fa      	bpl.n	800490a <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	f002 020d 	and.w	r2, r2, #13
 800491a:	2a01      	cmp	r2, #1
 800491c:	d115      	bne.n	800494a <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	f042 0202 	orr.w	r2, r2, #2
 8004924:	609a      	str	r2, [r3, #8]
 8004926:	2203      	movs	r2, #3
 8004928:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800492a:	f7ff ffc9 	bl	80048c0 <HAL_GetTick>
 800492e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	07db      	lsls	r3, r3, #31
 8004936:	d5e8      	bpl.n	800490a <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004938:	f7ff ffc2 	bl	80048c0 <HAL_GetTick>
 800493c:	1b40      	subs	r0, r0, r5
 800493e:	2802      	cmp	r0, #2
 8004940:	d9f6      	bls.n	8004930 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	07da      	lsls	r2, r3, #31
 8004948:	d5f2      	bpl.n	8004930 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800494c:	f043 0310 	orr.w	r3, r3, #16
 8004950:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004952:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800495a:	2001      	movs	r0, #1
 800495c:	e7d6      	b.n	800490c <ADC_Disable+0x12>
	...

08004960 <HAL_ADC_Init>:
{
 8004960:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004966:	4604      	mov	r4, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	f000 8103 	beq.w	8004b74 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800496e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004970:	06d5      	lsls	r5, r2, #27
 8004972:	d46a      	bmi.n	8004a4a <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004974:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d035      	beq.n	80049e6 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	00d2      	lsls	r2, r2, #3
 8004982:	d502      	bpl.n	800498a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004984:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004986:	009d      	lsls	r5, r3, #2
 8004988:	d50a      	bpl.n	80049a0 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800498a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800498c:	f023 0312 	bic.w	r3, r3, #18
 8004990:	f043 0310 	orr.w	r3, r3, #16
 8004994:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004996:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800499e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049a2:	06d9      	lsls	r1, r3, #27
 80049a4:	f100 80e0 	bmi.w	8004b68 <HAL_ADC_Init+0x208>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f040 80dd 	bne.w	8004b68 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80049b2:	0752      	lsls	r2, r2, #29
 80049b4:	f100 80d8 	bmi.w	8004b68 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80049b8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80049ba:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80049be:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80049c6:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004b78 <HAL_ADC_Init+0x218>)
 80049ca:	d042      	beq.n	8004a52 <HAL_ADC_Init+0xf2>
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d03e      	beq.n	8004a4e <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80049d0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80049d4:	4293      	cmp	r3, r2
 80049d6:	4969      	ldr	r1, [pc, #420]	@ (8004b7c <HAL_ADC_Init+0x21c>)
 80049d8:	f000 80b3 	beq.w	8004b42 <HAL_ADC_Init+0x1e2>
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf18      	it	ne
 80049e0:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049e2:	4967      	ldr	r1, [pc, #412]	@ (8004b80 <HAL_ADC_Init+0x220>)
 80049e4:	e036      	b.n	8004a54 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80049e6:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80049ea:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80049ec:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80049f0:	f7ff fc44 	bl	800427c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	00d8      	lsls	r0, r3, #3
 80049fa:	d4be      	bmi.n	800497a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7ff ff7c 	bl	80048fa <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004a04:	06d1      	lsls	r1, r2, #27
 8004a06:	d4b9      	bmi.n	800497c <HAL_ADC_Init+0x1c>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d1b7      	bne.n	800497c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8004a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004a0e:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8004a10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a14:	f023 0302 	bic.w	r3, r3, #2
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004a1e:	6893      	ldr	r3, [r2, #8]
 8004a20:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004a24:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004a26:	6893      	ldr	r3, [r2, #8]
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a2e:	4b55      	ldr	r3, [pc, #340]	@ (8004b84 <HAL_ADC_Init+0x224>)
 8004a30:	4a55      	ldr	r2, [pc, #340]	@ (8004b88 <HAL_ADC_Init+0x228>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a38:	220a      	movs	r2, #10
 8004a3a:	4353      	muls	r3, r2
            wait_loop_index--;
 8004a3c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d09a      	beq.n	800497a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8004a44:	9b01      	ldr	r3, [sp, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	e7f8      	b.n	8004a3c <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	e7a8      	b.n	80049a0 <HAL_ADC_Init+0x40>
 8004a4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a52:	494e      	ldr	r1, [pc, #312]	@ (8004b8c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004a54:	689d      	ldr	r5, [r3, #8]
 8004a56:	f005 0503 	and.w	r5, r5, #3
 8004a5a:	2d01      	cmp	r5, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_ADC_Init+0x104>
 8004a5e:	681d      	ldr	r5, [r3, #0]
 8004a60:	07ed      	lsls	r5, r5, #31
 8004a62:	d40e      	bmi.n	8004a82 <HAL_ADC_Init+0x122>
 8004a64:	b13a      	cbz	r2, 8004a76 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a66:	6895      	ldr	r5, [r2, #8]
 8004a68:	f005 0503 	and.w	r5, r5, #3
 8004a6c:	2d01      	cmp	r5, #1
 8004a6e:	d102      	bne.n	8004a76 <HAL_ADC_Init+0x116>
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	07d2      	lsls	r2, r2, #31
 8004a74:	d405      	bmi.n	8004a82 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004a76:	688a      	ldr	r2, [r1, #8]
 8004a78:	6865      	ldr	r5, [r4, #4]
 8004a7a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004a7e:	432a      	orrs	r2, r5
 8004a80:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004a82:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a8a:	7e65      	ldrb	r5, [r4, #25]
 8004a8c:	3901      	subs	r1, #1
 8004a8e:	bf18      	it	ne
 8004a90:	2101      	movne	r1, #1
 8004a92:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004a96:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a9a:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004a9e:	2901      	cmp	r1, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004aa2:	2d00      	cmp	r5, #0
 8004aa4:	d14f      	bne.n	8004b46 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004aa6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004aa8:	3901      	subs	r1, #1
 8004aaa:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8004aae:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ab2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004ab4:	2901      	cmp	r1, #1
 8004ab6:	d015      	beq.n	8004ae4 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004ab8:	4d35      	ldr	r5, [pc, #212]	@ (8004b90 <HAL_ADC_Init+0x230>)
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	d003      	beq.n	8004ac6 <HAL_ADC_Init+0x166>
 8004abe:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8004ac2:	42ab      	cmp	r3, r5
 8004ac4:	d10a      	bne.n	8004adc <HAL_ADC_Init+0x17c>
 8004ac6:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8004aca:	d047      	beq.n	8004b5c <HAL_ADC_Init+0x1fc>
 8004acc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004ad0:	d047      	beq.n	8004b62 <HAL_ADC_Init+0x202>
 8004ad2:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8004ad6:	bf08      	it	eq
 8004ad8:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8004adc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004ade:	4315      	orrs	r5, r2
 8004ae0:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	f011 0f0c 	tst.w	r1, #12
 8004aea:	d10c      	bne.n	8004b06 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004aec:	68d9      	ldr	r1, [r3, #12]
 8004aee:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004af2:	f021 0102 	bic.w	r1, r1, #2
 8004af6:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004af8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8004afc:	7e25      	ldrb	r5, [r4, #24]
 8004afe:	0049      	lsls	r1, r1, #1
 8004b00:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8004b04:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8004b06:	68dd      	ldr	r5, [r3, #12]
 8004b08:	4922      	ldr	r1, [pc, #136]	@ (8004b94 <HAL_ADC_Init+0x234>)
 8004b0a:	4029      	ands	r1, r5
 8004b0c:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b0e:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8004b10:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b12:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004b14:	bf05      	ittet	eq
 8004b16:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8004b18:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b1a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004b1c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004b20:	bf06      	itte	eq
 8004b22:	f021 010f 	biceq.w	r1, r1, #15
 8004b26:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b28:	f022 020f 	bicne.w	r2, r2, #15
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004b32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b34:	f023 0303 	bic.w	r3, r3, #3
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004b3e:	b003      	add	sp, #12
 8004b40:	bd30      	pop	{r4, r5, pc}
 8004b42:	460a      	mov	r2, r1
 8004b44:	e74d      	b.n	80049e2 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8004b46:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004b48:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8004b4c:	f041 0120 	orr.w	r1, r1, #32
 8004b50:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b52:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004b54:	f041 0101 	orr.w	r1, r1, #1
 8004b58:	6461      	str	r1, [r4, #68]	@ 0x44
 8004b5a:	e7aa      	b.n	8004ab2 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004b5c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004b60:	e7bc      	b.n	8004adc <HAL_ADC_Init+0x17c>
 8004b62:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8004b66:	e7b9      	b.n	8004adc <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8004b68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b6a:	f023 0312 	bic.w	r3, r3, #18
 8004b6e:	f043 0310 	orr.w	r3, r3, #16
 8004b72:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8004b74:	2001      	movs	r0, #1
 8004b76:	e7e2      	b.n	8004b3e <HAL_ADC_Init+0x1de>
 8004b78:	50000100 	.word	0x50000100
 8004b7c:	50000500 	.word	0x50000500
 8004b80:	50000700 	.word	0x50000700
 8004b84:	2000000c 	.word	0x2000000c
 8004b88:	000f4240 	.word	0x000f4240
 8004b8c:	50000300 	.word	0x50000300
 8004b90:	50000400 	.word	0x50000400
 8004b94:	fff0c007 	.word	0xfff0c007

08004b98 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8004b98:	4770      	bx	lr

08004b9a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8004b9a:	4770      	bx	lr

08004b9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8004b9c:	4770      	bx	lr

08004b9e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ba0:	6803      	ldr	r3, [r0, #0]
{
 8004ba2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ba4:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ba6:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ba8:	076a      	lsls	r2, r5, #29
{
 8004baa:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bac:	d501      	bpl.n	8004bb2 <HAL_ADC_IRQHandler+0x12>
 8004bae:	0770      	lsls	r0, r6, #29
 8004bb0:	d403      	bmi.n	8004bba <HAL_ADC_IRQHandler+0x1a>
 8004bb2:	0729      	lsls	r1, r5, #28
 8004bb4:	d543      	bpl.n	8004c3e <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004bb6:	0732      	lsls	r2, r6, #28
 8004bb8:	d541      	bpl.n	8004c3e <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004bba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004bbc:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004bbe:	bf5e      	ittt	pl
 8004bc0:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8004bc2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8004bc6:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bcc:	d003      	beq.n	8004bd6 <HAL_ADC_IRQHandler+0x36>
 8004bce:	4a90      	ldr	r2, [pc, #576]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	f040 8105 	bne.w	8004de0 <HAL_ADC_IRQHandler+0x240>
 8004bd6:	4a8f      	ldr	r2, [pc, #572]	@ (8004e14 <HAL_ADC_IRQHandler+0x274>)
 8004bd8:	6891      	ldr	r1, [r2, #8]
 8004bda:	06c9      	lsls	r1, r1, #27
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be2:	d003      	beq.n	8004bec <HAL_ADC_IRQHandler+0x4c>
 8004be4:	498a      	ldr	r1, [pc, #552]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004be6:	428b      	cmp	r3, r1
 8004be8:	f040 80ff 	bne.w	8004dea <HAL_ADC_IRQHandler+0x24a>
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	f002 021f 	and.w	r2, r2, #31
 8004bf2:	2a05      	cmp	r2, #5
 8004bf4:	f040 8114 	bne.w	8004e20 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004bf8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004bfa:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004bfc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004c00:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004c04:	4311      	orrs	r1, r2
 8004c06:	d114      	bne.n	8004c32 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8004c08:	0729      	lsls	r1, r5, #28
 8004c0a:	d512      	bpl.n	8004c32 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	0752      	lsls	r2, r2, #29
 8004c10:	f100 8122 	bmi.w	8004e58 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	f022 020c 	bic.w	r2, r2, #12
 8004c1a:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c22:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c26:	04d8      	lsls	r0, r3, #19
 8004c28:	d403      	bmi.n	8004c32 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fe5e 	bl	80048f4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	220c      	movs	r2, #12
 8004c3c:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004c3e:	06a9      	lsls	r1, r5, #26
 8004c40:	d501      	bpl.n	8004c46 <HAL_ADC_IRQHandler+0xa6>
 8004c42:	06b2      	lsls	r2, r6, #26
 8004c44:	d403      	bmi.n	8004c4e <HAL_ADC_IRQHandler+0xae>
 8004c46:	066b      	lsls	r3, r5, #25
 8004c48:	d562      	bpl.n	8004d10 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004c4a:	0670      	lsls	r0, r6, #25
 8004c4c:	d560      	bpl.n	8004d10 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c54:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c5c:	d003      	beq.n	8004c66 <HAL_ADC_IRQHandler+0xc6>
 8004c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f040 8102 	bne.w	8004e6a <HAL_ADC_IRQHandler+0x2ca>
 8004c66:	4a6b      	ldr	r2, [pc, #428]	@ (8004e14 <HAL_ADC_IRQHandler+0x274>)
 8004c68:	6891      	ldr	r1, [r2, #8]
 8004c6a:	06c9      	lsls	r1, r1, #27
 8004c6c:	d00c      	beq.n	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c72:	d003      	beq.n	8004c7c <HAL_ADC_IRQHandler+0xdc>
 8004c74:	4966      	ldr	r1, [pc, #408]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004c76:	428b      	cmp	r3, r1
 8004c78:	f040 80fc 	bne.w	8004e74 <HAL_ADC_IRQHandler+0x2d4>
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	f002 021f 	and.w	r2, r2, #31
 8004c82:	2a05      	cmp	r2, #5
 8004c84:	f040 8108 	bne.w	8004e98 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004c88:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004c8a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004c8c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8004c90:	d138      	bne.n	8004d04 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004c92:	0191      	lsls	r1, r2, #6
 8004c94:	d506      	bpl.n	8004ca4 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004c96:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004c98:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004c9c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	d12f      	bne.n	8004d04 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004ca4:	0668      	lsls	r0, r5, #25
 8004ca6:	d52d      	bpl.n	8004d04 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cac:	d003      	beq.n	8004cb6 <HAL_ADC_IRQHandler+0x116>
 8004cae:	4a58      	ldr	r2, [pc, #352]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f040 810d 	bne.w	8004ed0 <HAL_ADC_IRQHandler+0x330>
 8004cb6:	4a57      	ldr	r2, [pc, #348]	@ (8004e14 <HAL_ADC_IRQHandler+0x274>)
 8004cb8:	6891      	ldr	r1, [r2, #8]
 8004cba:	06c9      	lsls	r1, r1, #27
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc2:	d003      	beq.n	8004ccc <HAL_ADC_IRQHandler+0x12c>
 8004cc4:	4952      	ldr	r1, [pc, #328]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004cc6:	428b      	cmp	r3, r1
 8004cc8:	f040 8107 	bne.w	8004eda <HAL_ADC_IRQHandler+0x33a>
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	f002 021f 	and.w	r2, r2, #31
 8004cd2:	2a06      	cmp	r2, #6
 8004cd4:	f040 8113 	bne.w	8004efe <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004cd8:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004cda:	0291      	lsls	r1, r2, #10
 8004cdc:	d412      	bmi.n	8004d04 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	0712      	lsls	r2, r2, #28
 8004ce2:	f100 8128 	bmi.w	8004f36 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cec:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004cee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cf4:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004cf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cf8:	05d8      	lsls	r0, r3, #23
 8004cfa:	d403      	bmi.n	8004d04 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff ff47 	bl	8004b98 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	2260      	movs	r2, #96	@ 0x60
 8004d0e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004d10:	0629      	lsls	r1, r5, #24
 8004d12:	d50b      	bpl.n	8004d2c <HAL_ADC_IRQHandler+0x18c>
 8004d14:	0632      	lsls	r2, r6, #24
 8004d16:	d509      	bpl.n	8004d2c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff fde8 	bl	80048f6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	2280      	movs	r2, #128	@ 0x80
 8004d2a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004d2c:	05eb      	lsls	r3, r5, #23
 8004d2e:	d50c      	bpl.n	8004d4a <HAL_ADC_IRQHandler+0x1aa>
 8004d30:	05f0      	lsls	r0, r6, #23
 8004d32:	d50a      	bpl.n	8004d4a <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004d34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7ff ff2d 	bl	8004b9c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004d4a:	05a9      	lsls	r1, r5, #22
 8004d4c:	d50c      	bpl.n	8004d68 <HAL_ADC_IRQHandler+0x1c8>
 8004d4e:	05b2      	lsls	r2, r6, #22
 8004d50:	d50a      	bpl.n	8004d68 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d58:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7ff ff1f 	bl	8004b9e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d66:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004d68:	06eb      	lsls	r3, r5, #27
 8004d6a:	d525      	bpl.n	8004db8 <HAL_ADC_IRQHandler+0x218>
 8004d6c:	06f0      	lsls	r0, r6, #27
 8004d6e:	d523      	bpl.n	8004db8 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d012      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004d7c:	f000 80e4 	beq.w	8004f48 <HAL_ADC_IRQHandler+0x3a8>
 8004d80:	4823      	ldr	r0, [pc, #140]	@ (8004e10 <HAL_ADC_IRQHandler+0x270>)
 8004d82:	4b25      	ldr	r3, [pc, #148]	@ (8004e18 <HAL_ADC_IRQHandler+0x278>)
 8004d84:	4923      	ldr	r1, [pc, #140]	@ (8004e14 <HAL_ADC_IRQHandler+0x274>)
 8004d86:	4282      	cmp	r2, r0
 8004d88:	bf08      	it	eq
 8004d8a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004d8c:	6899      	ldr	r1, [r3, #8]
 8004d8e:	06c9      	lsls	r1, r1, #27
 8004d90:	f040 80dc 	bne.w	8004f4c <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004d94:	68d3      	ldr	r3, [r2, #12]
 8004d96:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004d9a:	d00a      	beq.n	8004db2 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004da2:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004da4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff fda3 	bl	80048f8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	2210      	movs	r2, #16
 8004db6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004db8:	056a      	lsls	r2, r5, #21
 8004dba:	d510      	bpl.n	8004dde <HAL_ADC_IRQHandler+0x23e>
 8004dbc:	0573      	lsls	r3, r6, #21
 8004dbe:	d50e      	bpl.n	8004dde <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004dc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dc6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004dc8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004dca:	f043 0308 	orr.w	r3, r3, #8
 8004dce:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dd6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff fede 	bl	8004b9a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004de0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e18 <HAL_ADC_IRQHandler+0x278>)
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	06d0      	lsls	r0, r2, #27
 8004de6:	f43f af07 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004dea:	4a0b      	ldr	r2, [pc, #44]	@ (8004e18 <HAL_ADC_IRQHandler+0x278>)
 8004dec:	6892      	ldr	r2, [r2, #8]
 8004dee:	f002 021f 	and.w	r2, r2, #31
 8004df2:	2a05      	cmp	r2, #5
 8004df4:	f43f af00 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004df8:	4a07      	ldr	r2, [pc, #28]	@ (8004e18 <HAL_ADC_IRQHandler+0x278>)
 8004dfa:	6892      	ldr	r2, [r2, #8]
 8004dfc:	f002 021f 	and.w	r2, r2, #31
 8004e00:	2a09      	cmp	r2, #9
 8004e02:	f43f aef9 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004e06:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <HAL_ADC_IRQHandler+0x27c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d123      	bne.n	8004e54 <HAL_ADC_IRQHandler+0x2b4>
 8004e0c:	e6f4      	b.n	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004e0e:	bf00      	nop
 8004e10:	50000100 	.word	0x50000100
 8004e14:	50000300 	.word	0x50000300
 8004e18:	50000700 	.word	0x50000700
 8004e1c:	50000400 	.word	0x50000400
 8004e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e24:	d002      	beq.n	8004e2c <HAL_ADC_IRQHandler+0x28c>
 8004e26:	4a4b      	ldr	r2, [pc, #300]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d1e5      	bne.n	8004df8 <HAL_ADC_IRQHandler+0x258>
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f58 <HAL_ADC_IRQHandler+0x3b8>)
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	f002 021f 	and.w	r2, r2, #31
 8004e34:	2a09      	cmp	r2, #9
 8004e36:	f43f aedf 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e3e:	f43f aedb 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
 8004e42:	4a46      	ldr	r2, [pc, #280]	@ (8004f5c <HAL_ADC_IRQHandler+0x3bc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f43f aed7 	beq.w	8004bf8 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004e4a:	4942      	ldr	r1, [pc, #264]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf08      	it	eq
 8004e50:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	e6d0      	b.n	8004bfa <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e5a:	f043 0310 	orr.w	r3, r3, #16
 8004e5e:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6463      	str	r3, [r4, #68]	@ 0x44
 8004e68:	e6e3      	b.n	8004c32 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004e6c:	6892      	ldr	r2, [r2, #8]
 8004e6e:	06d0      	lsls	r0, r2, #27
 8004e70:	f43f af0a 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004e74:	4a3a      	ldr	r2, [pc, #232]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004e76:	6892      	ldr	r2, [r2, #8]
 8004e78:	f002 021f 	and.w	r2, r2, #31
 8004e7c:	2a05      	cmp	r2, #5
 8004e7e:	f43f af03 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004e82:	4a37      	ldr	r2, [pc, #220]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	f002 021f 	and.w	r2, r2, #31
 8004e8a:	2a09      	cmp	r2, #9
 8004e8c:	f43f aefc 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004e90:	4a32      	ldr	r2, [pc, #200]	@ (8004f5c <HAL_ADC_IRQHandler+0x3bc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d11a      	bne.n	8004ecc <HAL_ADC_IRQHandler+0x32c>
 8004e96:	e6f7      	b.n	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e9c:	d002      	beq.n	8004ea4 <HAL_ADC_IRQHandler+0x304>
 8004e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_ADC_IRQHandler+0x2e2>
 8004ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f58 <HAL_ADC_IRQHandler+0x3b8>)
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	f002 021f 	and.w	r2, r2, #31
 8004eac:	2a09      	cmp	r2, #9
 8004eae:	f43f aeeb 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eb6:	f43f aee7 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
 8004eba:	4a28      	ldr	r2, [pc, #160]	@ (8004f5c <HAL_ADC_IRQHandler+0x3bc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	f43f aee3 	beq.w	8004c88 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004ec2:	4924      	ldr	r1, [pc, #144]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	bf08      	it	eq
 8004ec8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004ecc:	68d2      	ldr	r2, [r2, #12]
 8004ece:	e6dc      	b.n	8004c8a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004ed0:	4a23      	ldr	r2, [pc, #140]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	06d0      	lsls	r0, r2, #27
 8004ed6:	f43f aeff 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004eda:	4a21      	ldr	r2, [pc, #132]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	f002 021f 	and.w	r2, r2, #31
 8004ee2:	2a06      	cmp	r2, #6
 8004ee4:	f43f aef8 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f60 <HAL_ADC_IRQHandler+0x3c0>)
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	f002 021f 	and.w	r2, r2, #31
 8004ef0:	2a07      	cmp	r2, #7
 8004ef2:	f43f aef1 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004ef6:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <HAL_ADC_IRQHandler+0x3bc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d11a      	bne.n	8004f32 <HAL_ADC_IRQHandler+0x392>
 8004efc:	e6ec      	b.n	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f02:	d002      	beq.n	8004f0a <HAL_ADC_IRQHandler+0x36a>
 8004f04:	4a13      	ldr	r2, [pc, #76]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_ADC_IRQHandler+0x348>
 8004f0a:	4a13      	ldr	r2, [pc, #76]	@ (8004f58 <HAL_ADC_IRQHandler+0x3b8>)
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	f002 021f 	and.w	r2, r2, #31
 8004f12:	2a07      	cmp	r2, #7
 8004f14:	f43f aee0 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1c:	f43f aedc 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
 8004f20:	4a0e      	ldr	r2, [pc, #56]	@ (8004f5c <HAL_ADC_IRQHandler+0x3bc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f43f aed8 	beq.w	8004cd8 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004f28:	490a      	ldr	r1, [pc, #40]	@ (8004f54 <HAL_ADC_IRQHandler+0x3b4>)
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	bf08      	it	eq
 8004f2e:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	e6d1      	b.n	8004cda <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f38:	f043 0310 	orr.w	r3, r3, #16
 8004f3c:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	6463      	str	r3, [r4, #68]	@ 0x44
 8004f46:	e6dd      	b.n	8004d04 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f48:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <HAL_ADC_IRQHandler+0x3b8>)
 8004f4a:	e71f      	b.n	8004d8c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8004f52:	e722      	b.n	8004d9a <HAL_ADC_IRQHandler+0x1fa>
 8004f54:	50000100 	.word	0x50000100
 8004f58:	50000300 	.word	0x50000300
 8004f5c:	50000400 	.word	0x50000400
 8004f60:	50000700 	.word	0x50000700

08004f64 <HAL_ADC_ConfigChannel>:
{
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004f6c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f70:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	f000 816a 	beq.w	800524c <HAL_ADC_ConfigChannel+0x2e8>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	0757      	lsls	r7, r2, #29
 8004f84:	f100 815c 	bmi.w	8005240 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8004f88:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8004f8a:	680c      	ldr	r4, [r1, #0]
 8004f8c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8004f8e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8004f90:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8004f94:	d82c      	bhi.n	8004ff0 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8004f96:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8004f98:	271f      	movs	r7, #31
 8004f9a:	4097      	lsls	r7, r2
 8004f9c:	ea26 0607 	bic.w	r6, r6, r7
 8004fa0:	fa04 f202 	lsl.w	r2, r4, r2
 8004fa4:	4332      	orrs	r2, r6
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	f012 0f0c 	tst.w	r2, #12
 8004fae:	d158      	bne.n	8005062 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004fb0:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004fb2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004fb6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004fba:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004fbe:	d93c      	bls.n	800503a <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004fc0:	699f      	ldr	r7, [r3, #24]
 8004fc2:	3a1e      	subs	r2, #30
 8004fc4:	4096      	lsls	r6, r2
 8004fc6:	ea27 0606 	bic.w	r6, r7, r6
 8004fca:	fa0c f202 	lsl.w	r2, ip, r2
 8004fce:	4332      	orrs	r2, r6
 8004fd0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	694e      	ldr	r6, [r1, #20]
 8004fd6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004fda:	0052      	lsls	r2, r2, #1
 8004fdc:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8004fde:	690a      	ldr	r2, [r1, #16]
 8004fe0:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004fe2:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8004fe4:	2a03      	cmp	r2, #3
 8004fe6:	d86b      	bhi.n	80050c0 <HAL_ADC_ConfigChannel+0x15c>
 8004fe8:	e8df f002 	tbb	[pc, r2]
 8004fec:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8004ff0:	2e09      	cmp	r6, #9
 8004ff2:	d80a      	bhi.n	800500a <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8004ff4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8004ff6:	3a1e      	subs	r2, #30
 8004ff8:	271f      	movs	r7, #31
 8004ffa:	4097      	lsls	r7, r2
 8004ffc:	ea26 0607 	bic.w	r6, r6, r7
 8005000:	fa04 f202 	lsl.w	r2, r4, r2
 8005004:	4332      	orrs	r2, r6
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34
 8005008:	e7ce      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800500a:	2e0e      	cmp	r6, #14
 800500c:	f04f 061f 	mov.w	r6, #31
 8005010:	d809      	bhi.n	8005026 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005012:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8005014:	3a3c      	subs	r2, #60	@ 0x3c
 8005016:	4096      	lsls	r6, r2
 8005018:	ea27 0606 	bic.w	r6, r7, r6
 800501c:	fa04 f202 	lsl.w	r2, r4, r2
 8005020:	4332      	orrs	r2, r6
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
 8005024:	e7c0      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005026:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8005028:	3a5a      	subs	r2, #90	@ 0x5a
 800502a:	4096      	lsls	r6, r2
 800502c:	ea27 0606 	bic.w	r6, r7, r6
 8005030:	fa04 f202 	lsl.w	r2, r4, r2
 8005034:	4332      	orrs	r2, r6
 8005036:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005038:	e7b6      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800503a:	695f      	ldr	r7, [r3, #20]
 800503c:	4096      	lsls	r6, r2
 800503e:	ea27 0606 	bic.w	r6, r7, r6
 8005042:	fa0c fc02 	lsl.w	ip, ip, r2
 8005046:	ea46 060c 	orr.w	r6, r6, ip
 800504a:	615e      	str	r6, [r3, #20]
 800504c:	e7c1      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800504e:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8005052:	4a7f      	ldr	r2, [pc, #508]	@ (8005250 <HAL_ADC_ConfigChannel+0x2ec>)
 8005054:	ea0c 0202 	and.w	r2, ip, r2
 8005058:	433a      	orrs	r2, r7
 800505a:	4332      	orrs	r2, r6
 800505c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005060:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	f002 0203 	and.w	r2, r2, #3
 8005068:	2a01      	cmp	r2, #1
 800506a:	d14d      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x1a4>
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	07d6      	lsls	r6, r2, #31
 8005070:	d54a      	bpl.n	8005108 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005072:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005074:	2300      	movs	r3, #0
 8005076:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800507a:	b003      	add	sp, #12
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800507e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8005082:	4a73      	ldr	r2, [pc, #460]	@ (8005250 <HAL_ADC_ConfigChannel+0x2ec>)
 8005084:	ea0c 0202 	and.w	r2, ip, r2
 8005088:	433a      	orrs	r2, r7
 800508a:	4332      	orrs	r2, r6
 800508c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005090:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005092:	e7e6      	b.n	8005062 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005094:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005098:	4a6d      	ldr	r2, [pc, #436]	@ (8005250 <HAL_ADC_ConfigChannel+0x2ec>)
 800509a:	ea0c 0202 	and.w	r2, ip, r2
 800509e:	433a      	orrs	r2, r7
 80050a0:	4332      	orrs	r2, r6
 80050a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80050a6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80050a8:	e7db      	b.n	8005062 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80050aa:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 80050ae:	4a68      	ldr	r2, [pc, #416]	@ (8005250 <HAL_ADC_ConfigChannel+0x2ec>)
 80050b0:	ea0c 0202 	and.w	r2, ip, r2
 80050b4:	433a      	orrs	r2, r7
 80050b6:	4332      	orrs	r2, r6
 80050b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80050bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80050be:	e7d0      	b.n	8005062 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050c2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80050c6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80050c8:	bf02      	ittt	eq
 80050ca:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 80050cc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80050d0:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050d4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80050d8:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80050da:	bf02      	ittt	eq
 80050dc:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80050de:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80050e2:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050e4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80050e6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80050ea:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80050ec:	bf02      	ittt	eq
 80050ee:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80050f0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80050f4:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80050f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050f8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80050fc:	42ba      	cmp	r2, r7
 80050fe:	d1b0      	bne.n	8005062 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005100:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005102:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005106:	e7d9      	b.n	80050bc <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005108:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800510a:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800510c:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005110:	d047      	beq.n	80051a2 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005112:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8005116:	ea21 0202 	bic.w	r2, r1, r2
 800511a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800511e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005122:	d164      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x28a>
 8005124:	494b      	ldr	r1, [pc, #300]	@ (8005254 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005126:	2c10      	cmp	r4, #16
 8005128:	d166      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800512a:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800512c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005130:	d19f      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005136:	4a48      	ldr	r2, [pc, #288]	@ (8005258 <HAL_ADC_ConfigChannel+0x2f4>)
 8005138:	d009      	beq.n	800514e <HAL_ADC_ConfigChannel+0x1ea>
 800513a:	4293      	cmp	r3, r2
 800513c:	d069      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x2ae>
 800513e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8005142:	4293      	cmp	r3, r2
 8005144:	4845      	ldr	r0, [pc, #276]	@ (800525c <HAL_ADC_ConfigChannel+0x2f8>)
 8005146:	d067      	beq.n	8005218 <HAL_ADC_ConfigChannel+0x2b4>
 8005148:	4283      	cmp	r3, r0
 800514a:	bf18      	it	ne
 800514c:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800514e:	6898      	ldr	r0, [r3, #8]
 8005150:	f000 0003 	and.w	r0, r0, #3
 8005154:	2801      	cmp	r0, #1
 8005156:	d102      	bne.n	800515e <HAL_ADC_ConfigChannel+0x1fa>
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	07c0      	lsls	r0, r0, #31
 800515c:	d470      	bmi.n	8005240 <HAL_ADC_ConfigChannel+0x2dc>
 800515e:	b13a      	cbz	r2, 8005170 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005160:	6890      	ldr	r0, [r2, #8]
 8005162:	f000 0003 	and.w	r0, r0, #3
 8005166:	2801      	cmp	r0, #1
 8005168:	d102      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x20c>
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	07d2      	lsls	r2, r2, #31
 800516e:	d467      	bmi.n	8005240 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005170:	2c10      	cmp	r4, #16
 8005172:	d153      	bne.n	800521c <HAL_ADC_ConfigChannel+0x2b8>
 8005174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005178:	f47f af7b 	bne.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800517c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800517e:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005184:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005186:	4b37      	ldr	r3, [pc, #220]	@ (8005264 <HAL_ADC_ConfigChannel+0x300>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	fbb3 f3f2 	udiv	r3, r3, r2
 800518e:	220a      	movs	r2, #10
 8005190:	4353      	muls	r3, r2
            wait_loop_index--;
 8005192:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f43f af6b 	beq.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 800519c:	9b01      	ldr	r3, [sp, #4]
 800519e:	3b01      	subs	r3, #1
 80051a0:	e7f7      	b.n	8005192 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80051a2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80051a6:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80051a8:	ea42 0200 	orr.w	r2, r2, r0
 80051ac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80051b0:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80051b2:	d90c      	bls.n	80051ce <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 80051b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	3a1b      	subs	r2, #27
 80051bc:	2607      	movs	r6, #7
 80051be:	4096      	lsls	r6, r2
 80051c0:	ea21 0106 	bic.w	r1, r1, r6
 80051c4:	fa00 f202 	lsl.w	r2, r0, r2
 80051c8:	430a      	orrs	r2, r1
 80051ca:	619a      	str	r2, [r3, #24]
 80051cc:	e7a7      	b.n	800511e <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 80051ce:	1c61      	adds	r1, r4, #1
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80051d6:	2607      	movs	r6, #7
 80051d8:	408e      	lsls	r6, r1
 80051da:	ea22 0206 	bic.w	r2, r2, r6
 80051de:	fa00 f101 	lsl.w	r1, r0, r1
 80051e2:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80051e8:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051ea:	f43f af42 	beq.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
 80051ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005258 <HAL_ADC_ConfigChannel+0x2f4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d097      	beq.n	8005124 <HAL_ADC_ConfigChannel+0x1c0>
 80051f4:	491c      	ldr	r1, [pc, #112]	@ (8005268 <HAL_ADC_ConfigChannel+0x304>)
 80051f6:	e796      	b.n	8005126 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80051f8:	2c11      	cmp	r4, #17
 80051fa:	d103      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80051fc:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80051fe:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8005202:	e795      	b.n	8005130 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005204:	2c12      	cmp	r4, #18
 8005206:	f47f af34 	bne.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800520a:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800520c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8005210:	e78e      	b.n	8005130 <HAL_ADC_ConfigChannel+0x1cc>
 8005212:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005216:	e79a      	b.n	800514e <HAL_ADC_ConfigChannel+0x1ea>
 8005218:	4602      	mov	r2, r0
 800521a:	e798      	b.n	800514e <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800521c:	2c11      	cmp	r4, #17
 800521e:	d108      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x2ce>
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005224:	f47f af25 	bne.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005228:	688b      	ldr	r3, [r1, #8]
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800522e:	608b      	str	r3, [r1, #8]
 8005230:	e71f      	b.n	8005072 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005232:	2c12      	cmp	r4, #18
 8005234:	f47f af1d 	bne.w	8005072 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005238:	688b      	ldr	r3, [r1, #8]
 800523a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800523e:	e7f6      	b.n	800522e <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005240:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005242:	f043 0320 	orr.w	r3, r3, #32
 8005246:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005248:	2001      	movs	r0, #1
 800524a:	e713      	b.n	8005074 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 800524c:	2002      	movs	r0, #2
 800524e:	e714      	b.n	800507a <HAL_ADC_ConfigChannel+0x116>
 8005250:	83fff000 	.word	0x83fff000
 8005254:	50000300 	.word	0x50000300
 8005258:	50000100 	.word	0x50000100
 800525c:	50000500 	.word	0x50000500
 8005260:	000f4240 	.word	0x000f4240
 8005264:	2000000c 	.word	0x2000000c
 8005268:	50000700 	.word	0x50000700

0800526c <HAL_ADCEx_MultiModeConfigChannel>:
{
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800526e:	6804      	ldr	r4, [r0, #0]
 8005270:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005272:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8005276:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005278:	d009      	beq.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 800527a:	429c      	cmp	r4, r3
 800527c:	d047      	beq.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800527e:	4a3a      	ldr	r2, [pc, #232]	@ (8005368 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005280:	4294      	cmp	r4, r2
 8005282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005286:	d002      	beq.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005288:	429c      	cmp	r4, r3
 800528a:	d166      	bne.n	800535a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800528c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800528e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8005292:	2a01      	cmp	r2, #1
 8005294:	d063      	beq.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8005296:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005298:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 800529a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800529e:	68a2      	ldr	r2, [r4, #8]
 80052a0:	0752      	lsls	r2, r2, #29
 80052a2:	d454      	bmi.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	0757      	lsls	r7, r2, #29
 80052a8:	d451      	bmi.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052aa:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 80052ae:	d031      	beq.n	8005314 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80052b0:	4f2c      	ldr	r7, [pc, #176]	@ (8005364 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80052b2:	4a2e      	ldr	r2, [pc, #184]	@ (800536c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80052b4:	4e2e      	ldr	r6, [pc, #184]	@ (8005370 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80052b6:	42bc      	cmp	r4, r7
 80052b8:	bf08      	it	eq
 80052ba:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80052bc:	b360      	cbz	r0, 8005318 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80052be:	6897      	ldr	r7, [r2, #8]
 80052c0:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 80052c4:	684e      	ldr	r6, [r1, #4]
 80052c6:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 80052ca:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80052ce:	433e      	orrs	r6, r7
 80052d0:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80052d2:	68a6      	ldr	r6, [r4, #8]
 80052d4:	f006 0603 	and.w	r6, r6, #3
 80052d8:	2e01      	cmp	r6, #1
 80052da:	d102      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80052dc:	6824      	ldr	r4, [r4, #0]
 80052de:	07e6      	lsls	r6, r4, #31
 80052e0:	d410      	bmi.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80052e2:	689c      	ldr	r4, [r3, #8]
 80052e4:	f004 0403 	and.w	r4, r4, #3
 80052e8:	2c01      	cmp	r4, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	07dc      	lsls	r4, r3, #31
 80052f0:	d408      	bmi.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80052f2:	6893      	ldr	r3, [r2, #8]
 80052f4:	6889      	ldr	r1, [r1, #8]
 80052f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052fa:	4308      	orrs	r0, r1
 80052fc:	f023 030f 	bic.w	r3, r3, #15
 8005300:	4318      	orrs	r0, r3
 8005302:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005304:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005306:	2300      	movs	r3, #0
 8005308:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 800530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005312:	e7bc      	b.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005314:	4a16      	ldr	r2, [pc, #88]	@ (8005370 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005316:	e7d1      	b.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005318:	6891      	ldr	r1, [r2, #8]
 800531a:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800531e:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005320:	68a1      	ldr	r1, [r4, #8]
 8005322:	f001 0103 	and.w	r1, r1, #3
 8005326:	2901      	cmp	r1, #1
 8005328:	d102      	bne.n	8005330 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800532a:	6821      	ldr	r1, [r4, #0]
 800532c:	07c9      	lsls	r1, r1, #31
 800532e:	d4e9      	bmi.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	f001 0103 	and.w	r1, r1, #3
 8005336:	2901      	cmp	r1, #1
 8005338:	d102      	bne.n	8005340 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	07db      	lsls	r3, r3, #31
 800533e:	d4e1      	bmi.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005340:	6893      	ldr	r3, [r2, #8]
 8005342:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005346:	f023 030f 	bic.w	r3, r3, #15
 800534a:	6093      	str	r3, [r2, #8]
 800534c:	e7da      	b.n	8005304 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800534e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005356:	2001      	movs	r0, #1
 8005358:	e7d5      	b.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 800535a:	2001      	movs	r0, #1
 800535c:	e7d6      	b.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 800535e:	2002      	movs	r0, #2
 8005360:	e7d4      	b.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005362:	bf00      	nop
 8005364:	50000100 	.word	0x50000100
 8005368:	50000400 	.word	0x50000400
 800536c:	50000700 	.word	0x50000700
 8005370:	50000300 	.word	0x50000300

08005374 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005374:	4907      	ldr	r1, [pc, #28]	@ (8005394 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005376:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005378:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800537c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800537e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005380:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005384:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800538c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005390:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005398:	4b16      	ldr	r3, [pc, #88]	@ (80053f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800539a:	b530      	push	{r4, r5, lr}
 800539c:	68dc      	ldr	r4, [r3, #12]
 800539e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	bf28      	it	cs
 80053ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053b4:	bf8c      	ite	hi
 80053b6:	3c03      	subhi	r4, #3
 80053b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053ba:	fa05 f303 	lsl.w	r3, r5, r3
 80053be:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c2:	40a5      	lsls	r5, r4
 80053c4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80053ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	bfac      	ite	ge
 80053d2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d6:	4a08      	ldrlt	r2, [pc, #32]	@ (80053f8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053dc:	bfb8      	it	lt
 80053de:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	bfaa      	itet	ge
 80053e6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ec:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053f0:	bd30      	pop	{r4, r5, pc}
 80053f2:	bf00      	nop
 80053f4:	e000ed00 	.word	0xe000ed00
 80053f8:	e000ed14 	.word	0xe000ed14

080053fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053fc:	2800      	cmp	r0, #0
 80053fe:	db07      	blt.n	8005410 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005400:	0941      	lsrs	r1, r0, #5
 8005402:	4a04      	ldr	r2, [pc, #16]	@ (8005414 <HAL_NVIC_EnableIRQ+0x18>)
 8005404:	f000 001f 	and.w	r0, r0, #31
 8005408:	2301      	movs	r3, #1
 800540a:	4083      	lsls	r3, r0
 800540c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005418:	6802      	ldr	r2, [r0, #0]
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <DMA_CalcBaseAndBitshift+0x2c>)
 800541c:	429a      	cmp	r2, r3
 800541e:	f04f 0114 	mov.w	r1, #20
 8005422:	d808      	bhi.n	8005436 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <DMA_CalcBaseAndBitshift+0x30>)
 8005426:	4413      	add	r3, r2
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <DMA_CalcBaseAndBitshift+0x34>)
 800542a:	fbb3 f3f1 	udiv	r3, r3, r1
 800542e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8005430:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005434:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005436:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <DMA_CalcBaseAndBitshift+0x38>)
 8005438:	4413      	add	r3, r2
 800543a:	4a06      	ldr	r2, [pc, #24]	@ (8005454 <DMA_CalcBaseAndBitshift+0x3c>)
 800543c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005440:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8005442:	e7f5      	b.n	8005430 <DMA_CalcBaseAndBitshift+0x18>
 8005444:	40020407 	.word	0x40020407
 8005448:	bffdfff8 	.word	0xbffdfff8
 800544c:	40020000 	.word	0x40020000
 8005450:	bffdfbf8 	.word	0xbffdfbf8
 8005454:	40020400 	.word	0x40020400

08005458 <HAL_DMA_Init>:
{
 8005458:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800545a:	4604      	mov	r4, r0
 800545c:	b1e0      	cbz	r0, 8005498 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800545e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8005462:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005464:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005466:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005468:	432b      	orrs	r3, r5
 800546a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800546c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800546e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005470:	6945      	ldr	r5, [r0, #20]
 8005472:	432b      	orrs	r3, r5
 8005474:	6985      	ldr	r5, [r0, #24]
 8005476:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005478:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800547a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800547e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005482:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005484:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005486:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005488:	f7ff ffc6 	bl	8005418 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800548c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800548e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005492:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005494:	8423      	strh	r3, [r4, #32]
}
 8005496:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005498:	2001      	movs	r0, #1
 800549a:	e7fc      	b.n	8005496 <HAL_DMA_Init+0x3e>

0800549c <HAL_DMA_Start_IT>:
{
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800549e:	f890 4020 	ldrb.w	r4, [r0, #32]
 80054a2:	2c01      	cmp	r4, #1
 80054a4:	d033      	beq.n	800550e <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 80054a6:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 80054aa:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80054ac:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80054ae:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b2:	f04f 0400 	mov.w	r4, #0
 80054b6:	d128      	bne.n	800550a <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b8:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ba:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054bc:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80054be:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054c2:	6826      	ldr	r6, [r4, #0]
 80054c4:	f026 0601 	bic.w	r6, r6, #1
 80054c8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80054ca:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80054ce:	40bd      	lsls	r5, r7
 80054d0:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80054d2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d4:	6843      	ldr	r3, [r0, #4]
 80054d6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80054d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80054da:	bf0b      	itete	eq
 80054dc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80054de:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80054e0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80054e2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80054e4:	b14b      	cbz	r3, 80054fa <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80054ec:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2000      	movs	r0, #0
}
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 030a 	orr.w	r3, r3, #10
 8005500:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	e7f0      	b.n	80054ec <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800550a:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 800550e:	2002      	movs	r0, #2
 8005510:	e7f2      	b.n	80054f8 <HAL_DMA_Start_IT+0x5c>

08005512 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8005512:	b140      	cbz	r0, 8005526 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005514:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005518:	2b02      	cmp	r3, #2
 800551a:	d006      	beq.n	800552a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800551c:	2304      	movs	r3, #4
 800551e:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005520:	2300      	movs	r3, #0
 8005522:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005526:	2001      	movs	r0, #1
 8005528:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800552a:	6803      	ldr	r3, [r0, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	f022 020e 	bic.w	r2, r2, #14
 8005532:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800553c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8005540:	2301      	movs	r3, #1
 8005542:	408b      	lsls	r3, r1
 8005544:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8005546:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800554a:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 800554c:	2000      	movs	r0, #0
}
 800554e:	4770      	bx	lr

08005550 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005550:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005552:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005554:	6803      	ldr	r3, [r0, #0]
{
 8005556:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005558:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800555a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800555c:	2404      	movs	r4, #4
 800555e:	4094      	lsls	r4, r2
 8005560:	4234      	tst	r4, r6
 8005562:	d00e      	beq.n	8005582 <HAL_DMA_IRQHandler+0x32>
 8005564:	f015 0f04 	tst.w	r5, #4
 8005568:	d00b      	beq.n	8005582 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800556e:	bf5e      	ittt	pl
 8005570:	681a      	ldrpl	r2, [r3, #0]
 8005572:	f022 0204 	bicpl.w	r2, r2, #4
 8005576:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005578:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800557a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800557c:	b363      	cbz	r3, 80055d8 <HAL_DMA_IRQHandler+0x88>
}
 800557e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005580:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005582:	2402      	movs	r4, #2
 8005584:	4094      	lsls	r4, r2
 8005586:	4234      	tst	r4, r6
 8005588:	d012      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x60>
 800558a:	f015 0f02 	tst.w	r5, #2
 800558e:	d00f      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	0695      	lsls	r5, r2, #26
 8005594:	d406      	bmi.n	80055a4 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f022 020a 	bic.w	r2, r2, #10
 800559c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800559e:	2301      	movs	r3, #1
 80055a0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80055a4:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80055a6:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80055a8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80055ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80055ae:	e7e5      	b.n	800557c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80055b0:	2408      	movs	r4, #8
 80055b2:	4094      	lsls	r4, r2
 80055b4:	4234      	tst	r4, r6
 80055b6:	d00f      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x88>
 80055b8:	072c      	lsls	r4, r5, #28
 80055ba:	d50d      	bpl.n	80055d8 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	f024 040e 	bic.w	r4, r4, #14
 80055c2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055c4:	2301      	movs	r3, #1
 80055c6:	fa03 f202 	lsl.w	r2, r3, r2
 80055ca:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055cc:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80055ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055d2:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80055d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80055d6:	e7d1      	b.n	800557c <HAL_DMA_IRQHandler+0x2c>
}
 80055d8:	bc70      	pop	{r4, r5, r6}
 80055da:	4770      	bx	lr

080055dc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80055dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 80055de:	4770      	bx	lr

080055e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e4:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005764 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055e8:	4c5c      	ldr	r4, [pc, #368]	@ (800575c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80055ea:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ec:	680a      	ldr	r2, [r1, #0]
 80055ee:	fa32 f503 	lsrs.w	r5, r2, r3
 80055f2:	d102      	bne.n	80055fa <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80055f4:	b003      	add	sp, #12
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80055fa:	2501      	movs	r5, #1
 80055fc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8005600:	ea18 0202 	ands.w	r2, r8, r2
 8005604:	f000 80a0 	beq.w	8005748 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005608:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800560a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800560c:	f006 0503 	and.w	r5, r6, #3
 8005610:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005614:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005618:	1e6f      	subs	r7, r5, #1
 800561a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800561c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005620:	d834      	bhi.n	800568c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8005622:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005624:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005628:	68cf      	ldr	r7, [r1, #12]
 800562a:	fa07 f70e 	lsl.w	r7, r7, lr
 800562e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005632:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005634:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005636:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800563a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800563e:	409f      	lsls	r7, r3
 8005640:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005644:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005646:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005648:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800564c:	688f      	ldr	r7, [r1, #8]
 800564e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005652:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005656:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005658:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800565a:	d119      	bne.n	8005690 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800565c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005660:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005664:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005668:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800566c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005670:	f04f 0b0f 	mov.w	fp, #15
 8005674:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005678:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800567c:	690f      	ldr	r7, [r1, #16]
 800567e:	fa07 f70a 	lsl.w	r7, r7, sl
 8005682:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005686:	f8c8 7020 	str.w	r7, [r8, #32]
 800568a:	e001      	b.n	8005690 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800568c:	2d03      	cmp	r5, #3
 800568e:	d1da      	bne.n	8005646 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005690:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005692:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005696:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800569a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800569c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80056a0:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056a2:	d051      	beq.n	8005748 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80056a8:	f045 0501 	orr.w	r5, r5, #1
 80056ac:	f8c9 5018 	str.w	r5, [r9, #24]
 80056b0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80056b4:	f023 0703 	bic.w	r7, r3, #3
 80056b8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80056bc:	f005 0501 	and.w	r5, r5, #1
 80056c0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80056c4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056c6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ca:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80056cc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80056d2:	f04f 0e0f 	mov.w	lr, #15
 80056d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056da:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056de:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056e2:	d033      	beq.n	800574c <HAL_GPIO_Init+0x16c>
 80056e4:	4d1e      	ldr	r5, [pc, #120]	@ (8005760 <HAL_GPIO_Init+0x180>)
 80056e6:	42a8      	cmp	r0, r5
 80056e8:	d032      	beq.n	8005750 <HAL_GPIO_Init+0x170>
 80056ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056ee:	42a8      	cmp	r0, r5
 80056f0:	d030      	beq.n	8005754 <HAL_GPIO_Init+0x174>
 80056f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d02e      	beq.n	8005758 <HAL_GPIO_Init+0x178>
 80056fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056fe:	42a8      	cmp	r0, r5
 8005700:	bf14      	ite	ne
 8005702:	2505      	movne	r5, #5
 8005704:	2504      	moveq	r5, #4
 8005706:	fa05 f50c 	lsl.w	r5, r5, ip
 800570a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800570e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8005710:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005712:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005714:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8005718:	bf0c      	ite	eq
 800571a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800571c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800571e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8005720:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005722:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8005726:	bf0c      	ite	eq
 8005728:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800572a:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 800572c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800572e:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005730:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8005734:	bf0c      	ite	eq
 8005736:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005738:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800573a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 800573c:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800573e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005740:	bf54      	ite	pl
 8005742:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005744:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8005746:	6025      	str	r5, [r4, #0]
    position++;
 8005748:	3301      	adds	r3, #1
 800574a:	e74f      	b.n	80055ec <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800574c:	2500      	movs	r5, #0
 800574e:	e7da      	b.n	8005706 <HAL_GPIO_Init+0x126>
 8005750:	2501      	movs	r5, #1
 8005752:	e7d8      	b.n	8005706 <HAL_GPIO_Init+0x126>
 8005754:	2502      	movs	r5, #2
 8005756:	e7d6      	b.n	8005706 <HAL_GPIO_Init+0x126>
 8005758:	2503      	movs	r5, #3
 800575a:	e7d4      	b.n	8005706 <HAL_GPIO_Init+0x126>
 800575c:	40010400 	.word	0x40010400
 8005760:	48000400 	.word	0x48000400
 8005764:	40021000 	.word	0x40021000

08005768 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005768:	b10a      	cbz	r2, 800576e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800576a:	6181      	str	r1, [r0, #24]
 800576c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005770:	4770      	bx	lr
	...

08005774 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005774:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	4770      	bx	lr
 8005780:	40007000 	.word	0x40007000

08005784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005788:	4605      	mov	r5, r0
 800578a:	2800      	cmp	r0, #0
 800578c:	d033      	beq.n	80057f6 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800578e:	6803      	ldr	r3, [r0, #0]
 8005790:	07da      	lsls	r2, r3, #31
 8005792:	d411      	bmi.n	80057b8 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	f100 8081 	bmi.w	800589e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	071c      	lsls	r4, r3, #28
 80057a0:	f100 80eb 	bmi.w	800597a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	0758      	lsls	r0, r3, #29
 80057a8:	f100 8130 	bmi.w	8005a0c <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ac:	69eb      	ldr	r3, [r5, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 81b5 	bne.w	8005b1e <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 80057b4:	2000      	movs	r0, #0
 80057b6:	e047      	b.n	8005848 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80057b8:	4cb0      	ldr	r4, [pc, #704]	@ (8005a7c <HAL_RCC_OscConfig+0x2f8>)
 80057ba:	6863      	ldr	r3, [r4, #4]
 80057bc:	f003 030c 	and.w	r3, r3, #12
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d007      	beq.n	80057d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d115      	bne.n	80057fa <HAL_RCC_OscConfig+0x76>
 80057ce:	6863      	ldr	r3, [r4, #4]
 80057d0:	03df      	lsls	r7, r3, #15
 80057d2:	d512      	bpl.n	80057fa <HAL_RCC_OscConfig+0x76>
 80057d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80057d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	6821      	ldr	r1, [r4, #0]
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	2201      	movs	r2, #1
 80057e4:	fab3 f383 	clz	r3, r3
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	420b      	tst	r3, r1
 80057ee:	d0d1      	beq.n	8005794 <HAL_RCC_OscConfig+0x10>
 80057f0:	686b      	ldr	r3, [r5, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ce      	bne.n	8005794 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80057f6:	2001      	movs	r0, #1
 80057f8:	e026      	b.n	8005848 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fa:	686a      	ldr	r2, [r5, #4]
 80057fc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005800:	d125      	bne.n	800584e <HAL_RCC_OscConfig+0xca>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005808:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800580a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800580c:	68a9      	ldr	r1, [r5, #8]
 800580e:	f023 030f 	bic.w	r3, r3, #15
 8005812:	430b      	orrs	r3, r1
 8005814:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005816:	b352      	cbz	r2, 800586e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8005818:	f7ff f852 	bl	80048c0 <HAL_GetTick>
 800581c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005820:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	f04f 0801 	mov.w	r8, #1
 8005826:	fa97 f3a7 	rbit	r3, r7
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	fa97 f3a7 	rbit	r3, r7
 8005830:	fab3 f383 	clz	r3, r3
 8005834:	fa08 f303 	lsl.w	r3, r8, r3
 8005838:	4213      	tst	r3, r2
 800583a:	d1ab      	bne.n	8005794 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583c:	f7ff f840 	bl	80048c0 <HAL_GetTick>
 8005840:	1b80      	subs	r0, r0, r6
 8005842:	2864      	cmp	r0, #100	@ 0x64
 8005844:	d9ef      	bls.n	8005826 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8005846:	2003      	movs	r0, #3
}
 8005848:	b002      	add	sp, #8
 800584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	b932      	cbnz	r2, 8005860 <HAL_RCC_OscConfig+0xdc>
 8005852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800585e:	e7d3      	b.n	8005808 <HAL_RCC_OscConfig+0x84>
 8005860:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8005864:	d1f5      	bne.n	8005852 <HAL_RCC_OscConfig+0xce>
 8005866:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	e7c9      	b.n	8005802 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 800586e:	f7ff f827 	bl	80048c0 <HAL_GetTick>
 8005872:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005876:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005878:	f04f 0801 	mov.w	r8, #1
 800587c:	fa97 f3a7 	rbit	r3, r7
 8005880:	6822      	ldr	r2, [r4, #0]
 8005882:	fa97 f3a7 	rbit	r3, r7
 8005886:	fab3 f383 	clz	r3, r3
 800588a:	fa08 f303 	lsl.w	r3, r8, r3
 800588e:	4213      	tst	r3, r2
 8005890:	d080      	beq.n	8005794 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005892:	f7ff f815 	bl	80048c0 <HAL_GetTick>
 8005896:	1b80      	subs	r0, r0, r6
 8005898:	2864      	cmp	r0, #100	@ 0x64
 800589a:	d9ef      	bls.n	800587c <HAL_RCC_OscConfig+0xf8>
 800589c:	e7d3      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800589e:	4c77      	ldr	r4, [pc, #476]	@ (8005a7c <HAL_RCC_OscConfig+0x2f8>)
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	f013 0f0c 	tst.w	r3, #12
 80058a6:	d007      	beq.n	80058b8 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	f003 030c 	and.w	r3, r3, #12
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d11f      	bne.n	80058f2 <HAL_RCC_OscConfig+0x16e>
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	03de      	lsls	r6, r3, #15
 80058b6:	d41c      	bmi.n	80058f2 <HAL_RCC_OscConfig+0x16e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	6821      	ldr	r1, [r4, #0]
 80058c0:	fa93 f3a3 	rbit	r3, r3
 80058c4:	2201      	movs	r2, #1
 80058c6:	fab3 f383 	clz	r3, r3
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	420b      	tst	r3, r1
 80058d0:	d002      	beq.n	80058d8 <HAL_RCC_OscConfig+0x154>
 80058d2:	692b      	ldr	r3, [r5, #16]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d18e      	bne.n	80057f6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d8:	6821      	ldr	r1, [r4, #0]
 80058da:	22f8      	movs	r2, #248	@ 0xf8
 80058dc:	fa92 f2a2 	rbit	r2, r2
 80058e0:	696b      	ldr	r3, [r5, #20]
 80058e2:	fab2 f282 	clz	r2, r2
 80058e6:	4093      	lsls	r3, r2
 80058e8:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80058ec:	4313      	orrs	r3, r2
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	e754      	b.n	800579c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058f2:	692a      	ldr	r2, [r5, #16]
 80058f4:	2601      	movs	r6, #1
 80058f6:	b1fa      	cbz	r2, 8005938 <HAL_RCC_OscConfig+0x1b4>
 80058f8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005904:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	f04f 0802 	mov.w	r8, #2
 800590e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005910:	f7fe ffd6 	bl	80048c0 <HAL_GetTick>
 8005914:	4607      	mov	r7, r0
 8005916:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	fa98 f3a8 	rbit	r3, r8
 8005920:	fab3 f383 	clz	r3, r3
 8005924:	fa06 f303 	lsl.w	r3, r6, r3
 8005928:	4213      	tst	r3, r2
 800592a:	d1d5      	bne.n	80058d8 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800592c:	f7fe ffc8 	bl	80048c0 <HAL_GetTick>
 8005930:	1bc0      	subs	r0, r0, r7
 8005932:	2802      	cmp	r0, #2
 8005934:	d9ef      	bls.n	8005916 <HAL_RCC_OscConfig+0x192>
 8005936:	e786      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
 8005938:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800593c:	fab3 f383 	clz	r3, r3
 8005940:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005944:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	f04f 0802 	mov.w	r8, #2
 800594e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005950:	f7fe ffb6 	bl	80048c0 <HAL_GetTick>
 8005954:	4607      	mov	r7, r0
 8005956:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	fa98 f3a8 	rbit	r3, r8
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	fa06 f303 	lsl.w	r3, r6, r3
 8005968:	4213      	tst	r3, r2
 800596a:	f43f af17 	beq.w	800579c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596e:	f7fe ffa7 	bl	80048c0 <HAL_GetTick>
 8005972:	1bc0      	subs	r0, r0, r7
 8005974:	2802      	cmp	r0, #2
 8005976:	d9ee      	bls.n	8005956 <HAL_RCC_OscConfig+0x1d2>
 8005978:	e765      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597a:	69aa      	ldr	r2, [r5, #24]
 800597c:	4e3f      	ldr	r6, [pc, #252]	@ (8005a7c <HAL_RCC_OscConfig+0x2f8>)
 800597e:	4940      	ldr	r1, [pc, #256]	@ (8005a80 <HAL_RCC_OscConfig+0x2fc>)
 8005980:	2401      	movs	r4, #1
 8005982:	b30a      	cbz	r2, 80059c8 <HAL_RCC_OscConfig+0x244>
 8005984:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8005988:	fab3 f383 	clz	r3, r3
 800598c:	440b      	add	r3, r1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	2702      	movs	r7, #2
 8005992:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8005994:	f7fe ff94 	bl	80048c0 <HAL_GetTick>
 8005998:	4680      	mov	r8, r0
 800599a:	fa97 f3a7 	rbit	r3, r7
 800599e:	fa97 f3a7 	rbit	r3, r7
 80059a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a6:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80059a8:	fa97 f3a7 	rbit	r3, r7
 80059ac:	fab3 f383 	clz	r3, r3
 80059b0:	fa04 f303 	lsl.w	r3, r4, r3
 80059b4:	4213      	tst	r3, r2
 80059b6:	f47f aef5 	bne.w	80057a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ba:	f7fe ff81 	bl	80048c0 <HAL_GetTick>
 80059be:	eba0 0008 	sub.w	r0, r0, r8
 80059c2:	2802      	cmp	r0, #2
 80059c4:	d9e9      	bls.n	800599a <HAL_RCC_OscConfig+0x216>
 80059c6:	e73e      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
 80059c8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80059cc:	fab3 f383 	clz	r3, r3
 80059d0:	440b      	add	r3, r1
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	2702      	movs	r7, #2
 80059d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80059d8:	f7fe ff72 	bl	80048c0 <HAL_GetTick>
 80059dc:	4680      	mov	r8, r0
 80059de:	fa97 f3a7 	rbit	r3, r7
 80059e2:	fa97 f3a7 	rbit	r3, r7
 80059e6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ea:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80059ec:	fa97 f3a7 	rbit	r3, r7
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	fa04 f303 	lsl.w	r3, r4, r3
 80059f8:	4213      	tst	r3, r2
 80059fa:	f43f aed3 	beq.w	80057a4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059fe:	f7fe ff5f 	bl	80048c0 <HAL_GetTick>
 8005a02:	eba0 0008 	sub.w	r0, r0, r8
 8005a06:	2802      	cmp	r0, #2
 8005a08:	d9e9      	bls.n	80059de <HAL_RCC_OscConfig+0x25a>
 8005a0a:	e71c      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0c:	4c1b      	ldr	r4, [pc, #108]	@ (8005a7c <HAL_RCC_OscConfig+0x2f8>)
 8005a0e:	69e3      	ldr	r3, [r4, #28]
 8005a10:	00d9      	lsls	r1, r3, #3
 8005a12:	d431      	bmi.n	8005a78 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a14:	69e3      	ldr	r3, [r4, #28]
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	61e3      	str	r3, [r4, #28]
 8005a1c:	69e3      	ldr	r3, [r4, #28]
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a26:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a28:	4f16      	ldr	r7, [pc, #88]	@ (8005a84 <HAL_RCC_OscConfig+0x300>)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	05da      	lsls	r2, r3, #23
 8005a2e:	d52b      	bpl.n	8005a88 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a30:	68eb      	ldr	r3, [r5, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d139      	bne.n	8005aaa <HAL_RCC_OscConfig+0x326>
 8005a36:	6a23      	ldr	r3, [r4, #32]
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005a3e:	f7fe ff3f 	bl	80048c0 <HAL_GetTick>
 8005a42:	2702      	movs	r7, #2
 8005a44:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a46:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a4a:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005a4e:	fa97 f3a7 	rbit	r3, r7
 8005a52:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a56:	6a22      	ldr	r2, [r4, #32]
 8005a58:	fa97 f3a7 	rbit	r3, r7
 8005a5c:	fab3 f383 	clz	r3, r3
 8005a60:	fa09 f303 	lsl.w	r3, r9, r3
 8005a64:	4213      	tst	r3, r2
 8005a66:	d053      	beq.n	8005b10 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	f43f ae9f 	beq.w	80057ac <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6e:	69e3      	ldr	r3, [r4, #28]
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a74:	61e3      	str	r3, [r4, #28]
 8005a76:	e699      	b.n	80057ac <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005a78:	2600      	movs	r6, #0
 8005a7a:	e7d5      	b.n	8005a28 <HAL_RCC_OscConfig+0x2a4>
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	10908120 	.word	0x10908120
 8005a84:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005a90:	f7fe ff16 	bl	80048c0 <HAL_GetTick>
 8005a94:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	05db      	lsls	r3, r3, #23
 8005a9a:	d4c9      	bmi.n	8005a30 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9c:	f7fe ff10 	bl	80048c0 <HAL_GetTick>
 8005aa0:	eba0 0008 	sub.w	r0, r0, r8
 8005aa4:	2864      	cmp	r0, #100	@ 0x64
 8005aa6:	d9f6      	bls.n	8005a96 <HAL_RCC_OscConfig+0x312>
 8005aa8:	e6cd      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aaa:	bb1b      	cbnz	r3, 8005af4 <HAL_RCC_OscConfig+0x370>
 8005aac:	6a23      	ldr	r3, [r4, #32]
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	6223      	str	r3, [r4, #32]
 8005ab4:	6a23      	ldr	r3, [r4, #32]
 8005ab6:	f023 0304 	bic.w	r3, r3, #4
 8005aba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005abc:	f7fe ff00 	bl	80048c0 <HAL_GetTick>
 8005ac0:	2702      	movs	r7, #2
 8005ac2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac4:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005acc:	fa97 f3a7 	rbit	r3, r7
 8005ad0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad4:	6a22      	ldr	r2, [r4, #32]
 8005ad6:	fa97 f3a7 	rbit	r3, r7
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae2:	4213      	tst	r3, r2
 8005ae4:	d0c0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fe feeb 	bl	80048c0 <HAL_GetTick>
 8005aea:	eba0 0008 	sub.w	r0, r0, r8
 8005aee:	4550      	cmp	r0, sl
 8005af0:	d9ec      	bls.n	8005acc <HAL_RCC_OscConfig+0x348>
 8005af2:	e6a8      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	6a23      	ldr	r3, [r4, #32]
 8005af8:	d103      	bne.n	8005b02 <HAL_RCC_OscConfig+0x37e>
 8005afa:	f043 0304 	orr.w	r3, r3, #4
 8005afe:	6223      	str	r3, [r4, #32]
 8005b00:	e799      	b.n	8005a36 <HAL_RCC_OscConfig+0x2b2>
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	6223      	str	r3, [r4, #32]
 8005b08:	6a23      	ldr	r3, [r4, #32]
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	e795      	b.n	8005a3c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fe fed6 	bl	80048c0 <HAL_GetTick>
 8005b14:	eba0 0008 	sub.w	r0, r0, r8
 8005b18:	4550      	cmp	r0, sl
 8005b1a:	d998      	bls.n	8005a4e <HAL_RCC_OscConfig+0x2ca>
 8005b1c:	e693      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b1e:	4c46      	ldr	r4, [pc, #280]	@ (8005c38 <HAL_RCC_OscConfig+0x4b4>)
 8005b20:	6862      	ldr	r2, [r4, #4]
 8005b22:	f002 020c 	and.w	r2, r2, #12
 8005b26:	2a08      	cmp	r2, #8
 8005b28:	d074      	beq.n	8005c14 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b30:	d14d      	bne.n	8005bce <HAL_RCC_OscConfig+0x44a>
 8005b32:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b48:	f7fe feba 	bl	80048c0 <HAL_GetTick>
 8005b4c:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8005b50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b52:	2601      	movs	r6, #1
 8005b54:	fa98 f3a8 	rbit	r3, r8
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	fa98 f3a8 	rbit	r3, r8
 8005b5e:	fab3 f383 	clz	r3, r3
 8005b62:	fa06 f303 	lsl.w	r3, r6, r3
 8005b66:	4213      	tst	r3, r2
 8005b68:	d12b      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b6a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8005b6e:	6862      	ldr	r2, [r4, #4]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005b76:	4313      	orrs	r3, r2
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005b82:	fab3 f383 	clz	r3, r3
 8005b86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b8e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b90:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8005b92:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005b94:	f7fe fe94 	bl	80048c0 <HAL_GetTick>
 8005b98:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ba2:	6822      	ldr	r2, [r4, #0]
 8005ba4:	fa96 f3a6 	rbit	r3, r6
 8005ba8:	fab3 f383 	clz	r3, r3
 8005bac:	fa07 f303 	lsl.w	r3, r7, r3
 8005bb0:	4213      	tst	r3, r2
 8005bb2:	f47f adff 	bne.w	80057b4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fe fe83 	bl	80048c0 <HAL_GetTick>
 8005bba:	1b40      	subs	r0, r0, r5
 8005bbc:	2802      	cmp	r0, #2
 8005bbe:	d9ee      	bls.n	8005b9e <HAL_RCC_OscConfig+0x41a>
 8005bc0:	e641      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc2:	f7fe fe7d 	bl	80048c0 <HAL_GetTick>
 8005bc6:	1bc0      	subs	r0, r0, r7
 8005bc8:	2802      	cmp	r0, #2
 8005bca:	d9c3      	bls.n	8005b54 <HAL_RCC_OscConfig+0x3d0>
 8005bcc:	e63b      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
 8005bce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005bda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005be4:	f7fe fe6c 	bl	80048c0 <HAL_GetTick>
 8005be8:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005bec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bee:	2701      	movs	r7, #1
 8005bf0:	fa96 f3a6 	rbit	r3, r6
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	fa96 f3a6 	rbit	r3, r6
 8005bfa:	fab3 f383 	clz	r3, r3
 8005bfe:	fa07 f303 	lsl.w	r3, r7, r3
 8005c02:	4213      	tst	r3, r2
 8005c04:	f43f add6 	beq.w	80057b4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fe fe5a 	bl	80048c0 <HAL_GetTick>
 8005c0c:	1b40      	subs	r0, r0, r5
 8005c0e:	2802      	cmp	r0, #2
 8005c10:	d9ee      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x46c>
 8005c12:	e618      	b.n	8005846 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f43f adee 	beq.w	80057f6 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8005c1a:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c1c:	6a2b      	ldr	r3, [r5, #32]
 8005c1e:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f47f ade7 	bne.w	80057f6 <HAL_RCC_OscConfig+0x72>
 8005c28:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c2a:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c2e:	1ac0      	subs	r0, r0, r3
 8005c30:	bf18      	it	ne
 8005c32:	2001      	movne	r0, #1
 8005c34:	e608      	b.n	8005848 <HAL_RCC_OscConfig+0xc4>
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000

08005c3c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x34>)
 8005c3e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c40:	f002 010c 	and.w	r1, r2, #12
 8005c44:	2908      	cmp	r1, #8
 8005c46:	d111      	bne.n	8005c6c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c4a:	480a      	ldr	r0, [pc, #40]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x38>)
 8005c4c:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005c50:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005c52:	bf44      	itt	mi
 8005c54:	f003 030f 	andmi.w	r3, r3, #15
 8005c58:	4a07      	ldrmi	r2, [pc, #28]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c5a:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005c5c:	bf49      	itett	mi
 8005c5e:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c60:	4b06      	ldrpl	r3, [pc, #24]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c62:	4b07      	ldrmi	r3, [pc, #28]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x44>)
 8005c64:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c68:	4358      	muls	r0, r3
 8005c6a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005c6c:	4804      	ldr	r0, [pc, #16]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005c6e:	4770      	bx	lr
 8005c70:	40021000 	.word	0x40021000
 8005c74:	08010594 	.word	0x08010594
 8005c78:	08010584 	.word	0x08010584
 8005c7c:	003d0900 	.word	0x003d0900
 8005c80:	007a1200 	.word	0x007a1200

08005c84 <HAL_RCC_ClockConfig>:
{
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	b910      	cbnz	r0, 8005c94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
}
 8005c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc0 <HAL_RCC_ClockConfig+0x13c>)
 8005c96:	6813      	ldr	r3, [r2, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	d32e      	bcc.n	8005cfe <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	0791      	lsls	r1, r2, #30
 8005ca4:	d436      	bmi.n	8005d14 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca6:	07d2      	lsls	r2, r2, #31
 8005ca8:	d43c      	bmi.n	8005d24 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005caa:	4a45      	ldr	r2, [pc, #276]	@ (8005dc0 <HAL_RCC_ClockConfig+0x13c>)
 8005cac:	6813      	ldr	r3, [r2, #0]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	42ab      	cmp	r3, r5
 8005cb4:	d870      	bhi.n	8005d98 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	4d42      	ldr	r5, [pc, #264]	@ (8005dc4 <HAL_RCC_ClockConfig+0x140>)
 8005cba:	f012 0f04 	tst.w	r2, #4
 8005cbe:	d177      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc0:	0713      	lsls	r3, r2, #28
 8005cc2:	d506      	bpl.n	8005cd2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc4:	686b      	ldr	r3, [r5, #4]
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005ccc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005cd0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005cd2:	f7ff ffb3 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005cd6:	686b      	ldr	r3, [r5, #4]
 8005cd8:	22f0      	movs	r2, #240	@ 0xf0
 8005cda:	fa92 f2a2 	rbit	r2, r2
 8005cde:	fab2 f282 	clz	r2, r2
 8005ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ce6:	40d3      	lsrs	r3, r2
 8005ce8:	4a37      	ldr	r2, [pc, #220]	@ (8005dc8 <HAL_RCC_ClockConfig+0x144>)
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	40d8      	lsrs	r0, r3
 8005cee:	4b37      	ldr	r3, [pc, #220]	@ (8005dcc <HAL_RCC_ClockConfig+0x148>)
 8005cf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <HAL_RCC_ClockConfig+0x14c>)
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f7fe fc8f 	bl	8004618 <HAL_InitTick>
  return HAL_OK;
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e7c8      	b.n	8005c90 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	f023 0307 	bic.w	r3, r3, #7
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	428b      	cmp	r3, r1
 8005d10:	d1bd      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xa>
 8005d12:	e7c5      	b.n	8005ca0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d14:	492b      	ldr	r1, [pc, #172]	@ (8005dc4 <HAL_RCC_ClockConfig+0x140>)
 8005d16:	68a0      	ldr	r0, [r4, #8]
 8005d18:	684b      	ldr	r3, [r1, #4]
 8005d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1e:	4303      	orrs	r3, r0
 8005d20:	604b      	str	r3, [r1, #4]
 8005d22:	e7c0      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d24:	6862      	ldr	r2, [r4, #4]
 8005d26:	4e27      	ldr	r6, [pc, #156]	@ (8005dc4 <HAL_RCC_ClockConfig+0x140>)
 8005d28:	2a01      	cmp	r2, #1
 8005d2a:	d124      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xf2>
 8005d2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d30:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d34:	6831      	ldr	r1, [r6, #0]
 8005d36:	fa93 f3a3 	rbit	r3, r3
 8005d3a:	fab3 f383 	clz	r3, r3
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	d0a3      	beq.n	8005c8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	6873      	ldr	r3, [r6, #4]
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005d50:	f7fe fdb6 	bl	80048c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005d58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	6873      	ldr	r3, [r6, #4]
 8005d5c:	6862      	ldr	r2, [r4, #4]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005d66:	d0a0      	beq.n	8005caa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fe fdaa 	bl	80048c0 <HAL_GetTick>
 8005d6c:	1bc0      	subs	r0, r0, r7
 8005d6e:	4540      	cmp	r0, r8
 8005d70:	d9f3      	bls.n	8005d5a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005d72:	2003      	movs	r0, #3
 8005d74:	e78c      	b.n	8005c90 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	2a02      	cmp	r2, #2
 8005d78:	bf0c      	ite	eq
 8005d7a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8005d7e:	2302      	movne	r3, #2
 8005d80:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d84:	6830      	ldr	r0, [r6, #0]
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	fab3 f383 	clz	r3, r3
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	4203      	tst	r3, r0
 8005d96:	e7d5      	b.n	8005d44 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	432b      	orrs	r3, r5
 8005da0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	6813      	ldr	r3, [r2, #0]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	f47f af70 	bne.w	8005c8e <HAL_RCC_ClockConfig+0xa>
 8005dae:	e782      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db0:	686b      	ldr	r3, [r5, #4]
 8005db2:	68e1      	ldr	r1, [r4, #12]
 8005db4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005db8:	430b      	orrs	r3, r1
 8005dba:	606b      	str	r3, [r5, #4]
 8005dbc:	e780      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x3c>
 8005dbe:	bf00      	nop
 8005dc0:	40022000 	.word	0x40022000
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	08010574 	.word	0x08010574
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	20000014 	.word	0x20000014

08005dd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005dd4:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	fa92 f2a2 	rbit	r2, r2
 8005de0:	fab2 f282 	clz	r2, r2
 8005de4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005de8:	40d3      	lsrs	r3, r2
 8005dea:	4a04      	ldr	r2, [pc, #16]	@ (8005dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dec:	5cd3      	ldrb	r3, [r2, r3]
 8005dee:	4a04      	ldr	r2, [pc, #16]	@ (8005e00 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005df0:	6810      	ldr	r0, [r2, #0]
}    
 8005df2:	40d8      	lsrs	r0, r3
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	0801056c 	.word	0x0801056c
 8005e00:	2000000c 	.word	0x2000000c

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e06:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	fa92 f2a2 	rbit	r2, r2
 8005e10:	fab2 f282 	clz	r2, r2
 8005e14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005e18:	40d3      	lsrs	r3, r2
 8005e1a:	4a04      	ldr	r2, [pc, #16]	@ (8005e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e1c:	5cd3      	ldrb	r3, [r2, r3]
 8005e1e:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005e20:	6810      	ldr	r0, [r2, #0]
} 
 8005e22:	40d8      	lsrs	r0, r3
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	0801056c 	.word	0x0801056c
 8005e30:	2000000c 	.word	0x2000000c

08005e34 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e34:	230f      	movs	r3, #15
 8005e36:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <HAL_RCC_GetClockConfig+0x34>)
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	f002 0203 	and.w	r2, r2, #3
 8005e40:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005e48:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005e50:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e5a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005e5c:	4b03      	ldr	r3, [pc, #12]	@ (8005e6c <HAL_RCC_GetClockConfig+0x38>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	600b      	str	r3, [r1, #0]
}
 8005e66:	4770      	bx	lr
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40022000 	.word	0x40022000

08005e70 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e70:	6803      	ldr	r3, [r0, #0]
{
 8005e72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e76:	03dd      	lsls	r5, r3, #15
{
 8005e78:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e7a:	d524      	bpl.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7c:	4d78      	ldr	r5, [pc, #480]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e7e:	69eb      	ldr	r3, [r5, #28]
 8005e80:	00d8      	lsls	r0, r3, #3
 8005e82:	f100 8091 	bmi.w	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	69eb      	ldr	r3, [r5, #28]
 8005e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e8c:	61eb      	str	r3, [r5, #28]
 8005e8e:	69eb      	ldr	r3, [r5, #28]
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e98:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9a:	4f72      	ldr	r7, [pc, #456]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	05d9      	lsls	r1, r3, #23
 8005ea0:	f140 8084 	bpl.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea4:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005eac:	f040 8093 	bne.w	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005eb0:	6a2b      	ldr	r3, [r5, #32]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ebc:	b11e      	cbz	r6, 8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ebe:	69eb      	ldr	r3, [r5, #28]
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec4:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07df      	lsls	r7, r3, #31
 8005eca:	d506      	bpl.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ecc:	4964      	ldr	r1, [pc, #400]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ece:	68a0      	ldr	r0, [r4, #8]
 8005ed0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ed2:	f022 0203 	bic.w	r2, r2, #3
 8005ed6:	4302      	orrs	r2, r0
 8005ed8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005eda:	079e      	lsls	r6, r3, #30
 8005edc:	d506      	bpl.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ede:	4960      	ldr	r1, [pc, #384]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ee0:	68e0      	ldr	r0, [r4, #12]
 8005ee2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ee4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005ee8:	4302      	orrs	r2, r0
 8005eea:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eec:	075d      	lsls	r5, r3, #29
 8005eee:	d506      	bpl.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ef0:	495b      	ldr	r1, [pc, #364]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ef2:	6920      	ldr	r0, [r4, #16]
 8005ef4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ef6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005efa:	4302      	orrs	r2, r0
 8005efc:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005efe:	0698      	lsls	r0, r3, #26
 8005f00:	d506      	bpl.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f02:	4957      	ldr	r1, [pc, #348]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f04:	69e0      	ldr	r0, [r4, #28]
 8005f06:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f08:	f022 0210 	bic.w	r2, r2, #16
 8005f0c:	4302      	orrs	r2, r0
 8005f0e:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f10:	0399      	lsls	r1, r3, #14
 8005f12:	d506      	bpl.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f14:	4952      	ldr	r1, [pc, #328]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005f18:	684a      	ldr	r2, [r1, #4]
 8005f1a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8005f1e:	4302      	orrs	r2, r0
 8005f20:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f22:	065a      	lsls	r2, r3, #25
 8005f24:	d506      	bpl.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f26:	494e      	ldr	r1, [pc, #312]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f28:	6a20      	ldr	r0, [r4, #32]
 8005f2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f2c:	f022 0220 	bic.w	r2, r2, #32
 8005f30:	4302      	orrs	r2, r0
 8005f32:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f34:	071f      	lsls	r7, r3, #28
 8005f36:	d506      	bpl.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f38:	4949      	ldr	r1, [pc, #292]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f3a:	6960      	ldr	r0, [r4, #20]
 8005f3c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f3e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005f42:	4302      	orrs	r2, r0
 8005f44:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f46:	06de      	lsls	r6, r3, #27
 8005f48:	d506      	bpl.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f4a:	4945      	ldr	r1, [pc, #276]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f4c:	69a0      	ldr	r0, [r4, #24]
 8005f4e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f50:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005f54:	4302      	orrs	r2, r0
 8005f56:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f58:	059d      	lsls	r5, r3, #22
 8005f5a:	d506      	bpl.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f5c:	4940      	ldr	r1, [pc, #256]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f5e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f60:	684a      	ldr	r2, [r1, #4]
 8005f62:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005f66:	4302      	orrs	r2, r0
 8005f68:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f6a:	0618      	lsls	r0, r3, #24
 8005f6c:	d506      	bpl.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f6e:	493c      	ldr	r1, [pc, #240]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005f72:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005f74:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005f78:	4302      	orrs	r2, r0
 8005f7a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f7c:	05d9      	lsls	r1, r3, #23
 8005f7e:	d506      	bpl.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f80:	4937      	ldr	r1, [pc, #220]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005f84:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005f86:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8005f8a:	4302      	orrs	r2, r0
 8005f8c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f8e:	04da      	lsls	r2, r3, #19
 8005f90:	d506      	bpl.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f92:	4933      	ldr	r1, [pc, #204]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005f96:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f9c:	4302      	orrs	r2, r0
 8005f9e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fa0:	049b      	lsls	r3, r3, #18
 8005fa2:	d454      	bmi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e013      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8005fa8:	2600      	movs	r6, #0
 8005faa:	e776      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005fb4:	f7fe fc84 	bl	80048c0 <HAL_GetTick>
 8005fb8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	05da      	lsls	r2, r3, #23
 8005fbe:	f53f af71 	bmi.w	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc2:	f7fe fc7d 	bl	80048c0 <HAL_GetTick>
 8005fc6:	eba0 0008 	sub.w	r0, r0, r8
 8005fca:	2864      	cmp	r0, #100	@ 0x64
 8005fcc:	d9f5      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8005fce:	2003      	movs	r0, #3
}
 8005fd0:	b002      	add	sp, #8
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fd6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f43f af68 	beq.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fe0:	6a29      	ldr	r1, [r5, #32]
 8005fe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fe6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8005fea:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fee:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005ff2:	fab2 f282 	clz	r2, r2
 8005ff6:	4462      	add	r2, ip
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	2701      	movs	r7, #1
 8005ffc:	6017      	str	r7, [r2, #0]
 8005ffe:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006002:	fab3 f383 	clz	r3, r3
 8006006:	4463      	add	r3, ip
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800600e:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8006010:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006012:	f57f af4d 	bpl.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8006016:	f7fe fc53 	bl	80048c0 <HAL_GetTick>
 800601a:	f04f 0802 	mov.w	r8, #2
 800601e:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006024:	fa98 f3a8 	rbit	r3, r8
 8006028:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	6a2a      	ldr	r2, [r5, #32]
 800602e:	fa98 f3a8 	rbit	r3, r8
 8006032:	fab3 f383 	clz	r3, r3
 8006036:	fa07 f303 	lsl.w	r3, r7, r3
 800603a:	4213      	tst	r3, r2
 800603c:	f47f af38 	bne.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006040:	f7fe fc3e 	bl	80048c0 <HAL_GetTick>
 8006044:	eba0 0009 	sub.w	r0, r0, r9
 8006048:	4550      	cmp	r0, sl
 800604a:	d9eb      	bls.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800604c:	e7bf      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800604e:	4a04      	ldr	r2, [pc, #16]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006052:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006058:	430b      	orrs	r3, r1
 800605a:	6313      	str	r3, [r2, #48]	@ 0x30
 800605c:	e7a2      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000
 8006064:	40007000 	.word	0x40007000
 8006068:	10908100 	.word	0x10908100

0800606c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800606c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800606e:	6803      	ldr	r3, [r0, #0]
 8006070:	4a09      	ldr	r2, [pc, #36]	@ (8006098 <HAL_RTC_WaitForSynchro+0x2c>)
 8006072:	60da      	str	r2, [r3, #12]
{
 8006074:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8006076:	f7fe fc23 	bl	80048c0 <HAL_GetTick>
 800607a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	069b      	lsls	r3, r3, #26
 8006082:	d501      	bpl.n	8006088 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006084:	2000      	movs	r0, #0
}
 8006086:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006088:	f7fe fc1a 	bl	80048c0 <HAL_GetTick>
 800608c:	1b40      	subs	r0, r0, r5
 800608e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006092:	d9f3      	bls.n	800607c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006094:	2003      	movs	r0, #3
 8006096:	e7f6      	b.n	8006086 <HAL_RTC_WaitForSynchro+0x1a>
 8006098:	0001ff5f 	.word	0x0001ff5f

0800609c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800609c:	6803      	ldr	r3, [r0, #0]
{
 800609e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060a0:	68dc      	ldr	r4, [r3, #12]
 80060a2:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 80060a6:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060a8:	d117      	bne.n	80060da <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b2:	f7fe fc05 	bl	80048c0 <HAL_GetTick>
 80060b6:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	065b      	lsls	r3, r3, #25
 80060be:	d400      	bmi.n	80060c2 <RTC_EnterInitMode+0x26>
 80060c0:	b10c      	cbz	r4, 80060c6 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 80060c2:	4620      	mov	r0, r4
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060c6:	f7fe fbfb 	bl	80048c0 <HAL_GetTick>
 80060ca:	1b80      	subs	r0, r0, r6
 80060cc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 80060d0:	bf82      	ittt	hi
 80060d2:	2304      	movhi	r3, #4
 80060d4:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 80060d6:	2401      	movhi	r4, #1
 80060d8:	e7ee      	b.n	80060b8 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2400      	movs	r4, #0
 80060dc:	e7f1      	b.n	80060c2 <RTC_EnterInitMode+0x26>

080060de <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060de:	6803      	ldr	r3, [r0, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 80060e6:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	069b      	lsls	r3, r3, #26
{
 80060ee:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80060f0:	d501      	bpl.n	80060f6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80060f2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80060f4:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060f6:	f7ff ffb9 	bl	800606c <HAL_RTC_WaitForSynchro>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d0f9      	beq.n	80060f2 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060fe:	2304      	movs	r3, #4
 8006100:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006102:	2001      	movs	r0, #1
 8006104:	e7f6      	b.n	80060f4 <RTC_ExitInitMode+0x16>

08006106 <HAL_RTC_Init>:
{
 8006106:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006108:	4604      	mov	r4, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d041      	beq.n	8006192 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800610e:	7f43      	ldrb	r3, [r0, #29]
 8006110:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006114:	b913      	cbnz	r3, 800611c <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8006116:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006118:	f7fe f946 	bl	80043a8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800611c:	2302      	movs	r3, #2
 800611e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	06d2      	lsls	r2, r2, #27
 8006126:	d503      	bpl.n	8006130 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006128:	2301      	movs	r3, #1
 800612a:	7763      	strb	r3, [r4, #29]
 800612c:	2000      	movs	r0, #0
}
 800612e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006130:	22ca      	movs	r2, #202	@ 0xca
 8006132:	625a      	str	r2, [r3, #36]	@ 0x24
 8006134:	2253      	movs	r2, #83	@ 0x53
 8006136:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006138:	4620      	mov	r0, r4
 800613a:	f7ff ffaf 	bl	800609c <RTC_EnterInitMode>
    if (status == HAL_OK)
 800613e:	bb10      	cbnz	r0, 8006186 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006140:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006142:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 800614a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800614e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006150:	6862      	ldr	r2, [r4, #4]
 8006152:	6899      	ldr	r1, [r3, #8]
 8006154:	4302      	orrs	r2, r0
 8006156:	6960      	ldr	r0, [r4, #20]
 8006158:	4302      	orrs	r2, r0
 800615a:	430a      	orrs	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800615e:	68e2      	ldr	r2, [r4, #12]
 8006160:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68a1      	ldr	r1, [r4, #8]
 8006166:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800616a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800616c:	4620      	mov	r0, r4
 800616e:	f7ff ffb6 	bl	80060de <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006172:	b940      	cbnz	r0, 8006186 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006174:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006176:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006178:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800617a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006182:	430a      	orrs	r2, r1
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	22ff      	movs	r2, #255	@ 0xff
 800618a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800618c:	2800      	cmp	r0, #0
 800618e:	d0cb      	beq.n	8006128 <HAL_RTC_Init+0x22>
 8006190:	e7cd      	b.n	800612e <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006192:	2001      	movs	r0, #1
 8006194:	e7cb      	b.n	800612e <HAL_RTC_Init+0x28>

08006196 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006196:	2300      	movs	r3, #0

  while (number >= 10U)
 8006198:	2809      	cmp	r0, #9
 800619a:	d803      	bhi.n	80061a4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800619c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80061a0:	b2c0      	uxtb	r0, r0
 80061a2:	4770      	bx	lr
    number -= 10U;
 80061a4:	380a      	subs	r0, #10
    bcdhigh++;
 80061a6:	3301      	adds	r3, #1
    number -= 10U;
 80061a8:	b2c0      	uxtb	r0, r0
 80061aa:	e7f5      	b.n	8006198 <RTC_ByteToBcd2+0x2>

080061ac <HAL_RTC_SetTime>:
{
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 80061b0:	7f03      	ldrb	r3, [r0, #28]
 80061b2:	2b01      	cmp	r3, #1
{
 80061b4:	4606      	mov	r6, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80061bc:	d041      	beq.n	8006242 <HAL_RTC_SetTime+0x96>
 80061be:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061c0:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80061c2:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c4:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 80061c6:	7838      	ldrb	r0, [r7, #0]
 80061c8:	787d      	ldrb	r5, [r7, #1]
 80061ca:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061cc:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	d139      	bne.n	8006246 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061d2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80061d6:	bf08      	it	eq
 80061d8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80061da:	f7ff ffdc 	bl	8006196 <RTC_ByteToBcd2>
 80061de:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80061e0:	4628      	mov	r0, r5
 80061e2:	f7ff ffd8 	bl	8006196 <RTC_ByteToBcd2>
 80061e6:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff ffd4 	bl	8006196 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80061ee:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80061f0:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 80061f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80061f8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061fc:	23ca      	movs	r3, #202	@ 0xca
 80061fe:	624b      	str	r3, [r1, #36]	@ 0x24
 8006200:	2353      	movs	r3, #83	@ 0x53
 8006202:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ff49 	bl	800609c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800620a:	b9a8      	cbnz	r0, 8006238 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800620c:	6832      	ldr	r2, [r6, #0]
 800620e:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8006212:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8006216:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006218:	6893      	ldr	r3, [r2, #8]
 800621a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800621e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006220:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006224:	6891      	ldr	r1, [r2, #8]
 8006226:	4303      	orrs	r3, r0
 8006228:	430b      	orrs	r3, r1
 800622a:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff ff56 	bl	80060de <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006232:	b908      	cbnz	r0, 8006238 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8006234:	2301      	movs	r3, #1
 8006236:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	22ff      	movs	r2, #255	@ 0xff
 800623c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800623e:	2300      	movs	r3, #0
 8006240:	7733      	strb	r3, [r6, #28]
}
 8006242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006246:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 800624a:	bf08      	it	eq
 800624c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800624e:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006250:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006252:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006256:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800625a:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 800625e:	e7cd      	b.n	80061fc <HAL_RTC_SetTime+0x50>

08006260 <HAL_RTC_SetDate>:
{
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006262:	7f03      	ldrb	r3, [r0, #28]
 8006264:	2b01      	cmp	r3, #1
{
 8006266:	4605      	mov	r5, r0
 8006268:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800626c:	d027      	beq.n	80062be <HAL_RTC_SetDate+0x5e>
 800626e:	2301      	movs	r3, #1
 8006270:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006272:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006274:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006276:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006278:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 800627a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800627c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800627e:	b1fa      	cbz	r2, 80062c0 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006280:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006284:	433b      	orrs	r3, r7
 8006286:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	22ca      	movs	r2, #202	@ 0xca
 800628e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006290:	2253      	movs	r2, #83	@ 0x53
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006294:	4628      	mov	r0, r5
 8006296:	f7ff ff01 	bl	800609c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800629a:	b958      	cbnz	r0, 80062b4 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800629c:	682a      	ldr	r2, [r5, #0]
 800629e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 80062a2:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 80062a6:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80062a8:	4628      	mov	r0, r5
 80062aa:	f7ff ff18 	bl	80060de <RTC_ExitInitMode>
  if (status == HAL_OK)
 80062ae:	b908      	cbnz	r0, 80062b4 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 80062b0:	2301      	movs	r3, #1
 80062b2:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	22ff      	movs	r2, #255	@ 0xff
 80062b8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80062ba:	2300      	movs	r3, #0
 80062bc:	772b      	strb	r3, [r5, #28]
}
 80062be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062c0:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80062c2:	bf42      	ittt	mi
 80062c4:	f024 0410 	bicmi.w	r4, r4, #16
 80062c8:	340a      	addmi	r4, #10
 80062ca:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062cc:	f7ff ff63 	bl	8006196 <RTC_ByteToBcd2>
 80062d0:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062d2:	7848      	ldrb	r0, [r1, #1]
 80062d4:	f7ff ff5f 	bl	8006196 <RTC_ByteToBcd2>
 80062d8:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062da:	4638      	mov	r0, r7
 80062dc:	f7ff ff5b 	bl	8006196 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062e0:	ea40 0306 	orr.w	r3, r0, r6
 80062e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80062e8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 80062ec:	e7cd      	b.n	800628a <HAL_RTC_SetDate+0x2a>

080062ee <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80062ee:	0903      	lsrs	r3, r0, #4
 80062f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80062f4:	f000 000f 	and.w	r0, r0, #15
 80062f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80062fc:	b2c0      	uxtb	r0, r0
 80062fe:	4770      	bx	lr

08006300 <HAL_RTC_GetTime>:
{
 8006300:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006302:	6803      	ldr	r3, [r0, #0]
 8006304:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006306:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006308:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800630a:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800630c:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006310:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006314:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006318:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800631a:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800631e:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006322:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006324:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006326:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006328:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800632a:	b952      	cbnz	r2, 8006342 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800632c:	f7ff ffdf 	bl	80062ee <RTC_Bcd2ToByte>
 8006330:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006332:	4628      	mov	r0, r5
 8006334:	f7ff ffdb 	bl	80062ee <RTC_Bcd2ToByte>
 8006338:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff ffd7 	bl	80062ee <RTC_Bcd2ToByte>
 8006340:	7088      	strb	r0, [r1, #2]
}
 8006342:	2000      	movs	r0, #0
 8006344:	bd38      	pop	{r3, r4, r5, pc}

08006346 <HAL_RTC_GetDate>:
{
 8006346:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800634c:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006350:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006354:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006358:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800635c:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800635e:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006360:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006362:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006364:	b952      	cbnz	r2, 800637c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006366:	f7ff ffc2 	bl	80062ee <RTC_Bcd2ToByte>
 800636a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800636c:	4628      	mov	r0, r5
 800636e:	f7ff ffbe 	bl	80062ee <RTC_Bcd2ToByte>
 8006372:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff ffba 	bl	80062ee <RTC_Bcd2ToByte>
 800637a:	7088      	strb	r0, [r1, #2]
}
 800637c:	2000      	movs	r0, #0
 800637e:	bd38      	pop	{r3, r4, r5, pc}

08006380 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006382:	460e      	mov	r6, r1
 8006384:	4614      	mov	r4, r2
 8006386:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006388:	f7fe fa9a 	bl	80048c0 <HAL_GetTick>
 800638c:	4434      	add	r4, r6
 800638e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006390:	f7fe fa96 	bl	80048c0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006394:	4b22      	ldr	r3, [pc, #136]	@ (8006420 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800639c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800639e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063a0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063a2:	682a      	ldr	r2, [r5, #0]
 80063a4:	6890      	ldr	r0, [r2, #8]
 80063a6:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 80063aa:	d02d      	beq.n	8006408 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063ac:	1c73      	adds	r3, r6, #1
 80063ae:	d0f9      	beq.n	80063a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b0:	f7fe fa86 	bl	80048c0 <HAL_GetTick>
 80063b4:	1bc0      	subs	r0, r0, r7
 80063b6:	42a0      	cmp	r0, r4
 80063b8:	d328      	bcc.n	800640c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c4:	686a      	ldr	r2, [r5, #4]
 80063c6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80063ca:	d10a      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 80063cc:	68aa      	ldr	r2, [r5, #8]
 80063ce:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80063d2:	d002      	beq.n	80063da <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063d4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80063d8:	d103      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80063e4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80063e8:	d107      	bne.n	80063fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006400:	2300      	movs	r3, #0
 8006402:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006406:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006408:	b003      	add	sp, #12
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 800640c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800640e:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006410:	2a00      	cmp	r2, #0
      count--;
 8006412:	f103 33ff 	add.w	r3, r3, #4294967295
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	bf08      	it	eq
 800641a:	4614      	moveq	r4, r2
 800641c:	e7c1      	b.n	80063a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 800641e:	bf00      	nop
 8006420:	2000000c 	.word	0x2000000c

08006424 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006428:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800642a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800642c:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800642e:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006432:	4605      	mov	r5, r0
 8006434:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006436:	f7fe fa43 	bl	80048c0 <HAL_GetTick>
 800643a:	443c      	add	r4, r7
 800643c:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800643e:	f7fe fa3f 	bl	80048c0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006442:	4b29      	ldr	r3, [pc, #164]	@ (80064e8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006444:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2223      	movs	r2, #35	@ 0x23
 800644c:	4353      	muls	r3, r2
 800644e:	0d1b      	lsrs	r3, r3, #20
 8006450:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006452:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006454:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006456:	682a      	ldr	r2, [r5, #0]
 8006458:	6890      	ldr	r0, [r2, #8]
 800645a:	4030      	ands	r0, r6
 800645c:	d038      	beq.n	80064d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800645e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006462:	bf01      	itttt	eq
 8006464:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006468:	b2db      	uxtbeq	r3, r3
 800646a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800646e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006472:	1c7b      	adds	r3, r7, #1
 8006474:	d0f0      	beq.n	8006458 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006476:	f7fe fa23 	bl	80048c0 <HAL_GetTick>
 800647a:	eba0 0008 	sub.w	r0, r0, r8
 800647e:	42a0      	cmp	r0, r4
 8006480:	d329      	bcc.n	80064d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800648a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648c:	686a      	ldr	r2, [r5, #4]
 800648e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006492:	d10a      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006494:	68aa      	ldr	r2, [r5, #8]
 8006496:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800649a:	d002      	beq.n	80064a2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800649c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80064a0:	d103      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064aa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80064ac:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80064b0:	d107      	bne.n	80064c2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c8:	2300      	movs	r3, #0
 80064ca:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80064ce:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80064d0:	b003      	add	sp, #12
 80064d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80064d6:	9a01      	ldr	r2, [sp, #4]
      count--;
 80064d8:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80064da:	2a00      	cmp	r2, #0
      count--;
 80064dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	bf08      	it	eq
 80064e4:	4614      	moveq	r4, r2
 80064e6:	e7b6      	b.n	8006456 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80064e8:	2000000c 	.word	0x2000000c

080064ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ee:	6843      	ldr	r3, [r0, #4]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80064f4:	4604      	mov	r4, r0
 80064f6:	460e      	mov	r6, r1
 80064f8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fa:	d10b      	bne.n	8006514 <SPI_EndRxTransaction+0x28>
 80064fc:	6883      	ldr	r3, [r0, #8]
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d002      	beq.n	800650a <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006508:	d104      	bne.n	8006514 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006512:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006514:	463a      	mov	r2, r7
 8006516:	4631      	mov	r1, r6
 8006518:	4620      	mov	r0, r4
 800651a:	f7ff ff31 	bl	8006380 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800651e:	4605      	mov	r5, r0
 8006520:	b128      	cbz	r0, 800652e <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006522:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800652a:	2503      	movs	r5, #3
 800652c:	e013      	b.n	8006556 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006534:	d10f      	bne.n	8006556 <SPI_EndRxTransaction+0x6a>
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800653c:	d002      	beq.n	8006544 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006542:	d108      	bne.n	8006556 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006544:	463b      	mov	r3, r7
 8006546:	4632      	mov	r2, r6
 8006548:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff ff69 	bl	8006424 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006552:	2800      	cmp	r0, #0
 8006554:	d1e5      	bne.n	8006522 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8006556:	4628      	mov	r0, r5
 8006558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800655a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800655a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800655c:	4613      	mov	r3, r2
{
 800655e:	460d      	mov	r5, r1
 8006560:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006562:	460a      	mov	r2, r1
 8006564:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006568:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800656a:	f7ff ff5b 	bl	8006424 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800656e:	b128      	cbz	r0, 800657c <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006570:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006572:	f043 0320 	orr.w	r3, r3, #32
 8006576:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006578:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800657a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	4632      	mov	r2, r6
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
 8006582:	f7ff fefd 	bl	8006380 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006586:	2800      	cmp	r0, #0
 8006588:	d1f2      	bne.n	8006570 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800658a:	4633      	mov	r3, r6
 800658c:	462a      	mov	r2, r5
 800658e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006592:	4620      	mov	r0, r4
 8006594:	f7ff ff46 	bl	8006424 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006598:	2800      	cmp	r0, #0
 800659a:	d0ee      	beq.n	800657a <SPI_EndRxTxTransaction+0x20>
 800659c:	e7e8      	b.n	8006570 <SPI_EndRxTxTransaction+0x16>

0800659e <HAL_SPI_Init>:
{
 800659e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80065a0:	4604      	mov	r4, r0
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d067      	beq.n	8006676 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d15d      	bne.n	8006668 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ac:	6842      	ldr	r2, [r0, #4]
 80065ae:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80065b2:	d000      	beq.n	80065b6 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065b4:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ba:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80065be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80065c2:	b923      	cbnz	r3, 80065ce <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80065c4:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7fd ff01 	bl	80043d0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80065ce:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d0:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80065d8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065da:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80065de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	d942      	bls.n	8006670 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80065ea:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80065ec:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065f0:	bf18      	it	ne
 80065f2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065f4:	68a6      	ldr	r6, [r4, #8]
 80065f6:	6863      	ldr	r3, [r4, #4]
 80065f8:	69a1      	ldr	r1, [r4, #24]
 80065fa:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80065fe:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006602:	4333      	orrs	r3, r6
 8006604:	6926      	ldr	r6, [r4, #16]
 8006606:	f006 0602 	and.w	r6, r6, #2
 800660a:	4333      	orrs	r3, r6
 800660c:	6966      	ldr	r6, [r4, #20]
 800660e:	f006 0601 	and.w	r6, r6, #1
 8006612:	4333      	orrs	r3, r6
 8006614:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8006618:	4333      	orrs	r3, r6
 800661a:	69e6      	ldr	r6, [r4, #28]
 800661c:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8006620:	4333      	orrs	r3, r6
 8006622:	6a26      	ldr	r6, [r4, #32]
 8006624:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8006628:	4333      	orrs	r3, r6
 800662a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800662c:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8006630:	4333      	orrs	r3, r6
 8006632:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006634:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8006636:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006638:	f006 0608 	and.w	r6, r6, #8
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8006644:	4333      	orrs	r3, r6
 8006646:	0c09      	lsrs	r1, r1, #16
 8006648:	4303      	orrs	r3, r0
 800664a:	f001 0104 	and.w	r1, r1, #4
 800664e:	430b      	orrs	r3, r1
 8006650:	432b      	orrs	r3, r5
 8006652:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006654:	69d3      	ldr	r3, [r2, #28]
 8006656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800665a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800665c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800665e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006660:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006662:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006666:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006668:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800666a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800666e:	e7a2      	b.n	80065b6 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006670:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006674:	e7bc      	b.n	80065f0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006676:	2001      	movs	r0, #1
 8006678:	e7f5      	b.n	8006666 <HAL_SPI_Init+0xc8>

0800667a <HAL_SPI_Transmit>:
{
 800667a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800667e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006680:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006684:	2b01      	cmp	r3, #1
{
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800668c:	f000 80bc 	beq.w	8006808 <HAL_SPI_Transmit+0x18e>
 8006690:	2301      	movs	r3, #1
 8006692:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006696:	f7fe f913 	bl	80048c0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800669a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800669e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80066a0:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80066a2:	fa5f f983 	uxtb.w	r9, r3
 80066a6:	f040 80ac 	bne.w	8006802 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	d069      	beq.n	8006782 <HAL_SPI_Transmit+0x108>
 80066ae:	f1b8 0f00 	cmp.w	r8, #0
 80066b2:	d066      	beq.n	8006782 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066b4:	2303      	movs	r3, #3
 80066b6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80066be:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80066c2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066c6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80066c8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80066cc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80066d2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066d4:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80066da:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066de:	d107      	bne.n	80066f0 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80066e0:	6833      	ldr	r3, [r6, #0]
 80066e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ee:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f0:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f2:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80066f6:	bf5e      	ittt	pl
 80066f8:	6833      	ldrpl	r3, [r6, #0]
 80066fa:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80066fe:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006700:	68e3      	ldr	r3, [r4, #12]
 8006702:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006706:	d943      	bls.n	8006790 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006708:	b112      	cbz	r2, 8006710 <HAL_SPI_Transmit+0x96>
 800670a:	f1b8 0f01 	cmp.w	r8, #1
 800670e:	d107      	bne.n	8006720 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006710:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006714:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006716:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006718:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800671a:	3b01      	subs	r3, #1
 800671c:	b29b      	uxth	r3, r3
 800671e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006720:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	b9b3      	cbnz	r3, 8006754 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006726:	4652      	mov	r2, sl
 8006728:	4639      	mov	r1, r7
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff ff15 	bl	800655a <SPI_EndRxTxTransaction>
 8006730:	2800      	cmp	r0, #0
 8006732:	d163      	bne.n	80067fc <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006734:	68a3      	ldr	r3, [r4, #8]
 8006736:	b933      	cbnz	r3, 8006746 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	9201      	str	r2, [sp, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006746:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006748:	b9db      	cbnz	r3, 8006782 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800674a:	2201      	movs	r2, #1
 800674c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006750:	4699      	mov	r9, r3
 8006752:	e016      	b.n	8006782 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	6893      	ldr	r3, [r2, #8]
 8006758:	079d      	lsls	r5, r3, #30
 800675a:	d505      	bpl.n	8006768 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800675e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006762:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006766:	e7d7      	b.n	8006718 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006768:	f7fe f8aa 	bl	80048c0 <HAL_GetTick>
 800676c:	eba0 000a 	sub.w	r0, r0, sl
 8006770:	42b8      	cmp	r0, r7
 8006772:	d3d5      	bcc.n	8006720 <HAL_SPI_Transmit+0xa6>
 8006774:	1c78      	adds	r0, r7, #1
 8006776:	d0d3      	beq.n	8006720 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006778:	2301      	movs	r3, #1
 800677a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800677e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006782:	2300      	movs	r3, #0
 8006784:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006788:	4648      	mov	r0, r9
 800678a:	b002      	add	sp, #8
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006790:	b112      	cbz	r2, 8006798 <HAL_SPI_Transmit+0x11e>
 8006792:	f1b8 0f01 	cmp.w	r8, #1
 8006796:	d113      	bne.n	80067c0 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006798:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	d906      	bls.n	80067ae <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067a0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80067a4:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a6:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80067a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067aa:	3b02      	subs	r3, #2
 80067ac:	e006      	b.n	80067bc <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ae:	782b      	ldrb	r3, [r5, #0]
 80067b0:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80067b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067b4:	3301      	adds	r3, #1
 80067b6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80067b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29b      	uxth	r3, r3
 80067be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80067c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0ae      	beq.n	8006726 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067c8:	6822      	ldr	r2, [r4, #0]
 80067ca:	6893      	ldr	r3, [r2, #8]
 80067cc:	0799      	lsls	r1, r3, #30
 80067ce:	d50c      	bpl.n	80067ea <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80067d0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80067d4:	b289      	uxth	r1, r1
 80067d6:	2901      	cmp	r1, #1
 80067d8:	d904      	bls.n	80067e4 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067da:	f833 1b02 	ldrh.w	r1, [r3], #2
 80067de:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80067e2:	e7e1      	b.n	80067a8 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80067e8:	e7e3      	b.n	80067b2 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ea:	f7fe f869 	bl	80048c0 <HAL_GetTick>
 80067ee:	eba0 000a 	sub.w	r0, r0, sl
 80067f2:	42b8      	cmp	r0, r7
 80067f4:	d3e4      	bcc.n	80067c0 <HAL_SPI_Transmit+0x146>
 80067f6:	1c7b      	adds	r3, r7, #1
 80067f8:	d0e2      	beq.n	80067c0 <HAL_SPI_Transmit+0x146>
 80067fa:	e7bd      	b.n	8006778 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067fc:	2320      	movs	r3, #32
 80067fe:	6623      	str	r3, [r4, #96]	@ 0x60
 8006800:	e798      	b.n	8006734 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8006802:	f04f 0902 	mov.w	r9, #2
 8006806:	e7bc      	b.n	8006782 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8006808:	f04f 0902 	mov.w	r9, #2
 800680c:	e7bc      	b.n	8006788 <HAL_SPI_Transmit+0x10e>

0800680e <HAL_SPI_TransmitReceive>:
{
 800680e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006812:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006814:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8006818:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800681a:	2b01      	cmp	r3, #1
{
 800681c:	4604      	mov	r4, r0
 800681e:	460d      	mov	r5, r1
 8006820:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006822:	f000 8122 	beq.w	8006a6a <HAL_SPI_TransmitReceive+0x25c>
 8006826:	2301      	movs	r3, #1
 8006828:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800682c:	f7fe f848 	bl	80048c0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006830:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006834:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006836:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8006838:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800683a:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800683c:	d00a      	beq.n	8006854 <HAL_SPI_TransmitReceive+0x46>
 800683e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006842:	f040 8110 	bne.w	8006a66 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006846:	68a2      	ldr	r2, [r4, #8]
 8006848:	2a00      	cmp	r2, #0
 800684a:	f040 810c 	bne.w	8006a66 <HAL_SPI_TransmitReceive+0x258>
 800684e:	2904      	cmp	r1, #4
 8006850:	f040 8109 	bne.w	8006a66 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006854:	b92d      	cbnz	r5, 8006862 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8006856:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006858:	2300      	movs	r3, #0
 800685a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	d0f6      	beq.n	8006856 <HAL_SPI_TransmitReceive+0x48>
 8006868:	2e00      	cmp	r6, #0
 800686a:	d0f4      	beq.n	8006856 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800686c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006870:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006872:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006874:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006878:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800687a:	bf1c      	itt	ne
 800687c:	2205      	movne	r2, #5
 800687e:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	2200      	movs	r2, #0
 8006884:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006886:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800688a:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800688e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006890:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8006894:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006898:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800689a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800689c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800689e:	d801      	bhi.n	80068a4 <HAL_SPI_TransmitReceive+0x96>
 80068a0:	2e01      	cmp	r6, #1
 80068a2:	d02e      	beq.n	8006902 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a8:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068aa:	680a      	ldr	r2, [r1, #0]
 80068ac:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80068ae:	bf5e      	ittt	pl
 80068b0:	680a      	ldrpl	r2, [r1, #0]
 80068b2:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80068b6:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b8:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 80068bc:	d957      	bls.n	800696e <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068be:	b10b      	cbz	r3, 80068c4 <HAL_SPI_TransmitReceive+0xb6>
 80068c0:	2e01      	cmp	r6, #1
 80068c2:	d107      	bne.n	80068d4 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80068c8:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80068ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068cc:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80068d4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	b9ab      	cbnz	r3, 8006908 <HAL_SPI_TransmitReceive+0xfa>
 80068dc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	b98b      	cbnz	r3, 8006908 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068e4:	4642      	mov	r2, r8
 80068e6:	4639      	mov	r1, r7
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff fe36 	bl	800655a <SPI_EndRxTxTransaction>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f040 80b5 	bne.w	8006a5e <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1ad      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8006900:	e7aa      	b.n	8006858 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006902:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006906:	e7cf      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006908:	6821      	ldr	r1, [r4, #0]
 800690a:	688b      	ldr	r3, [r1, #8]
 800690c:	079e      	lsls	r6, r3, #30
 800690e:	d50d      	bpl.n	800692c <HAL_SPI_TransmitReceive+0x11e>
 8006910:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	b153      	cbz	r3, 800692c <HAL_SPI_TransmitReceive+0x11e>
 8006916:	b145      	cbz	r5, 800692a <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006918:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800691a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800691e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006922:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006924:	3b01      	subs	r3, #1
 8006926:	b29b      	uxth	r3, r3
 8006928:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800692a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800692c:	688a      	ldr	r2, [r1, #8]
 800692e:	f012 0201 	ands.w	r2, r2, #1
 8006932:	d00f      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x146>
 8006934:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006938:	b29b      	uxth	r3, r3
 800693a:	b15b      	cbz	r3, 8006954 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800693c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800693e:	68c9      	ldr	r1, [r1, #12]
 8006940:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006944:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006946:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800694a:	3b01      	subs	r3, #1
 800694c:	b29b      	uxth	r3, r3
 800694e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006952:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006954:	f7fd ffb4 	bl	80048c0 <HAL_GetTick>
 8006958:	eba0 0008 	sub.w	r0, r0, r8
 800695c:	42b8      	cmp	r0, r7
 800695e:	d3ba      	bcc.n	80068d6 <HAL_SPI_TransmitReceive+0xc8>
 8006960:	1c78      	adds	r0, r7, #1
 8006962:	d0b8      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8006964:	2301      	movs	r3, #1
 8006966:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800696a:	2003      	movs	r0, #3
 800696c:	e774      	b.n	8006858 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696e:	b10b      	cbz	r3, 8006974 <HAL_SPI_TransmitReceive+0x166>
 8006970:	2e01      	cmp	r6, #1
 8006972:	d10b      	bne.n	800698c <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8006974:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d909      	bls.n	8006990 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006980:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8006982:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006984:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006986:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006988:	b29b      	uxth	r3, r3
 800698a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800698c:	2501      	movs	r5, #1
 800698e:	e048      	b.n	8006a22 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006990:	782b      	ldrb	r3, [r5, #0]
 8006992:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8006994:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006996:	3301      	adds	r3, #1
 8006998:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800699a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800699c:	3b01      	subs	r3, #1
 800699e:	e7f3      	b.n	8006988 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	6893      	ldr	r3, [r2, #8]
 80069a4:	0799      	lsls	r1, r3, #30
 80069a6:	d511      	bpl.n	80069cc <HAL_SPI_TransmitReceive+0x1be>
 80069a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	b173      	cbz	r3, 80069cc <HAL_SPI_TransmitReceive+0x1be>
 80069ae:	b165      	cbz	r5, 80069ca <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80069b0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80069b4:	b289      	uxth	r1, r1
 80069b6:	2901      	cmp	r1, #1
 80069b8:	d93d      	bls.n	8006a36 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80069be:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80069c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80069c4:	3b02      	subs	r3, #2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80069ca:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	6891      	ldr	r1, [r2, #8]
 80069d0:	f011 0101 	ands.w	r1, r1, #1
 80069d4:	d01d      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0x204>
 80069d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b1cb      	cbz	r3, 8006a12 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80069de:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80069e4:	b280      	uxth	r0, r0
 80069e6:	2801      	cmp	r0, #1
 80069e8:	d92d      	bls.n	8006a46 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ea:	68d0      	ldr	r0, [r2, #12]
 80069ec:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f0:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80069f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80069f6:	3b02      	subs	r3, #2
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80069fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a06:	bf9e      	ittt	ls
 8006a08:	6853      	ldrls	r3, [r2, #4]
 8006a0a:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8006a0e:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8006a10:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a12:	f7fd ff55 	bl	80048c0 <HAL_GetTick>
 8006a16:	eba0 0008 	sub.w	r0, r0, r8
 8006a1a:	42b8      	cmp	r0, r7
 8006a1c:	d301      	bcc.n	8006a22 <HAL_SPI_TransmitReceive+0x214>
 8006a1e:	1c7b      	adds	r3, r7, #1
 8006a20:	d1a0      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a22:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ba      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x192>
 8006a2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1b5      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x192>
 8006a34:	e756      	b.n	80068e4 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006a3a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a40:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006a42:	3b01      	subs	r3, #1
 8006a44:	e7bf      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a46:	7b12      	ldrb	r2, [r2, #12]
 8006a48:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006a50:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006a5c:	e7d8      	b.n	8006a10 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a5e:	2320      	movs	r3, #32
 8006a60:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006a62:	2001      	movs	r0, #1
 8006a64:	e746      	b.n	80068f4 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8006a66:	2002      	movs	r0, #2
 8006a68:	e6f6      	b.n	8006858 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8006a6a:	2002      	movs	r0, #2
 8006a6c:	e6f7      	b.n	800685e <HAL_SPI_TransmitReceive+0x50>

08006a6e <HAL_SPI_Receive>:
{
 8006a6e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a72:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a74:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8006a78:	2b01      	cmp	r3, #1
{
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	468a      	mov	sl, r1
 8006a7e:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a80:	b2de      	uxtb	r6, r3
 8006a82:	f040 80a7 	bne.w	8006bd4 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a86:	6843      	ldr	r3, [r0, #4]
 8006a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a8c:	d10e      	bne.n	8006aac <HAL_SPI_Receive+0x3e>
 8006a8e:	6883      	ldr	r3, [r0, #8]
 8006a90:	b963      	cbnz	r3, 8006aac <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a92:	2304      	movs	r3, #4
 8006a94:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a98:	4613      	mov	r3, r2
 8006a9a:	9700      	str	r7, [sp, #0]
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	f7ff feb6 	bl	800680e <HAL_SPI_TransmitReceive>
 8006aa2:	4606      	mov	r6, r0
}
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	b002      	add	sp, #8
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8006aac:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	f000 8091 	beq.w	8006bd8 <HAL_SPI_Receive+0x16a>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006abc:	f7fd ff00 	bl	80048c0 <HAL_GetTick>
 8006ac0:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8006ac2:	f1ba 0f00 	cmp.w	sl, #0
 8006ac6:	d075      	beq.n	8006bb4 <HAL_SPI_Receive+0x146>
 8006ac8:	f1b8 0f00 	cmp.w	r8, #0
 8006acc:	d072      	beq.n	8006bb4 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ace:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8006ad6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ada:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006adc:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006ade:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8006ae2:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006ae4:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ae6:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae8:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aea:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006aec:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af0:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006af4:	bf8c      	ite	hi
 8006af6:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006afa:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8006afe:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b02:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b0a:	d107      	bne.n	8006b1c <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b12:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b1a:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006b20:	bf5e      	ittt	pl
 8006b22:	682b      	ldrpl	r3, [r5, #0]
 8006b24:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006b28:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b2a:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8006b2e:	d923      	bls.n	8006b78 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8006b30:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	b323      	cbz	r3, 8006b82 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	07d2      	lsls	r2, r2, #31
 8006b3e:	d53d      	bpl.n	8006bbc <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b44:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b48:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b4a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006b56:	e7eb      	b.n	8006b30 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	07d0      	lsls	r0, r2, #31
 8006b5e:	d51d      	bpl.n	8006b9c <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b60:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b68:	3301      	adds	r3, #1
 8006b6a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b6c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8006b78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ea      	bne.n	8006b58 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b82:	464a      	mov	r2, r9
 8006b84:	4639      	mov	r1, r7
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fcb0 	bl	80064ec <SPI_EndRxTransaction>
 8006b8c:	b9f8      	cbnz	r0, 8006bce <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006b90:	b983      	cbnz	r3, 8006bb4 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8006b92:	2201      	movs	r2, #1
 8006b94:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b98:	461e      	mov	r6, r3
 8006b9a:	e00b      	b.n	8006bb4 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b9c:	f7fd fe90 	bl	80048c0 <HAL_GetTick>
 8006ba0:	eba0 0009 	sub.w	r0, r0, r9
 8006ba4:	42b8      	cmp	r0, r7
 8006ba6:	d3e7      	bcc.n	8006b78 <HAL_SPI_Receive+0x10a>
 8006ba8:	1c79      	adds	r1, r7, #1
 8006baa:	d0e5      	beq.n	8006b78 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006bb2:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8006bba:	e773      	b.n	8006aa4 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bbc:	f7fd fe80 	bl	80048c0 <HAL_GetTick>
 8006bc0:	eba0 0009 	sub.w	r0, r0, r9
 8006bc4:	42b8      	cmp	r0, r7
 8006bc6:	d3b3      	bcc.n	8006b30 <HAL_SPI_Receive+0xc2>
 8006bc8:	1c7b      	adds	r3, r7, #1
 8006bca:	d0b1      	beq.n	8006b30 <HAL_SPI_Receive+0xc2>
 8006bcc:	e7ee      	b.n	8006bac <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bce:	2320      	movs	r3, #32
 8006bd0:	6623      	str	r3, [r4, #96]	@ 0x60
 8006bd2:	e7dc      	b.n	8006b8e <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8006bd4:	2602      	movs	r6, #2
 8006bd6:	e7ed      	b.n	8006bb4 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8006bd8:	2602      	movs	r6, #2
 8006bda:	e763      	b.n	8006aa4 <HAL_SPI_Receive+0x36>

08006bdc <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bdc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d127      	bne.n	8006c34 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be6:	4a14      	ldr	r2, [pc, #80]	@ (8006c38 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bec:	6803      	ldr	r3, [r0, #0]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d012      	beq.n	8006c18 <HAL_TIM_Base_Start+0x3c>
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <HAL_TIM_Base_Start+0x3c>
 8006bf8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <HAL_TIM_Base_Start+0x3c>
 8006c00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <HAL_TIM_Base_Start+0x3c>
 8006c08:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_Base_Start+0x3c>
 8006c10:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d107      	bne.n	8006c28 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c18:	6899      	ldr	r1, [r3, #8]
 8006c1a:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <HAL_TIM_Base_Start+0x60>)
 8006c1c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	2a06      	cmp	r2, #6
 8006c20:	d006      	beq.n	8006c30 <HAL_TIM_Base_Start+0x54>
 8006c22:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006c26:	d003      	beq.n	8006c30 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006c30:	2000      	movs	r0, #0
 8006c32:	4770      	bx	lr
    return HAL_ERROR;
 8006c34:	2001      	movs	r0, #1
}
 8006c36:	4770      	bx	lr
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	00010007 	.word	0x00010007

08006c40 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c40:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d12b      	bne.n	8006ca0 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c4e:	6803      	ldr	r3, [r0, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c58:	4a12      	ldr	r2, [pc, #72]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0x64>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d012      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x44>
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c62:	d00f      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x44>
 8006c64:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x44>
 8006c6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x44>
 8006c74:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x44>
 8006c7c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c84:	6899      	ldr	r1, [r3, #8]
 8006c86:	4a08      	ldr	r2, [pc, #32]	@ (8006ca8 <HAL_TIM_Base_Start_IT+0x68>)
 8006c88:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	2a06      	cmp	r2, #6
 8006c8c:	d006      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x5c>
 8006c8e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006c92:	d003      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4770      	bx	lr
    return HAL_ERROR;
 8006ca0:	2001      	movs	r0, #1
}
 8006ca2:	4770      	bx	lr
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	00010007 	.word	0x00010007

08006cac <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006cac:	4770      	bx	lr

08006cae <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006cb4:	6803      	ldr	r3, [r0, #0]
{
 8006cb6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006cb8:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cba:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cbc:	07b2      	lsls	r2, r6, #30
{
 8006cbe:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cc0:	d50d      	bpl.n	8006cde <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cc2:	07a9      	lsls	r1, r5, #30
 8006cc4:	d50b      	bpl.n	8006cde <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cc6:	f06f 0202 	mvn.w	r2, #2
 8006cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ccc:	2201      	movs	r2, #1
 8006cce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	079a      	lsls	r2, r3, #30
 8006cd4:	d074      	beq.n	8006dc0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	f7ff ffea 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cde:	0773      	lsls	r3, r6, #29
 8006ce0:	d510      	bpl.n	8006d04 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ce2:	0768      	lsls	r0, r5, #29
 8006ce4:	d50e      	bpl.n	8006d04 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f06f 0204 	mvn.w	r2, #4
 8006cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cee:	2202      	movs	r2, #2
 8006cf0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfa:	d067      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfc:	f7ff ffd7 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d00:	2300      	movs	r3, #0
 8006d02:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d04:	0731      	lsls	r1, r6, #28
 8006d06:	d50f      	bpl.n	8006d28 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d08:	072a      	lsls	r2, r5, #28
 8006d0a:	d50d      	bpl.n	8006d28 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	f06f 0208 	mvn.w	r2, #8
 8006d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d14:	2204      	movs	r2, #4
 8006d16:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d1e:	d05b      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d20:	f7ff ffc5 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d24:	2300      	movs	r3, #0
 8006d26:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d28:	06f0      	lsls	r0, r6, #27
 8006d2a:	d510      	bpl.n	8006d4e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d2c:	06e9      	lsls	r1, r5, #27
 8006d2e:	d50e      	bpl.n	8006d4e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f06f 0210 	mvn.w	r2, #16
 8006d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d38:	2208      	movs	r2, #8
 8006d3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d44:	d04e      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	f7ff ffb2 	bl	8006cae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d4e:	07f2      	lsls	r2, r6, #31
 8006d50:	d508      	bpl.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d52:	07eb      	lsls	r3, r5, #31
 8006d54:	d506      	bpl.n	8006d64 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	f06f 0201 	mvn.w	r2, #1
 8006d5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7fc fb50 	bl	8003404 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d64:	0630      	lsls	r0, r6, #24
 8006d66:	d508      	bpl.n	8006d7a <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d68:	0629      	lsls	r1, r5, #24
 8006d6a:	d506      	bpl.n	8006d7a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f9b8 	bl	80070ea <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d7a:	05f2      	lsls	r2, r6, #23
 8006d7c:	d508      	bpl.n	8006d90 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d7e:	062b      	lsls	r3, r5, #24
 8006d80:	d506      	bpl.n	8006d90 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f9ae 	bl	80070ec <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d90:	0670      	lsls	r0, r6, #25
 8006d92:	d508      	bpl.n	8006da6 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d94:	0669      	lsls	r1, r5, #25
 8006d96:	d506      	bpl.n	8006da6 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7ff ff86 	bl	8006cb2 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006da6:	06b2      	lsls	r2, r6, #26
 8006da8:	d522      	bpl.n	8006df0 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006daa:	06ab      	lsls	r3, r5, #26
 8006dac:	d520      	bpl.n	8006df0 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006db4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006db6:	611a      	str	r2, [r3, #16]
}
 8006db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006dbc:	f000 b994 	b.w	80070e8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc0:	f7ff ff74 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7ff ff73 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dca:	e786      	b.n	8006cda <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dcc:	f7ff ff6e 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f7ff ff6d 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dd6:	e793      	b.n	8006d00 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	f7ff ff68 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ff67 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006de2:	e79f      	b.n	8006d24 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de4:	f7ff ff62 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ff61 	bl	8006cb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006dee:	e7ac      	b.n	8006d4a <HAL_TIM_IRQHandler+0x96>
}
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006df4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df4:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb4 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8006df6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df8:	4290      	cmp	r0, r2
 8006dfa:	d00e      	beq.n	8006e1a <TIM_Base_SetConfig+0x26>
 8006dfc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006e00:	d00b      	beq.n	8006e1a <TIM_Base_SetConfig+0x26>
 8006e02:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006e06:	4290      	cmp	r0, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_Base_SetConfig+0x26>
 8006e0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e0e:	4290      	cmp	r0, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0x26>
 8006e12:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006e16:	4290      	cmp	r0, r2
 8006e18:	d115      	bne.n	8006e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006e1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e20:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e22:	4a24      	ldr	r2, [pc, #144]	@ (8006eb4 <TIM_Base_SetConfig+0xc0>)
 8006e24:	4290      	cmp	r0, r2
 8006e26:	d019      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e28:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006e2c:	d016      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e2e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006e32:	4290      	cmp	r0, r2
 8006e34:	d012      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e3a:	4290      	cmp	r0, r2
 8006e3c:	d00e      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e3e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006e42:	4290      	cmp	r0, r2
 8006e44:	d00a      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e46:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb8 <TIM_Base_SetConfig+0xc4>)
 8006e48:	4290      	cmp	r0, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e50:	4290      	cmp	r0, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_Base_SetConfig+0x68>
 8006e54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e58:	4290      	cmp	r0, r2
 8006e5a:	d103      	bne.n	8006e64 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e62:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e64:	694a      	ldr	r2, [r1, #20]
 8006e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e6a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006e6c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e6e:	688b      	ldr	r3, [r1, #8]
 8006e70:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e72:	680b      	ldr	r3, [r1, #0]
 8006e74:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e76:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <TIM_Base_SetConfig+0xc0>)
 8006e78:	4298      	cmp	r0, r3
 8006e7a:	d00f      	beq.n	8006e9c <TIM_Base_SetConfig+0xa8>
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e80:	4298      	cmp	r0, r3
 8006e82:	d00b      	beq.n	8006e9c <TIM_Base_SetConfig+0xa8>
 8006e84:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006e88:	4298      	cmp	r0, r3
 8006e8a:	d007      	beq.n	8006e9c <TIM_Base_SetConfig+0xa8>
 8006e8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e90:	4298      	cmp	r0, r3
 8006e92:	d003      	beq.n	8006e9c <TIM_Base_SetConfig+0xa8>
 8006e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	d101      	bne.n	8006ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e9c:	690b      	ldr	r3, [r1, #16]
 8006e9e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ea4:	6903      	ldr	r3, [r0, #16]
 8006ea6:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ea8:	bf42      	ittt	mi
 8006eaa:	6903      	ldrmi	r3, [r0, #16]
 8006eac:	f023 0301 	bicmi.w	r3, r3, #1
 8006eb0:	6103      	strmi	r3, [r0, #16]
  }
}
 8006eb2:	4770      	bx	lr
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40014000 	.word	0x40014000

08006ebc <HAL_TIM_Base_Init>:
{
 8006ebc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	b350      	cbz	r0, 8006f18 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006ec6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006eca:	b91b      	cbnz	r3, 8006ed4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006ecc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006ed0:	f7fd face 	bl	8004470 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006edc:	1d21      	adds	r1, r4, #4
 8006ede:	f7ff ff89 	bl	8006df4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8006ee8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006eee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006ef2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006ef6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006efa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006f06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006f0a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006f0e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006f12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006f16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e7fc      	b.n	8006f16 <HAL_TIM_Base_Init+0x5a>

08006f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f1e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f20:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f22:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f26:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006f2a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2c:	6082      	str	r2, [r0, #8]
}
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <HAL_TIM_ConfigClockSource>:
{
 8006f30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006f32:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006f36:	2b01      	cmp	r3, #1
{
 8006f38:	4604      	mov	r4, r0
 8006f3a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006f3e:	f000 808c 	beq.w	800705a <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f42:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006f46:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006f4a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006f4e:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f50:	4b43      	ldr	r3, [pc, #268]	@ (8007060 <HAL_TIM_ConfigClockSource+0x130>)
 8006f52:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006f54:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006f56:	680b      	ldr	r3, [r1, #0]
 8006f58:	2b60      	cmp	r3, #96	@ 0x60
 8006f5a:	d04f      	beq.n	8006ffc <HAL_TIM_ConfigClockSource+0xcc>
 8006f5c:	d832      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x94>
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d064      	beq.n	800702c <HAL_TIM_ConfigClockSource+0xfc>
 8006f62:	d816      	bhi.n	8006f92 <HAL_TIM_ConfigClockSource+0x62>
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d00d      	beq.n	8006f84 <HAL_TIM_ConfigClockSource+0x54>
 8006f68:	d80a      	bhi.n	8006f80 <HAL_TIM_ConfigClockSource+0x50>
 8006f6a:	f033 0110 	bics.w	r1, r3, #16
 8006f6e:	d009      	beq.n	8006f84 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006f76:	2300      	movs	r3, #0
 8006f78:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006f80:	2b30      	cmp	r3, #48	@ 0x30
 8006f82:	d1f5      	bne.n	8006f70 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006f84:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006f90:	e028      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006f92:	2b50      	cmp	r3, #80	@ 0x50
 8006f94:	d1ec      	bne.n	8006f70 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8006f96:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f98:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006f9a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9c:	6a03      	ldr	r3, [r0, #32]
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fa6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006fb2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006fb4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006fb6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006fb8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fbe:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006fc2:	e00f      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc8:	d00d      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0xb6>
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fce:	d00c      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0xba>
 8006fd0:	2b70      	cmp	r3, #112	@ 0x70
 8006fd2:	d1cd      	bne.n	8006f70 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd4:	68cb      	ldr	r3, [r1, #12]
 8006fd6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006fda:	f7ff ff9f 	bl	8006f1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fde:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006fe4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	e7c2      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006fea:	68cb      	ldr	r3, [r1, #12]
 8006fec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006ff0:	f7ff ff94 	bl	8006f1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ff4:	6883      	ldr	r3, [r0, #8]
 8006ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ffa:	e7f3      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8006ffc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ffe:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8007000:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007002:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007004:	f022 0210 	bic.w	r2, r2, #16
 8007008:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007010:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007014:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007018:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800701c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800701e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007020:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007026:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800702a:	e7db      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 800702c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800702e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007030:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007032:	6a03      	ldr	r3, [r0, #32]
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007040:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007044:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007048:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800704a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800704c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800704e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007054:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007058:	e7c4      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 800705a:	4602      	mov	r2, r0
 800705c:	e78e      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x4c>
 800705e:	bf00      	nop
 8007060:	fffe0088 	.word	0xfffe0088

08007064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007064:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007066:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800706a:	2b01      	cmp	r3, #1
{
 800706c:	4604      	mov	r4, r0
 800706e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007072:	d032      	beq.n	80070da <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007074:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007076:	4d19      	ldr	r5, [pc, #100]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800707c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800707e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007080:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007082:	d002      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8007084:	4e16      	ldr	r6, [pc, #88]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007086:	42b3      	cmp	r3, r6
 8007088:	d103      	bne.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800708a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800708c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007090:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007092:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007094:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007098:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800709c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709e:	d011      	beq.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a4:	d00e      	beq.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80070a6:	4a0f      	ldr	r2, [pc, #60]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80070ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d007      	beq.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80070b4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80070bc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d104      	bne.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ca:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ce:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80070d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80070d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80070d6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40013400 	.word	0x40013400
 80070e4:	40000400 	.word	0x40000400

080070e8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80070e8:	4770      	bx	lr

080070ea <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80070ea:	4770      	bx	lr

080070ec <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80070ec:	4770      	bx	lr

080070ee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ee:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	e852 3f00 	ldrex	r3, [r2]
 80070f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80070fc:	6802      	ldr	r2, [r0, #0]
 80070fe:	2900      	cmp	r1, #0
 8007100:	d1f5      	bne.n	80070ee <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	f102 0308 	add.w	r3, r2, #8
 8007106:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	f102 0c08 	add.w	ip, r2, #8
 8007112:	e84c 3100 	strex	r1, r3, [ip]
 8007116:	2900      	cmp	r1, #0
 8007118:	d1f3      	bne.n	8007102 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007124:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	e842 3100 	strex	r1, r3, [r2]
 800712c:	2900      	cmp	r1, #0
 800712e:	d1f7      	bne.n	8007120 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007130:	2320      	movs	r3, #32
 8007132:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007136:	2300      	movs	r3, #0
 8007138:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800713a:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800713c:	4770      	bx	lr

0800713e <HAL_UART_Abort>:
{
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007142:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	e852 3f00 	ldrex	r3, [r2]
 8007148:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	2900      	cmp	r1, #0
 8007154:	d1f5      	bne.n	8007142 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	f103 0208 	add.w	r2, r3, #8
 800715a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	f103 0008 	add.w	r0, r3, #8
 8007166:	e840 2100 	strex	r1, r2, [r0]
 800716a:	2900      	cmp	r1, #0
 800716c:	d1f3      	bne.n	8007156 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007170:	2a01      	cmp	r2, #1
 8007172:	d107      	bne.n	8007184 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007178:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	e843 2100 	strex	r1, r2, [r3]
 8007180:	2900      	cmp	r1, #0
 8007182:	d1f7      	bne.n	8007174 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	0612      	lsls	r2, r2, #24
 8007188:	d51b      	bpl.n	80071c2 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718a:	f103 0208 	add.w	r2, r3, #8
 800718e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	f103 0008 	add.w	r0, r3, #8
 800719a:	e840 2100 	strex	r1, r2, [r0]
 800719e:	2900      	cmp	r1, #0
 80071a0:	d1f3      	bne.n	800718a <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 80071a2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80071a4:	b168      	cbz	r0, 80071c2 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 80071a6:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80071a8:	f7fe f9b3 	bl	8005512 <HAL_DMA_Abort>
 80071ac:	b148      	cbz	r0, 80071c2 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80071ae:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80071b0:	f7fe fa14 	bl	80055dc <HAL_DMA_GetError>
 80071b4:	2820      	cmp	r0, #32
 80071b6:	d104      	bne.n	80071c2 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071b8:	2310      	movs	r3, #16
 80071ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80071be:	2003      	movs	r0, #3
}
 80071c0:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	6893      	ldr	r3, [r2, #8]
 80071c6:	065b      	lsls	r3, r3, #25
 80071c8:	d516      	bpl.n	80071f8 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	f102 0308 	add.w	r3, r2, #8
 80071ce:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	f102 0008 	add.w	r0, r2, #8
 80071da:	e840 3100 	strex	r1, r3, [r0]
 80071de:	2900      	cmp	r1, #0
 80071e0:	d1f3      	bne.n	80071ca <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 80071e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80071e4:	b140      	cbz	r0, 80071f8 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 80071e6:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80071e8:	f7fe f993 	bl	8005512 <HAL_DMA_Abort>
 80071ec:	b120      	cbz	r0, 80071f8 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80071ee:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80071f0:	f7fe f9f4 	bl	80055dc <HAL_DMA_GetError>
 80071f4:	2820      	cmp	r0, #32
 80071f6:	d0df      	beq.n	80071b8 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80071f8:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 80071fa:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80071fc:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 80071fe:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007202:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007206:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	f042 0208 	orr.w	r2, r2, #8
 800720e:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8007210:	2320      	movs	r3, #32
 8007212:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007214:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 800721e:	e7cf      	b.n	80071c0 <HAL_UART_Abort+0x82>

08007220 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007220:	4770      	bx	lr

08007222 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8007222:	4770      	bx	lr

08007224 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007224:	4770      	bx	lr

08007226 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007226:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007228:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800722a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800722c:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8007230:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007232:	689c      	ldr	r4, [r3, #8]
 8007234:	0624      	lsls	r4, r4, #24
 8007236:	d50e      	bpl.n	8007256 <UART_DMAError+0x30>
 8007238:	2a21      	cmp	r2, #33	@ 0x21
 800723a:	d10c      	bne.n	8007256 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800723c:	2200      	movs	r2, #0
 800723e:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007246:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	e843 2400 	strex	r4, r2, [r3]
 800724e:	2c00      	cmp	r4, #0
 8007250:	d1f7      	bne.n	8007242 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8007252:	2220      	movs	r2, #32
 8007254:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	065b      	lsls	r3, r3, #25
 800725a:	d506      	bpl.n	800726a <UART_DMAError+0x44>
 800725c:	2922      	cmp	r1, #34	@ 0x22
 800725e:	d104      	bne.n	800726a <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007266:	f7ff ff42 	bl	80070ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800726a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800726e:	f043 0310 	orr.w	r3, r3, #16
 8007272:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007276:	f7ff ffd5 	bl	8007224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800727a:	bd10      	pop	{r4, pc}

0800727c <HAL_UARTEx_RxEventCallback>:
}
 800727c:	4770      	bx	lr

0800727e <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800727e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007280:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007282:	2301      	movs	r3, #1
 8007284:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007286:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007288:	2b01      	cmp	r3, #1
 800728a:	d105      	bne.n	8007298 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800728c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007290:	0849      	lsrs	r1, r1, #1
 8007292:	f7ff fff3 	bl	800727c <HAL_UARTEx_RxEventCallback>
}
 8007296:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007298:	f7ff ffc3 	bl	8007222 <HAL_UART_RxHalfCpltCallback>
}
 800729c:	e7fb      	b.n	8007296 <UART_DMARxHalfCplt+0x18>

0800729e <UART_DMAReceiveCplt>:
{
 800729e:	b508      	push	{r3, lr}
 80072a0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072a2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d032      	beq.n	8007310 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	e852 3f00 	ldrex	r3, [r2]
 80072b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80072be:	6803      	ldr	r3, [r0, #0]
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d1f5      	bne.n	80072b0 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f103 0208 	add.w	r2, r3, #8
 80072c8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072cc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	f103 0c08 	add.w	ip, r3, #8
 80072d4:	e84c 2100 	strex	r1, r2, [ip]
 80072d8:	2900      	cmp	r1, #0
 80072da:	d1f3      	bne.n	80072c4 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	f103 0208 	add.w	r2, r3, #8
 80072e0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	f103 0c08 	add.w	ip, r3, #8
 80072ec:	e84c 2100 	strex	r1, r2, [ip]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d1f3      	bne.n	80072dc <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fa:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80072fc:	2a01      	cmp	r2, #1
 80072fe:	d107      	bne.n	8007310 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	e843 2100 	strex	r1, r2, [r3]
 800730c:	2900      	cmp	r1, #0
 800730e:	d1f7      	bne.n	8007300 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007310:	2300      	movs	r3, #0
 8007312:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007316:	2b01      	cmp	r3, #1
 8007318:	d104      	bne.n	8007324 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 800731e:	f7ff ffad 	bl	800727c <HAL_UARTEx_RxEventCallback>
}
 8007322:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007324:	f7ff ff7c 	bl	8007220 <HAL_UART_RxCpltCallback>
}
 8007328:	e7fb      	b.n	8007322 <UART_DMAReceiveCplt+0x84>
	...

0800732c <UART_SetConfig>:
{
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007330:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007332:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007334:	6925      	ldr	r5, [r4, #16]
 8007336:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007338:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800733a:	432a      	orrs	r2, r5
 800733c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800733e:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007342:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007344:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007348:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800734a:	430a      	orrs	r2, r1
 800734c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8007352:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007354:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800735c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007360:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007364:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736a:	4a56      	ldr	r2, [pc, #344]	@ (80074c4 <UART_SetConfig+0x198>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d112      	bne.n	8007396 <UART_SetConfig+0x6a>
 8007370:	4b55      	ldr	r3, [pc, #340]	@ (80074c8 <UART_SetConfig+0x19c>)
 8007372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2b02      	cmp	r3, #2
 800737a:	f000 8091 	beq.w	80074a0 <UART_SetConfig+0x174>
 800737e:	2b03      	cmp	r3, #3
 8007380:	d022      	beq.n	80073c8 <UART_SetConfig+0x9c>
 8007382:	2b01      	cmp	r3, #1
 8007384:	f040 8092 	bne.w	80074ac <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007388:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800738c:	f040 8085 	bne.w	800749a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007390:	f7fe fc54 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
        break;
 8007394:	e06b      	b.n	800746e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007396:	4a4d      	ldr	r2, [pc, #308]	@ (80074cc <UART_SetConfig+0x1a0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d12e      	bne.n	80073fa <UART_SetConfig+0xce>
 800739c:	4b4a      	ldr	r3, [pc, #296]	@ (80074c8 <UART_SetConfig+0x19c>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073a8:	d07a      	beq.n	80074a0 <UART_SetConfig+0x174>
 80073aa:	d80a      	bhi.n	80073c2 <UART_SetConfig+0x96>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8083 	beq.w	80074b8 <UART_SetConfig+0x18c>
 80073b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b6:	d0e7      	beq.n	8007388 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80073ba:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80073bc:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80073c0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073c6:	d1f7      	bne.n	80073b8 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80073cc:	4840      	ldr	r0, [pc, #256]	@ (80074d0 <UART_SetConfig+0x1a4>)
 80073ce:	d156      	bne.n	800747e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073d0:	6862      	ldr	r2, [r4, #4]
 80073d2:	0853      	lsrs	r3, r2, #1
 80073d4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80073d8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073dc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80073e0:	f1a3 0110 	sub.w	r1, r3, #16
 80073e4:	4291      	cmp	r1, r2
 80073e6:	d8e7      	bhi.n	80073b8 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80073ec:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ee:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60cb      	str	r3, [r1, #12]
 80073f8:	e03b      	b.n	8007472 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073fa:	4a36      	ldr	r2, [pc, #216]	@ (80074d4 <UART_SetConfig+0x1a8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10f      	bne.n	8007420 <UART_SetConfig+0xf4>
 8007400:	4b31      	ldr	r3, [pc, #196]	@ (80074c8 <UART_SetConfig+0x19c>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007404:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800740c:	d048      	beq.n	80074a0 <UART_SetConfig+0x174>
 800740e:	d804      	bhi.n	800741a <UART_SetConfig+0xee>
 8007410:	2b00      	cmp	r3, #0
 8007412:	d051      	beq.n	80074b8 <UART_SetConfig+0x18c>
 8007414:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007418:	e7cd      	b.n	80073b6 <UART_SetConfig+0x8a>
 800741a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800741e:	e7d2      	b.n	80073c6 <UART_SetConfig+0x9a>
 8007420:	4a2d      	ldr	r2, [pc, #180]	@ (80074d8 <UART_SetConfig+0x1ac>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10f      	bne.n	8007446 <UART_SetConfig+0x11a>
 8007426:	4b28      	ldr	r3, [pc, #160]	@ (80074c8 <UART_SetConfig+0x19c>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800742e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007432:	d035      	beq.n	80074a0 <UART_SetConfig+0x174>
 8007434:	d804      	bhi.n	8007440 <UART_SetConfig+0x114>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d03e      	beq.n	80074b8 <UART_SetConfig+0x18c>
 800743a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800743e:	e7ba      	b.n	80073b6 <UART_SetConfig+0x8a>
 8007440:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007444:	e7bf      	b.n	80073c6 <UART_SetConfig+0x9a>
 8007446:	4a25      	ldr	r2, [pc, #148]	@ (80074dc <UART_SetConfig+0x1b0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d1b5      	bne.n	80073b8 <UART_SetConfig+0x8c>
 800744c:	4b1e      	ldr	r3, [pc, #120]	@ (80074c8 <UART_SetConfig+0x19c>)
 800744e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007450:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007458:	d022      	beq.n	80074a0 <UART_SetConfig+0x174>
 800745a:	d803      	bhi.n	8007464 <UART_SetConfig+0x138>
 800745c:	b363      	cbz	r3, 80074b8 <UART_SetConfig+0x18c>
 800745e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007462:	e7a8      	b.n	80073b6 <UART_SetConfig+0x8a>
 8007464:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007468:	e7ad      	b.n	80073c6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800746a:	f7fe fccb 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800746e:	2800      	cmp	r0, #0
 8007470:	d1ae      	bne.n	80073d0 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8007472:	2000      	movs	r0, #0
 8007474:	e7a1      	b.n	80073ba <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fe fcad 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800747a:	2800      	cmp	r0, #0
 800747c:	d0f9      	beq.n	8007472 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007484:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007488:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800748c:	f1a3 0110 	sub.w	r1, r3, #16
 8007490:	4291      	cmp	r1, r2
 8007492:	d891      	bhi.n	80073b8 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	60d3      	str	r3, [r2, #12]
 8007498:	e7eb      	b.n	8007472 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 800749a:	f7fe fbcf 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
        break;
 800749e:	e7ec      	b.n	800747a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80074a4:	d094      	beq.n	80073d0 <UART_SetConfig+0xa4>
 80074a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80074aa:	e7e8      	b.n	800747e <UART_SetConfig+0x152>
 80074ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80074b0:	d0db      	beq.n	800746a <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b2:	f7fe fca7 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
        break;
 80074b6:	e7e0      	b.n	800747a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80074bc:	d1db      	bne.n	8007476 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80074be:	f7fe fc89 	bl	8005dd4 <HAL_RCC_GetPCLK1Freq>
        break;
 80074c2:	e7d4      	b.n	800746e <UART_SetConfig+0x142>
 80074c4:	40013800 	.word	0x40013800
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40004400 	.word	0x40004400
 80074d0:	007a1200 	.word	0x007a1200
 80074d4:	40004800 	.word	0x40004800
 80074d8:	40004c00 	.word	0x40004c00
 80074dc:	40005000 	.word	0x40005000

080074e0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074e0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80074e2:	071a      	lsls	r2, r3, #28
{
 80074e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074e6:	d506      	bpl.n	80074f6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074e8:	6801      	ldr	r1, [r0, #0]
 80074ea:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80074ec:	684a      	ldr	r2, [r1, #4]
 80074ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074f2:	4322      	orrs	r2, r4
 80074f4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074f6:	07dc      	lsls	r4, r3, #31
 80074f8:	d506      	bpl.n	8007508 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074fa:	6801      	ldr	r1, [r0, #0]
 80074fc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80074fe:	684a      	ldr	r2, [r1, #4]
 8007500:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007504:	4322      	orrs	r2, r4
 8007506:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007508:	0799      	lsls	r1, r3, #30
 800750a:	d506      	bpl.n	800751a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800750c:	6801      	ldr	r1, [r0, #0]
 800750e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007510:	684a      	ldr	r2, [r1, #4]
 8007512:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007516:	4322      	orrs	r2, r4
 8007518:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751a:	075a      	lsls	r2, r3, #29
 800751c:	d506      	bpl.n	800752c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751e:	6801      	ldr	r1, [r0, #0]
 8007520:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007522:	684a      	ldr	r2, [r1, #4]
 8007524:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007528:	4322      	orrs	r2, r4
 800752a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800752c:	06dc      	lsls	r4, r3, #27
 800752e:	d506      	bpl.n	800753e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007530:	6801      	ldr	r1, [r0, #0]
 8007532:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007534:	688a      	ldr	r2, [r1, #8]
 8007536:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800753a:	4322      	orrs	r2, r4
 800753c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753e:	0699      	lsls	r1, r3, #26
 8007540:	d506      	bpl.n	8007550 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007542:	6801      	ldr	r1, [r0, #0]
 8007544:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007546:	688a      	ldr	r2, [r1, #8]
 8007548:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800754c:	4322      	orrs	r2, r4
 800754e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007550:	065a      	lsls	r2, r3, #25
 8007552:	d50f      	bpl.n	8007574 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007554:	6801      	ldr	r1, [r0, #0]
 8007556:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007558:	684a      	ldr	r2, [r1, #4]
 800755a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800755e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007560:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007564:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007566:	d105      	bne.n	8007574 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007568:	684a      	ldr	r2, [r1, #4]
 800756a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800756c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007570:	4322      	orrs	r2, r4
 8007572:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007574:	061b      	lsls	r3, r3, #24
 8007576:	d506      	bpl.n	8007586 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007578:	6802      	ldr	r2, [r0, #0]
 800757a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800757c:	6853      	ldr	r3, [r2, #4]
 800757e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007582:	430b      	orrs	r3, r1
 8007584:	6053      	str	r3, [r2, #4]
}
 8007586:	bd10      	pop	{r4, pc}

08007588 <UART_WaitOnFlagUntilTimeout>:
{
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007590:	4604      	mov	r4, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4617      	mov	r7, r2
 8007596:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	69d3      	ldr	r3, [r2, #28]
 800759c:	ea35 0303 	bics.w	r3, r5, r3
 80075a0:	bf0c      	ite	eq
 80075a2:	2301      	moveq	r3, #1
 80075a4:	2300      	movne	r3, #0
 80075a6:	42bb      	cmp	r3, r7
 80075a8:	d001      	beq.n	80075ae <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80075aa:	2000      	movs	r0, #0
 80075ac:	e022      	b.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80075ae:	f1b9 3fff 	cmp.w	r9, #4294967295
 80075b2:	d0f2      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b4:	f7fd f984 	bl	80048c0 <HAL_GetTick>
 80075b8:	eba0 0008 	sub.w	r0, r0, r8
 80075bc:	4548      	cmp	r0, r9
 80075be:	d829      	bhi.n	8007614 <UART_WaitOnFlagUntilTimeout+0x8c>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	d026      	beq.n	8007614 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	680b      	ldr	r3, [r1, #0]
 80075ca:	075a      	lsls	r2, r3, #29
 80075cc:	d5e4      	bpl.n	8007598 <UART_WaitOnFlagUntilTimeout+0x10>
 80075ce:	2d80      	cmp	r5, #128	@ 0x80
 80075d0:	d0e2      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0x10>
 80075d2:	2d40      	cmp	r5, #64	@ 0x40
 80075d4:	d0e0      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075d6:	69ce      	ldr	r6, [r1, #28]
 80075d8:	f016 0608 	ands.w	r6, r6, #8
 80075dc:	d00c      	beq.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075de:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80075e0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075e2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80075e4:	f7ff fd83 	bl	80070ee <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80075e8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ea:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80075ee:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80075f2:	2001      	movs	r0, #1
}
 80075f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075f8:	69cb      	ldr	r3, [r1, #28]
 80075fa:	051b      	lsls	r3, r3, #20
 80075fc:	d5cc      	bpl.n	8007598 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007602:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fd72 	bl	80070ee <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800760a:	2320      	movs	r3, #32
 800760c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007610:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8007614:	2003      	movs	r0, #3
 8007616:	e7ed      	b.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x6c>

08007618 <HAL_UART_Transmit>:
{
 8007618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800761e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007620:	2b20      	cmp	r3, #32
{
 8007622:	4604      	mov	r4, r0
 8007624:	460e      	mov	r6, r1
 8007626:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007628:	d143      	bne.n	80076b2 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800762a:	2900      	cmp	r1, #0
 800762c:	d043      	beq.n	80076b6 <HAL_UART_Transmit+0x9e>
 800762e:	2a00      	cmp	r2, #0
 8007630:	d041      	beq.n	80076b6 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007632:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	2500      	movs	r5, #0
 8007636:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800763a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800763c:	f7fd f940 	bl	80048c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007640:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8007642:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800764a:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800764c:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007650:	d103      	bne.n	800765a <HAL_UART_Transmit+0x42>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	b90b      	cbnz	r3, 800765a <HAL_UART_Transmit+0x42>
 8007656:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007658:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800765a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800765e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007662:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007664:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8007666:	b93a      	cbnz	r2, 8007678 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007668:	2140      	movs	r1, #64	@ 0x40
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ff8c 	bl	8007588 <UART_WaitOnFlagUntilTimeout>
 8007670:	2320      	movs	r3, #32
 8007672:	b940      	cbnz	r0, 8007686 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8007674:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8007676:	e008      	b.n	800768a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007678:	2200      	movs	r2, #0
 800767a:	2180      	movs	r1, #128	@ 0x80
 800767c:	4620      	mov	r0, r4
 800767e:	f7ff ff83 	bl	8007588 <UART_WaitOnFlagUntilTimeout>
 8007682:	b128      	cbz	r0, 8007690 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8007684:	2320      	movs	r3, #32
 8007686:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007688:	2003      	movs	r0, #3
}
 800768a:	b003      	add	sp, #12
 800768c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007690:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007692:	b95e      	cbnz	r6, 80076ac <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007694:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007698:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800769c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800769e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80076a2:	3a01      	subs	r2, #1
 80076a4:	b292      	uxth	r2, r2
 80076a6:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80076aa:	e7d6      	b.n	800765a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ac:	f816 3b01 	ldrb.w	r3, [r6], #1
 80076b0:	e7f4      	b.n	800769c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80076b2:	2002      	movs	r0, #2
 80076b4:	e7e9      	b.n	800768a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80076b6:	2001      	movs	r0, #1
 80076b8:	e7e7      	b.n	800768a <HAL_UART_Transmit+0x72>

080076ba <UART_CheckIdleState>:
{
 80076ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	2600      	movs	r6, #0
 80076c0:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80076c4:	f7fd f8fc 	bl	80048c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80076ce:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076d0:	d51b      	bpl.n	800770a <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4632      	mov	r2, r6
 80076da:	4603      	mov	r3, r0
 80076dc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076e0:	4620      	mov	r0, r4
 80076e2:	f7ff ff51 	bl	8007588 <UART_WaitOnFlagUntilTimeout>
 80076e6:	b180      	cbz	r0, 800770a <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	e852 3f00 	ldrex	r3, [r2]
 80076ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	e842 3100 	strex	r1, r3, [r2]
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d1f6      	bne.n	80076e8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80076fa:	2320      	movs	r3, #32
 80076fc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80076fe:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007700:	2300      	movs	r3, #0
 8007702:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8007706:	b002      	add	sp, #8
 8007708:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	075b      	lsls	r3, r3, #29
 8007710:	d524      	bpl.n	800775c <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007712:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	2200      	movs	r2, #0
 800771a:	462b      	mov	r3, r5
 800771c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007720:	4620      	mov	r0, r4
 8007722:	f7ff ff31 	bl	8007588 <UART_WaitOnFlagUntilTimeout>
 8007726:	b1c8      	cbz	r0, 800775c <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007728:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	e852 3f00 	ldrex	r3, [r2]
 800772e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	2900      	cmp	r1, #0
 800773a:	d1f5      	bne.n	8007728 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	f102 0308 	add.w	r3, r2, #8
 8007740:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	f102 0008 	add.w	r0, r2, #8
 800774c:	e840 3100 	strex	r1, r3, [r0]
 8007750:	2900      	cmp	r1, #0
 8007752:	d1f3      	bne.n	800773c <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007754:	2320      	movs	r3, #32
 8007756:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800775a:	e7d0      	b.n	80076fe <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 800775c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007760:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007762:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007768:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800776a:	e7c9      	b.n	8007700 <UART_CheckIdleState+0x46>

0800776c <HAL_UART_Init>:
{
 800776c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800776e:	4604      	mov	r4, r0
 8007770:	b340      	cbz	r0, 80077c4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007772:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007774:	b91b      	cbnz	r3, 800777e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007776:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800777a:	f7fc fe99 	bl	80044b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800777e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	2324      	movs	r3, #36	@ 0x24
 8007782:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800778c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800778e:	b113      	cbz	r3, 8007796 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff fea5 	bl	80074e0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff fdc8 	bl	800732c <UART_SetConfig>
 800779c:	2801      	cmp	r0, #1
 800779e:	d011      	beq.n	80077c4 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077b0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80077b8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80077ba:	601a      	str	r2, [r3, #0]
}
 80077bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80077c0:	f7ff bf7b 	b.w	80076ba <UART_CheckIdleState>
}
 80077c4:	2001      	movs	r0, #1
 80077c6:	bd10      	pop	{r4, pc}

080077c8 <UART_Start_Receive_DMA>:
{
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4613      	mov	r3, r2
 80077cc:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80077ce:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d2:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80077d4:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077da:	2022      	movs	r0, #34	@ 0x22
 80077dc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80077e0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077e2:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80077e4:	b1a0      	cbz	r0, 8007810 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077e6:	4e1c      	ldr	r6, [pc, #112]	@ (8007858 <UART_Start_Receive_DMA+0x90>)
 80077e8:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077ea:	4e1c      	ldr	r6, [pc, #112]	@ (800785c <UART_Start_Receive_DMA+0x94>)
 80077ec:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077ee:	4e1c      	ldr	r6, [pc, #112]	@ (8007860 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 80077f0:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077f4:	460a      	mov	r2, r1
 80077f6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80077fa:	f7fd fe4f 	bl	800549c <HAL_DMA_Start_IT>
 80077fe:	b138      	cbz	r0, 8007810 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007800:	2310      	movs	r3, #16
 8007802:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007806:	2320      	movs	r3, #32
 8007808:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 800780c:	2001      	movs	r0, #1
}
 800780e:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007810:	6922      	ldr	r2, [r4, #16]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	b13a      	cbz	r2, 8007826 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	e843 2100 	strex	r1, r2, [r3]
 8007822:	2900      	cmp	r1, #0
 8007824:	d1f7      	bne.n	8007816 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	f103 0208 	add.w	r2, r3, #8
 800782a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f103 0008 	add.w	r0, r3, #8
 8007836:	e840 2100 	strex	r1, r2, [r0]
 800783a:	2900      	cmp	r1, #0
 800783c:	d1f3      	bne.n	8007826 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	f103 0208 	add.w	r2, r3, #8
 8007842:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	f103 0108 	add.w	r1, r3, #8
 800784e:	e841 2000 	strex	r0, r2, [r1]
 8007852:	2800      	cmp	r0, #0
 8007854:	d1f3      	bne.n	800783e <UART_Start_Receive_DMA+0x76>
 8007856:	e7da      	b.n	800780e <UART_Start_Receive_DMA+0x46>
 8007858:	0800729f 	.word	0x0800729f
 800785c:	0800727f 	.word	0x0800727f
 8007860:	08007227 	.word	0x08007227

08007864 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007864:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007868:	2b20      	cmp	r3, #32
{
 800786a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800786c:	d112      	bne.n	8007894 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800786e:	b1a1      	cbz	r1, 800789a <HAL_UART_Receive_DMA+0x36>
 8007870:	b19a      	cbz	r2, 800789a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007872:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007874:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007876:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	d507      	bpl.n	800788e <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	e844 3500 	strex	r5, r3, [r4]
 800788a:	2d00      	cmp	r5, #0
 800788c:	d1f7      	bne.n	800787e <HAL_UART_Receive_DMA+0x1a>
}
 800788e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007890:	f7ff bf9a 	b.w	80077c8 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007894:	2002      	movs	r0, #2
}
 8007896:	bc30      	pop	{r4, r5}
 8007898:	4770      	bx	lr
      return HAL_ERROR;
 800789a:	2001      	movs	r0, #1
 800789c:	e7fb      	b.n	8007896 <HAL_UART_Receive_DMA+0x32>

0800789e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800789e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80078a0:	f000 fe9c 	bl	80085dc <vTaskStartScheduler>
  
  return osOK;
}
 80078a4:	2000      	movs	r0, #0
 80078a6:	bd08      	pop	{r3, pc}

080078a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078ac:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078ae:	692a      	ldr	r2, [r5, #16]
 80078b0:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80078b4:	460b      	mov	r3, r1
 80078b6:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078b8:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078bc:	b176      	cbz	r6, 80078dc <osThreadCreate+0x34>
 80078be:	69ad      	ldr	r5, [r5, #24]
 80078c0:	b165      	cbz	r5, 80078dc <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80078c2:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80078c4:	bf14      	ite	ne
 80078c6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078c8:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ca:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80078ce:	9400      	str	r4, [sp, #0]
 80078d0:	f000 fe1f 	bl	8008512 <xTaskCreateStatic>
 80078d4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078d6:	9805      	ldr	r0, [sp, #20]
}
 80078d8:	b006      	add	sp, #24
 80078da:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80078dc:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80078de:	bf14      	ite	ne
 80078e0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078e2:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078e4:	ad05      	add	r5, sp, #20
 80078e6:	e9cd 4500 	strd	r4, r5, [sp]
 80078ea:	b292      	uxth	r2, r2
 80078ec:	f000 fe48 	bl	8008580 <xTaskCreate>
 80078f0:	2801      	cmp	r0, #1
 80078f2:	d0f0      	beq.n	80078d6 <osThreadCreate+0x2e>
      return NULL;
 80078f4:	2000      	movs	r0, #0
 80078f6:	e7ef      	b.n	80078d8 <osThreadCreate+0x30>

080078f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078f8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078fa:	2801      	cmp	r0, #1
 80078fc:	bf38      	it	cc
 80078fe:	2001      	movcc	r0, #1
 8007900:	f000 ffba 	bl	8008878 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007904:	2000      	movs	r0, #0
 8007906:	bd08      	pop	{r3, pc}

08007908 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007908:	4603      	mov	r3, r0
 800790a:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800790c:	685d      	ldr	r5, [r3, #4]
{ 
 800790e:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8007910:	b165      	cbz	r5, 800792c <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007912:	2901      	cmp	r1, #1
 8007914:	d112      	bne.n	800793c <osSemaphoreCreate+0x34>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007916:	2303      	movs	r3, #3
 8007918:	2200      	movs	r2, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	4611      	mov	r1, r2
 800791e:	462b      	mov	r3, r5
 8007920:	f000 fa30 	bl	8007d84 <xQueueGenericCreateStatic>
 8007924:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007926:	4620      	mov	r0, r4
 8007928:	b003      	add	sp, #12
 800792a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 800792c:	2901      	cmp	r1, #1
 800792e:	d105      	bne.n	800793c <osSemaphoreCreate+0x34>
      vSemaphoreCreateBinary(sema);
 8007930:	2203      	movs	r2, #3
 8007932:	4629      	mov	r1, r5
 8007934:	f000 fa6f 	bl	8007e16 <xQueueGenericCreate>
 8007938:	4604      	mov	r4, r0
 800793a:	b908      	cbnz	r0, 8007940 <osSemaphoreCreate+0x38>
{ 
 800793c:	2400      	movs	r4, #0
 800793e:	e7f2      	b.n	8007926 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007940:	462b      	mov	r3, r5
 8007942:	462a      	mov	r2, r5
 8007944:	4629      	mov	r1, r5
 8007946:	f000 fa8a 	bl	8007e5e <xQueueGenericSend>
 800794a:	e7ec      	b.n	8007926 <osSemaphoreCreate+0x1e>

0800794c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800794e:	6847      	ldr	r7, [r0, #4]
{
 8007950:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007952:	2014      	movs	r0, #20
 8007954:	f001 fac4 	bl	8008ee0 <pvPortMalloc>

  
  if (thePool) {
 8007958:	4604      	mov	r4, r0
 800795a:	b1b8      	cbz	r0, 800798c <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 800795c:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800795e:	3703      	adds	r7, #3
 8007960:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8007964:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 8007966:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 800796a:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800796c:	f001 fab8 	bl	8008ee0 <pvPortMalloc>
 8007970:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 8007972:	b140      	cbz	r0, 8007986 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007974:	6830      	ldr	r0, [r6, #0]
 8007976:	4378      	muls	r0, r7
 8007978:	f001 fab2 	bl	8008ee0 <pvPortMalloc>
 800797c:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 800797e:	b978      	cbnz	r0, 80079a0 <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8007980:	6860      	ldr	r0, [r4, #4]
 8007982:	f001 fb3f 	bl	8009004 <vPortFree>
        vPortFree(thePool);
 8007986:	4620      	mov	r0, r4
 8007988:	f001 fb3c 	bl	8009004 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800798c:	2400      	movs	r4, #0
 800798e:	e005      	b.n	800799c <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8007990:	6862      	ldr	r2, [r4, #4]
 8007992:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007994:	3301      	adds	r3, #1
 8007996:	6832      	ldr	r2, [r6, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d8f9      	bhi.n	8007990 <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 800799c:	4620      	mov	r0, r4
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 80079a0:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 80079a2:	4629      	mov	r1, r5
 80079a4:	e7f7      	b.n	8007996 <osPoolCreate+0x4a>

080079a6 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80079a6:	b570      	push	{r4, r5, r6, lr}
 80079a8:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079aa:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80079ae:	b186      	cbz	r6, 80079d2 <osPoolAlloc+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079b0:	f3ef 8511 	mrs	r5, BASEPRI
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80079c4:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80079c6:	68a1      	ldr	r1, [r4, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	4291      	cmp	r1, r2
 80079cc:	d104      	bne.n	80079d8 <osPoolAlloc+0x32>
  void *p = NULL;
 80079ce:	2500      	movs	r5, #0
 80079d0:	e012      	b.n	80079f8 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80079d2:	f001 f91f 	bl	8008c14 <vPortEnterCritical>
 80079d6:	e7f6      	b.n	80079c6 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	fbb3 f0f1 	udiv	r0, r3, r1
 80079e0:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80079e4:	6860      	ldr	r0, [r4, #4]
 80079e6:	5cc5      	ldrb	r5, [r0, r3]
 80079e8:	b96d      	cbnz	r5, 8007a06 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 80079ea:	2201      	movs	r2, #1
 80079ec:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80079ee:	68e2      	ldr	r2, [r4, #12]
 80079f0:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 80079f2:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80079f4:	fb02 5503 	mla	r5, r2, r3, r5
 80079f8:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 80079fc:	b12b      	cbz	r3, 8007a0a <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079fe:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 8007a02:	4628      	mov	r0, r5
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007a06:	3201      	adds	r2, #1
 8007a08:	e7df      	b.n	80079ca <osPoolAlloc+0x24>
    vPortExitCritical();
 8007a0a:	f001 f923 	bl	8008c54 <vPortExitCritical>
  return p;
 8007a0e:	e7f8      	b.n	8007a02 <osPoolAlloc+0x5c>

08007a10 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8007a10:	4603      	mov	r3, r0
 8007a12:	b180      	cbz	r0, 8007a36 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8007a14:	b179      	cbz	r1, 8007a36 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8007a16:	6802      	ldr	r2, [r0, #0]
 8007a18:	428a      	cmp	r2, r1
 8007a1a:	d80c      	bhi.n	8007a36 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8007a1c:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007a1e:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8007a20:	fbb1 f2f0 	udiv	r2, r1, r0
 8007a24:	fb00 1012 	mls	r0, r0, r2, r1
 8007a28:	b928      	cbnz	r0, 8007a36 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8007a2a:	6899      	ldr	r1, [r3, #8]
 8007a2c:	4291      	cmp	r1, r2
 8007a2e:	d902      	bls.n	8007a36 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8007a34:	4770      	bx	lr
    return osErrorParameter;
 8007a36:	2080      	movs	r0, #128	@ 0x80
}
 8007a38:	4770      	bx	lr

08007a3a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007a3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007a3c:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007a3e:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007a40:	9301      	str	r3, [sp, #4]
{
 8007a42:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007a44:	6843      	ldr	r3, [r0, #4]
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007a4a:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007a4c:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007a4e:	f001 fa47 	bl	8008ee0 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 8007a52:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007a54:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8007a56:	681d      	ldr	r5, [r3, #0]
 8007a58:	b16d      	cbz	r5, 8007a76 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007a5a:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007a5c:	6820      	ldr	r0, [r4, #0]
 8007a5e:	4632      	mov	r2, r6
 8007a60:	2104      	movs	r1, #4
 8007a62:	f000 f9d8 	bl	8007e16 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 8007a66:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007a68:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8007a6a:	681d      	ldr	r5, [r3, #0]
 8007a6c:	686b      	ldr	r3, [r5, #4]
 8007a6e:	b92b      	cbnz	r3, 8007a7c <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8007a70:	4628      	mov	r0, r5
 8007a72:	f001 fac7 	bl	8009004 <vPortFree>
    return NULL;
 8007a76:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8007a78:	b004      	add	sp, #16
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007a7c:	a801      	add	r0, sp, #4
 8007a7e:	f7ff ff65 	bl	800794c <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 8007a82:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007a84:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	6883      	ldr	r3, [r0, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f4      	bne.n	8007a78 <osMailCreate+0x3e>
 8007a8e:	e7f0      	b.n	8007a72 <osMailCreate+0x38>

08007a90 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007a90:	b110      	cbz	r0, 8007a98 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007a92:	6880      	ldr	r0, [r0, #8]
 8007a94:	f7ff bf87 	b.w	80079a6 <osPoolAlloc>
  
  return p;
}
 8007a98:	4770      	bx	lr

08007a9a <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8007a9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a9c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8007a9e:	b328      	cbz	r0, 8007aec <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	9203      	str	r2, [sp, #12]
 8007aa4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007aa8:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8007aaa:	b1c3      	cbz	r3, 8007ade <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007aac:	4613      	mov	r3, r2
 8007aae:	a901      	add	r1, sp, #4
 8007ab0:	aa03      	add	r2, sp, #12
 8007ab2:	f000 fa86 	bl	8007fc2 <xQueueGenericSendFromISR>
 8007ab6:	2801      	cmp	r0, #1
 8007ab8:	d003      	beq.n	8007ac2 <osMailPut+0x28>
      return osErrorOS;
 8007aba:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8007abc:	b005      	add	sp, #20
 8007abe:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	b14b      	cbz	r3, 8007ada <osMailPut+0x40>
 8007ac6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ace:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	f3bf 8f6f 	isb	sy
  return osOK;
 8007ada:	2000      	movs	r0, #0
 8007adc:	e7ee      	b.n	8007abc <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007ade:	461a      	mov	r2, r3
 8007ae0:	a901      	add	r1, sp, #4
 8007ae2:	f000 f9bc 	bl	8007e5e <xQueueGenericSend>
 8007ae6:	2801      	cmp	r0, #1
 8007ae8:	d0f7      	beq.n	8007ada <osMailPut+0x40>
 8007aea:	e7e6      	b.n	8007aba <osMailPut+0x20>
    return osErrorParameter;
 8007aec:	2080      	movs	r0, #128	@ 0x80
 8007aee:	e7e5      	b.n	8007abc <osMailPut+0x22>

08007af0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007af0:	b530      	push	{r4, r5, lr}
 8007af2:	b085      	sub	sp, #20
 8007af4:	4605      	mov	r5, r0
 8007af6:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007af8:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8007afa:	b911      	cbnz	r1, 8007b02 <osMailGet+0x12>
    event.status = osErrorParameter;
 8007afc:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	e01a      	b.n	8007b38 <osMailGet+0x48>
  taskWoken = pdFALSE;
 8007b02:	2300      	movs	r3, #0
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007b0a:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8007b0c:	b1e3      	cbz	r3, 8007b48 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007b0e:	466a      	mov	r2, sp
 8007b10:	a902      	add	r1, sp, #8
 8007b12:	f000 fb50 	bl	80081b6 <xQueueReceiveFromISR>
 8007b16:	1e43      	subs	r3, r0, #1
 8007b18:	4258      	negs	r0, r3
 8007b1a:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007b1c:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007b1e:	0140      	lsls	r0, r0, #5
 8007b20:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007b22:	b14b      	cbz	r3, 8007b38 <osMailGet+0x48>
 8007b24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
    return event;
 8007b38:	ab04      	add	r3, sp, #16
 8007b3a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007b3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007b42:	4628      	mov	r0, r5
 8007b44:	b005      	add	sp, #20
 8007b46:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007b48:	a902      	add	r1, sp, #8
 8007b4a:	f000 fa96 	bl	800807a <xQueueReceive>
 8007b4e:	2801      	cmp	r0, #1
 8007b50:	d101      	bne.n	8007b56 <osMailGet+0x66>
      event.status = osEventMail;
 8007b52:	2320      	movs	r3, #32
 8007b54:	e7d3      	b.n	8007afe <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007b56:	3c00      	subs	r4, #0
 8007b58:	bf18      	it	ne
 8007b5a:	2401      	movne	r4, #1
 8007b5c:	01a4      	lsls	r4, r4, #6
 8007b5e:	9401      	str	r4, [sp, #4]
  return event;
 8007b60:	e7ea      	b.n	8007b38 <osMailGet+0x48>

08007b62 <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8007b62:	b110      	cbz	r0, 8007b6a <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007b64:	6880      	ldr	r0, [r0, #8]
 8007b66:	f7ff bf53 	b.w	8007a10 <osPoolFree>
}
 8007b6a:	2080      	movs	r0, #128	@ 0x80
 8007b6c:	4770      	bx	lr

08007b6e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b76:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b82:	4770      	bx	lr

08007b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b88:	4770      	bx	lr

08007b8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b8a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b92:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b94:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007b96:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b98:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	6003      	str	r3, [r0, #0]
}
 8007b9e:	4770      	bx	lr

08007ba0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ba2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ba4:	1c63      	adds	r3, r4, #1
 8007ba6:	d10a      	bne.n	8007bbe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bae:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bb0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bb2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007bb4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bb6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007bb8:	3301      	adds	r3, #1
 8007bba:	6003      	str	r3, [r0, #0]
}
 8007bbc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bbe:	f100 0208 	add.w	r2, r0, #8
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	6852      	ldr	r2, [r2, #4]
 8007bc6:	6815      	ldr	r5, [r2, #0]
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	d9fa      	bls.n	8007bc2 <vListInsert+0x22>
 8007bcc:	e7ed      	b.n	8007baa <vListInsert+0xa>

08007bce <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bce:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007bd2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bd4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bd6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bdc:	bf08      	it	eq
 8007bde:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007be0:	2200      	movs	r2, #0
 8007be2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	3a01      	subs	r2, #1
 8007be8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bea:	6818      	ldr	r0, [r3, #0]
}
 8007bec:	4770      	bx	lr

08007bee <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bf2:	f001 f80f 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bf6:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007bf8:	f001 f82c 	bl	8008c54 <vPortExitCritical>

	return xReturn;
}
 8007bfc:	fab4 f084 	clz	r0, r4
 8007c00:	0940      	lsrs	r0, r0, #5
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <prvCopyDataToQueue>:
{
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c08:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8007c0c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c0e:	b942      	cbnz	r2, 8007c22 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c10:	6806      	ldr	r6, [r0, #0]
 8007c12:	b99e      	cbnz	r6, 8007c3c <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007c14:	6840      	ldr	r0, [r0, #4]
 8007c16:	f000 ff47 	bl	8008aa8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007c1a:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c1c:	3501      	adds	r5, #1
 8007c1e:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007c20:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007c22:	b96e      	cbnz	r6, 8007c40 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007c24:	6880      	ldr	r0, [r0, #8]
 8007c26:	f003 fffa 	bl	800bc1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007c2e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c30:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007c32:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c34:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c36:	bf24      	itt	cs
 8007c38:	6823      	ldrcs	r3, [r4, #0]
 8007c3a:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e7ed      	b.n	8007c1c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c40:	68c0      	ldr	r0, [r0, #12]
 8007c42:	f003 ffec 	bl	800bc1e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c46:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007c48:	68e3      	ldr	r3, [r4, #12]
 8007c4a:	4251      	negs	r1, r2
 8007c4c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c4e:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007c50:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c52:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007c54:	bf3e      	ittt	cc
 8007c56:	6863      	ldrcc	r3, [r4, #4]
 8007c58:	185b      	addcc	r3, r3, r1
 8007c5a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007c5c:	2e02      	cmp	r6, #2
 8007c5e:	d1ed      	bne.n	8007c3c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c60:	b10d      	cbz	r5, 8007c66 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007c62:	3d01      	subs	r5, #1
 8007c64:	e7ea      	b.n	8007c3c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007c66:	4628      	mov	r0, r5
 8007c68:	e7d8      	b.n	8007c1c <prvCopyDataToQueue+0x18>

08007c6a <prvCopyDataFromQueue>:
{
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007c70:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c72:	b16a      	cbz	r2, 8007c90 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c74:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c76:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c78:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c7a:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007c7c:	bf28      	it	cs
 8007c7e:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007c80:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007c82:	bf28      	it	cs
 8007c84:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007c86:	68d9      	ldr	r1, [r3, #12]
}
 8007c88:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007c8c:	f003 bfc7 	b.w	800bc1e <memcpy>
}
 8007c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <prvUnlockQueue>:
{
 8007c96:	b570      	push	{r4, r5, r6, lr}
 8007c98:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007c9a:	f000 ffbb 	bl	8008c14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007c9e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ca2:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007ca6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	dc14      	bgt.n	8007cd6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007cac:	23ff      	movs	r3, #255	@ 0xff
 8007cae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007cb2:	f000 ffcf 	bl	8008c54 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007cb6:	f000 ffad 	bl	8008c14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007cba:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cbe:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007cc2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	dc12      	bgt.n	8007cee <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007cc8:	23ff      	movs	r3, #255	@ 0xff
 8007cca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007cd2:	f000 bfbf 	b.w	8008c54 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0e7      	beq.n	8007cac <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f000 fe43 	bl	8008968 <xTaskRemoveFromEventList>
 8007ce2:	b108      	cbz	r0, 8007ce8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007ce4:	f000 feca 	bl	8008a7c <vTaskMissedYield>
			--cTxLock;
 8007ce8:	3d01      	subs	r5, #1
 8007cea:	b26d      	sxtb	r5, r5
 8007cec:	e7dc      	b.n	8007ca8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0e9      	beq.n	8007cc8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f000 fe37 	bl	8008968 <xTaskRemoveFromEventList>
 8007cfa:	b108      	cbz	r0, 8007d00 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007cfc:	f000 febe 	bl	8008a7c <vTaskMissedYield>
				--cRxLock;
 8007d00:	3d01      	subs	r5, #1
 8007d02:	b26d      	sxtb	r5, r5
 8007d04:	e7de      	b.n	8007cc4 <prvUnlockQueue+0x2e>

08007d06 <xQueueGenericReset>:
{
 8007d06:	b538      	push	{r3, r4, r5, lr}
 8007d08:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b940      	cbnz	r0, 8007d20 <xQueueGenericReset+0x1a>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	e7fe      	b.n	8007d1e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007d20:	f000 ff78 	bl	8008c14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d24:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007d28:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d2c:	434b      	muls	r3, r1
 8007d2e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007d30:	1a5b      	subs	r3, r3, r1
 8007d32:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007d34:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d36:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d38:	2000      	movs	r0, #0
 8007d3a:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007d3c:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d3e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d42:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007d46:	b9a5      	cbnz	r5, 8007d72 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	b173      	cbz	r3, 8007d6a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4c:	f104 0010 	add.w	r0, r4, #16
 8007d50:	f000 fe0a 	bl	8008968 <xTaskRemoveFromEventList>
 8007d54:	b148      	cbz	r0, 8007d6a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007d56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007d6a:	f000 ff73 	bl	8008c54 <vPortExitCritical>
}
 8007d6e:	2001      	movs	r0, #1
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d72:	f104 0010 	add.w	r0, r4, #16
 8007d76:	f7ff fefa 	bl	8007b6e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d7a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007d7e:	f7ff fef6 	bl	8007b6e <vListInitialise>
 8007d82:	e7f2      	b.n	8007d6a <xQueueGenericReset+0x64>

08007d84 <xQueueGenericCreateStatic>:
	{
 8007d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d86:	460d      	mov	r5, r1
 8007d88:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d8a:	b940      	cbnz	r0, 8007d9e <xQueueGenericCreateStatic+0x1a>
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007d9e:	b943      	cbnz	r3, 8007db2 <xQueueGenericCreateStatic+0x2e>
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007db2:	b14a      	cbz	r2, 8007dc8 <xQueueGenericCreateStatic+0x44>
 8007db4:	b991      	cbnz	r1, 8007ddc <xQueueGenericCreateStatic+0x58>
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	e7fe      	b.n	8007dc6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dc8:	b141      	cbz	r1, 8007ddc <xQueueGenericCreateStatic+0x58>
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	e7fe      	b.n	8007dda <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ddc:	2348      	movs	r3, #72	@ 0x48
 8007dde:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	2b48      	cmp	r3, #72	@ 0x48
 8007de4:	d008      	beq.n	8007df8 <xQueueGenericCreateStatic+0x74>
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	e7fe      	b.n	8007df6 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007df8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	bf08      	it	eq
 8007dfe:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007e00:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e04:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e08:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff ff7b 	bl	8007d06 <xQueueGenericReset>
	}
 8007e10:	4620      	mov	r0, r4
 8007e12:	b003      	add	sp, #12
 8007e14:	bd30      	pop	{r4, r5, pc}

08007e16 <xQueueGenericCreate>:
	{
 8007e16:	b570      	push	{r4, r5, r6, lr}
 8007e18:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	b940      	cbnz	r0, 8007e30 <xQueueGenericCreate+0x1a>
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	e7fe      	b.n	8007e2e <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e30:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e32:	3048      	adds	r0, #72	@ 0x48
 8007e34:	f001 f854 	bl	8008ee0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007e38:	4604      	mov	r4, r0
 8007e3a:	b160      	cbz	r0, 8007e56 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e42:	b155      	cbz	r5, 8007e5a <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e44:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8007e48:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007e4c:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e4e:	2101      	movs	r1, #1
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7ff ff58 	bl	8007d06 <xQueueGenericReset>
	}
 8007e56:	4620      	mov	r0, r4
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	e7f4      	b.n	8007e48 <xQueueGenericCreate+0x32>

08007e5e <xQueueGenericSend>:
{
 8007e5e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007e62:	460f      	mov	r7, r1
 8007e64:	9201      	str	r2, [sp, #4]
 8007e66:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007e68:	4604      	mov	r4, r0
 8007e6a:	b940      	cbnz	r0, 8007e7e <xQueueGenericSend+0x20>
 8007e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	e7fe      	b.n	8007e7c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e7e:	b951      	cbnz	r1, 8007e96 <xQueueGenericSend+0x38>
 8007e80:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007e82:	b143      	cbz	r3, 8007e96 <xQueueGenericSend+0x38>
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	e7fe      	b.n	8007e94 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e96:	2e02      	cmp	r6, #2
 8007e98:	d10b      	bne.n	8007eb2 <xQueueGenericSend+0x54>
 8007e9a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d008      	beq.n	8007eb2 <xQueueGenericSend+0x54>
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	e7fe      	b.n	8007eb0 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eb2:	f000 fde9 	bl	8008a88 <xTaskGetSchedulerState>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b330      	cbz	r0, 8007f08 <xQueueGenericSend+0xaa>
 8007eba:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007ebc:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007ec0:	f000 fea8 	bl	8008c14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ec4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ec6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d301      	bcc.n	8007ed0 <xQueueGenericSend+0x72>
 8007ecc:	2e02      	cmp	r6, #2
 8007ece:	d127      	bne.n	8007f20 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7ff fe95 	bl	8007c04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eda:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007edc:	b11b      	cbz	r3, 8007ee6 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ede:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ee2:	f000 fd41 	bl	8008968 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007ee6:	b148      	cbz	r0, 8007efc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8007ee8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007efc:	f000 feaa 	bl	8008c54 <vPortExitCritical>
				return pdPASS;
 8007f00:	2001      	movs	r0, #1
}
 8007f02:	b004      	add	sp, #16
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0d6      	beq.n	8007ebc <xQueueGenericSend+0x5e>
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	e7fe      	b.n	8007f1e <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	b91b      	cbnz	r3, 8007f2c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007f24:	f000 fe96 	bl	8008c54 <vPortExitCritical>
					return errQUEUE_FULL;
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e7ea      	b.n	8007f02 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8007f2c:	b915      	cbnz	r5, 8007f34 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f2e:	a802      	add	r0, sp, #8
 8007f30:	f000 fd5c 	bl	80089ec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007f34:	f000 fe8e 	bl	8008c54 <vPortExitCritical>
		vTaskSuspendAll();
 8007f38:	f000 fb88 	bl	800864c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f3c:	f000 fe6a 	bl	8008c14 <vPortEnterCritical>
 8007f40:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007f44:	2bff      	cmp	r3, #255	@ 0xff
 8007f46:	bf08      	it	eq
 8007f48:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007f4c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007f50:	2bff      	cmp	r3, #255	@ 0xff
 8007f52:	bf08      	it	eq
 8007f54:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007f58:	f000 fe7c 	bl	8008c54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f5c:	a901      	add	r1, sp, #4
 8007f5e:	a802      	add	r0, sp, #8
 8007f60:	f000 fd50 	bl	8008a04 <xTaskCheckForTimeOut>
 8007f64:	bb38      	cbnz	r0, 8007fb6 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f66:	f000 fe55 	bl	8008c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f6a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d10e      	bne.n	8007f90 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007f72:	f000 fe6f 	bl	8008c54 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f76:	9901      	ldr	r1, [sp, #4]
 8007f78:	f104 0010 	add.w	r0, r4, #16
 8007f7c:	f000 fcda 	bl	8008934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7ff fe88 	bl	8007c96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f86:	f000 fc01 	bl	800878c <xTaskResumeAll>
 8007f8a:	b148      	cbz	r0, 8007fa0 <xQueueGenericSend+0x142>
 8007f8c:	2501      	movs	r5, #1
 8007f8e:	e797      	b.n	8007ec0 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007f90:	f000 fe60 	bl	8008c54 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7ff fe7e 	bl	8007c96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9a:	f000 fbf7 	bl	800878c <xTaskResumeAll>
 8007f9e:	e7f5      	b.n	8007f8c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007fa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	e7ea      	b.n	8007f8c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff fe6d 	bl	8007c96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fbc:	f000 fbe6 	bl	800878c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007fc0:	e7b2      	b.n	8007f28 <xQueueGenericSend+0xca>

08007fc2 <xQueueGenericSendFromISR>:
{
 8007fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc6:	4689      	mov	r9, r1
 8007fc8:	4617      	mov	r7, r2
 8007fca:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007fcc:	4604      	mov	r4, r0
 8007fce:	b940      	cbnz	r0, 8007fe2 <xQueueGenericSendFromISR+0x20>
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe2:	b951      	cbnz	r1, 8007ffa <xQueueGenericSendFromISR+0x38>
 8007fe4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007fe6:	b143      	cbz	r3, 8007ffa <xQueueGenericSendFromISR+0x38>
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ffa:	2e02      	cmp	r6, #2
 8007ffc:	d10b      	bne.n	8008016 <xQueueGenericSendFromISR+0x54>
 8007ffe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d008      	beq.n	8008016 <xQueueGenericSendFromISR+0x54>
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	e7fe      	b.n	8008014 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008016:	f000 ff0f 	bl	8008e38 <vPortValidateInterruptPriority>
	__asm volatile
 800801a:	f3ef 8811 	mrs	r8, BASEPRI
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800802e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008030:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008032:	429a      	cmp	r2, r3
 8008034:	d301      	bcc.n	800803a <xQueueGenericSendFromISR+0x78>
 8008036:	2e02      	cmp	r6, #2
 8008038:	d11d      	bne.n	8008076 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800803a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800803e:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8008040:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008042:	4649      	mov	r1, r9
 8008044:	4620      	mov	r0, r4
 8008046:	f7ff fddd 	bl	8007c04 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800804a:	1c6b      	adds	r3, r5, #1
 800804c:	d10e      	bne.n	800806c <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800804e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008050:	b13b      	cbz	r3, 8008062 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008052:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008056:	f000 fc87 	bl	8008968 <xTaskRemoveFromEventList>
 800805a:	b110      	cbz	r0, 8008062 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800805c:	b10f      	cbz	r7, 8008062 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8008062:	2001      	movs	r0, #1
	__asm volatile
 8008064:	f388 8811 	msr	BASEPRI, r8
}
 8008068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800806c:	3501      	adds	r5, #1
 800806e:	b26d      	sxtb	r5, r5
 8008070:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008074:	e7f5      	b.n	8008062 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8008076:	2000      	movs	r0, #0
 8008078:	e7f4      	b.n	8008064 <xQueueGenericSendFromISR+0xa2>

0800807a <xQueueReceive>:
{
 800807a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800807e:	460e      	mov	r6, r1
 8008080:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008082:	4604      	mov	r4, r0
 8008084:	b940      	cbnz	r0, 8008098 <xQueueReceive+0x1e>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	e7fe      	b.n	8008096 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008098:	b951      	cbnz	r1, 80080b0 <xQueueReceive+0x36>
 800809a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800809c:	b143      	cbz	r3, 80080b0 <xQueueReceive+0x36>
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	e7fe      	b.n	80080ae <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080b0:	f000 fcea 	bl	8008a88 <xTaskGetSchedulerState>
 80080b4:	4605      	mov	r5, r0
 80080b6:	b318      	cbz	r0, 8008100 <xQueueReceive+0x86>
 80080b8:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80080ba:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80080be:	f000 fda9 	bl	8008c14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c2:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c4:	b347      	cbz	r7, 8008118 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080c6:	4631      	mov	r1, r6
 80080c8:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080ca:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080cc:	f7ff fdcd 	bl	8007c6a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080d0:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	b173      	cbz	r3, 80080f4 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080d6:	f104 0010 	add.w	r0, r4, #16
 80080da:	f000 fc45 	bl	8008968 <xTaskRemoveFromEventList>
 80080de:	b148      	cbz	r0, 80080f4 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80080e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80080f4:	f000 fdae 	bl	8008c54 <vPortExitCritical>
				return pdPASS;
 80080f8:	2001      	movs	r0, #1
}
 80080fa:	b004      	add	sp, #16
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0d9      	beq.n	80080ba <xQueueReceive+0x40>
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	e7fe      	b.n	8008116 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	b91b      	cbnz	r3, 8008124 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800811c:	f000 fd9a 	bl	8008c54 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008120:	2000      	movs	r0, #0
 8008122:	e7ea      	b.n	80080fa <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008124:	b915      	cbnz	r5, 800812c <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008126:	a802      	add	r0, sp, #8
 8008128:	f000 fc60 	bl	80089ec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800812c:	f000 fd92 	bl	8008c54 <vPortExitCritical>
		vTaskSuspendAll();
 8008130:	f000 fa8c 	bl	800864c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008134:	f000 fd6e 	bl	8008c14 <vPortEnterCritical>
 8008138:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800813c:	2bff      	cmp	r3, #255	@ 0xff
 800813e:	bf08      	it	eq
 8008140:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008144:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008148:	2bff      	cmp	r3, #255	@ 0xff
 800814a:	bf08      	it	eq
 800814c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008150:	f000 fd80 	bl	8008c54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008154:	a901      	add	r1, sp, #4
 8008156:	a802      	add	r0, sp, #8
 8008158:	f000 fc54 	bl	8008a04 <xTaskCheckForTimeOut>
 800815c:	bb00      	cbnz	r0, 80081a0 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff fd45 	bl	8007bee <prvIsQueueEmpty>
 8008164:	b1b0      	cbz	r0, 8008194 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800816c:	f000 fbe2 	bl	8008934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff fd90 	bl	8007c96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008176:	f000 fb09 	bl	800878c <xTaskResumeAll>
 800817a:	b948      	cbnz	r0, 8008190 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800817c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008184:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	2501      	movs	r5, #1
 8008192:	e794      	b.n	80080be <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fd7e 	bl	8007c96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800819a:	f000 faf7 	bl	800878c <xTaskResumeAll>
 800819e:	e7f7      	b.n	8008190 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80081a0:	4620      	mov	r0, r4
 80081a2:	f7ff fd78 	bl	8007c96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081a6:	f000 faf1 	bl	800878c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7ff fd1f 	bl	8007bee <prvIsQueueEmpty>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d0ed      	beq.n	8008190 <xQueueReceive+0x116>
 80081b4:	e7b4      	b.n	8008120 <xQueueReceive+0xa6>

080081b6 <xQueueReceiveFromISR>:
{
 80081b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ba:	4689      	mov	r9, r1
 80081bc:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80081be:	4604      	mov	r4, r0
 80081c0:	b940      	cbnz	r0, 80081d4 <xQueueReceiveFromISR+0x1e>
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	e7fe      	b.n	80081d2 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081d4:	b951      	cbnz	r1, 80081ec <xQueueReceiveFromISR+0x36>
 80081d6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80081d8:	b143      	cbz	r3, 80081ec <xQueueReceiveFromISR+0x36>
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	e7fe      	b.n	80081ea <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081ec:	f000 fe24 	bl	8008e38 <vPortValidateInterruptPriority>
	__asm volatile
 80081f0:	f3ef 8711 	mrs	r7, BASEPRI
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008204:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008206:	b30d      	cbz	r5, 800824c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008208:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800820c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800820e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff fd2a 	bl	8007c6a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008216:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008218:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800821a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800821c:	d111      	bne.n	8008242 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	b153      	cbz	r3, 8008238 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008222:	f104 0010 	add.w	r0, r4, #16
 8008226:	f000 fb9f 	bl	8008968 <xTaskRemoveFromEventList>
 800822a:	b128      	cbz	r0, 8008238 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800822c:	f1b8 0f00 	cmp.w	r8, #0
 8008230:	d002      	beq.n	8008238 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008232:	2301      	movs	r3, #1
 8008234:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008238:	2001      	movs	r0, #1
	__asm volatile
 800823a:	f387 8811 	msr	BASEPRI, r7
}
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008242:	3601      	adds	r6, #1
 8008244:	b276      	sxtb	r6, r6
 8008246:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800824a:	e7f5      	b.n	8008238 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800824c:	4628      	mov	r0, r5
 800824e:	e7f4      	b.n	800823a <xQueueReceiveFromISR+0x84>

08008250 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008256:	f000 fcdd 	bl	8008c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800825c:	4e2f      	ldr	r6, [pc, #188]	@ (800831c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4f2f      	ldr	r7, [pc, #188]	@ (8008320 <prvAddNewTaskToReadyList+0xd0>)
 8008262:	3201      	adds	r2, #1
 8008264:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008266:	6835      	ldr	r5, [r6, #0]
 8008268:	2d00      	cmp	r5, #0
 800826a:	d14a      	bne.n	8008302 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800826c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d11f      	bne.n	80082b4 <prvAddNewTaskToReadyList+0x64>
 8008274:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008276:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008278:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800827a:	f7ff fc78 	bl	8007b6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800827e:	2d07      	cmp	r5, #7
 8008280:	f108 0814 	add.w	r8, r8, #20
 8008284:	d1f7      	bne.n	8008276 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008286:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8008348 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800828a:	4d26      	ldr	r5, [pc, #152]	@ (8008324 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800828c:	4640      	mov	r0, r8
 800828e:	f7ff fc6e 	bl	8007b6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008292:	4628      	mov	r0, r5
 8008294:	f7ff fc6b 	bl	8007b6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008298:	4823      	ldr	r0, [pc, #140]	@ (8008328 <prvAddNewTaskToReadyList+0xd8>)
 800829a:	f7ff fc68 	bl	8007b6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800829e:	4823      	ldr	r0, [pc, #140]	@ (800832c <prvAddNewTaskToReadyList+0xdc>)
 80082a0:	f7ff fc65 	bl	8007b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082a4:	4822      	ldr	r0, [pc, #136]	@ (8008330 <prvAddNewTaskToReadyList+0xe0>)
 80082a6:	f7ff fc62 	bl	8007b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082aa:	4b22      	ldr	r3, [pc, #136]	@ (8008334 <prvAddNewTaskToReadyList+0xe4>)
 80082ac:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082b0:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <prvAddNewTaskToReadyList+0xe8>)
 80082b2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80082b4:	4a21      	ldr	r2, [pc, #132]	@ (800833c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80082b6:	4922      	ldr	r1, [pc, #136]	@ (8008340 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80082b8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082ba:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80082bc:	3301      	adds	r3, #1
 80082be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082c2:	2301      	movs	r3, #1
 80082c4:	4093      	lsls	r3, r2
 80082c6:	4303      	orrs	r3, r0
 80082c8:	2014      	movs	r0, #20
 80082ca:	600b      	str	r3, [r1, #0]
 80082cc:	fb00 7002 	mla	r0, r0, r2, r7
 80082d0:	1d21      	adds	r1, r4, #4
 80082d2:	f7ff fc5a 	bl	8007b8a <vListInsertEnd>
	taskEXIT_CRITICAL();
 80082d6:	f000 fcbd 	bl	8008c54 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80082da:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <prvAddNewTaskToReadyList+0xf4>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	b173      	cbz	r3, 80082fe <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082e0:	6833      	ldr	r3, [r6, #0]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d209      	bcs.n	80082fe <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80082ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
}
 80082fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <prvAddNewTaskToReadyList+0xf4>)
 8008304:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008306:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008308:	2a00      	cmp	r2, #0
 800830a:	d1d3      	bne.n	80082b4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008310:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008312:	bf98      	it	ls
 8008314:	6034      	strls	r4, [r6, #0]
 8008316:	e7cd      	b.n	80082b4 <prvAddNewTaskToReadyList+0x64>
 8008318:	20002870 	.word	0x20002870
 800831c:	20002970 	.word	0x20002970
 8008320:	200028e4 	.word	0x200028e4
 8008324:	200028bc 	.word	0x200028bc
 8008328:	200028a0 	.word	0x200028a0
 800832c:	2000288c 	.word	0x2000288c
 8008330:	20002874 	.word	0x20002874
 8008334:	200028b8 	.word	0x200028b8
 8008338:	200028b4 	.word	0x200028b4
 800833c:	20002854 	.word	0x20002854
 8008340:	20002868 	.word	0x20002868
 8008344:	20002864 	.word	0x20002864
 8008348:	200028d0 	.word	0x200028d0

0800834c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800834e:	4b1a      	ldr	r3, [pc, #104]	@ (80083b8 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008350:	4d1a      	ldr	r5, [pc, #104]	@ (80083bc <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8008352:	681c      	ldr	r4, [r3, #0]
{
 8008354:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008356:	6828      	ldr	r0, [r5, #0]
 8008358:	3004      	adds	r0, #4
{
 800835a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835c:	f7ff fc37 	bl	8007bce <uxListRemove>
 8008360:	b940      	cbnz	r0, 8008374 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008362:	682a      	ldr	r2, [r5, #0]
 8008364:	4916      	ldr	r1, [pc, #88]	@ (80083c0 <prvAddCurrentTaskToDelayedList+0x74>)
 8008366:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008368:	680b      	ldr	r3, [r1, #0]
 800836a:	2201      	movs	r2, #1
 800836c:	4082      	lsls	r2, r0
 800836e:	ea23 0302 	bic.w	r3, r3, r2
 8008372:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008374:	1c73      	adds	r3, r6, #1
 8008376:	d107      	bne.n	8008388 <prvAddCurrentTaskToDelayedList+0x3c>
 8008378:	b137      	cbz	r7, 8008388 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800837a:	6829      	ldr	r1, [r5, #0]
 800837c:	4811      	ldr	r0, [pc, #68]	@ (80083c4 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800837e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008382:	3104      	adds	r1, #4
 8008384:	f7ff bc01 	b.w	8007b8a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	19a4      	adds	r4, r4, r6
 800838c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800838e:	d307      	bcc.n	80083a0 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008390:	4b0d      	ldr	r3, [pc, #52]	@ (80083c8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	6829      	ldr	r1, [r5, #0]
}
 8008396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800839a:	3104      	adds	r1, #4
 800839c:	f7ff bc00 	b.w	8007ba0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a0:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <prvAddCurrentTaskToDelayedList+0x80>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	6829      	ldr	r1, [r5, #0]
 80083a6:	3104      	adds	r1, #4
 80083a8:	f7ff fbfa 	bl	8007ba0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083ac:	4b08      	ldr	r3, [pc, #32]	@ (80083d0 <prvAddCurrentTaskToDelayedList+0x84>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80083b2:	bf88      	it	hi
 80083b4:	601c      	strhi	r4, [r3, #0]
}
 80083b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b8:	2000286c 	.word	0x2000286c
 80083bc:	20002970 	.word	0x20002970
 80083c0:	20002868 	.word	0x20002868
 80083c4:	20002874 	.word	0x20002874
 80083c8:	200028b4 	.word	0x200028b4
 80083cc:	200028b8 	.word	0x200028b8
 80083d0:	20002850 	.word	0x20002850

080083d4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d4:	4a06      	ldr	r2, [pc, #24]	@ (80083f0 <prvResetNextTaskUnblockTime+0x1c>)
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	4b06      	ldr	r3, [pc, #24]	@ (80083f4 <prvResetNextTaskUnblockTime+0x20>)
 80083dc:	b919      	cbnz	r1, 80083e6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083e2:	601a      	str	r2, [r3, #0]
}
 80083e4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083ea:	68d2      	ldr	r2, [r2, #12]
 80083ec:	6852      	ldr	r2, [r2, #4]
 80083ee:	e7f8      	b.n	80083e2 <prvResetNextTaskUnblockTime+0xe>
 80083f0:	200028b8 	.word	0x200028b8
 80083f4:	20002850 	.word	0x20002850

080083f8 <prvDeleteTCB>:
	{
 80083f8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083fa:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 80083fe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008400:	b93b      	cbnz	r3, 8008412 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008402:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008404:	f000 fdfe 	bl	8009004 <vPortFree>
				vPortFree( pxTCB );
 8008408:	4620      	mov	r0, r4
	}
 800840a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800840e:	f000 bdf9 	b.w	8009004 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008412:	2b01      	cmp	r3, #1
 8008414:	d0f9      	beq.n	800840a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008416:	2b02      	cmp	r3, #2
 8008418:	d008      	beq.n	800842c <prvDeleteTCB+0x34>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	e7fe      	b.n	800842a <prvDeleteTCB+0x32>
	}
 800842c:	bd10      	pop	{r4, pc}
	...

08008430 <prvIdleTask>:
{
 8008430:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008432:	4c13      	ldr	r4, [pc, #76]	@ (8008480 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008434:	4f13      	ldr	r7, [pc, #76]	@ (8008484 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008436:	4d14      	ldr	r5, [pc, #80]	@ (8008488 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	b973      	cbnz	r3, 800845a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800843c:	4b13      	ldr	r3, [pc, #76]	@ (800848c <prvIdleTask+0x5c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d9f8      	bls.n	8008436 <prvIdleTask+0x6>
				taskYIELD();
 8008444:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	e7ed      	b.n	8008436 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800845a:	f000 fbdb 	bl	8008c14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008462:	1d30      	adds	r0, r6, #4
 8008464:	f7ff fbb3 	bl	8007bce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	3b01      	subs	r3, #1
 800846c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008474:	f000 fbee 	bl	8008c54 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008478:	4630      	mov	r0, r6
 800847a:	f7ff ffbd 	bl	80083f8 <prvDeleteTCB>
 800847e:	e7db      	b.n	8008438 <prvIdleTask+0x8>
 8008480:	20002888 	.word	0x20002888
 8008484:	2000288c 	.word	0x2000288c
 8008488:	20002870 	.word	0x20002870
 800848c:	200028e4 	.word	0x200028e4

08008490 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008498:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800849c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800849e:	3a01      	subs	r2, #1
 80084a0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80084a4:	4699      	mov	r9, r3
 80084a6:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80084a8:	1e4b      	subs	r3, r1, #1
 80084aa:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084ae:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80084b2:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80084b8:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80084bc:	b108      	cbz	r0, 80084c2 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084be:	428b      	cmp	r3, r1
 80084c0:	d1f8      	bne.n	80084b4 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084c2:	9d08      	ldr	r5, [sp, #32]
 80084c4:	2d06      	cmp	r5, #6
 80084c6:	bf28      	it	cs
 80084c8:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084ca:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 80084ce:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 80084d2:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084d4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084d6:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084da:	f7ff fb53 	bl	8007b84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084de:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084e2:	f104 0018 	add.w	r0, r4, #24
 80084e6:	f7ff fb4d 	bl	8007b84 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80084ea:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084ee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084f2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084f4:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084f8:	464a      	mov	r2, r9
 80084fa:	4639      	mov	r1, r7
 80084fc:	4630      	mov	r0, r6
 80084fe:	f000 fb61 	bl	8008bc4 <pxPortInitialiseStack>
 8008502:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008504:	f1b8 0f00 	cmp.w	r8, #0
 8008508:	d001      	beq.n	800850e <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800850a:	f8c8 4000 	str.w	r4, [r8]
}
 800850e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008512 <xTaskCreateStatic>:
	{
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800851a:	b945      	cbnz	r5, 800852e <xTaskCreateStatic+0x1c>
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	e7fe      	b.n	800852c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800852e:	b944      	cbnz	r4, 8008542 <xTaskCreateStatic+0x30>
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	e7fe      	b.n	8008540 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008542:	2654      	movs	r6, #84	@ 0x54
 8008544:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008546:	9e05      	ldr	r6, [sp, #20]
 8008548:	2e54      	cmp	r6, #84	@ 0x54
 800854a:	d008      	beq.n	800855e <xTaskCreateStatic+0x4c>
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	e7fe      	b.n	800855c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800855e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008560:	2502      	movs	r5, #2
 8008562:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008566:	ad04      	add	r5, sp, #16
 8008568:	9501      	str	r5, [sp, #4]
 800856a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800856c:	9402      	str	r4, [sp, #8]
 800856e:	9500      	str	r5, [sp, #0]
 8008570:	f7ff ff8e 	bl	8008490 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008574:	4620      	mov	r0, r4
 8008576:	f7ff fe6b 	bl	8008250 <prvAddNewTaskToReadyList>
	}
 800857a:	9804      	ldr	r0, [sp, #16]
 800857c:	b006      	add	sp, #24
 800857e:	bd70      	pop	{r4, r5, r6, pc}

08008580 <xTaskCreate>:
	{
 8008580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008584:	4607      	mov	r7, r0
 8008586:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008588:	0090      	lsls	r0, r2, #2
	{
 800858a:	4688      	mov	r8, r1
 800858c:	4616      	mov	r6, r2
 800858e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008590:	f000 fca6 	bl	8008ee0 <pvPortMalloc>
			if( pxStack != NULL )
 8008594:	4605      	mov	r5, r0
 8008596:	b920      	cbnz	r0, 80085a2 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800859c:	b005      	add	sp, #20
 800859e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80085a2:	2054      	movs	r0, #84	@ 0x54
 80085a4:	f000 fc9c 	bl	8008ee0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80085a8:	4604      	mov	r4, r0
 80085aa:	b198      	cbz	r0, 80085d4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085ac:	2300      	movs	r3, #0
 80085ae:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80085b4:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ba:	9002      	str	r0, [sp, #8]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4632      	mov	r2, r6
 80085c0:	464b      	mov	r3, r9
 80085c2:	4641      	mov	r1, r8
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ff63 	bl	8008490 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fe40 	bl	8008250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085d0:	2001      	movs	r0, #1
 80085d2:	e7e3      	b.n	800859c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 fd15 	bl	8009004 <vPortFree>
		if( pxNewTCB != NULL )
 80085da:	e7dd      	b.n	8008598 <xTaskCreate+0x18>

080085dc <vTaskStartScheduler>:
{
 80085dc:	b510      	push	{r4, lr}
 80085de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085e0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085e2:	aa07      	add	r2, sp, #28
 80085e4:	a906      	add	r1, sp, #24
 80085e6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085e8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085ec:	f7fa fc48 	bl	8002e80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085f0:	9b05      	ldr	r3, [sp, #20]
 80085f2:	9302      	str	r3, [sp, #8]
 80085f4:	9b06      	ldr	r3, [sp, #24]
 80085f6:	9a07      	ldr	r2, [sp, #28]
 80085f8:	490f      	ldr	r1, [pc, #60]	@ (8008638 <vTaskStartScheduler+0x5c>)
 80085fa:	4810      	ldr	r0, [pc, #64]	@ (800863c <vTaskStartScheduler+0x60>)
 80085fc:	e9cd 4300 	strd	r4, r3, [sp]
 8008600:	4623      	mov	r3, r4
 8008602:	f7ff ff86 	bl	8008512 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008606:	b1a8      	cbz	r0, 8008634 <vTaskStartScheduler+0x58>
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008618:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <vTaskStartScheduler+0x64>)
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008620:	4b08      	ldr	r3, [pc, #32]	@ (8008644 <vTaskStartScheduler+0x68>)
 8008622:	2201      	movs	r2, #1
 8008624:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008626:	4b08      	ldr	r3, [pc, #32]	@ (8008648 <vTaskStartScheduler+0x6c>)
 8008628:	601c      	str	r4, [r3, #0]
}
 800862a:	b008      	add	sp, #32
 800862c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008630:	f000 bb80 	b.w	8008d34 <xPortStartScheduler>
}
 8008634:	b008      	add	sp, #32
 8008636:	bd10      	pop	{r4, pc}
 8008638:	080105a4 	.word	0x080105a4
 800863c:	08008431 	.word	0x08008431
 8008640:	20002850 	.word	0x20002850
 8008644:	20002864 	.word	0x20002864
 8008648:	2000286c 	.word	0x2000286c

0800864c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800864c:	4a02      	ldr	r2, [pc, #8]	@ (8008658 <vTaskSuspendAll+0xc>)
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	6013      	str	r3, [r2, #0]
}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000284c 	.word	0x2000284c

0800865c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865c:	4b40      	ldr	r3, [pc, #256]	@ (8008760 <xTaskIncrementTick+0x104>)
 800865e:	681b      	ldr	r3, [r3, #0]
{
 8008660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008664:	2b00      	cmp	r3, #0
 8008666:	d174      	bne.n	8008752 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008668:	4b3e      	ldr	r3, [pc, #248]	@ (8008764 <xTaskIncrementTick+0x108>)
 800866a:	681c      	ldr	r4, [r3, #0]
 800866c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800866e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008670:	b9bc      	cbnz	r4, 80086a2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008672:	4b3d      	ldr	r3, [pc, #244]	@ (8008768 <xTaskIncrementTick+0x10c>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	b142      	cbz	r2, 800868c <xTaskIncrementTick+0x30>
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	e7fe      	b.n	800868a <xTaskIncrementTick+0x2e>
 800868c:	4a37      	ldr	r2, [pc, #220]	@ (800876c <xTaskIncrementTick+0x110>)
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	6810      	ldr	r0, [r2, #0]
 8008692:	6018      	str	r0, [r3, #0]
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	4a36      	ldr	r2, [pc, #216]	@ (8008770 <xTaskIncrementTick+0x114>)
 8008698:	6813      	ldr	r3, [r2, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	6013      	str	r3, [r2, #0]
 800869e:	f7ff fe99 	bl	80083d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086a2:	4d34      	ldr	r5, [pc, #208]	@ (8008774 <xTaskIncrementTick+0x118>)
 80086a4:	4e34      	ldr	r6, [pc, #208]	@ (8008778 <xTaskIncrementTick+0x11c>)
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	4f34      	ldr	r7, [pc, #208]	@ (800877c <xTaskIncrementTick+0x120>)
 80086aa:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80086ac:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086b0:	d911      	bls.n	80086d6 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80086b6:	2114      	movs	r1, #20
 80086b8:	434a      	muls	r2, r1
 80086ba:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80086bc:	2a02      	cmp	r2, #2
 80086be:	bf28      	it	cs
 80086c0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80086c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008780 <xTaskIncrementTick+0x124>)
 80086c6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80086c8:	2a00      	cmp	r2, #0
}
 80086ca:	bf0c      	ite	eq
 80086cc:	4658      	moveq	r0, fp
 80086ce:	2001      	movne	r0, #1
 80086d0:	b003      	add	sp, #12
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d6:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8008768 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80086da:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8008788 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086de:	f8da 2000 	ldr.w	r2, [sl]
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	b91a      	cbnz	r2, 80086ee <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	602a      	str	r2, [r5, #0]
					break;
 80086ec:	e7e1      	b.n	80086b2 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086ee:	f8da 2000 	ldr.w	r2, [sl]
 80086f2:	68d2      	ldr	r2, [r2, #12]
 80086f4:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80086fc:	428c      	cmp	r4, r1
 80086fe:	d201      	bcs.n	8008704 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8008700:	6029      	str	r1, [r5, #0]
						break;
 8008702:	e7d6      	b.n	80086b2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008704:	f108 0304 	add.w	r3, r8, #4
 8008708:	4618      	mov	r0, r3
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	f7ff fa5f 	bl	8007bce <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008710:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8008714:	b119      	cbz	r1, 800871e <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008716:	f108 0018 	add.w	r0, r8, #24
 800871a:	f7ff fa58 	bl	8007bce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800871e:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008722:	f8d9 3000 	ldr.w	r3, [r9]
 8008726:	2201      	movs	r2, #1
 8008728:	fa02 f100 	lsl.w	r1, r2, r0
 800872c:	4319      	orrs	r1, r3
 800872e:	f04f 0c14 	mov.w	ip, #20
 8008732:	f8c9 1000 	str.w	r1, [r9]
 8008736:	fb0c 6000 	mla	r0, ip, r0, r6
 800873a:	9901      	ldr	r1, [sp, #4]
 800873c:	f7ff fa25 	bl	8007b8a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008740:	6838      	ldr	r0, [r7, #0]
 8008742:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008746:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008748:	4291      	cmp	r1, r2
 800874a:	bf28      	it	cs
 800874c:	f04f 0b01 	movcs.w	fp, #1
 8008750:	e7c5      	b.n	80086de <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8008752:	4a0c      	ldr	r2, [pc, #48]	@ (8008784 <xTaskIncrementTick+0x128>)
 8008754:	6813      	ldr	r3, [r2, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800875a:	f04f 0b00 	mov.w	fp, #0
 800875e:	e7b1      	b.n	80086c4 <xTaskIncrementTick+0x68>
 8008760:	2000284c 	.word	0x2000284c
 8008764:	2000286c 	.word	0x2000286c
 8008768:	200028b8 	.word	0x200028b8
 800876c:	200028b4 	.word	0x200028b4
 8008770:	20002858 	.word	0x20002858
 8008774:	20002850 	.word	0x20002850
 8008778:	200028e4 	.word	0x200028e4
 800877c:	20002970 	.word	0x20002970
 8008780:	2000285c 	.word	0x2000285c
 8008784:	20002860 	.word	0x20002860
 8008788:	20002868 	.word	0x20002868

0800878c <xTaskResumeAll>:
{
 800878c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008790:	4c31      	ldr	r4, [pc, #196]	@ (8008858 <xTaskResumeAll+0xcc>)
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	b943      	cbnz	r3, 80087a8 <xTaskResumeAll+0x1c>
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	e7fe      	b.n	80087a6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80087a8:	f000 fa34 	bl	8008c14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b2:	6824      	ldr	r4, [r4, #0]
 80087b4:	b12c      	cbz	r4, 80087c2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80087b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80087b8:	f000 fa4c 	bl	8008c54 <vPortExitCritical>
}
 80087bc:	4620      	mov	r0, r4
 80087be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087c2:	4b26      	ldr	r3, [pc, #152]	@ (800885c <xTaskResumeAll+0xd0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f5      	beq.n	80087b6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ca:	4d25      	ldr	r5, [pc, #148]	@ (8008860 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80087cc:	4e25      	ldr	r6, [pc, #148]	@ (8008864 <xTaskResumeAll+0xd8>)
 80087ce:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8008874 <xTaskResumeAll+0xe8>
 80087d2:	e01f      	b.n	8008814 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80087d4:	68eb      	ldr	r3, [r5, #12]
 80087d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087d8:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087dc:	f104 0018 	add.w	r0, r4, #24
 80087e0:	f7ff f9f5 	bl	8007bce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e4:	4648      	mov	r0, r9
 80087e6:	f7ff f9f2 	bl	8007bce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80087ec:	6831      	ldr	r1, [r6, #0]
 80087ee:	2701      	movs	r7, #1
 80087f0:	fa07 f302 	lsl.w	r3, r7, r2
 80087f4:	2014      	movs	r0, #20
 80087f6:	430b      	orrs	r3, r1
 80087f8:	fb00 8002 	mla	r0, r0, r2, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	6033      	str	r3, [r6, #0]
 8008800:	f7ff f9c3 	bl	8007b8a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008804:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <xTaskResumeAll+0xdc>)
 8008806:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d301      	bcc.n	8008814 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008810:	4b16      	ldr	r3, [pc, #88]	@ (800886c <xTaskResumeAll+0xe0>)
 8008812:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1dc      	bne.n	80087d4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800881a:	b10c      	cbz	r4, 8008820 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800881c:	f7ff fdda 	bl	80083d4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008820:	4d13      	ldr	r5, [pc, #76]	@ (8008870 <xTaskResumeAll+0xe4>)
 8008822:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008824:	b144      	cbz	r4, 8008838 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008826:	4e11      	ldr	r6, [pc, #68]	@ (800886c <xTaskResumeAll+0xe0>)
 8008828:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800882a:	f7ff ff17 	bl	800865c <xTaskIncrementTick>
 800882e:	b100      	cbz	r0, 8008832 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008830:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008832:	3c01      	subs	r4, #1
 8008834:	d1f9      	bne.n	800882a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008836:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008838:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <xTaskResumeAll+0xe0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0ba      	beq.n	80087b6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008840:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008848:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008854:	2401      	movs	r4, #1
 8008856:	e7af      	b.n	80087b8 <xTaskResumeAll+0x2c>
 8008858:	2000284c 	.word	0x2000284c
 800885c:	20002870 	.word	0x20002870
 8008860:	200028a0 	.word	0x200028a0
 8008864:	20002868 	.word	0x20002868
 8008868:	20002970 	.word	0x20002970
 800886c:	2000285c 	.word	0x2000285c
 8008870:	20002860 	.word	0x20002860
 8008874:	200028e4 	.word	0x200028e4

08008878 <vTaskDelay>:
	{
 8008878:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800887a:	b950      	cbnz	r0, 8008892 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800887c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008884:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	f3bf 8f6f 	isb	sy
	}
 8008890:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <vTaskDelay+0x44>)
 8008894:	6819      	ldr	r1, [r3, #0]
 8008896:	b141      	cbz	r1, 80088aa <vTaskDelay+0x32>
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	e7fe      	b.n	80088a8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80088aa:	f7ff fecf 	bl	800864c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088ae:	f7ff fd4d 	bl	800834c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80088b2:	f7ff ff6b 	bl	800878c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d0e0      	beq.n	800887c <vTaskDelay+0x4>
 80088ba:	e7e9      	b.n	8008890 <vTaskDelay+0x18>
 80088bc:	2000284c 	.word	0x2000284c

080088c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088c0:	4b17      	ldr	r3, [pc, #92]	@ (8008920 <vTaskSwitchContext+0x60>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	4b17      	ldr	r3, [pc, #92]	@ (8008924 <vTaskSwitchContext+0x64>)
{
 80088c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088c8:	b112      	cbz	r2, 80088d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80088ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80088d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80088d2:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <vTaskSwitchContext+0x68>)
 80088d4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088d6:	fab2 f282 	clz	r2, r2
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	f1c2 021f 	rsb	r2, r2, #31
 80088e0:	2314      	movs	r3, #20
 80088e2:	4912      	ldr	r1, [pc, #72]	@ (800892c <vTaskSwitchContext+0x6c>)
 80088e4:	4353      	muls	r3, r2
 80088e6:	18c8      	adds	r0, r1, r3
 80088e8:	58cc      	ldr	r4, [r1, r3]
 80088ea:	b944      	cbnz	r4, 80088fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	e7fe      	b.n	80088fc <vTaskSwitchContext+0x3c>
 80088fe:	6844      	ldr	r4, [r0, #4]
 8008900:	3308      	adds	r3, #8
 8008902:	6864      	ldr	r4, [r4, #4]
 8008904:	6044      	str	r4, [r0, #4]
 8008906:	440b      	add	r3, r1
 8008908:	429c      	cmp	r4, r3
 800890a:	bf04      	itt	eq
 800890c:	6863      	ldreq	r3, [r4, #4]
 800890e:	6043      	streq	r3, [r0, #4]
 8008910:	2314      	movs	r3, #20
 8008912:	fb03 1102 	mla	r1, r3, r2, r1
 8008916:	684b      	ldr	r3, [r1, #4]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	4b05      	ldr	r3, [pc, #20]	@ (8008930 <vTaskSwitchContext+0x70>)
 800891c:	e7d6      	b.n	80088cc <vTaskSwitchContext+0xc>
 800891e:	bf00      	nop
 8008920:	2000284c 	.word	0x2000284c
 8008924:	2000285c 	.word	0x2000285c
 8008928:	20002868 	.word	0x20002868
 800892c:	200028e4 	.word	0x200028e4
 8008930:	20002970 	.word	0x20002970

08008934 <vTaskPlaceOnEventList>:
{
 8008934:	b510      	push	{r4, lr}
 8008936:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008938:	b940      	cbnz	r0, 800894c <vTaskPlaceOnEventList+0x18>
 800893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	e7fe      	b.n	800894a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800894c:	4b05      	ldr	r3, [pc, #20]	@ (8008964 <vTaskPlaceOnEventList+0x30>)
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	3118      	adds	r1, #24
 8008952:	f7ff f925 	bl	8007ba0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008956:	4620      	mov	r0, r4
 8008958:	2101      	movs	r1, #1
}
 800895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800895e:	f7ff bcf5 	b.w	800834c <prvAddCurrentTaskToDelayedList>
 8008962:	bf00      	nop
 8008964:	20002970 	.word	0x20002970

08008968 <xTaskRemoveFromEventList>:
{
 8008968:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800896a:	68c3      	ldr	r3, [r0, #12]
 800896c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800896e:	b944      	cbnz	r4, 8008982 <xTaskRemoveFromEventList+0x1a>
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	e7fe      	b.n	8008980 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008982:	f104 0518 	add.w	r5, r4, #24
 8008986:	4628      	mov	r0, r5
 8008988:	f7ff f921 	bl	8007bce <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800898c:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <xTaskRemoveFromEventList+0x6c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	b9e3      	cbnz	r3, 80089cc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008992:	1d25      	adds	r5, r4, #4
 8008994:	4628      	mov	r0, r5
 8008996:	f7ff f91a 	bl	8007bce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800899a:	490f      	ldr	r1, [pc, #60]	@ (80089d8 <xTaskRemoveFromEventList+0x70>)
 800899c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800899e:	6808      	ldr	r0, [r1, #0]
 80089a0:	2301      	movs	r3, #1
 80089a2:	4093      	lsls	r3, r2
 80089a4:	4303      	orrs	r3, r0
 80089a6:	600b      	str	r3, [r1, #0]
 80089a8:	4b0c      	ldr	r3, [pc, #48]	@ (80089dc <xTaskRemoveFromEventList+0x74>)
 80089aa:	2014      	movs	r0, #20
 80089ac:	4629      	mov	r1, r5
 80089ae:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089b2:	f7ff f8ea 	bl	8007b8a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089b6:	4b0a      	ldr	r3, [pc, #40]	@ (80089e0 <xTaskRemoveFromEventList+0x78>)
 80089b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80089c0:	bf83      	ittte	hi
 80089c2:	4b08      	ldrhi	r3, [pc, #32]	@ (80089e4 <xTaskRemoveFromEventList+0x7c>)
 80089c4:	2001      	movhi	r0, #1
 80089c6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80089c8:	2000      	movls	r0, #0
}
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089cc:	4806      	ldr	r0, [pc, #24]	@ (80089e8 <xTaskRemoveFromEventList+0x80>)
 80089ce:	4629      	mov	r1, r5
 80089d0:	e7ef      	b.n	80089b2 <xTaskRemoveFromEventList+0x4a>
 80089d2:	bf00      	nop
 80089d4:	2000284c 	.word	0x2000284c
 80089d8:	20002868 	.word	0x20002868
 80089dc:	200028e4 	.word	0x200028e4
 80089e0:	20002970 	.word	0x20002970
 80089e4:	2000285c 	.word	0x2000285c
 80089e8:	200028a0 	.word	0x200028a0

080089ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089ec:	4b03      	ldr	r3, [pc, #12]	@ (80089fc <vTaskInternalSetTimeOutState+0x10>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089f2:	4b03      	ldr	r3, [pc, #12]	@ (8008a00 <vTaskInternalSetTimeOutState+0x14>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6043      	str	r3, [r0, #4]
}
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20002858 	.word	0x20002858
 8008a00:	2000286c 	.word	0x2000286c

08008a04 <xTaskCheckForTimeOut>:
{
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008a08:	4605      	mov	r5, r0
 8008a0a:	b940      	cbnz	r0, 8008a1e <xTaskCheckForTimeOut+0x1a>
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	e7fe      	b.n	8008a1c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008a1e:	b941      	cbnz	r1, 8008a32 <xTaskCheckForTimeOut+0x2e>
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	e7fe      	b.n	8008a30 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008a32:	f000 f8ef 	bl	8008c14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008a36:	4b0f      	ldr	r3, [pc, #60]	@ (8008a74 <xTaskCheckForTimeOut+0x70>)
 8008a38:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	d010      	beq.n	8008a62 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a40:	480d      	ldr	r0, [pc, #52]	@ (8008a78 <xTaskCheckForTimeOut+0x74>)
 8008a42:	682e      	ldr	r6, [r5, #0]
 8008a44:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a46:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a48:	4286      	cmp	r6, r0
 8008a4a:	d001      	beq.n	8008a50 <xTaskCheckForTimeOut+0x4c>
 8008a4c:	428a      	cmp	r2, r1
 8008a4e:	d90f      	bls.n	8008a70 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a50:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a52:	4283      	cmp	r3, r0
 8008a54:	d90a      	bls.n	8008a6c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008a56:	1a5b      	subs	r3, r3, r1
 8008a58:	4413      	add	r3, r2
 8008a5a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f7ff ffc5 	bl	80089ec <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008a62:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a64:	f000 f8f6 	bl	8008c54 <vPortExitCritical>
}
 8008a68:	4620      	mov	r0, r4
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008a70:	2401      	movs	r4, #1
 8008a72:	e7f7      	b.n	8008a64 <xTaskCheckForTimeOut+0x60>
 8008a74:	2000286c 	.word	0x2000286c
 8008a78:	20002858 	.word	0x20002858

08008a7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008a7c:	4b01      	ldr	r3, [pc, #4]	@ (8008a84 <vTaskMissedYield+0x8>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	4770      	bx	lr
 8008a84:	2000285c 	.word	0x2000285c

08008a88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008a88:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <xTaskGetSchedulerState+0x18>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	b133      	cbz	r3, 8008a9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8e:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <xTaskGetSchedulerState+0x1c>)
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	fab0 f080 	clz	r0, r0
 8008a96:	0940      	lsrs	r0, r0, #5
 8008a98:	0040      	lsls	r0, r0, #1
 8008a9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a9c:	2001      	movs	r0, #1
	}
 8008a9e:	4770      	bx	lr
 8008aa0:	20002864 	.word	0x20002864
 8008aa4:	2000284c 	.word	0x2000284c

08008aa8 <xTaskPriorityDisinherit>:
	{
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008aaa:	4604      	mov	r4, r0
 8008aac:	b908      	cbnz	r0, 8008ab2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008aae:	2000      	movs	r0, #0
	}
 8008ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008ab2:	4b22      	ldr	r3, [pc, #136]	@ (8008b3c <xTaskPriorityDisinherit+0x94>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4283      	cmp	r3, r0
 8008ab8:	d008      	beq.n	8008acc <xTaskPriorityDisinherit+0x24>
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	e7fe      	b.n	8008aca <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ace:	b943      	cbnz	r3, 8008ae2 <xTaskPriorityDisinherit+0x3a>
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	e7fe      	b.n	8008ae0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ae2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008ae4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8008ae6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ae8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008aea:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aec:	d0df      	beq.n	8008aae <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1dd      	bne.n	8008aae <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008af2:	1d06      	adds	r6, r0, #4
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7ff f86a 	bl	8007bce <uxListRemove>
 8008afa:	4f11      	ldr	r7, [pc, #68]	@ (8008b40 <xTaskPriorityDisinherit+0x98>)
 8008afc:	4a11      	ldr	r2, [pc, #68]	@ (8008b44 <xTaskPriorityDisinherit+0x9c>)
 8008afe:	b950      	cbnz	r0, 8008b16 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b00:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b02:	2314      	movs	r3, #20
 8008b04:	434b      	muls	r3, r1
 8008b06:	58fb      	ldr	r3, [r7, r3]
 8008b08:	b92b      	cbnz	r3, 8008b16 <xTaskPriorityDisinherit+0x6e>
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	2501      	movs	r5, #1
 8008b0e:	408d      	lsls	r5, r1
 8008b10:	ea23 0305 	bic.w	r3, r3, r5
 8008b14:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1a:	f1c3 0107 	rsb	r1, r3, #7
 8008b1e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b20:	6811      	ldr	r1, [r2, #0]
 8008b22:	2401      	movs	r4, #1
 8008b24:	fa04 f503 	lsl.w	r5, r4, r3
 8008b28:	2014      	movs	r0, #20
 8008b2a:	430d      	orrs	r5, r1
 8008b2c:	fb00 7003 	mla	r0, r0, r3, r7
 8008b30:	4631      	mov	r1, r6
 8008b32:	6015      	str	r5, [r2, #0]
 8008b34:	f7ff f829 	bl	8007b8a <vListInsertEnd>
					xReturn = pdTRUE;
 8008b38:	4620      	mov	r0, r4
		return xReturn;
 8008b3a:	e7b9      	b.n	8008ab0 <xTaskPriorityDisinherit+0x8>
 8008b3c:	20002970 	.word	0x20002970
 8008b40:	200028e4 	.word	0x200028e4
 8008b44:	20002868 	.word	0x20002868

08008b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b48:	4808      	ldr	r0, [pc, #32]	@ (8008b6c <prvPortStartFirstTask+0x24>)
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	6800      	ldr	r0, [r0, #0]
 8008b4e:	f380 8808 	msr	MSP, r0
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8814 	msr	CONTROL, r0
 8008b5a:	b662      	cpsie	i
 8008b5c:	b661      	cpsie	f
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	df00      	svc	0
 8008b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b6a:	0000      	.short	0x0000
 8008b6c:	e000ed08 	.word	0xe000ed08

08008b70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b70:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b80 <vPortEnableVFP+0x10>
 8008b74:	6801      	ldr	r1, [r0, #0]
 8008b76:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b7a:	6001      	str	r1, [r0, #0]
 8008b7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b7e:	0000      	.short	0x0000
 8008b80:	e000ed88 	.word	0xe000ed88

08008b84 <prvTaskExitError>:
{
 8008b84:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc0 <prvTaskExitError+0x3c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	d008      	beq.n	8008ba4 <prvTaskExitError+0x20>
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	e7fe      	b.n	8008ba2 <prvTaskExitError+0x1e>
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0fc      	beq.n	8008bb4 <prvTaskExitError+0x30>
}
 8008bba:	b002      	add	sp, #8
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000018 	.word	0x20000018

08008bc4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bc8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bcc:	4b07      	ldr	r3, [pc, #28]	@ (8008bec <pxPortInitialiseStack+0x28>)
 8008bce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bd2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bd6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bda:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bde:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008be2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008be6:	3844      	subs	r0, #68	@ 0x44
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	08008b85 	.word	0x08008b85

08008bf0 <SVC_Handler>:
	__asm volatile (
 8008bf0:	4b07      	ldr	r3, [pc, #28]	@ (8008c10 <pxCurrentTCBConst2>)
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	6808      	ldr	r0, [r1, #0]
 8008bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	f380 8809 	msr	PSP, r0
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	4770      	bx	lr
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst2>:
 8008c10:	20002970 	.word	0x20002970

08008c14 <vPortEnterCritical>:
 8008c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008c24:	4a0a      	ldr	r2, [pc, #40]	@ (8008c50 <vPortEnterCritical+0x3c>)
 8008c26:	6813      	ldr	r3, [r2, #0]
 8008c28:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008c2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008c2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008c2e:	d10e      	bne.n	8008c4e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c34:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	b143      	cbz	r3, 8008c4e <vPortEnterCritical+0x3a>
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	e7fe      	b.n	8008c4c <vPortEnterCritical+0x38>
}
 8008c4e:	4770      	bx	lr
 8008c50:	20000018 	.word	0x20000018

08008c54 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008c54:	4a08      	ldr	r2, [pc, #32]	@ (8008c78 <vPortExitCritical+0x24>)
 8008c56:	6813      	ldr	r3, [r2, #0]
 8008c58:	b943      	cbnz	r3, 8008c6c <vPortExitCritical+0x18>
 8008c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	e7fe      	b.n	8008c6a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c70:	b90b      	cbnz	r3, 8008c76 <vPortExitCritical+0x22>
	__asm volatile
 8008c72:	f383 8811 	msr	BASEPRI, r3
}
 8008c76:	4770      	bx	lr
 8008c78:	20000018 	.word	0x20000018
 8008c7c:	00000000 	.word	0x00000000

08008c80 <PendSV_Handler>:
	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7ff fe06 	bl	80088c0 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20002970 	.word	0x20002970

08008ce4 <SysTick_Handler>:
{
 8008ce4:	b508      	push	{r3, lr}
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008cf6:	f7ff fcb1 	bl	800865c <xTaskIncrementTick>
 8008cfa:	b128      	cbz	r0, 8008d08 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f383 8811 	msr	BASEPRI, r3
}
 8008d0e:	bd08      	pop	{r3, pc}

08008d10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8008d14:	2300      	movs	r3, #0
 8008d16:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d18:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1a:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <vPortSetupTimerInterrupt+0x20>)
 8008d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d26:	3b01      	subs	r3, #1
 8008d28:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2a:	2307      	movs	r3, #7
 8008d2c:	6113      	str	r3, [r2, #16]
}
 8008d2e:	4770      	bx	lr
 8008d30:	2000000c 	.word	0x2000000c

08008d34 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d34:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8008d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d3a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8008d3e:	4a38      	ldr	r2, [pc, #224]	@ (8008e20 <xPortStartScheduler+0xec>)
 8008d40:	4291      	cmp	r1, r2
 8008d42:	d108      	bne.n	8008d56 <xPortStartScheduler+0x22>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	e7fe      	b.n	8008d54 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d56:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8008d5a:	4b32      	ldr	r3, [pc, #200]	@ (8008e24 <xPortStartScheduler+0xf0>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d108      	bne.n	8008d72 <xPortStartScheduler+0x3e>
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	e7fe      	b.n	8008d70 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d72:	4b2d      	ldr	r3, [pc, #180]	@ (8008e28 <xPortStartScheduler+0xf4>)
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d7a:	22ff      	movs	r2, #255	@ 0xff
 8008d7c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d7e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d80:	4a2a      	ldr	r2, [pc, #168]	@ (8008e2c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d90:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d92:	4a27      	ldr	r2, [pc, #156]	@ (8008e30 <xPortStartScheduler+0xfc>)
 8008d94:	2307      	movs	r3, #7
 8008d96:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d98:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8008d9c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d9e:	0609      	lsls	r1, r1, #24
 8008da0:	d40a      	bmi.n	8008db8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d011      	beq.n	8008dca <xPortStartScheduler+0x96>
 8008da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	e7fe      	b.n	8008db6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8008db8:	3b01      	subs	r3, #1
 8008dba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f88d 3003 	strb.w	r3, [sp, #3]
 8008dc8:	e7e6      	b.n	8008d98 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008dce:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	4a15      	ldr	r2, [pc, #84]	@ (8008e28 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dd4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ddc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008de4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008de8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008dec:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008df0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8008df4:	f7ff ff8c 	bl	8008d10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008df8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <xPortStartScheduler+0x100>)
 8008dfa:	2500      	movs	r5, #0
 8008dfc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008dfe:	f7ff feb7 	bl	8008b70 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e02:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8008e06:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e0a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8008e0e:	f7ff fe9b 	bl	8008b48 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008e12:	f7ff fd55 	bl	80088c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e16:	f7ff feb5 	bl	8008b84 <prvTaskExitError>
}
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	b003      	add	sp, #12
 8008e1e:	bd30      	pop	{r4, r5, pc}
 8008e20:	410fc271 	.word	0x410fc271
 8008e24:	410fc270 	.word	0x410fc270
 8008e28:	e000e400 	.word	0xe000e400
 8008e2c:	20002978 	.word	0x20002978
 8008e30:	20002974 	.word	0x20002974
 8008e34:	20000018 	.word	0x20000018

08008e38 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e38:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e3c:	2b0f      	cmp	r3, #15
 8008e3e:	d90e      	bls.n	8008e5e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e40:	4a11      	ldr	r2, [pc, #68]	@ (8008e88 <vPortValidateInterruptPriority+0x50>)
 8008e42:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e44:	4a11      	ldr	r2, [pc, #68]	@ (8008e8c <vPortValidateInterruptPriority+0x54>)
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d908      	bls.n	8008e5e <vPortValidateInterruptPriority+0x26>
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	e7fe      	b.n	8008e5c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e5e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e62:	4a0b      	ldr	r2, [pc, #44]	@ (8008e90 <vPortValidateInterruptPriority+0x58>)
 8008e64:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d908      	bls.n	8008e84 <vPortValidateInterruptPriority+0x4c>
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	e7fe      	b.n	8008e82 <vPortValidateInterruptPriority+0x4a>
	}
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	e000e3f0 	.word	0xe000e3f0
 8008e8c:	20002978 	.word	0x20002978
 8008e90:	20002974 	.word	0x20002974

08008e94 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e94:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e96:	4b10      	ldr	r3, [pc, #64]	@ (8008ed8 <prvInsertBlockIntoFreeList+0x44>)
 8008e98:	461a      	mov	r2, r3
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4283      	cmp	r3, r0
 8008e9e:	d3fb      	bcc.n	8008e98 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ea0:	6854      	ldr	r4, [r2, #4]
 8008ea2:	1911      	adds	r1, r2, r4
 8008ea4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6841      	ldreq	r1, [r0, #4]
 8008eaa:	4610      	moveq	r0, r2
 8008eac:	1909      	addeq	r1, r1, r4
 8008eae:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eb0:	6844      	ldr	r4, [r0, #4]
 8008eb2:	1901      	adds	r1, r0, r4
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	d10c      	bne.n	8008ed2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eb8:	4908      	ldr	r1, [pc, #32]	@ (8008edc <prvInsertBlockIntoFreeList+0x48>)
 8008eba:	6809      	ldr	r1, [r1, #0]
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	d003      	beq.n	8008ec8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ec0:	6859      	ldr	r1, [r3, #4]
 8008ec2:	4421      	add	r1, r4
 8008ec4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ec6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ec8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eca:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ecc:	bf18      	it	ne
 8008ece:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	e7f8      	b.n	8008ec8 <prvInsertBlockIntoFreeList+0x34>
 8008ed6:	bf00      	nop
 8008ed8:	2000298c 	.word	0x2000298c
 8008edc:	20002988 	.word	0x20002988

08008ee0 <pvPortMalloc>:
{
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008ee6:	f7ff fbb1 	bl	800864c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008eea:	493f      	ldr	r1, [pc, #252]	@ (8008fe8 <pvPortMalloc+0x108>)
 8008eec:	4d3f      	ldr	r5, [pc, #252]	@ (8008fec <pvPortMalloc+0x10c>)
 8008eee:	680b      	ldr	r3, [r1, #0]
 8008ef0:	b9fb      	cbnz	r3, 8008f32 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8008ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8008ff0 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ef4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ef6:	bf1c      	itt	ne
 8008ef8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008efa:	4b3e      	ldrne	r3, [pc, #248]	@ (8008ff4 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008efc:	4e3e      	ldr	r6, [pc, #248]	@ (8008ff8 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008efe:	bf1a      	itte	ne
 8008f00:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f04:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f06:	f646 5360 	movweq	r3, #28000	@ 0x6d60
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f0a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008f0c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008f12:	2000      	movs	r0, #0
 8008f14:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f16:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8008f18:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f1c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f1e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8008f22:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f24:	4b35      	ldr	r3, [pc, #212]	@ (8008ffc <pvPortMalloc+0x11c>)
 8008f26:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f28:	4b35      	ldr	r3, [pc, #212]	@ (8009000 <pvPortMalloc+0x120>)
 8008f2a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008f30:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f32:	682e      	ldr	r6, [r5, #0]
 8008f34:	4226      	tst	r6, r4
 8008f36:	d152      	bne.n	8008fde <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	d043      	beq.n	8008fc4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8008f3c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f40:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f42:	bf1c      	itt	ne
 8008f44:	f023 0307 	bicne.w	r3, r3, #7
 8008f48:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d047      	beq.n	8008fde <pvPortMalloc+0xfe>
 8008f4e:	4f2c      	ldr	r7, [pc, #176]	@ (8009000 <pvPortMalloc+0x120>)
 8008f50:	683c      	ldr	r4, [r7, #0]
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d343      	bcc.n	8008fde <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8008f56:	4a28      	ldr	r2, [pc, #160]	@ (8008ff8 <pvPortMalloc+0x118>)
 8008f58:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f5a:	6868      	ldr	r0, [r5, #4]
 8008f5c:	4298      	cmp	r0, r3
 8008f5e:	d204      	bcs.n	8008f6a <pvPortMalloc+0x8a>
 8008f60:	f8d5 c000 	ldr.w	ip, [r5]
 8008f64:	f1bc 0f00 	cmp.w	ip, #0
 8008f68:	d115      	bne.n	8008f96 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008f6a:	6809      	ldr	r1, [r1, #0]
 8008f6c:	42a9      	cmp	r1, r5
 8008f6e:	d036      	beq.n	8008fde <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f70:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f72:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f76:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f78:	1ac2      	subs	r2, r0, r3
 8008f7a:	2a10      	cmp	r2, #16
 8008f7c:	d912      	bls.n	8008fa4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f7e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f80:	0741      	lsls	r1, r0, #29
 8008f82:	d00b      	beq.n	8008f9c <pvPortMalloc+0xbc>
 8008f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	e7fe      	b.n	8008f94 <pvPortMalloc+0xb4>
 8008f96:	462a      	mov	r2, r5
 8008f98:	4665      	mov	r5, ip
 8008f9a:	e7de      	b.n	8008f5a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f9c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f9e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fa0:	f7ff ff78 	bl	8008e94 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fa4:	4915      	ldr	r1, [pc, #84]	@ (8008ffc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fa6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fa8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008faa:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fac:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fae:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8008fb2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fb6:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fb8:	bf38      	it	cc
 8008fba:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fbc:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fbe:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8008fc2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008fc4:	f7ff fbe2 	bl	800878c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc8:	0763      	lsls	r3, r4, #29
 8008fca:	d00a      	beq.n	8008fe2 <pvPortMalloc+0x102>
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	e7fe      	b.n	8008fdc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8008fde:	2400      	movs	r4, #0
 8008fe0:	e7f0      	b.n	8008fc4 <pvPortMalloc+0xe4>
}
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	20002988 	.word	0x20002988
 8008fec:	2000297c 	.word	0x2000297c
 8008ff0:	20002994 	.word	0x20002994
 8008ff4:	200096f4 	.word	0x200096f4
 8008ff8:	2000298c 	.word	0x2000298c
 8008ffc:	20002980 	.word	0x20002980
 8009000:	20002984 	.word	0x20002984

08009004 <vPortFree>:
{
 8009004:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009006:	4604      	mov	r4, r0
 8009008:	b370      	cbz	r0, 8009068 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800900a:	4a18      	ldr	r2, [pc, #96]	@ (800906c <vPortFree+0x68>)
 800900c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	4213      	tst	r3, r2
 8009014:	d108      	bne.n	8009028 <vPortFree+0x24>
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	e7fe      	b.n	8009026 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009028:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800902c:	b141      	cbz	r1, 8009040 <vPortFree+0x3c>
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	e7fe      	b.n	800903e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009040:	ea23 0302 	bic.w	r3, r3, r2
 8009044:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009048:	f7ff fb00 	bl	800864c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	4a08      	ldr	r2, [pc, #32]	@ (8009070 <vPortFree+0x6c>)
 800904e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009052:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009054:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009058:	440b      	add	r3, r1
 800905a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905c:	f7ff ff1a 	bl	8008e94 <prvInsertBlockIntoFreeList>
}
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009064:	f7ff bb92 	b.w	800878c <xTaskResumeAll>
}
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	2000297c 	.word	0x2000297c
 8009070:	20002984 	.word	0x20002984

08009074 <atoi>:
 8009074:	220a      	movs	r2, #10
 8009076:	2100      	movs	r1, #0
 8009078:	f000 bf44 	b.w	8009f04 <strtol>

0800907c <malloc>:
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <malloc+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f000 b82d 	b.w	80090e0 <_malloc_r>
 8009086:	bf00      	nop
 8009088:	2000019c 	.word	0x2000019c

0800908c <free>:
 800908c:	4b02      	ldr	r3, [pc, #8]	@ (8009098 <free+0xc>)
 800908e:	4601      	mov	r1, r0
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	f003 bc39 	b.w	800c908 <_free_r>
 8009096:	bf00      	nop
 8009098:	2000019c 	.word	0x2000019c

0800909c <sbrk_aligned>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	4e0f      	ldr	r6, [pc, #60]	@ (80090dc <sbrk_aligned+0x40>)
 80090a0:	460c      	mov	r4, r1
 80090a2:	6831      	ldr	r1, [r6, #0]
 80090a4:	4605      	mov	r5, r0
 80090a6:	b911      	cbnz	r1, 80090ae <sbrk_aligned+0x12>
 80090a8:	f002 fd60 	bl	800bb6c <_sbrk_r>
 80090ac:	6030      	str	r0, [r6, #0]
 80090ae:	4621      	mov	r1, r4
 80090b0:	4628      	mov	r0, r5
 80090b2:	f002 fd5b 	bl	800bb6c <_sbrk_r>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	d103      	bne.n	80090c2 <sbrk_aligned+0x26>
 80090ba:	f04f 34ff 	mov.w	r4, #4294967295
 80090be:	4620      	mov	r0, r4
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	1cc4      	adds	r4, r0, #3
 80090c4:	f024 0403 	bic.w	r4, r4, #3
 80090c8:	42a0      	cmp	r0, r4
 80090ca:	d0f8      	beq.n	80090be <sbrk_aligned+0x22>
 80090cc:	1a21      	subs	r1, r4, r0
 80090ce:	4628      	mov	r0, r5
 80090d0:	f002 fd4c 	bl	800bb6c <_sbrk_r>
 80090d4:	3001      	adds	r0, #1
 80090d6:	d1f2      	bne.n	80090be <sbrk_aligned+0x22>
 80090d8:	e7ef      	b.n	80090ba <sbrk_aligned+0x1e>
 80090da:	bf00      	nop
 80090dc:	200096f4 	.word	0x200096f4

080090e0 <_malloc_r>:
 80090e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	1ccd      	adds	r5, r1, #3
 80090e6:	f025 0503 	bic.w	r5, r5, #3
 80090ea:	3508      	adds	r5, #8
 80090ec:	2d0c      	cmp	r5, #12
 80090ee:	bf38      	it	cc
 80090f0:	250c      	movcc	r5, #12
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	4606      	mov	r6, r0
 80090f6:	db01      	blt.n	80090fc <_malloc_r+0x1c>
 80090f8:	42a9      	cmp	r1, r5
 80090fa:	d904      	bls.n	8009106 <_malloc_r+0x26>
 80090fc:	230c      	movs	r3, #12
 80090fe:	6033      	str	r3, [r6, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091dc <_malloc_r+0xfc>
 800910a:	f000 f869 	bl	80091e0 <__malloc_lock>
 800910e:	f8d8 3000 	ldr.w	r3, [r8]
 8009112:	461c      	mov	r4, r3
 8009114:	bb44      	cbnz	r4, 8009168 <_malloc_r+0x88>
 8009116:	4629      	mov	r1, r5
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff ffbf 	bl	800909c <sbrk_aligned>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	4604      	mov	r4, r0
 8009122:	d158      	bne.n	80091d6 <_malloc_r+0xf6>
 8009124:	f8d8 4000 	ldr.w	r4, [r8]
 8009128:	4627      	mov	r7, r4
 800912a:	2f00      	cmp	r7, #0
 800912c:	d143      	bne.n	80091b6 <_malloc_r+0xd6>
 800912e:	2c00      	cmp	r4, #0
 8009130:	d04b      	beq.n	80091ca <_malloc_r+0xea>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	4639      	mov	r1, r7
 8009136:	4630      	mov	r0, r6
 8009138:	eb04 0903 	add.w	r9, r4, r3
 800913c:	f002 fd16 	bl	800bb6c <_sbrk_r>
 8009140:	4581      	cmp	r9, r0
 8009142:	d142      	bne.n	80091ca <_malloc_r+0xea>
 8009144:	6821      	ldr	r1, [r4, #0]
 8009146:	1a6d      	subs	r5, r5, r1
 8009148:	4629      	mov	r1, r5
 800914a:	4630      	mov	r0, r6
 800914c:	f7ff ffa6 	bl	800909c <sbrk_aligned>
 8009150:	3001      	adds	r0, #1
 8009152:	d03a      	beq.n	80091ca <_malloc_r+0xea>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	442b      	add	r3, r5
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	f8d8 3000 	ldr.w	r3, [r8]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	bb62      	cbnz	r2, 80091bc <_malloc_r+0xdc>
 8009162:	f8c8 7000 	str.w	r7, [r8]
 8009166:	e00f      	b.n	8009188 <_malloc_r+0xa8>
 8009168:	6822      	ldr	r2, [r4, #0]
 800916a:	1b52      	subs	r2, r2, r5
 800916c:	d420      	bmi.n	80091b0 <_malloc_r+0xd0>
 800916e:	2a0b      	cmp	r2, #11
 8009170:	d917      	bls.n	80091a2 <_malloc_r+0xc2>
 8009172:	1961      	adds	r1, r4, r5
 8009174:	42a3      	cmp	r3, r4
 8009176:	6025      	str	r5, [r4, #0]
 8009178:	bf18      	it	ne
 800917a:	6059      	strne	r1, [r3, #4]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	bf08      	it	eq
 8009180:	f8c8 1000 	streq.w	r1, [r8]
 8009184:	5162      	str	r2, [r4, r5]
 8009186:	604b      	str	r3, [r1, #4]
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f82f 	bl	80091ec <__malloc_unlock>
 800918e:	f104 000b 	add.w	r0, r4, #11
 8009192:	1d23      	adds	r3, r4, #4
 8009194:	f020 0007 	bic.w	r0, r0, #7
 8009198:	1ac2      	subs	r2, r0, r3
 800919a:	bf1c      	itt	ne
 800919c:	1a1b      	subne	r3, r3, r0
 800919e:	50a3      	strne	r3, [r4, r2]
 80091a0:	e7af      	b.n	8009102 <_malloc_r+0x22>
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	bf0c      	ite	eq
 80091a8:	f8c8 2000 	streq.w	r2, [r8]
 80091ac:	605a      	strne	r2, [r3, #4]
 80091ae:	e7eb      	b.n	8009188 <_malloc_r+0xa8>
 80091b0:	4623      	mov	r3, r4
 80091b2:	6864      	ldr	r4, [r4, #4]
 80091b4:	e7ae      	b.n	8009114 <_malloc_r+0x34>
 80091b6:	463c      	mov	r4, r7
 80091b8:	687f      	ldr	r7, [r7, #4]
 80091ba:	e7b6      	b.n	800912a <_malloc_r+0x4a>
 80091bc:	461a      	mov	r2, r3
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d1fb      	bne.n	80091bc <_malloc_r+0xdc>
 80091c4:	2300      	movs	r3, #0
 80091c6:	6053      	str	r3, [r2, #4]
 80091c8:	e7de      	b.n	8009188 <_malloc_r+0xa8>
 80091ca:	230c      	movs	r3, #12
 80091cc:	6033      	str	r3, [r6, #0]
 80091ce:	4630      	mov	r0, r6
 80091d0:	f000 f80c 	bl	80091ec <__malloc_unlock>
 80091d4:	e794      	b.n	8009100 <_malloc_r+0x20>
 80091d6:	6005      	str	r5, [r0, #0]
 80091d8:	e7d6      	b.n	8009188 <_malloc_r+0xa8>
 80091da:	bf00      	nop
 80091dc:	200096f8 	.word	0x200096f8

080091e0 <__malloc_lock>:
 80091e0:	4801      	ldr	r0, [pc, #4]	@ (80091e8 <__malloc_lock+0x8>)
 80091e2:	f002 bd11 	b.w	800bc08 <__retarget_lock_acquire_recursive>
 80091e6:	bf00      	nop
 80091e8:	20009862 	.word	0x20009862

080091ec <__malloc_unlock>:
 80091ec:	4801      	ldr	r0, [pc, #4]	@ (80091f4 <__malloc_unlock+0x8>)
 80091ee:	f002 bd0d 	b.w	800bc0c <__retarget_lock_release_recursive>
 80091f2:	bf00      	nop
 80091f4:	20009862 	.word	0x20009862

080091f8 <sulp>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4604      	mov	r4, r0
 80091fc:	460d      	mov	r5, r1
 80091fe:	ec45 4b10 	vmov	d0, r4, r5
 8009202:	4616      	mov	r6, r2
 8009204:	f004 face 	bl	800d7a4 <__ulp>
 8009208:	ec51 0b10 	vmov	r0, r1, d0
 800920c:	b17e      	cbz	r6, 800922e <sulp+0x36>
 800920e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009212:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009216:	2b00      	cmp	r3, #0
 8009218:	dd09      	ble.n	800922e <sulp+0x36>
 800921a:	051b      	lsls	r3, r3, #20
 800921c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009220:	2400      	movs	r4, #0
 8009222:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009226:	4622      	mov	r2, r4
 8009228:	462b      	mov	r3, r5
 800922a:	f7f7 f9f5 	bl	8000618 <__aeabi_dmul>
 800922e:	ec41 0b10 	vmov	d0, r0, r1
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	0000      	movs	r0, r0
	...

08009238 <_strtod_l>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	b09f      	sub	sp, #124	@ 0x7c
 800923e:	460c      	mov	r4, r1
 8009240:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009242:	2200      	movs	r2, #0
 8009244:	921a      	str	r2, [sp, #104]	@ 0x68
 8009246:	9005      	str	r0, [sp, #20]
 8009248:	f04f 0a00 	mov.w	sl, #0
 800924c:	f04f 0b00 	mov.w	fp, #0
 8009250:	460a      	mov	r2, r1
 8009252:	9219      	str	r2, [sp, #100]	@ 0x64
 8009254:	7811      	ldrb	r1, [r2, #0]
 8009256:	292b      	cmp	r1, #43	@ 0x2b
 8009258:	d04a      	beq.n	80092f0 <_strtod_l+0xb8>
 800925a:	d838      	bhi.n	80092ce <_strtod_l+0x96>
 800925c:	290d      	cmp	r1, #13
 800925e:	d832      	bhi.n	80092c6 <_strtod_l+0x8e>
 8009260:	2908      	cmp	r1, #8
 8009262:	d832      	bhi.n	80092ca <_strtod_l+0x92>
 8009264:	2900      	cmp	r1, #0
 8009266:	d03b      	beq.n	80092e0 <_strtod_l+0xa8>
 8009268:	2200      	movs	r2, #0
 800926a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800926c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800926e:	782a      	ldrb	r2, [r5, #0]
 8009270:	2a30      	cmp	r2, #48	@ 0x30
 8009272:	f040 80b3 	bne.w	80093dc <_strtod_l+0x1a4>
 8009276:	786a      	ldrb	r2, [r5, #1]
 8009278:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800927c:	2a58      	cmp	r2, #88	@ 0x58
 800927e:	d16e      	bne.n	800935e <_strtod_l+0x126>
 8009280:	9302      	str	r3, [sp, #8]
 8009282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	ab1a      	add	r3, sp, #104	@ 0x68
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	4a8e      	ldr	r2, [pc, #568]	@ (80094c4 <_strtod_l+0x28c>)
 800928c:	9805      	ldr	r0, [sp, #20]
 800928e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009290:	a919      	add	r1, sp, #100	@ 0x64
 8009292:	f003 fbeb 	bl	800ca6c <__gethex>
 8009296:	f010 060f 	ands.w	r6, r0, #15
 800929a:	4604      	mov	r4, r0
 800929c:	d005      	beq.n	80092aa <_strtod_l+0x72>
 800929e:	2e06      	cmp	r6, #6
 80092a0:	d128      	bne.n	80092f4 <_strtod_l+0xbc>
 80092a2:	3501      	adds	r5, #1
 80092a4:	2300      	movs	r3, #0
 80092a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80092a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 858e 	bne.w	8009dce <_strtod_l+0xb96>
 80092b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092b4:	b1cb      	cbz	r3, 80092ea <_strtod_l+0xb2>
 80092b6:	4652      	mov	r2, sl
 80092b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80092bc:	ec43 2b10 	vmov	d0, r2, r3
 80092c0:	b01f      	add	sp, #124	@ 0x7c
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	2920      	cmp	r1, #32
 80092c8:	d1ce      	bne.n	8009268 <_strtod_l+0x30>
 80092ca:	3201      	adds	r2, #1
 80092cc:	e7c1      	b.n	8009252 <_strtod_l+0x1a>
 80092ce:	292d      	cmp	r1, #45	@ 0x2d
 80092d0:	d1ca      	bne.n	8009268 <_strtod_l+0x30>
 80092d2:	2101      	movs	r1, #1
 80092d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092d6:	1c51      	adds	r1, r2, #1
 80092d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80092da:	7852      	ldrb	r2, [r2, #1]
 80092dc:	2a00      	cmp	r2, #0
 80092de:	d1c5      	bne.n	800926c <_strtod_l+0x34>
 80092e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f040 8570 	bne.w	8009dca <_strtod_l+0xb92>
 80092ea:	4652      	mov	r2, sl
 80092ec:	465b      	mov	r3, fp
 80092ee:	e7e5      	b.n	80092bc <_strtod_l+0x84>
 80092f0:	2100      	movs	r1, #0
 80092f2:	e7ef      	b.n	80092d4 <_strtod_l+0x9c>
 80092f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092f6:	b13a      	cbz	r2, 8009308 <_strtod_l+0xd0>
 80092f8:	2135      	movs	r1, #53	@ 0x35
 80092fa:	a81c      	add	r0, sp, #112	@ 0x70
 80092fc:	f004 fb4c 	bl	800d998 <__copybits>
 8009300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009302:	9805      	ldr	r0, [sp, #20]
 8009304:	f003 ff1a 	bl	800d13c <_Bfree>
 8009308:	3e01      	subs	r6, #1
 800930a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800930c:	2e04      	cmp	r6, #4
 800930e:	d806      	bhi.n	800931e <_strtod_l+0xe6>
 8009310:	e8df f006 	tbb	[pc, r6]
 8009314:	201d0314 	.word	0x201d0314
 8009318:	14          	.byte	0x14
 8009319:	00          	.byte	0x00
 800931a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800931e:	05e1      	lsls	r1, r4, #23
 8009320:	bf48      	it	mi
 8009322:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800932a:	0d1b      	lsrs	r3, r3, #20
 800932c:	051b      	lsls	r3, r3, #20
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1bb      	bne.n	80092aa <_strtod_l+0x72>
 8009332:	f002 fc3d 	bl	800bbb0 <__errno>
 8009336:	2322      	movs	r3, #34	@ 0x22
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	e7b6      	b.n	80092aa <_strtod_l+0x72>
 800933c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009340:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009344:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009348:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800934c:	e7e7      	b.n	800931e <_strtod_l+0xe6>
 800934e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80094cc <_strtod_l+0x294>
 8009352:	e7e4      	b.n	800931e <_strtod_l+0xe6>
 8009354:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009358:	f04f 3aff 	mov.w	sl, #4294967295
 800935c:	e7df      	b.n	800931e <_strtod_l+0xe6>
 800935e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	9219      	str	r2, [sp, #100]	@ 0x64
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b30      	cmp	r3, #48	@ 0x30
 8009368:	d0f9      	beq.n	800935e <_strtod_l+0x126>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d09d      	beq.n	80092aa <_strtod_l+0x72>
 800936e:	2301      	movs	r3, #1
 8009370:	9309      	str	r3, [sp, #36]	@ 0x24
 8009372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009374:	930c      	str	r3, [sp, #48]	@ 0x30
 8009376:	2300      	movs	r3, #0
 8009378:	9308      	str	r3, [sp, #32]
 800937a:	930a      	str	r3, [sp, #40]	@ 0x28
 800937c:	461f      	mov	r7, r3
 800937e:	220a      	movs	r2, #10
 8009380:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009382:	7805      	ldrb	r5, [r0, #0]
 8009384:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009388:	b2d9      	uxtb	r1, r3
 800938a:	2909      	cmp	r1, #9
 800938c:	d928      	bls.n	80093e0 <_strtod_l+0x1a8>
 800938e:	494e      	ldr	r1, [pc, #312]	@ (80094c8 <_strtod_l+0x290>)
 8009390:	2201      	movs	r2, #1
 8009392:	f001 fe00 	bl	800af96 <strncmp>
 8009396:	2800      	cmp	r0, #0
 8009398:	d032      	beq.n	8009400 <_strtod_l+0x1c8>
 800939a:	2000      	movs	r0, #0
 800939c:	462a      	mov	r2, r5
 800939e:	4681      	mov	r9, r0
 80093a0:	463d      	mov	r5, r7
 80093a2:	4603      	mov	r3, r0
 80093a4:	2a65      	cmp	r2, #101	@ 0x65
 80093a6:	d001      	beq.n	80093ac <_strtod_l+0x174>
 80093a8:	2a45      	cmp	r2, #69	@ 0x45
 80093aa:	d114      	bne.n	80093d6 <_strtod_l+0x19e>
 80093ac:	b91d      	cbnz	r5, 80093b6 <_strtod_l+0x17e>
 80093ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b0:	4302      	orrs	r2, r0
 80093b2:	d095      	beq.n	80092e0 <_strtod_l+0xa8>
 80093b4:	2500      	movs	r5, #0
 80093b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093b8:	1c62      	adds	r2, r4, #1
 80093ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80093bc:	7862      	ldrb	r2, [r4, #1]
 80093be:	2a2b      	cmp	r2, #43	@ 0x2b
 80093c0:	d077      	beq.n	80094b2 <_strtod_l+0x27a>
 80093c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80093c4:	d07b      	beq.n	80094be <_strtod_l+0x286>
 80093c6:	f04f 0c00 	mov.w	ip, #0
 80093ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093ce:	2909      	cmp	r1, #9
 80093d0:	f240 8082 	bls.w	80094d8 <_strtod_l+0x2a0>
 80093d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	e0a2      	b.n	8009522 <_strtod_l+0x2ea>
 80093dc:	2300      	movs	r3, #0
 80093de:	e7c7      	b.n	8009370 <_strtod_l+0x138>
 80093e0:	2f08      	cmp	r7, #8
 80093e2:	bfd5      	itete	le
 80093e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80093e6:	9908      	ldrgt	r1, [sp, #32]
 80093e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80093ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80093f0:	f100 0001 	add.w	r0, r0, #1
 80093f4:	bfd4      	ite	le
 80093f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80093f8:	9308      	strgt	r3, [sp, #32]
 80093fa:	3701      	adds	r7, #1
 80093fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80093fe:	e7bf      	b.n	8009380 <_strtod_l+0x148>
 8009400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	9219      	str	r2, [sp, #100]	@ 0x64
 8009406:	785a      	ldrb	r2, [r3, #1]
 8009408:	b37f      	cbz	r7, 800946a <_strtod_l+0x232>
 800940a:	4681      	mov	r9, r0
 800940c:	463d      	mov	r5, r7
 800940e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009412:	2b09      	cmp	r3, #9
 8009414:	d912      	bls.n	800943c <_strtod_l+0x204>
 8009416:	2301      	movs	r3, #1
 8009418:	e7c4      	b.n	80093a4 <_strtod_l+0x16c>
 800941a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009420:	785a      	ldrb	r2, [r3, #1]
 8009422:	3001      	adds	r0, #1
 8009424:	2a30      	cmp	r2, #48	@ 0x30
 8009426:	d0f8      	beq.n	800941a <_strtod_l+0x1e2>
 8009428:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800942c:	2b08      	cmp	r3, #8
 800942e:	f200 84d3 	bhi.w	8009dd8 <_strtod_l+0xba0>
 8009432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009434:	930c      	str	r3, [sp, #48]	@ 0x30
 8009436:	4681      	mov	r9, r0
 8009438:	2000      	movs	r0, #0
 800943a:	4605      	mov	r5, r0
 800943c:	3a30      	subs	r2, #48	@ 0x30
 800943e:	f100 0301 	add.w	r3, r0, #1
 8009442:	d02a      	beq.n	800949a <_strtod_l+0x262>
 8009444:	4499      	add	r9, r3
 8009446:	eb00 0c05 	add.w	ip, r0, r5
 800944a:	462b      	mov	r3, r5
 800944c:	210a      	movs	r1, #10
 800944e:	4563      	cmp	r3, ip
 8009450:	d10d      	bne.n	800946e <_strtod_l+0x236>
 8009452:	1c69      	adds	r1, r5, #1
 8009454:	4401      	add	r1, r0
 8009456:	4428      	add	r0, r5
 8009458:	2808      	cmp	r0, #8
 800945a:	dc16      	bgt.n	800948a <_strtod_l+0x252>
 800945c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800945e:	230a      	movs	r3, #10
 8009460:	fb03 2300 	mla	r3, r3, r0, r2
 8009464:	930a      	str	r3, [sp, #40]	@ 0x28
 8009466:	2300      	movs	r3, #0
 8009468:	e018      	b.n	800949c <_strtod_l+0x264>
 800946a:	4638      	mov	r0, r7
 800946c:	e7da      	b.n	8009424 <_strtod_l+0x1ec>
 800946e:	2b08      	cmp	r3, #8
 8009470:	f103 0301 	add.w	r3, r3, #1
 8009474:	dc03      	bgt.n	800947e <_strtod_l+0x246>
 8009476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009478:	434e      	muls	r6, r1
 800947a:	960a      	str	r6, [sp, #40]	@ 0x28
 800947c:	e7e7      	b.n	800944e <_strtod_l+0x216>
 800947e:	2b10      	cmp	r3, #16
 8009480:	bfde      	ittt	le
 8009482:	9e08      	ldrle	r6, [sp, #32]
 8009484:	434e      	mulle	r6, r1
 8009486:	9608      	strle	r6, [sp, #32]
 8009488:	e7e1      	b.n	800944e <_strtod_l+0x216>
 800948a:	280f      	cmp	r0, #15
 800948c:	dceb      	bgt.n	8009466 <_strtod_l+0x22e>
 800948e:	9808      	ldr	r0, [sp, #32]
 8009490:	230a      	movs	r3, #10
 8009492:	fb03 2300 	mla	r3, r3, r0, r2
 8009496:	9308      	str	r3, [sp, #32]
 8009498:	e7e5      	b.n	8009466 <_strtod_l+0x22e>
 800949a:	4629      	mov	r1, r5
 800949c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800949e:	1c50      	adds	r0, r2, #1
 80094a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80094a2:	7852      	ldrb	r2, [r2, #1]
 80094a4:	4618      	mov	r0, r3
 80094a6:	460d      	mov	r5, r1
 80094a8:	e7b1      	b.n	800940e <_strtod_l+0x1d6>
 80094aa:	f04f 0900 	mov.w	r9, #0
 80094ae:	2301      	movs	r3, #1
 80094b0:	e77d      	b.n	80093ae <_strtod_l+0x176>
 80094b2:	f04f 0c00 	mov.w	ip, #0
 80094b6:	1ca2      	adds	r2, r4, #2
 80094b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80094ba:	78a2      	ldrb	r2, [r4, #2]
 80094bc:	e785      	b.n	80093ca <_strtod_l+0x192>
 80094be:	f04f 0c01 	mov.w	ip, #1
 80094c2:	e7f8      	b.n	80094b6 <_strtod_l+0x27e>
 80094c4:	080105c0 	.word	0x080105c0
 80094c8:	080105a9 	.word	0x080105a9
 80094cc:	7ff00000 	.word	0x7ff00000
 80094d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094d2:	1c51      	adds	r1, r2, #1
 80094d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80094d6:	7852      	ldrb	r2, [r2, #1]
 80094d8:	2a30      	cmp	r2, #48	@ 0x30
 80094da:	d0f9      	beq.n	80094d0 <_strtod_l+0x298>
 80094dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094e0:	2908      	cmp	r1, #8
 80094e2:	f63f af78 	bhi.w	80093d6 <_strtod_l+0x19e>
 80094e6:	3a30      	subs	r2, #48	@ 0x30
 80094e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094ee:	f04f 080a 	mov.w	r8, #10
 80094f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094f4:	1c56      	adds	r6, r2, #1
 80094f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80094f8:	7852      	ldrb	r2, [r2, #1]
 80094fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80094fe:	f1be 0f09 	cmp.w	lr, #9
 8009502:	d939      	bls.n	8009578 <_strtod_l+0x340>
 8009504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009506:	1a76      	subs	r6, r6, r1
 8009508:	2e08      	cmp	r6, #8
 800950a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800950e:	dc03      	bgt.n	8009518 <_strtod_l+0x2e0>
 8009510:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009512:	4588      	cmp	r8, r1
 8009514:	bfa8      	it	ge
 8009516:	4688      	movge	r8, r1
 8009518:	f1bc 0f00 	cmp.w	ip, #0
 800951c:	d001      	beq.n	8009522 <_strtod_l+0x2ea>
 800951e:	f1c8 0800 	rsb	r8, r8, #0
 8009522:	2d00      	cmp	r5, #0
 8009524:	d14e      	bne.n	80095c4 <_strtod_l+0x38c>
 8009526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009528:	4308      	orrs	r0, r1
 800952a:	f47f aebe 	bne.w	80092aa <_strtod_l+0x72>
 800952e:	2b00      	cmp	r3, #0
 8009530:	f47f aed6 	bne.w	80092e0 <_strtod_l+0xa8>
 8009534:	2a69      	cmp	r2, #105	@ 0x69
 8009536:	d028      	beq.n	800958a <_strtod_l+0x352>
 8009538:	dc25      	bgt.n	8009586 <_strtod_l+0x34e>
 800953a:	2a49      	cmp	r2, #73	@ 0x49
 800953c:	d025      	beq.n	800958a <_strtod_l+0x352>
 800953e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009540:	f47f aece 	bne.w	80092e0 <_strtod_l+0xa8>
 8009544:	499b      	ldr	r1, [pc, #620]	@ (80097b4 <_strtod_l+0x57c>)
 8009546:	a819      	add	r0, sp, #100	@ 0x64
 8009548:	f003 fcb2 	bl	800ceb0 <__match>
 800954c:	2800      	cmp	r0, #0
 800954e:	f43f aec7 	beq.w	80092e0 <_strtod_l+0xa8>
 8009552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b28      	cmp	r3, #40	@ 0x28
 8009558:	d12e      	bne.n	80095b8 <_strtod_l+0x380>
 800955a:	4997      	ldr	r1, [pc, #604]	@ (80097b8 <_strtod_l+0x580>)
 800955c:	aa1c      	add	r2, sp, #112	@ 0x70
 800955e:	a819      	add	r0, sp, #100	@ 0x64
 8009560:	f003 fcba 	bl	800ced8 <__hexnan>
 8009564:	2805      	cmp	r0, #5
 8009566:	d127      	bne.n	80095b8 <_strtod_l+0x380>
 8009568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800956a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800956e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009572:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009576:	e698      	b.n	80092aa <_strtod_l+0x72>
 8009578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800957a:	fb08 2101 	mla	r1, r8, r1, r2
 800957e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009582:	920e      	str	r2, [sp, #56]	@ 0x38
 8009584:	e7b5      	b.n	80094f2 <_strtod_l+0x2ba>
 8009586:	2a6e      	cmp	r2, #110	@ 0x6e
 8009588:	e7da      	b.n	8009540 <_strtod_l+0x308>
 800958a:	498c      	ldr	r1, [pc, #560]	@ (80097bc <_strtod_l+0x584>)
 800958c:	a819      	add	r0, sp, #100	@ 0x64
 800958e:	f003 fc8f 	bl	800ceb0 <__match>
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aea4 	beq.w	80092e0 <_strtod_l+0xa8>
 8009598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959a:	4989      	ldr	r1, [pc, #548]	@ (80097c0 <_strtod_l+0x588>)
 800959c:	3b01      	subs	r3, #1
 800959e:	a819      	add	r0, sp, #100	@ 0x64
 80095a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80095a2:	f003 fc85 	bl	800ceb0 <__match>
 80095a6:	b910      	cbnz	r0, 80095ae <_strtod_l+0x376>
 80095a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095aa:	3301      	adds	r3, #1
 80095ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80095ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80097d0 <_strtod_l+0x598>
 80095b2:	f04f 0a00 	mov.w	sl, #0
 80095b6:	e678      	b.n	80092aa <_strtod_l+0x72>
 80095b8:	4882      	ldr	r0, [pc, #520]	@ (80097c4 <_strtod_l+0x58c>)
 80095ba:	f002 fb41 	bl	800bc40 <nan>
 80095be:	ec5b ab10 	vmov	sl, fp, d0
 80095c2:	e672      	b.n	80092aa <_strtod_l+0x72>
 80095c4:	eba8 0309 	sub.w	r3, r8, r9
 80095c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	bf08      	it	eq
 80095d0:	462f      	moveq	r7, r5
 80095d2:	2d10      	cmp	r5, #16
 80095d4:	462c      	mov	r4, r5
 80095d6:	bfa8      	it	ge
 80095d8:	2410      	movge	r4, #16
 80095da:	f7f6 ffa3 	bl	8000524 <__aeabi_ui2d>
 80095de:	2d09      	cmp	r5, #9
 80095e0:	4682      	mov	sl, r0
 80095e2:	468b      	mov	fp, r1
 80095e4:	dc13      	bgt.n	800960e <_strtod_l+0x3d6>
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f43f ae5e 	beq.w	80092aa <_strtod_l+0x72>
 80095ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f0:	dd78      	ble.n	80096e4 <_strtod_l+0x4ac>
 80095f2:	2b16      	cmp	r3, #22
 80095f4:	dc5f      	bgt.n	80096b6 <_strtod_l+0x47e>
 80095f6:	4974      	ldr	r1, [pc, #464]	@ (80097c8 <_strtod_l+0x590>)
 80095f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009600:	4652      	mov	r2, sl
 8009602:	465b      	mov	r3, fp
 8009604:	f7f7 f808 	bl	8000618 <__aeabi_dmul>
 8009608:	4682      	mov	sl, r0
 800960a:	468b      	mov	fp, r1
 800960c:	e64d      	b.n	80092aa <_strtod_l+0x72>
 800960e:	4b6e      	ldr	r3, [pc, #440]	@ (80097c8 <_strtod_l+0x590>)
 8009610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009614:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009618:	f7f6 fffe 	bl	8000618 <__aeabi_dmul>
 800961c:	4682      	mov	sl, r0
 800961e:	9808      	ldr	r0, [sp, #32]
 8009620:	468b      	mov	fp, r1
 8009622:	f7f6 ff7f 	bl	8000524 <__aeabi_ui2d>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 fe3d 	bl	80002ac <__adddf3>
 8009632:	2d0f      	cmp	r5, #15
 8009634:	4682      	mov	sl, r0
 8009636:	468b      	mov	fp, r1
 8009638:	ddd5      	ble.n	80095e6 <_strtod_l+0x3ae>
 800963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963c:	1b2c      	subs	r4, r5, r4
 800963e:	441c      	add	r4, r3
 8009640:	2c00      	cmp	r4, #0
 8009642:	f340 8096 	ble.w	8009772 <_strtod_l+0x53a>
 8009646:	f014 030f 	ands.w	r3, r4, #15
 800964a:	d00a      	beq.n	8009662 <_strtod_l+0x42a>
 800964c:	495e      	ldr	r1, [pc, #376]	@ (80097c8 <_strtod_l+0x590>)
 800964e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009652:	4652      	mov	r2, sl
 8009654:	465b      	mov	r3, fp
 8009656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965a:	f7f6 ffdd 	bl	8000618 <__aeabi_dmul>
 800965e:	4682      	mov	sl, r0
 8009660:	468b      	mov	fp, r1
 8009662:	f034 040f 	bics.w	r4, r4, #15
 8009666:	d073      	beq.n	8009750 <_strtod_l+0x518>
 8009668:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800966c:	dd48      	ble.n	8009700 <_strtod_l+0x4c8>
 800966e:	2400      	movs	r4, #0
 8009670:	46a0      	mov	r8, r4
 8009672:	940a      	str	r4, [sp, #40]	@ 0x28
 8009674:	46a1      	mov	r9, r4
 8009676:	9a05      	ldr	r2, [sp, #20]
 8009678:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80097d0 <_strtod_l+0x598>
 800967c:	2322      	movs	r3, #34	@ 0x22
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	f04f 0a00 	mov.w	sl, #0
 8009684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	f43f ae0f 	beq.w	80092aa <_strtod_l+0x72>
 800968c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800968e:	9805      	ldr	r0, [sp, #20]
 8009690:	f003 fd54 	bl	800d13c <_Bfree>
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	4649      	mov	r1, r9
 8009698:	f003 fd50 	bl	800d13c <_Bfree>
 800969c:	9805      	ldr	r0, [sp, #20]
 800969e:	4641      	mov	r1, r8
 80096a0:	f003 fd4c 	bl	800d13c <_Bfree>
 80096a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	f003 fd48 	bl	800d13c <_Bfree>
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	4621      	mov	r1, r4
 80096b0:	f003 fd44 	bl	800d13c <_Bfree>
 80096b4:	e5f9      	b.n	80092aa <_strtod_l+0x72>
 80096b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80096bc:	4293      	cmp	r3, r2
 80096be:	dbbc      	blt.n	800963a <_strtod_l+0x402>
 80096c0:	4c41      	ldr	r4, [pc, #260]	@ (80097c8 <_strtod_l+0x590>)
 80096c2:	f1c5 050f 	rsb	r5, r5, #15
 80096c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096ca:	4652      	mov	r2, sl
 80096cc:	465b      	mov	r3, fp
 80096ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d2:	f7f6 ffa1 	bl	8000618 <__aeabi_dmul>
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	1b5d      	subs	r5, r3, r5
 80096da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096e2:	e78f      	b.n	8009604 <_strtod_l+0x3cc>
 80096e4:	3316      	adds	r3, #22
 80096e6:	dba8      	blt.n	800963a <_strtod_l+0x402>
 80096e8:	4b37      	ldr	r3, [pc, #220]	@ (80097c8 <_strtod_l+0x590>)
 80096ea:	eba9 0808 	sub.w	r8, r9, r8
 80096ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096f6:	4650      	mov	r0, sl
 80096f8:	4659      	mov	r1, fp
 80096fa:	f7f7 f8b7 	bl	800086c <__aeabi_ddiv>
 80096fe:	e783      	b.n	8009608 <_strtod_l+0x3d0>
 8009700:	4b32      	ldr	r3, [pc, #200]	@ (80097cc <_strtod_l+0x594>)
 8009702:	9308      	str	r3, [sp, #32]
 8009704:	2300      	movs	r3, #0
 8009706:	1124      	asrs	r4, r4, #4
 8009708:	4650      	mov	r0, sl
 800970a:	4659      	mov	r1, fp
 800970c:	461e      	mov	r6, r3
 800970e:	2c01      	cmp	r4, #1
 8009710:	dc21      	bgt.n	8009756 <_strtod_l+0x51e>
 8009712:	b10b      	cbz	r3, 8009718 <_strtod_l+0x4e0>
 8009714:	4682      	mov	sl, r0
 8009716:	468b      	mov	fp, r1
 8009718:	492c      	ldr	r1, [pc, #176]	@ (80097cc <_strtod_l+0x594>)
 800971a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800971e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009722:	4652      	mov	r2, sl
 8009724:	465b      	mov	r3, fp
 8009726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972a:	f7f6 ff75 	bl	8000618 <__aeabi_dmul>
 800972e:	4b28      	ldr	r3, [pc, #160]	@ (80097d0 <_strtod_l+0x598>)
 8009730:	460a      	mov	r2, r1
 8009732:	400b      	ands	r3, r1
 8009734:	4927      	ldr	r1, [pc, #156]	@ (80097d4 <_strtod_l+0x59c>)
 8009736:	428b      	cmp	r3, r1
 8009738:	4682      	mov	sl, r0
 800973a:	d898      	bhi.n	800966e <_strtod_l+0x436>
 800973c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009740:	428b      	cmp	r3, r1
 8009742:	bf86      	itte	hi
 8009744:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80097d8 <_strtod_l+0x5a0>
 8009748:	f04f 3aff 	movhi.w	sl, #4294967295
 800974c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009750:	2300      	movs	r3, #0
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	e07a      	b.n	800984c <_strtod_l+0x614>
 8009756:	07e2      	lsls	r2, r4, #31
 8009758:	d505      	bpl.n	8009766 <_strtod_l+0x52e>
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 ff5a 	bl	8000618 <__aeabi_dmul>
 8009764:	2301      	movs	r3, #1
 8009766:	9a08      	ldr	r2, [sp, #32]
 8009768:	3208      	adds	r2, #8
 800976a:	3601      	adds	r6, #1
 800976c:	1064      	asrs	r4, r4, #1
 800976e:	9208      	str	r2, [sp, #32]
 8009770:	e7cd      	b.n	800970e <_strtod_l+0x4d6>
 8009772:	d0ed      	beq.n	8009750 <_strtod_l+0x518>
 8009774:	4264      	negs	r4, r4
 8009776:	f014 020f 	ands.w	r2, r4, #15
 800977a:	d00a      	beq.n	8009792 <_strtod_l+0x55a>
 800977c:	4b12      	ldr	r3, [pc, #72]	@ (80097c8 <_strtod_l+0x590>)
 800977e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009782:	4650      	mov	r0, sl
 8009784:	4659      	mov	r1, fp
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f7 f86f 	bl	800086c <__aeabi_ddiv>
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	1124      	asrs	r4, r4, #4
 8009794:	d0dc      	beq.n	8009750 <_strtod_l+0x518>
 8009796:	2c1f      	cmp	r4, #31
 8009798:	dd20      	ble.n	80097dc <_strtod_l+0x5a4>
 800979a:	2400      	movs	r4, #0
 800979c:	46a0      	mov	r8, r4
 800979e:	940a      	str	r4, [sp, #40]	@ 0x28
 80097a0:	46a1      	mov	r9, r4
 80097a2:	9a05      	ldr	r2, [sp, #20]
 80097a4:	2322      	movs	r3, #34	@ 0x22
 80097a6:	f04f 0a00 	mov.w	sl, #0
 80097aa:	f04f 0b00 	mov.w	fp, #0
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e768      	b.n	8009684 <_strtod_l+0x44c>
 80097b2:	bf00      	nop
 80097b4:	0801070e 	.word	0x0801070e
 80097b8:	080105ac 	.word	0x080105ac
 80097bc:	08010706 	.word	0x08010706
 80097c0:	080107ef 	.word	0x080107ef
 80097c4:	0800fc59 	.word	0x0800fc59
 80097c8:	08010968 	.word	0x08010968
 80097cc:	08010940 	.word	0x08010940
 80097d0:	7ff00000 	.word	0x7ff00000
 80097d4:	7ca00000 	.word	0x7ca00000
 80097d8:	7fefffff 	.word	0x7fefffff
 80097dc:	f014 0310 	ands.w	r3, r4, #16
 80097e0:	bf18      	it	ne
 80097e2:	236a      	movne	r3, #106	@ 0x6a
 80097e4:	4ea9      	ldr	r6, [pc, #676]	@ (8009a8c <_strtod_l+0x854>)
 80097e6:	9308      	str	r3, [sp, #32]
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	2300      	movs	r3, #0
 80097ee:	07e2      	lsls	r2, r4, #31
 80097f0:	d504      	bpl.n	80097fc <_strtod_l+0x5c4>
 80097f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097f6:	f7f6 ff0f 	bl	8000618 <__aeabi_dmul>
 80097fa:	2301      	movs	r3, #1
 80097fc:	1064      	asrs	r4, r4, #1
 80097fe:	f106 0608 	add.w	r6, r6, #8
 8009802:	d1f4      	bne.n	80097ee <_strtod_l+0x5b6>
 8009804:	b10b      	cbz	r3, 800980a <_strtod_l+0x5d2>
 8009806:	4682      	mov	sl, r0
 8009808:	468b      	mov	fp, r1
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	b1b3      	cbz	r3, 800983c <_strtod_l+0x604>
 800980e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009812:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009816:	2b00      	cmp	r3, #0
 8009818:	4659      	mov	r1, fp
 800981a:	dd0f      	ble.n	800983c <_strtod_l+0x604>
 800981c:	2b1f      	cmp	r3, #31
 800981e:	dd55      	ble.n	80098cc <_strtod_l+0x694>
 8009820:	2b34      	cmp	r3, #52	@ 0x34
 8009822:	bfde      	ittt	le
 8009824:	f04f 33ff 	movle.w	r3, #4294967295
 8009828:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800982c:	4093      	lslle	r3, r2
 800982e:	f04f 0a00 	mov.w	sl, #0
 8009832:	bfcc      	ite	gt
 8009834:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009838:	ea03 0b01 	andle.w	fp, r3, r1
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	f7f7 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 8009848:	2800      	cmp	r0, #0
 800984a:	d1a6      	bne.n	800979a <_strtod_l+0x562>
 800984c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	462b      	mov	r3, r5
 8009856:	463a      	mov	r2, r7
 8009858:	f003 fcd8 	bl	800d20c <__s2b>
 800985c:	900a      	str	r0, [sp, #40]	@ 0x28
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f af05 	beq.w	800966e <_strtod_l+0x436>
 8009864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009866:	2a00      	cmp	r2, #0
 8009868:	eba9 0308 	sub.w	r3, r9, r8
 800986c:	bfa8      	it	ge
 800986e:	2300      	movge	r3, #0
 8009870:	9312      	str	r3, [sp, #72]	@ 0x48
 8009872:	2400      	movs	r4, #0
 8009874:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009878:	9316      	str	r3, [sp, #88]	@ 0x58
 800987a:	46a0      	mov	r8, r4
 800987c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800987e:	9805      	ldr	r0, [sp, #20]
 8009880:	6859      	ldr	r1, [r3, #4]
 8009882:	f003 fc1b 	bl	800d0bc <_Balloc>
 8009886:	4681      	mov	r9, r0
 8009888:	2800      	cmp	r0, #0
 800988a:	f43f aef4 	beq.w	8009676 <_strtod_l+0x43e>
 800988e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	3202      	adds	r2, #2
 8009894:	f103 010c 	add.w	r1, r3, #12
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	300c      	adds	r0, #12
 800989c:	f002 f9bf 	bl	800bc1e <memcpy>
 80098a0:	ec4b ab10 	vmov	d0, sl, fp
 80098a4:	9805      	ldr	r0, [sp, #20]
 80098a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80098a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80098aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80098ae:	f003 ffe9 	bl	800d884 <__d2b>
 80098b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f43f aede 	beq.w	8009676 <_strtod_l+0x43e>
 80098ba:	9805      	ldr	r0, [sp, #20]
 80098bc:	2101      	movs	r1, #1
 80098be:	f003 fd3b 	bl	800d338 <__i2b>
 80098c2:	4680      	mov	r8, r0
 80098c4:	b948      	cbnz	r0, 80098da <_strtod_l+0x6a2>
 80098c6:	f04f 0800 	mov.w	r8, #0
 80098ca:	e6d4      	b.n	8009676 <_strtod_l+0x43e>
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	ea03 0a0a 	and.w	sl, r3, sl
 80098d8:	e7b0      	b.n	800983c <_strtod_l+0x604>
 80098da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098de:	2d00      	cmp	r5, #0
 80098e0:	bfab      	itete	ge
 80098e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098ea:	bfac      	ite	ge
 80098ec:	18ef      	addge	r7, r5, r3
 80098ee:	1b5e      	sublt	r6, r3, r5
 80098f0:	9b08      	ldr	r3, [sp, #32]
 80098f2:	1aed      	subs	r5, r5, r3
 80098f4:	4415      	add	r5, r2
 80098f6:	4b66      	ldr	r3, [pc, #408]	@ (8009a90 <_strtod_l+0x858>)
 80098f8:	3d01      	subs	r5, #1
 80098fa:	429d      	cmp	r5, r3
 80098fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009900:	da50      	bge.n	80099a4 <_strtod_l+0x76c>
 8009902:	1b5b      	subs	r3, r3, r5
 8009904:	2b1f      	cmp	r3, #31
 8009906:	eba2 0203 	sub.w	r2, r2, r3
 800990a:	f04f 0101 	mov.w	r1, #1
 800990e:	dc3d      	bgt.n	800998c <_strtod_l+0x754>
 8009910:	fa01 f303 	lsl.w	r3, r1, r3
 8009914:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009916:	2300      	movs	r3, #0
 8009918:	9310      	str	r3, [sp, #64]	@ 0x40
 800991a:	18bd      	adds	r5, r7, r2
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	42af      	cmp	r7, r5
 8009920:	4416      	add	r6, r2
 8009922:	441e      	add	r6, r3
 8009924:	463b      	mov	r3, r7
 8009926:	bfa8      	it	ge
 8009928:	462b      	movge	r3, r5
 800992a:	42b3      	cmp	r3, r6
 800992c:	bfa8      	it	ge
 800992e:	4633      	movge	r3, r6
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfc2      	ittt	gt
 8009934:	1aed      	subgt	r5, r5, r3
 8009936:	1af6      	subgt	r6, r6, r3
 8009938:	1aff      	subgt	r7, r7, r3
 800993a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd16      	ble.n	800996e <_strtod_l+0x736>
 8009940:	4641      	mov	r1, r8
 8009942:	9805      	ldr	r0, [sp, #20]
 8009944:	461a      	mov	r2, r3
 8009946:	f003 fdb7 	bl	800d4b8 <__pow5mult>
 800994a:	4680      	mov	r8, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	d0ba      	beq.n	80098c6 <_strtod_l+0x68e>
 8009950:	4601      	mov	r1, r0
 8009952:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009954:	9805      	ldr	r0, [sp, #20]
 8009956:	f003 fd05 	bl	800d364 <__multiply>
 800995a:	900e      	str	r0, [sp, #56]	@ 0x38
 800995c:	2800      	cmp	r0, #0
 800995e:	f43f ae8a 	beq.w	8009676 <_strtod_l+0x43e>
 8009962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009964:	9805      	ldr	r0, [sp, #20]
 8009966:	f003 fbe9 	bl	800d13c <_Bfree>
 800996a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800996c:	931a      	str	r3, [sp, #104]	@ 0x68
 800996e:	2d00      	cmp	r5, #0
 8009970:	dc1d      	bgt.n	80099ae <_strtod_l+0x776>
 8009972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	dd23      	ble.n	80099c0 <_strtod_l+0x788>
 8009978:	4649      	mov	r1, r9
 800997a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800997c:	9805      	ldr	r0, [sp, #20]
 800997e:	f003 fd9b 	bl	800d4b8 <__pow5mult>
 8009982:	4681      	mov	r9, r0
 8009984:	b9e0      	cbnz	r0, 80099c0 <_strtod_l+0x788>
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	e674      	b.n	8009676 <_strtod_l+0x43e>
 800998c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009990:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009994:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009998:	35e2      	adds	r5, #226	@ 0xe2
 800999a:	fa01 f305 	lsl.w	r3, r1, r5
 800999e:	9310      	str	r3, [sp, #64]	@ 0x40
 80099a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099a2:	e7ba      	b.n	800991a <_strtod_l+0x6e2>
 80099a4:	2300      	movs	r3, #0
 80099a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80099a8:	2301      	movs	r3, #1
 80099aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ac:	e7b5      	b.n	800991a <_strtod_l+0x6e2>
 80099ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099b0:	9805      	ldr	r0, [sp, #20]
 80099b2:	462a      	mov	r2, r5
 80099b4:	f003 fdda 	bl	800d56c <__lshift>
 80099b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d1d9      	bne.n	8009972 <_strtod_l+0x73a>
 80099be:	e65a      	b.n	8009676 <_strtod_l+0x43e>
 80099c0:	2e00      	cmp	r6, #0
 80099c2:	dd07      	ble.n	80099d4 <_strtod_l+0x79c>
 80099c4:	4649      	mov	r1, r9
 80099c6:	9805      	ldr	r0, [sp, #20]
 80099c8:	4632      	mov	r2, r6
 80099ca:	f003 fdcf 	bl	800d56c <__lshift>
 80099ce:	4681      	mov	r9, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0d8      	beq.n	8009986 <_strtod_l+0x74e>
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	dd08      	ble.n	80099ea <_strtod_l+0x7b2>
 80099d8:	4641      	mov	r1, r8
 80099da:	9805      	ldr	r0, [sp, #20]
 80099dc:	463a      	mov	r2, r7
 80099de:	f003 fdc5 	bl	800d56c <__lshift>
 80099e2:	4680      	mov	r8, r0
 80099e4:	2800      	cmp	r0, #0
 80099e6:	f43f ae46 	beq.w	8009676 <_strtod_l+0x43e>
 80099ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ec:	9805      	ldr	r0, [sp, #20]
 80099ee:	464a      	mov	r2, r9
 80099f0:	f003 fe44 	bl	800d67c <__mdiff>
 80099f4:	4604      	mov	r4, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f ae3d 	beq.w	8009676 <_strtod_l+0x43e>
 80099fc:	68c3      	ldr	r3, [r0, #12]
 80099fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a00:	2300      	movs	r3, #0
 8009a02:	60c3      	str	r3, [r0, #12]
 8009a04:	4641      	mov	r1, r8
 8009a06:	f003 fe1d 	bl	800d644 <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	da46      	bge.n	8009a9c <_strtod_l+0x864>
 8009a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a10:	ea53 030a 	orrs.w	r3, r3, sl
 8009a14:	d16c      	bne.n	8009af0 <_strtod_l+0x8b8>
 8009a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d168      	bne.n	8009af0 <_strtod_l+0x8b8>
 8009a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a22:	0d1b      	lsrs	r3, r3, #20
 8009a24:	051b      	lsls	r3, r3, #20
 8009a26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a2a:	d961      	bls.n	8009af0 <_strtod_l+0x8b8>
 8009a2c:	6963      	ldr	r3, [r4, #20]
 8009a2e:	b913      	cbnz	r3, 8009a36 <_strtod_l+0x7fe>
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	dd5c      	ble.n	8009af0 <_strtod_l+0x8b8>
 8009a36:	4621      	mov	r1, r4
 8009a38:	2201      	movs	r2, #1
 8009a3a:	9805      	ldr	r0, [sp, #20]
 8009a3c:	f003 fd96 	bl	800d56c <__lshift>
 8009a40:	4641      	mov	r1, r8
 8009a42:	4604      	mov	r4, r0
 8009a44:	f003 fdfe 	bl	800d644 <__mcmp>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	dd51      	ble.n	8009af0 <_strtod_l+0x8b8>
 8009a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a50:	9a08      	ldr	r2, [sp, #32]
 8009a52:	0d1b      	lsrs	r3, r3, #20
 8009a54:	051b      	lsls	r3, r3, #20
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	d06b      	beq.n	8009b32 <_strtod_l+0x8fa>
 8009a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a5e:	d868      	bhi.n	8009b32 <_strtod_l+0x8fa>
 8009a60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a64:	f67f ae9d 	bls.w	80097a2 <_strtod_l+0x56a>
 8009a68:	4b0a      	ldr	r3, [pc, #40]	@ (8009a94 <_strtod_l+0x85c>)
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f7f6 fdd2 	bl	8000618 <__aeabi_dmul>
 8009a74:	4b08      	ldr	r3, [pc, #32]	@ (8009a98 <_strtod_l+0x860>)
 8009a76:	400b      	ands	r3, r1
 8009a78:	4682      	mov	sl, r0
 8009a7a:	468b      	mov	fp, r1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f47f ae05 	bne.w	800968c <_strtod_l+0x454>
 8009a82:	9a05      	ldr	r2, [sp, #20]
 8009a84:	2322      	movs	r3, #34	@ 0x22
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	e600      	b.n	800968c <_strtod_l+0x454>
 8009a8a:	bf00      	nop
 8009a8c:	080105d8 	.word	0x080105d8
 8009a90:	fffffc02 	.word	0xfffffc02
 8009a94:	39500000 	.word	0x39500000
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009aa0:	d165      	bne.n	8009b6e <_strtod_l+0x936>
 8009aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa8:	b35a      	cbz	r2, 8009b02 <_strtod_l+0x8ca>
 8009aaa:	4a9f      	ldr	r2, [pc, #636]	@ (8009d28 <_strtod_l+0xaf0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d12b      	bne.n	8009b08 <_strtod_l+0x8d0>
 8009ab0:	9b08      	ldr	r3, [sp, #32]
 8009ab2:	4651      	mov	r1, sl
 8009ab4:	b303      	cbz	r3, 8009af8 <_strtod_l+0x8c0>
 8009ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8009d2c <_strtod_l+0xaf4>)
 8009ab8:	465a      	mov	r2, fp
 8009aba:	4013      	ands	r3, r2
 8009abc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	d81b      	bhi.n	8009afe <_strtod_l+0x8c6>
 8009ac6:	0d1b      	lsrs	r3, r3, #20
 8009ac8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d119      	bne.n	8009b08 <_strtod_l+0x8d0>
 8009ad4:	4b96      	ldr	r3, [pc, #600]	@ (8009d30 <_strtod_l+0xaf8>)
 8009ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d102      	bne.n	8009ae2 <_strtod_l+0x8aa>
 8009adc:	3101      	adds	r1, #1
 8009ade:	f43f adca 	beq.w	8009676 <_strtod_l+0x43e>
 8009ae2:	4b92      	ldr	r3, [pc, #584]	@ (8009d2c <_strtod_l+0xaf4>)
 8009ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ae6:	401a      	ands	r2, r3
 8009ae8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009aec:	f04f 0a00 	mov.w	sl, #0
 8009af0:	9b08      	ldr	r3, [sp, #32]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1b8      	bne.n	8009a68 <_strtod_l+0x830>
 8009af6:	e5c9      	b.n	800968c <_strtod_l+0x454>
 8009af8:	f04f 33ff 	mov.w	r3, #4294967295
 8009afc:	e7e8      	b.n	8009ad0 <_strtod_l+0x898>
 8009afe:	4613      	mov	r3, r2
 8009b00:	e7e6      	b.n	8009ad0 <_strtod_l+0x898>
 8009b02:	ea53 030a 	orrs.w	r3, r3, sl
 8009b06:	d0a1      	beq.n	8009a4c <_strtod_l+0x814>
 8009b08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b0a:	b1db      	cbz	r3, 8009b44 <_strtod_l+0x90c>
 8009b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b0e:	4213      	tst	r3, r2
 8009b10:	d0ee      	beq.n	8009af0 <_strtod_l+0x8b8>
 8009b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b14:	9a08      	ldr	r2, [sp, #32]
 8009b16:	4650      	mov	r0, sl
 8009b18:	4659      	mov	r1, fp
 8009b1a:	b1bb      	cbz	r3, 8009b4c <_strtod_l+0x914>
 8009b1c:	f7ff fb6c 	bl	80091f8 <sulp>
 8009b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b24:	ec53 2b10 	vmov	r2, r3, d0
 8009b28:	f7f6 fbc0 	bl	80002ac <__adddf3>
 8009b2c:	4682      	mov	sl, r0
 8009b2e:	468b      	mov	fp, r1
 8009b30:	e7de      	b.n	8009af0 <_strtod_l+0x8b8>
 8009b32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b42:	e7d5      	b.n	8009af0 <_strtod_l+0x8b8>
 8009b44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b46:	ea13 0f0a 	tst.w	r3, sl
 8009b4a:	e7e1      	b.n	8009b10 <_strtod_l+0x8d8>
 8009b4c:	f7ff fb54 	bl	80091f8 <sulp>
 8009b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b54:	ec53 2b10 	vmov	r2, r3, d0
 8009b58:	f7f6 fba6 	bl	80002a8 <__aeabi_dsub>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4682      	mov	sl, r0
 8009b62:	468b      	mov	fp, r1
 8009b64:	f7f6 ffc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0c1      	beq.n	8009af0 <_strtod_l+0x8b8>
 8009b6c:	e619      	b.n	80097a2 <_strtod_l+0x56a>
 8009b6e:	4641      	mov	r1, r8
 8009b70:	4620      	mov	r0, r4
 8009b72:	f003 fedf 	bl	800d934 <__ratio>
 8009b76:	ec57 6b10 	vmov	r6, r7, d0
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b80:	4630      	mov	r0, r6
 8009b82:	4639      	mov	r1, r7
 8009b84:	f7f6 ffc4 	bl	8000b10 <__aeabi_dcmple>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d06f      	beq.n	8009c6c <_strtod_l+0xa34>
 8009b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d17a      	bne.n	8009c88 <_strtod_l+0xa50>
 8009b92:	f1ba 0f00 	cmp.w	sl, #0
 8009b96:	d158      	bne.n	8009c4a <_strtod_l+0xa12>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d15a      	bne.n	8009c58 <_strtod_l+0xa20>
 8009ba2:	4b64      	ldr	r3, [pc, #400]	@ (8009d34 <_strtod_l+0xafc>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d159      	bne.n	8009c66 <_strtod_l+0xa2e>
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4b60      	ldr	r3, [pc, #384]	@ (8009d38 <_strtod_l+0xb00>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f7f6 fd2d 	bl	8000618 <__aeabi_dmul>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009bc6:	9606      	str	r6, [sp, #24]
 8009bc8:	9307      	str	r3, [sp, #28]
 8009bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bce:	4d57      	ldr	r5, [pc, #348]	@ (8009d2c <_strtod_l+0xaf4>)
 8009bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bd6:	401d      	ands	r5, r3
 8009bd8:	4b58      	ldr	r3, [pc, #352]	@ (8009d3c <_strtod_l+0xb04>)
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	f040 80b2 	bne.w	8009d44 <_strtod_l+0xb0c>
 8009be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009be6:	ec4b ab10 	vmov	d0, sl, fp
 8009bea:	f003 fddb 	bl	800d7a4 <__ulp>
 8009bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bf2:	ec51 0b10 	vmov	r0, r1, d0
 8009bf6:	f7f6 fd0f 	bl	8000618 <__aeabi_dmul>
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	f7f6 fb55 	bl	80002ac <__adddf3>
 8009c02:	460b      	mov	r3, r1
 8009c04:	4949      	ldr	r1, [pc, #292]	@ (8009d2c <_strtod_l+0xaf4>)
 8009c06:	4a4e      	ldr	r2, [pc, #312]	@ (8009d40 <_strtod_l+0xb08>)
 8009c08:	4019      	ands	r1, r3
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	d942      	bls.n	8009c96 <_strtod_l+0xa5e>
 8009c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c12:	4b47      	ldr	r3, [pc, #284]	@ (8009d30 <_strtod_l+0xaf8>)
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d103      	bne.n	8009c20 <_strtod_l+0x9e8>
 8009c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f43f ad2b 	beq.w	8009676 <_strtod_l+0x43e>
 8009c20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d30 <_strtod_l+0xaf8>
 8009c24:	f04f 3aff 	mov.w	sl, #4294967295
 8009c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	f003 fa86 	bl	800d13c <_Bfree>
 8009c30:	9805      	ldr	r0, [sp, #20]
 8009c32:	4649      	mov	r1, r9
 8009c34:	f003 fa82 	bl	800d13c <_Bfree>
 8009c38:	9805      	ldr	r0, [sp, #20]
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	f003 fa7e 	bl	800d13c <_Bfree>
 8009c40:	9805      	ldr	r0, [sp, #20]
 8009c42:	4621      	mov	r1, r4
 8009c44:	f003 fa7a 	bl	800d13c <_Bfree>
 8009c48:	e618      	b.n	800987c <_strtod_l+0x644>
 8009c4a:	f1ba 0f01 	cmp.w	sl, #1
 8009c4e:	d103      	bne.n	8009c58 <_strtod_l+0xa20>
 8009c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f43f ada5 	beq.w	80097a2 <_strtod_l+0x56a>
 8009c58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009d08 <_strtod_l+0xad0>
 8009c5c:	4f35      	ldr	r7, [pc, #212]	@ (8009d34 <_strtod_l+0xafc>)
 8009c5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c62:	2600      	movs	r6, #0
 8009c64:	e7b1      	b.n	8009bca <_strtod_l+0x992>
 8009c66:	4f34      	ldr	r7, [pc, #208]	@ (8009d38 <_strtod_l+0xb00>)
 8009c68:	2600      	movs	r6, #0
 8009c6a:	e7aa      	b.n	8009bc2 <_strtod_l+0x98a>
 8009c6c:	4b32      	ldr	r3, [pc, #200]	@ (8009d38 <_strtod_l+0xb00>)
 8009c6e:	4630      	mov	r0, r6
 8009c70:	4639      	mov	r1, r7
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fcd0 	bl	8000618 <__aeabi_dmul>
 8009c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d09f      	beq.n	8009bc2 <_strtod_l+0x98a>
 8009c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c86:	e7a0      	b.n	8009bca <_strtod_l+0x992>
 8009c88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009d10 <_strtod_l+0xad8>
 8009c8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c90:	ec57 6b17 	vmov	r6, r7, d7
 8009c94:	e799      	b.n	8009bca <_strtod_l+0x992>
 8009c96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1c1      	bne.n	8009c28 <_strtod_l+0x9f0>
 8009ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ca8:	0d1b      	lsrs	r3, r3, #20
 8009caa:	051b      	lsls	r3, r3, #20
 8009cac:	429d      	cmp	r5, r3
 8009cae:	d1bb      	bne.n	8009c28 <_strtod_l+0x9f0>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 fff8 	bl	8000ca8 <__aeabi_d2lz>
 8009cb8:	f7f6 fc80 	bl	80005bc <__aeabi_l2d>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 faf0 	bl	80002a8 <__aeabi_dsub>
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4602      	mov	r2, r0
 8009ccc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd6:	ea46 060a 	orr.w	r6, r6, sl
 8009cda:	431e      	orrs	r6, r3
 8009cdc:	d06f      	beq.n	8009dbe <_strtod_l+0xb86>
 8009cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d18 <_strtod_l+0xae0>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 ff0a 	bl	8000afc <__aeabi_dcmplt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f47f accf 	bne.w	800968c <_strtod_l+0x454>
 8009cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d20 <_strtod_l+0xae8>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf8:	f7f6 ff1e 	bl	8000b38 <__aeabi_dcmpgt>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d093      	beq.n	8009c28 <_strtod_l+0x9f0>
 8009d00:	e4c4      	b.n	800968c <_strtod_l+0x454>
 8009d02:	bf00      	nop
 8009d04:	f3af 8000 	nop.w
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	bff00000 	.word	0xbff00000
 8009d10:	00000000 	.word	0x00000000
 8009d14:	3ff00000 	.word	0x3ff00000
 8009d18:	94a03595 	.word	0x94a03595
 8009d1c:	3fdfffff 	.word	0x3fdfffff
 8009d20:	35afe535 	.word	0x35afe535
 8009d24:	3fe00000 	.word	0x3fe00000
 8009d28:	000fffff 	.word	0x000fffff
 8009d2c:	7ff00000 	.word	0x7ff00000
 8009d30:	7fefffff 	.word	0x7fefffff
 8009d34:	3ff00000 	.word	0x3ff00000
 8009d38:	3fe00000 	.word	0x3fe00000
 8009d3c:	7fe00000 	.word	0x7fe00000
 8009d40:	7c9fffff 	.word	0x7c9fffff
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	b323      	cbz	r3, 8009d92 <_strtod_l+0xb5a>
 8009d48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d4c:	d821      	bhi.n	8009d92 <_strtod_l+0xb5a>
 8009d4e:	a328      	add	r3, pc, #160	@ (adr r3, 8009df0 <_strtod_l+0xbb8>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 feda 	bl	8000b10 <__aeabi_dcmple>
 8009d5c:	b1a0      	cbz	r0, 8009d88 <_strtod_l+0xb50>
 8009d5e:	4639      	mov	r1, r7
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7f6 ff31 	bl	8000bc8 <__aeabi_d2uiz>
 8009d66:	2801      	cmp	r0, #1
 8009d68:	bf38      	it	cc
 8009d6a:	2001      	movcc	r0, #1
 8009d6c:	f7f6 fbda 	bl	8000524 <__aeabi_ui2d>
 8009d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	b9fb      	cbnz	r3, 8009db8 <_strtod_l+0xb80>
 8009d78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d8e:	1b5b      	subs	r3, r3, r5
 8009d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d9a:	f003 fd03 	bl	800d7a4 <__ulp>
 8009d9e:	4650      	mov	r0, sl
 8009da0:	ec53 2b10 	vmov	r2, r3, d0
 8009da4:	4659      	mov	r1, fp
 8009da6:	f7f6 fc37 	bl	8000618 <__aeabi_dmul>
 8009daa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009dae:	f7f6 fa7d 	bl	80002ac <__adddf3>
 8009db2:	4682      	mov	sl, r0
 8009db4:	468b      	mov	fp, r1
 8009db6:	e770      	b.n	8009c9a <_strtod_l+0xa62>
 8009db8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009dbc:	e7e0      	b.n	8009d80 <_strtod_l+0xb48>
 8009dbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009df8 <_strtod_l+0xbc0>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f7f6 fe9a 	bl	8000afc <__aeabi_dcmplt>
 8009dc8:	e798      	b.n	8009cfc <_strtod_l+0xac4>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009dd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dd2:	6013      	str	r3, [r2, #0]
 8009dd4:	f7ff ba6d 	b.w	80092b2 <_strtod_l+0x7a>
 8009dd8:	2a65      	cmp	r2, #101	@ 0x65
 8009dda:	f43f ab66 	beq.w	80094aa <_strtod_l+0x272>
 8009dde:	2a45      	cmp	r2, #69	@ 0x45
 8009de0:	f43f ab63 	beq.w	80094aa <_strtod_l+0x272>
 8009de4:	2301      	movs	r3, #1
 8009de6:	f7ff bb9e 	b.w	8009526 <_strtod_l+0x2ee>
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w
 8009df0:	ffc00000 	.word	0xffc00000
 8009df4:	41dfffff 	.word	0x41dfffff
 8009df8:	94a03595 	.word	0x94a03595
 8009dfc:	3fcfffff 	.word	0x3fcfffff

08009e00 <_strtod_r>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	@ (8009e08 <_strtod_r+0x8>)
 8009e02:	f7ff ba19 	b.w	8009238 <_strtod_l>
 8009e06:	bf00      	nop
 8009e08:	20000030 	.word	0x20000030

08009e0c <_strtol_l.constprop.0>:
 8009e0c:	2b24      	cmp	r3, #36	@ 0x24
 8009e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e12:	4686      	mov	lr, r0
 8009e14:	4690      	mov	r8, r2
 8009e16:	d801      	bhi.n	8009e1c <_strtol_l.constprop.0+0x10>
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d106      	bne.n	8009e2a <_strtol_l.constprop.0+0x1e>
 8009e1c:	f001 fec8 	bl	800bbb0 <__errno>
 8009e20:	2316      	movs	r3, #22
 8009e22:	6003      	str	r3, [r0, #0]
 8009e24:	2000      	movs	r0, #0
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	4834      	ldr	r0, [pc, #208]	@ (8009efc <_strtol_l.constprop.0+0xf0>)
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	462a      	mov	r2, r5
 8009e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e34:	5d06      	ldrb	r6, [r0, r4]
 8009e36:	f016 0608 	ands.w	r6, r6, #8
 8009e3a:	d1f8      	bne.n	8009e2e <_strtol_l.constprop.0+0x22>
 8009e3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e3e:	d12d      	bne.n	8009e9c <_strtol_l.constprop.0+0x90>
 8009e40:	782c      	ldrb	r4, [r5, #0]
 8009e42:	2601      	movs	r6, #1
 8009e44:	1c95      	adds	r5, r2, #2
 8009e46:	f033 0210 	bics.w	r2, r3, #16
 8009e4a:	d109      	bne.n	8009e60 <_strtol_l.constprop.0+0x54>
 8009e4c:	2c30      	cmp	r4, #48	@ 0x30
 8009e4e:	d12a      	bne.n	8009ea6 <_strtol_l.constprop.0+0x9a>
 8009e50:	782a      	ldrb	r2, [r5, #0]
 8009e52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e56:	2a58      	cmp	r2, #88	@ 0x58
 8009e58:	d125      	bne.n	8009ea6 <_strtol_l.constprop.0+0x9a>
 8009e5a:	786c      	ldrb	r4, [r5, #1]
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	3502      	adds	r5, #2
 8009e60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e68:	2200      	movs	r2, #0
 8009e6a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e78:	2f09      	cmp	r7, #9
 8009e7a:	d81b      	bhi.n	8009eb4 <_strtol_l.constprop.0+0xa8>
 8009e7c:	463c      	mov	r4, r7
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	dd27      	ble.n	8009ed2 <_strtol_l.constprop.0+0xc6>
 8009e82:	1c57      	adds	r7, r2, #1
 8009e84:	d007      	beq.n	8009e96 <_strtol_l.constprop.0+0x8a>
 8009e86:	4581      	cmp	r9, r0
 8009e88:	d320      	bcc.n	8009ecc <_strtol_l.constprop.0+0xc0>
 8009e8a:	d101      	bne.n	8009e90 <_strtol_l.constprop.0+0x84>
 8009e8c:	45a2      	cmp	sl, r4
 8009e8e:	db1d      	blt.n	8009ecc <_strtol_l.constprop.0+0xc0>
 8009e90:	fb00 4003 	mla	r0, r0, r3, r4
 8009e94:	2201      	movs	r2, #1
 8009e96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e9a:	e7eb      	b.n	8009e74 <_strtol_l.constprop.0+0x68>
 8009e9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e9e:	bf04      	itt	eq
 8009ea0:	782c      	ldrbeq	r4, [r5, #0]
 8009ea2:	1c95      	addeq	r5, r2, #2
 8009ea4:	e7cf      	b.n	8009e46 <_strtol_l.constprop.0+0x3a>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1da      	bne.n	8009e60 <_strtol_l.constprop.0+0x54>
 8009eaa:	2c30      	cmp	r4, #48	@ 0x30
 8009eac:	bf0c      	ite	eq
 8009eae:	2308      	moveq	r3, #8
 8009eb0:	230a      	movne	r3, #10
 8009eb2:	e7d5      	b.n	8009e60 <_strtol_l.constprop.0+0x54>
 8009eb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009eb8:	2f19      	cmp	r7, #25
 8009eba:	d801      	bhi.n	8009ec0 <_strtol_l.constprop.0+0xb4>
 8009ebc:	3c37      	subs	r4, #55	@ 0x37
 8009ebe:	e7de      	b.n	8009e7e <_strtol_l.constprop.0+0x72>
 8009ec0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ec4:	2f19      	cmp	r7, #25
 8009ec6:	d804      	bhi.n	8009ed2 <_strtol_l.constprop.0+0xc6>
 8009ec8:	3c57      	subs	r4, #87	@ 0x57
 8009eca:	e7d8      	b.n	8009e7e <_strtol_l.constprop.0+0x72>
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	e7e1      	b.n	8009e96 <_strtol_l.constprop.0+0x8a>
 8009ed2:	1c53      	adds	r3, r2, #1
 8009ed4:	d108      	bne.n	8009ee8 <_strtol_l.constprop.0+0xdc>
 8009ed6:	2322      	movs	r3, #34	@ 0x22
 8009ed8:	f8ce 3000 	str.w	r3, [lr]
 8009edc:	4660      	mov	r0, ip
 8009ede:	f1b8 0f00 	cmp.w	r8, #0
 8009ee2:	d0a0      	beq.n	8009e26 <_strtol_l.constprop.0+0x1a>
 8009ee4:	1e69      	subs	r1, r5, #1
 8009ee6:	e006      	b.n	8009ef6 <_strtol_l.constprop.0+0xea>
 8009ee8:	b106      	cbz	r6, 8009eec <_strtol_l.constprop.0+0xe0>
 8009eea:	4240      	negs	r0, r0
 8009eec:	f1b8 0f00 	cmp.w	r8, #0
 8009ef0:	d099      	beq.n	8009e26 <_strtol_l.constprop.0+0x1a>
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	d1f6      	bne.n	8009ee4 <_strtol_l.constprop.0+0xd8>
 8009ef6:	f8c8 1000 	str.w	r1, [r8]
 8009efa:	e794      	b.n	8009e26 <_strtol_l.constprop.0+0x1a>
 8009efc:	08010601 	.word	0x08010601

08009f00 <_strtol_r>:
 8009f00:	f7ff bf84 	b.w	8009e0c <_strtol_l.constprop.0>

08009f04 <strtol>:
 8009f04:	4613      	mov	r3, r2
 8009f06:	460a      	mov	r2, r1
 8009f08:	4601      	mov	r1, r0
 8009f0a:	4802      	ldr	r0, [pc, #8]	@ (8009f14 <strtol+0x10>)
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f7ff bf7d 	b.w	8009e0c <_strtol_l.constprop.0>
 8009f12:	bf00      	nop
 8009f14:	2000019c 	.word	0x2000019c

08009f18 <__cvt>:
 8009f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	ec57 6b10 	vmov	r6, r7, d0
 8009f20:	2f00      	cmp	r7, #0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4619      	mov	r1, r3
 8009f26:	463b      	mov	r3, r7
 8009f28:	bfbb      	ittet	lt
 8009f2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f2e:	461f      	movlt	r7, r3
 8009f30:	2300      	movge	r3, #0
 8009f32:	232d      	movlt	r3, #45	@ 0x2d
 8009f34:	700b      	strb	r3, [r1, #0]
 8009f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f3c:	4691      	mov	r9, r2
 8009f3e:	f023 0820 	bic.w	r8, r3, #32
 8009f42:	bfbc      	itt	lt
 8009f44:	4632      	movlt	r2, r6
 8009f46:	4616      	movlt	r6, r2
 8009f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f4c:	d005      	beq.n	8009f5a <__cvt+0x42>
 8009f4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f52:	d100      	bne.n	8009f56 <__cvt+0x3e>
 8009f54:	3401      	adds	r4, #1
 8009f56:	2102      	movs	r1, #2
 8009f58:	e000      	b.n	8009f5c <__cvt+0x44>
 8009f5a:	2103      	movs	r1, #3
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	ab02      	add	r3, sp, #8
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	ec47 6b10 	vmov	d0, r6, r7
 8009f68:	4653      	mov	r3, sl
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	f001 ff08 	bl	800bd80 <_dtoa_r>
 8009f70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f74:	4605      	mov	r5, r0
 8009f76:	d119      	bne.n	8009fac <__cvt+0x94>
 8009f78:	f019 0f01 	tst.w	r9, #1
 8009f7c:	d00e      	beq.n	8009f9c <__cvt+0x84>
 8009f7e:	eb00 0904 	add.w	r9, r0, r4
 8009f82:	2200      	movs	r2, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f8e:	b108      	cbz	r0, 8009f94 <__cvt+0x7c>
 8009f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f94:	2230      	movs	r2, #48	@ 0x30
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	454b      	cmp	r3, r9
 8009f9a:	d31e      	bcc.n	8009fda <__cvt+0xc2>
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fa0:	1b5b      	subs	r3, r3, r5
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	b004      	add	sp, #16
 8009fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fb0:	eb00 0904 	add.w	r9, r0, r4
 8009fb4:	d1e5      	bne.n	8009f82 <__cvt+0x6a>
 8009fb6:	7803      	ldrb	r3, [r0, #0]
 8009fb8:	2b30      	cmp	r3, #48	@ 0x30
 8009fba:	d10a      	bne.n	8009fd2 <__cvt+0xba>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	f7f6 fd90 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fc8:	b918      	cbnz	r0, 8009fd2 <__cvt+0xba>
 8009fca:	f1c4 0401 	rsb	r4, r4, #1
 8009fce:	f8ca 4000 	str.w	r4, [sl]
 8009fd2:	f8da 3000 	ldr.w	r3, [sl]
 8009fd6:	4499      	add	r9, r3
 8009fd8:	e7d3      	b.n	8009f82 <__cvt+0x6a>
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	9103      	str	r1, [sp, #12]
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	e7d9      	b.n	8009f96 <__cvt+0x7e>

08009fe2 <__exponent>:
 8009fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	bfba      	itte	lt
 8009fe8:	4249      	neglt	r1, r1
 8009fea:	232d      	movlt	r3, #45	@ 0x2d
 8009fec:	232b      	movge	r3, #43	@ 0x2b
 8009fee:	2909      	cmp	r1, #9
 8009ff0:	7002      	strb	r2, [r0, #0]
 8009ff2:	7043      	strb	r3, [r0, #1]
 8009ff4:	dd29      	ble.n	800a04a <__exponent+0x68>
 8009ff6:	f10d 0307 	add.w	r3, sp, #7
 8009ffa:	461d      	mov	r5, r3
 8009ffc:	270a      	movs	r7, #10
 8009ffe:	461a      	mov	r2, r3
 800a000:	fbb1 f6f7 	udiv	r6, r1, r7
 800a004:	fb07 1416 	mls	r4, r7, r6, r1
 800a008:	3430      	adds	r4, #48	@ 0x30
 800a00a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a00e:	460c      	mov	r4, r1
 800a010:	2c63      	cmp	r4, #99	@ 0x63
 800a012:	f103 33ff 	add.w	r3, r3, #4294967295
 800a016:	4631      	mov	r1, r6
 800a018:	dcf1      	bgt.n	8009ffe <__exponent+0x1c>
 800a01a:	3130      	adds	r1, #48	@ 0x30
 800a01c:	1e94      	subs	r4, r2, #2
 800a01e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a022:	1c41      	adds	r1, r0, #1
 800a024:	4623      	mov	r3, r4
 800a026:	42ab      	cmp	r3, r5
 800a028:	d30a      	bcc.n	800a040 <__exponent+0x5e>
 800a02a:	f10d 0309 	add.w	r3, sp, #9
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	42ac      	cmp	r4, r5
 800a032:	bf88      	it	hi
 800a034:	2300      	movhi	r3, #0
 800a036:	3302      	adds	r3, #2
 800a038:	4403      	add	r3, r0
 800a03a:	1a18      	subs	r0, r3, r0
 800a03c:	b003      	add	sp, #12
 800a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a040:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a044:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a048:	e7ed      	b.n	800a026 <__exponent+0x44>
 800a04a:	2330      	movs	r3, #48	@ 0x30
 800a04c:	3130      	adds	r1, #48	@ 0x30
 800a04e:	7083      	strb	r3, [r0, #2]
 800a050:	70c1      	strb	r1, [r0, #3]
 800a052:	1d03      	adds	r3, r0, #4
 800a054:	e7f1      	b.n	800a03a <__exponent+0x58>
	...

0800a058 <_printf_float>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	b08d      	sub	sp, #52	@ 0x34
 800a05e:	460c      	mov	r4, r1
 800a060:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a064:	4616      	mov	r6, r2
 800a066:	461f      	mov	r7, r3
 800a068:	4605      	mov	r5, r0
 800a06a:	f001 fd47 	bl	800bafc <_localeconv_r>
 800a06e:	6803      	ldr	r3, [r0, #0]
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	4618      	mov	r0, r3
 800a074:	f7f6 f90c 	bl	8000290 <strlen>
 800a078:	2300      	movs	r3, #0
 800a07a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a07c:	f8d8 3000 	ldr.w	r3, [r8]
 800a080:	9005      	str	r0, [sp, #20]
 800a082:	3307      	adds	r3, #7
 800a084:	f023 0307 	bic.w	r3, r3, #7
 800a088:	f103 0208 	add.w	r2, r3, #8
 800a08c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a090:	f8d4 b000 	ldr.w	fp, [r4]
 800a094:	f8c8 2000 	str.w	r2, [r8]
 800a098:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a09c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0a0:	9307      	str	r3, [sp, #28]
 800a0a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a320 <_printf_float+0x2c8>)
 800a0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b4:	f7f6 fd4a 	bl	8000b4c <__aeabi_dcmpun>
 800a0b8:	bb70      	cbnz	r0, 800a118 <_printf_float+0xc0>
 800a0ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0be:	4b98      	ldr	r3, [pc, #608]	@ (800a320 <_printf_float+0x2c8>)
 800a0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c4:	f7f6 fd24 	bl	8000b10 <__aeabi_dcmple>
 800a0c8:	bb30      	cbnz	r0, 800a118 <_printf_float+0xc0>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fd13 	bl	8000afc <__aeabi_dcmplt>
 800a0d6:	b110      	cbz	r0, 800a0de <_printf_float+0x86>
 800a0d8:	232d      	movs	r3, #45	@ 0x2d
 800a0da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0de:	4a91      	ldr	r2, [pc, #580]	@ (800a324 <_printf_float+0x2cc>)
 800a0e0:	4b91      	ldr	r3, [pc, #580]	@ (800a328 <_printf_float+0x2d0>)
 800a0e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0e6:	bf94      	ite	ls
 800a0e8:	4690      	movls	r8, r2
 800a0ea:	4698      	movhi	r8, r3
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	f02b 0304 	bic.w	r3, fp, #4
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	f04f 0900 	mov.w	r9, #0
 800a0fa:	9700      	str	r7, [sp, #0]
 800a0fc:	4633      	mov	r3, r6
 800a0fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a100:	4621      	mov	r1, r4
 800a102:	4628      	mov	r0, r5
 800a104:	f000 f9d2 	bl	800a4ac <_printf_common>
 800a108:	3001      	adds	r0, #1
 800a10a:	f040 808d 	bne.w	800a228 <_printf_float+0x1d0>
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295
 800a112:	b00d      	add	sp, #52	@ 0x34
 800a114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fd14 	bl	8000b4c <__aeabi_dcmpun>
 800a124:	b140      	cbz	r0, 800a138 <_printf_float+0xe0>
 800a126:	464b      	mov	r3, r9
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bfbc      	itt	lt
 800a12c:	232d      	movlt	r3, #45	@ 0x2d
 800a12e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a132:	4a7e      	ldr	r2, [pc, #504]	@ (800a32c <_printf_float+0x2d4>)
 800a134:	4b7e      	ldr	r3, [pc, #504]	@ (800a330 <_printf_float+0x2d8>)
 800a136:	e7d4      	b.n	800a0e2 <_printf_float+0x8a>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a13e:	9206      	str	r2, [sp, #24]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	d13b      	bne.n	800a1bc <_printf_float+0x164>
 800a144:	2306      	movs	r3, #6
 800a146:	6063      	str	r3, [r4, #4]
 800a148:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a14c:	2300      	movs	r3, #0
 800a14e:	6022      	str	r2, [r4, #0]
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	ab0a      	add	r3, sp, #40	@ 0x28
 800a154:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a158:	ab09      	add	r3, sp, #36	@ 0x24
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	ec49 8b10 	vmov	d0, r8, r9
 800a162:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a166:	4628      	mov	r0, r5
 800a168:	f7ff fed6 	bl	8009f18 <__cvt>
 800a16c:	9b06      	ldr	r3, [sp, #24]
 800a16e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a170:	2b47      	cmp	r3, #71	@ 0x47
 800a172:	4680      	mov	r8, r0
 800a174:	d129      	bne.n	800a1ca <_printf_float+0x172>
 800a176:	1cc8      	adds	r0, r1, #3
 800a178:	db02      	blt.n	800a180 <_printf_float+0x128>
 800a17a:	6863      	ldr	r3, [r4, #4]
 800a17c:	4299      	cmp	r1, r3
 800a17e:	dd41      	ble.n	800a204 <_printf_float+0x1ac>
 800a180:	f1aa 0a02 	sub.w	sl, sl, #2
 800a184:	fa5f fa8a 	uxtb.w	sl, sl
 800a188:	3901      	subs	r1, #1
 800a18a:	4652      	mov	r2, sl
 800a18c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a190:	9109      	str	r1, [sp, #36]	@ 0x24
 800a192:	f7ff ff26 	bl	8009fe2 <__exponent>
 800a196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a198:	1813      	adds	r3, r2, r0
 800a19a:	2a01      	cmp	r2, #1
 800a19c:	4681      	mov	r9, r0
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	dc02      	bgt.n	800a1a8 <_printf_float+0x150>
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	07d2      	lsls	r2, r2, #31
 800a1a6:	d501      	bpl.n	800a1ac <_printf_float+0x154>
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0a2      	beq.n	800a0fa <_printf_float+0xa2>
 800a1b4:	232d      	movs	r3, #45	@ 0x2d
 800a1b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ba:	e79e      	b.n	800a0fa <_printf_float+0xa2>
 800a1bc:	9a06      	ldr	r2, [sp, #24]
 800a1be:	2a47      	cmp	r2, #71	@ 0x47
 800a1c0:	d1c2      	bne.n	800a148 <_printf_float+0xf0>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1c0      	bne.n	800a148 <_printf_float+0xf0>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e7bd      	b.n	800a146 <_printf_float+0xee>
 800a1ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1ce:	d9db      	bls.n	800a188 <_printf_float+0x130>
 800a1d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1d4:	d118      	bne.n	800a208 <_printf_float+0x1b0>
 800a1d6:	2900      	cmp	r1, #0
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	dd0b      	ble.n	800a1f4 <_printf_float+0x19c>
 800a1dc:	6121      	str	r1, [r4, #16]
 800a1de:	b913      	cbnz	r3, 800a1e6 <_printf_float+0x18e>
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	07d0      	lsls	r0, r2, #31
 800a1e4:	d502      	bpl.n	800a1ec <_printf_float+0x194>
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	440b      	add	r3, r1
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	e7db      	b.n	800a1ac <_printf_float+0x154>
 800a1f4:	b913      	cbnz	r3, 800a1fc <_printf_float+0x1a4>
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	07d2      	lsls	r2, r2, #31
 800a1fa:	d501      	bpl.n	800a200 <_printf_float+0x1a8>
 800a1fc:	3302      	adds	r3, #2
 800a1fe:	e7f4      	b.n	800a1ea <_printf_float+0x192>
 800a200:	2301      	movs	r3, #1
 800a202:	e7f2      	b.n	800a1ea <_printf_float+0x192>
 800a204:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20a:	4299      	cmp	r1, r3
 800a20c:	db05      	blt.n	800a21a <_printf_float+0x1c2>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	6121      	str	r1, [r4, #16]
 800a212:	07d8      	lsls	r0, r3, #31
 800a214:	d5ea      	bpl.n	800a1ec <_printf_float+0x194>
 800a216:	1c4b      	adds	r3, r1, #1
 800a218:	e7e7      	b.n	800a1ea <_printf_float+0x192>
 800a21a:	2900      	cmp	r1, #0
 800a21c:	bfd4      	ite	le
 800a21e:	f1c1 0202 	rsble	r2, r1, #2
 800a222:	2201      	movgt	r2, #1
 800a224:	4413      	add	r3, r2
 800a226:	e7e0      	b.n	800a1ea <_printf_float+0x192>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	055a      	lsls	r2, r3, #21
 800a22c:	d407      	bmi.n	800a23e <_printf_float+0x1e6>
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	4642      	mov	r2, r8
 800a232:	4631      	mov	r1, r6
 800a234:	4628      	mov	r0, r5
 800a236:	47b8      	blx	r7
 800a238:	3001      	adds	r0, #1
 800a23a:	d12b      	bne.n	800a294 <_printf_float+0x23c>
 800a23c:	e767      	b.n	800a10e <_printf_float+0xb6>
 800a23e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a242:	f240 80dd 	bls.w	800a400 <_printf_float+0x3a8>
 800a246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	f7f6 fc4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a252:	2800      	cmp	r0, #0
 800a254:	d033      	beq.n	800a2be <_printf_float+0x266>
 800a256:	4a37      	ldr	r2, [pc, #220]	@ (800a334 <_printf_float+0x2dc>)
 800a258:	2301      	movs	r3, #1
 800a25a:	4631      	mov	r1, r6
 800a25c:	4628      	mov	r0, r5
 800a25e:	47b8      	blx	r7
 800a260:	3001      	adds	r0, #1
 800a262:	f43f af54 	beq.w	800a10e <_printf_float+0xb6>
 800a266:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a26a:	4543      	cmp	r3, r8
 800a26c:	db02      	blt.n	800a274 <_printf_float+0x21c>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07d8      	lsls	r0, r3, #31
 800a272:	d50f      	bpl.n	800a294 <_printf_float+0x23c>
 800a274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f af45 	beq.w	800a10e <_printf_float+0xb6>
 800a284:	f04f 0900 	mov.w	r9, #0
 800a288:	f108 38ff 	add.w	r8, r8, #4294967295
 800a28c:	f104 0a1a 	add.w	sl, r4, #26
 800a290:	45c8      	cmp	r8, r9
 800a292:	dc09      	bgt.n	800a2a8 <_printf_float+0x250>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	079b      	lsls	r3, r3, #30
 800a298:	f100 8103 	bmi.w	800a4a2 <_printf_float+0x44a>
 800a29c:	68e0      	ldr	r0, [r4, #12]
 800a29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a0:	4298      	cmp	r0, r3
 800a2a2:	bfb8      	it	lt
 800a2a4:	4618      	movlt	r0, r3
 800a2a6:	e734      	b.n	800a112 <_printf_float+0xba>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	47b8      	blx	r7
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	f43f af2b 	beq.w	800a10e <_printf_float+0xb6>
 800a2b8:	f109 0901 	add.w	r9, r9, #1
 800a2bc:	e7e8      	b.n	800a290 <_printf_float+0x238>
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dc39      	bgt.n	800a338 <_printf_float+0x2e0>
 800a2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a334 <_printf_float+0x2dc>)
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f af1d 	beq.w	800a10e <_printf_float+0xb6>
 800a2d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a2dc:	d102      	bne.n	800a2e4 <_printf_float+0x28c>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	07d9      	lsls	r1, r3, #31
 800a2e2:	d5d7      	bpl.n	800a294 <_printf_float+0x23c>
 800a2e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f43f af0d 	beq.w	800a10e <_printf_float+0xb6>
 800a2f4:	f04f 0a00 	mov.w	sl, #0
 800a2f8:	f104 0b1a 	add.w	fp, r4, #26
 800a2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fe:	425b      	negs	r3, r3
 800a300:	4553      	cmp	r3, sl
 800a302:	dc01      	bgt.n	800a308 <_printf_float+0x2b0>
 800a304:	464b      	mov	r3, r9
 800a306:	e793      	b.n	800a230 <_printf_float+0x1d8>
 800a308:	2301      	movs	r3, #1
 800a30a:	465a      	mov	r2, fp
 800a30c:	4631      	mov	r1, r6
 800a30e:	4628      	mov	r0, r5
 800a310:	47b8      	blx	r7
 800a312:	3001      	adds	r0, #1
 800a314:	f43f aefb 	beq.w	800a10e <_printf_float+0xb6>
 800a318:	f10a 0a01 	add.w	sl, sl, #1
 800a31c:	e7ee      	b.n	800a2fc <_printf_float+0x2a4>
 800a31e:	bf00      	nop
 800a320:	7fefffff 	.word	0x7fefffff
 800a324:	08010701 	.word	0x08010701
 800a328:	08010705 	.word	0x08010705
 800a32c:	08010709 	.word	0x08010709
 800a330:	0801070d 	.word	0x0801070d
 800a334:	08010a57 	.word	0x08010a57
 800a338:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a33a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a33e:	4553      	cmp	r3, sl
 800a340:	bfa8      	it	ge
 800a342:	4653      	movge	r3, sl
 800a344:	2b00      	cmp	r3, #0
 800a346:	4699      	mov	r9, r3
 800a348:	dc36      	bgt.n	800a3b8 <_printf_float+0x360>
 800a34a:	f04f 0b00 	mov.w	fp, #0
 800a34e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a352:	f104 021a 	add.w	r2, r4, #26
 800a356:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a358:	9306      	str	r3, [sp, #24]
 800a35a:	eba3 0309 	sub.w	r3, r3, r9
 800a35e:	455b      	cmp	r3, fp
 800a360:	dc31      	bgt.n	800a3c6 <_printf_float+0x36e>
 800a362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a364:	459a      	cmp	sl, r3
 800a366:	dc3a      	bgt.n	800a3de <_printf_float+0x386>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	07da      	lsls	r2, r3, #31
 800a36c:	d437      	bmi.n	800a3de <_printf_float+0x386>
 800a36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a370:	ebaa 0903 	sub.w	r9, sl, r3
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	ebaa 0303 	sub.w	r3, sl, r3
 800a37a:	4599      	cmp	r9, r3
 800a37c:	bfa8      	it	ge
 800a37e:	4699      	movge	r9, r3
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dc33      	bgt.n	800a3ee <_printf_float+0x396>
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a38e:	f104 0b1a 	add.w	fp, r4, #26
 800a392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a394:	ebaa 0303 	sub.w	r3, sl, r3
 800a398:	eba3 0309 	sub.w	r3, r3, r9
 800a39c:	4543      	cmp	r3, r8
 800a39e:	f77f af79 	ble.w	800a294 <_printf_float+0x23c>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	465a      	mov	r2, fp
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f aeae 	beq.w	800a10e <_printf_float+0xb6>
 800a3b2:	f108 0801 	add.w	r8, r8, #1
 800a3b6:	e7ec      	b.n	800a392 <_printf_float+0x33a>
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d1c2      	bne.n	800a34a <_printf_float+0x2f2>
 800a3c4:	e6a3      	b.n	800a10e <_printf_float+0xb6>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	9206      	str	r2, [sp, #24]
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	f43f ae9c 	beq.w	800a10e <_printf_float+0xb6>
 800a3d6:	9a06      	ldr	r2, [sp, #24]
 800a3d8:	f10b 0b01 	add.w	fp, fp, #1
 800a3dc:	e7bb      	b.n	800a356 <_printf_float+0x2fe>
 800a3de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d1c0      	bne.n	800a36e <_printf_float+0x316>
 800a3ec:	e68f      	b.n	800a10e <_printf_float+0xb6>
 800a3ee:	9a06      	ldr	r2, [sp, #24]
 800a3f0:	464b      	mov	r3, r9
 800a3f2:	4442      	add	r2, r8
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	47b8      	blx	r7
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d1c3      	bne.n	800a386 <_printf_float+0x32e>
 800a3fe:	e686      	b.n	800a10e <_printf_float+0xb6>
 800a400:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a404:	f1ba 0f01 	cmp.w	sl, #1
 800a408:	dc01      	bgt.n	800a40e <_printf_float+0x3b6>
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d536      	bpl.n	800a47c <_printf_float+0x424>
 800a40e:	2301      	movs	r3, #1
 800a410:	4642      	mov	r2, r8
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f ae78 	beq.w	800a10e <_printf_float+0xb6>
 800a41e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f ae70 	beq.w	800a10e <_printf_float+0xb6>
 800a42e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a43a:	f7f6 fb55 	bl	8000ae8 <__aeabi_dcmpeq>
 800a43e:	b9c0      	cbnz	r0, 800a472 <_printf_float+0x41a>
 800a440:	4653      	mov	r3, sl
 800a442:	f108 0201 	add.w	r2, r8, #1
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	d10c      	bne.n	800a46a <_printf_float+0x412>
 800a450:	e65d      	b.n	800a10e <_printf_float+0xb6>
 800a452:	2301      	movs	r3, #1
 800a454:	465a      	mov	r2, fp
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	f43f ae56 	beq.w	800a10e <_printf_float+0xb6>
 800a462:	f108 0801 	add.w	r8, r8, #1
 800a466:	45d0      	cmp	r8, sl
 800a468:	dbf3      	blt.n	800a452 <_printf_float+0x3fa>
 800a46a:	464b      	mov	r3, r9
 800a46c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a470:	e6df      	b.n	800a232 <_printf_float+0x1da>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	f104 0b1a 	add.w	fp, r4, #26
 800a47a:	e7f4      	b.n	800a466 <_printf_float+0x40e>
 800a47c:	2301      	movs	r3, #1
 800a47e:	4642      	mov	r2, r8
 800a480:	e7e1      	b.n	800a446 <_printf_float+0x3ee>
 800a482:	2301      	movs	r3, #1
 800a484:	464a      	mov	r2, r9
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae3e 	beq.w	800a10e <_printf_float+0xb6>
 800a492:	f108 0801 	add.w	r8, r8, #1
 800a496:	68e3      	ldr	r3, [r4, #12]
 800a498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a49a:	1a5b      	subs	r3, r3, r1
 800a49c:	4543      	cmp	r3, r8
 800a49e:	dcf0      	bgt.n	800a482 <_printf_float+0x42a>
 800a4a0:	e6fc      	b.n	800a29c <_printf_float+0x244>
 800a4a2:	f04f 0800 	mov.w	r8, #0
 800a4a6:	f104 0919 	add.w	r9, r4, #25
 800a4aa:	e7f4      	b.n	800a496 <_printf_float+0x43e>

0800a4ac <_printf_common>:
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	4698      	mov	r8, r3
 800a4b4:	688a      	ldr	r2, [r1, #8]
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	bfb8      	it	lt
 800a4c0:	4613      	movlt	r3, r2
 800a4c2:	6033      	str	r3, [r6, #0]
 800a4c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	b10a      	cbz	r2, 800a4d2 <_printf_common+0x26>
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	0699      	lsls	r1, r3, #26
 800a4d6:	bf42      	ittt	mi
 800a4d8:	6833      	ldrmi	r3, [r6, #0]
 800a4da:	3302      	addmi	r3, #2
 800a4dc:	6033      	strmi	r3, [r6, #0]
 800a4de:	6825      	ldr	r5, [r4, #0]
 800a4e0:	f015 0506 	ands.w	r5, r5, #6
 800a4e4:	d106      	bne.n	800a4f4 <_printf_common+0x48>
 800a4e6:	f104 0a19 	add.w	sl, r4, #25
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	6832      	ldr	r2, [r6, #0]
 800a4ee:	1a9b      	subs	r3, r3, r2
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	dc26      	bgt.n	800a542 <_printf_common+0x96>
 800a4f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	3b00      	subs	r3, #0
 800a4fc:	bf18      	it	ne
 800a4fe:	2301      	movne	r3, #1
 800a500:	0692      	lsls	r2, r2, #26
 800a502:	d42b      	bmi.n	800a55c <_printf_common+0xb0>
 800a504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a508:	4641      	mov	r1, r8
 800a50a:	4638      	mov	r0, r7
 800a50c:	47c8      	blx	r9
 800a50e:	3001      	adds	r0, #1
 800a510:	d01e      	beq.n	800a550 <_printf_common+0xa4>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	6922      	ldr	r2, [r4, #16]
 800a516:	f003 0306 	and.w	r3, r3, #6
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	bf02      	ittt	eq
 800a51e:	68e5      	ldreq	r5, [r4, #12]
 800a520:	6833      	ldreq	r3, [r6, #0]
 800a522:	1aed      	subeq	r5, r5, r3
 800a524:	68a3      	ldr	r3, [r4, #8]
 800a526:	bf0c      	ite	eq
 800a528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a52c:	2500      	movne	r5, #0
 800a52e:	4293      	cmp	r3, r2
 800a530:	bfc4      	itt	gt
 800a532:	1a9b      	subgt	r3, r3, r2
 800a534:	18ed      	addgt	r5, r5, r3
 800a536:	2600      	movs	r6, #0
 800a538:	341a      	adds	r4, #26
 800a53a:	42b5      	cmp	r5, r6
 800a53c:	d11a      	bne.n	800a574 <_printf_common+0xc8>
 800a53e:	2000      	movs	r0, #0
 800a540:	e008      	b.n	800a554 <_printf_common+0xa8>
 800a542:	2301      	movs	r3, #1
 800a544:	4652      	mov	r2, sl
 800a546:	4641      	mov	r1, r8
 800a548:	4638      	mov	r0, r7
 800a54a:	47c8      	blx	r9
 800a54c:	3001      	adds	r0, #1
 800a54e:	d103      	bne.n	800a558 <_printf_common+0xac>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a558:	3501      	adds	r5, #1
 800a55a:	e7c6      	b.n	800a4ea <_printf_common+0x3e>
 800a55c:	18e1      	adds	r1, r4, r3
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	2030      	movs	r0, #48	@ 0x30
 800a562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a566:	4422      	add	r2, r4
 800a568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a56c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a570:	3302      	adds	r3, #2
 800a572:	e7c7      	b.n	800a504 <_printf_common+0x58>
 800a574:	2301      	movs	r3, #1
 800a576:	4622      	mov	r2, r4
 800a578:	4641      	mov	r1, r8
 800a57a:	4638      	mov	r0, r7
 800a57c:	47c8      	blx	r9
 800a57e:	3001      	adds	r0, #1
 800a580:	d0e6      	beq.n	800a550 <_printf_common+0xa4>
 800a582:	3601      	adds	r6, #1
 800a584:	e7d9      	b.n	800a53a <_printf_common+0x8e>
	...

0800a588 <_printf_i>:
 800a588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	7e0f      	ldrb	r7, [r1, #24]
 800a58e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a590:	2f78      	cmp	r7, #120	@ 0x78
 800a592:	4691      	mov	r9, r2
 800a594:	4680      	mov	r8, r0
 800a596:	460c      	mov	r4, r1
 800a598:	469a      	mov	sl, r3
 800a59a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a59e:	d807      	bhi.n	800a5b0 <_printf_i+0x28>
 800a5a0:	2f62      	cmp	r7, #98	@ 0x62
 800a5a2:	d80a      	bhi.n	800a5ba <_printf_i+0x32>
 800a5a4:	2f00      	cmp	r7, #0
 800a5a6:	f000 80d2 	beq.w	800a74e <_printf_i+0x1c6>
 800a5aa:	2f58      	cmp	r7, #88	@ 0x58
 800a5ac:	f000 80b9 	beq.w	800a722 <_printf_i+0x19a>
 800a5b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5b8:	e03a      	b.n	800a630 <_printf_i+0xa8>
 800a5ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5be:	2b15      	cmp	r3, #21
 800a5c0:	d8f6      	bhi.n	800a5b0 <_printf_i+0x28>
 800a5c2:	a101      	add	r1, pc, #4	@ (adr r1, 800a5c8 <_printf_i+0x40>)
 800a5c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a635 	.word	0x0800a635
 800a5d0:	0800a5b1 	.word	0x0800a5b1
 800a5d4:	0800a5b1 	.word	0x0800a5b1
 800a5d8:	0800a5b1 	.word	0x0800a5b1
 800a5dc:	0800a5b1 	.word	0x0800a5b1
 800a5e0:	0800a635 	.word	0x0800a635
 800a5e4:	0800a5b1 	.word	0x0800a5b1
 800a5e8:	0800a5b1 	.word	0x0800a5b1
 800a5ec:	0800a5b1 	.word	0x0800a5b1
 800a5f0:	0800a5b1 	.word	0x0800a5b1
 800a5f4:	0800a735 	.word	0x0800a735
 800a5f8:	0800a65f 	.word	0x0800a65f
 800a5fc:	0800a6ef 	.word	0x0800a6ef
 800a600:	0800a5b1 	.word	0x0800a5b1
 800a604:	0800a5b1 	.word	0x0800a5b1
 800a608:	0800a757 	.word	0x0800a757
 800a60c:	0800a5b1 	.word	0x0800a5b1
 800a610:	0800a65f 	.word	0x0800a65f
 800a614:	0800a5b1 	.word	0x0800a5b1
 800a618:	0800a5b1 	.word	0x0800a5b1
 800a61c:	0800a6f7 	.word	0x0800a6f7
 800a620:	6833      	ldr	r3, [r6, #0]
 800a622:	1d1a      	adds	r2, r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6032      	str	r2, [r6, #0]
 800a628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a62c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a630:	2301      	movs	r3, #1
 800a632:	e09d      	b.n	800a770 <_printf_i+0x1e8>
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	1d19      	adds	r1, r3, #4
 800a63a:	6031      	str	r1, [r6, #0]
 800a63c:	0606      	lsls	r6, r0, #24
 800a63e:	d501      	bpl.n	800a644 <_printf_i+0xbc>
 800a640:	681d      	ldr	r5, [r3, #0]
 800a642:	e003      	b.n	800a64c <_printf_i+0xc4>
 800a644:	0645      	lsls	r5, r0, #25
 800a646:	d5fb      	bpl.n	800a640 <_printf_i+0xb8>
 800a648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	da03      	bge.n	800a658 <_printf_i+0xd0>
 800a650:	232d      	movs	r3, #45	@ 0x2d
 800a652:	426d      	negs	r5, r5
 800a654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a658:	4859      	ldr	r0, [pc, #356]	@ (800a7c0 <_printf_i+0x238>)
 800a65a:	230a      	movs	r3, #10
 800a65c:	e011      	b.n	800a682 <_printf_i+0xfa>
 800a65e:	6821      	ldr	r1, [r4, #0]
 800a660:	6833      	ldr	r3, [r6, #0]
 800a662:	0608      	lsls	r0, r1, #24
 800a664:	f853 5b04 	ldr.w	r5, [r3], #4
 800a668:	d402      	bmi.n	800a670 <_printf_i+0xe8>
 800a66a:	0649      	lsls	r1, r1, #25
 800a66c:	bf48      	it	mi
 800a66e:	b2ad      	uxthmi	r5, r5
 800a670:	2f6f      	cmp	r7, #111	@ 0x6f
 800a672:	4853      	ldr	r0, [pc, #332]	@ (800a7c0 <_printf_i+0x238>)
 800a674:	6033      	str	r3, [r6, #0]
 800a676:	bf14      	ite	ne
 800a678:	230a      	movne	r3, #10
 800a67a:	2308      	moveq	r3, #8
 800a67c:	2100      	movs	r1, #0
 800a67e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a682:	6866      	ldr	r6, [r4, #4]
 800a684:	60a6      	str	r6, [r4, #8]
 800a686:	2e00      	cmp	r6, #0
 800a688:	bfa2      	ittt	ge
 800a68a:	6821      	ldrge	r1, [r4, #0]
 800a68c:	f021 0104 	bicge.w	r1, r1, #4
 800a690:	6021      	strge	r1, [r4, #0]
 800a692:	b90d      	cbnz	r5, 800a698 <_printf_i+0x110>
 800a694:	2e00      	cmp	r6, #0
 800a696:	d04b      	beq.n	800a730 <_printf_i+0x1a8>
 800a698:	4616      	mov	r6, r2
 800a69a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a69e:	fb03 5711 	mls	r7, r3, r1, r5
 800a6a2:	5dc7      	ldrb	r7, [r0, r7]
 800a6a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6a8:	462f      	mov	r7, r5
 800a6aa:	42bb      	cmp	r3, r7
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	d9f4      	bls.n	800a69a <_printf_i+0x112>
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d10b      	bne.n	800a6cc <_printf_i+0x144>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	07df      	lsls	r7, r3, #31
 800a6b8:	d508      	bpl.n	800a6cc <_printf_i+0x144>
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	6861      	ldr	r1, [r4, #4]
 800a6be:	4299      	cmp	r1, r3
 800a6c0:	bfde      	ittt	le
 800a6c2:	2330      	movle	r3, #48	@ 0x30
 800a6c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6cc:	1b92      	subs	r2, r2, r6
 800a6ce:	6122      	str	r2, [r4, #16]
 800a6d0:	f8cd a000 	str.w	sl, [sp]
 800a6d4:	464b      	mov	r3, r9
 800a6d6:	aa03      	add	r2, sp, #12
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7ff fee6 	bl	800a4ac <_printf_common>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d14a      	bne.n	800a77a <_printf_i+0x1f2>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	b004      	add	sp, #16
 800a6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	f043 0320 	orr.w	r3, r3, #32
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	4833      	ldr	r0, [pc, #204]	@ (800a7c4 <_printf_i+0x23c>)
 800a6f8:	2778      	movs	r7, #120	@ 0x78
 800a6fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	6831      	ldr	r1, [r6, #0]
 800a702:	061f      	lsls	r7, r3, #24
 800a704:	f851 5b04 	ldr.w	r5, [r1], #4
 800a708:	d402      	bmi.n	800a710 <_printf_i+0x188>
 800a70a:	065f      	lsls	r7, r3, #25
 800a70c:	bf48      	it	mi
 800a70e:	b2ad      	uxthmi	r5, r5
 800a710:	6031      	str	r1, [r6, #0]
 800a712:	07d9      	lsls	r1, r3, #31
 800a714:	bf44      	itt	mi
 800a716:	f043 0320 	orrmi.w	r3, r3, #32
 800a71a:	6023      	strmi	r3, [r4, #0]
 800a71c:	b11d      	cbz	r5, 800a726 <_printf_i+0x19e>
 800a71e:	2310      	movs	r3, #16
 800a720:	e7ac      	b.n	800a67c <_printf_i+0xf4>
 800a722:	4827      	ldr	r0, [pc, #156]	@ (800a7c0 <_printf_i+0x238>)
 800a724:	e7e9      	b.n	800a6fa <_printf_i+0x172>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	f023 0320 	bic.w	r3, r3, #32
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	e7f6      	b.n	800a71e <_printf_i+0x196>
 800a730:	4616      	mov	r6, r2
 800a732:	e7bd      	b.n	800a6b0 <_printf_i+0x128>
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	6825      	ldr	r5, [r4, #0]
 800a738:	6961      	ldr	r1, [r4, #20]
 800a73a:	1d18      	adds	r0, r3, #4
 800a73c:	6030      	str	r0, [r6, #0]
 800a73e:	062e      	lsls	r6, r5, #24
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	d501      	bpl.n	800a748 <_printf_i+0x1c0>
 800a744:	6019      	str	r1, [r3, #0]
 800a746:	e002      	b.n	800a74e <_printf_i+0x1c6>
 800a748:	0668      	lsls	r0, r5, #25
 800a74a:	d5fb      	bpl.n	800a744 <_printf_i+0x1bc>
 800a74c:	8019      	strh	r1, [r3, #0]
 800a74e:	2300      	movs	r3, #0
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	4616      	mov	r6, r2
 800a754:	e7bc      	b.n	800a6d0 <_printf_i+0x148>
 800a756:	6833      	ldr	r3, [r6, #0]
 800a758:	1d1a      	adds	r2, r3, #4
 800a75a:	6032      	str	r2, [r6, #0]
 800a75c:	681e      	ldr	r6, [r3, #0]
 800a75e:	6862      	ldr	r2, [r4, #4]
 800a760:	2100      	movs	r1, #0
 800a762:	4630      	mov	r0, r6
 800a764:	f7f5 fd44 	bl	80001f0 <memchr>
 800a768:	b108      	cbz	r0, 800a76e <_printf_i+0x1e6>
 800a76a:	1b80      	subs	r0, r0, r6
 800a76c:	6060      	str	r0, [r4, #4]
 800a76e:	6863      	ldr	r3, [r4, #4]
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	2300      	movs	r3, #0
 800a774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a778:	e7aa      	b.n	800a6d0 <_printf_i+0x148>
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	4632      	mov	r2, r6
 800a77e:	4649      	mov	r1, r9
 800a780:	4640      	mov	r0, r8
 800a782:	47d0      	blx	sl
 800a784:	3001      	adds	r0, #1
 800a786:	d0ad      	beq.n	800a6e4 <_printf_i+0x15c>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	079b      	lsls	r3, r3, #30
 800a78c:	d413      	bmi.n	800a7b6 <_printf_i+0x22e>
 800a78e:	68e0      	ldr	r0, [r4, #12]
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	4298      	cmp	r0, r3
 800a794:	bfb8      	it	lt
 800a796:	4618      	movlt	r0, r3
 800a798:	e7a6      	b.n	800a6e8 <_printf_i+0x160>
 800a79a:	2301      	movs	r3, #1
 800a79c:	4632      	mov	r2, r6
 800a79e:	4649      	mov	r1, r9
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	47d0      	blx	sl
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d09d      	beq.n	800a6e4 <_printf_i+0x15c>
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	68e3      	ldr	r3, [r4, #12]
 800a7ac:	9903      	ldr	r1, [sp, #12]
 800a7ae:	1a5b      	subs	r3, r3, r1
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	dcf2      	bgt.n	800a79a <_printf_i+0x212>
 800a7b4:	e7eb      	b.n	800a78e <_printf_i+0x206>
 800a7b6:	2500      	movs	r5, #0
 800a7b8:	f104 0619 	add.w	r6, r4, #25
 800a7bc:	e7f5      	b.n	800a7aa <_printf_i+0x222>
 800a7be:	bf00      	nop
 800a7c0:	08010711 	.word	0x08010711
 800a7c4:	08010722 	.word	0x08010722

0800a7c8 <_scanf_float>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	b087      	sub	sp, #28
 800a7ce:	4617      	mov	r7, r2
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	688b      	ldr	r3, [r1, #8]
 800a7d4:	1e5a      	subs	r2, r3, #1
 800a7d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7da:	bf81      	itttt	hi
 800a7dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7e8:	608b      	strhi	r3, [r1, #8]
 800a7ea:	680b      	ldr	r3, [r1, #0]
 800a7ec:	460a      	mov	r2, r1
 800a7ee:	f04f 0500 	mov.w	r5, #0
 800a7f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a7f6:	f842 3b1c 	str.w	r3, [r2], #28
 800a7fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7fe:	4680      	mov	r8, r0
 800a800:	460c      	mov	r4, r1
 800a802:	bf98      	it	ls
 800a804:	f04f 0b00 	movls.w	fp, #0
 800a808:	9201      	str	r2, [sp, #4]
 800a80a:	4616      	mov	r6, r2
 800a80c:	46aa      	mov	sl, r5
 800a80e:	46a9      	mov	r9, r5
 800a810:	9502      	str	r5, [sp, #8]
 800a812:	68a2      	ldr	r2, [r4, #8]
 800a814:	b152      	cbz	r2, 800a82c <_scanf_float+0x64>
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a81c:	d864      	bhi.n	800a8e8 <_scanf_float+0x120>
 800a81e:	2b40      	cmp	r3, #64	@ 0x40
 800a820:	d83c      	bhi.n	800a89c <_scanf_float+0xd4>
 800a822:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a826:	b2c8      	uxtb	r0, r1
 800a828:	280e      	cmp	r0, #14
 800a82a:	d93a      	bls.n	800a8a2 <_scanf_float+0xda>
 800a82c:	f1b9 0f00 	cmp.w	r9, #0
 800a830:	d003      	beq.n	800a83a <_scanf_float+0x72>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a83e:	f1ba 0f01 	cmp.w	sl, #1
 800a842:	f200 8117 	bhi.w	800aa74 <_scanf_float+0x2ac>
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	429e      	cmp	r6, r3
 800a84a:	f200 8108 	bhi.w	800aa5e <_scanf_float+0x296>
 800a84e:	2001      	movs	r0, #1
 800a850:	b007      	add	sp, #28
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a856:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a85a:	2a0d      	cmp	r2, #13
 800a85c:	d8e6      	bhi.n	800a82c <_scanf_float+0x64>
 800a85e:	a101      	add	r1, pc, #4	@ (adr r1, 800a864 <_scanf_float+0x9c>)
 800a860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a864:	0800a9ab 	.word	0x0800a9ab
 800a868:	0800a82d 	.word	0x0800a82d
 800a86c:	0800a82d 	.word	0x0800a82d
 800a870:	0800a82d 	.word	0x0800a82d
 800a874:	0800aa0b 	.word	0x0800aa0b
 800a878:	0800a9e3 	.word	0x0800a9e3
 800a87c:	0800a82d 	.word	0x0800a82d
 800a880:	0800a82d 	.word	0x0800a82d
 800a884:	0800a9b9 	.word	0x0800a9b9
 800a888:	0800a82d 	.word	0x0800a82d
 800a88c:	0800a82d 	.word	0x0800a82d
 800a890:	0800a82d 	.word	0x0800a82d
 800a894:	0800a82d 	.word	0x0800a82d
 800a898:	0800a971 	.word	0x0800a971
 800a89c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8a0:	e7db      	b.n	800a85a <_scanf_float+0x92>
 800a8a2:	290e      	cmp	r1, #14
 800a8a4:	d8c2      	bhi.n	800a82c <_scanf_float+0x64>
 800a8a6:	a001      	add	r0, pc, #4	@ (adr r0, 800a8ac <_scanf_float+0xe4>)
 800a8a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8ac:	0800a961 	.word	0x0800a961
 800a8b0:	0800a82d 	.word	0x0800a82d
 800a8b4:	0800a961 	.word	0x0800a961
 800a8b8:	0800a9f7 	.word	0x0800a9f7
 800a8bc:	0800a82d 	.word	0x0800a82d
 800a8c0:	0800a909 	.word	0x0800a909
 800a8c4:	0800a947 	.word	0x0800a947
 800a8c8:	0800a947 	.word	0x0800a947
 800a8cc:	0800a947 	.word	0x0800a947
 800a8d0:	0800a947 	.word	0x0800a947
 800a8d4:	0800a947 	.word	0x0800a947
 800a8d8:	0800a947 	.word	0x0800a947
 800a8dc:	0800a947 	.word	0x0800a947
 800a8e0:	0800a947 	.word	0x0800a947
 800a8e4:	0800a947 	.word	0x0800a947
 800a8e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8ea:	d809      	bhi.n	800a900 <_scanf_float+0x138>
 800a8ec:	2b60      	cmp	r3, #96	@ 0x60
 800a8ee:	d8b2      	bhi.n	800a856 <_scanf_float+0x8e>
 800a8f0:	2b54      	cmp	r3, #84	@ 0x54
 800a8f2:	d07b      	beq.n	800a9ec <_scanf_float+0x224>
 800a8f4:	2b59      	cmp	r3, #89	@ 0x59
 800a8f6:	d199      	bne.n	800a82c <_scanf_float+0x64>
 800a8f8:	2d07      	cmp	r5, #7
 800a8fa:	d197      	bne.n	800a82c <_scanf_float+0x64>
 800a8fc:	2508      	movs	r5, #8
 800a8fe:	e02c      	b.n	800a95a <_scanf_float+0x192>
 800a900:	2b74      	cmp	r3, #116	@ 0x74
 800a902:	d073      	beq.n	800a9ec <_scanf_float+0x224>
 800a904:	2b79      	cmp	r3, #121	@ 0x79
 800a906:	e7f6      	b.n	800a8f6 <_scanf_float+0x12e>
 800a908:	6821      	ldr	r1, [r4, #0]
 800a90a:	05c8      	lsls	r0, r1, #23
 800a90c:	d51b      	bpl.n	800a946 <_scanf_float+0x17e>
 800a90e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a912:	6021      	str	r1, [r4, #0]
 800a914:	f109 0901 	add.w	r9, r9, #1
 800a918:	f1bb 0f00 	cmp.w	fp, #0
 800a91c:	d003      	beq.n	800a926 <_scanf_float+0x15e>
 800a91e:	3201      	adds	r2, #1
 800a920:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a924:	60a2      	str	r2, [r4, #8]
 800a926:	68a3      	ldr	r3, [r4, #8]
 800a928:	3b01      	subs	r3, #1
 800a92a:	60a3      	str	r3, [r4, #8]
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	3301      	adds	r3, #1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3b01      	subs	r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	f340 8087 	ble.w	800aa4c <_scanf_float+0x284>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	3301      	adds	r3, #1
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	e765      	b.n	800a812 <_scanf_float+0x4a>
 800a946:	eb1a 0105 	adds.w	r1, sl, r5
 800a94a:	f47f af6f 	bne.w	800a82c <_scanf_float+0x64>
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a954:	6022      	str	r2, [r4, #0]
 800a956:	460d      	mov	r5, r1
 800a958:	468a      	mov	sl, r1
 800a95a:	f806 3b01 	strb.w	r3, [r6], #1
 800a95e:	e7e2      	b.n	800a926 <_scanf_float+0x15e>
 800a960:	6822      	ldr	r2, [r4, #0]
 800a962:	0610      	lsls	r0, r2, #24
 800a964:	f57f af62 	bpl.w	800a82c <_scanf_float+0x64>
 800a968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a96c:	6022      	str	r2, [r4, #0]
 800a96e:	e7f4      	b.n	800a95a <_scanf_float+0x192>
 800a970:	f1ba 0f00 	cmp.w	sl, #0
 800a974:	d10e      	bne.n	800a994 <_scanf_float+0x1cc>
 800a976:	f1b9 0f00 	cmp.w	r9, #0
 800a97a:	d10e      	bne.n	800a99a <_scanf_float+0x1d2>
 800a97c:	6822      	ldr	r2, [r4, #0]
 800a97e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a982:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a986:	d108      	bne.n	800a99a <_scanf_float+0x1d2>
 800a988:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a98c:	6022      	str	r2, [r4, #0]
 800a98e:	f04f 0a01 	mov.w	sl, #1
 800a992:	e7e2      	b.n	800a95a <_scanf_float+0x192>
 800a994:	f1ba 0f02 	cmp.w	sl, #2
 800a998:	d055      	beq.n	800aa46 <_scanf_float+0x27e>
 800a99a:	2d01      	cmp	r5, #1
 800a99c:	d002      	beq.n	800a9a4 <_scanf_float+0x1dc>
 800a99e:	2d04      	cmp	r5, #4
 800a9a0:	f47f af44 	bne.w	800a82c <_scanf_float+0x64>
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	b2ed      	uxtb	r5, r5
 800a9a8:	e7d7      	b.n	800a95a <_scanf_float+0x192>
 800a9aa:	f1ba 0f01 	cmp.w	sl, #1
 800a9ae:	f47f af3d 	bne.w	800a82c <_scanf_float+0x64>
 800a9b2:	f04f 0a02 	mov.w	sl, #2
 800a9b6:	e7d0      	b.n	800a95a <_scanf_float+0x192>
 800a9b8:	b97d      	cbnz	r5, 800a9da <_scanf_float+0x212>
 800a9ba:	f1b9 0f00 	cmp.w	r9, #0
 800a9be:	f47f af38 	bne.w	800a832 <_scanf_float+0x6a>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9cc:	f040 8108 	bne.w	800abe0 <_scanf_float+0x418>
 800a9d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9d4:	6022      	str	r2, [r4, #0]
 800a9d6:	2501      	movs	r5, #1
 800a9d8:	e7bf      	b.n	800a95a <_scanf_float+0x192>
 800a9da:	2d03      	cmp	r5, #3
 800a9dc:	d0e2      	beq.n	800a9a4 <_scanf_float+0x1dc>
 800a9de:	2d05      	cmp	r5, #5
 800a9e0:	e7de      	b.n	800a9a0 <_scanf_float+0x1d8>
 800a9e2:	2d02      	cmp	r5, #2
 800a9e4:	f47f af22 	bne.w	800a82c <_scanf_float+0x64>
 800a9e8:	2503      	movs	r5, #3
 800a9ea:	e7b6      	b.n	800a95a <_scanf_float+0x192>
 800a9ec:	2d06      	cmp	r5, #6
 800a9ee:	f47f af1d 	bne.w	800a82c <_scanf_float+0x64>
 800a9f2:	2507      	movs	r5, #7
 800a9f4:	e7b1      	b.n	800a95a <_scanf_float+0x192>
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	0591      	lsls	r1, r2, #22
 800a9fa:	f57f af17 	bpl.w	800a82c <_scanf_float+0x64>
 800a9fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa02:	6022      	str	r2, [r4, #0]
 800aa04:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa08:	e7a7      	b.n	800a95a <_scanf_float+0x192>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa10:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa14:	d006      	beq.n	800aa24 <_scanf_float+0x25c>
 800aa16:	0550      	lsls	r0, r2, #21
 800aa18:	f57f af08 	bpl.w	800a82c <_scanf_float+0x64>
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	f000 80de 	beq.w	800abe0 <_scanf_float+0x418>
 800aa24:	0591      	lsls	r1, r2, #22
 800aa26:	bf58      	it	pl
 800aa28:	9902      	ldrpl	r1, [sp, #8]
 800aa2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa2e:	bf58      	it	pl
 800aa30:	eba9 0101 	subpl.w	r1, r9, r1
 800aa34:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa38:	bf58      	it	pl
 800aa3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa3e:	6022      	str	r2, [r4, #0]
 800aa40:	f04f 0900 	mov.w	r9, #0
 800aa44:	e789      	b.n	800a95a <_scanf_float+0x192>
 800aa46:	f04f 0a03 	mov.w	sl, #3
 800aa4a:	e786      	b.n	800a95a <_scanf_float+0x192>
 800aa4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa50:	4639      	mov	r1, r7
 800aa52:	4640      	mov	r0, r8
 800aa54:	4798      	blx	r3
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f43f aedb 	beq.w	800a812 <_scanf_float+0x4a>
 800aa5c:	e6e6      	b.n	800a82c <_scanf_float+0x64>
 800aa5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa66:	463a      	mov	r2, r7
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4798      	blx	r3
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	e6e8      	b.n	800a846 <_scanf_float+0x7e>
 800aa74:	1e6b      	subs	r3, r5, #1
 800aa76:	2b06      	cmp	r3, #6
 800aa78:	d824      	bhi.n	800aac4 <_scanf_float+0x2fc>
 800aa7a:	2d02      	cmp	r5, #2
 800aa7c:	d836      	bhi.n	800aaec <_scanf_float+0x324>
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	429e      	cmp	r6, r3
 800aa82:	f67f aee4 	bls.w	800a84e <_scanf_float+0x86>
 800aa86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa8e:	463a      	mov	r2, r7
 800aa90:	4640      	mov	r0, r8
 800aa92:	4798      	blx	r3
 800aa94:	6923      	ldr	r3, [r4, #16]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	e7f0      	b.n	800aa7e <_scanf_float+0x2b6>
 800aa9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaa0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4798      	blx	r3
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aab4:	fa5f fa8a 	uxtb.w	sl, sl
 800aab8:	f1ba 0f02 	cmp.w	sl, #2
 800aabc:	d1ee      	bne.n	800aa9c <_scanf_float+0x2d4>
 800aabe:	3d03      	subs	r5, #3
 800aac0:	b2ed      	uxtb	r5, r5
 800aac2:	1b76      	subs	r6, r6, r5
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	05da      	lsls	r2, r3, #23
 800aac8:	d530      	bpl.n	800ab2c <_scanf_float+0x364>
 800aaca:	055b      	lsls	r3, r3, #21
 800aacc:	d511      	bpl.n	800aaf2 <_scanf_float+0x32a>
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	429e      	cmp	r6, r3
 800aad2:	f67f aebc 	bls.w	800a84e <_scanf_float+0x86>
 800aad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aade:	463a      	mov	r2, r7
 800aae0:	4640      	mov	r0, r8
 800aae2:	4798      	blx	r3
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	e7f0      	b.n	800aace <_scanf_float+0x306>
 800aaec:	46aa      	mov	sl, r5
 800aaee:	46b3      	mov	fp, r6
 800aaf0:	e7de      	b.n	800aab0 <_scanf_float+0x2e8>
 800aaf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	2965      	cmp	r1, #101	@ 0x65
 800aafa:	f103 33ff 	add.w	r3, r3, #4294967295
 800aafe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	d00c      	beq.n	800ab20 <_scanf_float+0x358>
 800ab06:	2945      	cmp	r1, #69	@ 0x45
 800ab08:	d00a      	beq.n	800ab20 <_scanf_float+0x358>
 800ab0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4640      	mov	r0, r8
 800ab12:	4798      	blx	r3
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	1eb5      	subs	r5, r6, #2
 800ab1e:	6123      	str	r3, [r4, #16]
 800ab20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab24:	463a      	mov	r2, r7
 800ab26:	4640      	mov	r0, r8
 800ab28:	4798      	blx	r3
 800ab2a:	462e      	mov	r6, r5
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	f012 0210 	ands.w	r2, r2, #16
 800ab32:	d001      	beq.n	800ab38 <_scanf_float+0x370>
 800ab34:	2000      	movs	r0, #0
 800ab36:	e68b      	b.n	800a850 <_scanf_float+0x88>
 800ab38:	7032      	strb	r2, [r6, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab44:	d11c      	bne.n	800ab80 <_scanf_float+0x3b8>
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	454b      	cmp	r3, r9
 800ab4a:	eba3 0209 	sub.w	r2, r3, r9
 800ab4e:	d123      	bne.n	800ab98 <_scanf_float+0x3d0>
 800ab50:	9901      	ldr	r1, [sp, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	4640      	mov	r0, r8
 800ab56:	f7ff f953 	bl	8009e00 <_strtod_r>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	6821      	ldr	r1, [r4, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f011 0f02 	tst.w	r1, #2
 800ab64:	ec57 6b10 	vmov	r6, r7, d0
 800ab68:	f103 0204 	add.w	r2, r3, #4
 800ab6c:	d01f      	beq.n	800abae <_scanf_float+0x3e6>
 800ab6e:	9903      	ldr	r1, [sp, #12]
 800ab70:	600a      	str	r2, [r1, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	e9c3 6700 	strd	r6, r7, [r3]
 800ab78:	68e3      	ldr	r3, [r4, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60e3      	str	r3, [r4, #12]
 800ab7e:	e7d9      	b.n	800ab34 <_scanf_float+0x36c>
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0e4      	beq.n	800ab50 <_scanf_float+0x388>
 800ab86:	9905      	ldr	r1, [sp, #20]
 800ab88:	230a      	movs	r3, #10
 800ab8a:	3101      	adds	r1, #1
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	f7ff f9b7 	bl	8009f00 <_strtol_r>
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	9e05      	ldr	r6, [sp, #20]
 800ab96:	1ac2      	subs	r2, r0, r3
 800ab98:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab9c:	429e      	cmp	r6, r3
 800ab9e:	bf28      	it	cs
 800aba0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aba4:	4910      	ldr	r1, [pc, #64]	@ (800abe8 <_scanf_float+0x420>)
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 f918 	bl	800addc <siprintf>
 800abac:	e7d0      	b.n	800ab50 <_scanf_float+0x388>
 800abae:	f011 0f04 	tst.w	r1, #4
 800abb2:	9903      	ldr	r1, [sp, #12]
 800abb4:	600a      	str	r2, [r1, #0]
 800abb6:	d1dc      	bne.n	800ab72 <_scanf_float+0x3aa>
 800abb8:	681d      	ldr	r5, [r3, #0]
 800abba:	4632      	mov	r2, r6
 800abbc:	463b      	mov	r3, r7
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 ffc3 	bl	8000b4c <__aeabi_dcmpun>
 800abc6:	b128      	cbz	r0, 800abd4 <_scanf_float+0x40c>
 800abc8:	4808      	ldr	r0, [pc, #32]	@ (800abec <_scanf_float+0x424>)
 800abca:	f001 f841 	bl	800bc50 <nanf>
 800abce:	ed85 0a00 	vstr	s0, [r5]
 800abd2:	e7d1      	b.n	800ab78 <_scanf_float+0x3b0>
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f6 f816 	bl	8000c08 <__aeabi_d2f>
 800abdc:	6028      	str	r0, [r5, #0]
 800abde:	e7cb      	b.n	800ab78 <_scanf_float+0x3b0>
 800abe0:	f04f 0900 	mov.w	r9, #0
 800abe4:	e629      	b.n	800a83a <_scanf_float+0x72>
 800abe6:	bf00      	nop
 800abe8:	08010733 	.word	0x08010733
 800abec:	0800fc59 	.word	0x0800fc59

0800abf0 <std>:
 800abf0:	2300      	movs	r3, #0
 800abf2:	b510      	push	{r4, lr}
 800abf4:	4604      	mov	r4, r0
 800abf6:	e9c0 3300 	strd	r3, r3, [r0]
 800abfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abfe:	6083      	str	r3, [r0, #8]
 800ac00:	8181      	strh	r1, [r0, #12]
 800ac02:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac04:	81c2      	strh	r2, [r0, #14]
 800ac06:	6183      	str	r3, [r0, #24]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	305c      	adds	r0, #92	@ 0x5c
 800ac0e:	f000 f9ad 	bl	800af6c <memset>
 800ac12:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <std+0x58>)
 800ac14:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac16:	4b0d      	ldr	r3, [pc, #52]	@ (800ac4c <std+0x5c>)
 800ac18:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <std+0x60>)
 800ac1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <std+0x64>)
 800ac20:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <std+0x68>)
 800ac24:	6224      	str	r4, [r4, #32]
 800ac26:	429c      	cmp	r4, r3
 800ac28:	d006      	beq.n	800ac38 <std+0x48>
 800ac2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac2e:	4294      	cmp	r4, r2
 800ac30:	d002      	beq.n	800ac38 <std+0x48>
 800ac32:	33d0      	adds	r3, #208	@ 0xd0
 800ac34:	429c      	cmp	r4, r3
 800ac36:	d105      	bne.n	800ac44 <std+0x54>
 800ac38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac40:	f000 bfe0 	b.w	800bc04 <__retarget_lock_init_recursive>
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	bf00      	nop
 800ac48:	0800ae71 	.word	0x0800ae71
 800ac4c:	0800ae97 	.word	0x0800ae97
 800ac50:	0800aecf 	.word	0x0800aecf
 800ac54:	0800aef3 	.word	0x0800aef3
 800ac58:	200096fc 	.word	0x200096fc

0800ac5c <stdio_exit_handler>:
 800ac5c:	4a02      	ldr	r2, [pc, #8]	@ (800ac68 <stdio_exit_handler+0xc>)
 800ac5e:	4903      	ldr	r1, [pc, #12]	@ (800ac6c <stdio_exit_handler+0x10>)
 800ac60:	4803      	ldr	r0, [pc, #12]	@ (800ac70 <stdio_exit_handler+0x14>)
 800ac62:	f000 b869 	b.w	800ad38 <_fwalk_sglue>
 800ac66:	bf00      	nop
 800ac68:	2000001c 	.word	0x2000001c
 800ac6c:	0800e519 	.word	0x0800e519
 800ac70:	200001a0 	.word	0x200001a0

0800ac74 <cleanup_stdio>:
 800ac74:	6841      	ldr	r1, [r0, #4]
 800ac76:	4b0c      	ldr	r3, [pc, #48]	@ (800aca8 <cleanup_stdio+0x34>)
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	d001      	beq.n	800ac84 <cleanup_stdio+0x10>
 800ac80:	f003 fc4a 	bl	800e518 <_fflush_r>
 800ac84:	68a1      	ldr	r1, [r4, #8]
 800ac86:	4b09      	ldr	r3, [pc, #36]	@ (800acac <cleanup_stdio+0x38>)
 800ac88:	4299      	cmp	r1, r3
 800ac8a:	d002      	beq.n	800ac92 <cleanup_stdio+0x1e>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f003 fc43 	bl	800e518 <_fflush_r>
 800ac92:	68e1      	ldr	r1, [r4, #12]
 800ac94:	4b06      	ldr	r3, [pc, #24]	@ (800acb0 <cleanup_stdio+0x3c>)
 800ac96:	4299      	cmp	r1, r3
 800ac98:	d004      	beq.n	800aca4 <cleanup_stdio+0x30>
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca0:	f003 bc3a 	b.w	800e518 <_fflush_r>
 800aca4:	bd10      	pop	{r4, pc}
 800aca6:	bf00      	nop
 800aca8:	200096fc 	.word	0x200096fc
 800acac:	20009764 	.word	0x20009764
 800acb0:	200097cc 	.word	0x200097cc

0800acb4 <global_stdio_init.part.0>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ace4 <global_stdio_init.part.0+0x30>)
 800acb8:	4c0b      	ldr	r4, [pc, #44]	@ (800ace8 <global_stdio_init.part.0+0x34>)
 800acba:	4a0c      	ldr	r2, [pc, #48]	@ (800acec <global_stdio_init.part.0+0x38>)
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	4620      	mov	r0, r4
 800acc0:	2200      	movs	r2, #0
 800acc2:	2104      	movs	r1, #4
 800acc4:	f7ff ff94 	bl	800abf0 <std>
 800acc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800accc:	2201      	movs	r2, #1
 800acce:	2109      	movs	r1, #9
 800acd0:	f7ff ff8e 	bl	800abf0 <std>
 800acd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acd8:	2202      	movs	r2, #2
 800acda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acde:	2112      	movs	r1, #18
 800ace0:	f7ff bf86 	b.w	800abf0 <std>
 800ace4:	20009834 	.word	0x20009834
 800ace8:	200096fc 	.word	0x200096fc
 800acec:	0800ac5d 	.word	0x0800ac5d

0800acf0 <__sfp_lock_acquire>:
 800acf0:	4801      	ldr	r0, [pc, #4]	@ (800acf8 <__sfp_lock_acquire+0x8>)
 800acf2:	f000 bf89 	b.w	800bc08 <__retarget_lock_acquire_recursive>
 800acf6:	bf00      	nop
 800acf8:	20009863 	.word	0x20009863

0800acfc <__sfp_lock_release>:
 800acfc:	4801      	ldr	r0, [pc, #4]	@ (800ad04 <__sfp_lock_release+0x8>)
 800acfe:	f000 bf85 	b.w	800bc0c <__retarget_lock_release_recursive>
 800ad02:	bf00      	nop
 800ad04:	20009863 	.word	0x20009863

0800ad08 <__sinit>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	f7ff fff0 	bl	800acf0 <__sfp_lock_acquire>
 800ad10:	6a23      	ldr	r3, [r4, #32]
 800ad12:	b11b      	cbz	r3, 800ad1c <__sinit+0x14>
 800ad14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad18:	f7ff bff0 	b.w	800acfc <__sfp_lock_release>
 800ad1c:	4b04      	ldr	r3, [pc, #16]	@ (800ad30 <__sinit+0x28>)
 800ad1e:	6223      	str	r3, [r4, #32]
 800ad20:	4b04      	ldr	r3, [pc, #16]	@ (800ad34 <__sinit+0x2c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1f5      	bne.n	800ad14 <__sinit+0xc>
 800ad28:	f7ff ffc4 	bl	800acb4 <global_stdio_init.part.0>
 800ad2c:	e7f2      	b.n	800ad14 <__sinit+0xc>
 800ad2e:	bf00      	nop
 800ad30:	0800ac75 	.word	0x0800ac75
 800ad34:	20009834 	.word	0x20009834

0800ad38 <_fwalk_sglue>:
 800ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	4688      	mov	r8, r1
 800ad40:	4614      	mov	r4, r2
 800ad42:	2600      	movs	r6, #0
 800ad44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad48:	f1b9 0901 	subs.w	r9, r9, #1
 800ad4c:	d505      	bpl.n	800ad5a <_fwalk_sglue+0x22>
 800ad4e:	6824      	ldr	r4, [r4, #0]
 800ad50:	2c00      	cmp	r4, #0
 800ad52:	d1f7      	bne.n	800ad44 <_fwalk_sglue+0xc>
 800ad54:	4630      	mov	r0, r6
 800ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d907      	bls.n	800ad70 <_fwalk_sglue+0x38>
 800ad60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad64:	3301      	adds	r3, #1
 800ad66:	d003      	beq.n	800ad70 <_fwalk_sglue+0x38>
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	47c0      	blx	r8
 800ad6e:	4306      	orrs	r6, r0
 800ad70:	3568      	adds	r5, #104	@ 0x68
 800ad72:	e7e9      	b.n	800ad48 <_fwalk_sglue+0x10>

0800ad74 <sniprintf>:
 800ad74:	b40c      	push	{r2, r3}
 800ad76:	b530      	push	{r4, r5, lr}
 800ad78:	4b17      	ldr	r3, [pc, #92]	@ (800add8 <sniprintf+0x64>)
 800ad7a:	1e0c      	subs	r4, r1, #0
 800ad7c:	681d      	ldr	r5, [r3, #0]
 800ad7e:	b09d      	sub	sp, #116	@ 0x74
 800ad80:	da08      	bge.n	800ad94 <sniprintf+0x20>
 800ad82:	238b      	movs	r3, #139	@ 0x8b
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8a:	b01d      	add	sp, #116	@ 0x74
 800ad8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad90:	b002      	add	sp, #8
 800ad92:	4770      	bx	lr
 800ad94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad98:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad9c:	bf14      	ite	ne
 800ad9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ada2:	4623      	moveq	r3, r4
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	9307      	str	r3, [sp, #28]
 800ada8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adac:	9002      	str	r0, [sp, #8]
 800adae:	9006      	str	r0, [sp, #24]
 800adb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adb6:	ab21      	add	r3, sp, #132	@ 0x84
 800adb8:	a902      	add	r1, sp, #8
 800adba:	4628      	mov	r0, r5
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	f002 ff11 	bl	800dbe4 <_svfiprintf_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	bfbc      	itt	lt
 800adc6:	238b      	movlt	r3, #139	@ 0x8b
 800adc8:	602b      	strlt	r3, [r5, #0]
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d0dd      	beq.n	800ad8a <sniprintf+0x16>
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	2200      	movs	r2, #0
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	e7d9      	b.n	800ad8a <sniprintf+0x16>
 800add6:	bf00      	nop
 800add8:	2000019c 	.word	0x2000019c

0800addc <siprintf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b500      	push	{lr}
 800ade0:	b09c      	sub	sp, #112	@ 0x70
 800ade2:	ab1d      	add	r3, sp, #116	@ 0x74
 800ade4:	9002      	str	r0, [sp, #8]
 800ade6:	9006      	str	r0, [sp, #24]
 800ade8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adec:	4809      	ldr	r0, [pc, #36]	@ (800ae14 <siprintf+0x38>)
 800adee:	9107      	str	r1, [sp, #28]
 800adf0:	9104      	str	r1, [sp, #16]
 800adf2:	4909      	ldr	r1, [pc, #36]	@ (800ae18 <siprintf+0x3c>)
 800adf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf8:	9105      	str	r1, [sp, #20]
 800adfa:	6800      	ldr	r0, [r0, #0]
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	a902      	add	r1, sp, #8
 800ae00:	f002 fef0 	bl	800dbe4 <_svfiprintf_r>
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	b01c      	add	sp, #112	@ 0x70
 800ae0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	2000019c 	.word	0x2000019c
 800ae18:	ffff0208 	.word	0xffff0208

0800ae1c <siscanf>:
 800ae1c:	b40e      	push	{r1, r2, r3}
 800ae1e:	b530      	push	{r4, r5, lr}
 800ae20:	b09c      	sub	sp, #112	@ 0x70
 800ae22:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ae24:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ae28:	f854 5b04 	ldr.w	r5, [r4], #4
 800ae2c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ae30:	9002      	str	r0, [sp, #8]
 800ae32:	9006      	str	r0, [sp, #24]
 800ae34:	f7f5 fa2c 	bl	8000290 <strlen>
 800ae38:	4b0b      	ldr	r3, [pc, #44]	@ (800ae68 <siscanf+0x4c>)
 800ae3a:	9003      	str	r0, [sp, #12]
 800ae3c:	9007      	str	r0, [sp, #28]
 800ae3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae40:	480a      	ldr	r0, [pc, #40]	@ (800ae6c <siscanf+0x50>)
 800ae42:	9401      	str	r4, [sp, #4]
 800ae44:	2300      	movs	r3, #0
 800ae46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae48:	9314      	str	r3, [sp, #80]	@ 0x50
 800ae4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae52:	462a      	mov	r2, r5
 800ae54:	4623      	mov	r3, r4
 800ae56:	a902      	add	r1, sp, #8
 800ae58:	6800      	ldr	r0, [r0, #0]
 800ae5a:	f003 f817 	bl	800de8c <__ssvfiscanf_r>
 800ae5e:	b01c      	add	sp, #112	@ 0x70
 800ae60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae64:	b003      	add	sp, #12
 800ae66:	4770      	bx	lr
 800ae68:	0800ae93 	.word	0x0800ae93
 800ae6c:	2000019c 	.word	0x2000019c

0800ae70 <__sread>:
 800ae70:	b510      	push	{r4, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae78:	f000 fe66 	bl	800bb48 <_read_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	bfab      	itete	ge
 800ae80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae82:	89a3      	ldrhlt	r3, [r4, #12]
 800ae84:	181b      	addge	r3, r3, r0
 800ae86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae8a:	bfac      	ite	ge
 800ae8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae8e:	81a3      	strhlt	r3, [r4, #12]
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <__seofread>:
 800ae92:	2000      	movs	r0, #0
 800ae94:	4770      	bx	lr

0800ae96 <__swrite>:
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	898b      	ldrh	r3, [r1, #12]
 800ae9e:	05db      	lsls	r3, r3, #23
 800aea0:	4605      	mov	r5, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4616      	mov	r6, r2
 800aea6:	d505      	bpl.n	800aeb4 <__swrite+0x1e>
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	2302      	movs	r3, #2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f000 fe38 	bl	800bb24 <_lseek_r>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	f000 be5f 	b.w	800bb8c <_write_r>

0800aece <__sseek>:
 800aece:	b510      	push	{r4, lr}
 800aed0:	460c      	mov	r4, r1
 800aed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed6:	f000 fe25 	bl	800bb24 <_lseek_r>
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	bf15      	itete	ne
 800aee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aeea:	81a3      	strheq	r3, [r4, #12]
 800aeec:	bf18      	it	ne
 800aeee:	81a3      	strhne	r3, [r4, #12]
 800aef0:	bd10      	pop	{r4, pc}

0800aef2 <__sclose>:
 800aef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef6:	f000 be05 	b.w	800bb04 <_close_r>

0800aefa <_vsniprintf_r>:
 800aefa:	b530      	push	{r4, r5, lr}
 800aefc:	4614      	mov	r4, r2
 800aefe:	2c00      	cmp	r4, #0
 800af00:	b09b      	sub	sp, #108	@ 0x6c
 800af02:	4605      	mov	r5, r0
 800af04:	461a      	mov	r2, r3
 800af06:	da05      	bge.n	800af14 <_vsniprintf_r+0x1a>
 800af08:	238b      	movs	r3, #139	@ 0x8b
 800af0a:	6003      	str	r3, [r0, #0]
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295
 800af10:	b01b      	add	sp, #108	@ 0x6c
 800af12:	bd30      	pop	{r4, r5, pc}
 800af14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800af18:	f8ad 300c 	strh.w	r3, [sp, #12]
 800af1c:	bf14      	ite	ne
 800af1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af22:	4623      	moveq	r3, r4
 800af24:	9302      	str	r3, [sp, #8]
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af2c:	9100      	str	r1, [sp, #0]
 800af2e:	9104      	str	r1, [sp, #16]
 800af30:	f8ad 300e 	strh.w	r3, [sp, #14]
 800af34:	4669      	mov	r1, sp
 800af36:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800af38:	f002 fe54 	bl	800dbe4 <_svfiprintf_r>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	bfbc      	itt	lt
 800af40:	238b      	movlt	r3, #139	@ 0x8b
 800af42:	602b      	strlt	r3, [r5, #0]
 800af44:	2c00      	cmp	r4, #0
 800af46:	d0e3      	beq.n	800af10 <_vsniprintf_r+0x16>
 800af48:	9b00      	ldr	r3, [sp, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e7df      	b.n	800af10 <_vsniprintf_r+0x16>

0800af50 <vsniprintf>:
 800af50:	b507      	push	{r0, r1, r2, lr}
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	4613      	mov	r3, r2
 800af56:	460a      	mov	r2, r1
 800af58:	4601      	mov	r1, r0
 800af5a:	4803      	ldr	r0, [pc, #12]	@ (800af68 <vsniprintf+0x18>)
 800af5c:	6800      	ldr	r0, [r0, #0]
 800af5e:	f7ff ffcc 	bl	800aefa <_vsniprintf_r>
 800af62:	b003      	add	sp, #12
 800af64:	f85d fb04 	ldr.w	pc, [sp], #4
 800af68:	2000019c 	.word	0x2000019c

0800af6c <memset>:
 800af6c:	4402      	add	r2, r0
 800af6e:	4603      	mov	r3, r0
 800af70:	4293      	cmp	r3, r2
 800af72:	d100      	bne.n	800af76 <memset+0xa>
 800af74:	4770      	bx	lr
 800af76:	f803 1b01 	strb.w	r1, [r3], #1
 800af7a:	e7f9      	b.n	800af70 <memset+0x4>

0800af7c <strchr>:
 800af7c:	b2c9      	uxtb	r1, r1
 800af7e:	4603      	mov	r3, r0
 800af80:	4618      	mov	r0, r3
 800af82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af86:	b112      	cbz	r2, 800af8e <strchr+0x12>
 800af88:	428a      	cmp	r2, r1
 800af8a:	d1f9      	bne.n	800af80 <strchr+0x4>
 800af8c:	4770      	bx	lr
 800af8e:	2900      	cmp	r1, #0
 800af90:	bf18      	it	ne
 800af92:	2000      	movne	r0, #0
 800af94:	4770      	bx	lr

0800af96 <strncmp>:
 800af96:	b510      	push	{r4, lr}
 800af98:	b16a      	cbz	r2, 800afb6 <strncmp+0x20>
 800af9a:	3901      	subs	r1, #1
 800af9c:	1884      	adds	r4, r0, r2
 800af9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d103      	bne.n	800afb2 <strncmp+0x1c>
 800afaa:	42a0      	cmp	r0, r4
 800afac:	d001      	beq.n	800afb2 <strncmp+0x1c>
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d1f5      	bne.n	800af9e <strncmp+0x8>
 800afb2:	1ad0      	subs	r0, r2, r3
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	4610      	mov	r0, r2
 800afb8:	e7fc      	b.n	800afb4 <strncmp+0x1e>

0800afba <strncpy>:
 800afba:	b510      	push	{r4, lr}
 800afbc:	3901      	subs	r1, #1
 800afbe:	4603      	mov	r3, r0
 800afc0:	b132      	cbz	r2, 800afd0 <strncpy+0x16>
 800afc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800afc6:	f803 4b01 	strb.w	r4, [r3], #1
 800afca:	3a01      	subs	r2, #1
 800afcc:	2c00      	cmp	r4, #0
 800afce:	d1f7      	bne.n	800afc0 <strncpy+0x6>
 800afd0:	441a      	add	r2, r3
 800afd2:	2100      	movs	r1, #0
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d100      	bne.n	800afda <strncpy+0x20>
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	f803 1b01 	strb.w	r1, [r3], #1
 800afde:	e7f9      	b.n	800afd4 <strncpy+0x1a>

0800afe0 <strrchr>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800afe6:	4603      	mov	r3, r0
 800afe8:	d10e      	bne.n	800b008 <strrchr+0x28>
 800afea:	4621      	mov	r1, r4
 800afec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff0:	f7ff bfc4 	b.w	800af7c <strchr>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	4605      	mov	r5, r0
 800aff8:	4621      	mov	r1, r4
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff ffbe 	bl	800af7c <strchr>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1f7      	bne.n	800aff4 <strrchr+0x14>
 800b004:	4628      	mov	r0, r5
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	2500      	movs	r5, #0
 800b00a:	e7f5      	b.n	800aff8 <strrchr+0x18>

0800b00c <strstr>:
 800b00c:	780a      	ldrb	r2, [r1, #0]
 800b00e:	b570      	push	{r4, r5, r6, lr}
 800b010:	b96a      	cbnz	r2, 800b02e <strstr+0x22>
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	429a      	cmp	r2, r3
 800b016:	d109      	bne.n	800b02c <strstr+0x20>
 800b018:	460c      	mov	r4, r1
 800b01a:	4605      	mov	r5, r0
 800b01c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0f6      	beq.n	800b012 <strstr+0x6>
 800b024:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b028:	429e      	cmp	r6, r3
 800b02a:	d0f7      	beq.n	800b01c <strstr+0x10>
 800b02c:	3001      	adds	r0, #1
 800b02e:	7803      	ldrb	r3, [r0, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1ef      	bne.n	800b014 <strstr+0x8>
 800b034:	4618      	mov	r0, r3
 800b036:	e7ec      	b.n	800b012 <strstr+0x6>

0800b038 <validate_structure>:
 800b038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b03a:	6801      	ldr	r1, [r0, #0]
 800b03c:	293b      	cmp	r1, #59	@ 0x3b
 800b03e:	4604      	mov	r4, r0
 800b040:	d911      	bls.n	800b066 <validate_structure+0x2e>
 800b042:	223c      	movs	r2, #60	@ 0x3c
 800b044:	4668      	mov	r0, sp
 800b046:	f000 fe09 	bl	800bc5c <div>
 800b04a:	9a01      	ldr	r2, [sp, #4]
 800b04c:	6863      	ldr	r3, [r4, #4]
 800b04e:	9900      	ldr	r1, [sp, #0]
 800b050:	2a00      	cmp	r2, #0
 800b052:	440b      	add	r3, r1
 800b054:	6063      	str	r3, [r4, #4]
 800b056:	bfbb      	ittet	lt
 800b058:	323c      	addlt	r2, #60	@ 0x3c
 800b05a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b05e:	6022      	strge	r2, [r4, #0]
 800b060:	6022      	strlt	r2, [r4, #0]
 800b062:	bfb8      	it	lt
 800b064:	6063      	strlt	r3, [r4, #4]
 800b066:	6861      	ldr	r1, [r4, #4]
 800b068:	293b      	cmp	r1, #59	@ 0x3b
 800b06a:	d911      	bls.n	800b090 <validate_structure+0x58>
 800b06c:	223c      	movs	r2, #60	@ 0x3c
 800b06e:	4668      	mov	r0, sp
 800b070:	f000 fdf4 	bl	800bc5c <div>
 800b074:	9a01      	ldr	r2, [sp, #4]
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	9900      	ldr	r1, [sp, #0]
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	440b      	add	r3, r1
 800b07e:	60a3      	str	r3, [r4, #8]
 800b080:	bfbb      	ittet	lt
 800b082:	323c      	addlt	r2, #60	@ 0x3c
 800b084:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b088:	6062      	strge	r2, [r4, #4]
 800b08a:	6062      	strlt	r2, [r4, #4]
 800b08c:	bfb8      	it	lt
 800b08e:	60a3      	strlt	r3, [r4, #8]
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	2917      	cmp	r1, #23
 800b094:	d911      	bls.n	800b0ba <validate_structure+0x82>
 800b096:	2218      	movs	r2, #24
 800b098:	4668      	mov	r0, sp
 800b09a:	f000 fddf 	bl	800bc5c <div>
 800b09e:	9a01      	ldr	r2, [sp, #4]
 800b0a0:	68e3      	ldr	r3, [r4, #12]
 800b0a2:	9900      	ldr	r1, [sp, #0]
 800b0a4:	2a00      	cmp	r2, #0
 800b0a6:	440b      	add	r3, r1
 800b0a8:	60e3      	str	r3, [r4, #12]
 800b0aa:	bfbb      	ittet	lt
 800b0ac:	3218      	addlt	r2, #24
 800b0ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b0b2:	60a2      	strge	r2, [r4, #8]
 800b0b4:	60a2      	strlt	r2, [r4, #8]
 800b0b6:	bfb8      	it	lt
 800b0b8:	60e3      	strlt	r3, [r4, #12]
 800b0ba:	6921      	ldr	r1, [r4, #16]
 800b0bc:	290b      	cmp	r1, #11
 800b0be:	d911      	bls.n	800b0e4 <validate_structure+0xac>
 800b0c0:	220c      	movs	r2, #12
 800b0c2:	4668      	mov	r0, sp
 800b0c4:	f000 fdca 	bl	800bc5c <div>
 800b0c8:	9a01      	ldr	r2, [sp, #4]
 800b0ca:	6963      	ldr	r3, [r4, #20]
 800b0cc:	9900      	ldr	r1, [sp, #0]
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	440b      	add	r3, r1
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	bfbb      	ittet	lt
 800b0d6:	320c      	addlt	r2, #12
 800b0d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b0dc:	6122      	strge	r2, [r4, #16]
 800b0de:	6122      	strlt	r2, [r4, #16]
 800b0e0:	bfb8      	it	lt
 800b0e2:	6163      	strlt	r3, [r4, #20]
 800b0e4:	6963      	ldr	r3, [r4, #20]
 800b0e6:	079a      	lsls	r2, r3, #30
 800b0e8:	d11c      	bne.n	800b124 <validate_structure+0xec>
 800b0ea:	2164      	movs	r1, #100	@ 0x64
 800b0ec:	fb93 f2f1 	sdiv	r2, r3, r1
 800b0f0:	fb01 3212 	mls	r2, r1, r2, r3
 800b0f4:	b9c2      	cbnz	r2, 800b128 <validate_structure+0xf0>
 800b0f6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800b0fa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b0fe:	fb93 f1f2 	sdiv	r1, r3, r2
 800b102:	fb02 3311 	mls	r3, r2, r1, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	bf14      	ite	ne
 800b10a:	231c      	movne	r3, #28
 800b10c:	231d      	moveq	r3, #29
 800b10e:	68e2      	ldr	r2, [r4, #12]
 800b110:	2a00      	cmp	r2, #0
 800b112:	dc0b      	bgt.n	800b12c <validate_structure+0xf4>
 800b114:	4d31      	ldr	r5, [pc, #196]	@ (800b1dc <validate_structure+0x1a4>)
 800b116:	200b      	movs	r0, #11
 800b118:	2164      	movs	r1, #100	@ 0x64
 800b11a:	68e6      	ldr	r6, [r4, #12]
 800b11c:	2e00      	cmp	r6, #0
 800b11e:	dd30      	ble.n	800b182 <validate_structure+0x14a>
 800b120:	b003      	add	sp, #12
 800b122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b124:	231c      	movs	r3, #28
 800b126:	e7f2      	b.n	800b10e <validate_structure+0xd6>
 800b128:	231d      	movs	r3, #29
 800b12a:	e7f0      	b.n	800b10e <validate_structure+0xd6>
 800b12c:	4d2b      	ldr	r5, [pc, #172]	@ (800b1dc <validate_structure+0x1a4>)
 800b12e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b132:	2a01      	cmp	r2, #1
 800b134:	bf14      	ite	ne
 800b136:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800b13a:	4618      	moveq	r0, r3
 800b13c:	4281      	cmp	r1, r0
 800b13e:	ddef      	ble.n	800b120 <validate_structure+0xe8>
 800b140:	3201      	adds	r2, #1
 800b142:	1a09      	subs	r1, r1, r0
 800b144:	2a0c      	cmp	r2, #12
 800b146:	60e1      	str	r1, [r4, #12]
 800b148:	6122      	str	r2, [r4, #16]
 800b14a:	d1f0      	bne.n	800b12e <validate_structure+0xf6>
 800b14c:	6963      	ldr	r3, [r4, #20]
 800b14e:	2100      	movs	r1, #0
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	6121      	str	r1, [r4, #16]
 800b154:	0791      	lsls	r1, r2, #30
 800b156:	6162      	str	r2, [r4, #20]
 800b158:	d13c      	bne.n	800b1d4 <validate_structure+0x19c>
 800b15a:	2164      	movs	r1, #100	@ 0x64
 800b15c:	fb92 f0f1 	sdiv	r0, r2, r1
 800b160:	fb01 2210 	mls	r2, r1, r0, r2
 800b164:	2a00      	cmp	r2, #0
 800b166:	d137      	bne.n	800b1d8 <validate_structure+0x1a0>
 800b168:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800b16c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b170:	fb93 f1f2 	sdiv	r1, r3, r2
 800b174:	fb02 3311 	mls	r3, r2, r1, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bf14      	ite	ne
 800b17c:	231c      	movne	r3, #28
 800b17e:	231d      	moveq	r3, #29
 800b180:	e7d5      	b.n	800b12e <validate_structure+0xf6>
 800b182:	6922      	ldr	r2, [r4, #16]
 800b184:	3a01      	subs	r2, #1
 800b186:	6122      	str	r2, [r4, #16]
 800b188:	3201      	adds	r2, #1
 800b18a:	d116      	bne.n	800b1ba <validate_structure+0x182>
 800b18c:	6963      	ldr	r3, [r4, #20]
 800b18e:	1e5a      	subs	r2, r3, #1
 800b190:	0797      	lsls	r7, r2, #30
 800b192:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800b196:	d119      	bne.n	800b1cc <validate_structure+0x194>
 800b198:	fb92 f7f1 	sdiv	r7, r2, r1
 800b19c:	fb01 2217 	mls	r2, r1, r7, r2
 800b1a0:	b9b2      	cbnz	r2, 800b1d0 <validate_structure+0x198>
 800b1a2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800b1a6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b1aa:	fb93 f7f2 	sdiv	r7, r3, r2
 800b1ae:	fb02 3317 	mls	r3, r2, r7, r3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bf14      	ite	ne
 800b1b6:	231c      	movne	r3, #28
 800b1b8:	231d      	moveq	r3, #29
 800b1ba:	6922      	ldr	r2, [r4, #16]
 800b1bc:	2a01      	cmp	r2, #1
 800b1be:	bf14      	ite	ne
 800b1c0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800b1c4:	461a      	moveq	r2, r3
 800b1c6:	4432      	add	r2, r6
 800b1c8:	60e2      	str	r2, [r4, #12]
 800b1ca:	e7a6      	b.n	800b11a <validate_structure+0xe2>
 800b1cc:	231c      	movs	r3, #28
 800b1ce:	e7f4      	b.n	800b1ba <validate_structure+0x182>
 800b1d0:	231d      	movs	r3, #29
 800b1d2:	e7f2      	b.n	800b1ba <validate_structure+0x182>
 800b1d4:	231c      	movs	r3, #28
 800b1d6:	e7aa      	b.n	800b12e <validate_structure+0xf6>
 800b1d8:	231d      	movs	r3, #29
 800b1da:	e7a8      	b.n	800b12e <validate_structure+0xf6>
 800b1dc:	08010768 	.word	0x08010768

0800b1e0 <mktime>:
 800b1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	f003 fa4c 	bl	800e684 <__gettzinfo>
 800b1ec:	4681      	mov	r9, r0
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	f7ff ff22 	bl	800b038 <validate_structure>
 800b1f4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800b1f8:	223c      	movs	r2, #60	@ 0x3c
 800b1fa:	fb02 4403 	mla	r4, r2, r3, r4
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	697d      	ldr	r5, [r7, #20]
 800b202:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b206:	fb02 4403 	mla	r4, r2, r3, r4
 800b20a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800b20e:	4ac1      	ldr	r2, [pc, #772]	@ (800b514 <mktime+0x334>)
 800b210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b214:	3e01      	subs	r6, #1
 800b216:	2b01      	cmp	r3, #1
 800b218:	4416      	add	r6, r2
 800b21a:	dd11      	ble.n	800b240 <mktime+0x60>
 800b21c:	07a9      	lsls	r1, r5, #30
 800b21e:	d10f      	bne.n	800b240 <mktime+0x60>
 800b220:	2264      	movs	r2, #100	@ 0x64
 800b222:	fb95 f3f2 	sdiv	r3, r5, r2
 800b226:	fb02 5313 	mls	r3, r2, r3, r5
 800b22a:	b943      	cbnz	r3, 800b23e <mktime+0x5e>
 800b22c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b230:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b234:	fb93 f1f2 	sdiv	r1, r3, r2
 800b238:	fb02 3311 	mls	r3, r2, r1, r3
 800b23c:	b903      	cbnz	r3, 800b240 <mktime+0x60>
 800b23e:	3601      	adds	r6, #1
 800b240:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800b244:	3310      	adds	r3, #16
 800b246:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b24a:	4293      	cmp	r3, r2
 800b24c:	61fe      	str	r6, [r7, #28]
 800b24e:	f200 8167 	bhi.w	800b520 <mktime+0x340>
 800b252:	2d46      	cmp	r5, #70	@ 0x46
 800b254:	f340 808e 	ble.w	800b374 <mktime+0x194>
 800b258:	2346      	movs	r3, #70	@ 0x46
 800b25a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b25e:	2164      	movs	r1, #100	@ 0x64
 800b260:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b264:	079a      	lsls	r2, r3, #30
 800b266:	d17f      	bne.n	800b368 <mktime+0x188>
 800b268:	fb93 f2f1 	sdiv	r2, r3, r1
 800b26c:	fb01 3212 	mls	r2, r1, r2, r3
 800b270:	2a00      	cmp	r2, #0
 800b272:	d17c      	bne.n	800b36e <mktime+0x18e>
 800b274:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b278:	fb92 fef0 	sdiv	lr, r2, r0
 800b27c:	fb00 221e 	mls	r2, r0, lr, r2
 800b280:	2a00      	cmp	r2, #0
 800b282:	bf14      	ite	ne
 800b284:	4662      	movne	r2, ip
 800b286:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b28a:	3301      	adds	r3, #1
 800b28c:	429d      	cmp	r5, r3
 800b28e:	4416      	add	r6, r2
 800b290:	d1e8      	bne.n	800b264 <mktime+0x84>
 800b292:	4ba1      	ldr	r3, [pc, #644]	@ (800b518 <mktime+0x338>)
 800b294:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b298:	fbc6 4803 	smlal	r4, r8, r6, r3
 800b29c:	f000 f9fa 	bl	800b694 <__tz_lock>
 800b2a0:	f000 fa04 	bl	800b6ac <_tzset_unlocked>
 800b2a4:	4b9d      	ldr	r3, [pc, #628]	@ (800b51c <mktime+0x33c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 8140 	beq.w	800b52e <mktime+0x34e>
 800b2ae:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800b2b2:	6978      	ldr	r0, [r7, #20]
 800b2b4:	4653      	mov	r3, sl
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	bfa8      	it	ge
 800b2ba:	2301      	movge	r3, #1
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b2c2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800b2c6:	4283      	cmp	r3, r0
 800b2c8:	f040 8096 	bne.w	800b3f8 <mktime+0x218>
 800b2cc:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800b2d0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800b2d4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800b2d8:	1a13      	subs	r3, r2, r0
 800b2da:	9303      	str	r3, [sp, #12]
 800b2dc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b2e0:	9302      	str	r3, [sp, #8]
 800b2e2:	9a02      	ldr	r2, [sp, #8]
 800b2e4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b2e8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800b2ec:	ebb2 0e03 	subs.w	lr, r2, r3
 800b2f0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800b2f4:	4574      	cmp	r4, lr
 800b2f6:	eb78 0201 	sbcs.w	r2, r8, r1
 800b2fa:	f280 8085 	bge.w	800b408 <mktime+0x228>
 800b2fe:	f8d9 2000 	ldr.w	r2, [r9]
 800b302:	2a00      	cmp	r2, #0
 800b304:	f000 808d 	beq.w	800b422 <mktime+0x242>
 800b308:	9a03      	ldr	r2, [sp, #12]
 800b30a:	4294      	cmp	r4, r2
 800b30c:	eb78 020b 	sbcs.w	r2, r8, fp
 800b310:	f2c0 810a 	blt.w	800b528 <mktime+0x348>
 800b314:	4574      	cmp	r4, lr
 800b316:	eb78 0101 	sbcs.w	r1, r8, r1
 800b31a:	bfb4      	ite	lt
 800b31c:	f04f 0b01 	movlt.w	fp, #1
 800b320:	f04f 0b00 	movge.w	fp, #0
 800b324:	f1ba 0f00 	cmp.w	sl, #0
 800b328:	f280 8087 	bge.w	800b43a <mktime+0x25a>
 800b32c:	f1bb 0f01 	cmp.w	fp, #1
 800b330:	f040 80ff 	bne.w	800b532 <mktime+0x352>
 800b334:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800b338:	191c      	adds	r4, r3, r4
 800b33a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b33e:	f04f 0b01 	mov.w	fp, #1
 800b342:	f000 f9ad 	bl	800b6a0 <__tz_unlock>
 800b346:	3604      	adds	r6, #4
 800b348:	2307      	movs	r3, #7
 800b34a:	fb96 f3f3 	sdiv	r3, r6, r3
 800b34e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b352:	1af6      	subs	r6, r6, r3
 800b354:	f100 80db 	bmi.w	800b50e <mktime+0x32e>
 800b358:	f8c7 b020 	str.w	fp, [r7, #32]
 800b35c:	61be      	str	r6, [r7, #24]
 800b35e:	4620      	mov	r0, r4
 800b360:	4641      	mov	r1, r8
 800b362:	b005      	add	sp, #20
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b368:	f240 126d 	movw	r2, #365	@ 0x16d
 800b36c:	e78d      	b.n	800b28a <mktime+0xaa>
 800b36e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b372:	e78a      	b.n	800b28a <mktime+0xaa>
 800b374:	d08d      	beq.n	800b292 <mktime+0xb2>
 800b376:	2345      	movs	r3, #69	@ 0x45
 800b378:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b37c:	2164      	movs	r1, #100	@ 0x64
 800b37e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b382:	e012      	b.n	800b3aa <mktime+0x1ca>
 800b384:	bb62      	cbnz	r2, 800b3e0 <mktime+0x200>
 800b386:	fb93 f2f1 	sdiv	r2, r3, r1
 800b38a:	fb01 3212 	mls	r2, r1, r2, r3
 800b38e:	bb52      	cbnz	r2, 800b3e6 <mktime+0x206>
 800b390:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b394:	fb92 fef0 	sdiv	lr, r2, r0
 800b398:	fb00 221e 	mls	r2, r0, lr, r2
 800b39c:	2a00      	cmp	r2, #0
 800b39e:	bf14      	ite	ne
 800b3a0:	4662      	movne	r2, ip
 800b3a2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b3a6:	1ab6      	subs	r6, r6, r2
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	f003 0203 	and.w	r2, r3, #3
 800b3b0:	dbe8      	blt.n	800b384 <mktime+0x1a4>
 800b3b2:	b9da      	cbnz	r2, 800b3ec <mktime+0x20c>
 800b3b4:	2264      	movs	r2, #100	@ 0x64
 800b3b6:	fb95 f3f2 	sdiv	r3, r5, r2
 800b3ba:	fb02 5313 	mls	r3, r2, r3, r5
 800b3be:	b9c3      	cbnz	r3, 800b3f2 <mktime+0x212>
 800b3c0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b3c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b3c8:	fb93 f1f2 	sdiv	r1, r3, r2
 800b3cc:	fb02 3311 	mls	r3, r2, r1, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f240 136d 	movw	r3, #365	@ 0x16d
 800b3d6:	bf08      	it	eq
 800b3d8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800b3dc:	1af6      	subs	r6, r6, r3
 800b3de:	e758      	b.n	800b292 <mktime+0xb2>
 800b3e0:	f240 126d 	movw	r2, #365	@ 0x16d
 800b3e4:	e7df      	b.n	800b3a6 <mktime+0x1c6>
 800b3e6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b3ea:	e7dc      	b.n	800b3a6 <mktime+0x1c6>
 800b3ec:	f240 136d 	movw	r3, #365	@ 0x16d
 800b3f0:	e7f4      	b.n	800b3dc <mktime+0x1fc>
 800b3f2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800b3f6:	e7f1      	b.n	800b3dc <mktime+0x1fc>
 800b3f8:	f000 f8a2 	bl	800b540 <__tzcalc_limits>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f47f af65 	bne.w	800b2cc <mktime+0xec>
 800b402:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b406:	e791      	b.n	800b32c <mktime+0x14c>
 800b408:	9a02      	ldr	r2, [sp, #8]
 800b40a:	1a12      	subs	r2, r2, r0
 800b40c:	9202      	str	r2, [sp, #8]
 800b40e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800b412:	eb6c 0c02 	sbc.w	ip, ip, r2
 800b416:	9a02      	ldr	r2, [sp, #8]
 800b418:	4294      	cmp	r4, r2
 800b41a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800b41e:	dbf0      	blt.n	800b402 <mktime+0x222>
 800b420:	e76d      	b.n	800b2fe <mktime+0x11e>
 800b422:	9a03      	ldr	r2, [sp, #12]
 800b424:	4294      	cmp	r4, r2
 800b426:	eb78 020b 	sbcs.w	r2, r8, fp
 800b42a:	f6ff af73 	blt.w	800b314 <mktime+0x134>
 800b42e:	f1ba 0f00 	cmp.w	sl, #0
 800b432:	f6ff af7f 	blt.w	800b334 <mktime+0x154>
 800b436:	f04f 0b01 	mov.w	fp, #1
 800b43a:	9a01      	ldr	r2, [sp, #4]
 800b43c:	ea82 020b 	eor.w	r2, r2, fp
 800b440:	2a01      	cmp	r2, #1
 800b442:	f47f af73 	bne.w	800b32c <mktime+0x14c>
 800b446:	f1bb 0f00 	cmp.w	fp, #0
 800b44a:	d035      	beq.n	800b4b8 <mktime+0x2d8>
 800b44c:	1a1b      	subs	r3, r3, r0
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b454:	441a      	add	r2, r3
 800b456:	191c      	adds	r4, r3, r4
 800b458:	603a      	str	r2, [r7, #0]
 800b45a:	4638      	mov	r0, r7
 800b45c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b460:	f7ff fdea 	bl	800b038 <validate_structure>
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	ebb2 020a 	subs.w	r2, r2, sl
 800b46a:	f43f af5f 	beq.w	800b32c <mktime+0x14c>
 800b46e:	2a01      	cmp	r2, #1
 800b470:	dc24      	bgt.n	800b4bc <mktime+0x2dc>
 800b472:	1c93      	adds	r3, r2, #2
 800b474:	bfd8      	it	le
 800b476:	2201      	movle	r2, #1
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	18d3      	adds	r3, r2, r3
 800b47c:	d527      	bpl.n	800b4ce <mktime+0x2ee>
 800b47e:	1e6b      	subs	r3, r5, #1
 800b480:	0798      	lsls	r0, r3, #30
 800b482:	d11e      	bne.n	800b4c2 <mktime+0x2e2>
 800b484:	2164      	movs	r1, #100	@ 0x64
 800b486:	fb93 f0f1 	sdiv	r0, r3, r1
 800b48a:	fb01 3310 	mls	r3, r1, r0, r3
 800b48e:	b9db      	cbnz	r3, 800b4c8 <mktime+0x2e8>
 800b490:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b494:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800b498:	fb95 f1f3 	sdiv	r1, r5, r3
 800b49c:	fb03 5511 	mls	r5, r3, r1, r5
 800b4a0:	2d00      	cmp	r5, #0
 800b4a2:	f240 136d 	movw	r3, #365	@ 0x16d
 800b4a6:	bf18      	it	ne
 800b4a8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	4416      	add	r6, r2
 800b4b0:	e73c      	b.n	800b32c <mktime+0x14c>
 800b4b2:	f04f 0b00 	mov.w	fp, #0
 800b4b6:	e7c0      	b.n	800b43a <mktime+0x25a>
 800b4b8:	1ac3      	subs	r3, r0, r3
 800b4ba:	e7c8      	b.n	800b44e <mktime+0x26e>
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e7da      	b.n	800b478 <mktime+0x298>
 800b4c2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800b4c6:	e7f1      	b.n	800b4ac <mktime+0x2cc>
 800b4c8:	f240 136d 	movw	r3, #365	@ 0x16d
 800b4cc:	e7ee      	b.n	800b4ac <mktime+0x2cc>
 800b4ce:	07a9      	lsls	r1, r5, #30
 800b4d0:	d117      	bne.n	800b502 <mktime+0x322>
 800b4d2:	2064      	movs	r0, #100	@ 0x64
 800b4d4:	fb95 f1f0 	sdiv	r1, r5, r0
 800b4d8:	fb00 5111 	mls	r1, r0, r1, r5
 800b4dc:	b9a1      	cbnz	r1, 800b508 <mktime+0x328>
 800b4de:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800b4e2:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800b4e6:	fb95 f0f1 	sdiv	r0, r5, r1
 800b4ea:	fb01 5510 	mls	r5, r1, r0, r5
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	f240 116d 	movw	r1, #365	@ 0x16d
 800b4f4:	bf08      	it	eq
 800b4f6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800b4fa:	428b      	cmp	r3, r1
 800b4fc:	bfa8      	it	ge
 800b4fe:	1a5b      	subge	r3, r3, r1
 800b500:	e7d4      	b.n	800b4ac <mktime+0x2cc>
 800b502:	f240 116d 	movw	r1, #365	@ 0x16d
 800b506:	e7f8      	b.n	800b4fa <mktime+0x31a>
 800b508:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800b50c:	e7f5      	b.n	800b4fa <mktime+0x31a>
 800b50e:	3607      	adds	r6, #7
 800b510:	e722      	b.n	800b358 <mktime+0x178>
 800b512:	bf00      	nop
 800b514:	08010738 	.word	0x08010738
 800b518:	00015180 	.word	0x00015180
 800b51c:	20009858 	.word	0x20009858
 800b520:	f04f 34ff 	mov.w	r4, #4294967295
 800b524:	46a0      	mov	r8, r4
 800b526:	e71a      	b.n	800b35e <mktime+0x17e>
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	dac1      	bge.n	800b4b2 <mktime+0x2d2>
 800b52e:	f04f 0b00 	mov.w	fp, #0
 800b532:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b536:	191c      	adds	r4, r3, r4
 800b538:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b53c:	e701      	b.n	800b342 <mktime+0x162>
 800b53e:	bf00      	nop

0800b540 <__tzcalc_limits>:
 800b540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	f003 f89d 	bl	800e684 <__gettzinfo>
 800b54a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800b54e:	429c      	cmp	r4, r3
 800b550:	f340 8099 	ble.w	800b686 <__tzcalc_limits+0x146>
 800b554:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800b558:	19e5      	adds	r5, r4, r7
 800b55a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800b55e:	f240 126d 	movw	r2, #365	@ 0x16d
 800b562:	10ad      	asrs	r5, r5, #2
 800b564:	fb02 5503 	mla	r5, r2, r3, r5
 800b568:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800b56c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800b570:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800b574:	4f45      	ldr	r7, [pc, #276]	@ (800b68c <__tzcalc_limits+0x14c>)
 800b576:	fb93 f3f2 	sdiv	r3, r3, r2
 800b57a:	441d      	add	r5, r3
 800b57c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b580:	eb04 030c 	add.w	r3, r4, ip
 800b584:	6044      	str	r4, [r0, #4]
 800b586:	fbb3 f3f2 	udiv	r3, r3, r2
 800b58a:	4601      	mov	r1, r0
 800b58c:	441d      	add	r5, r3
 800b58e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800b592:	7a0b      	ldrb	r3, [r1, #8]
 800b594:	694a      	ldr	r2, [r1, #20]
 800b596:	2b4a      	cmp	r3, #74	@ 0x4a
 800b598:	d133      	bne.n	800b602 <__tzcalc_limits+0xc2>
 800b59a:	07a6      	lsls	r6, r4, #30
 800b59c:	eb05 0302 	add.w	r3, r5, r2
 800b5a0:	d106      	bne.n	800b5b0 <__tzcalc_limits+0x70>
 800b5a2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800b5a6:	fb94 f6fe 	sdiv	r6, r4, lr
 800b5aa:	fb0e 4616 	mls	r6, lr, r6, r4
 800b5ae:	b936      	cbnz	r6, 800b5be <__tzcalc_limits+0x7e>
 800b5b0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800b5b4:	fb94 f6fe 	sdiv	r6, r4, lr
 800b5b8:	fb0e 4616 	mls	r6, lr, r6, r4
 800b5bc:	b9fe      	cbnz	r6, 800b5fe <__tzcalc_limits+0xbe>
 800b5be:	2a3b      	cmp	r2, #59	@ 0x3b
 800b5c0:	bfd4      	ite	le
 800b5c2:	2200      	movle	r2, #0
 800b5c4:	2201      	movgt	r2, #1
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	698a      	ldr	r2, [r1, #24]
 800b5cc:	17d6      	asrs	r6, r2, #31
 800b5ce:	fbc3 2607 	smlal	r2, r6, r3, r7
 800b5d2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b5d4:	18d2      	adds	r2, r2, r3
 800b5d6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800b5da:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800b5de:	3128      	adds	r1, #40	@ 0x28
 800b5e0:	458c      	cmp	ip, r1
 800b5e2:	d1d6      	bne.n	800b592 <__tzcalc_limits+0x52>
 800b5e4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800b5e8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800b5ec:	428c      	cmp	r4, r1
 800b5ee:	4193      	sbcs	r3, r2
 800b5f0:	bfb4      	ite	lt
 800b5f2:	2301      	movlt	r3, #1
 800b5f4:	2300      	movge	r3, #0
 800b5f6:	6003      	str	r3, [r0, #0]
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fe:	2200      	movs	r2, #0
 800b600:	e7e1      	b.n	800b5c6 <__tzcalc_limits+0x86>
 800b602:	2b44      	cmp	r3, #68	@ 0x44
 800b604:	d101      	bne.n	800b60a <__tzcalc_limits+0xca>
 800b606:	18ab      	adds	r3, r5, r2
 800b608:	e7df      	b.n	800b5ca <__tzcalc_limits+0x8a>
 800b60a:	07a3      	lsls	r3, r4, #30
 800b60c:	d105      	bne.n	800b61a <__tzcalc_limits+0xda>
 800b60e:	2664      	movs	r6, #100	@ 0x64
 800b610:	fb94 f3f6 	sdiv	r3, r4, r6
 800b614:	fb06 4313 	mls	r3, r6, r3, r4
 800b618:	bb7b      	cbnz	r3, 800b67a <__tzcalc_limits+0x13a>
 800b61a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b61e:	fb94 f6f3 	sdiv	r6, r4, r3
 800b622:	fb03 4616 	mls	r6, r3, r6, r4
 800b626:	fab6 f686 	clz	r6, r6
 800b62a:	0976      	lsrs	r6, r6, #5
 800b62c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800b690 <__tzcalc_limits+0x150>
 800b630:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b634:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800b638:	462b      	mov	r3, r5
 800b63a:	f04f 0800 	mov.w	r8, #0
 800b63e:	fb0a e606 	mla	r6, sl, r6, lr
 800b642:	f108 0801 	add.w	r8, r8, #1
 800b646:	45c1      	cmp	r9, r8
 800b648:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800b64c:	dc17      	bgt.n	800b67e <__tzcalc_limits+0x13e>
 800b64e:	f103 0804 	add.w	r8, r3, #4
 800b652:	2607      	movs	r6, #7
 800b654:	fb98 f6f6 	sdiv	r6, r8, r6
 800b658:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b65c:	eba8 0606 	sub.w	r6, r8, r6
 800b660:	1b92      	subs	r2, r2, r6
 800b662:	690e      	ldr	r6, [r1, #16]
 800b664:	f106 36ff 	add.w	r6, r6, #4294967295
 800b668:	bf48      	it	mi
 800b66a:	3207      	addmi	r2, #7
 800b66c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b670:	4432      	add	r2, r6
 800b672:	4572      	cmp	r2, lr
 800b674:	da05      	bge.n	800b682 <__tzcalc_limits+0x142>
 800b676:	4413      	add	r3, r2
 800b678:	e7a7      	b.n	800b5ca <__tzcalc_limits+0x8a>
 800b67a:	2601      	movs	r6, #1
 800b67c:	e7d6      	b.n	800b62c <__tzcalc_limits+0xec>
 800b67e:	4473      	add	r3, lr
 800b680:	e7df      	b.n	800b642 <__tzcalc_limits+0x102>
 800b682:	3a07      	subs	r2, #7
 800b684:	e7f5      	b.n	800b672 <__tzcalc_limits+0x132>
 800b686:	2000      	movs	r0, #0
 800b688:	e7b7      	b.n	800b5fa <__tzcalc_limits+0xba>
 800b68a:	bf00      	nop
 800b68c:	00015180 	.word	0x00015180
 800b690:	08010a58 	.word	0x08010a58

0800b694 <__tz_lock>:
 800b694:	4801      	ldr	r0, [pc, #4]	@ (800b69c <__tz_lock+0x8>)
 800b696:	f000 bab6 	b.w	800bc06 <__retarget_lock_acquire>
 800b69a:	bf00      	nop
 800b69c:	20009860 	.word	0x20009860

0800b6a0 <__tz_unlock>:
 800b6a0:	4801      	ldr	r0, [pc, #4]	@ (800b6a8 <__tz_unlock+0x8>)
 800b6a2:	f000 bab2 	b.w	800bc0a <__retarget_lock_release>
 800b6a6:	bf00      	nop
 800b6a8:	20009860 	.word	0x20009860

0800b6ac <_tzset_unlocked>:
 800b6ac:	4b01      	ldr	r3, [pc, #4]	@ (800b6b4 <_tzset_unlocked+0x8>)
 800b6ae:	6818      	ldr	r0, [r3, #0]
 800b6b0:	f000 b802 	b.w	800b6b8 <_tzset_unlocked_r>
 800b6b4:	2000019c 	.word	0x2000019c

0800b6b8 <_tzset_unlocked_r>:
 800b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	b08d      	sub	sp, #52	@ 0x34
 800b6be:	4607      	mov	r7, r0
 800b6c0:	f002 ffe0 	bl	800e684 <__gettzinfo>
 800b6c4:	49bc      	ldr	r1, [pc, #752]	@ (800b9b8 <_tzset_unlocked_r+0x300>)
 800b6c6:	4dbd      	ldr	r5, [pc, #756]	@ (800b9bc <_tzset_unlocked_r+0x304>)
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	f001 fcdc 	bl	800d088 <_getenv_r>
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	bb10      	cbnz	r0, 800b71a <_tzset_unlocked_r+0x62>
 800b6d4:	4bba      	ldr	r3, [pc, #744]	@ (800b9c0 <_tzset_unlocked_r+0x308>)
 800b6d6:	4abb      	ldr	r2, [pc, #748]	@ (800b9c4 <_tzset_unlocked_r+0x30c>)
 800b6d8:	6018      	str	r0, [r3, #0]
 800b6da:	4bbb      	ldr	r3, [pc, #748]	@ (800b9c8 <_tzset_unlocked_r+0x310>)
 800b6dc:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b6de:	6018      	str	r0, [r3, #0]
 800b6e0:	4bba      	ldr	r3, [pc, #744]	@ (800b9cc <_tzset_unlocked_r+0x314>)
 800b6e2:	6520      	str	r0, [r4, #80]	@ 0x50
 800b6e4:	e9c3 2200 	strd	r2, r2, [r3]
 800b6e8:	214a      	movs	r1, #74	@ 0x4a
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b6f2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b6f6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b6fa:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b6fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b702:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b706:	6828      	ldr	r0, [r5, #0]
 800b708:	7221      	strb	r1, [r4, #8]
 800b70a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b70e:	f7fd fcbd 	bl	800908c <free>
 800b712:	602e      	str	r6, [r5, #0]
 800b714:	b00d      	add	sp, #52	@ 0x34
 800b716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71a:	6829      	ldr	r1, [r5, #0]
 800b71c:	2900      	cmp	r1, #0
 800b71e:	f040 808e 	bne.w	800b83e <_tzset_unlocked_r+0x186>
 800b722:	6828      	ldr	r0, [r5, #0]
 800b724:	f7fd fcb2 	bl	800908c <free>
 800b728:	4630      	mov	r0, r6
 800b72a:	f7f4 fdb1 	bl	8000290 <strlen>
 800b72e:	1c41      	adds	r1, r0, #1
 800b730:	4638      	mov	r0, r7
 800b732:	f7fd fcd5 	bl	80090e0 <_malloc_r>
 800b736:	6028      	str	r0, [r5, #0]
 800b738:	2800      	cmp	r0, #0
 800b73a:	f040 8086 	bne.w	800b84a <_tzset_unlocked_r+0x192>
 800b73e:	4aa2      	ldr	r2, [pc, #648]	@ (800b9c8 <_tzset_unlocked_r+0x310>)
 800b740:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800b9cc <_tzset_unlocked_r+0x314>
 800b744:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800b9c0 <_tzset_unlocked_r+0x308>
 800b748:	2300      	movs	r3, #0
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	4aa0      	ldr	r2, [pc, #640]	@ (800b9d0 <_tzset_unlocked_r+0x318>)
 800b74e:	f8ca 3000 	str.w	r3, [sl]
 800b752:	2000      	movs	r0, #0
 800b754:	2100      	movs	r1, #0
 800b756:	e9c8 2200 	strd	r2, r2, [r8]
 800b75a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b75e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b762:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b766:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b76a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b76e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b772:	224a      	movs	r2, #74	@ 0x4a
 800b774:	7222      	strb	r2, [r4, #8]
 800b776:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b778:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b77c:	6523      	str	r3, [r4, #80]	@ 0x50
 800b77e:	7833      	ldrb	r3, [r6, #0]
 800b780:	2b3a      	cmp	r3, #58	@ 0x3a
 800b782:	bf08      	it	eq
 800b784:	3601      	addeq	r6, #1
 800b786:	7833      	ldrb	r3, [r6, #0]
 800b788:	2b3c      	cmp	r3, #60	@ 0x3c
 800b78a:	d162      	bne.n	800b852 <_tzset_unlocked_r+0x19a>
 800b78c:	1c75      	adds	r5, r6, #1
 800b78e:	4a91      	ldr	r2, [pc, #580]	@ (800b9d4 <_tzset_unlocked_r+0x31c>)
 800b790:	4991      	ldr	r1, [pc, #580]	@ (800b9d8 <_tzset_unlocked_r+0x320>)
 800b792:	ab0a      	add	r3, sp, #40	@ 0x28
 800b794:	4628      	mov	r0, r5
 800b796:	f7ff fb41 	bl	800ae1c <siscanf>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	ddba      	ble.n	800b714 <_tzset_unlocked_r+0x5c>
 800b79e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7a0:	1eda      	subs	r2, r3, #3
 800b7a2:	2a07      	cmp	r2, #7
 800b7a4:	d8b6      	bhi.n	800b714 <_tzset_unlocked_r+0x5c>
 800b7a6:	5ceb      	ldrb	r3, [r5, r3]
 800b7a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7aa:	d1b3      	bne.n	800b714 <_tzset_unlocked_r+0x5c>
 800b7ac:	3602      	adds	r6, #2
 800b7ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b0:	18f5      	adds	r5, r6, r3
 800b7b2:	5cf3      	ldrb	r3, [r6, r3]
 800b7b4:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7b6:	d15a      	bne.n	800b86e <_tzset_unlocked_r+0x1b6>
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	f04f 39ff 	mov.w	r9, #4294967295
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b7c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b7c8:	af08      	add	r7, sp, #32
 800b7ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7cc:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b7d0:	9303      	str	r3, [sp, #12]
 800b7d2:	f10d 031e 	add.w	r3, sp, #30
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	4980      	ldr	r1, [pc, #512]	@ (800b9dc <_tzset_unlocked_r+0x324>)
 800b7da:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7dc:	aa07      	add	r2, sp, #28
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f7ff fb1c 	bl	800ae1c <siscanf>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	dd95      	ble.n	800b714 <_tzset_unlocked_r+0x5c>
 800b7e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b7ec:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b7f0:	223c      	movs	r2, #60	@ 0x3c
 800b7f2:	fb02 6603 	mla	r6, r2, r3, r6
 800b7f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b7fa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b7fe:	fb02 6603 	mla	r6, r2, r3, r6
 800b802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b804:	fb09 f606 	mul.w	r6, r9, r6
 800b808:	eb05 0903 	add.w	r9, r5, r3
 800b80c:	5ceb      	ldrb	r3, [r5, r3]
 800b80e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b810:	f040 80ee 	bne.w	800b9f0 <_tzset_unlocked_r+0x338>
 800b814:	f109 0501 	add.w	r5, r9, #1
 800b818:	4a71      	ldr	r2, [pc, #452]	@ (800b9e0 <_tzset_unlocked_r+0x328>)
 800b81a:	496f      	ldr	r1, [pc, #444]	@ (800b9d8 <_tzset_unlocked_r+0x320>)
 800b81c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b81e:	4628      	mov	r0, r5
 800b820:	f7ff fafc 	bl	800ae1c <siscanf>
 800b824:	2800      	cmp	r0, #0
 800b826:	dc28      	bgt.n	800b87a <_tzset_unlocked_r+0x1c2>
 800b828:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b82c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b82e:	d124      	bne.n	800b87a <_tzset_unlocked_r+0x1c2>
 800b830:	4b68      	ldr	r3, [pc, #416]	@ (800b9d4 <_tzset_unlocked_r+0x31c>)
 800b832:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b834:	e9c8 3300 	strd	r3, r3, [r8]
 800b838:	f8ca 6000 	str.w	r6, [sl]
 800b83c:	e76a      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800b83e:	f7f4 fcc7 	bl	80001d0 <strcmp>
 800b842:	2800      	cmp	r0, #0
 800b844:	f47f af6d 	bne.w	800b722 <_tzset_unlocked_r+0x6a>
 800b848:	e764      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800b84a:	4631      	mov	r1, r6
 800b84c:	f000 f9df 	bl	800bc0e <strcpy>
 800b850:	e775      	b.n	800b73e <_tzset_unlocked_r+0x86>
 800b852:	4a60      	ldr	r2, [pc, #384]	@ (800b9d4 <_tzset_unlocked_r+0x31c>)
 800b854:	4963      	ldr	r1, [pc, #396]	@ (800b9e4 <_tzset_unlocked_r+0x32c>)
 800b856:	ab0a      	add	r3, sp, #40	@ 0x28
 800b858:	4630      	mov	r0, r6
 800b85a:	f7ff fadf 	bl	800ae1c <siscanf>
 800b85e:	2800      	cmp	r0, #0
 800b860:	f77f af58 	ble.w	800b714 <_tzset_unlocked_r+0x5c>
 800b864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b866:	3b03      	subs	r3, #3
 800b868:	2b07      	cmp	r3, #7
 800b86a:	d9a0      	bls.n	800b7ae <_tzset_unlocked_r+0xf6>
 800b86c:	e752      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800b86e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b870:	bf08      	it	eq
 800b872:	3501      	addeq	r5, #1
 800b874:	f04f 0901 	mov.w	r9, #1
 800b878:	e7a1      	b.n	800b7be <_tzset_unlocked_r+0x106>
 800b87a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87c:	1eda      	subs	r2, r3, #3
 800b87e:	2a07      	cmp	r2, #7
 800b880:	f63f af48 	bhi.w	800b714 <_tzset_unlocked_r+0x5c>
 800b884:	5ceb      	ldrb	r3, [r5, r3]
 800b886:	2b3e      	cmp	r3, #62	@ 0x3e
 800b888:	f47f af44 	bne.w	800b714 <_tzset_unlocked_r+0x5c>
 800b88c:	f109 0902 	add.w	r9, r9, #2
 800b890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b892:	eb09 0503 	add.w	r5, r9, r3
 800b896:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b89a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b89c:	f040 80b7 	bne.w	800ba0e <_tzset_unlocked_r+0x356>
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	f04f 39ff 	mov.w	r9, #4294967295
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b8ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b8b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b8b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8b8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	f10d 031e 	add.w	r3, sp, #30
 800b8c2:	9300      	str	r3, [sp, #0]
 800b8c4:	4945      	ldr	r1, [pc, #276]	@ (800b9dc <_tzset_unlocked_r+0x324>)
 800b8c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8c8:	aa07      	add	r2, sp, #28
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff faa6 	bl	800ae1c <siscanf>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	f300 80a2 	bgt.w	800ba1a <_tzset_unlocked_r+0x362>
 800b8d6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8de:	4627      	mov	r7, r4
 800b8e0:	441d      	add	r5, r3
 800b8e2:	f04f 0b00 	mov.w	fp, #0
 800b8e6:	782b      	ldrb	r3, [r5, #0]
 800b8e8:	2b2c      	cmp	r3, #44	@ 0x2c
 800b8ea:	bf08      	it	eq
 800b8ec:	3501      	addeq	r5, #1
 800b8ee:	f895 9000 	ldrb.w	r9, [r5]
 800b8f2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b8f6:	f040 80a3 	bne.w	800ba40 <_tzset_unlocked_r+0x388>
 800b8fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8fc:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b900:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b904:	aa09      	add	r2, sp, #36	@ 0x24
 800b906:	9200      	str	r2, [sp, #0]
 800b908:	4937      	ldr	r1, [pc, #220]	@ (800b9e8 <_tzset_unlocked_r+0x330>)
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b910:	4628      	mov	r0, r5
 800b912:	f7ff fa83 	bl	800ae1c <siscanf>
 800b916:	2803      	cmp	r0, #3
 800b918:	f47f aefc 	bne.w	800b714 <_tzset_unlocked_r+0x5c>
 800b91c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b920:	1e4b      	subs	r3, r1, #1
 800b922:	2b0b      	cmp	r3, #11
 800b924:	f63f aef6 	bhi.w	800b714 <_tzset_unlocked_r+0x5c>
 800b928:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b92c:	1e53      	subs	r3, r2, #1
 800b92e:	2b04      	cmp	r3, #4
 800b930:	f63f aef0 	bhi.w	800b714 <_tzset_unlocked_r+0x5c>
 800b934:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b938:	2b06      	cmp	r3, #6
 800b93a:	f63f aeeb 	bhi.w	800b714 <_tzset_unlocked_r+0x5c>
 800b93e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b942:	f887 9008 	strb.w	r9, [r7, #8]
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94a:	eb05 0903 	add.w	r9, r5, r3
 800b94e:	2500      	movs	r5, #0
 800b950:	f04f 0302 	mov.w	r3, #2
 800b954:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b958:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b95c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b960:	950a      	str	r5, [sp, #40]	@ 0x28
 800b962:	f899 3000 	ldrb.w	r3, [r9]
 800b966:	2b2f      	cmp	r3, #47	@ 0x2f
 800b968:	f040 8096 	bne.w	800ba98 <_tzset_unlocked_r+0x3e0>
 800b96c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b96e:	aa08      	add	r2, sp, #32
 800b970:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b974:	f10d 021e 	add.w	r2, sp, #30
 800b978:	9200      	str	r2, [sp, #0]
 800b97a:	491c      	ldr	r1, [pc, #112]	@ (800b9ec <_tzset_unlocked_r+0x334>)
 800b97c:	9303      	str	r3, [sp, #12]
 800b97e:	aa07      	add	r2, sp, #28
 800b980:	4648      	mov	r0, r9
 800b982:	f7ff fa4b 	bl	800ae1c <siscanf>
 800b986:	42a8      	cmp	r0, r5
 800b988:	f300 8086 	bgt.w	800ba98 <_tzset_unlocked_r+0x3e0>
 800b98c:	214a      	movs	r1, #74	@ 0x4a
 800b98e:	2200      	movs	r2, #0
 800b990:	2300      	movs	r3, #0
 800b992:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b996:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b99a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b99e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b9a2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b9a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b9aa:	7221      	strb	r1, [r4, #8]
 800b9ac:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b9ae:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b9b2:	6525      	str	r5, [r4, #80]	@ 0x50
 800b9b4:	e6ae      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800b9b6:	bf00      	nop
 800b9b8:	08010798 	.word	0x08010798
 800b9bc:	20009838 	.word	0x20009838
 800b9c0:	20009854 	.word	0x20009854
 800b9c4:	0801079b 	.word	0x0801079b
 800b9c8:	20009858 	.word	0x20009858
 800b9cc:	20000028 	.word	0x20000028
 800b9d0:	0800fc59 	.word	0x0800fc59
 800b9d4:	20009848 	.word	0x20009848
 800b9d8:	0801079f 	.word	0x0801079f
 800b9dc:	080107d4 	.word	0x080107d4
 800b9e0:	2000983c 	.word	0x2000983c
 800b9e4:	080107b2 	.word	0x080107b2
 800b9e8:	080107c0 	.word	0x080107c0
 800b9ec:	080107d3 	.word	0x080107d3
 800b9f0:	4a3e      	ldr	r2, [pc, #248]	@ (800baec <_tzset_unlocked_r+0x434>)
 800b9f2:	493f      	ldr	r1, [pc, #252]	@ (800baf0 <_tzset_unlocked_r+0x438>)
 800b9f4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9f6:	4648      	mov	r0, r9
 800b9f8:	f7ff fa10 	bl	800ae1c <siscanf>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	f77f af17 	ble.w	800b830 <_tzset_unlocked_r+0x178>
 800ba02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba04:	3b03      	subs	r3, #3
 800ba06:	2b07      	cmp	r3, #7
 800ba08:	f67f af42 	bls.w	800b890 <_tzset_unlocked_r+0x1d8>
 800ba0c:	e682      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800ba0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba10:	bf08      	it	eq
 800ba12:	3501      	addeq	r5, #1
 800ba14:	f04f 0901 	mov.w	r9, #1
 800ba18:	e745      	b.n	800b8a6 <_tzset_unlocked_r+0x1ee>
 800ba1a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ba1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ba22:	213c      	movs	r1, #60	@ 0x3c
 800ba24:	fb01 3302 	mla	r3, r1, r2, r3
 800ba28:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ba2c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ba30:	fb01 3302 	mla	r3, r1, r2, r3
 800ba34:	fb09 f303 	mul.w	r3, r9, r3
 800ba38:	e74f      	b.n	800b8da <_tzset_unlocked_r+0x222>
 800ba3a:	f04f 0b01 	mov.w	fp, #1
 800ba3e:	e752      	b.n	800b8e6 <_tzset_unlocked_r+0x22e>
 800ba40:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800ba44:	bf06      	itte	eq
 800ba46:	3501      	addeq	r5, #1
 800ba48:	464b      	moveq	r3, r9
 800ba4a:	2344      	movne	r3, #68	@ 0x44
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ba50:	4628      	mov	r0, r5
 800ba52:	9305      	str	r3, [sp, #20]
 800ba54:	f002 f854 	bl	800db00 <strtoul>
 800ba58:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800ba5c:	9b05      	ldr	r3, [sp, #20]
 800ba5e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800ba62:	45a9      	cmp	r9, r5
 800ba64:	d114      	bne.n	800ba90 <_tzset_unlocked_r+0x3d8>
 800ba66:	234d      	movs	r3, #77	@ 0x4d
 800ba68:	f1bb 0f00 	cmp.w	fp, #0
 800ba6c:	d107      	bne.n	800ba7e <_tzset_unlocked_r+0x3c6>
 800ba6e:	7223      	strb	r3, [r4, #8]
 800ba70:	2103      	movs	r1, #3
 800ba72:	2302      	movs	r3, #2
 800ba74:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800ba78:	f8c4 b014 	str.w	fp, [r4, #20]
 800ba7c:	e767      	b.n	800b94e <_tzset_unlocked_r+0x296>
 800ba7e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800ba82:	220b      	movs	r2, #11
 800ba84:	2301      	movs	r3, #1
 800ba86:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ba8e:	e75e      	b.n	800b94e <_tzset_unlocked_r+0x296>
 800ba90:	b280      	uxth	r0, r0
 800ba92:	723b      	strb	r3, [r7, #8]
 800ba94:	6178      	str	r0, [r7, #20]
 800ba96:	e75a      	b.n	800b94e <_tzset_unlocked_r+0x296>
 800ba98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ba9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800baa0:	213c      	movs	r1, #60	@ 0x3c
 800baa2:	fb01 3302 	mla	r3, r1, r2, r3
 800baa6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800baaa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800baae:	fb01 3302 	mla	r3, r1, r2, r3
 800bab2:	61bb      	str	r3, [r7, #24]
 800bab4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bab6:	3728      	adds	r7, #40	@ 0x28
 800bab8:	444d      	add	r5, r9
 800baba:	f1bb 0f00 	cmp.w	fp, #0
 800babe:	d0bc      	beq.n	800ba3a <_tzset_unlocked_r+0x382>
 800bac0:	9b04      	ldr	r3, [sp, #16]
 800bac2:	6523      	str	r3, [r4, #80]	@ 0x50
 800bac4:	4b0b      	ldr	r3, [pc, #44]	@ (800baf4 <_tzset_unlocked_r+0x43c>)
 800bac6:	f8c8 3000 	str.w	r3, [r8]
 800baca:	6860      	ldr	r0, [r4, #4]
 800bacc:	4b07      	ldr	r3, [pc, #28]	@ (800baec <_tzset_unlocked_r+0x434>)
 800bace:	62a6      	str	r6, [r4, #40]	@ 0x28
 800bad0:	f8c8 3004 	str.w	r3, [r8, #4]
 800bad4:	f7ff fd34 	bl	800b540 <__tzcalc_limits>
 800bad8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bada:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800badc:	f8ca 2000 	str.w	r2, [sl]
 800bae0:	1a9b      	subs	r3, r3, r2
 800bae2:	4a05      	ldr	r2, [pc, #20]	@ (800baf8 <_tzset_unlocked_r+0x440>)
 800bae4:	bf18      	it	ne
 800bae6:	2301      	movne	r3, #1
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	e613      	b.n	800b714 <_tzset_unlocked_r+0x5c>
 800baec:	2000983c 	.word	0x2000983c
 800baf0:	080107b2 	.word	0x080107b2
 800baf4:	20009848 	.word	0x20009848
 800baf8:	20009858 	.word	0x20009858

0800bafc <_localeconv_r>:
 800bafc:	4800      	ldr	r0, [pc, #0]	@ (800bb00 <_localeconv_r+0x4>)
 800bafe:	4770      	bx	lr
 800bb00:	20000120 	.word	0x20000120

0800bb04 <_close_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d06      	ldr	r5, [pc, #24]	@ (800bb20 <_close_r+0x1c>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	f7f8 fe30 	bl	8004774 <_close>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_close_r+0x1a>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_close_r+0x1a>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	2000985c 	.word	0x2000985c

0800bb24 <_lseek_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d07      	ldr	r5, [pc, #28]	@ (800bb44 <_lseek_r+0x20>)
 800bb28:	4604      	mov	r4, r0
 800bb2a:	4608      	mov	r0, r1
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	602a      	str	r2, [r5, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	f7f8 fe28 	bl	8004788 <_lseek>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d102      	bne.n	800bb42 <_lseek_r+0x1e>
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	b103      	cbz	r3, 800bb42 <_lseek_r+0x1e>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	bd38      	pop	{r3, r4, r5, pc}
 800bb44:	2000985c 	.word	0x2000985c

0800bb48 <_read_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d07      	ldr	r5, [pc, #28]	@ (800bb68 <_read_r+0x20>)
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	4608      	mov	r0, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	2200      	movs	r2, #0
 800bb54:	602a      	str	r2, [r5, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	f7f8 fdf0 	bl	800473c <_read>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_read_r+0x1e>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_read_r+0x1e>
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	2000985c 	.word	0x2000985c

0800bb6c <_sbrk_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4d06      	ldr	r5, [pc, #24]	@ (800bb88 <_sbrk_r+0x1c>)
 800bb70:	2300      	movs	r3, #0
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	602b      	str	r3, [r5, #0]
 800bb78:	f7f8 fe08 	bl	800478c <_sbrk>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_sbrk_r+0x1a>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_sbrk_r+0x1a>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	2000985c 	.word	0x2000985c

0800bb8c <_write_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	@ (800bbac <_write_r+0x20>)
 800bb90:	4604      	mov	r4, r0
 800bb92:	4608      	mov	r0, r1
 800bb94:	4611      	mov	r1, r2
 800bb96:	2200      	movs	r2, #0
 800bb98:	602a      	str	r2, [r5, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f7f8 fddc 	bl	8004758 <_write>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_write_r+0x1e>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_write_r+0x1e>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	2000985c 	.word	0x2000985c

0800bbb0 <__errno>:
 800bbb0:	4b01      	ldr	r3, [pc, #4]	@ (800bbb8 <__errno+0x8>)
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	2000019c 	.word	0x2000019c

0800bbbc <__libc_init_array>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4d0d      	ldr	r5, [pc, #52]	@ (800bbf4 <__libc_init_array+0x38>)
 800bbc0:	4c0d      	ldr	r4, [pc, #52]	@ (800bbf8 <__libc_init_array+0x3c>)
 800bbc2:	1b64      	subs	r4, r4, r5
 800bbc4:	10a4      	asrs	r4, r4, #2
 800bbc6:	2600      	movs	r6, #0
 800bbc8:	42a6      	cmp	r6, r4
 800bbca:	d109      	bne.n	800bbe0 <__libc_init_array+0x24>
 800bbcc:	4d0b      	ldr	r5, [pc, #44]	@ (800bbfc <__libc_init_array+0x40>)
 800bbce:	4c0c      	ldr	r4, [pc, #48]	@ (800bc00 <__libc_init_array+0x44>)
 800bbd0:	f003 f8cc 	bl	800ed6c <_init>
 800bbd4:	1b64      	subs	r4, r4, r5
 800bbd6:	10a4      	asrs	r4, r4, #2
 800bbd8:	2600      	movs	r6, #0
 800bbda:	42a6      	cmp	r6, r4
 800bbdc:	d105      	bne.n	800bbea <__libc_init_array+0x2e>
 800bbde:	bd70      	pop	{r4, r5, r6, pc}
 800bbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe4:	4798      	blx	r3
 800bbe6:	3601      	adds	r6, #1
 800bbe8:	e7ee      	b.n	800bbc8 <__libc_init_array+0xc>
 800bbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbee:	4798      	blx	r3
 800bbf0:	3601      	adds	r6, #1
 800bbf2:	e7f2      	b.n	800bbda <__libc_init_array+0x1e>
 800bbf4:	08010b00 	.word	0x08010b00
 800bbf8:	08010b00 	.word	0x08010b00
 800bbfc:	08010b00 	.word	0x08010b00
 800bc00:	08010b04 	.word	0x08010b04

0800bc04 <__retarget_lock_init_recursive>:
 800bc04:	4770      	bx	lr

0800bc06 <__retarget_lock_acquire>:
 800bc06:	4770      	bx	lr

0800bc08 <__retarget_lock_acquire_recursive>:
 800bc08:	4770      	bx	lr

0800bc0a <__retarget_lock_release>:
 800bc0a:	4770      	bx	lr

0800bc0c <__retarget_lock_release_recursive>:
 800bc0c:	4770      	bx	lr

0800bc0e <strcpy>:
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc14:	f803 2b01 	strb.w	r2, [r3], #1
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	d1f9      	bne.n	800bc10 <strcpy+0x2>
 800bc1c:	4770      	bx	lr

0800bc1e <memcpy>:
 800bc1e:	440a      	add	r2, r1
 800bc20:	4291      	cmp	r1, r2
 800bc22:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc26:	d100      	bne.n	800bc2a <memcpy+0xc>
 800bc28:	4770      	bx	lr
 800bc2a:	b510      	push	{r4, lr}
 800bc2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc34:	4291      	cmp	r1, r2
 800bc36:	d1f9      	bne.n	800bc2c <memcpy+0xe>
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	0000      	movs	r0, r0
 800bc3c:	0000      	movs	r0, r0
	...

0800bc40 <nan>:
 800bc40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bc48 <nan+0x8>
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	00000000 	.word	0x00000000
 800bc4c:	7ff80000 	.word	0x7ff80000

0800bc50 <nanf>:
 800bc50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc58 <nanf+0x8>
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	7fc00000 	.word	0x7fc00000

0800bc5c <div>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	fb91 f4f2 	sdiv	r4, r1, r2
 800bc62:	fb02 1114 	mls	r1, r2, r4, r1
 800bc66:	6004      	str	r4, [r0, #0]
 800bc68:	6041      	str	r1, [r0, #4]
 800bc6a:	bd10      	pop	{r4, pc}

0800bc6c <quorem>:
 800bc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	6903      	ldr	r3, [r0, #16]
 800bc72:	690c      	ldr	r4, [r1, #16]
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	4607      	mov	r7, r0
 800bc78:	db7e      	blt.n	800bd78 <quorem+0x10c>
 800bc7a:	3c01      	subs	r4, #1
 800bc7c:	f101 0814 	add.w	r8, r1, #20
 800bc80:	00a3      	lsls	r3, r4, #2
 800bc82:	f100 0514 	add.w	r5, r0, #20
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc96:	3301      	adds	r3, #1
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bca2:	d32e      	bcc.n	800bd02 <quorem+0x96>
 800bca4:	f04f 0a00 	mov.w	sl, #0
 800bca8:	46c4      	mov	ip, r8
 800bcaa:	46ae      	mov	lr, r5
 800bcac:	46d3      	mov	fp, sl
 800bcae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bcb2:	b298      	uxth	r0, r3
 800bcb4:	fb06 a000 	mla	r0, r6, r0, sl
 800bcb8:	0c02      	lsrs	r2, r0, #16
 800bcba:	0c1b      	lsrs	r3, r3, #16
 800bcbc:	fb06 2303 	mla	r3, r6, r3, r2
 800bcc0:	f8de 2000 	ldr.w	r2, [lr]
 800bcc4:	b280      	uxth	r0, r0
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	1a12      	subs	r2, r2, r0
 800bcca:	445a      	add	r2, fp
 800bccc:	f8de 0000 	ldr.w	r0, [lr]
 800bcd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bcda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bcde:	b292      	uxth	r2, r2
 800bce0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bce4:	45e1      	cmp	r9, ip
 800bce6:	f84e 2b04 	str.w	r2, [lr], #4
 800bcea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bcee:	d2de      	bcs.n	800bcae <quorem+0x42>
 800bcf0:	9b00      	ldr	r3, [sp, #0]
 800bcf2:	58eb      	ldr	r3, [r5, r3]
 800bcf4:	b92b      	cbnz	r3, 800bd02 <quorem+0x96>
 800bcf6:	9b01      	ldr	r3, [sp, #4]
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	d32f      	bcc.n	800bd60 <quorem+0xf4>
 800bd00:	613c      	str	r4, [r7, #16]
 800bd02:	4638      	mov	r0, r7
 800bd04:	f001 fc9e 	bl	800d644 <__mcmp>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	db25      	blt.n	800bd58 <quorem+0xec>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	2000      	movs	r0, #0
 800bd10:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd14:	f8d1 c000 	ldr.w	ip, [r1]
 800bd18:	fa1f fe82 	uxth.w	lr, r2
 800bd1c:	fa1f f38c 	uxth.w	r3, ip
 800bd20:	eba3 030e 	sub.w	r3, r3, lr
 800bd24:	4403      	add	r3, r0
 800bd26:	0c12      	lsrs	r2, r2, #16
 800bd28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd36:	45c1      	cmp	r9, r8
 800bd38:	f841 3b04 	str.w	r3, [r1], #4
 800bd3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd40:	d2e6      	bcs.n	800bd10 <quorem+0xa4>
 800bd42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd4a:	b922      	cbnz	r2, 800bd56 <quorem+0xea>
 800bd4c:	3b04      	subs	r3, #4
 800bd4e:	429d      	cmp	r5, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	d30b      	bcc.n	800bd6c <quorem+0x100>
 800bd54:	613c      	str	r4, [r7, #16]
 800bd56:	3601      	adds	r6, #1
 800bd58:	4630      	mov	r0, r6
 800bd5a:	b003      	add	sp, #12
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	6812      	ldr	r2, [r2, #0]
 800bd62:	3b04      	subs	r3, #4
 800bd64:	2a00      	cmp	r2, #0
 800bd66:	d1cb      	bne.n	800bd00 <quorem+0x94>
 800bd68:	3c01      	subs	r4, #1
 800bd6a:	e7c6      	b.n	800bcfa <quorem+0x8e>
 800bd6c:	6812      	ldr	r2, [r2, #0]
 800bd6e:	3b04      	subs	r3, #4
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	d1ef      	bne.n	800bd54 <quorem+0xe8>
 800bd74:	3c01      	subs	r4, #1
 800bd76:	e7ea      	b.n	800bd4e <quorem+0xe2>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	e7ee      	b.n	800bd5a <quorem+0xee>
 800bd7c:	0000      	movs	r0, r0
	...

0800bd80 <_dtoa_r>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	69c7      	ldr	r7, [r0, #28]
 800bd86:	b099      	sub	sp, #100	@ 0x64
 800bd88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd8c:	ec55 4b10 	vmov	r4, r5, d0
 800bd90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bd92:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd94:	4683      	mov	fp, r0
 800bd96:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd9a:	b97f      	cbnz	r7, 800bdbc <_dtoa_r+0x3c>
 800bd9c:	2010      	movs	r0, #16
 800bd9e:	f7fd f96d 	bl	800907c <malloc>
 800bda2:	4602      	mov	r2, r0
 800bda4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bda8:	b920      	cbnz	r0, 800bdb4 <_dtoa_r+0x34>
 800bdaa:	4ba7      	ldr	r3, [pc, #668]	@ (800c048 <_dtoa_r+0x2c8>)
 800bdac:	21ef      	movs	r1, #239	@ 0xef
 800bdae:	48a7      	ldr	r0, [pc, #668]	@ (800c04c <_dtoa_r+0x2cc>)
 800bdb0:	f002 fc6c 	bl	800e68c <__assert_func>
 800bdb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bdb8:	6007      	str	r7, [r0, #0]
 800bdba:	60c7      	str	r7, [r0, #12]
 800bdbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bdc0:	6819      	ldr	r1, [r3, #0]
 800bdc2:	b159      	cbz	r1, 800bddc <_dtoa_r+0x5c>
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	604a      	str	r2, [r1, #4]
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4093      	lsls	r3, r2
 800bdcc:	608b      	str	r3, [r1, #8]
 800bdce:	4658      	mov	r0, fp
 800bdd0:	f001 f9b4 	bl	800d13c <_Bfree>
 800bdd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	601a      	str	r2, [r3, #0]
 800bddc:	1e2b      	subs	r3, r5, #0
 800bdde:	bfb9      	ittee	lt
 800bde0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bde4:	9303      	strlt	r3, [sp, #12]
 800bde6:	2300      	movge	r3, #0
 800bde8:	6033      	strge	r3, [r6, #0]
 800bdea:	9f03      	ldr	r7, [sp, #12]
 800bdec:	4b98      	ldr	r3, [pc, #608]	@ (800c050 <_dtoa_r+0x2d0>)
 800bdee:	bfbc      	itt	lt
 800bdf0:	2201      	movlt	r2, #1
 800bdf2:	6032      	strlt	r2, [r6, #0]
 800bdf4:	43bb      	bics	r3, r7
 800bdf6:	d112      	bne.n	800be1e <_dtoa_r+0x9e>
 800bdf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be04:	4323      	orrs	r3, r4
 800be06:	f000 854d 	beq.w	800c8a4 <_dtoa_r+0xb24>
 800be0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c064 <_dtoa_r+0x2e4>
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 854f 	beq.w	800c8b4 <_dtoa_r+0xb34>
 800be16:	f10a 0303 	add.w	r3, sl, #3
 800be1a:	f000 bd49 	b.w	800c8b0 <_dtoa_r+0xb30>
 800be1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be22:	2200      	movs	r2, #0
 800be24:	ec51 0b17 	vmov	r0, r1, d7
 800be28:	2300      	movs	r3, #0
 800be2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800be2e:	f7f4 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800be32:	4680      	mov	r8, r0
 800be34:	b158      	cbz	r0, 800be4e <_dtoa_r+0xce>
 800be36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be38:	2301      	movs	r3, #1
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be3e:	b113      	cbz	r3, 800be46 <_dtoa_r+0xc6>
 800be40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be42:	4b84      	ldr	r3, [pc, #528]	@ (800c054 <_dtoa_r+0x2d4>)
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c068 <_dtoa_r+0x2e8>
 800be4a:	f000 bd33 	b.w	800c8b4 <_dtoa_r+0xb34>
 800be4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be52:	aa16      	add	r2, sp, #88	@ 0x58
 800be54:	a917      	add	r1, sp, #92	@ 0x5c
 800be56:	4658      	mov	r0, fp
 800be58:	f001 fd14 	bl	800d884 <__d2b>
 800be5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be60:	4681      	mov	r9, r0
 800be62:	2e00      	cmp	r6, #0
 800be64:	d077      	beq.n	800bf56 <_dtoa_r+0x1d6>
 800be66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800be6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be80:	4619      	mov	r1, r3
 800be82:	2200      	movs	r2, #0
 800be84:	4b74      	ldr	r3, [pc, #464]	@ (800c058 <_dtoa_r+0x2d8>)
 800be86:	f7f4 fa0f 	bl	80002a8 <__aeabi_dsub>
 800be8a:	a369      	add	r3, pc, #420	@ (adr r3, 800c030 <_dtoa_r+0x2b0>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 fbc2 	bl	8000618 <__aeabi_dmul>
 800be94:	a368      	add	r3, pc, #416	@ (adr r3, 800c038 <_dtoa_r+0x2b8>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fa07 	bl	80002ac <__adddf3>
 800be9e:	4604      	mov	r4, r0
 800bea0:	4630      	mov	r0, r6
 800bea2:	460d      	mov	r5, r1
 800bea4:	f7f4 fb4e 	bl	8000544 <__aeabi_i2d>
 800bea8:	a365      	add	r3, pc, #404	@ (adr r3, 800c040 <_dtoa_r+0x2c0>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 fbb3 	bl	8000618 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4620      	mov	r0, r4
 800beb8:	4629      	mov	r1, r5
 800beba:	f7f4 f9f7 	bl	80002ac <__adddf3>
 800bebe:	4604      	mov	r4, r0
 800bec0:	460d      	mov	r5, r1
 800bec2:	f7f4 fe59 	bl	8000b78 <__aeabi_d2iz>
 800bec6:	2200      	movs	r2, #0
 800bec8:	4607      	mov	r7, r0
 800beca:	2300      	movs	r3, #0
 800becc:	4620      	mov	r0, r4
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 fe14 	bl	8000afc <__aeabi_dcmplt>
 800bed4:	b140      	cbz	r0, 800bee8 <_dtoa_r+0x168>
 800bed6:	4638      	mov	r0, r7
 800bed8:	f7f4 fb34 	bl	8000544 <__aeabi_i2d>
 800bedc:	4622      	mov	r2, r4
 800bede:	462b      	mov	r3, r5
 800bee0:	f7f4 fe02 	bl	8000ae8 <__aeabi_dcmpeq>
 800bee4:	b900      	cbnz	r0, 800bee8 <_dtoa_r+0x168>
 800bee6:	3f01      	subs	r7, #1
 800bee8:	2f16      	cmp	r7, #22
 800beea:	d851      	bhi.n	800bf90 <_dtoa_r+0x210>
 800beec:	4b5b      	ldr	r3, [pc, #364]	@ (800c05c <_dtoa_r+0x2dc>)
 800beee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800befa:	f7f4 fdff 	bl	8000afc <__aeabi_dcmplt>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d048      	beq.n	800bf94 <_dtoa_r+0x214>
 800bf02:	3f01      	subs	r7, #1
 800bf04:	2300      	movs	r3, #0
 800bf06:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf0a:	1b9b      	subs	r3, r3, r6
 800bf0c:	1e5a      	subs	r2, r3, #1
 800bf0e:	bf44      	itt	mi
 800bf10:	f1c3 0801 	rsbmi	r8, r3, #1
 800bf14:	2300      	movmi	r3, #0
 800bf16:	9208      	str	r2, [sp, #32]
 800bf18:	bf54      	ite	pl
 800bf1a:	f04f 0800 	movpl.w	r8, #0
 800bf1e:	9308      	strmi	r3, [sp, #32]
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	db39      	blt.n	800bf98 <_dtoa_r+0x218>
 800bf24:	9b08      	ldr	r3, [sp, #32]
 800bf26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bf28:	443b      	add	r3, r7
 800bf2a:	9308      	str	r3, [sp, #32]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf32:	2b09      	cmp	r3, #9
 800bf34:	d864      	bhi.n	800c000 <_dtoa_r+0x280>
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	bfc4      	itt	gt
 800bf3a:	3b04      	subgt	r3, #4
 800bf3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf40:	f1a3 0302 	sub.w	r3, r3, #2
 800bf44:	bfcc      	ite	gt
 800bf46:	2400      	movgt	r4, #0
 800bf48:	2401      	movle	r4, #1
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d863      	bhi.n	800c016 <_dtoa_r+0x296>
 800bf4e:	e8df f003 	tbb	[pc, r3]
 800bf52:	372a      	.short	0x372a
 800bf54:	5535      	.short	0x5535
 800bf56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bf5a:	441e      	add	r6, r3
 800bf5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	bfc1      	itttt	gt
 800bf64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf68:	409f      	lslgt	r7, r3
 800bf6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf72:	bfd6      	itet	le
 800bf74:	f1c3 0320 	rsble	r3, r3, #32
 800bf78:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf7c:	fa04 f003 	lslle.w	r0, r4, r3
 800bf80:	f7f4 fad0 	bl	8000524 <__aeabi_ui2d>
 800bf84:	2201      	movs	r2, #1
 800bf86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf8a:	3e01      	subs	r6, #1
 800bf8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf8e:	e777      	b.n	800be80 <_dtoa_r+0x100>
 800bf90:	2301      	movs	r3, #1
 800bf92:	e7b8      	b.n	800bf06 <_dtoa_r+0x186>
 800bf94:	9012      	str	r0, [sp, #72]	@ 0x48
 800bf96:	e7b7      	b.n	800bf08 <_dtoa_r+0x188>
 800bf98:	427b      	negs	r3, r7
 800bf9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	eba8 0807 	sub.w	r8, r8, r7
 800bfa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfa4:	e7c4      	b.n	800bf30 <_dtoa_r+0x1b0>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dc35      	bgt.n	800c01c <_dtoa_r+0x29c>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	9307      	str	r3, [sp, #28]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfba:	e00b      	b.n	800bfd4 <_dtoa_r+0x254>
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e7f3      	b.n	800bfa8 <_dtoa_r+0x228>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfc6:	18fb      	adds	r3, r7, r3
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	9307      	str	r3, [sp, #28]
 800bfd0:	bfb8      	it	lt
 800bfd2:	2301      	movlt	r3, #1
 800bfd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bfd8:	2100      	movs	r1, #0
 800bfda:	2204      	movs	r2, #4
 800bfdc:	f102 0514 	add.w	r5, r2, #20
 800bfe0:	429d      	cmp	r5, r3
 800bfe2:	d91f      	bls.n	800c024 <_dtoa_r+0x2a4>
 800bfe4:	6041      	str	r1, [r0, #4]
 800bfe6:	4658      	mov	r0, fp
 800bfe8:	f001 f868 	bl	800d0bc <_Balloc>
 800bfec:	4682      	mov	sl, r0
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d13c      	bne.n	800c06c <_dtoa_r+0x2ec>
 800bff2:	4b1b      	ldr	r3, [pc, #108]	@ (800c060 <_dtoa_r+0x2e0>)
 800bff4:	4602      	mov	r2, r0
 800bff6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bffa:	e6d8      	b.n	800bdae <_dtoa_r+0x2e>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e7e0      	b.n	800bfc2 <_dtoa_r+0x242>
 800c000:	2401      	movs	r4, #1
 800c002:	2300      	movs	r3, #0
 800c004:	9309      	str	r3, [sp, #36]	@ 0x24
 800c006:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c008:	f04f 33ff 	mov.w	r3, #4294967295
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	2200      	movs	r2, #0
 800c012:	2312      	movs	r3, #18
 800c014:	e7d0      	b.n	800bfb8 <_dtoa_r+0x238>
 800c016:	2301      	movs	r3, #1
 800c018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c01a:	e7f5      	b.n	800c008 <_dtoa_r+0x288>
 800c01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	9307      	str	r3, [sp, #28]
 800c022:	e7d7      	b.n	800bfd4 <_dtoa_r+0x254>
 800c024:	3101      	adds	r1, #1
 800c026:	0052      	lsls	r2, r2, #1
 800c028:	e7d8      	b.n	800bfdc <_dtoa_r+0x25c>
 800c02a:	bf00      	nop
 800c02c:	f3af 8000 	nop.w
 800c030:	636f4361 	.word	0x636f4361
 800c034:	3fd287a7 	.word	0x3fd287a7
 800c038:	8b60c8b3 	.word	0x8b60c8b3
 800c03c:	3fc68a28 	.word	0x3fc68a28
 800c040:	509f79fb 	.word	0x509f79fb
 800c044:	3fd34413 	.word	0x3fd34413
 800c048:	080107f9 	.word	0x080107f9
 800c04c:	08010810 	.word	0x08010810
 800c050:	7ff00000 	.word	0x7ff00000
 800c054:	08010a58 	.word	0x08010a58
 800c058:	3ff80000 	.word	0x3ff80000
 800c05c:	08010968 	.word	0x08010968
 800c060:	08010868 	.word	0x08010868
 800c064:	080107f5 	.word	0x080107f5
 800c068:	08010a57 	.word	0x08010a57
 800c06c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c070:	6018      	str	r0, [r3, #0]
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	2b0e      	cmp	r3, #14
 800c076:	f200 80a4 	bhi.w	800c1c2 <_dtoa_r+0x442>
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	f000 80a1 	beq.w	800c1c2 <_dtoa_r+0x442>
 800c080:	2f00      	cmp	r7, #0
 800c082:	dd33      	ble.n	800c0ec <_dtoa_r+0x36c>
 800c084:	4bad      	ldr	r3, [pc, #692]	@ (800c33c <_dtoa_r+0x5bc>)
 800c086:	f007 020f 	and.w	r2, r7, #15
 800c08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c08e:	ed93 7b00 	vldr	d7, [r3]
 800c092:	05f8      	lsls	r0, r7, #23
 800c094:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c09c:	d516      	bpl.n	800c0cc <_dtoa_r+0x34c>
 800c09e:	4ba8      	ldr	r3, [pc, #672]	@ (800c340 <_dtoa_r+0x5c0>)
 800c0a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0a8:	f7f4 fbe0 	bl	800086c <__aeabi_ddiv>
 800c0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b0:	f004 040f 	and.w	r4, r4, #15
 800c0b4:	2603      	movs	r6, #3
 800c0b6:	4da2      	ldr	r5, [pc, #648]	@ (800c340 <_dtoa_r+0x5c0>)
 800c0b8:	b954      	cbnz	r4, 800c0d0 <_dtoa_r+0x350>
 800c0ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c2:	f7f4 fbd3 	bl	800086c <__aeabi_ddiv>
 800c0c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ca:	e028      	b.n	800c11e <_dtoa_r+0x39e>
 800c0cc:	2602      	movs	r6, #2
 800c0ce:	e7f2      	b.n	800c0b6 <_dtoa_r+0x336>
 800c0d0:	07e1      	lsls	r1, r4, #31
 800c0d2:	d508      	bpl.n	800c0e6 <_dtoa_r+0x366>
 800c0d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0dc:	f7f4 fa9c 	bl	8000618 <__aeabi_dmul>
 800c0e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0e4:	3601      	adds	r6, #1
 800c0e6:	1064      	asrs	r4, r4, #1
 800c0e8:	3508      	adds	r5, #8
 800c0ea:	e7e5      	b.n	800c0b8 <_dtoa_r+0x338>
 800c0ec:	f000 80d2 	beq.w	800c294 <_dtoa_r+0x514>
 800c0f0:	427c      	negs	r4, r7
 800c0f2:	4b92      	ldr	r3, [pc, #584]	@ (800c33c <_dtoa_r+0x5bc>)
 800c0f4:	4d92      	ldr	r5, [pc, #584]	@ (800c340 <_dtoa_r+0x5c0>)
 800c0f6:	f004 020f 	and.w	r2, r4, #15
 800c0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c106:	f7f4 fa87 	bl	8000618 <__aeabi_dmul>
 800c10a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c10e:	1124      	asrs	r4, r4, #4
 800c110:	2300      	movs	r3, #0
 800c112:	2602      	movs	r6, #2
 800c114:	2c00      	cmp	r4, #0
 800c116:	f040 80b2 	bne.w	800c27e <_dtoa_r+0x4fe>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1d3      	bne.n	800c0c6 <_dtoa_r+0x346>
 800c11e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c120:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 80b7 	beq.w	800c298 <_dtoa_r+0x518>
 800c12a:	4b86      	ldr	r3, [pc, #536]	@ (800c344 <_dtoa_r+0x5c4>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	4620      	mov	r0, r4
 800c130:	4629      	mov	r1, r5
 800c132:	f7f4 fce3 	bl	8000afc <__aeabi_dcmplt>
 800c136:	2800      	cmp	r0, #0
 800c138:	f000 80ae 	beq.w	800c298 <_dtoa_r+0x518>
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 80aa 	beq.w	800c298 <_dtoa_r+0x518>
 800c144:	9b00      	ldr	r3, [sp, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	dd37      	ble.n	800c1ba <_dtoa_r+0x43a>
 800c14a:	1e7b      	subs	r3, r7, #1
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	4620      	mov	r0, r4
 800c150:	4b7d      	ldr	r3, [pc, #500]	@ (800c348 <_dtoa_r+0x5c8>)
 800c152:	2200      	movs	r2, #0
 800c154:	4629      	mov	r1, r5
 800c156:	f7f4 fa5f 	bl	8000618 <__aeabi_dmul>
 800c15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c15e:	9c00      	ldr	r4, [sp, #0]
 800c160:	3601      	adds	r6, #1
 800c162:	4630      	mov	r0, r6
 800c164:	f7f4 f9ee 	bl	8000544 <__aeabi_i2d>
 800c168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c16c:	f7f4 fa54 	bl	8000618 <__aeabi_dmul>
 800c170:	4b76      	ldr	r3, [pc, #472]	@ (800c34c <_dtoa_r+0x5cc>)
 800c172:	2200      	movs	r2, #0
 800c174:	f7f4 f89a 	bl	80002ac <__adddf3>
 800c178:	4605      	mov	r5, r0
 800c17a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c17e:	2c00      	cmp	r4, #0
 800c180:	f040 808d 	bne.w	800c29e <_dtoa_r+0x51e>
 800c184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c188:	4b71      	ldr	r3, [pc, #452]	@ (800c350 <_dtoa_r+0x5d0>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	f7f4 f88c 	bl	80002a8 <__aeabi_dsub>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c198:	462a      	mov	r2, r5
 800c19a:	4633      	mov	r3, r6
 800c19c:	f7f4 fccc 	bl	8000b38 <__aeabi_dcmpgt>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	f040 828b 	bne.w	800c6bc <_dtoa_r+0x93c>
 800c1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c1b0:	f7f4 fca4 	bl	8000afc <__aeabi_dcmplt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f040 8128 	bne.w	800c40a <_dtoa_r+0x68a>
 800c1ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c1be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c1c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f2c0 815a 	blt.w	800c47e <_dtoa_r+0x6fe>
 800c1ca:	2f0e      	cmp	r7, #14
 800c1cc:	f300 8157 	bgt.w	800c47e <_dtoa_r+0x6fe>
 800c1d0:	4b5a      	ldr	r3, [pc, #360]	@ (800c33c <_dtoa_r+0x5bc>)
 800c1d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1d6:	ed93 7b00 	vldr	d7, [r3]
 800c1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	ed8d 7b00 	vstr	d7, [sp]
 800c1e2:	da03      	bge.n	800c1ec <_dtoa_r+0x46c>
 800c1e4:	9b07      	ldr	r3, [sp, #28]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f340 8101 	ble.w	800c3ee <_dtoa_r+0x66e>
 800c1ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1f0:	4656      	mov	r6, sl
 800c1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 fb37 	bl	800086c <__aeabi_ddiv>
 800c1fe:	f7f4 fcbb 	bl	8000b78 <__aeabi_d2iz>
 800c202:	4680      	mov	r8, r0
 800c204:	f7f4 f99e 	bl	8000544 <__aeabi_i2d>
 800c208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c20c:	f7f4 fa04 	bl	8000618 <__aeabi_dmul>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	4620      	mov	r0, r4
 800c216:	4629      	mov	r1, r5
 800c218:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c21c:	f7f4 f844 	bl	80002a8 <__aeabi_dsub>
 800c220:	f806 4b01 	strb.w	r4, [r6], #1
 800c224:	9d07      	ldr	r5, [sp, #28]
 800c226:	eba6 040a 	sub.w	r4, r6, sl
 800c22a:	42a5      	cmp	r5, r4
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	f040 8117 	bne.w	800c462 <_dtoa_r+0x6e2>
 800c234:	f7f4 f83a 	bl	80002ac <__adddf3>
 800c238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c23c:	4604      	mov	r4, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	f7f4 fc7a 	bl	8000b38 <__aeabi_dcmpgt>
 800c244:	2800      	cmp	r0, #0
 800c246:	f040 80f9 	bne.w	800c43c <_dtoa_r+0x6bc>
 800c24a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 fc49 	bl	8000ae8 <__aeabi_dcmpeq>
 800c256:	b118      	cbz	r0, 800c260 <_dtoa_r+0x4e0>
 800c258:	f018 0f01 	tst.w	r8, #1
 800c25c:	f040 80ee 	bne.w	800c43c <_dtoa_r+0x6bc>
 800c260:	4649      	mov	r1, r9
 800c262:	4658      	mov	r0, fp
 800c264:	f000 ff6a 	bl	800d13c <_Bfree>
 800c268:	2300      	movs	r3, #0
 800c26a:	7033      	strb	r3, [r6, #0]
 800c26c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c26e:	3701      	adds	r7, #1
 800c270:	601f      	str	r7, [r3, #0]
 800c272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 831d 	beq.w	800c8b4 <_dtoa_r+0xb34>
 800c27a:	601e      	str	r6, [r3, #0]
 800c27c:	e31a      	b.n	800c8b4 <_dtoa_r+0xb34>
 800c27e:	07e2      	lsls	r2, r4, #31
 800c280:	d505      	bpl.n	800c28e <_dtoa_r+0x50e>
 800c282:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c286:	f7f4 f9c7 	bl	8000618 <__aeabi_dmul>
 800c28a:	3601      	adds	r6, #1
 800c28c:	2301      	movs	r3, #1
 800c28e:	1064      	asrs	r4, r4, #1
 800c290:	3508      	adds	r5, #8
 800c292:	e73f      	b.n	800c114 <_dtoa_r+0x394>
 800c294:	2602      	movs	r6, #2
 800c296:	e742      	b.n	800c11e <_dtoa_r+0x39e>
 800c298:	9c07      	ldr	r4, [sp, #28]
 800c29a:	9704      	str	r7, [sp, #16]
 800c29c:	e761      	b.n	800c162 <_dtoa_r+0x3e2>
 800c29e:	4b27      	ldr	r3, [pc, #156]	@ (800c33c <_dtoa_r+0x5bc>)
 800c2a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2aa:	4454      	add	r4, sl
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	d053      	beq.n	800c358 <_dtoa_r+0x5d8>
 800c2b0:	4928      	ldr	r1, [pc, #160]	@ (800c354 <_dtoa_r+0x5d4>)
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7f4 fada 	bl	800086c <__aeabi_ddiv>
 800c2b8:	4633      	mov	r3, r6
 800c2ba:	462a      	mov	r2, r5
 800c2bc:	f7f3 fff4 	bl	80002a8 <__aeabi_dsub>
 800c2c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2c4:	4656      	mov	r6, sl
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 fc55 	bl	8000b78 <__aeabi_d2iz>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	f7f4 f938 	bl	8000544 <__aeabi_i2d>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2dc:	f7f3 ffe4 	bl	80002a8 <__aeabi_dsub>
 800c2e0:	3530      	adds	r5, #48	@ 0x30
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2ea:	f806 5b01 	strb.w	r5, [r6], #1
 800c2ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2f2:	f7f4 fc03 	bl	8000afc <__aeabi_dcmplt>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d171      	bne.n	800c3de <_dtoa_r+0x65e>
 800c2fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2fe:	4911      	ldr	r1, [pc, #68]	@ (800c344 <_dtoa_r+0x5c4>)
 800c300:	2000      	movs	r0, #0
 800c302:	f7f3 ffd1 	bl	80002a8 <__aeabi_dsub>
 800c306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c30a:	f7f4 fbf7 	bl	8000afc <__aeabi_dcmplt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 8095 	bne.w	800c43e <_dtoa_r+0x6be>
 800c314:	42a6      	cmp	r6, r4
 800c316:	f43f af50 	beq.w	800c1ba <_dtoa_r+0x43a>
 800c31a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c31e:	4b0a      	ldr	r3, [pc, #40]	@ (800c348 <_dtoa_r+0x5c8>)
 800c320:	2200      	movs	r2, #0
 800c322:	f7f4 f979 	bl	8000618 <__aeabi_dmul>
 800c326:	4b08      	ldr	r3, [pc, #32]	@ (800c348 <_dtoa_r+0x5c8>)
 800c328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c32c:	2200      	movs	r2, #0
 800c32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c332:	f7f4 f971 	bl	8000618 <__aeabi_dmul>
 800c336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c33a:	e7c4      	b.n	800c2c6 <_dtoa_r+0x546>
 800c33c:	08010968 	.word	0x08010968
 800c340:	08010940 	.word	0x08010940
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	40240000 	.word	0x40240000
 800c34c:	401c0000 	.word	0x401c0000
 800c350:	40140000 	.word	0x40140000
 800c354:	3fe00000 	.word	0x3fe00000
 800c358:	4631      	mov	r1, r6
 800c35a:	4628      	mov	r0, r5
 800c35c:	f7f4 f95c 	bl	8000618 <__aeabi_dmul>
 800c360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c364:	9415      	str	r4, [sp, #84]	@ 0x54
 800c366:	4656      	mov	r6, sl
 800c368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36c:	f7f4 fc04 	bl	8000b78 <__aeabi_d2iz>
 800c370:	4605      	mov	r5, r0
 800c372:	f7f4 f8e7 	bl	8000544 <__aeabi_i2d>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37e:	f7f3 ff93 	bl	80002a8 <__aeabi_dsub>
 800c382:	3530      	adds	r5, #48	@ 0x30
 800c384:	f806 5b01 	strb.w	r5, [r6], #1
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	42a6      	cmp	r6, r4
 800c38e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c392:	f04f 0200 	mov.w	r2, #0
 800c396:	d124      	bne.n	800c3e2 <_dtoa_r+0x662>
 800c398:	4bac      	ldr	r3, [pc, #688]	@ (800c64c <_dtoa_r+0x8cc>)
 800c39a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c39e:	f7f3 ff85 	bl	80002ac <__adddf3>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3aa:	f7f4 fbc5 	bl	8000b38 <__aeabi_dcmpgt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d145      	bne.n	800c43e <_dtoa_r+0x6be>
 800c3b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3b6:	49a5      	ldr	r1, [pc, #660]	@ (800c64c <_dtoa_r+0x8cc>)
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	f7f3 ff75 	bl	80002a8 <__aeabi_dsub>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3c6:	f7f4 fb99 	bl	8000afc <__aeabi_dcmplt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	f43f aef5 	beq.w	800c1ba <_dtoa_r+0x43a>
 800c3d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c3d2:	1e73      	subs	r3, r6, #1
 800c3d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c3d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3da:	2b30      	cmp	r3, #48	@ 0x30
 800c3dc:	d0f8      	beq.n	800c3d0 <_dtoa_r+0x650>
 800c3de:	9f04      	ldr	r7, [sp, #16]
 800c3e0:	e73e      	b.n	800c260 <_dtoa_r+0x4e0>
 800c3e2:	4b9b      	ldr	r3, [pc, #620]	@ (800c650 <_dtoa_r+0x8d0>)
 800c3e4:	f7f4 f918 	bl	8000618 <__aeabi_dmul>
 800c3e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3ec:	e7bc      	b.n	800c368 <_dtoa_r+0x5e8>
 800c3ee:	d10c      	bne.n	800c40a <_dtoa_r+0x68a>
 800c3f0:	4b98      	ldr	r3, [pc, #608]	@ (800c654 <_dtoa_r+0x8d4>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3f8:	f7f4 f90e 	bl	8000618 <__aeabi_dmul>
 800c3fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c400:	f7f4 fb90 	bl	8000b24 <__aeabi_dcmpge>
 800c404:	2800      	cmp	r0, #0
 800c406:	f000 8157 	beq.w	800c6b8 <_dtoa_r+0x938>
 800c40a:	2400      	movs	r4, #0
 800c40c:	4625      	mov	r5, r4
 800c40e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c410:	43db      	mvns	r3, r3
 800c412:	9304      	str	r3, [sp, #16]
 800c414:	4656      	mov	r6, sl
 800c416:	2700      	movs	r7, #0
 800c418:	4621      	mov	r1, r4
 800c41a:	4658      	mov	r0, fp
 800c41c:	f000 fe8e 	bl	800d13c <_Bfree>
 800c420:	2d00      	cmp	r5, #0
 800c422:	d0dc      	beq.n	800c3de <_dtoa_r+0x65e>
 800c424:	b12f      	cbz	r7, 800c432 <_dtoa_r+0x6b2>
 800c426:	42af      	cmp	r7, r5
 800c428:	d003      	beq.n	800c432 <_dtoa_r+0x6b2>
 800c42a:	4639      	mov	r1, r7
 800c42c:	4658      	mov	r0, fp
 800c42e:	f000 fe85 	bl	800d13c <_Bfree>
 800c432:	4629      	mov	r1, r5
 800c434:	4658      	mov	r0, fp
 800c436:	f000 fe81 	bl	800d13c <_Bfree>
 800c43a:	e7d0      	b.n	800c3de <_dtoa_r+0x65e>
 800c43c:	9704      	str	r7, [sp, #16]
 800c43e:	4633      	mov	r3, r6
 800c440:	461e      	mov	r6, r3
 800c442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c446:	2a39      	cmp	r2, #57	@ 0x39
 800c448:	d107      	bne.n	800c45a <_dtoa_r+0x6da>
 800c44a:	459a      	cmp	sl, r3
 800c44c:	d1f8      	bne.n	800c440 <_dtoa_r+0x6c0>
 800c44e:	9a04      	ldr	r2, [sp, #16]
 800c450:	3201      	adds	r2, #1
 800c452:	9204      	str	r2, [sp, #16]
 800c454:	2230      	movs	r2, #48	@ 0x30
 800c456:	f88a 2000 	strb.w	r2, [sl]
 800c45a:	781a      	ldrb	r2, [r3, #0]
 800c45c:	3201      	adds	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]
 800c460:	e7bd      	b.n	800c3de <_dtoa_r+0x65e>
 800c462:	4b7b      	ldr	r3, [pc, #492]	@ (800c650 <_dtoa_r+0x8d0>)
 800c464:	2200      	movs	r2, #0
 800c466:	f7f4 f8d7 	bl	8000618 <__aeabi_dmul>
 800c46a:	2200      	movs	r2, #0
 800c46c:	2300      	movs	r3, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	f7f4 fb39 	bl	8000ae8 <__aeabi_dcmpeq>
 800c476:	2800      	cmp	r0, #0
 800c478:	f43f aebb 	beq.w	800c1f2 <_dtoa_r+0x472>
 800c47c:	e6f0      	b.n	800c260 <_dtoa_r+0x4e0>
 800c47e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c480:	2a00      	cmp	r2, #0
 800c482:	f000 80db 	beq.w	800c63c <_dtoa_r+0x8bc>
 800c486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c488:	2a01      	cmp	r2, #1
 800c48a:	f300 80bf 	bgt.w	800c60c <_dtoa_r+0x88c>
 800c48e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c490:	2a00      	cmp	r2, #0
 800c492:	f000 80b7 	beq.w	800c604 <_dtoa_r+0x884>
 800c496:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c49a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c49c:	4646      	mov	r6, r8
 800c49e:	9a08      	ldr	r2, [sp, #32]
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	441a      	add	r2, r3
 800c4a4:	4658      	mov	r0, fp
 800c4a6:	4498      	add	r8, r3
 800c4a8:	9208      	str	r2, [sp, #32]
 800c4aa:	f000 ff45 	bl	800d338 <__i2b>
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	b15e      	cbz	r6, 800c4ca <_dtoa_r+0x74a>
 800c4b2:	9b08      	ldr	r3, [sp, #32]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	dd08      	ble.n	800c4ca <_dtoa_r+0x74a>
 800c4b8:	42b3      	cmp	r3, r6
 800c4ba:	9a08      	ldr	r2, [sp, #32]
 800c4bc:	bfa8      	it	ge
 800c4be:	4633      	movge	r3, r6
 800c4c0:	eba8 0803 	sub.w	r8, r8, r3
 800c4c4:	1af6      	subs	r6, r6, r3
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	9308      	str	r3, [sp, #32]
 800c4ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4cc:	b1f3      	cbz	r3, 800c50c <_dtoa_r+0x78c>
 800c4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 80b7 	beq.w	800c644 <_dtoa_r+0x8c4>
 800c4d6:	b18c      	cbz	r4, 800c4fc <_dtoa_r+0x77c>
 800c4d8:	4629      	mov	r1, r5
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4658      	mov	r0, fp
 800c4de:	f000 ffeb 	bl	800d4b8 <__pow5mult>
 800c4e2:	464a      	mov	r2, r9
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	4658      	mov	r0, fp
 800c4ea:	f000 ff3b 	bl	800d364 <__multiply>
 800c4ee:	4649      	mov	r1, r9
 800c4f0:	9004      	str	r0, [sp, #16]
 800c4f2:	4658      	mov	r0, fp
 800c4f4:	f000 fe22 	bl	800d13c <_Bfree>
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	4699      	mov	r9, r3
 800c4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fe:	1b1a      	subs	r2, r3, r4
 800c500:	d004      	beq.n	800c50c <_dtoa_r+0x78c>
 800c502:	4649      	mov	r1, r9
 800c504:	4658      	mov	r0, fp
 800c506:	f000 ffd7 	bl	800d4b8 <__pow5mult>
 800c50a:	4681      	mov	r9, r0
 800c50c:	2101      	movs	r1, #1
 800c50e:	4658      	mov	r0, fp
 800c510:	f000 ff12 	bl	800d338 <__i2b>
 800c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c516:	4604      	mov	r4, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 81cf 	beq.w	800c8bc <_dtoa_r+0xb3c>
 800c51e:	461a      	mov	r2, r3
 800c520:	4601      	mov	r1, r0
 800c522:	4658      	mov	r0, fp
 800c524:	f000 ffc8 	bl	800d4b8 <__pow5mult>
 800c528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	4604      	mov	r4, r0
 800c52e:	f300 8095 	bgt.w	800c65c <_dtoa_r+0x8dc>
 800c532:	9b02      	ldr	r3, [sp, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f040 8087 	bne.w	800c648 <_dtoa_r+0x8c8>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c540:	2b00      	cmp	r3, #0
 800c542:	f040 8089 	bne.w	800c658 <_dtoa_r+0x8d8>
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c54c:	0d1b      	lsrs	r3, r3, #20
 800c54e:	051b      	lsls	r3, r3, #20
 800c550:	b12b      	cbz	r3, 800c55e <_dtoa_r+0x7de>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	3301      	adds	r3, #1
 800c556:	9308      	str	r3, [sp, #32]
 800c558:	f108 0801 	add.w	r8, r8, #1
 800c55c:	2301      	movs	r3, #1
 800c55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 81b0 	beq.w	800c8c8 <_dtoa_r+0xb48>
 800c568:	6923      	ldr	r3, [r4, #16]
 800c56a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c56e:	6918      	ldr	r0, [r3, #16]
 800c570:	f000 fe96 	bl	800d2a0 <__hi0bits>
 800c574:	f1c0 0020 	rsb	r0, r0, #32
 800c578:	9b08      	ldr	r3, [sp, #32]
 800c57a:	4418      	add	r0, r3
 800c57c:	f010 001f 	ands.w	r0, r0, #31
 800c580:	d077      	beq.n	800c672 <_dtoa_r+0x8f2>
 800c582:	f1c0 0320 	rsb	r3, r0, #32
 800c586:	2b04      	cmp	r3, #4
 800c588:	dd6b      	ble.n	800c662 <_dtoa_r+0x8e2>
 800c58a:	9b08      	ldr	r3, [sp, #32]
 800c58c:	f1c0 001c 	rsb	r0, r0, #28
 800c590:	4403      	add	r3, r0
 800c592:	4480      	add	r8, r0
 800c594:	4406      	add	r6, r0
 800c596:	9308      	str	r3, [sp, #32]
 800c598:	f1b8 0f00 	cmp.w	r8, #0
 800c59c:	dd05      	ble.n	800c5aa <_dtoa_r+0x82a>
 800c59e:	4649      	mov	r1, r9
 800c5a0:	4642      	mov	r2, r8
 800c5a2:	4658      	mov	r0, fp
 800c5a4:	f000 ffe2 	bl	800d56c <__lshift>
 800c5a8:	4681      	mov	r9, r0
 800c5aa:	9b08      	ldr	r3, [sp, #32]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd05      	ble.n	800c5bc <_dtoa_r+0x83c>
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	4658      	mov	r0, fp
 800c5b6:	f000 ffd9 	bl	800d56c <__lshift>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d059      	beq.n	800c676 <_dtoa_r+0x8f6>
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	f001 f83d 	bl	800d644 <__mcmp>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	da53      	bge.n	800c676 <_dtoa_r+0x8f6>
 800c5ce:	1e7b      	subs	r3, r7, #1
 800c5d0:	9304      	str	r3, [sp, #16]
 800c5d2:	4649      	mov	r1, r9
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	220a      	movs	r2, #10
 800c5d8:	4658      	mov	r0, fp
 800c5da:	f000 fdd1 	bl	800d180 <__multadd>
 800c5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5e0:	4681      	mov	r9, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 8172 	beq.w	800c8cc <_dtoa_r+0xb4c>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	220a      	movs	r2, #10
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	f000 fdc6 	bl	800d180 <__multadd>
 800c5f4:	9b00      	ldr	r3, [sp, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	dc67      	bgt.n	800c6cc <_dtoa_r+0x94c>
 800c5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	dc41      	bgt.n	800c686 <_dtoa_r+0x906>
 800c602:	e063      	b.n	800c6cc <_dtoa_r+0x94c>
 800c604:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c606:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c60a:	e746      	b.n	800c49a <_dtoa_r+0x71a>
 800c60c:	9b07      	ldr	r3, [sp, #28]
 800c60e:	1e5c      	subs	r4, r3, #1
 800c610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c612:	42a3      	cmp	r3, r4
 800c614:	bfbf      	itttt	lt
 800c616:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c618:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c61a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c61c:	1ae3      	sublt	r3, r4, r3
 800c61e:	bfb4      	ite	lt
 800c620:	18d2      	addlt	r2, r2, r3
 800c622:	1b1c      	subge	r4, r3, r4
 800c624:	9b07      	ldr	r3, [sp, #28]
 800c626:	bfbc      	itt	lt
 800c628:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c62a:	2400      	movlt	r4, #0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	bfb5      	itete	lt
 800c630:	eba8 0603 	sublt.w	r6, r8, r3
 800c634:	9b07      	ldrge	r3, [sp, #28]
 800c636:	2300      	movlt	r3, #0
 800c638:	4646      	movge	r6, r8
 800c63a:	e730      	b.n	800c49e <_dtoa_r+0x71e>
 800c63c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c63e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c640:	4646      	mov	r6, r8
 800c642:	e735      	b.n	800c4b0 <_dtoa_r+0x730>
 800c644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c646:	e75c      	b.n	800c502 <_dtoa_r+0x782>
 800c648:	2300      	movs	r3, #0
 800c64a:	e788      	b.n	800c55e <_dtoa_r+0x7de>
 800c64c:	3fe00000 	.word	0x3fe00000
 800c650:	40240000 	.word	0x40240000
 800c654:	40140000 	.word	0x40140000
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	e780      	b.n	800c55e <_dtoa_r+0x7de>
 800c65c:	2300      	movs	r3, #0
 800c65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c660:	e782      	b.n	800c568 <_dtoa_r+0x7e8>
 800c662:	d099      	beq.n	800c598 <_dtoa_r+0x818>
 800c664:	9a08      	ldr	r2, [sp, #32]
 800c666:	331c      	adds	r3, #28
 800c668:	441a      	add	r2, r3
 800c66a:	4498      	add	r8, r3
 800c66c:	441e      	add	r6, r3
 800c66e:	9208      	str	r2, [sp, #32]
 800c670:	e792      	b.n	800c598 <_dtoa_r+0x818>
 800c672:	4603      	mov	r3, r0
 800c674:	e7f6      	b.n	800c664 <_dtoa_r+0x8e4>
 800c676:	9b07      	ldr	r3, [sp, #28]
 800c678:	9704      	str	r7, [sp, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	dc20      	bgt.n	800c6c0 <_dtoa_r+0x940>
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c682:	2b02      	cmp	r3, #2
 800c684:	dd1e      	ble.n	800c6c4 <_dtoa_r+0x944>
 800c686:	9b00      	ldr	r3, [sp, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f47f aec0 	bne.w	800c40e <_dtoa_r+0x68e>
 800c68e:	4621      	mov	r1, r4
 800c690:	2205      	movs	r2, #5
 800c692:	4658      	mov	r0, fp
 800c694:	f000 fd74 	bl	800d180 <__multadd>
 800c698:	4601      	mov	r1, r0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4648      	mov	r0, r9
 800c69e:	f000 ffd1 	bl	800d644 <__mcmp>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	f77f aeb3 	ble.w	800c40e <_dtoa_r+0x68e>
 800c6a8:	4656      	mov	r6, sl
 800c6aa:	2331      	movs	r3, #49	@ 0x31
 800c6ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c6b0:	9b04      	ldr	r3, [sp, #16]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	e6ae      	b.n	800c416 <_dtoa_r+0x696>
 800c6b8:	9c07      	ldr	r4, [sp, #28]
 800c6ba:	9704      	str	r7, [sp, #16]
 800c6bc:	4625      	mov	r5, r4
 800c6be:	e7f3      	b.n	800c6a8 <_dtoa_r+0x928>
 800c6c0:	9b07      	ldr	r3, [sp, #28]
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 8104 	beq.w	800c8d4 <_dtoa_r+0xb54>
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	dd05      	ble.n	800c6dc <_dtoa_r+0x95c>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4632      	mov	r2, r6
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f000 ff49 	bl	800d56c <__lshift>
 800c6da:	4605      	mov	r5, r0
 800c6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d05a      	beq.n	800c798 <_dtoa_r+0xa18>
 800c6e2:	6869      	ldr	r1, [r5, #4]
 800c6e4:	4658      	mov	r0, fp
 800c6e6:	f000 fce9 	bl	800d0bc <_Balloc>
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	b928      	cbnz	r0, 800c6fa <_dtoa_r+0x97a>
 800c6ee:	4b84      	ldr	r3, [pc, #528]	@ (800c900 <_dtoa_r+0xb80>)
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6f6:	f7ff bb5a 	b.w	800bdae <_dtoa_r+0x2e>
 800c6fa:	692a      	ldr	r2, [r5, #16]
 800c6fc:	3202      	adds	r2, #2
 800c6fe:	0092      	lsls	r2, r2, #2
 800c700:	f105 010c 	add.w	r1, r5, #12
 800c704:	300c      	adds	r0, #12
 800c706:	f7ff fa8a 	bl	800bc1e <memcpy>
 800c70a:	2201      	movs	r2, #1
 800c70c:	4631      	mov	r1, r6
 800c70e:	4658      	mov	r0, fp
 800c710:	f000 ff2c 	bl	800d56c <__lshift>
 800c714:	f10a 0301 	add.w	r3, sl, #1
 800c718:	9307      	str	r3, [sp, #28]
 800c71a:	9b00      	ldr	r3, [sp, #0]
 800c71c:	4453      	add	r3, sl
 800c71e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c720:	9b02      	ldr	r3, [sp, #8]
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	462f      	mov	r7, r5
 800c728:	930a      	str	r3, [sp, #40]	@ 0x28
 800c72a:	4605      	mov	r5, r0
 800c72c:	9b07      	ldr	r3, [sp, #28]
 800c72e:	4621      	mov	r1, r4
 800c730:	3b01      	subs	r3, #1
 800c732:	4648      	mov	r0, r9
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	f7ff fa99 	bl	800bc6c <quorem>
 800c73a:	4639      	mov	r1, r7
 800c73c:	9002      	str	r0, [sp, #8]
 800c73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c742:	4648      	mov	r0, r9
 800c744:	f000 ff7e 	bl	800d644 <__mcmp>
 800c748:	462a      	mov	r2, r5
 800c74a:	9008      	str	r0, [sp, #32]
 800c74c:	4621      	mov	r1, r4
 800c74e:	4658      	mov	r0, fp
 800c750:	f000 ff94 	bl	800d67c <__mdiff>
 800c754:	68c2      	ldr	r2, [r0, #12]
 800c756:	4606      	mov	r6, r0
 800c758:	bb02      	cbnz	r2, 800c79c <_dtoa_r+0xa1c>
 800c75a:	4601      	mov	r1, r0
 800c75c:	4648      	mov	r0, r9
 800c75e:	f000 ff71 	bl	800d644 <__mcmp>
 800c762:	4602      	mov	r2, r0
 800c764:	4631      	mov	r1, r6
 800c766:	4658      	mov	r0, fp
 800c768:	920e      	str	r2, [sp, #56]	@ 0x38
 800c76a:	f000 fce7 	bl	800d13c <_Bfree>
 800c76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c770:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c772:	9e07      	ldr	r6, [sp, #28]
 800c774:	ea43 0102 	orr.w	r1, r3, r2
 800c778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c77a:	4319      	orrs	r1, r3
 800c77c:	d110      	bne.n	800c7a0 <_dtoa_r+0xa20>
 800c77e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c782:	d029      	beq.n	800c7d8 <_dtoa_r+0xa58>
 800c784:	9b08      	ldr	r3, [sp, #32]
 800c786:	2b00      	cmp	r3, #0
 800c788:	dd02      	ble.n	800c790 <_dtoa_r+0xa10>
 800c78a:	9b02      	ldr	r3, [sp, #8]
 800c78c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c790:	9b00      	ldr	r3, [sp, #0]
 800c792:	f883 8000 	strb.w	r8, [r3]
 800c796:	e63f      	b.n	800c418 <_dtoa_r+0x698>
 800c798:	4628      	mov	r0, r5
 800c79a:	e7bb      	b.n	800c714 <_dtoa_r+0x994>
 800c79c:	2201      	movs	r2, #1
 800c79e:	e7e1      	b.n	800c764 <_dtoa_r+0x9e4>
 800c7a0:	9b08      	ldr	r3, [sp, #32]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	db04      	blt.n	800c7b0 <_dtoa_r+0xa30>
 800c7a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7ac:	430b      	orrs	r3, r1
 800c7ae:	d120      	bne.n	800c7f2 <_dtoa_r+0xa72>
 800c7b0:	2a00      	cmp	r2, #0
 800c7b2:	dded      	ble.n	800c790 <_dtoa_r+0xa10>
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	f000 fed7 	bl	800d56c <__lshift>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	f000 ff3f 	bl	800d644 <__mcmp>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	dc03      	bgt.n	800c7d2 <_dtoa_r+0xa52>
 800c7ca:	d1e1      	bne.n	800c790 <_dtoa_r+0xa10>
 800c7cc:	f018 0f01 	tst.w	r8, #1
 800c7d0:	d0de      	beq.n	800c790 <_dtoa_r+0xa10>
 800c7d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7d6:	d1d8      	bne.n	800c78a <_dtoa_r+0xa0a>
 800c7d8:	9a00      	ldr	r2, [sp, #0]
 800c7da:	2339      	movs	r3, #57	@ 0x39
 800c7dc:	7013      	strb	r3, [r2, #0]
 800c7de:	4633      	mov	r3, r6
 800c7e0:	461e      	mov	r6, r3
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7e8:	2a39      	cmp	r2, #57	@ 0x39
 800c7ea:	d052      	beq.n	800c892 <_dtoa_r+0xb12>
 800c7ec:	3201      	adds	r2, #1
 800c7ee:	701a      	strb	r2, [r3, #0]
 800c7f0:	e612      	b.n	800c418 <_dtoa_r+0x698>
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	dd07      	ble.n	800c806 <_dtoa_r+0xa86>
 800c7f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7fa:	d0ed      	beq.n	800c7d8 <_dtoa_r+0xa58>
 800c7fc:	9a00      	ldr	r2, [sp, #0]
 800c7fe:	f108 0301 	add.w	r3, r8, #1
 800c802:	7013      	strb	r3, [r2, #0]
 800c804:	e608      	b.n	800c418 <_dtoa_r+0x698>
 800c806:	9b07      	ldr	r3, [sp, #28]
 800c808:	9a07      	ldr	r2, [sp, #28]
 800c80a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c810:	4293      	cmp	r3, r2
 800c812:	d028      	beq.n	800c866 <_dtoa_r+0xae6>
 800c814:	4649      	mov	r1, r9
 800c816:	2300      	movs	r3, #0
 800c818:	220a      	movs	r2, #10
 800c81a:	4658      	mov	r0, fp
 800c81c:	f000 fcb0 	bl	800d180 <__multadd>
 800c820:	42af      	cmp	r7, r5
 800c822:	4681      	mov	r9, r0
 800c824:	f04f 0300 	mov.w	r3, #0
 800c828:	f04f 020a 	mov.w	r2, #10
 800c82c:	4639      	mov	r1, r7
 800c82e:	4658      	mov	r0, fp
 800c830:	d107      	bne.n	800c842 <_dtoa_r+0xac2>
 800c832:	f000 fca5 	bl	800d180 <__multadd>
 800c836:	4607      	mov	r7, r0
 800c838:	4605      	mov	r5, r0
 800c83a:	9b07      	ldr	r3, [sp, #28]
 800c83c:	3301      	adds	r3, #1
 800c83e:	9307      	str	r3, [sp, #28]
 800c840:	e774      	b.n	800c72c <_dtoa_r+0x9ac>
 800c842:	f000 fc9d 	bl	800d180 <__multadd>
 800c846:	4629      	mov	r1, r5
 800c848:	4607      	mov	r7, r0
 800c84a:	2300      	movs	r3, #0
 800c84c:	220a      	movs	r2, #10
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 fc96 	bl	800d180 <__multadd>
 800c854:	4605      	mov	r5, r0
 800c856:	e7f0      	b.n	800c83a <_dtoa_r+0xaba>
 800c858:	9b00      	ldr	r3, [sp, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bfcc      	ite	gt
 800c85e:	461e      	movgt	r6, r3
 800c860:	2601      	movle	r6, #1
 800c862:	4456      	add	r6, sl
 800c864:	2700      	movs	r7, #0
 800c866:	4649      	mov	r1, r9
 800c868:	2201      	movs	r2, #1
 800c86a:	4658      	mov	r0, fp
 800c86c:	f000 fe7e 	bl	800d56c <__lshift>
 800c870:	4621      	mov	r1, r4
 800c872:	4681      	mov	r9, r0
 800c874:	f000 fee6 	bl	800d644 <__mcmp>
 800c878:	2800      	cmp	r0, #0
 800c87a:	dcb0      	bgt.n	800c7de <_dtoa_r+0xa5e>
 800c87c:	d102      	bne.n	800c884 <_dtoa_r+0xb04>
 800c87e:	f018 0f01 	tst.w	r8, #1
 800c882:	d1ac      	bne.n	800c7de <_dtoa_r+0xa5e>
 800c884:	4633      	mov	r3, r6
 800c886:	461e      	mov	r6, r3
 800c888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c88c:	2a30      	cmp	r2, #48	@ 0x30
 800c88e:	d0fa      	beq.n	800c886 <_dtoa_r+0xb06>
 800c890:	e5c2      	b.n	800c418 <_dtoa_r+0x698>
 800c892:	459a      	cmp	sl, r3
 800c894:	d1a4      	bne.n	800c7e0 <_dtoa_r+0xa60>
 800c896:	9b04      	ldr	r3, [sp, #16]
 800c898:	3301      	adds	r3, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	2331      	movs	r3, #49	@ 0x31
 800c89e:	f88a 3000 	strb.w	r3, [sl]
 800c8a2:	e5b9      	b.n	800c418 <_dtoa_r+0x698>
 800c8a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c904 <_dtoa_r+0xb84>
 800c8aa:	b11b      	cbz	r3, 800c8b4 <_dtoa_r+0xb34>
 800c8ac:	f10a 0308 	add.w	r3, sl, #8
 800c8b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c8b2:	6013      	str	r3, [r2, #0]
 800c8b4:	4650      	mov	r0, sl
 800c8b6:	b019      	add	sp, #100	@ 0x64
 800c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	f77f ae37 	ble.w	800c532 <_dtoa_r+0x7b2>
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	e655      	b.n	800c578 <_dtoa_r+0x7f8>
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f77f aed6 	ble.w	800c680 <_dtoa_r+0x900>
 800c8d4:	4656      	mov	r6, sl
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4648      	mov	r0, r9
 800c8da:	f7ff f9c7 	bl	800bc6c <quorem>
 800c8de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c8e2:	f806 8b01 	strb.w	r8, [r6], #1
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	eba6 020a 	sub.w	r2, r6, sl
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	ddb3      	ble.n	800c858 <_dtoa_r+0xad8>
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	220a      	movs	r2, #10
 800c8f6:	4658      	mov	r0, fp
 800c8f8:	f000 fc42 	bl	800d180 <__multadd>
 800c8fc:	4681      	mov	r9, r0
 800c8fe:	e7ea      	b.n	800c8d6 <_dtoa_r+0xb56>
 800c900:	08010868 	.word	0x08010868
 800c904:	080107ec 	.word	0x080107ec

0800c908 <_free_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4605      	mov	r5, r0
 800c90c:	2900      	cmp	r1, #0
 800c90e:	d041      	beq.n	800c994 <_free_r+0x8c>
 800c910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c914:	1f0c      	subs	r4, r1, #4
 800c916:	2b00      	cmp	r3, #0
 800c918:	bfb8      	it	lt
 800c91a:	18e4      	addlt	r4, r4, r3
 800c91c:	f7fc fc60 	bl	80091e0 <__malloc_lock>
 800c920:	4a1d      	ldr	r2, [pc, #116]	@ (800c998 <_free_r+0x90>)
 800c922:	6813      	ldr	r3, [r2, #0]
 800c924:	b933      	cbnz	r3, 800c934 <_free_r+0x2c>
 800c926:	6063      	str	r3, [r4, #4]
 800c928:	6014      	str	r4, [r2, #0]
 800c92a:	4628      	mov	r0, r5
 800c92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c930:	f7fc bc5c 	b.w	80091ec <__malloc_unlock>
 800c934:	42a3      	cmp	r3, r4
 800c936:	d908      	bls.n	800c94a <_free_r+0x42>
 800c938:	6820      	ldr	r0, [r4, #0]
 800c93a:	1821      	adds	r1, r4, r0
 800c93c:	428b      	cmp	r3, r1
 800c93e:	bf01      	itttt	eq
 800c940:	6819      	ldreq	r1, [r3, #0]
 800c942:	685b      	ldreq	r3, [r3, #4]
 800c944:	1809      	addeq	r1, r1, r0
 800c946:	6021      	streq	r1, [r4, #0]
 800c948:	e7ed      	b.n	800c926 <_free_r+0x1e>
 800c94a:	461a      	mov	r2, r3
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	b10b      	cbz	r3, 800c954 <_free_r+0x4c>
 800c950:	42a3      	cmp	r3, r4
 800c952:	d9fa      	bls.n	800c94a <_free_r+0x42>
 800c954:	6811      	ldr	r1, [r2, #0]
 800c956:	1850      	adds	r0, r2, r1
 800c958:	42a0      	cmp	r0, r4
 800c95a:	d10b      	bne.n	800c974 <_free_r+0x6c>
 800c95c:	6820      	ldr	r0, [r4, #0]
 800c95e:	4401      	add	r1, r0
 800c960:	1850      	adds	r0, r2, r1
 800c962:	4283      	cmp	r3, r0
 800c964:	6011      	str	r1, [r2, #0]
 800c966:	d1e0      	bne.n	800c92a <_free_r+0x22>
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	6053      	str	r3, [r2, #4]
 800c96e:	4408      	add	r0, r1
 800c970:	6010      	str	r0, [r2, #0]
 800c972:	e7da      	b.n	800c92a <_free_r+0x22>
 800c974:	d902      	bls.n	800c97c <_free_r+0x74>
 800c976:	230c      	movs	r3, #12
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	e7d6      	b.n	800c92a <_free_r+0x22>
 800c97c:	6820      	ldr	r0, [r4, #0]
 800c97e:	1821      	adds	r1, r4, r0
 800c980:	428b      	cmp	r3, r1
 800c982:	bf04      	itt	eq
 800c984:	6819      	ldreq	r1, [r3, #0]
 800c986:	685b      	ldreq	r3, [r3, #4]
 800c988:	6063      	str	r3, [r4, #4]
 800c98a:	bf04      	itt	eq
 800c98c:	1809      	addeq	r1, r1, r0
 800c98e:	6021      	streq	r1, [r4, #0]
 800c990:	6054      	str	r4, [r2, #4]
 800c992:	e7ca      	b.n	800c92a <_free_r+0x22>
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	200096f8 	.word	0x200096f8

0800c99c <rshift>:
 800c99c:	6903      	ldr	r3, [r0, #16]
 800c99e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9aa:	f100 0414 	add.w	r4, r0, #20
 800c9ae:	dd45      	ble.n	800ca3c <rshift+0xa0>
 800c9b0:	f011 011f 	ands.w	r1, r1, #31
 800c9b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9bc:	d10c      	bne.n	800c9d8 <rshift+0x3c>
 800c9be:	f100 0710 	add.w	r7, r0, #16
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	42b1      	cmp	r1, r6
 800c9c6:	d334      	bcc.n	800ca32 <rshift+0x96>
 800c9c8:	1a9b      	subs	r3, r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	1eea      	subs	r2, r5, #3
 800c9ce:	4296      	cmp	r6, r2
 800c9d0:	bf38      	it	cc
 800c9d2:	2300      	movcc	r3, #0
 800c9d4:	4423      	add	r3, r4
 800c9d6:	e015      	b.n	800ca04 <rshift+0x68>
 800c9d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9dc:	f1c1 0820 	rsb	r8, r1, #32
 800c9e0:	40cf      	lsrs	r7, r1
 800c9e2:	f105 0e04 	add.w	lr, r5, #4
 800c9e6:	46a1      	mov	r9, r4
 800c9e8:	4576      	cmp	r6, lr
 800c9ea:	46f4      	mov	ip, lr
 800c9ec:	d815      	bhi.n	800ca1a <rshift+0x7e>
 800c9ee:	1a9a      	subs	r2, r3, r2
 800c9f0:	0092      	lsls	r2, r2, #2
 800c9f2:	3a04      	subs	r2, #4
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	42ae      	cmp	r6, r5
 800c9f8:	bf38      	it	cc
 800c9fa:	2200      	movcc	r2, #0
 800c9fc:	18a3      	adds	r3, r4, r2
 800c9fe:	50a7      	str	r7, [r4, r2]
 800ca00:	b107      	cbz	r7, 800ca04 <rshift+0x68>
 800ca02:	3304      	adds	r3, #4
 800ca04:	1b1a      	subs	r2, r3, r4
 800ca06:	42a3      	cmp	r3, r4
 800ca08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca0c:	bf08      	it	eq
 800ca0e:	2300      	moveq	r3, #0
 800ca10:	6102      	str	r2, [r0, #16]
 800ca12:	bf08      	it	eq
 800ca14:	6143      	streq	r3, [r0, #20]
 800ca16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1a:	f8dc c000 	ldr.w	ip, [ip]
 800ca1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca22:	ea4c 0707 	orr.w	r7, ip, r7
 800ca26:	f849 7b04 	str.w	r7, [r9], #4
 800ca2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca2e:	40cf      	lsrs	r7, r1
 800ca30:	e7da      	b.n	800c9e8 <rshift+0x4c>
 800ca32:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca36:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca3a:	e7c3      	b.n	800c9c4 <rshift+0x28>
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	e7e1      	b.n	800ca04 <rshift+0x68>

0800ca40 <__hexdig_fun>:
 800ca40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d802      	bhi.n	800ca4e <__hexdig_fun+0xe>
 800ca48:	3820      	subs	r0, #32
 800ca4a:	b2c0      	uxtb	r0, r0
 800ca4c:	4770      	bx	lr
 800ca4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ca52:	2b05      	cmp	r3, #5
 800ca54:	d801      	bhi.n	800ca5a <__hexdig_fun+0x1a>
 800ca56:	3847      	subs	r0, #71	@ 0x47
 800ca58:	e7f7      	b.n	800ca4a <__hexdig_fun+0xa>
 800ca5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ca5e:	2b05      	cmp	r3, #5
 800ca60:	d801      	bhi.n	800ca66 <__hexdig_fun+0x26>
 800ca62:	3827      	subs	r0, #39	@ 0x27
 800ca64:	e7f1      	b.n	800ca4a <__hexdig_fun+0xa>
 800ca66:	2000      	movs	r0, #0
 800ca68:	4770      	bx	lr
	...

0800ca6c <__gethex>:
 800ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	b085      	sub	sp, #20
 800ca72:	468a      	mov	sl, r1
 800ca74:	9302      	str	r3, [sp, #8]
 800ca76:	680b      	ldr	r3, [r1, #0]
 800ca78:	9001      	str	r0, [sp, #4]
 800ca7a:	4690      	mov	r8, r2
 800ca7c:	1c9c      	adds	r4, r3, #2
 800ca7e:	46a1      	mov	r9, r4
 800ca80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ca84:	2830      	cmp	r0, #48	@ 0x30
 800ca86:	d0fa      	beq.n	800ca7e <__gethex+0x12>
 800ca88:	eba9 0303 	sub.w	r3, r9, r3
 800ca8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ca90:	f7ff ffd6 	bl	800ca40 <__hexdig_fun>
 800ca94:	4605      	mov	r5, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d168      	bne.n	800cb6c <__gethex+0x100>
 800ca9a:	49a0      	ldr	r1, [pc, #640]	@ (800cd1c <__gethex+0x2b0>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	4648      	mov	r0, r9
 800caa0:	f7fe fa79 	bl	800af96 <strncmp>
 800caa4:	4607      	mov	r7, r0
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d167      	bne.n	800cb7a <__gethex+0x10e>
 800caaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800caae:	4626      	mov	r6, r4
 800cab0:	f7ff ffc6 	bl	800ca40 <__hexdig_fun>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d062      	beq.n	800cb7e <__gethex+0x112>
 800cab8:	4623      	mov	r3, r4
 800caba:	7818      	ldrb	r0, [r3, #0]
 800cabc:	2830      	cmp	r0, #48	@ 0x30
 800cabe:	4699      	mov	r9, r3
 800cac0:	f103 0301 	add.w	r3, r3, #1
 800cac4:	d0f9      	beq.n	800caba <__gethex+0x4e>
 800cac6:	f7ff ffbb 	bl	800ca40 <__hexdig_fun>
 800caca:	fab0 f580 	clz	r5, r0
 800cace:	096d      	lsrs	r5, r5, #5
 800cad0:	f04f 0b01 	mov.w	fp, #1
 800cad4:	464a      	mov	r2, r9
 800cad6:	4616      	mov	r6, r2
 800cad8:	3201      	adds	r2, #1
 800cada:	7830      	ldrb	r0, [r6, #0]
 800cadc:	f7ff ffb0 	bl	800ca40 <__hexdig_fun>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d1f8      	bne.n	800cad6 <__gethex+0x6a>
 800cae4:	498d      	ldr	r1, [pc, #564]	@ (800cd1c <__gethex+0x2b0>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	4630      	mov	r0, r6
 800caea:	f7fe fa54 	bl	800af96 <strncmp>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d13f      	bne.n	800cb72 <__gethex+0x106>
 800caf2:	b944      	cbnz	r4, 800cb06 <__gethex+0x9a>
 800caf4:	1c74      	adds	r4, r6, #1
 800caf6:	4622      	mov	r2, r4
 800caf8:	4616      	mov	r6, r2
 800cafa:	3201      	adds	r2, #1
 800cafc:	7830      	ldrb	r0, [r6, #0]
 800cafe:	f7ff ff9f 	bl	800ca40 <__hexdig_fun>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d1f8      	bne.n	800caf8 <__gethex+0x8c>
 800cb06:	1ba4      	subs	r4, r4, r6
 800cb08:	00a7      	lsls	r7, r4, #2
 800cb0a:	7833      	ldrb	r3, [r6, #0]
 800cb0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cb10:	2b50      	cmp	r3, #80	@ 0x50
 800cb12:	d13e      	bne.n	800cb92 <__gethex+0x126>
 800cb14:	7873      	ldrb	r3, [r6, #1]
 800cb16:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb18:	d033      	beq.n	800cb82 <__gethex+0x116>
 800cb1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb1c:	d034      	beq.n	800cb88 <__gethex+0x11c>
 800cb1e:	1c71      	adds	r1, r6, #1
 800cb20:	2400      	movs	r4, #0
 800cb22:	7808      	ldrb	r0, [r1, #0]
 800cb24:	f7ff ff8c 	bl	800ca40 <__hexdig_fun>
 800cb28:	1e43      	subs	r3, r0, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b18      	cmp	r3, #24
 800cb2e:	d830      	bhi.n	800cb92 <__gethex+0x126>
 800cb30:	f1a0 0210 	sub.w	r2, r0, #16
 800cb34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb38:	f7ff ff82 	bl	800ca40 <__hexdig_fun>
 800cb3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb40:	fa5f fc8c 	uxtb.w	ip, ip
 800cb44:	f1bc 0f18 	cmp.w	ip, #24
 800cb48:	f04f 030a 	mov.w	r3, #10
 800cb4c:	d91e      	bls.n	800cb8c <__gethex+0x120>
 800cb4e:	b104      	cbz	r4, 800cb52 <__gethex+0xe6>
 800cb50:	4252      	negs	r2, r2
 800cb52:	4417      	add	r7, r2
 800cb54:	f8ca 1000 	str.w	r1, [sl]
 800cb58:	b1ed      	cbz	r5, 800cb96 <__gethex+0x12a>
 800cb5a:	f1bb 0f00 	cmp.w	fp, #0
 800cb5e:	bf0c      	ite	eq
 800cb60:	2506      	moveq	r5, #6
 800cb62:	2500      	movne	r5, #0
 800cb64:	4628      	mov	r0, r5
 800cb66:	b005      	add	sp, #20
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	462c      	mov	r4, r5
 800cb70:	e7b0      	b.n	800cad4 <__gethex+0x68>
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	d1c7      	bne.n	800cb06 <__gethex+0x9a>
 800cb76:	4627      	mov	r7, r4
 800cb78:	e7c7      	b.n	800cb0a <__gethex+0x9e>
 800cb7a:	464e      	mov	r6, r9
 800cb7c:	462f      	mov	r7, r5
 800cb7e:	2501      	movs	r5, #1
 800cb80:	e7c3      	b.n	800cb0a <__gethex+0x9e>
 800cb82:	2400      	movs	r4, #0
 800cb84:	1cb1      	adds	r1, r6, #2
 800cb86:	e7cc      	b.n	800cb22 <__gethex+0xb6>
 800cb88:	2401      	movs	r4, #1
 800cb8a:	e7fb      	b.n	800cb84 <__gethex+0x118>
 800cb8c:	fb03 0002 	mla	r0, r3, r2, r0
 800cb90:	e7ce      	b.n	800cb30 <__gethex+0xc4>
 800cb92:	4631      	mov	r1, r6
 800cb94:	e7de      	b.n	800cb54 <__gethex+0xe8>
 800cb96:	eba6 0309 	sub.w	r3, r6, r9
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	2b07      	cmp	r3, #7
 800cba0:	dc0a      	bgt.n	800cbb8 <__gethex+0x14c>
 800cba2:	9801      	ldr	r0, [sp, #4]
 800cba4:	f000 fa8a 	bl	800d0bc <_Balloc>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	b940      	cbnz	r0, 800cbbe <__gethex+0x152>
 800cbac:	4b5c      	ldr	r3, [pc, #368]	@ (800cd20 <__gethex+0x2b4>)
 800cbae:	4602      	mov	r2, r0
 800cbb0:	21e4      	movs	r1, #228	@ 0xe4
 800cbb2:	485c      	ldr	r0, [pc, #368]	@ (800cd24 <__gethex+0x2b8>)
 800cbb4:	f001 fd6a 	bl	800e68c <__assert_func>
 800cbb8:	3101      	adds	r1, #1
 800cbba:	105b      	asrs	r3, r3, #1
 800cbbc:	e7ef      	b.n	800cb9e <__gethex+0x132>
 800cbbe:	f100 0a14 	add.w	sl, r0, #20
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4655      	mov	r5, sl
 800cbc6:	469b      	mov	fp, r3
 800cbc8:	45b1      	cmp	r9, r6
 800cbca:	d337      	bcc.n	800cc3c <__gethex+0x1d0>
 800cbcc:	f845 bb04 	str.w	fp, [r5], #4
 800cbd0:	eba5 050a 	sub.w	r5, r5, sl
 800cbd4:	10ad      	asrs	r5, r5, #2
 800cbd6:	6125      	str	r5, [r4, #16]
 800cbd8:	4658      	mov	r0, fp
 800cbda:	f000 fb61 	bl	800d2a0 <__hi0bits>
 800cbde:	016d      	lsls	r5, r5, #5
 800cbe0:	f8d8 6000 	ldr.w	r6, [r8]
 800cbe4:	1a2d      	subs	r5, r5, r0
 800cbe6:	42b5      	cmp	r5, r6
 800cbe8:	dd54      	ble.n	800cc94 <__gethex+0x228>
 800cbea:	1bad      	subs	r5, r5, r6
 800cbec:	4629      	mov	r1, r5
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 fef5 	bl	800d9de <__any_on>
 800cbf4:	4681      	mov	r9, r0
 800cbf6:	b178      	cbz	r0, 800cc18 <__gethex+0x1ac>
 800cbf8:	1e6b      	subs	r3, r5, #1
 800cbfa:	1159      	asrs	r1, r3, #5
 800cbfc:	f003 021f 	and.w	r2, r3, #31
 800cc00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc04:	f04f 0901 	mov.w	r9, #1
 800cc08:	fa09 f202 	lsl.w	r2, r9, r2
 800cc0c:	420a      	tst	r2, r1
 800cc0e:	d003      	beq.n	800cc18 <__gethex+0x1ac>
 800cc10:	454b      	cmp	r3, r9
 800cc12:	dc36      	bgt.n	800cc82 <__gethex+0x216>
 800cc14:	f04f 0902 	mov.w	r9, #2
 800cc18:	4629      	mov	r1, r5
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7ff febe 	bl	800c99c <rshift>
 800cc20:	442f      	add	r7, r5
 800cc22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc26:	42bb      	cmp	r3, r7
 800cc28:	da42      	bge.n	800ccb0 <__gethex+0x244>
 800cc2a:	9801      	ldr	r0, [sp, #4]
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	f000 fa85 	bl	800d13c <_Bfree>
 800cc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc34:	2300      	movs	r3, #0
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	25a3      	movs	r5, #163	@ 0xa3
 800cc3a:	e793      	b.n	800cb64 <__gethex+0xf8>
 800cc3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cc40:	2a2e      	cmp	r2, #46	@ 0x2e
 800cc42:	d012      	beq.n	800cc6a <__gethex+0x1fe>
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d104      	bne.n	800cc52 <__gethex+0x1e6>
 800cc48:	f845 bb04 	str.w	fp, [r5], #4
 800cc4c:	f04f 0b00 	mov.w	fp, #0
 800cc50:	465b      	mov	r3, fp
 800cc52:	7830      	ldrb	r0, [r6, #0]
 800cc54:	9303      	str	r3, [sp, #12]
 800cc56:	f7ff fef3 	bl	800ca40 <__hexdig_fun>
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	f000 000f 	and.w	r0, r0, #15
 800cc60:	4098      	lsls	r0, r3
 800cc62:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc66:	3304      	adds	r3, #4
 800cc68:	e7ae      	b.n	800cbc8 <__gethex+0x15c>
 800cc6a:	45b1      	cmp	r9, r6
 800cc6c:	d8ea      	bhi.n	800cc44 <__gethex+0x1d8>
 800cc6e:	492b      	ldr	r1, [pc, #172]	@ (800cd1c <__gethex+0x2b0>)
 800cc70:	9303      	str	r3, [sp, #12]
 800cc72:	2201      	movs	r2, #1
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7fe f98e 	bl	800af96 <strncmp>
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d1e1      	bne.n	800cc44 <__gethex+0x1d8>
 800cc80:	e7a2      	b.n	800cbc8 <__gethex+0x15c>
 800cc82:	1ea9      	subs	r1, r5, #2
 800cc84:	4620      	mov	r0, r4
 800cc86:	f000 feaa 	bl	800d9de <__any_on>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d0c2      	beq.n	800cc14 <__gethex+0x1a8>
 800cc8e:	f04f 0903 	mov.w	r9, #3
 800cc92:	e7c1      	b.n	800cc18 <__gethex+0x1ac>
 800cc94:	da09      	bge.n	800ccaa <__gethex+0x23e>
 800cc96:	1b75      	subs	r5, r6, r5
 800cc98:	4621      	mov	r1, r4
 800cc9a:	9801      	ldr	r0, [sp, #4]
 800cc9c:	462a      	mov	r2, r5
 800cc9e:	f000 fc65 	bl	800d56c <__lshift>
 800cca2:	1b7f      	subs	r7, r7, r5
 800cca4:	4604      	mov	r4, r0
 800cca6:	f100 0a14 	add.w	sl, r0, #20
 800ccaa:	f04f 0900 	mov.w	r9, #0
 800ccae:	e7b8      	b.n	800cc22 <__gethex+0x1b6>
 800ccb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ccb4:	42bd      	cmp	r5, r7
 800ccb6:	dd6f      	ble.n	800cd98 <__gethex+0x32c>
 800ccb8:	1bed      	subs	r5, r5, r7
 800ccba:	42ae      	cmp	r6, r5
 800ccbc:	dc34      	bgt.n	800cd28 <__gethex+0x2bc>
 800ccbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d022      	beq.n	800cd0c <__gethex+0x2a0>
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d024      	beq.n	800cd14 <__gethex+0x2a8>
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d115      	bne.n	800ccfa <__gethex+0x28e>
 800ccce:	42ae      	cmp	r6, r5
 800ccd0:	d113      	bne.n	800ccfa <__gethex+0x28e>
 800ccd2:	2e01      	cmp	r6, #1
 800ccd4:	d10b      	bne.n	800ccee <__gethex+0x282>
 800ccd6:	9a02      	ldr	r2, [sp, #8]
 800ccd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	2301      	movs	r3, #1
 800cce0:	6123      	str	r3, [r4, #16]
 800cce2:	f8ca 3000 	str.w	r3, [sl]
 800cce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce8:	2562      	movs	r5, #98	@ 0x62
 800ccea:	601c      	str	r4, [r3, #0]
 800ccec:	e73a      	b.n	800cb64 <__gethex+0xf8>
 800ccee:	1e71      	subs	r1, r6, #1
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fe74 	bl	800d9de <__any_on>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d1ed      	bne.n	800ccd6 <__gethex+0x26a>
 800ccfa:	9801      	ldr	r0, [sp, #4]
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f000 fa1d 	bl	800d13c <_Bfree>
 800cd02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd04:	2300      	movs	r3, #0
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	2550      	movs	r5, #80	@ 0x50
 800cd0a:	e72b      	b.n	800cb64 <__gethex+0xf8>
 800cd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f3      	bne.n	800ccfa <__gethex+0x28e>
 800cd12:	e7e0      	b.n	800ccd6 <__gethex+0x26a>
 800cd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1dd      	bne.n	800ccd6 <__gethex+0x26a>
 800cd1a:	e7ee      	b.n	800ccfa <__gethex+0x28e>
 800cd1c:	080105a9 	.word	0x080105a9
 800cd20:	08010868 	.word	0x08010868
 800cd24:	08010879 	.word	0x08010879
 800cd28:	1e6f      	subs	r7, r5, #1
 800cd2a:	f1b9 0f00 	cmp.w	r9, #0
 800cd2e:	d130      	bne.n	800cd92 <__gethex+0x326>
 800cd30:	b127      	cbz	r7, 800cd3c <__gethex+0x2d0>
 800cd32:	4639      	mov	r1, r7
 800cd34:	4620      	mov	r0, r4
 800cd36:	f000 fe52 	bl	800d9de <__any_on>
 800cd3a:	4681      	mov	r9, r0
 800cd3c:	117a      	asrs	r2, r7, #5
 800cd3e:	2301      	movs	r3, #1
 800cd40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cd44:	f007 071f 	and.w	r7, r7, #31
 800cd48:	40bb      	lsls	r3, r7
 800cd4a:	4213      	tst	r3, r2
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4620      	mov	r0, r4
 800cd50:	bf18      	it	ne
 800cd52:	f049 0902 	orrne.w	r9, r9, #2
 800cd56:	f7ff fe21 	bl	800c99c <rshift>
 800cd5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cd5e:	1b76      	subs	r6, r6, r5
 800cd60:	2502      	movs	r5, #2
 800cd62:	f1b9 0f00 	cmp.w	r9, #0
 800cd66:	d047      	beq.n	800cdf8 <__gethex+0x38c>
 800cd68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d015      	beq.n	800cd9c <__gethex+0x330>
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d017      	beq.n	800cda4 <__gethex+0x338>
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d109      	bne.n	800cd8c <__gethex+0x320>
 800cd78:	f019 0f02 	tst.w	r9, #2
 800cd7c:	d006      	beq.n	800cd8c <__gethex+0x320>
 800cd7e:	f8da 3000 	ldr.w	r3, [sl]
 800cd82:	ea49 0903 	orr.w	r9, r9, r3
 800cd86:	f019 0f01 	tst.w	r9, #1
 800cd8a:	d10e      	bne.n	800cdaa <__gethex+0x33e>
 800cd8c:	f045 0510 	orr.w	r5, r5, #16
 800cd90:	e032      	b.n	800cdf8 <__gethex+0x38c>
 800cd92:	f04f 0901 	mov.w	r9, #1
 800cd96:	e7d1      	b.n	800cd3c <__gethex+0x2d0>
 800cd98:	2501      	movs	r5, #1
 800cd9a:	e7e2      	b.n	800cd62 <__gethex+0x2f6>
 800cd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd9e:	f1c3 0301 	rsb	r3, r3, #1
 800cda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0f0      	beq.n	800cd8c <__gethex+0x320>
 800cdaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cdae:	f104 0314 	add.w	r3, r4, #20
 800cdb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cdb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cdba:	f04f 0c00 	mov.w	ip, #0
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdc8:	d01b      	beq.n	800ce02 <__gethex+0x396>
 800cdca:	3201      	adds	r2, #1
 800cdcc:	6002      	str	r2, [r0, #0]
 800cdce:	2d02      	cmp	r5, #2
 800cdd0:	f104 0314 	add.w	r3, r4, #20
 800cdd4:	d13c      	bne.n	800ce50 <__gethex+0x3e4>
 800cdd6:	f8d8 2000 	ldr.w	r2, [r8]
 800cdda:	3a01      	subs	r2, #1
 800cddc:	42b2      	cmp	r2, r6
 800cdde:	d109      	bne.n	800cdf4 <__gethex+0x388>
 800cde0:	1171      	asrs	r1, r6, #5
 800cde2:	2201      	movs	r2, #1
 800cde4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cde8:	f006 061f 	and.w	r6, r6, #31
 800cdec:	fa02 f606 	lsl.w	r6, r2, r6
 800cdf0:	421e      	tst	r6, r3
 800cdf2:	d13a      	bne.n	800ce6a <__gethex+0x3fe>
 800cdf4:	f045 0520 	orr.w	r5, r5, #32
 800cdf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdfa:	601c      	str	r4, [r3, #0]
 800cdfc:	9b02      	ldr	r3, [sp, #8]
 800cdfe:	601f      	str	r7, [r3, #0]
 800ce00:	e6b0      	b.n	800cb64 <__gethex+0xf8>
 800ce02:	4299      	cmp	r1, r3
 800ce04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ce08:	d8d9      	bhi.n	800cdbe <__gethex+0x352>
 800ce0a:	68a3      	ldr	r3, [r4, #8]
 800ce0c:	459b      	cmp	fp, r3
 800ce0e:	db17      	blt.n	800ce40 <__gethex+0x3d4>
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	9801      	ldr	r0, [sp, #4]
 800ce14:	3101      	adds	r1, #1
 800ce16:	f000 f951 	bl	800d0bc <_Balloc>
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	b918      	cbnz	r0, 800ce26 <__gethex+0x3ba>
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce88 <__gethex+0x41c>)
 800ce20:	4602      	mov	r2, r0
 800ce22:	2184      	movs	r1, #132	@ 0x84
 800ce24:	e6c5      	b.n	800cbb2 <__gethex+0x146>
 800ce26:	6922      	ldr	r2, [r4, #16]
 800ce28:	3202      	adds	r2, #2
 800ce2a:	f104 010c 	add.w	r1, r4, #12
 800ce2e:	0092      	lsls	r2, r2, #2
 800ce30:	300c      	adds	r0, #12
 800ce32:	f7fe fef4 	bl	800bc1e <memcpy>
 800ce36:	4621      	mov	r1, r4
 800ce38:	9801      	ldr	r0, [sp, #4]
 800ce3a:	f000 f97f 	bl	800d13c <_Bfree>
 800ce3e:	464c      	mov	r4, r9
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce48:	6122      	str	r2, [r4, #16]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	615a      	str	r2, [r3, #20]
 800ce4e:	e7be      	b.n	800cdce <__gethex+0x362>
 800ce50:	6922      	ldr	r2, [r4, #16]
 800ce52:	455a      	cmp	r2, fp
 800ce54:	dd0b      	ble.n	800ce6e <__gethex+0x402>
 800ce56:	2101      	movs	r1, #1
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f7ff fd9f 	bl	800c99c <rshift>
 800ce5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce62:	3701      	adds	r7, #1
 800ce64:	42bb      	cmp	r3, r7
 800ce66:	f6ff aee0 	blt.w	800cc2a <__gethex+0x1be>
 800ce6a:	2501      	movs	r5, #1
 800ce6c:	e7c2      	b.n	800cdf4 <__gethex+0x388>
 800ce6e:	f016 061f 	ands.w	r6, r6, #31
 800ce72:	d0fa      	beq.n	800ce6a <__gethex+0x3fe>
 800ce74:	4453      	add	r3, sl
 800ce76:	f1c6 0620 	rsb	r6, r6, #32
 800ce7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce7e:	f000 fa0f 	bl	800d2a0 <__hi0bits>
 800ce82:	42b0      	cmp	r0, r6
 800ce84:	dbe7      	blt.n	800ce56 <__gethex+0x3ea>
 800ce86:	e7f0      	b.n	800ce6a <__gethex+0x3fe>
 800ce88:	08010868 	.word	0x08010868

0800ce8c <L_shift>:
 800ce8c:	f1c2 0208 	rsb	r2, r2, #8
 800ce90:	0092      	lsls	r2, r2, #2
 800ce92:	b570      	push	{r4, r5, r6, lr}
 800ce94:	f1c2 0620 	rsb	r6, r2, #32
 800ce98:	6843      	ldr	r3, [r0, #4]
 800ce9a:	6804      	ldr	r4, [r0, #0]
 800ce9c:	fa03 f506 	lsl.w	r5, r3, r6
 800cea0:	432c      	orrs	r4, r5
 800cea2:	40d3      	lsrs	r3, r2
 800cea4:	6004      	str	r4, [r0, #0]
 800cea6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ceaa:	4288      	cmp	r0, r1
 800ceac:	d3f4      	bcc.n	800ce98 <L_shift+0xc>
 800ceae:	bd70      	pop	{r4, r5, r6, pc}

0800ceb0 <__match>:
 800ceb0:	b530      	push	{r4, r5, lr}
 800ceb2:	6803      	ldr	r3, [r0, #0]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceba:	b914      	cbnz	r4, 800cec2 <__match+0x12>
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	2001      	movs	r0, #1
 800cec0:	bd30      	pop	{r4, r5, pc}
 800cec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ceca:	2d19      	cmp	r5, #25
 800cecc:	bf98      	it	ls
 800cece:	3220      	addls	r2, #32
 800ced0:	42a2      	cmp	r2, r4
 800ced2:	d0f0      	beq.n	800ceb6 <__match+0x6>
 800ced4:	2000      	movs	r0, #0
 800ced6:	e7f3      	b.n	800cec0 <__match+0x10>

0800ced8 <__hexnan>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	680b      	ldr	r3, [r1, #0]
 800cede:	6801      	ldr	r1, [r0, #0]
 800cee0:	115e      	asrs	r6, r3, #5
 800cee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cee6:	f013 031f 	ands.w	r3, r3, #31
 800ceea:	b087      	sub	sp, #28
 800ceec:	bf18      	it	ne
 800ceee:	3604      	addne	r6, #4
 800cef0:	2500      	movs	r5, #0
 800cef2:	1f37      	subs	r7, r6, #4
 800cef4:	4682      	mov	sl, r0
 800cef6:	4690      	mov	r8, r2
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	f846 5c04 	str.w	r5, [r6, #-4]
 800cefe:	46b9      	mov	r9, r7
 800cf00:	463c      	mov	r4, r7
 800cf02:	9502      	str	r5, [sp, #8]
 800cf04:	46ab      	mov	fp, r5
 800cf06:	784a      	ldrb	r2, [r1, #1]
 800cf08:	1c4b      	adds	r3, r1, #1
 800cf0a:	9303      	str	r3, [sp, #12]
 800cf0c:	b342      	cbz	r2, 800cf60 <__hexnan+0x88>
 800cf0e:	4610      	mov	r0, r2
 800cf10:	9105      	str	r1, [sp, #20]
 800cf12:	9204      	str	r2, [sp, #16]
 800cf14:	f7ff fd94 	bl	800ca40 <__hexdig_fun>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d151      	bne.n	800cfc0 <__hexnan+0xe8>
 800cf1c:	9a04      	ldr	r2, [sp, #16]
 800cf1e:	9905      	ldr	r1, [sp, #20]
 800cf20:	2a20      	cmp	r2, #32
 800cf22:	d818      	bhi.n	800cf56 <__hexnan+0x7e>
 800cf24:	9b02      	ldr	r3, [sp, #8]
 800cf26:	459b      	cmp	fp, r3
 800cf28:	dd13      	ble.n	800cf52 <__hexnan+0x7a>
 800cf2a:	454c      	cmp	r4, r9
 800cf2c:	d206      	bcs.n	800cf3c <__hexnan+0x64>
 800cf2e:	2d07      	cmp	r5, #7
 800cf30:	dc04      	bgt.n	800cf3c <__hexnan+0x64>
 800cf32:	462a      	mov	r2, r5
 800cf34:	4649      	mov	r1, r9
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff ffa8 	bl	800ce8c <L_shift>
 800cf3c:	4544      	cmp	r4, r8
 800cf3e:	d952      	bls.n	800cfe6 <__hexnan+0x10e>
 800cf40:	2300      	movs	r3, #0
 800cf42:	f1a4 0904 	sub.w	r9, r4, #4
 800cf46:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf4a:	f8cd b008 	str.w	fp, [sp, #8]
 800cf4e:	464c      	mov	r4, r9
 800cf50:	461d      	mov	r5, r3
 800cf52:	9903      	ldr	r1, [sp, #12]
 800cf54:	e7d7      	b.n	800cf06 <__hexnan+0x2e>
 800cf56:	2a29      	cmp	r2, #41	@ 0x29
 800cf58:	d157      	bne.n	800d00a <__hexnan+0x132>
 800cf5a:	3102      	adds	r1, #2
 800cf5c:	f8ca 1000 	str.w	r1, [sl]
 800cf60:	f1bb 0f00 	cmp.w	fp, #0
 800cf64:	d051      	beq.n	800d00a <__hexnan+0x132>
 800cf66:	454c      	cmp	r4, r9
 800cf68:	d206      	bcs.n	800cf78 <__hexnan+0xa0>
 800cf6a:	2d07      	cmp	r5, #7
 800cf6c:	dc04      	bgt.n	800cf78 <__hexnan+0xa0>
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4649      	mov	r1, r9
 800cf72:	4620      	mov	r0, r4
 800cf74:	f7ff ff8a 	bl	800ce8c <L_shift>
 800cf78:	4544      	cmp	r4, r8
 800cf7a:	d936      	bls.n	800cfea <__hexnan+0x112>
 800cf7c:	f1a8 0204 	sub.w	r2, r8, #4
 800cf80:	4623      	mov	r3, r4
 800cf82:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf86:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf8a:	429f      	cmp	r7, r3
 800cf8c:	d2f9      	bcs.n	800cf82 <__hexnan+0xaa>
 800cf8e:	1b3b      	subs	r3, r7, r4
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	3304      	adds	r3, #4
 800cf96:	3401      	adds	r4, #1
 800cf98:	3e03      	subs	r6, #3
 800cf9a:	42b4      	cmp	r4, r6
 800cf9c:	bf88      	it	hi
 800cf9e:	2304      	movhi	r3, #4
 800cfa0:	4443      	add	r3, r8
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f843 2b04 	str.w	r2, [r3], #4
 800cfa8:	429f      	cmp	r7, r3
 800cfaa:	d2fb      	bcs.n	800cfa4 <__hexnan+0xcc>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	b91b      	cbnz	r3, 800cfb8 <__hexnan+0xe0>
 800cfb0:	4547      	cmp	r7, r8
 800cfb2:	d128      	bne.n	800d006 <__hexnan+0x12e>
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	603b      	str	r3, [r7, #0]
 800cfb8:	2005      	movs	r0, #5
 800cfba:	b007      	add	sp, #28
 800cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc0:	3501      	adds	r5, #1
 800cfc2:	2d08      	cmp	r5, #8
 800cfc4:	f10b 0b01 	add.w	fp, fp, #1
 800cfc8:	dd06      	ble.n	800cfd8 <__hexnan+0x100>
 800cfca:	4544      	cmp	r4, r8
 800cfcc:	d9c1      	bls.n	800cf52 <__hexnan+0x7a>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfd4:	2501      	movs	r5, #1
 800cfd6:	3c04      	subs	r4, #4
 800cfd8:	6822      	ldr	r2, [r4, #0]
 800cfda:	f000 000f 	and.w	r0, r0, #15
 800cfde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	e7b5      	b.n	800cf52 <__hexnan+0x7a>
 800cfe6:	2508      	movs	r5, #8
 800cfe8:	e7b3      	b.n	800cf52 <__hexnan+0x7a>
 800cfea:	9b01      	ldr	r3, [sp, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d0dd      	beq.n	800cfac <__hexnan+0xd4>
 800cff0:	f1c3 0320 	rsb	r3, r3, #32
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295
 800cff8:	40da      	lsrs	r2, r3
 800cffa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cffe:	4013      	ands	r3, r2
 800d000:	f846 3c04 	str.w	r3, [r6, #-4]
 800d004:	e7d2      	b.n	800cfac <__hexnan+0xd4>
 800d006:	3f04      	subs	r7, #4
 800d008:	e7d0      	b.n	800cfac <__hexnan+0xd4>
 800d00a:	2004      	movs	r0, #4
 800d00c:	e7d5      	b.n	800cfba <__hexnan+0xe2>
	...

0800d010 <_findenv_r>:
 800d010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800d084 <_findenv_r+0x74>
 800d018:	4606      	mov	r6, r0
 800d01a:	4689      	mov	r9, r1
 800d01c:	4617      	mov	r7, r2
 800d01e:	f001 fb67 	bl	800e6f0 <__env_lock>
 800d022:	f8da 4000 	ldr.w	r4, [sl]
 800d026:	b134      	cbz	r4, 800d036 <_findenv_r+0x26>
 800d028:	464b      	mov	r3, r9
 800d02a:	4698      	mov	r8, r3
 800d02c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d030:	b13a      	cbz	r2, 800d042 <_findenv_r+0x32>
 800d032:	2a3d      	cmp	r2, #61	@ 0x3d
 800d034:	d1f9      	bne.n	800d02a <_findenv_r+0x1a>
 800d036:	4630      	mov	r0, r6
 800d038:	f001 fb60 	bl	800e6fc <__env_unlock>
 800d03c:	2000      	movs	r0, #0
 800d03e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	eba8 0809 	sub.w	r8, r8, r9
 800d046:	46a3      	mov	fp, r4
 800d048:	f854 0b04 	ldr.w	r0, [r4], #4
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d0f2      	beq.n	800d036 <_findenv_r+0x26>
 800d050:	4642      	mov	r2, r8
 800d052:	4649      	mov	r1, r9
 800d054:	f7fd ff9f 	bl	800af96 <strncmp>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1f4      	bne.n	800d046 <_findenv_r+0x36>
 800d05c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d060:	eb03 0508 	add.w	r5, r3, r8
 800d064:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d068:	2b3d      	cmp	r3, #61	@ 0x3d
 800d06a:	d1ec      	bne.n	800d046 <_findenv_r+0x36>
 800d06c:	f8da 3000 	ldr.w	r3, [sl]
 800d070:	ebab 0303 	sub.w	r3, fp, r3
 800d074:	109b      	asrs	r3, r3, #2
 800d076:	4630      	mov	r0, r6
 800d078:	603b      	str	r3, [r7, #0]
 800d07a:	f001 fb3f 	bl	800e6fc <__env_unlock>
 800d07e:	1c68      	adds	r0, r5, #1
 800d080:	e7dd      	b.n	800d03e <_findenv_r+0x2e>
 800d082:	bf00      	nop
 800d084:	20000008 	.word	0x20000008

0800d088 <_getenv_r>:
 800d088:	b507      	push	{r0, r1, r2, lr}
 800d08a:	aa01      	add	r2, sp, #4
 800d08c:	f7ff ffc0 	bl	800d010 <_findenv_r>
 800d090:	b003      	add	sp, #12
 800d092:	f85d fb04 	ldr.w	pc, [sp], #4

0800d096 <__ascii_mbtowc>:
 800d096:	b082      	sub	sp, #8
 800d098:	b901      	cbnz	r1, 800d09c <__ascii_mbtowc+0x6>
 800d09a:	a901      	add	r1, sp, #4
 800d09c:	b142      	cbz	r2, 800d0b0 <__ascii_mbtowc+0x1a>
 800d09e:	b14b      	cbz	r3, 800d0b4 <__ascii_mbtowc+0x1e>
 800d0a0:	7813      	ldrb	r3, [r2, #0]
 800d0a2:	600b      	str	r3, [r1, #0]
 800d0a4:	7812      	ldrb	r2, [r2, #0]
 800d0a6:	1e10      	subs	r0, r2, #0
 800d0a8:	bf18      	it	ne
 800d0aa:	2001      	movne	r0, #1
 800d0ac:	b002      	add	sp, #8
 800d0ae:	4770      	bx	lr
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	e7fb      	b.n	800d0ac <__ascii_mbtowc+0x16>
 800d0b4:	f06f 0001 	mvn.w	r0, #1
 800d0b8:	e7f8      	b.n	800d0ac <__ascii_mbtowc+0x16>
	...

0800d0bc <_Balloc>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	69c6      	ldr	r6, [r0, #28]
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	b976      	cbnz	r6, 800d0e4 <_Balloc+0x28>
 800d0c6:	2010      	movs	r0, #16
 800d0c8:	f7fb ffd8 	bl	800907c <malloc>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	61e0      	str	r0, [r4, #28]
 800d0d0:	b920      	cbnz	r0, 800d0dc <_Balloc+0x20>
 800d0d2:	4b18      	ldr	r3, [pc, #96]	@ (800d134 <_Balloc+0x78>)
 800d0d4:	4818      	ldr	r0, [pc, #96]	@ (800d138 <_Balloc+0x7c>)
 800d0d6:	216b      	movs	r1, #107	@ 0x6b
 800d0d8:	f001 fad8 	bl	800e68c <__assert_func>
 800d0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e0:	6006      	str	r6, [r0, #0]
 800d0e2:	60c6      	str	r6, [r0, #12]
 800d0e4:	69e6      	ldr	r6, [r4, #28]
 800d0e6:	68f3      	ldr	r3, [r6, #12]
 800d0e8:	b183      	cbz	r3, 800d10c <_Balloc+0x50>
 800d0ea:	69e3      	ldr	r3, [r4, #28]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0f2:	b9b8      	cbnz	r0, 800d124 <_Balloc+0x68>
 800d0f4:	2101      	movs	r1, #1
 800d0f6:	fa01 f605 	lsl.w	r6, r1, r5
 800d0fa:	1d72      	adds	r2, r6, #5
 800d0fc:	0092      	lsls	r2, r2, #2
 800d0fe:	4620      	mov	r0, r4
 800d100:	f001 fae2 	bl	800e6c8 <_calloc_r>
 800d104:	b160      	cbz	r0, 800d120 <_Balloc+0x64>
 800d106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d10a:	e00e      	b.n	800d12a <_Balloc+0x6e>
 800d10c:	2221      	movs	r2, #33	@ 0x21
 800d10e:	2104      	movs	r1, #4
 800d110:	4620      	mov	r0, r4
 800d112:	f001 fad9 	bl	800e6c8 <_calloc_r>
 800d116:	69e3      	ldr	r3, [r4, #28]
 800d118:	60f0      	str	r0, [r6, #12]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1e4      	bne.n	800d0ea <_Balloc+0x2e>
 800d120:	2000      	movs	r0, #0
 800d122:	bd70      	pop	{r4, r5, r6, pc}
 800d124:	6802      	ldr	r2, [r0, #0]
 800d126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d12a:	2300      	movs	r3, #0
 800d12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d130:	e7f7      	b.n	800d122 <_Balloc+0x66>
 800d132:	bf00      	nop
 800d134:	080107f9 	.word	0x080107f9
 800d138:	080108d9 	.word	0x080108d9

0800d13c <_Bfree>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	69c6      	ldr	r6, [r0, #28]
 800d140:	4605      	mov	r5, r0
 800d142:	460c      	mov	r4, r1
 800d144:	b976      	cbnz	r6, 800d164 <_Bfree+0x28>
 800d146:	2010      	movs	r0, #16
 800d148:	f7fb ff98 	bl	800907c <malloc>
 800d14c:	4602      	mov	r2, r0
 800d14e:	61e8      	str	r0, [r5, #28]
 800d150:	b920      	cbnz	r0, 800d15c <_Bfree+0x20>
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <_Bfree+0x3c>)
 800d154:	4809      	ldr	r0, [pc, #36]	@ (800d17c <_Bfree+0x40>)
 800d156:	218f      	movs	r1, #143	@ 0x8f
 800d158:	f001 fa98 	bl	800e68c <__assert_func>
 800d15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d160:	6006      	str	r6, [r0, #0]
 800d162:	60c6      	str	r6, [r0, #12]
 800d164:	b13c      	cbz	r4, 800d176 <_Bfree+0x3a>
 800d166:	69eb      	ldr	r3, [r5, #28]
 800d168:	6862      	ldr	r2, [r4, #4]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d170:	6021      	str	r1, [r4, #0]
 800d172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	080107f9 	.word	0x080107f9
 800d17c:	080108d9 	.word	0x080108d9

0800d180 <__multadd>:
 800d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d184:	690d      	ldr	r5, [r1, #16]
 800d186:	4607      	mov	r7, r0
 800d188:	460c      	mov	r4, r1
 800d18a:	461e      	mov	r6, r3
 800d18c:	f101 0c14 	add.w	ip, r1, #20
 800d190:	2000      	movs	r0, #0
 800d192:	f8dc 3000 	ldr.w	r3, [ip]
 800d196:	b299      	uxth	r1, r3
 800d198:	fb02 6101 	mla	r1, r2, r1, r6
 800d19c:	0c1e      	lsrs	r6, r3, #16
 800d19e:	0c0b      	lsrs	r3, r1, #16
 800d1a0:	fb02 3306 	mla	r3, r2, r6, r3
 800d1a4:	b289      	uxth	r1, r1
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1ac:	4285      	cmp	r5, r0
 800d1ae:	f84c 1b04 	str.w	r1, [ip], #4
 800d1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1b6:	dcec      	bgt.n	800d192 <__multadd+0x12>
 800d1b8:	b30e      	cbz	r6, 800d1fe <__multadd+0x7e>
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	42ab      	cmp	r3, r5
 800d1be:	dc19      	bgt.n	800d1f4 <__multadd+0x74>
 800d1c0:	6861      	ldr	r1, [r4, #4]
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	3101      	adds	r1, #1
 800d1c6:	f7ff ff79 	bl	800d0bc <_Balloc>
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	b928      	cbnz	r0, 800d1da <__multadd+0x5a>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d204 <__multadd+0x84>)
 800d1d2:	480d      	ldr	r0, [pc, #52]	@ (800d208 <__multadd+0x88>)
 800d1d4:	21ba      	movs	r1, #186	@ 0xba
 800d1d6:	f001 fa59 	bl	800e68c <__assert_func>
 800d1da:	6922      	ldr	r2, [r4, #16]
 800d1dc:	3202      	adds	r2, #2
 800d1de:	f104 010c 	add.w	r1, r4, #12
 800d1e2:	0092      	lsls	r2, r2, #2
 800d1e4:	300c      	adds	r0, #12
 800d1e6:	f7fe fd1a 	bl	800bc1e <memcpy>
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f7ff ffa5 	bl	800d13c <_Bfree>
 800d1f2:	4644      	mov	r4, r8
 800d1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1f8:	3501      	adds	r5, #1
 800d1fa:	615e      	str	r6, [r3, #20]
 800d1fc:	6125      	str	r5, [r4, #16]
 800d1fe:	4620      	mov	r0, r4
 800d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d204:	08010868 	.word	0x08010868
 800d208:	080108d9 	.word	0x080108d9

0800d20c <__s2b>:
 800d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d210:	460c      	mov	r4, r1
 800d212:	4615      	mov	r5, r2
 800d214:	461f      	mov	r7, r3
 800d216:	2209      	movs	r2, #9
 800d218:	3308      	adds	r3, #8
 800d21a:	4606      	mov	r6, r0
 800d21c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d220:	2100      	movs	r1, #0
 800d222:	2201      	movs	r2, #1
 800d224:	429a      	cmp	r2, r3
 800d226:	db09      	blt.n	800d23c <__s2b+0x30>
 800d228:	4630      	mov	r0, r6
 800d22a:	f7ff ff47 	bl	800d0bc <_Balloc>
 800d22e:	b940      	cbnz	r0, 800d242 <__s2b+0x36>
 800d230:	4602      	mov	r2, r0
 800d232:	4b19      	ldr	r3, [pc, #100]	@ (800d298 <__s2b+0x8c>)
 800d234:	4819      	ldr	r0, [pc, #100]	@ (800d29c <__s2b+0x90>)
 800d236:	21d3      	movs	r1, #211	@ 0xd3
 800d238:	f001 fa28 	bl	800e68c <__assert_func>
 800d23c:	0052      	lsls	r2, r2, #1
 800d23e:	3101      	adds	r1, #1
 800d240:	e7f0      	b.n	800d224 <__s2b+0x18>
 800d242:	9b08      	ldr	r3, [sp, #32]
 800d244:	6143      	str	r3, [r0, #20]
 800d246:	2d09      	cmp	r5, #9
 800d248:	f04f 0301 	mov.w	r3, #1
 800d24c:	6103      	str	r3, [r0, #16]
 800d24e:	dd16      	ble.n	800d27e <__s2b+0x72>
 800d250:	f104 0909 	add.w	r9, r4, #9
 800d254:	46c8      	mov	r8, r9
 800d256:	442c      	add	r4, r5
 800d258:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d25c:	4601      	mov	r1, r0
 800d25e:	3b30      	subs	r3, #48	@ 0x30
 800d260:	220a      	movs	r2, #10
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ff8c 	bl	800d180 <__multadd>
 800d268:	45a0      	cmp	r8, r4
 800d26a:	d1f5      	bne.n	800d258 <__s2b+0x4c>
 800d26c:	f1a5 0408 	sub.w	r4, r5, #8
 800d270:	444c      	add	r4, r9
 800d272:	1b2d      	subs	r5, r5, r4
 800d274:	1963      	adds	r3, r4, r5
 800d276:	42bb      	cmp	r3, r7
 800d278:	db04      	blt.n	800d284 <__s2b+0x78>
 800d27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d27e:	340a      	adds	r4, #10
 800d280:	2509      	movs	r5, #9
 800d282:	e7f6      	b.n	800d272 <__s2b+0x66>
 800d284:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d288:	4601      	mov	r1, r0
 800d28a:	3b30      	subs	r3, #48	@ 0x30
 800d28c:	220a      	movs	r2, #10
 800d28e:	4630      	mov	r0, r6
 800d290:	f7ff ff76 	bl	800d180 <__multadd>
 800d294:	e7ee      	b.n	800d274 <__s2b+0x68>
 800d296:	bf00      	nop
 800d298:	08010868 	.word	0x08010868
 800d29c:	080108d9 	.word	0x080108d9

0800d2a0 <__hi0bits>:
 800d2a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	bf36      	itet	cc
 800d2a8:	0403      	lslcc	r3, r0, #16
 800d2aa:	2000      	movcs	r0, #0
 800d2ac:	2010      	movcc	r0, #16
 800d2ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2b2:	bf3c      	itt	cc
 800d2b4:	021b      	lslcc	r3, r3, #8
 800d2b6:	3008      	addcc	r0, #8
 800d2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2bc:	bf3c      	itt	cc
 800d2be:	011b      	lslcc	r3, r3, #4
 800d2c0:	3004      	addcc	r0, #4
 800d2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2c6:	bf3c      	itt	cc
 800d2c8:	009b      	lslcc	r3, r3, #2
 800d2ca:	3002      	addcc	r0, #2
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	db05      	blt.n	800d2dc <__hi0bits+0x3c>
 800d2d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2d4:	f100 0001 	add.w	r0, r0, #1
 800d2d8:	bf08      	it	eq
 800d2da:	2020      	moveq	r0, #32
 800d2dc:	4770      	bx	lr

0800d2de <__lo0bits>:
 800d2de:	6803      	ldr	r3, [r0, #0]
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	f013 0007 	ands.w	r0, r3, #7
 800d2e6:	d00b      	beq.n	800d300 <__lo0bits+0x22>
 800d2e8:	07d9      	lsls	r1, r3, #31
 800d2ea:	d421      	bmi.n	800d330 <__lo0bits+0x52>
 800d2ec:	0798      	lsls	r0, r3, #30
 800d2ee:	bf49      	itett	mi
 800d2f0:	085b      	lsrmi	r3, r3, #1
 800d2f2:	089b      	lsrpl	r3, r3, #2
 800d2f4:	2001      	movmi	r0, #1
 800d2f6:	6013      	strmi	r3, [r2, #0]
 800d2f8:	bf5c      	itt	pl
 800d2fa:	6013      	strpl	r3, [r2, #0]
 800d2fc:	2002      	movpl	r0, #2
 800d2fe:	4770      	bx	lr
 800d300:	b299      	uxth	r1, r3
 800d302:	b909      	cbnz	r1, 800d308 <__lo0bits+0x2a>
 800d304:	0c1b      	lsrs	r3, r3, #16
 800d306:	2010      	movs	r0, #16
 800d308:	b2d9      	uxtb	r1, r3
 800d30a:	b909      	cbnz	r1, 800d310 <__lo0bits+0x32>
 800d30c:	3008      	adds	r0, #8
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	0719      	lsls	r1, r3, #28
 800d312:	bf04      	itt	eq
 800d314:	091b      	lsreq	r3, r3, #4
 800d316:	3004      	addeq	r0, #4
 800d318:	0799      	lsls	r1, r3, #30
 800d31a:	bf04      	itt	eq
 800d31c:	089b      	lsreq	r3, r3, #2
 800d31e:	3002      	addeq	r0, #2
 800d320:	07d9      	lsls	r1, r3, #31
 800d322:	d403      	bmi.n	800d32c <__lo0bits+0x4e>
 800d324:	085b      	lsrs	r3, r3, #1
 800d326:	f100 0001 	add.w	r0, r0, #1
 800d32a:	d003      	beq.n	800d334 <__lo0bits+0x56>
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	4770      	bx	lr
 800d330:	2000      	movs	r0, #0
 800d332:	4770      	bx	lr
 800d334:	2020      	movs	r0, #32
 800d336:	4770      	bx	lr

0800d338 <__i2b>:
 800d338:	b510      	push	{r4, lr}
 800d33a:	460c      	mov	r4, r1
 800d33c:	2101      	movs	r1, #1
 800d33e:	f7ff febd 	bl	800d0bc <_Balloc>
 800d342:	4602      	mov	r2, r0
 800d344:	b928      	cbnz	r0, 800d352 <__i2b+0x1a>
 800d346:	4b05      	ldr	r3, [pc, #20]	@ (800d35c <__i2b+0x24>)
 800d348:	4805      	ldr	r0, [pc, #20]	@ (800d360 <__i2b+0x28>)
 800d34a:	f240 1145 	movw	r1, #325	@ 0x145
 800d34e:	f001 f99d 	bl	800e68c <__assert_func>
 800d352:	2301      	movs	r3, #1
 800d354:	6144      	str	r4, [r0, #20]
 800d356:	6103      	str	r3, [r0, #16]
 800d358:	bd10      	pop	{r4, pc}
 800d35a:	bf00      	nop
 800d35c:	08010868 	.word	0x08010868
 800d360:	080108d9 	.word	0x080108d9

0800d364 <__multiply>:
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	4614      	mov	r4, r2
 800d36a:	690a      	ldr	r2, [r1, #16]
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	429a      	cmp	r2, r3
 800d370:	bfa8      	it	ge
 800d372:	4623      	movge	r3, r4
 800d374:	460f      	mov	r7, r1
 800d376:	bfa4      	itt	ge
 800d378:	460c      	movge	r4, r1
 800d37a:	461f      	movge	r7, r3
 800d37c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d380:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d384:	68a3      	ldr	r3, [r4, #8]
 800d386:	6861      	ldr	r1, [r4, #4]
 800d388:	eb0a 0609 	add.w	r6, sl, r9
 800d38c:	42b3      	cmp	r3, r6
 800d38e:	b085      	sub	sp, #20
 800d390:	bfb8      	it	lt
 800d392:	3101      	addlt	r1, #1
 800d394:	f7ff fe92 	bl	800d0bc <_Balloc>
 800d398:	b930      	cbnz	r0, 800d3a8 <__multiply+0x44>
 800d39a:	4602      	mov	r2, r0
 800d39c:	4b44      	ldr	r3, [pc, #272]	@ (800d4b0 <__multiply+0x14c>)
 800d39e:	4845      	ldr	r0, [pc, #276]	@ (800d4b4 <__multiply+0x150>)
 800d3a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3a4:	f001 f972 	bl	800e68c <__assert_func>
 800d3a8:	f100 0514 	add.w	r5, r0, #20
 800d3ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4543      	cmp	r3, r8
 800d3b6:	d321      	bcc.n	800d3fc <__multiply+0x98>
 800d3b8:	f107 0114 	add.w	r1, r7, #20
 800d3bc:	f104 0214 	add.w	r2, r4, #20
 800d3c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d3c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d3c8:	9302      	str	r3, [sp, #8]
 800d3ca:	1b13      	subs	r3, r2, r4
 800d3cc:	3b15      	subs	r3, #21
 800d3ce:	f023 0303 	bic.w	r3, r3, #3
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	f104 0715 	add.w	r7, r4, #21
 800d3d8:	42ba      	cmp	r2, r7
 800d3da:	bf38      	it	cc
 800d3dc:	2304      	movcc	r3, #4
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	9b02      	ldr	r3, [sp, #8]
 800d3e2:	9103      	str	r1, [sp, #12]
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	d80c      	bhi.n	800d402 <__multiply+0x9e>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	dd03      	ble.n	800d3f4 <__multiply+0x90>
 800d3ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d05b      	beq.n	800d4ac <__multiply+0x148>
 800d3f4:	6106      	str	r6, [r0, #16]
 800d3f6:	b005      	add	sp, #20
 800d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fc:	f843 2b04 	str.w	r2, [r3], #4
 800d400:	e7d8      	b.n	800d3b4 <__multiply+0x50>
 800d402:	f8b1 a000 	ldrh.w	sl, [r1]
 800d406:	f1ba 0f00 	cmp.w	sl, #0
 800d40a:	d024      	beq.n	800d456 <__multiply+0xf2>
 800d40c:	f104 0e14 	add.w	lr, r4, #20
 800d410:	46a9      	mov	r9, r5
 800d412:	f04f 0c00 	mov.w	ip, #0
 800d416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d41a:	f8d9 3000 	ldr.w	r3, [r9]
 800d41e:	fa1f fb87 	uxth.w	fp, r7
 800d422:	b29b      	uxth	r3, r3
 800d424:	fb0a 330b 	mla	r3, sl, fp, r3
 800d428:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d42c:	f8d9 7000 	ldr.w	r7, [r9]
 800d430:	4463      	add	r3, ip
 800d432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d436:	fb0a c70b 	mla	r7, sl, fp, ip
 800d43a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d43e:	b29b      	uxth	r3, r3
 800d440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d444:	4572      	cmp	r2, lr
 800d446:	f849 3b04 	str.w	r3, [r9], #4
 800d44a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d44e:	d8e2      	bhi.n	800d416 <__multiply+0xb2>
 800d450:	9b01      	ldr	r3, [sp, #4]
 800d452:	f845 c003 	str.w	ip, [r5, r3]
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d45c:	3104      	adds	r1, #4
 800d45e:	f1b9 0f00 	cmp.w	r9, #0
 800d462:	d021      	beq.n	800d4a8 <__multiply+0x144>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	f104 0c14 	add.w	ip, r4, #20
 800d46a:	46ae      	mov	lr, r5
 800d46c:	f04f 0a00 	mov.w	sl, #0
 800d470:	f8bc b000 	ldrh.w	fp, [ip]
 800d474:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d478:	fb09 770b 	mla	r7, r9, fp, r7
 800d47c:	4457      	add	r7, sl
 800d47e:	b29b      	uxth	r3, r3
 800d480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d484:	f84e 3b04 	str.w	r3, [lr], #4
 800d488:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d48c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d490:	f8be 3000 	ldrh.w	r3, [lr]
 800d494:	fb09 330a 	mla	r3, r9, sl, r3
 800d498:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d49c:	4562      	cmp	r2, ip
 800d49e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4a2:	d8e5      	bhi.n	800d470 <__multiply+0x10c>
 800d4a4:	9f01      	ldr	r7, [sp, #4]
 800d4a6:	51eb      	str	r3, [r5, r7]
 800d4a8:	3504      	adds	r5, #4
 800d4aa:	e799      	b.n	800d3e0 <__multiply+0x7c>
 800d4ac:	3e01      	subs	r6, #1
 800d4ae:	e79b      	b.n	800d3e8 <__multiply+0x84>
 800d4b0:	08010868 	.word	0x08010868
 800d4b4:	080108d9 	.word	0x080108d9

0800d4b8 <__pow5mult>:
 800d4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4bc:	4615      	mov	r5, r2
 800d4be:	f012 0203 	ands.w	r2, r2, #3
 800d4c2:	4607      	mov	r7, r0
 800d4c4:	460e      	mov	r6, r1
 800d4c6:	d007      	beq.n	800d4d8 <__pow5mult+0x20>
 800d4c8:	4c25      	ldr	r4, [pc, #148]	@ (800d560 <__pow5mult+0xa8>)
 800d4ca:	3a01      	subs	r2, #1
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4d2:	f7ff fe55 	bl	800d180 <__multadd>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	10ad      	asrs	r5, r5, #2
 800d4da:	d03d      	beq.n	800d558 <__pow5mult+0xa0>
 800d4dc:	69fc      	ldr	r4, [r7, #28]
 800d4de:	b97c      	cbnz	r4, 800d500 <__pow5mult+0x48>
 800d4e0:	2010      	movs	r0, #16
 800d4e2:	f7fb fdcb 	bl	800907c <malloc>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	61f8      	str	r0, [r7, #28]
 800d4ea:	b928      	cbnz	r0, 800d4f8 <__pow5mult+0x40>
 800d4ec:	4b1d      	ldr	r3, [pc, #116]	@ (800d564 <__pow5mult+0xac>)
 800d4ee:	481e      	ldr	r0, [pc, #120]	@ (800d568 <__pow5mult+0xb0>)
 800d4f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4f4:	f001 f8ca 	bl	800e68c <__assert_func>
 800d4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4fc:	6004      	str	r4, [r0, #0]
 800d4fe:	60c4      	str	r4, [r0, #12]
 800d500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d508:	b94c      	cbnz	r4, 800d51e <__pow5mult+0x66>
 800d50a:	f240 2171 	movw	r1, #625	@ 0x271
 800d50e:	4638      	mov	r0, r7
 800d510:	f7ff ff12 	bl	800d338 <__i2b>
 800d514:	2300      	movs	r3, #0
 800d516:	f8c8 0008 	str.w	r0, [r8, #8]
 800d51a:	4604      	mov	r4, r0
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	f04f 0900 	mov.w	r9, #0
 800d522:	07eb      	lsls	r3, r5, #31
 800d524:	d50a      	bpl.n	800d53c <__pow5mult+0x84>
 800d526:	4631      	mov	r1, r6
 800d528:	4622      	mov	r2, r4
 800d52a:	4638      	mov	r0, r7
 800d52c:	f7ff ff1a 	bl	800d364 <__multiply>
 800d530:	4631      	mov	r1, r6
 800d532:	4680      	mov	r8, r0
 800d534:	4638      	mov	r0, r7
 800d536:	f7ff fe01 	bl	800d13c <_Bfree>
 800d53a:	4646      	mov	r6, r8
 800d53c:	106d      	asrs	r5, r5, #1
 800d53e:	d00b      	beq.n	800d558 <__pow5mult+0xa0>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	b938      	cbnz	r0, 800d554 <__pow5mult+0x9c>
 800d544:	4622      	mov	r2, r4
 800d546:	4621      	mov	r1, r4
 800d548:	4638      	mov	r0, r7
 800d54a:	f7ff ff0b 	bl	800d364 <__multiply>
 800d54e:	6020      	str	r0, [r4, #0]
 800d550:	f8c0 9000 	str.w	r9, [r0]
 800d554:	4604      	mov	r4, r0
 800d556:	e7e4      	b.n	800d522 <__pow5mult+0x6a>
 800d558:	4630      	mov	r0, r6
 800d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d55e:	bf00      	nop
 800d560:	08010934 	.word	0x08010934
 800d564:	080107f9 	.word	0x080107f9
 800d568:	080108d9 	.word	0x080108d9

0800d56c <__lshift>:
 800d56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d570:	460c      	mov	r4, r1
 800d572:	6849      	ldr	r1, [r1, #4]
 800d574:	6923      	ldr	r3, [r4, #16]
 800d576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	4607      	mov	r7, r0
 800d57e:	4691      	mov	r9, r2
 800d580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d584:	f108 0601 	add.w	r6, r8, #1
 800d588:	42b3      	cmp	r3, r6
 800d58a:	db0b      	blt.n	800d5a4 <__lshift+0x38>
 800d58c:	4638      	mov	r0, r7
 800d58e:	f7ff fd95 	bl	800d0bc <_Balloc>
 800d592:	4605      	mov	r5, r0
 800d594:	b948      	cbnz	r0, 800d5aa <__lshift+0x3e>
 800d596:	4602      	mov	r2, r0
 800d598:	4b28      	ldr	r3, [pc, #160]	@ (800d63c <__lshift+0xd0>)
 800d59a:	4829      	ldr	r0, [pc, #164]	@ (800d640 <__lshift+0xd4>)
 800d59c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d5a0:	f001 f874 	bl	800e68c <__assert_func>
 800d5a4:	3101      	adds	r1, #1
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	e7ee      	b.n	800d588 <__lshift+0x1c>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f100 0114 	add.w	r1, r0, #20
 800d5b0:	f100 0210 	add.w	r2, r0, #16
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	4553      	cmp	r3, sl
 800d5b8:	db33      	blt.n	800d622 <__lshift+0xb6>
 800d5ba:	6920      	ldr	r0, [r4, #16]
 800d5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5c0:	f104 0314 	add.w	r3, r4, #20
 800d5c4:	f019 091f 	ands.w	r9, r9, #31
 800d5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5d0:	d02b      	beq.n	800d62a <__lshift+0xbe>
 800d5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800d5d6:	468a      	mov	sl, r1
 800d5d8:	2200      	movs	r2, #0
 800d5da:	6818      	ldr	r0, [r3, #0]
 800d5dc:	fa00 f009 	lsl.w	r0, r0, r9
 800d5e0:	4310      	orrs	r0, r2
 800d5e2:	f84a 0b04 	str.w	r0, [sl], #4
 800d5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ea:	459c      	cmp	ip, r3
 800d5ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5f0:	d8f3      	bhi.n	800d5da <__lshift+0x6e>
 800d5f2:	ebac 0304 	sub.w	r3, ip, r4
 800d5f6:	3b15      	subs	r3, #21
 800d5f8:	f023 0303 	bic.w	r3, r3, #3
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	f104 0015 	add.w	r0, r4, #21
 800d602:	4584      	cmp	ip, r0
 800d604:	bf38      	it	cc
 800d606:	2304      	movcc	r3, #4
 800d608:	50ca      	str	r2, [r1, r3]
 800d60a:	b10a      	cbz	r2, 800d610 <__lshift+0xa4>
 800d60c:	f108 0602 	add.w	r6, r8, #2
 800d610:	3e01      	subs	r6, #1
 800d612:	4638      	mov	r0, r7
 800d614:	612e      	str	r6, [r5, #16]
 800d616:	4621      	mov	r1, r4
 800d618:	f7ff fd90 	bl	800d13c <_Bfree>
 800d61c:	4628      	mov	r0, r5
 800d61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d622:	f842 0f04 	str.w	r0, [r2, #4]!
 800d626:	3301      	adds	r3, #1
 800d628:	e7c5      	b.n	800d5b6 <__lshift+0x4a>
 800d62a:	3904      	subs	r1, #4
 800d62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d630:	f841 2f04 	str.w	r2, [r1, #4]!
 800d634:	459c      	cmp	ip, r3
 800d636:	d8f9      	bhi.n	800d62c <__lshift+0xc0>
 800d638:	e7ea      	b.n	800d610 <__lshift+0xa4>
 800d63a:	bf00      	nop
 800d63c:	08010868 	.word	0x08010868
 800d640:	080108d9 	.word	0x080108d9

0800d644 <__mcmp>:
 800d644:	690a      	ldr	r2, [r1, #16]
 800d646:	4603      	mov	r3, r0
 800d648:	6900      	ldr	r0, [r0, #16]
 800d64a:	1a80      	subs	r0, r0, r2
 800d64c:	b530      	push	{r4, r5, lr}
 800d64e:	d10e      	bne.n	800d66e <__mcmp+0x2a>
 800d650:	3314      	adds	r3, #20
 800d652:	3114      	adds	r1, #20
 800d654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d65c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d664:	4295      	cmp	r5, r2
 800d666:	d003      	beq.n	800d670 <__mcmp+0x2c>
 800d668:	d205      	bcs.n	800d676 <__mcmp+0x32>
 800d66a:	f04f 30ff 	mov.w	r0, #4294967295
 800d66e:	bd30      	pop	{r4, r5, pc}
 800d670:	42a3      	cmp	r3, r4
 800d672:	d3f3      	bcc.n	800d65c <__mcmp+0x18>
 800d674:	e7fb      	b.n	800d66e <__mcmp+0x2a>
 800d676:	2001      	movs	r0, #1
 800d678:	e7f9      	b.n	800d66e <__mcmp+0x2a>
	...

0800d67c <__mdiff>:
 800d67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	4689      	mov	r9, r1
 800d682:	4606      	mov	r6, r0
 800d684:	4611      	mov	r1, r2
 800d686:	4648      	mov	r0, r9
 800d688:	4614      	mov	r4, r2
 800d68a:	f7ff ffdb 	bl	800d644 <__mcmp>
 800d68e:	1e05      	subs	r5, r0, #0
 800d690:	d112      	bne.n	800d6b8 <__mdiff+0x3c>
 800d692:	4629      	mov	r1, r5
 800d694:	4630      	mov	r0, r6
 800d696:	f7ff fd11 	bl	800d0bc <_Balloc>
 800d69a:	4602      	mov	r2, r0
 800d69c:	b928      	cbnz	r0, 800d6aa <__mdiff+0x2e>
 800d69e:	4b3f      	ldr	r3, [pc, #252]	@ (800d79c <__mdiff+0x120>)
 800d6a0:	f240 2137 	movw	r1, #567	@ 0x237
 800d6a4:	483e      	ldr	r0, [pc, #248]	@ (800d7a0 <__mdiff+0x124>)
 800d6a6:	f000 fff1 	bl	800e68c <__assert_func>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6b0:	4610      	mov	r0, r2
 800d6b2:	b003      	add	sp, #12
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	bfbc      	itt	lt
 800d6ba:	464b      	movlt	r3, r9
 800d6bc:	46a1      	movlt	r9, r4
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6c4:	bfba      	itte	lt
 800d6c6:	461c      	movlt	r4, r3
 800d6c8:	2501      	movlt	r5, #1
 800d6ca:	2500      	movge	r5, #0
 800d6cc:	f7ff fcf6 	bl	800d0bc <_Balloc>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	b918      	cbnz	r0, 800d6dc <__mdiff+0x60>
 800d6d4:	4b31      	ldr	r3, [pc, #196]	@ (800d79c <__mdiff+0x120>)
 800d6d6:	f240 2145 	movw	r1, #581	@ 0x245
 800d6da:	e7e3      	b.n	800d6a4 <__mdiff+0x28>
 800d6dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6e0:	6926      	ldr	r6, [r4, #16]
 800d6e2:	60c5      	str	r5, [r0, #12]
 800d6e4:	f109 0310 	add.w	r3, r9, #16
 800d6e8:	f109 0514 	add.w	r5, r9, #20
 800d6ec:	f104 0e14 	add.w	lr, r4, #20
 800d6f0:	f100 0b14 	add.w	fp, r0, #20
 800d6f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	46d9      	mov	r9, fp
 800d700:	f04f 0c00 	mov.w	ip, #0
 800d704:	9b01      	ldr	r3, [sp, #4]
 800d706:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d70a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	fa1f f38a 	uxth.w	r3, sl
 800d714:	4619      	mov	r1, r3
 800d716:	b283      	uxth	r3, r0
 800d718:	1acb      	subs	r3, r1, r3
 800d71a:	0c00      	lsrs	r0, r0, #16
 800d71c:	4463      	add	r3, ip
 800d71e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d726:	b29b      	uxth	r3, r3
 800d728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d72c:	4576      	cmp	r6, lr
 800d72e:	f849 3b04 	str.w	r3, [r9], #4
 800d732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d736:	d8e5      	bhi.n	800d704 <__mdiff+0x88>
 800d738:	1b33      	subs	r3, r6, r4
 800d73a:	3b15      	subs	r3, #21
 800d73c:	f023 0303 	bic.w	r3, r3, #3
 800d740:	3415      	adds	r4, #21
 800d742:	3304      	adds	r3, #4
 800d744:	42a6      	cmp	r6, r4
 800d746:	bf38      	it	cc
 800d748:	2304      	movcc	r3, #4
 800d74a:	441d      	add	r5, r3
 800d74c:	445b      	add	r3, fp
 800d74e:	461e      	mov	r6, r3
 800d750:	462c      	mov	r4, r5
 800d752:	4544      	cmp	r4, r8
 800d754:	d30e      	bcc.n	800d774 <__mdiff+0xf8>
 800d756:	f108 0103 	add.w	r1, r8, #3
 800d75a:	1b49      	subs	r1, r1, r5
 800d75c:	f021 0103 	bic.w	r1, r1, #3
 800d760:	3d03      	subs	r5, #3
 800d762:	45a8      	cmp	r8, r5
 800d764:	bf38      	it	cc
 800d766:	2100      	movcc	r1, #0
 800d768:	440b      	add	r3, r1
 800d76a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d76e:	b191      	cbz	r1, 800d796 <__mdiff+0x11a>
 800d770:	6117      	str	r7, [r2, #16]
 800d772:	e79d      	b.n	800d6b0 <__mdiff+0x34>
 800d774:	f854 1b04 	ldr.w	r1, [r4], #4
 800d778:	46e6      	mov	lr, ip
 800d77a:	0c08      	lsrs	r0, r1, #16
 800d77c:	fa1c fc81 	uxtah	ip, ip, r1
 800d780:	4471      	add	r1, lr
 800d782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d786:	b289      	uxth	r1, r1
 800d788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d78c:	f846 1b04 	str.w	r1, [r6], #4
 800d790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d794:	e7dd      	b.n	800d752 <__mdiff+0xd6>
 800d796:	3f01      	subs	r7, #1
 800d798:	e7e7      	b.n	800d76a <__mdiff+0xee>
 800d79a:	bf00      	nop
 800d79c:	08010868 	.word	0x08010868
 800d7a0:	080108d9 	.word	0x080108d9

0800d7a4 <__ulp>:
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	ed8d 0b00 	vstr	d0, [sp]
 800d7aa:	9a01      	ldr	r2, [sp, #4]
 800d7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d7ec <__ulp+0x48>)
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dc08      	bgt.n	800d7ca <__ulp+0x26>
 800d7b8:	425b      	negs	r3, r3
 800d7ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d7be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d7c2:	da04      	bge.n	800d7ce <__ulp+0x2a>
 800d7c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7c8:	4113      	asrs	r3, r2
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	e008      	b.n	800d7e0 <__ulp+0x3c>
 800d7ce:	f1a2 0314 	sub.w	r3, r2, #20
 800d7d2:	2b1e      	cmp	r3, #30
 800d7d4:	bfda      	itte	le
 800d7d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d7da:	40da      	lsrle	r2, r3
 800d7dc:	2201      	movgt	r2, #1
 800d7de:	2300      	movs	r3, #0
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	ec41 0b10 	vmov	d0, r0, r1
 800d7e8:	b002      	add	sp, #8
 800d7ea:	4770      	bx	lr
 800d7ec:	7ff00000 	.word	0x7ff00000

0800d7f0 <__b2d>:
 800d7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f4:	6906      	ldr	r6, [r0, #16]
 800d7f6:	f100 0814 	add.w	r8, r0, #20
 800d7fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d7fe:	1f37      	subs	r7, r6, #4
 800d800:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d804:	4610      	mov	r0, r2
 800d806:	f7ff fd4b 	bl	800d2a0 <__hi0bits>
 800d80a:	f1c0 0320 	rsb	r3, r0, #32
 800d80e:	280a      	cmp	r0, #10
 800d810:	600b      	str	r3, [r1, #0]
 800d812:	491b      	ldr	r1, [pc, #108]	@ (800d880 <__b2d+0x90>)
 800d814:	dc15      	bgt.n	800d842 <__b2d+0x52>
 800d816:	f1c0 0c0b 	rsb	ip, r0, #11
 800d81a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d81e:	45b8      	cmp	r8, r7
 800d820:	ea43 0501 	orr.w	r5, r3, r1
 800d824:	bf34      	ite	cc
 800d826:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d82a:	2300      	movcs	r3, #0
 800d82c:	3015      	adds	r0, #21
 800d82e:	fa02 f000 	lsl.w	r0, r2, r0
 800d832:	fa23 f30c 	lsr.w	r3, r3, ip
 800d836:	4303      	orrs	r3, r0
 800d838:	461c      	mov	r4, r3
 800d83a:	ec45 4b10 	vmov	d0, r4, r5
 800d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d842:	45b8      	cmp	r8, r7
 800d844:	bf3a      	itte	cc
 800d846:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d84a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d84e:	2300      	movcs	r3, #0
 800d850:	380b      	subs	r0, #11
 800d852:	d012      	beq.n	800d87a <__b2d+0x8a>
 800d854:	f1c0 0120 	rsb	r1, r0, #32
 800d858:	fa23 f401 	lsr.w	r4, r3, r1
 800d85c:	4082      	lsls	r2, r0
 800d85e:	4322      	orrs	r2, r4
 800d860:	4547      	cmp	r7, r8
 800d862:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d866:	bf8c      	ite	hi
 800d868:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d86c:	2200      	movls	r2, #0
 800d86e:	4083      	lsls	r3, r0
 800d870:	40ca      	lsrs	r2, r1
 800d872:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d876:	4313      	orrs	r3, r2
 800d878:	e7de      	b.n	800d838 <__b2d+0x48>
 800d87a:	ea42 0501 	orr.w	r5, r2, r1
 800d87e:	e7db      	b.n	800d838 <__b2d+0x48>
 800d880:	3ff00000 	.word	0x3ff00000

0800d884 <__d2b>:
 800d884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d888:	460f      	mov	r7, r1
 800d88a:	2101      	movs	r1, #1
 800d88c:	ec59 8b10 	vmov	r8, r9, d0
 800d890:	4616      	mov	r6, r2
 800d892:	f7ff fc13 	bl	800d0bc <_Balloc>
 800d896:	4604      	mov	r4, r0
 800d898:	b930      	cbnz	r0, 800d8a8 <__d2b+0x24>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4b23      	ldr	r3, [pc, #140]	@ (800d92c <__d2b+0xa8>)
 800d89e:	4824      	ldr	r0, [pc, #144]	@ (800d930 <__d2b+0xac>)
 800d8a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8a4:	f000 fef2 	bl	800e68c <__assert_func>
 800d8a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8b0:	b10d      	cbz	r5, 800d8b6 <__d2b+0x32>
 800d8b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d8bc:	d023      	beq.n	800d906 <__d2b+0x82>
 800d8be:	4668      	mov	r0, sp
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	f7ff fd0c 	bl	800d2de <__lo0bits>
 800d8c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8ca:	b1d0      	cbz	r0, 800d902 <__d2b+0x7e>
 800d8cc:	f1c0 0320 	rsb	r3, r0, #32
 800d8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d4:	430b      	orrs	r3, r1
 800d8d6:	40c2      	lsrs	r2, r0
 800d8d8:	6163      	str	r3, [r4, #20]
 800d8da:	9201      	str	r2, [sp, #4]
 800d8dc:	9b01      	ldr	r3, [sp, #4]
 800d8de:	61a3      	str	r3, [r4, #24]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	bf0c      	ite	eq
 800d8e4:	2201      	moveq	r2, #1
 800d8e6:	2202      	movne	r2, #2
 800d8e8:	6122      	str	r2, [r4, #16]
 800d8ea:	b1a5      	cbz	r5, 800d916 <__d2b+0x92>
 800d8ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8f0:	4405      	add	r5, r0
 800d8f2:	603d      	str	r5, [r7, #0]
 800d8f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8f8:	6030      	str	r0, [r6, #0]
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	b003      	add	sp, #12
 800d8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d902:	6161      	str	r1, [r4, #20]
 800d904:	e7ea      	b.n	800d8dc <__d2b+0x58>
 800d906:	a801      	add	r0, sp, #4
 800d908:	f7ff fce9 	bl	800d2de <__lo0bits>
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	6163      	str	r3, [r4, #20]
 800d910:	3020      	adds	r0, #32
 800d912:	2201      	movs	r2, #1
 800d914:	e7e8      	b.n	800d8e8 <__d2b+0x64>
 800d916:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d91a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d91e:	6038      	str	r0, [r7, #0]
 800d920:	6918      	ldr	r0, [r3, #16]
 800d922:	f7ff fcbd 	bl	800d2a0 <__hi0bits>
 800d926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d92a:	e7e5      	b.n	800d8f8 <__d2b+0x74>
 800d92c:	08010868 	.word	0x08010868
 800d930:	080108d9 	.word	0x080108d9

0800d934 <__ratio>:
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d938:	b085      	sub	sp, #20
 800d93a:	e9cd 1000 	strd	r1, r0, [sp]
 800d93e:	a902      	add	r1, sp, #8
 800d940:	f7ff ff56 	bl	800d7f0 <__b2d>
 800d944:	9800      	ldr	r0, [sp, #0]
 800d946:	a903      	add	r1, sp, #12
 800d948:	ec55 4b10 	vmov	r4, r5, d0
 800d94c:	f7ff ff50 	bl	800d7f0 <__b2d>
 800d950:	9b01      	ldr	r3, [sp, #4]
 800d952:	6919      	ldr	r1, [r3, #16]
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	1ac9      	subs	r1, r1, r3
 800d95a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d95e:	1a9b      	subs	r3, r3, r2
 800d960:	ec5b ab10 	vmov	sl, fp, d0
 800d964:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfce      	itee	gt
 800d96c:	462a      	movgt	r2, r5
 800d96e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d972:	465a      	movle	r2, fp
 800d974:	462f      	mov	r7, r5
 800d976:	46d9      	mov	r9, fp
 800d978:	bfcc      	ite	gt
 800d97a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d97e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d982:	464b      	mov	r3, r9
 800d984:	4652      	mov	r2, sl
 800d986:	4620      	mov	r0, r4
 800d988:	4639      	mov	r1, r7
 800d98a:	f7f2 ff6f 	bl	800086c <__aeabi_ddiv>
 800d98e:	ec41 0b10 	vmov	d0, r0, r1
 800d992:	b005      	add	sp, #20
 800d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d998 <__copybits>:
 800d998:	3901      	subs	r1, #1
 800d99a:	b570      	push	{r4, r5, r6, lr}
 800d99c:	1149      	asrs	r1, r1, #5
 800d99e:	6914      	ldr	r4, [r2, #16]
 800d9a0:	3101      	adds	r1, #1
 800d9a2:	f102 0314 	add.w	r3, r2, #20
 800d9a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9ae:	1f05      	subs	r5, r0, #4
 800d9b0:	42a3      	cmp	r3, r4
 800d9b2:	d30c      	bcc.n	800d9ce <__copybits+0x36>
 800d9b4:	1aa3      	subs	r3, r4, r2
 800d9b6:	3b11      	subs	r3, #17
 800d9b8:	f023 0303 	bic.w	r3, r3, #3
 800d9bc:	3211      	adds	r2, #17
 800d9be:	42a2      	cmp	r2, r4
 800d9c0:	bf88      	it	hi
 800d9c2:	2300      	movhi	r3, #0
 800d9c4:	4418      	add	r0, r3
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	4288      	cmp	r0, r1
 800d9ca:	d305      	bcc.n	800d9d8 <__copybits+0x40>
 800d9cc:	bd70      	pop	{r4, r5, r6, pc}
 800d9ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9d6:	e7eb      	b.n	800d9b0 <__copybits+0x18>
 800d9d8:	f840 3b04 	str.w	r3, [r0], #4
 800d9dc:	e7f4      	b.n	800d9c8 <__copybits+0x30>

0800d9de <__any_on>:
 800d9de:	f100 0214 	add.w	r2, r0, #20
 800d9e2:	6900      	ldr	r0, [r0, #16]
 800d9e4:	114b      	asrs	r3, r1, #5
 800d9e6:	4298      	cmp	r0, r3
 800d9e8:	b510      	push	{r4, lr}
 800d9ea:	db11      	blt.n	800da10 <__any_on+0x32>
 800d9ec:	dd0a      	ble.n	800da04 <__any_on+0x26>
 800d9ee:	f011 011f 	ands.w	r1, r1, #31
 800d9f2:	d007      	beq.n	800da04 <__any_on+0x26>
 800d9f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9f8:	fa24 f001 	lsr.w	r0, r4, r1
 800d9fc:	fa00 f101 	lsl.w	r1, r0, r1
 800da00:	428c      	cmp	r4, r1
 800da02:	d10b      	bne.n	800da1c <__any_on+0x3e>
 800da04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da08:	4293      	cmp	r3, r2
 800da0a:	d803      	bhi.n	800da14 <__any_on+0x36>
 800da0c:	2000      	movs	r0, #0
 800da0e:	bd10      	pop	{r4, pc}
 800da10:	4603      	mov	r3, r0
 800da12:	e7f7      	b.n	800da04 <__any_on+0x26>
 800da14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da18:	2900      	cmp	r1, #0
 800da1a:	d0f5      	beq.n	800da08 <__any_on+0x2a>
 800da1c:	2001      	movs	r0, #1
 800da1e:	e7f6      	b.n	800da0e <__any_on+0x30>

0800da20 <_strtoul_l.constprop.0>:
 800da20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da24:	4e34      	ldr	r6, [pc, #208]	@ (800daf8 <_strtoul_l.constprop.0+0xd8>)
 800da26:	4686      	mov	lr, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	4628      	mov	r0, r5
 800da2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da30:	5d37      	ldrb	r7, [r6, r4]
 800da32:	f017 0708 	ands.w	r7, r7, #8
 800da36:	d1f8      	bne.n	800da2a <_strtoul_l.constprop.0+0xa>
 800da38:	2c2d      	cmp	r4, #45	@ 0x2d
 800da3a:	d12f      	bne.n	800da9c <_strtoul_l.constprop.0+0x7c>
 800da3c:	782c      	ldrb	r4, [r5, #0]
 800da3e:	2701      	movs	r7, #1
 800da40:	1c85      	adds	r5, r0, #2
 800da42:	f033 0010 	bics.w	r0, r3, #16
 800da46:	d109      	bne.n	800da5c <_strtoul_l.constprop.0+0x3c>
 800da48:	2c30      	cmp	r4, #48	@ 0x30
 800da4a:	d12c      	bne.n	800daa6 <_strtoul_l.constprop.0+0x86>
 800da4c:	7828      	ldrb	r0, [r5, #0]
 800da4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800da52:	2858      	cmp	r0, #88	@ 0x58
 800da54:	d127      	bne.n	800daa6 <_strtoul_l.constprop.0+0x86>
 800da56:	786c      	ldrb	r4, [r5, #1]
 800da58:	2310      	movs	r3, #16
 800da5a:	3502      	adds	r5, #2
 800da5c:	f04f 38ff 	mov.w	r8, #4294967295
 800da60:	2600      	movs	r6, #0
 800da62:	fbb8 f8f3 	udiv	r8, r8, r3
 800da66:	fb03 f908 	mul.w	r9, r3, r8
 800da6a:	ea6f 0909 	mvn.w	r9, r9
 800da6e:	4630      	mov	r0, r6
 800da70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800da74:	f1bc 0f09 	cmp.w	ip, #9
 800da78:	d81c      	bhi.n	800dab4 <_strtoul_l.constprop.0+0x94>
 800da7a:	4664      	mov	r4, ip
 800da7c:	42a3      	cmp	r3, r4
 800da7e:	dd2a      	ble.n	800dad6 <_strtoul_l.constprop.0+0xb6>
 800da80:	f1b6 3fff 	cmp.w	r6, #4294967295
 800da84:	d007      	beq.n	800da96 <_strtoul_l.constprop.0+0x76>
 800da86:	4580      	cmp	r8, r0
 800da88:	d322      	bcc.n	800dad0 <_strtoul_l.constprop.0+0xb0>
 800da8a:	d101      	bne.n	800da90 <_strtoul_l.constprop.0+0x70>
 800da8c:	45a1      	cmp	r9, r4
 800da8e:	db1f      	blt.n	800dad0 <_strtoul_l.constprop.0+0xb0>
 800da90:	fb00 4003 	mla	r0, r0, r3, r4
 800da94:	2601      	movs	r6, #1
 800da96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da9a:	e7e9      	b.n	800da70 <_strtoul_l.constprop.0+0x50>
 800da9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800da9e:	bf04      	itt	eq
 800daa0:	782c      	ldrbeq	r4, [r5, #0]
 800daa2:	1c85      	addeq	r5, r0, #2
 800daa4:	e7cd      	b.n	800da42 <_strtoul_l.constprop.0+0x22>
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1d8      	bne.n	800da5c <_strtoul_l.constprop.0+0x3c>
 800daaa:	2c30      	cmp	r4, #48	@ 0x30
 800daac:	bf0c      	ite	eq
 800daae:	2308      	moveq	r3, #8
 800dab0:	230a      	movne	r3, #10
 800dab2:	e7d3      	b.n	800da5c <_strtoul_l.constprop.0+0x3c>
 800dab4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800dab8:	f1bc 0f19 	cmp.w	ip, #25
 800dabc:	d801      	bhi.n	800dac2 <_strtoul_l.constprop.0+0xa2>
 800dabe:	3c37      	subs	r4, #55	@ 0x37
 800dac0:	e7dc      	b.n	800da7c <_strtoul_l.constprop.0+0x5c>
 800dac2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800dac6:	f1bc 0f19 	cmp.w	ip, #25
 800daca:	d804      	bhi.n	800dad6 <_strtoul_l.constprop.0+0xb6>
 800dacc:	3c57      	subs	r4, #87	@ 0x57
 800dace:	e7d5      	b.n	800da7c <_strtoul_l.constprop.0+0x5c>
 800dad0:	f04f 36ff 	mov.w	r6, #4294967295
 800dad4:	e7df      	b.n	800da96 <_strtoul_l.constprop.0+0x76>
 800dad6:	1c73      	adds	r3, r6, #1
 800dad8:	d106      	bne.n	800dae8 <_strtoul_l.constprop.0+0xc8>
 800dada:	2322      	movs	r3, #34	@ 0x22
 800dadc:	f8ce 3000 	str.w	r3, [lr]
 800dae0:	4630      	mov	r0, r6
 800dae2:	b932      	cbnz	r2, 800daf2 <_strtoul_l.constprop.0+0xd2>
 800dae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae8:	b107      	cbz	r7, 800daec <_strtoul_l.constprop.0+0xcc>
 800daea:	4240      	negs	r0, r0
 800daec:	2a00      	cmp	r2, #0
 800daee:	d0f9      	beq.n	800dae4 <_strtoul_l.constprop.0+0xc4>
 800daf0:	b106      	cbz	r6, 800daf4 <_strtoul_l.constprop.0+0xd4>
 800daf2:	1e69      	subs	r1, r5, #1
 800daf4:	6011      	str	r1, [r2, #0]
 800daf6:	e7f5      	b.n	800dae4 <_strtoul_l.constprop.0+0xc4>
 800daf8:	08010601 	.word	0x08010601

0800dafc <_strtoul_r>:
 800dafc:	f7ff bf90 	b.w	800da20 <_strtoul_l.constprop.0>

0800db00 <strtoul>:
 800db00:	4613      	mov	r3, r2
 800db02:	460a      	mov	r2, r1
 800db04:	4601      	mov	r1, r0
 800db06:	4802      	ldr	r0, [pc, #8]	@ (800db10 <strtoul+0x10>)
 800db08:	6800      	ldr	r0, [r0, #0]
 800db0a:	f7ff bf89 	b.w	800da20 <_strtoul_l.constprop.0>
 800db0e:	bf00      	nop
 800db10:	2000019c 	.word	0x2000019c

0800db14 <__ascii_wctomb>:
 800db14:	4603      	mov	r3, r0
 800db16:	4608      	mov	r0, r1
 800db18:	b141      	cbz	r1, 800db2c <__ascii_wctomb+0x18>
 800db1a:	2aff      	cmp	r2, #255	@ 0xff
 800db1c:	d904      	bls.n	800db28 <__ascii_wctomb+0x14>
 800db1e:	228a      	movs	r2, #138	@ 0x8a
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	4770      	bx	lr
 800db28:	700a      	strb	r2, [r1, #0]
 800db2a:	2001      	movs	r0, #1
 800db2c:	4770      	bx	lr

0800db2e <__ssputs_r>:
 800db2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db32:	688e      	ldr	r6, [r1, #8]
 800db34:	461f      	mov	r7, r3
 800db36:	42be      	cmp	r6, r7
 800db38:	680b      	ldr	r3, [r1, #0]
 800db3a:	4682      	mov	sl, r0
 800db3c:	460c      	mov	r4, r1
 800db3e:	4690      	mov	r8, r2
 800db40:	d82d      	bhi.n	800db9e <__ssputs_r+0x70>
 800db42:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db46:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db4a:	d026      	beq.n	800db9a <__ssputs_r+0x6c>
 800db4c:	6965      	ldr	r5, [r4, #20]
 800db4e:	6909      	ldr	r1, [r1, #16]
 800db50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db54:	eba3 0901 	sub.w	r9, r3, r1
 800db58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db5c:	1c7b      	adds	r3, r7, #1
 800db5e:	444b      	add	r3, r9
 800db60:	106d      	asrs	r5, r5, #1
 800db62:	429d      	cmp	r5, r3
 800db64:	bf38      	it	cc
 800db66:	461d      	movcc	r5, r3
 800db68:	0553      	lsls	r3, r2, #21
 800db6a:	d527      	bpl.n	800dbbc <__ssputs_r+0x8e>
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7fb fab7 	bl	80090e0 <_malloc_r>
 800db72:	4606      	mov	r6, r0
 800db74:	b360      	cbz	r0, 800dbd0 <__ssputs_r+0xa2>
 800db76:	6921      	ldr	r1, [r4, #16]
 800db78:	464a      	mov	r2, r9
 800db7a:	f7fe f850 	bl	800bc1e <memcpy>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	6126      	str	r6, [r4, #16]
 800db8c:	6165      	str	r5, [r4, #20]
 800db8e:	444e      	add	r6, r9
 800db90:	eba5 0509 	sub.w	r5, r5, r9
 800db94:	6026      	str	r6, [r4, #0]
 800db96:	60a5      	str	r5, [r4, #8]
 800db98:	463e      	mov	r6, r7
 800db9a:	42be      	cmp	r6, r7
 800db9c:	d900      	bls.n	800dba0 <__ssputs_r+0x72>
 800db9e:	463e      	mov	r6, r7
 800dba0:	6820      	ldr	r0, [r4, #0]
 800dba2:	4632      	mov	r2, r6
 800dba4:	4641      	mov	r1, r8
 800dba6:	f000 fd52 	bl	800e64e <memmove>
 800dbaa:	68a3      	ldr	r3, [r4, #8]
 800dbac:	1b9b      	subs	r3, r3, r6
 800dbae:	60a3      	str	r3, [r4, #8]
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	4433      	add	r3, r6
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	f000 fda3 	bl	800e708 <_realloc_r>
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d1e0      	bne.n	800db8a <__ssputs_r+0x5c>
 800dbc8:	6921      	ldr	r1, [r4, #16]
 800dbca:	4650      	mov	r0, sl
 800dbcc:	f7fe fe9c 	bl	800c908 <_free_r>
 800dbd0:	230c      	movs	r3, #12
 800dbd2:	f8ca 3000 	str.w	r3, [sl]
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbdc:	81a3      	strh	r3, [r4, #12]
 800dbde:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe2:	e7e9      	b.n	800dbb8 <__ssputs_r+0x8a>

0800dbe4 <_svfiprintf_r>:
 800dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe8:	4698      	mov	r8, r3
 800dbea:	898b      	ldrh	r3, [r1, #12]
 800dbec:	061b      	lsls	r3, r3, #24
 800dbee:	b09d      	sub	sp, #116	@ 0x74
 800dbf0:	4607      	mov	r7, r0
 800dbf2:	460d      	mov	r5, r1
 800dbf4:	4614      	mov	r4, r2
 800dbf6:	d510      	bpl.n	800dc1a <_svfiprintf_r+0x36>
 800dbf8:	690b      	ldr	r3, [r1, #16]
 800dbfa:	b973      	cbnz	r3, 800dc1a <_svfiprintf_r+0x36>
 800dbfc:	2140      	movs	r1, #64	@ 0x40
 800dbfe:	f7fb fa6f 	bl	80090e0 <_malloc_r>
 800dc02:	6028      	str	r0, [r5, #0]
 800dc04:	6128      	str	r0, [r5, #16]
 800dc06:	b930      	cbnz	r0, 800dc16 <_svfiprintf_r+0x32>
 800dc08:	230c      	movs	r3, #12
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	b01d      	add	sp, #116	@ 0x74
 800dc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc16:	2340      	movs	r3, #64	@ 0x40
 800dc18:	616b      	str	r3, [r5, #20]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1e:	2320      	movs	r3, #32
 800dc20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc24:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc28:	2330      	movs	r3, #48	@ 0x30
 800dc2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddc8 <_svfiprintf_r+0x1e4>
 800dc2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc32:	f04f 0901 	mov.w	r9, #1
 800dc36:	4623      	mov	r3, r4
 800dc38:	469a      	mov	sl, r3
 800dc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3e:	b10a      	cbz	r2, 800dc44 <_svfiprintf_r+0x60>
 800dc40:	2a25      	cmp	r2, #37	@ 0x25
 800dc42:	d1f9      	bne.n	800dc38 <_svfiprintf_r+0x54>
 800dc44:	ebba 0b04 	subs.w	fp, sl, r4
 800dc48:	d00b      	beq.n	800dc62 <_svfiprintf_r+0x7e>
 800dc4a:	465b      	mov	r3, fp
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4638      	mov	r0, r7
 800dc52:	f7ff ff6c 	bl	800db2e <__ssputs_r>
 800dc56:	3001      	adds	r0, #1
 800dc58:	f000 80a7 	beq.w	800ddaa <_svfiprintf_r+0x1c6>
 800dc5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc5e:	445a      	add	r2, fp
 800dc60:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc62:	f89a 3000 	ldrb.w	r3, [sl]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 809f 	beq.w	800ddaa <_svfiprintf_r+0x1c6>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc76:	f10a 0a01 	add.w	sl, sl, #1
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	9307      	str	r3, [sp, #28]
 800dc7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc82:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc84:	4654      	mov	r4, sl
 800dc86:	2205      	movs	r2, #5
 800dc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8c:	484e      	ldr	r0, [pc, #312]	@ (800ddc8 <_svfiprintf_r+0x1e4>)
 800dc8e:	f7f2 faaf 	bl	80001f0 <memchr>
 800dc92:	9a04      	ldr	r2, [sp, #16]
 800dc94:	b9d8      	cbnz	r0, 800dcce <_svfiprintf_r+0xea>
 800dc96:	06d0      	lsls	r0, r2, #27
 800dc98:	bf44      	itt	mi
 800dc9a:	2320      	movmi	r3, #32
 800dc9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dca0:	0711      	lsls	r1, r2, #28
 800dca2:	bf44      	itt	mi
 800dca4:	232b      	movmi	r3, #43	@ 0x2b
 800dca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dcae:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcb0:	d015      	beq.n	800dcde <_svfiprintf_r+0xfa>
 800dcb2:	9a07      	ldr	r2, [sp, #28]
 800dcb4:	4654      	mov	r4, sl
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	f04f 0c0a 	mov.w	ip, #10
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc2:	3b30      	subs	r3, #48	@ 0x30
 800dcc4:	2b09      	cmp	r3, #9
 800dcc6:	d94b      	bls.n	800dd60 <_svfiprintf_r+0x17c>
 800dcc8:	b1b0      	cbz	r0, 800dcf8 <_svfiprintf_r+0x114>
 800dcca:	9207      	str	r2, [sp, #28]
 800dccc:	e014      	b.n	800dcf8 <_svfiprintf_r+0x114>
 800dcce:	eba0 0308 	sub.w	r3, r0, r8
 800dcd2:	fa09 f303 	lsl.w	r3, r9, r3
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	9304      	str	r3, [sp, #16]
 800dcda:	46a2      	mov	sl, r4
 800dcdc:	e7d2      	b.n	800dc84 <_svfiprintf_r+0xa0>
 800dcde:	9b03      	ldr	r3, [sp, #12]
 800dce0:	1d19      	adds	r1, r3, #4
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	9103      	str	r1, [sp, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bfbb      	ittet	lt
 800dcea:	425b      	neglt	r3, r3
 800dcec:	f042 0202 	orrlt.w	r2, r2, #2
 800dcf0:	9307      	strge	r3, [sp, #28]
 800dcf2:	9307      	strlt	r3, [sp, #28]
 800dcf4:	bfb8      	it	lt
 800dcf6:	9204      	strlt	r2, [sp, #16]
 800dcf8:	7823      	ldrb	r3, [r4, #0]
 800dcfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcfc:	d10a      	bne.n	800dd14 <_svfiprintf_r+0x130>
 800dcfe:	7863      	ldrb	r3, [r4, #1]
 800dd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd02:	d132      	bne.n	800dd6a <_svfiprintf_r+0x186>
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	1d1a      	adds	r2, r3, #4
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	9203      	str	r2, [sp, #12]
 800dd0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd10:	3402      	adds	r4, #2
 800dd12:	9305      	str	r3, [sp, #20]
 800dd14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddd8 <_svfiprintf_r+0x1f4>
 800dd18:	7821      	ldrb	r1, [r4, #0]
 800dd1a:	2203      	movs	r2, #3
 800dd1c:	4650      	mov	r0, sl
 800dd1e:	f7f2 fa67 	bl	80001f0 <memchr>
 800dd22:	b138      	cbz	r0, 800dd34 <_svfiprintf_r+0x150>
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	eba0 000a 	sub.w	r0, r0, sl
 800dd2a:	2240      	movs	r2, #64	@ 0x40
 800dd2c:	4082      	lsls	r2, r0
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	3401      	adds	r4, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd38:	4824      	ldr	r0, [pc, #144]	@ (800ddcc <_svfiprintf_r+0x1e8>)
 800dd3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd3e:	2206      	movs	r2, #6
 800dd40:	f7f2 fa56 	bl	80001f0 <memchr>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d036      	beq.n	800ddb6 <_svfiprintf_r+0x1d2>
 800dd48:	4b21      	ldr	r3, [pc, #132]	@ (800ddd0 <_svfiprintf_r+0x1ec>)
 800dd4a:	bb1b      	cbnz	r3, 800dd94 <_svfiprintf_r+0x1b0>
 800dd4c:	9b03      	ldr	r3, [sp, #12]
 800dd4e:	3307      	adds	r3, #7
 800dd50:	f023 0307 	bic.w	r3, r3, #7
 800dd54:	3308      	adds	r3, #8
 800dd56:	9303      	str	r3, [sp, #12]
 800dd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd5a:	4433      	add	r3, r6
 800dd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd5e:	e76a      	b.n	800dc36 <_svfiprintf_r+0x52>
 800dd60:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd64:	460c      	mov	r4, r1
 800dd66:	2001      	movs	r0, #1
 800dd68:	e7a8      	b.n	800dcbc <_svfiprintf_r+0xd8>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	3401      	adds	r4, #1
 800dd6e:	9305      	str	r3, [sp, #20]
 800dd70:	4619      	mov	r1, r3
 800dd72:	f04f 0c0a 	mov.w	ip, #10
 800dd76:	4620      	mov	r0, r4
 800dd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd7c:	3a30      	subs	r2, #48	@ 0x30
 800dd7e:	2a09      	cmp	r2, #9
 800dd80:	d903      	bls.n	800dd8a <_svfiprintf_r+0x1a6>
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d0c6      	beq.n	800dd14 <_svfiprintf_r+0x130>
 800dd86:	9105      	str	r1, [sp, #20]
 800dd88:	e7c4      	b.n	800dd14 <_svfiprintf_r+0x130>
 800dd8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd8e:	4604      	mov	r4, r0
 800dd90:	2301      	movs	r3, #1
 800dd92:	e7f0      	b.n	800dd76 <_svfiprintf_r+0x192>
 800dd94:	ab03      	add	r3, sp, #12
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	462a      	mov	r2, r5
 800dd9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ddd4 <_svfiprintf_r+0x1f0>)
 800dd9c:	a904      	add	r1, sp, #16
 800dd9e:	4638      	mov	r0, r7
 800dda0:	f7fc f95a 	bl	800a058 <_printf_float>
 800dda4:	1c42      	adds	r2, r0, #1
 800dda6:	4606      	mov	r6, r0
 800dda8:	d1d6      	bne.n	800dd58 <_svfiprintf_r+0x174>
 800ddaa:	89ab      	ldrh	r3, [r5, #12]
 800ddac:	065b      	lsls	r3, r3, #25
 800ddae:	f53f af2d 	bmi.w	800dc0c <_svfiprintf_r+0x28>
 800ddb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddb4:	e72c      	b.n	800dc10 <_svfiprintf_r+0x2c>
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	462a      	mov	r2, r5
 800ddbc:	4b05      	ldr	r3, [pc, #20]	@ (800ddd4 <_svfiprintf_r+0x1f0>)
 800ddbe:	a904      	add	r1, sp, #16
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f7fc fbe1 	bl	800a588 <_printf_i>
 800ddc6:	e7ed      	b.n	800dda4 <_svfiprintf_r+0x1c0>
 800ddc8:	08010a30 	.word	0x08010a30
 800ddcc:	08010a3a 	.word	0x08010a3a
 800ddd0:	0800a059 	.word	0x0800a059
 800ddd4:	0800db2f 	.word	0x0800db2f
 800ddd8:	08010a36 	.word	0x08010a36

0800dddc <_sungetc_r>:
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	1c4b      	adds	r3, r1, #1
 800dde0:	4614      	mov	r4, r2
 800dde2:	d103      	bne.n	800ddec <_sungetc_r+0x10>
 800dde4:	f04f 35ff 	mov.w	r5, #4294967295
 800dde8:	4628      	mov	r0, r5
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	8993      	ldrh	r3, [r2, #12]
 800ddee:	f023 0320 	bic.w	r3, r3, #32
 800ddf2:	8193      	strh	r3, [r2, #12]
 800ddf4:	6853      	ldr	r3, [r2, #4]
 800ddf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ddf8:	b2cd      	uxtb	r5, r1
 800ddfa:	b18a      	cbz	r2, 800de20 <_sungetc_r+0x44>
 800ddfc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ddfe:	429a      	cmp	r2, r3
 800de00:	dd08      	ble.n	800de14 <_sungetc_r+0x38>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	1e5a      	subs	r2, r3, #1
 800de06:	6022      	str	r2, [r4, #0]
 800de08:	f803 5c01 	strb.w	r5, [r3, #-1]
 800de0c:	6863      	ldr	r3, [r4, #4]
 800de0e:	3301      	adds	r3, #1
 800de10:	6063      	str	r3, [r4, #4]
 800de12:	e7e9      	b.n	800dde8 <_sungetc_r+0xc>
 800de14:	4621      	mov	r1, r4
 800de16:	f000 fbe0 	bl	800e5da <__submore>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d0f1      	beq.n	800de02 <_sungetc_r+0x26>
 800de1e:	e7e1      	b.n	800dde4 <_sungetc_r+0x8>
 800de20:	6921      	ldr	r1, [r4, #16]
 800de22:	6822      	ldr	r2, [r4, #0]
 800de24:	b141      	cbz	r1, 800de38 <_sungetc_r+0x5c>
 800de26:	4291      	cmp	r1, r2
 800de28:	d206      	bcs.n	800de38 <_sungetc_r+0x5c>
 800de2a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800de2e:	42a9      	cmp	r1, r5
 800de30:	d102      	bne.n	800de38 <_sungetc_r+0x5c>
 800de32:	3a01      	subs	r2, #1
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	e7ea      	b.n	800de0e <_sungetc_r+0x32>
 800de38:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800de3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de40:	6363      	str	r3, [r4, #52]	@ 0x34
 800de42:	2303      	movs	r3, #3
 800de44:	63a3      	str	r3, [r4, #56]	@ 0x38
 800de46:	4623      	mov	r3, r4
 800de48:	f803 5f46 	strb.w	r5, [r3, #70]!
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	2301      	movs	r3, #1
 800de50:	e7de      	b.n	800de10 <_sungetc_r+0x34>

0800de52 <__ssrefill_r>:
 800de52:	b510      	push	{r4, lr}
 800de54:	460c      	mov	r4, r1
 800de56:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800de58:	b169      	cbz	r1, 800de76 <__ssrefill_r+0x24>
 800de5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de5e:	4299      	cmp	r1, r3
 800de60:	d001      	beq.n	800de66 <__ssrefill_r+0x14>
 800de62:	f7fe fd51 	bl	800c908 <_free_r>
 800de66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de68:	6063      	str	r3, [r4, #4]
 800de6a:	2000      	movs	r0, #0
 800de6c:	6360      	str	r0, [r4, #52]	@ 0x34
 800de6e:	b113      	cbz	r3, 800de76 <__ssrefill_r+0x24>
 800de70:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	bd10      	pop	{r4, pc}
 800de76:	6923      	ldr	r3, [r4, #16]
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	2300      	movs	r3, #0
 800de7c:	6063      	str	r3, [r4, #4]
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	f043 0320 	orr.w	r3, r3, #32
 800de84:	81a3      	strh	r3, [r4, #12]
 800de86:	f04f 30ff 	mov.w	r0, #4294967295
 800de8a:	e7f3      	b.n	800de74 <__ssrefill_r+0x22>

0800de8c <__ssvfiscanf_r>:
 800de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	460c      	mov	r4, r1
 800de92:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800de96:	2100      	movs	r1, #0
 800de98:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800de9c:	49a5      	ldr	r1, [pc, #660]	@ (800e134 <__ssvfiscanf_r+0x2a8>)
 800de9e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800dea0:	f10d 0804 	add.w	r8, sp, #4
 800dea4:	49a4      	ldr	r1, [pc, #656]	@ (800e138 <__ssvfiscanf_r+0x2ac>)
 800dea6:	4fa5      	ldr	r7, [pc, #660]	@ (800e13c <__ssvfiscanf_r+0x2b0>)
 800dea8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800deac:	4606      	mov	r6, r0
 800deae:	91a1      	str	r1, [sp, #644]	@ 0x284
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	7813      	ldrb	r3, [r2, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 8158 	beq.w	800e16a <__ssvfiscanf_r+0x2de>
 800deba:	5cf9      	ldrb	r1, [r7, r3]
 800debc:	f011 0108 	ands.w	r1, r1, #8
 800dec0:	f102 0501 	add.w	r5, r2, #1
 800dec4:	d019      	beq.n	800defa <__ssvfiscanf_r+0x6e>
 800dec6:	6863      	ldr	r3, [r4, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dd0f      	ble.n	800deec <__ssvfiscanf_r+0x60>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	5cba      	ldrb	r2, [r7, r2]
 800ded2:	0712      	lsls	r2, r2, #28
 800ded4:	d401      	bmi.n	800deda <__ssvfiscanf_r+0x4e>
 800ded6:	462a      	mov	r2, r5
 800ded8:	e7eb      	b.n	800deb2 <__ssvfiscanf_r+0x26>
 800deda:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dedc:	3201      	adds	r2, #1
 800dede:	9245      	str	r2, [sp, #276]	@ 0x114
 800dee0:	6862      	ldr	r2, [r4, #4]
 800dee2:	3301      	adds	r3, #1
 800dee4:	3a01      	subs	r2, #1
 800dee6:	6062      	str	r2, [r4, #4]
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	e7ec      	b.n	800dec6 <__ssvfiscanf_r+0x3a>
 800deec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800deee:	4621      	mov	r1, r4
 800def0:	4630      	mov	r0, r6
 800def2:	4798      	blx	r3
 800def4:	2800      	cmp	r0, #0
 800def6:	d0e9      	beq.n	800decc <__ssvfiscanf_r+0x40>
 800def8:	e7ed      	b.n	800ded6 <__ssvfiscanf_r+0x4a>
 800defa:	2b25      	cmp	r3, #37	@ 0x25
 800defc:	d012      	beq.n	800df24 <__ssvfiscanf_r+0x98>
 800defe:	4699      	mov	r9, r3
 800df00:	6863      	ldr	r3, [r4, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f340 8093 	ble.w	800e02e <__ssvfiscanf_r+0x1a2>
 800df08:	6822      	ldr	r2, [r4, #0]
 800df0a:	7813      	ldrb	r3, [r2, #0]
 800df0c:	454b      	cmp	r3, r9
 800df0e:	f040 812c 	bne.w	800e16a <__ssvfiscanf_r+0x2de>
 800df12:	6863      	ldr	r3, [r4, #4]
 800df14:	3b01      	subs	r3, #1
 800df16:	6063      	str	r3, [r4, #4]
 800df18:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800df1a:	3201      	adds	r2, #1
 800df1c:	3301      	adds	r3, #1
 800df1e:	6022      	str	r2, [r4, #0]
 800df20:	9345      	str	r3, [sp, #276]	@ 0x114
 800df22:	e7d8      	b.n	800ded6 <__ssvfiscanf_r+0x4a>
 800df24:	9141      	str	r1, [sp, #260]	@ 0x104
 800df26:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df28:	7853      	ldrb	r3, [r2, #1]
 800df2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df2c:	bf02      	ittt	eq
 800df2e:	2310      	moveq	r3, #16
 800df30:	1c95      	addeq	r5, r2, #2
 800df32:	9341      	streq	r3, [sp, #260]	@ 0x104
 800df34:	220a      	movs	r2, #10
 800df36:	46a9      	mov	r9, r5
 800df38:	f819 1b01 	ldrb.w	r1, [r9], #1
 800df3c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800df40:	2b09      	cmp	r3, #9
 800df42:	d91e      	bls.n	800df82 <__ssvfiscanf_r+0xf6>
 800df44:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e140 <__ssvfiscanf_r+0x2b4>
 800df48:	2203      	movs	r2, #3
 800df4a:	4650      	mov	r0, sl
 800df4c:	f7f2 f950 	bl	80001f0 <memchr>
 800df50:	b138      	cbz	r0, 800df62 <__ssvfiscanf_r+0xd6>
 800df52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df54:	eba0 000a 	sub.w	r0, r0, sl
 800df58:	2301      	movs	r3, #1
 800df5a:	4083      	lsls	r3, r0
 800df5c:	4313      	orrs	r3, r2
 800df5e:	9341      	str	r3, [sp, #260]	@ 0x104
 800df60:	464d      	mov	r5, r9
 800df62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df66:	2b78      	cmp	r3, #120	@ 0x78
 800df68:	d806      	bhi.n	800df78 <__ssvfiscanf_r+0xec>
 800df6a:	2b57      	cmp	r3, #87	@ 0x57
 800df6c:	d810      	bhi.n	800df90 <__ssvfiscanf_r+0x104>
 800df6e:	2b25      	cmp	r3, #37	@ 0x25
 800df70:	d0c5      	beq.n	800defe <__ssvfiscanf_r+0x72>
 800df72:	d857      	bhi.n	800e024 <__ssvfiscanf_r+0x198>
 800df74:	2b00      	cmp	r3, #0
 800df76:	d065      	beq.n	800e044 <__ssvfiscanf_r+0x1b8>
 800df78:	2303      	movs	r3, #3
 800df7a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800df7c:	230a      	movs	r3, #10
 800df7e:	9342      	str	r3, [sp, #264]	@ 0x108
 800df80:	e078      	b.n	800e074 <__ssvfiscanf_r+0x1e8>
 800df82:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800df84:	fb02 1103 	mla	r1, r2, r3, r1
 800df88:	3930      	subs	r1, #48	@ 0x30
 800df8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df8c:	464d      	mov	r5, r9
 800df8e:	e7d2      	b.n	800df36 <__ssvfiscanf_r+0xaa>
 800df90:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800df94:	2a20      	cmp	r2, #32
 800df96:	d8ef      	bhi.n	800df78 <__ssvfiscanf_r+0xec>
 800df98:	a101      	add	r1, pc, #4	@ (adr r1, 800dfa0 <__ssvfiscanf_r+0x114>)
 800df9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df9e:	bf00      	nop
 800dfa0:	0800e053 	.word	0x0800e053
 800dfa4:	0800df79 	.word	0x0800df79
 800dfa8:	0800df79 	.word	0x0800df79
 800dfac:	0800e0ad 	.word	0x0800e0ad
 800dfb0:	0800df79 	.word	0x0800df79
 800dfb4:	0800df79 	.word	0x0800df79
 800dfb8:	0800df79 	.word	0x0800df79
 800dfbc:	0800df79 	.word	0x0800df79
 800dfc0:	0800df79 	.word	0x0800df79
 800dfc4:	0800df79 	.word	0x0800df79
 800dfc8:	0800df79 	.word	0x0800df79
 800dfcc:	0800e0c3 	.word	0x0800e0c3
 800dfd0:	0800e0a9 	.word	0x0800e0a9
 800dfd4:	0800e02b 	.word	0x0800e02b
 800dfd8:	0800e02b 	.word	0x0800e02b
 800dfdc:	0800e02b 	.word	0x0800e02b
 800dfe0:	0800df79 	.word	0x0800df79
 800dfe4:	0800e065 	.word	0x0800e065
 800dfe8:	0800df79 	.word	0x0800df79
 800dfec:	0800df79 	.word	0x0800df79
 800dff0:	0800df79 	.word	0x0800df79
 800dff4:	0800df79 	.word	0x0800df79
 800dff8:	0800e0d3 	.word	0x0800e0d3
 800dffc:	0800e06d 	.word	0x0800e06d
 800e000:	0800e04b 	.word	0x0800e04b
 800e004:	0800df79 	.word	0x0800df79
 800e008:	0800df79 	.word	0x0800df79
 800e00c:	0800e0cf 	.word	0x0800e0cf
 800e010:	0800df79 	.word	0x0800df79
 800e014:	0800e0a9 	.word	0x0800e0a9
 800e018:	0800df79 	.word	0x0800df79
 800e01c:	0800df79 	.word	0x0800df79
 800e020:	0800e053 	.word	0x0800e053
 800e024:	3b45      	subs	r3, #69	@ 0x45
 800e026:	2b02      	cmp	r3, #2
 800e028:	d8a6      	bhi.n	800df78 <__ssvfiscanf_r+0xec>
 800e02a:	2305      	movs	r3, #5
 800e02c:	e021      	b.n	800e072 <__ssvfiscanf_r+0x1e6>
 800e02e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e030:	4621      	mov	r1, r4
 800e032:	4630      	mov	r0, r6
 800e034:	4798      	blx	r3
 800e036:	2800      	cmp	r0, #0
 800e038:	f43f af66 	beq.w	800df08 <__ssvfiscanf_r+0x7c>
 800e03c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e03e:	2800      	cmp	r0, #0
 800e040:	f040 808b 	bne.w	800e15a <__ssvfiscanf_r+0x2ce>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295
 800e048:	e08b      	b.n	800e162 <__ssvfiscanf_r+0x2d6>
 800e04a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e04c:	f042 0220 	orr.w	r2, r2, #32
 800e050:	9241      	str	r2, [sp, #260]	@ 0x104
 800e052:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e058:	9241      	str	r2, [sp, #260]	@ 0x104
 800e05a:	2210      	movs	r2, #16
 800e05c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e05e:	9242      	str	r2, [sp, #264]	@ 0x108
 800e060:	d902      	bls.n	800e068 <__ssvfiscanf_r+0x1dc>
 800e062:	e005      	b.n	800e070 <__ssvfiscanf_r+0x1e4>
 800e064:	2300      	movs	r3, #0
 800e066:	9342      	str	r3, [sp, #264]	@ 0x108
 800e068:	2303      	movs	r3, #3
 800e06a:	e002      	b.n	800e072 <__ssvfiscanf_r+0x1e6>
 800e06c:	2308      	movs	r3, #8
 800e06e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e070:	2304      	movs	r3, #4
 800e072:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e074:	6863      	ldr	r3, [r4, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	dd39      	ble.n	800e0ee <__ssvfiscanf_r+0x262>
 800e07a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e07c:	0659      	lsls	r1, r3, #25
 800e07e:	d404      	bmi.n	800e08a <__ssvfiscanf_r+0x1fe>
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	5cba      	ldrb	r2, [r7, r2]
 800e086:	0712      	lsls	r2, r2, #28
 800e088:	d438      	bmi.n	800e0fc <__ssvfiscanf_r+0x270>
 800e08a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	dc47      	bgt.n	800e120 <__ssvfiscanf_r+0x294>
 800e090:	466b      	mov	r3, sp
 800e092:	4622      	mov	r2, r4
 800e094:	a941      	add	r1, sp, #260	@ 0x104
 800e096:	4630      	mov	r0, r6
 800e098:	f000 f86c 	bl	800e174 <_scanf_chars>
 800e09c:	2801      	cmp	r0, #1
 800e09e:	d064      	beq.n	800e16a <__ssvfiscanf_r+0x2de>
 800e0a0:	2802      	cmp	r0, #2
 800e0a2:	f47f af18 	bne.w	800ded6 <__ssvfiscanf_r+0x4a>
 800e0a6:	e7c9      	b.n	800e03c <__ssvfiscanf_r+0x1b0>
 800e0a8:	220a      	movs	r2, #10
 800e0aa:	e7d7      	b.n	800e05c <__ssvfiscanf_r+0x1d0>
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	f000 fa5a 	bl	800e568 <__sccl>
 800e0b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ba:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0bc:	4605      	mov	r5, r0
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e7d7      	b.n	800e072 <__ssvfiscanf_r+0x1e6>
 800e0c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0c8:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e7d1      	b.n	800e072 <__ssvfiscanf_r+0x1e6>
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	e7cf      	b.n	800e072 <__ssvfiscanf_r+0x1e6>
 800e0d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e0d4:	06c3      	lsls	r3, r0, #27
 800e0d6:	f53f aefe 	bmi.w	800ded6 <__ssvfiscanf_r+0x4a>
 800e0da:	9b00      	ldr	r3, [sp, #0]
 800e0dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e0de:	1d19      	adds	r1, r3, #4
 800e0e0:	9100      	str	r1, [sp, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	07c0      	lsls	r0, r0, #31
 800e0e6:	bf4c      	ite	mi
 800e0e8:	801a      	strhmi	r2, [r3, #0]
 800e0ea:	601a      	strpl	r2, [r3, #0]
 800e0ec:	e6f3      	b.n	800ded6 <__ssvfiscanf_r+0x4a>
 800e0ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e0f0:	4621      	mov	r1, r4
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4798      	blx	r3
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d0bf      	beq.n	800e07a <__ssvfiscanf_r+0x1ee>
 800e0fa:	e79f      	b.n	800e03c <__ssvfiscanf_r+0x1b0>
 800e0fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e0fe:	3201      	adds	r2, #1
 800e100:	9245      	str	r2, [sp, #276]	@ 0x114
 800e102:	6862      	ldr	r2, [r4, #4]
 800e104:	3a01      	subs	r2, #1
 800e106:	2a00      	cmp	r2, #0
 800e108:	6062      	str	r2, [r4, #4]
 800e10a:	dd02      	ble.n	800e112 <__ssvfiscanf_r+0x286>
 800e10c:	3301      	adds	r3, #1
 800e10e:	6023      	str	r3, [r4, #0]
 800e110:	e7b6      	b.n	800e080 <__ssvfiscanf_r+0x1f4>
 800e112:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e114:	4621      	mov	r1, r4
 800e116:	4630      	mov	r0, r6
 800e118:	4798      	blx	r3
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d0b0      	beq.n	800e080 <__ssvfiscanf_r+0x1f4>
 800e11e:	e78d      	b.n	800e03c <__ssvfiscanf_r+0x1b0>
 800e120:	2b04      	cmp	r3, #4
 800e122:	dc0f      	bgt.n	800e144 <__ssvfiscanf_r+0x2b8>
 800e124:	466b      	mov	r3, sp
 800e126:	4622      	mov	r2, r4
 800e128:	a941      	add	r1, sp, #260	@ 0x104
 800e12a:	4630      	mov	r0, r6
 800e12c:	f000 f87c 	bl	800e228 <_scanf_i>
 800e130:	e7b4      	b.n	800e09c <__ssvfiscanf_r+0x210>
 800e132:	bf00      	nop
 800e134:	0800dddd 	.word	0x0800dddd
 800e138:	0800de53 	.word	0x0800de53
 800e13c:	08010601 	.word	0x08010601
 800e140:	08010a36 	.word	0x08010a36
 800e144:	4b0a      	ldr	r3, [pc, #40]	@ (800e170 <__ssvfiscanf_r+0x2e4>)
 800e146:	2b00      	cmp	r3, #0
 800e148:	f43f aec5 	beq.w	800ded6 <__ssvfiscanf_r+0x4a>
 800e14c:	466b      	mov	r3, sp
 800e14e:	4622      	mov	r2, r4
 800e150:	a941      	add	r1, sp, #260	@ 0x104
 800e152:	4630      	mov	r0, r6
 800e154:	f7fc fb38 	bl	800a7c8 <_scanf_float>
 800e158:	e7a0      	b.n	800e09c <__ssvfiscanf_r+0x210>
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	065b      	lsls	r3, r3, #25
 800e15e:	f53f af71 	bmi.w	800e044 <__ssvfiscanf_r+0x1b8>
 800e162:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e16c:	e7f9      	b.n	800e162 <__ssvfiscanf_r+0x2d6>
 800e16e:	bf00      	nop
 800e170:	0800a7c9 	.word	0x0800a7c9

0800e174 <_scanf_chars>:
 800e174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e178:	4615      	mov	r5, r2
 800e17a:	688a      	ldr	r2, [r1, #8]
 800e17c:	4680      	mov	r8, r0
 800e17e:	460c      	mov	r4, r1
 800e180:	b932      	cbnz	r2, 800e190 <_scanf_chars+0x1c>
 800e182:	698a      	ldr	r2, [r1, #24]
 800e184:	2a00      	cmp	r2, #0
 800e186:	bf14      	ite	ne
 800e188:	f04f 32ff 	movne.w	r2, #4294967295
 800e18c:	2201      	moveq	r2, #1
 800e18e:	608a      	str	r2, [r1, #8]
 800e190:	6822      	ldr	r2, [r4, #0]
 800e192:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e224 <_scanf_chars+0xb0>
 800e196:	06d1      	lsls	r1, r2, #27
 800e198:	bf5f      	itttt	pl
 800e19a:	681a      	ldrpl	r2, [r3, #0]
 800e19c:	1d11      	addpl	r1, r2, #4
 800e19e:	6019      	strpl	r1, [r3, #0]
 800e1a0:	6816      	ldrpl	r6, [r2, #0]
 800e1a2:	2700      	movs	r7, #0
 800e1a4:	69a0      	ldr	r0, [r4, #24]
 800e1a6:	b188      	cbz	r0, 800e1cc <_scanf_chars+0x58>
 800e1a8:	2801      	cmp	r0, #1
 800e1aa:	d107      	bne.n	800e1bc <_scanf_chars+0x48>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	781a      	ldrb	r2, [r3, #0]
 800e1b0:	6963      	ldr	r3, [r4, #20]
 800e1b2:	5c9b      	ldrb	r3, [r3, r2]
 800e1b4:	b953      	cbnz	r3, 800e1cc <_scanf_chars+0x58>
 800e1b6:	2f00      	cmp	r7, #0
 800e1b8:	d031      	beq.n	800e21e <_scanf_chars+0xaa>
 800e1ba:	e022      	b.n	800e202 <_scanf_chars+0x8e>
 800e1bc:	2802      	cmp	r0, #2
 800e1be:	d120      	bne.n	800e202 <_scanf_chars+0x8e>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e1c8:	071b      	lsls	r3, r3, #28
 800e1ca:	d41a      	bmi.n	800e202 <_scanf_chars+0x8e>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	06da      	lsls	r2, r3, #27
 800e1d0:	bf5e      	ittt	pl
 800e1d2:	682b      	ldrpl	r3, [r5, #0]
 800e1d4:	781b      	ldrbpl	r3, [r3, #0]
 800e1d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e1da:	682a      	ldr	r2, [r5, #0]
 800e1dc:	686b      	ldr	r3, [r5, #4]
 800e1de:	3201      	adds	r2, #1
 800e1e0:	602a      	str	r2, [r5, #0]
 800e1e2:	68a2      	ldr	r2, [r4, #8]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	3a01      	subs	r2, #1
 800e1e8:	606b      	str	r3, [r5, #4]
 800e1ea:	3701      	adds	r7, #1
 800e1ec:	60a2      	str	r2, [r4, #8]
 800e1ee:	b142      	cbz	r2, 800e202 <_scanf_chars+0x8e>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dcd7      	bgt.n	800e1a4 <_scanf_chars+0x30>
 800e1f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4798      	blx	r3
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d0d0      	beq.n	800e1a4 <_scanf_chars+0x30>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	f013 0310 	ands.w	r3, r3, #16
 800e208:	d105      	bne.n	800e216 <_scanf_chars+0xa2>
 800e20a:	68e2      	ldr	r2, [r4, #12]
 800e20c:	3201      	adds	r2, #1
 800e20e:	60e2      	str	r2, [r4, #12]
 800e210:	69a2      	ldr	r2, [r4, #24]
 800e212:	b102      	cbz	r2, 800e216 <_scanf_chars+0xa2>
 800e214:	7033      	strb	r3, [r6, #0]
 800e216:	6923      	ldr	r3, [r4, #16]
 800e218:	443b      	add	r3, r7
 800e21a:	6123      	str	r3, [r4, #16]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	bf00      	nop
 800e224:	08010601 	.word	0x08010601

0800e228 <_scanf_i>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	4698      	mov	r8, r3
 800e22e:	4b74      	ldr	r3, [pc, #464]	@ (800e400 <_scanf_i+0x1d8>)
 800e230:	460c      	mov	r4, r1
 800e232:	4682      	mov	sl, r0
 800e234:	4616      	mov	r6, r2
 800e236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e23a:	b087      	sub	sp, #28
 800e23c:	ab03      	add	r3, sp, #12
 800e23e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e242:	4b70      	ldr	r3, [pc, #448]	@ (800e404 <_scanf_i+0x1dc>)
 800e244:	69a1      	ldr	r1, [r4, #24]
 800e246:	4a70      	ldr	r2, [pc, #448]	@ (800e408 <_scanf_i+0x1e0>)
 800e248:	2903      	cmp	r1, #3
 800e24a:	bf08      	it	eq
 800e24c:	461a      	moveq	r2, r3
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	9201      	str	r2, [sp, #4]
 800e252:	1e5a      	subs	r2, r3, #1
 800e254:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e258:	bf88      	it	hi
 800e25a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e25e:	4627      	mov	r7, r4
 800e260:	bf82      	ittt	hi
 800e262:	eb03 0905 	addhi.w	r9, r3, r5
 800e266:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e26a:	60a3      	strhi	r3, [r4, #8]
 800e26c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e270:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e274:	bf98      	it	ls
 800e276:	f04f 0900 	movls.w	r9, #0
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	463d      	mov	r5, r7
 800e27e:	f04f 0b00 	mov.w	fp, #0
 800e282:	6831      	ldr	r1, [r6, #0]
 800e284:	ab03      	add	r3, sp, #12
 800e286:	7809      	ldrb	r1, [r1, #0]
 800e288:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f7f1 ffaf 	bl	80001f0 <memchr>
 800e292:	b328      	cbz	r0, 800e2e0 <_scanf_i+0xb8>
 800e294:	f1bb 0f01 	cmp.w	fp, #1
 800e298:	d159      	bne.n	800e34e <_scanf_i+0x126>
 800e29a:	6862      	ldr	r2, [r4, #4]
 800e29c:	b92a      	cbnz	r2, 800e2aa <_scanf_i+0x82>
 800e29e:	6822      	ldr	r2, [r4, #0]
 800e2a0:	2108      	movs	r1, #8
 800e2a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2a6:	6061      	str	r1, [r4, #4]
 800e2a8:	6022      	str	r2, [r4, #0]
 800e2aa:	6822      	ldr	r2, [r4, #0]
 800e2ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e2b0:	6022      	str	r2, [r4, #0]
 800e2b2:	68a2      	ldr	r2, [r4, #8]
 800e2b4:	1e51      	subs	r1, r2, #1
 800e2b6:	60a1      	str	r1, [r4, #8]
 800e2b8:	b192      	cbz	r2, 800e2e0 <_scanf_i+0xb8>
 800e2ba:	6832      	ldr	r2, [r6, #0]
 800e2bc:	1c51      	adds	r1, r2, #1
 800e2be:	6031      	str	r1, [r6, #0]
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	f805 2b01 	strb.w	r2, [r5], #1
 800e2c6:	6872      	ldr	r2, [r6, #4]
 800e2c8:	3a01      	subs	r2, #1
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	6072      	str	r2, [r6, #4]
 800e2ce:	dc07      	bgt.n	800e2e0 <_scanf_i+0xb8>
 800e2d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	4650      	mov	r0, sl
 800e2d8:	4790      	blx	r2
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	f040 8085 	bne.w	800e3ea <_scanf_i+0x1c2>
 800e2e0:	f10b 0b01 	add.w	fp, fp, #1
 800e2e4:	f1bb 0f03 	cmp.w	fp, #3
 800e2e8:	d1cb      	bne.n	800e282 <_scanf_i+0x5a>
 800e2ea:	6863      	ldr	r3, [r4, #4]
 800e2ec:	b90b      	cbnz	r3, 800e2f2 <_scanf_i+0xca>
 800e2ee:	230a      	movs	r3, #10
 800e2f0:	6063      	str	r3, [r4, #4]
 800e2f2:	6863      	ldr	r3, [r4, #4]
 800e2f4:	4945      	ldr	r1, [pc, #276]	@ (800e40c <_scanf_i+0x1e4>)
 800e2f6:	6960      	ldr	r0, [r4, #20]
 800e2f8:	1ac9      	subs	r1, r1, r3
 800e2fa:	f000 f935 	bl	800e568 <__sccl>
 800e2fe:	f04f 0b00 	mov.w	fp, #0
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	6822      	ldr	r2, [r4, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d03d      	beq.n	800e386 <_scanf_i+0x15e>
 800e30a:	6831      	ldr	r1, [r6, #0]
 800e30c:	6960      	ldr	r0, [r4, #20]
 800e30e:	f891 c000 	ldrb.w	ip, [r1]
 800e312:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e316:	2800      	cmp	r0, #0
 800e318:	d035      	beq.n	800e386 <_scanf_i+0x15e>
 800e31a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e31e:	d124      	bne.n	800e36a <_scanf_i+0x142>
 800e320:	0510      	lsls	r0, r2, #20
 800e322:	d522      	bpl.n	800e36a <_scanf_i+0x142>
 800e324:	f10b 0b01 	add.w	fp, fp, #1
 800e328:	f1b9 0f00 	cmp.w	r9, #0
 800e32c:	d003      	beq.n	800e336 <_scanf_i+0x10e>
 800e32e:	3301      	adds	r3, #1
 800e330:	f109 39ff 	add.w	r9, r9, #4294967295
 800e334:	60a3      	str	r3, [r4, #8]
 800e336:	6873      	ldr	r3, [r6, #4]
 800e338:	3b01      	subs	r3, #1
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	6073      	str	r3, [r6, #4]
 800e33e:	dd1b      	ble.n	800e378 <_scanf_i+0x150>
 800e340:	6833      	ldr	r3, [r6, #0]
 800e342:	3301      	adds	r3, #1
 800e344:	6033      	str	r3, [r6, #0]
 800e346:	68a3      	ldr	r3, [r4, #8]
 800e348:	3b01      	subs	r3, #1
 800e34a:	60a3      	str	r3, [r4, #8]
 800e34c:	e7d9      	b.n	800e302 <_scanf_i+0xda>
 800e34e:	f1bb 0f02 	cmp.w	fp, #2
 800e352:	d1ae      	bne.n	800e2b2 <_scanf_i+0x8a>
 800e354:	6822      	ldr	r2, [r4, #0]
 800e356:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e35a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e35e:	d1bf      	bne.n	800e2e0 <_scanf_i+0xb8>
 800e360:	2110      	movs	r1, #16
 800e362:	6061      	str	r1, [r4, #4]
 800e364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e368:	e7a2      	b.n	800e2b0 <_scanf_i+0x88>
 800e36a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e36e:	6022      	str	r2, [r4, #0]
 800e370:	780b      	ldrb	r3, [r1, #0]
 800e372:	f805 3b01 	strb.w	r3, [r5], #1
 800e376:	e7de      	b.n	800e336 <_scanf_i+0x10e>
 800e378:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e37c:	4631      	mov	r1, r6
 800e37e:	4650      	mov	r0, sl
 800e380:	4798      	blx	r3
 800e382:	2800      	cmp	r0, #0
 800e384:	d0df      	beq.n	800e346 <_scanf_i+0x11e>
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	05d9      	lsls	r1, r3, #23
 800e38a:	d50d      	bpl.n	800e3a8 <_scanf_i+0x180>
 800e38c:	42bd      	cmp	r5, r7
 800e38e:	d909      	bls.n	800e3a4 <_scanf_i+0x17c>
 800e390:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e398:	4632      	mov	r2, r6
 800e39a:	4650      	mov	r0, sl
 800e39c:	4798      	blx	r3
 800e39e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e3a2:	464d      	mov	r5, r9
 800e3a4:	42bd      	cmp	r5, r7
 800e3a6:	d028      	beq.n	800e3fa <_scanf_i+0x1d2>
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	f012 0210 	ands.w	r2, r2, #16
 800e3ae:	d113      	bne.n	800e3d8 <_scanf_i+0x1b0>
 800e3b0:	702a      	strb	r2, [r5, #0]
 800e3b2:	6863      	ldr	r3, [r4, #4]
 800e3b4:	9e01      	ldr	r6, [sp, #4]
 800e3b6:	4639      	mov	r1, r7
 800e3b8:	4650      	mov	r0, sl
 800e3ba:	47b0      	blx	r6
 800e3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e3c0:	6821      	ldr	r1, [r4, #0]
 800e3c2:	1d1a      	adds	r2, r3, #4
 800e3c4:	f8c8 2000 	str.w	r2, [r8]
 800e3c8:	f011 0f20 	tst.w	r1, #32
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	d00f      	beq.n	800e3f0 <_scanf_i+0x1c8>
 800e3d0:	6018      	str	r0, [r3, #0]
 800e3d2:	68e3      	ldr	r3, [r4, #12]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	60e3      	str	r3, [r4, #12]
 800e3d8:	6923      	ldr	r3, [r4, #16]
 800e3da:	1bed      	subs	r5, r5, r7
 800e3dc:	445d      	add	r5, fp
 800e3de:	442b      	add	r3, r5
 800e3e0:	6123      	str	r3, [r4, #16]
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	b007      	add	sp, #28
 800e3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ea:	f04f 0b00 	mov.w	fp, #0
 800e3ee:	e7ca      	b.n	800e386 <_scanf_i+0x15e>
 800e3f0:	07ca      	lsls	r2, r1, #31
 800e3f2:	bf4c      	ite	mi
 800e3f4:	8018      	strhmi	r0, [r3, #0]
 800e3f6:	6018      	strpl	r0, [r3, #0]
 800e3f8:	e7eb      	b.n	800e3d2 <_scanf_i+0x1aa>
 800e3fa:	2001      	movs	r0, #1
 800e3fc:	e7f2      	b.n	800e3e4 <_scanf_i+0x1bc>
 800e3fe:	bf00      	nop
 800e400:	0800eeac 	.word	0x0800eeac
 800e404:	08009f01 	.word	0x08009f01
 800e408:	0800dafd 	.word	0x0800dafd
 800e40c:	08010a51 	.word	0x08010a51

0800e410 <__sflush_r>:
 800e410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e418:	0716      	lsls	r6, r2, #28
 800e41a:	4605      	mov	r5, r0
 800e41c:	460c      	mov	r4, r1
 800e41e:	d454      	bmi.n	800e4ca <__sflush_r+0xba>
 800e420:	684b      	ldr	r3, [r1, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	dc02      	bgt.n	800e42c <__sflush_r+0x1c>
 800e426:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dd48      	ble.n	800e4be <__sflush_r+0xae>
 800e42c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e42e:	2e00      	cmp	r6, #0
 800e430:	d045      	beq.n	800e4be <__sflush_r+0xae>
 800e432:	2300      	movs	r3, #0
 800e434:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e438:	682f      	ldr	r7, [r5, #0]
 800e43a:	6a21      	ldr	r1, [r4, #32]
 800e43c:	602b      	str	r3, [r5, #0]
 800e43e:	d030      	beq.n	800e4a2 <__sflush_r+0x92>
 800e440:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	0759      	lsls	r1, r3, #29
 800e446:	d505      	bpl.n	800e454 <__sflush_r+0x44>
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	1ad2      	subs	r2, r2, r3
 800e44c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e44e:	b10b      	cbz	r3, 800e454 <__sflush_r+0x44>
 800e450:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e452:	1ad2      	subs	r2, r2, r3
 800e454:	2300      	movs	r3, #0
 800e456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e458:	6a21      	ldr	r1, [r4, #32]
 800e45a:	4628      	mov	r0, r5
 800e45c:	47b0      	blx	r6
 800e45e:	1c43      	adds	r3, r0, #1
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	d106      	bne.n	800e472 <__sflush_r+0x62>
 800e464:	6829      	ldr	r1, [r5, #0]
 800e466:	291d      	cmp	r1, #29
 800e468:	d82b      	bhi.n	800e4c2 <__sflush_r+0xb2>
 800e46a:	4a2a      	ldr	r2, [pc, #168]	@ (800e514 <__sflush_r+0x104>)
 800e46c:	410a      	asrs	r2, r1
 800e46e:	07d6      	lsls	r6, r2, #31
 800e470:	d427      	bmi.n	800e4c2 <__sflush_r+0xb2>
 800e472:	2200      	movs	r2, #0
 800e474:	6062      	str	r2, [r4, #4]
 800e476:	04d9      	lsls	r1, r3, #19
 800e478:	6922      	ldr	r2, [r4, #16]
 800e47a:	6022      	str	r2, [r4, #0]
 800e47c:	d504      	bpl.n	800e488 <__sflush_r+0x78>
 800e47e:	1c42      	adds	r2, r0, #1
 800e480:	d101      	bne.n	800e486 <__sflush_r+0x76>
 800e482:	682b      	ldr	r3, [r5, #0]
 800e484:	b903      	cbnz	r3, 800e488 <__sflush_r+0x78>
 800e486:	6560      	str	r0, [r4, #84]	@ 0x54
 800e488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e48a:	602f      	str	r7, [r5, #0]
 800e48c:	b1b9      	cbz	r1, 800e4be <__sflush_r+0xae>
 800e48e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e492:	4299      	cmp	r1, r3
 800e494:	d002      	beq.n	800e49c <__sflush_r+0x8c>
 800e496:	4628      	mov	r0, r5
 800e498:	f7fe fa36 	bl	800c908 <_free_r>
 800e49c:	2300      	movs	r3, #0
 800e49e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4a0:	e00d      	b.n	800e4be <__sflush_r+0xae>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b0      	blx	r6
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	1c50      	adds	r0, r2, #1
 800e4ac:	d1c9      	bne.n	800e442 <__sflush_r+0x32>
 800e4ae:	682b      	ldr	r3, [r5, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d0c6      	beq.n	800e442 <__sflush_r+0x32>
 800e4b4:	2b1d      	cmp	r3, #29
 800e4b6:	d001      	beq.n	800e4bc <__sflush_r+0xac>
 800e4b8:	2b16      	cmp	r3, #22
 800e4ba:	d11e      	bne.n	800e4fa <__sflush_r+0xea>
 800e4bc:	602f      	str	r7, [r5, #0]
 800e4be:	2000      	movs	r0, #0
 800e4c0:	e022      	b.n	800e508 <__sflush_r+0xf8>
 800e4c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4c6:	b21b      	sxth	r3, r3
 800e4c8:	e01b      	b.n	800e502 <__sflush_r+0xf2>
 800e4ca:	690f      	ldr	r7, [r1, #16]
 800e4cc:	2f00      	cmp	r7, #0
 800e4ce:	d0f6      	beq.n	800e4be <__sflush_r+0xae>
 800e4d0:	0793      	lsls	r3, r2, #30
 800e4d2:	680e      	ldr	r6, [r1, #0]
 800e4d4:	bf08      	it	eq
 800e4d6:	694b      	ldreq	r3, [r1, #20]
 800e4d8:	600f      	str	r7, [r1, #0]
 800e4da:	bf18      	it	ne
 800e4dc:	2300      	movne	r3, #0
 800e4de:	eba6 0807 	sub.w	r8, r6, r7
 800e4e2:	608b      	str	r3, [r1, #8]
 800e4e4:	f1b8 0f00 	cmp.w	r8, #0
 800e4e8:	dde9      	ble.n	800e4be <__sflush_r+0xae>
 800e4ea:	6a21      	ldr	r1, [r4, #32]
 800e4ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4ee:	4643      	mov	r3, r8
 800e4f0:	463a      	mov	r2, r7
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	47b0      	blx	r6
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	dc08      	bgt.n	800e50c <__sflush_r+0xfc>
 800e4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	f04f 30ff 	mov.w	r0, #4294967295
 800e508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50c:	4407      	add	r7, r0
 800e50e:	eba8 0800 	sub.w	r8, r8, r0
 800e512:	e7e7      	b.n	800e4e4 <__sflush_r+0xd4>
 800e514:	dfbffffe 	.word	0xdfbffffe

0800e518 <_fflush_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	690b      	ldr	r3, [r1, #16]
 800e51c:	4605      	mov	r5, r0
 800e51e:	460c      	mov	r4, r1
 800e520:	b913      	cbnz	r3, 800e528 <_fflush_r+0x10>
 800e522:	2500      	movs	r5, #0
 800e524:	4628      	mov	r0, r5
 800e526:	bd38      	pop	{r3, r4, r5, pc}
 800e528:	b118      	cbz	r0, 800e532 <_fflush_r+0x1a>
 800e52a:	6a03      	ldr	r3, [r0, #32]
 800e52c:	b90b      	cbnz	r3, 800e532 <_fflush_r+0x1a>
 800e52e:	f7fc fbeb 	bl	800ad08 <__sinit>
 800e532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d0f3      	beq.n	800e522 <_fflush_r+0xa>
 800e53a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e53c:	07d0      	lsls	r0, r2, #31
 800e53e:	d404      	bmi.n	800e54a <_fflush_r+0x32>
 800e540:	0599      	lsls	r1, r3, #22
 800e542:	d402      	bmi.n	800e54a <_fflush_r+0x32>
 800e544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e546:	f7fd fb5f 	bl	800bc08 <__retarget_lock_acquire_recursive>
 800e54a:	4628      	mov	r0, r5
 800e54c:	4621      	mov	r1, r4
 800e54e:	f7ff ff5f 	bl	800e410 <__sflush_r>
 800e552:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e554:	07da      	lsls	r2, r3, #31
 800e556:	4605      	mov	r5, r0
 800e558:	d4e4      	bmi.n	800e524 <_fflush_r+0xc>
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	059b      	lsls	r3, r3, #22
 800e55e:	d4e1      	bmi.n	800e524 <_fflush_r+0xc>
 800e560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e562:	f7fd fb53 	bl	800bc0c <__retarget_lock_release_recursive>
 800e566:	e7dd      	b.n	800e524 <_fflush_r+0xc>

0800e568 <__sccl>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	780b      	ldrb	r3, [r1, #0]
 800e56c:	4604      	mov	r4, r0
 800e56e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e570:	bf0b      	itete	eq
 800e572:	784b      	ldrbeq	r3, [r1, #1]
 800e574:	1c4a      	addne	r2, r1, #1
 800e576:	1c8a      	addeq	r2, r1, #2
 800e578:	2100      	movne	r1, #0
 800e57a:	bf08      	it	eq
 800e57c:	2101      	moveq	r1, #1
 800e57e:	3801      	subs	r0, #1
 800e580:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e584:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e588:	42a8      	cmp	r0, r5
 800e58a:	d1fb      	bne.n	800e584 <__sccl+0x1c>
 800e58c:	b90b      	cbnz	r3, 800e592 <__sccl+0x2a>
 800e58e:	1e50      	subs	r0, r2, #1
 800e590:	bd70      	pop	{r4, r5, r6, pc}
 800e592:	f081 0101 	eor.w	r1, r1, #1
 800e596:	54e1      	strb	r1, [r4, r3]
 800e598:	4610      	mov	r0, r2
 800e59a:	4602      	mov	r2, r0
 800e59c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e5a0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e5a2:	d005      	beq.n	800e5b0 <__sccl+0x48>
 800e5a4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e5a6:	d016      	beq.n	800e5d6 <__sccl+0x6e>
 800e5a8:	2d00      	cmp	r5, #0
 800e5aa:	d0f1      	beq.n	800e590 <__sccl+0x28>
 800e5ac:	462b      	mov	r3, r5
 800e5ae:	e7f2      	b.n	800e596 <__sccl+0x2e>
 800e5b0:	7846      	ldrb	r6, [r0, #1]
 800e5b2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e5b4:	d0fa      	beq.n	800e5ac <__sccl+0x44>
 800e5b6:	42b3      	cmp	r3, r6
 800e5b8:	dcf8      	bgt.n	800e5ac <__sccl+0x44>
 800e5ba:	3002      	adds	r0, #2
 800e5bc:	461a      	mov	r2, r3
 800e5be:	3201      	adds	r2, #1
 800e5c0:	4296      	cmp	r6, r2
 800e5c2:	54a1      	strb	r1, [r4, r2]
 800e5c4:	dcfb      	bgt.n	800e5be <__sccl+0x56>
 800e5c6:	1af2      	subs	r2, r6, r3
 800e5c8:	3a01      	subs	r2, #1
 800e5ca:	1c5d      	adds	r5, r3, #1
 800e5cc:	42b3      	cmp	r3, r6
 800e5ce:	bfa8      	it	ge
 800e5d0:	2200      	movge	r2, #0
 800e5d2:	18ab      	adds	r3, r5, r2
 800e5d4:	e7e1      	b.n	800e59a <__sccl+0x32>
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	e7da      	b.n	800e590 <__sccl+0x28>

0800e5da <__submore>:
 800e5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5de:	460c      	mov	r4, r1
 800e5e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e5e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5e6:	4299      	cmp	r1, r3
 800e5e8:	d11d      	bne.n	800e626 <__submore+0x4c>
 800e5ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e5ee:	f7fa fd77 	bl	80090e0 <_malloc_r>
 800e5f2:	b918      	cbnz	r0, 800e5fc <__submore+0x22>
 800e5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e600:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e602:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e606:	6360      	str	r0, [r4, #52]	@ 0x34
 800e608:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e60c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e610:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e614:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e618:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e61c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e620:	6020      	str	r0, [r4, #0]
 800e622:	2000      	movs	r0, #0
 800e624:	e7e8      	b.n	800e5f8 <__submore+0x1e>
 800e626:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e628:	0077      	lsls	r7, r6, #1
 800e62a:	463a      	mov	r2, r7
 800e62c:	f000 f86c 	bl	800e708 <_realloc_r>
 800e630:	4605      	mov	r5, r0
 800e632:	2800      	cmp	r0, #0
 800e634:	d0de      	beq.n	800e5f4 <__submore+0x1a>
 800e636:	eb00 0806 	add.w	r8, r0, r6
 800e63a:	4601      	mov	r1, r0
 800e63c:	4632      	mov	r2, r6
 800e63e:	4640      	mov	r0, r8
 800e640:	f7fd faed 	bl	800bc1e <memcpy>
 800e644:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e648:	f8c4 8000 	str.w	r8, [r4]
 800e64c:	e7e9      	b.n	800e622 <__submore+0x48>

0800e64e <memmove>:
 800e64e:	4288      	cmp	r0, r1
 800e650:	b510      	push	{r4, lr}
 800e652:	eb01 0402 	add.w	r4, r1, r2
 800e656:	d902      	bls.n	800e65e <memmove+0x10>
 800e658:	4284      	cmp	r4, r0
 800e65a:	4623      	mov	r3, r4
 800e65c:	d807      	bhi.n	800e66e <memmove+0x20>
 800e65e:	1e43      	subs	r3, r0, #1
 800e660:	42a1      	cmp	r1, r4
 800e662:	d008      	beq.n	800e676 <memmove+0x28>
 800e664:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e668:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e66c:	e7f8      	b.n	800e660 <memmove+0x12>
 800e66e:	4402      	add	r2, r0
 800e670:	4601      	mov	r1, r0
 800e672:	428a      	cmp	r2, r1
 800e674:	d100      	bne.n	800e678 <memmove+0x2a>
 800e676:	bd10      	pop	{r4, pc}
 800e678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e67c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e680:	e7f7      	b.n	800e672 <memmove+0x24>
	...

0800e684 <__gettzinfo>:
 800e684:	4800      	ldr	r0, [pc, #0]	@ (800e688 <__gettzinfo+0x4>)
 800e686:	4770      	bx	lr
 800e688:	200001f0 	.word	0x200001f0

0800e68c <__assert_func>:
 800e68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e68e:	4614      	mov	r4, r2
 800e690:	461a      	mov	r2, r3
 800e692:	4b09      	ldr	r3, [pc, #36]	@ (800e6b8 <__assert_func+0x2c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4605      	mov	r5, r0
 800e698:	68d8      	ldr	r0, [r3, #12]
 800e69a:	b954      	cbnz	r4, 800e6b2 <__assert_func+0x26>
 800e69c:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <__assert_func+0x30>)
 800e69e:	461c      	mov	r4, r3
 800e6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6a4:	9100      	str	r1, [sp, #0]
 800e6a6:	462b      	mov	r3, r5
 800e6a8:	4905      	ldr	r1, [pc, #20]	@ (800e6c0 <__assert_func+0x34>)
 800e6aa:	f000 f85b 	bl	800e764 <fiprintf>
 800e6ae:	f000 f86b 	bl	800e788 <abort>
 800e6b2:	4b04      	ldr	r3, [pc, #16]	@ (800e6c4 <__assert_func+0x38>)
 800e6b4:	e7f4      	b.n	800e6a0 <__assert_func+0x14>
 800e6b6:	bf00      	nop
 800e6b8:	2000019c 	.word	0x2000019c
 800e6bc:	0800fc59 	.word	0x0800fc59
 800e6c0:	08010ac9 	.word	0x08010ac9
 800e6c4:	08010abc 	.word	0x08010abc

0800e6c8 <_calloc_r>:
 800e6c8:	b570      	push	{r4, r5, r6, lr}
 800e6ca:	fba1 5402 	umull	r5, r4, r1, r2
 800e6ce:	b93c      	cbnz	r4, 800e6e0 <_calloc_r+0x18>
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7fa fd05 	bl	80090e0 <_malloc_r>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	b928      	cbnz	r0, 800e6e6 <_calloc_r+0x1e>
 800e6da:	2600      	movs	r6, #0
 800e6dc:	4630      	mov	r0, r6
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
 800e6e0:	220c      	movs	r2, #12
 800e6e2:	6002      	str	r2, [r0, #0]
 800e6e4:	e7f9      	b.n	800e6da <_calloc_r+0x12>
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	f7fc fc3f 	bl	800af6c <memset>
 800e6ee:	e7f5      	b.n	800e6dc <_calloc_r+0x14>

0800e6f0 <__env_lock>:
 800e6f0:	4801      	ldr	r0, [pc, #4]	@ (800e6f8 <__env_lock+0x8>)
 800e6f2:	f7fd ba89 	b.w	800bc08 <__retarget_lock_acquire_recursive>
 800e6f6:	bf00      	nop
 800e6f8:	20009861 	.word	0x20009861

0800e6fc <__env_unlock>:
 800e6fc:	4801      	ldr	r0, [pc, #4]	@ (800e704 <__env_unlock+0x8>)
 800e6fe:	f7fd ba85 	b.w	800bc0c <__retarget_lock_release_recursive>
 800e702:	bf00      	nop
 800e704:	20009861 	.word	0x20009861

0800e708 <_realloc_r>:
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	4680      	mov	r8, r0
 800e70e:	4615      	mov	r5, r2
 800e710:	460c      	mov	r4, r1
 800e712:	b921      	cbnz	r1, 800e71e <_realloc_r+0x16>
 800e714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e718:	4611      	mov	r1, r2
 800e71a:	f7fa bce1 	b.w	80090e0 <_malloc_r>
 800e71e:	b92a      	cbnz	r2, 800e72c <_realloc_r+0x24>
 800e720:	f7fe f8f2 	bl	800c908 <_free_r>
 800e724:	2400      	movs	r4, #0
 800e726:	4620      	mov	r0, r4
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	f000 f833 	bl	800e796 <_malloc_usable_size_r>
 800e730:	4285      	cmp	r5, r0
 800e732:	4606      	mov	r6, r0
 800e734:	d802      	bhi.n	800e73c <_realloc_r+0x34>
 800e736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e73a:	d8f4      	bhi.n	800e726 <_realloc_r+0x1e>
 800e73c:	4629      	mov	r1, r5
 800e73e:	4640      	mov	r0, r8
 800e740:	f7fa fcce 	bl	80090e0 <_malloc_r>
 800e744:	4607      	mov	r7, r0
 800e746:	2800      	cmp	r0, #0
 800e748:	d0ec      	beq.n	800e724 <_realloc_r+0x1c>
 800e74a:	42b5      	cmp	r5, r6
 800e74c:	462a      	mov	r2, r5
 800e74e:	4621      	mov	r1, r4
 800e750:	bf28      	it	cs
 800e752:	4632      	movcs	r2, r6
 800e754:	f7fd fa63 	bl	800bc1e <memcpy>
 800e758:	4621      	mov	r1, r4
 800e75a:	4640      	mov	r0, r8
 800e75c:	f7fe f8d4 	bl	800c908 <_free_r>
 800e760:	463c      	mov	r4, r7
 800e762:	e7e0      	b.n	800e726 <_realloc_r+0x1e>

0800e764 <fiprintf>:
 800e764:	b40e      	push	{r1, r2, r3}
 800e766:	b503      	push	{r0, r1, lr}
 800e768:	4601      	mov	r1, r0
 800e76a:	ab03      	add	r3, sp, #12
 800e76c:	4805      	ldr	r0, [pc, #20]	@ (800e784 <fiprintf+0x20>)
 800e76e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e772:	6800      	ldr	r0, [r0, #0]
 800e774:	9301      	str	r3, [sp, #4]
 800e776:	f000 f83f 	bl	800e7f8 <_vfiprintf_r>
 800e77a:	b002      	add	sp, #8
 800e77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e780:	b003      	add	sp, #12
 800e782:	4770      	bx	lr
 800e784:	2000019c 	.word	0x2000019c

0800e788 <abort>:
 800e788:	b508      	push	{r3, lr}
 800e78a:	2006      	movs	r0, #6
 800e78c:	f000 fa08 	bl	800eba0 <raise>
 800e790:	2001      	movs	r0, #1
 800e792:	f7f5 ffcd 	bl	8004730 <_exit>

0800e796 <_malloc_usable_size_r>:
 800e796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e79a:	1f18      	subs	r0, r3, #4
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	bfbc      	itt	lt
 800e7a0:	580b      	ldrlt	r3, [r1, r0]
 800e7a2:	18c0      	addlt	r0, r0, r3
 800e7a4:	4770      	bx	lr

0800e7a6 <__sfputc_r>:
 800e7a6:	6893      	ldr	r3, [r2, #8]
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	b410      	push	{r4}
 800e7ae:	6093      	str	r3, [r2, #8]
 800e7b0:	da08      	bge.n	800e7c4 <__sfputc_r+0x1e>
 800e7b2:	6994      	ldr	r4, [r2, #24]
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	db01      	blt.n	800e7bc <__sfputc_r+0x16>
 800e7b8:	290a      	cmp	r1, #10
 800e7ba:	d103      	bne.n	800e7c4 <__sfputc_r+0x1e>
 800e7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c0:	f000 b932 	b.w	800ea28 <__swbuf_r>
 800e7c4:	6813      	ldr	r3, [r2, #0]
 800e7c6:	1c58      	adds	r0, r3, #1
 800e7c8:	6010      	str	r0, [r2, #0]
 800e7ca:	7019      	strb	r1, [r3, #0]
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <__sfputs_r>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460f      	mov	r7, r1
 800e7da:	4614      	mov	r4, r2
 800e7dc:	18d5      	adds	r5, r2, r3
 800e7de:	42ac      	cmp	r4, r5
 800e7e0:	d101      	bne.n	800e7e6 <__sfputs_r+0x12>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e007      	b.n	800e7f6 <__sfputs_r+0x22>
 800e7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ea:	463a      	mov	r2, r7
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7ff ffda 	bl	800e7a6 <__sfputc_r>
 800e7f2:	1c43      	adds	r3, r0, #1
 800e7f4:	d1f3      	bne.n	800e7de <__sfputs_r+0xa>
 800e7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7f8 <_vfiprintf_r>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	460d      	mov	r5, r1
 800e7fe:	b09d      	sub	sp, #116	@ 0x74
 800e800:	4614      	mov	r4, r2
 800e802:	4698      	mov	r8, r3
 800e804:	4606      	mov	r6, r0
 800e806:	b118      	cbz	r0, 800e810 <_vfiprintf_r+0x18>
 800e808:	6a03      	ldr	r3, [r0, #32]
 800e80a:	b90b      	cbnz	r3, 800e810 <_vfiprintf_r+0x18>
 800e80c:	f7fc fa7c 	bl	800ad08 <__sinit>
 800e810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e812:	07d9      	lsls	r1, r3, #31
 800e814:	d405      	bmi.n	800e822 <_vfiprintf_r+0x2a>
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	059a      	lsls	r2, r3, #22
 800e81a:	d402      	bmi.n	800e822 <_vfiprintf_r+0x2a>
 800e81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e81e:	f7fd f9f3 	bl	800bc08 <__retarget_lock_acquire_recursive>
 800e822:	89ab      	ldrh	r3, [r5, #12]
 800e824:	071b      	lsls	r3, r3, #28
 800e826:	d501      	bpl.n	800e82c <_vfiprintf_r+0x34>
 800e828:	692b      	ldr	r3, [r5, #16]
 800e82a:	b99b      	cbnz	r3, 800e854 <_vfiprintf_r+0x5c>
 800e82c:	4629      	mov	r1, r5
 800e82e:	4630      	mov	r0, r6
 800e830:	f000 f938 	bl	800eaa4 <__swsetup_r>
 800e834:	b170      	cbz	r0, 800e854 <_vfiprintf_r+0x5c>
 800e836:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e838:	07dc      	lsls	r4, r3, #31
 800e83a:	d504      	bpl.n	800e846 <_vfiprintf_r+0x4e>
 800e83c:	f04f 30ff 	mov.w	r0, #4294967295
 800e840:	b01d      	add	sp, #116	@ 0x74
 800e842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e846:	89ab      	ldrh	r3, [r5, #12]
 800e848:	0598      	lsls	r0, r3, #22
 800e84a:	d4f7      	bmi.n	800e83c <_vfiprintf_r+0x44>
 800e84c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e84e:	f7fd f9dd 	bl	800bc0c <__retarget_lock_release_recursive>
 800e852:	e7f3      	b.n	800e83c <_vfiprintf_r+0x44>
 800e854:	2300      	movs	r3, #0
 800e856:	9309      	str	r3, [sp, #36]	@ 0x24
 800e858:	2320      	movs	r3, #32
 800e85a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e862:	2330      	movs	r3, #48	@ 0x30
 800e864:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea14 <_vfiprintf_r+0x21c>
 800e868:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e86c:	f04f 0901 	mov.w	r9, #1
 800e870:	4623      	mov	r3, r4
 800e872:	469a      	mov	sl, r3
 800e874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e878:	b10a      	cbz	r2, 800e87e <_vfiprintf_r+0x86>
 800e87a:	2a25      	cmp	r2, #37	@ 0x25
 800e87c:	d1f9      	bne.n	800e872 <_vfiprintf_r+0x7a>
 800e87e:	ebba 0b04 	subs.w	fp, sl, r4
 800e882:	d00b      	beq.n	800e89c <_vfiprintf_r+0xa4>
 800e884:	465b      	mov	r3, fp
 800e886:	4622      	mov	r2, r4
 800e888:	4629      	mov	r1, r5
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff ffa2 	bl	800e7d4 <__sfputs_r>
 800e890:	3001      	adds	r0, #1
 800e892:	f000 80a7 	beq.w	800e9e4 <_vfiprintf_r+0x1ec>
 800e896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e898:	445a      	add	r2, fp
 800e89a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e89c:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 809f 	beq.w	800e9e4 <_vfiprintf_r+0x1ec>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b0:	f10a 0a01 	add.w	sl, sl, #1
 800e8b4:	9304      	str	r3, [sp, #16]
 800e8b6:	9307      	str	r3, [sp, #28]
 800e8b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8be:	4654      	mov	r4, sl
 800e8c0:	2205      	movs	r2, #5
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	4853      	ldr	r0, [pc, #332]	@ (800ea14 <_vfiprintf_r+0x21c>)
 800e8c8:	f7f1 fc92 	bl	80001f0 <memchr>
 800e8cc:	9a04      	ldr	r2, [sp, #16]
 800e8ce:	b9d8      	cbnz	r0, 800e908 <_vfiprintf_r+0x110>
 800e8d0:	06d1      	lsls	r1, r2, #27
 800e8d2:	bf44      	itt	mi
 800e8d4:	2320      	movmi	r3, #32
 800e8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8da:	0713      	lsls	r3, r2, #28
 800e8dc:	bf44      	itt	mi
 800e8de:	232b      	movmi	r3, #43	@ 0x2b
 800e8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8ea:	d015      	beq.n	800e918 <_vfiprintf_r+0x120>
 800e8ec:	9a07      	ldr	r2, [sp, #28]
 800e8ee:	4654      	mov	r4, sl
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	f04f 0c0a 	mov.w	ip, #10
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fc:	3b30      	subs	r3, #48	@ 0x30
 800e8fe:	2b09      	cmp	r3, #9
 800e900:	d94b      	bls.n	800e99a <_vfiprintf_r+0x1a2>
 800e902:	b1b0      	cbz	r0, 800e932 <_vfiprintf_r+0x13a>
 800e904:	9207      	str	r2, [sp, #28]
 800e906:	e014      	b.n	800e932 <_vfiprintf_r+0x13a>
 800e908:	eba0 0308 	sub.w	r3, r0, r8
 800e90c:	fa09 f303 	lsl.w	r3, r9, r3
 800e910:	4313      	orrs	r3, r2
 800e912:	9304      	str	r3, [sp, #16]
 800e914:	46a2      	mov	sl, r4
 800e916:	e7d2      	b.n	800e8be <_vfiprintf_r+0xc6>
 800e918:	9b03      	ldr	r3, [sp, #12]
 800e91a:	1d19      	adds	r1, r3, #4
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	9103      	str	r1, [sp, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	bfbb      	ittet	lt
 800e924:	425b      	neglt	r3, r3
 800e926:	f042 0202 	orrlt.w	r2, r2, #2
 800e92a:	9307      	strge	r3, [sp, #28]
 800e92c:	9307      	strlt	r3, [sp, #28]
 800e92e:	bfb8      	it	lt
 800e930:	9204      	strlt	r2, [sp, #16]
 800e932:	7823      	ldrb	r3, [r4, #0]
 800e934:	2b2e      	cmp	r3, #46	@ 0x2e
 800e936:	d10a      	bne.n	800e94e <_vfiprintf_r+0x156>
 800e938:	7863      	ldrb	r3, [r4, #1]
 800e93a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e93c:	d132      	bne.n	800e9a4 <_vfiprintf_r+0x1ac>
 800e93e:	9b03      	ldr	r3, [sp, #12]
 800e940:	1d1a      	adds	r2, r3, #4
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	9203      	str	r2, [sp, #12]
 800e946:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e94a:	3402      	adds	r4, #2
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea24 <_vfiprintf_r+0x22c>
 800e952:	7821      	ldrb	r1, [r4, #0]
 800e954:	2203      	movs	r2, #3
 800e956:	4650      	mov	r0, sl
 800e958:	f7f1 fc4a 	bl	80001f0 <memchr>
 800e95c:	b138      	cbz	r0, 800e96e <_vfiprintf_r+0x176>
 800e95e:	9b04      	ldr	r3, [sp, #16]
 800e960:	eba0 000a 	sub.w	r0, r0, sl
 800e964:	2240      	movs	r2, #64	@ 0x40
 800e966:	4082      	lsls	r2, r0
 800e968:	4313      	orrs	r3, r2
 800e96a:	3401      	adds	r4, #1
 800e96c:	9304      	str	r3, [sp, #16]
 800e96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e972:	4829      	ldr	r0, [pc, #164]	@ (800ea18 <_vfiprintf_r+0x220>)
 800e974:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e978:	2206      	movs	r2, #6
 800e97a:	f7f1 fc39 	bl	80001f0 <memchr>
 800e97e:	2800      	cmp	r0, #0
 800e980:	d03f      	beq.n	800ea02 <_vfiprintf_r+0x20a>
 800e982:	4b26      	ldr	r3, [pc, #152]	@ (800ea1c <_vfiprintf_r+0x224>)
 800e984:	bb1b      	cbnz	r3, 800e9ce <_vfiprintf_r+0x1d6>
 800e986:	9b03      	ldr	r3, [sp, #12]
 800e988:	3307      	adds	r3, #7
 800e98a:	f023 0307 	bic.w	r3, r3, #7
 800e98e:	3308      	adds	r3, #8
 800e990:	9303      	str	r3, [sp, #12]
 800e992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e994:	443b      	add	r3, r7
 800e996:	9309      	str	r3, [sp, #36]	@ 0x24
 800e998:	e76a      	b.n	800e870 <_vfiprintf_r+0x78>
 800e99a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e99e:	460c      	mov	r4, r1
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	e7a8      	b.n	800e8f6 <_vfiprintf_r+0xfe>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	3401      	adds	r4, #1
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	f04f 0c0a 	mov.w	ip, #10
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b6:	3a30      	subs	r2, #48	@ 0x30
 800e9b8:	2a09      	cmp	r2, #9
 800e9ba:	d903      	bls.n	800e9c4 <_vfiprintf_r+0x1cc>
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0c6      	beq.n	800e94e <_vfiprintf_r+0x156>
 800e9c0:	9105      	str	r1, [sp, #20]
 800e9c2:	e7c4      	b.n	800e94e <_vfiprintf_r+0x156>
 800e9c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e7f0      	b.n	800e9b0 <_vfiprintf_r+0x1b8>
 800e9ce:	ab03      	add	r3, sp, #12
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	4b12      	ldr	r3, [pc, #72]	@ (800ea20 <_vfiprintf_r+0x228>)
 800e9d6:	a904      	add	r1, sp, #16
 800e9d8:	4630      	mov	r0, r6
 800e9da:	f7fb fb3d 	bl	800a058 <_printf_float>
 800e9de:	4607      	mov	r7, r0
 800e9e0:	1c78      	adds	r0, r7, #1
 800e9e2:	d1d6      	bne.n	800e992 <_vfiprintf_r+0x19a>
 800e9e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9e6:	07d9      	lsls	r1, r3, #31
 800e9e8:	d405      	bmi.n	800e9f6 <_vfiprintf_r+0x1fe>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	059a      	lsls	r2, r3, #22
 800e9ee:	d402      	bmi.n	800e9f6 <_vfiprintf_r+0x1fe>
 800e9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9f2:	f7fd f90b 	bl	800bc0c <__retarget_lock_release_recursive>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	065b      	lsls	r3, r3, #25
 800e9fa:	f53f af1f 	bmi.w	800e83c <_vfiprintf_r+0x44>
 800e9fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea00:	e71e      	b.n	800e840 <_vfiprintf_r+0x48>
 800ea02:	ab03      	add	r3, sp, #12
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	462a      	mov	r2, r5
 800ea08:	4b05      	ldr	r3, [pc, #20]	@ (800ea20 <_vfiprintf_r+0x228>)
 800ea0a:	a904      	add	r1, sp, #16
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	f7fb fdbb 	bl	800a588 <_printf_i>
 800ea12:	e7e4      	b.n	800e9de <_vfiprintf_r+0x1e6>
 800ea14:	08010a30 	.word	0x08010a30
 800ea18:	08010a3a 	.word	0x08010a3a
 800ea1c:	0800a059 	.word	0x0800a059
 800ea20:	0800e7d5 	.word	0x0800e7d5
 800ea24:	08010a36 	.word	0x08010a36

0800ea28 <__swbuf_r>:
 800ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2a:	460e      	mov	r6, r1
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	4605      	mov	r5, r0
 800ea30:	b118      	cbz	r0, 800ea3a <__swbuf_r+0x12>
 800ea32:	6a03      	ldr	r3, [r0, #32]
 800ea34:	b90b      	cbnz	r3, 800ea3a <__swbuf_r+0x12>
 800ea36:	f7fc f967 	bl	800ad08 <__sinit>
 800ea3a:	69a3      	ldr	r3, [r4, #24]
 800ea3c:	60a3      	str	r3, [r4, #8]
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	071a      	lsls	r2, r3, #28
 800ea42:	d501      	bpl.n	800ea48 <__swbuf_r+0x20>
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	b943      	cbnz	r3, 800ea5a <__swbuf_r+0x32>
 800ea48:	4621      	mov	r1, r4
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	f000 f82a 	bl	800eaa4 <__swsetup_r>
 800ea50:	b118      	cbz	r0, 800ea5a <__swbuf_r+0x32>
 800ea52:	f04f 37ff 	mov.w	r7, #4294967295
 800ea56:	4638      	mov	r0, r7
 800ea58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	6922      	ldr	r2, [r4, #16]
 800ea5e:	1a98      	subs	r0, r3, r2
 800ea60:	6963      	ldr	r3, [r4, #20]
 800ea62:	b2f6      	uxtb	r6, r6
 800ea64:	4283      	cmp	r3, r0
 800ea66:	4637      	mov	r7, r6
 800ea68:	dc05      	bgt.n	800ea76 <__swbuf_r+0x4e>
 800ea6a:	4621      	mov	r1, r4
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f7ff fd53 	bl	800e518 <_fflush_r>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1ed      	bne.n	800ea52 <__swbuf_r+0x2a>
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	60a3      	str	r3, [r4, #8]
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	6022      	str	r2, [r4, #0]
 800ea82:	701e      	strb	r6, [r3, #0]
 800ea84:	6962      	ldr	r2, [r4, #20]
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d004      	beq.n	800ea96 <__swbuf_r+0x6e>
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	07db      	lsls	r3, r3, #31
 800ea90:	d5e1      	bpl.n	800ea56 <__swbuf_r+0x2e>
 800ea92:	2e0a      	cmp	r6, #10
 800ea94:	d1df      	bne.n	800ea56 <__swbuf_r+0x2e>
 800ea96:	4621      	mov	r1, r4
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f7ff fd3d 	bl	800e518 <_fflush_r>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d0d9      	beq.n	800ea56 <__swbuf_r+0x2e>
 800eaa2:	e7d6      	b.n	800ea52 <__swbuf_r+0x2a>

0800eaa4 <__swsetup_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4b29      	ldr	r3, [pc, #164]	@ (800eb4c <__swsetup_r+0xa8>)
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	6818      	ldr	r0, [r3, #0]
 800eaac:	460c      	mov	r4, r1
 800eaae:	b118      	cbz	r0, 800eab8 <__swsetup_r+0x14>
 800eab0:	6a03      	ldr	r3, [r0, #32]
 800eab2:	b90b      	cbnz	r3, 800eab8 <__swsetup_r+0x14>
 800eab4:	f7fc f928 	bl	800ad08 <__sinit>
 800eab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eabc:	0719      	lsls	r1, r3, #28
 800eabe:	d422      	bmi.n	800eb06 <__swsetup_r+0x62>
 800eac0:	06da      	lsls	r2, r3, #27
 800eac2:	d407      	bmi.n	800ead4 <__swsetup_r+0x30>
 800eac4:	2209      	movs	r2, #9
 800eac6:	602a      	str	r2, [r5, #0]
 800eac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eacc:	81a3      	strh	r3, [r4, #12]
 800eace:	f04f 30ff 	mov.w	r0, #4294967295
 800ead2:	e033      	b.n	800eb3c <__swsetup_r+0x98>
 800ead4:	0758      	lsls	r0, r3, #29
 800ead6:	d512      	bpl.n	800eafe <__swsetup_r+0x5a>
 800ead8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eada:	b141      	cbz	r1, 800eaee <__swsetup_r+0x4a>
 800eadc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eae0:	4299      	cmp	r1, r3
 800eae2:	d002      	beq.n	800eaea <__swsetup_r+0x46>
 800eae4:	4628      	mov	r0, r5
 800eae6:	f7fd ff0f 	bl	800c908 <_free_r>
 800eaea:	2300      	movs	r3, #0
 800eaec:	6363      	str	r3, [r4, #52]	@ 0x34
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eaf4:	81a3      	strh	r3, [r4, #12]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	6063      	str	r3, [r4, #4]
 800eafa:	6923      	ldr	r3, [r4, #16]
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	f043 0308 	orr.w	r3, r3, #8
 800eb04:	81a3      	strh	r3, [r4, #12]
 800eb06:	6923      	ldr	r3, [r4, #16]
 800eb08:	b94b      	cbnz	r3, 800eb1e <__swsetup_r+0x7a>
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb14:	d003      	beq.n	800eb1e <__swsetup_r+0x7a>
 800eb16:	4621      	mov	r1, r4
 800eb18:	4628      	mov	r0, r5
 800eb1a:	f000 f883 	bl	800ec24 <__smakebuf_r>
 800eb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb22:	f013 0201 	ands.w	r2, r3, #1
 800eb26:	d00a      	beq.n	800eb3e <__swsetup_r+0x9a>
 800eb28:	2200      	movs	r2, #0
 800eb2a:	60a2      	str	r2, [r4, #8]
 800eb2c:	6962      	ldr	r2, [r4, #20]
 800eb2e:	4252      	negs	r2, r2
 800eb30:	61a2      	str	r2, [r4, #24]
 800eb32:	6922      	ldr	r2, [r4, #16]
 800eb34:	b942      	cbnz	r2, 800eb48 <__swsetup_r+0xa4>
 800eb36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb3a:	d1c5      	bne.n	800eac8 <__swsetup_r+0x24>
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	0799      	lsls	r1, r3, #30
 800eb40:	bf58      	it	pl
 800eb42:	6962      	ldrpl	r2, [r4, #20]
 800eb44:	60a2      	str	r2, [r4, #8]
 800eb46:	e7f4      	b.n	800eb32 <__swsetup_r+0x8e>
 800eb48:	2000      	movs	r0, #0
 800eb4a:	e7f7      	b.n	800eb3c <__swsetup_r+0x98>
 800eb4c:	2000019c 	.word	0x2000019c

0800eb50 <_raise_r>:
 800eb50:	291f      	cmp	r1, #31
 800eb52:	b538      	push	{r3, r4, r5, lr}
 800eb54:	4605      	mov	r5, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	d904      	bls.n	800eb64 <_raise_r+0x14>
 800eb5a:	2316      	movs	r3, #22
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb62:	bd38      	pop	{r3, r4, r5, pc}
 800eb64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb66:	b112      	cbz	r2, 800eb6e <_raise_r+0x1e>
 800eb68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb6c:	b94b      	cbnz	r3, 800eb82 <_raise_r+0x32>
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f000 f830 	bl	800ebd4 <_getpid_r>
 800eb74:	4622      	mov	r2, r4
 800eb76:	4601      	mov	r1, r0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb7e:	f000 b817 	b.w	800ebb0 <_kill_r>
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d00a      	beq.n	800eb9c <_raise_r+0x4c>
 800eb86:	1c59      	adds	r1, r3, #1
 800eb88:	d103      	bne.n	800eb92 <_raise_r+0x42>
 800eb8a:	2316      	movs	r3, #22
 800eb8c:	6003      	str	r3, [r0, #0]
 800eb8e:	2001      	movs	r0, #1
 800eb90:	e7e7      	b.n	800eb62 <_raise_r+0x12>
 800eb92:	2100      	movs	r1, #0
 800eb94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	4798      	blx	r3
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	e7e0      	b.n	800eb62 <_raise_r+0x12>

0800eba0 <raise>:
 800eba0:	4b02      	ldr	r3, [pc, #8]	@ (800ebac <raise+0xc>)
 800eba2:	4601      	mov	r1, r0
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	f7ff bfd3 	b.w	800eb50 <_raise_r>
 800ebaa:	bf00      	nop
 800ebac:	2000019c 	.word	0x2000019c

0800ebb0 <_kill_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d07      	ldr	r5, [pc, #28]	@ (800ebd0 <_kill_r+0x20>)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4608      	mov	r0, r1
 800ebba:	4611      	mov	r1, r2
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	f7f5 fdaf 	bl	8004720 <_kill>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	d102      	bne.n	800ebcc <_kill_r+0x1c>
 800ebc6:	682b      	ldr	r3, [r5, #0]
 800ebc8:	b103      	cbz	r3, 800ebcc <_kill_r+0x1c>
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	bf00      	nop
 800ebd0:	2000985c 	.word	0x2000985c

0800ebd4 <_getpid_r>:
 800ebd4:	f7f5 bda2 	b.w	800471c <_getpid>

0800ebd8 <__swhatbuf_r>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	460c      	mov	r4, r1
 800ebdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	b096      	sub	sp, #88	@ 0x58
 800ebe4:	4615      	mov	r5, r2
 800ebe6:	461e      	mov	r6, r3
 800ebe8:	da0d      	bge.n	800ec06 <__swhatbuf_r+0x2e>
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebf0:	f04f 0100 	mov.w	r1, #0
 800ebf4:	bf14      	ite	ne
 800ebf6:	2340      	movne	r3, #64	@ 0x40
 800ebf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebfc:	2000      	movs	r0, #0
 800ebfe:	6031      	str	r1, [r6, #0]
 800ec00:	602b      	str	r3, [r5, #0]
 800ec02:	b016      	add	sp, #88	@ 0x58
 800ec04:	bd70      	pop	{r4, r5, r6, pc}
 800ec06:	466a      	mov	r2, sp
 800ec08:	f000 f848 	bl	800ec9c <_fstat_r>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	dbec      	blt.n	800ebea <__swhatbuf_r+0x12>
 800ec10:	9901      	ldr	r1, [sp, #4]
 800ec12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec1a:	4259      	negs	r1, r3
 800ec1c:	4159      	adcs	r1, r3
 800ec1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec22:	e7eb      	b.n	800ebfc <__swhatbuf_r+0x24>

0800ec24 <__smakebuf_r>:
 800ec24:	898b      	ldrh	r3, [r1, #12]
 800ec26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec28:	079d      	lsls	r5, r3, #30
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	460c      	mov	r4, r1
 800ec2e:	d507      	bpl.n	800ec40 <__smakebuf_r+0x1c>
 800ec30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	6123      	str	r3, [r4, #16]
 800ec38:	2301      	movs	r3, #1
 800ec3a:	6163      	str	r3, [r4, #20]
 800ec3c:	b003      	add	sp, #12
 800ec3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec40:	ab01      	add	r3, sp, #4
 800ec42:	466a      	mov	r2, sp
 800ec44:	f7ff ffc8 	bl	800ebd8 <__swhatbuf_r>
 800ec48:	9f00      	ldr	r7, [sp, #0]
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	4639      	mov	r1, r7
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f7fa fa46 	bl	80090e0 <_malloc_r>
 800ec54:	b948      	cbnz	r0, 800ec6a <__smakebuf_r+0x46>
 800ec56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec5a:	059a      	lsls	r2, r3, #22
 800ec5c:	d4ee      	bmi.n	800ec3c <__smakebuf_r+0x18>
 800ec5e:	f023 0303 	bic.w	r3, r3, #3
 800ec62:	f043 0302 	orr.w	r3, r3, #2
 800ec66:	81a3      	strh	r3, [r4, #12]
 800ec68:	e7e2      	b.n	800ec30 <__smakebuf_r+0xc>
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	6020      	str	r0, [r4, #0]
 800ec6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec72:	81a3      	strh	r3, [r4, #12]
 800ec74:	9b01      	ldr	r3, [sp, #4]
 800ec76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec7a:	b15b      	cbz	r3, 800ec94 <__smakebuf_r+0x70>
 800ec7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec80:	4630      	mov	r0, r6
 800ec82:	f000 f81d 	bl	800ecc0 <_isatty_r>
 800ec86:	b128      	cbz	r0, 800ec94 <__smakebuf_r+0x70>
 800ec88:	89a3      	ldrh	r3, [r4, #12]
 800ec8a:	f023 0303 	bic.w	r3, r3, #3
 800ec8e:	f043 0301 	orr.w	r3, r3, #1
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	431d      	orrs	r5, r3
 800ec98:	81a5      	strh	r5, [r4, #12]
 800ec9a:	e7cf      	b.n	800ec3c <__smakebuf_r+0x18>

0800ec9c <_fstat_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d07      	ldr	r5, [pc, #28]	@ (800ecbc <_fstat_r+0x20>)
 800eca0:	2300      	movs	r3, #0
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	4611      	mov	r1, r2
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	f7f5 fd66 	bl	800477a <_fstat>
 800ecae:	1c43      	adds	r3, r0, #1
 800ecb0:	d102      	bne.n	800ecb8 <_fstat_r+0x1c>
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	b103      	cbz	r3, 800ecb8 <_fstat_r+0x1c>
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	bd38      	pop	{r3, r4, r5, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000985c 	.word	0x2000985c

0800ecc0 <_isatty_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4d06      	ldr	r5, [pc, #24]	@ (800ecdc <_isatty_r+0x1c>)
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	4608      	mov	r0, r1
 800ecca:	602b      	str	r3, [r5, #0]
 800eccc:	f7f5 fd5a 	bl	8004784 <_isatty>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d102      	bne.n	800ecda <_isatty_r+0x1a>
 800ecd4:	682b      	ldr	r3, [r5, #0]
 800ecd6:	b103      	cbz	r3, 800ecda <_isatty_r+0x1a>
 800ecd8:	6023      	str	r3, [r4, #0]
 800ecda:	bd38      	pop	{r3, r4, r5, pc}
 800ecdc:	2000985c 	.word	0x2000985c

0800ece0 <round>:
 800ece0:	ec51 0b10 	vmov	r0, r1, d0
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ecea:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ecee:	2a13      	cmp	r2, #19
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	dc1b      	bgt.n	800ed2e <round+0x4e>
 800ecf6:	2a00      	cmp	r2, #0
 800ecf8:	da0b      	bge.n	800ed12 <round+0x32>
 800ecfa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ecfe:	3201      	adds	r2, #1
 800ed00:	bf04      	itt	eq
 800ed02:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed06:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	4610      	mov	r0, r2
 800ed10:	e015      	b.n	800ed3e <round+0x5e>
 800ed12:	4c15      	ldr	r4, [pc, #84]	@ (800ed68 <round+0x88>)
 800ed14:	4114      	asrs	r4, r2
 800ed16:	ea04 0601 	and.w	r6, r4, r1
 800ed1a:	4306      	orrs	r6, r0
 800ed1c:	d00f      	beq.n	800ed3e <round+0x5e>
 800ed1e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ed22:	fa41 f202 	asr.w	r2, r1, r2
 800ed26:	4413      	add	r3, r2
 800ed28:	ea23 0304 	bic.w	r3, r3, r4
 800ed2c:	e7ed      	b.n	800ed0a <round+0x2a>
 800ed2e:	2a33      	cmp	r2, #51	@ 0x33
 800ed30:	dd08      	ble.n	800ed44 <round+0x64>
 800ed32:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ed36:	d102      	bne.n	800ed3e <round+0x5e>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	f7f1 fab7 	bl	80002ac <__adddf3>
 800ed3e:	ec41 0b10 	vmov	d0, r0, r1
 800ed42:	bd70      	pop	{r4, r5, r6, pc}
 800ed44:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ed48:	f04f 34ff 	mov.w	r4, #4294967295
 800ed4c:	40f4      	lsrs	r4, r6
 800ed4e:	4204      	tst	r4, r0
 800ed50:	d0f5      	beq.n	800ed3e <round+0x5e>
 800ed52:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ed56:	2201      	movs	r2, #1
 800ed58:	408a      	lsls	r2, r1
 800ed5a:	1952      	adds	r2, r2, r5
 800ed5c:	bf28      	it	cs
 800ed5e:	3301      	addcs	r3, #1
 800ed60:	ea22 0204 	bic.w	r2, r2, r4
 800ed64:	e7d2      	b.n	800ed0c <round+0x2c>
 800ed66:	bf00      	nop
 800ed68:	000fffff 	.word	0x000fffff

0800ed6c <_init>:
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	bf00      	nop
 800ed70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed72:	bc08      	pop	{r3}
 800ed74:	469e      	mov	lr, r3
 800ed76:	4770      	bx	lr

0800ed78 <_fini>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr
