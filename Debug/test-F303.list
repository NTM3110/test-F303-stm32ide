
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b0  0800fc80  0800fc80  00010c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012230  08012230  00014250  2**0
                  CONTENTS
  4 .ARM          00000008  08012230  08012230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012238  08012238  00014250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012238  08012238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801223c  0801223c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08012240  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014250  2**0
                  CONTENTS
 10 .bss          00008358  20000250  20000250  00014250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200085a8  200085a8  00014250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038d05  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000072a9  00000000  00000000  0004cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013906  00000000  00000000  0005422e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002080  00000000  00000000  00067b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000221e  00000000  00000000  00069bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025286  00000000  00000000  0006bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038b79  00000000  00000000  0009105c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8ec4  00000000  00000000  000c9bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a2a99  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000077a0  00000000  00000000  001a2adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001aa27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc64 	.word	0x0800fc64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800fc64 	.word	0x0800fc64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <coldStart>:
	osDelay(50);	//	50 is OK
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
 8000d14:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d16:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <coldStart+0x1c>)
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <coldStart+0x20>)
 8000d1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1e:	220d      	movs	r2, #13
 8000d20:	f007 f858 	bl	8007dd4 <HAL_UART_Transmit>
	osDelay(100);
}
 8000d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osDelay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f007 b9c3 	b.w	80080b4 <osDelay>
 8000d2e:	bf00      	nop
 8000d30:	0800fdb0 	.word	0x0800fdb0
 8000d34:	20001e38 	.word	0x20001e38

08000d38 <validateChecksum>:
	osDelay(1000);

}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4401      	add	r1, r0
 8000d3c:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d101      	bne.n	8000d46 <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d42:	2000      	movs	r0, #0
 8000d44:	e021      	b.n	8000d8a <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d46:	461c      	mov	r4, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d4e:	d1f6      	bne.n	8000d3e <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d50:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d52:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d54:	e002      	b.n	8000d5c <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d5a:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d5c:	4284      	cmp	r4, r0
 8000d5e:	d8fa      	bhi.n	8000d56 <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d60:	1ca3      	adds	r3, r4, #2
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d212      	bcs.n	8000d8c <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	1c60      	adds	r0, r4, #1
 8000d6c:	f009 ff02 	bl	800ab74 <strtol>
 8000d70:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
//        snprintf()
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d72:	4629      	mov	r1, r5
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d74:	b2e4      	uxtb	r4, r4
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <validateChecksum+0x60>)
 8000d78:	f00a fe34 	bl	800b9e4 <iprintf>
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <validateChecksum+0x64>)
 8000d7e:	4621      	mov	r1, r4
 8000d80:	f00a fe30 	bl	800b9e4 <iprintf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000d84:	1b63      	subs	r3, r4, r5
 8000d86:	4258      	negs	r0, r3
 8000d88:	4158      	adcs	r0, r3
    }
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <validateChecksum+0x68>)
 8000d92:	f00a fe27 	bl	800b9e4 <iprintf>
    return 0; // Invalid checksum
 8000d96:	e7d4      	b.n	8000d42 <validateChecksum+0xa>
 8000d98:	0800fdbe 	.word	0x0800fdbe
 8000d9c:	0800fdd9 	.word	0x0800fdd9
 8000da0:	0800fdf2 	.word	0x0800fdf2

08000da4 <convertToEpoch>:
    printf("Course: %.1f\r\n", rmc.course);

    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
}

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000da4:	b510      	push	{r4, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
    struct tm timeinfo = {0};

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000da8:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000daa:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000dae:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000db0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000db2:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000db4:	9301      	str	r3, [sp, #4]
    struct tm timeinfo = {0};
 8000db6:	2400      	movs	r4, #0
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000dbc:	3901      	subs	r1, #1

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000dbe:	a801      	add	r0, sp, #4
    struct tm timeinfo = {0};
 8000dc0:	e9cd 4407 	strd	r4, r4, [sp, #28]
    timeinfo.tm_mday = day;         // Day of the month
 8000dc4:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000dc8:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000dca:	f00b f915 	bl	800bff8 <mktime>

    return epoch;
}
 8000dce:	b00a      	add	sp, #40	@ 0x28
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	0000      	movs	r0, r0
 8000dd4:	0000      	movs	r0, r0
	...

08000dd8 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ddc:	ed2d 8b02 	vpush	{d8}
    int field = 0;
    uint8_t str_cpy[128] = {0};
 8000de0:	2500      	movs	r5, #0
void parse_rmc(uint8_t *rmc_sentence) {
 8000de2:	b0a3      	sub	sp, #140	@ 0x8c
    uint8_t str_cpy[128] = {0};
 8000de4:	227c      	movs	r2, #124	@ 0x7c
void parse_rmc(uint8_t *rmc_sentence) {
 8000de6:	4604      	mov	r4, r0
    uint8_t str_cpy[128] = {0};
 8000de8:	4629      	mov	r1, r5
 8000dea:	a803      	add	r0, sp, #12
 8000dec:	9502      	str	r5, [sp, #8]
 8000dee:	f00a ffc9 	bl	800bd84 <memset>
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000df2:	4621      	mov	r1, r4
 8000df4:	a802      	add	r0, sp, #8
 8000df6:	f00b fe67 	bl	800cac8 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';

    printf("\n");
 8000dfa:	200a      	movs	r0, #10
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000dfc:	f88d 5087 	strb.w	r5, [sp, #135]	@ 0x87
    printf("\n");
 8000e00:	f00a fe02 	bl	800ba08 <putchar>
    printf((char *)rmc_sentence);
 8000e04:	4620      	mov	r0, r4
 8000e06:	f00a fded 	bl	800b9e4 <iprintf>
    printf("\n");
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f00a fdfc 	bl	800ba08 <putchar>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff ff90 	bl	8000d38 <validateChecksum>
 8000e18:	b1a0      	cbz	r0, 8000e44 <parse_rmc+0x6c>
 8000e1a:	ae02      	add	r6, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000e1c:	462f      	mov	r7, r5
    while (*ptr) {
 8000e1e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8000e22:	b9a3      	cbnz	r3, 8000e4e <parse_rmc+0x76>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000e24:	4c76      	ldr	r4, [pc, #472]	@ (8001000 <parse_rmc+0x228>)
 8000e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10b      	bne.n	8000e44 <parse_rmc+0x6c>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000e2c:	68a3      	ldr	r3, [r4, #8]
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	69a0      	ldr	r0, [r4, #24]
 8000e3c:	f7ff ffb2 	bl	8000da4 <convertToEpoch>
 8000e40:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000e44:	b023      	add	sp, #140	@ 0x8c
 8000e46:	ecbd 8b02 	vpop	{d8}
 8000e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000e4e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e50:	d001      	beq.n	8000e56 <parse_rmc+0x7e>
 8000e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e54:	d1e3      	bne.n	8000e1e <parse_rmc+0x46>
            switch (field) {
 8000e56:	1e6b      	subs	r3, r5, #1
            *ptr = '\0';
 8000e58:	f806 7c01 	strb.w	r7, [r6, #-1]
            switch (field) {
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d81d      	bhi.n	8000e9c <parse_rmc+0xc4>
 8000e60:	e8df f003 	tbb	[pc, r3]
 8000e64:	5d271f05 	.word	0x5d271f05
 8000e68:	a79d9862 	.word	0xa79d9862
 8000e6c:	b1          	.byte	0xb1
 8000e6d:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000e6e:	7820      	ldrb	r0, [r4, #0]
 8000e70:	7863      	ldrb	r3, [r4, #1]
 8000e72:	4a63      	ldr	r2, [pc, #396]	@ (8001000 <parse_rmc+0x228>)
 8000e74:	210a      	movs	r1, #10
 8000e76:	3830      	subs	r0, #48	@ 0x30
 8000e78:	3b30      	subs	r3, #48	@ 0x30
 8000e7a:	fb01 3300 	mla	r3, r1, r0, r3
 8000e7e:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000e80:	78a0      	ldrb	r0, [r4, #2]
 8000e82:	78e3      	ldrb	r3, [r4, #3]
 8000e84:	3830      	subs	r0, #48	@ 0x30
 8000e86:	3b30      	subs	r3, #48	@ 0x30
 8000e88:	fb01 3300 	mla	r3, r1, r0, r3
 8000e8c:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000e8e:	7920      	ldrb	r0, [r4, #4]
 8000e90:	7963      	ldrb	r3, [r4, #5]
 8000e92:	3830      	subs	r0, #48	@ 0x30
 8000e94:	3b30      	subs	r3, #48	@ 0x30
 8000e96:	fb01 3300 	mla	r3, r1, r0, r3
 8000e9a:	6093      	str	r3, [r2, #8]
            field++;
 8000e9c:	3501      	adds	r5, #1
            rmc_sentence = ptr + 1;
 8000e9e:	4634      	mov	r4, r6
        ptr++;
 8000ea0:	e7bd      	b.n	8000e1e <parse_rmc+0x46>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000ea2:	7823      	ldrb	r3, [r4, #0]
 8000ea4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000ea8:	4253      	negs	r3, r2
 8000eaa:	4153      	adcs	r3, r2
 8000eac:	4a54      	ldr	r2, [pc, #336]	@ (8001000 <parse_rmc+0x228>)
 8000eae:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000eb0:	e7f4      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f008 ff06 	bl	8009cc4 <atof>
 8000eb8:	4b52      	ldr	r3, [pc, #328]	@ (8001004 <parse_rmc+0x22c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	ec51 0b10 	vmov	r0, r1, d0
 8000ec0:	f7ff fcd4 	bl	800086c <__aeabi_ddiv>
 8000ec4:	4680      	mov	r8, r0
 8000ec6:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000ec8:	ec49 8b10 	vmov	d0, r8, r9
 8000ecc:	f00e fe08 	bl	800fae0 <floor>
 8000ed0:	ec51 0b10 	vmov	r0, r1, d0
 8000ed4:	f7ff fe50 	bl	8000b78 <__aeabi_d2iz>
 8000ed8:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000edc:	f7ff fb32 	bl	8000544 <__aeabi_i2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	f7ff f9de 	bl	80002a8 <__aeabi_dsub>
 8000eec:	f7ff fe8c 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000ef0:	f7ff fb3a 	bl	8000568 <__aeabi_f2d>
 8000ef4:	a340      	add	r3, pc, #256	@ (adr r3, 8000ff8 <parse_rmc+0x220>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fcb7 	bl	800086c <__aeabi_ddiv>
 8000efe:	f7ff fe83 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000f02:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000f06:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000f0a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f0e:	ee17 0a90 	vmov	r0, s15
 8000f12:	f7ff fb29 	bl	8000568 <__aeabi_f2d>
 8000f16:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <parse_rmc+0x228>)
 8000f18:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000f1c:	e7be      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.lcation.NS = rmc_sentence[0];
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <parse_rmc+0x228>)
 8000f20:	7822      	ldrb	r2, [r4, #0]
 8000f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000f26:	e7b9      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f008 fecb 	bl	8009cc4 <atof>
 8000f2e:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <parse_rmc+0x22c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	ec51 0b10 	vmov	r0, r1, d0
 8000f36:	f7ff fc99 	bl	800086c <__aeabi_ddiv>
 8000f3a:	4680      	mov	r8, r0
 8000f3c:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000f3e:	ec49 8b10 	vmov	d0, r8, r9
 8000f42:	f00e fdcd 	bl	800fae0 <floor>
 8000f46:	ec51 0b10 	vmov	r0, r1, d0
 8000f4a:	f7ff fe15 	bl	8000b78 <__aeabi_d2iz>
 8000f4e:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000f52:	f7ff faf7 	bl	8000544 <__aeabi_i2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	f7ff f9a3 	bl	80002a8 <__aeabi_dsub>
 8000f62:	f7ff fe51 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8000f66:	f7ff faff 	bl	8000568 <__aeabi_f2d>
 8000f6a:	a323      	add	r3, pc, #140	@ (adr r3, 8000ff8 <parse_rmc+0x220>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fc7c 	bl	800086c <__aeabi_ddiv>
 8000f74:	f7ff fe48 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 8000f78:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8000f7c:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8000f80:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f84:	ee17 0a90 	vmov	r0, s15
 8000f88:	f7ff faee 	bl	8000568 <__aeabi_f2d>
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <parse_rmc+0x228>)
 8000f8e:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8000f92:	e783      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.lcation.EW = rmc_sentence[0];
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <parse_rmc+0x228>)
 8000f96:	7822      	ldrb	r2, [r4, #0]
 8000f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8000f9c:	e77e      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.speed = atof((char *)rmc_sentence);
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f008 fe90 	bl	8009cc4 <atof>
 8000fa4:	ec51 0b10 	vmov	r0, r1, d0
 8000fa8:	f7ff fe2e 	bl	8000c08 <__aeabi_d2f>
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <parse_rmc+0x228>)
 8000fae:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8000fb0:	e774      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.course = atof((char *)rmc_sentence);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f008 fe86 	bl	8009cc4 <atof>
 8000fb8:	ec51 0b10 	vmov	r0, r1, d0
 8000fbc:	f7ff fe24 	bl	8000c08 <__aeabi_d2f>
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <parse_rmc+0x228>)
 8000fc2:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8000fc4:	e76a      	b.n	8000e9c <parse_rmc+0xc4>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000fc6:	7820      	ldrb	r0, [r4, #0]
 8000fc8:	7863      	ldrb	r3, [r4, #1]
 8000fca:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <parse_rmc+0x228>)
 8000fcc:	210a      	movs	r1, #10
 8000fce:	3830      	subs	r0, #48	@ 0x30
 8000fd0:	3b30      	subs	r3, #48	@ 0x30
 8000fd2:	fb01 3300 	mla	r3, r1, r0, r3
 8000fd6:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000fd8:	78a0      	ldrb	r0, [r4, #2]
 8000fda:	78e3      	ldrb	r3, [r4, #3]
 8000fdc:	3830      	subs	r0, #48	@ 0x30
 8000fde:	3b30      	subs	r3, #48	@ 0x30
 8000fe0:	fb01 3300 	mla	r3, r1, r0, r3
 8000fe4:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000fe6:	7920      	ldrb	r0, [r4, #4]
 8000fe8:	7963      	ldrb	r3, [r4, #5]
 8000fea:	3830      	subs	r0, #48	@ 0x30
 8000fec:	3b30      	subs	r3, #48	@ 0x30
 8000fee:	fb01 3300 	mla	r3, r1, r0, r3
 8000ff2:	6193      	str	r3, [r2, #24]
                    break;
 8000ff4:	e752      	b.n	8000e9c <parse_rmc+0xc4>
 8000ff6:	bf00      	nop
 8000ff8:	33333333 	.word	0x33333333
 8000ffc:	3fe33333 	.word	0x3fe33333
 8001000:	200003d0 	.word	0x200003d0
 8001004:	40590000 	.word	0x40590000

08001008 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8001008:	b570      	push	{r4, r5, r6, lr}
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 800100a:	4d13      	ldr	r5, [pc, #76]	@ (8001058 <sendRMCDataToFlash+0x50>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 800100c:	4606      	mov	r6, r0
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 800100e:	f04f 31ff 	mov.w	r1, #4294967295
 8001012:	6828      	ldr	r0, [r5, #0]
 8001014:	f007 f949 	bl	80082aa <osMailAlloc>
 8001018:	4604      	mov	r4, r0
	if (mail != NULL) {
 800101a:	b1b8      	cbz	r0, 800104c <sendRMCDataToFlash+0x44>
		*mail = *rmcData; // Copy data into allocated memory
 800101c:	2258      	movs	r2, #88	@ 0x58
 800101e:	4631      	mov	r1, r6
 8001020:	f00b fd5a 	bl	800cad8 <memcpy>
		osStatus status = osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8001024:	4621      	mov	r1, r4
 8001026:	6828      	ldr	r0, [r5, #0]
 8001028:	f007 f944 	bl	80082b4 <osMailPut>
		if (status != osOK) {
 800102c:	4601      	mov	r1, r0
 800102e:	b140      	cbz	r0, 8001042 <sendRMCDataToFlash+0x3a>
			printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 8001030:	480a      	ldr	r0, [pc, #40]	@ (800105c <sendRMCDataToFlash+0x54>)
 8001032:	f00a fcd7 	bl	800b9e4 <iprintf>
			osMailFree(RMC_MailQFLASHId, mail);
 8001036:	6828      	ldr	r0, [r5, #0]
 8001038:	4621      	mov	r1, r4
	}
	else{
		printf("CANNOT MALLOC MAIL");
	}

}
 800103a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailFree(RMC_MailQFLASHId, mail);
 800103e:	f007 b99d 	b.w	800837c <osMailFree>
}
 8001042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <sendRMCDataToFlash+0x58>)
 8001048:	f00a bccc 	b.w	800b9e4 <iprintf>
}
 800104c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("CANNOT MALLOC MAIL");
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <sendRMCDataToFlash+0x5c>)
 8001052:	f00a bcc7 	b.w	800b9e4 <iprintf>
 8001056:	bf00      	nop
 8001058:	20001c88 	.word	0x20001c88
 800105c:	0800fe29 	.word	0x0800fe29
 8001060:	0800fe7a 	.word	0x0800fe7a
 8001064:	0800fed6 	.word	0x0800fed6

08001068 <handleIncomingChar>:

int handleIncomingChar(char c) {
 8001068:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800106a:	4c12      	ldr	r4, [pc, #72]	@ (80010b4 <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 800106c:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800106e:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 8001070:	d112      	bne.n	8001098 <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001072:	4d11      	ldr	r5, [pc, #68]	@ (80010b8 <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001074:	4911      	ldr	r1, [pc, #68]	@ (80010bc <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001076:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001078:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800107a:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 800107c:	f00a fed2 	bl	800be24 <strstr>
 8001080:	b138      	cbz	r0, 8001092 <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <handleIncomingChar+0x58>)
 8001084:	2280      	movs	r2, #128	@ 0x80
 8001086:	4629      	mov	r1, r5
 8001088:	f00a fea3 	bl	800bdd2 <strncpy>
            tempIndex = 0;
 800108c:	8026      	strh	r6, [r4, #0]
 800108e:	2001      	movs	r0, #1
    } else {
        printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 8001090:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 8001092:	8020      	strh	r0, [r4, #0]
    return 0;
 8001094:	2000      	movs	r0, #0
 8001096:	e7fb      	b.n	8001090 <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 8001098:	2bfe      	cmp	r3, #254	@ 0xfe
 800109a:	d804      	bhi.n	80010a6 <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	8022      	strh	r2, [r4, #0]
 80010a0:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <handleIncomingChar+0x50>)
 80010a2:	54d0      	strb	r0, [r2, r3]
 80010a4:	e7f6      	b.n	8001094 <handleIncomingChar+0x2c>
        printf("Warning: Sentence too long, discarding\n");
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <handleIncomingChar+0x5c>)
 80010a8:	f00a fd0c 	bl	800bac4 <puts>
        tempIndex = 0; // Reset if line too long
 80010ac:	2300      	movs	r3, #0
 80010ae:	8023      	strh	r3, [r4, #0]
 80010b0:	e7f0      	b.n	8001094 <handleIncomingChar+0x2c>
 80010b2:	bf00      	nop
 80010b4:	2000036e 	.word	0x2000036e
 80010b8:	2000026e 	.word	0x2000026e
 80010bc:	0800fee9 	.word	0x0800fee9
 80010c0:	200015b8 	.word	0x200015b8
 80010c4:	0800fef0 	.word	0x0800fef0

080010c8 <getRMC>:
}


void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80010c8:	4b3e      	ldr	r3, [pc, #248]	@ (80011c4 <getRMC+0xfc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 80010cc:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80010ce:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 80010d0:	4d3d      	ldr	r5, [pc, #244]	@ (80011c8 <getRMC+0x100>)
        char c = gpsSentence[lastReadIndex];
 80010d2:	4e3e      	ldr	r6, [pc, #248]	@ (80011cc <getRMC+0x104>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80010d4:	f5c4 548c 	rsb	r4, r4, #4480	@ 0x1180
 80010d8:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 80010da:	882b      	ldrh	r3, [r5, #0]
 80010dc:	42a3      	cmp	r3, r4
 80010de:	d14b      	bne.n	8001178 <getRMC+0xb0>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist){
 80010e0:	4e3b      	ldr	r6, [pc, #236]	@ (80011d0 <getRMC+0x108>)
 80010e2:	4c3c      	ldr	r4, [pc, #240]	@ (80011d4 <getRMC+0x10c>)
 80010e4:	6833      	ldr	r3, [r6, #0]
 80010e6:	b1eb      	cbz	r3, 8001124 <getRMC+0x5c>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
//		display_rmc_data();
		get_RTC_time_date(&rmc);
 80010e8:	4d3b      	ldr	r5, [pc, #236]	@ (80011d8 <getRMC+0x110>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 80010ea:	483c      	ldr	r0, [pc, #240]	@ (80011dc <getRMC+0x114>)
 80010ec:	f7ff fe74 	bl	8000dd8 <parse_rmc>
		get_RTC_time_date(&rmc);
 80010f0:	4628      	mov	r0, r5
 80010f2:	f002 f8d5 	bl	80032a0 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 80010f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d04e      	beq.n	800119a <getRMC+0xd2>
			printf("\n\n------------ Sending RMC ------------\n\n");
 80010fc:	4838      	ldr	r0, [pc, #224]	@ (80011e0 <getRMC+0x118>)
 80010fe:	f00a fce1 	bl	800bac4 <puts>
			sendRMCDataToFlash(&rmc);
 8001102:	4628      	mov	r0, r5
 8001104:	f7ff ff80 	bl	8001008 <sendRMCDataToFlash>
			getRMC_time = 0;
 8001108:	2300      	movs	r3, #0
			rmc_saved = rmc;
 800110a:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <getRMC+0x11c>)
			getRMC_time = 0;
 800110c:	6023      	str	r3, [r4, #0]
			rmc_saved = rmc;
 800110e:	2258      	movs	r2, #88	@ 0x58
 8001110:	4629      	mov	r1, r5
 8001112:	f00b fce1 	bl	800cad8 <memcpy>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
			getRMC_time++;
		}

        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 8001116:	4831      	ldr	r0, [pc, #196]	@ (80011dc <getRMC+0x114>)
 8001118:	2280      	movs	r2, #128	@ 0x80
 800111a:	2100      	movs	r1, #0
 800111c:	f00a fe32 	bl	800bd84 <memset>
        isRMCExist = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	6033      	str	r3, [r6, #0]
    }

    //GPS timeout logic
    if (getRMC_time >= 400 && getRMC_time % 400 == 0) {
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800112a:	db0b      	blt.n	8001144 <getRMC+0x7c>
 800112c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001130:	fb93 f1f2 	sdiv	r1, r3, r2
 8001134:	fb02 3311 	mls	r3, r2, r1, r3
 8001138:	b923      	cbnz	r3, 8001144 <getRMC+0x7c>
        printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 800113a:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <getRMC+0x120>)
 800113c:	f00a fcc2 	bl	800bac4 <puts>
        coldStart();
 8001140:	f7ff fde8 	bl	8000d14 <coldStart>
    }

    if (getRMC_time >= 1200) {
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800114a:	db0f      	blt.n	800116c <getRMC+0xa4>
        GPS_DISABLE();
 800114c:	2201      	movs	r2, #1
 800114e:	2104      	movs	r1, #4
 8001150:	4826      	ldr	r0, [pc, #152]	@ (80011ec <getRMC+0x124>)
 8001152:	f004 fe3d 	bl	8005dd0 <HAL_GPIO_WritePin>
        osDelay(500);
 8001156:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800115a:	f006 ffab 	bl	80080b4 <osDelay>
        GPS_ENABLE();
 800115e:	4823      	ldr	r0, [pc, #140]	@ (80011ec <getRMC+0x124>)
 8001160:	2200      	movs	r2, #0
 8001162:	2104      	movs	r1, #4
 8001164:	f004 fe34 	bl	8005dd0 <HAL_GPIO_WritePin>
        getRMC_time = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	6023      	str	r3, [r4, #0]
    }

    printf("Elapsed Time: %d\n", getRMC_time);
 800116c:	6821      	ldr	r1, [r4, #0]
 800116e:	4820      	ldr	r0, [pc, #128]	@ (80011f0 <getRMC+0x128>)
}
 8001170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("Elapsed Time: %d\n", getRMC_time);
 8001174:	f00a bc36 	b.w	800b9e4 <iprintf>
        if (handleIncomingChar(c)){
 8001178:	5cf0      	ldrb	r0, [r6, r3]
 800117a:	f7ff ff75 	bl	8001068 <handleIncomingChar>
 800117e:	b110      	cbz	r0, 8001186 <getRMC+0xbe>
        	isRMCExist = 1; // `$GNRMC` sentence is ready
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <getRMC+0x108>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 8001186:	882b      	ldrh	r3, [r5, #0]
 8001188:	f44f 528c 	mov.w	r2, #4480	@ 0x1180
 800118c:	3301      	adds	r3, #1
 800118e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001192:	fb02 3311 	mls	r3, r2, r1, r3
 8001196:	802b      	strh	r3, [r5, #0]
 8001198:	e79f      	b.n	80010da <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 800119a:	4d12      	ldr	r5, [pc, #72]	@ (80011e4 <getRMC+0x11c>)
 800119c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800119e:	b163      	cbz	r3, 80011ba <getRMC+0xf2>
			printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 80011a0:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <getRMC+0x12c>)
 80011a2:	f00a fc8f 	bl	800bac4 <puts>
			get_RTC_time_date(&rmc_saved);
 80011a6:	4628      	mov	r0, r5
 80011a8:	f002 f87a 	bl	80032a0 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 80011ac:	4628      	mov	r0, r5
 80011ae:	f7ff ff2b 	bl	8001008 <sendRMCDataToFlash>
			getRMC_time++;
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	e7ad      	b.n	8001116 <getRMC+0x4e>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 80011ba:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <getRMC+0x130>)
 80011bc:	f00a fc82 	bl	800bac4 <puts>
 80011c0:	e7f7      	b.n	80011b2 <getRMC+0xea>
 80011c2:	bf00      	nop
 80011c4:	20001ce4 	.word	0x20001ce4
 80011c8:	2000026c 	.word	0x2000026c
 80011cc:	20000428 	.word	0x20000428
 80011d0:	20000374 	.word	0x20000374
 80011d4:	20000370 	.word	0x20000370
 80011d8:	200003d0 	.word	0x200003d0
 80011dc:	200015b8 	.word	0x200015b8
 80011e0:	0800ff17 	.word	0x0800ff17
 80011e4:	20000378 	.word	0x20000378
 80011e8:	0800ffbc 	.word	0x0800ffbc
 80011ec:	48000800 	.word	0x48000800
 80011f0:	08010002 	.word	0x08010002
 80011f4:	0800ff40 	.word	0x0800ff40
 80011f8:	0800ff79 	.word	0x0800ff79

080011fc <StartGPS>:

void StartGPS(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 80011fe:	481c      	ldr	r0, [pc, #112]	@ (8001270 <StartGPS+0x74>)

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8001200:	4e1c      	ldr	r6, [pc, #112]	@ (8001274 <StartGPS+0x78>)
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001202:	4f1d      	ldr	r7, [pc, #116]	@ (8001278 <StartGPS+0x7c>)
	//		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
	//		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001204:	4d1d      	ldr	r5, [pc, #116]	@ (800127c <StartGPS+0x80>)
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8001206:	f00a fc5d 	bl	800bac4 <puts>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 800120a:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <StartGPS+0x84>)
 800120c:	491d      	ldr	r1, [pc, #116]	@ (8001284 <StartGPS+0x88>)
 800120e:	481e      	ldr	r0, [pc, #120]	@ (8001288 <StartGPS+0x8c>)
 8001210:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8001214:	f002 f800 	bl	8003218 <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <StartGPS+0x84>)
 800121a:	f44f 528c 	mov.w	r2, #4480	@ 0x1180
 800121e:	2100      	movs	r1, #0
 8001220:	f00a fdb0 	bl	800bd84 <memset>
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8001224:	6830      	ldr	r0, [r6, #0]
 8001226:	f04f 31ff 	mov.w	r1, #4294967295
 800122a:	f006 ff52 	bl	80080d2 <osMutexWait>
 800122e:	4604      	mov	r4, r0
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f7      	bne.n	8001224 <StartGPS+0x28>
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001234:	4638      	mov	r0, r7
 8001236:	f00a fc45 	bl	800bac4 <puts>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001240:	4628      	mov	r0, r5
 8001242:	f004 fdc5 	bl	8005dd0 <HAL_GPIO_WritePin>
			osDelay(500);
 8001246:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800124a:	f006 ff33 	bl	80080b4 <osDelay>
	//			printf("Hello World!!!!\n");
			getRMC();
 800124e:	f7ff ff3b 	bl	80010c8 <getRMC>
			osMutexRelease(myMutexHandle);
 8001252:	6830      	ldr	r0, [r6, #0]
 8001254:	f006 ff63 	bl	800811e <osMutexRelease>
	//		printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
	//		printf((char*) gpsSentence);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001258:	4628      	mov	r0, r5
 800125a:	4622      	mov	r2, r4
 800125c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001260:	f004 fdb6 	bl	8005dd0 <HAL_GPIO_WritePin>
			osDelay(500);
 8001264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001268:	f006 ff24 	bl	80080b4 <osDelay>
 800126c:	e7da      	b.n	8001224 <StartGPS+0x28>
 800126e:	bf00      	nop
 8001270:	08010014 	.word	0x08010014
 8001274:	20001c90 	.word	0x20001c90
 8001278:	0801004e 	.word	0x0801004e
 800127c:	48000800 	.word	0x48000800
 8001280:	20000428 	.word	0x20000428
 8001284:	20001e38 	.word	0x20001e38
 8001288:	200015a8 	.word	0x200015a8

0800128c <create_terminal_registration>:
RMCSTRUCT rmc_jt = {0};
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM = {0};


JT808_TerminalRegistration create_terminal_registration(){
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001290:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001292:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001294:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8001296:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800129a:	4622      	mov	r2, r4
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	4626      	mov	r6, r4
 80012a2:	c603      	stmia	r6!, {r0, r1}
 80012a4:	3308      	adds	r3, #8
 80012a6:	42bb      	cmp	r3, r7
 80012a8:	4634      	mov	r4, r6
 80012aa:	d1f7      	bne.n	800129c <create_terminal_registration+0x10>
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 80012b0:	4613      	mov	r3, r2
 80012b2:	ae0f      	add	r6, sp, #60	@ 0x3c
 80012b4:	462a      	mov	r2, r5
 80012b6:	461c      	mov	r4, r3
 80012b8:	cc03      	ldmia	r4!, {r0, r1}
 80012ba:	42b4      	cmp	r4, r6
 80012bc:	6010      	str	r0, [r2, #0]
 80012be:	6051      	str	r1, [r2, #4]
 80012c0:	4623      	mov	r3, r4
 80012c2:	f102 0208 	add.w	r2, r2, #8
 80012c6:	d1f6      	bne.n	80012b6 <create_terminal_registration+0x2a>
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	6010      	str	r0, [r2, #0]
}
 80012cc:	4628      	mov	r0, r5
 80012ce:	b011      	add	sp, #68	@ 0x44
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800fc80 	.word	0x0800fc80

080012d8 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 80012d8:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 80012da:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 80012dc:	b093      	sub	sp, #76	@ 0x4c
 80012de:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 80012e0:	462a      	mov	r2, r5
 80012e2:	4906      	ldr	r1, [pc, #24]	@ (80012fc <create_location_info_report+0x24>)
 80012e4:	a801      	add	r0, sp, #4
 80012e6:	f00b fbf7 	bl	800cad8 <memcpy>
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
	// Copy the terminal phone number into the structure

    return location_info;
 80012ea:	462a      	mov	r2, r5
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	4620      	mov	r0, r4
 80012f0:	f00b fbf2 	bl	800cad8 <memcpy>
}
 80012f4:	4620      	mov	r0, r4
 80012f6:	b013      	add	sp, #76	@ 0x4c
 80012f8:	bd30      	pop	{r4, r5, pc}
 80012fa:	bf00      	nop
 80012fc:	0800fcbc 	.word	0x0800fcbc

08001300 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001302:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001304:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8001308:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800130a:	bf0c      	ite	eq
 800130c:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001310:	f043 0304 	orrne.w	r3, r3, #4
 8001314:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8001316:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 800131a:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800131c:	bf0c      	ite	eq
 800131e:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001322:	f043 0308 	orrne.w	r3, r3, #8
 8001326:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20001640 	.word	0x20001640

08001330 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001330:	b510      	push	{r4, lr}
 8001332:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), 5000);
 8001334:	f7fe ffac 	bl	8000290 <strlen>
 8001338:	4621      	mov	r1, r4
 800133a:	b282      	uxth	r2, r0
}
 800133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), 5000);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <send_AT_command+0x1c>)
 8001342:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001346:	f006 bd45 	b.w	8007dd4 <HAL_UART_Transmit>
 800134a:	bf00      	nop
 800134c:	20001db0 	.word	0x20001db0

08001350 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001350:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <SIM_UART_ReInitializeRxDMA+0x28>)
 8001354:	f006 fad1 	bl	80078fa <HAL_UART_Abort>
	if(ret != HAL_OK)
 8001358:	b108      	cbz	r0, 800135e <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800135a:	f002 fb26 	bl	80039aa <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 800135e:	2032      	movs	r0, #50	@ 0x32
 8001360:	f006 fea8 	bl	80080b4 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <SIM_UART_ReInitializeRxDMA+0x2c>)
 800136a:	4903      	ldr	r1, [pc, #12]	@ (8001378 <SIM_UART_ReInitializeRxDMA+0x28>)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <SIM_UART_ReInitializeRxDMA+0x30>)
 800136e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001372:	f001 bf51 	b.w	8003218 <RingBufferDmaU8_initUSARTRx>
 8001376:	bf00      	nop
 8001378:	20001db0 	.word	0x20001db0
 800137c:	200018e4 	.word	0x200018e4
 8001380:	200018d4 	.word	0x200018d4

08001384 <receive_response>:
	}
	return i;
		
}

void receive_response() {
 8001384:	b508      	push	{r3, lr}
	printf("\n");
 8001386:	200a      	movs	r0, #10
 8001388:	f00a fb3e 	bl	800ba08 <putchar>
	//while(response[1] == '\0'){}
	printf((char *)response);
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <receive_response+0x18>)
 800138e:	f00a fb29 	bl	800b9e4 <iprintf>
	printf("\n");
//	osDelay(1000);
}
 8001392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("\n");
 8001396:	200a      	movs	r0, #10
 8001398:	f00a bb36 	b.w	800ba08 <putchar>
 800139c:	200018e4 	.word	0x200018e4

080013a0 <init_SIM_module>:

void init_SIM_module() {
 80013a0:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80013a2:	4c0b      	ldr	r4, [pc, #44]	@ (80013d0 <init_SIM_module+0x30>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	4611      	mov	r1, r2
 80013a8:	4620      	mov	r0, r4
 80013aa:	f004 fd11 	bl	8005dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2102      	movs	r1, #2
 80013b2:	4620      	mov	r0, r4
 80013b4:	f004 fd0c 	bl	8005dd0 <HAL_GPIO_WritePin>
	osDelay(2000);
 80013b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013bc:	f006 fe7a 	bl	80080b4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013c0:	4620      	mov	r0, r4
 80013c2:	2201      	movs	r2, #1
}
 80013c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013c8:	2102      	movs	r1, #2
 80013ca:	f004 bd01 	b.w	8005dd0 <HAL_GPIO_WritePin>
 80013ce:	bf00      	nop
 80013d0:	48000800 	.word	0x48000800

080013d4 <reboot_SIM_module>:

void reboot_SIM_module(){
 80013d4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013d6:	4c11      	ldr	r4, [pc, #68]	@ (800141c <reboot_SIM_module+0x48>)
 80013d8:	2200      	movs	r2, #0
 80013da:	2102      	movs	r1, #2
 80013dc:	4620      	mov	r0, r4
 80013de:	f004 fcf7 	bl	8005dd0 <HAL_GPIO_WritePin>
	osDelay(1500);
 80013e2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80013e6:	f006 fe65 	bl	80080b4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2102      	movs	r1, #2
 80013ee:	4620      	mov	r0, r4
 80013f0:	f004 fcee 	bl	8005dd0 <HAL_GPIO_WritePin>
	osDelay(10000);
 80013f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80013f8:	f006 fe5c 	bl	80080b4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2102      	movs	r1, #2
 8001400:	4620      	mov	r0, r4
 8001402:	f004 fce5 	bl	8005dd0 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001406:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800140a:	f006 fe53 	bl	80080b4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800140e:	4620      	mov	r0, r4
 8001410:	2201      	movs	r2, #1
}
 8001412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001416:	2102      	movs	r1, #2
 8001418:	f004 bcda 	b.w	8005dd0 <HAL_GPIO_WritePin>
 800141c:	48000800 	.word	0x48000800

08001420 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001420:	220a      	movs	r2, #10
 8001422:	fb90 f3f2 	sdiv	r3, r0, r2
 8001426:	fb02 0013 	mls	r0, r2, r3, r0
}
 800142a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800142e:	4770      	bx	lr

08001430 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001430:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001432:	4d43      	ldr	r5, [pc, #268]	@ (8001540 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001434:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001436:	69a8      	ldr	r0, [r5, #24]
 8001438:	f7ff fff2 	bl	8001420 <convert_dec_to_hex_value>
 800143c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001440:	6968      	ldr	r0, [r5, #20]
 8001442:	f7ff ffed 	bl	8001420 <convert_dec_to_hex_value>
 8001446:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800144a:	6928      	ldr	r0, [r5, #16]
 800144c:	f7ff ffe8 	bl	8001420 <convert_dec_to_hex_value>
 8001450:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001454:	6828      	ldr	r0, [r5, #0]
 8001456:	f7ff ffe3 	bl	8001420 <convert_dec_to_hex_value>
 800145a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800145e:	6868      	ldr	r0, [r5, #4]
 8001460:	f7ff ffde 	bl	8001420 <convert_dec_to_hex_value>
 8001464:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001468:	68a8      	ldr	r0, [r5, #8]
 800146a:	f7ff ffd9 	bl	8001420 <convert_dec_to_hex_value>
 800146e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001472:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001476:	a32e      	add	r3, pc, #184	@ (adr r3, 8001530 <save_rmc_to_location_info+0x100>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f8cc 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001480:	ec41 0b10 	vmov	d0, r0, r1
 8001484:	f00e fba8 	bl	800fbd8 <round>
 8001488:	ec51 0b10 	vmov	r0, r1, d0
 800148c:	f7ff fb74 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001490:	a327      	add	r3, pc, #156	@ (adr r3, 8001530 <save_rmc_to_location_info+0x100>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001496:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001498:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800149c:	f7ff f8bc 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80014a0:	ec41 0b10 	vmov	d0, r0, r1
 80014a4:	f00e fb98 	bl	800fbd8 <round>
 80014a8:	ec51 0b10 	vmov	r0, r1, d0
 80014ac:	f7ff fb64 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80014b0:	0e33      	lsrs	r3, r6, #24
 80014b2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80014b4:	1433      	asrs	r3, r6, #16
 80014b6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80014b8:	1233      	asrs	r3, r6, #8
 80014ba:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80014bc:	0e03      	lsrs	r3, r0, #24
 80014be:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80014c0:	1403      	asrs	r3, r0, #16
 80014c2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80014c4:	1203      	asrs	r3, r0, #8
 80014c6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80014c8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80014ca:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80014cc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80014d0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	ee17 0a90 	vmov	r0, s15
 80014dc:	f7ff f844 	bl	8000568 <__aeabi_f2d>
 80014e0:	a315      	add	r3, pc, #84	@ (adr r3, 8001538 <save_rmc_to_location_info+0x108>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f897 	bl	8000618 <__aeabi_dmul>
 80014ea:	ec41 0b10 	vmov	d0, r0, r1
 80014ee:	f00e fb73 	bl	800fbd8 <round>
 80014f2:	ec51 0b10 	vmov	r0, r1, d0
 80014f6:	f7ff fb3f 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 80014fa:	1203      	asrs	r3, r0, #8
 80014fc:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 80014fe:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001502:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001504:	f7ff f830 	bl	8000568 <__aeabi_f2d>
 8001508:	ec41 0b10 	vmov	d0, r0, r1
 800150c:	f00e fb64 	bl	800fbd8 <round>
 8001510:	ec51 0b10 	vmov	r0, r1, d0
 8001514:	f7ff fb30 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001518:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800151a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800151e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001522:	f104 0011 	add.w	r0, r4, #17
}
 8001526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800152a:	f7ff bee9 	b.w	8001300 <set_status_bit>
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	412e8480 	.word	0x412e8480
 8001538:	c083126f 	.word	0xc083126f
 800153c:	3ffda1ca 	.word	0x3ffda1ca
 8001540:	20001640 	.word	0x20001640

08001544 <first_check_SIM>:

//AT
int first_check_SIM()
{
 8001544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154a:	2100      	movs	r1, #0
 800154c:	4849      	ldr	r0, [pc, #292]	@ (8001674 <first_check_SIM+0x130>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800154e:	4d4a      	ldr	r5, [pc, #296]	@ (8001678 <first_check_SIM+0x134>)
 8001550:	4c48      	ldr	r4, [pc, #288]	@ (8001674 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001552:	f00a fc17 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001556:	f7ff fefb 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800155a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800155e:	2100      	movs	r1, #0
 8001560:	4844      	ldr	r0, [pc, #272]	@ (8001674 <first_check_SIM+0x130>)
 8001562:	f00a fc0f 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001566:	f7ff fef3 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800156a:	4629      	mov	r1, r5
 800156c:	4620      	mov	r0, r4
 800156e:	f00a fc59 	bl	800be24 <strstr>
 8001572:	2800      	cmp	r0, #0
 8001574:	d04d      	beq.n	8001612 <first_check_SIM+0xce>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 8001576:	f7ff ff05 	bl	8001384 <receive_response>
	osDelay(100);
 800157a:	2064      	movs	r0, #100	@ 0x64
 800157c:	f006 fd9a 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001584:	2100      	movs	r1, #0
 8001586:	483b      	ldr	r0, [pc, #236]	@ (8001674 <first_check_SIM+0x130>)
	count_check = 0;
	osDelay(100);


	for(size_t i = 0; i < 3 ; i++){
		send_AT_command(FIRST_CHECK);
 8001588:	4f3c      	ldr	r7, [pc, #240]	@ (800167c <first_check_SIM+0x138>)
		osDelay(300);
		receive_response();
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800158a:	4e3d      	ldr	r6, [pc, #244]	@ (8001680 <first_check_SIM+0x13c>)
 800158c:	4d39      	ldr	r5, [pc, #228]	@ (8001674 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800158e:	f00a fbf9 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001592:	f7ff fedd 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001596:	2064      	movs	r0, #100	@ 0x64
 8001598:	f006 fd8c 	bl	80080b4 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 800159c:	2403      	movs	r4, #3
		send_AT_command(FIRST_CHECK);
 800159e:	4638      	mov	r0, r7
 80015a0:	f7ff fec6 	bl	8001330 <send_AT_command>
		osDelay(300);
 80015a4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015a8:	f006 fd84 	bl	80080b4 <osDelay>
		receive_response();
 80015ac:	f7ff feea 	bl	8001384 <receive_response>
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015b0:	4631      	mov	r1, r6
 80015b2:	4628      	mov	r0, r5
 80015b4:	f00a fc36 	bl	800be24 <strstr>
 80015b8:	4601      	mov	r1, r0
 80015ba:	b388      	cbz	r0, 8001620 <first_check_SIM+0xdc>
			printf("SEND AT successfully");
 80015bc:	4831      	ldr	r0, [pc, #196]	@ (8001684 <first_check_SIM+0x140>)
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		osDelay(100);
	}
	for(size_t i = 0; i < 3 ; i++){
		send_AT_command("AT+CMEE=2\r\n");
 80015be:	4f32      	ldr	r7, [pc, #200]	@ (8001688 <first_check_SIM+0x144>)
		osDelay(300);
		receive_response();
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015c0:	4e2f      	ldr	r6, [pc, #188]	@ (8001680 <first_check_SIM+0x13c>)
 80015c2:	4d2c      	ldr	r5, [pc, #176]	@ (8001674 <first_check_SIM+0x130>)
			printf("SEND AT successfully");
 80015c4:	f00a fa0e 	bl	800b9e4 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015cc:	2100      	movs	r1, #0
 80015ce:	4829      	ldr	r0, [pc, #164]	@ (8001674 <first_check_SIM+0x130>)
 80015d0:	f00a fbd8 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 80015d4:	f7ff febc 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	for(size_t i = 0; i < 3 ; i++){
 80015d8:	2403      	movs	r4, #3
		send_AT_command("AT+CMEE=2\r\n");
 80015da:	4638      	mov	r0, r7
 80015dc:	f7ff fea8 	bl	8001330 <send_AT_command>
		osDelay(300);
 80015e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015e4:	f006 fd66 	bl	80080b4 <osDelay>
		receive_response();
 80015e8:	f7ff fecc 	bl	8001384 <receive_response>
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015ec:	4631      	mov	r1, r6
 80015ee:	4628      	mov	r0, r5
 80015f0:	f00a fc18 	bl	800be24 <strstr>
 80015f4:	4601      	mov	r1, r0
 80015f6:	b368      	cbz	r0, 8001654 <first_check_SIM+0x110>
			printf("SEND CMEE successfully");
 80015f8:	4824      	ldr	r0, [pc, #144]	@ (800168c <first_check_SIM+0x148>)
 80015fa:	f00a f9f3 	bl	800b9e4 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001602:	2100      	movs	r1, #0
 8001604:	481b      	ldr	r0, [pc, #108]	@ (8001674 <first_check_SIM+0x130>)
 8001606:	f00a fbbd 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 800160a:	f7ff fea1 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		osDelay(100);
	}

	return 1;
 800160e:	2001      	movs	r0, #1
}
 8001610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response();
 8001612:	f7ff feb7 	bl	8001384 <receive_response>
		osDelay(1000);
 8001616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800161a:	f006 fd4b 	bl	80080b4 <osDelay>
		if (count_check >= 60){
 800161e:	e7a4      	b.n	800156a <first_check_SIM+0x26>
			if(i == 2){
 8001620:	3c01      	subs	r4, #1
 8001622:	d10c      	bne.n	800163e <first_check_SIM+0xfa>
				printf("Send AT failed -> RESTART SIM MODULE\n");
 8001624:	481a      	ldr	r0, [pc, #104]	@ (8001690 <first_check_SIM+0x14c>)
				printf("Send AT+CMEE failed -> RESTART SIM MODULE\n");
 8001626:	f00a fa4d 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	4621      	mov	r1, r4
 8001630:	4810      	ldr	r0, [pc, #64]	@ (8001674 <first_check_SIM+0x130>)
 8001632:	f00a fba7 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 8001636:	f7ff fe8b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				return 0;
 800163a:	2000      	movs	r0, #0
 800163c:	e7e8      	b.n	8001610 <first_check_SIM+0xcc>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800163e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001642:	4628      	mov	r0, r5
 8001644:	f00a fb9e 	bl	800bd84 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001648:	f7ff fe82 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		osDelay(100);
 800164c:	2064      	movs	r0, #100	@ 0x64
 800164e:	f006 fd31 	bl	80080b4 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 8001652:	e7a4      	b.n	800159e <first_check_SIM+0x5a>
			if(i == 2){
 8001654:	3c01      	subs	r4, #1
 8001656:	d101      	bne.n	800165c <first_check_SIM+0x118>
				printf("Send AT+CMEE failed -> RESTART SIM MODULE\n");
 8001658:	480e      	ldr	r0, [pc, #56]	@ (8001694 <first_check_SIM+0x150>)
 800165a:	e7e4      	b.n	8001626 <first_check_SIM+0xe2>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800165c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001660:	4628      	mov	r0, r5
 8001662:	f00a fb8f 	bl	800bd84 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001666:	f7ff fe73 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		osDelay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f006 fd22 	bl	80080b4 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 8001670:	e7b3      	b.n	80015da <first_check_SIM+0x96>
 8001672:	bf00      	nop
 8001674:	200018e4 	.word	0x200018e4
 8001678:	0801008d 	.word	0x0801008d
 800167c:	080100cf 	.word	0x080100cf
 8001680:	080100d4 	.word	0x080100d4
 8001684:	08010095 	.word	0x08010095
 8001688:	08010118 	.word	0x08010118
 800168c:	080100d7 	.word	0x080100d7
 8001690:	080100aa 	.word	0x080100aa
 8001694:	080100ee 	.word	0x080100ee

08001698 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 8001698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800169a:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 800169c:	4602      	mov	r2, r0
 800169e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d044      	beq.n	8001730 <extract_last_12_digits_bcd+0x98>
 80016a6:	2b41      	cmp	r3, #65	@ 0x41
 80016a8:	d1f8      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
 80016aa:	7803      	ldrb	r3, [r0, #0]
 80016ac:	2b54      	cmp	r3, #84	@ 0x54
 80016ae:	d1f5      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
 80016b0:	7843      	ldrb	r3, [r0, #1]
 80016b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80016b4:	d1f2      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
 80016b6:	7883      	ldrb	r3, [r0, #2]
 80016b8:	2b43      	cmp	r3, #67	@ 0x43
 80016ba:	d1ef      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 80016bc:	78c3      	ldrb	r3, [r0, #3]
 80016be:	2b47      	cmp	r3, #71	@ 0x47
 80016c0:	d1ec      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
 80016c2:	7903      	ldrb	r3, [r0, #4]
 80016c4:	2b53      	cmp	r3, #83	@ 0x53
 80016c6:	d1e9      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
 80016c8:	7943      	ldrb	r3, [r0, #5]
 80016ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80016cc:	d1e6      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 80016ce:	7983      	ldrb	r3, [r0, #6]
 80016d0:	2b3d      	cmp	r3, #61	@ 0x3d
 80016d2:	d1e3      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80016d4:	79c3      	ldrb	r3, [r0, #7]
 80016d6:	2b31      	cmp	r3, #49	@ 0x31
 80016d8:	d1e0      	bne.n	800169c <extract_last_12_digits_bcd+0x4>
	}
//	printf("Inside Checking terminal Number: ");
//	printf((char*)start);
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
		start += 10;  // Move pointer past "AT+CGSN=1 "
 80016da:	320a      	adds	r2, #10

		// Move past any non-numeric characters
		while (*start && (*start < '0' || *start > '9')) {
 80016dc:	7810      	ldrb	r0, [r2, #0]
 80016de:	f1a0 0130 	sub.w	r1, r0, #48	@ 0x30
 80016e2:	4613      	mov	r3, r2
 80016e4:	b2c9      	uxtb	r1, r1
 80016e6:	3201      	adds	r2, #1
 80016e8:	b108      	cbz	r0, 80016ee <extract_last_12_digits_bcd+0x56>
 80016ea:	2909      	cmp	r1, #9
 80016ec:	d8f6      	bhi.n	80016dc <extract_last_12_digits_bcd+0x44>
 80016ee:	461a      	mov	r2, r3
		}

		// Find the length of numeric sequence and start at the last 12 digits
		const uint8_t *end = start;
		size_t digit_count = 0;
		while (*end && (*end >= '0' && *end <= '9')) {
 80016f0:	4616      	mov	r6, r2
 80016f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80016f6:	3930      	subs	r1, #48	@ 0x30
 80016f8:	2909      	cmp	r1, #9
 80016fa:	d9f9      	bls.n	80016f0 <extract_last_12_digits_bcd+0x58>
 80016fc:	1af4      	subs	r4, r6, r3
			end++;
			digit_count++;
		}
		printf("Inside Checking terminal Number-2: LEN ");
 80016fe:	480d      	ldr	r0, [pc, #52]	@ (8001734 <extract_last_12_digits_bcd+0x9c>)
 8001700:	f00a f970 	bl	800b9e4 <iprintf>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 8001704:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <extract_last_12_digits_bcd+0xa0>)
 8001706:	4623      	mov	r3, r4
 8001708:	210a      	movs	r1, #10
 800170a:	a801      	add	r0, sp, #4
 800170c:	f00a f9e2 	bl	800bad4 <sniprintf>


		if (digit_count >= 12) {
 8001710:	2c0b      	cmp	r4, #11
 8001712:	d90d      	bls.n	8001730 <extract_last_12_digits_bcd+0x98>
			const uint8_t *last_12 = end - 12;
 8001714:	f1a6 030c 	sub.w	r3, r6, #12
 8001718:	3d01      	subs	r5, #1

			// Convert each pair of digits to BCD
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800171a:	7819      	ldrb	r1, [r3, #0]
 800171c:	785a      	ldrb	r2, [r3, #1]
 800171e:	3930      	subs	r1, #48	@ 0x30
 8001720:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 8001722:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001724:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 8001728:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800172a:	f805 2f01 	strb.w	r2, [r5, #1]!
			for (int i = 0; i < 6; i++) {
 800172e:	d1f4      	bne.n	800171a <extract_last_12_digits_bcd+0x82>
		}
	}
//	printf(&huart1, (uint8_t *)" Check terminal Number-0: ");
//	printf(&huart1, output);
//	printf(&huart1, (uint8_t *)" \n");
}
 8001730:	b004      	add	sp, #16
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	08010124 	.word	0x08010124
 8001738:	080103f0 	.word	0x080103f0

0800173c <has_number>:
    }
    return -1; // Failure
}

int has_number(const char *str) {
    while (*str) {
 800173c:	1e43      	subs	r3, r0, #1
 800173e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001742:	b900      	cbnz	r0, 8001746 <has_number+0xa>
 8001744:	4770      	bx	lr
        if (*str >= '0' && *str <= '9') {
 8001746:	3830      	subs	r0, #48	@ 0x30
 8001748:	2809      	cmp	r0, #9
 800174a:	d8f8      	bhi.n	800173e <has_number+0x2>
            return 1; // Found a digit
 800174c:	2001      	movs	r0, #1
        }
        str++;
    }
    return 0; // No digits found
}
 800174e:	4770      	bx	lr

08001750 <check_SIM_ready>:


int check_SIM_ready(){
 8001750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001754:	4888      	ldr	r0, [pc, #544]	@ (8001978 <check_SIM_ready+0x228>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 8001756:	4e89      	ldr	r6, [pc, #548]	@ (800197c <check_SIM_ready+0x22c>)
 8001758:	4d89      	ldr	r5, [pc, #548]	@ (8001980 <check_SIM_ready+0x230>)
	send_AT_command(GET_IMEI);
 800175a:	f7ff fde9 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 800175e:	2405      	movs	r4, #5
 8001760:	4631      	mov	r1, r6
 8001762:	4628      	mov	r0, r5
 8001764:	f00a fb5e 	bl	800be24 <strstr>
 8001768:	b928      	cbnz	r0, 8001776 <check_SIM_ready+0x26>
 800176a:	4628      	mov	r0, r5
 800176c:	f7ff ffe6 	bl	800173c <has_number>
 8001770:	2800      	cmp	r0, #0
 8001772:	f000 80d8 	beq.w	8001926 <check_SIM_ready+0x1d6>
			return 0;
		}
//		receive_response();
		osDelay(1000);
	}
	receive_response();
 8001776:	f7ff fe05 	bl	8001384 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 800177a:	4982      	ldr	r1, [pc, #520]	@ (8001984 <check_SIM_ready+0x234>)
 800177c:	4880      	ldr	r0, [pc, #512]	@ (8001980 <check_SIM_ready+0x230>)
	count_check_sim = 0;

	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800177e:	4e7f      	ldr	r6, [pc, #508]	@ (800197c <check_SIM_ready+0x22c>)
 8001780:	4d7f      	ldr	r5, [pc, #508]	@ (8001980 <check_SIM_ready+0x230>)
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001782:	f7ff ff89 	bl	8001698 <extract_last_12_digits_bcd>
	printf(" Check terminal Number: %s\n", terminal_phone_number);
 8001786:	497f      	ldr	r1, [pc, #508]	@ (8001984 <check_SIM_ready+0x234>)
 8001788:	487f      	ldr	r0, [pc, #508]	@ (8001988 <check_SIM_ready+0x238>)
 800178a:	f00a f92b 	bl	800b9e4 <iprintf>
	osDelay(100);
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f006 fc90 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001798:	2100      	movs	r1, #0
 800179a:	4879      	ldr	r0, [pc, #484]	@ (8001980 <check_SIM_ready+0x230>)
 800179c:	f00a faf2 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 80017a0:	f7ff fdd6 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80017a4:	4879      	ldr	r0, [pc, #484]	@ (800198c <check_SIM_ready+0x23c>)
 80017a6:	f7ff fdc3 	bl	8001330 <send_AT_command>
	osDelay(100);
 80017aa:	2064      	movs	r0, #100	@ 0x64
 80017ac:	f006 fc82 	bl	80080b4 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80017b0:	2405      	movs	r4, #5
 80017b2:	4631      	mov	r1, r6
 80017b4:	4628      	mov	r0, r5
 80017b6:	f00a fb35 	bl	800be24 <strstr>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	f000 80c5 	beq.w	800194a <check_SIM_ready+0x1fa>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 80017c0:	f7ff fde0 	bl	8001384 <receive_response>
	osDelay(100);
 80017c4:	2064      	movs	r0, #100	@ 0x64
 80017c6:	f006 fc75 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ce:	2100      	movs	r1, #0
 80017d0:	486b      	ldr	r0, [pc, #428]	@ (8001980 <check_SIM_ready+0x230>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80017d2:	4e6f      	ldr	r6, [pc, #444]	@ (8001990 <check_SIM_ready+0x240>)
 80017d4:	4d6a      	ldr	r5, [pc, #424]	@ (8001980 <check_SIM_ready+0x230>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017d6:	f00a fad5 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 80017da:	f7ff fdb9 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 80017de:	2064      	movs	r0, #100	@ 0x64
 80017e0:	f006 fc68 	bl	80080b4 <osDelay>
	send_AT_command(GET_SIM_CCID);
 80017e4:	486b      	ldr	r0, [pc, #428]	@ (8001994 <check_SIM_ready+0x244>)
 80017e6:	f7ff fda3 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 80017ea:	2405      	movs	r4, #5
 80017ec:	4631      	mov	r1, r6
 80017ee:	4628      	mov	r0, r5
 80017f0:	f00a fb18 	bl	800be24 <strstr>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	f000 80b0 	beq.w	800195a <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 80017fa:	f7ff fdc3 	bl	8001384 <receive_response>
	osDelay(100);
 80017fe:	2064      	movs	r0, #100	@ 0x64
 8001800:	f006 fc58 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001808:	2100      	movs	r1, #0
 800180a:	485d      	ldr	r0, [pc, #372]	@ (8001980 <check_SIM_ready+0x230>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 800180c:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80019a8 <check_SIM_ready+0x258>
		osDelay(150);
//		receive_response("Check Network Registration Status (CS Service)\n");
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001810:	4f5a      	ldr	r7, [pc, #360]	@ (800197c <check_SIM_ready+0x22c>)
 8001812:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8001980 <check_SIM_ready+0x230>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001816:	f00a fab5 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 800181a:	f7ff fd99 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 800181e:	485e      	ldr	r0, [pc, #376]	@ (8001998 <check_SIM_ready+0x248>)
 8001820:	f7ff fd86 	bl	8001330 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001824:	485d      	ldr	r0, [pc, #372]	@ (800199c <check_SIM_ready+0x24c>)
 8001826:	f7ff fdad 	bl	8001384 <receive_response>
 800182a:	2606      	movs	r6, #6
	char *second_pointer = NULL;
 800182c:	2500      	movs	r5, #0
		send_AT_command("AT+CREG?\r\n");
 800182e:	4640      	mov	r0, r8
 8001830:	f7ff fd7e 	bl	8001330 <send_AT_command>
		osDelay(150);
 8001834:	2096      	movs	r0, #150	@ 0x96
 8001836:	f006 fc3d 	bl	80080b4 <osDelay>
		osDelay(1000);
 800183a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183e:	f006 fc39 	bl	80080b4 <osDelay>
		osDelay(300);
 8001842:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001846:	f006 fc35 	bl	80080b4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800184a:	4639      	mov	r1, r7
 800184c:	4648      	mov	r0, r9
 800184e:	f00a fae9 	bl	800be24 <strstr>
		if(first_pointer != NULL){
 8001852:	4604      	mov	r4, r0
 8001854:	b120      	cbz	r0, 8001860 <check_SIM_ready+0x110>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001856:	4639      	mov	r1, r7
 8001858:	3001      	adds	r0, #1
 800185a:	f00a fae3 	bl	800be24 <strstr>
 800185e:	4605      	mov	r5, r0
		}
		if (count_check_sim >= TIME_LIMIT){
 8001860:	3e01      	subs	r6, #1
 8001862:	d062      	beq.n	800192a <check_SIM_ready+0x1da>
	while (first_pointer == NULL || second_pointer == NULL){
 8001864:	2c00      	cmp	r4, #0
 8001866:	d0e2      	beq.n	800182e <check_SIM_ready+0xde>
 8001868:	2d00      	cmp	r5, #0
 800186a:	d0e0      	beq.n	800182e <check_SIM_ready+0xde>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check_sim++;
	}
	receive_response();
 800186c:	f7ff fd8a 	bl	8001384 <receive_response>
	osDelay(100);
 8001870:	2064      	movs	r0, #100	@ 0x64
 8001872:	f006 fc1f 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187a:	2100      	movs	r1, #0
 800187c:	4840      	ldr	r0, [pc, #256]	@ (8001980 <check_SIM_ready+0x230>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
//	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 800187e:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 80019ac <check_SIM_ready+0x25c>
		osDelay(150);
//		receive_response("Check Network Registration Status (PS Service)\n");
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001882:	4f3e      	ldr	r7, [pc, #248]	@ (800197c <check_SIM_ready+0x22c>)
 8001884:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8001980 <check_SIM_ready+0x230>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001888:	f00a fa7c 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 800188c:	f7ff fd60 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 8001890:	4843      	ldr	r0, [pc, #268]	@ (80019a0 <check_SIM_ready+0x250>)
 8001892:	f7ff fd4d 	bl	8001330 <send_AT_command>
 8001896:	2606      	movs	r6, #6
	second_pointer = NULL;
 8001898:	2500      	movs	r5, #0
		send_AT_command("AT+CGREG?\r\n");
 800189a:	4640      	mov	r0, r8
 800189c:	f7ff fd48 	bl	8001330 <send_AT_command>
		osDelay(150);
 80018a0:	2096      	movs	r0, #150	@ 0x96
 80018a2:	f006 fc07 	bl	80080b4 <osDelay>
		osDelay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018aa:	f006 fc03 	bl	80080b4 <osDelay>
		osDelay(300);
 80018ae:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018b2:	f006 fbff 	bl	80080b4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80018b6:	4639      	mov	r1, r7
 80018b8:	4648      	mov	r0, r9
 80018ba:	f00a fab3 	bl	800be24 <strstr>
		if(first_pointer != NULL){
 80018be:	4604      	mov	r4, r0
 80018c0:	b120      	cbz	r0, 80018cc <check_SIM_ready+0x17c>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 80018c2:	4639      	mov	r1, r7
 80018c4:	3001      	adds	r0, #1
 80018c6:	f00a faad 	bl	800be24 <strstr>
 80018ca:	4605      	mov	r5, r0
		}
		if (count_check_sim >= TIME_LIMIT){
 80018cc:	3e01      	subs	r6, #1
 80018ce:	d02c      	beq.n	800192a <check_SIM_ready+0x1da>
	while (first_pointer == NULL || second_pointer == NULL){
 80018d0:	2c00      	cmp	r4, #0
 80018d2:	d0e2      	beq.n	800189a <check_SIM_ready+0x14a>
 80018d4:	2d00      	cmp	r5, #0
 80018d6:	d0e0      	beq.n	800189a <check_SIM_ready+0x14a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check_sim++;
	}
	receive_response();
 80018d8:	f7ff fd54 	bl	8001384 <receive_response>
	osDelay(100);
 80018dc:	2064      	movs	r0, #100	@ 0x64
 80018de:	f006 fbe9 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e6:	2100      	movs	r1, #0
 80018e8:	4825      	ldr	r0, [pc, #148]	@ (8001980 <check_SIM_ready+0x230>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018ea:	4e24      	ldr	r6, [pc, #144]	@ (800197c <check_SIM_ready+0x22c>)
 80018ec:	4d24      	ldr	r5, [pc, #144]	@ (8001980 <check_SIM_ready+0x230>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018ee:	f00a fa49 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 80018f2:	f7ff fd2d 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80018f6:	482b      	ldr	r0, [pc, #172]	@ (80019a4 <check_SIM_ready+0x254>)
 80018f8:	f7ff fd1a 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018fc:	2406      	movs	r4, #6
 80018fe:	4631      	mov	r1, r6
 8001900:	4628      	mov	r0, r5
 8001902:	f00a fa8f 	bl	800be24 <strstr>
 8001906:	b380      	cbz	r0, 800196a <check_SIM_ready+0x21a>
		}
		count_check_sim++;
		osDelay(1000);
//		receive_response("Check Signal Quality Report\n");
	}
	receive_response();
 8001908:	f7ff fd3c 	bl	8001384 <receive_response>
	osDelay(100);
 800190c:	2064      	movs	r0, #100	@ 0x64
 800190e:	f006 fbd1 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001916:	2100      	movs	r1, #0
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <check_SIM_ready+0x230>)
 800191a:	f00a fa33 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 800191e:	f7ff fd17 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	count_check_sim = 0;
	return 1;
 8001922:	2001      	movs	r0, #1
 8001924:	e00a      	b.n	800193c <check_SIM_ready+0x1ec>
		if (count_check_sim >= 5){
 8001926:	3c01      	subs	r4, #1
 8001928:	d10a      	bne.n	8001940 <check_SIM_ready+0x1f0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800192a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192e:	2100      	movs	r1, #0
 8001930:	4813      	ldr	r0, [pc, #76]	@ (8001980 <check_SIM_ready+0x230>)
 8001932:	f00a fa27 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001936:	f7ff fd0b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800193a:	2000      	movs	r0, #0


}
 800193c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		osDelay(1000);
 8001940:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001944:	f006 fbb6 	bl	80080b4 <osDelay>
 8001948:	e70a      	b.n	8001760 <check_SIM_ready+0x10>
		osDelay(1000);
 800194a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800194e:	f006 fbb1 	bl	80080b4 <osDelay>
		if (count_check_sim >= 5){
 8001952:	3c01      	subs	r4, #1
 8001954:	f47f af2d 	bne.w	80017b2 <check_SIM_ready+0x62>
 8001958:	e7e7      	b.n	800192a <check_SIM_ready+0x1da>
		osDelay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195e:	f006 fba9 	bl	80080b4 <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 8001962:	3c01      	subs	r4, #1
 8001964:	f47f af42 	bne.w	80017ec <check_SIM_ready+0x9c>
 8001968:	e7df      	b.n	800192a <check_SIM_ready+0x1da>
		if (count_check_sim >= TIME_LIMIT){
 800196a:	3c01      	subs	r4, #1
 800196c:	d0dd      	beq.n	800192a <check_SIM_ready+0x1da>
		osDelay(1000);
 800196e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001972:	f006 fb9f 	bl	80080b4 <osDelay>
 8001976:	e7c2      	b.n	80018fe <check_SIM_ready+0x1ae>
 8001978:	0801014c 	.word	0x0801014c
 800197c:	080100d4 	.word	0x080100d4
 8001980:	200018e4 	.word	0x200018e4
 8001984:	20001638 	.word	0x20001638
 8001988:	08010158 	.word	0x08010158
 800198c:	08010174 	.word	0x08010174
 8001990:	0801018a 	.word	0x0801018a
 8001994:	0801017f 	.word	0x0801017f
 8001998:	08010192 	.word	0x08010192
 800199c:	0801019e 	.word	0x0801019e
 80019a0:	080101de 	.word	0x080101de
 80019a4:	080101f7 	.word	0x080101f7
 80019a8:	080101d3 	.word	0x080101d3
 80019ac:	080101eb 	.word	0x080101eb

080019b0 <check_configure_APN>:

void check_configure_APN(){
 80019b0:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <check_configure_APN+0x18>)
 80019b4:	f7ff fcbc 	bl	8001330 <send_AT_command>
	osDelay(150);
 80019b8:	2096      	movs	r0, #150	@ 0x96
 80019ba:	f006 fb7b 	bl	80080b4 <osDelay>
	receive_response();
}
 80019be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response();
 80019c2:	f7ff bcdf 	b.w	8001384 <receive_response>
 80019c6:	bf00      	nop
 80019c8:	08010200 	.word	0x08010200

080019cc <configure_APN>:

int configure_APN(int context_id){
 80019cc:	b530      	push	{r4, r5, lr}
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80019ce:	4917      	ldr	r1, [pc, #92]	@ (8001a2c <configure_APN+0x60>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80019d0:	4c17      	ldr	r4, [pc, #92]	@ (8001a30 <configure_APN+0x64>)
 80019d2:	4d18      	ldr	r5, [pc, #96]	@ (8001a34 <configure_APN+0x68>)
int configure_APN(int context_id){
 80019d4:	b0c7      	sub	sp, #284	@ 0x11c
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80019d6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80019da:	4917      	ldr	r1, [pc, #92]	@ (8001a38 <configure_APN+0x6c>)
 80019dc:	2201      	movs	r2, #1
int configure_APN(int context_id){
 80019de:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80019e0:	e9cd 2100 	strd	r2, r1, [sp]
 80019e4:	9204      	str	r2, [sp, #16]
 80019e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019ea:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <configure_APN+0x70>)
 80019ec:	a806      	add	r0, sp, #24
 80019ee:	f00a f871 	bl	800bad4 <sniprintf>
	send_AT_command((char*)command);
 80019f2:	a806      	add	r0, sp, #24
 80019f4:	f7ff fc9c 	bl	8001330 <send_AT_command>
	osDelay(150);
 80019f8:	2096      	movs	r0, #150	@ 0x96
 80019fa:	f006 fb5b 	bl	80080b4 <osDelay>
	receive_response();
 80019fe:	f7ff fcc1 	bl	8001384 <receive_response>
		check_configure_APN();
 8001a02:	f7ff ffd5 	bl	80019b0 <check_configure_APN>
		osDelay(1300);
 8001a06:	f240 5014 	movw	r0, #1300	@ 0x514
 8001a0a:	f006 fb53 	bl	80080b4 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <configure_APN+0x64>)
 8001a10:	4628      	mov	r0, r5
 8001a12:	f00a fa07 	bl	800be24 <strstr>
		if(first_pointer != NULL){
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d0f3      	beq.n	8001a02 <configure_APN+0x36>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	3001      	adds	r0, #1
 8001a1e:	f00a fa01 	bl	800be24 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d0ed      	beq.n	8001a02 <configure_APN+0x36>
		}
	}
	return 1;
}
 8001a26:	2001      	movs	r0, #1
 8001a28:	b047      	add	sp, #284	@ 0x11c
 8001a2a:	bd30      	pop	{r4, r5, pc}
 8001a2c:	08010f0e 	.word	0x08010f0e
 8001a30:	080100d4 	.word	0x080100d4
 8001a34:	200018e4 	.word	0x200018e4
 8001a38:	08010234 	.word	0x08010234
 8001a3c:	0801020e 	.word	0x0801020e

08001a40 <check_activate_context>:

void check_activate_context(){
 8001a40:	b500      	push	{lr}
 8001a42:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001a44:	4906      	ldr	r1, [pc, #24]	@ (8001a60 <check_activate_context+0x20>)
 8001a46:	4668      	mov	r0, sp
 8001a48:	f00b f83e 	bl	800cac8 <strcpy>
	send_AT_command((char*)command);
 8001a4c:	4668      	mov	r0, sp
 8001a4e:	f7ff fc6f 	bl	8001330 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001a52:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <check_activate_context+0x24>)
 8001a54:	f7ff fc96 	bl	8001384 <receive_response>
}
 8001a58:	b021      	add	sp, #132	@ 0x84
 8001a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a5e:	bf00      	nop
 8001a60:	0801023e 	.word	0x0801023e
 8001a64:	0801024a 	.word	0x0801024a

08001a68 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6c:	b0a0      	sub	sp, #128	@ 0x80
 8001a6e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001a70:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <activate_context+0xb8>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001a72:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8001b2c <activate_context+0xc4>
 8001a76:	4e2b      	ldr	r6, [pc, #172]	@ (8001b24 <activate_context+0xbc>)
//			return 0;
			break;
		}

		receive_response();
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a78:	4f2b      	ldr	r7, [pc, #172]	@ (8001b28 <activate_context+0xc0>)
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	4668      	mov	r0, sp
 8001a7e:	f00a f829 	bl	800bad4 <sniprintf>
	send_AT_command((char*)command);
 8001a82:	4668      	mov	r0, sp
 8001a84:	f7ff fc54 	bl	8001330 <send_AT_command>
	osDelay(150);
 8001a88:	2096      	movs	r0, #150	@ 0x96
 8001a8a:	f006 fb13 	bl	80080b4 <osDelay>
	receive_response();
 8001a8e:	f7ff fc79 	bl	8001384 <receive_response>
 8001a92:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001a94:	2400      	movs	r4, #0
		check_activate_context();
 8001a96:	f7ff ffd3 	bl	8001a40 <check_activate_context>
		osDelay(300);
 8001a9a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a9e:	f006 fb09 	bl	80080b4 <osDelay>
		if(count_check >= 50){
 8001aa2:	3d01      	subs	r5, #1
 8001aa4:	d021      	beq.n	8001aea <activate_context+0x82>
		if (strstr((char*)response, "ERROR") != NULL){
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f00a f9bb 	bl	800be24 <strstr>
 8001aae:	b340      	cbz	r0, 8001b02 <activate_context+0x9a>
			osDelay(500);
 8001ab0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ab4:	f006 fafe 	bl	80080b4 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	2100      	movs	r1, #0
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f00a f960 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ac4:	f7ff fc44 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001ac8:	4668      	mov	r0, sp
 8001aca:	f7ff fc31 	bl	8001330 <send_AT_command>
			count_error++;
 8001ace:	3401      	adds	r4, #1
			osDelay(200);
 8001ad0:	20c8      	movs	r0, #200	@ 0xc8
 8001ad2:	f006 faef 	bl	80080b4 <osDelay>
		if(count_error >= 3){
 8001ad6:	2c03      	cmp	r4, #3
 8001ad8:	d113      	bne.n	8001b02 <activate_context+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4810      	ldr	r0, [pc, #64]	@ (8001b24 <activate_context+0xbc>)
 8001ae2:	f00a f94f 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ae6:	f7ff fc33 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aee:	2100      	movs	r1, #0
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <activate_context+0xbc>)
 8001af2:	f00a f947 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001af6:	f7ff fc2b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001afa:	2001      	movs	r0, #1
 8001afc:	b020      	add	sp, #128	@ 0x80
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response();
 8001b02:	f7ff fc3f 	bl	8001384 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001b06:	4639      	mov	r1, r7
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f00a f98b 	bl	800be24 <strstr>
		if(first_pointer != NULL){
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d0c1      	beq.n	8001a96 <activate_context+0x2e>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001b12:	4639      	mov	r1, r7
 8001b14:	3001      	adds	r0, #1
 8001b16:	f00a f985 	bl	800be24 <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d0bb      	beq.n	8001a96 <activate_context+0x2e>
 8001b1e:	e7e4      	b.n	8001aea <activate_context+0x82>
 8001b20:	08010262 	.word	0x08010262
 8001b24:	200018e4 	.word	0x200018e4
 8001b28:	080100d4 	.word	0x080100d4
 8001b2c:	08011080 	.word	0x08011080

08001b30 <deactivate_context>:

int deactivate_context(int context_id){
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001b36:	2064      	movs	r0, #100	@ 0x64
 8001b38:	f006 fabc 	bl	80080b4 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <deactivate_context+0x7c>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b40:	4e1b      	ldr	r6, [pc, #108]	@ (8001bb0 <deactivate_context+0x80>)
 8001b42:	4d1c      	ldr	r5, [pc, #112]	@ (8001bb4 <deactivate_context+0x84>)
//		receive_response("DEACTIVATE CONTEXT\n");
		if (strstr((char *) response, "ERROR") != NULL){
 8001b44:	4f1c      	ldr	r7, [pc, #112]	@ (8001bb8 <deactivate_context+0x88>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	4668      	mov	r0, sp
 8001b4a:	f009 ffc3 	bl	800bad4 <sniprintf>
	send_AT_command((char*)command);
 8001b4e:	4668      	mov	r0, sp
 8001b50:	f7ff fbee 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b54:	2415      	movs	r4, #21
 8001b56:	4631      	mov	r1, r6
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f00a f963 	bl	800be24 <strstr>
 8001b5e:	b170      	cbz	r0, 8001b7e <deactivate_context+0x4e>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response();
 8001b60:	f7ff fc10 	bl	8001384 <receive_response>
	osDelay(100);
 8001b64:	2064      	movs	r0, #100	@ 0x64
 8001b66:	f006 faa5 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4810      	ldr	r0, [pc, #64]	@ (8001bb4 <deactivate_context+0x84>)
 8001b72:	f00a f907 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b76:	f7ff fbeb 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e00d      	b.n	8001b9a <deactivate_context+0x6a>
		if (strstr((char *) response, "ERROR") != NULL){
 8001b7e:	4639      	mov	r1, r7
 8001b80:	4628      	mov	r0, r5
 8001b82:	f00a f94f 	bl	800be24 <strstr>
 8001b86:	b150      	cbz	r0, 8001b9e <deactivate_context+0x6e>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <deactivate_context+0x84>)
 8001b90:	f00a f8f8 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001b94:	f7ff fbdc 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	b021      	add	sp, #132	@ 0x84
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 8001b9e:	3c01      	subs	r4, #1
 8001ba0:	d0f2      	beq.n	8001b88 <deactivate_context+0x58>
		osDelay(1200);
 8001ba2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001ba6:	f006 fa85 	bl	80080b4 <osDelay>
 8001baa:	e7d4      	b.n	8001b56 <deactivate_context+0x26>
 8001bac:	08010270 	.word	0x08010270
 8001bb0:	080100d4 	.word	0x080100d4
 8001bb4:	200018e4 	.word	0x200018e4
 8001bb8:	08011080 	.word	0x08011080

08001bbc <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc0:	b0c6      	sub	sp, #280	@ 0x118
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bc6:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <open_socket_service+0x120>)
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <open_socket_service+0x124>)
 8001bd2:	4a44      	ldr	r2, [pc, #272]	@ (8001ce4 <open_socket_service+0x128>)
	//time_t start = time(NULL);
	int count_error = 0;
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
//		receive_response();
		if (strstr((char *) response, "ERROR") != NULL){
 8001bd4:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8001cf8 <open_socket_service+0x13c>
 8001bd8:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8001ce8 <open_socket_service+0x12c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001bdc:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8001cfc <open_socket_service+0x140>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001be0:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001be4:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001be6:	4603      	mov	r3, r0
 8001be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bec:	a806      	add	r0, sp, #24
 8001bee:	f009 ff71 	bl	800bad4 <sniprintf>
	send_AT_command((char *) command);
 8001bf2:	a806      	add	r0, sp, #24
 8001bf4:	f7ff fb9c 	bl	8001330 <send_AT_command>
	osDelay(100);
 8001bf8:	2064      	movs	r0, #100	@ 0x64
 8001bfa:	f006 fa5b 	bl	80080b4 <osDelay>
	int count_error = 0;
 8001bfe:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001c00:	463e      	mov	r6, r7
		if (strstr((char *) response, "ERROR") != NULL){
 8001c02:	4649      	mov	r1, r9
 8001c04:	4640      	mov	r0, r8
 8001c06:	f00a f90d 	bl	800be24 <strstr>
 8001c0a:	b1e8      	cbz	r0, 8001c48 <open_socket_service+0x8c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c10:	2100      	movs	r1, #0
 8001c12:	4640      	mov	r0, r8
 8001c14:	f00a f8b6 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c18:	f7ff fb9a 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			osDelay(500);
 8001c1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c20:	f006 fa48 	bl	80080b4 <osDelay>
			count_error++;
 8001c24:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001c26:	a806      	add	r0, sp, #24
 8001c28:	f7ff fb82 	bl	8001330 <send_AT_command>
		if(count_error >= 6){
 8001c2c:	2f06      	cmp	r7, #6
 8001c2e:	d10b      	bne.n	8001c48 <open_socket_service+0x8c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c34:	2100      	movs	r1, #0
 8001c36:	482c      	ldr	r0, [pc, #176]	@ (8001ce8 <open_socket_service+0x12c>)
 8001c38:	f00a f8a4 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c3c:	f7ff fb88 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001c40:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001c42:	b046      	add	sp, #280	@ 0x118
 8001c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001c48:	4651      	mov	r1, sl
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	f00a f8ea 	bl	800be24 <strstr>
		elapsed_time_ms++;
 8001c50:	3601      	adds	r6, #1
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001c52:	4605      	mov	r5, r0
		printf("Elapsed Time: %d\n", elapsed_time_ms);
 8001c54:	4631      	mov	r1, r6
 8001c56:	4825      	ldr	r0, [pc, #148]	@ (8001cec <open_socket_service+0x130>)
 8001c58:	f009 fec4 	bl	800b9e4 <iprintf>
		osDelay(1000);
 8001c5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c60:	f006 fa28 	bl	80080b4 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001c64:	b90d      	cbnz	r5, 8001c6a <open_socket_service+0xae>
 8001c66:	2e32      	cmp	r6, #50	@ 0x32
 8001c68:	d1cb      	bne.n	8001c02 <open_socket_service+0x46>
	receive_response();
 8001c6a:	f7ff fb8b 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c72:	2100      	movs	r1, #0
 8001c74:	481c      	ldr	r0, [pc, #112]	@ (8001ce8 <open_socket_service+0x12c>)
 8001c76:	f00a f885 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001c7a:	f7ff fb69 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d0de      	beq.n	8001c40 <open_socket_service+0x84>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001c82:	4623      	mov	r3, r4
 8001c84:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <open_socket_service+0x134>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001c86:	4d1b      	ldr	r5, [pc, #108]	@ (8001cf4 <open_socket_service+0x138>)
 8001c88:	4c17      	ldr	r4, [pc, #92]	@ (8001ce8 <open_socket_service+0x12c>)
			if (strstr((char *) response, "ERROR") != NULL){
 8001c8a:	4e1b      	ldr	r6, [pc, #108]	@ (8001cf8 <open_socket_service+0x13c>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c90:	a806      	add	r0, sp, #24
 8001c92:	f009 ff1f 	bl	800bad4 <sniprintf>
		send_AT_command((char*) command);
 8001c96:	a806      	add	r0, sp, #24
 8001c98:	f7ff fb4a 	bl	8001330 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f00a f8c0 	bl	800be24 <strstr>
 8001ca4:	b170      	cbz	r0, 8001cc4 <open_socket_service+0x108>
		receive_response();
 8001ca6:	f7ff fb6d 	bl	8001384 <receive_response>
		osDelay(100);
 8001caa:	2064      	movs	r0, #100	@ 0x64
 8001cac:	f006 fa02 	bl	80080b4 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <open_socket_service+0x12c>)
 8001cb8:	f00a f864 	bl	800bd84 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001cbc:	f7ff fb48 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	e7be      	b.n	8001c42 <open_socket_service+0x86>
			if (strstr((char *) response, "ERROR") != NULL){
 8001cc4:	4631      	mov	r1, r6
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f00a f8ac 	bl	800be24 <strstr>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d1af      	bne.n	8001c30 <open_socket_service+0x74>
			osDelay(1000);
 8001cd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd4:	f006 f9ee 	bl	80080b4 <osDelay>
 8001cd8:	e7e0      	b.n	8001c9c <open_socket_service+0xe0>
 8001cda:	bf00      	nop
 8001cdc:	080102a5 	.word	0x080102a5
 8001ce0:	080102b2 	.word	0x080102b2
 8001ce4:	08010280 	.word	0x08010280
 8001ce8:	200018e4 	.word	0x200018e4
 8001cec:	08010002 	.word	0x08010002
 8001cf0:	080102bf 	.word	0x080102bf
 8001cf4:	080100d4 	.word	0x080100d4
 8001cf8:	08011080 	.word	0x08011080
 8001cfc:	080102b6 	.word	0x080102b6

08001d00 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001d04:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001d06:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001d3c <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001d0a:	4607      	mov	r7, r0
 8001d0c:	460e      	mov	r6, r1
 8001d0e:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001d10:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001d12:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001d16:	42b5      	cmp	r5, r6
 8001d18:	db02      	blt.n	8001d20 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001d20:	3402      	adds	r4, #2
 8001d22:	4544      	cmp	r4, r8
 8001d24:	da07      	bge.n	8001d36 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001d26:	5d7a      	ldrb	r2, [r7, r5]
 8001d28:	4651      	mov	r1, sl
 8001d2a:	eb09 0004 	add.w	r0, r9, r4
 8001d2e:	f009 ff05 	bl	800bb3c <siprintf>
    for (int i = 0; i < length; i++) {
 8001d32:	3501      	adds	r5, #1
 8001d34:	e7ef      	b.n	8001d16 <formatToHexString+0x16>
            return -1;
 8001d36:	f04f 34ff 	mov.w	r4, #4294967295
 8001d3a:	e7ee      	b.n	8001d1a <formatToHexString+0x1a>
 8001d3c:	080114e6 	.word	0x080114e6

08001d40 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001d42:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001d44:	460c      	mov	r4, r1
 8001d46:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001d50:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001d52:	f7ff ffd5 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001d56:	462b      	mov	r3, r5
 8001d58:	9000      	str	r0, [sp, #0]
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	1c70      	adds	r0, r6, #1
 8001d60:	f7ff ffce 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001d64:	462b      	mov	r3, r5
 8001d66:	9000      	str	r0, [sp, #0]
 8001d68:	4622      	mov	r2, r4
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	1cf0      	adds	r0, r6, #3
 8001d6e:	f7ff ffc7 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001d72:	462b      	mov	r3, r5
 8001d74:	9000      	str	r0, [sp, #0]
 8001d76:	4622      	mov	r2, r4
 8001d78:	2106      	movs	r1, #6
 8001d7a:	1d70      	adds	r0, r6, #5
 8001d7c:	f7ff ffc0 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001d80:	462b      	mov	r3, r5
 8001d82:	9000      	str	r0, [sp, #0]
 8001d84:	4622      	mov	r2, r4
 8001d86:	2102      	movs	r1, #2
 8001d88:	f106 000b 	add.w	r0, r6, #11
 8001d8c:	f7ff ffb8 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001d90:	462b      	mov	r3, r5
 8001d92:	9000      	str	r0, [sp, #0]
 8001d94:	4622      	mov	r2, r4
 8001d96:	2102      	movs	r1, #2
 8001d98:	f106 000d 	add.w	r0, r6, #13
 8001d9c:	f7ff ffb0 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001da0:	462b      	mov	r3, r5
 8001da2:	9000      	str	r0, [sp, #0]
 8001da4:	4622      	mov	r2, r4
 8001da6:	2102      	movs	r1, #2
 8001da8:	f106 000f 	add.w	r0, r6, #15
 8001dac:	f7ff ffa8 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001db0:	462b      	mov	r3, r5
 8001db2:	9000      	str	r0, [sp, #0]
 8001db4:	4622      	mov	r2, r4
 8001db6:	2105      	movs	r1, #5
 8001db8:	f106 0011 	add.w	r0, r6, #17
 8001dbc:	f7ff ffa0 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	9000      	str	r0, [sp, #0]
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	f106 0016 	add.w	r0, r6, #22
 8001dcc:	f7ff ff98 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	9000      	str	r0, [sp, #0]
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	2107      	movs	r1, #7
 8001dd8:	f106 001e 	add.w	r0, r6, #30
 8001ddc:	f7ff ff90 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001de0:	462b      	mov	r3, r5
 8001de2:	9000      	str	r0, [sp, #0]
 8001de4:	4622      	mov	r2, r4
 8001de6:	2101      	movs	r1, #1
 8001de8:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001dec:	f7ff ff88 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001df0:	462b      	mov	r3, r5
 8001df2:	9000      	str	r0, [sp, #0]
 8001df4:	4622      	mov	r2, r4
 8001df6:	2114      	movs	r1, #20
 8001df8:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001dfc:	f7ff ff80 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001e00:	462b      	mov	r3, r5
 8001e02:	9000      	str	r0, [sp, #0]
 8001e04:	4622      	mov	r2, r4
 8001e06:	2101      	movs	r1, #1
 8001e08:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001e0c:	f7ff ff78 	bl	8001d00 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001e10:	462b      	mov	r3, r5
 8001e12:	9000      	str	r0, [sp, #0]
 8001e14:	4622      	mov	r2, r4
 8001e16:	2101      	movs	r1, #1
 8001e18:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001e1c:	f7ff ff70 	bl	8001d00 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001e20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001e24:	b002      	add	sp, #8
 8001e26:	bd70      	pop	{r4, r5, r6, pc}

08001e28 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2c:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001e2e:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001e30:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001e32:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001e34:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001e36:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001e38:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001e3a:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001e3e:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001e40:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001e44:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001e46:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001e4a:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001e4c:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001e50:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001e52:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001e56:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001e58:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001e5c:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001e5e:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001e62:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001e64:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001e68:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001e6a:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001e6e:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001e70:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001e74:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001e76:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001e7a:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001e7c:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001e80:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001e82:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001e86:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001e88:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001e8c:	9002      	str	r0, [sp, #8]
 8001e8e:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001e90:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001e92:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001e96:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001e98:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001e9a:	460d      	mov	r5, r1
 8001e9c:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001e9e:	490f      	ldr	r1, [pc, #60]	@ (8001edc <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001ea0:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001ea2:	2250      	movs	r2, #80	@ 0x50
 8001ea4:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001ea6:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001ea8:	f00a fe16 	bl	800cad8 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001eac:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001eb0:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001eb2:	9000      	str	r0, [sp, #0]
 8001eb4:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001eb8:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001ebc:	4633      	mov	r3, r6
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	f7ff ff1e 	bl	8001d00 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	db05      	blt.n	8001ed4 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001ec8:	3401      	adds	r4, #1
 8001eca:	2c14      	cmp	r4, #20
 8001ecc:	d1f1      	bne.n	8001eb2 <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001ece:	b02a      	add	sp, #168	@ 0xa8
 8001ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	e7f9      	b.n	8001ece <generateLocationInfoMessage+0xa6>
 8001eda:	bf00      	nop
 8001edc:	0800fd00 	.word	0x0800fd00

08001ee0 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee4:	b0e2      	sub	sp, #392	@ 0x188
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001ee6:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001ee8:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001eea:	ae02      	add	r6, sp, #8
 8001eec:	227c      	movs	r2, #124	@ 0x7c
 8001eee:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001ef0:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001ef2:	a803      	add	r0, sp, #12
 8001ef4:	6034      	str	r4, [r6, #0]
 8001ef6:	f009 ff45 	bl	800bd84 <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001efa:	2280      	movs	r2, #128	@ 0x80
 8001efc:	4631      	mov	r1, r6
 8001efe:	4638      	mov	r0, r7
 8001f00:	f7ff ff1e 	bl	8001d40 <generateRegistrationMessage>
	if (result < 0) {
 8001f04:	42a0      	cmp	r0, r4
 8001f06:	da04      	bge.n	8001f12 <login_to_server+0x32>
		printf("ERROR: FAILED to generate message string\n");
 8001f08:	482b      	ldr	r0, [pc, #172]	@ (8001fb8 <login_to_server+0xd8>)
 8001f0a:	f009 fddb 	bl	800bac4 <puts>
		return 1;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	e02e      	b.n	8001f70 <login_to_server+0x90>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001f12:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <login_to_server+0xdc>)
 8001f14:	9600      	str	r6, [sp, #0]
 8001f16:	462b      	mov	r3, r5
 8001f18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f1c:	a822      	add	r0, sp, #136	@ 0x88
 8001f1e:	f009 fdd9 	bl	800bad4 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001f22:	a822      	add	r0, sp, #136	@ 0x88
 8001f24:	f7ff fa04 	bl	8001330 <send_AT_command>

//	while(1){
	while(strstr((char *) response, "+QIURC") == NULL){
 8001f28:	4f25      	ldr	r7, [pc, #148]	@ (8001fc0 <login_to_server+0xe0>)
 8001f2a:	4e26      	ldr	r6, [pc, #152]	@ (8001fc4 <login_to_server+0xe4>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f2c:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8001fd0 <login_to_server+0xf0>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001f30:	4639      	mov	r1, r7
 8001f32:	4630      	mov	r0, r6
 8001f34:	f009 ff76 	bl	800be24 <strstr>
 8001f38:	b168      	cbz	r0, 8001f56 <login_to_server+0x76>
		count_check++;
		printf("Elapsed Time: %d\n", count_check);
//		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response();
 8001f3a:	f7ff fa23 	bl	8001384 <receive_response>
	osDelay(100);
 8001f3e:	2064      	movs	r0, #100	@ 0x64
 8001f40:	f006 f8b8 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f48:	2100      	movs	r1, #0
 8001f4a:	481e      	ldr	r0, [pc, #120]	@ (8001fc4 <login_to_server+0xe4>)
 8001f4c:	f009 ff1a 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001f50:	f7ff f9fe 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001f54:	e7db      	b.n	8001f0e <login_to_server+0x2e>
		if(count_check >= 50){
 8001f56:	2c32      	cmp	r4, #50	@ 0x32
 8001f58:	d10d      	bne.n	8001f76 <login_to_server+0x96>
			receive_response();
 8001f5a:	f7ff fa13 	bl	8001384 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f62:	2100      	movs	r1, #0
 8001f64:	4817      	ldr	r0, [pc, #92]	@ (8001fc4 <login_to_server+0xe4>)
 8001f66:	f009 ff0d 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001f6a:	f7ff f9f1 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001f6e:	2000      	movs	r0, #0
}
 8001f70:	b062      	add	sp, #392	@ 0x188
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f76:	4641      	mov	r1, r8
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f009 ff53 	bl	800be24 <strstr>
 8001f7e:	4605      	mov	r5, r0
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1ea      	bne.n	8001f5a <login_to_server+0x7a>
		if (strstr((char*)response, "closed") != NULL) {
 8001f84:	4910      	ldr	r1, [pc, #64]	@ (8001fc8 <login_to_server+0xe8>)
 8001f86:	4630      	mov	r0, r6
 8001f88:	f009 ff4c 	bl	800be24 <strstr>
 8001f8c:	b158      	cbz	r0, 8001fa6 <login_to_server+0xc6>
			receive_response();
 8001f8e:	f7ff f9f9 	bl	8001384 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f96:	4629      	mov	r1, r5
 8001f98:	480a      	ldr	r0, [pc, #40]	@ (8001fc4 <login_to_server+0xe4>)
 8001f9a:	f009 fef3 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001f9e:	f7ff f9d7 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 2;
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	e7e4      	b.n	8001f70 <login_to_server+0x90>
		count_check++;
 8001fa6:	3401      	adds	r4, #1
		printf("Elapsed Time: %d\n", count_check);
 8001fa8:	4621      	mov	r1, r4
 8001faa:	4808      	ldr	r0, [pc, #32]	@ (8001fcc <login_to_server+0xec>)
 8001fac:	f009 fd1a 	bl	800b9e4 <iprintf>
		osDelay(100);
 8001fb0:	2064      	movs	r0, #100	@ 0x64
 8001fb2:	f006 f87f 	bl	80080b4 <osDelay>
 8001fb6:	e7bb      	b.n	8001f30 <login_to_server+0x50>
 8001fb8:	080102d1 	.word	0x080102d1
 8001fbc:	080102fa 	.word	0x080102fa
 8001fc0:	08010317 	.word	0x08010317
 8001fc4:	200018e4 	.word	0x200018e4
 8001fc8:	08010310 	.word	0x08010310
 8001fcc:	08010002 	.word	0x08010002
 8001fd0:	08011080 	.word	0x08011080

08001fd4 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd8:	b0e4      	sub	sp, #400	@ 0x190
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001fda:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001fdc:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001fde:	ae03      	add	r6, sp, #12
 8001fe0:	227f      	movs	r2, #127	@ 0x7f
 8001fe2:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001fe4:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001fe6:	a804      	add	r0, sp, #16
 8001fe8:	6034      	str	r4, [r6, #0]
 8001fea:	f009 fecb 	bl	800bd84 <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001fee:	2283      	movs	r2, #131	@ 0x83
 8001ff0:	4631      	mov	r1, r6
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	f7ff ff18 	bl	8001e28 <generateLocationInfoMessage>
	if (result < 0) {
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	da04      	bge.n	8002006 <send_location_to_server+0x32>
		printf("ERROR: FAILED to generate message string\n");
 8001ffc:	482b      	ldr	r0, [pc, #172]	@ (80020ac <send_location_to_server+0xd8>)
 8001ffe:	f009 fd61 	bl	800bac4 <puts>
		return 1;
 8002002:	2001      	movs	r0, #1
 8002004:	e032      	b.n	800206c <send_location_to_server+0x98>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8002006:	4a2a      	ldr	r2, [pc, #168]	@ (80020b0 <send_location_to_server+0xdc>)
 8002008:	9600      	str	r6, [sp, #0]
 800200a:	462b      	mov	r3, r5
 800200c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002010:	a824      	add	r0, sp, #144	@ 0x90
 8002012:	f009 fd5f 	bl	800bad4 <sniprintf>
	send_AT_command((char*)command);
 8002016:	a824      	add	r0, sp, #144	@ 0x90
 8002018:	f7ff f98a 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, "+QIURC") == NULL){
 800201c:	4f25      	ldr	r7, [pc, #148]	@ (80020b4 <send_location_to_server+0xe0>)
 800201e:	4e26      	ldr	r6, [pc, #152]	@ (80020b8 <send_location_to_server+0xe4>)
		osDelay(100);
		if (strstr((char*)response, "closed") != NULL) {
 8002020:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80020c4 <send_location_to_server+0xf0>
	while(strstr((char *) response, "+QIURC") == NULL){
 8002024:	4639      	mov	r1, r7
 8002026:	4630      	mov	r0, r6
 8002028:	f009 fefc 	bl	800be24 <strstr>
 800202c:	4605      	mov	r5, r0
 800202e:	b150      	cbz	r0, 8002046 <send_location_to_server+0x72>
		}
		count_check++;
		printf("Elapsed Time: %d\n", count_check);
		receive_response();
	}
	receive_response();
 8002030:	f7ff f9a8 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002038:	2100      	movs	r1, #0
 800203a:	481f      	ldr	r0, [pc, #124]	@ (80020b8 <send_location_to_server+0xe4>)
 800203c:	f009 fea2 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8002040:	f7ff f986 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002044:	e7dd      	b.n	8002002 <send_location_to_server+0x2e>
		osDelay(100);
 8002046:	2064      	movs	r0, #100	@ 0x64
 8002048:	f006 f834 	bl	80080b4 <osDelay>
		if (strstr((char*)response, "closed") != NULL) {
 800204c:	4641      	mov	r1, r8
 800204e:	4630      	mov	r0, r6
 8002050:	f009 fee8 	bl	800be24 <strstr>
 8002054:	b168      	cbz	r0, 8002072 <send_location_to_server+0x9e>
			 receive_response();
 8002056:	f7ff f995 	bl	8001384 <receive_response>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800205a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205e:	4629      	mov	r1, r5
 8002060:	4815      	ldr	r0, [pc, #84]	@ (80020b8 <send_location_to_server+0xe4>)
 8002062:	f009 fe8f 	bl	800bd84 <memset>
			 SIM_UART_ReInitializeRxDMA();
 8002066:	f7ff f973 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 800206a:	2002      	movs	r0, #2
}
 800206c:	b064      	add	sp, #400	@ 0x190
 800206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 50){
 8002072:	2c32      	cmp	r4, #50	@ 0x32
 8002074:	d10b      	bne.n	800208e <send_location_to_server+0xba>
			receive_response();
 8002076:	f7ff f985 	bl	8001384 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800207a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207e:	2100      	movs	r1, #0
 8002080:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <send_location_to_server+0xe4>)
 8002082:	f009 fe7f 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 8002086:	f7ff f963 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800208a:	2000      	movs	r0, #0
 800208c:	e7ee      	b.n	800206c <send_location_to_server+0x98>
		if (strstr((char*) response, "ERROR") != NULL){
 800208e:	490b      	ldr	r1, [pc, #44]	@ (80020bc <send_location_to_server+0xe8>)
 8002090:	4630      	mov	r0, r6
 8002092:	f009 fec7 	bl	800be24 <strstr>
 8002096:	2800      	cmp	r0, #0
 8002098:	d1ed      	bne.n	8002076 <send_location_to_server+0xa2>
		count_check++;
 800209a:	3401      	adds	r4, #1
		printf("Elapsed Time: %d\n", count_check);
 800209c:	4621      	mov	r1, r4
 800209e:	4808      	ldr	r0, [pc, #32]	@ (80020c0 <send_location_to_server+0xec>)
 80020a0:	f009 fca0 	bl	800b9e4 <iprintf>
		receive_response();
 80020a4:	f7ff f96e 	bl	8001384 <receive_response>
 80020a8:	e7bc      	b.n	8002024 <send_location_to_server+0x50>
 80020aa:	bf00      	nop
 80020ac:	080102d1 	.word	0x080102d1
 80020b0:	080102fa 	.word	0x080102fa
 80020b4:	08010317 	.word	0x08010317
 80020b8:	200018e4 	.word	0x200018e4
 80020bc:	08011080 	.word	0x08011080
 80020c0:	08010002 	.word	0x08010002
 80020c4:	08010310 	.word	0x08010310

080020c8 <acknowledgeResponse>:

int acknowledgeResponse(int connect_id){
 80020c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t command[256];
	int count_check = 0;
	int count_resend = 0;
 80020cc:	2600      	movs	r6, #0
	int is_sent_ok = 0;

	while(count_resend <= 5){
		is_sent_ok = 1;
		snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 80020ce:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80021d0 <acknowledgeResponse+0x108>
		send_AT_command((char*)command);
		printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 80020d2:	f8df a100 	ldr.w	sl, [pc, #256]	@ 80021d4 <acknowledgeResponse+0x10c>
int acknowledgeResponse(int connect_id){
 80020d6:	b0c7      	sub	sp, #284	@ 0x11c
 80020d8:	4680      	mov	r8, r0
	int count_check = 0;
 80020da:	4635      	mov	r5, r6
		snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 80020dc:	4643      	mov	r3, r8
 80020de:	464a      	mov	r2, r9
 80020e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e4:	a806      	add	r0, sp, #24
 80020e6:	f009 fcf5 	bl	800bad4 <sniprintf>
		send_AT_command((char*)command);
 80020ea:	a806      	add	r0, sp, #24
 80020ec:	f7ff f920 	bl	8001330 <send_AT_command>
		printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 80020f0:	4631      	mov	r1, r6
 80020f2:	4650      	mov	r0, sl
 80020f4:	f009 fc76 	bl	800b9e4 <iprintf>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020f8:	4f2e      	ldr	r7, [pc, #184]	@ (80021b4 <acknowledgeResponse+0xec>)
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
				SIM_UART_ReInitializeRxDMA();
				is_sent_ok = 0;
				break;
			}
			if (strstr((char*) response, "ERROR") != NULL){
 80020fa:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 80021d8 <acknowledgeResponse+0x110>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020fe:	492e      	ldr	r1, [pc, #184]	@ (80021b8 <acknowledgeResponse+0xf0>)
 8002100:	4638      	mov	r0, r7
 8002102:	f009 fe8f 	bl	800be24 <strstr>
 8002106:	4604      	mov	r4, r0
 8002108:	b108      	cbz	r0, 800210e <acknowledgeResponse+0x46>
 800210a:	2401      	movs	r4, #1
 800210c:	e00d      	b.n	800212a <acknowledgeResponse+0x62>
			osDelay(100);
 800210e:	2064      	movs	r0, #100	@ 0x64
 8002110:	f005 ffd0 	bl	80080b4 <osDelay>
			if(count_check >= 50){
 8002114:	2d31      	cmp	r5, #49	@ 0x31
 8002116:	dd12      	ble.n	800213e <acknowledgeResponse+0x76>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211c:	4621      	mov	r1, r4
 800211e:	4825      	ldr	r0, [pc, #148]	@ (80021b4 <acknowledgeResponse+0xec>)
 8002120:	f009 fe30 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 8002124:	f7ff f914 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				is_sent_ok = 0;
 8002128:	4625      	mov	r5, r4
			count_check++;

			printf("Elapsed Time +QISEND: 0,0: %d\n", count_check);
			receive_response();
		}
		receive_response();
 800212a:	f7ff f92b 	bl	8001384 <receive_response>
		if(is_sent_ok == 0) {
 800212e:	b9fc      	cbnz	r4, 8002170 <acknowledgeResponse+0xa8>
			count_resend++;
 8002130:	3601      	adds	r6, #1
	while(count_resend <= 5){
 8002132:	2e06      	cmp	r6, #6
 8002134:	d1d2      	bne.n	80020dc <acknowledgeResponse+0x14>
				break;
			}
		}
	}
	return is_sent_ok;
}
 8002136:	4620      	mov	r0, r4
 8002138:	b047      	add	sp, #284	@ 0x11c
 800213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (strstr((char*) response, "ERROR") != NULL){
 800213e:	4659      	mov	r1, fp
 8002140:	4638      	mov	r0, r7
 8002142:	f009 fe6f 	bl	800be24 <strstr>
 8002146:	b158      	cbz	r0, 8002160 <acknowledgeResponse+0x98>
				printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 8002148:	481c      	ldr	r0, [pc, #112]	@ (80021bc <acknowledgeResponse+0xf4>)
 800214a:	f009 fcbb 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800214e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002152:	4621      	mov	r1, r4
 8002154:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <acknowledgeResponse+0xec>)
 8002156:	f009 fe15 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 800215a:	f7ff f8f9 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				break;
 800215e:	e7e4      	b.n	800212a <acknowledgeResponse+0x62>
			count_check++;
 8002160:	3501      	adds	r5, #1
			printf("Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002162:	4629      	mov	r1, r5
 8002164:	4816      	ldr	r0, [pc, #88]	@ (80021c0 <acknowledgeResponse+0xf8>)
 8002166:	f009 fc3d 	bl	800b9e4 <iprintf>
			receive_response();
 800216a:	f7ff f90b 	bl	8001384 <receive_response>
 800216e:	e7c6      	b.n	80020fe <acknowledgeResponse+0x36>
		int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002170:	af05      	add	r7, sp, #20
 8002172:	ab04      	add	r3, sp, #16
 8002174:	aa03      	add	r2, sp, #12
 8002176:	4913      	ldr	r1, [pc, #76]	@ (80021c4 <acknowledgeResponse+0xfc>)
 8002178:	480e      	ldr	r0, [pc, #56]	@ (80021b4 <acknowledgeResponse+0xec>)
 800217a:	9700      	str	r7, [sp, #0]
 800217c:	f009 fcfe 	bl	800bb7c <siscanf>
		printf("Lost Transmit BYTES: %d\n", unackedBytes);
 8002180:	9905      	ldr	r1, [sp, #20]
		int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002182:	4683      	mov	fp, r0
		printf("Lost Transmit BYTES: %d\n", unackedBytes);
 8002184:	4810      	ldr	r0, [pc, #64]	@ (80021c8 <acknowledgeResponse+0x100>)
 8002186:	f009 fc2d 	bl	800b9e4 <iprintf>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800218a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218e:	2100      	movs	r1, #0
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <acknowledgeResponse+0xec>)
 8002192:	f009 fdf7 	bl	800bd84 <memset>
		SIM_UART_ReInitializeRxDMA();
 8002196:	f7ff f8db 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		if (result == 3) {
 800219a:	f1bb 0f03 	cmp.w	fp, #3
 800219e:	d19d      	bne.n	80020dc <acknowledgeResponse+0x14>
			if (unackedBytes > 0) {
 80021a0:	9b05      	ldr	r3, [sp, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	dc03      	bgt.n	80021ae <acknowledgeResponse+0xe6>
				printf("NO DATA LOSS\n");
 80021a6:	4809      	ldr	r0, [pc, #36]	@ (80021cc <acknowledgeResponse+0x104>)
 80021a8:	f009 fc8c 	bl	800bac4 <puts>
				break;
 80021ac:	e7c3      	b.n	8002136 <acknowledgeResponse+0x6e>
				is_sent_ok = 0;
 80021ae:	2400      	movs	r4, #0
 80021b0:	e7c1      	b.n	8002136 <acknowledgeResponse+0x6e>
 80021b2:	bf00      	nop
 80021b4:	200018e4 	.word	0x200018e4
 80021b8:	080100d4 	.word	0x080100d4
 80021bc:	08010377 	.word	0x08010377
 80021c0:	080103b4 	.word	0x080103b4
 80021c4:	080103d3 	.word	0x080103d3
 80021c8:	080103f3 	.word	0x080103f3
 80021cc:	0801040c 	.word	0x0801040c
 80021d0:	0801031e 	.word	0x0801031e
 80021d4:	0801032f 	.word	0x0801032f
 80021d8:	08011080 	.word	0x08011080

080021dc <getResponseFromServer>:

int getResponseFromServer(int connect_id){
 80021dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e0:	4680      	mov	r8, r0
 80021e2:	b0c1      	sub	sp, #260	@ 0x104
	uint8_t command[256];
	int count_check = 0;
	int count_resend = 0;
	int is_sent_ok = 0;
	printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 80021e4:	4839      	ldr	r0, [pc, #228]	@ (80022cc <getResponseFromServer+0xf0>)
	for(size_t i = 0; i < 7; i++){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 80021e6:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 80022f0 <getResponseFromServer+0x114>
		send_AT_command((char*)command);
		printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 80021ea:	f8df a108 	ldr.w	sl, [pc, #264]	@ 80022f4 <getResponseFromServer+0x118>
	printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 80021ee:	f009 fc69 	bl	800bac4 <puts>
 80021f2:	2607      	movs	r6, #7
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 80021f4:	4643      	mov	r3, r8
 80021f6:	464a      	mov	r2, r9
 80021f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021fc:	4668      	mov	r0, sp
 80021fe:	f009 fc69 	bl	800bad4 <sniprintf>
		send_AT_command((char*)command);
 8002202:	4668      	mov	r0, sp
 8002204:	f7ff f894 	bl	8001330 <send_AT_command>
		printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002208:	2100      	movs	r1, #0
 800220a:	4650      	mov	r0, sl
 800220c:	f009 fbea 	bl	800b9e4 <iprintf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 8002210:	4f2f      	ldr	r7, [pc, #188]	@ (80022d0 <getResponseFromServer+0xf4>)
			if (strstr((char*)response, "ERROR") != NULL){
 8002212:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 80022f8 <getResponseFromServer+0x11c>
		while(strstr((char *) response, "+QIRD") == NULL){
 8002216:	2500      	movs	r5, #0
 8002218:	492e      	ldr	r1, [pc, #184]	@ (80022d4 <getResponseFromServer+0xf8>)
 800221a:	4638      	mov	r0, r7
 800221c:	f009 fe02 	bl	800be24 <strstr>
 8002220:	4604      	mov	r4, r0
 8002222:	b1e8      	cbz	r0, 8002260 <getResponseFromServer+0x84>
			printf( "Elapsed Time +QISEND: 0,0: %d\n", count_check);
			count_check++;
			receive_response();
		}

		receive_response();
 8002224:	f7ff f8ae 	bl	8001384 <receive_response>
			count_check = 0;
			osDelay(100);
			continue;
		}

		char *token = strstr((char*)response, "+QIRD: ");
 8002228:	492b      	ldr	r1, [pc, #172]	@ (80022d8 <getResponseFromServer+0xfc>)
 800222a:	4829      	ldr	r0, [pc, #164]	@ (80022d0 <getResponseFromServer+0xf4>)
 800222c:	f009 fdfa 	bl	800be24 <strstr>
		int value = 0;

		if (token != NULL) {
 8002230:	4604      	mov	r4, r0
 8002232:	2800      	cmp	r0, #0
 8002234:	d140      	bne.n	80022b8 <getResponseFromServer+0xdc>
			printf("TOKEN in QIRD is not NULL");
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
		}
		printf("\nNumber of character received: %d\n", value);
 8002236:	4621      	mov	r1, r4
 8002238:	4828      	ldr	r0, [pc, #160]	@ (80022dc <getResponseFromServer+0x100>)
 800223a:	f009 fbd3 	bl	800b9e4 <iprintf>

		printf("OUT OF receive data from server\n");
 800223e:	4828      	ldr	r0, [pc, #160]	@ (80022e0 <getResponseFromServer+0x104>)
 8002240:	f009 fc40 	bl	800bac4 <puts>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002248:	2100      	movs	r1, #0
 800224a:	4821      	ldr	r0, [pc, #132]	@ (80022d0 <getResponseFromServer+0xf4>)
 800224c:	f009 fd9a 	bl	800bd84 <memset>
		SIM_UART_ReInitializeRxDMA();
 8002250:	f7ff f87e 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 8002254:	bbc4      	cbnz	r4, 80022c8 <getResponseFromServer+0xec>
			count_check = 0;
			osDelay(100);
 8002256:	2064      	movs	r0, #100	@ 0x64
 8002258:	f005 ff2c 	bl	80080b4 <osDelay>
		is_sent_ok = 1;
 800225c:	2001      	movs	r0, #1
 800225e:	e016      	b.n	800228e <getResponseFromServer+0xb2>
			if (strstr((char*)response, "ERROR") != NULL){
 8002260:	4659      	mov	r1, fp
 8002262:	4638      	mov	r0, r7
 8002264:	f009 fdde 	bl	800be24 <strstr>
 8002268:	4601      	mov	r1, r0
 800226a:	b1a8      	cbz	r0, 8002298 <getResponseFromServer+0xbc>
				printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 800226c:	481d      	ldr	r0, [pc, #116]	@ (80022e4 <getResponseFromServer+0x108>)
 800226e:	f009 fc29 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002276:	4621      	mov	r1, r4
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002278:	4815      	ldr	r0, [pc, #84]	@ (80022d0 <getResponseFromServer+0xf4>)
 800227a:	f009 fd83 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 800227e:	f7ff f867 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		receive_response();
 8002282:	f7ff f87f 	bl	8001384 <receive_response>
			osDelay(100);
 8002286:	2064      	movs	r0, #100	@ 0x64
 8002288:	f005 ff14 	bl	80080b4 <osDelay>
			continue;
 800228c:	2000      	movs	r0, #0
	for(size_t i = 0; i < 7; i++){
 800228e:	3e01      	subs	r6, #1
 8002290:	d1b0      	bne.n	80021f4 <getResponseFromServer+0x18>
		}
		else break;
	}
	return is_sent_ok;
}
 8002292:	b041      	add	sp, #260	@ 0x104
 8002294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 50){
 8002298:	2d32      	cmp	r5, #50	@ 0x32
 800229a:	d102      	bne.n	80022a2 <getResponseFromServer+0xc6>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800229c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a0:	e7ea      	b.n	8002278 <getResponseFromServer+0x9c>
			osDelay(100);
 80022a2:	2064      	movs	r0, #100	@ 0x64
 80022a4:	f005 ff06 	bl	80080b4 <osDelay>
			printf( "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 80022a8:	4629      	mov	r1, r5
 80022aa:	480f      	ldr	r0, [pc, #60]	@ (80022e8 <getResponseFromServer+0x10c>)
 80022ac:	f009 fb9a 	bl	800b9e4 <iprintf>
			count_check++;
 80022b0:	3501      	adds	r5, #1
			receive_response();
 80022b2:	f7ff f867 	bl	8001384 <receive_response>
 80022b6:	e7af      	b.n	8002218 <getResponseFromServer+0x3c>
			printf("TOKEN in QIRD is not NULL");
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <getResponseFromServer+0x110>)
 80022ba:	f009 fb93 	bl	800b9e4 <iprintf>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 80022be:	1de0      	adds	r0, r4, #7
 80022c0:	f007 fd03 	bl	8009cca <atoi>
 80022c4:	4604      	mov	r4, r0
 80022c6:	e7b6      	b.n	8002236 <getResponseFromServer+0x5a>
		is_sent_ok = 1;
 80022c8:	2001      	movs	r0, #1
	return is_sent_ok;
 80022ca:	e7e2      	b.n	8002292 <getResponseFromServer+0xb6>
 80022cc:	08010419 	.word	0x08010419
 80022d0:	200018e4 	.word	0x200018e4
 80022d4:	080104e9 	.word	0x080104e9
 80022d8:	080104ef 	.word	0x080104ef
 80022dc:	08010511 	.word	0x08010511
 80022e0:	08010534 	.word	0x08010534
 80022e4:	080104aa 	.word	0x080104aa
 80022e8:	080103b4 	.word	0x080103b4
 80022ec:	080104f7 	.word	0x080104f7
 80022f0:	08010451 	.word	0x08010451
 80022f4:	08010462 	.word	0x08010462
 80022f8:	08011080 	.word	0x08011080

080022fc <check_data_sent_to_server>:

int check_data_sent_to_server(int connect_id){
 80022fc:	b508      	push	{r3, lr}
	if(acknowledgeResponse(0)){
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fee2 	bl	80020c8 <acknowledgeResponse>
 8002304:	b180      	cbz	r0, 8002328 <check_data_sent_to_server+0x2c>
		printf("\n---------------------------- ACKNOWLEDGE SENDING SUCCESSFULLY -------------------------------\n");
 8002306:	4809      	ldr	r0, [pc, #36]	@ (800232c <check_data_sent_to_server+0x30>)
 8002308:	f009 fbdc 	bl	800bac4 <puts>
		if(getResponseFromServer(0)){
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff ff65 	bl	80021dc <getResponseFromServer>
 8002312:	b120      	cbz	r0, 800231e <check_data_sent_to_server+0x22>
			printf("\n------------------------------ GET RESPONSE from SERVER successfully -------------------------------\n");
 8002314:	4806      	ldr	r0, [pc, #24]	@ (8002330 <check_data_sent_to_server+0x34>)
 8002316:	f009 fbd5 	bl	800bac4 <puts>
			return 1;
 800231a:	2001      	movs	r0, #1
	}
	else{
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
		return 0;
	}
}
 800231c:	bd08      	pop	{r3, pc}
			printf("\n---------------------------- GET RESPONSE FROM SERVER FAILED -------------------------------\n");
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <check_data_sent_to_server+0x38>)
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
 8002320:	f009 fbd0 	bl	800bac4 <puts>
			return 0;
 8002324:	2000      	movs	r0, #0
 8002326:	e7f9      	b.n	800231c <check_data_sent_to_server+0x20>
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <check_data_sent_to_server+0x3c>)
 800232a:	e7f9      	b.n	8002320 <check_data_sent_to_server+0x24>
 800232c:	08010554 	.word	0x08010554
 8002330:	080105b3 	.word	0x080105b3
 8002334:	08010619 	.word	0x08010619
 8002338:	08010677 	.word	0x08010677

0800233c <close_connection>:


int close_connection(int connect_id){
 800233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002340:	b0c0      	sub	sp, #256	@ 0x100
 8002342:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8002344:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <close_connection+0x90>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002346:	4f22      	ldr	r7, [pc, #136]	@ (80023d0 <close_connection+0x94>)
 8002348:	4e22      	ldr	r6, [pc, #136]	@ (80023d4 <close_connection+0x98>)
		receive_response();
		if (strstr((char*)response, "ERROR") != NULL){
 800234a:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80023dc <close_connection+0xa0>
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 800234e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002352:	4668      	mov	r0, sp
 8002354:	f009 fbbe 	bl	800bad4 <sniprintf>
	send_AT_command((char*)command);
 8002358:	4668      	mov	r0, sp
 800235a:	f7fe ffe9 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800235e:	2506      	movs	r5, #6
 8002360:	481b      	ldr	r0, [pc, #108]	@ (80023d0 <close_connection+0x94>)
 8002362:	4631      	mov	r1, r6
 8002364:	f009 fd5e 	bl	800be24 <strstr>
 8002368:	4604      	mov	r4, r0
 800236a:	b170      	cbz	r0, 800238a <close_connection+0x4e>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response();
 800236c:	f7ff f80a 	bl	8001384 <receive_response>
	osDelay(100);
 8002370:	2064      	movs	r0, #100	@ 0x64
 8002372:	f005 fe9f 	bl	80080b4 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800237a:	2100      	movs	r1, #0
 800237c:	4814      	ldr	r0, [pc, #80]	@ (80023d0 <close_connection+0x94>)
 800237e:	f009 fd01 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8002382:	f7fe ffe5 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002386:	2001      	movs	r0, #1
 8002388:	e00f      	b.n	80023aa <close_connection+0x6e>
		receive_response();
 800238a:	f7fe fffb 	bl	8001384 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 800238e:	4641      	mov	r1, r8
 8002390:	4638      	mov	r0, r7
 8002392:	f009 fd47 	bl	800be24 <strstr>
 8002396:	b158      	cbz	r0, 80023b0 <close_connection+0x74>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239c:	4621      	mov	r1, r4
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800239e:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <close_connection+0x94>)
 80023a0:	f009 fcf0 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 80023a4:	f7fe ffd4 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80023a8:	2000      	movs	r0, #0
}
 80023aa:	b040      	add	sp, #256	@ 0x100
 80023ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 5){
 80023b0:	3d01      	subs	r5, #1
 80023b2:	d106      	bne.n	80023c2 <close_connection+0x86>
			printf("Close Server failed");
 80023b4:	4808      	ldr	r0, [pc, #32]	@ (80023d8 <close_connection+0x9c>)
 80023b6:	f009 fb15 	bl	800b9e4 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023be:	4629      	mov	r1, r5
 80023c0:	e7ed      	b.n	800239e <close_connection+0x62>
		osDelay(1000);
 80023c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023c6:	f005 fe75 	bl	80080b4 <osDelay>
		count_check++;
 80023ca:	e7c9      	b.n	8002360 <close_connection+0x24>
 80023cc:	080106d0 	.word	0x080106d0
 80023d0:	200018e4 	.word	0x200018e4
 80023d4:	080100d4 	.word	0x080100d4
 80023d8:	080106e0 	.word	0x080106e0
 80023dc:	08011080 	.word	0x08011080

080023e0 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 80023e0:	b510      	push	{r4, lr}
 80023e2:	b08e      	sub	sp, #56	@ 0x38
	int year, month, day, hour, minute, second, timezone;

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 80023e4:	ab0d      	add	r3, sp, #52	@ 0x34
 80023e6:	9304      	str	r3, [sp, #16]
 80023e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80023ea:	9303      	str	r3, [sp, #12]
 80023ec:	ab0b      	add	r3, sp, #44	@ 0x2c
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	ab09      	add	r3, sp, #36	@ 0x24
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	aa07      	add	r2, sp, #28
 80023fa:	ab08      	add	r3, sp, #32
 80023fc:	491d      	ldr	r1, [pc, #116]	@ (8002474 <extract_time_CCLK+0x94>)
 80023fe:	f009 fbbd 	bl	800bb7c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002404:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8002406:	2a17      	cmp	r2, #23
		hour -= 24;
 8002408:	bfc3      	ittte	gt
 800240a:	3b17      	subgt	r3, #23
 800240c:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 800240e:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002410:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002412:	bfc4      	itt	gt
 8002414:	3301      	addgt	r3, #1
 8002416:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002418:	9b07      	ldr	r3, [sp, #28]
 800241a:	2b17      	cmp	r3, #23
 800241c:	dd27      	ble.n	800246e <extract_time_CCLK+0x8e>
	rmc_jt.date.Yr = year;
 800241e:	4c16      	ldr	r4, [pc, #88]	@ (8002478 <extract_time_CCLK+0x98>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002420:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002422:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002424:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 8002426:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002428:	9b08      	ldr	r3, [sp, #32]
 800242a:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 800242c:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 800242e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002430:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 8002432:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 8002434:	b2c9      	uxtb	r1, r1
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 800243a:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 800243c:	f000 fefa 	bl	8003234 <set_time>
	set_date(year, month, day);
 8002440:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8002444:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8002448:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800244c:	f000 ff10 	bl	8003270 <set_date>
	printf("RTC TIME with GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8002450:	68a3      	ldr	r3, [r4, #8]
 8002452:	9302      	str	r3, [sp, #8]
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002460:	69a1      	ldr	r1, [r4, #24]
 8002462:	4806      	ldr	r0, [pc, #24]	@ (800247c <extract_time_CCLK+0x9c>)
 8002464:	f009 fabe 	bl	800b9e4 <iprintf>

	return 1;
 8002468:	2001      	movs	r0, #1
}
 800246a:	b00e      	add	sp, #56	@ 0x38
 800246c:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 800246e:	2000      	movs	r0, #0
 8002470:	e7fb      	b.n	800246a <extract_time_CCLK+0x8a>
 8002472:	bf00      	nop
 8002474:	080106f4 	.word	0x080106f4
 8002478:	20001640 	.word	0x20001640
 800247c:	08010722 	.word	0x08010722

08002480 <getCurrentTime>:


int getCurrentTime(){
 8002480:	b538      	push	{r3, r4, r5, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8002482:	4817      	ldr	r0, [pc, #92]	@ (80024e0 <getCurrentTime+0x60>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002484:	4d17      	ldr	r5, [pc, #92]	@ (80024e4 <getCurrentTime+0x64>)
	send_AT_command("AT+CCLK?\r\n");
 8002486:	f7fe ff53 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800248a:	2404      	movs	r4, #4
 800248c:	4816      	ldr	r0, [pc, #88]	@ (80024e8 <getCurrentTime+0x68>)
 800248e:	4629      	mov	r1, r5
 8002490:	f009 fcc8 	bl	800be24 <strstr>
 8002494:	b188      	cbz	r0, 80024ba <getCurrentTime+0x3a>
		}
		receive_response();
		osDelay(100);
		count_check++;
	}
	receive_response();
 8002496:	f7fe ff75 	bl	8001384 <receive_response>
	int result_extract = extract_time_CCLK(response);
 800249a:	4813      	ldr	r0, [pc, #76]	@ (80024e8 <getCurrentTime+0x68>)
 800249c:	f7ff ffa0 	bl	80023e0 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
	int result_extract = extract_time_CCLK(response);
 80024a4:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024a6:	2100      	movs	r1, #0
 80024a8:	480f      	ldr	r0, [pc, #60]	@ (80024e8 <getCurrentTime+0x68>)
 80024aa:	f009 fc6b 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 80024ae:	f7fe ff4f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 80024b2:	1e20      	subs	r0, r4, #0
 80024b4:	bf18      	it	ne
 80024b6:	2001      	movne	r0, #1
 80024b8:	e00a      	b.n	80024d0 <getCurrentTime+0x50>
		if(count_check >= 3 ){
 80024ba:	3c01      	subs	r4, #1
 80024bc:	d109      	bne.n	80024d2 <getCurrentTime+0x52>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c2:	4621      	mov	r1, r4
 80024c4:	4808      	ldr	r0, [pc, #32]	@ (80024e8 <getCurrentTime+0x68>)
 80024c6:	f009 fc5d 	bl	800bd84 <memset>
			SIM_UART_ReInitializeRxDMA();
 80024ca:	f7fe ff41 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80024ce:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
		receive_response();
 80024d2:	f7fe ff57 	bl	8001384 <receive_response>
		osDelay(100);
 80024d6:	2064      	movs	r0, #100	@ 0x64
 80024d8:	f005 fdec 	bl	80080b4 <osDelay>
		count_check++;
 80024dc:	e7d6      	b.n	800248c <getCurrentTime+0xc>
 80024de:	bf00      	nop
 80024e0:	08010759 	.word	0x08010759
 80024e4:	080100d4 	.word	0x080100d4
 80024e8:	200018e4 	.word	0x200018e4

080024ec <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("Inside Receiving Data at GSM\n\n");
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 80024ee:	4f3e      	ldr	r7, [pc, #248]	@ (80025e8 <receiveRMCDataWithAddrGSM+0xfc>)
	printf("Inside Receiving Data at GSM\n\n");
 80024f0:	483e      	ldr	r0, [pc, #248]	@ (80025ec <receiveRMCDataWithAddrGSM+0x100>)
void receiveRMCDataWithAddrGSM(){
 80024f2:	b089      	sub	sp, #36	@ 0x24
	printf("Inside Receiving Data at GSM\n\n");
 80024f4:	f009 fae6 	bl	800bac4 <puts>
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024fe:	a805      	add	r0, sp, #20
 8002500:	f005 ff03 	bl	800830a <osMailGet>
	if(evt.status == osEventMail){
 8002504:	9b05      	ldr	r3, [sp, #20]
 8002506:	2b20      	cmp	r3, #32
 8002508:	d15c      	bne.n	80025c4 <receiveRMCDataWithAddrGSM+0xd8>
		GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 800250a:	9d06      	ldr	r5, [sp, #24]
		printf("Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedData->address;
 800250c:	4e38      	ldr	r6, [pc, #224]	@ (80025f0 <receiveRMCDataWithAddrGSM+0x104>)
		printf("Address received from MAIL QUEUE: \n");
 800250e:	4839      	ldr	r0, [pc, #228]	@ (80025f4 <receiveRMCDataWithAddrGSM+0x108>)
 8002510:	f009 fad8 	bl	800bac4 <puts>
		current_addr_gsm = receivedData->address;
 8002514:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002516:	6033      	str	r3, [r6, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 8002518:	6830      	ldr	r0, [r6, #0]
 800251a:	4937      	ldr	r1, [pc, #220]	@ (80025f8 <receiveRMCDataWithAddrGSM+0x10c>)
 800251c:	f000 fe0c 	bl	8003138 <checkAddrExistInQueue>
 8002520:	b140      	cbz	r0, 8002534 <receiveRMCDataWithAddrGSM+0x48>
 8002522:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <receiveRMCDataWithAddrGSM+0x110>)
 8002524:	6832      	ldr	r2, [r6, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d344      	bcc.n	80025b6 <receiveRMCDataWithAddrGSM+0xca>
 800252c:	6833      	ldr	r3, [r6, #0]
 800252e:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002532:	d840      	bhi.n	80025b6 <receiveRMCDataWithAddrGSM+0xca>
//			current_addr_gsm = receivedDataGSM->address;
			printf("Saving data to variable to send to the server\n");
 8002534:	4832      	ldr	r0, [pc, #200]	@ (8002600 <receiveRMCDataWithAddrGSM+0x114>)
			printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 8002536:	4c33      	ldr	r4, [pc, #204]	@ (8002604 <receiveRMCDataWithAddrGSM+0x118>)
			printf("Saving data to variable to send to the server\n");
 8002538:	f009 fac4 	bl	800bac4 <puts>
			printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 800253c:	6831      	ldr	r1, [r6, #0]
 800253e:	4832      	ldr	r0, [pc, #200]	@ (8002608 <receiveRMCDataWithAddrGSM+0x11c>)
 8002540:	f009 fa50 	bl	800b9e4 <iprintf>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 8002544:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8002548:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 800254c:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8002550:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedData->rmc.speed;
 8002554:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002556:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedData->rmc.course;
 8002558:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800255a:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 800255c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002560:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 8002564:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002568:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 800256c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800256e:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 8002570:	69ab      	ldr	r3, [r5, #24]
 8002572:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 8002574:	696b      	ldr	r3, [r5, #20]
 8002576:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 8002578:	692b      	ldr	r3, [r5, #16]
 800257a:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 8002580:	686b      	ldr	r3, [r5, #4]
 8002582:	6063      	str	r3, [r4, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
			osMailFree(RMC_MailQGSMId, receivedData);
 8002584:	4629      	mov	r1, r5
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002586:	68ab      	ldr	r3, [r5, #8]
			osMailFree(RMC_MailQGSMId, receivedData);
 8002588:	6838      	ldr	r0, [r7, #0]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 800258a:	60a3      	str	r3, [r4, #8]
			osMailFree(RMC_MailQGSMId, receivedData);
 800258c:	f005 fef6 	bl	800837c <osMailFree>
			printf("\n@@@ GSM-> time: %d:%d:%d --------- date: %d/%d/%d  --------- current_addr: %08lx @@@\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec, rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr, current_addr_gsm);
 8002590:	6833      	ldr	r3, [r6, #0]
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	69a3      	ldr	r3, [r4, #24]
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	6963      	ldr	r3, [r4, #20]
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	6923      	ldr	r3, [r4, #16]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80025a4:	6821      	ldr	r1, [r4, #0]
 80025a6:	4819      	ldr	r0, [pc, #100]	@ (800260c <receiveRMCDataWithAddrGSM+0x120>)
 80025a8:	f009 fa1c 	bl	800b9e4 <iprintf>

			received_RMC = 1;
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <receiveRMCDataWithAddrGSM+0x124>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 80025b2:	b009      	add	sp, #36	@ 0x24
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
 80025b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80025b8:	4816      	ldr	r0, [pc, #88]	@ (8002614 <receiveRMCDataWithAddrGSM+0x128>)
}
 80025ba:	b009      	add	sp, #36	@ 0x24
 80025bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
 80025c0:	f009 ba10 	b.w	800b9e4 <iprintf>
		printf("There is no address mail left\n");
 80025c4:	4814      	ldr	r0, [pc, #80]	@ (8002618 <receiveRMCDataWithAddrGSM+0x12c>)
 80025c6:	f009 fa7d 	bl	800bac4 <puts>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 80025ca:	4b14      	ldr	r3, [pc, #80]	@ (800261c <receiveRMCDataWithAddrGSM+0x130>)
 80025cc:	681d      	ldr	r5, [r3, #0]
 80025ce:	2d01      	cmp	r5, #1
 80025d0:	d1ef      	bne.n	80025b2 <receiveRMCDataWithAddrGSM+0xc6>
 80025d2:	4c13      	ldr	r4, [pc, #76]	@ (8002620 <receiveRMCDataWithAddrGSM+0x134>)
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <receiveRMCDataWithAddrGSM+0x138>)
 80025d6:	6822      	ldr	r2, [r4, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	d1e9      	bne.n	80025b2 <receiveRMCDataWithAddrGSM+0xc6>
			printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 80025de:	4812      	ldr	r0, [pc, #72]	@ (8002628 <receiveRMCDataWithAddrGSM+0x13c>)
 80025e0:	f009 fa00 	bl	800b9e4 <iprintf>
			is_keep_up = 1;
 80025e4:	6025      	str	r5, [r4, #0]
}
 80025e6:	e7e4      	b.n	80025b2 <receiveRMCDataWithAddrGSM+0xc6>
 80025e8:	20001c84 	.word	0x20001c84
 80025ec:	08010764 	.word	0x08010764
 80025f0:	2000169c 	.word	0x2000169c
 80025f4:	08010782 	.word	0x08010782
 80025f8:	200016a4 	.word	0x200016a4
 80025fc:	20001698 	.word	0x20001698
 8002600:	080107a5 	.word	0x080107a5
 8002604:	20001640 	.word	0x20001640
 8002608:	080107d3 	.word	0x080107d3
 800260c:	08010812 	.word	0x08010812
 8002610:	200018d0 	.word	0x200018d0
 8002614:	08010869 	.word	0x08010869
 8002618:	080108c7 	.word	0x080108c7
 800261c:	200018bc 	.word	0x200018bc
 8002620:	200018b8 	.word	0x200018b8
 8002624:	200018c0 	.word	0x200018c0
 8002628:	080108e5 	.word	0x080108e5

0800262c <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 800262c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int result_send_location = 1;
	int result_check = 0;
	while(count_resend < 3){
//		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
//		printf("\n\n --------------Thread GSM %p is running low on stack: %04ld bytes remaining----------\n\n",GSMHandle, freeStack1);
		printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002630:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8002718 <processUploadDataToServer+0xec>
		else if(result_send_location == 2){
			printf("The connection to server is closed. \n");
			count_resend++;
		}
		else{
			printf("\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 8002634:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 800271c <processUploadDataToServer+0xf0>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002638:	4607      	mov	r7, r0
 800263a:	2501      	movs	r5, #1
		printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 800263c:	1e69      	subs	r1, r5, #1
 800263e:	4640      	mov	r0, r8
 8002640:	f009 f9d0 	bl	800b9e4 <iprintf>
		result_send_location = send_location_to_server(0, location_info);
 8002644:	4639      	mov	r1, r7
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fcc4 	bl	8001fd4 <send_location_to_server>
		if(result_send_location == 1){
 800264c:	2801      	cmp	r0, #1
		result_send_location = send_location_to_server(0, location_info);
 800264e:	4604      	mov	r4, r0
		if(result_send_location == 1){
 8002650:	d135      	bne.n	80026be <processUploadDataToServer+0x92>
			printf("Inside process: Check Sending Location Report\r\n");
 8002652:	4829      	ldr	r0, [pc, #164]	@ (80026f8 <processUploadDataToServer+0xcc>)
 8002654:	f009 fa36 	bl	800bac4 <puts>
			result_check = check_data_sent_to_server(0);
 8002658:	2000      	movs	r0, #0
 800265a:	f7ff fe4f 	bl	80022fc <check_data_sent_to_server>
			if(result_check){
 800265e:	4606      	mov	r6, r0
 8002660:	b158      	cbz	r0, 800267a <processUploadDataToServer+0x4e>
				printf("Sending SUCCESS\n");
 8002662:	4826      	ldr	r0, [pc, #152]	@ (80026fc <processUploadDataToServer+0xd0>)
 8002664:	f009 fa2e 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266c:	2100      	movs	r1, #0
		}
		count_check++;
		osDelay(100);
	}
	receive_response();
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800266e:	4824      	ldr	r0, [pc, #144]	@ (8002700 <processUploadDataToServer+0xd4>)
 8002670:	f009 fb88 	bl	800bd84 <memset>
	SIM_UART_ReInitializeRxDMA();
 8002674:	f7fe fe6c 	bl	8001350 <SIM_UART_ReInitializeRxDMA>

	return 0;
 8002678:	e036      	b.n	80026e8 <processUploadDataToServer+0xbc>
				printf("Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 800267a:	4822      	ldr	r0, [pc, #136]	@ (8002704 <processUploadDataToServer+0xd8>)
 800267c:	f009 fa22 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002684:	4631      	mov	r1, r6
 8002686:	481e      	ldr	r0, [pc, #120]	@ (8002700 <processUploadDataToServer+0xd4>)
 8002688:	f009 fb7c 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 800268c:	f7fe fe60 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 8002690:	20c8      	movs	r0, #200	@ 0xc8
	while(count_resend < 3){
 8002692:	3501      	adds	r5, #1
		osDelay(200);
 8002694:	f005 fd0e 	bl	80080b4 <osDelay>
	while(count_resend < 3){
 8002698:	2d04      	cmp	r5, #4
 800269a:	d1cf      	bne.n	800263c <processUploadDataToServer+0x10>
	send_AT_command(FIRST_CHECK);
 800269c:	481a      	ldr	r0, [pc, #104]	@ (8002708 <processUploadDataToServer+0xdc>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800269e:	4e1b      	ldr	r6, [pc, #108]	@ (800270c <processUploadDataToServer+0xe0>)
	send_AT_command(FIRST_CHECK);
 80026a0:	f7fe fe46 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80026a4:	250c      	movs	r5, #12
 80026a6:	4816      	ldr	r0, [pc, #88]	@ (8002700 <processUploadDataToServer+0xd4>)
 80026a8:	4631      	mov	r1, r6
 80026aa:	f009 fbbb 	bl	800be24 <strstr>
 80026ae:	4604      	mov	r4, r0
 80026b0:	b960      	cbnz	r0, 80026cc <processUploadDataToServer+0xa0>
	receive_response();
 80026b2:	f7fe fe67 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ba:	4621      	mov	r1, r4
 80026bc:	e7d7      	b.n	800266e <processUploadDataToServer+0x42>
		else if(result_send_location == 2){
 80026be:	2802      	cmp	r0, #2
			printf("The connection to server is closed. \n");
 80026c0:	bf0c      	ite	eq
 80026c2:	4813      	ldreq	r0, [pc, #76]	@ (8002710 <processUploadDataToServer+0xe4>)
			printf("\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 80026c4:	4648      	movne	r0, r9
 80026c6:	f009 f9fd 	bl	800bac4 <puts>
			count_resend++;
 80026ca:	e7e1      	b.n	8002690 <processUploadDataToServer+0x64>
		receive_response();
 80026cc:	f7fe fe5a 	bl	8001384 <receive_response>
		if(count_check > 10){
 80026d0:	3d01      	subs	r5, #1
 80026d2:	d10c      	bne.n	80026ee <processUploadDataToServer+0xc2>
			printf("SIM MODULE BUG");
 80026d4:	480f      	ldr	r0, [pc, #60]	@ (8002714 <processUploadDataToServer+0xe8>)
 80026d6:	f009 f985 	bl	800b9e4 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026da:	4809      	ldr	r0, [pc, #36]	@ (8002700 <processUploadDataToServer+0xd4>)
 80026dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e0:	4629      	mov	r1, r5
 80026e2:	f009 fb4f 	bl	800bd84 <memset>
			return 2;
 80026e6:	2402      	movs	r4, #2
}
 80026e8:	4620      	mov	r0, r4
 80026ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		osDelay(100);
 80026ee:	2064      	movs	r0, #100	@ 0x64
 80026f0:	f005 fce0 	bl	80080b4 <osDelay>
 80026f4:	e7d7      	b.n	80026a6 <processUploadDataToServer+0x7a>
 80026f6:	bf00      	nop
 80026f8:	080109a1 	.word	0x080109a1
 80026fc:	080109d0 	.word	0x080109d0
 8002700:	200018e4 	.word	0x200018e4
 8002704:	080109e0 	.word	0x080109e0
 8002708:	080100cf 	.word	0x080100cf
 800270c:	080100d4 	.word	0x080100d4
 8002710:	08010a0e 	.word	0x08010a0e
 8002714:	08010a80 	.word	0x08010a80
 8002718:	0801093a 	.word	0x0801093a
 800271c:	08010a33 	.word	0x08010a33

08002720 <StartGSM>:

void StartGSM(void const * argument)
{
 8002720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002724:	4889      	ldr	r0, [pc, #548]	@ (800294c <StartGSM+0x22c>)
						printf("REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002726:	4c8a      	ldr	r4, [pc, #552]	@ (8002950 <StartGSM+0x230>)
							result_final = processUploadDataToServer(&location_info);
 8002728:	f8df 827c 	ldr.w	r8, [pc, #636]	@ 80029a8 <StartGSM+0x288>
{
 800272c:	b0a5      	sub	sp, #148	@ 0x94
	printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 800272e:	f009 f959 	bl	800b9e4 <iprintf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8002732:	4a87      	ldr	r2, [pc, #540]	@ (8002950 <StartGSM+0x230>)
 8002734:	4987      	ldr	r1, [pc, #540]	@ (8002954 <StartGSM+0x234>)
 8002736:	4888      	ldr	r0, [pc, #544]	@ (8002958 <StartGSM+0x238>)
 8002738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800273c:	f000 fd6c 	bl	8003218 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 8002740:	a804      	add	r0, sp, #16
 8002742:	f7fe fda3 	bl	800128c <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002746:	a813      	add	r0, sp, #76	@ 0x4c
 8002748:	f7fe fdc6 	bl	80012d8 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 800274c:	4883      	ldr	r0, [pc, #524]	@ (800295c <StartGSM+0x23c>)
 800274e:	f000 fc89 	bl	8003064 <initQueue_GSM>
	init_SIM_module();
 8002752:	f7fe fe25 	bl	80013a0 <init_SIM_module>
	int is_set_uniqueID = 0;
 8002756:	2600      	movs	r6, #0
	int process = 0;
 8002758:	4635      	mov	r5, r6
		osDelay(300);
 800275a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800275e:	f005 fca9 	bl	80080b4 <osDelay>
		switch(process){
 8002762:	2d08      	cmp	r5, #8
 8002764:	d861      	bhi.n	800282a <StartGSM+0x10a>
 8002766:	e8df f015 	tbh	[pc, r5, lsl #1]
 800276a:	0009      	.short	0x0009
 800276c:	00490020 	.word	0x00490020
 8002770:	00a3006f 	.word	0x00a3006f
 8002774:	00e400cc 	.word	0x00e400cc
 8002778:	04590121 	.word	0x04590121
				printf("First CHECK\r\n");
 800277c:	4878      	ldr	r0, [pc, #480]	@ (8002960 <StartGSM+0x240>)
 800277e:	f009 f9a1 	bl	800bac4 <puts>
				isReady = first_check_SIM();
 8002782:	f7fe fedf 	bl	8001544 <first_check_SIM>
				if(isReady) process++;
 8002786:	4601      	mov	r1, r0
 8002788:	2800      	cmp	r0, #0
 800278a:	f040 80ae 	bne.w	80028ea <StartGSM+0x1ca>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800278e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002792:	4620      	mov	r0, r4
 8002794:	f009 faf6 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002798:	f7fe fdda 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					printf("\n------------------------ Rebooting SIM module -------------------\n");
 800279c:	4871      	ldr	r0, [pc, #452]	@ (8002964 <StartGSM+0x244>)
					SIM_UART_ReInitializeRxDMA();
					printf("\n ------------------------------ Rebooting SIM module -------------------------\n");
 800279e:	f009 f991 	bl	800bac4 <puts>
									process++;
 80027a2:	2500      	movs	r5, #0
					reboot_SIM_module();
 80027a4:	f7fe fe16 	bl	80013d4 <reboot_SIM_module>
					process = 0;
 80027a8:	e03f      	b.n	800282a <StartGSM+0x10a>
				printf("Check EVERYTHING READY\r\n");
 80027aa:	486f      	ldr	r0, [pc, #444]	@ (8002968 <StartGSM+0x248>)
 80027ac:	f009 f98a 	bl	800bac4 <puts>
				osDelay(100);
 80027b0:	2064      	movs	r0, #100	@ 0x64
 80027b2:	f005 fc7f 	bl	80080b4 <osDelay>
				int check_SIM = check_SIM_ready();
 80027b6:	f7fe ffcb 	bl	8001750 <check_SIM_ready>
 80027ba:	4607      	mov	r7, r0
				if(is_set_uniqueID == 0 && check_SIM == 1){
 80027bc:	b186      	cbz	r6, 80027e0 <StartGSM+0xc0>
	int process = 0;
 80027be:	462e      	mov	r6, r5
				osDelay(150);
 80027c0:	2096      	movs	r0, #150	@ 0x96
 80027c2:	f005 fc77 	bl	80080b4 <osDelay>
				if (check_SIM == 0){
 80027c6:	2f00      	cmp	r7, #0
 80027c8:	f040 8441 	bne.w	800304e <StartGSM+0x92e>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80027cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027d0:	4639      	mov	r1, r7
 80027d2:	4620      	mov	r0, r4
 80027d4:	f009 fad6 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 80027d8:	f7fe fdba 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					printf("\n --------------------------- Rebooting SIM module --------------------------\n");
 80027dc:	4863      	ldr	r0, [pc, #396]	@ (800296c <StartGSM+0x24c>)
 80027de:	e7de      	b.n	800279e <StartGSM+0x7e>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 80027e0:	2801      	cmp	r0, #1
 80027e2:	d1ed      	bne.n	80027c0 <StartGSM+0xa0>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 80027e4:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <StartGSM+0x250>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	f8cd 2015 	str.w	r2, [sp, #21]
 80027ee:	f8ad 3019 	strh.w	r3, [sp, #25]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 80027f2:	f8cd 2051 	str.w	r2, [sp, #81]	@ 0x51
 80027f6:	f8ad 3055 	strh.w	r3, [sp, #85]	@ 0x55
					is_set_uniqueID = 1;
 80027fa:	e7e0      	b.n	80027be <StartGSM+0x9e>
				printf("Inside process: Configure PDP context\r\n");
 80027fc:	485d      	ldr	r0, [pc, #372]	@ (8002974 <StartGSM+0x254>)
 80027fe:	f009 f961 	bl	800bac4 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002806:	2100      	movs	r1, #0
 8002808:	4620      	mov	r0, r4
 800280a:	f009 fabb 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 800280e:	f7fe fd9f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f7ff f8da 	bl	80019cc <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281c:	2100      	movs	r1, #0
 800281e:	4620      	mov	r0, r4
 8002820:	f009 fab0 	bl	800bd84 <memset>
				SIM_UART_ReInitializeRxDMA();
 8002824:	f7fe fd94 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				process++;
 8002828:	2503      	movs	r5, #3
				}
				break;
		}
		if(is_in_sending == 0 && is_disconnect == 1){
 800282a:	4f53      	ldr	r7, [pc, #332]	@ (8002978 <StartGSM+0x258>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b92b      	cbnz	r3, 800283c <StartGSM+0x11c>
 8002830:	4b52      	ldr	r3, [pc, #328]	@ (800297c <StartGSM+0x25c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d190      	bne.n	800275a <StartGSM+0x3a>
			receiveRMCDataWithAddrGSM();
 8002838:	f7ff fe58 	bl	80024ec <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d18b      	bne.n	800275a <StartGSM+0x3a>
			is_in_sending = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	e788      	b.n	800275a <StartGSM+0x3a>
				printf("Inside process: Activate PDP context\r\n");
 8002848:	484d      	ldr	r0, [pc, #308]	@ (8002980 <StartGSM+0x260>)
 800284a:	f009 f93b 	bl	800bac4 <puts>
				int receive_activate = activate_context(1);
 800284e:	2001      	movs	r0, #1
 8002850:	f7ff f90a 	bl	8001a68 <activate_context>
				if(receive_activate){
 8002854:	4607      	mov	r7, r0
 8002856:	b188      	cbz	r0, 800287c <StartGSM+0x15c>
					getCurrentTime();
 8002858:	f7ff fe12 	bl	8002480 <getCurrentTime>
					printf("Activate PDP context successfully\n");
 800285c:	4849      	ldr	r0, [pc, #292]	@ (8002984 <StartGSM+0x264>)
 800285e:	f009 f931 	bl	800bac4 <puts>
					osDelay(200);
 8002862:	20c8      	movs	r0, #200	@ 0xc8
 8002864:	f005 fc26 	bl	80080b4 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286c:	2100      	movs	r1, #0
 800286e:	4620      	mov	r0, r4
 8002870:	f009 fa88 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002874:	f7fe fd6c 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002878:	2504      	movs	r5, #4
 800287a:	e7d6      	b.n	800282a <StartGSM+0x10a>
					printf("Activate PDP Context Failed\n");
 800287c:	4842      	ldr	r0, [pc, #264]	@ (8002988 <StartGSM+0x268>)
 800287e:	f009 f921 	bl	800bac4 <puts>
					int receive_deactivate = deactivate_context(1);
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff f954 	bl	8001b30 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002888:	f44f 7200 	mov.w	r2, #512	@ 0x200
					int receive_deactivate = deactivate_context(1);
 800288c:	4605      	mov	r5, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800288e:	4639      	mov	r1, r7
 8002890:	4620      	mov	r0, r4
 8002892:	f009 fa77 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002896:	f7fe fd5b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 800289a:	bb35      	cbnz	r5, 80028ea <StartGSM+0x1ca>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800289c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a0:	4629      	mov	r1, r5
 80028a2:	4620      	mov	r0, r4
 80028a4:	f009 fa6e 	bl	800bd84 <memset>
						SIM_UART_ReInitializeRxDMA();
 80028a8:	f7fe fd52 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						printf("\n --------------------------- Rebooting SIM module ---------------------------\n");
 80028ac:	4837      	ldr	r0, [pc, #220]	@ (800298c <StartGSM+0x26c>)
 80028ae:	e776      	b.n	800279e <StartGSM+0x7e>
				printf("Inside process: OPEN SOCKET SERVICE\r\n");
 80028b0:	4837      	ldr	r0, [pc, #220]	@ (8002990 <StartGSM+0x270>)
 80028b2:	f009 f907 	bl	800bac4 <puts>
				int received_res = open_socket_service(1, 0, 0, 0);
 80028b6:	2300      	movs	r3, #0
 80028b8:	461a      	mov	r2, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff f97d 	bl	8001bbc <open_socket_service>
				if(received_res){
 80028c2:	4607      	mov	r7, r0
 80028c4:	2800      	cmp	r0, #0
 80028c6:	f040 83c5 	bne.w	8003054 <StartGSM+0x934>
					printf("Connect to Server Failed\n");
 80028ca:	4832      	ldr	r0, [pc, #200]	@ (8002994 <StartGSM+0x274>)
 80028cc:	f009 f8fa 	bl	800bac4 <puts>
					int receive_deactivate = deactivate_context(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff f92d 	bl	8001b30 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
					int receive_deactivate = deactivate_context(1);
 80028da:	4605      	mov	r5, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028dc:	4639      	mov	r1, r7
 80028de:	4620      	mov	r0, r4
 80028e0:	f009 fa50 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 80028e4:	f7fe fd34 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 80028e8:	b10d      	cbz	r5, 80028ee <StartGSM+0x1ce>
					if (receive_deactivate) process = 1;
 80028ea:	2501      	movs	r5, #1
 80028ec:	e79d      	b.n	800282a <StartGSM+0x10a>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f2:	4629      	mov	r1, r5
 80028f4:	4620      	mov	r0, r4
 80028f6:	f009 fa45 	bl	800bd84 <memset>
						SIM_UART_ReInitializeRxDMA();
 80028fa:	f7fe fd29 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						printf("\n ------------------------- Rebooting SIM module -----------------------\n");
 80028fe:	4826      	ldr	r0, [pc, #152]	@ (8002998 <StartGSM+0x278>)
 8002900:	e74d      	b.n	800279e <StartGSM+0x7e>
				printf("Inside process: Register/Login to the server.\r\n");
 8002902:	4826      	ldr	r0, [pc, #152]	@ (800299c <StartGSM+0x27c>)
 8002904:	f009 f8de 	bl	800bac4 <puts>
 8002908:	2503      	movs	r5, #3
					int result_send_login = login_to_server(0,&reg_msg);
 800290a:	a904      	add	r1, sp, #16
 800290c:	2000      	movs	r0, #0
 800290e:	f7ff fae7 	bl	8001ee0 <login_to_server>
 8002912:	4607      	mov	r7, r0
					receive_response();
 8002914:	f7fe fd36 	bl	8001384 <receive_response>
					if(result_send_login){
 8002918:	b127      	cbz	r7, 8002924 <StartGSM+0x204>
						printf("LOGIN TO SERVER SUCCESSFULLY\n");
 800291a:	4821      	ldr	r0, [pc, #132]	@ (80029a0 <StartGSM+0x280>)
 800291c:	f009 f8d2 	bl	800bac4 <puts>
				else process++;
 8002920:	2506      	movs	r5, #6
 8002922:	e782      	b.n	800282a <StartGSM+0x10a>
					osDelay(200);
 8002924:	20c8      	movs	r0, #200	@ 0xc8
 8002926:	f005 fbc5 	bl	80080b4 <osDelay>
				while(count_resend_login < 3){
 800292a:	3d01      	subs	r5, #1
 800292c:	d1ed      	bne.n	800290a <StartGSM+0x1ea>
				else process = 8;
 800292e:	2508      	movs	r5, #8
 8002930:	e77b      	b.n	800282a <StartGSM+0x10a>
				printf("Inside process: Check Register/Login\r\n");
 8002932:	481c      	ldr	r0, [pc, #112]	@ (80029a4 <StartGSM+0x284>)
 8002934:	f009 f8c6 	bl	800bac4 <puts>
				int result_check_login = check_data_sent_to_server(0);
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff fcdf 	bl	80022fc <check_data_sent_to_server>
				if(result_check_login){
 800293e:	2800      	cmp	r0, #0
 8002940:	d0f5      	beq.n	800292e <StartGSM+0x20e>
					receive_response();
 8002942:	f7fe fd1f 	bl	8001384 <receive_response>
					process++;
 8002946:	2507      	movs	r5, #7
 8002948:	e76f      	b.n	800282a <StartGSM+0x10a>
 800294a:	bf00      	nop
 800294c:	08010a8f 	.word	0x08010a8f
 8002950:	200018e4 	.word	0x200018e4
 8002954:	20001db0 	.word	0x20001db0
 8002958:	200018d4 	.word	0x200018d4
 800295c:	200016a4 	.word	0x200016a4
 8002960:	08010ae6 	.word	0x08010ae6
 8002964:	08010af3 	.word	0x08010af3
 8002968:	08010b36 	.word	0x08010b36
 800296c:	08010b4e 	.word	0x08010b4e
 8002970:	20001638 	.word	0x20001638
 8002974:	08010b9c 	.word	0x08010b9c
 8002978:	200018cc 	.word	0x200018cc
 800297c:	200018c0 	.word	0x200018c0
 8002980:	08010bc3 	.word	0x08010bc3
 8002984:	08010be9 	.word	0x08010be9
 8002988:	08010c0b 	.word	0x08010c0b
 800298c:	08010c27 	.word	0x08010c27
 8002990:	08010c76 	.word	0x08010c76
 8002994:	08010c9b 	.word	0x08010c9b
 8002998:	08010cb4 	.word	0x08010cb4
 800299c:	08010cfd 	.word	0x08010cfd
 80029a0:	08010d2c 	.word	0x08010d2c
 80029a4:	08010d49 	.word	0x08010d49
 80029a8:	20000000 	.word	0x20000000
				is_in_sending = 1;
 80029ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002c48 <StartGSM+0x528>)
				printf("Inside process: Send Location\r\n");
 80029ae:	48a7      	ldr	r0, [pc, #668]	@ (8002c4c <StartGSM+0x52c>)
				is_in_sending = 1;
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
				printf("Inside process: Send Location\r\n");
 80029b4:	f009 f886 	bl	800bac4 <puts>
				int result_get_current = getCurrentTime();
 80029b8:	f7ff fd62 	bl	8002480 <getCurrentTime>
				if(result_get_current == 0){
 80029bc:	2800      	cmp	r0, #0
 80029be:	d0b6      	beq.n	800292e <StartGSM+0x20e>
					if(received_RMC == 1){
 80029c0:	f8df 9300 	ldr.w	r9, [pc, #768]	@ 8002cc4 <StartGSM+0x5a4>
					receiveRMCDataWithAddrGSM();
 80029c4:	f7ff fd92 	bl	80024ec <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 80029c8:	f8d9 3000 	ldr.w	r3, [r9]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d1f9      	bne.n	80029c4 <StartGSM+0x2a4>
						received_RMC = 0;
 80029d0:	2300      	movs	r3, #0
						printf("RECEIVED RMC DATA AT GSM MODULE\n");
 80029d2:	489f      	ldr	r0, [pc, #636]	@ (8002c50 <StartGSM+0x530>)
						received_RMC = 0;
 80029d4:	f8c9 3000 	str.w	r3, [r9]
						printf("RECEIVED RMC DATA AT GSM MODULE\n");
 80029d8:	f009 f874 	bl	800bac4 <puts>
						save_rmc_to_location_info(&location_info);
 80029dc:	a813      	add	r0, sp, #76	@ 0x4c
 80029de:	f7fe fd27 	bl	8001430 <save_rmc_to_location_info>
							send_AT_command(CHECK_SIGNAL_QUALITY);
 80029e2:	4f9c      	ldr	r7, [pc, #624]	@ (8002c54 <StartGSM+0x534>)
							if(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80029e4:	f8df a2e0 	ldr.w	sl, [pc, #736]	@ 8002cc8 <StartGSM+0x5a8>
						save_rmc_to_location_info(&location_info);
 80029e8:	2503      	movs	r5, #3
							send_AT_command(CHECK_SIGNAL_QUALITY);
 80029ea:	4638      	mov	r0, r7
 80029ec:	f7fe fca0 	bl	8001330 <send_AT_command>
							osDelay(300);
 80029f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80029f4:	f005 fb5e 	bl	80080b4 <osDelay>
							if(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80029f8:	4651      	mov	r1, sl
 80029fa:	4620      	mov	r0, r4
 80029fc:	f009 fa12 	bl	800be24 <strstr>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f040 808e 	bne.w	8002b22 <StartGSM+0x402>
								printf("\n CSQ OK:");
 8002a06:	4894      	ldr	r0, [pc, #592]	@ (8002c58 <StartGSM+0x538>)
 8002a08:	f008 ffec 	bl	800b9e4 <iprintf>
								receive_response();
 8002a0c:	f7fe fcba 	bl	8001384 <receive_response>
								printf("\n");
 8002a10:	200a      	movs	r0, #10
 8002a12:	f008 fff9 	bl	800ba08 <putchar>
						HAL_TIM_Base_Start(&htim3);
 8002a16:	4f91      	ldr	r7, [pc, #580]	@ (8002c5c <StartGSM+0x53c>)
 8002a18:	4d91      	ldr	r5, [pc, #580]	@ (8002c60 <StartGSM+0x540>)
 8002a1a:	4638      	mov	r0, r7
 8002a1c:	f004 fcbc 	bl	8007398 <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f04f 0a00 	mov.w	sl, #0
 8002a26:	f8c3 a024 	str.w	sl, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 8002a2a:	a813      	add	r0, sp, #76	@ 0x4c
 8002a2c:	f7ff fdfe 	bl	800262c <processUploadDataToServer>
							if(result_final == 1){
 8002a30:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002a32:	f8c8 0000 	str.w	r0, [r8]
							if(result_final == 1){
 8002a36:	f040 814b 	bne.w	8002cd0 <StartGSM+0x5b0>
								printf("Sending SUCCESS\n");
 8002a3a:	488a      	ldr	r0, [pc, #552]	@ (8002c64 <StartGSM+0x544>)
 8002a3c:	f009 f842 	bl	800bac4 <puts>
								receive_response();
 8002a40:	f7fe fca0 	bl	8001384 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a48:	4651      	mov	r1, sl
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f009 f99a 	bl	800bd84 <memset>
								SIM_UART_ReInitializeRxDMA();
 8002a50:	f7fe fc7e 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002a54:	682a      	ldr	r2, [r5, #0]
 8002a56:	2a01      	cmp	r2, #1
 8002a58:	d077      	beq.n	8002b4a <StartGSM+0x42a>
 8002a5a:	4b83      	ldr	r3, [pc, #524]	@ (8002c68 <StartGSM+0x548>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	f040 80dc 	bne.w	8002c1c <StartGSM+0x4fc>
									printf("\n-----------ADDING current address to the result queue----------\n");
 8002a64:	4881      	ldr	r0, [pc, #516]	@ (8002c6c <StartGSM+0x54c>)
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002a66:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8002c80 <StartGSM+0x560>
									printf("\n-----------ADDING current address to the result queue----------\n");
 8002a6a:	f009 f82b 	bl	800bac4 <puts>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002a6e:	4b80      	ldr	r3, [pc, #512]	@ (8002c70 <StartGSM+0x550>)
 8002a70:	4658      	mov	r0, fp
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	f000 fafe 	bl	8003074 <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002a78:	4b7e      	ldr	r3, [pc, #504]	@ (8002c74 <StartGSM+0x554>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d16f      	bne.n	8002b60 <StartGSM+0x440>
 8002a80:	4a7d      	ldr	r2, [pc, #500]	@ (8002c78 <StartGSM+0x558>)
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	6013      	str	r3, [r2, #0]
									printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002a88:	487c      	ldr	r0, [pc, #496]	@ (8002c7c <StartGSM+0x55c>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002a8a:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8002ca0 <StartGSM+0x580>
 8002a8e:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8002ca8 <StartGSM+0x588>
									printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002a92:	f009 f817 	bl	800bac4 <puts>
									printQueue_GSM(&result_addr_queue);
 8002a96:	487a      	ldr	r0, [pc, #488]	@ (8002c80 <StartGSM+0x560>)
 8002a98:	f000 fb1c 	bl	80030d4 <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002a9c:	f8da 3000 	ldr.w	r3, [sl]
 8002aa0:	f8db 1000 	ldr.w	r1, [fp]
 8002aa4:	3b80      	subs	r3, #128	@ 0x80
 8002aa6:	428b      	cmp	r3, r1
 8002aa8:	f200 80c7 	bhi.w	8002c3a <StartGSM+0x51a>
 8002aac:	f8da 0000 	ldr.w	r0, [sl]
 8002ab0:	4973      	ldr	r1, [pc, #460]	@ (8002c80 <StartGSM+0x560>)
 8002ab2:	3880      	subs	r0, #128	@ 0x80
 8002ab4:	f000 fb40 	bl	8003138 <checkAddrExistInQueue>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	f000 80be 	beq.w	8002c3a <StartGSM+0x51a>
										printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002abe:	4871      	ldr	r0, [pc, #452]	@ (8002c84 <StartGSM+0x564>)
 8002ac0:	f009 f800 	bl	800bac4 <puts>
										is_using_flash = 0;
 8002ac4:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <StartGSM+0x548>)
										clearQueue_GSM(&result_addr_queue);
 8002ac6:	486e      	ldr	r0, [pc, #440]	@ (8002c80 <StartGSM+0x560>)
										is_using_flash = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002acc:	f000 faf2 	bl	80030b4 <clearQueue_GSM>
										count_shiftleft = 0;
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c88 <StartGSM+0x568>)
										printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002ad2:	486e      	ldr	r0, [pc, #440]	@ (8002c8c <StartGSM+0x56c>)
										start_addr_disconnect = 0;
 8002ad4:	2300      	movs	r3, #0
										count_shiftleft = 0;
 8002ad6:	7013      	strb	r3, [r2, #0]
										is_keep_up = 0;
 8002ad8:	4a66      	ldr	r2, [pc, #408]	@ (8002c74 <StartGSM+0x554>)
										start_addr_disconnect = 0;
 8002ada:	f8cb 3000 	str.w	r3, [fp]
										is_keep_up = 0;
 8002ade:	6013      	str	r3, [r2, #0]
										end_addr_disconnect = 0;
 8002ae0:	f8ca 3000 	str.w	r3, [sl]
										printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002ae4:	f008 ffee 	bl	800bac4 <puts>
											osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002ae8:	f8df a1e0 	ldr.w	sl, [pc, #480]	@ 8002ccc <StartGSM+0x5ac>
											printf("Receiving MAIL\n");
 8002aec:	4868      	ldr	r0, [pc, #416]	@ (8002c90 <StartGSM+0x570>)
 8002aee:	f008 ffe9 	bl	800bac4 <puts>
											osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002af2:	f8da 1000 	ldr.w	r1, [sl]
 8002af6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002afa:	a801      	add	r0, sp, #4
 8002afc:	f005 fc05 	bl	800830a <osMailGet>
											if(evt.status == osEventMail){// Wait for mail
 8002b00:	9b01      	ldr	r3, [sp, #4]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	f040 8085 	bne.w	8002c12 <StartGSM+0x4f2>
												GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002b08:	f8dd b008 	ldr.w	fp, [sp, #8]
												printf("Receiving MAIL For CLEARING: %08lx\n", receivedData->address);
 8002b0c:	4861      	ldr	r0, [pc, #388]	@ (8002c94 <StartGSM+0x574>)
 8002b0e:	f8db 1058 	ldr.w	r1, [fp, #88]	@ 0x58
 8002b12:	f008 ff67 	bl	800b9e4 <iprintf>
												osMailFree(RMC_MailQGSMId, receivedData);
 8002b16:	f8da 0000 	ldr.w	r0, [sl]
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	f005 fc2e 	bl	800837c <osMailFree>
 8002b20:	e7e4      	b.n	8002aec <StartGSM+0x3cc>
								printf("\n CSQ NOT OK -> RESEND:");
 8002b22:	485d      	ldr	r0, [pc, #372]	@ (8002c98 <StartGSM+0x578>)
 8002b24:	f008 ff5e 	bl	800b9e4 <iprintf>
								receive_response();
 8002b28:	f7fe fc2c 	bl	8001384 <receive_response>
								printf("\n");
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f008 ff6b 	bl	800ba08 <putchar>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b36:	2100      	movs	r1, #0
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f009 f923 	bl	800bd84 <memset>
							SIM_UART_ReInitializeRxDMA();
 8002b3e:	f7fe fc07 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						for(size_t i = 0; i < 3 ; i++){
 8002b42:	3d01      	subs	r5, #1
 8002b44:	f47f af51 	bne.w	80029ea <StartGSM+0x2ca>
 8002b48:	e765      	b.n	8002a16 <StartGSM+0x2f6>
										end_addr_disconnect = current_addr_gsm;
 8002b4a:	4b49      	ldr	r3, [pc, #292]	@ (8002c70 <StartGSM+0x550>)
										printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08lx\n", end_addr_disconnect);
 8002b4c:	4853      	ldr	r0, [pc, #332]	@ (8002c9c <StartGSM+0x57c>)
										end_addr_disconnect = current_addr_gsm;
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	4b53      	ldr	r3, [pc, #332]	@ (8002ca0 <StartGSM+0x580>)
 8002b52:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002b54:	4953      	ldr	r1, [pc, #332]	@ (8002ca4 <StartGSM+0x584>)
 8002b56:	600a      	str	r2, [r1, #0]
										printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08lx\n", end_addr_disconnect);
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	f008 ff43 	bl	800b9e4 <iprintf>
 8002b5e:	e781      	b.n	8002a64 <StartGSM+0x344>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d191      	bne.n	8002a88 <StartGSM+0x368>
 8002b64:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <StartGSM+0x584>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d18d      	bne.n	8002a88 <StartGSM+0x368>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002b6c:	f8db 1208 	ldr.w	r1, [fp, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002b70:	f8db c200 	ldr.w	ip, [fp, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002b74:	f04f 0e00 	mov.w	lr, #0
 8002b78:	3901      	subs	r1, #1
										int count_stack = 0;
 8002b7a:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002b7c:	4571      	cmp	r1, lr
 8002b7e:	dc12      	bgt.n	8002ba6 <StartGSM+0x486>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002b80:	f04f 0e00 	mov.w	lr, #0
 8002b84:	4571      	cmp	r1, lr
 8002b86:	dc26      	bgt.n	8002bd6 <StartGSM+0x4b6>
										start_addr_disconnect -= count_shiftleft * 128;
 8002b88:	4947      	ldr	r1, [pc, #284]	@ (8002ca8 <StartGSM+0x588>)
 8002b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c88 <StartGSM+0x568>)
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	7810      	ldrb	r0, [r2, #0]
 8002b90:	eba3 13c0 	sub.w	r3, r3, r0, lsl #7
 8002b94:	600b      	str	r3, [r1, #0]
										count_shiftleft = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	7013      	strb	r3, [r2, #0]
										in_getting_mail_stack = 0;
 8002b9a:	4a42      	ldr	r2, [pc, #264]	@ (8002ca4 <StartGSM+0x584>)
										printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002b9c:	4843      	ldr	r0, [pc, #268]	@ (8002cac <StartGSM+0x58c>)
										in_getting_mail_stack = 0;
 8002b9e:	6013      	str	r3, [r2, #0]
										printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002ba0:	f008 ff90 	bl	800bac4 <puts>
 8002ba4:	e770      	b.n	8002a88 <StartGSM+0x368>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002ba6:	eb0e 030c 	add.w	r3, lr, ip
 8002baa:	4258      	negs	r0, r3
 8002bac:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb4:	bf58      	it	pl
 8002bb6:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002bb8:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8002bbc:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 8002bc0:	d106      	bne.n	8002bd0 <StartGSM+0x4b0>
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8002bc8:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002bcc:	bf08      	it	eq
 8002bce:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002bd0:	f10e 0e01 	add.w	lr, lr, #1
 8002bd4:	e7d2      	b.n	8002b7c <StartGSM+0x45c>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002bd6:	eb0e 000c 	add.w	r0, lr, ip
 8002bda:	4243      	negs	r3, r0
 8002bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002be4:	bf58      	it	pl
 8002be6:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002be8:	f85b 3020 	ldr.w	r3, [fp, r0, lsl #2]
 8002bec:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002bf0:	d10c      	bne.n	8002c0c <StartGSM+0x4ec>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8002bf8:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002bfc:	bf01      	itttt	eq
 8002bfe:	01d3      	lsleq	r3, r2, #7
 8002c00:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002c04:	f84b 3020 	streq.w	r3, [fp, r0, lsl #2]
												count_stack--;
 8002c08:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c0c:	f10e 0e01 	add.w	lr, lr, #1
 8002c10:	e7b8      	b.n	8002b84 <StartGSM+0x464>
												printf("Have cleared out all mail queue\n");
 8002c12:	4827      	ldr	r0, [pc, #156]	@ (8002cb0 <StartGSM+0x590>)
 8002c14:	f008 ff56 	bl	800bac4 <puts>
									is_disconnect = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	602b      	str	r3, [r5, #0]
								is_pushing_data = 0;
 8002c1c:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <StartGSM+0x594>)
							printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002c1e:	4826      	ldr	r0, [pc, #152]	@ (8002cb8 <StartGSM+0x598>)
								is_pushing_data = 0;
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002c28:	f008 fedc 	bl	800b9e4 <iprintf>
							printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002c2c:	4823      	ldr	r0, [pc, #140]	@ (8002cbc <StartGSM+0x59c>)
 8002c2e:	f008 ff49 	bl	800bac4 <puts>
							osDelay(200);
 8002c32:	20c8      	movs	r0, #200	@ 0xc8
 8002c34:	f005 fa3e 	bl	80080b4 <osDelay>
 8002c38:	e6c4      	b.n	80029c4 <StartGSM+0x2a4>
										printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002c3a:	4821      	ldr	r0, [pc, #132]	@ (8002cc0 <StartGSM+0x5a0>)
 8002c3c:	f008 ff42 	bl	800bac4 <puts>
										is_using_flash = 1;
 8002c40:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <StartGSM+0x548>)
 8002c42:	2301      	movs	r3, #1
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e7e7      	b.n	8002c18 <StartGSM+0x4f8>
 8002c48:	200018cc 	.word	0x200018cc
 8002c4c:	08010d6f 	.word	0x08010d6f
 8002c50:	08010d8e 	.word	0x08010d8e
 8002c54:	080101f7 	.word	0x080101f7
 8002c58:	08010dae 	.word	0x08010dae
 8002c5c:	20001f48 	.word	0x20001f48
 8002c60:	200018c0 	.word	0x200018c0
 8002c64:	080109d0 	.word	0x080109d0
 8002c68:	200018bc 	.word	0x200018bc
 8002c6c:	08010e10 	.word	0x08010e10
 8002c70:	2000169c 	.word	0x2000169c
 8002c74:	200018b8 	.word	0x200018b8
 8002c78:	200018c4 	.word	0x200018c4
 8002c7c:	08010ea1 	.word	0x08010ea1
 8002c80:	200016a4 	.word	0x200016a4
 8002c84:	08010ed5 	.word	0x08010ed5
 8002c88:	200018b4 	.word	0x200018b4
 8002c8c:	08010f0f 	.word	0x08010f0f
 8002c90:	08010f4e 	.word	0x08010f4e
 8002c94:	08010f5d 	.word	0x08010f5d
 8002c98:	08010db8 	.word	0x08010db8
 8002c9c:	08010dd0 	.word	0x08010dd0
 8002ca0:	20001698 	.word	0x20001698
 8002ca4:	200018c8 	.word	0x200018c8
 8002ca8:	200016a0 	.word	0x200016a0
 8002cac:	08010e51 	.word	0x08010e51
 8002cb0:	08010f81 	.word	0x08010f81
 8002cb4:	200018b0 	.word	0x200018b0
 8002cb8:	08010fe7 	.word	0x08010fe7
 8002cbc:	08011031 	.word	0x08011031
 8002cc0:	08010fa1 	.word	0x08010fa1
 8002cc4:	200018d0 	.word	0x200018d0
 8002cc8:	080100d4 	.word	0x080100d4
 8002ccc:	20001c84 	.word	0x20001c84
								printf("Sending ERROR\n");
 8002cd0:	48b9      	ldr	r0, [pc, #740]	@ (8002fb8 <StartGSM+0x898>)
 8002cd2:	4fba      	ldr	r7, [pc, #744]	@ (8002fbc <StartGSM+0x89c>)
 8002cd4:	f008 fef6 	bl	800bac4 <puts>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cdc:	4651      	mov	r1, sl
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f009 f850 	bl	800bd84 <memset>
								SIM_UART_ReInitializeRxDMA();
 8002ce4:	f7fe fb34 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b95b      	cbnz	r3, 8002d04 <StartGSM+0x5e4>
									if(is_using_flash == 0){
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b93b      	cbnz	r3, 8002d00 <StartGSM+0x5e0>
										start_addr_disconnect = current_addr_gsm;
 8002cf0:	4bb3      	ldr	r3, [pc, #716]	@ (8002fc0 <StartGSM+0x8a0>)
										printf("Saving start address of connection outage: %08lx\n", start_addr_disconnect);
 8002cf2:	48b4      	ldr	r0, [pc, #720]	@ (8002fc4 <StartGSM+0x8a4>)
										start_addr_disconnect = current_addr_gsm;
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4bb4      	ldr	r3, [pc, #720]	@ (8002fc8 <StartGSM+0x8a8>)
 8002cf8:	601a      	str	r2, [r3, #0]
										printf("Saving start address of connection outage: %08lx\n", start_addr_disconnect);
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	f008 fe72 	bl	800b9e4 <iprintf>
									is_disconnect = 1;
 8002d00:	2301      	movs	r3, #1
 8002d02:	602b      	str	r3, [r5, #0]
								if(is_using_flash == 1){
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 8116 	bne.w	8002f38 <StartGSM+0x818>
									if(is_keep_up){
 8002d0c:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 8003014 <StartGSM+0x8f4>
 8002d10:	4dae      	ldr	r5, [pc, #696]	@ (8002fcc <StartGSM+0x8ac>)
 8002d12:	f8d9 2000 	ldr.w	r2, [r9]
 8002d16:	bb4a      	cbnz	r2, 8002d6c <StartGSM+0x64c>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d18:	f8d5 3208 	ldr.w	r3, [r5, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002d1c:	f8d5 e200 	ldr.w	lr, [r5, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d20:	f103 3cff 	add.w	ip, r3, #4294967295
 8002d24:	4692      	mov	sl, r2
										int count_stack = 0;
 8002d26:	4610      	mov	r0, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d28:	45d4      	cmp	ip, sl
 8002d2a:	f300 80ac 	bgt.w	8002e86 <StartGSM+0x766>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d2e:	4594      	cmp	ip, r2
 8002d30:	dd37      	ble.n	8002da2 <StartGSM+0x682>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002d32:	eb02 010e 	add.w	r1, r2, lr
 8002d36:	424b      	negs	r3, r1
 8002d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d3c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002d40:	bf58      	it	pl
 8002d42:	4259      	negpl	r1, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002d44:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8002d48:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002d4c:	d10c      	bne.n	8002d68 <StartGSM+0x648>
 8002d4e:	1c4b      	adds	r3, r1, #1
 8002d50:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002d54:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002d58:	bf01      	itttt	eq
 8002d5a:	01c3      	lsleq	r3, r0, #7
 8002d5c:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002d60:	f845 3021 	streq.w	r3, [r5, r1, lsl #2]
												count_stack--;
 8002d64:	f100 30ff 	addeq.w	r0, r0, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002d68:	3201      	adds	r2, #1
 8002d6a:	e7e0      	b.n	8002d2e <StartGSM+0x60e>
										printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002d6c:	4898      	ldr	r0, [pc, #608]	@ (8002fd0 <StartGSM+0x8b0>)
 8002d6e:	f008 fea9 	bl	800bac4 <puts>
										printQueue_GSM(&result_addr_queue);
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 f9ae 	bl	80030d4 <printQueue_GSM>
										printf("\n--------------- Update the result address data: GSM --------------\n");
 8002d78:	4896      	ldr	r0, [pc, #600]	@ (8002fd4 <StartGSM+0x8b4>)
 8002d7a:	f008 fea3 	bl	800bac4 <puts>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002d7e:	4b92      	ldr	r3, [pc, #584]	@ (8002fc8 <StartGSM+0x8a8>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002d80:	f04f 0b00 	mov.w	fp, #0
 8002d84:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002d88:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002d8c:	4558      	cmp	r0, fp
 8002d8e:	dc43      	bgt.n	8002e18 <StartGSM+0x6f8>
										int count_shiftleft_dub = count_shiftleft;
 8002d90:	4b91      	ldr	r3, [pc, #580]	@ (8002fd8 <StartGSM+0x8b8>)
 8002d92:	f893 a000 	ldrb.w	sl, [r3]
										for (int i = 0; i < result_addr_queue.size; i++){
 8002d96:	f04f 0c00 	mov.w	ip, #0
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002d9a:	ea4f 1eca 	mov.w	lr, sl, lsl #7
										for (int i = 0; i < result_addr_queue.size; i++){
 8002d9e:	4560      	cmp	r0, ip
 8002da0:	dc55      	bgt.n	8002e4e <StartGSM+0x72e>
									printQueue_GSM(&result_addr_queue);
 8002da2:	488a      	ldr	r0, [pc, #552]	@ (8002fcc <StartGSM+0x8ac>)
 8002da4:	f000 f996 	bl	80030d4 <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 8002da8:	4b87      	ldr	r3, [pc, #540]	@ (8002fc8 <StartGSM+0x8a8>)
 8002daa:	498b      	ldr	r1, [pc, #556]	@ (8002fd8 <StartGSM+0x8b8>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	7808      	ldrb	r0, [r1, #0]
 8002db0:	eba2 12c0 	sub.w	r2, r2, r0, lsl #7
 8002db4:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 8002dbc:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002dc0:	d379      	bcc.n	8002eb6 <StartGSM+0x796>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002dc2:	4a86      	ldr	r2, [pc, #536]	@ (8002fdc <StartGSM+0x8bc>)
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002dc4:	4886      	ldr	r0, [pc, #536]	@ (8002fe0 <StartGSM+0x8c0>)
									end_addr_disconnect -= 128 *count_shiftleft;
 8002dc6:	6813      	ldr	r3, [r2, #0]
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002dc8:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 8003018 <StartGSM+0x8f8>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002dcc:	eba3 030c 	sub.w	r3, r3, ip
 8002dd0:	6013      	str	r3, [r2, #0]
									count_shiftleft = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	700b      	strb	r3, [r1, #0]
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002dd6:	f008 fe75 	bl	800bac4 <puts>
										printf("Receiving MAIL\n");
 8002dda:	4882      	ldr	r0, [pc, #520]	@ (8002fe4 <StartGSM+0x8c4>)
 8002ddc:	f008 fe72 	bl	800bac4 <puts>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002de0:	f8da 1000 	ldr.w	r1, [sl]
 8002de4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002de8:	a801      	add	r0, sp, #4
 8002dea:	f005 fa8e 	bl	800830a <osMailGet>
										if(evt.status == osEventMail){
 8002dee:	9b01      	ldr	r3, [sp, #4]
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	f040 8081 	bne.w	8002ef8 <StartGSM+0x7d8>
											GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002df6:	f8dd b008 	ldr.w	fp, [sp, #8]
											printf("Receiving MAIL FOR CLEARING: %08lx\n", receivedData->address);
 8002dfa:	487b      	ldr	r0, [pc, #492]	@ (8002fe8 <StartGSM+0x8c8>)
 8002dfc:	f8db 1058 	ldr.w	r1, [fp, #88]	@ 0x58
 8002e00:	f008 fdf0 	bl	800b9e4 <iprintf>
											if(is_keep_up == 0 && receivedData->address == 0x4F00){
 8002e04:	f8d9 0000 	ldr.w	r0, [r9]
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d058      	beq.n	8002ebe <StartGSM+0x79e>
											osMailFree(RMC_MailQGSMId, receivedData);
 8002e0c:	f8da 0000 	ldr.w	r0, [sl]
 8002e10:	4659      	mov	r1, fp
 8002e12:	f005 fab3 	bl	800837c <osMailFree>
 8002e16:	e7e0      	b.n	8002dda <StartGSM+0x6ba>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002e18:	4459      	add	r1, fp
 8002e1a:	4248      	negs	r0, r1
 8002e1c:	f001 0a7f 	and.w	sl, r1, #127	@ 0x7f
 8002e20:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8002e24:	bf58      	it	pl
 8002e26:	f1c1 0a00 	rsbpl	sl, r1, #0
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f855 102a 	ldr.w	r1, [r5, sl, lsl #2]
 8002e30:	4281      	cmp	r1, r0
 8002e32:	d209      	bcs.n	8002e48 <StartGSM+0x728>
												printf("CURRENT INDEX TO CHECK DELETING: %08lx", result_addr_queue.data[idx]);
 8002e34:	486d      	ldr	r0, [pc, #436]	@ (8002fec <StartGSM+0x8cc>)
 8002e36:	f008 fdd5 	bl	800b9e4 <iprintf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f000 f9a1 	bl	8003184 <deleteMiddle_GSM>
												i--;
 8002e42:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <StartGSM+0x8a8>)
 8002e44:	f10b 3bff 	add.w	fp, fp, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002e48:	f10b 0b01 	add.w	fp, fp, #1
 8002e4c:	e79a      	b.n	8002d84 <StartGSM+0x664>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002e4e:	eb0c 0301 	add.w	r3, ip, r1
 8002e52:	425a      	negs	r2, r3
 8002e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e5c:	bf58      	it	pl
 8002e5e:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++){
 8002e60:	f10c 0c01 	add.w	ip, ip, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8002e64:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8002e68:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8002e6c:	bf06      	itte	eq
 8002e6e:	ea4f 12ca 	moveq.w	r2, sl, lsl #7
 8002e72:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002e76:	eba2 020e 	subne.w	r2, r2, lr
 8002e7a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8002e7e:	bf08      	it	eq
 8002e80:	f10a 3aff 	addeq.w	sl, sl, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++){
 8002e84:	e78b      	b.n	8002d9e <StartGSM+0x67e>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002e86:	eb0a 030e 	add.w	r3, sl, lr
 8002e8a:	4259      	negs	r1, r3
 8002e8c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e94:	bf58      	it	pl
 8002e96:	424b      	negpl	r3, r1
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002e98:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8002e9c:	f5b1 4f9e 	cmp.w	r1, #20224	@ 0x4f00
 8002ea0:	d106      	bne.n	8002eb0 <StartGSM+0x790>
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002ea8:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002eac:	bf08      	it	eq
 8002eae:	3001      	addeq	r0, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002eb0:	f10a 0a01 	add.w	sl, sl, #1
 8002eb4:	e738      	b.n	8002d28 <StartGSM+0x608>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002eb6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e781      	b.n	8002dc2 <StartGSM+0x6a2>
											if(is_keep_up == 0 && receivedData->address == 0x4F00){
 8002ebe:	f8db 3058 	ldr.w	r3, [fp, #88]	@ 0x58
 8002ec2:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002ec6:	d1a1      	bne.n	8002e0c <StartGSM+0x6ec>
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002ec8:	4b49      	ldr	r3, [pc, #292]	@ (8002ff0 <StartGSM+0x8d0>)
 8002eca:	681a      	ldr	r2, [r3, #0]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002ecc:	f8d5 3204 	ldr.w	r3, [r5, #516]	@ 0x204
 8002ed0:	f103 0e80 	add.w	lr, r3, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002ed4:	4282      	cmp	r2, r0
 8002ed6:	dd99      	ble.n	8002e0c <StartGSM+0x6ec>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002ed8:	ebae 0300 	sub.w	r3, lr, r0
 8002edc:	4259      	negs	r1, r3
 8002ede:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee6:	bf58      	it	pl
 8002ee8:	424b      	negpl	r3, r1
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002eea:	3001      	adds	r0, #1
													result_addr_queue.data[idx] -= 128;
 8002eec:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8002ef0:	3980      	subs	r1, #128	@ 0x80
 8002ef2:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002ef6:	e7ed      	b.n	8002ed4 <StartGSM+0x7b4>
											printf("Have cleared out all mail queue\n");
 8002ef8:	483e      	ldr	r0, [pc, #248]	@ (8002ff4 <StartGSM+0x8d4>)
 8002efa:	f008 fde3 	bl	800bac4 <puts>
									is_using_flash = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
								is_pushing_data = 0;
 8002f02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff8 <StartGSM+0x8d8>)
 8002f04:	2500      	movs	r5, #0
 8002f06:	601d      	str	r5, [r3, #0]
								if(result_final == 2){
 8002f08:	f8d8 3000 	ldr.w	r3, [r8]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d14d      	bne.n	8002fac <StartGSM+0x88c>
									printf("---------------------SIM ERROR ----------------------\n");
 8002f10:	483a      	ldr	r0, [pc, #232]	@ (8002ffc <StartGSM+0x8dc>)
 8002f12:	f008 fdd7 	bl	800bac4 <puts>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	4838      	ldr	r0, [pc, #224]	@ (8003000 <StartGSM+0x8e0>)
 8002f1e:	f008 ff31 	bl	800bd84 <memset>
									SIM_UART_ReInitializeRxDMA();
 8002f22:	f7fe fa15 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
									printf("Rebooting SIM module\n");
 8002f26:	4837      	ldr	r0, [pc, #220]	@ (8003004 <StartGSM+0x8e4>)
 8002f28:	f008 fdcc 	bl	800bac4 <puts>
									reboot_SIM_module();
 8002f2c:	f7fe fa52 	bl	80013d4 <reboot_SIM_module>
				printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 8002f30:	4835      	ldr	r0, [pc, #212]	@ (8003008 <StartGSM+0x8e8>)
 8002f32:	f008 fdc7 	bl	800bac4 <puts>
				break;
 8002f36:	e478      	b.n	800282a <StartGSM+0x10a>
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002f38:	4829      	ldr	r0, [pc, #164]	@ (8002fe0 <StartGSM+0x8c0>)
										printf("Receiving MAIL\n");
 8002f3a:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8002fe4 <StartGSM+0x8c4>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002f3e:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8003018 <StartGSM+0x8f8>
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002f42:	f008 fdbf 	bl	800bac4 <puts>
									int count_mail_end_addr = 0;
 8002f46:	2500      	movs	r5, #0
										printf("Receiving MAIL\n");
 8002f48:	4650      	mov	r0, sl
 8002f4a:	f008 fdbb 	bl	800bac4 <puts>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8002f52:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f56:	a801      	add	r0, sp, #4
 8002f58:	f005 f9d7 	bl	800830a <osMailGet>
										if(evt.status == osEventMail){
 8002f5c:	9b01      	ldr	r3, [sp, #4]
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d10f      	bne.n	8002f82 <StartGSM+0x862>
											GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002f62:	9f02      	ldr	r7, [sp, #8]
											printf("Receiving MAIL for CLEARING: %08lx\n", receivedData->address);
 8002f64:	4829      	ldr	r0, [pc, #164]	@ (800300c <StartGSM+0x8ec>)
 8002f66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002f68:	f008 fd3c 	bl	800b9e4 <iprintf>
											if(receivedData->address == (FLASH_END_ADDRESS - 0X100)){
 8002f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
											osMailFree(RMC_MailQGSMId, receivedData);
 8002f6e:	f8d9 0000 	ldr.w	r0, [r9]
											if(receivedData->address == (FLASH_END_ADDRESS - 0X100)){
 8002f72:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											osMailFree(RMC_MailQGSMId, receivedData);
 8002f76:	4639      	mov	r1, r7
												count_mail_end_addr++;
 8002f78:	bf08      	it	eq
 8002f7a:	3501      	addeq	r5, #1
											osMailFree(RMC_MailQGSMId, receivedData);
 8002f7c:	f005 f9fe 	bl	800837c <osMailFree>
 8002f80:	e7e2      	b.n	8002f48 <StartGSM+0x828>
											printf("Have cleared out all mail queue\n");
 8002f82:	481c      	ldr	r0, [pc, #112]	@ (8002ff4 <StartGSM+0x8d4>)
 8002f84:	f008 fd9e 	bl	800bac4 <puts>
									if(count_mail_end_addr > 0){
 8002f88:	2d00      	cmp	r5, #0
 8002f8a:	d0ba      	beq.n	8002f02 <StartGSM+0x7e2>
										if(start_addr_disconnect == (FLASH_END_ADDRESS - 0x100)){
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc8 <StartGSM+0x8a8>)
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											start_addr_disconnect -= count_mail_end_addr * 128;
 8002f94:	bf0d      	iteet	eq
 8002f96:	6813      	ldreq	r3, [r2, #0]
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 8002f98:	6811      	ldrne	r1, [r2, #0]
 8002f9a:	f105 33ff 	addne.w	r3, r5, #4294967295
											start_addr_disconnect -= count_mail_end_addr * 128;
 8002f9e:	eba3 13c5 	subeq.w	r3, r3, r5, lsl #7
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 8002fa2:	bf18      	it	ne
 8002fa4:	eba1 13c3 	subne.w	r3, r1, r3, lsl #7
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e7aa      	b.n	8002f02 <StartGSM+0x7e2>
									printf("\n--------------------SENDING ERROR -----------------------\n");
 8002fac:	4818      	ldr	r0, [pc, #96]	@ (8003010 <StartGSM+0x8f0>)
 8002fae:	f008 fd89 	bl	800bac4 <puts>
									process++;
 8002fb2:	2508      	movs	r5, #8
									break;
 8002fb4:	e7bc      	b.n	8002f30 <StartGSM+0x810>
 8002fb6:	bf00      	nop
 8002fb8:	08011078 	.word	0x08011078
 8002fbc:	200018bc 	.word	0x200018bc
 8002fc0:	2000169c 	.word	0x2000169c
 8002fc4:	08011086 	.word	0x08011086
 8002fc8:	200016a0 	.word	0x200016a0
 8002fcc:	200016a4 	.word	0x200016a4
 8002fd0:	080110b8 	.word	0x080110b8
 8002fd4:	08011104 	.word	0x08011104
 8002fd8:	200018b4 	.word	0x200018b4
 8002fdc:	20001698 	.word	0x20001698
 8002fe0:	08010f0f 	.word	0x08010f0f
 8002fe4:	08010f4e 	.word	0x08010f4e
 8002fe8:	0801116f 	.word	0x0801116f
 8002fec:	08011148 	.word	0x08011148
 8002ff0:	200018c4 	.word	0x200018c4
 8002ff4:	08010f81 	.word	0x08010f81
 8002ff8:	200018b0 	.word	0x200018b0
 8002ffc:	080111b7 	.word	0x080111b7
 8003000:	200018e4 	.word	0x200018e4
 8003004:	080111ed 	.word	0x080111ed
 8003008:	0801123d 	.word	0x0801123d
 800300c:	08011193 	.word	0x08011193
 8003010:	08011202 	.word	0x08011202
 8003014:	200018b8 	.word	0x200018b8
 8003018:	20001c84 	.word	0x20001c84
				int result_close = close_connection(0);
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff f98d 	bl	800233c <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8003022:	f44f 7200 	mov.w	r2, #512	@ 0x200
				if(result_close){
 8003026:	4601      	mov	r1, r0
 8003028:	b148      	cbz	r0, 800303e <StartGSM+0x91e>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800302a:	2100      	movs	r1, #0
 800302c:	4620      	mov	r0, r4
 800302e:	f008 fea9 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 8003032:	f7fe f98d 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						printf("REOPEN CONNECTION TO SERVER\n");
 8003036:	4809      	ldr	r0, [pc, #36]	@ (800305c <StartGSM+0x93c>)
 8003038:	f008 fd44 	bl	800bac4 <puts>
						process = 4;
 800303c:	e41c      	b.n	8002878 <StartGSM+0x158>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800303e:	4620      	mov	r0, r4
 8003040:	f008 fea0 	bl	800bd84 <memset>
					SIM_UART_ReInitializeRxDMA();
 8003044:	f7fe f984 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					printf("\n ------------------------------ Rebooting SIM module -------------------------\n");
 8003048:	4805      	ldr	r0, [pc, #20]	@ (8003060 <StartGSM+0x940>)
 800304a:	f7ff bba8 	b.w	800279e <StartGSM+0x7e>
				else process++;
 800304e:	2502      	movs	r5, #2
 8003050:	f7ff bbeb 	b.w	800282a <StartGSM+0x10a>
						process++;
 8003054:	2505      	movs	r5, #5
 8003056:	f7ff bbe8 	b.w	800282a <StartGSM+0x10a>
 800305a:	bf00      	nop
 800305c:	0801127c 	.word	0x0801127c
 8003060:	08011298 	.word	0x08011298

08003064 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8003064:	2300      	movs	r3, #0
 8003066:	f04f 32ff 	mov.w	r2, #4294967295
 800306a:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 800306e:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8003072:	4770      	bx	lr

08003074 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 8003074:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8003078:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 800307a:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 800307c:	d104      	bne.n	8003088 <enqueue_GSM+0x14>
        printf("Queue_GSM is full\n");
 800307e:	480c      	ldr	r0, [pc, #48]	@ (80030b0 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8003080:	f85d 4b04 	ldr.w	r4, [sp], #4
        printf("Queue_GSM is full\n");
 8003084:	f008 bd1e 	b.w	800bac4 <puts>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8003088:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 800308c:	3301      	adds	r3, #1
 800308e:	425c      	negs	r4, r3
 8003090:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003098:	bf58      	it	pl
 800309a:	4263      	negpl	r3, r4
    q->size++;
 800309c:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 800309e:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 80030a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 80030a6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 80030aa:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 80030ae:	4770      	bx	lr
 80030b0:	080112e8 	.word	0x080112e8

080030b4 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 80030b4:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 80030b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 80030ba:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 80030bc:	2100      	movs	r1, #0
 80030be:	f008 fe61 	bl	800bd84 <memset>
	}
    q->front = 0;
    q->rear = -1;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 80030cc:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 80030d0:	bd10      	pop	{r4, pc}
	...

080030d4 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 80030d4:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 80030d6:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 80030da:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 80030dc:	b925      	cbnz	r5, 80030e8 <printQueue_GSM+0x14>
        printf("Queue_GSM is empty\n");
 80030de:	4813      	ldr	r0, [pc, #76]	@ (800312c <printQueue_GSM+0x58>)
 80030e0:	f008 fcf0 	bl	800bac4 <puts>
        int idx = (q->front + i) % MAX_SIZE;
        printf("Index %d: %08lx\n", i, q->data[idx]);
    }
    printf("\n");
    return q->size;
}
 80030e4:	4628      	mov	r0, r5
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
    printf("Queue_GSM contents: \n");
 80030e8:	4811      	ldr	r0, [pc, #68]	@ (8003130 <printQueue_GSM+0x5c>)
        printf("Index %d: %08lx\n", i, q->data[idx]);
 80030ea:	4e12      	ldr	r6, [pc, #72]	@ (8003134 <printQueue_GSM+0x60>)
    printf("Queue_GSM contents: \n");
 80030ec:	f008 fcea 	bl	800bac4 <puts>
    for (int i = 0; i < q->size; i++) {
 80030f0:	2500      	movs	r5, #0
 80030f2:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80030f6:	42ab      	cmp	r3, r5
 80030f8:	dc05      	bgt.n	8003106 <printQueue_GSM+0x32>
    printf("\n");
 80030fa:	200a      	movs	r0, #10
 80030fc:	f008 fc84 	bl	800ba08 <putchar>
    return q->size;
 8003100:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8003104:	e7ee      	b.n	80030e4 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8003106:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 800310a:	442b      	add	r3, r5
 800310c:	425a      	negs	r2, r3
 800310e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003116:	bf58      	it	pl
 8003118:	4253      	negpl	r3, r2
        printf("Index %d: %08lx\n", i, q->data[idx]);
 800311a:	4629      	mov	r1, r5
 800311c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003120:	4630      	mov	r0, r6
 8003122:	f008 fc5f 	bl	800b9e4 <iprintf>
    for (int i = 0; i < q->size; i++) {
 8003126:	3501      	adds	r5, #1
 8003128:	e7e3      	b.n	80030f2 <printQueue_GSM+0x1e>
 800312a:	bf00      	nop
 800312c:	080112fa 	.word	0x080112fa
 8003130:	0801130d 	.word	0x0801130d
 8003134:	08011322 	.word	0x08011322

08003138 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 8003138:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 800313a:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 800313e:	2200      	movs	r2, #0
 8003140:	4295      	cmp	r5, r2
 8003142:	dc05      	bgt.n	8003150 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8003144:	4601      	mov	r1, r0
 8003146:	480d      	ldr	r0, [pc, #52]	@ (800317c <checkAddrExistInQueue+0x44>)
 8003148:	f008 fc4c 	bl	800b9e4 <iprintf>
    return 0;
 800314c:	2000      	movs	r0, #0
 800314e:	e012      	b.n	8003176 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 8003150:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8003154:	4413      	add	r3, r2
 8003156:	425c      	negs	r4, r3
 8003158:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 800315c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003160:	bf58      	it	pl
 8003162:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8003164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003168:	4283      	cmp	r3, r0
 800316a:	d105      	bne.n	8003178 <checkAddrExistInQueue+0x40>
            printf("FOUND ADDRESS: %08lx\n", addr);
 800316c:	4601      	mov	r1, r0
 800316e:	4804      	ldr	r0, [pc, #16]	@ (8003180 <checkAddrExistInQueue+0x48>)
 8003170:	f008 fc38 	bl	800b9e4 <iprintf>
            return 1;
 8003174:	2001      	movs	r0, #1
}
 8003176:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8003178:	3201      	adds	r2, #1
 800317a:	e7e1      	b.n	8003140 <checkAddrExistInQueue+0x8>
 800317c:	08011333 	.word	0x08011333
 8003180:	08011337 	.word	0x08011337

08003184 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8003184:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8003186:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 800318a:	b91d      	cbnz	r5, 8003194 <deleteMiddle_GSM+0x10>
        printf("Queue_GSM is empty. Nothing to delete.\n");
 800318c:	481f      	ldr	r0, [pc, #124]	@ (800320c <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 800318e:	bcf0      	pop	{r4, r5, r6, r7}
        printf("Invalid index. Cannot delete.\n");
 8003190:	f008 bc98 	b.w	800bac4 <puts>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8003194:	2900      	cmp	r1, #0
 8003196:	db01      	blt.n	800319c <deleteMiddle_GSM+0x18>
 8003198:	428d      	cmp	r5, r1
 800319a:	dc01      	bgt.n	80031a0 <deleteMiddle_GSM+0x1c>
        printf("Invalid index. Cannot delete.\n");
 800319c:	481c      	ldr	r0, [pc, #112]	@ (8003210 <deleteMiddle_GSM+0x8c>)
 800319e:	e7f6      	b.n	800318e <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 80031a0:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 80031a4:	440b      	add	r3, r1
 80031a6:	425a      	negs	r2, r3
 80031a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 80031b0:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 80031b4:	bf58      	it	pl
 80031b6:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 80031b8:	3d01      	subs	r5, #1
 80031ba:	42b5      	cmp	r5, r6
 80031bc:	dc0f      	bgt.n	80031de <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 80031be:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80031c2:	337f      	adds	r3, #127	@ 0x7f
 80031c4:	425a      	negs	r2, r3
 80031c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ce:	bf58      	it	pl
 80031d0:	4253      	negpl	r3, r2
    q->size--;
 80031d2:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 80031d6:	bcf0      	pop	{r4, r5, r6, r7}
    printf("Element at index %d deleted successfully.\n", indexToDelete);
 80031d8:	480e      	ldr	r0, [pc, #56]	@ (8003214 <deleteMiddle_GSM+0x90>)
 80031da:	f008 bc03 	b.w	800b9e4 <iprintf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 80031de:	199a      	adds	r2, r3, r6
 80031e0:	4254      	negs	r4, r2
 80031e2:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80031e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031ea:	bf58      	it	pl
 80031ec:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 80031ee:	1c54      	adds	r4, r2, #1
 80031f0:	4267      	negs	r7, r4
 80031f2:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80031f6:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80031fa:	bf58      	it	pl
 80031fc:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 80031fe:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 8003200:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8003204:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8003208:	e7d7      	b.n	80031ba <deleteMiddle_GSM+0x36>
 800320a:	bf00      	nop
 800320c:	0801134d 	.word	0x0801134d
 8003210:	08011374 	.word	0x08011374
 8003214:	08011392 	.word	0x08011392

08003218 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8003218:	b410      	push	{r4}
 800321a:	4604      	mov	r4, r0
 800321c:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 800321e:	80a3      	strh	r3, [r4, #4]
{
 8003220:	4611      	mov	r1, r2
 8003222:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8003224:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8003226:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8003228:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 800322a:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 800322c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8003230:	f004 bef6 	b.w	8008020 <HAL_UART_Receive_DMA>

08003234 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	4606      	mov	r6, r0
 800323a:	460d      	mov	r5, r1
 800323c:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 800323e:	2100      	movs	r1, #0
 8003240:	2211      	movs	r2, #17
 8003242:	f10d 0007 	add.w	r0, sp, #7
 8003246:	f008 fd9d 	bl	800bd84 <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800324a:	4808      	ldr	r0, [pc, #32]	@ (800326c <set_time+0x38>)
	sTime.Hours = hr;
 800324c:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003250:	2200      	movs	r2, #0
 8003252:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8003254:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8003258:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800325c:	f003 fb7a 	bl	8006954 <HAL_RTC_SetTime>
 8003260:	b108      	cbz	r0, 8003266 <set_time+0x32>
	{
		Error_Handler();
 8003262:	f000 fba2 	bl	80039aa <Error_Handler>
	}
}
 8003266:	b006      	add	sp, #24
 8003268:	bd70      	pop	{r4, r5, r6, pc}
 800326a:	bf00      	nop
 800326c:	2000205c 	.word	0x2000205c

08003270 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8003270:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8003272:	2300      	movs	r3, #0
	sDate.Month = month;
 8003274:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8003278:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 800327c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003280:	461a      	mov	r2, r3
 8003282:	4806      	ldr	r0, [pc, #24]	@ (800329c <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003284:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003288:	a901      	add	r1, sp, #4
 800328a:	f003 fbbd 	bl	8006a08 <HAL_RTC_SetDate>
 800328e:	b108      	cbz	r0, 8003294 <set_date+0x24>
	{
		Error_Handler();
 8003290:	f000 fb8b 	bl	80039aa <Error_Handler>
	}
}
 8003294:	b003      	add	sp, #12
 8003296:	f85d fb04 	ldr.w	pc, [sp], #4
 800329a:	bf00      	nop
 800329c:	2000205c 	.word	0x2000205c

080032a0 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 80032a0:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80032a2:	4d19      	ldr	r5, [pc, #100]	@ (8003308 <get_RTC_time_date+0x68>)
{
 80032a4:	b087      	sub	sp, #28
 80032a6:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80032a8:	a901      	add	r1, sp, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	4628      	mov	r0, r5
 80032ae:	f003 fbfb 	bl	8006aa8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80032b2:	4669      	mov	r1, sp
 80032b4:	2200      	movs	r2, #0
 80032b6:	4628      	mov	r0, r5
 80032b8:	f003 fc19 	bl	8006aee <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	printf("%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80032bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80032c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032c4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80032c8:	4810      	ldr	r0, [pc, #64]	@ (800330c <get_RTC_time_date+0x6c>)
 80032ca:	f008 fb8b 	bl	800b9e4 <iprintf>

	/* Format date as "YYYY-MM-DD" */
	printf("20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 80032ce:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80032d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80032d6:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80032da:	480d      	ldr	r0, [pc, #52]	@ (8003310 <get_RTC_time_date+0x70>)
 80032dc:	f008 fb82 	bl	800b9e4 <iprintf>

	rmc->date.Yr = gDate.Year;
 80032e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80032e4:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 80032e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80032ea:	6163      	str	r3, [r4, #20]
	rmc->date.Day = gDate.Date;
 80032ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80032f0:	6123      	str	r3, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 80032f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032f6:	6023      	str	r3, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 80032f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032fc:	6063      	str	r3, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 80032fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003302:	60a3      	str	r3, [r4, #8]

	//save_rmc_to_location_info(location_info);
//	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
//	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
}
 8003304:	b007      	add	sp, #28
 8003306:	bd30      	pop	{r4, r5, pc}
 8003308:	2000205c 	.word	0x2000205c
 800330c:	08010749 	.word	0x08010749
 8003310:	080113bd 	.word	0x080113bd

08003314 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <vApplicationGetIdleTaskMemory+0x10>)
 8003316:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <vApplicationGetIdleTaskMemory+0x14>)
 800331a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800331c:	2340      	movs	r3, #64	@ 0x40
 800331e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20001be4 	.word	0x20001be4
 8003328:	20001ae4 	.word	0x20001ae4

0800332c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800332c:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 800332e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8003332:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 8003334:	2201      	movs	r2, #1
 8003336:	a901      	add	r1, sp, #4
 8003338:	4803      	ldr	r0, [pc, #12]	@ (8003348 <__io_putchar+0x1c>)
 800333a:	f004 fd4b 	bl	8007dd4 <HAL_UART_Transmit>
  return ch;
}
 800333e:	9801      	ldr	r0, [sp, #4]
 8003340:	b003      	add	sp, #12
 8003342:	f85d fb04 	ldr.w	pc, [sp], #4
 8003346:	bf00      	nop
 8003348:	20001ec0 	.word	0x20001ec0

0800334c <Initialize_RTC>:


void Initialize_RTC(void) {
    // Enable Power Clock
    __HAL_RCC_PWR_CLK_ENABLE();
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <Initialize_RTC+0x88>)
void Initialize_RTC(void) {
 800334e:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	69da      	ldr	r2, [r3, #28]

    // Allow access to the backup domain
    hrtc.Instance = RTC;
 8003352:	4c21      	ldr	r4, [pc, #132]	@ (80033d8 <Initialize_RTC+0x8c>)
 8003354:	4e21      	ldr	r6, [pc, #132]	@ (80033dc <Initialize_RTC+0x90>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800335a:	61da      	str	r2, [r3, #28]
 800335c:	69db      	ldr	r3, [r3, #28]
    hrtc.Instance = RTC;
 800335e:	6026      	str	r6, [r4, #0]
void Initialize_RTC(void) {
 8003360:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 800336a:	f002 fdd7 	bl	8005f1c <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 800336e:	2101      	movs	r1, #1
 8003370:	4620      	mov	r0, r4
 8003372:	f003 fbde 	bl	8006b32 <HAL_RTCEx_BKUPRead>
 8003376:	f243 25f2 	movw	r5, #13042	@ 0x32f2
 800337a:	42a8      	cmp	r0, r5
 800337c:	d01a      	beq.n	80033b4 <Initialize_RTC+0x68>
    	printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 800337e:	4818      	ldr	r0, [pc, #96]	@ (80033e0 <Initialize_RTC+0x94>)
 8003380:	f008 fba0 	bl	800bac4 <puts>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8003384:	2300      	movs	r3, #0
 8003386:	227f      	movs	r2, #127	@ 0x7f
 8003388:	e9c4 3201 	strd	r3, r2, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800338c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800338e:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003390:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003394:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hrtc.Instance = RTC;
 8003398:	6026      	str	r6, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800339a:	f003 fa88 	bl	80068ae <HAL_RTC_Init>
 800339e:	b108      	cbz	r0, 80033a4 <Initialize_RTC+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <Initialize_RTC+0x56>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 80033a4:	462a      	mov	r2, r5
 80033a6:	2101      	movs	r1, #1
 80033a8:	4620      	mov	r0, r4
}
 80033aa:	b008      	add	sp, #32
 80033ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 80033b0:	f003 bbba 	b.w	8006b28 <HAL_RTCEx_BKUPWrite>
    	printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 80033b4:	480b      	ldr	r0, [pc, #44]	@ (80033e4 <Initialize_RTC+0x98>)
 80033b6:	f008 fb85 	bl	800bac4 <puts>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80033ba:	a903      	add	r1, sp, #12
 80033bc:	2200      	movs	r2, #0
 80033be:	4620      	mov	r0, r4
 80033c0:	f003 fb72 	bl	8006aa8 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80033c4:	2200      	movs	r2, #0
 80033c6:	a902      	add	r1, sp, #8
 80033c8:	4620      	mov	r0, r4
 80033ca:	f003 fb90 	bl	8006aee <HAL_RTC_GetDate>
}
 80033ce:	b008      	add	sp, #32
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	2000205c 	.word	0x2000205c
 80033dc:	40002800 	.word	0x40002800
 80033e0:	080113cf 	.word	0x080113cf
 80033e4:	0801144b 	.word	0x0801144b

080033e8 <SystemClock_Config>:
{
 80033e8:	b500      	push	{lr}
 80033ea:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ec:	2228      	movs	r2, #40	@ 0x28
 80033ee:	2100      	movs	r1, #0
 80033f0:	a805      	add	r0, sp, #20
 80033f2:	f008 fcc7 	bl	800bd84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f6:	2214      	movs	r2, #20
 80033f8:	2100      	movs	r1, #0
 80033fa:	4668      	mov	r0, sp
 80033fc:	f008 fcc2 	bl	800bd84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003400:	223c      	movs	r2, #60	@ 0x3c
 8003402:	2100      	movs	r1, #0
 8003404:	eb0d 0002 	add.w	r0, sp, r2
 8003408:	f008 fcbc 	bl	800bd84 <memset>
  HAL_PWR_EnableBkUpAccess();
 800340c:	f002 fd86 	bl	8005f1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <SystemClock_Config+0xa0>)
 8003412:	6a13      	ldr	r3, [r2, #32]
 8003414:	f023 0318 	bic.w	r3, r3, #24
 8003418:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800341a:	2306      	movs	r3, #6
 800341c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800341e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003420:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003424:	2310      	movs	r3, #16
 8003426:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003428:	2002      	movs	r0, #2
 800342a:	2300      	movs	r3, #0
 800342c:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003430:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003434:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003436:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003438:	f002 fd78 	bl	8005f2c <HAL_RCC_OscConfig>
 800343c:	4601      	mov	r1, r0
 800343e:	b108      	cbz	r0, 8003444 <SystemClock_Config+0x5c>
 8003440:	b672      	cpsid	i
  while (1)
 8003442:	e7fe      	b.n	8003442 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003444:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003446:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800344a:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800344e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003450:	4668      	mov	r0, sp
 8003452:	f002 ffeb 	bl	800642c <HAL_RCC_ClockConfig>
 8003456:	b108      	cbz	r0, 800345c <SystemClock_Config+0x74>
 8003458:	b672      	cpsid	i
  while (1)
 800345a:	e7fe      	b.n	800345a <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <SystemClock_Config+0xa4>)
 800345e:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003460:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003464:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003468:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800346a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800346e:	9016      	str	r0, [sp, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003470:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003472:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003476:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003478:	f003 f8ce 	bl	8006618 <HAL_RCCEx_PeriphCLKConfig>
 800347c:	b108      	cbz	r0, 8003482 <SystemClock_Config+0x9a>
 800347e:	b672      	cpsid	i
  while (1)
 8003480:	e7fe      	b.n	8003480 <SystemClock_Config+0x98>
}
 8003482:	b01f      	add	sp, #124	@ 0x7c
 8003484:	f85d fb04 	ldr.w	pc, [sp], #4
 8003488:	40021000 	.word	0x40021000
 800348c:	000101a7 	.word	0x000101a7

08003490 <main>:
{
 8003490:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003492:	4dbd      	ldr	r5, [pc, #756]	@ (8003788 <main+0x2f8>)
{
 8003494:	b0a8      	sub	sp, #160	@ 0xa0
  HAL_Init();
 8003496:	f001 fd3d 	bl	8004f14 <HAL_Init>
  SystemClock_Config();
 800349a:	f7ff ffa5 	bl	80033e8 <SystemClock_Config>
  	Initialize_RTC();
 800349e:	f7ff ff55 	bl	800334c <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a2:	2214      	movs	r2, #20
 80034a4:	2100      	movs	r1, #0
 80034a6:	a821      	add	r0, sp, #132	@ 0x84
 80034a8:	f008 fc6c 	bl	800bd84 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ac:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80034ae:	48b7      	ldr	r0, [pc, #732]	@ (800378c <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034b4:	616b      	str	r3, [r5, #20]
 80034b6:	696b      	ldr	r3, [r5, #20]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034bc:	9305      	str	r3, [sp, #20]
 80034be:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	696b      	ldr	r3, [r5, #20]
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c6:	616b      	str	r3, [r5, #20]
 80034c8:	696b      	ldr	r3, [r5, #20]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	9306      	str	r3, [sp, #24]
 80034d0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	696b      	ldr	r3, [r5, #20]
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034d8:	616b      	str	r3, [r5, #20]
 80034da:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80034dc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80034e2:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e4:	9307      	str	r3, [sp, #28]
 80034e6:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80034e8:	f002 fc72 	bl	8005dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 80034ec:	48a7      	ldr	r0, [pc, #668]	@ (800378c <main+0x2fc>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	f240 3156 	movw	r1, #854	@ 0x356
 80034f4:	f002 fc6c 	bl	8005dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80034f8:	48a5      	ldr	r0, [pc, #660]	@ (8003790 <main+0x300>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	2104      	movs	r1, #4
 80034fe:	f002 fc67 	bl	8005dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003502:	48a3      	ldr	r0, [pc, #652]	@ (8003790 <main+0x300>)
 8003504:	2201      	movs	r2, #1
 8003506:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800350a:	f002 fc61 	bl	8005dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800350e:	2201      	movs	r2, #1
 8003510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800351a:	f002 fc59 	bl	8005dd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351e:	2601      	movs	r6, #1
 8003520:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003524:	4899      	ldr	r0, [pc, #612]	@ (800378c <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003526:	9623      	str	r6, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003528:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	9424      	str	r4, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003530:	f002 fb8a 	bl	8005c48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8003534:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	4894      	ldr	r0, [pc, #592]	@ (800378c <main+0x2fc>)
 800353a:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353c:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003540:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003544:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003548:	f002 fb7e 	bl	8005c48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	4890      	ldr	r0, [pc, #576]	@ (8003790 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	9423      	str	r4, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003552:	e9cd 8421 	strd	r8, r4, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003556:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003558:	f002 fb76 	bl	8005c48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	488c      	ldr	r0, [pc, #560]	@ (8003790 <main+0x300>)
 800355e:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003560:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003564:	e9cd 7621 	strd	r7, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800356c:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003570:	f002 fb6a 	bl	8005c48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	4886      	ldr	r0, [pc, #536]	@ (8003790 <main+0x300>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003576:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357a:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357c:	e9cd 9621 	strd	r9, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003580:	9623      	str	r6, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003582:	f002 fb61 	bl	8005c48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	a921      	add	r1, sp, #132	@ 0x84
 800358c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003594:	e9cd 6a23 	strd	r6, sl, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	f002 fb56 	bl	8005c48 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800359c:	696b      	ldr	r3, [r5, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800359e:	f8df a218 	ldr.w	sl, [pc, #536]	@ 80037b8 <main+0x328>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035a2:	4333      	orrs	r3, r6
 80035a4:	616b      	str	r3, [r5, #20]
 80035a6:	696b      	ldr	r3, [r5, #20]
 80035a8:	4033      	ands	r3, r6
 80035aa:	9303      	str	r3, [sp, #12]
 80035ac:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035ae:	696b      	ldr	r3, [r5, #20]
 80035b0:	ea43 0308 	orr.w	r3, r3, r8
 80035b4:	616b      	str	r3, [r5, #20]
 80035b6:	696b      	ldr	r3, [r5, #20]
 80035b8:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80035bc:	4622      	mov	r2, r4
 80035be:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035c0:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80035c2:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035c4:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80035c6:	f002 fa1b 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035ca:	200d      	movs	r0, #13
 80035cc:	f002 fa4a 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80035d0:	4622      	mov	r2, r4
 80035d2:	2105      	movs	r1, #5
 80035d4:	200e      	movs	r0, #14
 80035d6:	f002 fa13 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80035da:	200e      	movs	r0, #14
 80035dc:	f002 fa42 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80035e0:	4622      	mov	r2, r4
 80035e2:	2105      	movs	r1, #5
 80035e4:	200f      	movs	r0, #15
 80035e6:	f002 fa0b 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80035ea:	200f      	movs	r0, #15
 80035ec:	f002 fa3a 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80035f0:	4622      	mov	r2, r4
 80035f2:	2105      	movs	r1, #5
 80035f4:	2010      	movs	r0, #16
 80035f6:	f002 fa03 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80035fa:	2010      	movs	r0, #16
 80035fc:	f002 fa32 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003600:	4622      	mov	r2, r4
 8003602:	2105      	movs	r1, #5
 8003604:	2038      	movs	r0, #56	@ 0x38
 8003606:	f002 f9fb 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800360a:	2038      	movs	r0, #56	@ 0x38
 800360c:	f002 fa2a 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003610:	4622      	mov	r2, r4
 8003612:	2105      	movs	r1, #5
 8003614:	203c      	movs	r0, #60	@ 0x3c
 8003616:	f002 f9f3 	bl	8005a00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800361a:	203c      	movs	r0, #60	@ 0x3c
 800361c:	f002 fa22 	bl	8005a64 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8003620:	485c      	ldr	r0, [pc, #368]	@ (8003794 <main+0x304>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003622:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003626:	e9c0 a300 	strd	sl, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800362a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800362e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003632:	2510      	movs	r5, #16
 8003634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003638:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800363c:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800363e:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003642:	2308      	movs	r3, #8
 8003644:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003646:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800364a:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800364c:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364e:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003650:	f003 fb83 	bl	8006d5a <HAL_SPI_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	b108      	cbz	r0, 800365c <main+0x1cc>
 8003658:	b672      	cpsid	i
  while (1)
 800365a:	e7fe      	b.n	800365a <main+0x1ca>
  huart1.Instance = USART1;
 800365c:	484e      	ldr	r0, [pc, #312]	@ (8003798 <main+0x308>)
  huart1.Init.BaudRate = 115200;
 800365e:	4a4f      	ldr	r2, [pc, #316]	@ (800379c <main+0x30c>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8003660:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003662:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003666:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800366a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366e:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003672:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003676:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003678:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800367c:	f004 fc54 	bl	8007f28 <HAL_UART_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	b108      	cbz	r0, 8003688 <main+0x1f8>
 8003684:	b672      	cpsid	i
  while (1)
 8003686:	e7fe      	b.n	8003686 <main+0x1f6>
  huart2.Instance = USART2;
 8003688:	4845      	ldr	r0, [pc, #276]	@ (80037a0 <main+0x310>)
  huart2.Init.BaudRate = 9600;
 800368a:	f8df e130 	ldr.w	lr, [pc, #304]	@ 80037bc <main+0x32c>
 800368e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003692:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003696:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800369a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800369e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 80036a2:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036a6:	f004 fc3f 	bl	8007f28 <HAL_UART_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	b108      	cbz	r0, 80036b2 <main+0x222>
 80036ae:	b672      	cpsid	i
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <main+0x220>
  huart3.Instance = USART3;
 80036b2:	483c      	ldr	r0, [pc, #240]	@ (80037a4 <main+0x314>)
 80036b4:	4a3c      	ldr	r2, [pc, #240]	@ (80037a8 <main+0x318>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80036ba:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036be:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036c6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036ca:	f004 fc2d 	bl	8007f28 <HAL_UART_Init>
 80036ce:	4604      	mov	r4, r0
 80036d0:	b108      	cbz	r0, 80036d6 <main+0x246>
 80036d2:	b672      	cpsid	i
  while (1)
 80036d4:	e7fe      	b.n	80036d4 <main+0x244>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036d6:	462a      	mov	r2, r5
 80036d8:	4601      	mov	r1, r0
 80036da:	a821      	add	r0, sp, #132	@ 0x84
 80036dc:	f008 fb52 	bl	800bd84 <memset>
  htim3.Instance = TIM3;
 80036e0:	4d32      	ldr	r5, [pc, #200]	@ (80037ac <main+0x31c>)
  htim3.Init.Prescaler = 8000;
 80036e2:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80037c0 <main+0x330>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e6:	941c      	str	r4, [sp, #112]	@ 0x70
  htim3.Init.Prescaler = 8000;
 80036e8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80036ec:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036f0:	4628      	mov	r0, r5
  htim3.Init.Period = 65535;
 80036f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f6:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fa:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036fe:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003700:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003702:	f003 ffb9 	bl	8007678 <HAL_TIM_Base_Init>
 8003706:	b108      	cbz	r0, 800370c <main+0x27c>
 8003708:	b672      	cpsid	i
  while (1)
 800370a:	e7fe      	b.n	800370a <main+0x27a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800370c:	a921      	add	r1, sp, #132	@ 0x84
 800370e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003710:	f8cd 9084 	str.w	r9, [sp, #132]	@ 0x84
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003714:	f003 ffea 	bl	80076ec <HAL_TIM_ConfigClockSource>
 8003718:	b108      	cbz	r0, 800371e <main+0x28e>
 800371a:	b672      	cpsid	i
  while (1)
 800371c:	e7fe      	b.n	800371c <main+0x28c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371e:	901a      	str	r0, [sp, #104]	@ 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003720:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003722:	a91a      	add	r1, sp, #104	@ 0x68
 8003724:	4628      	mov	r0, r5
 8003726:	f004 f87b 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 800372a:	4605      	mov	r5, r0
 800372c:	b108      	cbz	r0, 8003732 <main+0x2a2>
 800372e:	b672      	cpsid	i
  while (1)
 8003730:	e7fe      	b.n	8003730 <main+0x2a0>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003732:	4c1f      	ldr	r4, [pc, #124]	@ (80037b0 <main+0x320>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003734:	4601      	mov	r1, r0
 8003736:	2218      	movs	r2, #24
 8003738:	a821      	add	r0, sp, #132	@ 0x84
 800373a:	f008 fb23 	bl	800bd84 <memset>
  hadc2.Instance = ADC2;
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <main+0x324>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003740:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003744:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003746:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800374a:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800374e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003752:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 8003756:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003758:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800375c:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800375e:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003760:	f001 fc32 	bl	8004fc8 <HAL_ADC_Init>
 8003764:	b108      	cbz	r0, 800376a <main+0x2da>
 8003766:	b672      	cpsid	i
  while (1)
 8003768:	e7fe      	b.n	8003768 <main+0x2d8>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800376a:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  sConfig.Offset = 0;
 800376e:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003772:	a921      	add	r1, sp, #132	@ 0x84
 8003774:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003776:	e9cd 8621 	strd	r8, r6, [sp, #132]	@ 0x84
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800377a:	f001 ff27 	bl	80055cc <HAL_ADC_ConfigChannel>
 800377e:	4604      	mov	r4, r0
 8003780:	b300      	cbz	r0, 80037c4 <main+0x334>
 8003782:	b672      	cpsid	i
  while (1)
 8003784:	e7fe      	b.n	8003784 <main+0x2f4>
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	48000800 	.word	0x48000800
 8003790:	48000400 	.word	0x48000400
 8003794:	20001ff8 	.word	0x20001ff8
 8003798:	20001ec0 	.word	0x20001ec0
 800379c:	40013800 	.word	0x40013800
 80037a0:	20001e38 	.word	0x20001e38
 80037a4:	20001db0 	.word	0x20001db0
 80037a8:	40004800 	.word	0x40004800
 80037ac:	20001f48 	.word	0x20001f48
 80037b0:	200021a8 	.word	0x200021a8
 80037b4:	50000100 	.word	0x50000100
 80037b8:	40013000 	.word	0x40013000
 80037bc:	40004400 	.word	0x40004400
 80037c0:	40000400 	.word	0x40000400
  ADC_MultiModeTypeDef multimode = {0};
 80037c4:	e9cd 001a 	strd	r0, r0, [sp, #104]	@ 0x68
 80037c8:	901c      	str	r0, [sp, #112]	@ 0x70
  ADC_ChannelConfTypeDef sConfig = {0};
 80037ca:	4601      	mov	r1, r0
 80037cc:	2218      	movs	r2, #24
 80037ce:	a821      	add	r0, sp, #132	@ 0x84
 80037d0:	f008 fad8 	bl	800bd84 <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80037d4:	4862      	ldr	r0, [pc, #392]	@ (8003960 <main+0x4d0>)
  hadc3.Instance = ADC3;
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <main+0x4d4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80037d8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037dc:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037e0:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037e8:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 80037ec:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80037ee:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80037f2:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80037f4:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80037f6:	f001 fbe7 	bl	8004fc8 <HAL_ADC_Init>
 80037fa:	b108      	cbz	r0, 8003800 <main+0x370>
 80037fc:	b672      	cpsid	i
  while (1)
 80037fe:	e7fe      	b.n	80037fe <main+0x36e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003800:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003802:	4857      	ldr	r0, [pc, #348]	@ (8003960 <main+0x4d0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003804:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003806:	a91a      	add	r1, sp, #104	@ 0x68
 8003808:	f002 f864 	bl	80058d4 <HAL_ADCEx_MultiModeConfigChannel>
 800380c:	b108      	cbz	r0, 8003812 <main+0x382>
 800380e:	b672      	cpsid	i
  while (1)
 8003810:	e7fe      	b.n	8003810 <main+0x380>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003812:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003814:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  sConfig.Offset = 0;
 8003818:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800381c:	2601      	movs	r6, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800381e:	4850      	ldr	r0, [pc, #320]	@ (8003960 <main+0x4d0>)
 8003820:	a921      	add	r1, sp, #132	@ 0x84
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003822:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003826:	f001 fed1 	bl	80055cc <HAL_ADC_ConfigChannel>
 800382a:	4603      	mov	r3, r0
 800382c:	b108      	cbz	r0, 8003832 <main+0x3a2>
 800382e:	b672      	cpsid	i
  while (1)
 8003830:	e7fe      	b.n	8003830 <main+0x3a0>
  hspi2.Instance = SPI2;
 8003832:	484d      	ldr	r0, [pc, #308]	@ (8003968 <main+0x4d8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003834:	4f4d      	ldr	r7, [pc, #308]	@ (800396c <main+0x4dc>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003836:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800383c:	e9c0 7200 	strd	r7, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003840:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003844:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003848:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800384c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003850:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003852:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003856:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800385a:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385c:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800385e:	2308      	movs	r3, #8
 8003860:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003862:	f003 fa7a 	bl	8006d5a <HAL_SPI_Init>
 8003866:	b108      	cbz	r0, 800386c <main+0x3dc>
 8003868:	b672      	cpsid	i
  while (1)
 800386a:	e7fe      	b.n	800386a <main+0x3da>
  hi2c1.Instance = I2C1;
 800386c:	4c40      	ldr	r4, [pc, #256]	@ (8003970 <main+0x4e0>)
  hi2c1.Init.Timing = 0x00201D2B;
 800386e:	4b41      	ldr	r3, [pc, #260]	@ (8003974 <main+0x4e4>)
 8003870:	4d41      	ldr	r5, [pc, #260]	@ (8003978 <main+0x4e8>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003872:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003874:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8003878:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800387c:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003880:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00201D2B;
 8003882:	e9c4 5300 	strd	r5, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003886:	f002 faa8 	bl	8005dda <HAL_I2C_Init>
 800388a:	4601      	mov	r1, r0
 800388c:	b108      	cbz	r0, 8003892 <main+0x402>
 800388e:	b672      	cpsid	i
  while (1)
 8003890:	e7fe      	b.n	8003890 <main+0x400>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003892:	4620      	mov	r0, r4
 8003894:	f002 faf6 	bl	8005e84 <HAL_I2CEx_ConfigAnalogFilter>
 8003898:	4601      	mov	r1, r0
 800389a:	b108      	cbz	r0, 80038a0 <main+0x410>
 800389c:	b672      	cpsid	i
  while (1)
 800389e:	e7fe      	b.n	800389e <main+0x40e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038a0:	4620      	mov	r0, r4
 80038a2:	f002 fb15 	bl	8005ed0 <HAL_I2CEx_ConfigDigitalFilter>
 80038a6:	4605      	mov	r5, r0
 80038a8:	b108      	cbz	r0, 80038ae <main+0x41e>
 80038aa:	b672      	cpsid	i
  while (1)
 80038ac:	e7fe      	b.n	80038ac <main+0x41c>
  osMutexDef(myMutex);
 80038ae:	e9cd 0008 	strd	r0, r0, [sp, #32]
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 80038b2:	a808      	add	r0, sp, #32
 80038b4:	f004 fc06 	bl	80080c4 <osMutexCreate>
 80038b8:	4b30      	ldr	r3, [pc, #192]	@ (800397c <main+0x4ec>)
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 80038ba:	f8cd d030 	str.w	sp, [sp, #48]	@ 0x30
 80038be:	2220      	movs	r2, #32
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 80038c0:	6018      	str	r0, [r3, #0]
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 80038c2:	4629      	mov	r1, r5
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 80038c4:	2360      	movs	r3, #96	@ 0x60
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 80038c6:	a80a      	add	r0, sp, #40	@ 0x28
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 80038c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 80038cc:	f004 fcc2 	bl	8008254 <osMailCreate>
 80038d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003980 <main+0x4f0>)
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 80038d2:	4c2c      	ldr	r4, [pc, #176]	@ (8003984 <main+0x4f4>)
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 80038d4:	6018      	str	r0, [r3, #0]
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 80038d6:	2105      	movs	r1, #5
 80038d8:	2358      	movs	r3, #88	@ 0x58
 80038da:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80038de:	a80d      	add	r0, sp, #52	@ 0x34
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 80038e0:	ab01      	add	r3, sp, #4
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80038e2:	4629      	mov	r1, r5
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 80038e4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80038e6:	f004 fcb5 	bl	8008254 <osMailCreate>
 80038ea:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <main+0x4f8>)
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 80038ec:	9610      	str	r6, [sp, #64]	@ 0x40
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80038ee:	6018      	str	r0, [r3, #0]
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	9311      	str	r3, [sp, #68]	@ 0x44
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 80038f4:	4629      	mov	r1, r5
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 80038f6:	ab02      	add	r3, sp, #8
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 80038f8:	a810      	add	r0, sp, #64	@ 0x40
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 80038fa:	9312      	str	r3, [sp, #72]	@ 0x48
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 80038fc:	f004 fcaa 	bl	8008254 <osMailCreate>
 8003900:	4b22      	ldr	r3, [pc, #136]	@ (800398c <main+0x4fc>)
 8003902:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 8003904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003906:	ae13      	add	r6, sp, #76	@ 0x4c
 8003908:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800390a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800390e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8003912:	4629      	mov	r1, r5
 8003914:	a813      	add	r0, sp, #76	@ 0x4c
 8003916:	f004 fba5 	bl	8008064 <osThreadCreate>
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <main+0x500>)
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 800391c:	f104 070c 	add.w	r7, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8003920:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 8003922:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003924:	ae1a      	add	r6, sp, #104	@ 0x68
 8003926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003928:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800392c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8003930:	4629      	mov	r1, r5
 8003932:	a81a      	add	r0, sp, #104	@ 0x68
 8003934:	f004 fb96 	bl	8008064 <osThreadCreate>
 8003938:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <main+0x504>)
  osThreadDef(GSM, StartGSM, osPriorityLow, 0, 896);
 800393a:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800393c:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityLow, 0, 896);
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	ae21      	add	r6, sp, #132	@ 0x84
 8003942:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003944:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003948:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800394c:	4629      	mov	r1, r5
 800394e:	a821      	add	r0, sp, #132	@ 0x84
 8003950:	f004 fb88 	bl	8008064 <osThreadCreate>
 8003954:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <main+0x508>)
 8003956:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003958:	f004 fb7f 	bl	800805a <osKernelStart>
  while (1)
 800395c:	e7fe      	b.n	800395c <main+0x4cc>
 800395e:	bf00      	nop
 8003960:	20002158 	.word	0x20002158
 8003964:	50000400 	.word	0x50000400
 8003968:	20001f94 	.word	0x20001f94
 800396c:	40003800 	.word	0x40003800
 8003970:	2000207c 	.word	0x2000207c
 8003974:	00201d2b 	.word	0x00201d2b
 8003978:	40005400 	.word	0x40005400
 800397c:	20001c90 	.word	0x20001c90
 8003980:	20001c84 	.word	0x20001c84
 8003984:	0800fd50 	.word	0x0800fd50
 8003988:	20001c88 	.word	0x20001c88
 800398c:	20001c8c 	.word	0x20001c8c
 8003990:	20001c9c 	.word	0x20001c9c
 8003994:	20001c98 	.word	0x20001c98
 8003998:	20001c94 	.word	0x20001c94

0800399c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a2:	d101      	bne.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80039a4:	f001 bac8 	b.w	8004f38 <HAL_IncTick>
}
 80039a8:	4770      	bx	lr

080039aa <Error_Handler>:
 80039aa:	b672      	cpsid	i
  while (1)
 80039ac:	e7fe      	b.n	80039ac <Error_Handler+0x2>
	...

080039b0 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 80039b0:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80039b2:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80039be:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80039c2:	f002 fa05 	bl	8005dd0 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 80039c6:	4810      	ldr	r0, [pc, #64]	@ (8003a08 <W25_ReadStatusReg1+0x58>)
 80039c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039cc:	2201      	movs	r2, #1
 80039ce:	f10d 0106 	add.w	r1, sp, #6
 80039d2:	f003 fa30 	bl	8006e36 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 80039d6:	4604      	mov	r4, r0
 80039d8:	b940      	cbnz	r0, 80039ec <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 80039da:	480b      	ldr	r0, [pc, #44]	@ (8003a08 <W25_ReadStatusReg1+0x58>)
 80039dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039e0:	2201      	movs	r2, #1
 80039e2:	f10d 0107 	add.w	r1, sp, #7
 80039e6:	f003 fc20 	bl	800722a <HAL_SPI_Receive>
 80039ea:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80039ec:	2201      	movs	r2, #1
 80039ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f6:	f002 f9eb 	bl	8005dd0 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80039fa:	b91c      	cbnz	r4, 8003a04 <W25_ReadStatusReg1+0x54>
 80039fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003a00:	b002      	add	sp, #8
 8003a02:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003a04:	20ff      	movs	r0, #255	@ 0xff
 8003a06:	e7fb      	b.n	8003a00 <W25_ReadStatusReg1+0x50>
 8003a08:	20001ff8 	.word	0x20001ff8

08003a0c <W25_Busy>:

int W25_Busy(void)
{
 8003a0c:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003a0e:	f7ff ffcf 	bl	80039b0 <W25_ReadStatusReg1>
}
 8003a12:	f000 0001 	and.w	r0, r0, #1
 8003a16:	bd08      	pop	{r3, pc}

08003a18 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003a1c:	f001 fa98 	bl	8004f50 <HAL_GetTick>
 8003a20:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8003a22:	f7ff fff3 	bl	8003a0c <W25_Busy>
 8003a26:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003a28:	f001 fa92 	bl	8004f50 <HAL_GetTick>
 8003a2c:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003a2e:	b114      	cbz	r4, 8003a36 <W25_DelayWhileBusy+0x1e>
 8003a30:	42ab      	cmp	r3, r5
 8003a32:	d3f6      	bcc.n	8003a22 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003a34:	2403      	movs	r4, #3
	return retval;
}
 8003a36:	4620      	mov	r0, r4
 8003a38:	bd70      	pop	{r4, r5, r6, pc}

08003a3a <W25_Reset>:
void W25_Reset(){
 8003a3a:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a46:	f002 f9c3 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a54:	f002 f9bc 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a62:	f002 f9b5 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003a66:	2201      	movs	r2, #1
 8003a68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a70:	f002 f9ae 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a7e:	f002 f9a7 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8003a86:	2201      	movs	r2, #1
 8003a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a90:	f002 b99e 	b.w	8005dd0 <HAL_GPIO_WritePin>

08003a94 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003a98:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003aa4:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003aa8:	f002 f992 	bl	8005dd0 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003aac:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	aa03      	add	r2, sp, #12
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	f10d 010b 	add.w	r1, sp, #11
 8003aba:	4820      	ldr	r0, [pc, #128]	@ (8003b3c <W25_ReadJedecID+0xa8>)
 8003abc:	f003 fa85 	bl	8006fca <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003ac0:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003ac2:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003ac4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ac8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003acc:	f002 f980 	bl	8005dd0 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <W25_ReadJedecID+0xac>)
 8003ad2:	aa07      	add	r2, sp, #28
 8003ad4:	f103 0710 	add.w	r7, r3, #16
 8003ad8:	4616      	mov	r6, r2
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	4614      	mov	r4, r2
 8003ae0:	c403      	stmia	r4!, {r0, r1}
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	42bb      	cmp	r3, r7
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	d1f7      	bne.n	8003ada <W25_ReadJedecID+0x46>
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003aee:	4630      	mov	r0, r6
 8003af0:	f7fc fbce 	bl	8000290 <strlen>
 8003af4:	4631      	mov	r1, r6
 8003af6:	b282      	uxth	r2, r0
 8003af8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003afc:	4811      	ldr	r0, [pc, #68]	@ (8003b44 <W25_ReadJedecID+0xb0>)
 8003afe:	f004 f969 	bl	8007dd4 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8003b02:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003b06:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <W25_ReadJedecID+0xb4>)
 8003b0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003b12:	a804      	add	r0, sp, #16
 8003b14:	f008 f812 	bl	800bb3c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b1e:	220b      	movs	r2, #11
 8003b20:	4808      	ldr	r0, [pc, #32]	@ (8003b44 <W25_ReadJedecID+0xb0>)
 8003b22:	f004 f957 	bl	8007dd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8003b26:	4909      	ldr	r1, [pc, #36]	@ (8003b4c <W25_ReadJedecID+0xb8>)
 8003b28:	4806      	ldr	r0, [pc, #24]	@ (8003b44 <W25_ReadJedecID+0xb0>)
 8003b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f004 f950 	bl	8007dd4 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003b34:	4628      	mov	r0, r5
 8003b36:	b00d      	add	sp, #52	@ 0x34
 8003b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20001ff8 	.word	0x20001ff8
 8003b40:	080114eb 	.word	0x080114eb
 8003b44:	20001ec0 	.word	0x20001ec0
 8003b48:	080114da 	.word	0x080114da
 8003b4c:	08010f0d 	.word	0x08010f0d

08003b50 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003b50:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003b52:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003b5e:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003b62:	f002 f935 	bl	8005dd0 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6a:	f10d 0107 	add.w	r1, sp, #7
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4806      	ldr	r0, [pc, #24]	@ (8003b8c <W25_WriteEnable+0x3c>)
 8003b72:	f003 f960 	bl	8006e36 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003b76:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003b78:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003b7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b82:	f002 f925 	bl	8005dd0 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8003b86:	4620      	mov	r0, r4
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	20001ff8 	.word	0x20001ff8

08003b90 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003b90:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003b92:	2320      	movs	r3, #32
 8003b94:	f88d 3004 	strb.w	r3, [sp, #4]
 8003b98:	0c03      	lsrs	r3, r0, #16
 8003b9a:	ba40      	rev16	r0, r0
 8003b9c:	f88d 3005 	strb.w	r3, [sp, #5]
 8003ba0:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003ba4:	f7ff ffd4 	bl	8003b50 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bb2:	f002 f90d 	bl	8005dd0 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bbc:	eb0d 0102 	add.w	r1, sp, r2
 8003bc0:	4808      	ldr	r0, [pc, #32]	@ (8003be4 <W25_SectorErase+0x54>)
 8003bc2:	f003 f938 	bl	8006e36 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003bc6:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003bc8:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003bca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bd2:	f002 f8fd 	bl	8005dd0 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8003bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bda:	f7ff ff1d 	bl	8003a18 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003bde:	4620      	mov	r0, r4
 8003be0:	b002      	add	sp, #8
 8003be2:	bd10      	pop	{r4, pc}
 8003be4:	20001ff8 	.word	0x20001ff8

08003be8 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003be8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	4606      	mov	r6, r0
 8003bee:	4688      	mov	r8, r1
 8003bf0:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8003bf2:	f7ff ffad 	bl	8003b50 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003bf6:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8003c78 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003bfa:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003bfc:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003c00:	b91f      	cbnz	r7, 8003c0a <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8003c02:	4620      	mov	r0, r4
 8003c04:	b002      	add	sp, #8
 8003c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003c0a:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c0c:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003c0e:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003c12:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c14:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c18:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c1c:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c26:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003c2a:	bf28      	it	cs
 8003c2c:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c2e:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c32:	f002 f8cd 	bl	8005dd0 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003c36:	2204      	movs	r2, #4
 8003c38:	480f      	ldr	r0, [pc, #60]	@ (8003c78 <W25_PageProgram+0x90>)
 8003c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c3e:	eb0d 0102 	add.w	r1, sp, r2
 8003c42:	f003 f8f8 	bl	8006e36 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8003c46:	4604      	mov	r4, r0
 8003c48:	b938      	cbnz	r0, 8003c5a <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8003c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c4e:	b2aa      	uxth	r2, r5
 8003c50:	4641      	mov	r1, r8
 8003c52:	4650      	mov	r0, sl
 8003c54:	f003 f8ef 	bl	8006e36 <HAL_SPI_Transmit>
 8003c58:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c64:	f002 f8b4 	bl	8005dd0 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003c6c:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003c6e:	442e      	add	r6, r5
		buf += count_this_pass;
 8003c70:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003c72:	f7ff fed1 	bl	8003a18 <W25_DelayWhileBusy>
 8003c76:	e7c3      	b.n	8003c00 <W25_PageProgram+0x18>
 8003c78:	20001ff8 	.word	0x20001ff8

08003c7c <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8003c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f88d 3004 	strb.w	r3, [sp, #4]
 8003c84:	0c03      	lsrs	r3, r0, #16
 8003c86:	ba40      	rev16	r0, r0
 8003c88:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003c8c:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8003c96:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c98:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003c9a:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c9e:	f002 f897 	bl	8005dd0 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	480d      	ldr	r0, [pc, #52]	@ (8003cdc <W25_ReadData+0x60>)
 8003ca6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003caa:	eb0d 0102 	add.w	r1, sp, r2
 8003cae:	f003 f8c2 	bl	8006e36 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	b978      	cbnz	r0, 8003cd6 <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8003cb6:	4809      	ldr	r0, [pc, #36]	@ (8003cdc <W25_ReadData+0x60>)
 8003cb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003cbc:	b2b2      	uxth	r2, r6
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f003 fab3 	bl	800722a <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	b130      	cbz	r0, 8003cd6 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cd2:	f002 f87d 	bl	8005dd0 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	20001ff8 	.word	0x20001ff8

08003ce0 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8003ce0:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8003ce2:	213b      	movs	r1, #59	@ 0x3b
 8003ce4:	f008 f888 	bl	800bdf8 <strrchr>
    if (!last_semicolon) {
 8003ce8:	4604      	mov	r4, r0
 8003cea:	b1a0      	cbz	r0, 8003d16 <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8003cec:	3001      	adds	r0, #1
 8003cee:	f7fc facf 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8003cf2:	2805      	cmp	r0, #5
 8003cf4:	d90f      	bls.n	8003d16 <IsPageValid+0x36>
 8003cf6:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8003cf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003cfc:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8003d00:	2909      	cmp	r1, #9
 8003d02:	d904      	bls.n	8003d0e <IsPageValid+0x2e>
 8003d04:	f023 0320 	bic.w	r3, r3, #32
 8003d08:	3b41      	subs	r3, #65	@ 0x41
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d803      	bhi.n	8003d16 <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 8003d0e:	4294      	cmp	r4, r2
 8003d10:	d1f2      	bne.n	8003cf8 <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8003d12:	2001      	movs	r0, #1
}
 8003d14:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8003d16:	2000      	movs	r0, #0
 8003d18:	e7fc      	b.n	8003d14 <IsPageValid+0x34>

08003d1a <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003d1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d1c:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 8003d1e:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003d20:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 8003d22:	a901      	add	r1, sp, #4
 8003d24:	f001 f856 	bl	8004dd4 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7fc fab1 	bl	8000290 <strlen>
 8003d2e:	3806      	subs	r0, #6
 8003d30:	f8dd 2006 	ldr.w	r2, [sp, #6]
 8003d34:	5022      	str	r2, [r4, r0]
 8003d36:	1823      	adds	r3, r4, r0
 8003d38:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8003d3c:	809a      	strh	r2, [r3, #4]
}
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd10      	pop	{r4, pc}
	...

08003d44 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8003d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003d48:	483f      	ldr	r0, [pc, #252]	@ (8003e48 <W25_ShiftLeftFlashDataByPage+0x104>)
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003d4a:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8003e58 <W25_ShiftLeftFlashDataByPage+0x114>
    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003d4e:	f007 feb9 	bl	800bac4 <puts>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003d52:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
        W25_Reset();
 8003d56:	f7ff fe70 	bl	8003a3a <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003d5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4628      	mov	r0, r5
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003d62:	f505 5780 	add.w	r7, r5, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003d66:	f7ff ff89 	bl	8003c7c <W25_ReadData>
 8003d6a:	b118      	cbz	r0, 8003d74 <W25_ShiftLeftFlashDataByPage+0x30>
//        	printf("READING ALL THE SECTOR: ERROR\n");
            return HAL_ERROR; // Exit if read fails
 8003d6c:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 8003d6e:	4620      	mov	r0, r4
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (next_sector_start < FLASH_END_ADDRESS) {
 8003d74:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8003d78:	d147      	bne.n	8003e0a <W25_ShiftLeftFlashDataByPage+0xc6>
 8003d7a:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8003e58 <W25_ShiftLeftFlashDataByPage+0x114>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003d7e:	2600      	movs	r6, #0
 8003d80:	4644      	mov	r4, r8
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003d82:	46a2      	mov	sl, r4
 8003d84:	3480      	adds	r4, #128	@ 0x80
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff ffaa 	bl	8003ce0 <IsPageValid>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8003d8c:	2280      	movs	r2, #128	@ 0x80
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d046      	beq.n	8003e20 <W25_ShiftLeftFlashDataByPage+0xdc>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8003d92:	4621      	mov	r1, r4
 8003d94:	4650      	mov	r0, sl
 8003d96:	f008 fe9f 	bl	800cad8 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8003d9a:	1971      	adds	r1, r6, r5
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	f7ff ffbc 	bl	8003d1a <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003da2:	3680      	adds	r6, #128	@ 0x80
 8003da4:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8003da8:	d1eb      	bne.n	8003d82 <W25_ShiftLeftFlashDataByPage+0x3e>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8003daa:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8003dae:	d03c      	beq.n	8003e2a <W25_ShiftLeftFlashDataByPage+0xe6>
 8003db0:	4826      	ldr	r0, [pc, #152]	@ (8003e4c <W25_ShiftLeftFlashDataByPage+0x108>)
 8003db2:	f7ff ff95 	bl	8003ce0 <IsPageValid>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d037      	beq.n	8003e2a <W25_ShiftLeftFlashDataByPage+0xe6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8003dba:	4924      	ldr	r1, [pc, #144]	@ (8003e4c <W25_ShiftLeftFlashDataByPage+0x108>)
 8003dbc:	4824      	ldr	r0, [pc, #144]	@ (8003e50 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003dbe:	2280      	movs	r2, #128	@ 0x80
 8003dc0:	f008 fe8a 	bl	800cad8 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8003dc4:	4822      	ldr	r0, [pc, #136]	@ (8003e50 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003dc6:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8003dca:	f7ff ffa6 	bl	8003d1a <UpdatePageAddress>
        W25_Reset();
 8003dce:	f7ff fe34 	bl	8003a3a <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f7ff fedc 	bl	8003b90 <W25_SectorErase>
 8003dd8:	4604      	mov	r4, r0
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d1c6      	bne.n	8003d6c <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003dde:	4606      	mov	r6, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8003de0:	eb08 0a06 	add.w	sl, r8, r6
        	W25_Reset();
 8003de4:	f7ff fe29 	bl	8003a3a <W25_Reset>
        	if (IsPageValid(page_data)) {
 8003de8:	4650      	mov	r0, sl
 8003dea:	f7ff ff79 	bl	8003ce0 <IsPageValid>
 8003dee:	bb10      	cbnz	r0, 8003e36 <W25_ShiftLeftFlashDataByPage+0xf2>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003df0:	3680      	adds	r6, #128	@ 0x80
 8003df2:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8003df6:	d1f3      	bne.n	8003de0 <W25_ShiftLeftFlashDataByPage+0x9c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003df8:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003dfc:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003e00:	d1a9      	bne.n	8003d56 <W25_ShiftLeftFlashDataByPage+0x12>
    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8003e02:	4814      	ldr	r0, [pc, #80]	@ (8003e54 <W25_ShiftLeftFlashDataByPage+0x110>)
 8003e04:	f007 fe5e 	bl	800bac4 <puts>
    return HAL_OK;
 8003e08:	e7b1      	b.n	8003d6e <W25_ShiftLeftFlashDataByPage+0x2a>
        	W25_Reset();
 8003e0a:	f7ff fe16 	bl	8003a3a <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 8003e0e:	490f      	ldr	r1, [pc, #60]	@ (8003e4c <W25_ShiftLeftFlashDataByPage+0x108>)
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e16:	f7ff ff31 	bl	8003c7c <W25_ReadData>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d0ad      	beq.n	8003d7a <W25_ShiftLeftFlashDataByPage+0x36>
 8003e1e:	e7a5      	b.n	8003d6c <W25_ShiftLeftFlashDataByPage+0x28>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8003e20:	21ff      	movs	r1, #255	@ 0xff
 8003e22:	4650      	mov	r0, sl
 8003e24:	f007 ffae 	bl	800bd84 <memset>
 8003e28:	e7bb      	b.n	8003da2 <W25_ShiftLeftFlashDataByPage+0x5e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8003e2a:	2280      	movs	r2, #128	@ 0x80
 8003e2c:	21ff      	movs	r1, #255	@ 0xff
 8003e2e:	4808      	ldr	r0, [pc, #32]	@ (8003e50 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003e30:	f007 ffa8 	bl	800bd84 <memset>
 8003e34:	e7cb      	b.n	8003dce <W25_ShiftLeftFlashDataByPage+0x8a>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	4651      	mov	r1, sl
 8003e3a:	19a8      	adds	r0, r5, r6
 8003e3c:	f7ff fed4 	bl	8003be8 <W25_PageProgram>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d0d5      	beq.n	8003df0 <W25_ShiftLeftFlashDataByPage+0xac>
 8003e44:	e792      	b.n	8003d6c <W25_ShiftLeftFlashDataByPage+0x28>
 8003e46:	bf00      	nop
 8003e48:	080114ff 	.word	0x080114ff
 8003e4c:	200022c0 	.word	0x200022c0
 8003e50:	200032c0 	.word	0x200032c0
 8003e54:	0801154e 	.word	0x0801154e
 8003e58:	20002340 	.word	0x20002340

08003e5c <calculate_epoch_time_utc>:
		address_tax += 128;
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003e5c:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003e5e:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003e60:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003e62:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003e66:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003e68:	6843      	ldr	r3, [r0, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003e6e:	6803      	ldr	r3, [r0, #0]
 8003e70:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003e72:	680b      	ldr	r3, [r1, #0]
 8003e74:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003e76:	684b      	ldr	r3, [r1, #4]
 8003e78:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003e7a:	688b      	ldr	r3, [r1, #8]
 8003e7c:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8003e7e:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003e86:	f008 f8b7 	bl	800bff8 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003e8a:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003e8e:	3070      	adds	r0, #112	@ 0x70
 8003e90:	b00b      	add	sp, #44	@ 0x2c
 8003e92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003e98 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	ed2d 8b04 	vpush	{d8-d9}
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	b09b      	sub	sp, #108	@ 0x6c
 8003ea4:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	3010      	adds	r0, #16
 8003eac:	f7ff ffd6 	bl	8003e5c <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003eb0:	69a3      	ldr	r3, [r4, #24]
 8003eb2:	9314      	str	r3, [sp, #80]	@ 0x50
 8003eb4:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003eb8:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003eba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003ebc:	9315      	str	r3, [sp, #84]	@ 0x54
 8003ebe:	f7fc fb53 	bl	8000568 <__aeabi_f2d>
 8003ec2:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8003ec6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003ec8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003ecc:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003ed0:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003ed4:	f7fc fb48 	bl	8000568 <__aeabi_f2d>
 8003ed8:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003edc:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003ee0:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003ee4:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8003ee8:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003eea:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4811      	ldr	r0, [pc, #68]	@ (8003f38 <format_rmc_data+0xa0>)
 8003ef4:	4911      	ldr	r1, [pc, #68]	@ (8003f3c <format_rmc_data+0xa4>)
 8003ef6:	9608      	str	r6, [sp, #32]
 8003ef8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003efc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003efe:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <format_rmc_data+0xa8>)
 8003f00:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	bf08      	it	eq
 8003f08:	4601      	moveq	r1, r0
 8003f0a:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003f0e:	e9cd 5300 	strd	r5, r3, [sp]
 8003f12:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8003f16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f18:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8003f1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f20:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003f24:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003f28:	f007 fdd4 	bl	800bad4 <sniprintf>
}
 8003f2c:	b01b      	add	sp, #108	@ 0x6c
 8003f2e:	ecbd 8b04 	vpop	{d8-d9}
 8003f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	0801159e 	.word	0x0801159e
 8003f3c:	08011598 	.word	0x08011598
 8003f40:	080115a6 	.word	0x080115a6

08003f44 <saveRMC>:


void saveRMC(){
 8003f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8003f48:	4cb8      	ldr	r4, [pc, #736]	@ (800422c <saveRMC+0x2e8>)
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003f4a:	48b9      	ldr	r0, [pc, #740]	@ (8004230 <saveRMC+0x2ec>)
void saveRMC(){
 8003f4c:	b093      	sub	sp, #76	@ 0x4c
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003f4e:	f007 fdb9 	bl	800bac4 <puts>
	W25_Reset();
 8003f52:	f7ff fd72 	bl	8003a3a <W25_Reset>
	if (is_erased_rmc == 0){
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	b92b      	cbnz	r3, 8003f66 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 8003f5a:	4bb6      	ldr	r3, [pc, #728]	@ (8004234 <saveRMC+0x2f0>)
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f7ff fe17 	bl	8003b90 <W25_SectorErase>
		is_erased_rmc = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8003f66:	4ab4      	ldr	r2, [pc, #720]	@ (8004238 <saveRMC+0x2f4>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003f6c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003f70:	461d      	mov	r5, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	b109      	cbz	r1, 8003f7a <saveRMC+0x36>
 8003f76:	7811      	ldrb	r1, [r2, #0]
 8003f78:	b111      	cbz	r1, 8003f80 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 8003f7a:	2b80      	cmp	r3, #128	@ 0x80
 8003f7c:	d1f6      	bne.n	8003f6c <saveRMC+0x28>
	int k = 0;
 8003f7e:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 8003f80:	4fae      	ldr	r7, [pc, #696]	@ (800423c <saveRMC+0x2f8>)
 8003f82:	4cac      	ldr	r4, [pc, #688]	@ (8004234 <saveRMC+0x2f0>)
 8003f84:	2208      	movs	r2, #8
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f000 ff23 	bl	8004dd4 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 8003f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f92:	2208      	movs	r2, #8
 8003f94:	4639      	mov	r1, r7
 8003f96:	48aa      	ldr	r0, [pc, #680]	@ (8004240 <saveRMC+0x2fc>)
 8003f98:	f003 ff1c 	bl	8007dd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003f9c:	49a9      	ldr	r1, [pc, #676]	@ (8004244 <saveRMC+0x300>)
 8003f9e:	48a8      	ldr	r0, [pc, #672]	@ (8004240 <saveRMC+0x2fc>)
 8003fa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f003 ff15 	bl	8007dd4 <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 8003faa:	1973      	adds	r3, r6, r5
 8003fac:	223b      	movs	r2, #59	@ 0x3b
 8003fae:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 8003fb0:	1cab      	adds	r3, r5, #2
 8003fb2:	f8d7 1002 	ldr.w	r1, [r7, #2]
 8003fb6:	50f1      	str	r1, [r6, r3]
 8003fb8:	18f2      	adds	r2, r6, r3
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8003fbe:	f105 0008 	add.w	r0, r5, #8
 8003fc2:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8003fc6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4430      	add	r0, r6
 8003fce:	f007 fed9 	bl	800bd84 <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003fd8:	b90b      	cbnz	r3, 8003fde <saveRMC+0x9a>
//		printf("\n\nErasing SECTOR IN ADVANCE\n");
		W25_SectorErase(address_rmc);
 8003fda:	f7ff fdd9 	bl	8003b90 <W25_SectorErase>
	}

	W25_Reset();
 8003fde:	f7ff fd2c 	bl	8003a3a <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
//	printf("Buffer before saving to FLASH: ");
//	printf((char*)rmcBufferDemo);
//	printf("\n");

	current_addr = address_rmc;
 8003fe2:	4d99      	ldr	r5, [pc, #612]	@ (8004248 <saveRMC+0x304>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003fe4:	4994      	ldr	r1, [pc, #592]	@ (8004238 <saveRMC+0x2f4>)
 8003fe6:	6820      	ldr	r0, [r4, #0]
 8003fe8:	2280      	movs	r2, #128	@ 0x80
 8003fea:	f7ff fdfd 	bl	8003be8 <W25_PageProgram>
	current_addr = address_rmc;
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	602b      	str	r3, [r5, #0]
//	printf("Buffer after saving to FLASH: ");
	W25_Reset();
 8003ff2:	f7ff fd22 	bl	8003a3a <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	4994      	ldr	r1, [pc, #592]	@ (800424c <saveRMC+0x308>)
 8003ffa:	6828      	ldr	r0, [r5, #0]
 8003ffc:	f7ff fe3e 	bl	8003c7c <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8004000:	4b93      	ldr	r3, [pc, #588]	@ (8004250 <saveRMC+0x30c>)
 8004002:	aa01      	add	r2, sp, #4
 8004004:	f103 0c10 	add.w	ip, r3, #16
 8004008:	4617      	mov	r7, r2
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	4616      	mov	r6, r2
 8004010:	c603      	stmia	r6!, {r0, r1}
 8004012:	3308      	adds	r3, #8
 8004014:	4563      	cmp	r3, ip
 8004016:	4632      	mov	r2, r6
 8004018:	d1f7      	bne.n	800400a <saveRMC+0xc6>
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	889b      	ldrh	r3, [r3, #4]
 800401e:	6030      	str	r0, [r6, #0]
 8004020:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004022:	4638      	mov	r0, r7
 8004024:	f7fc f934 	bl	8000290 <strlen>
 8004028:	4639      	mov	r1, r7
 800402a:	b282      	uxth	r2, r0
 800402c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004030:	4883      	ldr	r0, [pc, #524]	@ (8004240 <saveRMC+0x2fc>)
 8004032:	f003 fecf 	bl	8007dd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800403a:	4984      	ldr	r1, [pc, #528]	@ (800424c <saveRMC+0x308>)
 800403c:	4880      	ldr	r0, [pc, #512]	@ (8004240 <saveRMC+0x2fc>)
 800403e:	2280      	movs	r2, #128	@ 0x80
 8004040:	f003 fec8 	bl	8007dd4 <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	2100      	movs	r1, #0
 8004048:	4880      	ldr	r0, [pc, #512]	@ (800424c <saveRMC+0x308>)
 800404a:	f007 fe9b 	bl	800bd84 <memset>


	printf("\n-------------------------- Updating the latest location info----------------\n");
 800404e:	4881      	ldr	r0, [pc, #516]	@ (8004254 <saveRMC+0x310>)
 8004050:	f007 fd38 	bl	800bac4 <puts>
	W25_Reset();
 8004054:	f7ff fcf1 	bl	8003a3a <W25_Reset>
	W25_SectorErase(0x9000);
 8004058:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800405c:	f7ff fd98 	bl	8003b90 <W25_SectorErase>
	W25_Reset();
 8004060:	f7ff fceb 	bl	8003a3a <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 8004064:	4974      	ldr	r1, [pc, #464]	@ (8004238 <saveRMC+0x2f4>)
 8004066:	2280      	movs	r2, #128	@ 0x80
 8004068:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800406c:	f7ff fdbc 	bl	8003be8 <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	4976      	ldr	r1, [pc, #472]	@ (800424c <saveRMC+0x308>)
 8004074:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004078:	f7ff fe00 	bl	8003c7c <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 800407c:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <saveRMC+0x314>)
 800407e:	aa07      	add	r2, sp, #28
 8004080:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8004084:	4617      	mov	r7, r2
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	4616      	mov	r6, r2
 800408c:	c603      	stmia	r6!, {r0, r1}
 800408e:	3308      	adds	r3, #8
 8004090:	4563      	cmp	r3, ip
 8004092:	4632      	mov	r2, r6
 8004094:	d1f7      	bne.n	8004086 <saveRMC+0x142>
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 800409a:	4638      	mov	r0, r7
 800409c:	f7fc f8f8 	bl	8000290 <strlen>
 80040a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040a4:	b282      	uxth	r2, r0
 80040a6:	4639      	mov	r1, r7
 80040a8:	4865      	ldr	r0, [pc, #404]	@ (8004240 <saveRMC+0x2fc>)
 80040aa:	f003 fe93 	bl	8007dd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80040ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040b2:	4966      	ldr	r1, [pc, #408]	@ (800424c <saveRMC+0x308>)
 80040b4:	4862      	ldr	r0, [pc, #392]	@ (8004240 <saveRMC+0x2fc>)
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	f003 fe8c 	bl	8007dd4 <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 80040bc:	4863      	ldr	r0, [pc, #396]	@ (800424c <saveRMC+0x308>)
 80040be:	2280      	movs	r2, #128	@ 0x80
 80040c0:	2100      	movs	r1, #0
 80040c2:	f007 fe5f 	bl	800bd84 <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 80040cc:	4b63      	ldr	r3, [pc, #396]	@ (800425c <saveRMC+0x318>)
 80040ce:	f040 80aa 	bne.w	8004226 <saveRMC+0x2e2>
		is_flash_overflow = 1;
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
//		printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
		W25_Reset();
 80040d6:	f7ff fcb0 	bl	8003a3a <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80040da:	495c      	ldr	r1, [pc, #368]	@ (800424c <saveRMC+0x308>)
 80040dc:	6820      	ldr	r0, [r4, #0]
 80040de:	4f60      	ldr	r7, [pc, #384]	@ (8004260 <saveRMC+0x31c>)
 80040e0:	2280      	movs	r2, #128	@ 0x80
 80040e2:	f7ff fdcb 	bl	8003c7c <W25_ReadData>
		printf((char*) flashBufferRMCReceived);
 80040e6:	4859      	ldr	r0, [pc, #356]	@ (800424c <saveRMC+0x308>)
 80040e8:	f007 fc7c 	bl	800b9e4 <iprintf>

		W25_ShiftLeftFlashDataByPage();
 80040ec:	f7ff fe2a 	bl	8003d44 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	3b80      	subs	r3, #128	@ 0x80
 80040f4:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 80040f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <saveRMC+0x320>)
 80040f8:	f8d3 8000 	ldr.w	r8, [r3]
 80040fc:	f1b8 0f00 	cmp.w	r8, #0
 8004100:	f040 808c 	bne.w	800421c <saveRMC+0x2d8>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8004104:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 8004106:	4e58      	ldr	r6, [pc, #352]	@ (8004268 <saveRMC+0x324>)
			printf("\n-----------------BEFORE update the result address data --------------\n");
 8004108:	4858      	ldr	r0, [pc, #352]	@ (800426c <saveRMC+0x328>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 800410a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 800410e:	bf82      	ittt	hi
 8004110:	683b      	ldrhi	r3, [r7, #0]
 8004112:	3b80      	subhi	r3, #128	@ 0x80
 8004114:	603b      	strhi	r3, [r7, #0]
			printf("\n-----------------BEFORE update the result address data --------------\n");
 8004116:	f007 fcd5 	bl	800bac4 <puts>
			printQueue_GSM(&result_addr_queue);
 800411a:	4630      	mov	r0, r6
 800411c:	f7fe ffda 	bl	80030d4 <printQueue_GSM>
			printf("\n---------------Update the result address data--------------\n");
 8004120:	4853      	ldr	r0, [pc, #332]	@ (8004270 <saveRMC+0x32c>)
 8004122:	f007 fccf 	bl	800bac4 <puts>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004126:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800412a:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 800412e:	2200      	movs	r2, #0
 8004130:	4290      	cmp	r0, r2
 8004132:	dc4b      	bgt.n	80041cc <saveRMC+0x288>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004134:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 8004268 <saveRMC+0x324>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004138:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 800413c:	4543      	cmp	r3, r8
 800413e:	dc58      	bgt.n	80041f2 <saveRMC+0x2ae>
			}
			printQueue_GSM(&result_addr_queue);
 8004140:	4849      	ldr	r0, [pc, #292]	@ (8004268 <saveRMC+0x324>)
 8004142:	f7fe ffc7 	bl	80030d4 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 8004146:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <saveRMC+0x330>)
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4291      	cmp	r1, r2
 800414e:	d902      	bls.n	8004156 <saveRMC+0x212>
				end_addr_disconnect -= 128;
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	3a80      	subs	r2, #128	@ 0x80
 8004154:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004156:	2208      	movs	r2, #8
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	4938      	ldr	r1, [pc, #224]	@ (800423c <saveRMC+0x2f8>)
 800415c:	f000 fe3a 	bl	8004dd4 <Uint32ToHex>
		printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 8004160:	4936      	ldr	r1, [pc, #216]	@ (800423c <saveRMC+0x2f8>)
 8004162:	4845      	ldr	r0, [pc, #276]	@ (8004278 <saveRMC+0x334>)
 8004164:	f007 fc3e 	bl	800b9e4 <iprintf>
		printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8004168:	4b44      	ldr	r3, [pc, #272]	@ (800427c <saveRMC+0x338>)
 800416a:	4845      	ldr	r0, [pc, #276]	@ (8004280 <saveRMC+0x33c>)
 800416c:	7819      	ldrb	r1, [r3, #0]
 800416e:	f007 fc39 	bl	800b9e4 <iprintf>
		current_addr -= 128;
 8004172:	682b      	ldr	r3, [r5, #0]
	    printf("\n");
 8004174:	200a      	movs	r0, #10
		current_addr -= 128;
 8004176:	3b80      	subs	r3, #128	@ 0x80
 8004178:	602b      	str	r3, [r5, #0]
	    printf("\n");
 800417a:	f007 fc45 	bl	800ba08 <putchar>
		printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 800417e:	4841      	ldr	r0, [pc, #260]	@ (8004284 <saveRMC+0x340>)
 8004180:	f007 fc30 	bl	800b9e4 <iprintf>
		W25_Reset();
 8004184:	f7ff fc59 	bl	8003a3a <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8004188:	4930      	ldr	r1, [pc, #192]	@ (800424c <saveRMC+0x308>)
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	2280      	movs	r2, #128	@ 0x80
 800418e:	f7ff fd75 	bl	8003c7c <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004192:	492e      	ldr	r1, [pc, #184]	@ (800424c <saveRMC+0x308>)
 8004194:	482a      	ldr	r0, [pc, #168]	@ (8004240 <saveRMC+0x2fc>)
 8004196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800419a:	2280      	movs	r2, #128	@ 0x80
 800419c:	f003 fe1a 	bl	8007dd4 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 80041a6:	bf38      	it	cc
 80041a8:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 80041aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 80041ae:	bf38      	it	cc
 80041b0:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 80041b2:	f003 ff7f 	bl	80080b4 <osDelay>
	printf("\n");
 80041b6:	200a      	movs	r0, #10
 80041b8:	f007 fc26 	bl	800ba08 <putchar>
	memset(flashBufferRMCReceived, 0x00,128);
 80041bc:	4823      	ldr	r0, [pc, #140]	@ (800424c <saveRMC+0x308>)
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	2100      	movs	r1, #0
}
 80041c2:	b013      	add	sp, #76	@ 0x4c
 80041c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 80041c8:	f007 bddc 	b.w	800bd84 <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80041cc:	eb02 030c 	add.w	r3, r2, ip
 80041d0:	4259      	negs	r1, r3
 80041d2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80041d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041da:	bf58      	it	pl
 80041dc:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 80041de:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 80041e0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80041e4:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 80041e8:	bf24      	itt	cs
 80041ea:	3980      	subcs	r1, #128	@ 0x80
 80041ec:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 80041f0:	e79e      	b.n	8004130 <saveRMC+0x1ec>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80041f2:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 80041f6:	4441      	add	r1, r8
 80041f8:	424b      	negs	r3, r1
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004202:	bf58      	it	pl
 8004204:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 8004206:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 800420a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800420e:	d202      	bcs.n	8004216 <saveRMC+0x2d2>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004210:	4648      	mov	r0, r9
 8004212:	f7fe ffb7 	bl	8003184 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004216:	f108 0801 	add.w	r8, r8, #1
 800421a:	e78d      	b.n	8004138 <saveRMC+0x1f4>
			count_shiftleft++;
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <saveRMC+0x338>)
 800421e:	7813      	ldrb	r3, [r2, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	7013      	strb	r3, [r2, #0]
 8004224:	e797      	b.n	8004156 <saveRMC+0x212>
		is_flash_overflow = 0;
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e7b9      	b.n	80041a0 <saveRMC+0x25c>
 800422c:	20003440 	.word	0x20003440
 8004230:	080115d9 	.word	0x080115d9
 8004234:	2000000c 	.word	0x2000000c
 8004238:	20003340 	.word	0x20003340
 800423c:	200021fc 	.word	0x200021fc
 8004240:	20001ec0 	.word	0x20001ec0
 8004244:	0801030d 	.word	0x0801030d
 8004248:	20000008 	.word	0x20000008
 800424c:	200033c0 	.word	0x200033c0
 8004250:	08011774 	.word	0x08011774
 8004254:	080115f9 	.word	0x080115f9
 8004258:	0801178a 	.word	0x0801178a
 800425c:	20003448 	.word	0x20003448
 8004260:	200016a0 	.word	0x200016a0
 8004264:	200018bc 	.word	0x200018bc
 8004268:	200016a4 	.word	0x200016a4
 800426c:	08011647 	.word	0x08011647
 8004270:	0801168e 	.word	0x0801168e
 8004274:	20001698 	.word	0x20001698
 8004278:	080116cb 	.word	0x080116cb
 800427c:	200018b4 	.word	0x200018b4
 8004280:	08011717 	.word	0x08011717
 8004284:	08011749 	.word	0x08011749

08004288 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8004288:	6983      	ldr	r3, [r0, #24]
 800428a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8004290:	dd14      	ble.n	80042bc <sendRMCDataWithAddrToGSM+0x34>
		printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8004292:	4e0b      	ldr	r6, [pc, #44]	@ (80042c0 <sendRMCDataWithAddrToGSM+0x38>)
		printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
 8004294:	480b      	ldr	r0, [pc, #44]	@ (80042c4 <sendRMCDataWithAddrToGSM+0x3c>)
 8004296:	f007 fc15 	bl	800bac4 <puts>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 800429a:	6830      	ldr	r0, [r6, #0]
 800429c:	f04f 31ff 	mov.w	r1, #4294967295
 80042a0:	f004 f803 	bl	80082aa <osMailAlloc>
 80042a4:	4604      	mov	r4, r0
		if (mail != NULL) {
 80042a6:	b148      	cbz	r0, 80042bc <sendRMCDataWithAddrToGSM+0x34>
			*mail = *mail_data; // Copy data into allocated memory
 80042a8:	4629      	mov	r1, r5
 80042aa:	2260      	movs	r2, #96	@ 0x60
 80042ac:	f008 fc14 	bl	800cad8 <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 80042b0:	6830      	ldr	r0, [r6, #0]
 80042b2:	4621      	mov	r1, r4
		}
	}
}
 80042b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 80042b8:	f003 bffc 	b.w	80082b4 <osMailPut>
}
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop
 80042c0:	20001c84 	.word	0x20001c84
 80042c4:	080117b3 	.word	0x080117b3

080042c8 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 80042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042cc:	b0d4      	sub	sp, #336	@ 0x150
 80042ce:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 80042d0:	22ff      	movs	r2, #255	@ 0xff
 80042d2:	4601      	mov	r1, r0
 80042d4:	a814      	add	r0, sp, #80	@ 0x50
 80042d6:	f007 fd7c 	bl	800bdd2 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80042da:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80042dc:	213b      	movs	r1, #59	@ 0x3b
 80042de:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80042e0:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80042e4:	f007 fd88 	bl	800bdf8 <strrchr>
    if (lastSemicolon) {
 80042e8:	b100      	cbz	r0, 80042ec <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80042ea:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80042ec:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80042f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80042f6:	9308      	str	r3, [sp, #32]
 80042f8:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80042fc:	9307      	str	r3, [sp, #28]
 80042fe:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8004302:	9306      	str	r3, [sp, #24]
 8004304:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8004308:	9305      	str	r3, [sp, #20]
 800430a:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	f104 0308 	add.w	r3, r4, #8
 8004314:	9303      	str	r3, [sp, #12]
 8004316:	1d23      	adds	r3, r4, #4
 8004318:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800431c:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8004320:	f104 0310 	add.w	r3, r4, #16
 8004324:	ad10      	add	r5, sp, #64	@ 0x40
 8004326:	ae0f      	add	r6, sp, #60	@ 0x3c
 8004328:	af0e      	add	r7, sp, #56	@ 0x38
 800432a:	f104 0218 	add.w	r2, r4, #24
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	4911      	ldr	r1, [pc, #68]	@ (8004378 <parseRMCString+0xb0>)
 8004332:	950d      	str	r5, [sp, #52]	@ 0x34
 8004334:	f104 0314 	add.w	r3, r4, #20
 8004338:	960c      	str	r6, [sp, #48]	@ 0x30
 800433a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800433c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004340:	a814      	add	r0, sp, #80	@ 0x50
 8004342:	f007 fc1b 	bl	800bb7c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004346:	490d      	ldr	r1, [pc, #52]	@ (800437c <parseRMCString+0xb4>)
 8004348:	4640      	mov	r0, r8
 800434a:	f7fb ff41 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800434e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8004352:	17d1      	asrs	r1, r2, #31
 8004354:	0409      	lsls	r1, r1, #16
 8004356:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800435a:	430b      	orrs	r3, r1
 800435c:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800435e:	fab0 f080 	clz	r0, r0
 8004362:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004364:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004368:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 800436c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004370:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8004372:	b054      	add	sp, #336	@ 0x150
 8004374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004378:	080117d4 	.word	0x080117d4
 800437c:	08011598 	.word	0x08011598

08004380 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	460d      	mov	r5, r1
 8004384:	b0a1      	sub	sp, #132	@ 0x84
	Uint32ToHex(addr, addr_out_flash, 8);
 8004386:	2208      	movs	r2, #8
 8004388:	4927      	ldr	r1, [pc, #156]	@ (8004428 <readFlash+0xa8>)
RMCSTRUCT readFlash(uint32_t addr){
 800438a:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 800438c:	4628      	mov	r0, r5
 800438e:	f000 fd21 	bl	8004dd4 <Uint32ToHex>
	printf("Address received from FLASH: %s \n", addr_out_flash);
 8004392:	4925      	ldr	r1, [pc, #148]	@ (8004428 <readFlash+0xa8>)
 8004394:	4825      	ldr	r0, [pc, #148]	@ (800442c <readFlash+0xac>)
 8004396:	f007 fb25 	bl	800b9e4 <iprintf>
	W25_Reset();
 800439a:	f7ff fb4e 	bl	8003a3a <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 800439e:	2280      	movs	r2, #128	@ 0x80
 80043a0:	4923      	ldr	r1, [pc, #140]	@ (8004430 <readFlash+0xb0>)
 80043a2:	4628      	mov	r0, r5
 80043a4:	f7ff fc6a 	bl	8003c7c <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 80043a8:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <readFlash+0xb4>)
 80043aa:	aa01      	add	r2, sp, #4
 80043ac:	f103 0720 	add.w	r7, r3, #32
 80043b0:	4616      	mov	r6, r2
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	4615      	mov	r5, r2
 80043b8:	c503      	stmia	r5!, {r0, r1}
 80043ba:	3308      	adds	r3, #8
 80043bc:	42bb      	cmp	r3, r7
 80043be:	462a      	mov	r2, r5
 80043c0:	d1f7      	bne.n	80043b2 <readFlash+0x32>
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7fb ff62 	bl	8000290 <strlen>
 80043cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043d0:	b282      	uxth	r2, r0
 80043d2:	4631      	mov	r1, r6
 80043d4:	4818      	ldr	r0, [pc, #96]	@ (8004438 <readFlash+0xb8>)
 80043d6:	f003 fcfd 	bl	8007dd4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80043da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043de:	4914      	ldr	r1, [pc, #80]	@ (8004430 <readFlash+0xb0>)
 80043e0:	4815      	ldr	r0, [pc, #84]	@ (8004438 <readFlash+0xb8>)
 80043e2:	2280      	movs	r2, #128	@ 0x80
 80043e4:	f003 fcf6 	bl	8007dd4 <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 80043e8:	2258      	movs	r2, #88	@ 0x58
 80043ea:	2100      	movs	r1, #0
 80043ec:	a80a      	add	r0, sp, #40	@ 0x28
 80043ee:	f007 fcc9 	bl	800bd84 <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 80043f2:	480f      	ldr	r0, [pc, #60]	@ (8004430 <readFlash+0xb0>)
 80043f4:	a90a      	add	r1, sp, #40	@ 0x28
 80043f6:	f7ff ff67 	bl	80042c8 <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 80043fa:	480d      	ldr	r0, [pc, #52]	@ (8004430 <readFlash+0xb0>)
 80043fc:	f7ff fc70 	bl	8003ce0 <IsPageValid>
 8004400:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <readFlash+0xbc>)
 8004402:	b960      	cbnz	r0, 800441e <readFlash+0x9e>
		is_read_flash_valid = 0;
 8004404:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 8004406:	9016      	str	r0, [sp, #88]	@ 0x58
		printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 8004408:	480d      	ldr	r0, [pc, #52]	@ (8004440 <readFlash+0xc0>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 800440a:	f007 fb5b 	bl	800bac4 <puts>
//
//	printf("Course: %.2f\n", rmc.course);
//
//	printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");

	return rmc;
 800440e:	2258      	movs	r2, #88	@ 0x58
 8004410:	a90a      	add	r1, sp, #40	@ 0x28
 8004412:	4620      	mov	r0, r4
 8004414:	f008 fb60 	bl	800cad8 <memcpy>
}
 8004418:	4620      	mov	r0, r4
 800441a:	b021      	add	sp, #132	@ 0x84
 800441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 800441e:	2301      	movs	r3, #1
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004420:	4808      	ldr	r0, [pc, #32]	@ (8004444 <readFlash+0xc4>)
		is_read_flash_valid = 1;
 8004422:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 8004424:	9316      	str	r3, [sp, #88]	@ 0x58
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004426:	e7f0      	b.n	800440a <readFlash+0x8a>
 8004428:	200021fc 	.word	0x200021fc
 800442c:	0801180e 	.word	0x0801180e
 8004430:	200033c0 	.word	0x200033c0
 8004434:	080118d7 	.word	0x080118d7
 8004438:	20001ec0 	.word	0x20001ec0
 800443c:	20000004 	.word	0x20000004
 8004440:	08011830 	.word	0x08011830
 8004444:	08011880 	.word	0x08011880

08004448 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 8004448:	b570      	push	{r4, r5, r6, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue

	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 800444a:	4d6b      	ldr	r5, [pc, #428]	@ (80045f8 <receiveRMCDataFromGPS+0x1b0>)
void receiveRMCDataFromGPS(void) {
 800444c:	b09a      	sub	sp, #104	@ 0x68
	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 800444e:	6829      	ldr	r1, [r5, #0]
 8004450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004454:	a817      	add	r0, sp, #92	@ 0x5c
 8004456:	f003 ff58 	bl	800830a <osMailGet>
 800445a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	if(evt.status == osEventMail){
 800445c:	2920      	cmp	r1, #32
 800445e:	f040 80c4 	bne.w	80045ea <receiveRMCDataFromGPS+0x1a2>
		printf("\nReceived  RMC Data SPI FLASH: \n");
 8004462:	4866      	ldr	r0, [pc, #408]	@ (80045fc <receiveRMCDataFromGPS+0x1b4>)
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8004464:	4c66      	ldr	r4, [pc, #408]	@ (8004600 <receiveRMCDataFromGPS+0x1b8>)
		printf("\nReceived  RMC Data SPI FLASH: \n");
 8004466:	f007 fb2d 	bl	800bac4 <puts>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 800446a:	9918      	ldr	r1, [sp, #96]	@ 0x60
		rmc_flash.tim.min = receivedData->tim.min;
		rmc_flash.tim.sec = receivedData->tim.sec;
		rmc_flash.date.Yr = receivedData->date.Yr;
		rmc_flash.date.Mon = receivedData->date.Mon;
		rmc_flash.date.Day = receivedData->date.Day;
		osMailFree(RMC_MailQFLASHId, receivedData);
 800446c:	6828      	ldr	r0, [r5, #0]
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 800446e:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8004472:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8004476:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800447a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 800447e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004480:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8004482:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004484:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8004486:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
 800448a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 800448e:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
 8004492:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8004496:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004498:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 800449a:	680b      	ldr	r3, [r1, #0]
 800449c:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 800449e:	684b      	ldr	r3, [r1, #4]
 80044a0:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 80044a2:	688b      	ldr	r3, [r1, #8]
 80044a4:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 80044a6:	698b      	ldr	r3, [r1, #24]
 80044a8:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 80044aa:	694b      	ldr	r3, [r1, #20]
 80044ac:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	6123      	str	r3, [r4, #16]
		osMailFree(RMC_MailQFLASHId, receivedData);
 80044b2:	f003 ff63 	bl	800837c <osMailFree>
		if(rmc_flash.date.Yr >= 24){
 80044b6:	69a3      	ldr	r3, [r4, #24]
 80044b8:	2b17      	cmp	r3, #23
 80044ba:	dd47      	ble.n	800454c <receiveRMCDataFromGPS+0x104>
			countRMCReceived++;
 80044bc:	4e51      	ldr	r6, [pc, #324]	@ (8004604 <receiveRMCDataFromGPS+0x1bc>)
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 80044be:	4852      	ldr	r0, [pc, #328]	@ (8004608 <receiveRMCDataFromGPS+0x1c0>)
			countRMCReceived++;
 80044c0:	6831      	ldr	r1, [r6, #0]
 80044c2:	3101      	adds	r1, #1
 80044c4:	6031      	str	r1, [r6, #0]
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 80044c6:	f007 fa8d 	bl	800b9e4 <iprintf>


			printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 80044ca:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80044ce:	6821      	ldr	r1, [r4, #0]
 80044d0:	484e      	ldr	r0, [pc, #312]	@ (800460c <receiveRMCDataFromGPS+0x1c4>)
 80044d2:	f007 fa87 	bl	800b9e4 <iprintf>
//
//		printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 80044d6:	494e      	ldr	r1, [pc, #312]	@ (8004610 <receiveRMCDataFromGPS+0x1c8>)
 80044d8:	2280      	movs	r2, #128	@ 0x80
 80044da:	4620      	mov	r0, r4
 80044dc:	f7ff fcdc 	bl	8003e98 <format_rmc_data>

			if(countRMCReceived == 28){
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	2b1c      	cmp	r3, #28
 80044e4:	d134      	bne.n	8004550 <receiveRMCDataFromGPS+0x108>

				saveRMC();
 80044e6:	f7ff fd2d 	bl	8003f44 <saveRMC>
				printf("---------------------Sending the current data----------------");
 80044ea:	484a      	ldr	r0, [pc, #296]	@ (8004614 <receiveRMCDataFromGPS+0x1cc>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80044ec:	4d4a      	ldr	r5, [pc, #296]	@ (8004618 <receiveRMCDataFromGPS+0x1d0>)
				printf("---------------------Sending the current data----------------");
 80044ee:	f007 fa79 	bl	800b9e4 <iprintf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80044f2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80044f6:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 80044fa:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 80044fe:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8004502:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004504:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8004506:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004508:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 800450a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800450e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8004512:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004516:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 800451a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800451c:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8004522:	6863      	ldr	r3, [r4, #4]
 8004524:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 800452a:	69a3      	ldr	r3, [r4, #24]
 800452c:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 800452e:	6963      	ldr	r3, [r4, #20]
 8004530:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 8004536:	4b39      	ldr	r3, [pc, #228]	@ (800461c <receiveRMCDataFromGPS+0x1d4>)

				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8004538:	4839      	ldr	r0, [pc, #228]	@ (8004620 <receiveRMCDataFromGPS+0x1d8>)
				mail_gsm.address = current_addr;
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	65a9      	str	r1, [r5, #88]	@ 0x58
				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 800453e:	f007 fa51 	bl	800b9e4 <iprintf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8004542:	4628      	mov	r0, r5
 8004544:	f7ff fea0 	bl	8004288 <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	6033      	str	r3, [r6, #0]
		}
	}
	else{
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
	}
}
 800454c:	b01a      	add	sp, #104	@ 0x68
 800454e:	bd70      	pop	{r4, r5, r6, pc}
				printf("\n\n ---------------------------- NOT SENDING CURRENT ADDR DATA yet ------------------\n\n");
 8004550:	4834      	ldr	r0, [pc, #208]	@ (8004624 <receiveRMCDataFromGPS+0x1dc>)
 8004552:	f007 fab7 	bl	800bac4 <puts>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8004556:	4b34      	ldr	r3, [pc, #208]	@ (8004628 <receiveRMCDataFromGPS+0x1e0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d1f6      	bne.n	800454c <receiveRMCDataFromGPS+0x104>
 800455e:	4b33      	ldr	r3, [pc, #204]	@ (800462c <receiveRMCDataFromGPS+0x1e4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f2      	bne.n	800454c <receiveRMCDataFromGPS+0x104>
 8004566:	4b32      	ldr	r3, [pc, #200]	@ (8004630 <receiveRMCDataFromGPS+0x1e8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d1ee      	bne.n	800454c <receiveRMCDataFromGPS+0x104>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 800456e:	4c31      	ldr	r4, [pc, #196]	@ (8004634 <receiveRMCDataFromGPS+0x1ec>)
 8004570:	4931      	ldr	r1, [pc, #196]	@ (8004638 <receiveRMCDataFromGPS+0x1f0>)
 8004572:	6820      	ldr	r0, [r4, #0]
 8004574:	f7fe fde0 	bl	8003138 <checkAddrExistInQueue>
 8004578:	b188      	cbz	r0, 800459e <receiveRMCDataFromGPS+0x156>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8004580:	d80d      	bhi.n	800459e <receiveRMCDataFromGPS+0x156>
						printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	482d      	ldr	r0, [pc, #180]	@ (800463c <receiveRMCDataFromGPS+0x1f4>)
 8004586:	f007 fa2d 	bl	800b9e4 <iprintf>
						if(start_addr_disconnect <= (current_addr - 128)) start_addr_disconnect +=128;
 800458a:	4b24      	ldr	r3, [pc, #144]	@ (800461c <receiveRMCDataFromGPS+0x1d4>)
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3b80      	subs	r3, #128	@ 0x80
 8004592:	4293      	cmp	r3, r2
 8004594:	d3da      	bcc.n	800454c <receiveRMCDataFromGPS+0x104>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	3380      	adds	r3, #128	@ 0x80
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	e7d6      	b.n	800454c <receiveRMCDataFromGPS+0x104>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 800459e:	4a28      	ldr	r2, [pc, #160]	@ (8004640 <receiveRMCDataFromGPS+0x1f8>)
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	4e27      	ldr	r6, [pc, #156]	@ (8004644 <receiveRMCDataFromGPS+0x1fc>)
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80045a6:	6821      	ldr	r1, [r4, #0]
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80045a8:	4d1b      	ldr	r5, [pc, #108]	@ (8004618 <receiveRMCDataFromGPS+0x1d0>)
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80045aa:	4827      	ldr	r0, [pc, #156]	@ (8004648 <receiveRMCDataFromGPS+0x200>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80045ac:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 80045b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045b4:	bf38      	it	cc
 80045b6:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80045ba:	6033      	str	r3, [r6, #0]
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80045bc:	f007 fa12 	bl	800b9e4 <iprintf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80045c0:	6831      	ldr	r1, [r6, #0]
 80045c2:	4668      	mov	r0, sp
 80045c4:	f7ff fedc 	bl	8004380 <readFlash>
 80045c8:	2258      	movs	r2, #88	@ 0x58
 80045ca:	4669      	mov	r1, sp
 80045cc:	4628      	mov	r0, r5
 80045ce:	f008 fa83 	bl	800cad8 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	65ab      	str	r3, [r5, #88]	@ 0x58
						if(is_read_flash_valid == 1)
 80045d6:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <receiveRMCDataFromGPS+0x204>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d1b6      	bne.n	800454c <receiveRMCDataFromGPS+0x104>
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80045de:	4628      	mov	r0, r5
}
 80045e0:	b01a      	add	sp, #104	@ 0x68
 80045e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80045e6:	f7ff be4f 	b.w	8004288 <sendRMCDataWithAddrToGSM>
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80045ea:	4819      	ldr	r0, [pc, #100]	@ (8004650 <receiveRMCDataFromGPS+0x208>)
}
 80045ec:	b01a      	add	sp, #104	@ 0x68
 80045ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80045f2:	f007 b9f7 	b.w	800b9e4 <iprintf>
 80045f6:	bf00      	nop
 80045f8:	20001c88 	.word	0x20001c88
 80045fc:	080118fb 	.word	0x080118fb
 8004600:	20002268 	.word	0x20002268
 8004604:	200021f8 	.word	0x200021f8
 8004608:	0801191b 	.word	0x0801191b
 800460c:	08011983 	.word	0x08011983
 8004610:	20003340 	.word	0x20003340
 8004614:	080119b2 	.word	0x080119b2
 8004618:	20002208 	.word	0x20002208
 800461c:	20000008 	.word	0x20000008
 8004620:	080119f0 	.word	0x080119f0
 8004624:	08011a3a 	.word	0x08011a3a
 8004628:	200018bc 	.word	0x200018bc
 800462c:	200018c0 	.word	0x200018c0
 8004630:	200018b8 	.word	0x200018b8
 8004634:	200016a0 	.word	0x200016a0
 8004638:	200016a4 	.word	0x200016a4
 800463c:	08011a90 	.word	0x08011a90
 8004640:	200018b4 	.word	0x200018b4
 8004644:	20003444 	.word	0x20003444
 8004648:	08011ad3 	.word	0x08011ad3
 800464c:	20000004 	.word	0x20000004
 8004650:	08011b2b 	.word	0x08011b2b
 8004654:	00000000 	.word	0x00000000

08004658 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8004658:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800465a:	483f      	ldr	r0, [pc, #252]	@ (8004758 <StartSpiFlash+0x100>)
//	myMutex = osMutexNew(NULL);  // NULL means default attributes
//	if (myMutex == NULL) {
//		printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
//	}
//	printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
	rmc_saved = readFlash(0x9000);
 800465c:	4c3f      	ldr	r4, [pc, #252]	@ (800475c <StartSpiFlash+0x104>)
	current_addr = address_rmc;
 800465e:	4f40      	ldr	r7, [pc, #256]	@ (8004760 <StartSpiFlash+0x108>)
{
 8004660:	b09c      	sub	sp, #112	@ 0x70
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004662:	f007 fa2f 	bl	800bac4 <puts>
	current_addr = address_rmc;
 8004666:	4b3f      	ldr	r3, [pc, #252]	@ (8004764 <StartSpiFlash+0x10c>)
	rmc_saved = readFlash(0x9000);
 8004668:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
	current_addr = address_rmc;
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	603b      	str	r3, [r7, #0]
	rmc_saved = readFlash(0x9000);
 8004670:	4668      	mov	r0, sp
 8004672:	f7ff fe85 	bl	8004380 <readFlash>
 8004676:	2258      	movs	r2, #88	@ 0x58
 8004678:	4669      	mov	r1, sp
 800467a:	4620      	mov	r0, r4
 800467c:	f008 fa2c 	bl	800cad8 <memcpy>
	printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 8004680:	4839      	ldr	r0, [pc, #228]	@ (8004768 <StartSpiFlash+0x110>)
 8004682:	f007 fa1f 	bl	800bac4 <puts>
	if(rmc_saved.isValid == 0){
 8004686:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8004688:	b9f5      	cbnz	r5, 80046c8 <StartSpiFlash+0x70>
		printf("There is not back up GPS from FLASH");
 800468a:	4838      	ldr	r0, [pc, #224]	@ (800476c <StartSpiFlash+0x114>)
 800468c:	f007 f9aa 	bl	800b9e4 <iprintf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 8004690:	a32d      	add	r3, pc, #180	@ (adr r3, 8004748 <StartSpiFlash+0xf0>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 800469a:	a32d      	add	r3, pc, #180	@ (adr r3, 8004750 <StartSpiFlash+0xf8>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 80046a4:	4b32      	ldr	r3, [pc, #200]	@ (8004770 <StartSpiFlash+0x118>)
 80046a6:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 80046a8:	4b32      	ldr	r3, [pc, #200]	@ (8004774 <StartSpiFlash+0x11c>)
 80046aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 80046ac:	234e      	movs	r3, #78	@ 0x4e
 80046ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 80046b2:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 80046b6:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 80046b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 80046bc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 80046c0:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 80046c2:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 80046c4:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 80046c6:	61a5      	str	r5, [r4, #24]
	}

	for(;;){
		printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 80046c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800478c <StartSpiFlash+0x134>

//		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
//		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80046cc:	4d2a      	ldr	r5, [pc, #168]	@ (8004778 <StartSpiFlash+0x120>)
		printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 80046ce:	4640      	mov	r0, r8
 80046d0:	f007 f9f8 	bl	800bac4 <puts>
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80046d4:	6828      	ldr	r0, [r5, #0]
 80046d6:	f04f 31ff 	mov.w	r1, #4294967295
 80046da:	f003 fcfa 	bl	80080d2 <osMutexWait>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d1f5      	bne.n	80046ce <StartSpiFlash+0x76>
			W25_Reset();
 80046e2:	f7ff f9aa 	bl	8003a3a <W25_Reset>
			W25_ReadJedecID();
 80046e6:	f7ff f9d5 	bl	8003a94 <W25_ReadJedecID>
			W25_Reset();
 80046ea:	f7ff f9a6 	bl	8003a3a <W25_Reset>
			W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80046ee:	2280      	movs	r2, #128	@ 0x80
 80046f0:	4922      	ldr	r1, [pc, #136]	@ (800477c <StartSpiFlash+0x124>)
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f7ff fac2 	bl	8003c7c <W25_ReadData>
			char spi_flash_data_intro[] = "Flash DATA received: ";
 80046f8:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <StartSpiFlash+0x128>)
 80046fa:	aa16      	add	r2, sp, #88	@ 0x58
 80046fc:	f103 0c10 	add.w	ip, r3, #16
 8004700:	4616      	mov	r6, r2
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	4614      	mov	r4, r2
 8004708:	c403      	stmia	r4!, {r0, r1}
 800470a:	3308      	adds	r3, #8
 800470c:	4563      	cmp	r3, ip
 800470e:	4622      	mov	r2, r4
 8004710:	d1f7      	bne.n	8004702 <StartSpiFlash+0xaa>
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	6020      	str	r0, [r4, #0]
 8004718:	80a3      	strh	r3, [r4, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800471a:	4630      	mov	r0, r6
 800471c:	f7fb fdb8 	bl	8000290 <strlen>
 8004720:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004724:	b282      	uxth	r2, r0
 8004726:	4631      	mov	r1, r6
 8004728:	4816      	ldr	r0, [pc, #88]	@ (8004784 <StartSpiFlash+0x12c>)
 800472a:	f003 fb53 	bl	8007dd4 <HAL_UART_Transmit>
			//receiveTaxData();
			receiveRMCDataFromGPS();
 800472e:	f7ff fe8b 	bl	8004448 <receiveRMCDataFromGPS>
			printf("\n\n");
 8004732:	4815      	ldr	r0, [pc, #84]	@ (8004788 <StartSpiFlash+0x130>)
 8004734:	f007 f9c6 	bl	800bac4 <puts>
			osMutexRelease(myMutexHandle);
 8004738:	6828      	ldr	r0, [r5, #0]
 800473a:	f003 fcf0 	bl	800811e <osMutexRelease>
			osDelay(1000);
 800473e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004742:	f003 fcb7 	bl	80080b4 <osDelay>
 8004746:	e7c2      	b.n	80046ce <StartSpiFlash+0x76>
 8004748:	5eaab042 	.word	0x5eaab042
 800474c:	4034ff7e 	.word	0x4034ff7e
 8004750:	48451330 	.word	0x48451330
 8004754:	405a72dd 	.word	0x405a72dd
 8004758:	08011b92 	.word	0x08011b92
 800475c:	20000378 	.word	0x20000378
 8004760:	20000008 	.word	0x20000008
 8004764:	2000000c 	.word	0x2000000c
 8004768:	08011be9 	.word	0x08011be9
 800476c:	08011c35 	.word	0x08011c35
 8004770:	41b33333 	.word	0x41b33333
 8004774:	41f40000 	.word	0x41f40000
 8004778:	20001c90 	.word	0x20001c90
 800477c:	200033c0 	.word	0x200033c0
 8004780:	08011774 	.word	0x08011774
 8004784:	20001ec0 	.word	0x20001ec0
 8004788:	08010f0d 	.word	0x08010f0d
 800478c:	08011c59 	.word	0x08011c59

08004790 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004790:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <HAL_MspInit+0x38>)
 8004792:	699a      	ldr	r2, [r3, #24]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	699a      	ldr	r2, [r3, #24]
{
 800479c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	f002 0201 	and.w	r2, r2, #1
 80047a2:	9200      	str	r2, [sp, #0]
 80047a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80047ac:	61da      	str	r2, [r3, #28]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047b8:	2200      	movs	r2, #0
 80047ba:	210f      	movs	r1, #15
 80047bc:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047c0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047c2:	f001 b91d 	b.w	8005a00 <HAL_NVIC_SetPriority>
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ce:	2214      	movs	r2, #20
{
 80047d0:	b08a      	sub	sp, #40	@ 0x28
 80047d2:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d4:	2100      	movs	r1, #0
 80047d6:	eb0d 0002 	add.w	r0, sp, r2
 80047da:	f007 fad3 	bl	800bd84 <memset>
  if(hadc->Instance==ADC2)
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	4a3d      	ldr	r2, [pc, #244]	@ (80048d8 <HAL_ADC_MspInit+0x10c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d137      	bne.n	8004856 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047e6:	4b3d      	ldr	r3, [pc, #244]	@ (80048dc <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80047e8:	4c3d      	ldr	r4, [pc, #244]	@ (80048e0 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004802:	615a      	str	r2, [r3, #20]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480a:	9302      	str	r3, [sp, #8]
 800480c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800480e:	2620      	movs	r6, #32
 8004810:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004816:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004818:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f001 fa14 	bl	8005c48 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004820:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004824:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80048f4 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004828:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800482c:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800482e:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004832:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004838:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800483c:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004840:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004842:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004844:	f001 f93c 	bl	8005ac0 <HAL_DMA_Init>
 8004848:	b108      	cbz	r0, 800484e <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800484a:	f7ff f8ae 	bl	80039aa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800484e:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004850:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004852:	b00a      	add	sp, #40	@ 0x28
 8004854:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8004856:	4a23      	ldr	r2, [pc, #140]	@ (80048e4 <HAL_ADC_MspInit+0x118>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d1fa      	bne.n	8004852 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 800485e:	4c22      	ldr	r4, [pc, #136]	@ (80048e8 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004860:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004862:	4822      	ldr	r0, [pc, #136]	@ (80048ec <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004864:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004868:	615a      	str	r2, [r3, #20]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004870:	9203      	str	r2, [sp, #12]
 8004872:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800487a:	615a      	str	r2, [r3, #20]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004882:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004884:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004886:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004888:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488a:	2303      	movs	r3, #3
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004890:	f001 f9da 	bl	8005c48 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004894:	2080      	movs	r0, #128	@ 0x80
 8004896:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800489a:	4915      	ldr	r1, [pc, #84]	@ (80048f0 <HAL_ADC_MspInit+0x124>)
 800489c:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800489e:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80048a2:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80048a6:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80048a8:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048aa:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80048ae:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80048b2:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80048b4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80048b6:	f001 f903 	bl	8005ac0 <HAL_DMA_Init>
 80048ba:	b108      	cbz	r0, 80048c0 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 80048bc:	f7ff f875 	bl	80039aa <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80048c0:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2105      	movs	r1, #5
 80048c6:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80048c8:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80048ca:	f001 f899 	bl	8005a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80048ce:	202f      	movs	r0, #47	@ 0x2f
 80048d0:	f001 f8c8 	bl	8005a64 <HAL_NVIC_EnableIRQ>
}
 80048d4:	e7bd      	b.n	8004852 <HAL_ADC_MspInit+0x86>
 80048d6:	bf00      	nop
 80048d8:	50000100 	.word	0x50000100
 80048dc:	40021000 	.word	0x40021000
 80048e0:	20002114 	.word	0x20002114
 80048e4:	50000400 	.word	0x50000400
 80048e8:	200020d0 	.word	0x200020d0
 80048ec:	48000400 	.word	0x48000400
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020408 	.word	0x40020408

080048f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048f8:	b510      	push	{r4, lr}
 80048fa:	4604      	mov	r4, r0
 80048fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fe:	2214      	movs	r2, #20
 8004900:	2100      	movs	r1, #0
 8004902:	a803      	add	r0, sp, #12
 8004904:	f007 fa3e 	bl	800bd84 <memset>
  if(hi2c->Instance==I2C1)
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_I2C_MspInit+0x5c>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d11e      	bne.n	800494e <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004910:	4c11      	ldr	r4, [pc, #68]	@ (8004958 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004912:	4812      	ldr	r0, [pc, #72]	@ (800495c <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004914:	6963      	ldr	r3, [r4, #20]
 8004916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800491a:	6163      	str	r3, [r4, #20]
 800491c:	6963      	ldr	r3, [r4, #20]
 800491e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004926:	22c0      	movs	r2, #192	@ 0xc0
 8004928:	2312      	movs	r3, #18
 800492a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800492e:	2103      	movs	r1, #3
 8004930:	2304      	movs	r3, #4
 8004932:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004936:	a903      	add	r1, sp, #12
 8004938:	f001 f986 	bl	8005c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800493c:	69e3      	ldr	r3, [r4, #28]
 800493e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004942:	61e3      	str	r3, [r4, #28]
 8004944:	69e3      	ldr	r3, [r4, #28]
 8004946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494a:	9302      	str	r3, [sp, #8]
 800494c:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800494e:	b008      	add	sp, #32
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	40005400 	.word	0x40005400
 8004958:	40021000 	.word	0x40021000
 800495c:	48000400 	.word	0x48000400

08004960 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004960:	6802      	ldr	r2, [r0, #0]
 8004962:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <HAL_RTC_MspInit+0x20>)
 8004964:	429a      	cmp	r2, r3
 8004966:	d10a      	bne.n	800497e <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800496c:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <HAL_RTC_MspInit+0x24>)
 8004972:	fab2 f282 	clz	r2, r2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800497e:	4770      	bx	lr
 8004980:	40002800 	.word	0x40002800
 8004984:	10908100 	.word	0x10908100

08004988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004988:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498a:	2214      	movs	r2, #20
{
 800498c:	b08a      	sub	sp, #40	@ 0x28
 800498e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004990:	2100      	movs	r1, #0
 8004992:	eb0d 0002 	add.w	r0, sp, r2
 8004996:	f007 f9f5 	bl	800bd84 <memset>
  if(hspi->Instance==SPI1)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <HAL_SPI_MspInit+0x90>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d120      	bne.n	80049e4 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049a2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a1c <HAL_SPI_MspInit+0x94>)
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049aa:	619a      	str	r2, [r3, #24]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80049b2:	9201      	str	r2, [sp, #4]
 80049b4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80049bc:	615a      	str	r2, [r3, #20]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c4:	9302      	str	r3, [sp, #8]
 80049c6:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80049c8:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049ce:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049d2:	2305      	movs	r3, #5
 80049d4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d8:	4811      	ldr	r0, [pc, #68]	@ (8004a20 <HAL_SPI_MspInit+0x98>)
 80049da:	a905      	add	r1, sp, #20
 80049dc:	f001 f934 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80049e0:	b00a      	add	sp, #40	@ 0x28
 80049e2:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80049e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a24 <HAL_SPI_MspInit+0x9c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d1fa      	bne.n	80049e0 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049ea:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <HAL_SPI_MspInit+0x94>)
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049f2:	61da      	str	r2, [r3, #28]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80049fa:	9203      	str	r2, [sp, #12]
 80049fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004a04:	615a      	str	r2, [r3, #20]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004a10:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004a14:	e7d9      	b.n	80049ca <HAL_SPI_MspInit+0x42>
 8004a16:	bf00      	nop
 8004a18:	40013000 	.word	0x40013000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	48000400 	.word	0x48000400
 8004a24:	40003800 	.word	0x40003800

08004a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a28:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <HAL_TIM_Base_MspInit+0x3c>)
 8004a2c:	6802      	ldr	r2, [r0, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d115      	bne.n	8004a5e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a32:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004a36:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	f042 0202 	orr.w	r2, r2, #2
 8004a3e:	61da      	str	r2, [r3, #28]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a4c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004a4e:	f000 ffd7 	bl	8005a00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a52:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004a54:	b003      	add	sp, #12
 8004a56:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a5a:	f001 b803 	b.w	8005a64 <HAL_NVIC_EnableIRQ>
}
 8004a5e:	b003      	add	sp, #12
 8004a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a64:	40000400 	.word	0x40000400

08004a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a68:	b530      	push	{r4, r5, lr}
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6e:	2214      	movs	r2, #20
 8004a70:	2100      	movs	r1, #0
 8004a72:	a807      	add	r0, sp, #28
 8004a74:	f007 f986 	bl	800bd84 <memset>
  if(huart->Instance==USART1)
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	4a59      	ldr	r2, [pc, #356]	@ (8004be0 <HAL_UART_MspInit+0x178>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d14d      	bne.n	8004b1c <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a80:	4b58      	ldr	r3, [pc, #352]	@ (8004be4 <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004a82:	4c59      	ldr	r4, [pc, #356]	@ (8004be8 <HAL_UART_MspInit+0x180>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a8a:	619a      	str	r2, [r3, #24]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004a92:	9201      	str	r2, [sp, #4]
 8004a94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004a9c:	615a      	str	r2, [r3, #20]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aaa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aac:	2302      	movs	r3, #2
 8004aae:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004abe:	a907      	add	r1, sp, #28
 8004ac0:	f001 f8c2 	bl	8005c48 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ac4:	4849      	ldr	r0, [pc, #292]	@ (8004bec <HAL_UART_MspInit+0x184>)
 8004ac6:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ac8:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aca:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ace:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004ad2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004ad4:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ad6:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ada:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004adc:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004ade:	f000 ffef 	bl	8005ac0 <HAL_DMA_Init>
 8004ae2:	b108      	cbz	r0, 8004ae8 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004ae4:	f7fe ff61 	bl	80039aa <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ae8:	f8df e124 	ldr.w	lr, [pc, #292]	@ 8004c10 <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004aec:	676c      	str	r4, [r5, #116]	@ 0x74
 8004aee:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004af0:	4c3f      	ldr	r4, [pc, #252]	@ (8004bf0 <HAL_UART_MspInit+0x188>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004af2:	2310      	movs	r3, #16
 8004af4:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004af8:	2280      	movs	r2, #128	@ 0x80
 8004afa:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004afc:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004afe:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b02:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b06:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b0a:	f000 ffd9 	bl	8005ac0 <HAL_DMA_Init>
 8004b0e:	b108      	cbz	r0, 8004b14 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8004b10:	f7fe ff4b 	bl	80039aa <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004b14:	672c      	str	r4, [r5, #112]	@ 0x70
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004b16:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b18:	b00d      	add	sp, #52	@ 0x34
 8004b1a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8004b1c:	4a35      	ldr	r2, [pc, #212]	@ (8004bf4 <HAL_UART_MspInit+0x18c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d137      	bne.n	8004b92 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b22:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <HAL_UART_MspInit+0x17c>)
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004b2a:	61da      	str	r2, [r3, #28]
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004b32:	9203      	str	r2, [sp, #12]
 8004b34:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004b3c:	615a      	str	r2, [r3, #20]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	240c      	movs	r4, #12
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b50:	f04f 0c03 	mov.w	ip, #3
 8004b54:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b56:	a907      	add	r1, sp, #28
 8004b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b5c:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004b60:	4c25      	ldr	r4, [pc, #148]	@ (8004bf8 <HAL_UART_MspInit+0x190>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b62:	f001 f871 	bl	8005c48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004b66:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_UART_MspInit+0x194>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004b68:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b6a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b6c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b6e:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b72:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b76:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b7e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 ff9c 	bl	8005ac0 <HAL_DMA_Init>
 8004b88:	b108      	cbz	r0, 8004b8e <HAL_UART_MspInit+0x126>
      Error_Handler();
 8004b8a:	f7fe ff0e 	bl	80039aa <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004b8e:	676c      	str	r4, [r5, #116]	@ 0x74
 8004b90:	e7c1      	b.n	8004b16 <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_UART_MspInit+0x198>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d1bf      	bne.n	8004b18 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_UART_MspInit+0x17c>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004b9a:	4c1a      	ldr	r4, [pc, #104]	@ (8004c04 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004ba2:	61da      	str	r2, [r3, #28]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004baa:	9205      	str	r2, [sp, #20]
 8004bac:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004bb4:	615a      	str	r2, [r3, #20]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bbc:	9306      	str	r3, [sp, #24]
 8004bbe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bca:	2003      	movs	r0, #3
 8004bcc:	2307      	movs	r3, #7
 8004bce:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd2:	a907      	add	r1, sp, #28
 8004bd4:	480c      	ldr	r0, [pc, #48]	@ (8004c08 <HAL_UART_MspInit+0x1a0>)
 8004bd6:	f001 f837 	bl	8005c48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004bda:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_UART_MspInit+0x1a4>)
 8004bdc:	e7c4      	b.n	8004b68 <HAL_UART_MspInit+0x100>
 8004bde:	bf00      	nop
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	20001d6c 	.word	0x20001d6c
 8004bec:	40020058 	.word	0x40020058
 8004bf0:	20001d28 	.word	0x20001d28
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	20001ce4 	.word	0x20001ce4
 8004bfc:	4002006c 	.word	0x4002006c
 8004c00:	40004800 	.word	0x40004800
 8004c04:	20001ca0 	.word	0x20001ca0
 8004c08:	48000400 	.word	0x48000400
 8004c0c:	40020030 	.word	0x40020030
 8004c10:	40020044 	.word	0x40020044

08004c14 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <HAL_InitTick+0x88>)
{
 8004c16:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	61da      	str	r2, [r3, #28]
 8004c20:	69db      	ldr	r3, [r3, #28]
{
 8004c22:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	9302      	str	r3, [sp, #8]
{
 8004c2a:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c2c:	a901      	add	r1, sp, #4
 8004c2e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004c30:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c32:	f001 fcd3 	bl	80065dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c36:	9b06      	ldr	r3, [sp, #24]
 8004c38:	bb53      	cbnz	r3, 8004c90 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f001 fc9f 	bl	800657c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004c3e:	4e18      	ldr	r6, [pc, #96]	@ (8004ca0 <HAL_InitTick+0x8c>)
 8004c40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004c44:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004c46:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004c4a:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <HAL_InitTick+0x90>)
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004c54:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8004c56:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c5c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c5e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004c60:	f002 fd0a 	bl	8007678 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004c64:	4604      	mov	r4, r0
 8004c66:	b980      	cbnz	r0, 8004c8a <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f002 fbc7 	bl	80073fc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004c6e:	4604      	mov	r4, r0
 8004c70:	b958      	cbnz	r0, 8004c8a <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c72:	201c      	movs	r0, #28
 8004c74:	f000 fef6 	bl	8005a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c78:	2d0f      	cmp	r5, #15
 8004c7a:	d80d      	bhi.n	8004c98 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	201c      	movs	r0, #28
 8004c82:	f000 febd 	bl	8005a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c86:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <HAL_InitTick+0x94>)
 8004c88:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	b008      	add	sp, #32
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c90:	f001 fc74 	bl	800657c <HAL_RCC_GetPCLK1Freq>
 8004c94:	0040      	lsls	r0, r0, #1
 8004c96:	e7d2      	b.n	8004c3e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8004c98:	2401      	movs	r4, #1
 8004c9a:	e7f6      	b.n	8004c8a <HAL_InitTick+0x76>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	2000344c 	.word	0x2000344c
 8004ca4:	000f4240 	.word	0x000f4240
 8004ca8:	2000001c 	.word	0x2000001c

08004cac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cac:	e7fe      	b.n	8004cac <NMI_Handler>

08004cae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cae:	e7fe      	b.n	8004cae <HardFault_Handler>

08004cb0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cb0:	e7fe      	b.n	8004cb0 <MemManage_Handler>

08004cb2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cb2:	e7fe      	b.n	8004cb2 <BusFault_Handler>

08004cb4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cb4:	e7fe      	b.n	8004cb4 <UsageFault_Handler>

08004cb6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cb6:	4770      	bx	lr

08004cb8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004cb8:	4801      	ldr	r0, [pc, #4]	@ (8004cc0 <DMA1_Channel3_IRQHandler+0x8>)
 8004cba:	f000 bf7d 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004cbe:	bf00      	nop
 8004cc0:	20001ca0 	.word	0x20001ca0

08004cc4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004cc4:	4801      	ldr	r0, [pc, #4]	@ (8004ccc <DMA1_Channel4_IRQHandler+0x8>)
 8004cc6:	f000 bf77 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004cca:	bf00      	nop
 8004ccc:	20001d28 	.word	0x20001d28

08004cd0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004cd0:	4801      	ldr	r0, [pc, #4]	@ (8004cd8 <DMA1_Channel5_IRQHandler+0x8>)
 8004cd2:	f000 bf71 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004cd6:	bf00      	nop
 8004cd8:	20001d6c 	.word	0x20001d6c

08004cdc <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004cdc:	4801      	ldr	r0, [pc, #4]	@ (8004ce4 <DMA1_Channel6_IRQHandler+0x8>)
 8004cde:	f000 bf6b 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004ce2:	bf00      	nop
 8004ce4:	20001ce4 	.word	0x20001ce4

08004ce8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <TIM2_IRQHandler+0x8>)
 8004cea:	f002 bbc1 	b.w	8007470 <HAL_TIM_IRQHandler>
 8004cee:	bf00      	nop
 8004cf0:	2000344c 	.word	0x2000344c

08004cf4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <TIM3_IRQHandler+0x8>)
 8004cf6:	f002 bbbb 	b.w	8007470 <HAL_TIM_IRQHandler>
 8004cfa:	bf00      	nop
 8004cfc:	20001f48 	.word	0x20001f48

08004d00 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004d00:	4801      	ldr	r0, [pc, #4]	@ (8004d08 <ADC3_IRQHandler+0x8>)
 8004d02:	f000 ba81 	b.w	8005208 <HAL_ADC_IRQHandler>
 8004d06:	bf00      	nop
 8004d08:	20002158 	.word	0x20002158

08004d0c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004d0c:	4801      	ldr	r0, [pc, #4]	@ (8004d14 <DMA2_Channel1_IRQHandler+0x8>)
 8004d0e:	f000 bf53 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004d12:	bf00      	nop
 8004d14:	20002114 	.word	0x20002114

08004d18 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004d18:	4801      	ldr	r0, [pc, #4]	@ (8004d20 <DMA2_Channel5_IRQHandler+0x8>)
 8004d1a:	f000 bf4d 	b.w	8005bb8 <HAL_DMA_IRQHandler>
 8004d1e:	bf00      	nop
 8004d20:	200020d0 	.word	0x200020d0

08004d24 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004d24:	2001      	movs	r0, #1
 8004d26:	4770      	bx	lr

08004d28 <_kill>:

int _kill(int pid, int sig)
{
 8004d28:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d2a:	f007 fea3 	bl	800ca74 <__errno>
 8004d2e:	2316      	movs	r3, #22
 8004d30:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295
 8004d36:	bd08      	pop	{r3, pc}

08004d38 <_exit>:

void _exit (int status)
{
 8004d38:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004d3a:	f007 fe9b 	bl	800ca74 <__errno>
 8004d3e:	2316      	movs	r3, #22
 8004d40:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004d42:	e7fe      	b.n	8004d42 <_exit+0xa>

08004d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	460d      	mov	r5, r1
 8004d48:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d4a:	460e      	mov	r6, r1
 8004d4c:	1b73      	subs	r3, r6, r5
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	dc01      	bgt.n	8004d56 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004d52:	4620      	mov	r0, r4
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004d56:	f3af 8000 	nop.w
 8004d5a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5e:	e7f5      	b.n	8004d4c <_read+0x8>

08004d60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	460d      	mov	r5, r1
 8004d64:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d66:	460e      	mov	r6, r1
 8004d68:	1b73      	subs	r3, r6, r5
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	dc01      	bgt.n	8004d72 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004d6e:	4620      	mov	r0, r4
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004d72:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004d76:	f7fe fad9 	bl	800332c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7a:	e7f5      	b.n	8004d68 <_write+0x8>

08004d7c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	4770      	bx	lr

08004d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d86:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4770      	bx	lr

08004d8c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	4770      	bx	lr

08004d90 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004d90:	2000      	movs	r0, #0
 8004d92:	4770      	bx	lr

08004d94 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d94:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc4 <_sbrk+0x30>)
 8004d96:	6811      	ldr	r1, [r2, #0]
{
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004d9c:	b909      	cbnz	r1, 8004da2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004d9e:	490a      	ldr	r1, [pc, #40]	@ (8004dc8 <_sbrk+0x34>)
 8004da0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004da2:	6810      	ldr	r0, [r2, #0]
 8004da4:	4909      	ldr	r1, [pc, #36]	@ (8004dcc <_sbrk+0x38>)
 8004da6:	4c0a      	ldr	r4, [pc, #40]	@ (8004dd0 <_sbrk+0x3c>)
 8004da8:	4403      	add	r3, r0
 8004daa:	1b09      	subs	r1, r1, r4
 8004dac:	428b      	cmp	r3, r1
 8004dae:	d906      	bls.n	8004dbe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004db0:	f007 fe60 	bl	800ca74 <__errno>
 8004db4:	230c      	movs	r3, #12
 8004db6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004dbc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004dbe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004dc0:	e7fc      	b.n	8004dbc <_sbrk+0x28>
 8004dc2:	bf00      	nop
 8004dc4:	2000349c 	.word	0x2000349c
 8004dc8:	200085a8 	.word	0x200085a8
 8004dcc:	2000a000 	.word	0x2000a000
 8004dd0:	00000400 	.word	0x00000400

08004dd4 <Uint32ToHex>:

uint32_t current_addr_debug = DEBUG_START_ADDRESS;
uint8_t output_debug_buffer[512] = {0};


void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 8004dd4:	b530      	push	{r4, r5, lr}
 8004dd6:	1e54      	subs	r4, r2, #1
 8004dd8:	1e4d      	subs	r5, r1, #1
 8004dda:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 8004ddc:	1d23      	adds	r3, r4, #4
 8004dde:	d102      	bne.n	8004de6 <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 8004de0:	2300      	movs	r3, #0
 8004de2:	548b      	strb	r3, [r1, r2]
}
 8004de4:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 8004de6:	fa20 f304 	lsr.w	r3, r0, r4
 8004dea:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	bf94      	ite	ls
 8004df2:	3330      	addls	r3, #48	@ 0x30
 8004df4:	3337      	addhi	r3, #55	@ 0x37
 8004df6:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 8004dfa:	3c04      	subs	r4, #4
 8004dfc:	e7ee      	b.n	8004ddc <Uint32ToHex+0x8>
	...

08004e00 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e00:	4a03      	ldr	r2, [pc, #12]	@ (8004e10 <SystemInit+0x10>)
 8004e02:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e0e:	4770      	bx	lr
 8004e10:	e000ed00 	.word	0xe000ed00

08004e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e18:	f7ff fff2 	bl	8004e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e1c:	480c      	ldr	r0, [pc, #48]	@ (8004e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e1e:	490d      	ldr	r1, [pc, #52]	@ (8004e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e20:	4a0d      	ldr	r2, [pc, #52]	@ (8004e58 <LoopForever+0xe>)
  movs r3, #0
 8004e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e24:	e002      	b.n	8004e2c <LoopCopyDataInit>

08004e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e2a:	3304      	adds	r3, #4

08004e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e30:	d3f9      	bcc.n	8004e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e32:	4a0a      	ldr	r2, [pc, #40]	@ (8004e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e34:	4c0a      	ldr	r4, [pc, #40]	@ (8004e60 <LoopForever+0x16>)
  movs r3, #0
 8004e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e38:	e001      	b.n	8004e3e <LoopFillZerobss>

08004e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e3c:	3204      	adds	r2, #4

08004e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e40:	d3fb      	bcc.n	8004e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e42:	f007 fe1d 	bl	800ca80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e46:	f7fe fb23 	bl	8003490 <main>

08004e4a <LoopForever>:

LoopForever:
    b LoopForever
 8004e4a:	e7fe      	b.n	8004e4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e4c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e54:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004e58:	08012240 	.word	0x08012240
  ldr r2, =_sbss
 8004e5c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004e60:	200085a8 	.word	0x200085a8

08004e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e64:	e7fe      	b.n	8004e64 <ADC1_2_IRQHandler>

08004e66 <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8004e66:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004e68:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004e6a:	f7fe fd9e 	bl	80039aa <Error_Handler>
 8004e6e:	e7fe      	b.n	8004e6e <__cxa_guard_abort.part.0+0x8>

08004e70 <stm32_lock_acquire>:
{
 8004e70:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004e72:	7a03      	ldrb	r3, [r0, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d903      	bls.n	8004e80 <stm32_lock_acquire+0x10>
 8004e78:	b672      	cpsid	i
 8004e7a:	f7fe fd96 	bl	80039aa <Error_Handler>
 8004e7e:	e7fe      	b.n	8004e7e <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e84:	f3ef 8211 	mrs	r2, BASEPRI
 8004e88:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8004e8c:	f381 8811 	msr	BASEPRI, r1
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004e9c:	bd08      	pop	{r3, pc}

08004e9e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004e9e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8004ea0:	7a03      	ldrb	r3, [r0, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004ea6:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8004ea8:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004eaa:	d903      	bls.n	8004eb4 <stm32_lock_release+0x16>
 8004eac:	b672      	cpsid	i
 8004eae:	f7fe fd7c 	bl	80039aa <Error_Handler>
 8004eb2:	e7fe      	b.n	8004eb2 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8004ebc:	bd08      	pop	{r3, pc}

08004ebe <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8004ebe:	b510      	push	{r4, lr}
  if (lock == NULL)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	b920      	cbnz	r0, 8004ece <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8004ec4:	f007 fdd6 	bl	800ca74 <__errno>
 8004ec8:	2316      	movs	r3, #22
 8004eca:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8004ecc:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8004ece:	200c      	movs	r0, #12
 8004ed0:	f004 ff00 	bl	8009cd4 <malloc>
 8004ed4:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8004ed6:	b120      	cbz	r0, 8004ee2 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8004ede:	7203      	strb	r3, [r0, #8]
}
 8004ee0:	e7f4      	b.n	8004ecc <__retarget_lock_init_recursive+0xe>
 8004ee2:	f7ff ffc0 	bl	8004e66 <__cxa_guard_abort.part.0>

08004ee6 <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8004ee6:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004ee8:	b908      	cbnz	r0, 8004eee <__retarget_lock_acquire+0x8>
 8004eea:	f7ff ffbc 	bl	8004e66 <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8004eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004ef2:	f7ff bfbd 	b.w	8004e70 <stm32_lock_acquire>

08004ef6 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8004ef6:	f7ff bff6 	b.w	8004ee6 <__retarget_lock_acquire>

08004efa <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8004efa:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004efc:	b918      	cbnz	r0, 8004f06 <__retarget_lock_release+0xc>
 8004efe:	b672      	cpsid	i
 8004f00:	f7fe fd53 	bl	80039aa <Error_Handler>
 8004f04:	e7fe      	b.n	8004f04 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8004f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004f0a:	f7ff bfc8 	b.w	8004e9e <stm32_lock_release>

08004f0e <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8004f0e:	f7ff bff4 	b.w	8004efa <__retarget_lock_release>
	...

08004f14 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f14:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <HAL_Init+0x20>)
{
 8004f16:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f18:	6813      	ldr	r3, [r2, #0]
 8004f1a:	f043 0310 	orr.w	r3, r3, #16
 8004f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f20:	2003      	movs	r0, #3
 8004f22:	f000 fd5b 	bl	80059dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f26:	200f      	movs	r0, #15
 8004f28:	f7ff fe74 	bl	8004c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f2c:	f7ff fc30 	bl	8004790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004f30:	2000      	movs	r0, #0
 8004f32:	bd08      	pop	{r3, pc}
 8004f34:	40022000 	.word	0x40022000

08004f38 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004f38:	4a03      	ldr	r2, [pc, #12]	@ (8004f48 <HAL_IncTick+0x10>)
 8004f3a:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <HAL_IncTick+0x14>)
 8004f3c:	6811      	ldr	r1, [r2, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	440b      	add	r3, r1
 8004f42:	6013      	str	r3, [r2, #0]
}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	200034d0 	.word	0x200034d0
 8004f4c:	20000018 	.word	0x20000018

08004f50 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004f50:	4b01      	ldr	r3, [pc, #4]	@ (8004f58 <HAL_GetTick+0x8>)
 8004f52:	6818      	ldr	r0, [r3, #0]
}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	200034d0 	.word	0x200034d0

08004f5c <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8004f5c:	4770      	bx	lr

08004f5e <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004f60:	4770      	bx	lr

08004f62 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004f62:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004f64:	6803      	ldr	r3, [r0, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	f002 0203 	and.w	r2, r2, #3
 8004f6c:	2a01      	cmp	r2, #1
{
 8004f6e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004f70:	d001      	beq.n	8004f76 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f72:	2000      	movs	r0, #0
}
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	07d1      	lsls	r1, r2, #31
 8004f7a:	d5fa      	bpl.n	8004f72 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	f002 020d 	and.w	r2, r2, #13
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	d115      	bne.n	8004fb2 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	f042 0202 	orr.w	r2, r2, #2
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004f92:	f7ff ffdd 	bl	8004f50 <HAL_GetTick>
 8004f96:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d5e8      	bpl.n	8004f72 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fa0:	f7ff ffd6 	bl	8004f50 <HAL_GetTick>
 8004fa4:	1b40      	subs	r0, r0, r5
 8004fa6:	2802      	cmp	r0, #2
 8004fa8:	d9f6      	bls.n	8004f98 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d5f2      	bpl.n	8004f98 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fb4:	f043 0310 	orr.w	r3, r3, #16
 8004fb8:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	e7d6      	b.n	8004f74 <ADC_Disable+0x12>
	...

08004fc8 <HAL_ADC_Init>:
{
 8004fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	f000 8103 	beq.w	80051dc <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fd6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004fd8:	06d5      	lsls	r5, r2, #27
 8004fda:	d46a      	bmi.n	80050b2 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004fdc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d035      	beq.n	800504e <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe2:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	00d2      	lsls	r2, r2, #3
 8004fea:	d502      	bpl.n	8004ff2 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004fec:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004fee:	009d      	lsls	r5, r3, #2
 8004ff0:	d50a      	bpl.n	8005008 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8004ff2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ff4:	f023 0312 	bic.w	r3, r3, #18
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8005006:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800500a:	06d9      	lsls	r1, r3, #27
 800500c:	f100 80e0 	bmi.w	80051d0 <HAL_ADC_Init+0x208>
 8005010:	2800      	cmp	r0, #0
 8005012:	f040 80dd 	bne.w	80051d0 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800501a:	0752      	lsls	r2, r2, #29
 800501c:	f100 80d8 	bmi.w	80051d0 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8005020:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005022:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8005026:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800502a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800502e:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005030:	4a6b      	ldr	r2, [pc, #428]	@ (80051e0 <HAL_ADC_Init+0x218>)
 8005032:	d042      	beq.n	80050ba <HAL_ADC_Init+0xf2>
 8005034:	4293      	cmp	r3, r2
 8005036:	d03e      	beq.n	80050b6 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005038:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800503c:	4293      	cmp	r3, r2
 800503e:	4969      	ldr	r1, [pc, #420]	@ (80051e4 <HAL_ADC_Init+0x21c>)
 8005040:	f000 80b3 	beq.w	80051aa <HAL_ADC_Init+0x1e2>
 8005044:	428b      	cmp	r3, r1
 8005046:	bf18      	it	ne
 8005048:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800504a:	4967      	ldr	r1, [pc, #412]	@ (80051e8 <HAL_ADC_Init+0x220>)
 800504c:	e036      	b.n	80050bc <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 800504e:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8005052:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8005054:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8005058:	f7ff fbb8 	bl	80047cc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	00d8      	lsls	r0, r3, #3
 8005062:	d4be      	bmi.n	8004fe2 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff ff7c 	bl	8004f62 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800506a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800506c:	06d1      	lsls	r1, r2, #27
 800506e:	d4b9      	bmi.n	8004fe4 <HAL_ADC_Init+0x1c>
 8005070:	2800      	cmp	r0, #0
 8005072:	d1b7      	bne.n	8004fe4 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8005074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005076:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005078:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800507c:	f023 0302 	bic.w	r3, r3, #2
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005086:	6893      	ldr	r3, [r2, #8]
 8005088:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800508c:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800508e:	6893      	ldr	r3, [r2, #8]
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005096:	4b55      	ldr	r3, [pc, #340]	@ (80051ec <HAL_ADC_Init+0x224>)
 8005098:	4a55      	ldr	r2, [pc, #340]	@ (80051f0 <HAL_ADC_Init+0x228>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a0:	220a      	movs	r2, #10
 80050a2:	4353      	muls	r3, r2
            wait_loop_index--;
 80050a4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80050a6:	9b01      	ldr	r3, [sp, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d09a      	beq.n	8004fe2 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	e7f8      	b.n	80050a4 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b2:	4618      	mov	r0, r3
 80050b4:	e7a8      	b.n	8005008 <HAL_ADC_Init+0x40>
 80050b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050ba:	494e      	ldr	r1, [pc, #312]	@ (80051f4 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80050bc:	689d      	ldr	r5, [r3, #8]
 80050be:	f005 0503 	and.w	r5, r5, #3
 80050c2:	2d01      	cmp	r5, #1
 80050c4:	d102      	bne.n	80050cc <HAL_ADC_Init+0x104>
 80050c6:	681d      	ldr	r5, [r3, #0]
 80050c8:	07ed      	lsls	r5, r5, #31
 80050ca:	d40e      	bmi.n	80050ea <HAL_ADC_Init+0x122>
 80050cc:	b13a      	cbz	r2, 80050de <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80050ce:	6895      	ldr	r5, [r2, #8]
 80050d0:	f005 0503 	and.w	r5, r5, #3
 80050d4:	2d01      	cmp	r5, #1
 80050d6:	d102      	bne.n	80050de <HAL_ADC_Init+0x116>
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d405      	bmi.n	80050ea <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80050de:	688a      	ldr	r2, [r1, #8]
 80050e0:	6865      	ldr	r5, [r4, #4]
 80050e2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80050e6:	432a      	orrs	r2, r5
 80050e8:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80050ea:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050f2:	7e65      	ldrb	r5, [r4, #25]
 80050f4:	3901      	subs	r1, #1
 80050f6:	bf18      	it	ne
 80050f8:	2101      	movne	r1, #1
 80050fa:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80050fe:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005102:	f894 1020 	ldrb.w	r1, [r4, #32]
 8005106:	2901      	cmp	r1, #1
 8005108:	d107      	bne.n	800511a <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800510a:	2d00      	cmp	r5, #0
 800510c:	d14f      	bne.n	80051ae <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800510e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005110:	3901      	subs	r1, #1
 8005112:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8005116:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800511a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800511c:	2901      	cmp	r1, #1
 800511e:	d015      	beq.n	800514c <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005120:	4d35      	ldr	r5, [pc, #212]	@ (80051f8 <HAL_ADC_Init+0x230>)
 8005122:	42ab      	cmp	r3, r5
 8005124:	d003      	beq.n	800512e <HAL_ADC_Init+0x166>
 8005126:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800512a:	42ab      	cmp	r3, r5
 800512c:	d10a      	bne.n	8005144 <HAL_ADC_Init+0x17c>
 800512e:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8005132:	d047      	beq.n	80051c4 <HAL_ADC_Init+0x1fc>
 8005134:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005138:	d047      	beq.n	80051ca <HAL_ADC_Init+0x202>
 800513a:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 800513e:	bf08      	it	eq
 8005140:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8005144:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005146:	4315      	orrs	r5, r2
 8005148:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800514c:	6899      	ldr	r1, [r3, #8]
 800514e:	f011 0f0c 	tst.w	r1, #12
 8005152:	d10c      	bne.n	800516e <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800515a:	f021 0102 	bic.w	r1, r1, #2
 800515e:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005160:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8005164:	7e25      	ldrb	r5, [r4, #24]
 8005166:	0049      	lsls	r1, r1, #1
 8005168:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800516c:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800516e:	68dd      	ldr	r5, [r3, #12]
 8005170:	4922      	ldr	r1, [pc, #136]	@ (80051fc <HAL_ADC_Init+0x234>)
 8005172:	4029      	ands	r1, r5
 8005174:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005176:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005178:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800517a:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800517c:	bf05      	ittet	eq
 800517e:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8005180:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005182:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005184:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005188:	bf06      	itte	eq
 800518a:	f021 010f 	biceq.w	r1, r1, #15
 800518e:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005190:	f022 020f 	bicne.w	r2, r2, #15
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8005196:	2300      	movs	r3, #0
 8005198:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800519a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800519c:	f023 0303 	bic.w	r3, r3, #3
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80051a6:	b003      	add	sp, #12
 80051a8:	bd30      	pop	{r4, r5, pc}
 80051aa:	460a      	mov	r2, r1
 80051ac:	e74d      	b.n	800504a <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 80051ae:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80051b0:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 80051b4:	f041 0120 	orr.w	r1, r1, #32
 80051b8:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ba:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80051bc:	f041 0101 	orr.w	r1, r1, #1
 80051c0:	6461      	str	r1, [r4, #68]	@ 0x44
 80051c2:	e7aa      	b.n	800511a <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80051c4:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80051c8:	e7bc      	b.n	8005144 <HAL_ADC_Init+0x17c>
 80051ca:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80051ce:	e7b9      	b.n	8005144 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 80051d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051d2:	f023 0312 	bic.w	r3, r3, #18
 80051d6:	f043 0310 	orr.w	r3, r3, #16
 80051da:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
 80051de:	e7e2      	b.n	80051a6 <HAL_ADC_Init+0x1de>
 80051e0:	50000100 	.word	0x50000100
 80051e4:	50000500 	.word	0x50000500
 80051e8:	50000700 	.word	0x50000700
 80051ec:	20000014 	.word	0x20000014
 80051f0:	000f4240 	.word	0x000f4240
 80051f4:	50000300 	.word	0x50000300
 80051f8:	50000400 	.word	0x50000400
 80051fc:	fff0c007 	.word	0xfff0c007

08005200 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8005200:	4770      	bx	lr

08005202 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8005202:	4770      	bx	lr

08005204 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8005204:	4770      	bx	lr

08005206 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8005206:	4770      	bx	lr

08005208 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005208:	6803      	ldr	r3, [r0, #0]
{
 800520a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800520c:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800520e:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005210:	076a      	lsls	r2, r5, #29
{
 8005212:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005214:	d501      	bpl.n	800521a <HAL_ADC_IRQHandler+0x12>
 8005216:	0770      	lsls	r0, r6, #29
 8005218:	d403      	bmi.n	8005222 <HAL_ADC_IRQHandler+0x1a>
 800521a:	0729      	lsls	r1, r5, #28
 800521c:	d543      	bpl.n	80052a6 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800521e:	0732      	lsls	r2, r6, #28
 8005220:	d541      	bpl.n	80052a6 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005222:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005224:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005226:	bf5e      	ittt	pl
 8005228:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 800522a:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 800522e:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005234:	d003      	beq.n	800523e <HAL_ADC_IRQHandler+0x36>
 8005236:	4a90      	ldr	r2, [pc, #576]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 8005238:	4293      	cmp	r3, r2
 800523a:	f040 8105 	bne.w	8005448 <HAL_ADC_IRQHandler+0x240>
 800523e:	4a8f      	ldr	r2, [pc, #572]	@ (800547c <HAL_ADC_IRQHandler+0x274>)
 8005240:	6891      	ldr	r1, [r2, #8]
 8005242:	06c9      	lsls	r1, r1, #27
 8005244:	d00c      	beq.n	8005260 <HAL_ADC_IRQHandler+0x58>
 8005246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800524a:	d003      	beq.n	8005254 <HAL_ADC_IRQHandler+0x4c>
 800524c:	498a      	ldr	r1, [pc, #552]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 800524e:	428b      	cmp	r3, r1
 8005250:	f040 80ff 	bne.w	8005452 <HAL_ADC_IRQHandler+0x24a>
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	f002 021f 	and.w	r2, r2, #31
 800525a:	2a05      	cmp	r2, #5
 800525c:	f040 8114 	bne.w	8005488 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005260:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005262:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8005264:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005268:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800526c:	4311      	orrs	r1, r2
 800526e:	d114      	bne.n	800529a <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8005270:	0729      	lsls	r1, r5, #28
 8005272:	d512      	bpl.n	800529a <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	0752      	lsls	r2, r2, #29
 8005278:	f100 8122 	bmi.w	80054c0 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	f022 020c 	bic.w	r2, r2, #12
 8005282:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800528a:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800528c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800528e:	04d8      	lsls	r0, r3, #19
 8005290:	d403      	bmi.n	800529a <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005292:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff fe5e 	bl	8004f5c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	220c      	movs	r2, #12
 80052a4:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80052a6:	06a9      	lsls	r1, r5, #26
 80052a8:	d501      	bpl.n	80052ae <HAL_ADC_IRQHandler+0xa6>
 80052aa:	06b2      	lsls	r2, r6, #26
 80052ac:	d403      	bmi.n	80052b6 <HAL_ADC_IRQHandler+0xae>
 80052ae:	066b      	lsls	r3, r5, #25
 80052b0:	d562      	bpl.n	8005378 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80052b2:	0670      	lsls	r0, r6, #25
 80052b4:	d560      	bpl.n	8005378 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052bc:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052c4:	d003      	beq.n	80052ce <HAL_ADC_IRQHandler+0xc6>
 80052c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	f040 8102 	bne.w	80054d2 <HAL_ADC_IRQHandler+0x2ca>
 80052ce:	4a6b      	ldr	r2, [pc, #428]	@ (800547c <HAL_ADC_IRQHandler+0x274>)
 80052d0:	6891      	ldr	r1, [r2, #8]
 80052d2:	06c9      	lsls	r1, r1, #27
 80052d4:	d00c      	beq.n	80052f0 <HAL_ADC_IRQHandler+0xe8>
 80052d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052da:	d003      	beq.n	80052e4 <HAL_ADC_IRQHandler+0xdc>
 80052dc:	4966      	ldr	r1, [pc, #408]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 80052de:	428b      	cmp	r3, r1
 80052e0:	f040 80fc 	bne.w	80054dc <HAL_ADC_IRQHandler+0x2d4>
 80052e4:	6892      	ldr	r2, [r2, #8]
 80052e6:	f002 021f 	and.w	r2, r2, #31
 80052ea:	2a05      	cmp	r2, #5
 80052ec:	f040 8108 	bne.w	8005500 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80052f0:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80052f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80052f4:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 80052f8:	d138      	bne.n	800536c <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80052fa:	0191      	lsls	r1, r2, #6
 80052fc:	d506      	bpl.n	800530c <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80052fe:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005300:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005304:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005308:	4311      	orrs	r1, r2
 800530a:	d12f      	bne.n	800536c <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800530c:	0668      	lsls	r0, r5, #25
 800530e:	d52d      	bpl.n	800536c <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005314:	d003      	beq.n	800531e <HAL_ADC_IRQHandler+0x116>
 8005316:	4a58      	ldr	r2, [pc, #352]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 8005318:	4293      	cmp	r3, r2
 800531a:	f040 810d 	bne.w	8005538 <HAL_ADC_IRQHandler+0x330>
 800531e:	4a57      	ldr	r2, [pc, #348]	@ (800547c <HAL_ADC_IRQHandler+0x274>)
 8005320:	6891      	ldr	r1, [r2, #8]
 8005322:	06c9      	lsls	r1, r1, #27
 8005324:	d00c      	beq.n	8005340 <HAL_ADC_IRQHandler+0x138>
 8005326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800532a:	d003      	beq.n	8005334 <HAL_ADC_IRQHandler+0x12c>
 800532c:	4952      	ldr	r1, [pc, #328]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 800532e:	428b      	cmp	r3, r1
 8005330:	f040 8107 	bne.w	8005542 <HAL_ADC_IRQHandler+0x33a>
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	f002 021f 	and.w	r2, r2, #31
 800533a:	2a06      	cmp	r2, #6
 800533c:	f040 8113 	bne.w	8005566 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8005340:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005342:	0291      	lsls	r1, r2, #10
 8005344:	d412      	bmi.n	800536c <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	0712      	lsls	r2, r2, #28
 800534a:	f100 8128 	bmi.w	800559e <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005354:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005356:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800535c:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800535e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005360:	05d8      	lsls	r0, r3, #23
 8005362:	d403      	bmi.n	800536c <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff ff47 	bl	8005200 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	2260      	movs	r2, #96	@ 0x60
 8005376:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005378:	0629      	lsls	r1, r5, #24
 800537a:	d50b      	bpl.n	8005394 <HAL_ADC_IRQHandler+0x18c>
 800537c:	0632      	lsls	r2, r6, #24
 800537e:	d509      	bpl.n	8005394 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff fde8 	bl	8004f5e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	2280      	movs	r2, #128	@ 0x80
 8005392:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005394:	05eb      	lsls	r3, r5, #23
 8005396:	d50c      	bpl.n	80053b2 <HAL_ADC_IRQHandler+0x1aa>
 8005398:	05f0      	lsls	r0, r6, #23
 800539a:	d50a      	bpl.n	80053b2 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800539c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800539e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a2:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80053a4:	4620      	mov	r0, r4
 80053a6:	f7ff ff2d 	bl	8005204 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053b0:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80053b2:	05a9      	lsls	r1, r5, #22
 80053b4:	d50c      	bpl.n	80053d0 <HAL_ADC_IRQHandler+0x1c8>
 80053b6:	05b2      	lsls	r2, r6, #22
 80053b8:	d50a      	bpl.n	80053d0 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80053ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053c0:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7ff ff1f 	bl	8005206 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ce:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80053d0:	06eb      	lsls	r3, r5, #27
 80053d2:	d525      	bpl.n	8005420 <HAL_ADC_IRQHandler+0x218>
 80053d4:	06f0      	lsls	r0, r6, #27
 80053d6:	d523      	bpl.n	8005420 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d012      	beq.n	8005404 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 80053e4:	f000 80e4 	beq.w	80055b0 <HAL_ADC_IRQHandler+0x3a8>
 80053e8:	4823      	ldr	r0, [pc, #140]	@ (8005478 <HAL_ADC_IRQHandler+0x270>)
 80053ea:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_ADC_IRQHandler+0x278>)
 80053ec:	4923      	ldr	r1, [pc, #140]	@ (800547c <HAL_ADC_IRQHandler+0x274>)
 80053ee:	4282      	cmp	r2, r0
 80053f0:	bf08      	it	eq
 80053f2:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	06c9      	lsls	r1, r1, #27
 80053f8:	f040 80dc 	bne.w	80055b4 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80053fc:	68d3      	ldr	r3, [r2, #12]
 80053fe:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005402:	d00a      	beq.n	800541a <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800540a:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800540c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800540e:	f043 0302 	orr.w	r3, r3, #2
 8005412:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8005414:	4620      	mov	r0, r4
 8005416:	f7ff fda3 	bl	8004f60 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005420:	056a      	lsls	r2, r5, #21
 8005422:	d510      	bpl.n	8005446 <HAL_ADC_IRQHandler+0x23e>
 8005424:	0573      	lsls	r3, r6, #21
 8005426:	d50e      	bpl.n	8005446 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005428:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800542a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800542e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005430:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005432:	f043 0308 	orr.w	r3, r3, #8
 8005436:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800543e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff fede 	bl	8005202 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8005446:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005448:	4a0d      	ldr	r2, [pc, #52]	@ (8005480 <HAL_ADC_IRQHandler+0x278>)
 800544a:	6892      	ldr	r2, [r2, #8]
 800544c:	06d0      	lsls	r0, r2, #27
 800544e:	f43f af07 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
 8005452:	4a0b      	ldr	r2, [pc, #44]	@ (8005480 <HAL_ADC_IRQHandler+0x278>)
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	f002 021f 	and.w	r2, r2, #31
 800545a:	2a05      	cmp	r2, #5
 800545c:	f43f af00 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
 8005460:	4a07      	ldr	r2, [pc, #28]	@ (8005480 <HAL_ADC_IRQHandler+0x278>)
 8005462:	6892      	ldr	r2, [r2, #8]
 8005464:	f002 021f 	and.w	r2, r2, #31
 8005468:	2a09      	cmp	r2, #9
 800546a:	f43f aef9 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
 800546e:	4a05      	ldr	r2, [pc, #20]	@ (8005484 <HAL_ADC_IRQHandler+0x27c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d123      	bne.n	80054bc <HAL_ADC_IRQHandler+0x2b4>
 8005474:	e6f4      	b.n	8005260 <HAL_ADC_IRQHandler+0x58>
 8005476:	bf00      	nop
 8005478:	50000100 	.word	0x50000100
 800547c:	50000300 	.word	0x50000300
 8005480:	50000700 	.word	0x50000700
 8005484:	50000400 	.word	0x50000400
 8005488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800548c:	d002      	beq.n	8005494 <HAL_ADC_IRQHandler+0x28c>
 800548e:	4a4b      	ldr	r2, [pc, #300]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d1e5      	bne.n	8005460 <HAL_ADC_IRQHandler+0x258>
 8005494:	4a4a      	ldr	r2, [pc, #296]	@ (80055c0 <HAL_ADC_IRQHandler+0x3b8>)
 8005496:	6892      	ldr	r2, [r2, #8]
 8005498:	f002 021f 	and.w	r2, r2, #31
 800549c:	2a09      	cmp	r2, #9
 800549e:	f43f aedf 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
 80054a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054a6:	f43f aedb 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
 80054aa:	4a46      	ldr	r2, [pc, #280]	@ (80055c4 <HAL_ADC_IRQHandler+0x3bc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	f43f aed7 	beq.w	8005260 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80054b2:	4942      	ldr	r1, [pc, #264]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf08      	it	eq
 80054b8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80054bc:	68d2      	ldr	r2, [r2, #12]
 80054be:	e6d0      	b.n	8005262 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054c2:	f043 0310 	orr.w	r3, r3, #16
 80054c6:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	6463      	str	r3, [r4, #68]	@ 0x44
 80054d0:	e6e3      	b.n	800529a <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80054d2:	4a3d      	ldr	r2, [pc, #244]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	06d0      	lsls	r0, r2, #27
 80054d8:	f43f af0a 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
 80054dc:	4a3a      	ldr	r2, [pc, #232]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 80054de:	6892      	ldr	r2, [r2, #8]
 80054e0:	f002 021f 	and.w	r2, r2, #31
 80054e4:	2a05      	cmp	r2, #5
 80054e6:	f43f af03 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
 80054ea:	4a37      	ldr	r2, [pc, #220]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 80054ec:	6892      	ldr	r2, [r2, #8]
 80054ee:	f002 021f 	and.w	r2, r2, #31
 80054f2:	2a09      	cmp	r2, #9
 80054f4:	f43f aefc 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
 80054f8:	4a32      	ldr	r2, [pc, #200]	@ (80055c4 <HAL_ADC_IRQHandler+0x3bc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d11a      	bne.n	8005534 <HAL_ADC_IRQHandler+0x32c>
 80054fe:	e6f7      	b.n	80052f0 <HAL_ADC_IRQHandler+0xe8>
 8005500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005504:	d002      	beq.n	800550c <HAL_ADC_IRQHandler+0x304>
 8005506:	4a2d      	ldr	r2, [pc, #180]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d1ee      	bne.n	80054ea <HAL_ADC_IRQHandler+0x2e2>
 800550c:	4a2c      	ldr	r2, [pc, #176]	@ (80055c0 <HAL_ADC_IRQHandler+0x3b8>)
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	f002 021f 	and.w	r2, r2, #31
 8005514:	2a09      	cmp	r2, #9
 8005516:	f43f aeeb 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
 800551a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800551e:	f43f aee7 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
 8005522:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <HAL_ADC_IRQHandler+0x3bc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	f43f aee3 	beq.w	80052f0 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800552a:	4924      	ldr	r1, [pc, #144]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 800552c:	428b      	cmp	r3, r1
 800552e:	bf08      	it	eq
 8005530:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	e6dc      	b.n	80052f2 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005538:	4a23      	ldr	r2, [pc, #140]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	06d0      	lsls	r0, r2, #27
 800553e:	f43f aeff 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
 8005542:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	f002 021f 	and.w	r2, r2, #31
 800554a:	2a06      	cmp	r2, #6
 800554c:	f43f aef8 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
 8005550:	4a1d      	ldr	r2, [pc, #116]	@ (80055c8 <HAL_ADC_IRQHandler+0x3c0>)
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	f002 021f 	and.w	r2, r2, #31
 8005558:	2a07      	cmp	r2, #7
 800555a:	f43f aef1 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
 800555e:	4a19      	ldr	r2, [pc, #100]	@ (80055c4 <HAL_ADC_IRQHandler+0x3bc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d11a      	bne.n	800559a <HAL_ADC_IRQHandler+0x392>
 8005564:	e6ec      	b.n	8005340 <HAL_ADC_IRQHandler+0x138>
 8005566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800556a:	d002      	beq.n	8005572 <HAL_ADC_IRQHandler+0x36a>
 800556c:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d1ee      	bne.n	8005550 <HAL_ADC_IRQHandler+0x348>
 8005572:	4a13      	ldr	r2, [pc, #76]	@ (80055c0 <HAL_ADC_IRQHandler+0x3b8>)
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	f002 021f 	and.w	r2, r2, #31
 800557a:	2a07      	cmp	r2, #7
 800557c:	f43f aee0 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
 8005580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005584:	f43f aedc 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
 8005588:	4a0e      	ldr	r2, [pc, #56]	@ (80055c4 <HAL_ADC_IRQHandler+0x3bc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f43f aed8 	beq.w	8005340 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005590:	490a      	ldr	r1, [pc, #40]	@ (80055bc <HAL_ADC_IRQHandler+0x3b4>)
 8005592:	428b      	cmp	r3, r1
 8005594:	bf08      	it	eq
 8005596:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 800559a:	68d2      	ldr	r2, [r2, #12]
 800559c:	e6d1      	b.n	8005342 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055a0:	f043 0310 	orr.w	r3, r3, #16
 80055a4:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6463      	str	r3, [r4, #68]	@ 0x44
 80055ae:	e6dd      	b.n	800536c <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055b0:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <HAL_ADC_IRQHandler+0x3b8>)
 80055b2:	e71f      	b.n	80053f4 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 80055ba:	e722      	b.n	8005402 <HAL_ADC_IRQHandler+0x1fa>
 80055bc:	50000100 	.word	0x50000100
 80055c0:	50000300 	.word	0x50000300
 80055c4:	50000400 	.word	0x50000400
 80055c8:	50000700 	.word	0x50000700

080055cc <HAL_ADC_ConfigChannel>:
{
 80055cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ce:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80055d4:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80055d8:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 80055da:	2b01      	cmp	r3, #1
 80055dc:	f000 816a 	beq.w	80058b4 <HAL_ADC_ConfigChannel+0x2e8>
 80055e0:	2301      	movs	r3, #1
 80055e2:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	0757      	lsls	r7, r2, #29
 80055ec:	f100 815c 	bmi.w	80058a8 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 80055f0:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 80055f2:	680c      	ldr	r4, [r1, #0]
 80055f4:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 80055f6:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 80055f8:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 80055fc:	d82c      	bhi.n	8005658 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 80055fe:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8005600:	271f      	movs	r7, #31
 8005602:	4097      	lsls	r7, r2
 8005604:	ea26 0607 	bic.w	r6, r6, r7
 8005608:	fa04 f202 	lsl.w	r2, r4, r2
 800560c:	4332      	orrs	r2, r6
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	f012 0f0c 	tst.w	r2, #12
 8005616:	d158      	bne.n	80056ca <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005618:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800561a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800561e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005622:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005626:	d93c      	bls.n	80056a2 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005628:	699f      	ldr	r7, [r3, #24]
 800562a:	3a1e      	subs	r2, #30
 800562c:	4096      	lsls	r6, r2
 800562e:	ea27 0606 	bic.w	r6, r7, r6
 8005632:	fa0c f202 	lsl.w	r2, ip, r2
 8005636:	4332      	orrs	r2, r6
 8005638:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	694e      	ldr	r6, [r1, #20]
 800563e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005642:	0052      	lsls	r2, r2, #1
 8005644:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8005646:	690a      	ldr	r2, [r1, #16]
 8005648:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 800564a:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 800564c:	2a03      	cmp	r2, #3
 800564e:	d86b      	bhi.n	8005728 <HAL_ADC_ConfigChannel+0x15c>
 8005650:	e8df f002 	tbb	[pc, r2]
 8005654:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8005658:	2e09      	cmp	r6, #9
 800565a:	d80a      	bhi.n	8005672 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 800565c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 800565e:	3a1e      	subs	r2, #30
 8005660:	271f      	movs	r7, #31
 8005662:	4097      	lsls	r7, r2
 8005664:	ea26 0607 	bic.w	r6, r6, r7
 8005668:	fa04 f202 	lsl.w	r2, r4, r2
 800566c:	4332      	orrs	r2, r6
 800566e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005670:	e7ce      	b.n	8005610 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8005672:	2e0e      	cmp	r6, #14
 8005674:	f04f 061f 	mov.w	r6, #31
 8005678:	d809      	bhi.n	800568e <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800567a:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 800567c:	3a3c      	subs	r2, #60	@ 0x3c
 800567e:	4096      	lsls	r6, r2
 8005680:	ea27 0606 	bic.w	r6, r7, r6
 8005684:	fa04 f202 	lsl.w	r2, r4, r2
 8005688:	4332      	orrs	r2, r6
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38
 800568c:	e7c0      	b.n	8005610 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800568e:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8005690:	3a5a      	subs	r2, #90	@ 0x5a
 8005692:	4096      	lsls	r6, r2
 8005694:	ea27 0606 	bic.w	r6, r7, r6
 8005698:	fa04 f202 	lsl.w	r2, r4, r2
 800569c:	4332      	orrs	r2, r6
 800569e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056a0:	e7b6      	b.n	8005610 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056a2:	695f      	ldr	r7, [r3, #20]
 80056a4:	4096      	lsls	r6, r2
 80056a6:	ea27 0606 	bic.w	r6, r7, r6
 80056aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80056ae:	ea46 060c 	orr.w	r6, r6, ip
 80056b2:	615e      	str	r6, [r3, #20]
 80056b4:	e7c1      	b.n	800563a <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80056b6:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 80056ba:	4a7f      	ldr	r2, [pc, #508]	@ (80058b8 <HAL_ADC_ConfigChannel+0x2ec>)
 80056bc:	ea0c 0202 	and.w	r2, ip, r2
 80056c0:	433a      	orrs	r2, r7
 80056c2:	4332      	orrs	r2, r6
 80056c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056c8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	f002 0203 	and.w	r2, r2, #3
 80056d0:	2a01      	cmp	r2, #1
 80056d2:	d14d      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x1a4>
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	07d6      	lsls	r6, r2, #31
 80056d8:	d54a      	bpl.n	8005770 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056da:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80056dc:	2300      	movs	r3, #0
 80056de:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 80056e2:	b003      	add	sp, #12
 80056e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80056e6:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 80056ea:	4a73      	ldr	r2, [pc, #460]	@ (80058b8 <HAL_ADC_ConfigChannel+0x2ec>)
 80056ec:	ea0c 0202 	and.w	r2, ip, r2
 80056f0:	433a      	orrs	r2, r7
 80056f2:	4332      	orrs	r2, r6
 80056f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056f8:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 80056fa:	e7e6      	b.n	80056ca <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80056fc:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005700:	4a6d      	ldr	r2, [pc, #436]	@ (80058b8 <HAL_ADC_ConfigChannel+0x2ec>)
 8005702:	ea0c 0202 	and.w	r2, ip, r2
 8005706:	433a      	orrs	r2, r7
 8005708:	4332      	orrs	r2, r6
 800570a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800570e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8005710:	e7db      	b.n	80056ca <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005712:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8005716:	4a68      	ldr	r2, [pc, #416]	@ (80058b8 <HAL_ADC_ConfigChannel+0x2ec>)
 8005718:	ea0c 0202 	and.w	r2, ip, r2
 800571c:	433a      	orrs	r2, r7
 800571e:	4332      	orrs	r2, r6
 8005720:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005724:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005726:	e7d0      	b.n	80056ca <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800572a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800572e:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005730:	bf02      	ittt	eq
 8005732:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8005734:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005738:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800573a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800573c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005740:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005742:	bf02      	ittt	eq
 8005744:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8005746:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800574a:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800574e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005752:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005754:	bf02      	ittt	eq
 8005756:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8005758:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800575c:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800575e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005760:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005764:	42ba      	cmp	r2, r7
 8005766:	d1b0      	bne.n	80056ca <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005768:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800576a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800576e:	e7d9      	b.n	8005724 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005770:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005772:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005774:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005778:	d047      	beq.n	800580a <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800577a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800577e:	ea21 0202 	bic.w	r2, r1, r2
 8005782:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800578a:	d164      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x28a>
 800578c:	494b      	ldr	r1, [pc, #300]	@ (80058bc <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800578e:	2c10      	cmp	r4, #16
 8005790:	d166      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005792:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005794:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005798:	d19f      	bne.n	80056da <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800579a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800579e:	4a48      	ldr	r2, [pc, #288]	@ (80058c0 <HAL_ADC_ConfigChannel+0x2f4>)
 80057a0:	d009      	beq.n	80057b6 <HAL_ADC_ConfigChannel+0x1ea>
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d069      	beq.n	800587a <HAL_ADC_ConfigChannel+0x2ae>
 80057a6:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80057aa:	4293      	cmp	r3, r2
 80057ac:	4845      	ldr	r0, [pc, #276]	@ (80058c4 <HAL_ADC_ConfigChannel+0x2f8>)
 80057ae:	d067      	beq.n	8005880 <HAL_ADC_ConfigChannel+0x2b4>
 80057b0:	4283      	cmp	r3, r0
 80057b2:	bf18      	it	ne
 80057b4:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80057b6:	6898      	ldr	r0, [r3, #8]
 80057b8:	f000 0003 	and.w	r0, r0, #3
 80057bc:	2801      	cmp	r0, #1
 80057be:	d102      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x1fa>
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	07c0      	lsls	r0, r0, #31
 80057c4:	d470      	bmi.n	80058a8 <HAL_ADC_ConfigChannel+0x2dc>
 80057c6:	b13a      	cbz	r2, 80057d8 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80057c8:	6890      	ldr	r0, [r2, #8]
 80057ca:	f000 0003 	and.w	r0, r0, #3
 80057ce:	2801      	cmp	r0, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x20c>
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	07d2      	lsls	r2, r2, #31
 80057d6:	d467      	bmi.n	80058a8 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057d8:	2c10      	cmp	r4, #16
 80057da:	d153      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x2b8>
 80057dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e0:	f47f af7b 	bne.w	80056da <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80057e4:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057e6:	4a38      	ldr	r2, [pc, #224]	@ (80058c8 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80057e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057ec:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057ee:	4b37      	ldr	r3, [pc, #220]	@ (80058cc <HAL_ADC_ConfigChannel+0x300>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f6:	220a      	movs	r2, #10
 80057f8:	4353      	muls	r3, r2
            wait_loop_index--;
 80057fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f43f af6b 	beq.w	80056da <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	e7f7      	b.n	80057fa <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800580a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800580e:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005810:	ea42 0200 	orr.w	r2, r2, r0
 8005814:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005818:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800581a:	d90c      	bls.n	8005836 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 800581c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005820:	6999      	ldr	r1, [r3, #24]
 8005822:	3a1b      	subs	r2, #27
 8005824:	2607      	movs	r6, #7
 8005826:	4096      	lsls	r6, r2
 8005828:	ea21 0106 	bic.w	r1, r1, r6
 800582c:	fa00 f202 	lsl.w	r2, r0, r2
 8005830:	430a      	orrs	r2, r1
 8005832:	619a      	str	r2, [r3, #24]
 8005834:	e7a7      	b.n	8005786 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005836:	1c61      	adds	r1, r4, #1
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800583e:	2607      	movs	r6, #7
 8005840:	408e      	lsls	r6, r1
 8005842:	ea22 0206 	bic.w	r2, r2, r6
 8005846:	fa00 f101 	lsl.w	r1, r0, r1
 800584a:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800584c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005850:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005852:	f43f af42 	beq.w	80056da <HAL_ADC_ConfigChannel+0x10e>
 8005856:	4a1a      	ldr	r2, [pc, #104]	@ (80058c0 <HAL_ADC_ConfigChannel+0x2f4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d097      	beq.n	800578c <HAL_ADC_ConfigChannel+0x1c0>
 800585c:	491c      	ldr	r1, [pc, #112]	@ (80058d0 <HAL_ADC_ConfigChannel+0x304>)
 800585e:	e796      	b.n	800578e <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005860:	2c11      	cmp	r4, #17
 8005862:	d103      	bne.n	800586c <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005864:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005866:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800586a:	e795      	b.n	8005798 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800586c:	2c12      	cmp	r4, #18
 800586e:	f47f af34 	bne.w	80056da <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005872:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005874:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8005878:	e78e      	b.n	8005798 <HAL_ADC_ConfigChannel+0x1cc>
 800587a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800587e:	e79a      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1ea>
 8005880:	4602      	mov	r2, r0
 8005882:	e798      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005884:	2c11      	cmp	r4, #17
 8005886:	d108      	bne.n	800589a <HAL_ADC_ConfigChannel+0x2ce>
 8005888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588c:	f47f af25 	bne.w	80056da <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005890:	688b      	ldr	r3, [r1, #8]
 8005892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005896:	608b      	str	r3, [r1, #8]
 8005898:	e71f      	b.n	80056da <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800589a:	2c12      	cmp	r4, #18
 800589c:	f47f af1d 	bne.w	80056da <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80058a0:	688b      	ldr	r3, [r1, #8]
 80058a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058a6:	e7f6      	b.n	8005896 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058a8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80058aa:	f043 0320 	orr.w	r3, r3, #32
 80058ae:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80058b0:	2001      	movs	r0, #1
 80058b2:	e713      	b.n	80056dc <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 80058b4:	2002      	movs	r0, #2
 80058b6:	e714      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x116>
 80058b8:	83fff000 	.word	0x83fff000
 80058bc:	50000300 	.word	0x50000300
 80058c0:	50000100 	.word	0x50000100
 80058c4:	50000500 	.word	0x50000500
 80058c8:	000f4240 	.word	0x000f4240
 80058cc:	20000014 	.word	0x20000014
 80058d0:	50000700 	.word	0x50000700

080058d4 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80058d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80058d6:	6804      	ldr	r4, [r0, #0]
 80058d8:	4b3c      	ldr	r3, [pc, #240]	@ (80059cc <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80058da:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 80058de:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80058e0:	d009      	beq.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d047      	beq.n	8005976 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 80058e6:	4a3a      	ldr	r2, [pc, #232]	@ (80059d0 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80058e8:	4294      	cmp	r4, r2
 80058ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058ee:	d002      	beq.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d166      	bne.n	80059c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80058f4:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 80058f6:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 80058fa:	2a01      	cmp	r2, #1
 80058fc:	d063      	beq.n	80059c6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80058fe:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005900:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8005902:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005906:	68a2      	ldr	r2, [r4, #8]
 8005908:	0752      	lsls	r2, r2, #29
 800590a:	d454      	bmi.n	80059b6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	0757      	lsls	r7, r2, #29
 8005910:	d451      	bmi.n	80059b6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005912:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8005916:	d031      	beq.n	800597c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005918:	4f2c      	ldr	r7, [pc, #176]	@ (80059cc <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800591a:	4a2e      	ldr	r2, [pc, #184]	@ (80059d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 800591c:	4e2e      	ldr	r6, [pc, #184]	@ (80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800591e:	42bc      	cmp	r4, r7
 8005920:	bf08      	it	eq
 8005922:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005924:	b360      	cbz	r0, 8005980 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005926:	6897      	ldr	r7, [r2, #8]
 8005928:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 800592c:	684e      	ldr	r6, [r1, #4]
 800592e:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8005932:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8005936:	433e      	orrs	r6, r7
 8005938:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800593a:	68a6      	ldr	r6, [r4, #8]
 800593c:	f006 0603 	and.w	r6, r6, #3
 8005940:	2e01      	cmp	r6, #1
 8005942:	d102      	bne.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8005944:	6824      	ldr	r4, [r4, #0]
 8005946:	07e6      	lsls	r6, r4, #31
 8005948:	d410      	bmi.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800594a:	689c      	ldr	r4, [r3, #8]
 800594c:	f004 0403 	and.w	r4, r4, #3
 8005950:	2c01      	cmp	r4, #1
 8005952:	d102      	bne.n	800595a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	07dc      	lsls	r4, r3, #31
 8005958:	d408      	bmi.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	6889      	ldr	r1, [r1, #8]
 800595e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005962:	4308      	orrs	r0, r1
 8005964:	f023 030f 	bic.w	r3, r3, #15
 8005968:	4318      	orrs	r0, r3
 800596a:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800596c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800596e:	2300      	movs	r3, #0
 8005970:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8005974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005976:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800597a:	e7bc      	b.n	80058f6 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800597c:	4a16      	ldr	r2, [pc, #88]	@ (80059d8 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800597e:	e7d1      	b.n	8005924 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005980:	6891      	ldr	r1, [r2, #8]
 8005982:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005986:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005988:	68a1      	ldr	r1, [r4, #8]
 800598a:	f001 0103 	and.w	r1, r1, #3
 800598e:	2901      	cmp	r1, #1
 8005990:	d102      	bne.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005992:	6821      	ldr	r1, [r4, #0]
 8005994:	07c9      	lsls	r1, r1, #31
 8005996:	d4e9      	bmi.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	f001 0103 	and.w	r1, r1, #3
 800599e:	2901      	cmp	r1, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d4e1      	bmi.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80059a8:	6893      	ldr	r3, [r2, #8]
 80059aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059ae:	f023 030f 	bic.w	r3, r3, #15
 80059b2:	6093      	str	r3, [r2, #8]
 80059b4:	e7da      	b.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80059be:	2001      	movs	r0, #1
 80059c0:	e7d5      	b.n	800596e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 80059c2:	2001      	movs	r0, #1
 80059c4:	e7d6      	b.n	8005974 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 80059c6:	2002      	movs	r0, #2
 80059c8:	e7d4      	b.n	8005974 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80059ca:	bf00      	nop
 80059cc:	50000100 	.word	0x50000100
 80059d0:	50000400 	.word	0x50000400
 80059d4:	50000700 	.word	0x50000700
 80059d8:	50000300 	.word	0x50000300

080059dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059dc:	4907      	ldr	r1, [pc, #28]	@ (80059fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80059de:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059e6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80059f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80059fa:	4770      	bx	lr
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a00:	4b16      	ldr	r3, [pc, #88]	@ (8005a5c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a02:	b530      	push	{r4, r5, lr}
 8005a04:	68dc      	ldr	r4, [r3, #12]
 8005a06:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a0a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a0e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	bf28      	it	cs
 8005a14:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a18:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a1c:	bf8c      	ite	hi
 8005a1e:	3c03      	subhi	r4, #3
 8005a20:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a22:	fa05 f303 	lsl.w	r3, r5, r3
 8005a26:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a2a:	40a5      	lsls	r5, r4
 8005a2c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a30:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005a32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a34:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a38:	bfac      	ite	ge
 8005a3a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3e:	4a08      	ldrlt	r2, [pc, #32]	@ (8005a60 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a40:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a44:	bfb8      	it	lt
 8005a46:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	bfaa      	itet	ge
 8005a4e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a52:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a54:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005a58:	bd30      	pop	{r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed00 	.word	0xe000ed00
 8005a60:	e000ed14 	.word	0xe000ed14

08005a64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005a64:	2800      	cmp	r0, #0
 8005a66:	db07      	blt.n	8005a78 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a68:	0941      	lsrs	r1, r0, #5
 8005a6a:	4a04      	ldr	r2, [pc, #16]	@ (8005a7c <HAL_NVIC_EnableIRQ+0x18>)
 8005a6c:	f000 001f 	and.w	r0, r0, #31
 8005a70:	2301      	movs	r3, #1
 8005a72:	4083      	lsls	r3, r0
 8005a74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	e000e100 	.word	0xe000e100

08005a80 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a80:	6802      	ldr	r2, [r0, #0]
 8005a82:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <DMA_CalcBaseAndBitshift+0x2c>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f04f 0114 	mov.w	r1, #20
 8005a8a:	d808      	bhi.n	8005a9e <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a8c:	4b08      	ldr	r3, [pc, #32]	@ (8005ab0 <DMA_CalcBaseAndBitshift+0x30>)
 8005a8e:	4413      	add	r3, r2
 8005a90:	4a08      	ldr	r2, [pc, #32]	@ (8005ab4 <DMA_CalcBaseAndBitshift+0x34>)
 8005a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a96:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8005a98:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005a9c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <DMA_CalcBaseAndBitshift+0x38>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4a06      	ldr	r2, [pc, #24]	@ (8005abc <DMA_CalcBaseAndBitshift+0x3c>)
 8005aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa8:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8005aaa:	e7f5      	b.n	8005a98 <DMA_CalcBaseAndBitshift+0x18>
 8005aac:	40020407 	.word	0x40020407
 8005ab0:	bffdfff8 	.word	0xbffdfff8
 8005ab4:	40020000 	.word	0x40020000
 8005ab8:	bffdfbf8 	.word	0xbffdfbf8
 8005abc:	40020400 	.word	0x40020400

08005ac0 <HAL_DMA_Init>:
{
 8005ac0:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	b1e0      	cbz	r0, 8005b00 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8005ac6:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8005aca:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005acc:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005ace:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad0:	432b      	orrs	r3, r5
 8005ad2:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005ad4:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad8:	6945      	ldr	r5, [r0, #20]
 8005ada:	432b      	orrs	r3, r5
 8005adc:	6985      	ldr	r5, [r0, #24]
 8005ade:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ae2:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8005ae6:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aea:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005aec:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005aee:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005af0:	f7ff ffc6 	bl	8005a80 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af4:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8005af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afa:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005afc:	8423      	strh	r3, [r4, #32]
}
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7fc      	b.n	8005afe <HAL_DMA_Init+0x3e>

08005b04 <HAL_DMA_Start_IT>:
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8005b06:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005b0a:	2c01      	cmp	r4, #1
 8005b0c:	d033      	beq.n	8005b76 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b0e:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8005b12:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b14:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005b16:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b1a:	f04f 0400 	mov.w	r4, #0
 8005b1e:	d128      	bne.n	8005b72 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b20:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b22:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b24:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b26:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b2a:	6826      	ldr	r6, [r4, #0]
 8005b2c:	f026 0601 	bic.w	r6, r6, #1
 8005b30:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005b32:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8005b36:	40bd      	lsls	r5, r7
 8005b38:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005b3a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b3c:	6843      	ldr	r3, [r0, #4]
 8005b3e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005b40:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8005b42:	bf0b      	itete	eq
 8005b44:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005b46:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005b48:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005b4a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005b4c:	b14b      	cbz	r3, 8005b62 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005b54:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2000      	movs	r0, #0
}
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 030a 	orr.w	r3, r3, #10
 8005b68:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	e7f0      	b.n	8005b54 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8005b72:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8005b76:	2002      	movs	r0, #2
 8005b78:	e7f2      	b.n	8005b60 <HAL_DMA_Start_IT+0x5c>

08005b7a <HAL_DMA_Abort>:
  if(NULL == hdma)
 8005b7a:	b140      	cbz	r0, 8005b8e <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b7c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d006      	beq.n	8005b92 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b84:	2304      	movs	r3, #4
 8005b86:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005b8e:	2001      	movs	r0, #1
 8005b90:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b92:	6803      	ldr	r3, [r0, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f022 020e 	bic.w	r2, r2, #14
 8005b9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005ba4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8005ba8:	2301      	movs	r3, #1
 8005baa:	408b      	lsls	r3, r1
 8005bac:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8005bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bb2:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bb8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005bba:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005bbc:	6803      	ldr	r3, [r0, #0]
{
 8005bbe:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005bc0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005bc2:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005bc4:	2404      	movs	r4, #4
 8005bc6:	4094      	lsls	r4, r2
 8005bc8:	4234      	tst	r4, r6
 8005bca:	d00e      	beq.n	8005bea <HAL_DMA_IRQHandler+0x32>
 8005bcc:	f015 0f04 	tst.w	r5, #4
 8005bd0:	d00b      	beq.n	8005bea <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005bd6:	bf5e      	ittt	pl
 8005bd8:	681a      	ldrpl	r2, [r3, #0]
 8005bda:	f022 0204 	bicpl.w	r2, r2, #4
 8005bde:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005be0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005be2:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8005be4:	b363      	cbz	r3, 8005c40 <HAL_DMA_IRQHandler+0x88>
}
 8005be6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005be8:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005bea:	2402      	movs	r4, #2
 8005bec:	4094      	lsls	r4, r2
 8005bee:	4234      	tst	r4, r6
 8005bf0:	d012      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x60>
 8005bf2:	f015 0f02 	tst.w	r5, #2
 8005bf6:	d00f      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	0695      	lsls	r5, r2, #26
 8005bfc:	d406      	bmi.n	8005c0c <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	f022 020a 	bic.w	r2, r2, #10
 8005c04:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005c0c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005c0e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005c10:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005c14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005c16:	e7e5      	b.n	8005be4 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c18:	2408      	movs	r4, #8
 8005c1a:	4094      	lsls	r4, r2
 8005c1c:	4234      	tst	r4, r6
 8005c1e:	d00f      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x88>
 8005c20:	072c      	lsls	r4, r5, #28
 8005c22:	d50d      	bpl.n	8005c40 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c24:	681c      	ldr	r4, [r3, #0]
 8005c26:	f024 040e 	bic.w	r4, r4, #14
 8005c2a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	fa03 f202 	lsl.w	r2, r3, r2
 8005c32:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c34:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c3a:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8005c3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005c3e:	e7d1      	b.n	8005be4 <HAL_DMA_IRQHandler+0x2c>
}
 8005c40:	bc70      	pop	{r4, r5, r6}
 8005c42:	4770      	bx	lr

08005c44 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005c44:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8005c46:	4770      	bx	lr

08005c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4c:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005dcc <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c50:	4c5c      	ldr	r4, [pc, #368]	@ (8005dc4 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8005c52:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c54:	680a      	ldr	r2, [r1, #0]
 8005c56:	fa32 f503 	lsrs.w	r5, r2, r3
 8005c5a:	d102      	bne.n	8005c62 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8005c5c:	b003      	add	sp, #12
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c62:	2501      	movs	r5, #1
 8005c64:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8005c68:	ea18 0202 	ands.w	r2, r8, r2
 8005c6c:	f000 80a0 	beq.w	8005db0 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c70:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c72:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c74:	f006 0503 	and.w	r5, r6, #3
 8005c78:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c7c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c80:	1e6f      	subs	r7, r5, #1
 8005c82:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c84:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c88:	d834      	bhi.n	8005cf4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8005c8a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c8c:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c90:	68cf      	ldr	r7, [r1, #12]
 8005c92:	fa07 f70e 	lsl.w	r7, r7, lr
 8005c96:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005c9a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c9c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c9e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca2:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8005ca6:	409f      	lsls	r7, r3
 8005ca8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005cac:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005cae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005cb0:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cb4:	688f      	ldr	r7, [r1, #8]
 8005cb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8005cba:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cbe:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005cc0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cc2:	d119      	bne.n	8005cf8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8005cc4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005cc8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ccc:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005cd0:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cd4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005cd8:	f04f 0b0f 	mov.w	fp, #15
 8005cdc:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005ce0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ce4:	690f      	ldr	r7, [r1, #16]
 8005ce6:	fa07 f70a 	lsl.w	r7, r7, sl
 8005cea:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005cee:	f8c8 7020 	str.w	r7, [r8, #32]
 8005cf2:	e001      	b.n	8005cf8 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cf4:	2d03      	cmp	r5, #3
 8005cf6:	d1da      	bne.n	8005cae <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005cf8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005cfa:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005cfe:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d02:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d04:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005d08:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d0a:	d051      	beq.n	8005db0 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005d10:	f045 0501 	orr.w	r5, r5, #1
 8005d14:	f8c9 5018 	str.w	r5, [r9, #24]
 8005d18:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005d1c:	f023 0703 	bic.w	r7, r3, #3
 8005d20:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005d24:	f005 0501 	and.w	r5, r5, #1
 8005d28:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8005d2c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d2e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d32:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d34:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d3a:	f04f 0e0f 	mov.w	lr, #15
 8005d3e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d42:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d46:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d4a:	d033      	beq.n	8005db4 <HAL_GPIO_Init+0x16c>
 8005d4c:	4d1e      	ldr	r5, [pc, #120]	@ (8005dc8 <HAL_GPIO_Init+0x180>)
 8005d4e:	42a8      	cmp	r0, r5
 8005d50:	d032      	beq.n	8005db8 <HAL_GPIO_Init+0x170>
 8005d52:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005d56:	42a8      	cmp	r0, r5
 8005d58:	d030      	beq.n	8005dbc <HAL_GPIO_Init+0x174>
 8005d5a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005d5e:	42a8      	cmp	r0, r5
 8005d60:	d02e      	beq.n	8005dc0 <HAL_GPIO_Init+0x178>
 8005d62:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005d66:	42a8      	cmp	r0, r5
 8005d68:	bf14      	ite	ne
 8005d6a:	2505      	movne	r5, #5
 8005d6c:	2504      	moveq	r5, #4
 8005d6e:	fa05 f50c 	lsl.w	r5, r5, ip
 8005d72:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d76:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8005d78:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005d7a:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d7c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8005d80:	bf0c      	ite	eq
 8005d82:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005d84:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8005d86:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8005d88:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d8a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8005d8e:	bf0c      	ite	eq
 8005d90:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005d92:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8005d94:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8005d96:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d98:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8005d9c:	bf0c      	ite	eq
 8005d9e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005da0:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8005da2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8005da4:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005da6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005da8:	bf54      	ite	pl
 8005daa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005dac:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8005dae:	6025      	str	r5, [r4, #0]
    position++;
 8005db0:	3301      	adds	r3, #1
 8005db2:	e74f      	b.n	8005c54 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005db4:	2500      	movs	r5, #0
 8005db6:	e7da      	b.n	8005d6e <HAL_GPIO_Init+0x126>
 8005db8:	2501      	movs	r5, #1
 8005dba:	e7d8      	b.n	8005d6e <HAL_GPIO_Init+0x126>
 8005dbc:	2502      	movs	r5, #2
 8005dbe:	e7d6      	b.n	8005d6e <HAL_GPIO_Init+0x126>
 8005dc0:	2503      	movs	r5, #3
 8005dc2:	e7d4      	b.n	8005d6e <HAL_GPIO_Init+0x126>
 8005dc4:	40010400 	.word	0x40010400
 8005dc8:	48000400 	.word	0x48000400
 8005dcc:	40021000 	.word	0x40021000

08005dd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dd0:	b10a      	cbz	r2, 8005dd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dd2:	6181      	str	r1, [r0, #24]
 8005dd4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dd6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005dd8:	4770      	bx	lr

08005dda <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d04e      	beq.n	8005e80 <HAL_I2C_Init+0xa6>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005de2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005de6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005dea:	b91b      	cbnz	r3, 8005df4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dec:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005df0:	f7fe fd82 	bl	80048f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df4:	2324      	movs	r3, #36	@ 0x24
 8005df6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e04:	6862      	ldr	r2, [r4, #4]
 8005e06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e14:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e18:	2901      	cmp	r1, #1
 8005e1a:	d106      	bne.n	8005e2a <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e20:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e28:	e007      	b.n	8005e3a <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e2e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e30:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e32:	d1f6      	bne.n	8005e22 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005e42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e50:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005e54:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e56:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e5e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005e70:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e72:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e78:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 8005e7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e80:	2001      	movs	r0, #1
 8005e82:	e7fc      	b.n	8005e7e <HAL_I2C_Init+0xa4>

08005e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e84:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005e8a:	2a20      	cmp	r2, #32
{
 8005e8c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e8e:	b2d4      	uxtb	r4, r2
 8005e90:	d11c      	bne.n	8005ecc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e92:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	d018      	beq.n	8005ecc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e9a:	2224      	movs	r2, #36	@ 0x24
 8005e9c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ea0:	6802      	ldr	r2, [r0, #0]
 8005ea2:	6810      	ldr	r0, [r2, #0]
 8005ea4:	f020 0001 	bic.w	r0, r0, #1
 8005ea8:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eaa:	6810      	ldr	r0, [r2, #0]
 8005eac:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8005eb0:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eb2:	6810      	ldr	r0, [r2, #0]
 8005eb4:	4301      	orrs	r1, r0
 8005eb6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb8:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eba:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8005ebc:	f041 0101 	orr.w	r1, r1, #1
 8005ec0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ec2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005ec6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005eca:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8005ecc:	2002      	movs	r0, #2
 8005ece:	e7fc      	b.n	8005eca <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ed0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005ed6:	2a20      	cmp	r2, #32
{
 8005ed8:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eda:	b2d4      	uxtb	r4, r2
 8005edc:	d11b      	bne.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ede:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005ee2:	2a01      	cmp	r2, #1
 8005ee4:	d017      	beq.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee6:	2224      	movs	r2, #36	@ 0x24
 8005ee8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eec:	6802      	ldr	r2, [r0, #0]
 8005eee:	6810      	ldr	r0, [r2, #0]
 8005ef0:	f020 0001 	bic.w	r0, r0, #1
 8005ef4:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ef6:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ef8:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005efc:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f00:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f02:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f04:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8005f06:	f041 0101 	orr.w	r1, r1, #1
 8005f0a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f0c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8005f10:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005f14:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8005f16:	2002      	movs	r0, #2
 8005f18:	e7fc      	b.n	8005f14 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08005f1c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005f1c:	4a02      	ldr	r2, [pc, #8]	@ (8005f28 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f24:	6013      	str	r3, [r2, #0]
}
 8005f26:	4770      	bx	lr
 8005f28:	40007000 	.word	0x40007000

08005f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f30:	4605      	mov	r5, r0
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d033      	beq.n	8005f9e <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f36:	6803      	ldr	r3, [r0, #0]
 8005f38:	07da      	lsls	r2, r3, #31
 8005f3a:	d411      	bmi.n	8005f60 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	079b      	lsls	r3, r3, #30
 8005f40:	f100 8081 	bmi.w	8006046 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	071c      	lsls	r4, r3, #28
 8005f48:	f100 80eb 	bmi.w	8006122 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	0758      	lsls	r0, r3, #29
 8005f50:	f100 8130 	bmi.w	80061b4 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f54:	69eb      	ldr	r3, [r5, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 81b5 	bne.w	80062c6 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e047      	b.n	8005ff0 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f60:	4cb0      	ldr	r4, [pc, #704]	@ (8006224 <HAL_RCC_OscConfig+0x2f8>)
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	f003 030c 	and.w	r3, r3, #12
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d007      	beq.n	8005f7c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d115      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x76>
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	03df      	lsls	r7, r3, #15
 8005f7a:	d512      	bpl.n	8005fa2 <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005f80:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	6821      	ldr	r1, [r4, #0]
 8005f86:	fa93 f3a3 	rbit	r3, r3
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	fab3 f383 	clz	r3, r3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	420b      	tst	r3, r1
 8005f96:	d0d1      	beq.n	8005f3c <HAL_RCC_OscConfig+0x10>
 8005f98:	686b      	ldr	r3, [r5, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1ce      	bne.n	8005f3c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	e026      	b.n	8005ff0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa2:	686a      	ldr	r2, [r5, #4]
 8005fa4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005fa8:	d125      	bne.n	8005ff6 <HAL_RCC_OscConfig+0xca>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fb2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005fb4:	68a9      	ldr	r1, [r5, #8]
 8005fb6:	f023 030f 	bic.w	r3, r3, #15
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fbe:	b352      	cbz	r2, 8006016 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8005fc0:	f7fe ffc6 	bl	8004f50 <HAL_GetTick>
 8005fc4:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005fc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	f04f 0801 	mov.w	r8, #1
 8005fce:	fa97 f3a7 	rbit	r3, r7
 8005fd2:	6822      	ldr	r2, [r4, #0]
 8005fd4:	fa97 f3a7 	rbit	r3, r7
 8005fd8:	fab3 f383 	clz	r3, r3
 8005fdc:	fa08 f303 	lsl.w	r3, r8, r3
 8005fe0:	4213      	tst	r3, r2
 8005fe2:	d1ab      	bne.n	8005f3c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe4:	f7fe ffb4 	bl	8004f50 <HAL_GetTick>
 8005fe8:	1b80      	subs	r0, r0, r6
 8005fea:	2864      	cmp	r0, #100	@ 0x64
 8005fec:	d9ef      	bls.n	8005fce <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8005fee:	2003      	movs	r0, #3
}
 8005ff0:	b002      	add	sp, #8
 8005ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	b932      	cbnz	r2, 8006008 <HAL_RCC_OscConfig+0xdc>
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffe:	6023      	str	r3, [r4, #0]
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006006:	e7d3      	b.n	8005fb0 <HAL_RCC_OscConfig+0x84>
 8006008:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 800600c:	d1f5      	bne.n	8005ffa <HAL_RCC_OscConfig+0xce>
 800600e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e7c9      	b.n	8005faa <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8006016:	f7fe ff9b 	bl	8004f50 <HAL_GetTick>
 800601a:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800601e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006020:	f04f 0801 	mov.w	r8, #1
 8006024:	fa97 f3a7 	rbit	r3, r7
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	fa97 f3a7 	rbit	r3, r7
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	fa08 f303 	lsl.w	r3, r8, r3
 8006036:	4213      	tst	r3, r2
 8006038:	d080      	beq.n	8005f3c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603a:	f7fe ff89 	bl	8004f50 <HAL_GetTick>
 800603e:	1b80      	subs	r0, r0, r6
 8006040:	2864      	cmp	r0, #100	@ 0x64
 8006042:	d9ef      	bls.n	8006024 <HAL_RCC_OscConfig+0xf8>
 8006044:	e7d3      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006046:	4c77      	ldr	r4, [pc, #476]	@ (8006224 <HAL_RCC_OscConfig+0x2f8>)
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	f013 0f0c 	tst.w	r3, #12
 800604e:	d007      	beq.n	8006060 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006050:	6863      	ldr	r3, [r4, #4]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b08      	cmp	r3, #8
 8006058:	d11f      	bne.n	800609a <HAL_RCC_OscConfig+0x16e>
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	03de      	lsls	r6, r3, #15
 800605e:	d41c      	bmi.n	800609a <HAL_RCC_OscConfig+0x16e>
 8006060:	2302      	movs	r3, #2
 8006062:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006066:	6821      	ldr	r1, [r4, #0]
 8006068:	fa93 f3a3 	rbit	r3, r3
 800606c:	2201      	movs	r2, #1
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	420b      	tst	r3, r1
 8006078:	d002      	beq.n	8006080 <HAL_RCC_OscConfig+0x154>
 800607a:	692b      	ldr	r3, [r5, #16]
 800607c:	4293      	cmp	r3, r2
 800607e:	d18e      	bne.n	8005f9e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006080:	6821      	ldr	r1, [r4, #0]
 8006082:	22f8      	movs	r2, #248	@ 0xf8
 8006084:	fa92 f2a2 	rbit	r2, r2
 8006088:	696b      	ldr	r3, [r5, #20]
 800608a:	fab2 f282 	clz	r2, r2
 800608e:	4093      	lsls	r3, r2
 8006090:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8006094:	4313      	orrs	r3, r2
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e754      	b.n	8005f44 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800609a:	692a      	ldr	r2, [r5, #16]
 800609c:	2601      	movs	r6, #1
 800609e:	b1fa      	cbz	r2, 80060e0 <HAL_RCC_OscConfig+0x1b4>
 80060a0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80060a4:	fab3 f383 	clz	r3, r3
 80060a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80060ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	f04f 0802 	mov.w	r8, #2
 80060b6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80060b8:	f7fe ff4a 	bl	8004f50 <HAL_GetTick>
 80060bc:	4607      	mov	r7, r0
 80060be:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	fa98 f3a8 	rbit	r3, r8
 80060c8:	fab3 f383 	clz	r3, r3
 80060cc:	fa06 f303 	lsl.w	r3, r6, r3
 80060d0:	4213      	tst	r3, r2
 80060d2:	d1d5      	bne.n	8006080 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060d4:	f7fe ff3c 	bl	8004f50 <HAL_GetTick>
 80060d8:	1bc0      	subs	r0, r0, r7
 80060da:	2802      	cmp	r0, #2
 80060dc:	d9ef      	bls.n	80060be <HAL_RCC_OscConfig+0x192>
 80060de:	e786      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
 80060e0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80060e4:	fab3 f383 	clz	r3, r3
 80060e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80060ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	f04f 0802 	mov.w	r8, #2
 80060f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060f8:	f7fe ff2a 	bl	8004f50 <HAL_GetTick>
 80060fc:	4607      	mov	r7, r0
 80060fe:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	fa98 f3a8 	rbit	r3, r8
 8006108:	fab3 f383 	clz	r3, r3
 800610c:	fa06 f303 	lsl.w	r3, r6, r3
 8006110:	4213      	tst	r3, r2
 8006112:	f43f af17 	beq.w	8005f44 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006116:	f7fe ff1b 	bl	8004f50 <HAL_GetTick>
 800611a:	1bc0      	subs	r0, r0, r7
 800611c:	2802      	cmp	r0, #2
 800611e:	d9ee      	bls.n	80060fe <HAL_RCC_OscConfig+0x1d2>
 8006120:	e765      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006122:	69aa      	ldr	r2, [r5, #24]
 8006124:	4e3f      	ldr	r6, [pc, #252]	@ (8006224 <HAL_RCC_OscConfig+0x2f8>)
 8006126:	4940      	ldr	r1, [pc, #256]	@ (8006228 <HAL_RCC_OscConfig+0x2fc>)
 8006128:	2401      	movs	r4, #1
 800612a:	b30a      	cbz	r2, 8006170 <HAL_RCC_OscConfig+0x244>
 800612c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8006130:	fab3 f383 	clz	r3, r3
 8006134:	440b      	add	r3, r1
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	2702      	movs	r7, #2
 800613a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800613c:	f7fe ff08 	bl	8004f50 <HAL_GetTick>
 8006140:	4680      	mov	r8, r0
 8006142:	fa97 f3a7 	rbit	r3, r7
 8006146:	fa97 f3a7 	rbit	r3, r7
 800614a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006150:	fa97 f3a7 	rbit	r3, r7
 8006154:	fab3 f383 	clz	r3, r3
 8006158:	fa04 f303 	lsl.w	r3, r4, r3
 800615c:	4213      	tst	r3, r2
 800615e:	f47f aef5 	bne.w	8005f4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006162:	f7fe fef5 	bl	8004f50 <HAL_GetTick>
 8006166:	eba0 0008 	sub.w	r0, r0, r8
 800616a:	2802      	cmp	r0, #2
 800616c:	d9e9      	bls.n	8006142 <HAL_RCC_OscConfig+0x216>
 800616e:	e73e      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
 8006170:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	440b      	add	r3, r1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	2702      	movs	r7, #2
 800617e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006180:	f7fe fee6 	bl	8004f50 <HAL_GetTick>
 8006184:	4680      	mov	r8, r0
 8006186:	fa97 f3a7 	rbit	r3, r7
 800618a:	fa97 f3a7 	rbit	r3, r7
 800618e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006192:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006194:	fa97 f3a7 	rbit	r3, r7
 8006198:	fab3 f383 	clz	r3, r3
 800619c:	fa04 f303 	lsl.w	r3, r4, r3
 80061a0:	4213      	tst	r3, r2
 80061a2:	f43f aed3 	beq.w	8005f4c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fe fed3 	bl	8004f50 <HAL_GetTick>
 80061aa:	eba0 0008 	sub.w	r0, r0, r8
 80061ae:	2802      	cmp	r0, #2
 80061b0:	d9e9      	bls.n	8006186 <HAL_RCC_OscConfig+0x25a>
 80061b2:	e71c      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b4:	4c1b      	ldr	r4, [pc, #108]	@ (8006224 <HAL_RCC_OscConfig+0x2f8>)
 80061b6:	69e3      	ldr	r3, [r4, #28]
 80061b8:	00d9      	lsls	r1, r3, #3
 80061ba:	d431      	bmi.n	8006220 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80061bc:	69e3      	ldr	r3, [r4, #28]
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	61e3      	str	r3, [r4, #28]
 80061c4:	69e3      	ldr	r3, [r4, #28]
 80061c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80061ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d0:	4f16      	ldr	r7, [pc, #88]	@ (800622c <HAL_RCC_OscConfig+0x300>)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	05da      	lsls	r2, r3, #23
 80061d6:	d52b      	bpl.n	8006230 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d8:	68eb      	ldr	r3, [r5, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d139      	bne.n	8006252 <HAL_RCC_OscConfig+0x326>
 80061de:	6a23      	ldr	r3, [r4, #32]
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80061e6:	f7fe feb3 	bl	8004f50 <HAL_GetTick>
 80061ea:	2702      	movs	r7, #2
 80061ec:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ee:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80061f6:	fa97 f3a7 	rbit	r3, r7
 80061fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fe:	6a22      	ldr	r2, [r4, #32]
 8006200:	fa97 f3a7 	rbit	r3, r7
 8006204:	fab3 f383 	clz	r3, r3
 8006208:	fa09 f303 	lsl.w	r3, r9, r3
 800620c:	4213      	tst	r3, r2
 800620e:	d053      	beq.n	80062b8 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8006210:	2e00      	cmp	r6, #0
 8006212:	f43f ae9f 	beq.w	8005f54 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006216:	69e3      	ldr	r3, [r4, #28]
 8006218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800621c:	61e3      	str	r3, [r4, #28]
 800621e:	e699      	b.n	8005f54 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006220:	2600      	movs	r6, #0
 8006222:	e7d5      	b.n	80061d0 <HAL_RCC_OscConfig+0x2a4>
 8006224:	40021000 	.word	0x40021000
 8006228:	10908120 	.word	0x10908120
 800622c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006236:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006238:	f7fe fe8a 	bl	8004f50 <HAL_GetTick>
 800623c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	05db      	lsls	r3, r3, #23
 8006242:	d4c9      	bmi.n	80061d8 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006244:	f7fe fe84 	bl	8004f50 <HAL_GetTick>
 8006248:	eba0 0008 	sub.w	r0, r0, r8
 800624c:	2864      	cmp	r0, #100	@ 0x64
 800624e:	d9f6      	bls.n	800623e <HAL_RCC_OscConfig+0x312>
 8006250:	e6cd      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006252:	bb1b      	cbnz	r3, 800629c <HAL_RCC_OscConfig+0x370>
 8006254:	6a23      	ldr	r3, [r4, #32]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6223      	str	r3, [r4, #32]
 800625c:	6a23      	ldr	r3, [r4, #32]
 800625e:	f023 0304 	bic.w	r3, r3, #4
 8006262:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006264:	f7fe fe74 	bl	8004f50 <HAL_GetTick>
 8006268:	2702      	movs	r7, #2
 800626a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800626c:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006270:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006274:	fa97 f3a7 	rbit	r3, r7
 8006278:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800627c:	6a22      	ldr	r2, [r4, #32]
 800627e:	fa97 f3a7 	rbit	r3, r7
 8006282:	fab3 f383 	clz	r3, r3
 8006286:	fa09 f303 	lsl.w	r3, r9, r3
 800628a:	4213      	tst	r3, r2
 800628c:	d0c0      	beq.n	8006210 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fe fe5f 	bl	8004f50 <HAL_GetTick>
 8006292:	eba0 0008 	sub.w	r0, r0, r8
 8006296:	4550      	cmp	r0, sl
 8006298:	d9ec      	bls.n	8006274 <HAL_RCC_OscConfig+0x348>
 800629a:	e6a8      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800629c:	2b05      	cmp	r3, #5
 800629e:	6a23      	ldr	r3, [r4, #32]
 80062a0:	d103      	bne.n	80062aa <HAL_RCC_OscConfig+0x37e>
 80062a2:	f043 0304 	orr.w	r3, r3, #4
 80062a6:	6223      	str	r3, [r4, #32]
 80062a8:	e799      	b.n	80061de <HAL_RCC_OscConfig+0x2b2>
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6223      	str	r3, [r4, #32]
 80062b0:	6a23      	ldr	r3, [r4, #32]
 80062b2:	f023 0304 	bic.w	r3, r3, #4
 80062b6:	e795      	b.n	80061e4 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b8:	f7fe fe4a 	bl	8004f50 <HAL_GetTick>
 80062bc:	eba0 0008 	sub.w	r0, r0, r8
 80062c0:	4550      	cmp	r0, sl
 80062c2:	d998      	bls.n	80061f6 <HAL_RCC_OscConfig+0x2ca>
 80062c4:	e693      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c6:	4c46      	ldr	r4, [pc, #280]	@ (80063e0 <HAL_RCC_OscConfig+0x4b4>)
 80062c8:	6862      	ldr	r2, [r4, #4]
 80062ca:	f002 020c 	and.w	r2, r2, #12
 80062ce:	2a08      	cmp	r2, #8
 80062d0:	d074      	beq.n	80063bc <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062d8:	d14d      	bne.n	8006376 <HAL_RCC_OscConfig+0x44a>
 80062da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80062e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80062f0:	f7fe fe2e 	bl	8004f50 <HAL_GetTick>
 80062f4:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 80062f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062fa:	2601      	movs	r6, #1
 80062fc:	fa98 f3a8 	rbit	r3, r8
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	fa98 f3a8 	rbit	r3, r8
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	fa06 f303 	lsl.w	r3, r6, r3
 800630e:	4213      	tst	r3, r2
 8006310:	d12b      	bne.n	800636a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006312:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	430b      	orrs	r3, r1
 800631a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800631e:	4313      	orrs	r3, r2
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006326:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006332:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006336:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006338:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800633a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800633c:	f7fe fe08 	bl	8004f50 <HAL_GetTick>
 8006340:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8006344:	4605      	mov	r5, r0
 8006346:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	fa96 f3a6 	rbit	r3, r6
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	fa07 f303 	lsl.w	r3, r7, r3
 8006358:	4213      	tst	r3, r2
 800635a:	f47f adff 	bne.w	8005f5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635e:	f7fe fdf7 	bl	8004f50 <HAL_GetTick>
 8006362:	1b40      	subs	r0, r0, r5
 8006364:	2802      	cmp	r0, #2
 8006366:	d9ee      	bls.n	8006346 <HAL_RCC_OscConfig+0x41a>
 8006368:	e641      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800636a:	f7fe fdf1 	bl	8004f50 <HAL_GetTick>
 800636e:	1bc0      	subs	r0, r0, r7
 8006370:	2802      	cmp	r0, #2
 8006372:	d9c3      	bls.n	80062fc <HAL_RCC_OscConfig+0x3d0>
 8006374:	e63b      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
 8006376:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800637a:	fab3 f383 	clz	r3, r3
 800637e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006382:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800638c:	f7fe fde0 	bl	8004f50 <HAL_GetTick>
 8006390:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8006394:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006396:	2701      	movs	r7, #1
 8006398:	fa96 f3a6 	rbit	r3, r6
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	fa96 f3a6 	rbit	r3, r6
 80063a2:	fab3 f383 	clz	r3, r3
 80063a6:	fa07 f303 	lsl.w	r3, r7, r3
 80063aa:	4213      	tst	r3, r2
 80063ac:	f43f add6 	beq.w	8005f5c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b0:	f7fe fdce 	bl	8004f50 <HAL_GetTick>
 80063b4:	1b40      	subs	r0, r0, r5
 80063b6:	2802      	cmp	r0, #2
 80063b8:	d9ee      	bls.n	8006398 <HAL_RCC_OscConfig+0x46c>
 80063ba:	e618      	b.n	8005fee <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f43f adee 	beq.w	8005f9e <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80063c2:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063c4:	6a2b      	ldr	r3, [r5, #32]
 80063c6:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80063ca:	429a      	cmp	r2, r3
 80063cc:	f47f ade7 	bne.w	8005f9e <HAL_RCC_OscConfig+0x72>
 80063d0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80063d2:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063d6:	1ac0      	subs	r0, r0, r3
 80063d8:	bf18      	it	ne
 80063da:	2001      	movne	r0, #1
 80063dc:	e608      	b.n	8005ff0 <HAL_RCC_OscConfig+0xc4>
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000

080063e4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <HAL_RCC_GetSysClockFreq+0x34>)
 80063e6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063e8:	f002 010c 	and.w	r1, r2, #12
 80063ec:	2908      	cmp	r1, #8
 80063ee:	d111      	bne.n	8006414 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80063f2:	480a      	ldr	r0, [pc, #40]	@ (800641c <HAL_RCC_GetSysClockFreq+0x38>)
 80063f4:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80063f8:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80063fa:	bf44      	itt	mi
 80063fc:	f003 030f 	andmi.w	r3, r3, #15
 8006400:	4a07      	ldrmi	r2, [pc, #28]	@ (8006420 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006402:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006404:	bf49      	itett	mi
 8006406:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006408:	4b06      	ldrpl	r3, [pc, #24]	@ (8006424 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800640a:	4b07      	ldrmi	r3, [pc, #28]	@ (8006428 <HAL_RCC_GetSysClockFreq+0x44>)
 800640c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006410:	4358      	muls	r0, r3
 8006412:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006414:	4804      	ldr	r0, [pc, #16]	@ (8006428 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006416:	4770      	bx	lr
 8006418:	40021000 	.word	0x40021000
 800641c:	08011cd2 	.word	0x08011cd2
 8006420:	08011cc2 	.word	0x08011cc2
 8006424:	003d0900 	.word	0x003d0900
 8006428:	007a1200 	.word	0x007a1200

0800642c <HAL_RCC_ClockConfig>:
{
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006432:	4604      	mov	r4, r0
 8006434:	b910      	cbnz	r0, 800643c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006436:	2001      	movs	r0, #1
}
 8006438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800643c:	4a4a      	ldr	r2, [pc, #296]	@ (8006568 <HAL_RCC_ClockConfig+0x13c>)
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	428b      	cmp	r3, r1
 8006446:	d32e      	bcc.n	80064a6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	0791      	lsls	r1, r2, #30
 800644c:	d436      	bmi.n	80064bc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800644e:	07d2      	lsls	r2, r2, #31
 8006450:	d43c      	bmi.n	80064cc <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006452:	4a45      	ldr	r2, [pc, #276]	@ (8006568 <HAL_RCC_ClockConfig+0x13c>)
 8006454:	6813      	ldr	r3, [r2, #0]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	42ab      	cmp	r3, r5
 800645c:	d870      	bhi.n	8006540 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	4d42      	ldr	r5, [pc, #264]	@ (800656c <HAL_RCC_ClockConfig+0x140>)
 8006462:	f012 0f04 	tst.w	r2, #4
 8006466:	d177      	bne.n	8006558 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006468:	0713      	lsls	r3, r2, #28
 800646a:	d506      	bpl.n	800647a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646c:	686b      	ldr	r3, [r5, #4]
 800646e:	6922      	ldr	r2, [r4, #16]
 8006470:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006474:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006478:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800647a:	f7ff ffb3 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 800647e:	686b      	ldr	r3, [r5, #4]
 8006480:	22f0      	movs	r2, #240	@ 0xf0
 8006482:	fa92 f2a2 	rbit	r2, r2
 8006486:	fab2 f282 	clz	r2, r2
 800648a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800648e:	40d3      	lsrs	r3, r2
 8006490:	4a37      	ldr	r2, [pc, #220]	@ (8006570 <HAL_RCC_ClockConfig+0x144>)
 8006492:	5cd3      	ldrb	r3, [r2, r3]
 8006494:	40d8      	lsrs	r0, r3
 8006496:	4b37      	ldr	r3, [pc, #220]	@ (8006574 <HAL_RCC_ClockConfig+0x148>)
 8006498:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800649a:	4b37      	ldr	r3, [pc, #220]	@ (8006578 <HAL_RCC_ClockConfig+0x14c>)
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f7fe fbb9 	bl	8004c14 <HAL_InitTick>
  return HAL_OK;
 80064a2:	2000      	movs	r0, #0
 80064a4:	e7c8      	b.n	8006438 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	428b      	cmp	r3, r1
 80064b8:	d1bd      	bne.n	8006436 <HAL_RCC_ClockConfig+0xa>
 80064ba:	e7c5      	b.n	8006448 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064bc:	492b      	ldr	r1, [pc, #172]	@ (800656c <HAL_RCC_ClockConfig+0x140>)
 80064be:	68a0      	ldr	r0, [r4, #8]
 80064c0:	684b      	ldr	r3, [r1, #4]
 80064c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064c6:	4303      	orrs	r3, r0
 80064c8:	604b      	str	r3, [r1, #4]
 80064ca:	e7c0      	b.n	800644e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064cc:	6862      	ldr	r2, [r4, #4]
 80064ce:	4e27      	ldr	r6, [pc, #156]	@ (800656c <HAL_RCC_ClockConfig+0x140>)
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	d124      	bne.n	800651e <HAL_RCC_ClockConfig+0xf2>
 80064d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80064d8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064dc:	6831      	ldr	r1, [r6, #0]
 80064de:	fa93 f3a3 	rbit	r3, r3
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	d0a3      	beq.n	8006436 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ee:	6873      	ldr	r3, [r6, #4]
 80064f0:	f023 0303 	bic.w	r3, r3, #3
 80064f4:	4313      	orrs	r3, r2
 80064f6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80064f8:	f7fe fd2a 	bl	8004f50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064fc:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006500:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006502:	6873      	ldr	r3, [r6, #4]
 8006504:	6862      	ldr	r2, [r4, #4]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800650e:	d0a0      	beq.n	8006452 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006510:	f7fe fd1e 	bl	8004f50 <HAL_GetTick>
 8006514:	1bc0      	subs	r0, r0, r7
 8006516:	4540      	cmp	r0, r8
 8006518:	d9f3      	bls.n	8006502 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800651a:	2003      	movs	r0, #3
 800651c:	e78c      	b.n	8006438 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800651e:	2a02      	cmp	r2, #2
 8006520:	bf0c      	ite	eq
 8006522:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8006526:	2302      	movne	r3, #2
 8006528:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652c:	6830      	ldr	r0, [r6, #0]
 800652e:	fa93 f3a3 	rbit	r3, r3
 8006532:	2101      	movs	r1, #1
 8006534:	fab3 f383 	clz	r3, r3
 8006538:	fa01 f303 	lsl.w	r3, r1, r3
 800653c:	4203      	tst	r3, r0
 800653e:	e7d5      	b.n	80064ec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	432b      	orrs	r3, r5
 8006548:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	42ab      	cmp	r3, r5
 8006552:	f47f af70 	bne.w	8006436 <HAL_RCC_ClockConfig+0xa>
 8006556:	e782      	b.n	800645e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	686b      	ldr	r3, [r5, #4]
 800655a:	68e1      	ldr	r1, [r4, #12]
 800655c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006560:	430b      	orrs	r3, r1
 8006562:	606b      	str	r3, [r5, #4]
 8006564:	e780      	b.n	8006468 <HAL_RCC_ClockConfig+0x3c>
 8006566:	bf00      	nop
 8006568:	40022000 	.word	0x40022000
 800656c:	40021000 	.word	0x40021000
 8006570:	08011cb2 	.word	0x08011cb2
 8006574:	20000014 	.word	0x20000014
 8006578:	2000001c 	.word	0x2000001c

0800657c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800657c:	4b08      	ldr	r3, [pc, #32]	@ (80065a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	fa92 f2a2 	rbit	r2, r2
 8006588:	fab2 f282 	clz	r2, r2
 800658c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006590:	40d3      	lsrs	r3, r2
 8006592:	4a04      	ldr	r2, [pc, #16]	@ (80065a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006594:	5cd3      	ldrb	r3, [r2, r3]
 8006596:	4a04      	ldr	r2, [pc, #16]	@ (80065a8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006598:	6810      	ldr	r0, [r2, #0]
}    
 800659a:	40d8      	lsrs	r0, r3
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000
 80065a4:	08011caa 	.word	0x08011caa
 80065a8:	20000014 	.word	0x20000014

080065ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80065ac:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ae:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	fa92 f2a2 	rbit	r2, r2
 80065b8:	fab2 f282 	clz	r2, r2
 80065bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80065c0:	40d3      	lsrs	r3, r2
 80065c2:	4a04      	ldr	r2, [pc, #16]	@ (80065d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065c4:	5cd3      	ldrb	r3, [r2, r3]
 80065c6:	4a04      	ldr	r2, [pc, #16]	@ (80065d8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80065c8:	6810      	ldr	r0, [r2, #0]
} 
 80065ca:	40d8      	lsrs	r0, r3
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40021000 	.word	0x40021000
 80065d4:	08011caa 	.word	0x08011caa
 80065d8:	20000014 	.word	0x20000014

080065dc <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065dc:	230f      	movs	r3, #15
 80065de:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <HAL_RCC_GetClockConfig+0x34>)
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	f002 0203 	and.w	r2, r2, #3
 80065e8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80065f0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80065f8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006602:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006604:	4b03      	ldr	r3, [pc, #12]	@ (8006614 <HAL_RCC_GetClockConfig+0x38>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	600b      	str	r3, [r1, #0]
}
 800660e:	4770      	bx	lr
 8006610:	40021000 	.word	0x40021000
 8006614:	40022000 	.word	0x40022000

08006618 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006618:	6803      	ldr	r3, [r0, #0]
{
 800661a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800661e:	03dd      	lsls	r5, r3, #15
{
 8006620:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006622:	d524      	bpl.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006624:	4d78      	ldr	r5, [pc, #480]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006626:	69eb      	ldr	r3, [r5, #28]
 8006628:	00d8      	lsls	r0, r3, #3
 800662a:	f100 8091 	bmi.w	8006750 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662e:	69eb      	ldr	r3, [r5, #28]
 8006630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006634:	61eb      	str	r3, [r5, #28]
 8006636:	69eb      	ldr	r3, [r5, #28]
 8006638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006640:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006642:	4f72      	ldr	r7, [pc, #456]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	05d9      	lsls	r1, r3, #23
 8006648:	f140 8084 	bpl.w	8006754 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800664c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800664e:	6862      	ldr	r2, [r4, #4]
 8006650:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006654:	f040 8093 	bne.w	800677e <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006658:	6a2b      	ldr	r3, [r5, #32]
 800665a:	6862      	ldr	r2, [r4, #4]
 800665c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006660:	4313      	orrs	r3, r2
 8006662:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006664:	b11e      	cbz	r6, 800666e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006666:	69eb      	ldr	r3, [r5, #28]
 8006668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666c:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	07df      	lsls	r7, r3, #31
 8006672:	d506      	bpl.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006674:	4964      	ldr	r1, [pc, #400]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006676:	68a0      	ldr	r0, [r4, #8]
 8006678:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800667a:	f022 0203 	bic.w	r2, r2, #3
 800667e:	4302      	orrs	r2, r0
 8006680:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006682:	079e      	lsls	r6, r3, #30
 8006684:	d506      	bpl.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006686:	4960      	ldr	r1, [pc, #384]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006688:	68e0      	ldr	r0, [r4, #12]
 800668a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800668c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8006690:	4302      	orrs	r2, r0
 8006692:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006694:	075d      	lsls	r5, r3, #29
 8006696:	d506      	bpl.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006698:	495b      	ldr	r1, [pc, #364]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800669a:	6920      	ldr	r0, [r4, #16]
 800669c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800669e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80066a2:	4302      	orrs	r2, r0
 80066a4:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066a6:	0698      	lsls	r0, r3, #26
 80066a8:	d506      	bpl.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066aa:	4957      	ldr	r1, [pc, #348]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80066ac:	69e0      	ldr	r0, [r4, #28]
 80066ae:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80066b0:	f022 0210 	bic.w	r2, r2, #16
 80066b4:	4302      	orrs	r2, r0
 80066b6:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066b8:	0399      	lsls	r1, r3, #14
 80066ba:	d506      	bpl.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80066bc:	4952      	ldr	r1, [pc, #328]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80066be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80066c0:	684a      	ldr	r2, [r1, #4]
 80066c2:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80066c6:	4302      	orrs	r2, r0
 80066c8:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066ca:	065a      	lsls	r2, r3, #25
 80066cc:	d506      	bpl.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066ce:	494e      	ldr	r1, [pc, #312]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80066d0:	6a20      	ldr	r0, [r4, #32]
 80066d2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80066d4:	f022 0220 	bic.w	r2, r2, #32
 80066d8:	4302      	orrs	r2, r0
 80066da:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066dc:	071f      	lsls	r7, r3, #28
 80066de:	d506      	bpl.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066e0:	4949      	ldr	r1, [pc, #292]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80066e2:	6960      	ldr	r0, [r4, #20]
 80066e4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80066e6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80066ea:	4302      	orrs	r2, r0
 80066ec:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066ee:	06de      	lsls	r6, r3, #27
 80066f0:	d506      	bpl.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066f2:	4945      	ldr	r1, [pc, #276]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80066f4:	69a0      	ldr	r0, [r4, #24]
 80066f6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80066f8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80066fc:	4302      	orrs	r2, r0
 80066fe:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006700:	059d      	lsls	r5, r3, #22
 8006702:	d506      	bpl.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006704:	4940      	ldr	r1, [pc, #256]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006706:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006708:	684a      	ldr	r2, [r1, #4]
 800670a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800670e:	4302      	orrs	r2, r0
 8006710:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006712:	0618      	lsls	r0, r3, #24
 8006714:	d506      	bpl.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006716:	493c      	ldr	r1, [pc, #240]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006718:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800671a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800671c:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8006720:	4302      	orrs	r2, r0
 8006722:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006724:	05d9      	lsls	r1, r3, #23
 8006726:	d506      	bpl.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006728:	4937      	ldr	r1, [pc, #220]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800672a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800672c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800672e:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8006732:	4302      	orrs	r2, r0
 8006734:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006736:	04da      	lsls	r2, r3, #19
 8006738:	d506      	bpl.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800673a:	4933      	ldr	r1, [pc, #204]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800673c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800673e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006744:	4302      	orrs	r2, r0
 8006746:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006748:	049b      	lsls	r3, r3, #18
 800674a:	d454      	bmi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800674c:	2000      	movs	r0, #0
 800674e:	e013      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8006750:	2600      	movs	r6, #0
 8006752:	e776      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800675a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800675c:	f7fe fbf8 	bl	8004f50 <HAL_GetTick>
 8006760:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	05da      	lsls	r2, r3, #23
 8006766:	f53f af71 	bmi.w	800664c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7fe fbf1 	bl	8004f50 <HAL_GetTick>
 800676e:	eba0 0008 	sub.w	r0, r0, r8
 8006772:	2864      	cmp	r0, #100	@ 0x64
 8006774:	d9f5      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8006776:	2003      	movs	r0, #3
}
 8006778:	b002      	add	sp, #8
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800677e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006782:	429a      	cmp	r2, r3
 8006784:	f43f af68 	beq.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006788:	6a29      	ldr	r1, [r5, #32]
 800678a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800678e:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8006792:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8006796:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800679a:	fab2 f282 	clz	r2, r2
 800679e:	4462      	add	r2, ip
 80067a0:	0092      	lsls	r2, r2, #2
 80067a2:	2701      	movs	r7, #1
 80067a4:	6017      	str	r7, [r2, #0]
 80067a6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067aa:	fab3 f383 	clz	r3, r3
 80067ae:	4463      	add	r3, ip
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067b6:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80067b8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067ba:	f57f af4d 	bpl.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80067be:	f7fe fbc7 	bl	8004f50 <HAL_GetTick>
 80067c2:	f04f 0802 	mov.w	r8, #2
 80067c6:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80067cc:	fa98 f3a8 	rbit	r3, r8
 80067d0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d4:	6a2a      	ldr	r2, [r5, #32]
 80067d6:	fa98 f3a8 	rbit	r3, r8
 80067da:	fab3 f383 	clz	r3, r3
 80067de:	fa07 f303 	lsl.w	r3, r7, r3
 80067e2:	4213      	tst	r3, r2
 80067e4:	f47f af38 	bne.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e8:	f7fe fbb2 	bl	8004f50 <HAL_GetTick>
 80067ec:	eba0 0009 	sub.w	r0, r0, r9
 80067f0:	4550      	cmp	r0, sl
 80067f2:	d9eb      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80067f4:	e7bf      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80067f6:	4a04      	ldr	r2, [pc, #16]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80067f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80067fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006800:	430b      	orrs	r3, r1
 8006802:	6313      	str	r3, [r2, #48]	@ 0x30
 8006804:	e7a2      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8006806:	bf00      	nop
 8006808:	40021000 	.word	0x40021000
 800680c:	40007000 	.word	0x40007000
 8006810:	10908100 	.word	0x10908100

08006814 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006814:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006816:	6803      	ldr	r3, [r0, #0]
 8006818:	4a09      	ldr	r2, [pc, #36]	@ (8006840 <HAL_RTC_WaitForSynchro+0x2c>)
 800681a:	60da      	str	r2, [r3, #12]
{
 800681c:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 800681e:	f7fe fb97 	bl	8004f50 <HAL_GetTick>
 8006822:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	069b      	lsls	r3, r3, #26
 800682a:	d501      	bpl.n	8006830 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800682c:	2000      	movs	r0, #0
}
 800682e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006830:	f7fe fb8e 	bl	8004f50 <HAL_GetTick>
 8006834:	1b40      	subs	r0, r0, r5
 8006836:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800683a:	d9f3      	bls.n	8006824 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 800683c:	2003      	movs	r0, #3
 800683e:	e7f6      	b.n	800682e <HAL_RTC_WaitForSynchro+0x1a>
 8006840:	0001ff5f 	.word	0x0001ff5f

08006844 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006844:	6803      	ldr	r3, [r0, #0]
{
 8006846:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006848:	68dc      	ldr	r4, [r3, #12]
 800684a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 800684e:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006850:	d117      	bne.n	8006882 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006858:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800685a:	f7fe fb79 	bl	8004f50 <HAL_GetTick>
 800685e:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	065b      	lsls	r3, r3, #25
 8006866:	d400      	bmi.n	800686a <RTC_EnterInitMode+0x26>
 8006868:	b10c      	cbz	r4, 800686e <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 800686a:	4620      	mov	r0, r4
 800686c:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800686e:	f7fe fb6f 	bl	8004f50 <HAL_GetTick>
 8006872:	1b80      	subs	r0, r0, r6
 8006874:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006878:	bf82      	ittt	hi
 800687a:	2304      	movhi	r3, #4
 800687c:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 800687e:	2401      	movhi	r4, #1
 8006880:	e7ee      	b.n	8006860 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2400      	movs	r4, #0
 8006884:	e7f1      	b.n	800686a <RTC_EnterInitMode+0x26>

08006886 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006886:	6803      	ldr	r3, [r0, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 800688e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006890:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	069b      	lsls	r3, r3, #26
{
 8006896:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006898:	d501      	bpl.n	800689e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800689a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800689c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800689e:	f7ff ffb9 	bl	8006814 <HAL_RTC_WaitForSynchro>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0f9      	beq.n	800689a <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068a6:	2304      	movs	r3, #4
 80068a8:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7f6      	b.n	800689c <RTC_ExitInitMode+0x16>

080068ae <HAL_RTC_Init>:
{
 80068ae:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80068b0:	4604      	mov	r4, r0
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d041      	beq.n	800693a <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068b6:	7f43      	ldrb	r3, [r0, #29]
 80068b8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068bc:	b913      	cbnz	r3, 80068c4 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80068be:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80068c0:	f7fe f84e 	bl	8004960 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c4:	2302      	movs	r3, #2
 80068c6:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	06d2      	lsls	r2, r2, #27
 80068ce:	d503      	bpl.n	80068d8 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80068d0:	2301      	movs	r3, #1
 80068d2:	7763      	strb	r3, [r4, #29]
 80068d4:	2000      	movs	r0, #0
}
 80068d6:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d8:	22ca      	movs	r2, #202	@ 0xca
 80068da:	625a      	str	r2, [r3, #36]	@ 0x24
 80068dc:	2253      	movs	r2, #83	@ 0x53
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7ff ffaf 	bl	8006844 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80068e6:	bb10      	cbnz	r0, 800692e <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068e8:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068ea:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80068f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068f8:	6862      	ldr	r2, [r4, #4]
 80068fa:	6899      	ldr	r1, [r3, #8]
 80068fc:	4302      	orrs	r2, r0
 80068fe:	6960      	ldr	r0, [r4, #20]
 8006900:	4302      	orrs	r2, r0
 8006902:	430a      	orrs	r2, r1
 8006904:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006906:	68e2      	ldr	r2, [r4, #12]
 8006908:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68a1      	ldr	r1, [r4, #8]
 800690e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006912:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff ffb6 	bl	8006886 <RTC_ExitInitMode>
    if (status == HAL_OK)
 800691a:	b940      	cbnz	r0, 800692e <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800691c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800691e:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006922:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006926:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800692a:	430a      	orrs	r2, r1
 800692c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	22ff      	movs	r2, #255	@ 0xff
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006934:	2800      	cmp	r0, #0
 8006936:	d0cb      	beq.n	80068d0 <HAL_RTC_Init+0x22>
 8006938:	e7cd      	b.n	80068d6 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 800693a:	2001      	movs	r0, #1
 800693c:	e7cb      	b.n	80068d6 <HAL_RTC_Init+0x28>

0800693e <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 800693e:	2300      	movs	r3, #0

  while (number >= 10U)
 8006940:	2809      	cmp	r0, #9
 8006942:	d803      	bhi.n	800694c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006944:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006948:	b2c0      	uxtb	r0, r0
 800694a:	4770      	bx	lr
    number -= 10U;
 800694c:	380a      	subs	r0, #10
    bcdhigh++;
 800694e:	3301      	adds	r3, #1
    number -= 10U;
 8006950:	b2c0      	uxtb	r0, r0
 8006952:	e7f5      	b.n	8006940 <RTC_ByteToBcd2+0x2>

08006954 <HAL_RTC_SetTime>:
{
 8006954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8006958:	7f03      	ldrb	r3, [r0, #28]
 800695a:	2b01      	cmp	r3, #1
{
 800695c:	4606      	mov	r6, r0
 800695e:	460f      	mov	r7, r1
 8006960:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006964:	d041      	beq.n	80069ea <HAL_RTC_SetTime+0x96>
 8006966:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006968:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 800696a:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800696c:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 800696e:	7838      	ldrb	r0, [r7, #0]
 8006970:	787d      	ldrb	r5, [r7, #1]
 8006972:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006974:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8006976:	2a00      	cmp	r2, #0
 8006978:	d139      	bne.n	80069ee <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800697a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 800697e:	bf08      	it	eq
 8006980:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006982:	f7ff ffdc 	bl	800693e <RTC_ByteToBcd2>
 8006986:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006988:	4628      	mov	r0, r5
 800698a:	f7ff ffd8 	bl	800693e <RTC_ByteToBcd2>
 800698e:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006990:	4620      	mov	r0, r4
 8006992:	f7ff ffd4 	bl	800693e <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006996:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006998:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 800699c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80069a0:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069a4:	23ca      	movs	r3, #202	@ 0xca
 80069a6:	624b      	str	r3, [r1, #36]	@ 0x24
 80069a8:	2353      	movs	r3, #83	@ 0x53
 80069aa:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ff49 	bl	8006844 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80069b2:	b9a8      	cbnz	r0, 80069e0 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 80069ba:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80069be:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80069c0:	6893      	ldr	r3, [r2, #8]
 80069c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069c6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80069c8:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 80069cc:	6891      	ldr	r1, [r2, #8]
 80069ce:	4303      	orrs	r3, r0
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ff56 	bl	8006886 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80069da:	b908      	cbnz	r0, 80069e0 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 80069dc:	2301      	movs	r3, #1
 80069de:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e0:	6833      	ldr	r3, [r6, #0]
 80069e2:	22ff      	movs	r2, #255	@ 0xff
 80069e4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80069e6:	2300      	movs	r3, #0
 80069e8:	7733      	strb	r3, [r6, #28]
}
 80069ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069ee:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80069f2:	bf08      	it	eq
 80069f4:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069f6:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80069f8:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80069fa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80069fe:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a02:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006a06:	e7cd      	b.n	80069a4 <HAL_RTC_SetTime+0x50>

08006a08 <HAL_RTC_SetDate>:
{
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006a0a:	7f03      	ldrb	r3, [r0, #28]
 8006a0c:	2b01      	cmp	r3, #1
{
 8006a0e:	4605      	mov	r5, r0
 8006a10:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006a14:	d027      	beq.n	8006a66 <HAL_RTC_SetDate+0x5e>
 8006a16:	2301      	movs	r3, #1
 8006a18:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a1a:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a1c:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a1e:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a20:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006a22:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a24:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a26:	b1fa      	cbz	r2, 8006a68 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a28:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006a2c:	433b      	orrs	r3, r7
 8006a2e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	22ca      	movs	r2, #202	@ 0xca
 8006a36:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a38:	2253      	movs	r2, #83	@ 0x53
 8006a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f7ff ff01 	bl	8006844 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006a42:	b958      	cbnz	r0, 8006a5c <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a44:	682a      	ldr	r2, [r5, #0]
 8006a46:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8006a4a:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8006a4e:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff ff18 	bl	8006886 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006a56:	b908      	cbnz	r0, 8006a5c <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	22ff      	movs	r2, #255	@ 0xff
 8006a60:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006a62:	2300      	movs	r3, #0
 8006a64:	772b      	strb	r3, [r5, #28]
}
 8006a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a68:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a6a:	bf42      	ittt	mi
 8006a6c:	f024 0410 	bicmi.w	r4, r4, #16
 8006a70:	340a      	addmi	r4, #10
 8006a72:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a74:	f7ff ff63 	bl	800693e <RTC_ByteToBcd2>
 8006a78:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a7a:	7848      	ldrb	r0, [r1, #1]
 8006a7c:	f7ff ff5f 	bl	800693e <RTC_ByteToBcd2>
 8006a80:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a82:	4638      	mov	r0, r7
 8006a84:	f7ff ff5b 	bl	800693e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a88:	ea40 0306 	orr.w	r3, r0, r6
 8006a8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a90:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8006a94:	e7cd      	b.n	8006a32 <HAL_RTC_SetDate+0x2a>

08006a96 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006a96:	0903      	lsrs	r3, r0, #4
 8006a98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006a9c:	f000 000f 	and.w	r0, r0, #15
 8006aa0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8006aa4:	b2c0      	uxtb	r0, r0
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_RTC_GetTime>:
{
 8006aa8:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006aaa:	6803      	ldr	r3, [r0, #0]
 8006aac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006aae:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ab0:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ab2:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ab4:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006ab8:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006abc:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ac0:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ac2:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006ac6:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006aca:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006acc:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006ace:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006ad0:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006ad2:	b952      	cbnz	r2, 8006aea <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006ad4:	f7ff ffdf 	bl	8006a96 <RTC_Bcd2ToByte>
 8006ad8:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7ff ffdb 	bl	8006a96 <RTC_Bcd2ToByte>
 8006ae0:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff ffd7 	bl	8006a96 <RTC_Bcd2ToByte>
 8006ae8:	7088      	strb	r0, [r1, #2]
}
 8006aea:	2000      	movs	r0, #0
 8006aec:	bd38      	pop	{r3, r4, r5, pc}

08006aee <HAL_RTC_GetDate>:
{
 8006aee:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006af0:	6803      	ldr	r3, [r0, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006af4:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006af8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006afc:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006b00:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b04:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b06:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b08:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006b0a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006b0c:	b952      	cbnz	r2, 8006b24 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b0e:	f7ff ffc2 	bl	8006a96 <RTC_Bcd2ToByte>
 8006b12:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7ff ffbe 	bl	8006a96 <RTC_Bcd2ToByte>
 8006b1a:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff ffba 	bl	8006a96 <RTC_Bcd2ToByte>
 8006b22:	7088      	strb	r0, [r1, #2]
}
 8006b24:	2000      	movs	r0, #0
 8006b26:	bd38      	pop	{r3, r4, r5, pc}

08006b28 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006b28:	6803      	ldr	r3, [r0, #0]
 8006b2a:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006b2c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006b30:	4770      	bx	lr

08006b32 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006b32:	6803      	ldr	r3, [r0, #0]
 8006b34:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006b36:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8006b3a:	4770      	bx	lr

08006b3c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3e:	460e      	mov	r6, r1
 8006b40:	4614      	mov	r4, r2
 8006b42:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b44:	f7fe fa04 	bl	8004f50 <HAL_GetTick>
 8006b48:	4434      	add	r4, r6
 8006b4a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006b4c:	f7fe fa00 	bl	8004f50 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b50:	4b22      	ldr	r3, [pc, #136]	@ (8006bdc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006b58:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006b5a:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b5c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b5e:	682a      	ldr	r2, [r5, #0]
 8006b60:	6890      	ldr	r0, [r2, #8]
 8006b62:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006b66:	d02d      	beq.n	8006bc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b68:	1c73      	adds	r3, r6, #1
 8006b6a:	d0f9      	beq.n	8006b60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b6c:	f7fe f9f0 	bl	8004f50 <HAL_GetTick>
 8006b70:	1bc0      	subs	r0, r0, r7
 8006b72:	42a0      	cmp	r0, r4
 8006b74:	d328      	bcc.n	8006bc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b80:	686a      	ldr	r2, [r5, #4]
 8006b82:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006b86:	d10a      	bne.n	8006b9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8006b88:	68aa      	ldr	r2, [r5, #8]
 8006b8a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006b8e:	d002      	beq.n	8006b96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b90:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006b94:	d103      	bne.n	8006b9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b9e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006ba0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006ba4:	d107      	bne.n	8006bb6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006bc2:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006bc4:	b003      	add	sp, #12
 8006bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8006bc8:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006bca:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006bcc:	2a00      	cmp	r2, #0
      count--;
 8006bce:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	bf08      	it	eq
 8006bd6:	4614      	moveq	r4, r2
 8006bd8:	e7c1      	b.n	8006b5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8006bda:	bf00      	nop
 8006bdc:	20000014 	.word	0x20000014

08006be0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006be6:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006be8:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8006bea:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006bee:	4605      	mov	r5, r0
 8006bf0:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006bf2:	f7fe f9ad 	bl	8004f50 <HAL_GetTick>
 8006bf6:	443c      	add	r4, r7
 8006bf8:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006bfa:	f7fe f9a9 	bl	8004f50 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bfe:	4b29      	ldr	r3, [pc, #164]	@ (8006ca4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c00:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2223      	movs	r2, #35	@ 0x23
 8006c08:	4353      	muls	r3, r2
 8006c0a:	0d1b      	lsrs	r3, r3, #20
 8006c0c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006c0e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c10:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c12:	682a      	ldr	r2, [r5, #0]
 8006c14:	6890      	ldr	r0, [r2, #8]
 8006c16:	4030      	ands	r0, r6
 8006c18:	d038      	beq.n	8006c8c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c1a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c1e:	bf01      	itttt	eq
 8006c20:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006c24:	b2db      	uxtbeq	r3, r3
 8006c26:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c2a:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	1c7b      	adds	r3, r7, #1
 8006c30:	d0f0      	beq.n	8006c14 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c32:	f7fe f98d 	bl	8004f50 <HAL_GetTick>
 8006c36:	eba0 0008 	sub.w	r0, r0, r8
 8006c3a:	42a0      	cmp	r0, r4
 8006c3c:	d329      	bcc.n	8006c92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c48:	686a      	ldr	r2, [r5, #4]
 8006c4a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006c4e:	d10a      	bne.n	8006c66 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006c50:	68aa      	ldr	r2, [r5, #8]
 8006c52:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006c56:	d002      	beq.n	8006c5e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c58:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006c5c:	d103      	bne.n	8006c66 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c66:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006c68:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006c6c:	d107      	bne.n	8006c7e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c84:	2300      	movs	r3, #0
 8006c86:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c8a:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006c8c:	b003      	add	sp, #12
 8006c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8006c92:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006c94:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006c96:	2a00      	cmp	r2, #0
      count--;
 8006c98:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	bf08      	it	eq
 8006ca0:	4614      	moveq	r4, r2
 8006ca2:	e7b6      	b.n	8006c12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8006ca4:	20000014 	.word	0x20000014

08006ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006caa:	6843      	ldr	r3, [r0, #4]
 8006cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	460e      	mov	r6, r1
 8006cb4:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb6:	d10b      	bne.n	8006cd0 <SPI_EndRxTransaction+0x28>
 8006cb8:	6883      	ldr	r3, [r0, #8]
 8006cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbe:	d002      	beq.n	8006cc6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc4:	d104      	bne.n	8006cd0 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cc6:	6822      	ldr	r2, [r4, #0]
 8006cc8:	6813      	ldr	r3, [r2, #0]
 8006cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cce:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	463a      	mov	r2, r7
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f7ff ff31 	bl	8006b3c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b128      	cbz	r0, 8006cea <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cde:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006ce0:	f043 0320 	orr.w	r3, r3, #32
 8006ce4:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ce6:	2503      	movs	r5, #3
 8006ce8:	e013      	b.n	8006d12 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cea:	6863      	ldr	r3, [r4, #4]
 8006cec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cf0:	d10f      	bne.n	8006d12 <SPI_EndRxTransaction+0x6a>
 8006cf2:	68a3      	ldr	r3, [r4, #8]
 8006cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf8:	d002      	beq.n	8006d00 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfe:	d108      	bne.n	8006d12 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d00:	463b      	mov	r3, r7
 8006d02:	4632      	mov	r2, r6
 8006d04:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f7ff ff69 	bl	8006be0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1e5      	bne.n	8006cde <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8006d12:	4628      	mov	r0, r5
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d16 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d16:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d18:	4613      	mov	r3, r2
{
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d1e:	460a      	mov	r2, r1
 8006d20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006d24:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d26:	f7ff ff5b 	bl	8006be0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006d2a:	b128      	cbz	r0, 8006d38 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006d2e:	f043 0320 	orr.w	r3, r3, #32
 8006d32:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d34:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d38:	4632      	mov	r2, r6
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f7ff fefd 	bl	8006b3c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d1f2      	bne.n	8006d2c <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d46:	4633      	mov	r3, r6
 8006d48:	462a      	mov	r2, r5
 8006d4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff46 	bl	8006be0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0ee      	beq.n	8006d36 <SPI_EndRxTxTransaction+0x20>
 8006d58:	e7e8      	b.n	8006d2c <SPI_EndRxTxTransaction+0x16>

08006d5a <HAL_SPI_Init>:
{
 8006d5a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d067      	beq.n	8006e32 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d62:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d15d      	bne.n	8006e24 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d68:	6842      	ldr	r2, [r0, #4]
 8006d6a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006d6e:	d000      	beq.n	8006d72 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d70:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d76:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006d7a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d7e:	b923      	cbnz	r3, 8006d8a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8006d80:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f7fd fdff 	bl	8004988 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006d8a:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d8c:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006d94:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d96:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d9e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	d942      	bls.n	8006e2c <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006da6:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006da8:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dac:	bf18      	it	ne
 8006dae:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006db0:	68a6      	ldr	r6, [r4, #8]
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	69a1      	ldr	r1, [r4, #24]
 8006db6:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8006dba:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006dbe:	4333      	orrs	r3, r6
 8006dc0:	6926      	ldr	r6, [r4, #16]
 8006dc2:	f006 0602 	and.w	r6, r6, #2
 8006dc6:	4333      	orrs	r3, r6
 8006dc8:	6966      	ldr	r6, [r4, #20]
 8006dca:	f006 0601 	and.w	r6, r6, #1
 8006dce:	4333      	orrs	r3, r6
 8006dd0:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8006dd4:	4333      	orrs	r3, r6
 8006dd6:	69e6      	ldr	r6, [r4, #28]
 8006dd8:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8006ddc:	4333      	orrs	r3, r6
 8006dde:	6a26      	ldr	r6, [r4, #32]
 8006de0:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8006de4:	4333      	orrs	r3, r6
 8006de6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006de8:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8006dec:	4333      	orrs	r3, r6
 8006dee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8006df2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006df4:	f006 0608 	and.w	r6, r6, #8
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8006e00:	4333      	orrs	r3, r6
 8006e02:	0c09      	lsrs	r1, r1, #16
 8006e04:	4303      	orrs	r3, r0
 8006e06:	f001 0104 	and.w	r1, r1, #4
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	432b      	orrs	r3, r5
 8006e0e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e10:	69d3      	ldr	r3, [r2, #28]
 8006e12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e16:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e18:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006e1a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e1e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e24:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e2a:	e7a2      	b.n	8006d72 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e2c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006e30:	e7bc      	b.n	8006dac <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7f5      	b.n	8006e22 <HAL_SPI_Init+0xc8>

08006e36 <HAL_SPI_Transmit>:
{
 8006e36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006e3c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006e40:	2b01      	cmp	r3, #1
{
 8006e42:	4604      	mov	r4, r0
 8006e44:	460d      	mov	r5, r1
 8006e46:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006e48:	f000 80bc 	beq.w	8006fc4 <HAL_SPI_Transmit+0x18e>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006e52:	f7fe f87d 	bl	8004f50 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e56:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006e5a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006e5c:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e5e:	fa5f f983 	uxtb.w	r9, r3
 8006e62:	f040 80ac 	bne.w	8006fbe <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	d069      	beq.n	8006f3e <HAL_SPI_Transmit+0x108>
 8006e6a:	f1b8 0f00 	cmp.w	r8, #0
 8006e6e:	d066      	beq.n	8006f3e <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e70:	2303      	movs	r3, #3
 8006e72:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8006e7a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8006e7e:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e82:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e84:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006e88:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8c:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006e8e:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e90:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8006e96:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e9a:	d107      	bne.n	8006eac <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8006e9c:	6833      	ldr	r3, [r6, #0]
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006eaa:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eac:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eae:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006eb2:	bf5e      	ittt	pl
 8006eb4:	6833      	ldrpl	r3, [r6, #0]
 8006eb6:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006eba:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ebc:	68e3      	ldr	r3, [r4, #12]
 8006ebe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ec2:	d943      	bls.n	8006f4c <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec4:	b112      	cbz	r2, 8006ecc <HAL_SPI_Transmit+0x96>
 8006ec6:	f1b8 0f01 	cmp.w	r8, #1
 8006eca:	d107      	bne.n	8006edc <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ecc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ed0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed2:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ed4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006edc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	b9b3      	cbnz	r3, 8006f10 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff ff15 	bl	8006d16 <SPI_EndRxTxTransaction>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d163      	bne.n	8006fb8 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	b933      	cbnz	r3, 8006f02 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	9201      	str	r2, [sp, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f02:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006f04:	b9db      	cbnz	r3, 8006f3e <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8006f06:	2201      	movs	r2, #1
 8006f08:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f0c:	4699      	mov	r9, r3
 8006f0e:	e016      	b.n	8006f3e <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	6893      	ldr	r3, [r2, #8]
 8006f14:	079d      	lsls	r5, r3, #30
 8006f16:	d505      	bpl.n	8006f24 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f1a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006f1e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006f22:	e7d7      	b.n	8006ed4 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f24:	f7fe f814 	bl	8004f50 <HAL_GetTick>
 8006f28:	eba0 000a 	sub.w	r0, r0, sl
 8006f2c:	42b8      	cmp	r0, r7
 8006f2e:	d3d5      	bcc.n	8006edc <HAL_SPI_Transmit+0xa6>
 8006f30:	1c78      	adds	r0, r7, #1
 8006f32:	d0d3      	beq.n	8006edc <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006f3a:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006f44:	4648      	mov	r0, r9
 8006f46:	b002      	add	sp, #8
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4c:	b112      	cbz	r2, 8006f54 <HAL_SPI_Transmit+0x11e>
 8006f4e:	f1b8 0f01 	cmp.w	r8, #1
 8006f52:	d113      	bne.n	8006f7c <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006f54:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d906      	bls.n	8006f6a <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006f60:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f62:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f66:	3b02      	subs	r3, #2
 8006f68:	e006      	b.n	8006f78 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f6a:	782b      	ldrb	r3, [r5, #0]
 8006f6c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8006f6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f70:	3301      	adds	r3, #1
 8006f72:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f74:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006f7c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0ae      	beq.n	8006ee2 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	6893      	ldr	r3, [r2, #8]
 8006f88:	0799      	lsls	r1, r3, #30
 8006f8a:	d50c      	bpl.n	8006fa6 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8006f8c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006f90:	b289      	uxth	r1, r1
 8006f92:	2901      	cmp	r1, #1
 8006f94:	d904      	bls.n	8006fa0 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f96:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006f9a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006f9e:	e7e1      	b.n	8006f64 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006fa4:	e7e3      	b.n	8006f6e <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fa6:	f7fd ffd3 	bl	8004f50 <HAL_GetTick>
 8006faa:	eba0 000a 	sub.w	r0, r0, sl
 8006fae:	42b8      	cmp	r0, r7
 8006fb0:	d3e4      	bcc.n	8006f7c <HAL_SPI_Transmit+0x146>
 8006fb2:	1c7b      	adds	r3, r7, #1
 8006fb4:	d0e2      	beq.n	8006f7c <HAL_SPI_Transmit+0x146>
 8006fb6:	e7bd      	b.n	8006f34 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb8:	2320      	movs	r3, #32
 8006fba:	6623      	str	r3, [r4, #96]	@ 0x60
 8006fbc:	e798      	b.n	8006ef0 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8006fbe:	f04f 0902 	mov.w	r9, #2
 8006fc2:	e7bc      	b.n	8006f3e <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8006fc4:	f04f 0902 	mov.w	r9, #2
 8006fc8:	e7bc      	b.n	8006f44 <HAL_SPI_Transmit+0x10e>

08006fca <HAL_SPI_TransmitReceive>:
{
 8006fca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fce:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006fd0:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8006fd4:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8006fd6:	2b01      	cmp	r3, #1
{
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006fde:	f000 8122 	beq.w	8007226 <HAL_SPI_TransmitReceive+0x25c>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006fe8:	f7fd ffb2 	bl	8004f50 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006fec:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006ff0:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ff2:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8006ff4:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8006ff6:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ff8:	d00a      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x46>
 8006ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ffe:	f040 8110 	bne.w	8007222 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007002:	68a2      	ldr	r2, [r4, #8]
 8007004:	2a00      	cmp	r2, #0
 8007006:	f040 810c 	bne.w	8007222 <HAL_SPI_TransmitReceive+0x258>
 800700a:	2904      	cmp	r1, #4
 800700c:	f040 8109 	bne.w	8007222 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007010:	b92d      	cbnz	r5, 800701e <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8007012:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8007014:	2300      	movs	r3, #0
 8007016:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800701a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800701e:	f1b9 0f00 	cmp.w	r9, #0
 8007022:	d0f6      	beq.n	8007012 <HAL_SPI_TransmitReceive+0x48>
 8007024:	2e00      	cmp	r6, #0
 8007026:	d0f4      	beq.n	8007012 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007028:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800702c:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702e:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007030:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007034:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007036:	bf1c      	itt	ne
 8007038:	2205      	movne	r2, #5
 800703a:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800703e:	2200      	movs	r2, #0
 8007040:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007042:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8007046:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800704a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800704c:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8007050:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007054:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007056:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007058:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800705a:	d801      	bhi.n	8007060 <HAL_SPI_TransmitReceive+0x96>
 800705c:	2e01      	cmp	r6, #1
 800705e:	d02e      	beq.n	80070be <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007060:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007064:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007066:	680a      	ldr	r2, [r1, #0]
 8007068:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800706a:	bf5e      	ittt	pl
 800706c:	680a      	ldrpl	r2, [r1, #0]
 800706e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8007072:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007074:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8007078:	d957      	bls.n	800712a <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707a:	b10b      	cbz	r3, 8007080 <HAL_SPI_TransmitReceive+0xb6>
 800707c:	2e01      	cmp	r6, #1
 800707e:	d107      	bne.n	8007090 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007080:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007084:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8007086:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007088:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800708a:	3b01      	subs	r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007090:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007092:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	b9ab      	cbnz	r3, 80070c4 <HAL_SPI_TransmitReceive+0xfa>
 8007098:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800709c:	b29b      	uxth	r3, r3
 800709e:	b98b      	cbnz	r3, 80070c4 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a0:	4642      	mov	r2, r8
 80070a2:	4639      	mov	r1, r7
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff fe36 	bl	8006d16 <SPI_EndRxTxTransaction>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f040 80b5 	bne.w	800721a <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070b0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1ad      	bne.n	8007012 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80070bc:	e7aa      	b.n	8007014 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070c2:	e7cf      	b.n	8007064 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070c4:	6821      	ldr	r1, [r4, #0]
 80070c6:	688b      	ldr	r3, [r1, #8]
 80070c8:	079e      	lsls	r6, r3, #30
 80070ca:	d50d      	bpl.n	80070e8 <HAL_SPI_TransmitReceive+0x11e>
 80070cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b153      	cbz	r3, 80070e8 <HAL_SPI_TransmitReceive+0x11e>
 80070d2:	b145      	cbz	r5, 80070e6 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80070d6:	f833 2b02 	ldrh.w	r2, [r3], #2
 80070da:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80070de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80070e6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	f012 0201 	ands.w	r2, r2, #1
 80070ee:	d00f      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x146>
 80070f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b15b      	cbz	r3, 8007110 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070fa:	68c9      	ldr	r1, [r1, #12]
 80070fc:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007100:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007102:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007106:	3b01      	subs	r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800710e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007110:	f7fd ff1e 	bl	8004f50 <HAL_GetTick>
 8007114:	eba0 0008 	sub.w	r0, r0, r8
 8007118:	42b8      	cmp	r0, r7
 800711a:	d3ba      	bcc.n	8007092 <HAL_SPI_TransmitReceive+0xc8>
 800711c:	1c78      	adds	r0, r7, #1
 800711e:	d0b8      	beq.n	8007092 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8007120:	2301      	movs	r3, #1
 8007122:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8007126:	2003      	movs	r0, #3
 8007128:	e774      	b.n	8007014 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800712a:	b10b      	cbz	r3, 8007130 <HAL_SPI_TransmitReceive+0x166>
 800712c:	2e01      	cmp	r6, #1
 800712e:	d10b      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8007130:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d909      	bls.n	800714c <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007138:	f835 3b02 	ldrh.w	r3, [r5], #2
 800713c:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 800713e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007140:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007142:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8007144:	b29b      	uxth	r3, r3
 8007146:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007148:	2501      	movs	r5, #1
 800714a:	e048      	b.n	80071de <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800714c:	782b      	ldrb	r3, [r5, #0]
 800714e:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8007150:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007152:	3301      	adds	r3, #1
 8007154:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007156:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007158:	3b01      	subs	r3, #1
 800715a:	e7f3      	b.n	8007144 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	6893      	ldr	r3, [r2, #8]
 8007160:	0799      	lsls	r1, r3, #30
 8007162:	d511      	bpl.n	8007188 <HAL_SPI_TransmitReceive+0x1be>
 8007164:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007166:	b29b      	uxth	r3, r3
 8007168:	b173      	cbz	r3, 8007188 <HAL_SPI_TransmitReceive+0x1be>
 800716a:	b165      	cbz	r5, 8007186 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 800716c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800716e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8007170:	b289      	uxth	r1, r1
 8007172:	2901      	cmp	r1, #1
 8007174:	d93d      	bls.n	80071f2 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007176:	f833 1b02 	ldrh.w	r1, [r3], #2
 800717a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800717c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800717e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007180:	3b02      	subs	r3, #2
 8007182:	b29b      	uxth	r3, r3
 8007184:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8007186:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	6891      	ldr	r1, [r2, #8]
 800718c:	f011 0101 	ands.w	r1, r1, #1
 8007190:	d01d      	beq.n	80071ce <HAL_SPI_TransmitReceive+0x204>
 8007192:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007196:	b29b      	uxth	r3, r3
 8007198:	b1cb      	cbz	r3, 80071ce <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 800719a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800719e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80071a0:	b280      	uxth	r0, r0
 80071a2:	2801      	cmp	r0, #1
 80071a4:	d92d      	bls.n	8007202 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071a6:	68d0      	ldr	r0, [r2, #12]
 80071a8:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ac:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80071ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80071b2:	3b02      	subs	r3, #2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80071ba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071c2:	bf9e      	ittt	ls
 80071c4:	6853      	ldrls	r3, [r2, #4]
 80071c6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80071ca:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80071cc:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071ce:	f7fd febf 	bl	8004f50 <HAL_GetTick>
 80071d2:	eba0 0008 	sub.w	r0, r0, r8
 80071d6:	42b8      	cmp	r0, r7
 80071d8:	d301      	bcc.n	80071de <HAL_SPI_TransmitReceive+0x214>
 80071da:	1c7b      	adds	r3, r7, #1
 80071dc:	d1a0      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1ba      	bne.n	800715c <HAL_SPI_TransmitReceive+0x192>
 80071e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1b5      	bne.n	800715c <HAL_SPI_TransmitReceive+0x192>
 80071f0:	e756      	b.n	80070a0 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80071f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071f8:	3301      	adds	r3, #1
 80071fa:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80071fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80071fe:	3b01      	subs	r3, #1
 8007200:	e7bf      	b.n	8007182 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007202:	7b12      	ldrb	r2, [r2, #12]
 8007204:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007206:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007208:	3301      	adds	r3, #1
 800720a:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800720c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007210:	3b01      	subs	r3, #1
 8007212:	b29b      	uxth	r3, r3
 8007214:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007218:	e7d8      	b.n	80071cc <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721a:	2320      	movs	r3, #32
 800721c:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800721e:	2001      	movs	r0, #1
 8007220:	e746      	b.n	80070b0 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8007222:	2002      	movs	r0, #2
 8007224:	e6f6      	b.n	8007014 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8007226:	2002      	movs	r0, #2
 8007228:	e6f7      	b.n	800701a <HAL_SPI_TransmitReceive+0x50>

0800722a <HAL_SPI_Receive>:
{
 800722a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800722e:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8007230:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8007234:	2b01      	cmp	r3, #1
{
 8007236:	4604      	mov	r4, r0
 8007238:	468a      	mov	sl, r1
 800723a:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800723c:	b2de      	uxtb	r6, r3
 800723e:	f040 80a7 	bne.w	8007390 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007242:	6843      	ldr	r3, [r0, #4]
 8007244:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007248:	d10e      	bne.n	8007268 <HAL_SPI_Receive+0x3e>
 800724a:	6883      	ldr	r3, [r0, #8]
 800724c:	b963      	cbnz	r3, 8007268 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800724e:	2304      	movs	r3, #4
 8007250:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007254:	4613      	mov	r3, r2
 8007256:	9700      	str	r7, [sp, #0]
 8007258:	460a      	mov	r2, r1
 800725a:	f7ff feb6 	bl	8006fca <HAL_SPI_TransmitReceive>
 800725e:	4606      	mov	r6, r0
}
 8007260:	4630      	mov	r0, r6
 8007262:	b002      	add	sp, #8
 8007264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8007268:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800726c:	2b01      	cmp	r3, #1
 800726e:	f000 8091 	beq.w	8007394 <HAL_SPI_Receive+0x16a>
 8007272:	2301      	movs	r3, #1
 8007274:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8007278:	f7fd fe6a 	bl	8004f50 <HAL_GetTick>
 800727c:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 800727e:	f1ba 0f00 	cmp.w	sl, #0
 8007282:	d075      	beq.n	8007370 <HAL_SPI_Receive+0x146>
 8007284:	f1b8 0f00 	cmp.w	r8, #0
 8007288:	d072      	beq.n	8007370 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800728a:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800728c:	2304      	movs	r3, #4
 800728e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8007292:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007296:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007298:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800729a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 800729e:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80072a0:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a2:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a4:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a6:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072a8:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072ac:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b0:	bf8c      	ite	hi
 80072b2:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072b6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80072ba:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072be:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c6:	d107      	bne.n	80072d8 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ce:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072d6:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80072dc:	bf5e      	ittt	pl
 80072de:	682b      	ldrpl	r3, [r5, #0]
 80072e0:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80072e4:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80072e6:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80072ea:	d923      	bls.n	8007334 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 80072ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	b323      	cbz	r3, 800733e <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	07d2      	lsls	r2, r2, #31
 80072fa:	d53d      	bpl.n	8007378 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007300:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007304:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007306:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800730a:	3b01      	subs	r3, #1
 800730c:	b29b      	uxth	r3, r3
 800730e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007312:	e7eb      	b.n	80072ec <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	07d0      	lsls	r0, r2, #31
 800731a:	d51d      	bpl.n	8007358 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800731c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800731e:	7b1b      	ldrb	r3, [r3, #12]
 8007320:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007322:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007324:	3301      	adds	r3, #1
 8007326:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007328:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800732c:	3b01      	subs	r3, #1
 800732e:	b29b      	uxth	r3, r3
 8007330:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8007334:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1ea      	bne.n	8007314 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800733e:	464a      	mov	r2, r9
 8007340:	4639      	mov	r1, r7
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff fcb0 	bl	8006ca8 <SPI_EndRxTransaction>
 8007348:	b9f8      	cbnz	r0, 800738a <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800734a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800734c:	b983      	cbnz	r3, 8007370 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 800734e:	2201      	movs	r2, #1
 8007350:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007354:	461e      	mov	r6, r3
 8007356:	e00b      	b.n	8007370 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007358:	f7fd fdfa 	bl	8004f50 <HAL_GetTick>
 800735c:	eba0 0009 	sub.w	r0, r0, r9
 8007360:	42b8      	cmp	r0, r7
 8007362:	d3e7      	bcc.n	8007334 <HAL_SPI_Receive+0x10a>
 8007364:	1c79      	adds	r1, r7, #1
 8007366:	d0e5      	beq.n	8007334 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8007368:	2301      	movs	r3, #1
 800736a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800736e:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8007370:	2300      	movs	r3, #0
 8007372:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8007376:	e773      	b.n	8007260 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007378:	f7fd fdea 	bl	8004f50 <HAL_GetTick>
 800737c:	eba0 0009 	sub.w	r0, r0, r9
 8007380:	42b8      	cmp	r0, r7
 8007382:	d3b3      	bcc.n	80072ec <HAL_SPI_Receive+0xc2>
 8007384:	1c7b      	adds	r3, r7, #1
 8007386:	d0b1      	beq.n	80072ec <HAL_SPI_Receive+0xc2>
 8007388:	e7ee      	b.n	8007368 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800738a:	2320      	movs	r3, #32
 800738c:	6623      	str	r3, [r4, #96]	@ 0x60
 800738e:	e7dc      	b.n	800734a <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8007390:	2602      	movs	r6, #2
 8007392:	e7ed      	b.n	8007370 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8007394:	2602      	movs	r6, #2
 8007396:	e763      	b.n	8007260 <HAL_SPI_Receive+0x36>

08007398 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007398:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800739c:	2b01      	cmp	r3, #1
 800739e:	d127      	bne.n	80073f0 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a2:	4a14      	ldr	r2, [pc, #80]	@ (80073f4 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a8:	6803      	ldr	r3, [r0, #0]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d012      	beq.n	80073d4 <HAL_TIM_Base_Start+0x3c>
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b2:	d00f      	beq.n	80073d4 <HAL_TIM_Base_Start+0x3c>
 80073b4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00b      	beq.n	80073d4 <HAL_TIM_Base_Start+0x3c>
 80073bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d007      	beq.n	80073d4 <HAL_TIM_Base_Start+0x3c>
 80073c4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <HAL_TIM_Base_Start+0x3c>
 80073cc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d4:	6899      	ldr	r1, [r3, #8]
 80073d6:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <HAL_TIM_Base_Start+0x60>)
 80073d8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073da:	2a06      	cmp	r2, #6
 80073dc:	d006      	beq.n	80073ec <HAL_TIM_Base_Start+0x54>
 80073de:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80073e2:	d003      	beq.n	80073ec <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80073ec:	2000      	movs	r0, #0
 80073ee:	4770      	bx	lr
    return HAL_ERROR;
 80073f0:	2001      	movs	r0, #1
}
 80073f2:	4770      	bx	lr
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	00010007 	.word	0x00010007

080073fc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007400:	2b01      	cmp	r3, #1
 8007402:	d12b      	bne.n	800745c <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	2302      	movs	r3, #2
 8007406:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800740a:	6803      	ldr	r3, [r0, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	4a12      	ldr	r2, [pc, #72]	@ (8007460 <HAL_TIM_Base_Start_IT+0x64>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d012      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x44>
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800741e:	d00f      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x44>
 8007420:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x44>
 8007428:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x44>
 8007430:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <HAL_TIM_Base_Start_IT+0x44>
 8007438:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800743c:	4293      	cmp	r3, r2
 800743e:	d107      	bne.n	8007450 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007440:	6899      	ldr	r1, [r3, #8]
 8007442:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <HAL_TIM_Base_Start_IT+0x68>)
 8007444:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007446:	2a06      	cmp	r2, #6
 8007448:	d006      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x5c>
 800744a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800744e:	d003      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr
    return HAL_ERROR;
 800745c:	2001      	movs	r0, #1
}
 800745e:	4770      	bx	lr
 8007460:	40012c00 	.word	0x40012c00
 8007464:	00010007 	.word	0x00010007

08007468 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007468:	4770      	bx	lr

0800746a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800746e:	4770      	bx	lr

08007470 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8007470:	6803      	ldr	r3, [r0, #0]
{
 8007472:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8007474:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007476:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007478:	07b2      	lsls	r2, r6, #30
{
 800747a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800747c:	d50d      	bpl.n	800749a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800747e:	07a9      	lsls	r1, r5, #30
 8007480:	d50b      	bpl.n	800749a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007482:	f06f 0202 	mvn.w	r2, #2
 8007486:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007488:	2201      	movs	r2, #1
 800748a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	079a      	lsls	r2, r3, #30
 8007490:	d074      	beq.n	800757c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007492:	f7ff ffea 	bl	800746a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007496:	2300      	movs	r3, #0
 8007498:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800749a:	0773      	lsls	r3, r6, #29
 800749c:	d510      	bpl.n	80074c0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800749e:	0768      	lsls	r0, r5, #29
 80074a0:	d50e      	bpl.n	80074c0 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f06f 0204 	mvn.w	r2, #4
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074aa:	2202      	movs	r2, #2
 80074ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80074b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074b6:	d067      	beq.n	8007588 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80074b8:	f7ff ffd7 	bl	800746a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074bc:	2300      	movs	r3, #0
 80074be:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074c0:	0731      	lsls	r1, r6, #28
 80074c2:	d50f      	bpl.n	80074e4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074c4:	072a      	lsls	r2, r5, #28
 80074c6:	d50d      	bpl.n	80074e4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	f06f 0208 	mvn.w	r2, #8
 80074ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074d0:	2204      	movs	r2, #4
 80074d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80074d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074da:	d05b      	beq.n	8007594 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80074dc:	f7ff ffc5 	bl	800746a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e0:	2300      	movs	r3, #0
 80074e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074e4:	06f0      	lsls	r0, r6, #27
 80074e6:	d510      	bpl.n	800750a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074e8:	06e9      	lsls	r1, r5, #27
 80074ea:	d50e      	bpl.n	800750a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	f06f 0210 	mvn.w	r2, #16
 80074f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f4:	2208      	movs	r2, #8
 80074f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007500:	d04e      	beq.n	80075a0 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8007502:	f7ff ffb2 	bl	800746a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	2300      	movs	r3, #0
 8007508:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800750a:	07f2      	lsls	r2, r6, #31
 800750c:	d508      	bpl.n	8007520 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800750e:	07eb      	lsls	r3, r5, #31
 8007510:	d506      	bpl.n	8007520 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	f06f 0201 	mvn.w	r2, #1
 8007518:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800751a:	4620      	mov	r0, r4
 800751c:	f7fc fa3e 	bl	800399c <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007520:	0630      	lsls	r0, r6, #24
 8007522:	d508      	bpl.n	8007536 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007524:	0629      	lsls	r1, r5, #24
 8007526:	d506      	bpl.n	8007536 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800752e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007530:	4620      	mov	r0, r4
 8007532:	f000 f9b8 	bl	80078a6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007536:	05f2      	lsls	r2, r6, #23
 8007538:	d508      	bpl.n	800754c <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800753a:	062b      	lsls	r3, r5, #24
 800753c:	d506      	bpl.n	800754c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007544:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007546:	4620      	mov	r0, r4
 8007548:	f000 f9ae 	bl	80078a8 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800754c:	0670      	lsls	r0, r6, #25
 800754e:	d508      	bpl.n	8007562 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007550:	0669      	lsls	r1, r5, #25
 8007552:	d506      	bpl.n	8007562 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800755a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff ff86 	bl	800746e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007562:	06b2      	lsls	r2, r6, #26
 8007564:	d522      	bpl.n	80075ac <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007566:	06ab      	lsls	r3, r5, #26
 8007568:	d520      	bpl.n	80075ac <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007570:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007572:	611a      	str	r2, [r3, #16]
}
 8007574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007578:	f000 b994 	b.w	80078a4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800757c:	f7ff ff74 	bl	8007468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff ff73 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
 8007586:	e786      	b.n	8007496 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007588:	f7ff ff6e 	bl	8007468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	4620      	mov	r0, r4
 800758e:	f7ff ff6d 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
 8007592:	e793      	b.n	80074bc <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007594:	f7ff ff68 	bl	8007468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007598:	4620      	mov	r0, r4
 800759a:	f7ff ff67 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
 800759e:	e79f      	b.n	80074e0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a0:	f7ff ff62 	bl	8007468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff ff61 	bl	800746c <HAL_TIM_PWM_PulseFinishedCallback>
 80075aa:	e7ac      	b.n	8007506 <HAL_TIM_IRQHandler+0x96>
}
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080075b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007670 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80075b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b4:	4290      	cmp	r0, r2
 80075b6:	d00e      	beq.n	80075d6 <TIM_Base_SetConfig+0x26>
 80075b8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80075bc:	d00b      	beq.n	80075d6 <TIM_Base_SetConfig+0x26>
 80075be:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80075c2:	4290      	cmp	r0, r2
 80075c4:	d007      	beq.n	80075d6 <TIM_Base_SetConfig+0x26>
 80075c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075ca:	4290      	cmp	r0, r2
 80075cc:	d003      	beq.n	80075d6 <TIM_Base_SetConfig+0x26>
 80075ce:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80075d2:	4290      	cmp	r0, r2
 80075d4:	d115      	bne.n	8007602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80075d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80075dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075de:	4a24      	ldr	r2, [pc, #144]	@ (8007670 <TIM_Base_SetConfig+0xc0>)
 80075e0:	4290      	cmp	r0, r2
 80075e2:	d019      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 80075e4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80075e8:	d016      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 80075ea:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80075ee:	4290      	cmp	r0, r2
 80075f0:	d012      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 80075f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075f6:	4290      	cmp	r0, r2
 80075f8:	d00e      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 80075fa:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80075fe:	4290      	cmp	r0, r2
 8007600:	d00a      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 8007602:	4a1c      	ldr	r2, [pc, #112]	@ (8007674 <TIM_Base_SetConfig+0xc4>)
 8007604:	4290      	cmp	r0, r2
 8007606:	d007      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 8007608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800760c:	4290      	cmp	r0, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0x68>
 8007610:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007614:	4290      	cmp	r0, r2
 8007616:	d103      	bne.n	8007620 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007618:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800761a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800761e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007620:	694a      	ldr	r2, [r1, #20]
 8007622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007626:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007628:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800762a:	688b      	ldr	r3, [r1, #8]
 800762c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762e:	680b      	ldr	r3, [r1, #0]
 8007630:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007632:	4b0f      	ldr	r3, [pc, #60]	@ (8007670 <TIM_Base_SetConfig+0xc0>)
 8007634:	4298      	cmp	r0, r3
 8007636:	d00f      	beq.n	8007658 <TIM_Base_SetConfig+0xa8>
 8007638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763c:	4298      	cmp	r0, r3
 800763e:	d00b      	beq.n	8007658 <TIM_Base_SetConfig+0xa8>
 8007640:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007644:	4298      	cmp	r0, r3
 8007646:	d007      	beq.n	8007658 <TIM_Base_SetConfig+0xa8>
 8007648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800764c:	4298      	cmp	r0, r3
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0xa8>
 8007650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007654:	4298      	cmp	r0, r3
 8007656:	d101      	bne.n	800765c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007658:	690b      	ldr	r3, [r1, #16]
 800765a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800765c:	2301      	movs	r3, #1
 800765e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007660:	6903      	ldr	r3, [r0, #16]
 8007662:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007664:	bf42      	ittt	mi
 8007666:	6903      	ldrmi	r3, [r0, #16]
 8007668:	f023 0301 	bicmi.w	r3, r3, #1
 800766c:	6103      	strmi	r3, [r0, #16]
  }
}
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40014000 	.word	0x40014000

08007678 <HAL_TIM_Base_Init>:
{
 8007678:	b510      	push	{r4, lr}
  if (htim == NULL)
 800767a:	4604      	mov	r4, r0
 800767c:	b350      	cbz	r0, 80076d4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800767e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007682:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007686:	b91b      	cbnz	r3, 8007690 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007688:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800768c:	f7fd f9cc 	bl	8004a28 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007692:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007698:	1d21      	adds	r1, r4, #4
 800769a:	f7ff ff89 	bl	80075b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769e:	2301      	movs	r3, #1
 80076a0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80076a4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80076aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80076ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80076b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80076b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80076c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80076c6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80076ca:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80076ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80076d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80076d4:	2001      	movs	r0, #1
 80076d6:	e7fc      	b.n	80076d2 <HAL_TIM_Base_Init+0x5a>

080076d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076da:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076dc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076de:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076e2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80076e6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e8:	6082      	str	r2, [r0, #8]
}
 80076ea:	bd10      	pop	{r4, pc}

080076ec <HAL_TIM_ConfigClockSource>:
{
 80076ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80076ee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80076f2:	2b01      	cmp	r3, #1
{
 80076f4:	4604      	mov	r4, r0
 80076f6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80076fa:	f000 808c 	beq.w	8007816 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007702:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007704:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007706:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800770a:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800770c:	4b43      	ldr	r3, [pc, #268]	@ (800781c <HAL_TIM_ConfigClockSource+0x130>)
 800770e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007710:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007712:	680b      	ldr	r3, [r1, #0]
 8007714:	2b60      	cmp	r3, #96	@ 0x60
 8007716:	d04f      	beq.n	80077b8 <HAL_TIM_ConfigClockSource+0xcc>
 8007718:	d832      	bhi.n	8007780 <HAL_TIM_ConfigClockSource+0x94>
 800771a:	2b40      	cmp	r3, #64	@ 0x40
 800771c:	d064      	beq.n	80077e8 <HAL_TIM_ConfigClockSource+0xfc>
 800771e:	d816      	bhi.n	800774e <HAL_TIM_ConfigClockSource+0x62>
 8007720:	2b20      	cmp	r3, #32
 8007722:	d00d      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x54>
 8007724:	d80a      	bhi.n	800773c <HAL_TIM_ConfigClockSource+0x50>
 8007726:	f033 0110 	bics.w	r1, r3, #16
 800772a:	d009      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 800772c:	2301      	movs	r3, #1
 800772e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007732:	2300      	movs	r3, #0
 8007734:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007738:	4610      	mov	r0, r2
 800773a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800773c:	2b30      	cmp	r3, #48	@ 0x30
 800773e:	d1f5      	bne.n	800772c <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8007740:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007746:	4313      	orrs	r3, r2
 8007748:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800774c:	e028      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 800774e:	2b50      	cmp	r3, #80	@ 0x50
 8007750:	d1ec      	bne.n	800772c <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8007752:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007754:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007756:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007758:	6a03      	ldr	r3, [r0, #32]
 800775a:	f023 0301 	bic.w	r3, r3, #1
 800775e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007760:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007762:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800776a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800776e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007770:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007772:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007774:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800777a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800777e:	e00f      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8007780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007784:	d00d      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0xb6>
 8007786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800778a:	d00c      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0xba>
 800778c:	2b70      	cmp	r3, #112	@ 0x70
 800778e:	d1cd      	bne.n	800772c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8007790:	68cb      	ldr	r3, [r1, #12]
 8007792:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007796:	f7ff ff9f 	bl	80076d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800779a:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800779c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80077a0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077a2:	2200      	movs	r2, #0
 80077a4:	e7c2      	b.n	800772c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80077a6:	68cb      	ldr	r3, [r1, #12]
 80077a8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80077ac:	f7ff ff94 	bl	80076d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077b0:	6883      	ldr	r3, [r0, #8]
 80077b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077b6:	e7f3      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80077b8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ba:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80077bc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80077be:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c0:	f022 0210 	bic.w	r2, r2, #16
 80077c4:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c6:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077cc:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80077d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80077da:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80077dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80077de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077e2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80077e6:	e7db      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 80077e8:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80077ea:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80077ec:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ee:	6a03      	ldr	r3, [r0, #32]
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077f8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007800:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007804:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007806:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007808:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800780a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800780c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007810:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007814:	e7c4      	b.n	80077a0 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8007816:	4602      	mov	r2, r0
 8007818:	e78e      	b.n	8007738 <HAL_TIM_ConfigClockSource+0x4c>
 800781a:	bf00      	nop
 800781c:	fffe0088 	.word	0xfffe0088

08007820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007820:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007822:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007826:	2b01      	cmp	r3, #1
{
 8007828:	4604      	mov	r4, r0
 800782a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800782e:	d032      	beq.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007830:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007832:	4d19      	ldr	r5, [pc, #100]	@ (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007838:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800783a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800783c:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800783e:	d002      	beq.n	8007846 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8007840:	4e16      	ldr	r6, [pc, #88]	@ (800789c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007842:	42b3      	cmp	r3, r6
 8007844:	d103      	bne.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007846:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007848:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800784c:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800784e:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007850:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007854:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007856:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007858:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785a:	d011      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007860:	d00e      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007862:	4a0f      	ldr	r2, [pc, #60]	@ (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007868:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007870:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007878:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800787c:	4293      	cmp	r3, r2
 800787e:	d104      	bne.n	800788a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007880:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007882:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007886:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007888:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800788a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800788c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800788e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007892:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	40012c00 	.word	0x40012c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40000400 	.word	0x40000400

080078a4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80078a8:	4770      	bx	lr

080078aa <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078aa:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	e852 3f00 	ldrex	r3, [r2]
 80078b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80078b8:	6802      	ldr	r2, [r0, #0]
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d1f5      	bne.n	80078aa <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	f102 0308 	add.w	r3, r2, #8
 80078c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	f102 0c08 	add.w	ip, r2, #8
 80078ce:	e84c 3100 	strex	r1, r3, [ip]
 80078d2:	2900      	cmp	r1, #0
 80078d4:	d1f3      	bne.n	80078be <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d107      	bne.n	80078ec <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	e842 3100 	strex	r1, r3, [r2]
 80078e8:	2900      	cmp	r1, #0
 80078ea:	d1f7      	bne.n	80078dc <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ec:	2320      	movs	r3, #32
 80078ee:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	2300      	movs	r3, #0
 80078f4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078f6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80078f8:	4770      	bx	lr

080078fa <HAL_UART_Abort>:
{
 80078fa:	b510      	push	{r4, lr}
 80078fc:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80078fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	e852 3f00 	ldrex	r3, [r2]
 8007904:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	2900      	cmp	r1, #0
 8007910:	d1f5      	bne.n	80078fe <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	f103 0208 	add.w	r2, r3, #8
 8007916:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	f103 0008 	add.w	r0, r3, #8
 8007922:	e840 2100 	strex	r1, r2, [r0]
 8007926:	2900      	cmp	r1, #0
 8007928:	d1f3      	bne.n	8007912 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800792c:	2a01      	cmp	r2, #1
 800792e:	d107      	bne.n	8007940 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007934:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	e843 2100 	strex	r1, r2, [r3]
 800793c:	2900      	cmp	r1, #0
 800793e:	d1f7      	bne.n	8007930 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	0612      	lsls	r2, r2, #24
 8007944:	d51b      	bpl.n	800797e <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	f103 0208 	add.w	r2, r3, #8
 800794a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800794e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	f103 0008 	add.w	r0, r3, #8
 8007956:	e840 2100 	strex	r1, r2, [r0]
 800795a:	2900      	cmp	r1, #0
 800795c:	d1f3      	bne.n	8007946 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 800795e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007960:	b168      	cbz	r0, 800797e <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8007962:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007964:	f7fe f909 	bl	8005b7a <HAL_DMA_Abort>
 8007968:	b148      	cbz	r0, 800797e <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800796a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800796c:	f7fe f96a 	bl	8005c44 <HAL_DMA_GetError>
 8007970:	2820      	cmp	r0, #32
 8007972:	d104      	bne.n	800797e <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007974:	2310      	movs	r3, #16
 8007976:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800797a:	2003      	movs	r0, #3
}
 800797c:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	6893      	ldr	r3, [r2, #8]
 8007982:	065b      	lsls	r3, r3, #25
 8007984:	d516      	bpl.n	80079b4 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	f102 0308 	add.w	r3, r2, #8
 800798a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	f102 0008 	add.w	r0, r2, #8
 8007996:	e840 3100 	strex	r1, r3, [r0]
 800799a:	2900      	cmp	r1, #0
 800799c:	d1f3      	bne.n	8007986 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 800799e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80079a0:	b140      	cbz	r0, 80079b4 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 80079a2:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80079a4:	f7fe f8e9 	bl	8005b7a <HAL_DMA_Abort>
 80079a8:	b120      	cbz	r0, 80079b4 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80079aa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80079ac:	f7fe f94a 	bl	8005c44 <HAL_DMA_GetError>
 80079b0:	2820      	cmp	r0, #32
 80079b2:	d0df      	beq.n	8007974 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079b4:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 80079b6:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079b8:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 80079ba:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80079be:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80079c2:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	f042 0208 	orr.w	r2, r2, #8
 80079ca:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80079cc:	2320      	movs	r3, #32
 80079ce:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079d0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d4:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 80079da:	e7cf      	b.n	800797c <HAL_UART_Abort+0x82>

080079dc <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80079dc:	4770      	bx	lr

080079de <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80079de:	4770      	bx	lr

080079e0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80079e0:	4770      	bx	lr

080079e2 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079e2:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079e4:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079e6:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079e8:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 80079ec:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079ee:	689c      	ldr	r4, [r3, #8]
 80079f0:	0624      	lsls	r4, r4, #24
 80079f2:	d50e      	bpl.n	8007a12 <UART_DMAError+0x30>
 80079f4:	2a21      	cmp	r2, #33	@ 0x21
 80079f6:	d10c      	bne.n	8007a12 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a02:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	e843 2400 	strex	r4, r2, [r3]
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	d1f7      	bne.n	80079fe <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8007a0e:	2220      	movs	r2, #32
 8007a10:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	065b      	lsls	r3, r3, #25
 8007a16:	d506      	bpl.n	8007a26 <UART_DMAError+0x44>
 8007a18:	2922      	cmp	r1, #34	@ 0x22
 8007a1a:	d104      	bne.n	8007a26 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007a22:	f7ff ff42 	bl	80078aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a26:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007a2a:	f043 0310 	orr.w	r3, r3, #16
 8007a2e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a32:	f7ff ffd5 	bl	80079e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a36:	bd10      	pop	{r4, pc}

08007a38 <HAL_UARTEx_RxEventCallback>:
}
 8007a38:	4770      	bx	lr

08007a3a <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007a3c:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a42:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d105      	bne.n	8007a54 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a48:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007a4c:	0849      	lsrs	r1, r1, #1
 8007a4e:	f7ff fff3 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
}
 8007a52:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007a54:	f7ff ffc3 	bl	80079de <HAL_UART_RxHalfCpltCallback>
}
 8007a58:	e7fb      	b.n	8007a52 <UART_DMARxHalfCplt+0x18>

08007a5a <UART_DMAReceiveCplt>:
{
 8007a5a:	b508      	push	{r3, lr}
 8007a5c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a5e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d032      	beq.n	8007acc <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	e852 3f00 	ldrex	r3, [r2]
 8007a72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007a7a:	6803      	ldr	r3, [r0, #0]
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d1f5      	bne.n	8007a6c <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	f103 0208 	add.w	r2, r3, #8
 8007a84:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a88:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	f103 0c08 	add.w	ip, r3, #8
 8007a90:	e84c 2100 	strex	r1, r2, [ip]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d1f3      	bne.n	8007a80 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f103 0208 	add.w	r2, r3, #8
 8007a9c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	f103 0c08 	add.w	ip, r3, #8
 8007aa8:	e84c 2100 	strex	r1, r2, [ip]
 8007aac:	2900      	cmp	r1, #0
 8007aae:	d1f3      	bne.n	8007a98 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab6:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007ab8:	2a01      	cmp	r2, #1
 8007aba:	d107      	bne.n	8007acc <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	e843 2100 	strex	r1, r2, [r3]
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	d1f7      	bne.n	8007abc <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007acc:	2300      	movs	r3, #0
 8007ace:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ad0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d104      	bne.n	8007ae0 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007ada:	f7ff ffad 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
}
 8007ade:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007ae0:	f7ff ff7c 	bl	80079dc <HAL_UART_RxCpltCallback>
}
 8007ae4:	e7fb      	b.n	8007ade <UART_DMAReceiveCplt+0x84>
	...

08007ae8 <UART_SetConfig>:
{
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aec:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aee:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af0:	6925      	ldr	r5, [r4, #16]
 8007af2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007af4:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af6:	432a      	orrs	r2, r5
 8007af8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007afa:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007afe:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b00:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b04:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b06:	430a      	orrs	r2, r1
 8007b08:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8007b0e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b10:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b18:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b1a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b1c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007b20:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b22:	430a      	orrs	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b26:	4a56      	ldr	r2, [pc, #344]	@ (8007c80 <UART_SetConfig+0x198>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d112      	bne.n	8007b52 <UART_SetConfig+0x6a>
 8007b2c:	4b55      	ldr	r3, [pc, #340]	@ (8007c84 <UART_SetConfig+0x19c>)
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	f000 8091 	beq.w	8007c5c <UART_SetConfig+0x174>
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d022      	beq.n	8007b84 <UART_SetConfig+0x9c>
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	f040 8092 	bne.w	8007c68 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b44:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007b48:	f040 8085 	bne.w	8007c56 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4c:	f7fe fc4a 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
        break;
 8007b50:	e06b      	b.n	8007c2a <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b52:	4a4d      	ldr	r2, [pc, #308]	@ (8007c88 <UART_SetConfig+0x1a0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d12e      	bne.n	8007bb6 <UART_SetConfig+0xce>
 8007b58:	4b4a      	ldr	r3, [pc, #296]	@ (8007c84 <UART_SetConfig+0x19c>)
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b64:	d07a      	beq.n	8007c5c <UART_SetConfig+0x174>
 8007b66:	d80a      	bhi.n	8007b7e <UART_SetConfig+0x96>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 8083 	beq.w	8007c74 <UART_SetConfig+0x18c>
 8007b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b72:	d0e7      	beq.n	8007b44 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007b74:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007b76:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007b78:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b82:	d1f7      	bne.n	8007b74 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b84:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007b88:	4840      	ldr	r0, [pc, #256]	@ (8007c8c <UART_SetConfig+0x1a4>)
 8007b8a:	d156      	bne.n	8007c3a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b8c:	6862      	ldr	r2, [r4, #4]
 8007b8e:	0853      	lsrs	r3, r2, #1
 8007b90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007b94:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b98:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007b9c:	f1a3 0110 	sub.w	r1, r3, #16
 8007ba0:	4291      	cmp	r1, r2
 8007ba2:	d8e7      	bhi.n	8007b74 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007ba8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007baa:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bac:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60cb      	str	r3, [r1, #12]
 8007bb4:	e03b      	b.n	8007c2e <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb6:	4a36      	ldr	r2, [pc, #216]	@ (8007c90 <UART_SetConfig+0x1a8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10f      	bne.n	8007bdc <UART_SetConfig+0xf4>
 8007bbc:	4b31      	ldr	r3, [pc, #196]	@ (8007c84 <UART_SetConfig+0x19c>)
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007bc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007bc8:	d048      	beq.n	8007c5c <UART_SetConfig+0x174>
 8007bca:	d804      	bhi.n	8007bd6 <UART_SetConfig+0xee>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d051      	beq.n	8007c74 <UART_SetConfig+0x18c>
 8007bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bd4:	e7cd      	b.n	8007b72 <UART_SetConfig+0x8a>
 8007bd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007bda:	e7d2      	b.n	8007b82 <UART_SetConfig+0x9a>
 8007bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c94 <UART_SetConfig+0x1ac>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10f      	bne.n	8007c02 <UART_SetConfig+0x11a>
 8007be2:	4b28      	ldr	r3, [pc, #160]	@ (8007c84 <UART_SetConfig+0x19c>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bee:	d035      	beq.n	8007c5c <UART_SetConfig+0x174>
 8007bf0:	d804      	bhi.n	8007bfc <UART_SetConfig+0x114>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d03e      	beq.n	8007c74 <UART_SetConfig+0x18c>
 8007bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bfa:	e7ba      	b.n	8007b72 <UART_SetConfig+0x8a>
 8007bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c00:	e7bf      	b.n	8007b82 <UART_SetConfig+0x9a>
 8007c02:	4a25      	ldr	r2, [pc, #148]	@ (8007c98 <UART_SetConfig+0x1b0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d1b5      	bne.n	8007b74 <UART_SetConfig+0x8c>
 8007c08:	4b1e      	ldr	r3, [pc, #120]	@ (8007c84 <UART_SetConfig+0x19c>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c14:	d022      	beq.n	8007c5c <UART_SetConfig+0x174>
 8007c16:	d803      	bhi.n	8007c20 <UART_SetConfig+0x138>
 8007c18:	b363      	cbz	r3, 8007c74 <UART_SetConfig+0x18c>
 8007c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c1e:	e7a8      	b.n	8007b72 <UART_SetConfig+0x8a>
 8007c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007c24:	e7ad      	b.n	8007b82 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c26:	f7fe fcc1 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d1ae      	bne.n	8007b8c <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8007c2e:	2000      	movs	r0, #0
 8007c30:	e7a1      	b.n	8007b76 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c32:	f7fe fca3 	bl	800657c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0f9      	beq.n	8007c2e <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007c40:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c44:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007c48:	f1a3 0110 	sub.w	r1, r3, #16
 8007c4c:	4291      	cmp	r1, r2
 8007c4e:	d891      	bhi.n	8007b74 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	60d3      	str	r3, [r2, #12]
 8007c54:	e7eb      	b.n	8007c2e <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fe fbc5 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
        break;
 8007c5a:	e7ec      	b.n	8007c36 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c60:	d094      	beq.n	8007b8c <UART_SetConfig+0xa4>
 8007c62:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007c66:	e7e8      	b.n	8007c3a <UART_SetConfig+0x152>
 8007c68:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c6c:	d0db      	beq.n	8007c26 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c6e:	f7fe fc9d 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
        break;
 8007c72:	e7e0      	b.n	8007c36 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c74:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007c78:	d1db      	bne.n	8007c32 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c7a:	f7fe fc7f 	bl	800657c <HAL_RCC_GetPCLK1Freq>
        break;
 8007c7e:	e7d4      	b.n	8007c2a <UART_SetConfig+0x142>
 8007c80:	40013800 	.word	0x40013800
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40004400 	.word	0x40004400
 8007c8c:	007a1200 	.word	0x007a1200
 8007c90:	40004800 	.word	0x40004800
 8007c94:	40004c00 	.word	0x40004c00
 8007c98:	40005000 	.word	0x40005000

08007c9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c9e:	071a      	lsls	r2, r3, #28
{
 8007ca0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ca2:	d506      	bpl.n	8007cb2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ca4:	6801      	ldr	r1, [r0, #0]
 8007ca6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007ca8:	684a      	ldr	r2, [r1, #4]
 8007caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cae:	4322      	orrs	r2, r4
 8007cb0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cb2:	07dc      	lsls	r4, r3, #31
 8007cb4:	d506      	bpl.n	8007cc4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cb6:	6801      	ldr	r1, [r0, #0]
 8007cb8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007cba:	684a      	ldr	r2, [r1, #4]
 8007cbc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007cc0:	4322      	orrs	r2, r4
 8007cc2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cc4:	0799      	lsls	r1, r3, #30
 8007cc6:	d506      	bpl.n	8007cd6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc8:	6801      	ldr	r1, [r0, #0]
 8007cca:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007ccc:	684a      	ldr	r2, [r1, #4]
 8007cce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007cd2:	4322      	orrs	r2, r4
 8007cd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd6:	075a      	lsls	r2, r3, #29
 8007cd8:	d506      	bpl.n	8007ce8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cda:	6801      	ldr	r1, [r0, #0]
 8007cdc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007cde:	684a      	ldr	r2, [r1, #4]
 8007ce0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ce4:	4322      	orrs	r2, r4
 8007ce6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ce8:	06dc      	lsls	r4, r3, #27
 8007cea:	d506      	bpl.n	8007cfa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cec:	6801      	ldr	r1, [r0, #0]
 8007cee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cf6:	4322      	orrs	r2, r4
 8007cf8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	0699      	lsls	r1, r3, #26
 8007cfc:	d506      	bpl.n	8007d0c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cfe:	6801      	ldr	r1, [r0, #0]
 8007d00:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007d02:	688a      	ldr	r2, [r1, #8]
 8007d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d08:	4322      	orrs	r2, r4
 8007d0a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d0c:	065a      	lsls	r2, r3, #25
 8007d0e:	d50f      	bpl.n	8007d30 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d10:	6801      	ldr	r1, [r0, #0]
 8007d12:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007d14:	684a      	ldr	r2, [r1, #4]
 8007d16:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007d1a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d20:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d22:	d105      	bne.n	8007d30 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d24:	684a      	ldr	r2, [r1, #4]
 8007d26:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007d28:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007d2c:	4322      	orrs	r2, r4
 8007d2e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d30:	061b      	lsls	r3, r3, #24
 8007d32:	d506      	bpl.n	8007d42 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d34:	6802      	ldr	r2, [r0, #0]
 8007d36:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007d38:	6853      	ldr	r3, [r2, #4]
 8007d3a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007d3e:	430b      	orrs	r3, r1
 8007d40:	6053      	str	r3, [r2, #4]
}
 8007d42:	bd10      	pop	{r4, pc}

08007d44 <UART_WaitOnFlagUntilTimeout>:
{
 8007d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	4617      	mov	r7, r2
 8007d52:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	6822      	ldr	r2, [r4, #0]
 8007d56:	69d3      	ldr	r3, [r2, #28]
 8007d58:	ea35 0303 	bics.w	r3, r5, r3
 8007d5c:	bf0c      	ite	eq
 8007d5e:	2301      	moveq	r3, #1
 8007d60:	2300      	movne	r3, #0
 8007d62:	42bb      	cmp	r3, r7
 8007d64:	d001      	beq.n	8007d6a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007d66:	2000      	movs	r0, #0
 8007d68:	e022      	b.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8007d6a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007d6e:	d0f2      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d70:	f7fd f8ee 	bl	8004f50 <HAL_GetTick>
 8007d74:	eba0 0008 	sub.w	r0, r0, r8
 8007d78:	4548      	cmp	r0, r9
 8007d7a:	d829      	bhi.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
 8007d7c:	f1b9 0f00 	cmp.w	r9, #0
 8007d80:	d026      	beq.n	8007dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	680b      	ldr	r3, [r1, #0]
 8007d86:	075a      	lsls	r2, r3, #29
 8007d88:	d5e4      	bpl.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x10>
 8007d8a:	2d80      	cmp	r5, #128	@ 0x80
 8007d8c:	d0e2      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x10>
 8007d8e:	2d40      	cmp	r5, #64	@ 0x40
 8007d90:	d0e0      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d92:	69ce      	ldr	r6, [r1, #28]
 8007d94:	f016 0608 	ands.w	r6, r6, #8
 8007d98:	d00c      	beq.n	8007db4 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d9a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8007d9c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d9e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8007da0:	f7ff fd83 	bl	80078aa <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8007da4:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007da6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007daa:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8007dae:	2001      	movs	r0, #1
}
 8007db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db4:	69cb      	ldr	r3, [r1, #28]
 8007db6:	051b      	lsls	r3, r3, #20
 8007db8:	d5cc      	bpl.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007dbe:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7ff fd72 	bl	80078aa <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007dcc:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8007dd0:	2003      	movs	r0, #3
 8007dd2:	e7ed      	b.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x6c>

08007dd4 <HAL_UART_Transmit>:
{
 8007dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dd8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007dda:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007ddc:	2b20      	cmp	r3, #32
{
 8007dde:	4604      	mov	r4, r0
 8007de0:	460e      	mov	r6, r1
 8007de2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007de4:	d143      	bne.n	8007e6e <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d043      	beq.n	8007e72 <HAL_UART_Transmit+0x9e>
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	d041      	beq.n	8007e72 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dee:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df0:	2500      	movs	r5, #0
 8007df2:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007df6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8007df8:	f7fd f8aa 	bl	8004f50 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dfc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8007dfe:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8007e06:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8007e08:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e0c:	d103      	bne.n	8007e16 <HAL_UART_Transmit+0x42>
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	b90b      	cbnz	r3, 8007e16 <HAL_UART_Transmit+0x42>
 8007e12:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007e14:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007e16:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007e1e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e20:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8007e22:	b93a      	cbnz	r2, 8007e34 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e24:	2140      	movs	r1, #64	@ 0x40
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7ff ff8c 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	b940      	cbnz	r0, 8007e42 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8007e30:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8007e32:	e008      	b.n	8007e46 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e34:	2200      	movs	r2, #0
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff ff83 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	b128      	cbz	r0, 8007e4c <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8007e40:	2320      	movs	r3, #32
 8007e42:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007e44:	2003      	movs	r0, #3
}
 8007e46:	b003      	add	sp, #12
 8007e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e4c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007e4e:	b95e      	cbnz	r6, 8007e68 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e50:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e58:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007e5a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8007e5e:	3a01      	subs	r2, #1
 8007e60:	b292      	uxth	r2, r2
 8007e62:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8007e66:	e7d6      	b.n	8007e16 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e68:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007e6c:	e7f4      	b.n	8007e58 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8007e6e:	2002      	movs	r0, #2
 8007e70:	e7e9      	b.n	8007e46 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8007e72:	2001      	movs	r0, #1
 8007e74:	e7e7      	b.n	8007e46 <HAL_UART_Transmit+0x72>

08007e76 <UART_CheckIdleState>:
{
 8007e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e78:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007e80:	f7fd f866 	bl	8004f50 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007e8a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e8c:	d51b      	bpl.n	8007ec6 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	4632      	mov	r2, r6
 8007e96:	4603      	mov	r3, r0
 8007e98:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7ff ff51 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007ea2:	b180      	cbz	r0, 8007ec6 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ea4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	e852 3f00 	ldrex	r3, [r2]
 8007eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	e842 3100 	strex	r1, r3, [r2]
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	d1f6      	bne.n	8007ea4 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8007eb6:	2320      	movs	r3, #32
 8007eb8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007eba:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8007ec2:	b002      	add	sp, #8
 8007ec4:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	075b      	lsls	r3, r3, #29
 8007ecc:	d524      	bpl.n	8007f18 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7ff ff31 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007ee2:	b1c8      	cbz	r0, 8007f18 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ee4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	e852 3f00 	ldrex	r3, [r2]
 8007eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	f102 0308 	add.w	r3, r2, #8
 8007efc:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f00:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	f102 0008 	add.w	r0, r2, #8
 8007f08:	e840 3100 	strex	r1, r3, [r0]
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d1f3      	bne.n	8007ef8 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007f10:	2320      	movs	r3, #32
 8007f12:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8007f16:	e7d0      	b.n	8007eba <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8007f18:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007f1c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f24:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8007f26:	e7c9      	b.n	8007ebc <UART_CheckIdleState+0x46>

08007f28 <HAL_UART_Init>:
{
 8007f28:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	b340      	cbz	r0, 8007f80 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007f2e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007f30:	b91b      	cbnz	r3, 8007f3a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007f32:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007f36:	f7fc fd97 	bl	8004a68 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007f3a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007f3c:	2324      	movs	r3, #36	@ 0x24
 8007f3e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007f40:	6813      	ldr	r3, [r2, #0]
 8007f42:	f023 0301 	bic.w	r3, r3, #1
 8007f46:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f48:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f4a:	b113      	cbz	r3, 8007f52 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f7ff fea5 	bl	8007c9c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7ff fdc8 	bl	8007ae8 <UART_SetConfig>
 8007f58:	2801      	cmp	r0, #1
 8007f5a:	d011      	beq.n	8007f80 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f6c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007f74:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007f76:	601a      	str	r2, [r3, #0]
}
 8007f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007f7c:	f7ff bf7b 	b.w	8007e76 <UART_CheckIdleState>
}
 8007f80:	2001      	movs	r0, #1
 8007f82:	bd10      	pop	{r4, pc}

08007f84 <UART_Start_Receive_DMA>:
{
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	4613      	mov	r3, r2
 8007f88:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8007f8a:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8e:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8007f90:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f92:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f96:	2022      	movs	r0, #34	@ 0x22
 8007f98:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8007f9c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007f9e:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8007fa0:	b1a0      	cbz	r0, 8007fcc <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fa2:	4e1c      	ldr	r6, [pc, #112]	@ (8008014 <UART_Start_Receive_DMA+0x90>)
 8007fa4:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fa6:	4e1c      	ldr	r6, [pc, #112]	@ (8008018 <UART_Start_Receive_DMA+0x94>)
 8007fa8:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007faa:	4e1c      	ldr	r6, [pc, #112]	@ (800801c <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007fac:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8007fb6:	f7fd fda5 	bl	8005b04 <HAL_DMA_Start_IT>
 8007fba:	b138      	cbz	r0, 8007fcc <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8007fc8:	2001      	movs	r0, #1
}
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fcc:	6922      	ldr	r2, [r4, #16]
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	b13a      	cbz	r2, 8007fe2 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	e843 2100 	strex	r1, r2, [r3]
 8007fde:	2900      	cmp	r1, #0
 8007fe0:	d1f7      	bne.n	8007fd2 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	f103 0208 	add.w	r2, r3, #8
 8007fe6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fea:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	f103 0008 	add.w	r0, r3, #8
 8007ff2:	e840 2100 	strex	r1, r2, [r0]
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	d1f3      	bne.n	8007fe2 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	f103 0208 	add.w	r2, r3, #8
 8007ffe:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008002:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	f103 0108 	add.w	r1, r3, #8
 800800a:	e841 2000 	strex	r0, r2, [r1]
 800800e:	2800      	cmp	r0, #0
 8008010:	d1f3      	bne.n	8007ffa <UART_Start_Receive_DMA+0x76>
 8008012:	e7da      	b.n	8007fca <UART_Start_Receive_DMA+0x46>
 8008014:	08007a5b 	.word	0x08007a5b
 8008018:	08007a3b 	.word	0x08007a3b
 800801c:	080079e3 	.word	0x080079e3

08008020 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008020:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8008024:	2b20      	cmp	r3, #32
{
 8008026:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008028:	d112      	bne.n	8008050 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800802a:	b1a1      	cbz	r1, 8008056 <HAL_UART_Receive_DMA+0x36>
 800802c:	b19a      	cbz	r2, 8008056 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802e:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008030:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	d507      	bpl.n	800804a <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800803e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	e844 3500 	strex	r5, r3, [r4]
 8008046:	2d00      	cmp	r5, #0
 8008048:	d1f7      	bne.n	800803a <HAL_UART_Receive_DMA+0x1a>
}
 800804a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800804c:	f7ff bf9a 	b.w	8007f84 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8008050:	2002      	movs	r0, #2
}
 8008052:	bc30      	pop	{r4, r5}
 8008054:	4770      	bx	lr
      return HAL_ERROR;
 8008056:	2001      	movs	r0, #1
 8008058:	e7fb      	b.n	8008052 <HAL_UART_Receive_DMA+0x32>

0800805a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800805a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800805c:	f001 f81a 	bl	8009094 <vTaskStartScheduler>
  
  return osOK;
}
 8008060:	2000      	movs	r0, #0
 8008062:	bd08      	pop	{r3, pc}

08008064 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008068:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800806a:	692a      	ldr	r2, [r5, #16]
 800806c:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8008070:	460b      	mov	r3, r1
 8008072:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008074:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008078:	b176      	cbz	r6, 8008098 <osThreadCreate+0x34>
 800807a:	69ad      	ldr	r5, [r5, #24]
 800807c:	b165      	cbz	r5, 8008098 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800807e:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8008080:	bf14      	ite	ne
 8008082:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008084:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008086:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800808a:	9400      	str	r4, [sp, #0]
 800808c:	f000 ff9c 	bl	8008fc8 <xTaskCreateStatic>
 8008090:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008092:	9805      	ldr	r0, [sp, #20]
}
 8008094:	b006      	add	sp, #24
 8008096:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8008098:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800809a:	bf14      	ite	ne
 800809c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800809e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080a0:	ad05      	add	r5, sp, #20
 80080a2:	e9cd 4500 	strd	r4, r5, [sp]
 80080a6:	b292      	uxth	r2, r2
 80080a8:	f000 ffc5 	bl	8009036 <xTaskCreate>
 80080ac:	2801      	cmp	r0, #1
 80080ae:	d0f0      	beq.n	8008092 <osThreadCreate+0x2e>
      return NULL;
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7ef      	b.n	8008094 <osThreadCreate+0x30>

080080b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080b4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080b6:	2801      	cmp	r0, #1
 80080b8:	bf38      	it	cc
 80080ba:	2001      	movcc	r0, #1
 80080bc:	f001 f942 	bl	8009344 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80080c0:	2000      	movs	r0, #0
 80080c2:	bd08      	pop	{r3, pc}

080080c4 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80080c4:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80080c6:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 80080c8:	b109      	cbz	r1, 80080ce <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80080ca:	f000 bb87 	b.w	80087dc <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80080ce:	f000 bb9a 	b.w	8008806 <xQueueCreateMutex>

080080d2 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80080d2:	b507      	push	{r0, r1, r2, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80080d4:	2300      	movs	r3, #0
 80080d6:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80080d8:	b1f8      	cbz	r0, 800811a <osMutexWait+0x48>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080da:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80080de:	b1ba      	cbz	r2, 8008110 <osMutexWait+0x3e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80080e0:	aa01      	add	r2, sp, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	f000 fdb1 	bl	8008c4a <xQueueReceiveFromISR>
 80080e8:	2801      	cmp	r0, #1
 80080ea:	d003      	beq.n	80080f4 <osMutexWait+0x22>
      return osErrorOS;
 80080ec:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80080ee:	b003      	add	sp, #12
 80080f0:	f85d fb04 	ldr.w	pc, [sp], #4
	portEND_SWITCHING_ISR(taskWoken);
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	b14b      	cbz	r3, 800810c <osMutexWait+0x3a>
 80080f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008100:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
  return osOK;
 800810c:	2000      	movs	r0, #0
 800810e:	e7ee      	b.n	80080ee <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008110:	f000 fcde 	bl	8008ad0 <xQueueSemaphoreTake>
 8008114:	2801      	cmp	r0, #1
 8008116:	d0f9      	beq.n	800810c <osMutexWait+0x3a>
 8008118:	e7e8      	b.n	80080ec <osMutexWait+0x1a>
    return osErrorParameter;
 800811a:	2080      	movs	r0, #128	@ 0x80
 800811c:	e7e7      	b.n	80080ee <osMutexWait+0x1c>

0800811e <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800811e:	b507      	push	{r0, r1, r2, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8008128:	b1b3      	cbz	r3, 8008158 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800812a:	a901      	add	r1, sp, #4
 800812c:	f000 fbe1 	bl	80088f2 <xQueueGiveFromISR>
 8008130:	2801      	cmp	r0, #1
 8008132:	d003      	beq.n	800813c <osMutexRelease+0x1e>
      return osErrorOS;
 8008134:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8008136:	b003      	add	sp, #12
 8008138:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	b14b      	cbz	r3, 8008154 <osMutexRelease+0x36>
 8008140:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008148:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8008154:	2000      	movs	r0, #0
 8008156:	e7ee      	b.n	8008136 <osMutexRelease+0x18>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008158:	461a      	mov	r2, r3
 800815a:	4619      	mov	r1, r3
 800815c:	f000 fa8c 	bl	8008678 <xQueueGenericSend>
 8008160:	2801      	cmp	r0, #1
 8008162:	d1e7      	bne.n	8008134 <osMutexRelease+0x16>
 8008164:	e7f6      	b.n	8008154 <osMutexRelease+0x36>

08008166 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8008166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8008168:	6847      	ldr	r7, [r0, #4]
{
 800816a:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800816c:	2014      	movs	r0, #20
 800816e:	f001 fcdf 	bl	8009b30 <pvPortMalloc>

  
  if (thePool) {
 8008172:	4604      	mov	r4, r0
 8008174:	b1b8      	cbz	r0, 80081a6 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8008176:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8008178:	3703      	adds	r7, #3
 800817a:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 800817e:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 8008180:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8008184:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8008186:	f001 fcd3 	bl	8009b30 <pvPortMalloc>
 800818a:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 800818c:	b140      	cbz	r0, 80081a0 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800818e:	6830      	ldr	r0, [r6, #0]
 8008190:	4378      	muls	r0, r7
 8008192:	f001 fccd 	bl	8009b30 <pvPortMalloc>
 8008196:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8008198:	b978      	cbnz	r0, 80081ba <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 800819a:	6860      	ldr	r0, [r4, #4]
 800819c:	f001 fd5a 	bl	8009c54 <vPortFree>
        vPortFree(thePool);
 80081a0:	4620      	mov	r0, r4
 80081a2:	f001 fd57 	bl	8009c54 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80081a6:	2400      	movs	r4, #0
 80081a8:	e005      	b.n	80081b6 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 80081aa:	6862      	ldr	r2, [r4, #4]
 80081ac:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80081ae:	3301      	adds	r3, #1
 80081b0:	6832      	ldr	r2, [r6, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d8f9      	bhi.n	80081aa <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 80081b6:	4620      	mov	r0, r4
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 80081ba:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 80081bc:	4629      	mov	r1, r5
 80081be:	e7f7      	b.n	80081b0 <osPoolCreate+0x4a>

080081c0 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4604      	mov	r4, r0
 80081c4:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80081c8:	b186      	cbz	r6, 80081ec <osPoolAlloc+0x2c>
	__asm volatile
 80081ca:	f3ef 8511 	mrs	r5, BASEPRI
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80081de:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80081e0:	68a1      	ldr	r1, [r4, #8]
 80081e2:	2200      	movs	r2, #0
 80081e4:	4291      	cmp	r1, r2
 80081e6:	d104      	bne.n	80081f2 <osPoolAlloc+0x32>
  void *p = NULL;
 80081e8:	2500      	movs	r5, #0
 80081ea:	e012      	b.n	8008212 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80081ec:	f001 fb3a 	bl	8009864 <vPortEnterCritical>
 80081f0:	e7f6      	b.n	80081e0 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	4413      	add	r3, r2
 80081f6:	fbb3 f0f1 	udiv	r0, r3, r1
 80081fa:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80081fe:	6860      	ldr	r0, [r4, #4]
 8008200:	5cc5      	ldrb	r5, [r0, r3]
 8008202:	b96d      	cbnz	r5, 8008220 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8008204:	2201      	movs	r2, #1
 8008206:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8008208:	68e2      	ldr	r2, [r4, #12]
 800820a:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 800820c:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800820e:	fb02 5503 	mla	r5, r2, r3, r5
 8008212:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8008216:	b12b      	cbz	r3, 8008224 <osPoolAlloc+0x64>
	__asm volatile
 8008218:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 800821c:	4628      	mov	r0, r5
 800821e:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8008220:	3201      	adds	r2, #1
 8008222:	e7df      	b.n	80081e4 <osPoolAlloc+0x24>
    vPortExitCritical();
 8008224:	f001 fb3e 	bl	80098a4 <vPortExitCritical>
  return p;
 8008228:	e7f8      	b.n	800821c <osPoolAlloc+0x5c>

0800822a <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 800822a:	4603      	mov	r3, r0
 800822c:	b180      	cbz	r0, 8008250 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 800822e:	b179      	cbz	r1, 8008250 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8008230:	6802      	ldr	r2, [r0, #0]
 8008232:	428a      	cmp	r2, r1
 8008234:	d80c      	bhi.n	8008250 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8008236:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8008238:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 800823a:	fbb1 f2f0 	udiv	r2, r1, r0
 800823e:	fb00 1012 	mls	r0, r0, r2, r1
 8008242:	b928      	cbnz	r0, 8008250 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8008244:	6899      	ldr	r1, [r3, #8]
 8008246:	4291      	cmp	r1, r2
 8008248:	d902      	bls.n	8008250 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 800824e:	4770      	bx	lr
    return osErrorParameter;
 8008250:	2080      	movs	r0, #128	@ 0x80
}
 8008252:	4770      	bx	lr

08008254 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8008254:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8008256:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8008258:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800825a:	9301      	str	r3, [sp, #4]
{
 800825c:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800825e:	6843      	ldr	r3, [r0, #4]
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8008264:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8008266:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8008268:	f001 fc62 	bl	8009b30 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 800826c:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800826e:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8008270:	681d      	ldr	r5, [r3, #0]
 8008272:	b16d      	cbz	r5, 8008290 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8008274:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8008276:	6820      	ldr	r0, [r4, #0]
 8008278:	4632      	mov	r2, r6
 800827a:	2104      	movs	r1, #4
 800827c:	f000 f9d8 	bl	8008630 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 8008280:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8008282:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8008284:	681d      	ldr	r5, [r3, #0]
 8008286:	686b      	ldr	r3, [r5, #4]
 8008288:	b92b      	cbnz	r3, 8008296 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 800828a:	4628      	mov	r0, r5
 800828c:	f001 fce2 	bl	8009c54 <vPortFree>
    return NULL;
 8008290:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8008292:	b004      	add	sp, #16
 8008294:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8008296:	a801      	add	r0, sp, #4
 8008298:	f7ff ff65 	bl	8008166 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800829c:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800829e:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	6883      	ldr	r3, [r0, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f4      	bne.n	8008292 <osMailCreate+0x3e>
 80082a8:	e7f0      	b.n	800828c <osMailCreate+0x38>

080082aa <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80082aa:	b110      	cbz	r0, 80082b2 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 80082ac:	6880      	ldr	r0, [r0, #8]
 80082ae:	f7ff bf87 	b.w	80081c0 <osPoolAlloc>
  
  return p;
}
 80082b2:	4770      	bx	lr

080082b4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80082b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082b6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80082b8:	b328      	cbz	r0, 8008306 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 80082ba:	2200      	movs	r2, #0
 80082bc:	9203      	str	r2, [sp, #12]
 80082be:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80082c2:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 80082c4:	b1c3      	cbz	r3, 80082f8 <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80082c6:	4613      	mov	r3, r2
 80082c8:	a901      	add	r1, sp, #4
 80082ca:	aa03      	add	r2, sp, #12
 80082cc:	f000 fab5 	bl	800883a <xQueueGenericSendFromISR>
 80082d0:	2801      	cmp	r0, #1
 80082d2:	d003      	beq.n	80082dc <osMailPut+0x28>
      return osErrorOS;
 80082d4:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80082d6:	b005      	add	sp, #20
 80082d8:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	b14b      	cbz	r3, 80082f4 <osMailPut+0x40>
 80082e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80082e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	f3bf 8f6f 	isb	sy
  return osOK;
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7ee      	b.n	80082d6 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80082f8:	461a      	mov	r2, r3
 80082fa:	a901      	add	r1, sp, #4
 80082fc:	f000 f9bc 	bl	8008678 <xQueueGenericSend>
 8008300:	2801      	cmp	r0, #1
 8008302:	d0f7      	beq.n	80082f4 <osMailPut+0x40>
 8008304:	e7e6      	b.n	80082d4 <osMailPut+0x20>
    return osErrorParameter;
 8008306:	2080      	movs	r0, #128	@ 0x80
 8008308:	e7e5      	b.n	80082d6 <osMailPut+0x22>

0800830a <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800830a:	b530      	push	{r4, r5, lr}
 800830c:	b085      	sub	sp, #20
 800830e:	4605      	mov	r5, r0
 8008310:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8008312:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8008314:	b911      	cbnz	r1, 800831c <osMailGet+0x12>
    event.status = osErrorParameter;
 8008316:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	e01a      	b.n	8008352 <osMailGet+0x48>
  taskWoken = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008324:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8008326:	b1e3      	cbz	r3, 8008362 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008328:	466a      	mov	r2, sp
 800832a:	a902      	add	r1, sp, #8
 800832c:	f000 fc8d 	bl	8008c4a <xQueueReceiveFromISR>
 8008330:	1e43      	subs	r3, r0, #1
 8008332:	4258      	negs	r0, r3
 8008334:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8008336:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008338:	0140      	lsls	r0, r0, #5
 800833a:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800833c:	b14b      	cbz	r3, 8008352 <osMailGet+0x48>
 800833e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008346:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	f3bf 8f6f 	isb	sy
    return event;
 8008352:	ab04      	add	r3, sp, #16
 8008354:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008358:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 800835c:	4628      	mov	r0, r5
 800835e:	b005      	add	sp, #20
 8008360:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8008362:	a902      	add	r1, sp, #8
 8008364:	f000 fb16 	bl	8008994 <xQueueReceive>
 8008368:	2801      	cmp	r0, #1
 800836a:	d101      	bne.n	8008370 <osMailGet+0x66>
      event.status = osEventMail;
 800836c:	2320      	movs	r3, #32
 800836e:	e7d3      	b.n	8008318 <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008370:	3c00      	subs	r4, #0
 8008372:	bf18      	it	ne
 8008374:	2401      	movne	r4, #1
 8008376:	01a4      	lsls	r4, r4, #6
 8008378:	9401      	str	r4, [sp, #4]
  return event;
 800837a:	e7ea      	b.n	8008352 <osMailGet+0x48>

0800837c <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 800837c:	b110      	cbz	r0, 8008384 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 800837e:	6880      	ldr	r0, [r0, #8]
 8008380:	f7ff bf53 	b.w	800822a <osPoolFree>
}
 8008384:	2080      	movs	r0, #128	@ 0x80
 8008386:	4770      	bx	lr

08008388 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008388:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008390:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008394:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008396:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800839c:	4770      	bx	lr

0800839e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083a2:	4770      	bx	lr

080083a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80083a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083ac:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083ae:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80083b0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083b2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80083b4:	3301      	adds	r3, #1
 80083b6:	6003      	str	r3, [r0, #0]
}
 80083b8:	4770      	bx	lr

080083ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ba:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083bc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083be:	1c63      	adds	r3, r4, #1
 80083c0:	d10a      	bne.n	80083d8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083c2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083c8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083ca:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80083cc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80083ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80083d2:	3301      	adds	r3, #1
 80083d4:	6003      	str	r3, [r0, #0]
}
 80083d6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083d8:	f100 0208 	add.w	r2, r0, #8
 80083dc:	4613      	mov	r3, r2
 80083de:	6852      	ldr	r2, [r2, #4]
 80083e0:	6815      	ldr	r5, [r2, #0]
 80083e2:	42a5      	cmp	r5, r4
 80083e4:	d9fa      	bls.n	80083dc <vListInsert+0x22>
 80083e6:	e7ed      	b.n	80083c4 <vListInsert+0xa>

080083e8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083e8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80083ec:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083ee:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083f6:	bf08      	it	eq
 80083f8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80083fa:	2200      	movs	r2, #0
 80083fc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	3a01      	subs	r2, #1
 8008402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008404:	6818      	ldr	r0, [r3, #0]
}
 8008406:	4770      	bx	lr

08008408 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008408:	b510      	push	{r4, lr}
 800840a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800840c:	f001 fa2a 	bl	8009864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008410:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008412:	f001 fa47 	bl	80098a4 <vPortExitCritical>

	return xReturn;
}
 8008416:	fab4 f084 	clz	r0, r4
 800841a:	0940      	lsrs	r0, r0, #5
 800841c:	bd10      	pop	{r4, pc}

0800841e <prvCopyDataToQueue>:
{
 800841e:	b570      	push	{r4, r5, r6, lr}
 8008420:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008422:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008424:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8008426:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008428:	b942      	cbnz	r2, 800843c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800842a:	6806      	ldr	r6, [r0, #0]
 800842c:	b99e      	cbnz	r6, 8008456 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800842e:	6840      	ldr	r0, [r0, #4]
 8008430:	f001 f8f6 	bl	8009620 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008434:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008436:	3501      	adds	r5, #1
 8008438:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800843a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800843c:	b96e      	cbnz	r6, 800845a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800843e:	6880      	ldr	r0, [r0, #8]
 8008440:	f004 fb4a 	bl	800cad8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008444:	68a3      	ldr	r3, [r4, #8]
 8008446:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008448:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800844a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800844c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800844e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008450:	bf24      	itt	cs
 8008452:	6823      	ldrcs	r3, [r4, #0]
 8008454:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008456:	2000      	movs	r0, #0
 8008458:	e7ed      	b.n	8008436 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845a:	68c0      	ldr	r0, [r0, #12]
 800845c:	f004 fb3c 	bl	800cad8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008460:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008462:	68e3      	ldr	r3, [r4, #12]
 8008464:	4251      	negs	r1, r2
 8008466:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008468:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800846a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800846c:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800846e:	bf3e      	ittt	cc
 8008470:	6863      	ldrcc	r3, [r4, #4]
 8008472:	185b      	addcc	r3, r3, r1
 8008474:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008476:	2e02      	cmp	r6, #2
 8008478:	d1ed      	bne.n	8008456 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847a:	b10d      	cbz	r5, 8008480 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800847c:	3d01      	subs	r5, #1
 800847e:	e7ea      	b.n	8008456 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008480:	4628      	mov	r0, r5
 8008482:	e7d8      	b.n	8008436 <prvCopyDataToQueue+0x18>

08008484 <prvCopyDataFromQueue>:
{
 8008484:	4603      	mov	r3, r0
 8008486:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800848a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800848c:	b16a      	cbz	r2, 80084aa <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800848e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008490:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008492:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008494:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008496:	bf28      	it	cs
 8008498:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800849a:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800849c:	bf28      	it	cs
 800849e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80084a0:	68d9      	ldr	r1, [r3, #12]
}
 80084a2:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80084a6:	f004 bb17 	b.w	800cad8 <memcpy>
}
 80084aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <prvUnlockQueue>:
{
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80084b4:	f001 f9d6 	bl	8009864 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80084b8:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80084c0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	dc14      	bgt.n	80084f0 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80084c6:	23ff      	movs	r3, #255	@ 0xff
 80084c8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80084cc:	f001 f9ea 	bl	80098a4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80084d0:	f001 f9c8 	bl	8009864 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80084d4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d8:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80084dc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084de:	2d00      	cmp	r5, #0
 80084e0:	dc12      	bgt.n	8008508 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80084e2:	23ff      	movs	r3, #255	@ 0xff
 80084e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80084e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80084ec:	f001 b9da 	b.w	80098a4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0e7      	beq.n	80084c6 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 ffa2 	bl	8009440 <xTaskRemoveFromEventList>
 80084fc:	b108      	cbz	r0, 8008502 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80084fe:	f001 f829 	bl	8009554 <vTaskMissedYield>
			--cTxLock;
 8008502:	3d01      	subs	r5, #1
 8008504:	b26d      	sxtb	r5, r5
 8008506:	e7dc      	b.n	80084c2 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0e9      	beq.n	80084e2 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850e:	4630      	mov	r0, r6
 8008510:	f000 ff96 	bl	8009440 <xTaskRemoveFromEventList>
 8008514:	b108      	cbz	r0, 800851a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008516:	f001 f81d 	bl	8009554 <vTaskMissedYield>
				--cRxLock;
 800851a:	3d01      	subs	r5, #1
 800851c:	b26d      	sxtb	r5, r5
 800851e:	e7de      	b.n	80084de <prvUnlockQueue+0x2e>

08008520 <xQueueGenericReset>:
{
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008524:	4604      	mov	r4, r0
 8008526:	b940      	cbnz	r0, 800853a <xQueueGenericReset+0x1a>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	e7fe      	b.n	8008538 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800853a:	f001 f993 	bl	8009864 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800853e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8008542:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008544:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008546:	434b      	muls	r3, r1
 8008548:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800854a:	1a5b      	subs	r3, r3, r1
 800854c:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800854e:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8008550:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008552:	2000      	movs	r0, #0
 8008554:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008556:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008558:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800855c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8008560:	b9a5      	cbnz	r5, 800858c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	b173      	cbz	r3, 8008584 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008566:	f104 0010 	add.w	r0, r4, #16
 800856a:	f000 ff69 	bl	8009440 <xTaskRemoveFromEventList>
 800856e:	b148      	cbz	r0, 8008584 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008570:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008574:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008578:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008584:	f001 f98e 	bl	80098a4 <vPortExitCritical>
}
 8008588:	2001      	movs	r0, #1
 800858a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858c:	f104 0010 	add.w	r0, r4, #16
 8008590:	f7ff fefa 	bl	8008388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008594:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008598:	f7ff fef6 	bl	8008388 <vListInitialise>
 800859c:	e7f2      	b.n	8008584 <xQueueGenericReset+0x64>

0800859e <xQueueGenericCreateStatic>:
	{
 800859e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085a0:	460d      	mov	r5, r1
 80085a2:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085a4:	b940      	cbnz	r0, 80085b8 <xQueueGenericCreateStatic+0x1a>
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	e7fe      	b.n	80085b6 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80085b8:	b943      	cbnz	r3, 80085cc <xQueueGenericCreateStatic+0x2e>
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	e7fe      	b.n	80085ca <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085cc:	b14a      	cbz	r2, 80085e2 <xQueueGenericCreateStatic+0x44>
 80085ce:	b991      	cbnz	r1, 80085f6 <xQueueGenericCreateStatic+0x58>
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	e7fe      	b.n	80085e0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085e2:	b141      	cbz	r1, 80085f6 <xQueueGenericCreateStatic+0x58>
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	e7fe      	b.n	80085f4 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085f6:	2348      	movs	r3, #72	@ 0x48
 80085f8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085fa:	9b01      	ldr	r3, [sp, #4]
 80085fc:	2b48      	cmp	r3, #72	@ 0x48
 80085fe:	d008      	beq.n	8008612 <xQueueGenericCreateStatic+0x74>
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	e7fe      	b.n	8008610 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008612:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008614:	2d00      	cmp	r5, #0
 8008616:	bf08      	it	eq
 8008618:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800861a:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800861e:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008622:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008624:	4620      	mov	r0, r4
 8008626:	f7ff ff7b 	bl	8008520 <xQueueGenericReset>
	}
 800862a:	4620      	mov	r0, r4
 800862c:	b003      	add	sp, #12
 800862e:	bd30      	pop	{r4, r5, pc}

08008630 <xQueueGenericCreate>:
	{
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008634:	4606      	mov	r6, r0
 8008636:	b940      	cbnz	r0, 800864a <xQueueGenericCreate+0x1a>
 8008638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	e7fe      	b.n	8008648 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864a:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800864c:	3048      	adds	r0, #72	@ 0x48
 800864e:	f001 fa6f 	bl	8009b30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008652:	4604      	mov	r4, r0
 8008654:	b160      	cbz	r0, 8008670 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800865c:	b155      	cbz	r5, 8008674 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800865e:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8008662:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8008666:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008668:	2101      	movs	r1, #1
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff ff58 	bl	8008520 <xQueueGenericReset>
	}
 8008670:	4620      	mov	r0, r4
 8008672:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008674:	4603      	mov	r3, r0
 8008676:	e7f4      	b.n	8008662 <xQueueGenericCreate+0x32>

08008678 <xQueueGenericSend>:
{
 8008678:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800867c:	460f      	mov	r7, r1
 800867e:	9201      	str	r2, [sp, #4]
 8008680:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008682:	4604      	mov	r4, r0
 8008684:	b940      	cbnz	r0, 8008698 <xQueueGenericSend+0x20>
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	e7fe      	b.n	8008696 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008698:	b951      	cbnz	r1, 80086b0 <xQueueGenericSend+0x38>
 800869a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800869c:	b143      	cbz	r3, 80086b0 <xQueueGenericSend+0x38>
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b0:	2e02      	cmp	r6, #2
 80086b2:	d10b      	bne.n	80086cc <xQueueGenericSend+0x54>
 80086b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d008      	beq.n	80086cc <xQueueGenericSend+0x54>
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	e7fe      	b.n	80086ca <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086cc:	f000 ff48 	bl	8009560 <xTaskGetSchedulerState>
 80086d0:	4605      	mov	r5, r0
 80086d2:	b330      	cbz	r0, 8008722 <xQueueGenericSend+0xaa>
 80086d4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80086d6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80086da:	f001 f8c3 	bl	8009864 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d301      	bcc.n	80086ea <xQueueGenericSend+0x72>
 80086e6:	2e02      	cmp	r6, #2
 80086e8:	d127      	bne.n	800873a <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086ea:	4632      	mov	r2, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	4620      	mov	r0, r4
 80086f0:	f7ff fe95 	bl	800841e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80086f6:	b11b      	cbz	r3, 8008700 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086f8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80086fc:	f000 fea0 	bl	8009440 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008700:	b148      	cbz	r0, 8008716 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008702:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008716:	f001 f8c5 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 800871a:	2001      	movs	r0, #1
}
 800871c:	b004      	add	sp, #16
 800871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0d6      	beq.n	80086d6 <xQueueGenericSend+0x5e>
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	e7fe      	b.n	8008738 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	b91b      	cbnz	r3, 8008746 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800873e:	f001 f8b1 	bl	80098a4 <vPortExitCritical>
					return errQUEUE_FULL;
 8008742:	2000      	movs	r0, #0
 8008744:	e7ea      	b.n	800871c <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8008746:	b915      	cbnz	r5, 800874e <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008748:	a802      	add	r0, sp, #8
 800874a:	f000 febb 	bl	80094c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800874e:	f001 f8a9 	bl	80098a4 <vPortExitCritical>
		vTaskSuspendAll();
 8008752:	f000 fce1 	bl	8009118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008756:	f001 f885 	bl	8009864 <vPortEnterCritical>
 800875a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800875e:	2bff      	cmp	r3, #255	@ 0xff
 8008760:	bf08      	it	eq
 8008762:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008766:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800876a:	2bff      	cmp	r3, #255	@ 0xff
 800876c:	bf08      	it	eq
 800876e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008772:	f001 f897 	bl	80098a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008776:	a901      	add	r1, sp, #4
 8008778:	a802      	add	r0, sp, #8
 800877a:	f000 feaf 	bl	80094dc <xTaskCheckForTimeOut>
 800877e:	bb38      	cbnz	r0, 80087d0 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008780:	f001 f870 	bl	8009864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008784:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008786:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008788:	429a      	cmp	r2, r3
 800878a:	d10e      	bne.n	80087aa <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800878c:	f001 f88a 	bl	80098a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008790:	9901      	ldr	r1, [sp, #4]
 8008792:	f104 0010 	add.w	r0, r4, #16
 8008796:	f000 fe39 	bl	800940c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800879a:	4620      	mov	r0, r4
 800879c:	f7ff fe88 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087a0:	f000 fd5a 	bl	8009258 <xTaskResumeAll>
 80087a4:	b148      	cbz	r0, 80087ba <xQueueGenericSend+0x142>
 80087a6:	2501      	movs	r5, #1
 80087a8:	e797      	b.n	80086da <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80087aa:	f001 f87b 	bl	80098a4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff fe7e 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087b4:	f000 fd50 	bl	8009258 <xTaskResumeAll>
 80087b8:	e7f5      	b.n	80087a6 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80087ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	e7ea      	b.n	80087a6 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80087d0:	4620      	mov	r0, r4
 80087d2:	f7ff fe6d 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087d6:	f000 fd3f 	bl	8009258 <xTaskResumeAll>
			return errQUEUE_FULL;
 80087da:	e7b2      	b.n	8008742 <xQueueGenericSend+0xca>

080087dc <xQueueCreateMutexStatic>:
	{
 80087dc:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80087de:	2200      	movs	r2, #0
	{
 80087e0:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80087e2:	9000      	str	r0, [sp, #0]
 80087e4:	4611      	mov	r1, r2
 80087e6:	2001      	movs	r0, #1
 80087e8:	f7ff fed9 	bl	800859e <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80087ec:	4604      	mov	r4, r0
 80087ee:	b138      	cbz	r0, 8008800 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 80087f0:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80087f2:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80087f6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80087f8:	461a      	mov	r2, r3
 80087fa:	4619      	mov	r1, r3
 80087fc:	f7ff ff3c 	bl	8008678 <xQueueGenericSend>
	}
 8008800:	4620      	mov	r0, r4
 8008802:	b002      	add	sp, #8
 8008804:	bd10      	pop	{r4, pc}

08008806 <xQueueCreateMutex>:
	{
 8008806:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008808:	2048      	movs	r0, #72	@ 0x48
 800880a:	f001 f991 	bl	8009b30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800880e:	4604      	mov	r4, r0
 8008810:	b188      	cbz	r0, 8008836 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008812:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008814:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8008816:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800881a:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800881e:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008820:	f7ff fe7e 	bl	8008520 <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008824:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008828:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800882a:	462b      	mov	r3, r5
 800882c:	462a      	mov	r2, r5
 800882e:	4629      	mov	r1, r5
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff ff21 	bl	8008678 <xQueueGenericSend>
	}
 8008836:	4620      	mov	r0, r4
 8008838:	bd38      	pop	{r3, r4, r5, pc}

0800883a <xQueueGenericSendFromISR>:
{
 800883a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883e:	4689      	mov	r9, r1
 8008840:	4617      	mov	r7, r2
 8008842:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008844:	4604      	mov	r4, r0
 8008846:	b940      	cbnz	r0, 800885a <xQueueGenericSendFromISR+0x20>
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	e7fe      	b.n	8008858 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885a:	b951      	cbnz	r1, 8008872 <xQueueGenericSendFromISR+0x38>
 800885c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800885e:	b143      	cbz	r3, 8008872 <xQueueGenericSendFromISR+0x38>
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	e7fe      	b.n	8008870 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008872:	2e02      	cmp	r6, #2
 8008874:	d10b      	bne.n	800888e <xQueueGenericSendFromISR+0x54>
 8008876:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d008      	beq.n	800888e <xQueueGenericSendFromISR+0x54>
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	e7fe      	b.n	800888c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800888e:	f001 f8fb 	bl	8009a88 <vPortValidateInterruptPriority>
	__asm volatile
 8008892:	f3ef 8811 	mrs	r8, BASEPRI
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088a6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80088a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d301      	bcc.n	80088b2 <xQueueGenericSendFromISR+0x78>
 80088ae:	2e02      	cmp	r6, #2
 80088b0:	d11d      	bne.n	80088ee <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088b6:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ba:	4649      	mov	r1, r9
 80088bc:	4620      	mov	r0, r4
 80088be:	f7ff fdae 	bl	800841e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80088c2:	1c6b      	adds	r3, r5, #1
 80088c4:	d10e      	bne.n	80088e4 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088c8:	b13b      	cbz	r3, 80088da <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80088ce:	f000 fdb7 	bl	8009440 <xTaskRemoveFromEventList>
 80088d2:	b110      	cbz	r0, 80088da <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80088d4:	b10f      	cbz	r7, 80088da <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088d6:	2301      	movs	r3, #1
 80088d8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80088da:	2001      	movs	r0, #1
	__asm volatile
 80088dc:	f388 8811 	msr	BASEPRI, r8
}
 80088e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088e4:	3501      	adds	r5, #1
 80088e6:	b26d      	sxtb	r5, r5
 80088e8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80088ec:	e7f5      	b.n	80088da <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80088ee:	2000      	movs	r0, #0
 80088f0:	e7f4      	b.n	80088dc <xQueueGenericSendFromISR+0xa2>

080088f2 <xQueueGiveFromISR>:
{
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80088f6:	4604      	mov	r4, r0
 80088f8:	b940      	cbnz	r0, 800890c <xQueueGiveFromISR+0x1a>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	e7fe      	b.n	800890a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800890c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800890e:	b143      	cbz	r3, 8008922 <xQueueGiveFromISR+0x30>
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	e7fe      	b.n	8008920 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008922:	6803      	ldr	r3, [r0, #0]
 8008924:	b953      	cbnz	r3, 800893c <xQueueGiveFromISR+0x4a>
 8008926:	6843      	ldr	r3, [r0, #4]
 8008928:	b143      	cbz	r3, 800893c <xQueueGiveFromISR+0x4a>
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	e7fe      	b.n	800893a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800893c:	f001 f8a4 	bl	8009a88 <vPortValidateInterruptPriority>
	__asm volatile
 8008940:	f3ef 8611 	mrs	r6, BASEPRI
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008954:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008956:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008958:	4293      	cmp	r3, r2
 800895a:	d919      	bls.n	8008990 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800895c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008960:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008962:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008964:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008966:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8008968:	d10d      	bne.n	8008986 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800896a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800896c:	b13b      	cbz	r3, 800897e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800896e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008972:	f000 fd65 	bl	8009440 <xTaskRemoveFromEventList>
 8008976:	b110      	cbz	r0, 800897e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8008978:	b10d      	cbz	r5, 800897e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800897a:	2301      	movs	r3, #1
 800897c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800897e:	2001      	movs	r0, #1
	__asm volatile
 8008980:	f386 8811 	msr	BASEPRI, r6
}
 8008984:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008986:	3301      	adds	r3, #1
 8008988:	b25b      	sxtb	r3, r3
 800898a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800898e:	e7f6      	b.n	800897e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008990:	2000      	movs	r0, #0
 8008992:	e7f5      	b.n	8008980 <xQueueGiveFromISR+0x8e>

08008994 <xQueueReceive>:
{
 8008994:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008998:	460e      	mov	r6, r1
 800899a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800899c:	4604      	mov	r4, r0
 800899e:	b940      	cbnz	r0, 80089b2 <xQueueReceive+0x1e>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	e7fe      	b.n	80089b0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089b2:	b951      	cbnz	r1, 80089ca <xQueueReceive+0x36>
 80089b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80089b6:	b143      	cbz	r3, 80089ca <xQueueReceive+0x36>
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	e7fe      	b.n	80089c8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ca:	f000 fdc9 	bl	8009560 <xTaskGetSchedulerState>
 80089ce:	4605      	mov	r5, r0
 80089d0:	b318      	cbz	r0, 8008a1a <xQueueReceive+0x86>
 80089d2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80089d4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80089d8:	f000 ff44 	bl	8009864 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089dc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089de:	b347      	cbz	r7, 8008a32 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089e0:	4631      	mov	r1, r6
 80089e2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089e4:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089e6:	f7ff fd4d 	bl	8008484 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089ea:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	b173      	cbz	r3, 8008a0e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f0:	f104 0010 	add.w	r0, r4, #16
 80089f4:	f000 fd24 	bl	8009440 <xTaskRemoveFromEventList>
 80089f8:	b148      	cbz	r0, 8008a0e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80089fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008a0e:	f000 ff49 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8008a12:	2001      	movs	r0, #1
}
 8008a14:	b004      	add	sp, #16
 8008a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a1a:	9b01      	ldr	r3, [sp, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0d9      	beq.n	80089d4 <xQueueReceive+0x40>
 8008a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	e7fe      	b.n	8008a30 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	b91b      	cbnz	r3, 8008a3e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008a36:	f000 ff35 	bl	80098a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e7ea      	b.n	8008a14 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008a3e:	b915      	cbnz	r5, 8008a46 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a40:	a802      	add	r0, sp, #8
 8008a42:	f000 fd3f 	bl	80094c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008a46:	f000 ff2d 	bl	80098a4 <vPortExitCritical>
		vTaskSuspendAll();
 8008a4a:	f000 fb65 	bl	8009118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a4e:	f000 ff09 	bl	8009864 <vPortEnterCritical>
 8008a52:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a56:	2bff      	cmp	r3, #255	@ 0xff
 8008a58:	bf08      	it	eq
 8008a5a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008a5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a62:	2bff      	cmp	r3, #255	@ 0xff
 8008a64:	bf08      	it	eq
 8008a66:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008a6a:	f000 ff1b 	bl	80098a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a6e:	a901      	add	r1, sp, #4
 8008a70:	a802      	add	r0, sp, #8
 8008a72:	f000 fd33 	bl	80094dc <xTaskCheckForTimeOut>
 8008a76:	bb00      	cbnz	r0, 8008aba <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7ff fcc5 	bl	8008408 <prvIsQueueEmpty>
 8008a7e:	b1b0      	cbz	r0, 8008aae <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008a86:	f000 fcc1 	bl	800940c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff fd10 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a90:	f000 fbe2 	bl	8009258 <xTaskResumeAll>
 8008a94:	b948      	cbnz	r0, 8008aaa <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008a96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	2501      	movs	r5, #1
 8008aac:	e794      	b.n	80089d8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f7ff fcfe 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab4:	f000 fbd0 	bl	8009258 <xTaskResumeAll>
 8008ab8:	e7f7      	b.n	8008aaa <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff fcf8 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ac0:	f000 fbca 	bl	8009258 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fc9f 	bl	8008408 <prvIsQueueEmpty>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0ed      	beq.n	8008aaa <xQueueReceive+0x116>
 8008ace:	e7b4      	b.n	8008a3a <xQueueReceive+0xa6>

08008ad0 <xQueueSemaphoreTake>:
{
 8008ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008ad4:	4604      	mov	r4, r0
{
 8008ad6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008ad8:	b940      	cbnz	r0, 8008aec <xQueueSemaphoreTake+0x1c>
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	e7fe      	b.n	8008aea <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008aec:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8008aee:	b145      	cbz	r5, 8008b02 <xQueueSemaphoreTake+0x32>
 8008af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	e7fe      	b.n	8008b00 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b02:	f000 fd2d 	bl	8009560 <xTaskGetSchedulerState>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b320      	cbz	r0, 8008b54 <xQueueSemaphoreTake+0x84>
 8008b0a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008b0c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8008b0e:	f000 fea9 	bl	8009864 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b14:	b353      	cbz	r3, 8008b6c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b16:	3b01      	subs	r3, #1
 8008b18:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	b913      	cbnz	r3, 8008b24 <xQueueSemaphoreTake+0x54>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008b1e:	f000 fe29 	bl	8009774 <pvTaskIncrementMutexHeldCount>
 8008b22:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	b173      	cbz	r3, 8008b46 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b28:	f104 0010 	add.w	r0, r4, #16
 8008b2c:	f000 fc88 	bl	8009440 <xTaskRemoveFromEventList>
 8008b30:	b148      	cbz	r0, 8008b46 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8008b32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008b46:	f000 fead 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8008b4a:	2001      	movs	r0, #1
}
 8008b4c:	b005      	add	sp, #20
 8008b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b50:	4635      	mov	r5, r6
 8008b52:	e7db      	b.n	8008b0c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0fa      	beq.n	8008b50 <xQueueSemaphoreTake+0x80>
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	e7fe      	b.n	8008b6a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	b953      	cbnz	r3, 8008b86 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	d066      	beq.n	8008c42 <xQueueSemaphoreTake+0x172>
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	e7fe      	b.n	8008b84 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8008b86:	b916      	cbnz	r6, 8008b8e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b88:	a802      	add	r0, sp, #8
 8008b8a:	f000 fc9b 	bl	80094c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008b8e:	f000 fe89 	bl	80098a4 <vPortExitCritical>
		vTaskSuspendAll();
 8008b92:	f000 fac1 	bl	8009118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b96:	f000 fe65 	bl	8009864 <vPortEnterCritical>
 8008b9a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008b9e:	2bff      	cmp	r3, #255	@ 0xff
 8008ba0:	bf08      	it	eq
 8008ba2:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8008ba6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008baa:	2bff      	cmp	r3, #255	@ 0xff
 8008bac:	bf08      	it	eq
 8008bae:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8008bb2:	f000 fe77 	bl	80098a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bb6:	a901      	add	r1, sp, #4
 8008bb8:	a802      	add	r0, sp, #8
 8008bba:	f000 fc8f 	bl	80094dc <xTaskCheckForTimeOut>
 8008bbe:	bb50      	cbnz	r0, 8008c16 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff fc21 	bl	8008408 <prvIsQueueEmpty>
 8008bc6:	b300      	cbz	r0, 8008c0a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	b93b      	cbnz	r3, 8008bdc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8008bcc:	f000 fe4a 	bl	8009864 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008bd0:	6860      	ldr	r0, [r4, #4]
 8008bd2:	f000 fcd5 	bl	8009580 <xTaskPriorityInherit>
 8008bd6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008bd8:	f000 fe64 	bl	80098a4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bdc:	9901      	ldr	r1, [sp, #4]
 8008bde:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008be2:	f000 fc13 	bl	800940c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff fc62 	bl	80084b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bec:	f000 fb34 	bl	8009258 <xTaskResumeAll>
 8008bf0:	b948      	cbnz	r0, 8008c06 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8008bf2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	2601      	movs	r6, #1
 8008c08:	e781      	b.n	8008b0e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fc50 	bl	80084b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c10:	f000 fb22 	bl	8009258 <xTaskResumeAll>
 8008c14:	e7f7      	b.n	8008c06 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8008c16:	4620      	mov	r0, r4
 8008c18:	f7ff fc4a 	bl	80084b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c1c:	f000 fb1c 	bl	8009258 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7ff fbf1 	bl	8008408 <prvIsQueueEmpty>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d0ed      	beq.n	8008c06 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8008c2a:	b165      	cbz	r5, 8008c46 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8008c2c:	f000 fe1a 	bl	8009864 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008c30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008c32:	b119      	cbz	r1, 8008c3c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008c36:	6819      	ldr	r1, [r3, #0]
 8008c38:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008c3c:	6860      	ldr	r0, [r4, #4]
 8008c3e:	f000 fd3f 	bl	80096c0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008c42:	f000 fe2f 	bl	80098a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008c46:	2000      	movs	r0, #0
 8008c48:	e780      	b.n	8008b4c <xQueueSemaphoreTake+0x7c>

08008c4a <xQueueReceiveFromISR>:
{
 8008c4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4e:	4689      	mov	r9, r1
 8008c50:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008c52:	4604      	mov	r4, r0
 8008c54:	b940      	cbnz	r0, 8008c68 <xQueueReceiveFromISR+0x1e>
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	e7fe      	b.n	8008c66 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c68:	b951      	cbnz	r1, 8008c80 <xQueueReceiveFromISR+0x36>
 8008c6a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008c6c:	b143      	cbz	r3, 8008c80 <xQueueReceiveFromISR+0x36>
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	e7fe      	b.n	8008c7e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c80:	f000 ff02 	bl	8009a88 <vPortValidateInterruptPriority>
	__asm volatile
 8008c84:	f3ef 8711 	mrs	r7, BASEPRI
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c98:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c9a:	b30d      	cbz	r5, 8008ce0 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008c9c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ca0:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ca2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f7ff fbed 	bl	8008484 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008caa:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008cac:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cae:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008cb0:	d111      	bne.n	8008cd6 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	b153      	cbz	r3, 8008ccc <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cb6:	f104 0010 	add.w	r0, r4, #16
 8008cba:	f000 fbc1 	bl	8009440 <xTaskRemoveFromEventList>
 8008cbe:	b128      	cbz	r0, 8008ccc <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008cc0:	f1b8 0f00 	cmp.w	r8, #0
 8008cc4:	d002      	beq.n	8008ccc <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008ccc:	2001      	movs	r0, #1
	__asm volatile
 8008cce:	f387 8811 	msr	BASEPRI, r7
}
 8008cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008cd6:	3601      	adds	r6, #1
 8008cd8:	b276      	sxtb	r6, r6
 8008cda:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8008cde:	e7f5      	b.n	8008ccc <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	e7f4      	b.n	8008cce <xQueueReceiveFromISR+0x84>

08008ce4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cea:	f000 fdbb 	bl	8009864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cee:	4b2f      	ldr	r3, [pc, #188]	@ (8008dac <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008cf0:	4e2f      	ldr	r6, [pc, #188]	@ (8008db0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4f2f      	ldr	r7, [pc, #188]	@ (8008db4 <prvAddNewTaskToReadyList+0xd0>)
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008cfa:	6835      	ldr	r5, [r6, #0]
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	d14a      	bne.n	8008d96 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d00:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d11f      	bne.n	8008d48 <prvAddNewTaskToReadyList+0x64>
 8008d08:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d0a:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d0c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d0e:	f7ff fb3b 	bl	8008388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d12:	2d07      	cmp	r5, #7
 8008d14:	f108 0814 	add.w	r8, r8, #20
 8008d18:	d1f7      	bne.n	8008d0a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d1a:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8008ddc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008d1e:	4d26      	ldr	r5, [pc, #152]	@ (8008db8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8008d20:	4640      	mov	r0, r8
 8008d22:	f7ff fb31 	bl	8008388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7ff fb2e 	bl	8008388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d2c:	4823      	ldr	r0, [pc, #140]	@ (8008dbc <prvAddNewTaskToReadyList+0xd8>)
 8008d2e:	f7ff fb2b 	bl	8008388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d32:	4823      	ldr	r0, [pc, #140]	@ (8008dc0 <prvAddNewTaskToReadyList+0xdc>)
 8008d34:	f7ff fb28 	bl	8008388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d38:	4822      	ldr	r0, [pc, #136]	@ (8008dc4 <prvAddNewTaskToReadyList+0xe0>)
 8008d3a:	f7ff fb25 	bl	8008388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d3e:	4b22      	ldr	r3, [pc, #136]	@ (8008dc8 <prvAddNewTaskToReadyList+0xe4>)
 8008d40:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d44:	4b21      	ldr	r3, [pc, #132]	@ (8008dcc <prvAddNewTaskToReadyList+0xe8>)
 8008d46:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008d48:	4a21      	ldr	r2, [pc, #132]	@ (8008dd0 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8008d4a:	4922      	ldr	r1, [pc, #136]	@ (8008dd4 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8008d4c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008d4e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008d50:	3301      	adds	r3, #1
 8008d52:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008d54:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008d56:	2301      	movs	r3, #1
 8008d58:	4093      	lsls	r3, r2
 8008d5a:	4303      	orrs	r3, r0
 8008d5c:	2014      	movs	r0, #20
 8008d5e:	600b      	str	r3, [r1, #0]
 8008d60:	fb00 7002 	mla	r0, r0, r2, r7
 8008d64:	1d21      	adds	r1, r4, #4
 8008d66:	f7ff fb1d 	bl	80083a4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008d6a:	f000 fd9b 	bl	80098a4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd8 <prvAddNewTaskToReadyList+0xf4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	b173      	cbz	r3, 8008d92 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d74:	6833      	ldr	r3, [r6, #0]
 8008d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d209      	bcs.n	8008d92 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008d7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
}
 8008d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008d96:	4b10      	ldr	r3, [pc, #64]	@ (8008dd8 <prvAddNewTaskToReadyList+0xf4>)
 8008d98:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	d1d3      	bne.n	8008d48 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008da0:	6832      	ldr	r2, [r6, #0]
 8008da2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008da6:	bf98      	it	ls
 8008da8:	6034      	strls	r4, [r6, #0]
 8008daa:	e7cd      	b.n	8008d48 <prvAddNewTaskToReadyList+0x64>
 8008dac:	200034f8 	.word	0x200034f8
 8008db0:	200035f8 	.word	0x200035f8
 8008db4:	2000356c 	.word	0x2000356c
 8008db8:	20003544 	.word	0x20003544
 8008dbc:	20003528 	.word	0x20003528
 8008dc0:	20003514 	.word	0x20003514
 8008dc4:	200034fc 	.word	0x200034fc
 8008dc8:	20003540 	.word	0x20003540
 8008dcc:	2000353c 	.word	0x2000353c
 8008dd0:	200034dc 	.word	0x200034dc
 8008dd4:	200034f0 	.word	0x200034f0
 8008dd8:	200034ec 	.word	0x200034ec
 8008ddc:	20003558 	.word	0x20003558

08008de0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008de2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e4c <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de4:	4d1a      	ldr	r5, [pc, #104]	@ (8008e50 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8008de6:	681c      	ldr	r4, [r3, #0]
{
 8008de8:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dea:	6828      	ldr	r0, [r5, #0]
 8008dec:	3004      	adds	r0, #4
{
 8008dee:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df0:	f7ff fafa 	bl	80083e8 <uxListRemove>
 8008df4:	b940      	cbnz	r0, 8008e08 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008df6:	682a      	ldr	r2, [r5, #0]
 8008df8:	4916      	ldr	r1, [pc, #88]	@ (8008e54 <prvAddCurrentTaskToDelayedList+0x74>)
 8008dfa:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008dfc:	680b      	ldr	r3, [r1, #0]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4082      	lsls	r2, r0
 8008e02:	ea23 0302 	bic.w	r3, r3, r2
 8008e06:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e08:	1c73      	adds	r3, r6, #1
 8008e0a:	d107      	bne.n	8008e1c <prvAddCurrentTaskToDelayedList+0x3c>
 8008e0c:	b137      	cbz	r7, 8008e1c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e0e:	6829      	ldr	r1, [r5, #0]
 8008e10:	4811      	ldr	r0, [pc, #68]	@ (8008e58 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e16:	3104      	adds	r1, #4
 8008e18:	f7ff bac4 	b.w	80083a4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	19a4      	adds	r4, r4, r6
 8008e20:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e22:	d307      	bcc.n	8008e34 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e24:	4b0d      	ldr	r3, [pc, #52]	@ (8008e5c <prvAddCurrentTaskToDelayedList+0x7c>)
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	6829      	ldr	r1, [r5, #0]
}
 8008e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e2e:	3104      	adds	r1, #4
 8008e30:	f7ff bac3 	b.w	80083ba <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e34:	4b0a      	ldr	r3, [pc, #40]	@ (8008e60 <prvAddCurrentTaskToDelayedList+0x80>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	6829      	ldr	r1, [r5, #0]
 8008e3a:	3104      	adds	r1, #4
 8008e3c:	f7ff fabd 	bl	80083ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e40:	4b08      	ldr	r3, [pc, #32]	@ (8008e64 <prvAddCurrentTaskToDelayedList+0x84>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008e46:	bf88      	it	hi
 8008e48:	601c      	strhi	r4, [r3, #0]
}
 8008e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e4c:	200034f4 	.word	0x200034f4
 8008e50:	200035f8 	.word	0x200035f8
 8008e54:	200034f0 	.word	0x200034f0
 8008e58:	200034fc 	.word	0x200034fc
 8008e5c:	2000353c 	.word	0x2000353c
 8008e60:	20003540 	.word	0x20003540
 8008e64:	200034d8 	.word	0x200034d8

08008e68 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e68:	4a06      	ldr	r2, [pc, #24]	@ (8008e84 <prvResetNextTaskUnblockTime+0x1c>)
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	6819      	ldr	r1, [r3, #0]
 8008e6e:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <prvResetNextTaskUnblockTime+0x20>)
 8008e70:	b919      	cbnz	r1, 8008e7a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e76:	601a      	str	r2, [r3, #0]
}
 8008e78:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e7e:	68d2      	ldr	r2, [r2, #12]
 8008e80:	6852      	ldr	r2, [r2, #4]
 8008e82:	e7f8      	b.n	8008e76 <prvResetNextTaskUnblockTime+0xe>
 8008e84:	20003540 	.word	0x20003540
 8008e88:	200034d8 	.word	0x200034d8

08008e8c <prvDeleteTCB>:
	{
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e90:	304c      	adds	r0, #76	@ 0x4c
 8008e92:	f003 fd53 	bl	800c93c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e96:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8008e9a:	b93b      	cbnz	r3, 8008eac <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008e9c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008e9e:	f000 fed9 	bl	8009c54 <vPortFree>
				vPortFree( pxTCB );
 8008ea2:	4620      	mov	r0, r4
	}
 8008ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008ea8:	f000 bed4 	b.w	8009c54 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d0f8      	beq.n	8008ea2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d008      	beq.n	8008ec6 <prvDeleteTCB+0x3a>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	e7fe      	b.n	8008ec4 <prvDeleteTCB+0x38>
	}
 8008ec6:	bd10      	pop	{r4, pc}

08008ec8 <prvIdleTask>:
{
 8008ec8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eca:	4c13      	ldr	r4, [pc, #76]	@ (8008f18 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ecc:	4f13      	ldr	r7, [pc, #76]	@ (8008f1c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008ece:	4d14      	ldr	r5, [pc, #80]	@ (8008f20 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	b973      	cbnz	r3, 8008ef2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ed4:	4b13      	ldr	r3, [pc, #76]	@ (8008f24 <prvIdleTask+0x5c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d9f8      	bls.n	8008ece <prvIdleTask+0x6>
				taskYIELD();
 8008edc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	e7ed      	b.n	8008ece <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008ef2:	f000 fcb7 	bl	8009864 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008efa:	1d30      	adds	r0, r6, #4
 8008efc:	f7ff fa74 	bl	80083e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008f0c:	f000 fcca 	bl	80098a4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff ffbb 	bl	8008e8c <prvDeleteTCB>
 8008f16:	e7db      	b.n	8008ed0 <prvIdleTask+0x8>
 8008f18:	20003510 	.word	0x20003510
 8008f1c:	20003514 	.word	0x20003514
 8008f20:	200034f8 	.word	0x200034f8
 8008f24:	2000356c 	.word	0x2000356c

08008f28 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2c:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008f30:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008f34:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8008f36:	3a01      	subs	r2, #1
 8008f38:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f3c:	4698      	mov	r8, r3
 8008f3e:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008f40:	1e4b      	subs	r3, r1, #1
 8008f42:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f46:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008f4a:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f4c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008f50:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008f54:	b108      	cbz	r0, 8008f5a <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f56:	428b      	cmp	r3, r1
 8008f58:	d1f8      	bne.n	8008f4c <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f5a:	9d08      	ldr	r5, [sp, #32]
 8008f5c:	2d06      	cmp	r5, #6
 8008f5e:	bf28      	it	cs
 8008f60:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f62:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8008f66:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008f6a:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f6c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f6e:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f72:	f7ff fa14 	bl	800839e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f76:	f104 0018 	add.w	r0, r4, #24
 8008f7a:	f7ff fa10 	bl	800839e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7e:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f82:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8008f84:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f88:	4651      	mov	r1, sl
 8008f8a:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f8c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f90:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f92:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f96:	f002 fef5 	bl	800bd84 <memset>
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <prvInitialiseNewTask.constprop.0+0x9c>)
 8008f9c:	6523      	str	r3, [r4, #80]	@ 0x50
 8008f9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fa2:	33d0      	adds	r3, #208	@ 0xd0
 8008fa4:	6562      	str	r2, [r4, #84]	@ 0x54
 8008fa6:	65a3      	str	r3, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fa8:	4642      	mov	r2, r8
 8008faa:	4639      	mov	r1, r7
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 fc2b 	bl	8009808 <pxPortInitialiseStack>
 8008fb2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008fb4:	f1b9 0f00 	cmp.w	r9, #0
 8008fb8:	d001      	beq.n	8008fbe <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fba:	f8c9 4000 	str.w	r4, [r9]
}
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20008444 	.word	0x20008444

08008fc8 <xTaskCreateStatic>:
	{
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008fd0:	b945      	cbnz	r5, 8008fe4 <xTaskCreateStatic+0x1c>
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	e7fe      	b.n	8008fe2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008fe4:	b944      	cbnz	r4, 8008ff8 <xTaskCreateStatic+0x30>
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	e7fe      	b.n	8008ff6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ff8:	26a0      	movs	r6, #160	@ 0xa0
 8008ffa:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ffc:	9e05      	ldr	r6, [sp, #20]
 8008ffe:	2ea0      	cmp	r6, #160	@ 0xa0
 8009000:	d008      	beq.n	8009014 <xTaskCreateStatic+0x4c>
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	e7fe      	b.n	8009012 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009014:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009016:	2502      	movs	r5, #2
 8009018:	f884 509d 	strb.w	r5, [r4, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800901c:	ad04      	add	r5, sp, #16
 800901e:	9501      	str	r5, [sp, #4]
 8009020:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009022:	9402      	str	r4, [sp, #8]
 8009024:	9500      	str	r5, [sp, #0]
 8009026:	f7ff ff7f 	bl	8008f28 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800902a:	4620      	mov	r0, r4
 800902c:	f7ff fe5a 	bl	8008ce4 <prvAddNewTaskToReadyList>
	}
 8009030:	9804      	ldr	r0, [sp, #16]
 8009032:	b006      	add	sp, #24
 8009034:	bd70      	pop	{r4, r5, r6, pc}

08009036 <xTaskCreate>:
	{
 8009036:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800903a:	4607      	mov	r7, r0
 800903c:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903e:	0090      	lsls	r0, r2, #2
	{
 8009040:	4688      	mov	r8, r1
 8009042:	4616      	mov	r6, r2
 8009044:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009046:	f000 fd73 	bl	8009b30 <pvPortMalloc>
			if( pxStack != NULL )
 800904a:	4605      	mov	r5, r0
 800904c:	b920      	cbnz	r0, 8009058 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009052:	b005      	add	sp, #20
 8009054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009058:	20a0      	movs	r0, #160	@ 0xa0
 800905a:	f000 fd69 	bl	8009b30 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800905e:	4604      	mov	r4, r0
 8009060:	b198      	cbz	r0, 800908a <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009062:	2300      	movs	r3, #0
 8009064:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009068:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 800906a:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009070:	9002      	str	r0, [sp, #8]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4632      	mov	r2, r6
 8009076:	464b      	mov	r3, r9
 8009078:	4641      	mov	r1, r8
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ff54 	bl	8008f28 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009080:	4620      	mov	r0, r4
 8009082:	f7ff fe2f 	bl	8008ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009086:	2001      	movs	r0, #1
 8009088:	e7e3      	b.n	8009052 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800908a:	4628      	mov	r0, r5
 800908c:	f000 fde2 	bl	8009c54 <vPortFree>
		if( pxNewTCB != NULL )
 8009090:	e7dd      	b.n	800904e <xTaskCreate+0x18>
	...

08009094 <vTaskStartScheduler>:
{
 8009094:	b510      	push	{r4, lr}
 8009096:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009098:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800909a:	aa07      	add	r2, sp, #28
 800909c:	a906      	add	r1, sp, #24
 800909e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090a4:	f7fa f936 	bl	8003314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	9a07      	ldr	r2, [sp, #28]
 80090b0:	4912      	ldr	r1, [pc, #72]	@ (80090fc <vTaskStartScheduler+0x68>)
 80090b2:	4813      	ldr	r0, [pc, #76]	@ (8009100 <vTaskStartScheduler+0x6c>)
 80090b4:	e9cd 4300 	strd	r4, r3, [sp]
 80090b8:	4623      	mov	r3, r4
 80090ba:	f7ff ff85 	bl	8008fc8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80090be:	b1d0      	cbz	r0, 80090f6 <vTaskStartScheduler+0x62>
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <vTaskStartScheduler+0x70>)
 80090d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009108 <vTaskStartScheduler+0x74>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	334c      	adds	r3, #76	@ 0x4c
 80090d8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80090da:	4b0c      	ldr	r3, [pc, #48]	@ (800910c <vTaskStartScheduler+0x78>)
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295
 80090e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009110 <vTaskStartScheduler+0x7c>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80090e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009114 <vTaskStartScheduler+0x80>)
 80090ea:	601c      	str	r4, [r3, #0]
}
 80090ec:	b008      	add	sp, #32
 80090ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80090f2:	f000 bc47 	b.w	8009984 <xPortStartScheduler>
}
 80090f6:	b008      	add	sp, #32
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	08011ce2 	.word	0x08011ce2
 8009100:	08008ec9 	.word	0x08008ec9
 8009104:	200035f8 	.word	0x200035f8
 8009108:	200001a4 	.word	0x200001a4
 800910c:	200034d8 	.word	0x200034d8
 8009110:	200034ec 	.word	0x200034ec
 8009114:	200034f4 	.word	0x200034f4

08009118 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009118:	4a02      	ldr	r2, [pc, #8]	@ (8009124 <vTaskSuspendAll+0xc>)
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	200034d4 	.word	0x200034d4

08009128 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009128:	4b40      	ldr	r3, [pc, #256]	@ (800922c <xTaskIncrementTick+0x104>)
 800912a:	681b      	ldr	r3, [r3, #0]
{
 800912c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009130:	2b00      	cmp	r3, #0
 8009132:	d174      	bne.n	800921e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009134:	4b3e      	ldr	r3, [pc, #248]	@ (8009230 <xTaskIncrementTick+0x108>)
 8009136:	681c      	ldr	r4, [r3, #0]
 8009138:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800913a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800913c:	b9bc      	cbnz	r4, 800916e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800913e:	4b3d      	ldr	r3, [pc, #244]	@ (8009234 <xTaskIncrementTick+0x10c>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	b142      	cbz	r2, 8009158 <xTaskIncrementTick+0x30>
 8009146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	e7fe      	b.n	8009156 <xTaskIncrementTick+0x2e>
 8009158:	4a37      	ldr	r2, [pc, #220]	@ (8009238 <xTaskIncrementTick+0x110>)
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	6810      	ldr	r0, [r2, #0]
 800915e:	6018      	str	r0, [r3, #0]
 8009160:	6011      	str	r1, [r2, #0]
 8009162:	4a36      	ldr	r2, [pc, #216]	@ (800923c <xTaskIncrementTick+0x114>)
 8009164:	6813      	ldr	r3, [r2, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	f7ff fe7d 	bl	8008e68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800916e:	4d34      	ldr	r5, [pc, #208]	@ (8009240 <xTaskIncrementTick+0x118>)
 8009170:	4e34      	ldr	r6, [pc, #208]	@ (8009244 <xTaskIncrementTick+0x11c>)
 8009172:	682b      	ldr	r3, [r5, #0]
 8009174:	4f34      	ldr	r7, [pc, #208]	@ (8009248 <xTaskIncrementTick+0x120>)
 8009176:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8009178:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800917c:	d911      	bls.n	80091a2 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009182:	2114      	movs	r1, #20
 8009184:	434a      	muls	r2, r1
 8009186:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8009188:	2a02      	cmp	r2, #2
 800918a:	bf28      	it	cs
 800918c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8009190:	4a2e      	ldr	r2, [pc, #184]	@ (800924c <xTaskIncrementTick+0x124>)
 8009192:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8009194:	2a00      	cmp	r2, #0
}
 8009196:	bf0c      	ite	eq
 8009198:	4658      	moveq	r0, fp
 800919a:	2001      	movne	r0, #1
 800919c:	b003      	add	sp, #12
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a2:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8009234 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80091a6:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8009254 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091aa:	f8da 2000 	ldr.w	r2, [sl]
 80091ae:	6812      	ldr	r2, [r2, #0]
 80091b0:	b91a      	cbnz	r2, 80091ba <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	602a      	str	r2, [r5, #0]
					break;
 80091b8:	e7e1      	b.n	800917e <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80091ba:	f8da 2000 	ldr.w	r2, [sl]
 80091be:	68d2      	ldr	r2, [r2, #12]
 80091c0:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80091c8:	428c      	cmp	r4, r1
 80091ca:	d201      	bcs.n	80091d0 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80091cc:	6029      	str	r1, [r5, #0]
						break;
 80091ce:	e7d6      	b.n	800917e <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d0:	f108 0304 	add.w	r3, r8, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	f7ff f906 	bl	80083e8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091dc:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80091e0:	b119      	cbz	r1, 80091ea <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091e2:	f108 0018 	add.w	r0, r8, #24
 80091e6:	f7ff f8ff 	bl	80083e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ea:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80091ee:	f8d9 3000 	ldr.w	r3, [r9]
 80091f2:	2201      	movs	r2, #1
 80091f4:	fa02 f100 	lsl.w	r1, r2, r0
 80091f8:	4319      	orrs	r1, r3
 80091fa:	f04f 0c14 	mov.w	ip, #20
 80091fe:	f8c9 1000 	str.w	r1, [r9]
 8009202:	fb0c 6000 	mla	r0, ip, r0, r6
 8009206:	9901      	ldr	r1, [sp, #4]
 8009208:	f7ff f8cc 	bl	80083a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800920c:	6838      	ldr	r0, [r7, #0]
 800920e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8009212:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8009214:	4291      	cmp	r1, r2
 8009216:	bf28      	it	cs
 8009218:	f04f 0b01 	movcs.w	fp, #1
 800921c:	e7c5      	b.n	80091aa <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800921e:	4a0c      	ldr	r2, [pc, #48]	@ (8009250 <xTaskIncrementTick+0x128>)
 8009220:	6813      	ldr	r3, [r2, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009226:	f04f 0b00 	mov.w	fp, #0
 800922a:	e7b1      	b.n	8009190 <xTaskIncrementTick+0x68>
 800922c:	200034d4 	.word	0x200034d4
 8009230:	200034f4 	.word	0x200034f4
 8009234:	20003540 	.word	0x20003540
 8009238:	2000353c 	.word	0x2000353c
 800923c:	200034e0 	.word	0x200034e0
 8009240:	200034d8 	.word	0x200034d8
 8009244:	2000356c 	.word	0x2000356c
 8009248:	200035f8 	.word	0x200035f8
 800924c:	200034e4 	.word	0x200034e4
 8009250:	200034e8 	.word	0x200034e8
 8009254:	200034f0 	.word	0x200034f0

08009258 <xTaskResumeAll>:
{
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800925c:	4c31      	ldr	r4, [pc, #196]	@ (8009324 <xTaskResumeAll+0xcc>)
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	b943      	cbnz	r3, 8009274 <xTaskResumeAll+0x1c>
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	e7fe      	b.n	8009272 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009274:	f000 faf6 	bl	8009864 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800927e:	6824      	ldr	r4, [r4, #0]
 8009280:	b12c      	cbz	r4, 800928e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009282:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009284:	f000 fb0e 	bl	80098a4 <vPortExitCritical>
}
 8009288:	4620      	mov	r0, r4
 800928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800928e:	4b26      	ldr	r3, [pc, #152]	@ (8009328 <xTaskResumeAll+0xd0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0f5      	beq.n	8009282 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009296:	4d25      	ldr	r5, [pc, #148]	@ (800932c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009298:	4e25      	ldr	r6, [pc, #148]	@ (8009330 <xTaskResumeAll+0xd8>)
 800929a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8009340 <xTaskResumeAll+0xe8>
 800929e:	e01f      	b.n	80092e0 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80092a0:	68eb      	ldr	r3, [r5, #12]
 80092a2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a4:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092a8:	f104 0018 	add.w	r0, r4, #24
 80092ac:	f7ff f89c 	bl	80083e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092b0:	4648      	mov	r0, r9
 80092b2:	f7ff f899 	bl	80083e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80092b8:	6831      	ldr	r1, [r6, #0]
 80092ba:	2701      	movs	r7, #1
 80092bc:	fa07 f302 	lsl.w	r3, r7, r2
 80092c0:	2014      	movs	r0, #20
 80092c2:	430b      	orrs	r3, r1
 80092c4:	fb00 8002 	mla	r0, r0, r2, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	6033      	str	r3, [r6, #0]
 80092cc:	f7ff f86a 	bl	80083a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092d0:	4b18      	ldr	r3, [pc, #96]	@ (8009334 <xTaskResumeAll+0xdc>)
 80092d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	429a      	cmp	r2, r3
 80092da:	d301      	bcc.n	80092e0 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80092dc:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <xTaskResumeAll+0xe0>)
 80092de:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1dc      	bne.n	80092a0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80092e6:	b10c      	cbz	r4, 80092ec <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80092e8:	f7ff fdbe 	bl	8008e68 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80092ec:	4d13      	ldr	r5, [pc, #76]	@ (800933c <xTaskResumeAll+0xe4>)
 80092ee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80092f0:	b144      	cbz	r4, 8009304 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80092f2:	4e11      	ldr	r6, [pc, #68]	@ (8009338 <xTaskResumeAll+0xe0>)
 80092f4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80092f6:	f7ff ff17 	bl	8009128 <xTaskIncrementTick>
 80092fa:	b100      	cbz	r0, 80092fe <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80092fc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092fe:	3c01      	subs	r4, #1
 8009300:	d1f9      	bne.n	80092f6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8009302:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009304:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <xTaskResumeAll+0xe0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d0ba      	beq.n	8009282 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800930c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009314:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009320:	2401      	movs	r4, #1
 8009322:	e7af      	b.n	8009284 <xTaskResumeAll+0x2c>
 8009324:	200034d4 	.word	0x200034d4
 8009328:	200034f8 	.word	0x200034f8
 800932c:	20003528 	.word	0x20003528
 8009330:	200034f0 	.word	0x200034f0
 8009334:	200035f8 	.word	0x200035f8
 8009338:	200034e4 	.word	0x200034e4
 800933c:	200034e8 	.word	0x200034e8
 8009340:	2000356c 	.word	0x2000356c

08009344 <vTaskDelay>:
	{
 8009344:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009346:	b950      	cbnz	r0, 800935e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009348:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800934c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009350:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	f3bf 8f6f 	isb	sy
	}
 800935c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800935e:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <vTaskDelay+0x44>)
 8009360:	6819      	ldr	r1, [r3, #0]
 8009362:	b141      	cbz	r1, 8009376 <vTaskDelay+0x32>
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	e7fe      	b.n	8009374 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009376:	f7ff fecf 	bl	8009118 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800937a:	f7ff fd31 	bl	8008de0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800937e:	f7ff ff6b 	bl	8009258 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009382:	2800      	cmp	r0, #0
 8009384:	d0e0      	beq.n	8009348 <vTaskDelay+0x4>
 8009386:	e7e9      	b.n	800935c <vTaskDelay+0x18>
 8009388:	200034d4 	.word	0x200034d4

0800938c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800938c:	4b19      	ldr	r3, [pc, #100]	@ (80093f4 <vTaskSwitchContext+0x68>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b19      	ldr	r3, [pc, #100]	@ (80093f8 <vTaskSwitchContext+0x6c>)
{
 8009392:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009394:	b112      	cbz	r2, 800939c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009396:	2201      	movs	r2, #1
 8009398:	601a      	str	r2, [r3, #0]
}
 800939a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800939c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800939e:	4b17      	ldr	r3, [pc, #92]	@ (80093fc <vTaskSwitchContext+0x70>)
 80093a0:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093a2:	fab2 f282 	clz	r2, r2
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	f1c2 021f 	rsb	r2, r2, #31
 80093ac:	2314      	movs	r3, #20
 80093ae:	4914      	ldr	r1, [pc, #80]	@ (8009400 <vTaskSwitchContext+0x74>)
 80093b0:	4353      	muls	r3, r2
 80093b2:	18c8      	adds	r0, r1, r3
 80093b4:	58cc      	ldr	r4, [r1, r3]
 80093b6:	b944      	cbnz	r4, 80093ca <vTaskSwitchContext+0x3e>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	e7fe      	b.n	80093c8 <vTaskSwitchContext+0x3c>
 80093ca:	6844      	ldr	r4, [r0, #4]
 80093cc:	3308      	adds	r3, #8
 80093ce:	6864      	ldr	r4, [r4, #4]
 80093d0:	6044      	str	r4, [r0, #4]
 80093d2:	440b      	add	r3, r1
 80093d4:	429c      	cmp	r4, r3
 80093d6:	bf04      	itt	eq
 80093d8:	6863      	ldreq	r3, [r4, #4]
 80093da:	6043      	streq	r3, [r0, #4]
 80093dc:	2314      	movs	r3, #20
 80093de:	fb03 1102 	mla	r1, r3, r2, r1
 80093e2:	684b      	ldr	r3, [r1, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <vTaskSwitchContext+0x78>)
 80093e8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a06      	ldr	r2, [pc, #24]	@ (8009408 <vTaskSwitchContext+0x7c>)
 80093ee:	334c      	adds	r3, #76	@ 0x4c
 80093f0:	6013      	str	r3, [r2, #0]
}
 80093f2:	e7d2      	b.n	800939a <vTaskSwitchContext+0xe>
 80093f4:	200034d4 	.word	0x200034d4
 80093f8:	200034e4 	.word	0x200034e4
 80093fc:	200034f0 	.word	0x200034f0
 8009400:	2000356c 	.word	0x2000356c
 8009404:	200035f8 	.word	0x200035f8
 8009408:	200001a4 	.word	0x200001a4

0800940c <vTaskPlaceOnEventList>:
{
 800940c:	b510      	push	{r4, lr}
 800940e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009410:	b940      	cbnz	r0, 8009424 <vTaskPlaceOnEventList+0x18>
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	e7fe      	b.n	8009422 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <vTaskPlaceOnEventList+0x30>)
 8009426:	6819      	ldr	r1, [r3, #0]
 8009428:	3118      	adds	r1, #24
 800942a:	f7fe ffc6 	bl	80083ba <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800942e:	4620      	mov	r0, r4
 8009430:	2101      	movs	r1, #1
}
 8009432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009436:	f7ff bcd3 	b.w	8008de0 <prvAddCurrentTaskToDelayedList>
 800943a:	bf00      	nop
 800943c:	200035f8 	.word	0x200035f8

08009440 <xTaskRemoveFromEventList>:
{
 8009440:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009442:	68c3      	ldr	r3, [r0, #12]
 8009444:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009446:	b944      	cbnz	r4, 800945a <xTaskRemoveFromEventList+0x1a>
 8009448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	e7fe      	b.n	8009458 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800945a:	f104 0518 	add.w	r5, r4, #24
 800945e:	4628      	mov	r0, r5
 8009460:	f7fe ffc2 	bl	80083e8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009464:	4b11      	ldr	r3, [pc, #68]	@ (80094ac <xTaskRemoveFromEventList+0x6c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b9e3      	cbnz	r3, 80094a4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800946a:	1d25      	adds	r5, r4, #4
 800946c:	4628      	mov	r0, r5
 800946e:	f7fe ffbb 	bl	80083e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009472:	490f      	ldr	r1, [pc, #60]	@ (80094b0 <xTaskRemoveFromEventList+0x70>)
 8009474:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009476:	6808      	ldr	r0, [r1, #0]
 8009478:	2301      	movs	r3, #1
 800947a:	4093      	lsls	r3, r2
 800947c:	4303      	orrs	r3, r0
 800947e:	600b      	str	r3, [r1, #0]
 8009480:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <xTaskRemoveFromEventList+0x74>)
 8009482:	2014      	movs	r0, #20
 8009484:	4629      	mov	r1, r5
 8009486:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800948a:	f7fe ff8b 	bl	80083a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800948e:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <xTaskRemoveFromEventList+0x78>)
 8009490:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009498:	bf83      	ittte	hi
 800949a:	4b08      	ldrhi	r3, [pc, #32]	@ (80094bc <xTaskRemoveFromEventList+0x7c>)
 800949c:	2001      	movhi	r0, #1
 800949e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80094a0:	2000      	movls	r0, #0
}
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094a4:	4806      	ldr	r0, [pc, #24]	@ (80094c0 <xTaskRemoveFromEventList+0x80>)
 80094a6:	4629      	mov	r1, r5
 80094a8:	e7ef      	b.n	800948a <xTaskRemoveFromEventList+0x4a>
 80094aa:	bf00      	nop
 80094ac:	200034d4 	.word	0x200034d4
 80094b0:	200034f0 	.word	0x200034f0
 80094b4:	2000356c 	.word	0x2000356c
 80094b8:	200035f8 	.word	0x200035f8
 80094bc:	200034e4 	.word	0x200034e4
 80094c0:	20003528 	.word	0x20003528

080094c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094c4:	4b03      	ldr	r3, [pc, #12]	@ (80094d4 <vTaskInternalSetTimeOutState+0x10>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094ca:	4b03      	ldr	r3, [pc, #12]	@ (80094d8 <vTaskInternalSetTimeOutState+0x14>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6043      	str	r3, [r0, #4]
}
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200034e0 	.word	0x200034e0
 80094d8:	200034f4 	.word	0x200034f4

080094dc <xTaskCheckForTimeOut>:
{
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80094e0:	4605      	mov	r5, r0
 80094e2:	b940      	cbnz	r0, 80094f6 <xTaskCheckForTimeOut+0x1a>
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	e7fe      	b.n	80094f4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80094f6:	b941      	cbnz	r1, 800950a <xTaskCheckForTimeOut+0x2e>
 80094f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	e7fe      	b.n	8009508 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800950a:	f000 f9ab 	bl	8009864 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800950e:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <xTaskCheckForTimeOut+0x70>)
 8009510:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	d010      	beq.n	800953a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009518:	480d      	ldr	r0, [pc, #52]	@ (8009550 <xTaskCheckForTimeOut+0x74>)
 800951a:	682e      	ldr	r6, [r5, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800951e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009520:	4286      	cmp	r6, r0
 8009522:	d001      	beq.n	8009528 <xTaskCheckForTimeOut+0x4c>
 8009524:	428a      	cmp	r2, r1
 8009526:	d90f      	bls.n	8009548 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009528:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800952a:	4283      	cmp	r3, r0
 800952c:	d90a      	bls.n	8009544 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800952e:	1a5b      	subs	r3, r3, r1
 8009530:	4413      	add	r3, r2
 8009532:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009534:	4628      	mov	r0, r5
 8009536:	f7ff ffc5 	bl	80094c4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800953a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800953c:	f000 f9b2 	bl	80098a4 <vPortExitCritical>
}
 8009540:	4620      	mov	r0, r4
 8009542:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009548:	2401      	movs	r4, #1
 800954a:	e7f7      	b.n	800953c <xTaskCheckForTimeOut+0x60>
 800954c:	200034f4 	.word	0x200034f4
 8009550:	200034e0 	.word	0x200034e0

08009554 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009554:	4b01      	ldr	r3, [pc, #4]	@ (800955c <vTaskMissedYield+0x8>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	4770      	bx	lr
 800955c:	200034e4 	.word	0x200034e4

08009560 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009560:	4b05      	ldr	r3, [pc, #20]	@ (8009578 <xTaskGetSchedulerState+0x18>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	b133      	cbz	r3, 8009574 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009566:	4b05      	ldr	r3, [pc, #20]	@ (800957c <xTaskGetSchedulerState+0x1c>)
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	fab0 f080 	clz	r0, r0
 800956e:	0940      	lsrs	r0, r0, #5
 8009570:	0040      	lsls	r0, r0, #1
 8009572:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009574:	2001      	movs	r0, #1
	}
 8009576:	4770      	bx	lr
 8009578:	200034ec 	.word	0x200034ec
 800957c:	200034d4 	.word	0x200034d4

08009580 <xTaskPriorityInherit>:
	{
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8009584:	4604      	mov	r4, r0
 8009586:	2800      	cmp	r0, #0
 8009588:	d02e      	beq.n	80095e8 <xTaskPriorityInherit+0x68>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800958a:	4d22      	ldr	r5, [pc, #136]	@ (8009614 <xTaskPriorityInherit+0x94>)
 800958c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800958e:	682a      	ldr	r2, [r5, #0]
 8009590:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009592:	4293      	cmp	r3, r2
 8009594:	d236      	bcs.n	8009604 <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009596:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009598:	4f1f      	ldr	r7, [pc, #124]	@ (8009618 <xTaskPriorityInherit+0x98>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800959a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959c:	bfa1      	itttt	ge
 800959e:	682a      	ldrge	r2, [r5, #0]
 80095a0:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 80095a2:	f1c2 0207 	rsbge	r2, r2, #7
 80095a6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095a8:	2614      	movs	r6, #20
 80095aa:	6942      	ldr	r2, [r0, #20]
 80095ac:	fb06 7303 	mla	r3, r6, r3, r7
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d115      	bne.n	80095e0 <xTaskPriorityInherit+0x60>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b4:	f100 0804 	add.w	r8, r0, #4
 80095b8:	4640      	mov	r0, r8
 80095ba:	f7fe ff15 	bl	80083e8 <uxListRemove>
 80095be:	4a17      	ldr	r2, [pc, #92]	@ (800961c <xTaskPriorityInherit+0x9c>)
 80095c0:	b1a0      	cbz	r0, 80095ec <xTaskPriorityInherit+0x6c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095c2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095c4:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80095c8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095ca:	2301      	movs	r3, #1
 80095cc:	4083      	lsls	r3, r0
 80095ce:	430b      	orrs	r3, r1
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	2314      	movs	r3, #20
 80095d4:	4641      	mov	r1, r8
 80095d6:	fb03 7000 	mla	r0, r3, r0, r7
 80095da:	f7fe fee3 	bl	80083a4 <vListInsertEnd>
 80095de:	e002      	b.n	80095e6 <xTaskPriorityInherit+0x66>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
				xReturn = pdTRUE;
 80095e6:	2001      	movs	r0, #1
	}
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80095ec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80095ee:	4346      	muls	r6, r0
 80095f0:	59bb      	ldr	r3, [r7, r6]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e5      	bne.n	80095c2 <xTaskPriorityInherit+0x42>
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	2101      	movs	r1, #1
 80095fa:	4081      	lsls	r1, r0
 80095fc:	ea23 0301 	bic.w	r3, r3, r1
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	e7de      	b.n	80095c2 <xTaskPriorityInherit+0x42>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	4298      	cmp	r0, r3
 800960c:	bf2c      	ite	cs
 800960e:	2000      	movcs	r0, #0
 8009610:	2001      	movcc	r0, #1
 8009612:	e7e9      	b.n	80095e8 <xTaskPriorityInherit+0x68>
 8009614:	200035f8 	.word	0x200035f8
 8009618:	2000356c 	.word	0x2000356c
 800961c:	200034f0 	.word	0x200034f0

08009620 <xTaskPriorityDisinherit>:
	{
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009622:	4604      	mov	r4, r0
 8009624:	b908      	cbnz	r0, 800962a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009626:	2000      	movs	r0, #0
	}
 8009628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800962a:	4b22      	ldr	r3, [pc, #136]	@ (80096b4 <xTaskPriorityDisinherit+0x94>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4283      	cmp	r3, r0
 8009630:	d008      	beq.n	8009644 <xTaskPriorityDisinherit+0x24>
 8009632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	e7fe      	b.n	8009642 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009646:	b943      	cbnz	r3, 800965a <xTaskPriorityDisinherit+0x3a>
 8009648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	e7fe      	b.n	8009658 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800965a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800965c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800965e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009660:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009662:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009664:	d0df      	beq.n	8009626 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1dd      	bne.n	8009626 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966a:	1d06      	adds	r6, r0, #4
 800966c:	4630      	mov	r0, r6
 800966e:	f7fe febb 	bl	80083e8 <uxListRemove>
 8009672:	4f11      	ldr	r7, [pc, #68]	@ (80096b8 <xTaskPriorityDisinherit+0x98>)
 8009674:	4a11      	ldr	r2, [pc, #68]	@ (80096bc <xTaskPriorityDisinherit+0x9c>)
 8009676:	b950      	cbnz	r0, 800968e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009678:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800967a:	2314      	movs	r3, #20
 800967c:	434b      	muls	r3, r1
 800967e:	58fb      	ldr	r3, [r7, r3]
 8009680:	b92b      	cbnz	r3, 800968e <xTaskPriorityDisinherit+0x6e>
 8009682:	6813      	ldr	r3, [r2, #0]
 8009684:	2501      	movs	r5, #1
 8009686:	408d      	lsls	r5, r1
 8009688:	ea23 0305 	bic.w	r3, r3, r5
 800968c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800968e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009690:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009692:	f1c3 0107 	rsb	r1, r3, #7
 8009696:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009698:	6811      	ldr	r1, [r2, #0]
 800969a:	2401      	movs	r4, #1
 800969c:	fa04 f503 	lsl.w	r5, r4, r3
 80096a0:	2014      	movs	r0, #20
 80096a2:	430d      	orrs	r5, r1
 80096a4:	fb00 7003 	mla	r0, r0, r3, r7
 80096a8:	4631      	mov	r1, r6
 80096aa:	6015      	str	r5, [r2, #0]
 80096ac:	f7fe fe7a 	bl	80083a4 <vListInsertEnd>
					xReturn = pdTRUE;
 80096b0:	4620      	mov	r0, r4
		return xReturn;
 80096b2:	e7b9      	b.n	8009628 <xTaskPriorityDisinherit+0x8>
 80096b4:	200035f8 	.word	0x200035f8
 80096b8:	2000356c 	.word	0x2000356c
 80096bc:	200034f0 	.word	0x200034f0

080096c0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80096c2:	4604      	mov	r4, r0
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d04d      	beq.n	8009764 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80096c8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80096ca:	b942      	cbnz	r2, 80096de <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80096cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	e7fe      	b.n	80096dc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80096e0:	4299      	cmp	r1, r3
 80096e2:	bf38      	it	cc
 80096e4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096e6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80096e8:	428b      	cmp	r3, r1
 80096ea:	d03b      	beq.n	8009764 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096ec:	2a01      	cmp	r2, #1
 80096ee:	d139      	bne.n	8009764 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 80096f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009768 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	4282      	cmp	r2, r0
 80096f6:	d108      	bne.n	800970a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80096f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	e7fe      	b.n	8009708 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800970a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800970c:	4e17      	ldr	r6, [pc, #92]	@ (800976c <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800970e:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009710:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009712:	f04f 0514 	mov.w	r5, #20
 8009716:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009718:	bfa8      	it	ge
 800971a:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800971e:	fb05 6303 	mla	r3, r5, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009722:	bfa8      	it	ge
 8009724:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009726:	429a      	cmp	r2, r3
 8009728:	d11c      	bne.n	8009764 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800972a:	1d07      	adds	r7, r0, #4
 800972c:	4638      	mov	r0, r7
 800972e:	f7fe fe5b 	bl	80083e8 <uxListRemove>
 8009732:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009734:	4c0e      	ldr	r4, [pc, #56]	@ (8009770 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8009736:	b940      	cbnz	r0, 800974a <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009738:	4355      	muls	r5, r2
 800973a:	5973      	ldr	r3, [r6, r5]
 800973c:	b92b      	cbnz	r3, 800974a <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	2101      	movs	r1, #1
 8009742:	4091      	lsls	r1, r2
 8009744:	ea23 0301 	bic.w	r3, r3, r1
 8009748:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800974a:	6821      	ldr	r1, [r4, #0]
 800974c:	2301      	movs	r3, #1
 800974e:	4093      	lsls	r3, r2
 8009750:	430b      	orrs	r3, r1
 8009752:	2014      	movs	r0, #20
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	4639      	mov	r1, r7
 8009758:	fb00 6002 	mla	r0, r0, r2, r6
	}
 800975c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8009760:	f7fe be20 	b.w	80083a4 <vListInsertEnd>
	}
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009766:	bf00      	nop
 8009768:	200035f8 	.word	0x200035f8
 800976c:	2000356c 	.word	0x2000356c
 8009770:	200034f0 	.word	0x200034f0

08009774 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009774:	4b04      	ldr	r3, [pc, #16]	@ (8009788 <pvTaskIncrementMutexHeldCount+0x14>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	b11a      	cbz	r2, 8009782 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
 800977e:	3201      	adds	r2, #1
 8009780:	648a      	str	r2, [r1, #72]	@ 0x48
		return pxCurrentTCB;
 8009782:	6818      	ldr	r0, [r3, #0]
	}
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	200035f8 	.word	0x200035f8

0800978c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800978c:	4808      	ldr	r0, [pc, #32]	@ (80097b0 <prvPortStartFirstTask+0x24>)
 800978e:	6800      	ldr	r0, [r0, #0]
 8009790:	6800      	ldr	r0, [r0, #0]
 8009792:	f380 8808 	msr	MSP, r0
 8009796:	f04f 0000 	mov.w	r0, #0
 800979a:	f380 8814 	msr	CONTROL, r0
 800979e:	b662      	cpsie	i
 80097a0:	b661      	cpsie	f
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	df00      	svc	0
 80097ac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ae:	0000      	.short	0x0000
 80097b0:	e000ed08 	.word	0xe000ed08

080097b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80097c4 <vPortEnableVFP+0x10>
 80097b8:	6801      	ldr	r1, [r0, #0]
 80097ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80097be:	6001      	str	r1, [r0, #0]
 80097c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097c2:	0000      	.short	0x0000
 80097c4:	e000ed88 	.word	0xe000ed88

080097c8 <prvTaskExitError>:
{
 80097c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <prvTaskExitError+0x3c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3301      	adds	r3, #1
 80097d4:	d008      	beq.n	80097e8 <prvTaskExitError+0x20>
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	e7fe      	b.n	80097e6 <prvTaskExitError+0x1e>
 80097e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0fc      	beq.n	80097f8 <prvTaskExitError+0x30>
}
 80097fe:	b002      	add	sp, #8
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000020 	.word	0x20000020

08009808 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009808:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800980c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <pxPortInitialiseStack+0x28>)
 8009812:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009816:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800981a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800981e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009822:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009826:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800982a:	3844      	subs	r0, #68	@ 0x44
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	080097c9 	.word	0x080097c9
	...

08009840 <SVC_Handler>:
	__asm volatile (
 8009840:	4b07      	ldr	r3, [pc, #28]	@ (8009860 <pxCurrentTCBConst2>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	f380 8809 	msr	PSP, r0
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8811 	msr	BASEPRI, r0
 800985a:	4770      	bx	lr
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst2>:
 8009860:	200035f8 	.word	0x200035f8

08009864 <vPortEnterCritical>:
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009874:	4a0a      	ldr	r2, [pc, #40]	@ (80098a0 <vPortEnterCritical+0x3c>)
 8009876:	6813      	ldr	r3, [r2, #0]
 8009878:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800987a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800987c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800987e:	d10e      	bne.n	800989e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009880:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009884:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009888:	b2db      	uxtb	r3, r3
 800988a:	b143      	cbz	r3, 800989e <vPortEnterCritical+0x3a>
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	e7fe      	b.n	800989c <vPortEnterCritical+0x38>
}
 800989e:	4770      	bx	lr
 80098a0:	20000020 	.word	0x20000020

080098a4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80098a4:	4a08      	ldr	r2, [pc, #32]	@ (80098c8 <vPortExitCritical+0x24>)
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	b943      	cbnz	r3, 80098bc <vPortExitCritical+0x18>
 80098aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	e7fe      	b.n	80098ba <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80098bc:	3b01      	subs	r3, #1
 80098be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098c0:	b90b      	cbnz	r3, 80098c6 <vPortExitCritical+0x22>
	__asm volatile
 80098c2:	f383 8811 	msr	BASEPRI, r3
}
 80098c6:	4770      	bx	lr
 80098c8:	20000020 	.word	0x20000020
 80098cc:	00000000 	.word	0x00000000

080098d0 <PendSV_Handler>:
	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	@ (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80098f4:	f380 8811 	msr	BASEPRI, r0
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f7ff fd44 	bl	800938c <vTaskSwitchContext>
 8009904:	f04f 0000 	mov.w	r0, #0
 8009908:	f380 8811 	msr	BASEPRI, r0
 800990c:	bc09      	pop	{r0, r3}
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	6808      	ldr	r0, [r1, #0]
 8009912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009916:	f01e 0f10 	tst.w	lr, #16
 800991a:	bf08      	it	eq
 800991c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009920:	f380 8809 	msr	PSP, r0
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst>:
 8009930:	200035f8 	.word	0x200035f8

08009934 <SysTick_Handler>:
{
 8009934:	b508      	push	{r3, lr}
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009946:	f7ff fbef 	bl	8009128 <xTaskIncrementTick>
 800994a:	b128      	cbz	r0, 8009958 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800994c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009954:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009958:	2300      	movs	r3, #0
 800995a:	f383 8811 	msr	BASEPRI, r3
}
 800995e:	bd08      	pop	{r3, pc}

08009960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009960:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009964:	2300      	movs	r3, #0
 8009966:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009968:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800996a:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <vPortSetupTimerInterrupt+0x20>)
 800996c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	fbb3 f3f1 	udiv	r3, r3, r1
 8009976:	3b01      	subs	r3, #1
 8009978:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800997a:	2307      	movs	r3, #7
 800997c:	6113      	str	r3, [r2, #16]
}
 800997e:	4770      	bx	lr
 8009980:	20000014 	.word	0x20000014

08009984 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009984:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009988:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800998a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800998e:	4a38      	ldr	r2, [pc, #224]	@ (8009a70 <xPortStartScheduler+0xec>)
 8009990:	4291      	cmp	r1, r2
 8009992:	d108      	bne.n	80099a6 <xPortStartScheduler+0x22>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	e7fe      	b.n	80099a4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80099aa:	4b32      	ldr	r3, [pc, #200]	@ (8009a74 <xPortStartScheduler+0xf0>)
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d108      	bne.n	80099c2 <xPortStartScheduler+0x3e>
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	e7fe      	b.n	80099c0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009a78 <xPortStartScheduler+0xf4>)
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099ca:	22ff      	movs	r2, #255	@ 0xff
 80099cc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099ce:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099d0:	4a2a      	ldr	r2, [pc, #168]	@ (8009a7c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80099dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099e0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099e2:	4a27      	ldr	r2, [pc, #156]	@ (8009a80 <xPortStartScheduler+0xfc>)
 80099e4:	2307      	movs	r3, #7
 80099e6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80099ec:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ee:	0609      	lsls	r1, r1, #24
 80099f0:	d40a      	bmi.n	8009a08 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d011      	beq.n	8009a1a <xPortStartScheduler+0x96>
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	e7fe      	b.n	8009a06 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f88d 3003 	strb.w	r3, [sp, #3]
 8009a18:	e7e6      	b.n	80099e8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009a1e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	4a15      	ldr	r2, [pc, #84]	@ (8009a78 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a24:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a2c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a34:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a38:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009a3c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a40:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009a44:	f7ff ff8c 	bl	8009960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009a48:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <xPortStartScheduler+0x100>)
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009a4e:	f7ff feb1 	bl	80097b4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a52:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009a56:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a5a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009a5e:	f7ff fe95 	bl	800978c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009a62:	f7ff fc93 	bl	800938c <vTaskSwitchContext>
	prvTaskExitError();
 8009a66:	f7ff feaf 	bl	80097c8 <prvTaskExitError>
}
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	b003      	add	sp, #12
 8009a6e:	bd30      	pop	{r4, r5, pc}
 8009a70:	410fc271 	.word	0x410fc271
 8009a74:	410fc270 	.word	0x410fc270
 8009a78:	e000e400 	.word	0xe000e400
 8009a7c:	20003600 	.word	0x20003600
 8009a80:	200035fc 	.word	0x200035fc
 8009a84:	20000020 	.word	0x20000020

08009a88 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a88:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a8c:	2b0f      	cmp	r3, #15
 8009a8e:	d90e      	bls.n	8009aae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a90:	4a11      	ldr	r2, [pc, #68]	@ (8009ad8 <vPortValidateInterruptPriority+0x50>)
 8009a92:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a94:	4a11      	ldr	r2, [pc, #68]	@ (8009adc <vPortValidateInterruptPriority+0x54>)
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d908      	bls.n	8009aae <vPortValidateInterruptPriority+0x26>
 8009a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	e7fe      	b.n	8009aac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009aae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8009ae0 <vPortValidateInterruptPriority+0x58>)
 8009ab4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d908      	bls.n	8009ad4 <vPortValidateInterruptPriority+0x4c>
 8009ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	e7fe      	b.n	8009ad2 <vPortValidateInterruptPriority+0x4a>
	}
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	e000e3f0 	.word	0xe000e3f0
 8009adc:	20003600 	.word	0x20003600
 8009ae0:	200035fc 	.word	0x200035fc

08009ae4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ae4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ae6:	4b10      	ldr	r3, [pc, #64]	@ (8009b28 <prvInsertBlockIntoFreeList+0x44>)
 8009ae8:	461a      	mov	r2, r3
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4283      	cmp	r3, r0
 8009aee:	d3fb      	bcc.n	8009ae8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009af0:	6854      	ldr	r4, [r2, #4]
 8009af2:	1911      	adds	r1, r2, r4
 8009af4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009af6:	bf01      	itttt	eq
 8009af8:	6841      	ldreq	r1, [r0, #4]
 8009afa:	4610      	moveq	r0, r2
 8009afc:	1909      	addeq	r1, r1, r4
 8009afe:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b00:	6844      	ldr	r4, [r0, #4]
 8009b02:	1901      	adds	r1, r0, r4
 8009b04:	428b      	cmp	r3, r1
 8009b06:	d10c      	bne.n	8009b22 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b08:	4908      	ldr	r1, [pc, #32]	@ (8009b2c <prvInsertBlockIntoFreeList+0x48>)
 8009b0a:	6809      	ldr	r1, [r1, #0]
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	d003      	beq.n	8009b18 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b10:	6859      	ldr	r1, [r3, #4]
 8009b12:	4421      	add	r1, r4
 8009b14:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b16:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b18:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b1a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b1c:	bf18      	it	ne
 8009b1e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b20:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b22:	4619      	mov	r1, r3
 8009b24:	e7f8      	b.n	8009b18 <prvInsertBlockIntoFreeList+0x34>
 8009b26:	bf00      	nop
 8009b28:	20003614 	.word	0x20003614
 8009b2c:	20003610 	.word	0x20003610

08009b30 <pvPortMalloc>:
{
 8009b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009b36:	f7ff faef 	bl	8009118 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009b3a:	493f      	ldr	r1, [pc, #252]	@ (8009c38 <pvPortMalloc+0x108>)
 8009b3c:	4d3f      	ldr	r5, [pc, #252]	@ (8009c3c <pvPortMalloc+0x10c>)
 8009b3e:	680b      	ldr	r3, [r1, #0]
 8009b40:	b9fb      	cbnz	r3, 8009b82 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8009b42:	4a3f      	ldr	r2, [pc, #252]	@ (8009c40 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b44:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b46:	bf1c      	itt	ne
 8009b48:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b4a:	4b3e      	ldrne	r3, [pc, #248]	@ (8009c44 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b4c:	4e3e      	ldr	r6, [pc, #248]	@ (8009c48 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b4e:	bf1a      	itte	ne
 8009b50:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b54:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b56:	f644 6320 	movweq	r3, #20000	@ 0x4e20
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b5a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009b5c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b5e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009b62:	2000      	movs	r0, #0
 8009b64:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b66:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009b68:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b6c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b6e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009b72:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b74:	4b35      	ldr	r3, [pc, #212]	@ (8009c4c <pvPortMalloc+0x11c>)
 8009b76:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b78:	4b35      	ldr	r3, [pc, #212]	@ (8009c50 <pvPortMalloc+0x120>)
 8009b7a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b80:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b82:	682e      	ldr	r6, [r5, #0]
 8009b84:	4226      	tst	r6, r4
 8009b86:	d152      	bne.n	8009c2e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8009b88:	2c00      	cmp	r4, #0
 8009b8a:	d043      	beq.n	8009c14 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8009b8c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b90:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b92:	bf1c      	itt	ne
 8009b94:	f023 0307 	bicne.w	r3, r3, #7
 8009b98:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d047      	beq.n	8009c2e <pvPortMalloc+0xfe>
 8009b9e:	4f2c      	ldr	r7, [pc, #176]	@ (8009c50 <pvPortMalloc+0x120>)
 8009ba0:	683c      	ldr	r4, [r7, #0]
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d343      	bcc.n	8009c2e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8009ba6:	4a28      	ldr	r2, [pc, #160]	@ (8009c48 <pvPortMalloc+0x118>)
 8009ba8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009baa:	6868      	ldr	r0, [r5, #4]
 8009bac:	4298      	cmp	r0, r3
 8009bae:	d204      	bcs.n	8009bba <pvPortMalloc+0x8a>
 8009bb0:	f8d5 c000 	ldr.w	ip, [r5]
 8009bb4:	f1bc 0f00 	cmp.w	ip, #0
 8009bb8:	d115      	bne.n	8009be6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8009bba:	6809      	ldr	r1, [r1, #0]
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d036      	beq.n	8009c2e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bc0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bc2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bc6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bc8:	1ac2      	subs	r2, r0, r3
 8009bca:	2a10      	cmp	r2, #16
 8009bcc:	d912      	bls.n	8009bf4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd0:	0741      	lsls	r1, r0, #29
 8009bd2:	d00b      	beq.n	8009bec <pvPortMalloc+0xbc>
 8009bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	e7fe      	b.n	8009be4 <pvPortMalloc+0xb4>
 8009be6:	462a      	mov	r2, r5
 8009be8:	4665      	mov	r5, ip
 8009bea:	e7de      	b.n	8009baa <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bec:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bee:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bf0:	f7ff ff78 	bl	8009ae4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bf4:	4915      	ldr	r1, [pc, #84]	@ (8009c4c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bf6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bf8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bfa:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bfc:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bfe:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8009c02:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c06:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c08:	bf38      	it	cc
 8009c0a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c0c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c0e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009c12:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009c14:	f7ff fb20 	bl	8009258 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c18:	0763      	lsls	r3, r4, #29
 8009c1a:	d00a      	beq.n	8009c32 <pvPortMalloc+0x102>
 8009c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	e7fe      	b.n	8009c2c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8009c2e:	2400      	movs	r4, #0
 8009c30:	e7f0      	b.n	8009c14 <pvPortMalloc+0xe4>
}
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	20003610 	.word	0x20003610
 8009c3c:	20003604 	.word	0x20003604
 8009c40:	2000361c 	.word	0x2000361c
 8009c44:	2000843c 	.word	0x2000843c
 8009c48:	20003614 	.word	0x20003614
 8009c4c:	20003608 	.word	0x20003608
 8009c50:	2000360c 	.word	0x2000360c

08009c54 <vPortFree>:
{
 8009c54:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009c56:	4604      	mov	r4, r0
 8009c58:	b370      	cbz	r0, 8009cb8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c5a:	4a18      	ldr	r2, [pc, #96]	@ (8009cbc <vPortFree+0x68>)
 8009c5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	4213      	tst	r3, r2
 8009c64:	d108      	bne.n	8009c78 <vPortFree+0x24>
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	e7fe      	b.n	8009c76 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c78:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009c7c:	b141      	cbz	r1, 8009c90 <vPortFree+0x3c>
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	e7fe      	b.n	8009c8e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c90:	ea23 0302 	bic.w	r3, r3, r2
 8009c94:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009c98:	f7ff fa3e 	bl	8009118 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c9c:	4a08      	ldr	r2, [pc, #32]	@ (8009cc0 <vPortFree+0x6c>)
 8009c9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009ca2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ca4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ca8:	440b      	add	r3, r1
 8009caa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cac:	f7ff ff1a 	bl	8009ae4 <prvInsertBlockIntoFreeList>
}
 8009cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009cb4:	f7ff bad0 	b.w	8009258 <xTaskResumeAll>
}
 8009cb8:	bd10      	pop	{r4, pc}
 8009cba:	bf00      	nop
 8009cbc:	20003604 	.word	0x20003604
 8009cc0:	2000360c 	.word	0x2000360c

08009cc4 <atof>:
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f000 becd 	b.w	800aa64 <strtod>

08009cca <atoi>:
 8009cca:	220a      	movs	r2, #10
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f000 bf51 	b.w	800ab74 <strtol>
	...

08009cd4 <malloc>:
 8009cd4:	4b02      	ldr	r3, [pc, #8]	@ (8009ce0 <malloc+0xc>)
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f000 b82d 	b.w	8009d38 <_malloc_r>
 8009cde:	bf00      	nop
 8009ce0:	200001a4 	.word	0x200001a4

08009ce4 <free>:
 8009ce4:	4b02      	ldr	r3, [pc, #8]	@ (8009cf0 <free+0xc>)
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	f003 bd69 	b.w	800d7c0 <_free_r>
 8009cee:	bf00      	nop
 8009cf0:	200001a4 	.word	0x200001a4

08009cf4 <sbrk_aligned>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8009d34 <sbrk_aligned+0x40>)
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6831      	ldr	r1, [r6, #0]
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b911      	cbnz	r1, 8009d06 <sbrk_aligned+0x12>
 8009d00:	f002 fe96 	bl	800ca30 <_sbrk_r>
 8009d04:	6030      	str	r0, [r6, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f002 fe91 	bl	800ca30 <_sbrk_r>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d103      	bne.n	8009d1a <sbrk_aligned+0x26>
 8009d12:	f04f 34ff 	mov.w	r4, #4294967295
 8009d16:	4620      	mov	r0, r4
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	1cc4      	adds	r4, r0, #3
 8009d1c:	f024 0403 	bic.w	r4, r4, #3
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d0f8      	beq.n	8009d16 <sbrk_aligned+0x22>
 8009d24:	1a21      	subs	r1, r4, r0
 8009d26:	4628      	mov	r0, r5
 8009d28:	f002 fe82 	bl	800ca30 <_sbrk_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1f2      	bne.n	8009d16 <sbrk_aligned+0x22>
 8009d30:	e7ef      	b.n	8009d12 <sbrk_aligned+0x1e>
 8009d32:	bf00      	nop
 8009d34:	2000843c 	.word	0x2000843c

08009d38 <_malloc_r>:
 8009d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	1ccd      	adds	r5, r1, #3
 8009d3e:	f025 0503 	bic.w	r5, r5, #3
 8009d42:	3508      	adds	r5, #8
 8009d44:	2d0c      	cmp	r5, #12
 8009d46:	bf38      	it	cc
 8009d48:	250c      	movcc	r5, #12
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	db01      	blt.n	8009d54 <_malloc_r+0x1c>
 8009d50:	42a9      	cmp	r1, r5
 8009d52:	d904      	bls.n	8009d5e <_malloc_r+0x26>
 8009d54:	230c      	movs	r3, #12
 8009d56:	6033      	str	r3, [r6, #0]
 8009d58:	2000      	movs	r0, #0
 8009d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e34 <_malloc_r+0xfc>
 8009d62:	f000 f869 	bl	8009e38 <__malloc_lock>
 8009d66:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6a:	461c      	mov	r4, r3
 8009d6c:	bb44      	cbnz	r4, 8009dc0 <_malloc_r+0x88>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff ffbf 	bl	8009cf4 <sbrk_aligned>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	4604      	mov	r4, r0
 8009d7a:	d158      	bne.n	8009e2e <_malloc_r+0xf6>
 8009d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d80:	4627      	mov	r7, r4
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	d143      	bne.n	8009e0e <_malloc_r+0xd6>
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d04b      	beq.n	8009e22 <_malloc_r+0xea>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	4630      	mov	r0, r6
 8009d90:	eb04 0903 	add.w	r9, r4, r3
 8009d94:	f002 fe4c 	bl	800ca30 <_sbrk_r>
 8009d98:	4581      	cmp	r9, r0
 8009d9a:	d142      	bne.n	8009e22 <_malloc_r+0xea>
 8009d9c:	6821      	ldr	r1, [r4, #0]
 8009d9e:	1a6d      	subs	r5, r5, r1
 8009da0:	4629      	mov	r1, r5
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffa6 	bl	8009cf4 <sbrk_aligned>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d03a      	beq.n	8009e22 <_malloc_r+0xea>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	442b      	add	r3, r5
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	f8d8 3000 	ldr.w	r3, [r8]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	bb62      	cbnz	r2, 8009e14 <_malloc_r+0xdc>
 8009dba:	f8c8 7000 	str.w	r7, [r8]
 8009dbe:	e00f      	b.n	8009de0 <_malloc_r+0xa8>
 8009dc0:	6822      	ldr	r2, [r4, #0]
 8009dc2:	1b52      	subs	r2, r2, r5
 8009dc4:	d420      	bmi.n	8009e08 <_malloc_r+0xd0>
 8009dc6:	2a0b      	cmp	r2, #11
 8009dc8:	d917      	bls.n	8009dfa <_malloc_r+0xc2>
 8009dca:	1961      	adds	r1, r4, r5
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	6025      	str	r5, [r4, #0]
 8009dd0:	bf18      	it	ne
 8009dd2:	6059      	strne	r1, [r3, #4]
 8009dd4:	6863      	ldr	r3, [r4, #4]
 8009dd6:	bf08      	it	eq
 8009dd8:	f8c8 1000 	streq.w	r1, [r8]
 8009ddc:	5162      	str	r2, [r4, r5]
 8009dde:	604b      	str	r3, [r1, #4]
 8009de0:	4630      	mov	r0, r6
 8009de2:	f000 f82f 	bl	8009e44 <__malloc_unlock>
 8009de6:	f104 000b 	add.w	r0, r4, #11
 8009dea:	1d23      	adds	r3, r4, #4
 8009dec:	f020 0007 	bic.w	r0, r0, #7
 8009df0:	1ac2      	subs	r2, r0, r3
 8009df2:	bf1c      	itt	ne
 8009df4:	1a1b      	subne	r3, r3, r0
 8009df6:	50a3      	strne	r3, [r4, r2]
 8009df8:	e7af      	b.n	8009d5a <_malloc_r+0x22>
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	bf0c      	ite	eq
 8009e00:	f8c8 2000 	streq.w	r2, [r8]
 8009e04:	605a      	strne	r2, [r3, #4]
 8009e06:	e7eb      	b.n	8009de0 <_malloc_r+0xa8>
 8009e08:	4623      	mov	r3, r4
 8009e0a:	6864      	ldr	r4, [r4, #4]
 8009e0c:	e7ae      	b.n	8009d6c <_malloc_r+0x34>
 8009e0e:	463c      	mov	r4, r7
 8009e10:	687f      	ldr	r7, [r7, #4]
 8009e12:	e7b6      	b.n	8009d82 <_malloc_r+0x4a>
 8009e14:	461a      	mov	r2, r3
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d1fb      	bne.n	8009e14 <_malloc_r+0xdc>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6053      	str	r3, [r2, #4]
 8009e20:	e7de      	b.n	8009de0 <_malloc_r+0xa8>
 8009e22:	230c      	movs	r3, #12
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 f80c 	bl	8009e44 <__malloc_unlock>
 8009e2c:	e794      	b.n	8009d58 <_malloc_r+0x20>
 8009e2e:	6005      	str	r5, [r0, #0]
 8009e30:	e7d6      	b.n	8009de0 <_malloc_r+0xa8>
 8009e32:	bf00      	nop
 8009e34:	20008440 	.word	0x20008440

08009e38 <__malloc_lock>:
 8009e38:	4801      	ldr	r0, [pc, #4]	@ (8009e40 <__malloc_lock+0x8>)
 8009e3a:	f7fb b85c 	b.w	8004ef6 <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	200034b8 	.word	0x200034b8

08009e44 <__malloc_unlock>:
 8009e44:	4801      	ldr	r0, [pc, #4]	@ (8009e4c <__malloc_unlock+0x8>)
 8009e46:	f7fb b862 	b.w	8004f0e <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	200034b8 	.word	0x200034b8

08009e50 <sulp>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4604      	mov	r4, r0
 8009e54:	460d      	mov	r5, r1
 8009e56:	ec45 4b10 	vmov	d0, r4, r5
 8009e5a:	4616      	mov	r6, r2
 8009e5c:	f004 fbfe 	bl	800e65c <__ulp>
 8009e60:	ec51 0b10 	vmov	r0, r1, d0
 8009e64:	b17e      	cbz	r6, 8009e86 <sulp+0x36>
 8009e66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dd09      	ble.n	8009e86 <sulp+0x36>
 8009e72:	051b      	lsls	r3, r3, #20
 8009e74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e78:	2400      	movs	r4, #0
 8009e7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e7e:	4622      	mov	r2, r4
 8009e80:	462b      	mov	r3, r5
 8009e82:	f7f6 fbc9 	bl	8000618 <__aeabi_dmul>
 8009e86:	ec41 0b10 	vmov	d0, r0, r1
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <_strtod_l>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	b09f      	sub	sp, #124	@ 0x7c
 8009e96:	460c      	mov	r4, r1
 8009e98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e9e:	9005      	str	r0, [sp, #20]
 8009ea0:	f04f 0a00 	mov.w	sl, #0
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	460a      	mov	r2, r1
 8009eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eac:	7811      	ldrb	r1, [r2, #0]
 8009eae:	292b      	cmp	r1, #43	@ 0x2b
 8009eb0:	d04a      	beq.n	8009f48 <_strtod_l+0xb8>
 8009eb2:	d838      	bhi.n	8009f26 <_strtod_l+0x96>
 8009eb4:	290d      	cmp	r1, #13
 8009eb6:	d832      	bhi.n	8009f1e <_strtod_l+0x8e>
 8009eb8:	2908      	cmp	r1, #8
 8009eba:	d832      	bhi.n	8009f22 <_strtod_l+0x92>
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d03b      	beq.n	8009f38 <_strtod_l+0xa8>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ec4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ec6:	782a      	ldrb	r2, [r5, #0]
 8009ec8:	2a30      	cmp	r2, #48	@ 0x30
 8009eca:	f040 80b3 	bne.w	800a034 <_strtod_l+0x1a4>
 8009ece:	786a      	ldrb	r2, [r5, #1]
 8009ed0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ed4:	2a58      	cmp	r2, #88	@ 0x58
 8009ed6:	d16e      	bne.n	8009fb6 <_strtod_l+0x126>
 8009ed8:	9302      	str	r3, [sp, #8]
 8009eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009edc:	9301      	str	r3, [sp, #4]
 8009ede:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	4a8e      	ldr	r2, [pc, #568]	@ (800a11c <_strtod_l+0x28c>)
 8009ee4:	9805      	ldr	r0, [sp, #20]
 8009ee6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ee8:	a919      	add	r1, sp, #100	@ 0x64
 8009eea:	f003 fd1b 	bl	800d924 <__gethex>
 8009eee:	f010 060f 	ands.w	r6, r0, #15
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	d005      	beq.n	8009f02 <_strtod_l+0x72>
 8009ef6:	2e06      	cmp	r6, #6
 8009ef8:	d128      	bne.n	8009f4c <_strtod_l+0xbc>
 8009efa:	3501      	adds	r5, #1
 8009efc:	2300      	movs	r3, #0
 8009efe:	9519      	str	r5, [sp, #100]	@ 0x64
 8009f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 858e 	bne.w	800aa26 <_strtod_l+0xb96>
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f0c:	b1cb      	cbz	r3, 8009f42 <_strtod_l+0xb2>
 8009f0e:	4652      	mov	r2, sl
 8009f10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009f14:	ec43 2b10 	vmov	d0, r2, r3
 8009f18:	b01f      	add	sp, #124	@ 0x7c
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	2920      	cmp	r1, #32
 8009f20:	d1ce      	bne.n	8009ec0 <_strtod_l+0x30>
 8009f22:	3201      	adds	r2, #1
 8009f24:	e7c1      	b.n	8009eaa <_strtod_l+0x1a>
 8009f26:	292d      	cmp	r1, #45	@ 0x2d
 8009f28:	d1ca      	bne.n	8009ec0 <_strtod_l+0x30>
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f2e:	1c51      	adds	r1, r2, #1
 8009f30:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f32:	7852      	ldrb	r2, [r2, #1]
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	d1c5      	bne.n	8009ec4 <_strtod_l+0x34>
 8009f38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f040 8570 	bne.w	800aa22 <_strtod_l+0xb92>
 8009f42:	4652      	mov	r2, sl
 8009f44:	465b      	mov	r3, fp
 8009f46:	e7e5      	b.n	8009f14 <_strtod_l+0x84>
 8009f48:	2100      	movs	r1, #0
 8009f4a:	e7ef      	b.n	8009f2c <_strtod_l+0x9c>
 8009f4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f4e:	b13a      	cbz	r2, 8009f60 <_strtod_l+0xd0>
 8009f50:	2135      	movs	r1, #53	@ 0x35
 8009f52:	a81c      	add	r0, sp, #112	@ 0x70
 8009f54:	f004 fc7c 	bl	800e850 <__copybits>
 8009f58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f5a:	9805      	ldr	r0, [sp, #20]
 8009f5c:	f004 f84a 	bl	800dff4 <_Bfree>
 8009f60:	3e01      	subs	r6, #1
 8009f62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f64:	2e04      	cmp	r6, #4
 8009f66:	d806      	bhi.n	8009f76 <_strtod_l+0xe6>
 8009f68:	e8df f006 	tbb	[pc, r6]
 8009f6c:	201d0314 	.word	0x201d0314
 8009f70:	14          	.byte	0x14
 8009f71:	00          	.byte	0x00
 8009f72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f76:	05e1      	lsls	r1, r4, #23
 8009f78:	bf48      	it	mi
 8009f7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f82:	0d1b      	lsrs	r3, r3, #20
 8009f84:	051b      	lsls	r3, r3, #20
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1bb      	bne.n	8009f02 <_strtod_l+0x72>
 8009f8a:	f002 fd73 	bl	800ca74 <__errno>
 8009f8e:	2322      	movs	r3, #34	@ 0x22
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7b6      	b.n	8009f02 <_strtod_l+0x72>
 8009f94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009fa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009fa4:	e7e7      	b.n	8009f76 <_strtod_l+0xe6>
 8009fa6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a124 <_strtod_l+0x294>
 8009faa:	e7e4      	b.n	8009f76 <_strtod_l+0xe6>
 8009fac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009fb0:	f04f 3aff 	mov.w	sl, #4294967295
 8009fb4:	e7df      	b.n	8009f76 <_strtod_l+0xe6>
 8009fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b30      	cmp	r3, #48	@ 0x30
 8009fc0:	d0f9      	beq.n	8009fb6 <_strtod_l+0x126>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d09d      	beq.n	8009f02 <_strtod_l+0x72>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fd4:	461f      	mov	r7, r3
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009fda:	7805      	ldrb	r5, [r0, #0]
 8009fdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009fe0:	b2d9      	uxtb	r1, r3
 8009fe2:	2909      	cmp	r1, #9
 8009fe4:	d928      	bls.n	800a038 <_strtod_l+0x1a8>
 8009fe6:	494e      	ldr	r1, [pc, #312]	@ (800a120 <_strtod_l+0x290>)
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f001 fee0 	bl	800bdae <strncmp>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d032      	beq.n	800a058 <_strtod_l+0x1c8>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	462a      	mov	r2, r5
 8009ff6:	4681      	mov	r9, r0
 8009ff8:	463d      	mov	r5, r7
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2a65      	cmp	r2, #101	@ 0x65
 8009ffe:	d001      	beq.n	800a004 <_strtod_l+0x174>
 800a000:	2a45      	cmp	r2, #69	@ 0x45
 800a002:	d114      	bne.n	800a02e <_strtod_l+0x19e>
 800a004:	b91d      	cbnz	r5, 800a00e <_strtod_l+0x17e>
 800a006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a008:	4302      	orrs	r2, r0
 800a00a:	d095      	beq.n	8009f38 <_strtod_l+0xa8>
 800a00c:	2500      	movs	r5, #0
 800a00e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a010:	1c62      	adds	r2, r4, #1
 800a012:	9219      	str	r2, [sp, #100]	@ 0x64
 800a014:	7862      	ldrb	r2, [r4, #1]
 800a016:	2a2b      	cmp	r2, #43	@ 0x2b
 800a018:	d077      	beq.n	800a10a <_strtod_l+0x27a>
 800a01a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a01c:	d07b      	beq.n	800a116 <_strtod_l+0x286>
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a026:	2909      	cmp	r1, #9
 800a028:	f240 8082 	bls.w	800a130 <_strtod_l+0x2a0>
 800a02c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	e0a2      	b.n	800a17a <_strtod_l+0x2ea>
 800a034:	2300      	movs	r3, #0
 800a036:	e7c7      	b.n	8009fc8 <_strtod_l+0x138>
 800a038:	2f08      	cmp	r7, #8
 800a03a:	bfd5      	itete	le
 800a03c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a03e:	9908      	ldrgt	r1, [sp, #32]
 800a040:	fb02 3301 	mlale	r3, r2, r1, r3
 800a044:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a048:	f100 0001 	add.w	r0, r0, #1
 800a04c:	bfd4      	ite	le
 800a04e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a050:	9308      	strgt	r3, [sp, #32]
 800a052:	3701      	adds	r7, #1
 800a054:	9019      	str	r0, [sp, #100]	@ 0x64
 800a056:	e7bf      	b.n	8009fd8 <_strtod_l+0x148>
 800a058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a05e:	785a      	ldrb	r2, [r3, #1]
 800a060:	b37f      	cbz	r7, 800a0c2 <_strtod_l+0x232>
 800a062:	4681      	mov	r9, r0
 800a064:	463d      	mov	r5, r7
 800a066:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a06a:	2b09      	cmp	r3, #9
 800a06c:	d912      	bls.n	800a094 <_strtod_l+0x204>
 800a06e:	2301      	movs	r3, #1
 800a070:	e7c4      	b.n	8009ffc <_strtod_l+0x16c>
 800a072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	9219      	str	r2, [sp, #100]	@ 0x64
 800a078:	785a      	ldrb	r2, [r3, #1]
 800a07a:	3001      	adds	r0, #1
 800a07c:	2a30      	cmp	r2, #48	@ 0x30
 800a07e:	d0f8      	beq.n	800a072 <_strtod_l+0x1e2>
 800a080:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a084:	2b08      	cmp	r3, #8
 800a086:	f200 84d3 	bhi.w	800aa30 <_strtod_l+0xba0>
 800a08a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a08c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a08e:	4681      	mov	r9, r0
 800a090:	2000      	movs	r0, #0
 800a092:	4605      	mov	r5, r0
 800a094:	3a30      	subs	r2, #48	@ 0x30
 800a096:	f100 0301 	add.w	r3, r0, #1
 800a09a:	d02a      	beq.n	800a0f2 <_strtod_l+0x262>
 800a09c:	4499      	add	r9, r3
 800a09e:	eb00 0c05 	add.w	ip, r0, r5
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	210a      	movs	r1, #10
 800a0a6:	4563      	cmp	r3, ip
 800a0a8:	d10d      	bne.n	800a0c6 <_strtod_l+0x236>
 800a0aa:	1c69      	adds	r1, r5, #1
 800a0ac:	4401      	add	r1, r0
 800a0ae:	4428      	add	r0, r5
 800a0b0:	2808      	cmp	r0, #8
 800a0b2:	dc16      	bgt.n	800a0e2 <_strtod_l+0x252>
 800a0b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a0b6:	230a      	movs	r3, #10
 800a0b8:	fb03 2300 	mla	r3, r3, r0, r2
 800a0bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e018      	b.n	800a0f4 <_strtod_l+0x264>
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	e7da      	b.n	800a07c <_strtod_l+0x1ec>
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	f103 0301 	add.w	r3, r3, #1
 800a0cc:	dc03      	bgt.n	800a0d6 <_strtod_l+0x246>
 800a0ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a0d0:	434e      	muls	r6, r1
 800a0d2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a0d4:	e7e7      	b.n	800a0a6 <_strtod_l+0x216>
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	bfde      	ittt	le
 800a0da:	9e08      	ldrle	r6, [sp, #32]
 800a0dc:	434e      	mulle	r6, r1
 800a0de:	9608      	strle	r6, [sp, #32]
 800a0e0:	e7e1      	b.n	800a0a6 <_strtod_l+0x216>
 800a0e2:	280f      	cmp	r0, #15
 800a0e4:	dceb      	bgt.n	800a0be <_strtod_l+0x22e>
 800a0e6:	9808      	ldr	r0, [sp, #32]
 800a0e8:	230a      	movs	r3, #10
 800a0ea:	fb03 2300 	mla	r3, r3, r0, r2
 800a0ee:	9308      	str	r3, [sp, #32]
 800a0f0:	e7e5      	b.n	800a0be <_strtod_l+0x22e>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0f6:	1c50      	adds	r0, r2, #1
 800a0f8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0fa:	7852      	ldrb	r2, [r2, #1]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	460d      	mov	r5, r1
 800a100:	e7b1      	b.n	800a066 <_strtod_l+0x1d6>
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	2301      	movs	r3, #1
 800a108:	e77d      	b.n	800a006 <_strtod_l+0x176>
 800a10a:	f04f 0c00 	mov.w	ip, #0
 800a10e:	1ca2      	adds	r2, r4, #2
 800a110:	9219      	str	r2, [sp, #100]	@ 0x64
 800a112:	78a2      	ldrb	r2, [r4, #2]
 800a114:	e785      	b.n	800a022 <_strtod_l+0x192>
 800a116:	f04f 0c01 	mov.w	ip, #1
 800a11a:	e7f8      	b.n	800a10e <_strtod_l+0x27e>
 800a11c:	08011cfc 	.word	0x08011cfc
 800a120:	08011372 	.word	0x08011372
 800a124:	7ff00000 	.word	0x7ff00000
 800a128:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a12a:	1c51      	adds	r1, r2, #1
 800a12c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a12e:	7852      	ldrb	r2, [r2, #1]
 800a130:	2a30      	cmp	r2, #48	@ 0x30
 800a132:	d0f9      	beq.n	800a128 <_strtod_l+0x298>
 800a134:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a138:	2908      	cmp	r1, #8
 800a13a:	f63f af78 	bhi.w	800a02e <_strtod_l+0x19e>
 800a13e:	3a30      	subs	r2, #48	@ 0x30
 800a140:	920e      	str	r2, [sp, #56]	@ 0x38
 800a142:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a144:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a146:	f04f 080a 	mov.w	r8, #10
 800a14a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a14c:	1c56      	adds	r6, r2, #1
 800a14e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a150:	7852      	ldrb	r2, [r2, #1]
 800a152:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a156:	f1be 0f09 	cmp.w	lr, #9
 800a15a:	d939      	bls.n	800a1d0 <_strtod_l+0x340>
 800a15c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a15e:	1a76      	subs	r6, r6, r1
 800a160:	2e08      	cmp	r6, #8
 800a162:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a166:	dc03      	bgt.n	800a170 <_strtod_l+0x2e0>
 800a168:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a16a:	4588      	cmp	r8, r1
 800a16c:	bfa8      	it	ge
 800a16e:	4688      	movge	r8, r1
 800a170:	f1bc 0f00 	cmp.w	ip, #0
 800a174:	d001      	beq.n	800a17a <_strtod_l+0x2ea>
 800a176:	f1c8 0800 	rsb	r8, r8, #0
 800a17a:	2d00      	cmp	r5, #0
 800a17c:	d14e      	bne.n	800a21c <_strtod_l+0x38c>
 800a17e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a180:	4308      	orrs	r0, r1
 800a182:	f47f aebe 	bne.w	8009f02 <_strtod_l+0x72>
 800a186:	2b00      	cmp	r3, #0
 800a188:	f47f aed6 	bne.w	8009f38 <_strtod_l+0xa8>
 800a18c:	2a69      	cmp	r2, #105	@ 0x69
 800a18e:	d028      	beq.n	800a1e2 <_strtod_l+0x352>
 800a190:	dc25      	bgt.n	800a1de <_strtod_l+0x34e>
 800a192:	2a49      	cmp	r2, #73	@ 0x49
 800a194:	d025      	beq.n	800a1e2 <_strtod_l+0x352>
 800a196:	2a4e      	cmp	r2, #78	@ 0x4e
 800a198:	f47f aece 	bne.w	8009f38 <_strtod_l+0xa8>
 800a19c:	499b      	ldr	r1, [pc, #620]	@ (800a40c <_strtod_l+0x57c>)
 800a19e:	a819      	add	r0, sp, #100	@ 0x64
 800a1a0:	f003 fde2 	bl	800dd68 <__match>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	f43f aec7 	beq.w	8009f38 <_strtod_l+0xa8>
 800a1aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b28      	cmp	r3, #40	@ 0x28
 800a1b0:	d12e      	bne.n	800a210 <_strtod_l+0x380>
 800a1b2:	4997      	ldr	r1, [pc, #604]	@ (800a410 <_strtod_l+0x580>)
 800a1b4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a1b6:	a819      	add	r0, sp, #100	@ 0x64
 800a1b8:	f003 fdea 	bl	800dd90 <__hexnan>
 800a1bc:	2805      	cmp	r0, #5
 800a1be:	d127      	bne.n	800a210 <_strtod_l+0x380>
 800a1c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a1c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a1ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a1ce:	e698      	b.n	8009f02 <_strtod_l+0x72>
 800a1d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a1d2:	fb08 2101 	mla	r1, r8, r1, r2
 800a1d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a1da:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1dc:	e7b5      	b.n	800a14a <_strtod_l+0x2ba>
 800a1de:	2a6e      	cmp	r2, #110	@ 0x6e
 800a1e0:	e7da      	b.n	800a198 <_strtod_l+0x308>
 800a1e2:	498c      	ldr	r1, [pc, #560]	@ (800a414 <_strtod_l+0x584>)
 800a1e4:	a819      	add	r0, sp, #100	@ 0x64
 800a1e6:	f003 fdbf 	bl	800dd68 <__match>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f aea4 	beq.w	8009f38 <_strtod_l+0xa8>
 800a1f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1f2:	4989      	ldr	r1, [pc, #548]	@ (800a418 <_strtod_l+0x588>)
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	a819      	add	r0, sp, #100	@ 0x64
 800a1f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1fa:	f003 fdb5 	bl	800dd68 <__match>
 800a1fe:	b910      	cbnz	r0, 800a206 <_strtod_l+0x376>
 800a200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a202:	3301      	adds	r3, #1
 800a204:	9319      	str	r3, [sp, #100]	@ 0x64
 800a206:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a428 <_strtod_l+0x598>
 800a20a:	f04f 0a00 	mov.w	sl, #0
 800a20e:	e678      	b.n	8009f02 <_strtod_l+0x72>
 800a210:	4882      	ldr	r0, [pc, #520]	@ (800a41c <_strtod_l+0x58c>)
 800a212:	f002 fc71 	bl	800caf8 <nan>
 800a216:	ec5b ab10 	vmov	sl, fp, d0
 800a21a:	e672      	b.n	8009f02 <_strtod_l+0x72>
 800a21c:	eba8 0309 	sub.w	r3, r8, r9
 800a220:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a222:	9309      	str	r3, [sp, #36]	@ 0x24
 800a224:	2f00      	cmp	r7, #0
 800a226:	bf08      	it	eq
 800a228:	462f      	moveq	r7, r5
 800a22a:	2d10      	cmp	r5, #16
 800a22c:	462c      	mov	r4, r5
 800a22e:	bfa8      	it	ge
 800a230:	2410      	movge	r4, #16
 800a232:	f7f6 f977 	bl	8000524 <__aeabi_ui2d>
 800a236:	2d09      	cmp	r5, #9
 800a238:	4682      	mov	sl, r0
 800a23a:	468b      	mov	fp, r1
 800a23c:	dc13      	bgt.n	800a266 <_strtod_l+0x3d6>
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	2b00      	cmp	r3, #0
 800a242:	f43f ae5e 	beq.w	8009f02 <_strtod_l+0x72>
 800a246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a248:	dd78      	ble.n	800a33c <_strtod_l+0x4ac>
 800a24a:	2b16      	cmp	r3, #22
 800a24c:	dc5f      	bgt.n	800a30e <_strtod_l+0x47e>
 800a24e:	4974      	ldr	r1, [pc, #464]	@ (800a420 <_strtod_l+0x590>)
 800a250:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a258:	4652      	mov	r2, sl
 800a25a:	465b      	mov	r3, fp
 800a25c:	f7f6 f9dc 	bl	8000618 <__aeabi_dmul>
 800a260:	4682      	mov	sl, r0
 800a262:	468b      	mov	fp, r1
 800a264:	e64d      	b.n	8009f02 <_strtod_l+0x72>
 800a266:	4b6e      	ldr	r3, [pc, #440]	@ (800a420 <_strtod_l+0x590>)
 800a268:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a26c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a270:	f7f6 f9d2 	bl	8000618 <__aeabi_dmul>
 800a274:	4682      	mov	sl, r0
 800a276:	9808      	ldr	r0, [sp, #32]
 800a278:	468b      	mov	fp, r1
 800a27a:	f7f6 f953 	bl	8000524 <__aeabi_ui2d>
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	4650      	mov	r0, sl
 800a284:	4659      	mov	r1, fp
 800a286:	f7f6 f811 	bl	80002ac <__adddf3>
 800a28a:	2d0f      	cmp	r5, #15
 800a28c:	4682      	mov	sl, r0
 800a28e:	468b      	mov	fp, r1
 800a290:	ddd5      	ble.n	800a23e <_strtod_l+0x3ae>
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	1b2c      	subs	r4, r5, r4
 800a296:	441c      	add	r4, r3
 800a298:	2c00      	cmp	r4, #0
 800a29a:	f340 8096 	ble.w	800a3ca <_strtod_l+0x53a>
 800a29e:	f014 030f 	ands.w	r3, r4, #15
 800a2a2:	d00a      	beq.n	800a2ba <_strtod_l+0x42a>
 800a2a4:	495e      	ldr	r1, [pc, #376]	@ (800a420 <_strtod_l+0x590>)
 800a2a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	465b      	mov	r3, fp
 800a2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b2:	f7f6 f9b1 	bl	8000618 <__aeabi_dmul>
 800a2b6:	4682      	mov	sl, r0
 800a2b8:	468b      	mov	fp, r1
 800a2ba:	f034 040f 	bics.w	r4, r4, #15
 800a2be:	d073      	beq.n	800a3a8 <_strtod_l+0x518>
 800a2c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a2c4:	dd48      	ble.n	800a358 <_strtod_l+0x4c8>
 800a2c6:	2400      	movs	r4, #0
 800a2c8:	46a0      	mov	r8, r4
 800a2ca:	940a      	str	r4, [sp, #40]	@ 0x28
 800a2cc:	46a1      	mov	r9, r4
 800a2ce:	9a05      	ldr	r2, [sp, #20]
 800a2d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a428 <_strtod_l+0x598>
 800a2d4:	2322      	movs	r3, #34	@ 0x22
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	f04f 0a00 	mov.w	sl, #0
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f43f ae0f 	beq.w	8009f02 <_strtod_l+0x72>
 800a2e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2e6:	9805      	ldr	r0, [sp, #20]
 800a2e8:	f003 fe84 	bl	800dff4 <_Bfree>
 800a2ec:	9805      	ldr	r0, [sp, #20]
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f003 fe80 	bl	800dff4 <_Bfree>
 800a2f4:	9805      	ldr	r0, [sp, #20]
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	f003 fe7c 	bl	800dff4 <_Bfree>
 800a2fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2fe:	9805      	ldr	r0, [sp, #20]
 800a300:	f003 fe78 	bl	800dff4 <_Bfree>
 800a304:	9805      	ldr	r0, [sp, #20]
 800a306:	4621      	mov	r1, r4
 800a308:	f003 fe74 	bl	800dff4 <_Bfree>
 800a30c:	e5f9      	b.n	8009f02 <_strtod_l+0x72>
 800a30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a310:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a314:	4293      	cmp	r3, r2
 800a316:	dbbc      	blt.n	800a292 <_strtod_l+0x402>
 800a318:	4c41      	ldr	r4, [pc, #260]	@ (800a420 <_strtod_l+0x590>)
 800a31a:	f1c5 050f 	rsb	r5, r5, #15
 800a31e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a322:	4652      	mov	r2, sl
 800a324:	465b      	mov	r3, fp
 800a326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32a:	f7f6 f975 	bl	8000618 <__aeabi_dmul>
 800a32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a330:	1b5d      	subs	r5, r3, r5
 800a332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a33a:	e78f      	b.n	800a25c <_strtod_l+0x3cc>
 800a33c:	3316      	adds	r3, #22
 800a33e:	dba8      	blt.n	800a292 <_strtod_l+0x402>
 800a340:	4b37      	ldr	r3, [pc, #220]	@ (800a420 <_strtod_l+0x590>)
 800a342:	eba9 0808 	sub.w	r8, r9, r8
 800a346:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a34a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a34e:	4650      	mov	r0, sl
 800a350:	4659      	mov	r1, fp
 800a352:	f7f6 fa8b 	bl	800086c <__aeabi_ddiv>
 800a356:	e783      	b.n	800a260 <_strtod_l+0x3d0>
 800a358:	4b32      	ldr	r3, [pc, #200]	@ (800a424 <_strtod_l+0x594>)
 800a35a:	9308      	str	r3, [sp, #32]
 800a35c:	2300      	movs	r3, #0
 800a35e:	1124      	asrs	r4, r4, #4
 800a360:	4650      	mov	r0, sl
 800a362:	4659      	mov	r1, fp
 800a364:	461e      	mov	r6, r3
 800a366:	2c01      	cmp	r4, #1
 800a368:	dc21      	bgt.n	800a3ae <_strtod_l+0x51e>
 800a36a:	b10b      	cbz	r3, 800a370 <_strtod_l+0x4e0>
 800a36c:	4682      	mov	sl, r0
 800a36e:	468b      	mov	fp, r1
 800a370:	492c      	ldr	r1, [pc, #176]	@ (800a424 <_strtod_l+0x594>)
 800a372:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a376:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a37a:	4652      	mov	r2, sl
 800a37c:	465b      	mov	r3, fp
 800a37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a382:	f7f6 f949 	bl	8000618 <__aeabi_dmul>
 800a386:	4b28      	ldr	r3, [pc, #160]	@ (800a428 <_strtod_l+0x598>)
 800a388:	460a      	mov	r2, r1
 800a38a:	400b      	ands	r3, r1
 800a38c:	4927      	ldr	r1, [pc, #156]	@ (800a42c <_strtod_l+0x59c>)
 800a38e:	428b      	cmp	r3, r1
 800a390:	4682      	mov	sl, r0
 800a392:	d898      	bhi.n	800a2c6 <_strtod_l+0x436>
 800a394:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a398:	428b      	cmp	r3, r1
 800a39a:	bf86      	itte	hi
 800a39c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a430 <_strtod_l+0x5a0>
 800a3a0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a3a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9308      	str	r3, [sp, #32]
 800a3ac:	e07a      	b.n	800a4a4 <_strtod_l+0x614>
 800a3ae:	07e2      	lsls	r2, r4, #31
 800a3b0:	d505      	bpl.n	800a3be <_strtod_l+0x52e>
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b8:	f7f6 f92e 	bl	8000618 <__aeabi_dmul>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	9a08      	ldr	r2, [sp, #32]
 800a3c0:	3208      	adds	r2, #8
 800a3c2:	3601      	adds	r6, #1
 800a3c4:	1064      	asrs	r4, r4, #1
 800a3c6:	9208      	str	r2, [sp, #32]
 800a3c8:	e7cd      	b.n	800a366 <_strtod_l+0x4d6>
 800a3ca:	d0ed      	beq.n	800a3a8 <_strtod_l+0x518>
 800a3cc:	4264      	negs	r4, r4
 800a3ce:	f014 020f 	ands.w	r2, r4, #15
 800a3d2:	d00a      	beq.n	800a3ea <_strtod_l+0x55a>
 800a3d4:	4b12      	ldr	r3, [pc, #72]	@ (800a420 <_strtod_l+0x590>)
 800a3d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f6 fa43 	bl	800086c <__aeabi_ddiv>
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	1124      	asrs	r4, r4, #4
 800a3ec:	d0dc      	beq.n	800a3a8 <_strtod_l+0x518>
 800a3ee:	2c1f      	cmp	r4, #31
 800a3f0:	dd20      	ble.n	800a434 <_strtod_l+0x5a4>
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	46a0      	mov	r8, r4
 800a3f6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3f8:	46a1      	mov	r9, r4
 800a3fa:	9a05      	ldr	r2, [sp, #20]
 800a3fc:	2322      	movs	r3, #34	@ 0x22
 800a3fe:	f04f 0a00 	mov.w	sl, #0
 800a402:	f04f 0b00 	mov.w	fp, #0
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	e768      	b.n	800a2dc <_strtod_l+0x44c>
 800a40a:	bf00      	nop
 800a40c:	08011e46 	.word	0x08011e46
 800a410:	08011ce8 	.word	0x08011ce8
 800a414:	08011e3e 	.word	0x08011e3e
 800a418:	08011f27 	.word	0x08011f27
 800a41c:	08010f0e 	.word	0x08010f0e
 800a420:	080120a0 	.word	0x080120a0
 800a424:	08012078 	.word	0x08012078
 800a428:	7ff00000 	.word	0x7ff00000
 800a42c:	7ca00000 	.word	0x7ca00000
 800a430:	7fefffff 	.word	0x7fefffff
 800a434:	f014 0310 	ands.w	r3, r4, #16
 800a438:	bf18      	it	ne
 800a43a:	236a      	movne	r3, #106	@ 0x6a
 800a43c:	4ea9      	ldr	r6, [pc, #676]	@ (800a6e4 <_strtod_l+0x854>)
 800a43e:	9308      	str	r3, [sp, #32]
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	2300      	movs	r3, #0
 800a446:	07e2      	lsls	r2, r4, #31
 800a448:	d504      	bpl.n	800a454 <_strtod_l+0x5c4>
 800a44a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a44e:	f7f6 f8e3 	bl	8000618 <__aeabi_dmul>
 800a452:	2301      	movs	r3, #1
 800a454:	1064      	asrs	r4, r4, #1
 800a456:	f106 0608 	add.w	r6, r6, #8
 800a45a:	d1f4      	bne.n	800a446 <_strtod_l+0x5b6>
 800a45c:	b10b      	cbz	r3, 800a462 <_strtod_l+0x5d2>
 800a45e:	4682      	mov	sl, r0
 800a460:	468b      	mov	fp, r1
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	b1b3      	cbz	r3, 800a494 <_strtod_l+0x604>
 800a466:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a46a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a46e:	2b00      	cmp	r3, #0
 800a470:	4659      	mov	r1, fp
 800a472:	dd0f      	ble.n	800a494 <_strtod_l+0x604>
 800a474:	2b1f      	cmp	r3, #31
 800a476:	dd55      	ble.n	800a524 <_strtod_l+0x694>
 800a478:	2b34      	cmp	r3, #52	@ 0x34
 800a47a:	bfde      	ittt	le
 800a47c:	f04f 33ff 	movle.w	r3, #4294967295
 800a480:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a484:	4093      	lslle	r3, r2
 800a486:	f04f 0a00 	mov.w	sl, #0
 800a48a:	bfcc      	ite	gt
 800a48c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a490:	ea03 0b01 	andle.w	fp, r3, r1
 800a494:	2200      	movs	r2, #0
 800a496:	2300      	movs	r3, #0
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	f7f6 fb24 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d1a6      	bne.n	800a3f2 <_strtod_l+0x562>
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a4aa:	9805      	ldr	r0, [sp, #20]
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	463a      	mov	r2, r7
 800a4b0:	f003 fe08 	bl	800e0c4 <__s2b>
 800a4b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f43f af05 	beq.w	800a2c6 <_strtod_l+0x436>
 800a4bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	eba9 0308 	sub.w	r3, r9, r8
 800a4c4:	bfa8      	it	ge
 800a4c6:	2300      	movge	r3, #0
 800a4c8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4d0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4d2:	46a0      	mov	r8, r4
 800a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d6:	9805      	ldr	r0, [sp, #20]
 800a4d8:	6859      	ldr	r1, [r3, #4]
 800a4da:	f003 fd4b 	bl	800df74 <_Balloc>
 800a4de:	4681      	mov	r9, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f43f aef4 	beq.w	800a2ce <_strtod_l+0x43e>
 800a4e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4e8:	691a      	ldr	r2, [r3, #16]
 800a4ea:	3202      	adds	r2, #2
 800a4ec:	f103 010c 	add.w	r1, r3, #12
 800a4f0:	0092      	lsls	r2, r2, #2
 800a4f2:	300c      	adds	r0, #12
 800a4f4:	f002 faf0 	bl	800cad8 <memcpy>
 800a4f8:	ec4b ab10 	vmov	d0, sl, fp
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800a500:	a91b      	add	r1, sp, #108	@ 0x6c
 800a502:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a506:	f004 f919 	bl	800e73c <__d2b>
 800a50a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a50c:	2800      	cmp	r0, #0
 800a50e:	f43f aede 	beq.w	800a2ce <_strtod_l+0x43e>
 800a512:	9805      	ldr	r0, [sp, #20]
 800a514:	2101      	movs	r1, #1
 800a516:	f003 fe6b 	bl	800e1f0 <__i2b>
 800a51a:	4680      	mov	r8, r0
 800a51c:	b948      	cbnz	r0, 800a532 <_strtod_l+0x6a2>
 800a51e:	f04f 0800 	mov.w	r8, #0
 800a522:	e6d4      	b.n	800a2ce <_strtod_l+0x43e>
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	ea03 0a0a 	and.w	sl, r3, sl
 800a530:	e7b0      	b.n	800a494 <_strtod_l+0x604>
 800a532:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a534:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a536:	2d00      	cmp	r5, #0
 800a538:	bfab      	itete	ge
 800a53a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a53c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a53e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a540:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a542:	bfac      	ite	ge
 800a544:	18ef      	addge	r7, r5, r3
 800a546:	1b5e      	sublt	r6, r3, r5
 800a548:	9b08      	ldr	r3, [sp, #32]
 800a54a:	1aed      	subs	r5, r5, r3
 800a54c:	4415      	add	r5, r2
 800a54e:	4b66      	ldr	r3, [pc, #408]	@ (800a6e8 <_strtod_l+0x858>)
 800a550:	3d01      	subs	r5, #1
 800a552:	429d      	cmp	r5, r3
 800a554:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a558:	da50      	bge.n	800a5fc <_strtod_l+0x76c>
 800a55a:	1b5b      	subs	r3, r3, r5
 800a55c:	2b1f      	cmp	r3, #31
 800a55e:	eba2 0203 	sub.w	r2, r2, r3
 800a562:	f04f 0101 	mov.w	r1, #1
 800a566:	dc3d      	bgt.n	800a5e4 <_strtod_l+0x754>
 800a568:	fa01 f303 	lsl.w	r3, r1, r3
 800a56c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a56e:	2300      	movs	r3, #0
 800a570:	9310      	str	r3, [sp, #64]	@ 0x40
 800a572:	18bd      	adds	r5, r7, r2
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	42af      	cmp	r7, r5
 800a578:	4416      	add	r6, r2
 800a57a:	441e      	add	r6, r3
 800a57c:	463b      	mov	r3, r7
 800a57e:	bfa8      	it	ge
 800a580:	462b      	movge	r3, r5
 800a582:	42b3      	cmp	r3, r6
 800a584:	bfa8      	it	ge
 800a586:	4633      	movge	r3, r6
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bfc2      	ittt	gt
 800a58c:	1aed      	subgt	r5, r5, r3
 800a58e:	1af6      	subgt	r6, r6, r3
 800a590:	1aff      	subgt	r7, r7, r3
 800a592:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd16      	ble.n	800a5c6 <_strtod_l+0x736>
 800a598:	4641      	mov	r1, r8
 800a59a:	9805      	ldr	r0, [sp, #20]
 800a59c:	461a      	mov	r2, r3
 800a59e:	f003 fee7 	bl	800e370 <__pow5mult>
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d0ba      	beq.n	800a51e <_strtod_l+0x68e>
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5ac:	9805      	ldr	r0, [sp, #20]
 800a5ae:	f003 fe35 	bl	800e21c <__multiply>
 800a5b2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f43f ae8a 	beq.w	800a2ce <_strtod_l+0x43e>
 800a5ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5bc:	9805      	ldr	r0, [sp, #20]
 800a5be:	f003 fd19 	bl	800dff4 <_Bfree>
 800a5c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5c6:	2d00      	cmp	r5, #0
 800a5c8:	dc1d      	bgt.n	800a606 <_strtod_l+0x776>
 800a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dd23      	ble.n	800a618 <_strtod_l+0x788>
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5d4:	9805      	ldr	r0, [sp, #20]
 800a5d6:	f003 fecb 	bl	800e370 <__pow5mult>
 800a5da:	4681      	mov	r9, r0
 800a5dc:	b9e0      	cbnz	r0, 800a618 <_strtod_l+0x788>
 800a5de:	f04f 0900 	mov.w	r9, #0
 800a5e2:	e674      	b.n	800a2ce <_strtod_l+0x43e>
 800a5e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a5f0:	35e2      	adds	r5, #226	@ 0xe2
 800a5f2:	fa01 f305 	lsl.w	r3, r1, r5
 800a5f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a5fa:	e7ba      	b.n	800a572 <_strtod_l+0x6e2>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800a600:	2301      	movs	r3, #1
 800a602:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a604:	e7b5      	b.n	800a572 <_strtod_l+0x6e2>
 800a606:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a608:	9805      	ldr	r0, [sp, #20]
 800a60a:	462a      	mov	r2, r5
 800a60c:	f003 ff0a 	bl	800e424 <__lshift>
 800a610:	901a      	str	r0, [sp, #104]	@ 0x68
 800a612:	2800      	cmp	r0, #0
 800a614:	d1d9      	bne.n	800a5ca <_strtod_l+0x73a>
 800a616:	e65a      	b.n	800a2ce <_strtod_l+0x43e>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	dd07      	ble.n	800a62c <_strtod_l+0x79c>
 800a61c:	4649      	mov	r1, r9
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	4632      	mov	r2, r6
 800a622:	f003 feff 	bl	800e424 <__lshift>
 800a626:	4681      	mov	r9, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	d0d8      	beq.n	800a5de <_strtod_l+0x74e>
 800a62c:	2f00      	cmp	r7, #0
 800a62e:	dd08      	ble.n	800a642 <_strtod_l+0x7b2>
 800a630:	4641      	mov	r1, r8
 800a632:	9805      	ldr	r0, [sp, #20]
 800a634:	463a      	mov	r2, r7
 800a636:	f003 fef5 	bl	800e424 <__lshift>
 800a63a:	4680      	mov	r8, r0
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f43f ae46 	beq.w	800a2ce <_strtod_l+0x43e>
 800a642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a644:	9805      	ldr	r0, [sp, #20]
 800a646:	464a      	mov	r2, r9
 800a648:	f003 ff74 	bl	800e534 <__mdiff>
 800a64c:	4604      	mov	r4, r0
 800a64e:	2800      	cmp	r0, #0
 800a650:	f43f ae3d 	beq.w	800a2ce <_strtod_l+0x43e>
 800a654:	68c3      	ldr	r3, [r0, #12]
 800a656:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a658:	2300      	movs	r3, #0
 800a65a:	60c3      	str	r3, [r0, #12]
 800a65c:	4641      	mov	r1, r8
 800a65e:	f003 ff4d 	bl	800e4fc <__mcmp>
 800a662:	2800      	cmp	r0, #0
 800a664:	da46      	bge.n	800a6f4 <_strtod_l+0x864>
 800a666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a668:	ea53 030a 	orrs.w	r3, r3, sl
 800a66c:	d16c      	bne.n	800a748 <_strtod_l+0x8b8>
 800a66e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a672:	2b00      	cmp	r3, #0
 800a674:	d168      	bne.n	800a748 <_strtod_l+0x8b8>
 800a676:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a67a:	0d1b      	lsrs	r3, r3, #20
 800a67c:	051b      	lsls	r3, r3, #20
 800a67e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a682:	d961      	bls.n	800a748 <_strtod_l+0x8b8>
 800a684:	6963      	ldr	r3, [r4, #20]
 800a686:	b913      	cbnz	r3, 800a68e <_strtod_l+0x7fe>
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	dd5c      	ble.n	800a748 <_strtod_l+0x8b8>
 800a68e:	4621      	mov	r1, r4
 800a690:	2201      	movs	r2, #1
 800a692:	9805      	ldr	r0, [sp, #20]
 800a694:	f003 fec6 	bl	800e424 <__lshift>
 800a698:	4641      	mov	r1, r8
 800a69a:	4604      	mov	r4, r0
 800a69c:	f003 ff2e 	bl	800e4fc <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dd51      	ble.n	800a748 <_strtod_l+0x8b8>
 800a6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6a8:	9a08      	ldr	r2, [sp, #32]
 800a6aa:	0d1b      	lsrs	r3, r3, #20
 800a6ac:	051b      	lsls	r3, r3, #20
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d06b      	beq.n	800a78a <_strtod_l+0x8fa>
 800a6b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a6b6:	d868      	bhi.n	800a78a <_strtod_l+0x8fa>
 800a6b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a6bc:	f67f ae9d 	bls.w	800a3fa <_strtod_l+0x56a>
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ec <_strtod_l+0x85c>)
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f7f5 ffa6 	bl	8000618 <__aeabi_dmul>
 800a6cc:	4b08      	ldr	r3, [pc, #32]	@ (800a6f0 <_strtod_l+0x860>)
 800a6ce:	400b      	ands	r3, r1
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	468b      	mov	fp, r1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f47f ae05 	bne.w	800a2e4 <_strtod_l+0x454>
 800a6da:	9a05      	ldr	r2, [sp, #20]
 800a6dc:	2322      	movs	r3, #34	@ 0x22
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	e600      	b.n	800a2e4 <_strtod_l+0x454>
 800a6e2:	bf00      	nop
 800a6e4:	08011d10 	.word	0x08011d10
 800a6e8:	fffffc02 	.word	0xfffffc02
 800a6ec:	39500000 	.word	0x39500000
 800a6f0:	7ff00000 	.word	0x7ff00000
 800a6f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a6f8:	d165      	bne.n	800a7c6 <_strtod_l+0x936>
 800a6fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a700:	b35a      	cbz	r2, 800a75a <_strtod_l+0x8ca>
 800a702:	4a9f      	ldr	r2, [pc, #636]	@ (800a980 <_strtod_l+0xaf0>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d12b      	bne.n	800a760 <_strtod_l+0x8d0>
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	4651      	mov	r1, sl
 800a70c:	b303      	cbz	r3, 800a750 <_strtod_l+0x8c0>
 800a70e:	4b9d      	ldr	r3, [pc, #628]	@ (800a984 <_strtod_l+0xaf4>)
 800a710:	465a      	mov	r2, fp
 800a712:	4013      	ands	r3, r2
 800a714:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a718:	f04f 32ff 	mov.w	r2, #4294967295
 800a71c:	d81b      	bhi.n	800a756 <_strtod_l+0x8c6>
 800a71e:	0d1b      	lsrs	r3, r3, #20
 800a720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	4299      	cmp	r1, r3
 800a72a:	d119      	bne.n	800a760 <_strtod_l+0x8d0>
 800a72c:	4b96      	ldr	r3, [pc, #600]	@ (800a988 <_strtod_l+0xaf8>)
 800a72e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a730:	429a      	cmp	r2, r3
 800a732:	d102      	bne.n	800a73a <_strtod_l+0x8aa>
 800a734:	3101      	adds	r1, #1
 800a736:	f43f adca 	beq.w	800a2ce <_strtod_l+0x43e>
 800a73a:	4b92      	ldr	r3, [pc, #584]	@ (800a984 <_strtod_l+0xaf4>)
 800a73c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a73e:	401a      	ands	r2, r3
 800a740:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a744:	f04f 0a00 	mov.w	sl, #0
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1b8      	bne.n	800a6c0 <_strtod_l+0x830>
 800a74e:	e5c9      	b.n	800a2e4 <_strtod_l+0x454>
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	e7e8      	b.n	800a728 <_strtod_l+0x898>
 800a756:	4613      	mov	r3, r2
 800a758:	e7e6      	b.n	800a728 <_strtod_l+0x898>
 800a75a:	ea53 030a 	orrs.w	r3, r3, sl
 800a75e:	d0a1      	beq.n	800a6a4 <_strtod_l+0x814>
 800a760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a762:	b1db      	cbz	r3, 800a79c <_strtod_l+0x90c>
 800a764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a766:	4213      	tst	r3, r2
 800a768:	d0ee      	beq.n	800a748 <_strtod_l+0x8b8>
 800a76a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a76c:	9a08      	ldr	r2, [sp, #32]
 800a76e:	4650      	mov	r0, sl
 800a770:	4659      	mov	r1, fp
 800a772:	b1bb      	cbz	r3, 800a7a4 <_strtod_l+0x914>
 800a774:	f7ff fb6c 	bl	8009e50 <sulp>
 800a778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a77c:	ec53 2b10 	vmov	r2, r3, d0
 800a780:	f7f5 fd94 	bl	80002ac <__adddf3>
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	e7de      	b.n	800a748 <_strtod_l+0x8b8>
 800a78a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a78e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a792:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a796:	f04f 3aff 	mov.w	sl, #4294967295
 800a79a:	e7d5      	b.n	800a748 <_strtod_l+0x8b8>
 800a79c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a79e:	ea13 0f0a 	tst.w	r3, sl
 800a7a2:	e7e1      	b.n	800a768 <_strtod_l+0x8d8>
 800a7a4:	f7ff fb54 	bl	8009e50 <sulp>
 800a7a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ac:	ec53 2b10 	vmov	r2, r3, d0
 800a7b0:	f7f5 fd7a 	bl	80002a8 <__aeabi_dsub>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4682      	mov	sl, r0
 800a7ba:	468b      	mov	fp, r1
 800a7bc:	f7f6 f994 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d0c1      	beq.n	800a748 <_strtod_l+0x8b8>
 800a7c4:	e619      	b.n	800a3fa <_strtod_l+0x56a>
 800a7c6:	4641      	mov	r1, r8
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f004 f80f 	bl	800e7ec <__ratio>
 800a7ce:	ec57 6b10 	vmov	r6, r7, d0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f998 	bl	8000b10 <__aeabi_dcmple>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d06f      	beq.n	800a8c4 <_strtod_l+0xa34>
 800a7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d17a      	bne.n	800a8e0 <_strtod_l+0xa50>
 800a7ea:	f1ba 0f00 	cmp.w	sl, #0
 800a7ee:	d158      	bne.n	800a8a2 <_strtod_l+0xa12>
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d15a      	bne.n	800a8b0 <_strtod_l+0xa20>
 800a7fa:	4b64      	ldr	r3, [pc, #400]	@ (800a98c <_strtod_l+0xafc>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4630      	mov	r0, r6
 800a800:	4639      	mov	r1, r7
 800a802:	f7f6 f97b 	bl	8000afc <__aeabi_dcmplt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d159      	bne.n	800a8be <_strtod_l+0xa2e>
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	4b60      	ldr	r3, [pc, #384]	@ (800a990 <_strtod_l+0xb00>)
 800a810:	2200      	movs	r2, #0
 800a812:	f7f5 ff01 	bl	8000618 <__aeabi_dmul>
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a81e:	9606      	str	r6, [sp, #24]
 800a820:	9307      	str	r3, [sp, #28]
 800a822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a826:	4d57      	ldr	r5, [pc, #348]	@ (800a984 <_strtod_l+0xaf4>)
 800a828:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a82e:	401d      	ands	r5, r3
 800a830:	4b58      	ldr	r3, [pc, #352]	@ (800a994 <_strtod_l+0xb04>)
 800a832:	429d      	cmp	r5, r3
 800a834:	f040 80b2 	bne.w	800a99c <_strtod_l+0xb0c>
 800a838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a83a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a83e:	ec4b ab10 	vmov	d0, sl, fp
 800a842:	f003 ff0b 	bl	800e65c <__ulp>
 800a846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a84a:	ec51 0b10 	vmov	r0, r1, d0
 800a84e:	f7f5 fee3 	bl	8000618 <__aeabi_dmul>
 800a852:	4652      	mov	r2, sl
 800a854:	465b      	mov	r3, fp
 800a856:	f7f5 fd29 	bl	80002ac <__adddf3>
 800a85a:	460b      	mov	r3, r1
 800a85c:	4949      	ldr	r1, [pc, #292]	@ (800a984 <_strtod_l+0xaf4>)
 800a85e:	4a4e      	ldr	r2, [pc, #312]	@ (800a998 <_strtod_l+0xb08>)
 800a860:	4019      	ands	r1, r3
 800a862:	4291      	cmp	r1, r2
 800a864:	4682      	mov	sl, r0
 800a866:	d942      	bls.n	800a8ee <_strtod_l+0xa5e>
 800a868:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a86a:	4b47      	ldr	r3, [pc, #284]	@ (800a988 <_strtod_l+0xaf8>)
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d103      	bne.n	800a878 <_strtod_l+0x9e8>
 800a870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a872:	3301      	adds	r3, #1
 800a874:	f43f ad2b 	beq.w	800a2ce <_strtod_l+0x43e>
 800a878:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a988 <_strtod_l+0xaf8>
 800a87c:	f04f 3aff 	mov.w	sl, #4294967295
 800a880:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a882:	9805      	ldr	r0, [sp, #20]
 800a884:	f003 fbb6 	bl	800dff4 <_Bfree>
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	4649      	mov	r1, r9
 800a88c:	f003 fbb2 	bl	800dff4 <_Bfree>
 800a890:	9805      	ldr	r0, [sp, #20]
 800a892:	4641      	mov	r1, r8
 800a894:	f003 fbae 	bl	800dff4 <_Bfree>
 800a898:	9805      	ldr	r0, [sp, #20]
 800a89a:	4621      	mov	r1, r4
 800a89c:	f003 fbaa 	bl	800dff4 <_Bfree>
 800a8a0:	e618      	b.n	800a4d4 <_strtod_l+0x644>
 800a8a2:	f1ba 0f01 	cmp.w	sl, #1
 800a8a6:	d103      	bne.n	800a8b0 <_strtod_l+0xa20>
 800a8a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f43f ada5 	beq.w	800a3fa <_strtod_l+0x56a>
 800a8b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a960 <_strtod_l+0xad0>
 800a8b4:	4f35      	ldr	r7, [pc, #212]	@ (800a98c <_strtod_l+0xafc>)
 800a8b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	e7b1      	b.n	800a822 <_strtod_l+0x992>
 800a8be:	4f34      	ldr	r7, [pc, #208]	@ (800a990 <_strtod_l+0xb00>)
 800a8c0:	2600      	movs	r6, #0
 800a8c2:	e7aa      	b.n	800a81a <_strtod_l+0x98a>
 800a8c4:	4b32      	ldr	r3, [pc, #200]	@ (800a990 <_strtod_l+0xb00>)
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f7f5 fea4 	bl	8000618 <__aeabi_dmul>
 800a8d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d09f      	beq.n	800a81a <_strtod_l+0x98a>
 800a8da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a8de:	e7a0      	b.n	800a822 <_strtod_l+0x992>
 800a8e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a968 <_strtod_l+0xad8>
 800a8e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8e8:	ec57 6b17 	vmov	r6, r7, d7
 800a8ec:	e799      	b.n	800a822 <_strtod_l+0x992>
 800a8ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1c1      	bne.n	800a880 <_strtod_l+0x9f0>
 800a8fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a900:	0d1b      	lsrs	r3, r3, #20
 800a902:	051b      	lsls	r3, r3, #20
 800a904:	429d      	cmp	r5, r3
 800a906:	d1bb      	bne.n	800a880 <_strtod_l+0x9f0>
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f6 f9cc 	bl	8000ca8 <__aeabi_d2lz>
 800a910:	f7f5 fe54 	bl	80005bc <__aeabi_l2d>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f5 fcc4 	bl	80002a8 <__aeabi_dsub>
 800a920:	460b      	mov	r3, r1
 800a922:	4602      	mov	r2, r0
 800a924:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a928:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	ea46 060a 	orr.w	r6, r6, sl
 800a932:	431e      	orrs	r6, r3
 800a934:	d06f      	beq.n	800aa16 <_strtod_l+0xb86>
 800a936:	a30e      	add	r3, pc, #56	@ (adr r3, 800a970 <_strtod_l+0xae0>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f6 f8de 	bl	8000afc <__aeabi_dcmplt>
 800a940:	2800      	cmp	r0, #0
 800a942:	f47f accf 	bne.w	800a2e4 <_strtod_l+0x454>
 800a946:	a30c      	add	r3, pc, #48	@ (adr r3, 800a978 <_strtod_l+0xae8>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a950:	f7f6 f8f2 	bl	8000b38 <__aeabi_dcmpgt>
 800a954:	2800      	cmp	r0, #0
 800a956:	d093      	beq.n	800a880 <_strtod_l+0x9f0>
 800a958:	e4c4      	b.n	800a2e4 <_strtod_l+0x454>
 800a95a:	bf00      	nop
 800a95c:	f3af 8000 	nop.w
 800a960:	00000000 	.word	0x00000000
 800a964:	bff00000 	.word	0xbff00000
 800a968:	00000000 	.word	0x00000000
 800a96c:	3ff00000 	.word	0x3ff00000
 800a970:	94a03595 	.word	0x94a03595
 800a974:	3fdfffff 	.word	0x3fdfffff
 800a978:	35afe535 	.word	0x35afe535
 800a97c:	3fe00000 	.word	0x3fe00000
 800a980:	000fffff 	.word	0x000fffff
 800a984:	7ff00000 	.word	0x7ff00000
 800a988:	7fefffff 	.word	0x7fefffff
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	3fe00000 	.word	0x3fe00000
 800a994:	7fe00000 	.word	0x7fe00000
 800a998:	7c9fffff 	.word	0x7c9fffff
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	b323      	cbz	r3, 800a9ea <_strtod_l+0xb5a>
 800a9a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a9a4:	d821      	bhi.n	800a9ea <_strtod_l+0xb5a>
 800a9a6:	a328      	add	r3, pc, #160	@ (adr r3, 800aa48 <_strtod_l+0xbb8>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f7f6 f8ae 	bl	8000b10 <__aeabi_dcmple>
 800a9b4:	b1a0      	cbz	r0, 800a9e0 <_strtod_l+0xb50>
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7f6 f905 	bl	8000bc8 <__aeabi_d2uiz>
 800a9be:	2801      	cmp	r0, #1
 800a9c0:	bf38      	it	cc
 800a9c2:	2001      	movcc	r0, #1
 800a9c4:	f7f5 fdae 	bl	8000524 <__aeabi_ui2d>
 800a9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	460f      	mov	r7, r1
 800a9ce:	b9fb      	cbnz	r3, 800aa10 <_strtod_l+0xb80>
 800a9d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a9d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a9dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a9e6:	1b5b      	subs	r3, r3, r5
 800a9e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a9f2:	f003 fe33 	bl	800e65c <__ulp>
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	ec53 2b10 	vmov	r2, r3, d0
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	f7f5 fe0b 	bl	8000618 <__aeabi_dmul>
 800aa02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa06:	f7f5 fc51 	bl	80002ac <__adddf3>
 800aa0a:	4682      	mov	sl, r0
 800aa0c:	468b      	mov	fp, r1
 800aa0e:	e770      	b.n	800a8f2 <_strtod_l+0xa62>
 800aa10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aa14:	e7e0      	b.n	800a9d8 <_strtod_l+0xb48>
 800aa16:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa50 <_strtod_l+0xbc0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f6 f86e 	bl	8000afc <__aeabi_dcmplt>
 800aa20:	e798      	b.n	800a954 <_strtod_l+0xac4>
 800aa22:	2300      	movs	r3, #0
 800aa24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aa28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	f7ff ba6d 	b.w	8009f0a <_strtod_l+0x7a>
 800aa30:	2a65      	cmp	r2, #101	@ 0x65
 800aa32:	f43f ab66 	beq.w	800a102 <_strtod_l+0x272>
 800aa36:	2a45      	cmp	r2, #69	@ 0x45
 800aa38:	f43f ab63 	beq.w	800a102 <_strtod_l+0x272>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f7ff bb9e 	b.w	800a17e <_strtod_l+0x2ee>
 800aa42:	bf00      	nop
 800aa44:	f3af 8000 	nop.w
 800aa48:	ffc00000 	.word	0xffc00000
 800aa4c:	41dfffff 	.word	0x41dfffff
 800aa50:	94a03595 	.word	0x94a03595
 800aa54:	3fcfffff 	.word	0x3fcfffff

0800aa58 <_strtod_r>:
 800aa58:	4b01      	ldr	r3, [pc, #4]	@ (800aa60 <_strtod_r+0x8>)
 800aa5a:	f7ff ba19 	b.w	8009e90 <_strtod_l>
 800aa5e:	bf00      	nop
 800aa60:	20000038 	.word	0x20000038

0800aa64 <strtod>:
 800aa64:	460a      	mov	r2, r1
 800aa66:	4601      	mov	r1, r0
 800aa68:	4802      	ldr	r0, [pc, #8]	@ (800aa74 <strtod+0x10>)
 800aa6a:	4b03      	ldr	r3, [pc, #12]	@ (800aa78 <strtod+0x14>)
 800aa6c:	6800      	ldr	r0, [r0, #0]
 800aa6e:	f7ff ba0f 	b.w	8009e90 <_strtod_l>
 800aa72:	bf00      	nop
 800aa74:	200001a4 	.word	0x200001a4
 800aa78:	20000038 	.word	0x20000038

0800aa7c <_strtol_l.constprop.0>:
 800aa7c:	2b24      	cmp	r3, #36	@ 0x24
 800aa7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa82:	4686      	mov	lr, r0
 800aa84:	4690      	mov	r8, r2
 800aa86:	d801      	bhi.n	800aa8c <_strtol_l.constprop.0+0x10>
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d106      	bne.n	800aa9a <_strtol_l.constprop.0+0x1e>
 800aa8c:	f001 fff2 	bl	800ca74 <__errno>
 800aa90:	2316      	movs	r3, #22
 800aa92:	6003      	str	r3, [r0, #0]
 800aa94:	2000      	movs	r0, #0
 800aa96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9a:	4834      	ldr	r0, [pc, #208]	@ (800ab6c <_strtol_l.constprop.0+0xf0>)
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	462a      	mov	r2, r5
 800aaa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaa4:	5d06      	ldrb	r6, [r0, r4]
 800aaa6:	f016 0608 	ands.w	r6, r6, #8
 800aaaa:	d1f8      	bne.n	800aa9e <_strtol_l.constprop.0+0x22>
 800aaac:	2c2d      	cmp	r4, #45	@ 0x2d
 800aaae:	d12d      	bne.n	800ab0c <_strtol_l.constprop.0+0x90>
 800aab0:	782c      	ldrb	r4, [r5, #0]
 800aab2:	2601      	movs	r6, #1
 800aab4:	1c95      	adds	r5, r2, #2
 800aab6:	f033 0210 	bics.w	r2, r3, #16
 800aaba:	d109      	bne.n	800aad0 <_strtol_l.constprop.0+0x54>
 800aabc:	2c30      	cmp	r4, #48	@ 0x30
 800aabe:	d12a      	bne.n	800ab16 <_strtol_l.constprop.0+0x9a>
 800aac0:	782a      	ldrb	r2, [r5, #0]
 800aac2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aac6:	2a58      	cmp	r2, #88	@ 0x58
 800aac8:	d125      	bne.n	800ab16 <_strtol_l.constprop.0+0x9a>
 800aaca:	786c      	ldrb	r4, [r5, #1]
 800aacc:	2310      	movs	r3, #16
 800aace:	3502      	adds	r5, #2
 800aad0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aad4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aad8:	2200      	movs	r2, #0
 800aada:	fbbc f9f3 	udiv	r9, ip, r3
 800aade:	4610      	mov	r0, r2
 800aae0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aae4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aae8:	2f09      	cmp	r7, #9
 800aaea:	d81b      	bhi.n	800ab24 <_strtol_l.constprop.0+0xa8>
 800aaec:	463c      	mov	r4, r7
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	dd27      	ble.n	800ab42 <_strtol_l.constprop.0+0xc6>
 800aaf2:	1c57      	adds	r7, r2, #1
 800aaf4:	d007      	beq.n	800ab06 <_strtol_l.constprop.0+0x8a>
 800aaf6:	4581      	cmp	r9, r0
 800aaf8:	d320      	bcc.n	800ab3c <_strtol_l.constprop.0+0xc0>
 800aafa:	d101      	bne.n	800ab00 <_strtol_l.constprop.0+0x84>
 800aafc:	45a2      	cmp	sl, r4
 800aafe:	db1d      	blt.n	800ab3c <_strtol_l.constprop.0+0xc0>
 800ab00:	fb00 4003 	mla	r0, r0, r3, r4
 800ab04:	2201      	movs	r2, #1
 800ab06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab0a:	e7eb      	b.n	800aae4 <_strtol_l.constprop.0+0x68>
 800ab0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ab0e:	bf04      	itt	eq
 800ab10:	782c      	ldrbeq	r4, [r5, #0]
 800ab12:	1c95      	addeq	r5, r2, #2
 800ab14:	e7cf      	b.n	800aab6 <_strtol_l.constprop.0+0x3a>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1da      	bne.n	800aad0 <_strtol_l.constprop.0+0x54>
 800ab1a:	2c30      	cmp	r4, #48	@ 0x30
 800ab1c:	bf0c      	ite	eq
 800ab1e:	2308      	moveq	r3, #8
 800ab20:	230a      	movne	r3, #10
 800ab22:	e7d5      	b.n	800aad0 <_strtol_l.constprop.0+0x54>
 800ab24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab28:	2f19      	cmp	r7, #25
 800ab2a:	d801      	bhi.n	800ab30 <_strtol_l.constprop.0+0xb4>
 800ab2c:	3c37      	subs	r4, #55	@ 0x37
 800ab2e:	e7de      	b.n	800aaee <_strtol_l.constprop.0+0x72>
 800ab30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab34:	2f19      	cmp	r7, #25
 800ab36:	d804      	bhi.n	800ab42 <_strtol_l.constprop.0+0xc6>
 800ab38:	3c57      	subs	r4, #87	@ 0x57
 800ab3a:	e7d8      	b.n	800aaee <_strtol_l.constprop.0+0x72>
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab40:	e7e1      	b.n	800ab06 <_strtol_l.constprop.0+0x8a>
 800ab42:	1c53      	adds	r3, r2, #1
 800ab44:	d108      	bne.n	800ab58 <_strtol_l.constprop.0+0xdc>
 800ab46:	2322      	movs	r3, #34	@ 0x22
 800ab48:	f8ce 3000 	str.w	r3, [lr]
 800ab4c:	4660      	mov	r0, ip
 800ab4e:	f1b8 0f00 	cmp.w	r8, #0
 800ab52:	d0a0      	beq.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab54:	1e69      	subs	r1, r5, #1
 800ab56:	e006      	b.n	800ab66 <_strtol_l.constprop.0+0xea>
 800ab58:	b106      	cbz	r6, 800ab5c <_strtol_l.constprop.0+0xe0>
 800ab5a:	4240      	negs	r0, r0
 800ab5c:	f1b8 0f00 	cmp.w	r8, #0
 800ab60:	d099      	beq.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	d1f6      	bne.n	800ab54 <_strtol_l.constprop.0+0xd8>
 800ab66:	f8c8 1000 	str.w	r1, [r8]
 800ab6a:	e794      	b.n	800aa96 <_strtol_l.constprop.0+0x1a>
 800ab6c:	08011d39 	.word	0x08011d39

0800ab70 <_strtol_r>:
 800ab70:	f7ff bf84 	b.w	800aa7c <_strtol_l.constprop.0>

0800ab74 <strtol>:
 800ab74:	4613      	mov	r3, r2
 800ab76:	460a      	mov	r2, r1
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4802      	ldr	r0, [pc, #8]	@ (800ab84 <strtol+0x10>)
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	f7ff bf7d 	b.w	800aa7c <_strtol_l.constprop.0>
 800ab82:	bf00      	nop
 800ab84:	200001a4 	.word	0x200001a4

0800ab88 <__cvt>:
 800ab88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	ec57 6b10 	vmov	r6, r7, d0
 800ab90:	2f00      	cmp	r7, #0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4619      	mov	r1, r3
 800ab96:	463b      	mov	r3, r7
 800ab98:	bfbb      	ittet	lt
 800ab9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ab9e:	461f      	movlt	r7, r3
 800aba0:	2300      	movge	r3, #0
 800aba2:	232d      	movlt	r3, #45	@ 0x2d
 800aba4:	700b      	strb	r3, [r1, #0]
 800aba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aba8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800abac:	4691      	mov	r9, r2
 800abae:	f023 0820 	bic.w	r8, r3, #32
 800abb2:	bfbc      	itt	lt
 800abb4:	4632      	movlt	r2, r6
 800abb6:	4616      	movlt	r6, r2
 800abb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abbc:	d005      	beq.n	800abca <__cvt+0x42>
 800abbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800abc2:	d100      	bne.n	800abc6 <__cvt+0x3e>
 800abc4:	3401      	adds	r4, #1
 800abc6:	2102      	movs	r1, #2
 800abc8:	e000      	b.n	800abcc <__cvt+0x44>
 800abca:	2103      	movs	r1, #3
 800abcc:	ab03      	add	r3, sp, #12
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	ab02      	add	r3, sp, #8
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	ec47 6b10 	vmov	d0, r6, r7
 800abd8:	4653      	mov	r3, sl
 800abda:	4622      	mov	r2, r4
 800abdc:	f002 f82c 	bl	800cc38 <_dtoa_r>
 800abe0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800abe4:	4605      	mov	r5, r0
 800abe6:	d119      	bne.n	800ac1c <__cvt+0x94>
 800abe8:	f019 0f01 	tst.w	r9, #1
 800abec:	d00e      	beq.n	800ac0c <__cvt+0x84>
 800abee:	eb00 0904 	add.w	r9, r0, r4
 800abf2:	2200      	movs	r2, #0
 800abf4:	2300      	movs	r3, #0
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	f7f5 ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 800abfe:	b108      	cbz	r0, 800ac04 <__cvt+0x7c>
 800ac00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac04:	2230      	movs	r2, #48	@ 0x30
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	454b      	cmp	r3, r9
 800ac0a:	d31e      	bcc.n	800ac4a <__cvt+0xc2>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac10:	1b5b      	subs	r3, r3, r5
 800ac12:	4628      	mov	r0, r5
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	b004      	add	sp, #16
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac20:	eb00 0904 	add.w	r9, r0, r4
 800ac24:	d1e5      	bne.n	800abf2 <__cvt+0x6a>
 800ac26:	7803      	ldrb	r3, [r0, #0]
 800ac28:	2b30      	cmp	r3, #48	@ 0x30
 800ac2a:	d10a      	bne.n	800ac42 <__cvt+0xba>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 ff58 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac38:	b918      	cbnz	r0, 800ac42 <__cvt+0xba>
 800ac3a:	f1c4 0401 	rsb	r4, r4, #1
 800ac3e:	f8ca 4000 	str.w	r4, [sl]
 800ac42:	f8da 3000 	ldr.w	r3, [sl]
 800ac46:	4499      	add	r9, r3
 800ac48:	e7d3      	b.n	800abf2 <__cvt+0x6a>
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	9103      	str	r1, [sp, #12]
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e7d9      	b.n	800ac06 <__cvt+0x7e>

0800ac52 <__exponent>:
 800ac52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac54:	2900      	cmp	r1, #0
 800ac56:	bfba      	itte	lt
 800ac58:	4249      	neglt	r1, r1
 800ac5a:	232d      	movlt	r3, #45	@ 0x2d
 800ac5c:	232b      	movge	r3, #43	@ 0x2b
 800ac5e:	2909      	cmp	r1, #9
 800ac60:	7002      	strb	r2, [r0, #0]
 800ac62:	7043      	strb	r3, [r0, #1]
 800ac64:	dd29      	ble.n	800acba <__exponent+0x68>
 800ac66:	f10d 0307 	add.w	r3, sp, #7
 800ac6a:	461d      	mov	r5, r3
 800ac6c:	270a      	movs	r7, #10
 800ac6e:	461a      	mov	r2, r3
 800ac70:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac74:	fb07 1416 	mls	r4, r7, r6, r1
 800ac78:	3430      	adds	r4, #48	@ 0x30
 800ac7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ac7e:	460c      	mov	r4, r1
 800ac80:	2c63      	cmp	r4, #99	@ 0x63
 800ac82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac86:	4631      	mov	r1, r6
 800ac88:	dcf1      	bgt.n	800ac6e <__exponent+0x1c>
 800ac8a:	3130      	adds	r1, #48	@ 0x30
 800ac8c:	1e94      	subs	r4, r2, #2
 800ac8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ac92:	1c41      	adds	r1, r0, #1
 800ac94:	4623      	mov	r3, r4
 800ac96:	42ab      	cmp	r3, r5
 800ac98:	d30a      	bcc.n	800acb0 <__exponent+0x5e>
 800ac9a:	f10d 0309 	add.w	r3, sp, #9
 800ac9e:	1a9b      	subs	r3, r3, r2
 800aca0:	42ac      	cmp	r4, r5
 800aca2:	bf88      	it	hi
 800aca4:	2300      	movhi	r3, #0
 800aca6:	3302      	adds	r3, #2
 800aca8:	4403      	add	r3, r0
 800acaa:	1a18      	subs	r0, r3, r0
 800acac:	b003      	add	sp, #12
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800acb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800acb8:	e7ed      	b.n	800ac96 <__exponent+0x44>
 800acba:	2330      	movs	r3, #48	@ 0x30
 800acbc:	3130      	adds	r1, #48	@ 0x30
 800acbe:	7083      	strb	r3, [r0, #2]
 800acc0:	70c1      	strb	r1, [r0, #3]
 800acc2:	1d03      	adds	r3, r0, #4
 800acc4:	e7f1      	b.n	800acaa <__exponent+0x58>
	...

0800acc8 <_printf_float>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	b08d      	sub	sp, #52	@ 0x34
 800acce:	460c      	mov	r4, r1
 800acd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800acd4:	4616      	mov	r6, r2
 800acd6:	461f      	mov	r7, r3
 800acd8:	4605      	mov	r5, r0
 800acda:	f001 fe1b 	bl	800c914 <_localeconv_r>
 800acde:	6803      	ldr	r3, [r0, #0]
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7f5 fad4 	bl	8000290 <strlen>
 800ace8:	2300      	movs	r3, #0
 800acea:	930a      	str	r3, [sp, #40]	@ 0x28
 800acec:	f8d8 3000 	ldr.w	r3, [r8]
 800acf0:	9005      	str	r0, [sp, #20]
 800acf2:	3307      	adds	r3, #7
 800acf4:	f023 0307 	bic.w	r3, r3, #7
 800acf8:	f103 0208 	add.w	r2, r3, #8
 800acfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad00:	f8d4 b000 	ldr.w	fp, [r4]
 800ad04:	f8c8 2000 	str.w	r2, [r8]
 800ad08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad10:	9307      	str	r3, [sp, #28]
 800ad12:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad1e:	4b9c      	ldr	r3, [pc, #624]	@ (800af90 <_printf_float+0x2c8>)
 800ad20:	f04f 32ff 	mov.w	r2, #4294967295
 800ad24:	f7f5 ff12 	bl	8000b4c <__aeabi_dcmpun>
 800ad28:	bb70      	cbnz	r0, 800ad88 <_printf_float+0xc0>
 800ad2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad2e:	4b98      	ldr	r3, [pc, #608]	@ (800af90 <_printf_float+0x2c8>)
 800ad30:	f04f 32ff 	mov.w	r2, #4294967295
 800ad34:	f7f5 feec 	bl	8000b10 <__aeabi_dcmple>
 800ad38:	bb30      	cbnz	r0, 800ad88 <_printf_float+0xc0>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	f7f5 fedb 	bl	8000afc <__aeabi_dcmplt>
 800ad46:	b110      	cbz	r0, 800ad4e <_printf_float+0x86>
 800ad48:	232d      	movs	r3, #45	@ 0x2d
 800ad4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4e:	4a91      	ldr	r2, [pc, #580]	@ (800af94 <_printf_float+0x2cc>)
 800ad50:	4b91      	ldr	r3, [pc, #580]	@ (800af98 <_printf_float+0x2d0>)
 800ad52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad56:	bf94      	ite	ls
 800ad58:	4690      	movls	r8, r2
 800ad5a:	4698      	movhi	r8, r3
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	f02b 0304 	bic.w	r3, fp, #4
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	f04f 0900 	mov.w	r9, #0
 800ad6a:	9700      	str	r7, [sp, #0]
 800ad6c:	4633      	mov	r3, r6
 800ad6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad70:	4621      	mov	r1, r4
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 f9d2 	bl	800b11c <_printf_common>
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f040 808d 	bne.w	800ae98 <_printf_float+0x1d0>
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	b00d      	add	sp, #52	@ 0x34
 800ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 fedc 	bl	8000b4c <__aeabi_dcmpun>
 800ad94:	b140      	cbz	r0, 800ada8 <_printf_float+0xe0>
 800ad96:	464b      	mov	r3, r9
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfbc      	itt	lt
 800ad9c:	232d      	movlt	r3, #45	@ 0x2d
 800ad9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ada2:	4a7e      	ldr	r2, [pc, #504]	@ (800af9c <_printf_float+0x2d4>)
 800ada4:	4b7e      	ldr	r3, [pc, #504]	@ (800afa0 <_printf_float+0x2d8>)
 800ada6:	e7d4      	b.n	800ad52 <_printf_float+0x8a>
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800adae:	9206      	str	r2, [sp, #24]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	d13b      	bne.n	800ae2c <_printf_float+0x164>
 800adb4:	2306      	movs	r3, #6
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800adbc:	2300      	movs	r3, #0
 800adbe:	6022      	str	r2, [r4, #0]
 800adc0:	9303      	str	r3, [sp, #12]
 800adc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800adc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800adc8:	ab09      	add	r3, sp, #36	@ 0x24
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	6861      	ldr	r1, [r4, #4]
 800adce:	ec49 8b10 	vmov	d0, r8, r9
 800add2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800add6:	4628      	mov	r0, r5
 800add8:	f7ff fed6 	bl	800ab88 <__cvt>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ade0:	2b47      	cmp	r3, #71	@ 0x47
 800ade2:	4680      	mov	r8, r0
 800ade4:	d129      	bne.n	800ae3a <_printf_float+0x172>
 800ade6:	1cc8      	adds	r0, r1, #3
 800ade8:	db02      	blt.n	800adf0 <_printf_float+0x128>
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	4299      	cmp	r1, r3
 800adee:	dd41      	ble.n	800ae74 <_printf_float+0x1ac>
 800adf0:	f1aa 0a02 	sub.w	sl, sl, #2
 800adf4:	fa5f fa8a 	uxtb.w	sl, sl
 800adf8:	3901      	subs	r1, #1
 800adfa:	4652      	mov	r2, sl
 800adfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae00:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae02:	f7ff ff26 	bl	800ac52 <__exponent>
 800ae06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae08:	1813      	adds	r3, r2, r0
 800ae0a:	2a01      	cmp	r2, #1
 800ae0c:	4681      	mov	r9, r0
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	dc02      	bgt.n	800ae18 <_printf_float+0x150>
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	07d2      	lsls	r2, r2, #31
 800ae16:	d501      	bpl.n	800ae1c <_printf_float+0x154>
 800ae18:	3301      	adds	r3, #1
 800ae1a:	6123      	str	r3, [r4, #16]
 800ae1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0a2      	beq.n	800ad6a <_printf_float+0xa2>
 800ae24:	232d      	movs	r3, #45	@ 0x2d
 800ae26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae2a:	e79e      	b.n	800ad6a <_printf_float+0xa2>
 800ae2c:	9a06      	ldr	r2, [sp, #24]
 800ae2e:	2a47      	cmp	r2, #71	@ 0x47
 800ae30:	d1c2      	bne.n	800adb8 <_printf_float+0xf0>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1c0      	bne.n	800adb8 <_printf_float+0xf0>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e7bd      	b.n	800adb6 <_printf_float+0xee>
 800ae3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae3e:	d9db      	bls.n	800adf8 <_printf_float+0x130>
 800ae40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae44:	d118      	bne.n	800ae78 <_printf_float+0x1b0>
 800ae46:	2900      	cmp	r1, #0
 800ae48:	6863      	ldr	r3, [r4, #4]
 800ae4a:	dd0b      	ble.n	800ae64 <_printf_float+0x19c>
 800ae4c:	6121      	str	r1, [r4, #16]
 800ae4e:	b913      	cbnz	r3, 800ae56 <_printf_float+0x18e>
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	07d0      	lsls	r0, r2, #31
 800ae54:	d502      	bpl.n	800ae5c <_printf_float+0x194>
 800ae56:	3301      	adds	r3, #1
 800ae58:	440b      	add	r3, r1
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae5e:	f04f 0900 	mov.w	r9, #0
 800ae62:	e7db      	b.n	800ae1c <_printf_float+0x154>
 800ae64:	b913      	cbnz	r3, 800ae6c <_printf_float+0x1a4>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	07d2      	lsls	r2, r2, #31
 800ae6a:	d501      	bpl.n	800ae70 <_printf_float+0x1a8>
 800ae6c:	3302      	adds	r3, #2
 800ae6e:	e7f4      	b.n	800ae5a <_printf_float+0x192>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e7f2      	b.n	800ae5a <_printf_float+0x192>
 800ae74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae7a:	4299      	cmp	r1, r3
 800ae7c:	db05      	blt.n	800ae8a <_printf_float+0x1c2>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	6121      	str	r1, [r4, #16]
 800ae82:	07d8      	lsls	r0, r3, #31
 800ae84:	d5ea      	bpl.n	800ae5c <_printf_float+0x194>
 800ae86:	1c4b      	adds	r3, r1, #1
 800ae88:	e7e7      	b.n	800ae5a <_printf_float+0x192>
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	bfd4      	ite	le
 800ae8e:	f1c1 0202 	rsble	r2, r1, #2
 800ae92:	2201      	movgt	r2, #1
 800ae94:	4413      	add	r3, r2
 800ae96:	e7e0      	b.n	800ae5a <_printf_float+0x192>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	055a      	lsls	r2, r3, #21
 800ae9c:	d407      	bmi.n	800aeae <_printf_float+0x1e6>
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	4642      	mov	r2, r8
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b8      	blx	r7
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d12b      	bne.n	800af04 <_printf_float+0x23c>
 800aeac:	e767      	b.n	800ad7e <_printf_float+0xb6>
 800aeae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aeb2:	f240 80dd 	bls.w	800b070 <_printf_float+0x3a8>
 800aeb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	f7f5 fe13 	bl	8000ae8 <__aeabi_dcmpeq>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d033      	beq.n	800af2e <_printf_float+0x266>
 800aec6:	4a37      	ldr	r2, [pc, #220]	@ (800afa4 <_printf_float+0x2dc>)
 800aec8:	2301      	movs	r3, #1
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	f43f af54 	beq.w	800ad7e <_printf_float+0xb6>
 800aed6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aeda:	4543      	cmp	r3, r8
 800aedc:	db02      	blt.n	800aee4 <_printf_float+0x21c>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	07d8      	lsls	r0, r3, #31
 800aee2:	d50f      	bpl.n	800af04 <_printf_float+0x23c>
 800aee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aee8:	4631      	mov	r1, r6
 800aeea:	4628      	mov	r0, r5
 800aeec:	47b8      	blx	r7
 800aeee:	3001      	adds	r0, #1
 800aef0:	f43f af45 	beq.w	800ad7e <_printf_float+0xb6>
 800aef4:	f04f 0900 	mov.w	r9, #0
 800aef8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aefc:	f104 0a1a 	add.w	sl, r4, #26
 800af00:	45c8      	cmp	r8, r9
 800af02:	dc09      	bgt.n	800af18 <_printf_float+0x250>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	079b      	lsls	r3, r3, #30
 800af08:	f100 8103 	bmi.w	800b112 <_printf_float+0x44a>
 800af0c:	68e0      	ldr	r0, [r4, #12]
 800af0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af10:	4298      	cmp	r0, r3
 800af12:	bfb8      	it	lt
 800af14:	4618      	movlt	r0, r3
 800af16:	e734      	b.n	800ad82 <_printf_float+0xba>
 800af18:	2301      	movs	r3, #1
 800af1a:	4652      	mov	r2, sl
 800af1c:	4631      	mov	r1, r6
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	f43f af2b 	beq.w	800ad7e <_printf_float+0xb6>
 800af28:	f109 0901 	add.w	r9, r9, #1
 800af2c:	e7e8      	b.n	800af00 <_printf_float+0x238>
 800af2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc39      	bgt.n	800afa8 <_printf_float+0x2e0>
 800af34:	4a1b      	ldr	r2, [pc, #108]	@ (800afa4 <_printf_float+0x2dc>)
 800af36:	2301      	movs	r3, #1
 800af38:	4631      	mov	r1, r6
 800af3a:	4628      	mov	r0, r5
 800af3c:	47b8      	blx	r7
 800af3e:	3001      	adds	r0, #1
 800af40:	f43f af1d 	beq.w	800ad7e <_printf_float+0xb6>
 800af44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af48:	ea59 0303 	orrs.w	r3, r9, r3
 800af4c:	d102      	bne.n	800af54 <_printf_float+0x28c>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	07d9      	lsls	r1, r3, #31
 800af52:	d5d7      	bpl.n	800af04 <_printf_float+0x23c>
 800af54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af58:	4631      	mov	r1, r6
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b8      	blx	r7
 800af5e:	3001      	adds	r0, #1
 800af60:	f43f af0d 	beq.w	800ad7e <_printf_float+0xb6>
 800af64:	f04f 0a00 	mov.w	sl, #0
 800af68:	f104 0b1a 	add.w	fp, r4, #26
 800af6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6e:	425b      	negs	r3, r3
 800af70:	4553      	cmp	r3, sl
 800af72:	dc01      	bgt.n	800af78 <_printf_float+0x2b0>
 800af74:	464b      	mov	r3, r9
 800af76:	e793      	b.n	800aea0 <_printf_float+0x1d8>
 800af78:	2301      	movs	r3, #1
 800af7a:	465a      	mov	r2, fp
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	f43f aefb 	beq.w	800ad7e <_printf_float+0xb6>
 800af88:	f10a 0a01 	add.w	sl, sl, #1
 800af8c:	e7ee      	b.n	800af6c <_printf_float+0x2a4>
 800af8e:	bf00      	nop
 800af90:	7fefffff 	.word	0x7fefffff
 800af94:	08011e39 	.word	0x08011e39
 800af98:	08011e3d 	.word	0x08011e3d
 800af9c:	08011e41 	.word	0x08011e41
 800afa0:	08011e45 	.word	0x08011e45
 800afa4:	0801218f 	.word	0x0801218f
 800afa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afae:	4553      	cmp	r3, sl
 800afb0:	bfa8      	it	ge
 800afb2:	4653      	movge	r3, sl
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	4699      	mov	r9, r3
 800afb8:	dc36      	bgt.n	800b028 <_printf_float+0x360>
 800afba:	f04f 0b00 	mov.w	fp, #0
 800afbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afc2:	f104 021a 	add.w	r2, r4, #26
 800afc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afc8:	9306      	str	r3, [sp, #24]
 800afca:	eba3 0309 	sub.w	r3, r3, r9
 800afce:	455b      	cmp	r3, fp
 800afd0:	dc31      	bgt.n	800b036 <_printf_float+0x36e>
 800afd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd4:	459a      	cmp	sl, r3
 800afd6:	dc3a      	bgt.n	800b04e <_printf_float+0x386>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	07da      	lsls	r2, r3, #31
 800afdc:	d437      	bmi.n	800b04e <_printf_float+0x386>
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	ebaa 0903 	sub.w	r9, sl, r3
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	ebaa 0303 	sub.w	r3, sl, r3
 800afea:	4599      	cmp	r9, r3
 800afec:	bfa8      	it	ge
 800afee:	4699      	movge	r9, r3
 800aff0:	f1b9 0f00 	cmp.w	r9, #0
 800aff4:	dc33      	bgt.n	800b05e <_printf_float+0x396>
 800aff6:	f04f 0800 	mov.w	r8, #0
 800affa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800affe:	f104 0b1a 	add.w	fp, r4, #26
 800b002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b004:	ebaa 0303 	sub.w	r3, sl, r3
 800b008:	eba3 0309 	sub.w	r3, r3, r9
 800b00c:	4543      	cmp	r3, r8
 800b00e:	f77f af79 	ble.w	800af04 <_printf_float+0x23c>
 800b012:	2301      	movs	r3, #1
 800b014:	465a      	mov	r2, fp
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f aeae 	beq.w	800ad7e <_printf_float+0xb6>
 800b022:	f108 0801 	add.w	r8, r8, #1
 800b026:	e7ec      	b.n	800b002 <_printf_float+0x33a>
 800b028:	4642      	mov	r2, r8
 800b02a:	4631      	mov	r1, r6
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b8      	blx	r7
 800b030:	3001      	adds	r0, #1
 800b032:	d1c2      	bne.n	800afba <_printf_float+0x2f2>
 800b034:	e6a3      	b.n	800ad7e <_printf_float+0xb6>
 800b036:	2301      	movs	r3, #1
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	9206      	str	r2, [sp, #24]
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f ae9c 	beq.w	800ad7e <_printf_float+0xb6>
 800b046:	9a06      	ldr	r2, [sp, #24]
 800b048:	f10b 0b01 	add.w	fp, fp, #1
 800b04c:	e7bb      	b.n	800afc6 <_printf_float+0x2fe>
 800b04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	d1c0      	bne.n	800afde <_printf_float+0x316>
 800b05c:	e68f      	b.n	800ad7e <_printf_float+0xb6>
 800b05e:	9a06      	ldr	r2, [sp, #24]
 800b060:	464b      	mov	r3, r9
 800b062:	4442      	add	r2, r8
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	d1c3      	bne.n	800aff6 <_printf_float+0x32e>
 800b06e:	e686      	b.n	800ad7e <_printf_float+0xb6>
 800b070:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b074:	f1ba 0f01 	cmp.w	sl, #1
 800b078:	dc01      	bgt.n	800b07e <_printf_float+0x3b6>
 800b07a:	07db      	lsls	r3, r3, #31
 800b07c:	d536      	bpl.n	800b0ec <_printf_float+0x424>
 800b07e:	2301      	movs	r3, #1
 800b080:	4642      	mov	r2, r8
 800b082:	4631      	mov	r1, r6
 800b084:	4628      	mov	r0, r5
 800b086:	47b8      	blx	r7
 800b088:	3001      	adds	r0, #1
 800b08a:	f43f ae78 	beq.w	800ad7e <_printf_float+0xb6>
 800b08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	47b8      	blx	r7
 800b098:	3001      	adds	r0, #1
 800b09a:	f43f ae70 	beq.w	800ad7e <_printf_float+0xb6>
 800b09e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0aa:	f7f5 fd1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0ae:	b9c0      	cbnz	r0, 800b0e2 <_printf_float+0x41a>
 800b0b0:	4653      	mov	r3, sl
 800b0b2:	f108 0201 	add.w	r2, r8, #1
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b8      	blx	r7
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d10c      	bne.n	800b0da <_printf_float+0x412>
 800b0c0:	e65d      	b.n	800ad7e <_printf_float+0xb6>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	465a      	mov	r2, fp
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f43f ae56 	beq.w	800ad7e <_printf_float+0xb6>
 800b0d2:	f108 0801 	add.w	r8, r8, #1
 800b0d6:	45d0      	cmp	r8, sl
 800b0d8:	dbf3      	blt.n	800b0c2 <_printf_float+0x3fa>
 800b0da:	464b      	mov	r3, r9
 800b0dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b0e0:	e6df      	b.n	800aea2 <_printf_float+0x1da>
 800b0e2:	f04f 0800 	mov.w	r8, #0
 800b0e6:	f104 0b1a 	add.w	fp, r4, #26
 800b0ea:	e7f4      	b.n	800b0d6 <_printf_float+0x40e>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	4642      	mov	r2, r8
 800b0f0:	e7e1      	b.n	800b0b6 <_printf_float+0x3ee>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	464a      	mov	r2, r9
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	47b8      	blx	r7
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f43f ae3e 	beq.w	800ad7e <_printf_float+0xb6>
 800b102:	f108 0801 	add.w	r8, r8, #1
 800b106:	68e3      	ldr	r3, [r4, #12]
 800b108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b10a:	1a5b      	subs	r3, r3, r1
 800b10c:	4543      	cmp	r3, r8
 800b10e:	dcf0      	bgt.n	800b0f2 <_printf_float+0x42a>
 800b110:	e6fc      	b.n	800af0c <_printf_float+0x244>
 800b112:	f04f 0800 	mov.w	r8, #0
 800b116:	f104 0919 	add.w	r9, r4, #25
 800b11a:	e7f4      	b.n	800b106 <_printf_float+0x43e>

0800b11c <_printf_common>:
 800b11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	4616      	mov	r6, r2
 800b122:	4698      	mov	r8, r3
 800b124:	688a      	ldr	r2, [r1, #8]
 800b126:	690b      	ldr	r3, [r1, #16]
 800b128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b12c:	4293      	cmp	r3, r2
 800b12e:	bfb8      	it	lt
 800b130:	4613      	movlt	r3, r2
 800b132:	6033      	str	r3, [r6, #0]
 800b134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b138:	4607      	mov	r7, r0
 800b13a:	460c      	mov	r4, r1
 800b13c:	b10a      	cbz	r2, 800b142 <_printf_common+0x26>
 800b13e:	3301      	adds	r3, #1
 800b140:	6033      	str	r3, [r6, #0]
 800b142:	6823      	ldr	r3, [r4, #0]
 800b144:	0699      	lsls	r1, r3, #26
 800b146:	bf42      	ittt	mi
 800b148:	6833      	ldrmi	r3, [r6, #0]
 800b14a:	3302      	addmi	r3, #2
 800b14c:	6033      	strmi	r3, [r6, #0]
 800b14e:	6825      	ldr	r5, [r4, #0]
 800b150:	f015 0506 	ands.w	r5, r5, #6
 800b154:	d106      	bne.n	800b164 <_printf_common+0x48>
 800b156:	f104 0a19 	add.w	sl, r4, #25
 800b15a:	68e3      	ldr	r3, [r4, #12]
 800b15c:	6832      	ldr	r2, [r6, #0]
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	42ab      	cmp	r3, r5
 800b162:	dc26      	bgt.n	800b1b2 <_printf_common+0x96>
 800b164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	3b00      	subs	r3, #0
 800b16c:	bf18      	it	ne
 800b16e:	2301      	movne	r3, #1
 800b170:	0692      	lsls	r2, r2, #26
 800b172:	d42b      	bmi.n	800b1cc <_printf_common+0xb0>
 800b174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b178:	4641      	mov	r1, r8
 800b17a:	4638      	mov	r0, r7
 800b17c:	47c8      	blx	r9
 800b17e:	3001      	adds	r0, #1
 800b180:	d01e      	beq.n	800b1c0 <_printf_common+0xa4>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	6922      	ldr	r2, [r4, #16]
 800b186:	f003 0306 	and.w	r3, r3, #6
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	bf02      	ittt	eq
 800b18e:	68e5      	ldreq	r5, [r4, #12]
 800b190:	6833      	ldreq	r3, [r6, #0]
 800b192:	1aed      	subeq	r5, r5, r3
 800b194:	68a3      	ldr	r3, [r4, #8]
 800b196:	bf0c      	ite	eq
 800b198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b19c:	2500      	movne	r5, #0
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	bfc4      	itt	gt
 800b1a2:	1a9b      	subgt	r3, r3, r2
 800b1a4:	18ed      	addgt	r5, r5, r3
 800b1a6:	2600      	movs	r6, #0
 800b1a8:	341a      	adds	r4, #26
 800b1aa:	42b5      	cmp	r5, r6
 800b1ac:	d11a      	bne.n	800b1e4 <_printf_common+0xc8>
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	e008      	b.n	800b1c4 <_printf_common+0xa8>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4652      	mov	r2, sl
 800b1b6:	4641      	mov	r1, r8
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	47c8      	blx	r9
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d103      	bne.n	800b1c8 <_printf_common+0xac>
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c8:	3501      	adds	r5, #1
 800b1ca:	e7c6      	b.n	800b15a <_printf_common+0x3e>
 800b1cc:	18e1      	adds	r1, r4, r3
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	2030      	movs	r0, #48	@ 0x30
 800b1d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1d6:	4422      	add	r2, r4
 800b1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	e7c7      	b.n	800b174 <_printf_common+0x58>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	47c8      	blx	r9
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d0e6      	beq.n	800b1c0 <_printf_common+0xa4>
 800b1f2:	3601      	adds	r6, #1
 800b1f4:	e7d9      	b.n	800b1aa <_printf_common+0x8e>
	...

0800b1f8 <_printf_i>:
 800b1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	7e0f      	ldrb	r7, [r1, #24]
 800b1fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b200:	2f78      	cmp	r7, #120	@ 0x78
 800b202:	4691      	mov	r9, r2
 800b204:	4680      	mov	r8, r0
 800b206:	460c      	mov	r4, r1
 800b208:	469a      	mov	sl, r3
 800b20a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b20e:	d807      	bhi.n	800b220 <_printf_i+0x28>
 800b210:	2f62      	cmp	r7, #98	@ 0x62
 800b212:	d80a      	bhi.n	800b22a <_printf_i+0x32>
 800b214:	2f00      	cmp	r7, #0
 800b216:	f000 80d2 	beq.w	800b3be <_printf_i+0x1c6>
 800b21a:	2f58      	cmp	r7, #88	@ 0x58
 800b21c:	f000 80b9 	beq.w	800b392 <_printf_i+0x19a>
 800b220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b228:	e03a      	b.n	800b2a0 <_printf_i+0xa8>
 800b22a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b22e:	2b15      	cmp	r3, #21
 800b230:	d8f6      	bhi.n	800b220 <_printf_i+0x28>
 800b232:	a101      	add	r1, pc, #4	@ (adr r1, 800b238 <_printf_i+0x40>)
 800b234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b238:	0800b291 	.word	0x0800b291
 800b23c:	0800b2a5 	.word	0x0800b2a5
 800b240:	0800b221 	.word	0x0800b221
 800b244:	0800b221 	.word	0x0800b221
 800b248:	0800b221 	.word	0x0800b221
 800b24c:	0800b221 	.word	0x0800b221
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b221 	.word	0x0800b221
 800b258:	0800b221 	.word	0x0800b221
 800b25c:	0800b221 	.word	0x0800b221
 800b260:	0800b221 	.word	0x0800b221
 800b264:	0800b3a5 	.word	0x0800b3a5
 800b268:	0800b2cf 	.word	0x0800b2cf
 800b26c:	0800b35f 	.word	0x0800b35f
 800b270:	0800b221 	.word	0x0800b221
 800b274:	0800b221 	.word	0x0800b221
 800b278:	0800b3c7 	.word	0x0800b3c7
 800b27c:	0800b221 	.word	0x0800b221
 800b280:	0800b2cf 	.word	0x0800b2cf
 800b284:	0800b221 	.word	0x0800b221
 800b288:	0800b221 	.word	0x0800b221
 800b28c:	0800b367 	.word	0x0800b367
 800b290:	6833      	ldr	r3, [r6, #0]
 800b292:	1d1a      	adds	r2, r3, #4
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6032      	str	r2, [r6, #0]
 800b298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b29c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e09d      	b.n	800b3e0 <_printf_i+0x1e8>
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	1d19      	adds	r1, r3, #4
 800b2aa:	6031      	str	r1, [r6, #0]
 800b2ac:	0606      	lsls	r6, r0, #24
 800b2ae:	d501      	bpl.n	800b2b4 <_printf_i+0xbc>
 800b2b0:	681d      	ldr	r5, [r3, #0]
 800b2b2:	e003      	b.n	800b2bc <_printf_i+0xc4>
 800b2b4:	0645      	lsls	r5, r0, #25
 800b2b6:	d5fb      	bpl.n	800b2b0 <_printf_i+0xb8>
 800b2b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	da03      	bge.n	800b2c8 <_printf_i+0xd0>
 800b2c0:	232d      	movs	r3, #45	@ 0x2d
 800b2c2:	426d      	negs	r5, r5
 800b2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2c8:	4859      	ldr	r0, [pc, #356]	@ (800b430 <_printf_i+0x238>)
 800b2ca:	230a      	movs	r3, #10
 800b2cc:	e011      	b.n	800b2f2 <_printf_i+0xfa>
 800b2ce:	6821      	ldr	r1, [r4, #0]
 800b2d0:	6833      	ldr	r3, [r6, #0]
 800b2d2:	0608      	lsls	r0, r1, #24
 800b2d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2d8:	d402      	bmi.n	800b2e0 <_printf_i+0xe8>
 800b2da:	0649      	lsls	r1, r1, #25
 800b2dc:	bf48      	it	mi
 800b2de:	b2ad      	uxthmi	r5, r5
 800b2e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2e2:	4853      	ldr	r0, [pc, #332]	@ (800b430 <_printf_i+0x238>)
 800b2e4:	6033      	str	r3, [r6, #0]
 800b2e6:	bf14      	ite	ne
 800b2e8:	230a      	movne	r3, #10
 800b2ea:	2308      	moveq	r3, #8
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2f2:	6866      	ldr	r6, [r4, #4]
 800b2f4:	60a6      	str	r6, [r4, #8]
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	bfa2      	ittt	ge
 800b2fa:	6821      	ldrge	r1, [r4, #0]
 800b2fc:	f021 0104 	bicge.w	r1, r1, #4
 800b300:	6021      	strge	r1, [r4, #0]
 800b302:	b90d      	cbnz	r5, 800b308 <_printf_i+0x110>
 800b304:	2e00      	cmp	r6, #0
 800b306:	d04b      	beq.n	800b3a0 <_printf_i+0x1a8>
 800b308:	4616      	mov	r6, r2
 800b30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b30e:	fb03 5711 	mls	r7, r3, r1, r5
 800b312:	5dc7      	ldrb	r7, [r0, r7]
 800b314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b318:	462f      	mov	r7, r5
 800b31a:	42bb      	cmp	r3, r7
 800b31c:	460d      	mov	r5, r1
 800b31e:	d9f4      	bls.n	800b30a <_printf_i+0x112>
 800b320:	2b08      	cmp	r3, #8
 800b322:	d10b      	bne.n	800b33c <_printf_i+0x144>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	07df      	lsls	r7, r3, #31
 800b328:	d508      	bpl.n	800b33c <_printf_i+0x144>
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	4299      	cmp	r1, r3
 800b330:	bfde      	ittt	le
 800b332:	2330      	movle	r3, #48	@ 0x30
 800b334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b33c:	1b92      	subs	r2, r2, r6
 800b33e:	6122      	str	r2, [r4, #16]
 800b340:	f8cd a000 	str.w	sl, [sp]
 800b344:	464b      	mov	r3, r9
 800b346:	aa03      	add	r2, sp, #12
 800b348:	4621      	mov	r1, r4
 800b34a:	4640      	mov	r0, r8
 800b34c:	f7ff fee6 	bl	800b11c <_printf_common>
 800b350:	3001      	adds	r0, #1
 800b352:	d14a      	bne.n	800b3ea <_printf_i+0x1f2>
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	b004      	add	sp, #16
 800b35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	f043 0320 	orr.w	r3, r3, #32
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	4833      	ldr	r0, [pc, #204]	@ (800b434 <_printf_i+0x23c>)
 800b368:	2778      	movs	r7, #120	@ 0x78
 800b36a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	6831      	ldr	r1, [r6, #0]
 800b372:	061f      	lsls	r7, r3, #24
 800b374:	f851 5b04 	ldr.w	r5, [r1], #4
 800b378:	d402      	bmi.n	800b380 <_printf_i+0x188>
 800b37a:	065f      	lsls	r7, r3, #25
 800b37c:	bf48      	it	mi
 800b37e:	b2ad      	uxthmi	r5, r5
 800b380:	6031      	str	r1, [r6, #0]
 800b382:	07d9      	lsls	r1, r3, #31
 800b384:	bf44      	itt	mi
 800b386:	f043 0320 	orrmi.w	r3, r3, #32
 800b38a:	6023      	strmi	r3, [r4, #0]
 800b38c:	b11d      	cbz	r5, 800b396 <_printf_i+0x19e>
 800b38e:	2310      	movs	r3, #16
 800b390:	e7ac      	b.n	800b2ec <_printf_i+0xf4>
 800b392:	4827      	ldr	r0, [pc, #156]	@ (800b430 <_printf_i+0x238>)
 800b394:	e7e9      	b.n	800b36a <_printf_i+0x172>
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	f023 0320 	bic.w	r3, r3, #32
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	e7f6      	b.n	800b38e <_printf_i+0x196>
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	e7bd      	b.n	800b320 <_printf_i+0x128>
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	6961      	ldr	r1, [r4, #20]
 800b3aa:	1d18      	adds	r0, r3, #4
 800b3ac:	6030      	str	r0, [r6, #0]
 800b3ae:	062e      	lsls	r6, r5, #24
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	d501      	bpl.n	800b3b8 <_printf_i+0x1c0>
 800b3b4:	6019      	str	r1, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <_printf_i+0x1c6>
 800b3b8:	0668      	lsls	r0, r5, #25
 800b3ba:	d5fb      	bpl.n	800b3b4 <_printf_i+0x1bc>
 800b3bc:	8019      	strh	r1, [r3, #0]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	4616      	mov	r6, r2
 800b3c4:	e7bc      	b.n	800b340 <_printf_i+0x148>
 800b3c6:	6833      	ldr	r3, [r6, #0]
 800b3c8:	1d1a      	adds	r2, r3, #4
 800b3ca:	6032      	str	r2, [r6, #0]
 800b3cc:	681e      	ldr	r6, [r3, #0]
 800b3ce:	6862      	ldr	r2, [r4, #4]
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7f4 ff0c 	bl	80001f0 <memchr>
 800b3d8:	b108      	cbz	r0, 800b3de <_printf_i+0x1e6>
 800b3da:	1b80      	subs	r0, r0, r6
 800b3dc:	6060      	str	r0, [r4, #4]
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e8:	e7aa      	b.n	800b340 <_printf_i+0x148>
 800b3ea:	6923      	ldr	r3, [r4, #16]
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	47d0      	blx	sl
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d0ad      	beq.n	800b354 <_printf_i+0x15c>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	079b      	lsls	r3, r3, #30
 800b3fc:	d413      	bmi.n	800b426 <_printf_i+0x22e>
 800b3fe:	68e0      	ldr	r0, [r4, #12]
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	4298      	cmp	r0, r3
 800b404:	bfb8      	it	lt
 800b406:	4618      	movlt	r0, r3
 800b408:	e7a6      	b.n	800b358 <_printf_i+0x160>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4632      	mov	r2, r6
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d09d      	beq.n	800b354 <_printf_i+0x15c>
 800b418:	3501      	adds	r5, #1
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	9903      	ldr	r1, [sp, #12]
 800b41e:	1a5b      	subs	r3, r3, r1
 800b420:	42ab      	cmp	r3, r5
 800b422:	dcf2      	bgt.n	800b40a <_printf_i+0x212>
 800b424:	e7eb      	b.n	800b3fe <_printf_i+0x206>
 800b426:	2500      	movs	r5, #0
 800b428:	f104 0619 	add.w	r6, r4, #25
 800b42c:	e7f5      	b.n	800b41a <_printf_i+0x222>
 800b42e:	bf00      	nop
 800b430:	08011e49 	.word	0x08011e49
 800b434:	08011e5a 	.word	0x08011e5a

0800b438 <_scanf_float>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	b087      	sub	sp, #28
 800b43e:	4617      	mov	r7, r2
 800b440:	9303      	str	r3, [sp, #12]
 800b442:	688b      	ldr	r3, [r1, #8]
 800b444:	1e5a      	subs	r2, r3, #1
 800b446:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b44a:	bf81      	itttt	hi
 800b44c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b450:	eb03 0b05 	addhi.w	fp, r3, r5
 800b454:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b458:	608b      	strhi	r3, [r1, #8]
 800b45a:	680b      	ldr	r3, [r1, #0]
 800b45c:	460a      	mov	r2, r1
 800b45e:	f04f 0500 	mov.w	r5, #0
 800b462:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b466:	f842 3b1c 	str.w	r3, [r2], #28
 800b46a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b46e:	4680      	mov	r8, r0
 800b470:	460c      	mov	r4, r1
 800b472:	bf98      	it	ls
 800b474:	f04f 0b00 	movls.w	fp, #0
 800b478:	9201      	str	r2, [sp, #4]
 800b47a:	4616      	mov	r6, r2
 800b47c:	46aa      	mov	sl, r5
 800b47e:	46a9      	mov	r9, r5
 800b480:	9502      	str	r5, [sp, #8]
 800b482:	68a2      	ldr	r2, [r4, #8]
 800b484:	b152      	cbz	r2, 800b49c <_scanf_float+0x64>
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b48c:	d864      	bhi.n	800b558 <_scanf_float+0x120>
 800b48e:	2b40      	cmp	r3, #64	@ 0x40
 800b490:	d83c      	bhi.n	800b50c <_scanf_float+0xd4>
 800b492:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b496:	b2c8      	uxtb	r0, r1
 800b498:	280e      	cmp	r0, #14
 800b49a:	d93a      	bls.n	800b512 <_scanf_float+0xda>
 800b49c:	f1b9 0f00 	cmp.w	r9, #0
 800b4a0:	d003      	beq.n	800b4aa <_scanf_float+0x72>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4ae:	f1ba 0f01 	cmp.w	sl, #1
 800b4b2:	f200 8117 	bhi.w	800b6e4 <_scanf_float+0x2ac>
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	429e      	cmp	r6, r3
 800b4ba:	f200 8108 	bhi.w	800b6ce <_scanf_float+0x296>
 800b4be:	2001      	movs	r0, #1
 800b4c0:	b007      	add	sp, #28
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b4ca:	2a0d      	cmp	r2, #13
 800b4cc:	d8e6      	bhi.n	800b49c <_scanf_float+0x64>
 800b4ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b4d4 <_scanf_float+0x9c>)
 800b4d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4d4:	0800b61b 	.word	0x0800b61b
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b49d 	.word	0x0800b49d
 800b4e4:	0800b67b 	.word	0x0800b67b
 800b4e8:	0800b653 	.word	0x0800b653
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b629 	.word	0x0800b629
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b49d 	.word	0x0800b49d
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b5e1 	.word	0x0800b5e1
 800b50c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b510:	e7db      	b.n	800b4ca <_scanf_float+0x92>
 800b512:	290e      	cmp	r1, #14
 800b514:	d8c2      	bhi.n	800b49c <_scanf_float+0x64>
 800b516:	a001      	add	r0, pc, #4	@ (adr r0, 800b51c <_scanf_float+0xe4>)
 800b518:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b51c:	0800b5d1 	.word	0x0800b5d1
 800b520:	0800b49d 	.word	0x0800b49d
 800b524:	0800b5d1 	.word	0x0800b5d1
 800b528:	0800b667 	.word	0x0800b667
 800b52c:	0800b49d 	.word	0x0800b49d
 800b530:	0800b579 	.word	0x0800b579
 800b534:	0800b5b7 	.word	0x0800b5b7
 800b538:	0800b5b7 	.word	0x0800b5b7
 800b53c:	0800b5b7 	.word	0x0800b5b7
 800b540:	0800b5b7 	.word	0x0800b5b7
 800b544:	0800b5b7 	.word	0x0800b5b7
 800b548:	0800b5b7 	.word	0x0800b5b7
 800b54c:	0800b5b7 	.word	0x0800b5b7
 800b550:	0800b5b7 	.word	0x0800b5b7
 800b554:	0800b5b7 	.word	0x0800b5b7
 800b558:	2b6e      	cmp	r3, #110	@ 0x6e
 800b55a:	d809      	bhi.n	800b570 <_scanf_float+0x138>
 800b55c:	2b60      	cmp	r3, #96	@ 0x60
 800b55e:	d8b2      	bhi.n	800b4c6 <_scanf_float+0x8e>
 800b560:	2b54      	cmp	r3, #84	@ 0x54
 800b562:	d07b      	beq.n	800b65c <_scanf_float+0x224>
 800b564:	2b59      	cmp	r3, #89	@ 0x59
 800b566:	d199      	bne.n	800b49c <_scanf_float+0x64>
 800b568:	2d07      	cmp	r5, #7
 800b56a:	d197      	bne.n	800b49c <_scanf_float+0x64>
 800b56c:	2508      	movs	r5, #8
 800b56e:	e02c      	b.n	800b5ca <_scanf_float+0x192>
 800b570:	2b74      	cmp	r3, #116	@ 0x74
 800b572:	d073      	beq.n	800b65c <_scanf_float+0x224>
 800b574:	2b79      	cmp	r3, #121	@ 0x79
 800b576:	e7f6      	b.n	800b566 <_scanf_float+0x12e>
 800b578:	6821      	ldr	r1, [r4, #0]
 800b57a:	05c8      	lsls	r0, r1, #23
 800b57c:	d51b      	bpl.n	800b5b6 <_scanf_float+0x17e>
 800b57e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b582:	6021      	str	r1, [r4, #0]
 800b584:	f109 0901 	add.w	r9, r9, #1
 800b588:	f1bb 0f00 	cmp.w	fp, #0
 800b58c:	d003      	beq.n	800b596 <_scanf_float+0x15e>
 800b58e:	3201      	adds	r2, #1
 800b590:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b594:	60a2      	str	r2, [r4, #8]
 800b596:	68a3      	ldr	r3, [r4, #8]
 800b598:	3b01      	subs	r3, #1
 800b59a:	60a3      	str	r3, [r4, #8]
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	6123      	str	r3, [r4, #16]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
 800b5aa:	f340 8087 	ble.w	800b6bc <_scanf_float+0x284>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	e765      	b.n	800b482 <_scanf_float+0x4a>
 800b5b6:	eb1a 0105 	adds.w	r1, sl, r5
 800b5ba:	f47f af6f 	bne.w	800b49c <_scanf_float+0x64>
 800b5be:	6822      	ldr	r2, [r4, #0]
 800b5c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	460d      	mov	r5, r1
 800b5c8:	468a      	mov	sl, r1
 800b5ca:	f806 3b01 	strb.w	r3, [r6], #1
 800b5ce:	e7e2      	b.n	800b596 <_scanf_float+0x15e>
 800b5d0:	6822      	ldr	r2, [r4, #0]
 800b5d2:	0610      	lsls	r0, r2, #24
 800b5d4:	f57f af62 	bpl.w	800b49c <_scanf_float+0x64>
 800b5d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5dc:	6022      	str	r2, [r4, #0]
 800b5de:	e7f4      	b.n	800b5ca <_scanf_float+0x192>
 800b5e0:	f1ba 0f00 	cmp.w	sl, #0
 800b5e4:	d10e      	bne.n	800b604 <_scanf_float+0x1cc>
 800b5e6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ea:	d10e      	bne.n	800b60a <_scanf_float+0x1d2>
 800b5ec:	6822      	ldr	r2, [r4, #0]
 800b5ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b5f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b5f6:	d108      	bne.n	800b60a <_scanf_float+0x1d2>
 800b5f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5fc:	6022      	str	r2, [r4, #0]
 800b5fe:	f04f 0a01 	mov.w	sl, #1
 800b602:	e7e2      	b.n	800b5ca <_scanf_float+0x192>
 800b604:	f1ba 0f02 	cmp.w	sl, #2
 800b608:	d055      	beq.n	800b6b6 <_scanf_float+0x27e>
 800b60a:	2d01      	cmp	r5, #1
 800b60c:	d002      	beq.n	800b614 <_scanf_float+0x1dc>
 800b60e:	2d04      	cmp	r5, #4
 800b610:	f47f af44 	bne.w	800b49c <_scanf_float+0x64>
 800b614:	3501      	adds	r5, #1
 800b616:	b2ed      	uxtb	r5, r5
 800b618:	e7d7      	b.n	800b5ca <_scanf_float+0x192>
 800b61a:	f1ba 0f01 	cmp.w	sl, #1
 800b61e:	f47f af3d 	bne.w	800b49c <_scanf_float+0x64>
 800b622:	f04f 0a02 	mov.w	sl, #2
 800b626:	e7d0      	b.n	800b5ca <_scanf_float+0x192>
 800b628:	b97d      	cbnz	r5, 800b64a <_scanf_float+0x212>
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	f47f af38 	bne.w	800b4a2 <_scanf_float+0x6a>
 800b632:	6822      	ldr	r2, [r4, #0]
 800b634:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b638:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b63c:	f040 8108 	bne.w	800b850 <_scanf_float+0x418>
 800b640:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b644:	6022      	str	r2, [r4, #0]
 800b646:	2501      	movs	r5, #1
 800b648:	e7bf      	b.n	800b5ca <_scanf_float+0x192>
 800b64a:	2d03      	cmp	r5, #3
 800b64c:	d0e2      	beq.n	800b614 <_scanf_float+0x1dc>
 800b64e:	2d05      	cmp	r5, #5
 800b650:	e7de      	b.n	800b610 <_scanf_float+0x1d8>
 800b652:	2d02      	cmp	r5, #2
 800b654:	f47f af22 	bne.w	800b49c <_scanf_float+0x64>
 800b658:	2503      	movs	r5, #3
 800b65a:	e7b6      	b.n	800b5ca <_scanf_float+0x192>
 800b65c:	2d06      	cmp	r5, #6
 800b65e:	f47f af1d 	bne.w	800b49c <_scanf_float+0x64>
 800b662:	2507      	movs	r5, #7
 800b664:	e7b1      	b.n	800b5ca <_scanf_float+0x192>
 800b666:	6822      	ldr	r2, [r4, #0]
 800b668:	0591      	lsls	r1, r2, #22
 800b66a:	f57f af17 	bpl.w	800b49c <_scanf_float+0x64>
 800b66e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b672:	6022      	str	r2, [r4, #0]
 800b674:	f8cd 9008 	str.w	r9, [sp, #8]
 800b678:	e7a7      	b.n	800b5ca <_scanf_float+0x192>
 800b67a:	6822      	ldr	r2, [r4, #0]
 800b67c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b680:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b684:	d006      	beq.n	800b694 <_scanf_float+0x25c>
 800b686:	0550      	lsls	r0, r2, #21
 800b688:	f57f af08 	bpl.w	800b49c <_scanf_float+0x64>
 800b68c:	f1b9 0f00 	cmp.w	r9, #0
 800b690:	f000 80de 	beq.w	800b850 <_scanf_float+0x418>
 800b694:	0591      	lsls	r1, r2, #22
 800b696:	bf58      	it	pl
 800b698:	9902      	ldrpl	r1, [sp, #8]
 800b69a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b69e:	bf58      	it	pl
 800b6a0:	eba9 0101 	subpl.w	r1, r9, r1
 800b6a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b6a8:	bf58      	it	pl
 800b6aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b6ae:	6022      	str	r2, [r4, #0]
 800b6b0:	f04f 0900 	mov.w	r9, #0
 800b6b4:	e789      	b.n	800b5ca <_scanf_float+0x192>
 800b6b6:	f04f 0a03 	mov.w	sl, #3
 800b6ba:	e786      	b.n	800b5ca <_scanf_float+0x192>
 800b6bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4798      	blx	r3
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f43f aedb 	beq.w	800b482 <_scanf_float+0x4a>
 800b6cc:	e6e6      	b.n	800b49c <_scanf_float+0x64>
 800b6ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6d6:	463a      	mov	r2, r7
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4798      	blx	r3
 800b6dc:	6923      	ldr	r3, [r4, #16]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	e6e8      	b.n	800b4b6 <_scanf_float+0x7e>
 800b6e4:	1e6b      	subs	r3, r5, #1
 800b6e6:	2b06      	cmp	r3, #6
 800b6e8:	d824      	bhi.n	800b734 <_scanf_float+0x2fc>
 800b6ea:	2d02      	cmp	r5, #2
 800b6ec:	d836      	bhi.n	800b75c <_scanf_float+0x324>
 800b6ee:	9b01      	ldr	r3, [sp, #4]
 800b6f0:	429e      	cmp	r6, r3
 800b6f2:	f67f aee4 	bls.w	800b4be <_scanf_float+0x86>
 800b6f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	3b01      	subs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	e7f0      	b.n	800b6ee <_scanf_float+0x2b6>
 800b70c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b710:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b714:	463a      	mov	r2, r7
 800b716:	4640      	mov	r0, r8
 800b718:	4798      	blx	r3
 800b71a:	6923      	ldr	r3, [r4, #16]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b724:	fa5f fa8a 	uxtb.w	sl, sl
 800b728:	f1ba 0f02 	cmp.w	sl, #2
 800b72c:	d1ee      	bne.n	800b70c <_scanf_float+0x2d4>
 800b72e:	3d03      	subs	r5, #3
 800b730:	b2ed      	uxtb	r5, r5
 800b732:	1b76      	subs	r6, r6, r5
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	05da      	lsls	r2, r3, #23
 800b738:	d530      	bpl.n	800b79c <_scanf_float+0x364>
 800b73a:	055b      	lsls	r3, r3, #21
 800b73c:	d511      	bpl.n	800b762 <_scanf_float+0x32a>
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	429e      	cmp	r6, r3
 800b742:	f67f aebc 	bls.w	800b4be <_scanf_float+0x86>
 800b746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b74a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b74e:	463a      	mov	r2, r7
 800b750:	4640      	mov	r0, r8
 800b752:	4798      	blx	r3
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	3b01      	subs	r3, #1
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	e7f0      	b.n	800b73e <_scanf_float+0x306>
 800b75c:	46aa      	mov	sl, r5
 800b75e:	46b3      	mov	fp, r6
 800b760:	e7de      	b.n	800b720 <_scanf_float+0x2e8>
 800b762:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	2965      	cmp	r1, #101	@ 0x65
 800b76a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b76e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	d00c      	beq.n	800b790 <_scanf_float+0x358>
 800b776:	2945      	cmp	r1, #69	@ 0x45
 800b778:	d00a      	beq.n	800b790 <_scanf_float+0x358>
 800b77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b77e:	463a      	mov	r2, r7
 800b780:	4640      	mov	r0, r8
 800b782:	4798      	blx	r3
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	1eb5      	subs	r5, r6, #2
 800b78e:	6123      	str	r3, [r4, #16]
 800b790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b794:	463a      	mov	r2, r7
 800b796:	4640      	mov	r0, r8
 800b798:	4798      	blx	r3
 800b79a:	462e      	mov	r6, r5
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	f012 0210 	ands.w	r2, r2, #16
 800b7a2:	d001      	beq.n	800b7a8 <_scanf_float+0x370>
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e68b      	b.n	800b4c0 <_scanf_float+0x88>
 800b7a8:	7032      	strb	r2, [r6, #0]
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b7b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7b4:	d11c      	bne.n	800b7f0 <_scanf_float+0x3b8>
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	454b      	cmp	r3, r9
 800b7ba:	eba3 0209 	sub.w	r2, r3, r9
 800b7be:	d123      	bne.n	800b808 <_scanf_float+0x3d0>
 800b7c0:	9901      	ldr	r1, [sp, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	f7ff f947 	bl	800aa58 <_strtod_r>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	6821      	ldr	r1, [r4, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f011 0f02 	tst.w	r1, #2
 800b7d4:	ec57 6b10 	vmov	r6, r7, d0
 800b7d8:	f103 0204 	add.w	r2, r3, #4
 800b7dc:	d01f      	beq.n	800b81e <_scanf_float+0x3e6>
 800b7de:	9903      	ldr	r1, [sp, #12]
 800b7e0:	600a      	str	r2, [r1, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	e9c3 6700 	strd	r6, r7, [r3]
 800b7e8:	68e3      	ldr	r3, [r4, #12]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	60e3      	str	r3, [r4, #12]
 800b7ee:	e7d9      	b.n	800b7a4 <_scanf_float+0x36c>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0e4      	beq.n	800b7c0 <_scanf_float+0x388>
 800b7f6:	9905      	ldr	r1, [sp, #20]
 800b7f8:	230a      	movs	r3, #10
 800b7fa:	3101      	adds	r1, #1
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	f7ff f9b7 	bl	800ab70 <_strtol_r>
 800b802:	9b04      	ldr	r3, [sp, #16]
 800b804:	9e05      	ldr	r6, [sp, #20]
 800b806:	1ac2      	subs	r2, r0, r3
 800b808:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b80c:	429e      	cmp	r6, r3
 800b80e:	bf28      	it	cs
 800b810:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b814:	4910      	ldr	r1, [pc, #64]	@ (800b858 <_scanf_float+0x420>)
 800b816:	4630      	mov	r0, r6
 800b818:	f000 f990 	bl	800bb3c <siprintf>
 800b81c:	e7d0      	b.n	800b7c0 <_scanf_float+0x388>
 800b81e:	f011 0f04 	tst.w	r1, #4
 800b822:	9903      	ldr	r1, [sp, #12]
 800b824:	600a      	str	r2, [r1, #0]
 800b826:	d1dc      	bne.n	800b7e2 <_scanf_float+0x3aa>
 800b828:	681d      	ldr	r5, [r3, #0]
 800b82a:	4632      	mov	r2, r6
 800b82c:	463b      	mov	r3, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f5 f98b 	bl	8000b4c <__aeabi_dcmpun>
 800b836:	b128      	cbz	r0, 800b844 <_scanf_float+0x40c>
 800b838:	4808      	ldr	r0, [pc, #32]	@ (800b85c <_scanf_float+0x424>)
 800b83a:	f001 f965 	bl	800cb08 <nanf>
 800b83e:	ed85 0a00 	vstr	s0, [r5]
 800b842:	e7d1      	b.n	800b7e8 <_scanf_float+0x3b0>
 800b844:	4630      	mov	r0, r6
 800b846:	4639      	mov	r1, r7
 800b848:	f7f5 f9de 	bl	8000c08 <__aeabi_d2f>
 800b84c:	6028      	str	r0, [r5, #0]
 800b84e:	e7cb      	b.n	800b7e8 <_scanf_float+0x3b0>
 800b850:	f04f 0900 	mov.w	r9, #0
 800b854:	e629      	b.n	800b4aa <_scanf_float+0x72>
 800b856:	bf00      	nop
 800b858:	08011e6b 	.word	0x08011e6b
 800b85c:	08010f0e 	.word	0x08010f0e

0800b860 <std>:
 800b860:	2300      	movs	r3, #0
 800b862:	b510      	push	{r4, lr}
 800b864:	4604      	mov	r4, r0
 800b866:	e9c0 3300 	strd	r3, r3, [r0]
 800b86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b86e:	6083      	str	r3, [r0, #8]
 800b870:	8181      	strh	r1, [r0, #12]
 800b872:	6643      	str	r3, [r0, #100]	@ 0x64
 800b874:	81c2      	strh	r2, [r0, #14]
 800b876:	6183      	str	r3, [r0, #24]
 800b878:	4619      	mov	r1, r3
 800b87a:	2208      	movs	r2, #8
 800b87c:	305c      	adds	r0, #92	@ 0x5c
 800b87e:	f000 fa81 	bl	800bd84 <memset>
 800b882:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b8 <std+0x58>)
 800b884:	6263      	str	r3, [r4, #36]	@ 0x24
 800b886:	4b0d      	ldr	r3, [pc, #52]	@ (800b8bc <std+0x5c>)
 800b888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b88a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c0 <std+0x60>)
 800b88c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b88e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <std+0x64>)
 800b890:	6323      	str	r3, [r4, #48]	@ 0x30
 800b892:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c8 <std+0x68>)
 800b894:	6224      	str	r4, [r4, #32]
 800b896:	429c      	cmp	r4, r3
 800b898:	d006      	beq.n	800b8a8 <std+0x48>
 800b89a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b89e:	4294      	cmp	r4, r2
 800b8a0:	d002      	beq.n	800b8a8 <std+0x48>
 800b8a2:	33d0      	adds	r3, #208	@ 0xd0
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	d105      	bne.n	800b8b4 <std+0x54>
 800b8a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b0:	f7f9 bb05 	b.w	8004ebe <__retarget_lock_init_recursive>
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800bbd1 	.word	0x0800bbd1
 800b8bc:	0800bbf7 	.word	0x0800bbf7
 800b8c0:	0800bc2f 	.word	0x0800bc2f
 800b8c4:	0800bc53 	.word	0x0800bc53
 800b8c8:	20008444 	.word	0x20008444

0800b8cc <stdio_exit_handler>:
 800b8cc:	4a02      	ldr	r2, [pc, #8]	@ (800b8d8 <stdio_exit_handler+0xc>)
 800b8ce:	4903      	ldr	r1, [pc, #12]	@ (800b8dc <stdio_exit_handler+0x10>)
 800b8d0:	4803      	ldr	r0, [pc, #12]	@ (800b8e0 <stdio_exit_handler+0x14>)
 800b8d2:	f000 b869 	b.w	800b9a8 <_fwalk_sglue>
 800b8d6:	bf00      	nop
 800b8d8:	20000024 	.word	0x20000024
 800b8dc:	0800f655 	.word	0x0800f655
 800b8e0:	200001a8 	.word	0x200001a8

0800b8e4 <cleanup_stdio>:
 800b8e4:	6841      	ldr	r1, [r0, #4]
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b918 <cleanup_stdio+0x34>)
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	b510      	push	{r4, lr}
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	d001      	beq.n	800b8f4 <cleanup_stdio+0x10>
 800b8f0:	f003 feb0 	bl	800f654 <_fflush_r>
 800b8f4:	68a1      	ldr	r1, [r4, #8]
 800b8f6:	4b09      	ldr	r3, [pc, #36]	@ (800b91c <cleanup_stdio+0x38>)
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d002      	beq.n	800b902 <cleanup_stdio+0x1e>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f003 fea9 	bl	800f654 <_fflush_r>
 800b902:	68e1      	ldr	r1, [r4, #12]
 800b904:	4b06      	ldr	r3, [pc, #24]	@ (800b920 <cleanup_stdio+0x3c>)
 800b906:	4299      	cmp	r1, r3
 800b908:	d004      	beq.n	800b914 <cleanup_stdio+0x30>
 800b90a:	4620      	mov	r0, r4
 800b90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b910:	f003 bea0 	b.w	800f654 <_fflush_r>
 800b914:	bd10      	pop	{r4, pc}
 800b916:	bf00      	nop
 800b918:	20008444 	.word	0x20008444
 800b91c:	200084ac 	.word	0x200084ac
 800b920:	20008514 	.word	0x20008514

0800b924 <global_stdio_init.part.0>:
 800b924:	b510      	push	{r4, lr}
 800b926:	4b0b      	ldr	r3, [pc, #44]	@ (800b954 <global_stdio_init.part.0+0x30>)
 800b928:	4c0b      	ldr	r4, [pc, #44]	@ (800b958 <global_stdio_init.part.0+0x34>)
 800b92a:	4a0c      	ldr	r2, [pc, #48]	@ (800b95c <global_stdio_init.part.0+0x38>)
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	4620      	mov	r0, r4
 800b930:	2200      	movs	r2, #0
 800b932:	2104      	movs	r1, #4
 800b934:	f7ff ff94 	bl	800b860 <std>
 800b938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b93c:	2201      	movs	r2, #1
 800b93e:	2109      	movs	r1, #9
 800b940:	f7ff ff8e 	bl	800b860 <std>
 800b944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b948:	2202      	movs	r2, #2
 800b94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94e:	2112      	movs	r1, #18
 800b950:	f7ff bf86 	b.w	800b860 <std>
 800b954:	2000857c 	.word	0x2000857c
 800b958:	20008444 	.word	0x20008444
 800b95c:	0800b8cd 	.word	0x0800b8cd

0800b960 <__sfp_lock_acquire>:
 800b960:	4801      	ldr	r0, [pc, #4]	@ (800b968 <__sfp_lock_acquire+0x8>)
 800b962:	f7f9 bac8 	b.w	8004ef6 <__retarget_lock_acquire_recursive>
 800b966:	bf00      	nop
 800b968:	200034c4 	.word	0x200034c4

0800b96c <__sfp_lock_release>:
 800b96c:	4801      	ldr	r0, [pc, #4]	@ (800b974 <__sfp_lock_release+0x8>)
 800b96e:	f7f9 bace 	b.w	8004f0e <__retarget_lock_release_recursive>
 800b972:	bf00      	nop
 800b974:	200034c4 	.word	0x200034c4

0800b978 <__sinit>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	4604      	mov	r4, r0
 800b97c:	f7ff fff0 	bl	800b960 <__sfp_lock_acquire>
 800b980:	6a23      	ldr	r3, [r4, #32]
 800b982:	b11b      	cbz	r3, 800b98c <__sinit+0x14>
 800b984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b988:	f7ff bff0 	b.w	800b96c <__sfp_lock_release>
 800b98c:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <__sinit+0x28>)
 800b98e:	6223      	str	r3, [r4, #32]
 800b990:	4b04      	ldr	r3, [pc, #16]	@ (800b9a4 <__sinit+0x2c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1f5      	bne.n	800b984 <__sinit+0xc>
 800b998:	f7ff ffc4 	bl	800b924 <global_stdio_init.part.0>
 800b99c:	e7f2      	b.n	800b984 <__sinit+0xc>
 800b99e:	bf00      	nop
 800b9a0:	0800b8e5 	.word	0x0800b8e5
 800b9a4:	2000857c 	.word	0x2000857c

0800b9a8 <_fwalk_sglue>:
 800b9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	4688      	mov	r8, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b9bc:	d505      	bpl.n	800b9ca <_fwalk_sglue+0x22>
 800b9be:	6824      	ldr	r4, [r4, #0]
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	d1f7      	bne.n	800b9b4 <_fwalk_sglue+0xc>
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d907      	bls.n	800b9e0 <_fwalk_sglue+0x38>
 800b9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	d003      	beq.n	800b9e0 <_fwalk_sglue+0x38>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	4638      	mov	r0, r7
 800b9dc:	47c0      	blx	r8
 800b9de:	4306      	orrs	r6, r0
 800b9e0:	3568      	adds	r5, #104	@ 0x68
 800b9e2:	e7e9      	b.n	800b9b8 <_fwalk_sglue+0x10>

0800b9e4 <iprintf>:
 800b9e4:	b40f      	push	{r0, r1, r2, r3}
 800b9e6:	b507      	push	{r0, r1, r2, lr}
 800b9e8:	4906      	ldr	r1, [pc, #24]	@ (800ba04 <iprintf+0x20>)
 800b9ea:	ab04      	add	r3, sp, #16
 800b9ec:	6808      	ldr	r0, [r1, #0]
 800b9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f2:	6881      	ldr	r1, [r0, #8]
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	f003 fb43 	bl	800f080 <_vfiprintf_r>
 800b9fa:	b003      	add	sp, #12
 800b9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba00:	b004      	add	sp, #16
 800ba02:	4770      	bx	lr
 800ba04:	200001a4 	.word	0x200001a4

0800ba08 <putchar>:
 800ba08:	4b02      	ldr	r3, [pc, #8]	@ (800ba14 <putchar+0xc>)
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	6882      	ldr	r2, [r0, #8]
 800ba10:	f003 beaa 	b.w	800f768 <_putc_r>
 800ba14:	200001a4 	.word	0x200001a4

0800ba18 <_puts_r>:
 800ba18:	6a03      	ldr	r3, [r0, #32]
 800ba1a:	b570      	push	{r4, r5, r6, lr}
 800ba1c:	6884      	ldr	r4, [r0, #8]
 800ba1e:	4605      	mov	r5, r0
 800ba20:	460e      	mov	r6, r1
 800ba22:	b90b      	cbnz	r3, 800ba28 <_puts_r+0x10>
 800ba24:	f7ff ffa8 	bl	800b978 <__sinit>
 800ba28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba2a:	07db      	lsls	r3, r3, #31
 800ba2c:	d405      	bmi.n	800ba3a <_puts_r+0x22>
 800ba2e:	89a3      	ldrh	r3, [r4, #12]
 800ba30:	0598      	lsls	r0, r3, #22
 800ba32:	d402      	bmi.n	800ba3a <_puts_r+0x22>
 800ba34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba36:	f7f9 fa5e 	bl	8004ef6 <__retarget_lock_acquire_recursive>
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	0719      	lsls	r1, r3, #28
 800ba3e:	d502      	bpl.n	800ba46 <_puts_r+0x2e>
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d135      	bne.n	800bab2 <_puts_r+0x9a>
 800ba46:	4621      	mov	r1, r4
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f000 f945 	bl	800bcd8 <__swsetup_r>
 800ba4e:	b380      	cbz	r0, 800bab2 <_puts_r+0x9a>
 800ba50:	f04f 35ff 	mov.w	r5, #4294967295
 800ba54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba56:	07da      	lsls	r2, r3, #31
 800ba58:	d405      	bmi.n	800ba66 <_puts_r+0x4e>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	059b      	lsls	r3, r3, #22
 800ba5e:	d402      	bmi.n	800ba66 <_puts_r+0x4e>
 800ba60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba62:	f7f9 fa54 	bl	8004f0e <__retarget_lock_release_recursive>
 800ba66:	4628      	mov	r0, r5
 800ba68:	bd70      	pop	{r4, r5, r6, pc}
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	da04      	bge.n	800ba78 <_puts_r+0x60>
 800ba6e:	69a2      	ldr	r2, [r4, #24]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	dc17      	bgt.n	800baa4 <_puts_r+0x8c>
 800ba74:	290a      	cmp	r1, #10
 800ba76:	d015      	beq.n	800baa4 <_puts_r+0x8c>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	6022      	str	r2, [r4, #0]
 800ba7e:	7019      	strb	r1, [r3, #0]
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba86:	3b01      	subs	r3, #1
 800ba88:	60a3      	str	r3, [r4, #8]
 800ba8a:	2900      	cmp	r1, #0
 800ba8c:	d1ed      	bne.n	800ba6a <_puts_r+0x52>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da11      	bge.n	800bab6 <_puts_r+0x9e>
 800ba92:	4622      	mov	r2, r4
 800ba94:	210a      	movs	r1, #10
 800ba96:	4628      	mov	r0, r5
 800ba98:	f000 f8df 	bl	800bc5a <__swbuf_r>
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	d0d7      	beq.n	800ba50 <_puts_r+0x38>
 800baa0:	250a      	movs	r5, #10
 800baa2:	e7d7      	b.n	800ba54 <_puts_r+0x3c>
 800baa4:	4622      	mov	r2, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f8d7 	bl	800bc5a <__swbuf_r>
 800baac:	3001      	adds	r0, #1
 800baae:	d1e7      	bne.n	800ba80 <_puts_r+0x68>
 800bab0:	e7ce      	b.n	800ba50 <_puts_r+0x38>
 800bab2:	3e01      	subs	r6, #1
 800bab4:	e7e4      	b.n	800ba80 <_puts_r+0x68>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	6022      	str	r2, [r4, #0]
 800babc:	220a      	movs	r2, #10
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	e7ee      	b.n	800baa0 <_puts_r+0x88>
	...

0800bac4 <puts>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	@ (800bad0 <puts+0xc>)
 800bac6:	4601      	mov	r1, r0
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	f7ff bfa5 	b.w	800ba18 <_puts_r>
 800bace:	bf00      	nop
 800bad0:	200001a4 	.word	0x200001a4

0800bad4 <sniprintf>:
 800bad4:	b40c      	push	{r2, r3}
 800bad6:	b530      	push	{r4, r5, lr}
 800bad8:	4b17      	ldr	r3, [pc, #92]	@ (800bb38 <sniprintf+0x64>)
 800bada:	1e0c      	subs	r4, r1, #0
 800badc:	681d      	ldr	r5, [r3, #0]
 800bade:	b09d      	sub	sp, #116	@ 0x74
 800bae0:	da08      	bge.n	800baf4 <sniprintf+0x20>
 800bae2:	238b      	movs	r3, #139	@ 0x8b
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	b01d      	add	sp, #116	@ 0x74
 800baec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baf0:	b002      	add	sp, #8
 800baf2:	4770      	bx	lr
 800baf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800baf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bafc:	bf14      	ite	ne
 800bafe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb02:	4623      	moveq	r3, r4
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb0c:	9002      	str	r0, [sp, #8]
 800bb0e:	9006      	str	r0, [sp, #24]
 800bb10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb16:	ab21      	add	r3, sp, #132	@ 0x84
 800bb18:	a902      	add	r1, sp, #8
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	f002 ffbd 	bl	800ea9c <_svfiprintf_r>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	bfbc      	itt	lt
 800bb26:	238b      	movlt	r3, #139	@ 0x8b
 800bb28:	602b      	strlt	r3, [r5, #0]
 800bb2a:	2c00      	cmp	r4, #0
 800bb2c:	d0dd      	beq.n	800baea <sniprintf+0x16>
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
 800bb34:	e7d9      	b.n	800baea <sniprintf+0x16>
 800bb36:	bf00      	nop
 800bb38:	200001a4 	.word	0x200001a4

0800bb3c <siprintf>:
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b500      	push	{lr}
 800bb40:	b09c      	sub	sp, #112	@ 0x70
 800bb42:	ab1d      	add	r3, sp, #116	@ 0x74
 800bb44:	9002      	str	r0, [sp, #8]
 800bb46:	9006      	str	r0, [sp, #24]
 800bb48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb4c:	4809      	ldr	r0, [pc, #36]	@ (800bb74 <siprintf+0x38>)
 800bb4e:	9107      	str	r1, [sp, #28]
 800bb50:	9104      	str	r1, [sp, #16]
 800bb52:	4909      	ldr	r1, [pc, #36]	@ (800bb78 <siprintf+0x3c>)
 800bb54:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb58:	9105      	str	r1, [sp, #20]
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	a902      	add	r1, sp, #8
 800bb60:	f002 ff9c 	bl	800ea9c <_svfiprintf_r>
 800bb64:	9b02      	ldr	r3, [sp, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	b01c      	add	sp, #112	@ 0x70
 800bb6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb70:	b003      	add	sp, #12
 800bb72:	4770      	bx	lr
 800bb74:	200001a4 	.word	0x200001a4
 800bb78:	ffff0208 	.word	0xffff0208

0800bb7c <siscanf>:
 800bb7c:	b40e      	push	{r1, r2, r3}
 800bb7e:	b530      	push	{r4, r5, lr}
 800bb80:	b09c      	sub	sp, #112	@ 0x70
 800bb82:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bb84:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bb88:	f854 5b04 	ldr.w	r5, [r4], #4
 800bb8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bb90:	9002      	str	r0, [sp, #8]
 800bb92:	9006      	str	r0, [sp, #24]
 800bb94:	f7f4 fb7c 	bl	8000290 <strlen>
 800bb98:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc8 <siscanf+0x4c>)
 800bb9a:	9003      	str	r0, [sp, #12]
 800bb9c:	9007      	str	r0, [sp, #28]
 800bb9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba0:	480a      	ldr	r0, [pc, #40]	@ (800bbcc <siscanf+0x50>)
 800bba2:	9401      	str	r4, [sp, #4]
 800bba4:	2300      	movs	r3, #0
 800bba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bba8:	9314      	str	r3, [sp, #80]	@ 0x50
 800bbaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bbae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4623      	mov	r3, r4
 800bbb6:	a902      	add	r1, sp, #8
 800bbb8:	6800      	ldr	r0, [r0, #0]
 800bbba:	f003 f8c3 	bl	800ed44 <__ssvfiscanf_r>
 800bbbe:	b01c      	add	sp, #112	@ 0x70
 800bbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbc4:	b003      	add	sp, #12
 800bbc6:	4770      	bx	lr
 800bbc8:	0800bbf3 	.word	0x0800bbf3
 800bbcc:	200001a4 	.word	0x200001a4

0800bbd0 <__sread>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd8:	f000 ff18 	bl	800ca0c <_read_r>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	bfab      	itete	ge
 800bbe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbe2:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe4:	181b      	addge	r3, r3, r0
 800bbe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbea:	bfac      	ite	ge
 800bbec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbee:	81a3      	strhlt	r3, [r4, #12]
 800bbf0:	bd10      	pop	{r4, pc}

0800bbf2 <__seofread>:
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	4770      	bx	lr

0800bbf6 <__swrite>:
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	461f      	mov	r7, r3
 800bbfc:	898b      	ldrh	r3, [r1, #12]
 800bbfe:	05db      	lsls	r3, r3, #23
 800bc00:	4605      	mov	r5, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4616      	mov	r6, r2
 800bc06:	d505      	bpl.n	800bc14 <__swrite+0x1e>
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f000 feea 	bl	800c9e8 <_lseek_r>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4628      	mov	r0, r5
 800bc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	f000 bf11 	b.w	800ca50 <_write_r>

0800bc2e <__sseek>:
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	f000 fed7 	bl	800c9e8 <_lseek_r>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	bf15      	itete	ne
 800bc40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc4a:	81a3      	strheq	r3, [r4, #12]
 800bc4c:	bf18      	it	ne
 800bc4e:	81a3      	strhne	r3, [r4, #12]
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <__sclose>:
 800bc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc56:	f000 be61 	b.w	800c91c <_close_r>

0800bc5a <__swbuf_r>:
 800bc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	4614      	mov	r4, r2
 800bc60:	4605      	mov	r5, r0
 800bc62:	b118      	cbz	r0, 800bc6c <__swbuf_r+0x12>
 800bc64:	6a03      	ldr	r3, [r0, #32]
 800bc66:	b90b      	cbnz	r3, 800bc6c <__swbuf_r+0x12>
 800bc68:	f7ff fe86 	bl	800b978 <__sinit>
 800bc6c:	69a3      	ldr	r3, [r4, #24]
 800bc6e:	60a3      	str	r3, [r4, #8]
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	071a      	lsls	r2, r3, #28
 800bc74:	d501      	bpl.n	800bc7a <__swbuf_r+0x20>
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	b943      	cbnz	r3, 800bc8c <__swbuf_r+0x32>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 f82b 	bl	800bcd8 <__swsetup_r>
 800bc82:	b118      	cbz	r0, 800bc8c <__swbuf_r+0x32>
 800bc84:	f04f 37ff 	mov.w	r7, #4294967295
 800bc88:	4638      	mov	r0, r7
 800bc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	6922      	ldr	r2, [r4, #16]
 800bc90:	1a98      	subs	r0, r3, r2
 800bc92:	6963      	ldr	r3, [r4, #20]
 800bc94:	b2f6      	uxtb	r6, r6
 800bc96:	4283      	cmp	r3, r0
 800bc98:	4637      	mov	r7, r6
 800bc9a:	dc05      	bgt.n	800bca8 <__swbuf_r+0x4e>
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f003 fcd8 	bl	800f654 <_fflush_r>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d1ed      	bne.n	800bc84 <__swbuf_r+0x2a>
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	60a3      	str	r3, [r4, #8]
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	6022      	str	r2, [r4, #0]
 800bcb4:	701e      	strb	r6, [r3, #0]
 800bcb6:	6962      	ldr	r2, [r4, #20]
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d004      	beq.n	800bcc8 <__swbuf_r+0x6e>
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	07db      	lsls	r3, r3, #31
 800bcc2:	d5e1      	bpl.n	800bc88 <__swbuf_r+0x2e>
 800bcc4:	2e0a      	cmp	r6, #10
 800bcc6:	d1df      	bne.n	800bc88 <__swbuf_r+0x2e>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f003 fcc2 	bl	800f654 <_fflush_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0d9      	beq.n	800bc88 <__swbuf_r+0x2e>
 800bcd4:	e7d6      	b.n	800bc84 <__swbuf_r+0x2a>
	...

0800bcd8 <__swsetup_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4b29      	ldr	r3, [pc, #164]	@ (800bd80 <__swsetup_r+0xa8>)
 800bcdc:	4605      	mov	r5, r0
 800bcde:	6818      	ldr	r0, [r3, #0]
 800bce0:	460c      	mov	r4, r1
 800bce2:	b118      	cbz	r0, 800bcec <__swsetup_r+0x14>
 800bce4:	6a03      	ldr	r3, [r0, #32]
 800bce6:	b90b      	cbnz	r3, 800bcec <__swsetup_r+0x14>
 800bce8:	f7ff fe46 	bl	800b978 <__sinit>
 800bcec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf0:	0719      	lsls	r1, r3, #28
 800bcf2:	d422      	bmi.n	800bd3a <__swsetup_r+0x62>
 800bcf4:	06da      	lsls	r2, r3, #27
 800bcf6:	d407      	bmi.n	800bd08 <__swsetup_r+0x30>
 800bcf8:	2209      	movs	r2, #9
 800bcfa:	602a      	str	r2, [r5, #0]
 800bcfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295
 800bd06:	e033      	b.n	800bd70 <__swsetup_r+0x98>
 800bd08:	0758      	lsls	r0, r3, #29
 800bd0a:	d512      	bpl.n	800bd32 <__swsetup_r+0x5a>
 800bd0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd0e:	b141      	cbz	r1, 800bd22 <__swsetup_r+0x4a>
 800bd10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd14:	4299      	cmp	r1, r3
 800bd16:	d002      	beq.n	800bd1e <__swsetup_r+0x46>
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f001 fd51 	bl	800d7c0 <_free_r>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6063      	str	r3, [r4, #4]
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0308 	orr.w	r3, r3, #8
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	b94b      	cbnz	r3, 800bd52 <__swsetup_r+0x7a>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd48:	d003      	beq.n	800bd52 <__swsetup_r+0x7a>
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f003 fccf 	bl	800f6f0 <__smakebuf_r>
 800bd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd56:	f013 0201 	ands.w	r2, r3, #1
 800bd5a:	d00a      	beq.n	800bd72 <__swsetup_r+0x9a>
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	60a2      	str	r2, [r4, #8]
 800bd60:	6962      	ldr	r2, [r4, #20]
 800bd62:	4252      	negs	r2, r2
 800bd64:	61a2      	str	r2, [r4, #24]
 800bd66:	6922      	ldr	r2, [r4, #16]
 800bd68:	b942      	cbnz	r2, 800bd7c <__swsetup_r+0xa4>
 800bd6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd6e:	d1c5      	bne.n	800bcfc <__swsetup_r+0x24>
 800bd70:	bd38      	pop	{r3, r4, r5, pc}
 800bd72:	0799      	lsls	r1, r3, #30
 800bd74:	bf58      	it	pl
 800bd76:	6962      	ldrpl	r2, [r4, #20]
 800bd78:	60a2      	str	r2, [r4, #8]
 800bd7a:	e7f4      	b.n	800bd66 <__swsetup_r+0x8e>
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	e7f7      	b.n	800bd70 <__swsetup_r+0x98>
 800bd80:	200001a4 	.word	0x200001a4

0800bd84 <memset>:
 800bd84:	4402      	add	r2, r0
 800bd86:	4603      	mov	r3, r0
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d100      	bne.n	800bd8e <memset+0xa>
 800bd8c:	4770      	bx	lr
 800bd8e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd92:	e7f9      	b.n	800bd88 <memset+0x4>

0800bd94 <strchr>:
 800bd94:	b2c9      	uxtb	r1, r1
 800bd96:	4603      	mov	r3, r0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd9e:	b112      	cbz	r2, 800bda6 <strchr+0x12>
 800bda0:	428a      	cmp	r2, r1
 800bda2:	d1f9      	bne.n	800bd98 <strchr+0x4>
 800bda4:	4770      	bx	lr
 800bda6:	2900      	cmp	r1, #0
 800bda8:	bf18      	it	ne
 800bdaa:	2000      	movne	r0, #0
 800bdac:	4770      	bx	lr

0800bdae <strncmp>:
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	b16a      	cbz	r2, 800bdce <strncmp+0x20>
 800bdb2:	3901      	subs	r1, #1
 800bdb4:	1884      	adds	r4, r0, r2
 800bdb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d103      	bne.n	800bdca <strncmp+0x1c>
 800bdc2:	42a0      	cmp	r0, r4
 800bdc4:	d001      	beq.n	800bdca <strncmp+0x1c>
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	d1f5      	bne.n	800bdb6 <strncmp+0x8>
 800bdca:	1ad0      	subs	r0, r2, r3
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	4610      	mov	r0, r2
 800bdd0:	e7fc      	b.n	800bdcc <strncmp+0x1e>

0800bdd2 <strncpy>:
 800bdd2:	b510      	push	{r4, lr}
 800bdd4:	3901      	subs	r1, #1
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	b132      	cbz	r2, 800bde8 <strncpy+0x16>
 800bdda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdde:	f803 4b01 	strb.w	r4, [r3], #1
 800bde2:	3a01      	subs	r2, #1
 800bde4:	2c00      	cmp	r4, #0
 800bde6:	d1f7      	bne.n	800bdd8 <strncpy+0x6>
 800bde8:	441a      	add	r2, r3
 800bdea:	2100      	movs	r1, #0
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d100      	bne.n	800bdf2 <strncpy+0x20>
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	f803 1b01 	strb.w	r1, [r3], #1
 800bdf6:	e7f9      	b.n	800bdec <strncpy+0x1a>

0800bdf8 <strrchr>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800bdfe:	4603      	mov	r3, r0
 800be00:	d10e      	bne.n	800be20 <strrchr+0x28>
 800be02:	4621      	mov	r1, r4
 800be04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be08:	f7ff bfc4 	b.w	800bd94 <strchr>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	4605      	mov	r5, r0
 800be10:	4621      	mov	r1, r4
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff ffbe 	bl	800bd94 <strchr>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d1f7      	bne.n	800be0c <strrchr+0x14>
 800be1c:	4628      	mov	r0, r5
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	2500      	movs	r5, #0
 800be22:	e7f5      	b.n	800be10 <strrchr+0x18>

0800be24 <strstr>:
 800be24:	780a      	ldrb	r2, [r1, #0]
 800be26:	b570      	push	{r4, r5, r6, lr}
 800be28:	b96a      	cbnz	r2, 800be46 <strstr+0x22>
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d109      	bne.n	800be44 <strstr+0x20>
 800be30:	460c      	mov	r4, r1
 800be32:	4605      	mov	r5, r0
 800be34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0f6      	beq.n	800be2a <strstr+0x6>
 800be3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800be40:	429e      	cmp	r6, r3
 800be42:	d0f7      	beq.n	800be34 <strstr+0x10>
 800be44:	3001      	adds	r0, #1
 800be46:	7803      	ldrb	r3, [r0, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1ef      	bne.n	800be2c <strstr+0x8>
 800be4c:	4618      	mov	r0, r3
 800be4e:	e7ec      	b.n	800be2a <strstr+0x6>

0800be50 <validate_structure>:
 800be50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be52:	6801      	ldr	r1, [r0, #0]
 800be54:	293b      	cmp	r1, #59	@ 0x3b
 800be56:	4604      	mov	r4, r0
 800be58:	d911      	bls.n	800be7e <validate_structure+0x2e>
 800be5a:	223c      	movs	r2, #60	@ 0x3c
 800be5c:	4668      	mov	r0, sp
 800be5e:	f000 fe59 	bl	800cb14 <div>
 800be62:	9a01      	ldr	r2, [sp, #4]
 800be64:	6863      	ldr	r3, [r4, #4]
 800be66:	9900      	ldr	r1, [sp, #0]
 800be68:	2a00      	cmp	r2, #0
 800be6a:	440b      	add	r3, r1
 800be6c:	6063      	str	r3, [r4, #4]
 800be6e:	bfbb      	ittet	lt
 800be70:	323c      	addlt	r2, #60	@ 0x3c
 800be72:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be76:	6022      	strge	r2, [r4, #0]
 800be78:	6022      	strlt	r2, [r4, #0]
 800be7a:	bfb8      	it	lt
 800be7c:	6063      	strlt	r3, [r4, #4]
 800be7e:	6861      	ldr	r1, [r4, #4]
 800be80:	293b      	cmp	r1, #59	@ 0x3b
 800be82:	d911      	bls.n	800bea8 <validate_structure+0x58>
 800be84:	223c      	movs	r2, #60	@ 0x3c
 800be86:	4668      	mov	r0, sp
 800be88:	f000 fe44 	bl	800cb14 <div>
 800be8c:	9a01      	ldr	r2, [sp, #4]
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	9900      	ldr	r1, [sp, #0]
 800be92:	2a00      	cmp	r2, #0
 800be94:	440b      	add	r3, r1
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	bfbb      	ittet	lt
 800be9a:	323c      	addlt	r2, #60	@ 0x3c
 800be9c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bea0:	6062      	strge	r2, [r4, #4]
 800bea2:	6062      	strlt	r2, [r4, #4]
 800bea4:	bfb8      	it	lt
 800bea6:	60a3      	strlt	r3, [r4, #8]
 800bea8:	68a1      	ldr	r1, [r4, #8]
 800beaa:	2917      	cmp	r1, #23
 800beac:	d911      	bls.n	800bed2 <validate_structure+0x82>
 800beae:	2218      	movs	r2, #24
 800beb0:	4668      	mov	r0, sp
 800beb2:	f000 fe2f 	bl	800cb14 <div>
 800beb6:	9a01      	ldr	r2, [sp, #4]
 800beb8:	68e3      	ldr	r3, [r4, #12]
 800beba:	9900      	ldr	r1, [sp, #0]
 800bebc:	2a00      	cmp	r2, #0
 800bebe:	440b      	add	r3, r1
 800bec0:	60e3      	str	r3, [r4, #12]
 800bec2:	bfbb      	ittet	lt
 800bec4:	3218      	addlt	r2, #24
 800bec6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800beca:	60a2      	strge	r2, [r4, #8]
 800becc:	60a2      	strlt	r2, [r4, #8]
 800bece:	bfb8      	it	lt
 800bed0:	60e3      	strlt	r3, [r4, #12]
 800bed2:	6921      	ldr	r1, [r4, #16]
 800bed4:	290b      	cmp	r1, #11
 800bed6:	d911      	bls.n	800befc <validate_structure+0xac>
 800bed8:	220c      	movs	r2, #12
 800beda:	4668      	mov	r0, sp
 800bedc:	f000 fe1a 	bl	800cb14 <div>
 800bee0:	9a01      	ldr	r2, [sp, #4]
 800bee2:	6963      	ldr	r3, [r4, #20]
 800bee4:	9900      	ldr	r1, [sp, #0]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	440b      	add	r3, r1
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	bfbb      	ittet	lt
 800beee:	320c      	addlt	r2, #12
 800bef0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bef4:	6122      	strge	r2, [r4, #16]
 800bef6:	6122      	strlt	r2, [r4, #16]
 800bef8:	bfb8      	it	lt
 800befa:	6163      	strlt	r3, [r4, #20]
 800befc:	6963      	ldr	r3, [r4, #20]
 800befe:	079a      	lsls	r2, r3, #30
 800bf00:	d11c      	bne.n	800bf3c <validate_structure+0xec>
 800bf02:	2164      	movs	r1, #100	@ 0x64
 800bf04:	fb93 f2f1 	sdiv	r2, r3, r1
 800bf08:	fb01 3212 	mls	r2, r1, r2, r3
 800bf0c:	b9c2      	cbnz	r2, 800bf40 <validate_structure+0xf0>
 800bf0e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800bf12:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bf16:	fb93 f1f2 	sdiv	r1, r3, r2
 800bf1a:	fb02 3311 	mls	r3, r2, r1, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bf14      	ite	ne
 800bf22:	231c      	movne	r3, #28
 800bf24:	231d      	moveq	r3, #29
 800bf26:	68e2      	ldr	r2, [r4, #12]
 800bf28:	2a00      	cmp	r2, #0
 800bf2a:	dc0b      	bgt.n	800bf44 <validate_structure+0xf4>
 800bf2c:	4d31      	ldr	r5, [pc, #196]	@ (800bff4 <validate_structure+0x1a4>)
 800bf2e:	200b      	movs	r0, #11
 800bf30:	2164      	movs	r1, #100	@ 0x64
 800bf32:	68e6      	ldr	r6, [r4, #12]
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	dd30      	ble.n	800bf9a <validate_structure+0x14a>
 800bf38:	b003      	add	sp, #12
 800bf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf3c:	231c      	movs	r3, #28
 800bf3e:	e7f2      	b.n	800bf26 <validate_structure+0xd6>
 800bf40:	231d      	movs	r3, #29
 800bf42:	e7f0      	b.n	800bf26 <validate_structure+0xd6>
 800bf44:	4d2b      	ldr	r5, [pc, #172]	@ (800bff4 <validate_structure+0x1a4>)
 800bf46:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bf4a:	2a01      	cmp	r2, #1
 800bf4c:	bf14      	ite	ne
 800bf4e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800bf52:	4618      	moveq	r0, r3
 800bf54:	4281      	cmp	r1, r0
 800bf56:	ddef      	ble.n	800bf38 <validate_structure+0xe8>
 800bf58:	3201      	adds	r2, #1
 800bf5a:	1a09      	subs	r1, r1, r0
 800bf5c:	2a0c      	cmp	r2, #12
 800bf5e:	60e1      	str	r1, [r4, #12]
 800bf60:	6122      	str	r2, [r4, #16]
 800bf62:	d1f0      	bne.n	800bf46 <validate_structure+0xf6>
 800bf64:	6963      	ldr	r3, [r4, #20]
 800bf66:	2100      	movs	r1, #0
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	6121      	str	r1, [r4, #16]
 800bf6c:	0791      	lsls	r1, r2, #30
 800bf6e:	6162      	str	r2, [r4, #20]
 800bf70:	d13c      	bne.n	800bfec <validate_structure+0x19c>
 800bf72:	2164      	movs	r1, #100	@ 0x64
 800bf74:	fb92 f0f1 	sdiv	r0, r2, r1
 800bf78:	fb01 2210 	mls	r2, r1, r0, r2
 800bf7c:	2a00      	cmp	r2, #0
 800bf7e:	d137      	bne.n	800bff0 <validate_structure+0x1a0>
 800bf80:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800bf84:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bf88:	fb93 f1f2 	sdiv	r1, r3, r2
 800bf8c:	fb02 3311 	mls	r3, r2, r1, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	bf14      	ite	ne
 800bf94:	231c      	movne	r3, #28
 800bf96:	231d      	moveq	r3, #29
 800bf98:	e7d5      	b.n	800bf46 <validate_structure+0xf6>
 800bf9a:	6922      	ldr	r2, [r4, #16]
 800bf9c:	3a01      	subs	r2, #1
 800bf9e:	6122      	str	r2, [r4, #16]
 800bfa0:	3201      	adds	r2, #1
 800bfa2:	d116      	bne.n	800bfd2 <validate_structure+0x182>
 800bfa4:	6963      	ldr	r3, [r4, #20]
 800bfa6:	1e5a      	subs	r2, r3, #1
 800bfa8:	0797      	lsls	r7, r2, #30
 800bfaa:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800bfae:	d119      	bne.n	800bfe4 <validate_structure+0x194>
 800bfb0:	fb92 f7f1 	sdiv	r7, r2, r1
 800bfb4:	fb01 2217 	mls	r2, r1, r7, r2
 800bfb8:	b9b2      	cbnz	r2, 800bfe8 <validate_structure+0x198>
 800bfba:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800bfbe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bfc2:	fb93 f7f2 	sdiv	r7, r3, r2
 800bfc6:	fb02 3317 	mls	r3, r2, r7, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	bf14      	ite	ne
 800bfce:	231c      	movne	r3, #28
 800bfd0:	231d      	moveq	r3, #29
 800bfd2:	6922      	ldr	r2, [r4, #16]
 800bfd4:	2a01      	cmp	r2, #1
 800bfd6:	bf14      	ite	ne
 800bfd8:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800bfdc:	461a      	moveq	r2, r3
 800bfde:	4432      	add	r2, r6
 800bfe0:	60e2      	str	r2, [r4, #12]
 800bfe2:	e7a6      	b.n	800bf32 <validate_structure+0xe2>
 800bfe4:	231c      	movs	r3, #28
 800bfe6:	e7f4      	b.n	800bfd2 <validate_structure+0x182>
 800bfe8:	231d      	movs	r3, #29
 800bfea:	e7f2      	b.n	800bfd2 <validate_structure+0x182>
 800bfec:	231c      	movs	r3, #28
 800bfee:	e7aa      	b.n	800bf46 <validate_structure+0xf6>
 800bff0:	231d      	movs	r3, #29
 800bff2:	e7a8      	b.n	800bf46 <validate_structure+0xf6>
 800bff4:	08011ea0 	.word	0x08011ea0

0800bff8 <mktime>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	b085      	sub	sp, #20
 800bffe:	4607      	mov	r7, r0
 800c000:	f003 fc74 	bl	800f8ec <__gettzinfo>
 800c004:	4681      	mov	r9, r0
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff22 	bl	800be50 <validate_structure>
 800c00c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c010:	223c      	movs	r2, #60	@ 0x3c
 800c012:	fb02 4403 	mla	r4, r2, r3, r4
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	697d      	ldr	r5, [r7, #20]
 800c01a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c01e:	fb02 4403 	mla	r4, r2, r3, r4
 800c022:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800c026:	4ac1      	ldr	r2, [pc, #772]	@ (800c32c <mktime+0x334>)
 800c028:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c02c:	3e01      	subs	r6, #1
 800c02e:	2b01      	cmp	r3, #1
 800c030:	4416      	add	r6, r2
 800c032:	dd11      	ble.n	800c058 <mktime+0x60>
 800c034:	07a9      	lsls	r1, r5, #30
 800c036:	d10f      	bne.n	800c058 <mktime+0x60>
 800c038:	2264      	movs	r2, #100	@ 0x64
 800c03a:	fb95 f3f2 	sdiv	r3, r5, r2
 800c03e:	fb02 5313 	mls	r3, r2, r3, r5
 800c042:	b943      	cbnz	r3, 800c056 <mktime+0x5e>
 800c044:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c048:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c04c:	fb93 f1f2 	sdiv	r1, r3, r2
 800c050:	fb02 3311 	mls	r3, r2, r1, r3
 800c054:	b903      	cbnz	r3, 800c058 <mktime+0x60>
 800c056:	3601      	adds	r6, #1
 800c058:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800c05c:	3310      	adds	r3, #16
 800c05e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800c062:	4293      	cmp	r3, r2
 800c064:	61fe      	str	r6, [r7, #28]
 800c066:	f200 8167 	bhi.w	800c338 <mktime+0x340>
 800c06a:	2d46      	cmp	r5, #70	@ 0x46
 800c06c:	f340 808e 	ble.w	800c18c <mktime+0x194>
 800c070:	2346      	movs	r3, #70	@ 0x46
 800c072:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c076:	2164      	movs	r1, #100	@ 0x64
 800c078:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c07c:	079a      	lsls	r2, r3, #30
 800c07e:	d17f      	bne.n	800c180 <mktime+0x188>
 800c080:	fb93 f2f1 	sdiv	r2, r3, r1
 800c084:	fb01 3212 	mls	r2, r1, r2, r3
 800c088:	2a00      	cmp	r2, #0
 800c08a:	d17c      	bne.n	800c186 <mktime+0x18e>
 800c08c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c090:	fb92 fef0 	sdiv	lr, r2, r0
 800c094:	fb00 221e 	mls	r2, r0, lr, r2
 800c098:	2a00      	cmp	r2, #0
 800c09a:	bf14      	ite	ne
 800c09c:	4662      	movne	r2, ip
 800c09e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	429d      	cmp	r5, r3
 800c0a6:	4416      	add	r6, r2
 800c0a8:	d1e8      	bne.n	800c07c <mktime+0x84>
 800c0aa:	4ba1      	ldr	r3, [pc, #644]	@ (800c330 <mktime+0x338>)
 800c0ac:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c0b0:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c0b4:	f000 f9fa 	bl	800c4ac <__tz_lock>
 800c0b8:	f000 fa04 	bl	800c4c4 <_tzset_unlocked>
 800c0bc:	4b9d      	ldr	r3, [pc, #628]	@ (800c334 <mktime+0x33c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 8140 	beq.w	800c346 <mktime+0x34e>
 800c0c6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c0ca:	6978      	ldr	r0, [r7, #20]
 800c0cc:	4653      	mov	r3, sl
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	bfa8      	it	ge
 800c0d2:	2301      	movge	r3, #1
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c0da:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c0de:	4283      	cmp	r3, r0
 800c0e0:	f040 8096 	bne.w	800c210 <mktime+0x218>
 800c0e4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c0e8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c0ec:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c0f0:	1a13      	subs	r3, r2, r0
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800c0f8:	9302      	str	r3, [sp, #8]
 800c0fa:	9a02      	ldr	r2, [sp, #8]
 800c0fc:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c100:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800c104:	ebb2 0e03 	subs.w	lr, r2, r3
 800c108:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c10c:	4574      	cmp	r4, lr
 800c10e:	eb78 0201 	sbcs.w	r2, r8, r1
 800c112:	f280 8085 	bge.w	800c220 <mktime+0x228>
 800c116:	f8d9 2000 	ldr.w	r2, [r9]
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	f000 808d 	beq.w	800c23a <mktime+0x242>
 800c120:	9a03      	ldr	r2, [sp, #12]
 800c122:	4294      	cmp	r4, r2
 800c124:	eb78 020b 	sbcs.w	r2, r8, fp
 800c128:	f2c0 810a 	blt.w	800c340 <mktime+0x348>
 800c12c:	4574      	cmp	r4, lr
 800c12e:	eb78 0101 	sbcs.w	r1, r8, r1
 800c132:	bfb4      	ite	lt
 800c134:	f04f 0b01 	movlt.w	fp, #1
 800c138:	f04f 0b00 	movge.w	fp, #0
 800c13c:	f1ba 0f00 	cmp.w	sl, #0
 800c140:	f280 8087 	bge.w	800c252 <mktime+0x25a>
 800c144:	f1bb 0f01 	cmp.w	fp, #1
 800c148:	f040 80ff 	bne.w	800c34a <mktime+0x352>
 800c14c:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800c150:	191c      	adds	r4, r3, r4
 800c152:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c156:	f04f 0b01 	mov.w	fp, #1
 800c15a:	f000 f9ad 	bl	800c4b8 <__tz_unlock>
 800c15e:	3604      	adds	r6, #4
 800c160:	2307      	movs	r3, #7
 800c162:	fb96 f3f3 	sdiv	r3, r6, r3
 800c166:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c16a:	1af6      	subs	r6, r6, r3
 800c16c:	f100 80db 	bmi.w	800c326 <mktime+0x32e>
 800c170:	f8c7 b020 	str.w	fp, [r7, #32]
 800c174:	61be      	str	r6, [r7, #24]
 800c176:	4620      	mov	r0, r4
 800c178:	4641      	mov	r1, r8
 800c17a:	b005      	add	sp, #20
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	f240 126d 	movw	r2, #365	@ 0x16d
 800c184:	e78d      	b.n	800c0a2 <mktime+0xaa>
 800c186:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c18a:	e78a      	b.n	800c0a2 <mktime+0xaa>
 800c18c:	d08d      	beq.n	800c0aa <mktime+0xb2>
 800c18e:	2345      	movs	r3, #69	@ 0x45
 800c190:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c194:	2164      	movs	r1, #100	@ 0x64
 800c196:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c19a:	e012      	b.n	800c1c2 <mktime+0x1ca>
 800c19c:	bb62      	cbnz	r2, 800c1f8 <mktime+0x200>
 800c19e:	fb93 f2f1 	sdiv	r2, r3, r1
 800c1a2:	fb01 3212 	mls	r2, r1, r2, r3
 800c1a6:	bb52      	cbnz	r2, 800c1fe <mktime+0x206>
 800c1a8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c1ac:	fb92 fef0 	sdiv	lr, r2, r0
 800c1b0:	fb00 221e 	mls	r2, r0, lr, r2
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	bf14      	ite	ne
 800c1b8:	4662      	movne	r2, ip
 800c1ba:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c1be:	1ab6      	subs	r6, r6, r2
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	429d      	cmp	r5, r3
 800c1c4:	f003 0203 	and.w	r2, r3, #3
 800c1c8:	dbe8      	blt.n	800c19c <mktime+0x1a4>
 800c1ca:	b9da      	cbnz	r2, 800c204 <mktime+0x20c>
 800c1cc:	2264      	movs	r2, #100	@ 0x64
 800c1ce:	fb95 f3f2 	sdiv	r3, r5, r2
 800c1d2:	fb02 5313 	mls	r3, r2, r3, r5
 800c1d6:	b9c3      	cbnz	r3, 800c20a <mktime+0x212>
 800c1d8:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c1dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c1e0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1e4:	fb02 3311 	mls	r3, r2, r1, r3
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f240 136d 	movw	r3, #365	@ 0x16d
 800c1ee:	bf08      	it	eq
 800c1f0:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800c1f4:	1af6      	subs	r6, r6, r3
 800c1f6:	e758      	b.n	800c0aa <mktime+0xb2>
 800c1f8:	f240 126d 	movw	r2, #365	@ 0x16d
 800c1fc:	e7df      	b.n	800c1be <mktime+0x1c6>
 800c1fe:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c202:	e7dc      	b.n	800c1be <mktime+0x1c6>
 800c204:	f240 136d 	movw	r3, #365	@ 0x16d
 800c208:	e7f4      	b.n	800c1f4 <mktime+0x1fc>
 800c20a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800c20e:	e7f1      	b.n	800c1f4 <mktime+0x1fc>
 800c210:	f000 f8a2 	bl	800c358 <__tzcalc_limits>
 800c214:	2800      	cmp	r0, #0
 800c216:	f47f af65 	bne.w	800c0e4 <mktime+0xec>
 800c21a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c21e:	e791      	b.n	800c144 <mktime+0x14c>
 800c220:	9a02      	ldr	r2, [sp, #8]
 800c222:	1a12      	subs	r2, r2, r0
 800c224:	9202      	str	r2, [sp, #8]
 800c226:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c22a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c22e:	9a02      	ldr	r2, [sp, #8]
 800c230:	4294      	cmp	r4, r2
 800c232:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c236:	dbf0      	blt.n	800c21a <mktime+0x222>
 800c238:	e76d      	b.n	800c116 <mktime+0x11e>
 800c23a:	9a03      	ldr	r2, [sp, #12]
 800c23c:	4294      	cmp	r4, r2
 800c23e:	eb78 020b 	sbcs.w	r2, r8, fp
 800c242:	f6ff af73 	blt.w	800c12c <mktime+0x134>
 800c246:	f1ba 0f00 	cmp.w	sl, #0
 800c24a:	f6ff af7f 	blt.w	800c14c <mktime+0x154>
 800c24e:	f04f 0b01 	mov.w	fp, #1
 800c252:	9a01      	ldr	r2, [sp, #4]
 800c254:	ea82 020b 	eor.w	r2, r2, fp
 800c258:	2a01      	cmp	r2, #1
 800c25a:	f47f af73 	bne.w	800c144 <mktime+0x14c>
 800c25e:	f1bb 0f00 	cmp.w	fp, #0
 800c262:	d035      	beq.n	800c2d0 <mktime+0x2d8>
 800c264:	1a1b      	subs	r3, r3, r0
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c26c:	441a      	add	r2, r3
 800c26e:	191c      	adds	r4, r3, r4
 800c270:	603a      	str	r2, [r7, #0]
 800c272:	4638      	mov	r0, r7
 800c274:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c278:	f7ff fdea 	bl	800be50 <validate_structure>
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	ebb2 020a 	subs.w	r2, r2, sl
 800c282:	f43f af5f 	beq.w	800c144 <mktime+0x14c>
 800c286:	2a01      	cmp	r2, #1
 800c288:	dc24      	bgt.n	800c2d4 <mktime+0x2dc>
 800c28a:	1c93      	adds	r3, r2, #2
 800c28c:	bfd8      	it	le
 800c28e:	2201      	movle	r2, #1
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	18d3      	adds	r3, r2, r3
 800c294:	d527      	bpl.n	800c2e6 <mktime+0x2ee>
 800c296:	1e6b      	subs	r3, r5, #1
 800c298:	0798      	lsls	r0, r3, #30
 800c29a:	d11e      	bne.n	800c2da <mktime+0x2e2>
 800c29c:	2164      	movs	r1, #100	@ 0x64
 800c29e:	fb93 f0f1 	sdiv	r0, r3, r1
 800c2a2:	fb01 3310 	mls	r3, r1, r0, r3
 800c2a6:	b9db      	cbnz	r3, 800c2e0 <mktime+0x2e8>
 800c2a8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c2ac:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800c2b0:	fb95 f1f3 	sdiv	r1, r5, r3
 800c2b4:	fb03 5511 	mls	r5, r3, r1, r5
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	f240 136d 	movw	r3, #365	@ 0x16d
 800c2be:	bf18      	it	ne
 800c2c0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800c2c4:	61fb      	str	r3, [r7, #28]
 800c2c6:	4416      	add	r6, r2
 800c2c8:	e73c      	b.n	800c144 <mktime+0x14c>
 800c2ca:	f04f 0b00 	mov.w	fp, #0
 800c2ce:	e7c0      	b.n	800c252 <mktime+0x25a>
 800c2d0:	1ac3      	subs	r3, r0, r3
 800c2d2:	e7c8      	b.n	800c266 <mktime+0x26e>
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d8:	e7da      	b.n	800c290 <mktime+0x298>
 800c2da:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800c2de:	e7f1      	b.n	800c2c4 <mktime+0x2cc>
 800c2e0:	f240 136d 	movw	r3, #365	@ 0x16d
 800c2e4:	e7ee      	b.n	800c2c4 <mktime+0x2cc>
 800c2e6:	07a9      	lsls	r1, r5, #30
 800c2e8:	d117      	bne.n	800c31a <mktime+0x322>
 800c2ea:	2064      	movs	r0, #100	@ 0x64
 800c2ec:	fb95 f1f0 	sdiv	r1, r5, r0
 800c2f0:	fb00 5111 	mls	r1, r0, r1, r5
 800c2f4:	b9a1      	cbnz	r1, 800c320 <mktime+0x328>
 800c2f6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c2fa:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800c2fe:	fb95 f0f1 	sdiv	r0, r5, r1
 800c302:	fb01 5510 	mls	r5, r1, r0, r5
 800c306:	2d00      	cmp	r5, #0
 800c308:	f240 116d 	movw	r1, #365	@ 0x16d
 800c30c:	bf08      	it	eq
 800c30e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800c312:	428b      	cmp	r3, r1
 800c314:	bfa8      	it	ge
 800c316:	1a5b      	subge	r3, r3, r1
 800c318:	e7d4      	b.n	800c2c4 <mktime+0x2cc>
 800c31a:	f240 116d 	movw	r1, #365	@ 0x16d
 800c31e:	e7f8      	b.n	800c312 <mktime+0x31a>
 800c320:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800c324:	e7f5      	b.n	800c312 <mktime+0x31a>
 800c326:	3607      	adds	r6, #7
 800c328:	e722      	b.n	800c170 <mktime+0x178>
 800c32a:	bf00      	nop
 800c32c:	08011e70 	.word	0x08011e70
 800c330:	00015180 	.word	0x00015180
 800c334:	200085a0 	.word	0x200085a0
 800c338:	f04f 34ff 	mov.w	r4, #4294967295
 800c33c:	46a0      	mov	r8, r4
 800c33e:	e71a      	b.n	800c176 <mktime+0x17e>
 800c340:	f1ba 0f00 	cmp.w	sl, #0
 800c344:	dac1      	bge.n	800c2ca <mktime+0x2d2>
 800c346:	f04f 0b00 	mov.w	fp, #0
 800c34a:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c34e:	191c      	adds	r4, r3, r4
 800c350:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c354:	e701      	b.n	800c15a <mktime+0x162>
 800c356:	bf00      	nop

0800c358 <__tzcalc_limits>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	4604      	mov	r4, r0
 800c35e:	f003 fac5 	bl	800f8ec <__gettzinfo>
 800c362:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800c366:	429c      	cmp	r4, r3
 800c368:	f340 8099 	ble.w	800c49e <__tzcalc_limits+0x146>
 800c36c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800c370:	19e5      	adds	r5, r4, r7
 800c372:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800c376:	f240 126d 	movw	r2, #365	@ 0x16d
 800c37a:	10ad      	asrs	r5, r5, #2
 800c37c:	fb02 5503 	mla	r5, r2, r3, r5
 800c380:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800c384:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800c388:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800c38c:	4f45      	ldr	r7, [pc, #276]	@ (800c4a4 <__tzcalc_limits+0x14c>)
 800c38e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c392:	441d      	add	r5, r3
 800c394:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c398:	eb04 030c 	add.w	r3, r4, ip
 800c39c:	6044      	str	r4, [r0, #4]
 800c39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	441d      	add	r5, r3
 800c3a6:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800c3aa:	7a0b      	ldrb	r3, [r1, #8]
 800c3ac:	694a      	ldr	r2, [r1, #20]
 800c3ae:	2b4a      	cmp	r3, #74	@ 0x4a
 800c3b0:	d133      	bne.n	800c41a <__tzcalc_limits+0xc2>
 800c3b2:	07a6      	lsls	r6, r4, #30
 800c3b4:	eb05 0302 	add.w	r3, r5, r2
 800c3b8:	d106      	bne.n	800c3c8 <__tzcalc_limits+0x70>
 800c3ba:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800c3be:	fb94 f6fe 	sdiv	r6, r4, lr
 800c3c2:	fb0e 4616 	mls	r6, lr, r6, r4
 800c3c6:	b936      	cbnz	r6, 800c3d6 <__tzcalc_limits+0x7e>
 800c3c8:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800c3cc:	fb94 f6fe 	sdiv	r6, r4, lr
 800c3d0:	fb0e 4616 	mls	r6, lr, r6, r4
 800c3d4:	b9fe      	cbnz	r6, 800c416 <__tzcalc_limits+0xbe>
 800c3d6:	2a3b      	cmp	r2, #59	@ 0x3b
 800c3d8:	bfd4      	ite	le
 800c3da:	2200      	movle	r2, #0
 800c3dc:	2201      	movgt	r2, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	698a      	ldr	r2, [r1, #24]
 800c3e4:	17d6      	asrs	r6, r2, #31
 800c3e6:	fbc3 2607 	smlal	r2, r6, r3, r7
 800c3ea:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c3ec:	18d2      	adds	r2, r2, r3
 800c3ee:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800c3f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c3f6:	3128      	adds	r1, #40	@ 0x28
 800c3f8:	458c      	cmp	ip, r1
 800c3fa:	d1d6      	bne.n	800c3aa <__tzcalc_limits+0x52>
 800c3fc:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800c400:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800c404:	428c      	cmp	r4, r1
 800c406:	4193      	sbcs	r3, r2
 800c408:	bfb4      	ite	lt
 800c40a:	2301      	movlt	r3, #1
 800c40c:	2300      	movge	r3, #0
 800c40e:	6003      	str	r3, [r0, #0]
 800c410:	2001      	movs	r0, #1
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c416:	2200      	movs	r2, #0
 800c418:	e7e1      	b.n	800c3de <__tzcalc_limits+0x86>
 800c41a:	2b44      	cmp	r3, #68	@ 0x44
 800c41c:	d101      	bne.n	800c422 <__tzcalc_limits+0xca>
 800c41e:	18ab      	adds	r3, r5, r2
 800c420:	e7df      	b.n	800c3e2 <__tzcalc_limits+0x8a>
 800c422:	07a3      	lsls	r3, r4, #30
 800c424:	d105      	bne.n	800c432 <__tzcalc_limits+0xda>
 800c426:	2664      	movs	r6, #100	@ 0x64
 800c428:	fb94 f3f6 	sdiv	r3, r4, r6
 800c42c:	fb06 4313 	mls	r3, r6, r3, r4
 800c430:	bb7b      	cbnz	r3, 800c492 <__tzcalc_limits+0x13a>
 800c432:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c436:	fb94 f6f3 	sdiv	r6, r4, r3
 800c43a:	fb03 4616 	mls	r6, r3, r6, r4
 800c43e:	fab6 f686 	clz	r6, r6
 800c442:	0976      	lsrs	r6, r6, #5
 800c444:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800c4a8 <__tzcalc_limits+0x150>
 800c448:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c44c:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800c450:	462b      	mov	r3, r5
 800c452:	f04f 0800 	mov.w	r8, #0
 800c456:	fb0a e606 	mla	r6, sl, r6, lr
 800c45a:	f108 0801 	add.w	r8, r8, #1
 800c45e:	45c1      	cmp	r9, r8
 800c460:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800c464:	dc17      	bgt.n	800c496 <__tzcalc_limits+0x13e>
 800c466:	f103 0804 	add.w	r8, r3, #4
 800c46a:	2607      	movs	r6, #7
 800c46c:	fb98 f6f6 	sdiv	r6, r8, r6
 800c470:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c474:	eba8 0606 	sub.w	r6, r8, r6
 800c478:	1b92      	subs	r2, r2, r6
 800c47a:	690e      	ldr	r6, [r1, #16]
 800c47c:	f106 36ff 	add.w	r6, r6, #4294967295
 800c480:	bf48      	it	mi
 800c482:	3207      	addmi	r2, #7
 800c484:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c488:	4432      	add	r2, r6
 800c48a:	4572      	cmp	r2, lr
 800c48c:	da05      	bge.n	800c49a <__tzcalc_limits+0x142>
 800c48e:	4413      	add	r3, r2
 800c490:	e7a7      	b.n	800c3e2 <__tzcalc_limits+0x8a>
 800c492:	2601      	movs	r6, #1
 800c494:	e7d6      	b.n	800c444 <__tzcalc_limits+0xec>
 800c496:	4473      	add	r3, lr
 800c498:	e7df      	b.n	800c45a <__tzcalc_limits+0x102>
 800c49a:	3a07      	subs	r2, #7
 800c49c:	e7f5      	b.n	800c48a <__tzcalc_limits+0x132>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e7b7      	b.n	800c412 <__tzcalc_limits+0xba>
 800c4a2:	bf00      	nop
 800c4a4:	00015180 	.word	0x00015180
 800c4a8:	08012190 	.word	0x08012190

0800c4ac <__tz_lock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	@ (800c4b4 <__tz_lock+0x8>)
 800c4ae:	f7f8 bd1a 	b.w	8004ee6 <__retarget_lock_acquire>
 800c4b2:	bf00      	nop
 800c4b4:	200034a0 	.word	0x200034a0

0800c4b8 <__tz_unlock>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	@ (800c4c0 <__tz_unlock+0x8>)
 800c4ba:	f7f8 bd1e 	b.w	8004efa <__retarget_lock_release>
 800c4be:	bf00      	nop
 800c4c0:	200034a0 	.word	0x200034a0

0800c4c4 <_tzset_unlocked>:
 800c4c4:	4b01      	ldr	r3, [pc, #4]	@ (800c4cc <_tzset_unlocked+0x8>)
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	f000 b802 	b.w	800c4d0 <_tzset_unlocked_r>
 800c4cc:	200001a4 	.word	0x200001a4

0800c4d0 <_tzset_unlocked_r>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	b08d      	sub	sp, #52	@ 0x34
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	f003 fa08 	bl	800f8ec <__gettzinfo>
 800c4dc:	49bc      	ldr	r1, [pc, #752]	@ (800c7d0 <_tzset_unlocked_r+0x300>)
 800c4de:	4dbd      	ldr	r5, [pc, #756]	@ (800c7d4 <_tzset_unlocked_r+0x304>)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f001 fd2c 	bl	800df40 <_getenv_r>
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	bb10      	cbnz	r0, 800c532 <_tzset_unlocked_r+0x62>
 800c4ec:	4bba      	ldr	r3, [pc, #744]	@ (800c7d8 <_tzset_unlocked_r+0x308>)
 800c4ee:	4abb      	ldr	r2, [pc, #748]	@ (800c7dc <_tzset_unlocked_r+0x30c>)
 800c4f0:	6018      	str	r0, [r3, #0]
 800c4f2:	4bbb      	ldr	r3, [pc, #748]	@ (800c7e0 <_tzset_unlocked_r+0x310>)
 800c4f4:	62a0      	str	r0, [r4, #40]	@ 0x28
 800c4f6:	6018      	str	r0, [r3, #0]
 800c4f8:	4bba      	ldr	r3, [pc, #744]	@ (800c7e4 <_tzset_unlocked_r+0x314>)
 800c4fa:	6520      	str	r0, [r4, #80]	@ 0x50
 800c4fc:	e9c3 2200 	strd	r2, r2, [r3]
 800c500:	214a      	movs	r1, #74	@ 0x4a
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800c50a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800c50e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800c512:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c516:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c51a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c51e:	6828      	ldr	r0, [r5, #0]
 800c520:	7221      	strb	r1, [r4, #8]
 800c522:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c526:	f7fd fbdd 	bl	8009ce4 <free>
 800c52a:	602e      	str	r6, [r5, #0]
 800c52c:	b00d      	add	sp, #52	@ 0x34
 800c52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c532:	6829      	ldr	r1, [r5, #0]
 800c534:	2900      	cmp	r1, #0
 800c536:	f040 808e 	bne.w	800c656 <_tzset_unlocked_r+0x186>
 800c53a:	6828      	ldr	r0, [r5, #0]
 800c53c:	f7fd fbd2 	bl	8009ce4 <free>
 800c540:	4630      	mov	r0, r6
 800c542:	f7f3 fea5 	bl	8000290 <strlen>
 800c546:	1c41      	adds	r1, r0, #1
 800c548:	4638      	mov	r0, r7
 800c54a:	f7fd fbf5 	bl	8009d38 <_malloc_r>
 800c54e:	6028      	str	r0, [r5, #0]
 800c550:	2800      	cmp	r0, #0
 800c552:	f040 8086 	bne.w	800c662 <_tzset_unlocked_r+0x192>
 800c556:	4aa2      	ldr	r2, [pc, #648]	@ (800c7e0 <_tzset_unlocked_r+0x310>)
 800c558:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800c7e4 <_tzset_unlocked_r+0x314>
 800c55c:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800c7d8 <_tzset_unlocked_r+0x308>
 800c560:	2300      	movs	r3, #0
 800c562:	6013      	str	r3, [r2, #0]
 800c564:	4aa0      	ldr	r2, [pc, #640]	@ (800c7e8 <_tzset_unlocked_r+0x318>)
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	2000      	movs	r0, #0
 800c56c:	2100      	movs	r1, #0
 800c56e:	e9c8 2200 	strd	r2, r2, [r8]
 800c572:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800c576:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800c57a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800c57e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800c582:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800c586:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800c58a:	224a      	movs	r2, #74	@ 0x4a
 800c58c:	7222      	strb	r2, [r4, #8]
 800c58e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c590:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800c594:	6523      	str	r3, [r4, #80]	@ 0x50
 800c596:	7833      	ldrb	r3, [r6, #0]
 800c598:	2b3a      	cmp	r3, #58	@ 0x3a
 800c59a:	bf08      	it	eq
 800c59c:	3601      	addeq	r6, #1
 800c59e:	7833      	ldrb	r3, [r6, #0]
 800c5a0:	2b3c      	cmp	r3, #60	@ 0x3c
 800c5a2:	d162      	bne.n	800c66a <_tzset_unlocked_r+0x19a>
 800c5a4:	1c75      	adds	r5, r6, #1
 800c5a6:	4a91      	ldr	r2, [pc, #580]	@ (800c7ec <_tzset_unlocked_r+0x31c>)
 800c5a8:	4991      	ldr	r1, [pc, #580]	@ (800c7f0 <_tzset_unlocked_r+0x320>)
 800c5aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f7ff fae5 	bl	800bb7c <siscanf>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	ddba      	ble.n	800c52c <_tzset_unlocked_r+0x5c>
 800c5b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5b8:	1eda      	subs	r2, r3, #3
 800c5ba:	2a07      	cmp	r2, #7
 800c5bc:	d8b6      	bhi.n	800c52c <_tzset_unlocked_r+0x5c>
 800c5be:	5ceb      	ldrb	r3, [r5, r3]
 800c5c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5c2:	d1b3      	bne.n	800c52c <_tzset_unlocked_r+0x5c>
 800c5c4:	3602      	adds	r6, #2
 800c5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5c8:	18f5      	adds	r5, r6, r3
 800c5ca:	5cf3      	ldrb	r3, [r6, r3]
 800c5cc:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5ce:	d15a      	bne.n	800c686 <_tzset_unlocked_r+0x1b6>
 800c5d0:	3501      	adds	r5, #1
 800c5d2:	f04f 39ff 	mov.w	r9, #4294967295
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c5dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c5e0:	af08      	add	r7, sp, #32
 800c5e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	f10d 031e 	add.w	r3, sp, #30
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4980      	ldr	r1, [pc, #512]	@ (800c7f4 <_tzset_unlocked_r+0x324>)
 800c5f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5f4:	aa07      	add	r2, sp, #28
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f7ff fac0 	bl	800bb7c <siscanf>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	dd95      	ble.n	800c52c <_tzset_unlocked_r+0x5c>
 800c600:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c604:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800c608:	223c      	movs	r2, #60	@ 0x3c
 800c60a:	fb02 6603 	mla	r6, r2, r3, r6
 800c60e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c612:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c616:	fb02 6603 	mla	r6, r2, r3, r6
 800c61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c61c:	fb09 f606 	mul.w	r6, r9, r6
 800c620:	eb05 0903 	add.w	r9, r5, r3
 800c624:	5ceb      	ldrb	r3, [r5, r3]
 800c626:	2b3c      	cmp	r3, #60	@ 0x3c
 800c628:	f040 80ee 	bne.w	800c808 <_tzset_unlocked_r+0x338>
 800c62c:	f109 0501 	add.w	r5, r9, #1
 800c630:	4a71      	ldr	r2, [pc, #452]	@ (800c7f8 <_tzset_unlocked_r+0x328>)
 800c632:	496f      	ldr	r1, [pc, #444]	@ (800c7f0 <_tzset_unlocked_r+0x320>)
 800c634:	ab0a      	add	r3, sp, #40	@ 0x28
 800c636:	4628      	mov	r0, r5
 800c638:	f7ff faa0 	bl	800bb7c <siscanf>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	dc28      	bgt.n	800c692 <_tzset_unlocked_r+0x1c2>
 800c640:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c644:	2b3e      	cmp	r3, #62	@ 0x3e
 800c646:	d124      	bne.n	800c692 <_tzset_unlocked_r+0x1c2>
 800c648:	4b68      	ldr	r3, [pc, #416]	@ (800c7ec <_tzset_unlocked_r+0x31c>)
 800c64a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c64c:	e9c8 3300 	strd	r3, r3, [r8]
 800c650:	f8ca 6000 	str.w	r6, [sl]
 800c654:	e76a      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c656:	f7f3 fdbb 	bl	80001d0 <strcmp>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f47f af6d 	bne.w	800c53a <_tzset_unlocked_r+0x6a>
 800c660:	e764      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c662:	4631      	mov	r1, r6
 800c664:	f000 fa30 	bl	800cac8 <strcpy>
 800c668:	e775      	b.n	800c556 <_tzset_unlocked_r+0x86>
 800c66a:	4a60      	ldr	r2, [pc, #384]	@ (800c7ec <_tzset_unlocked_r+0x31c>)
 800c66c:	4963      	ldr	r1, [pc, #396]	@ (800c7fc <_tzset_unlocked_r+0x32c>)
 800c66e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff fa83 	bl	800bb7c <siscanf>
 800c676:	2800      	cmp	r0, #0
 800c678:	f77f af58 	ble.w	800c52c <_tzset_unlocked_r+0x5c>
 800c67c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c67e:	3b03      	subs	r3, #3
 800c680:	2b07      	cmp	r3, #7
 800c682:	d9a0      	bls.n	800c5c6 <_tzset_unlocked_r+0xf6>
 800c684:	e752      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c686:	2b2b      	cmp	r3, #43	@ 0x2b
 800c688:	bf08      	it	eq
 800c68a:	3501      	addeq	r5, #1
 800c68c:	f04f 0901 	mov.w	r9, #1
 800c690:	e7a1      	b.n	800c5d6 <_tzset_unlocked_r+0x106>
 800c692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c694:	1eda      	subs	r2, r3, #3
 800c696:	2a07      	cmp	r2, #7
 800c698:	f63f af48 	bhi.w	800c52c <_tzset_unlocked_r+0x5c>
 800c69c:	5ceb      	ldrb	r3, [r5, r3]
 800c69e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6a0:	f47f af44 	bne.w	800c52c <_tzset_unlocked_r+0x5c>
 800c6a4:	f109 0902 	add.w	r9, r9, #2
 800c6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6aa:	eb09 0503 	add.w	r5, r9, r3
 800c6ae:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c6b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c6b4:	f040 80b7 	bne.w	800c826 <_tzset_unlocked_r+0x356>
 800c6b8:	3501      	adds	r5, #1
 800c6ba:	f04f 39ff 	mov.w	r9, #4294967295
 800c6be:	2300      	movs	r3, #0
 800c6c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c6c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c6c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c6cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6d0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	f10d 031e 	add.w	r3, sp, #30
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	4945      	ldr	r1, [pc, #276]	@ (800c7f4 <_tzset_unlocked_r+0x324>)
 800c6de:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6e0:	aa07      	add	r2, sp, #28
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f7ff fa4a 	bl	800bb7c <siscanf>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f300 80a2 	bgt.w	800c832 <_tzset_unlocked_r+0x362>
 800c6ee:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f6:	4627      	mov	r7, r4
 800c6f8:	441d      	add	r5, r3
 800c6fa:	f04f 0b00 	mov.w	fp, #0
 800c6fe:	782b      	ldrb	r3, [r5, #0]
 800c700:	2b2c      	cmp	r3, #44	@ 0x2c
 800c702:	bf08      	it	eq
 800c704:	3501      	addeq	r5, #1
 800c706:	f895 9000 	ldrb.w	r9, [r5]
 800c70a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800c70e:	f040 80a3 	bne.w	800c858 <_tzset_unlocked_r+0x388>
 800c712:	ab0a      	add	r3, sp, #40	@ 0x28
 800c714:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800c718:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c71c:	aa09      	add	r2, sp, #36	@ 0x24
 800c71e:	9200      	str	r2, [sp, #0]
 800c720:	4937      	ldr	r1, [pc, #220]	@ (800c800 <_tzset_unlocked_r+0x330>)
 800c722:	9303      	str	r3, [sp, #12]
 800c724:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800c728:	4628      	mov	r0, r5
 800c72a:	f7ff fa27 	bl	800bb7c <siscanf>
 800c72e:	2803      	cmp	r0, #3
 800c730:	f47f aefc 	bne.w	800c52c <_tzset_unlocked_r+0x5c>
 800c734:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800c738:	1e4b      	subs	r3, r1, #1
 800c73a:	2b0b      	cmp	r3, #11
 800c73c:	f63f aef6 	bhi.w	800c52c <_tzset_unlocked_r+0x5c>
 800c740:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800c744:	1e53      	subs	r3, r2, #1
 800c746:	2b04      	cmp	r3, #4
 800c748:	f63f aef0 	bhi.w	800c52c <_tzset_unlocked_r+0x5c>
 800c74c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800c750:	2b06      	cmp	r3, #6
 800c752:	f63f aeeb 	bhi.w	800c52c <_tzset_unlocked_r+0x5c>
 800c756:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c75a:	f887 9008 	strb.w	r9, [r7, #8]
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c762:	eb05 0903 	add.w	r9, r5, r3
 800c766:	2500      	movs	r5, #0
 800c768:	f04f 0302 	mov.w	r3, #2
 800c76c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c770:	f8ad 501e 	strh.w	r5, [sp, #30]
 800c774:	f8ad 5020 	strh.w	r5, [sp, #32]
 800c778:	950a      	str	r5, [sp, #40]	@ 0x28
 800c77a:	f899 3000 	ldrb.w	r3, [r9]
 800c77e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c780:	f040 8096 	bne.w	800c8b0 <_tzset_unlocked_r+0x3e0>
 800c784:	ab0a      	add	r3, sp, #40	@ 0x28
 800c786:	aa08      	add	r2, sp, #32
 800c788:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c78c:	f10d 021e 	add.w	r2, sp, #30
 800c790:	9200      	str	r2, [sp, #0]
 800c792:	491c      	ldr	r1, [pc, #112]	@ (800c804 <_tzset_unlocked_r+0x334>)
 800c794:	9303      	str	r3, [sp, #12]
 800c796:	aa07      	add	r2, sp, #28
 800c798:	4648      	mov	r0, r9
 800c79a:	f7ff f9ef 	bl	800bb7c <siscanf>
 800c79e:	42a8      	cmp	r0, r5
 800c7a0:	f300 8086 	bgt.w	800c8b0 <_tzset_unlocked_r+0x3e0>
 800c7a4:	214a      	movs	r1, #74	@ 0x4a
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800c7ae:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c7b2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c7b6:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800c7ba:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800c7be:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c7c2:	7221      	strb	r1, [r4, #8]
 800c7c4:	62a5      	str	r5, [r4, #40]	@ 0x28
 800c7c6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c7ca:	6525      	str	r5, [r4, #80]	@ 0x50
 800c7cc:	e6ae      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c7ce:	bf00      	nop
 800c7d0:	08011ed0 	.word	0x08011ed0
 800c7d4:	20008580 	.word	0x20008580
 800c7d8:	2000859c 	.word	0x2000859c
 800c7dc:	08011ed3 	.word	0x08011ed3
 800c7e0:	200085a0 	.word	0x200085a0
 800c7e4:	20000030 	.word	0x20000030
 800c7e8:	08010f0e 	.word	0x08010f0e
 800c7ec:	20008590 	.word	0x20008590
 800c7f0:	08011ed7 	.word	0x08011ed7
 800c7f4:	08011f0c 	.word	0x08011f0c
 800c7f8:	20008584 	.word	0x20008584
 800c7fc:	08011eea 	.word	0x08011eea
 800c800:	08011ef8 	.word	0x08011ef8
 800c804:	08011f0b 	.word	0x08011f0b
 800c808:	4a3e      	ldr	r2, [pc, #248]	@ (800c904 <_tzset_unlocked_r+0x434>)
 800c80a:	493f      	ldr	r1, [pc, #252]	@ (800c908 <_tzset_unlocked_r+0x438>)
 800c80c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c80e:	4648      	mov	r0, r9
 800c810:	f7ff f9b4 	bl	800bb7c <siscanf>
 800c814:	2800      	cmp	r0, #0
 800c816:	f77f af17 	ble.w	800c648 <_tzset_unlocked_r+0x178>
 800c81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81c:	3b03      	subs	r3, #3
 800c81e:	2b07      	cmp	r3, #7
 800c820:	f67f af42 	bls.w	800c6a8 <_tzset_unlocked_r+0x1d8>
 800c824:	e682      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c826:	2b2b      	cmp	r3, #43	@ 0x2b
 800c828:	bf08      	it	eq
 800c82a:	3501      	addeq	r5, #1
 800c82c:	f04f 0901 	mov.w	r9, #1
 800c830:	e745      	b.n	800c6be <_tzset_unlocked_r+0x1ee>
 800c832:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c836:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c83a:	213c      	movs	r1, #60	@ 0x3c
 800c83c:	fb01 3302 	mla	r3, r1, r2, r3
 800c840:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c844:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c848:	fb01 3302 	mla	r3, r1, r2, r3
 800c84c:	fb09 f303 	mul.w	r3, r9, r3
 800c850:	e74f      	b.n	800c6f2 <_tzset_unlocked_r+0x222>
 800c852:	f04f 0b01 	mov.w	fp, #1
 800c856:	e752      	b.n	800c6fe <_tzset_unlocked_r+0x22e>
 800c858:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800c85c:	bf06      	itte	eq
 800c85e:	3501      	addeq	r5, #1
 800c860:	464b      	moveq	r3, r9
 800c862:	2344      	movne	r3, #68	@ 0x44
 800c864:	220a      	movs	r2, #10
 800c866:	a90b      	add	r1, sp, #44	@ 0x2c
 800c868:	4628      	mov	r0, r5
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	f002 f8a4 	bl	800e9b8 <strtoul>
 800c870:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800c874:	9b05      	ldr	r3, [sp, #20]
 800c876:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800c87a:	45a9      	cmp	r9, r5
 800c87c:	d114      	bne.n	800c8a8 <_tzset_unlocked_r+0x3d8>
 800c87e:	234d      	movs	r3, #77	@ 0x4d
 800c880:	f1bb 0f00 	cmp.w	fp, #0
 800c884:	d107      	bne.n	800c896 <_tzset_unlocked_r+0x3c6>
 800c886:	7223      	strb	r3, [r4, #8]
 800c888:	2103      	movs	r1, #3
 800c88a:	2302      	movs	r3, #2
 800c88c:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800c890:	f8c4 b014 	str.w	fp, [r4, #20]
 800c894:	e767      	b.n	800c766 <_tzset_unlocked_r+0x296>
 800c896:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800c89a:	220b      	movs	r2, #11
 800c89c:	2301      	movs	r3, #1
 800c89e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800c8a6:	e75e      	b.n	800c766 <_tzset_unlocked_r+0x296>
 800c8a8:	b280      	uxth	r0, r0
 800c8aa:	723b      	strb	r3, [r7, #8]
 800c8ac:	6178      	str	r0, [r7, #20]
 800c8ae:	e75a      	b.n	800c766 <_tzset_unlocked_r+0x296>
 800c8b0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c8b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c8b8:	213c      	movs	r1, #60	@ 0x3c
 800c8ba:	fb01 3302 	mla	r3, r1, r2, r3
 800c8be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c8c2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c8c6:	fb01 3302 	mla	r3, r1, r2, r3
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c8ce:	3728      	adds	r7, #40	@ 0x28
 800c8d0:	444d      	add	r5, r9
 800c8d2:	f1bb 0f00 	cmp.w	fp, #0
 800c8d6:	d0bc      	beq.n	800c852 <_tzset_unlocked_r+0x382>
 800c8d8:	9b04      	ldr	r3, [sp, #16]
 800c8da:	6523      	str	r3, [r4, #80]	@ 0x50
 800c8dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c90c <_tzset_unlocked_r+0x43c>)
 800c8de:	f8c8 3000 	str.w	r3, [r8]
 800c8e2:	6860      	ldr	r0, [r4, #4]
 800c8e4:	4b07      	ldr	r3, [pc, #28]	@ (800c904 <_tzset_unlocked_r+0x434>)
 800c8e6:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c8e8:	f8c8 3004 	str.w	r3, [r8, #4]
 800c8ec:	f7ff fd34 	bl	800c358 <__tzcalc_limits>
 800c8f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c8f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c8f4:	f8ca 2000 	str.w	r2, [sl]
 800c8f8:	1a9b      	subs	r3, r3, r2
 800c8fa:	4a05      	ldr	r2, [pc, #20]	@ (800c910 <_tzset_unlocked_r+0x440>)
 800c8fc:	bf18      	it	ne
 800c8fe:	2301      	movne	r3, #1
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	e613      	b.n	800c52c <_tzset_unlocked_r+0x5c>
 800c904:	20008584 	.word	0x20008584
 800c908:	08011eea 	.word	0x08011eea
 800c90c:	20008590 	.word	0x20008590
 800c910:	200085a0 	.word	0x200085a0

0800c914 <_localeconv_r>:
 800c914:	4800      	ldr	r0, [pc, #0]	@ (800c918 <_localeconv_r+0x4>)
 800c916:	4770      	bx	lr
 800c918:	20000128 	.word	0x20000128

0800c91c <_close_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d06      	ldr	r5, [pc, #24]	@ (800c938 <_close_r+0x1c>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	602b      	str	r3, [r5, #0]
 800c928:	f7f8 fa28 	bl	8004d7c <_close>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_close_r+0x1a>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_close_r+0x1a>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	200085a4 	.word	0x200085a4

0800c93c <_reclaim_reent>:
 800c93c:	4b29      	ldr	r3, [pc, #164]	@ (800c9e4 <_reclaim_reent+0xa8>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4283      	cmp	r3, r0
 800c942:	b570      	push	{r4, r5, r6, lr}
 800c944:	4604      	mov	r4, r0
 800c946:	d04b      	beq.n	800c9e0 <_reclaim_reent+0xa4>
 800c948:	69c3      	ldr	r3, [r0, #28]
 800c94a:	b1ab      	cbz	r3, 800c978 <_reclaim_reent+0x3c>
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	b16b      	cbz	r3, 800c96c <_reclaim_reent+0x30>
 800c950:	2500      	movs	r5, #0
 800c952:	69e3      	ldr	r3, [r4, #28]
 800c954:	68db      	ldr	r3, [r3, #12]
 800c956:	5959      	ldr	r1, [r3, r5]
 800c958:	2900      	cmp	r1, #0
 800c95a:	d13b      	bne.n	800c9d4 <_reclaim_reent+0x98>
 800c95c:	3504      	adds	r5, #4
 800c95e:	2d80      	cmp	r5, #128	@ 0x80
 800c960:	d1f7      	bne.n	800c952 <_reclaim_reent+0x16>
 800c962:	69e3      	ldr	r3, [r4, #28]
 800c964:	4620      	mov	r0, r4
 800c966:	68d9      	ldr	r1, [r3, #12]
 800c968:	f000 ff2a 	bl	800d7c0 <_free_r>
 800c96c:	69e3      	ldr	r3, [r4, #28]
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	b111      	cbz	r1, 800c978 <_reclaim_reent+0x3c>
 800c972:	4620      	mov	r0, r4
 800c974:	f000 ff24 	bl	800d7c0 <_free_r>
 800c978:	6961      	ldr	r1, [r4, #20]
 800c97a:	b111      	cbz	r1, 800c982 <_reclaim_reent+0x46>
 800c97c:	4620      	mov	r0, r4
 800c97e:	f000 ff1f 	bl	800d7c0 <_free_r>
 800c982:	69e1      	ldr	r1, [r4, #28]
 800c984:	b111      	cbz	r1, 800c98c <_reclaim_reent+0x50>
 800c986:	4620      	mov	r0, r4
 800c988:	f000 ff1a 	bl	800d7c0 <_free_r>
 800c98c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c98e:	b111      	cbz	r1, 800c996 <_reclaim_reent+0x5a>
 800c990:	4620      	mov	r0, r4
 800c992:	f000 ff15 	bl	800d7c0 <_free_r>
 800c996:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c998:	b111      	cbz	r1, 800c9a0 <_reclaim_reent+0x64>
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 ff10 	bl	800d7c0 <_free_r>
 800c9a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c9a2:	b111      	cbz	r1, 800c9aa <_reclaim_reent+0x6e>
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 ff0b 	bl	800d7c0 <_free_r>
 800c9aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c9ac:	b111      	cbz	r1, 800c9b4 <_reclaim_reent+0x78>
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f000 ff06 	bl	800d7c0 <_free_r>
 800c9b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c9b6:	b111      	cbz	r1, 800c9be <_reclaim_reent+0x82>
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 ff01 	bl	800d7c0 <_free_r>
 800c9be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9c0:	b111      	cbz	r1, 800c9c8 <_reclaim_reent+0x8c>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fefc 	bl	800d7c0 <_free_r>
 800c9c8:	6a23      	ldr	r3, [r4, #32]
 800c9ca:	b14b      	cbz	r3, 800c9e0 <_reclaim_reent+0xa4>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9d2:	4718      	bx	r3
 800c9d4:	680e      	ldr	r6, [r1, #0]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 fef2 	bl	800d7c0 <_free_r>
 800c9dc:	4631      	mov	r1, r6
 800c9de:	e7bb      	b.n	800c958 <_reclaim_reent+0x1c>
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	bf00      	nop
 800c9e4:	200001a4 	.word	0x200001a4

0800c9e8 <_lseek_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4d07      	ldr	r5, [pc, #28]	@ (800ca08 <_lseek_r+0x20>)
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	602a      	str	r2, [r5, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f7f8 f9ca 	bl	8004d90 <_lseek>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d102      	bne.n	800ca06 <_lseek_r+0x1e>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	b103      	cbz	r3, 800ca06 <_lseek_r+0x1e>
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	200085a4 	.word	0x200085a4

0800ca0c <_read_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d07      	ldr	r5, [pc, #28]	@ (800ca2c <_read_r+0x20>)
 800ca10:	4604      	mov	r4, r0
 800ca12:	4608      	mov	r0, r1
 800ca14:	4611      	mov	r1, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	602a      	str	r2, [r5, #0]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f7f8 f992 	bl	8004d44 <_read>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d102      	bne.n	800ca2a <_read_r+0x1e>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	b103      	cbz	r3, 800ca2a <_read_r+0x1e>
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	200085a4 	.word	0x200085a4

0800ca30 <_sbrk_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4d06      	ldr	r5, [pc, #24]	@ (800ca4c <_sbrk_r+0x1c>)
 800ca34:	2300      	movs	r3, #0
 800ca36:	4604      	mov	r4, r0
 800ca38:	4608      	mov	r0, r1
 800ca3a:	602b      	str	r3, [r5, #0]
 800ca3c:	f7f8 f9aa 	bl	8004d94 <_sbrk>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_sbrk_r+0x1a>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_sbrk_r+0x1a>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	200085a4 	.word	0x200085a4

0800ca50 <_write_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d07      	ldr	r5, [pc, #28]	@ (800ca70 <_write_r+0x20>)
 800ca54:	4604      	mov	r4, r0
 800ca56:	4608      	mov	r0, r1
 800ca58:	4611      	mov	r1, r2
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	602a      	str	r2, [r5, #0]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f7f8 f97e 	bl	8004d60 <_write>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_write_r+0x1e>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_write_r+0x1e>
 800ca6c:	6023      	str	r3, [r4, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	200085a4 	.word	0x200085a4

0800ca74 <__errno>:
 800ca74:	4b01      	ldr	r3, [pc, #4]	@ (800ca7c <__errno+0x8>)
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	200001a4 	.word	0x200001a4

0800ca80 <__libc_init_array>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	4d0d      	ldr	r5, [pc, #52]	@ (800cab8 <__libc_init_array+0x38>)
 800ca84:	4c0d      	ldr	r4, [pc, #52]	@ (800cabc <__libc_init_array+0x3c>)
 800ca86:	1b64      	subs	r4, r4, r5
 800ca88:	10a4      	asrs	r4, r4, #2
 800ca8a:	2600      	movs	r6, #0
 800ca8c:	42a6      	cmp	r6, r4
 800ca8e:	d109      	bne.n	800caa4 <__libc_init_array+0x24>
 800ca90:	4d0b      	ldr	r5, [pc, #44]	@ (800cac0 <__libc_init_array+0x40>)
 800ca92:	4c0c      	ldr	r4, [pc, #48]	@ (800cac4 <__libc_init_array+0x44>)
 800ca94:	f003 f8e6 	bl	800fc64 <_init>
 800ca98:	1b64      	subs	r4, r4, r5
 800ca9a:	10a4      	asrs	r4, r4, #2
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	42a6      	cmp	r6, r4
 800caa0:	d105      	bne.n	800caae <__libc_init_array+0x2e>
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800caa8:	4798      	blx	r3
 800caaa:	3601      	adds	r6, #1
 800caac:	e7ee      	b.n	800ca8c <__libc_init_array+0xc>
 800caae:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab2:	4798      	blx	r3
 800cab4:	3601      	adds	r6, #1
 800cab6:	e7f2      	b.n	800ca9e <__libc_init_array+0x1e>
 800cab8:	08012238 	.word	0x08012238
 800cabc:	08012238 	.word	0x08012238
 800cac0:	08012238 	.word	0x08012238
 800cac4:	0801223c 	.word	0x0801223c

0800cac8 <strcpy>:
 800cac8:	4603      	mov	r3, r0
 800caca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cace:	f803 2b01 	strb.w	r2, [r3], #1
 800cad2:	2a00      	cmp	r2, #0
 800cad4:	d1f9      	bne.n	800caca <strcpy+0x2>
 800cad6:	4770      	bx	lr

0800cad8 <memcpy>:
 800cad8:	440a      	add	r2, r1
 800cada:	4291      	cmp	r1, r2
 800cadc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae0:	d100      	bne.n	800cae4 <memcpy+0xc>
 800cae2:	4770      	bx	lr
 800cae4:	b510      	push	{r4, lr}
 800cae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caee:	4291      	cmp	r1, r2
 800caf0:	d1f9      	bne.n	800cae6 <memcpy+0xe>
 800caf2:	bd10      	pop	{r4, pc}
 800caf4:	0000      	movs	r0, r0
	...

0800caf8 <nan>:
 800caf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cb00 <nan+0x8>
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	00000000 	.word	0x00000000
 800cb04:	7ff80000 	.word	0x7ff80000

0800cb08 <nanf>:
 800cb08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb10 <nanf+0x8>
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	7fc00000 	.word	0x7fc00000

0800cb14 <div>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	fb91 f4f2 	sdiv	r4, r1, r2
 800cb1a:	fb02 1114 	mls	r1, r2, r4, r1
 800cb1e:	6004      	str	r4, [r0, #0]
 800cb20:	6041      	str	r1, [r0, #4]
 800cb22:	bd10      	pop	{r4, pc}

0800cb24 <quorem>:
 800cb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	6903      	ldr	r3, [r0, #16]
 800cb2a:	690c      	ldr	r4, [r1, #16]
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	4607      	mov	r7, r0
 800cb30:	db7e      	blt.n	800cc30 <quorem+0x10c>
 800cb32:	3c01      	subs	r4, #1
 800cb34:	f101 0814 	add.w	r8, r1, #20
 800cb38:	00a3      	lsls	r3, r4, #2
 800cb3a:	f100 0514 	add.w	r5, r0, #20
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	429a      	cmp	r2, r3
 800cb52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb56:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb5a:	d32e      	bcc.n	800cbba <quorem+0x96>
 800cb5c:	f04f 0a00 	mov.w	sl, #0
 800cb60:	46c4      	mov	ip, r8
 800cb62:	46ae      	mov	lr, r5
 800cb64:	46d3      	mov	fp, sl
 800cb66:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb6a:	b298      	uxth	r0, r3
 800cb6c:	fb06 a000 	mla	r0, r6, r0, sl
 800cb70:	0c02      	lsrs	r2, r0, #16
 800cb72:	0c1b      	lsrs	r3, r3, #16
 800cb74:	fb06 2303 	mla	r3, r6, r3, r2
 800cb78:	f8de 2000 	ldr.w	r2, [lr]
 800cb7c:	b280      	uxth	r0, r0
 800cb7e:	b292      	uxth	r2, r2
 800cb80:	1a12      	subs	r2, r2, r0
 800cb82:	445a      	add	r2, fp
 800cb84:	f8de 0000 	ldr.w	r0, [lr]
 800cb88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cb96:	b292      	uxth	r2, r2
 800cb98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cb9c:	45e1      	cmp	r9, ip
 800cb9e:	f84e 2b04 	str.w	r2, [lr], #4
 800cba2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cba6:	d2de      	bcs.n	800cb66 <quorem+0x42>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	58eb      	ldr	r3, [r5, r3]
 800cbac:	b92b      	cbnz	r3, 800cbba <quorem+0x96>
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	429d      	cmp	r5, r3
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	d32f      	bcc.n	800cc18 <quorem+0xf4>
 800cbb8:	613c      	str	r4, [r7, #16]
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f001 fc9e 	bl	800e4fc <__mcmp>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	db25      	blt.n	800cc10 <quorem+0xec>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbcc:	f8d1 c000 	ldr.w	ip, [r1]
 800cbd0:	fa1f fe82 	uxth.w	lr, r2
 800cbd4:	fa1f f38c 	uxth.w	r3, ip
 800cbd8:	eba3 030e 	sub.w	r3, r3, lr
 800cbdc:	4403      	add	r3, r0
 800cbde:	0c12      	lsrs	r2, r2, #16
 800cbe0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbe4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbee:	45c1      	cmp	r9, r8
 800cbf0:	f841 3b04 	str.w	r3, [r1], #4
 800cbf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbf8:	d2e6      	bcs.n	800cbc8 <quorem+0xa4>
 800cbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc02:	b922      	cbnz	r2, 800cc0e <quorem+0xea>
 800cc04:	3b04      	subs	r3, #4
 800cc06:	429d      	cmp	r5, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	d30b      	bcc.n	800cc24 <quorem+0x100>
 800cc0c:	613c      	str	r4, [r7, #16]
 800cc0e:	3601      	adds	r6, #1
 800cc10:	4630      	mov	r0, r6
 800cc12:	b003      	add	sp, #12
 800cc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	6812      	ldr	r2, [r2, #0]
 800cc1a:	3b04      	subs	r3, #4
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	d1cb      	bne.n	800cbb8 <quorem+0x94>
 800cc20:	3c01      	subs	r4, #1
 800cc22:	e7c6      	b.n	800cbb2 <quorem+0x8e>
 800cc24:	6812      	ldr	r2, [r2, #0]
 800cc26:	3b04      	subs	r3, #4
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d1ef      	bne.n	800cc0c <quorem+0xe8>
 800cc2c:	3c01      	subs	r4, #1
 800cc2e:	e7ea      	b.n	800cc06 <quorem+0xe2>
 800cc30:	2000      	movs	r0, #0
 800cc32:	e7ee      	b.n	800cc12 <quorem+0xee>
 800cc34:	0000      	movs	r0, r0
	...

0800cc38 <_dtoa_r>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	69c7      	ldr	r7, [r0, #28]
 800cc3e:	b099      	sub	sp, #100	@ 0x64
 800cc40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc44:	ec55 4b10 	vmov	r4, r5, d0
 800cc48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cc4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc4c:	4683      	mov	fp, r0
 800cc4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc52:	b97f      	cbnz	r7, 800cc74 <_dtoa_r+0x3c>
 800cc54:	2010      	movs	r0, #16
 800cc56:	f7fd f83d 	bl	8009cd4 <malloc>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cc60:	b920      	cbnz	r0, 800cc6c <_dtoa_r+0x34>
 800cc62:	4ba7      	ldr	r3, [pc, #668]	@ (800cf00 <_dtoa_r+0x2c8>)
 800cc64:	21ef      	movs	r1, #239	@ 0xef
 800cc66:	48a7      	ldr	r0, [pc, #668]	@ (800cf04 <_dtoa_r+0x2cc>)
 800cc68:	f002 fe66 	bl	800f938 <__assert_func>
 800cc6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc70:	6007      	str	r7, [r0, #0]
 800cc72:	60c7      	str	r7, [r0, #12]
 800cc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc78:	6819      	ldr	r1, [r3, #0]
 800cc7a:	b159      	cbz	r1, 800cc94 <_dtoa_r+0x5c>
 800cc7c:	685a      	ldr	r2, [r3, #4]
 800cc7e:	604a      	str	r2, [r1, #4]
 800cc80:	2301      	movs	r3, #1
 800cc82:	4093      	lsls	r3, r2
 800cc84:	608b      	str	r3, [r1, #8]
 800cc86:	4658      	mov	r0, fp
 800cc88:	f001 f9b4 	bl	800dff4 <_Bfree>
 800cc8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	1e2b      	subs	r3, r5, #0
 800cc96:	bfb9      	ittee	lt
 800cc98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cc9c:	9303      	strlt	r3, [sp, #12]
 800cc9e:	2300      	movge	r3, #0
 800cca0:	6033      	strge	r3, [r6, #0]
 800cca2:	9f03      	ldr	r7, [sp, #12]
 800cca4:	4b98      	ldr	r3, [pc, #608]	@ (800cf08 <_dtoa_r+0x2d0>)
 800cca6:	bfbc      	itt	lt
 800cca8:	2201      	movlt	r2, #1
 800ccaa:	6032      	strlt	r2, [r6, #0]
 800ccac:	43bb      	bics	r3, r7
 800ccae:	d112      	bne.n	800ccd6 <_dtoa_r+0x9e>
 800ccb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccbc:	4323      	orrs	r3, r4
 800ccbe:	f000 854d 	beq.w	800d75c <_dtoa_r+0xb24>
 800ccc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cf1c <_dtoa_r+0x2e4>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 854f 	beq.w	800d76c <_dtoa_r+0xb34>
 800ccce:	f10a 0303 	add.w	r3, sl, #3
 800ccd2:	f000 bd49 	b.w	800d768 <_dtoa_r+0xb30>
 800ccd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	ec51 0b17 	vmov	r0, r1, d7
 800cce0:	2300      	movs	r3, #0
 800cce2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cce6:	f7f3 feff 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccea:	4680      	mov	r8, r0
 800ccec:	b158      	cbz	r0, 800cd06 <_dtoa_r+0xce>
 800ccee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	6013      	str	r3, [r2, #0]
 800ccf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccf6:	b113      	cbz	r3, 800ccfe <_dtoa_r+0xc6>
 800ccf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ccfa:	4b84      	ldr	r3, [pc, #528]	@ (800cf0c <_dtoa_r+0x2d4>)
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cf20 <_dtoa_r+0x2e8>
 800cd02:	f000 bd33 	b.w	800d76c <_dtoa_r+0xb34>
 800cd06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd0a:	aa16      	add	r2, sp, #88	@ 0x58
 800cd0c:	a917      	add	r1, sp, #92	@ 0x5c
 800cd0e:	4658      	mov	r0, fp
 800cd10:	f001 fd14 	bl	800e73c <__d2b>
 800cd14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd18:	4681      	mov	r9, r0
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d077      	beq.n	800ce0e <_dtoa_r+0x1d6>
 800cd1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cd24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd38:	4619      	mov	r1, r3
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4b74      	ldr	r3, [pc, #464]	@ (800cf10 <_dtoa_r+0x2d8>)
 800cd3e:	f7f3 fab3 	bl	80002a8 <__aeabi_dsub>
 800cd42:	a369      	add	r3, pc, #420	@ (adr r3, 800cee8 <_dtoa_r+0x2b0>)
 800cd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd48:	f7f3 fc66 	bl	8000618 <__aeabi_dmul>
 800cd4c:	a368      	add	r3, pc, #416	@ (adr r3, 800cef0 <_dtoa_r+0x2b8>)
 800cd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd52:	f7f3 faab 	bl	80002ac <__adddf3>
 800cd56:	4604      	mov	r4, r0
 800cd58:	4630      	mov	r0, r6
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	f7f3 fbf2 	bl	8000544 <__aeabi_i2d>
 800cd60:	a365      	add	r3, pc, #404	@ (adr r3, 800cef8 <_dtoa_r+0x2c0>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	f7f3 fc57 	bl	8000618 <__aeabi_dmul>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7f3 fa9b 	bl	80002ac <__adddf3>
 800cd76:	4604      	mov	r4, r0
 800cd78:	460d      	mov	r5, r1
 800cd7a:	f7f3 fefd 	bl	8000b78 <__aeabi_d2iz>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4607      	mov	r7, r0
 800cd82:	2300      	movs	r3, #0
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f7f3 feb8 	bl	8000afc <__aeabi_dcmplt>
 800cd8c:	b140      	cbz	r0, 800cda0 <_dtoa_r+0x168>
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7f3 fbd8 	bl	8000544 <__aeabi_i2d>
 800cd94:	4622      	mov	r2, r4
 800cd96:	462b      	mov	r3, r5
 800cd98:	f7f3 fea6 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd9c:	b900      	cbnz	r0, 800cda0 <_dtoa_r+0x168>
 800cd9e:	3f01      	subs	r7, #1
 800cda0:	2f16      	cmp	r7, #22
 800cda2:	d851      	bhi.n	800ce48 <_dtoa_r+0x210>
 800cda4:	4b5b      	ldr	r3, [pc, #364]	@ (800cf14 <_dtoa_r+0x2dc>)
 800cda6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdb2:	f7f3 fea3 	bl	8000afc <__aeabi_dcmplt>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d048      	beq.n	800ce4c <_dtoa_r+0x214>
 800cdba:	3f01      	subs	r7, #1
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cdc2:	1b9b      	subs	r3, r3, r6
 800cdc4:	1e5a      	subs	r2, r3, #1
 800cdc6:	bf44      	itt	mi
 800cdc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800cdcc:	2300      	movmi	r3, #0
 800cdce:	9208      	str	r2, [sp, #32]
 800cdd0:	bf54      	ite	pl
 800cdd2:	f04f 0800 	movpl.w	r8, #0
 800cdd6:	9308      	strmi	r3, [sp, #32]
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	db39      	blt.n	800ce50 <_dtoa_r+0x218>
 800cddc:	9b08      	ldr	r3, [sp, #32]
 800cdde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cde0:	443b      	add	r3, r7
 800cde2:	9308      	str	r3, [sp, #32]
 800cde4:	2300      	movs	r3, #0
 800cde6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdea:	2b09      	cmp	r3, #9
 800cdec:	d864      	bhi.n	800ceb8 <_dtoa_r+0x280>
 800cdee:	2b05      	cmp	r3, #5
 800cdf0:	bfc4      	itt	gt
 800cdf2:	3b04      	subgt	r3, #4
 800cdf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cdf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf8:	f1a3 0302 	sub.w	r3, r3, #2
 800cdfc:	bfcc      	ite	gt
 800cdfe:	2400      	movgt	r4, #0
 800ce00:	2401      	movle	r4, #1
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d863      	bhi.n	800cece <_dtoa_r+0x296>
 800ce06:	e8df f003 	tbb	[pc, r3]
 800ce0a:	372a      	.short	0x372a
 800ce0c:	5535      	.short	0x5535
 800ce0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ce12:	441e      	add	r6, r3
 800ce14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce18:	2b20      	cmp	r3, #32
 800ce1a:	bfc1      	itttt	gt
 800ce1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce20:	409f      	lslgt	r7, r3
 800ce22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce2a:	bfd6      	itet	le
 800ce2c:	f1c3 0320 	rsble	r3, r3, #32
 800ce30:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce34:	fa04 f003 	lslle.w	r0, r4, r3
 800ce38:	f7f3 fb74 	bl	8000524 <__aeabi_ui2d>
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce42:	3e01      	subs	r6, #1
 800ce44:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce46:	e777      	b.n	800cd38 <_dtoa_r+0x100>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7b8      	b.n	800cdbe <_dtoa_r+0x186>
 800ce4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce4e:	e7b7      	b.n	800cdc0 <_dtoa_r+0x188>
 800ce50:	427b      	negs	r3, r7
 800ce52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce54:	2300      	movs	r3, #0
 800ce56:	eba8 0807 	sub.w	r8, r8, r7
 800ce5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce5c:	e7c4      	b.n	800cde8 <_dtoa_r+0x1b0>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc35      	bgt.n	800ced4 <_dtoa_r+0x29c>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce72:	e00b      	b.n	800ce8c <_dtoa_r+0x254>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e7f3      	b.n	800ce60 <_dtoa_r+0x228>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce7e:	18fb      	adds	r3, r7, r3
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	3301      	adds	r3, #1
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	9307      	str	r3, [sp, #28]
 800ce88:	bfb8      	it	lt
 800ce8a:	2301      	movlt	r3, #1
 800ce8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ce90:	2100      	movs	r1, #0
 800ce92:	2204      	movs	r2, #4
 800ce94:	f102 0514 	add.w	r5, r2, #20
 800ce98:	429d      	cmp	r5, r3
 800ce9a:	d91f      	bls.n	800cedc <_dtoa_r+0x2a4>
 800ce9c:	6041      	str	r1, [r0, #4]
 800ce9e:	4658      	mov	r0, fp
 800cea0:	f001 f868 	bl	800df74 <_Balloc>
 800cea4:	4682      	mov	sl, r0
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d13c      	bne.n	800cf24 <_dtoa_r+0x2ec>
 800ceaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cf18 <_dtoa_r+0x2e0>)
 800ceac:	4602      	mov	r2, r0
 800ceae:	f240 11af 	movw	r1, #431	@ 0x1af
 800ceb2:	e6d8      	b.n	800cc66 <_dtoa_r+0x2e>
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e7e0      	b.n	800ce7a <_dtoa_r+0x242>
 800ceb8:	2401      	movs	r4, #1
 800ceba:	2300      	movs	r3, #0
 800cebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cebe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cec0:	f04f 33ff 	mov.w	r3, #4294967295
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	9307      	str	r3, [sp, #28]
 800cec8:	2200      	movs	r2, #0
 800ceca:	2312      	movs	r3, #18
 800cecc:	e7d0      	b.n	800ce70 <_dtoa_r+0x238>
 800cece:	2301      	movs	r3, #1
 800ced0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ced2:	e7f5      	b.n	800cec0 <_dtoa_r+0x288>
 800ced4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	e7d7      	b.n	800ce8c <_dtoa_r+0x254>
 800cedc:	3101      	adds	r1, #1
 800cede:	0052      	lsls	r2, r2, #1
 800cee0:	e7d8      	b.n	800ce94 <_dtoa_r+0x25c>
 800cee2:	bf00      	nop
 800cee4:	f3af 8000 	nop.w
 800cee8:	636f4361 	.word	0x636f4361
 800ceec:	3fd287a7 	.word	0x3fd287a7
 800cef0:	8b60c8b3 	.word	0x8b60c8b3
 800cef4:	3fc68a28 	.word	0x3fc68a28
 800cef8:	509f79fb 	.word	0x509f79fb
 800cefc:	3fd34413 	.word	0x3fd34413
 800cf00:	08011f31 	.word	0x08011f31
 800cf04:	08011f48 	.word	0x08011f48
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	08012190 	.word	0x08012190
 800cf10:	3ff80000 	.word	0x3ff80000
 800cf14:	080120a0 	.word	0x080120a0
 800cf18:	08011fa0 	.word	0x08011fa0
 800cf1c:	08011f2d 	.word	0x08011f2d
 800cf20:	0801218f 	.word	0x0801218f
 800cf24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf28:	6018      	str	r0, [r3, #0]
 800cf2a:	9b07      	ldr	r3, [sp, #28]
 800cf2c:	2b0e      	cmp	r3, #14
 800cf2e:	f200 80a4 	bhi.w	800d07a <_dtoa_r+0x442>
 800cf32:	2c00      	cmp	r4, #0
 800cf34:	f000 80a1 	beq.w	800d07a <_dtoa_r+0x442>
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	dd33      	ble.n	800cfa4 <_dtoa_r+0x36c>
 800cf3c:	4bad      	ldr	r3, [pc, #692]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800cf3e:	f007 020f 	and.w	r2, r7, #15
 800cf42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf46:	ed93 7b00 	vldr	d7, [r3]
 800cf4a:	05f8      	lsls	r0, r7, #23
 800cf4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf54:	d516      	bpl.n	800cf84 <_dtoa_r+0x34c>
 800cf56:	4ba8      	ldr	r3, [pc, #672]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf60:	f7f3 fc84 	bl	800086c <__aeabi_ddiv>
 800cf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf68:	f004 040f 	and.w	r4, r4, #15
 800cf6c:	2603      	movs	r6, #3
 800cf6e:	4da2      	ldr	r5, [pc, #648]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cf70:	b954      	cbnz	r4, 800cf88 <_dtoa_r+0x350>
 800cf72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf7a:	f7f3 fc77 	bl	800086c <__aeabi_ddiv>
 800cf7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf82:	e028      	b.n	800cfd6 <_dtoa_r+0x39e>
 800cf84:	2602      	movs	r6, #2
 800cf86:	e7f2      	b.n	800cf6e <_dtoa_r+0x336>
 800cf88:	07e1      	lsls	r1, r4, #31
 800cf8a:	d508      	bpl.n	800cf9e <_dtoa_r+0x366>
 800cf8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf94:	f7f3 fb40 	bl	8000618 <__aeabi_dmul>
 800cf98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	1064      	asrs	r4, r4, #1
 800cfa0:	3508      	adds	r5, #8
 800cfa2:	e7e5      	b.n	800cf70 <_dtoa_r+0x338>
 800cfa4:	f000 80d2 	beq.w	800d14c <_dtoa_r+0x514>
 800cfa8:	427c      	negs	r4, r7
 800cfaa:	4b92      	ldr	r3, [pc, #584]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800cfac:	4d92      	ldr	r5, [pc, #584]	@ (800d1f8 <_dtoa_r+0x5c0>)
 800cfae:	f004 020f 	and.w	r2, r4, #15
 800cfb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfbe:	f7f3 fb2b 	bl	8000618 <__aeabi_dmul>
 800cfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfc6:	1124      	asrs	r4, r4, #4
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2602      	movs	r6, #2
 800cfcc:	2c00      	cmp	r4, #0
 800cfce:	f040 80b2 	bne.w	800d136 <_dtoa_r+0x4fe>
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1d3      	bne.n	800cf7e <_dtoa_r+0x346>
 800cfd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 80b7 	beq.w	800d150 <_dtoa_r+0x518>
 800cfe2:	4b86      	ldr	r3, [pc, #536]	@ (800d1fc <_dtoa_r+0x5c4>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f7f3 fd87 	bl	8000afc <__aeabi_dcmplt>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	f000 80ae 	beq.w	800d150 <_dtoa_r+0x518>
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 80aa 	beq.w	800d150 <_dtoa_r+0x518>
 800cffc:	9b00      	ldr	r3, [sp, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd37      	ble.n	800d072 <_dtoa_r+0x43a>
 800d002:	1e7b      	subs	r3, r7, #1
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	4620      	mov	r0, r4
 800d008:	4b7d      	ldr	r3, [pc, #500]	@ (800d200 <_dtoa_r+0x5c8>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	4629      	mov	r1, r5
 800d00e:	f7f3 fb03 	bl	8000618 <__aeabi_dmul>
 800d012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d016:	9c00      	ldr	r4, [sp, #0]
 800d018:	3601      	adds	r6, #1
 800d01a:	4630      	mov	r0, r6
 800d01c:	f7f3 fa92 	bl	8000544 <__aeabi_i2d>
 800d020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d024:	f7f3 faf8 	bl	8000618 <__aeabi_dmul>
 800d028:	4b76      	ldr	r3, [pc, #472]	@ (800d204 <_dtoa_r+0x5cc>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	f7f3 f93e 	bl	80002ac <__adddf3>
 800d030:	4605      	mov	r5, r0
 800d032:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d036:	2c00      	cmp	r4, #0
 800d038:	f040 808d 	bne.w	800d156 <_dtoa_r+0x51e>
 800d03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d040:	4b71      	ldr	r3, [pc, #452]	@ (800d208 <_dtoa_r+0x5d0>)
 800d042:	2200      	movs	r2, #0
 800d044:	f7f3 f930 	bl	80002a8 <__aeabi_dsub>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d050:	462a      	mov	r2, r5
 800d052:	4633      	mov	r3, r6
 800d054:	f7f3 fd70 	bl	8000b38 <__aeabi_dcmpgt>
 800d058:	2800      	cmp	r0, #0
 800d05a:	f040 828b 	bne.w	800d574 <_dtoa_r+0x93c>
 800d05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d062:	462a      	mov	r2, r5
 800d064:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d068:	f7f3 fd48 	bl	8000afc <__aeabi_dcmplt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f040 8128 	bne.w	800d2c2 <_dtoa_r+0x68a>
 800d072:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d076:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d07a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f2c0 815a 	blt.w	800d336 <_dtoa_r+0x6fe>
 800d082:	2f0e      	cmp	r7, #14
 800d084:	f300 8157 	bgt.w	800d336 <_dtoa_r+0x6fe>
 800d088:	4b5a      	ldr	r3, [pc, #360]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800d08a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d08e:	ed93 7b00 	vldr	d7, [r3]
 800d092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d094:	2b00      	cmp	r3, #0
 800d096:	ed8d 7b00 	vstr	d7, [sp]
 800d09a:	da03      	bge.n	800d0a4 <_dtoa_r+0x46c>
 800d09c:	9b07      	ldr	r3, [sp, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f340 8101 	ble.w	800d2a6 <_dtoa_r+0x66e>
 800d0a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0a8:	4656      	mov	r6, sl
 800d0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	f7f3 fbdb 	bl	800086c <__aeabi_ddiv>
 800d0b6:	f7f3 fd5f 	bl	8000b78 <__aeabi_d2iz>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	f7f3 fa42 	bl	8000544 <__aeabi_i2d>
 800d0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0c4:	f7f3 faa8 	bl	8000618 <__aeabi_dmul>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d0d4:	f7f3 f8e8 	bl	80002a8 <__aeabi_dsub>
 800d0d8:	f806 4b01 	strb.w	r4, [r6], #1
 800d0dc:	9d07      	ldr	r5, [sp, #28]
 800d0de:	eba6 040a 	sub.w	r4, r6, sl
 800d0e2:	42a5      	cmp	r5, r4
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	f040 8117 	bne.w	800d31a <_dtoa_r+0x6e2>
 800d0ec:	f7f3 f8de 	bl	80002ac <__adddf3>
 800d0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	460d      	mov	r5, r1
 800d0f8:	f7f3 fd1e 	bl	8000b38 <__aeabi_dcmpgt>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	f040 80f9 	bne.w	800d2f4 <_dtoa_r+0x6bc>
 800d102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 fced 	bl	8000ae8 <__aeabi_dcmpeq>
 800d10e:	b118      	cbz	r0, 800d118 <_dtoa_r+0x4e0>
 800d110:	f018 0f01 	tst.w	r8, #1
 800d114:	f040 80ee 	bne.w	800d2f4 <_dtoa_r+0x6bc>
 800d118:	4649      	mov	r1, r9
 800d11a:	4658      	mov	r0, fp
 800d11c:	f000 ff6a 	bl	800dff4 <_Bfree>
 800d120:	2300      	movs	r3, #0
 800d122:	7033      	strb	r3, [r6, #0]
 800d124:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d126:	3701      	adds	r7, #1
 800d128:	601f      	str	r7, [r3, #0]
 800d12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f000 831d 	beq.w	800d76c <_dtoa_r+0xb34>
 800d132:	601e      	str	r6, [r3, #0]
 800d134:	e31a      	b.n	800d76c <_dtoa_r+0xb34>
 800d136:	07e2      	lsls	r2, r4, #31
 800d138:	d505      	bpl.n	800d146 <_dtoa_r+0x50e>
 800d13a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d13e:	f7f3 fa6b 	bl	8000618 <__aeabi_dmul>
 800d142:	3601      	adds	r6, #1
 800d144:	2301      	movs	r3, #1
 800d146:	1064      	asrs	r4, r4, #1
 800d148:	3508      	adds	r5, #8
 800d14a:	e73f      	b.n	800cfcc <_dtoa_r+0x394>
 800d14c:	2602      	movs	r6, #2
 800d14e:	e742      	b.n	800cfd6 <_dtoa_r+0x39e>
 800d150:	9c07      	ldr	r4, [sp, #28]
 800d152:	9704      	str	r7, [sp, #16]
 800d154:	e761      	b.n	800d01a <_dtoa_r+0x3e2>
 800d156:	4b27      	ldr	r3, [pc, #156]	@ (800d1f4 <_dtoa_r+0x5bc>)
 800d158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d15a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d15e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d162:	4454      	add	r4, sl
 800d164:	2900      	cmp	r1, #0
 800d166:	d053      	beq.n	800d210 <_dtoa_r+0x5d8>
 800d168:	4928      	ldr	r1, [pc, #160]	@ (800d20c <_dtoa_r+0x5d4>)
 800d16a:	2000      	movs	r0, #0
 800d16c:	f7f3 fb7e 	bl	800086c <__aeabi_ddiv>
 800d170:	4633      	mov	r3, r6
 800d172:	462a      	mov	r2, r5
 800d174:	f7f3 f898 	bl	80002a8 <__aeabi_dsub>
 800d178:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d17c:	4656      	mov	r6, sl
 800d17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d182:	f7f3 fcf9 	bl	8000b78 <__aeabi_d2iz>
 800d186:	4605      	mov	r5, r0
 800d188:	f7f3 f9dc 	bl	8000544 <__aeabi_i2d>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d194:	f7f3 f888 	bl	80002a8 <__aeabi_dsub>
 800d198:	3530      	adds	r5, #48	@ 0x30
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1a2:	f806 5b01 	strb.w	r5, [r6], #1
 800d1a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1aa:	f7f3 fca7 	bl	8000afc <__aeabi_dcmplt>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d171      	bne.n	800d296 <_dtoa_r+0x65e>
 800d1b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b6:	4911      	ldr	r1, [pc, #68]	@ (800d1fc <_dtoa_r+0x5c4>)
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f7f3 f875 	bl	80002a8 <__aeabi_dsub>
 800d1be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1c2:	f7f3 fc9b 	bl	8000afc <__aeabi_dcmplt>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f040 8095 	bne.w	800d2f6 <_dtoa_r+0x6be>
 800d1cc:	42a6      	cmp	r6, r4
 800d1ce:	f43f af50 	beq.w	800d072 <_dtoa_r+0x43a>
 800d1d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d200 <_dtoa_r+0x5c8>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f7f3 fa1d 	bl	8000618 <__aeabi_dmul>
 800d1de:	4b08      	ldr	r3, [pc, #32]	@ (800d200 <_dtoa_r+0x5c8>)
 800d1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ea:	f7f3 fa15 	bl	8000618 <__aeabi_dmul>
 800d1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f2:	e7c4      	b.n	800d17e <_dtoa_r+0x546>
 800d1f4:	080120a0 	.word	0x080120a0
 800d1f8:	08012078 	.word	0x08012078
 800d1fc:	3ff00000 	.word	0x3ff00000
 800d200:	40240000 	.word	0x40240000
 800d204:	401c0000 	.word	0x401c0000
 800d208:	40140000 	.word	0x40140000
 800d20c:	3fe00000 	.word	0x3fe00000
 800d210:	4631      	mov	r1, r6
 800d212:	4628      	mov	r0, r5
 800d214:	f7f3 fa00 	bl	8000618 <__aeabi_dmul>
 800d218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d21c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d21e:	4656      	mov	r6, sl
 800d220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d224:	f7f3 fca8 	bl	8000b78 <__aeabi_d2iz>
 800d228:	4605      	mov	r5, r0
 800d22a:	f7f3 f98b 	bl	8000544 <__aeabi_i2d>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d236:	f7f3 f837 	bl	80002a8 <__aeabi_dsub>
 800d23a:	3530      	adds	r5, #48	@ 0x30
 800d23c:	f806 5b01 	strb.w	r5, [r6], #1
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	42a6      	cmp	r6, r4
 800d246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d24a:	f04f 0200 	mov.w	r2, #0
 800d24e:	d124      	bne.n	800d29a <_dtoa_r+0x662>
 800d250:	4bac      	ldr	r3, [pc, #688]	@ (800d504 <_dtoa_r+0x8cc>)
 800d252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d256:	f7f3 f829 	bl	80002ac <__adddf3>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d262:	f7f3 fc69 	bl	8000b38 <__aeabi_dcmpgt>
 800d266:	2800      	cmp	r0, #0
 800d268:	d145      	bne.n	800d2f6 <_dtoa_r+0x6be>
 800d26a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d26e:	49a5      	ldr	r1, [pc, #660]	@ (800d504 <_dtoa_r+0x8cc>)
 800d270:	2000      	movs	r0, #0
 800d272:	f7f3 f819 	bl	80002a8 <__aeabi_dsub>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d27e:	f7f3 fc3d 	bl	8000afc <__aeabi_dcmplt>
 800d282:	2800      	cmp	r0, #0
 800d284:	f43f aef5 	beq.w	800d072 <_dtoa_r+0x43a>
 800d288:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d28a:	1e73      	subs	r3, r6, #1
 800d28c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d28e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d292:	2b30      	cmp	r3, #48	@ 0x30
 800d294:	d0f8      	beq.n	800d288 <_dtoa_r+0x650>
 800d296:	9f04      	ldr	r7, [sp, #16]
 800d298:	e73e      	b.n	800d118 <_dtoa_r+0x4e0>
 800d29a:	4b9b      	ldr	r3, [pc, #620]	@ (800d508 <_dtoa_r+0x8d0>)
 800d29c:	f7f3 f9bc 	bl	8000618 <__aeabi_dmul>
 800d2a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2a4:	e7bc      	b.n	800d220 <_dtoa_r+0x5e8>
 800d2a6:	d10c      	bne.n	800d2c2 <_dtoa_r+0x68a>
 800d2a8:	4b98      	ldr	r3, [pc, #608]	@ (800d50c <_dtoa_r+0x8d4>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2b0:	f7f3 f9b2 	bl	8000618 <__aeabi_dmul>
 800d2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2b8:	f7f3 fc34 	bl	8000b24 <__aeabi_dcmpge>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f000 8157 	beq.w	800d570 <_dtoa_r+0x938>
 800d2c2:	2400      	movs	r4, #0
 800d2c4:	4625      	mov	r5, r4
 800d2c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	4656      	mov	r6, sl
 800d2ce:	2700      	movs	r7, #0
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4658      	mov	r0, fp
 800d2d4:	f000 fe8e 	bl	800dff4 <_Bfree>
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	d0dc      	beq.n	800d296 <_dtoa_r+0x65e>
 800d2dc:	b12f      	cbz	r7, 800d2ea <_dtoa_r+0x6b2>
 800d2de:	42af      	cmp	r7, r5
 800d2e0:	d003      	beq.n	800d2ea <_dtoa_r+0x6b2>
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	4658      	mov	r0, fp
 800d2e6:	f000 fe85 	bl	800dff4 <_Bfree>
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f000 fe81 	bl	800dff4 <_Bfree>
 800d2f2:	e7d0      	b.n	800d296 <_dtoa_r+0x65e>
 800d2f4:	9704      	str	r7, [sp, #16]
 800d2f6:	4633      	mov	r3, r6
 800d2f8:	461e      	mov	r6, r3
 800d2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2fe:	2a39      	cmp	r2, #57	@ 0x39
 800d300:	d107      	bne.n	800d312 <_dtoa_r+0x6da>
 800d302:	459a      	cmp	sl, r3
 800d304:	d1f8      	bne.n	800d2f8 <_dtoa_r+0x6c0>
 800d306:	9a04      	ldr	r2, [sp, #16]
 800d308:	3201      	adds	r2, #1
 800d30a:	9204      	str	r2, [sp, #16]
 800d30c:	2230      	movs	r2, #48	@ 0x30
 800d30e:	f88a 2000 	strb.w	r2, [sl]
 800d312:	781a      	ldrb	r2, [r3, #0]
 800d314:	3201      	adds	r2, #1
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	e7bd      	b.n	800d296 <_dtoa_r+0x65e>
 800d31a:	4b7b      	ldr	r3, [pc, #492]	@ (800d508 <_dtoa_r+0x8d0>)
 800d31c:	2200      	movs	r2, #0
 800d31e:	f7f3 f97b 	bl	8000618 <__aeabi_dmul>
 800d322:	2200      	movs	r2, #0
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	460d      	mov	r5, r1
 800d32a:	f7f3 fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aebb 	beq.w	800d0aa <_dtoa_r+0x472>
 800d334:	e6f0      	b.n	800d118 <_dtoa_r+0x4e0>
 800d336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d338:	2a00      	cmp	r2, #0
 800d33a:	f000 80db 	beq.w	800d4f4 <_dtoa_r+0x8bc>
 800d33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d340:	2a01      	cmp	r2, #1
 800d342:	f300 80bf 	bgt.w	800d4c4 <_dtoa_r+0x88c>
 800d346:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d348:	2a00      	cmp	r2, #0
 800d34a:	f000 80b7 	beq.w	800d4bc <_dtoa_r+0x884>
 800d34e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d352:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d354:	4646      	mov	r6, r8
 800d356:	9a08      	ldr	r2, [sp, #32]
 800d358:	2101      	movs	r1, #1
 800d35a:	441a      	add	r2, r3
 800d35c:	4658      	mov	r0, fp
 800d35e:	4498      	add	r8, r3
 800d360:	9208      	str	r2, [sp, #32]
 800d362:	f000 ff45 	bl	800e1f0 <__i2b>
 800d366:	4605      	mov	r5, r0
 800d368:	b15e      	cbz	r6, 800d382 <_dtoa_r+0x74a>
 800d36a:	9b08      	ldr	r3, [sp, #32]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd08      	ble.n	800d382 <_dtoa_r+0x74a>
 800d370:	42b3      	cmp	r3, r6
 800d372:	9a08      	ldr	r2, [sp, #32]
 800d374:	bfa8      	it	ge
 800d376:	4633      	movge	r3, r6
 800d378:	eba8 0803 	sub.w	r8, r8, r3
 800d37c:	1af6      	subs	r6, r6, r3
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	9308      	str	r3, [sp, #32]
 800d382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d384:	b1f3      	cbz	r3, 800d3c4 <_dtoa_r+0x78c>
 800d386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f000 80b7 	beq.w	800d4fc <_dtoa_r+0x8c4>
 800d38e:	b18c      	cbz	r4, 800d3b4 <_dtoa_r+0x77c>
 800d390:	4629      	mov	r1, r5
 800d392:	4622      	mov	r2, r4
 800d394:	4658      	mov	r0, fp
 800d396:	f000 ffeb 	bl	800e370 <__pow5mult>
 800d39a:	464a      	mov	r2, r9
 800d39c:	4601      	mov	r1, r0
 800d39e:	4605      	mov	r5, r0
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f000 ff3b 	bl	800e21c <__multiply>
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	9004      	str	r0, [sp, #16]
 800d3aa:	4658      	mov	r0, fp
 800d3ac:	f000 fe22 	bl	800dff4 <_Bfree>
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	4699      	mov	r9, r3
 800d3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3b6:	1b1a      	subs	r2, r3, r4
 800d3b8:	d004      	beq.n	800d3c4 <_dtoa_r+0x78c>
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f000 ffd7 	bl	800e370 <__pow5mult>
 800d3c2:	4681      	mov	r9, r0
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	4658      	mov	r0, fp
 800d3c8:	f000 ff12 	bl	800e1f0 <__i2b>
 800d3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 81cf 	beq.w	800d774 <_dtoa_r+0xb3c>
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	4601      	mov	r1, r0
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 ffc8 	bl	800e370 <__pow5mult>
 800d3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	f300 8095 	bgt.w	800d514 <_dtoa_r+0x8dc>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8087 	bne.w	800d500 <_dtoa_r+0x8c8>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f040 8089 	bne.w	800d510 <_dtoa_r+0x8d8>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d404:	0d1b      	lsrs	r3, r3, #20
 800d406:	051b      	lsls	r3, r3, #20
 800d408:	b12b      	cbz	r3, 800d416 <_dtoa_r+0x7de>
 800d40a:	9b08      	ldr	r3, [sp, #32]
 800d40c:	3301      	adds	r3, #1
 800d40e:	9308      	str	r3, [sp, #32]
 800d410:	f108 0801 	add.w	r8, r8, #1
 800d414:	2301      	movs	r3, #1
 800d416:	930a      	str	r3, [sp, #40]	@ 0x28
 800d418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 81b0 	beq.w	800d780 <_dtoa_r+0xb48>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d426:	6918      	ldr	r0, [r3, #16]
 800d428:	f000 fe96 	bl	800e158 <__hi0bits>
 800d42c:	f1c0 0020 	rsb	r0, r0, #32
 800d430:	9b08      	ldr	r3, [sp, #32]
 800d432:	4418      	add	r0, r3
 800d434:	f010 001f 	ands.w	r0, r0, #31
 800d438:	d077      	beq.n	800d52a <_dtoa_r+0x8f2>
 800d43a:	f1c0 0320 	rsb	r3, r0, #32
 800d43e:	2b04      	cmp	r3, #4
 800d440:	dd6b      	ble.n	800d51a <_dtoa_r+0x8e2>
 800d442:	9b08      	ldr	r3, [sp, #32]
 800d444:	f1c0 001c 	rsb	r0, r0, #28
 800d448:	4403      	add	r3, r0
 800d44a:	4480      	add	r8, r0
 800d44c:	4406      	add	r6, r0
 800d44e:	9308      	str	r3, [sp, #32]
 800d450:	f1b8 0f00 	cmp.w	r8, #0
 800d454:	dd05      	ble.n	800d462 <_dtoa_r+0x82a>
 800d456:	4649      	mov	r1, r9
 800d458:	4642      	mov	r2, r8
 800d45a:	4658      	mov	r0, fp
 800d45c:	f000 ffe2 	bl	800e424 <__lshift>
 800d460:	4681      	mov	r9, r0
 800d462:	9b08      	ldr	r3, [sp, #32]
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd05      	ble.n	800d474 <_dtoa_r+0x83c>
 800d468:	4621      	mov	r1, r4
 800d46a:	461a      	mov	r2, r3
 800d46c:	4658      	mov	r0, fp
 800d46e:	f000 ffd9 	bl	800e424 <__lshift>
 800d472:	4604      	mov	r4, r0
 800d474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d476:	2b00      	cmp	r3, #0
 800d478:	d059      	beq.n	800d52e <_dtoa_r+0x8f6>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4648      	mov	r0, r9
 800d47e:	f001 f83d 	bl	800e4fc <__mcmp>
 800d482:	2800      	cmp	r0, #0
 800d484:	da53      	bge.n	800d52e <_dtoa_r+0x8f6>
 800d486:	1e7b      	subs	r3, r7, #1
 800d488:	9304      	str	r3, [sp, #16]
 800d48a:	4649      	mov	r1, r9
 800d48c:	2300      	movs	r3, #0
 800d48e:	220a      	movs	r2, #10
 800d490:	4658      	mov	r0, fp
 800d492:	f000 fdd1 	bl	800e038 <__multadd>
 800d496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d498:	4681      	mov	r9, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 8172 	beq.w	800d784 <_dtoa_r+0xb4c>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	220a      	movs	r2, #10
 800d4a6:	4658      	mov	r0, fp
 800d4a8:	f000 fdc6 	bl	800e038 <__multadd>
 800d4ac:	9b00      	ldr	r3, [sp, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	dc67      	bgt.n	800d584 <_dtoa_r+0x94c>
 800d4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	dc41      	bgt.n	800d53e <_dtoa_r+0x906>
 800d4ba:	e063      	b.n	800d584 <_dtoa_r+0x94c>
 800d4bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4c2:	e746      	b.n	800d352 <_dtoa_r+0x71a>
 800d4c4:	9b07      	ldr	r3, [sp, #28]
 800d4c6:	1e5c      	subs	r4, r3, #1
 800d4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	bfbf      	itttt	lt
 800d4ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d4d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d4d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d4d4:	1ae3      	sublt	r3, r4, r3
 800d4d6:	bfb4      	ite	lt
 800d4d8:	18d2      	addlt	r2, r2, r3
 800d4da:	1b1c      	subge	r4, r3, r4
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	bfbc      	itt	lt
 800d4e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d4e2:	2400      	movlt	r4, #0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	bfb5      	itete	lt
 800d4e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d4ec:	9b07      	ldrge	r3, [sp, #28]
 800d4ee:	2300      	movlt	r3, #0
 800d4f0:	4646      	movge	r6, r8
 800d4f2:	e730      	b.n	800d356 <_dtoa_r+0x71e>
 800d4f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d4f8:	4646      	mov	r6, r8
 800d4fa:	e735      	b.n	800d368 <_dtoa_r+0x730>
 800d4fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4fe:	e75c      	b.n	800d3ba <_dtoa_r+0x782>
 800d500:	2300      	movs	r3, #0
 800d502:	e788      	b.n	800d416 <_dtoa_r+0x7de>
 800d504:	3fe00000 	.word	0x3fe00000
 800d508:	40240000 	.word	0x40240000
 800d50c:	40140000 	.word	0x40140000
 800d510:	9b02      	ldr	r3, [sp, #8]
 800d512:	e780      	b.n	800d416 <_dtoa_r+0x7de>
 800d514:	2300      	movs	r3, #0
 800d516:	930a      	str	r3, [sp, #40]	@ 0x28
 800d518:	e782      	b.n	800d420 <_dtoa_r+0x7e8>
 800d51a:	d099      	beq.n	800d450 <_dtoa_r+0x818>
 800d51c:	9a08      	ldr	r2, [sp, #32]
 800d51e:	331c      	adds	r3, #28
 800d520:	441a      	add	r2, r3
 800d522:	4498      	add	r8, r3
 800d524:	441e      	add	r6, r3
 800d526:	9208      	str	r2, [sp, #32]
 800d528:	e792      	b.n	800d450 <_dtoa_r+0x818>
 800d52a:	4603      	mov	r3, r0
 800d52c:	e7f6      	b.n	800d51c <_dtoa_r+0x8e4>
 800d52e:	9b07      	ldr	r3, [sp, #28]
 800d530:	9704      	str	r7, [sp, #16]
 800d532:	2b00      	cmp	r3, #0
 800d534:	dc20      	bgt.n	800d578 <_dtoa_r+0x940>
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	dd1e      	ble.n	800d57c <_dtoa_r+0x944>
 800d53e:	9b00      	ldr	r3, [sp, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	f47f aec0 	bne.w	800d2c6 <_dtoa_r+0x68e>
 800d546:	4621      	mov	r1, r4
 800d548:	2205      	movs	r2, #5
 800d54a:	4658      	mov	r0, fp
 800d54c:	f000 fd74 	bl	800e038 <__multadd>
 800d550:	4601      	mov	r1, r0
 800d552:	4604      	mov	r4, r0
 800d554:	4648      	mov	r0, r9
 800d556:	f000 ffd1 	bl	800e4fc <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	f77f aeb3 	ble.w	800d2c6 <_dtoa_r+0x68e>
 800d560:	4656      	mov	r6, sl
 800d562:	2331      	movs	r3, #49	@ 0x31
 800d564:	f806 3b01 	strb.w	r3, [r6], #1
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	3301      	adds	r3, #1
 800d56c:	9304      	str	r3, [sp, #16]
 800d56e:	e6ae      	b.n	800d2ce <_dtoa_r+0x696>
 800d570:	9c07      	ldr	r4, [sp, #28]
 800d572:	9704      	str	r7, [sp, #16]
 800d574:	4625      	mov	r5, r4
 800d576:	e7f3      	b.n	800d560 <_dtoa_r+0x928>
 800d578:	9b07      	ldr	r3, [sp, #28]
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8104 	beq.w	800d78c <_dtoa_r+0xb54>
 800d584:	2e00      	cmp	r6, #0
 800d586:	dd05      	ble.n	800d594 <_dtoa_r+0x95c>
 800d588:	4629      	mov	r1, r5
 800d58a:	4632      	mov	r2, r6
 800d58c:	4658      	mov	r0, fp
 800d58e:	f000 ff49 	bl	800e424 <__lshift>
 800d592:	4605      	mov	r5, r0
 800d594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05a      	beq.n	800d650 <_dtoa_r+0xa18>
 800d59a:	6869      	ldr	r1, [r5, #4]
 800d59c:	4658      	mov	r0, fp
 800d59e:	f000 fce9 	bl	800df74 <_Balloc>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	b928      	cbnz	r0, 800d5b2 <_dtoa_r+0x97a>
 800d5a6:	4b84      	ldr	r3, [pc, #528]	@ (800d7b8 <_dtoa_r+0xb80>)
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5ae:	f7ff bb5a 	b.w	800cc66 <_dtoa_r+0x2e>
 800d5b2:	692a      	ldr	r2, [r5, #16]
 800d5b4:	3202      	adds	r2, #2
 800d5b6:	0092      	lsls	r2, r2, #2
 800d5b8:	f105 010c 	add.w	r1, r5, #12
 800d5bc:	300c      	adds	r0, #12
 800d5be:	f7ff fa8b 	bl	800cad8 <memcpy>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	4658      	mov	r0, fp
 800d5c8:	f000 ff2c 	bl	800e424 <__lshift>
 800d5cc:	f10a 0301 	add.w	r3, sl, #1
 800d5d0:	9307      	str	r3, [sp, #28]
 800d5d2:	9b00      	ldr	r3, [sp, #0]
 800d5d4:	4453      	add	r3, sl
 800d5d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	462f      	mov	r7, r5
 800d5e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	9b07      	ldr	r3, [sp, #28]
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	4648      	mov	r0, r9
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	f7ff fa99 	bl	800cb24 <quorem>
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	9002      	str	r0, [sp, #8]
 800d5f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5fa:	4648      	mov	r0, r9
 800d5fc:	f000 ff7e 	bl	800e4fc <__mcmp>
 800d600:	462a      	mov	r2, r5
 800d602:	9008      	str	r0, [sp, #32]
 800d604:	4621      	mov	r1, r4
 800d606:	4658      	mov	r0, fp
 800d608:	f000 ff94 	bl	800e534 <__mdiff>
 800d60c:	68c2      	ldr	r2, [r0, #12]
 800d60e:	4606      	mov	r6, r0
 800d610:	bb02      	cbnz	r2, 800d654 <_dtoa_r+0xa1c>
 800d612:	4601      	mov	r1, r0
 800d614:	4648      	mov	r0, r9
 800d616:	f000 ff71 	bl	800e4fc <__mcmp>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4631      	mov	r1, r6
 800d61e:	4658      	mov	r0, fp
 800d620:	920e      	str	r2, [sp, #56]	@ 0x38
 800d622:	f000 fce7 	bl	800dff4 <_Bfree>
 800d626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d62a:	9e07      	ldr	r6, [sp, #28]
 800d62c:	ea43 0102 	orr.w	r1, r3, r2
 800d630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d632:	4319      	orrs	r1, r3
 800d634:	d110      	bne.n	800d658 <_dtoa_r+0xa20>
 800d636:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d63a:	d029      	beq.n	800d690 <_dtoa_r+0xa58>
 800d63c:	9b08      	ldr	r3, [sp, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	dd02      	ble.n	800d648 <_dtoa_r+0xa10>
 800d642:	9b02      	ldr	r3, [sp, #8]
 800d644:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d648:	9b00      	ldr	r3, [sp, #0]
 800d64a:	f883 8000 	strb.w	r8, [r3]
 800d64e:	e63f      	b.n	800d2d0 <_dtoa_r+0x698>
 800d650:	4628      	mov	r0, r5
 800d652:	e7bb      	b.n	800d5cc <_dtoa_r+0x994>
 800d654:	2201      	movs	r2, #1
 800d656:	e7e1      	b.n	800d61c <_dtoa_r+0x9e4>
 800d658:	9b08      	ldr	r3, [sp, #32]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	db04      	blt.n	800d668 <_dtoa_r+0xa30>
 800d65e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d660:	430b      	orrs	r3, r1
 800d662:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d664:	430b      	orrs	r3, r1
 800d666:	d120      	bne.n	800d6aa <_dtoa_r+0xa72>
 800d668:	2a00      	cmp	r2, #0
 800d66a:	dded      	ble.n	800d648 <_dtoa_r+0xa10>
 800d66c:	4649      	mov	r1, r9
 800d66e:	2201      	movs	r2, #1
 800d670:	4658      	mov	r0, fp
 800d672:	f000 fed7 	bl	800e424 <__lshift>
 800d676:	4621      	mov	r1, r4
 800d678:	4681      	mov	r9, r0
 800d67a:	f000 ff3f 	bl	800e4fc <__mcmp>
 800d67e:	2800      	cmp	r0, #0
 800d680:	dc03      	bgt.n	800d68a <_dtoa_r+0xa52>
 800d682:	d1e1      	bne.n	800d648 <_dtoa_r+0xa10>
 800d684:	f018 0f01 	tst.w	r8, #1
 800d688:	d0de      	beq.n	800d648 <_dtoa_r+0xa10>
 800d68a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d68e:	d1d8      	bne.n	800d642 <_dtoa_r+0xa0a>
 800d690:	9a00      	ldr	r2, [sp, #0]
 800d692:	2339      	movs	r3, #57	@ 0x39
 800d694:	7013      	strb	r3, [r2, #0]
 800d696:	4633      	mov	r3, r6
 800d698:	461e      	mov	r6, r3
 800d69a:	3b01      	subs	r3, #1
 800d69c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6a0:	2a39      	cmp	r2, #57	@ 0x39
 800d6a2:	d052      	beq.n	800d74a <_dtoa_r+0xb12>
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	701a      	strb	r2, [r3, #0]
 800d6a8:	e612      	b.n	800d2d0 <_dtoa_r+0x698>
 800d6aa:	2a00      	cmp	r2, #0
 800d6ac:	dd07      	ble.n	800d6be <_dtoa_r+0xa86>
 800d6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6b2:	d0ed      	beq.n	800d690 <_dtoa_r+0xa58>
 800d6b4:	9a00      	ldr	r2, [sp, #0]
 800d6b6:	f108 0301 	add.w	r3, r8, #1
 800d6ba:	7013      	strb	r3, [r2, #0]
 800d6bc:	e608      	b.n	800d2d0 <_dtoa_r+0x698>
 800d6be:	9b07      	ldr	r3, [sp, #28]
 800d6c0:	9a07      	ldr	r2, [sp, #28]
 800d6c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d028      	beq.n	800d71e <_dtoa_r+0xae6>
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	220a      	movs	r2, #10
 800d6d2:	4658      	mov	r0, fp
 800d6d4:	f000 fcb0 	bl	800e038 <__multadd>
 800d6d8:	42af      	cmp	r7, r5
 800d6da:	4681      	mov	r9, r0
 800d6dc:	f04f 0300 	mov.w	r3, #0
 800d6e0:	f04f 020a 	mov.w	r2, #10
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	4658      	mov	r0, fp
 800d6e8:	d107      	bne.n	800d6fa <_dtoa_r+0xac2>
 800d6ea:	f000 fca5 	bl	800e038 <__multadd>
 800d6ee:	4607      	mov	r7, r0
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	9b07      	ldr	r3, [sp, #28]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	9307      	str	r3, [sp, #28]
 800d6f8:	e774      	b.n	800d5e4 <_dtoa_r+0x9ac>
 800d6fa:	f000 fc9d 	bl	800e038 <__multadd>
 800d6fe:	4629      	mov	r1, r5
 800d700:	4607      	mov	r7, r0
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4658      	mov	r0, fp
 800d708:	f000 fc96 	bl	800e038 <__multadd>
 800d70c:	4605      	mov	r5, r0
 800d70e:	e7f0      	b.n	800d6f2 <_dtoa_r+0xaba>
 800d710:	9b00      	ldr	r3, [sp, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	bfcc      	ite	gt
 800d716:	461e      	movgt	r6, r3
 800d718:	2601      	movle	r6, #1
 800d71a:	4456      	add	r6, sl
 800d71c:	2700      	movs	r7, #0
 800d71e:	4649      	mov	r1, r9
 800d720:	2201      	movs	r2, #1
 800d722:	4658      	mov	r0, fp
 800d724:	f000 fe7e 	bl	800e424 <__lshift>
 800d728:	4621      	mov	r1, r4
 800d72a:	4681      	mov	r9, r0
 800d72c:	f000 fee6 	bl	800e4fc <__mcmp>
 800d730:	2800      	cmp	r0, #0
 800d732:	dcb0      	bgt.n	800d696 <_dtoa_r+0xa5e>
 800d734:	d102      	bne.n	800d73c <_dtoa_r+0xb04>
 800d736:	f018 0f01 	tst.w	r8, #1
 800d73a:	d1ac      	bne.n	800d696 <_dtoa_r+0xa5e>
 800d73c:	4633      	mov	r3, r6
 800d73e:	461e      	mov	r6, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a30      	cmp	r2, #48	@ 0x30
 800d746:	d0fa      	beq.n	800d73e <_dtoa_r+0xb06>
 800d748:	e5c2      	b.n	800d2d0 <_dtoa_r+0x698>
 800d74a:	459a      	cmp	sl, r3
 800d74c:	d1a4      	bne.n	800d698 <_dtoa_r+0xa60>
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	3301      	adds	r3, #1
 800d752:	9304      	str	r3, [sp, #16]
 800d754:	2331      	movs	r3, #49	@ 0x31
 800d756:	f88a 3000 	strb.w	r3, [sl]
 800d75a:	e5b9      	b.n	800d2d0 <_dtoa_r+0x698>
 800d75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d75e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d7bc <_dtoa_r+0xb84>
 800d762:	b11b      	cbz	r3, 800d76c <_dtoa_r+0xb34>
 800d764:	f10a 0308 	add.w	r3, sl, #8
 800d768:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4650      	mov	r0, sl
 800d76e:	b019      	add	sp, #100	@ 0x64
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d776:	2b01      	cmp	r3, #1
 800d778:	f77f ae37 	ble.w	800d3ea <_dtoa_r+0x7b2>
 800d77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d780:	2001      	movs	r0, #1
 800d782:	e655      	b.n	800d430 <_dtoa_r+0x7f8>
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f77f aed6 	ble.w	800d538 <_dtoa_r+0x900>
 800d78c:	4656      	mov	r6, sl
 800d78e:	4621      	mov	r1, r4
 800d790:	4648      	mov	r0, r9
 800d792:	f7ff f9c7 	bl	800cb24 <quorem>
 800d796:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d79a:	f806 8b01 	strb.w	r8, [r6], #1
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	eba6 020a 	sub.w	r2, r6, sl
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	ddb3      	ble.n	800d710 <_dtoa_r+0xad8>
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	220a      	movs	r2, #10
 800d7ae:	4658      	mov	r0, fp
 800d7b0:	f000 fc42 	bl	800e038 <__multadd>
 800d7b4:	4681      	mov	r9, r0
 800d7b6:	e7ea      	b.n	800d78e <_dtoa_r+0xb56>
 800d7b8:	08011fa0 	.word	0x08011fa0
 800d7bc:	08011f24 	.word	0x08011f24

0800d7c0 <_free_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d041      	beq.n	800d84c <_free_r+0x8c>
 800d7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7cc:	1f0c      	subs	r4, r1, #4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bfb8      	it	lt
 800d7d2:	18e4      	addlt	r4, r4, r3
 800d7d4:	f7fc fb30 	bl	8009e38 <__malloc_lock>
 800d7d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d850 <_free_r+0x90>)
 800d7da:	6813      	ldr	r3, [r2, #0]
 800d7dc:	b933      	cbnz	r3, 800d7ec <_free_r+0x2c>
 800d7de:	6063      	str	r3, [r4, #4]
 800d7e0:	6014      	str	r4, [r2, #0]
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e8:	f7fc bb2c 	b.w	8009e44 <__malloc_unlock>
 800d7ec:	42a3      	cmp	r3, r4
 800d7ee:	d908      	bls.n	800d802 <_free_r+0x42>
 800d7f0:	6820      	ldr	r0, [r4, #0]
 800d7f2:	1821      	adds	r1, r4, r0
 800d7f4:	428b      	cmp	r3, r1
 800d7f6:	bf01      	itttt	eq
 800d7f8:	6819      	ldreq	r1, [r3, #0]
 800d7fa:	685b      	ldreq	r3, [r3, #4]
 800d7fc:	1809      	addeq	r1, r1, r0
 800d7fe:	6021      	streq	r1, [r4, #0]
 800d800:	e7ed      	b.n	800d7de <_free_r+0x1e>
 800d802:	461a      	mov	r2, r3
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	b10b      	cbz	r3, 800d80c <_free_r+0x4c>
 800d808:	42a3      	cmp	r3, r4
 800d80a:	d9fa      	bls.n	800d802 <_free_r+0x42>
 800d80c:	6811      	ldr	r1, [r2, #0]
 800d80e:	1850      	adds	r0, r2, r1
 800d810:	42a0      	cmp	r0, r4
 800d812:	d10b      	bne.n	800d82c <_free_r+0x6c>
 800d814:	6820      	ldr	r0, [r4, #0]
 800d816:	4401      	add	r1, r0
 800d818:	1850      	adds	r0, r2, r1
 800d81a:	4283      	cmp	r3, r0
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	d1e0      	bne.n	800d7e2 <_free_r+0x22>
 800d820:	6818      	ldr	r0, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	6053      	str	r3, [r2, #4]
 800d826:	4408      	add	r0, r1
 800d828:	6010      	str	r0, [r2, #0]
 800d82a:	e7da      	b.n	800d7e2 <_free_r+0x22>
 800d82c:	d902      	bls.n	800d834 <_free_r+0x74>
 800d82e:	230c      	movs	r3, #12
 800d830:	602b      	str	r3, [r5, #0]
 800d832:	e7d6      	b.n	800d7e2 <_free_r+0x22>
 800d834:	6820      	ldr	r0, [r4, #0]
 800d836:	1821      	adds	r1, r4, r0
 800d838:	428b      	cmp	r3, r1
 800d83a:	bf04      	itt	eq
 800d83c:	6819      	ldreq	r1, [r3, #0]
 800d83e:	685b      	ldreq	r3, [r3, #4]
 800d840:	6063      	str	r3, [r4, #4]
 800d842:	bf04      	itt	eq
 800d844:	1809      	addeq	r1, r1, r0
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	6054      	str	r4, [r2, #4]
 800d84a:	e7ca      	b.n	800d7e2 <_free_r+0x22>
 800d84c:	bd38      	pop	{r3, r4, r5, pc}
 800d84e:	bf00      	nop
 800d850:	20008440 	.word	0x20008440

0800d854 <rshift>:
 800d854:	6903      	ldr	r3, [r0, #16]
 800d856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d85e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d862:	f100 0414 	add.w	r4, r0, #20
 800d866:	dd45      	ble.n	800d8f4 <rshift+0xa0>
 800d868:	f011 011f 	ands.w	r1, r1, #31
 800d86c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d874:	d10c      	bne.n	800d890 <rshift+0x3c>
 800d876:	f100 0710 	add.w	r7, r0, #16
 800d87a:	4629      	mov	r1, r5
 800d87c:	42b1      	cmp	r1, r6
 800d87e:	d334      	bcc.n	800d8ea <rshift+0x96>
 800d880:	1a9b      	subs	r3, r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	1eea      	subs	r2, r5, #3
 800d886:	4296      	cmp	r6, r2
 800d888:	bf38      	it	cc
 800d88a:	2300      	movcc	r3, #0
 800d88c:	4423      	add	r3, r4
 800d88e:	e015      	b.n	800d8bc <rshift+0x68>
 800d890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d894:	f1c1 0820 	rsb	r8, r1, #32
 800d898:	40cf      	lsrs	r7, r1
 800d89a:	f105 0e04 	add.w	lr, r5, #4
 800d89e:	46a1      	mov	r9, r4
 800d8a0:	4576      	cmp	r6, lr
 800d8a2:	46f4      	mov	ip, lr
 800d8a4:	d815      	bhi.n	800d8d2 <rshift+0x7e>
 800d8a6:	1a9a      	subs	r2, r3, r2
 800d8a8:	0092      	lsls	r2, r2, #2
 800d8aa:	3a04      	subs	r2, #4
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	42ae      	cmp	r6, r5
 800d8b0:	bf38      	it	cc
 800d8b2:	2200      	movcc	r2, #0
 800d8b4:	18a3      	adds	r3, r4, r2
 800d8b6:	50a7      	str	r7, [r4, r2]
 800d8b8:	b107      	cbz	r7, 800d8bc <rshift+0x68>
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	1b1a      	subs	r2, r3, r4
 800d8be:	42a3      	cmp	r3, r4
 800d8c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8c4:	bf08      	it	eq
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	6102      	str	r2, [r0, #16]
 800d8ca:	bf08      	it	eq
 800d8cc:	6143      	streq	r3, [r0, #20]
 800d8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	f8dc c000 	ldr.w	ip, [ip]
 800d8d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d8da:	ea4c 0707 	orr.w	r7, ip, r7
 800d8de:	f849 7b04 	str.w	r7, [r9], #4
 800d8e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8e6:	40cf      	lsrs	r7, r1
 800d8e8:	e7da      	b.n	800d8a0 <rshift+0x4c>
 800d8ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8f2:	e7c3      	b.n	800d87c <rshift+0x28>
 800d8f4:	4623      	mov	r3, r4
 800d8f6:	e7e1      	b.n	800d8bc <rshift+0x68>

0800d8f8 <__hexdig_fun>:
 800d8f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d8fc:	2b09      	cmp	r3, #9
 800d8fe:	d802      	bhi.n	800d906 <__hexdig_fun+0xe>
 800d900:	3820      	subs	r0, #32
 800d902:	b2c0      	uxtb	r0, r0
 800d904:	4770      	bx	lr
 800d906:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d90a:	2b05      	cmp	r3, #5
 800d90c:	d801      	bhi.n	800d912 <__hexdig_fun+0x1a>
 800d90e:	3847      	subs	r0, #71	@ 0x47
 800d910:	e7f7      	b.n	800d902 <__hexdig_fun+0xa>
 800d912:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d916:	2b05      	cmp	r3, #5
 800d918:	d801      	bhi.n	800d91e <__hexdig_fun+0x26>
 800d91a:	3827      	subs	r0, #39	@ 0x27
 800d91c:	e7f1      	b.n	800d902 <__hexdig_fun+0xa>
 800d91e:	2000      	movs	r0, #0
 800d920:	4770      	bx	lr
	...

0800d924 <__gethex>:
 800d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d928:	b085      	sub	sp, #20
 800d92a:	468a      	mov	sl, r1
 800d92c:	9302      	str	r3, [sp, #8]
 800d92e:	680b      	ldr	r3, [r1, #0]
 800d930:	9001      	str	r0, [sp, #4]
 800d932:	4690      	mov	r8, r2
 800d934:	1c9c      	adds	r4, r3, #2
 800d936:	46a1      	mov	r9, r4
 800d938:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d93c:	2830      	cmp	r0, #48	@ 0x30
 800d93e:	d0fa      	beq.n	800d936 <__gethex+0x12>
 800d940:	eba9 0303 	sub.w	r3, r9, r3
 800d944:	f1a3 0b02 	sub.w	fp, r3, #2
 800d948:	f7ff ffd6 	bl	800d8f8 <__hexdig_fun>
 800d94c:	4605      	mov	r5, r0
 800d94e:	2800      	cmp	r0, #0
 800d950:	d168      	bne.n	800da24 <__gethex+0x100>
 800d952:	49a0      	ldr	r1, [pc, #640]	@ (800dbd4 <__gethex+0x2b0>)
 800d954:	2201      	movs	r2, #1
 800d956:	4648      	mov	r0, r9
 800d958:	f7fe fa29 	bl	800bdae <strncmp>
 800d95c:	4607      	mov	r7, r0
 800d95e:	2800      	cmp	r0, #0
 800d960:	d167      	bne.n	800da32 <__gethex+0x10e>
 800d962:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d966:	4626      	mov	r6, r4
 800d968:	f7ff ffc6 	bl	800d8f8 <__hexdig_fun>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d062      	beq.n	800da36 <__gethex+0x112>
 800d970:	4623      	mov	r3, r4
 800d972:	7818      	ldrb	r0, [r3, #0]
 800d974:	2830      	cmp	r0, #48	@ 0x30
 800d976:	4699      	mov	r9, r3
 800d978:	f103 0301 	add.w	r3, r3, #1
 800d97c:	d0f9      	beq.n	800d972 <__gethex+0x4e>
 800d97e:	f7ff ffbb 	bl	800d8f8 <__hexdig_fun>
 800d982:	fab0 f580 	clz	r5, r0
 800d986:	096d      	lsrs	r5, r5, #5
 800d988:	f04f 0b01 	mov.w	fp, #1
 800d98c:	464a      	mov	r2, r9
 800d98e:	4616      	mov	r6, r2
 800d990:	3201      	adds	r2, #1
 800d992:	7830      	ldrb	r0, [r6, #0]
 800d994:	f7ff ffb0 	bl	800d8f8 <__hexdig_fun>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d1f8      	bne.n	800d98e <__gethex+0x6a>
 800d99c:	498d      	ldr	r1, [pc, #564]	@ (800dbd4 <__gethex+0x2b0>)
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7fe fa04 	bl	800bdae <strncmp>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d13f      	bne.n	800da2a <__gethex+0x106>
 800d9aa:	b944      	cbnz	r4, 800d9be <__gethex+0x9a>
 800d9ac:	1c74      	adds	r4, r6, #1
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	4616      	mov	r6, r2
 800d9b2:	3201      	adds	r2, #1
 800d9b4:	7830      	ldrb	r0, [r6, #0]
 800d9b6:	f7ff ff9f 	bl	800d8f8 <__hexdig_fun>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d1f8      	bne.n	800d9b0 <__gethex+0x8c>
 800d9be:	1ba4      	subs	r4, r4, r6
 800d9c0:	00a7      	lsls	r7, r4, #2
 800d9c2:	7833      	ldrb	r3, [r6, #0]
 800d9c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d9c8:	2b50      	cmp	r3, #80	@ 0x50
 800d9ca:	d13e      	bne.n	800da4a <__gethex+0x126>
 800d9cc:	7873      	ldrb	r3, [r6, #1]
 800d9ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800d9d0:	d033      	beq.n	800da3a <__gethex+0x116>
 800d9d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d9d4:	d034      	beq.n	800da40 <__gethex+0x11c>
 800d9d6:	1c71      	adds	r1, r6, #1
 800d9d8:	2400      	movs	r4, #0
 800d9da:	7808      	ldrb	r0, [r1, #0]
 800d9dc:	f7ff ff8c 	bl	800d8f8 <__hexdig_fun>
 800d9e0:	1e43      	subs	r3, r0, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b18      	cmp	r3, #24
 800d9e6:	d830      	bhi.n	800da4a <__gethex+0x126>
 800d9e8:	f1a0 0210 	sub.w	r2, r0, #16
 800d9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9f0:	f7ff ff82 	bl	800d8f8 <__hexdig_fun>
 800d9f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d9f8:	fa5f fc8c 	uxtb.w	ip, ip
 800d9fc:	f1bc 0f18 	cmp.w	ip, #24
 800da00:	f04f 030a 	mov.w	r3, #10
 800da04:	d91e      	bls.n	800da44 <__gethex+0x120>
 800da06:	b104      	cbz	r4, 800da0a <__gethex+0xe6>
 800da08:	4252      	negs	r2, r2
 800da0a:	4417      	add	r7, r2
 800da0c:	f8ca 1000 	str.w	r1, [sl]
 800da10:	b1ed      	cbz	r5, 800da4e <__gethex+0x12a>
 800da12:	f1bb 0f00 	cmp.w	fp, #0
 800da16:	bf0c      	ite	eq
 800da18:	2506      	moveq	r5, #6
 800da1a:	2500      	movne	r5, #0
 800da1c:	4628      	mov	r0, r5
 800da1e:	b005      	add	sp, #20
 800da20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da24:	2500      	movs	r5, #0
 800da26:	462c      	mov	r4, r5
 800da28:	e7b0      	b.n	800d98c <__gethex+0x68>
 800da2a:	2c00      	cmp	r4, #0
 800da2c:	d1c7      	bne.n	800d9be <__gethex+0x9a>
 800da2e:	4627      	mov	r7, r4
 800da30:	e7c7      	b.n	800d9c2 <__gethex+0x9e>
 800da32:	464e      	mov	r6, r9
 800da34:	462f      	mov	r7, r5
 800da36:	2501      	movs	r5, #1
 800da38:	e7c3      	b.n	800d9c2 <__gethex+0x9e>
 800da3a:	2400      	movs	r4, #0
 800da3c:	1cb1      	adds	r1, r6, #2
 800da3e:	e7cc      	b.n	800d9da <__gethex+0xb6>
 800da40:	2401      	movs	r4, #1
 800da42:	e7fb      	b.n	800da3c <__gethex+0x118>
 800da44:	fb03 0002 	mla	r0, r3, r2, r0
 800da48:	e7ce      	b.n	800d9e8 <__gethex+0xc4>
 800da4a:	4631      	mov	r1, r6
 800da4c:	e7de      	b.n	800da0c <__gethex+0xe8>
 800da4e:	eba6 0309 	sub.w	r3, r6, r9
 800da52:	3b01      	subs	r3, #1
 800da54:	4629      	mov	r1, r5
 800da56:	2b07      	cmp	r3, #7
 800da58:	dc0a      	bgt.n	800da70 <__gethex+0x14c>
 800da5a:	9801      	ldr	r0, [sp, #4]
 800da5c:	f000 fa8a 	bl	800df74 <_Balloc>
 800da60:	4604      	mov	r4, r0
 800da62:	b940      	cbnz	r0, 800da76 <__gethex+0x152>
 800da64:	4b5c      	ldr	r3, [pc, #368]	@ (800dbd8 <__gethex+0x2b4>)
 800da66:	4602      	mov	r2, r0
 800da68:	21e4      	movs	r1, #228	@ 0xe4
 800da6a:	485c      	ldr	r0, [pc, #368]	@ (800dbdc <__gethex+0x2b8>)
 800da6c:	f001 ff64 	bl	800f938 <__assert_func>
 800da70:	3101      	adds	r1, #1
 800da72:	105b      	asrs	r3, r3, #1
 800da74:	e7ef      	b.n	800da56 <__gethex+0x132>
 800da76:	f100 0a14 	add.w	sl, r0, #20
 800da7a:	2300      	movs	r3, #0
 800da7c:	4655      	mov	r5, sl
 800da7e:	469b      	mov	fp, r3
 800da80:	45b1      	cmp	r9, r6
 800da82:	d337      	bcc.n	800daf4 <__gethex+0x1d0>
 800da84:	f845 bb04 	str.w	fp, [r5], #4
 800da88:	eba5 050a 	sub.w	r5, r5, sl
 800da8c:	10ad      	asrs	r5, r5, #2
 800da8e:	6125      	str	r5, [r4, #16]
 800da90:	4658      	mov	r0, fp
 800da92:	f000 fb61 	bl	800e158 <__hi0bits>
 800da96:	016d      	lsls	r5, r5, #5
 800da98:	f8d8 6000 	ldr.w	r6, [r8]
 800da9c:	1a2d      	subs	r5, r5, r0
 800da9e:	42b5      	cmp	r5, r6
 800daa0:	dd54      	ble.n	800db4c <__gethex+0x228>
 800daa2:	1bad      	subs	r5, r5, r6
 800daa4:	4629      	mov	r1, r5
 800daa6:	4620      	mov	r0, r4
 800daa8:	f000 fef5 	bl	800e896 <__any_on>
 800daac:	4681      	mov	r9, r0
 800daae:	b178      	cbz	r0, 800dad0 <__gethex+0x1ac>
 800dab0:	1e6b      	subs	r3, r5, #1
 800dab2:	1159      	asrs	r1, r3, #5
 800dab4:	f003 021f 	and.w	r2, r3, #31
 800dab8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dabc:	f04f 0901 	mov.w	r9, #1
 800dac0:	fa09 f202 	lsl.w	r2, r9, r2
 800dac4:	420a      	tst	r2, r1
 800dac6:	d003      	beq.n	800dad0 <__gethex+0x1ac>
 800dac8:	454b      	cmp	r3, r9
 800daca:	dc36      	bgt.n	800db3a <__gethex+0x216>
 800dacc:	f04f 0902 	mov.w	r9, #2
 800dad0:	4629      	mov	r1, r5
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff febe 	bl	800d854 <rshift>
 800dad8:	442f      	add	r7, r5
 800dada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dade:	42bb      	cmp	r3, r7
 800dae0:	da42      	bge.n	800db68 <__gethex+0x244>
 800dae2:	9801      	ldr	r0, [sp, #4]
 800dae4:	4621      	mov	r1, r4
 800dae6:	f000 fa85 	bl	800dff4 <_Bfree>
 800daea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800daec:	2300      	movs	r3, #0
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	25a3      	movs	r5, #163	@ 0xa3
 800daf2:	e793      	b.n	800da1c <__gethex+0xf8>
 800daf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800daf8:	2a2e      	cmp	r2, #46	@ 0x2e
 800dafa:	d012      	beq.n	800db22 <__gethex+0x1fe>
 800dafc:	2b20      	cmp	r3, #32
 800dafe:	d104      	bne.n	800db0a <__gethex+0x1e6>
 800db00:	f845 bb04 	str.w	fp, [r5], #4
 800db04:	f04f 0b00 	mov.w	fp, #0
 800db08:	465b      	mov	r3, fp
 800db0a:	7830      	ldrb	r0, [r6, #0]
 800db0c:	9303      	str	r3, [sp, #12]
 800db0e:	f7ff fef3 	bl	800d8f8 <__hexdig_fun>
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	f000 000f 	and.w	r0, r0, #15
 800db18:	4098      	lsls	r0, r3
 800db1a:	ea4b 0b00 	orr.w	fp, fp, r0
 800db1e:	3304      	adds	r3, #4
 800db20:	e7ae      	b.n	800da80 <__gethex+0x15c>
 800db22:	45b1      	cmp	r9, r6
 800db24:	d8ea      	bhi.n	800dafc <__gethex+0x1d8>
 800db26:	492b      	ldr	r1, [pc, #172]	@ (800dbd4 <__gethex+0x2b0>)
 800db28:	9303      	str	r3, [sp, #12]
 800db2a:	2201      	movs	r2, #1
 800db2c:	4630      	mov	r0, r6
 800db2e:	f7fe f93e 	bl	800bdae <strncmp>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	2800      	cmp	r0, #0
 800db36:	d1e1      	bne.n	800dafc <__gethex+0x1d8>
 800db38:	e7a2      	b.n	800da80 <__gethex+0x15c>
 800db3a:	1ea9      	subs	r1, r5, #2
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 feaa 	bl	800e896 <__any_on>
 800db42:	2800      	cmp	r0, #0
 800db44:	d0c2      	beq.n	800dacc <__gethex+0x1a8>
 800db46:	f04f 0903 	mov.w	r9, #3
 800db4a:	e7c1      	b.n	800dad0 <__gethex+0x1ac>
 800db4c:	da09      	bge.n	800db62 <__gethex+0x23e>
 800db4e:	1b75      	subs	r5, r6, r5
 800db50:	4621      	mov	r1, r4
 800db52:	9801      	ldr	r0, [sp, #4]
 800db54:	462a      	mov	r2, r5
 800db56:	f000 fc65 	bl	800e424 <__lshift>
 800db5a:	1b7f      	subs	r7, r7, r5
 800db5c:	4604      	mov	r4, r0
 800db5e:	f100 0a14 	add.w	sl, r0, #20
 800db62:	f04f 0900 	mov.w	r9, #0
 800db66:	e7b8      	b.n	800dada <__gethex+0x1b6>
 800db68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db6c:	42bd      	cmp	r5, r7
 800db6e:	dd6f      	ble.n	800dc50 <__gethex+0x32c>
 800db70:	1bed      	subs	r5, r5, r7
 800db72:	42ae      	cmp	r6, r5
 800db74:	dc34      	bgt.n	800dbe0 <__gethex+0x2bc>
 800db76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d022      	beq.n	800dbc4 <__gethex+0x2a0>
 800db7e:	2b03      	cmp	r3, #3
 800db80:	d024      	beq.n	800dbcc <__gethex+0x2a8>
 800db82:	2b01      	cmp	r3, #1
 800db84:	d115      	bne.n	800dbb2 <__gethex+0x28e>
 800db86:	42ae      	cmp	r6, r5
 800db88:	d113      	bne.n	800dbb2 <__gethex+0x28e>
 800db8a:	2e01      	cmp	r6, #1
 800db8c:	d10b      	bne.n	800dba6 <__gethex+0x282>
 800db8e:	9a02      	ldr	r2, [sp, #8]
 800db90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	2301      	movs	r3, #1
 800db98:	6123      	str	r3, [r4, #16]
 800db9a:	f8ca 3000 	str.w	r3, [sl]
 800db9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dba0:	2562      	movs	r5, #98	@ 0x62
 800dba2:	601c      	str	r4, [r3, #0]
 800dba4:	e73a      	b.n	800da1c <__gethex+0xf8>
 800dba6:	1e71      	subs	r1, r6, #1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f000 fe74 	bl	800e896 <__any_on>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d1ed      	bne.n	800db8e <__gethex+0x26a>
 800dbb2:	9801      	ldr	r0, [sp, #4]
 800dbb4:	4621      	mov	r1, r4
 800dbb6:	f000 fa1d 	bl	800dff4 <_Bfree>
 800dbba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	2550      	movs	r5, #80	@ 0x50
 800dbc2:	e72b      	b.n	800da1c <__gethex+0xf8>
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1f3      	bne.n	800dbb2 <__gethex+0x28e>
 800dbca:	e7e0      	b.n	800db8e <__gethex+0x26a>
 800dbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1dd      	bne.n	800db8e <__gethex+0x26a>
 800dbd2:	e7ee      	b.n	800dbb2 <__gethex+0x28e>
 800dbd4:	08011372 	.word	0x08011372
 800dbd8:	08011fa0 	.word	0x08011fa0
 800dbdc:	08011fb1 	.word	0x08011fb1
 800dbe0:	1e6f      	subs	r7, r5, #1
 800dbe2:	f1b9 0f00 	cmp.w	r9, #0
 800dbe6:	d130      	bne.n	800dc4a <__gethex+0x326>
 800dbe8:	b127      	cbz	r7, 800dbf4 <__gethex+0x2d0>
 800dbea:	4639      	mov	r1, r7
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 fe52 	bl	800e896 <__any_on>
 800dbf2:	4681      	mov	r9, r0
 800dbf4:	117a      	asrs	r2, r7, #5
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dbfc:	f007 071f 	and.w	r7, r7, #31
 800dc00:	40bb      	lsls	r3, r7
 800dc02:	4213      	tst	r3, r2
 800dc04:	4629      	mov	r1, r5
 800dc06:	4620      	mov	r0, r4
 800dc08:	bf18      	it	ne
 800dc0a:	f049 0902 	orrne.w	r9, r9, #2
 800dc0e:	f7ff fe21 	bl	800d854 <rshift>
 800dc12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc16:	1b76      	subs	r6, r6, r5
 800dc18:	2502      	movs	r5, #2
 800dc1a:	f1b9 0f00 	cmp.w	r9, #0
 800dc1e:	d047      	beq.n	800dcb0 <__gethex+0x38c>
 800dc20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d015      	beq.n	800dc54 <__gethex+0x330>
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d017      	beq.n	800dc5c <__gethex+0x338>
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d109      	bne.n	800dc44 <__gethex+0x320>
 800dc30:	f019 0f02 	tst.w	r9, #2
 800dc34:	d006      	beq.n	800dc44 <__gethex+0x320>
 800dc36:	f8da 3000 	ldr.w	r3, [sl]
 800dc3a:	ea49 0903 	orr.w	r9, r9, r3
 800dc3e:	f019 0f01 	tst.w	r9, #1
 800dc42:	d10e      	bne.n	800dc62 <__gethex+0x33e>
 800dc44:	f045 0510 	orr.w	r5, r5, #16
 800dc48:	e032      	b.n	800dcb0 <__gethex+0x38c>
 800dc4a:	f04f 0901 	mov.w	r9, #1
 800dc4e:	e7d1      	b.n	800dbf4 <__gethex+0x2d0>
 800dc50:	2501      	movs	r5, #1
 800dc52:	e7e2      	b.n	800dc1a <__gethex+0x2f6>
 800dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc56:	f1c3 0301 	rsb	r3, r3, #1
 800dc5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0f0      	beq.n	800dc44 <__gethex+0x320>
 800dc62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc66:	f104 0314 	add.w	r3, r4, #20
 800dc6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc72:	f04f 0c00 	mov.w	ip, #0
 800dc76:	4618      	mov	r0, r3
 800dc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc80:	d01b      	beq.n	800dcba <__gethex+0x396>
 800dc82:	3201      	adds	r2, #1
 800dc84:	6002      	str	r2, [r0, #0]
 800dc86:	2d02      	cmp	r5, #2
 800dc88:	f104 0314 	add.w	r3, r4, #20
 800dc8c:	d13c      	bne.n	800dd08 <__gethex+0x3e4>
 800dc8e:	f8d8 2000 	ldr.w	r2, [r8]
 800dc92:	3a01      	subs	r2, #1
 800dc94:	42b2      	cmp	r2, r6
 800dc96:	d109      	bne.n	800dcac <__gethex+0x388>
 800dc98:	1171      	asrs	r1, r6, #5
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dca0:	f006 061f 	and.w	r6, r6, #31
 800dca4:	fa02 f606 	lsl.w	r6, r2, r6
 800dca8:	421e      	tst	r6, r3
 800dcaa:	d13a      	bne.n	800dd22 <__gethex+0x3fe>
 800dcac:	f045 0520 	orr.w	r5, r5, #32
 800dcb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcb2:	601c      	str	r4, [r3, #0]
 800dcb4:	9b02      	ldr	r3, [sp, #8]
 800dcb6:	601f      	str	r7, [r3, #0]
 800dcb8:	e6b0      	b.n	800da1c <__gethex+0xf8>
 800dcba:	4299      	cmp	r1, r3
 800dcbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcc0:	d8d9      	bhi.n	800dc76 <__gethex+0x352>
 800dcc2:	68a3      	ldr	r3, [r4, #8]
 800dcc4:	459b      	cmp	fp, r3
 800dcc6:	db17      	blt.n	800dcf8 <__gethex+0x3d4>
 800dcc8:	6861      	ldr	r1, [r4, #4]
 800dcca:	9801      	ldr	r0, [sp, #4]
 800dccc:	3101      	adds	r1, #1
 800dcce:	f000 f951 	bl	800df74 <_Balloc>
 800dcd2:	4681      	mov	r9, r0
 800dcd4:	b918      	cbnz	r0, 800dcde <__gethex+0x3ba>
 800dcd6:	4b1a      	ldr	r3, [pc, #104]	@ (800dd40 <__gethex+0x41c>)
 800dcd8:	4602      	mov	r2, r0
 800dcda:	2184      	movs	r1, #132	@ 0x84
 800dcdc:	e6c5      	b.n	800da6a <__gethex+0x146>
 800dcde:	6922      	ldr	r2, [r4, #16]
 800dce0:	3202      	adds	r2, #2
 800dce2:	f104 010c 	add.w	r1, r4, #12
 800dce6:	0092      	lsls	r2, r2, #2
 800dce8:	300c      	adds	r0, #12
 800dcea:	f7fe fef5 	bl	800cad8 <memcpy>
 800dcee:	4621      	mov	r1, r4
 800dcf0:	9801      	ldr	r0, [sp, #4]
 800dcf2:	f000 f97f 	bl	800dff4 <_Bfree>
 800dcf6:	464c      	mov	r4, r9
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd00:	6122      	str	r2, [r4, #16]
 800dd02:	2201      	movs	r2, #1
 800dd04:	615a      	str	r2, [r3, #20]
 800dd06:	e7be      	b.n	800dc86 <__gethex+0x362>
 800dd08:	6922      	ldr	r2, [r4, #16]
 800dd0a:	455a      	cmp	r2, fp
 800dd0c:	dd0b      	ble.n	800dd26 <__gethex+0x402>
 800dd0e:	2101      	movs	r1, #1
 800dd10:	4620      	mov	r0, r4
 800dd12:	f7ff fd9f 	bl	800d854 <rshift>
 800dd16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd1a:	3701      	adds	r7, #1
 800dd1c:	42bb      	cmp	r3, r7
 800dd1e:	f6ff aee0 	blt.w	800dae2 <__gethex+0x1be>
 800dd22:	2501      	movs	r5, #1
 800dd24:	e7c2      	b.n	800dcac <__gethex+0x388>
 800dd26:	f016 061f 	ands.w	r6, r6, #31
 800dd2a:	d0fa      	beq.n	800dd22 <__gethex+0x3fe>
 800dd2c:	4453      	add	r3, sl
 800dd2e:	f1c6 0620 	rsb	r6, r6, #32
 800dd32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd36:	f000 fa0f 	bl	800e158 <__hi0bits>
 800dd3a:	42b0      	cmp	r0, r6
 800dd3c:	dbe7      	blt.n	800dd0e <__gethex+0x3ea>
 800dd3e:	e7f0      	b.n	800dd22 <__gethex+0x3fe>
 800dd40:	08011fa0 	.word	0x08011fa0

0800dd44 <L_shift>:
 800dd44:	f1c2 0208 	rsb	r2, r2, #8
 800dd48:	0092      	lsls	r2, r2, #2
 800dd4a:	b570      	push	{r4, r5, r6, lr}
 800dd4c:	f1c2 0620 	rsb	r6, r2, #32
 800dd50:	6843      	ldr	r3, [r0, #4]
 800dd52:	6804      	ldr	r4, [r0, #0]
 800dd54:	fa03 f506 	lsl.w	r5, r3, r6
 800dd58:	432c      	orrs	r4, r5
 800dd5a:	40d3      	lsrs	r3, r2
 800dd5c:	6004      	str	r4, [r0, #0]
 800dd5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd62:	4288      	cmp	r0, r1
 800dd64:	d3f4      	bcc.n	800dd50 <L_shift+0xc>
 800dd66:	bd70      	pop	{r4, r5, r6, pc}

0800dd68 <__match>:
 800dd68:	b530      	push	{r4, r5, lr}
 800dd6a:	6803      	ldr	r3, [r0, #0]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd72:	b914      	cbnz	r4, 800dd7a <__match+0x12>
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	2001      	movs	r0, #1
 800dd78:	bd30      	pop	{r4, r5, pc}
 800dd7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd82:	2d19      	cmp	r5, #25
 800dd84:	bf98      	it	ls
 800dd86:	3220      	addls	r2, #32
 800dd88:	42a2      	cmp	r2, r4
 800dd8a:	d0f0      	beq.n	800dd6e <__match+0x6>
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e7f3      	b.n	800dd78 <__match+0x10>

0800dd90 <__hexnan>:
 800dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd94:	680b      	ldr	r3, [r1, #0]
 800dd96:	6801      	ldr	r1, [r0, #0]
 800dd98:	115e      	asrs	r6, r3, #5
 800dd9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd9e:	f013 031f 	ands.w	r3, r3, #31
 800dda2:	b087      	sub	sp, #28
 800dda4:	bf18      	it	ne
 800dda6:	3604      	addne	r6, #4
 800dda8:	2500      	movs	r5, #0
 800ddaa:	1f37      	subs	r7, r6, #4
 800ddac:	4682      	mov	sl, r0
 800ddae:	4690      	mov	r8, r2
 800ddb0:	9301      	str	r3, [sp, #4]
 800ddb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddb6:	46b9      	mov	r9, r7
 800ddb8:	463c      	mov	r4, r7
 800ddba:	9502      	str	r5, [sp, #8]
 800ddbc:	46ab      	mov	fp, r5
 800ddbe:	784a      	ldrb	r2, [r1, #1]
 800ddc0:	1c4b      	adds	r3, r1, #1
 800ddc2:	9303      	str	r3, [sp, #12]
 800ddc4:	b342      	cbz	r2, 800de18 <__hexnan+0x88>
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	9105      	str	r1, [sp, #20]
 800ddca:	9204      	str	r2, [sp, #16]
 800ddcc:	f7ff fd94 	bl	800d8f8 <__hexdig_fun>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d151      	bne.n	800de78 <__hexnan+0xe8>
 800ddd4:	9a04      	ldr	r2, [sp, #16]
 800ddd6:	9905      	ldr	r1, [sp, #20]
 800ddd8:	2a20      	cmp	r2, #32
 800ddda:	d818      	bhi.n	800de0e <__hexnan+0x7e>
 800dddc:	9b02      	ldr	r3, [sp, #8]
 800ddde:	459b      	cmp	fp, r3
 800dde0:	dd13      	ble.n	800de0a <__hexnan+0x7a>
 800dde2:	454c      	cmp	r4, r9
 800dde4:	d206      	bcs.n	800ddf4 <__hexnan+0x64>
 800dde6:	2d07      	cmp	r5, #7
 800dde8:	dc04      	bgt.n	800ddf4 <__hexnan+0x64>
 800ddea:	462a      	mov	r2, r5
 800ddec:	4649      	mov	r1, r9
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f7ff ffa8 	bl	800dd44 <L_shift>
 800ddf4:	4544      	cmp	r4, r8
 800ddf6:	d952      	bls.n	800de9e <__hexnan+0x10e>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	f1a4 0904 	sub.w	r9, r4, #4
 800ddfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800de02:	f8cd b008 	str.w	fp, [sp, #8]
 800de06:	464c      	mov	r4, r9
 800de08:	461d      	mov	r5, r3
 800de0a:	9903      	ldr	r1, [sp, #12]
 800de0c:	e7d7      	b.n	800ddbe <__hexnan+0x2e>
 800de0e:	2a29      	cmp	r2, #41	@ 0x29
 800de10:	d157      	bne.n	800dec2 <__hexnan+0x132>
 800de12:	3102      	adds	r1, #2
 800de14:	f8ca 1000 	str.w	r1, [sl]
 800de18:	f1bb 0f00 	cmp.w	fp, #0
 800de1c:	d051      	beq.n	800dec2 <__hexnan+0x132>
 800de1e:	454c      	cmp	r4, r9
 800de20:	d206      	bcs.n	800de30 <__hexnan+0xa0>
 800de22:	2d07      	cmp	r5, #7
 800de24:	dc04      	bgt.n	800de30 <__hexnan+0xa0>
 800de26:	462a      	mov	r2, r5
 800de28:	4649      	mov	r1, r9
 800de2a:	4620      	mov	r0, r4
 800de2c:	f7ff ff8a 	bl	800dd44 <L_shift>
 800de30:	4544      	cmp	r4, r8
 800de32:	d936      	bls.n	800dea2 <__hexnan+0x112>
 800de34:	f1a8 0204 	sub.w	r2, r8, #4
 800de38:	4623      	mov	r3, r4
 800de3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800de3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800de42:	429f      	cmp	r7, r3
 800de44:	d2f9      	bcs.n	800de3a <__hexnan+0xaa>
 800de46:	1b3b      	subs	r3, r7, r4
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	3304      	adds	r3, #4
 800de4e:	3401      	adds	r4, #1
 800de50:	3e03      	subs	r6, #3
 800de52:	42b4      	cmp	r4, r6
 800de54:	bf88      	it	hi
 800de56:	2304      	movhi	r3, #4
 800de58:	4443      	add	r3, r8
 800de5a:	2200      	movs	r2, #0
 800de5c:	f843 2b04 	str.w	r2, [r3], #4
 800de60:	429f      	cmp	r7, r3
 800de62:	d2fb      	bcs.n	800de5c <__hexnan+0xcc>
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	b91b      	cbnz	r3, 800de70 <__hexnan+0xe0>
 800de68:	4547      	cmp	r7, r8
 800de6a:	d128      	bne.n	800debe <__hexnan+0x12e>
 800de6c:	2301      	movs	r3, #1
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	2005      	movs	r0, #5
 800de72:	b007      	add	sp, #28
 800de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de78:	3501      	adds	r5, #1
 800de7a:	2d08      	cmp	r5, #8
 800de7c:	f10b 0b01 	add.w	fp, fp, #1
 800de80:	dd06      	ble.n	800de90 <__hexnan+0x100>
 800de82:	4544      	cmp	r4, r8
 800de84:	d9c1      	bls.n	800de0a <__hexnan+0x7a>
 800de86:	2300      	movs	r3, #0
 800de88:	f844 3c04 	str.w	r3, [r4, #-4]
 800de8c:	2501      	movs	r5, #1
 800de8e:	3c04      	subs	r4, #4
 800de90:	6822      	ldr	r2, [r4, #0]
 800de92:	f000 000f 	and.w	r0, r0, #15
 800de96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de9a:	6020      	str	r0, [r4, #0]
 800de9c:	e7b5      	b.n	800de0a <__hexnan+0x7a>
 800de9e:	2508      	movs	r5, #8
 800dea0:	e7b3      	b.n	800de0a <__hexnan+0x7a>
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d0dd      	beq.n	800de64 <__hexnan+0xd4>
 800dea8:	f1c3 0320 	rsb	r3, r3, #32
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	40da      	lsrs	r2, r3
 800deb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800deb6:	4013      	ands	r3, r2
 800deb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800debc:	e7d2      	b.n	800de64 <__hexnan+0xd4>
 800debe:	3f04      	subs	r7, #4
 800dec0:	e7d0      	b.n	800de64 <__hexnan+0xd4>
 800dec2:	2004      	movs	r0, #4
 800dec4:	e7d5      	b.n	800de72 <__hexnan+0xe2>
	...

0800dec8 <_findenv_r>:
 800dec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800decc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800df3c <_findenv_r+0x74>
 800ded0:	4606      	mov	r6, r0
 800ded2:	4689      	mov	r9, r1
 800ded4:	4617      	mov	r7, r2
 800ded6:	f001 fd61 	bl	800f99c <__env_lock>
 800deda:	f8da 4000 	ldr.w	r4, [sl]
 800dede:	b134      	cbz	r4, 800deee <_findenv_r+0x26>
 800dee0:	464b      	mov	r3, r9
 800dee2:	4698      	mov	r8, r3
 800dee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dee8:	b13a      	cbz	r2, 800defa <_findenv_r+0x32>
 800deea:	2a3d      	cmp	r2, #61	@ 0x3d
 800deec:	d1f9      	bne.n	800dee2 <_findenv_r+0x1a>
 800deee:	4630      	mov	r0, r6
 800def0:	f001 fd5a 	bl	800f9a8 <__env_unlock>
 800def4:	2000      	movs	r0, #0
 800def6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defa:	eba8 0809 	sub.w	r8, r8, r9
 800defe:	46a3      	mov	fp, r4
 800df00:	f854 0b04 	ldr.w	r0, [r4], #4
 800df04:	2800      	cmp	r0, #0
 800df06:	d0f2      	beq.n	800deee <_findenv_r+0x26>
 800df08:	4642      	mov	r2, r8
 800df0a:	4649      	mov	r1, r9
 800df0c:	f7fd ff4f 	bl	800bdae <strncmp>
 800df10:	2800      	cmp	r0, #0
 800df12:	d1f4      	bne.n	800defe <_findenv_r+0x36>
 800df14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800df18:	eb03 0508 	add.w	r5, r3, r8
 800df1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800df20:	2b3d      	cmp	r3, #61	@ 0x3d
 800df22:	d1ec      	bne.n	800defe <_findenv_r+0x36>
 800df24:	f8da 3000 	ldr.w	r3, [sl]
 800df28:	ebab 0303 	sub.w	r3, fp, r3
 800df2c:	109b      	asrs	r3, r3, #2
 800df2e:	4630      	mov	r0, r6
 800df30:	603b      	str	r3, [r7, #0]
 800df32:	f001 fd39 	bl	800f9a8 <__env_unlock>
 800df36:	1c68      	adds	r0, r5, #1
 800df38:	e7dd      	b.n	800def6 <_findenv_r+0x2e>
 800df3a:	bf00      	nop
 800df3c:	20000010 	.word	0x20000010

0800df40 <_getenv_r>:
 800df40:	b507      	push	{r0, r1, r2, lr}
 800df42:	aa01      	add	r2, sp, #4
 800df44:	f7ff ffc0 	bl	800dec8 <_findenv_r>
 800df48:	b003      	add	sp, #12
 800df4a:	f85d fb04 	ldr.w	pc, [sp], #4

0800df4e <__ascii_mbtowc>:
 800df4e:	b082      	sub	sp, #8
 800df50:	b901      	cbnz	r1, 800df54 <__ascii_mbtowc+0x6>
 800df52:	a901      	add	r1, sp, #4
 800df54:	b142      	cbz	r2, 800df68 <__ascii_mbtowc+0x1a>
 800df56:	b14b      	cbz	r3, 800df6c <__ascii_mbtowc+0x1e>
 800df58:	7813      	ldrb	r3, [r2, #0]
 800df5a:	600b      	str	r3, [r1, #0]
 800df5c:	7812      	ldrb	r2, [r2, #0]
 800df5e:	1e10      	subs	r0, r2, #0
 800df60:	bf18      	it	ne
 800df62:	2001      	movne	r0, #1
 800df64:	b002      	add	sp, #8
 800df66:	4770      	bx	lr
 800df68:	4610      	mov	r0, r2
 800df6a:	e7fb      	b.n	800df64 <__ascii_mbtowc+0x16>
 800df6c:	f06f 0001 	mvn.w	r0, #1
 800df70:	e7f8      	b.n	800df64 <__ascii_mbtowc+0x16>
	...

0800df74 <_Balloc>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	69c6      	ldr	r6, [r0, #28]
 800df78:	4604      	mov	r4, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	b976      	cbnz	r6, 800df9c <_Balloc+0x28>
 800df7e:	2010      	movs	r0, #16
 800df80:	f7fb fea8 	bl	8009cd4 <malloc>
 800df84:	4602      	mov	r2, r0
 800df86:	61e0      	str	r0, [r4, #28]
 800df88:	b920      	cbnz	r0, 800df94 <_Balloc+0x20>
 800df8a:	4b18      	ldr	r3, [pc, #96]	@ (800dfec <_Balloc+0x78>)
 800df8c:	4818      	ldr	r0, [pc, #96]	@ (800dff0 <_Balloc+0x7c>)
 800df8e:	216b      	movs	r1, #107	@ 0x6b
 800df90:	f001 fcd2 	bl	800f938 <__assert_func>
 800df94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df98:	6006      	str	r6, [r0, #0]
 800df9a:	60c6      	str	r6, [r0, #12]
 800df9c:	69e6      	ldr	r6, [r4, #28]
 800df9e:	68f3      	ldr	r3, [r6, #12]
 800dfa0:	b183      	cbz	r3, 800dfc4 <_Balloc+0x50>
 800dfa2:	69e3      	ldr	r3, [r4, #28]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfaa:	b9b8      	cbnz	r0, 800dfdc <_Balloc+0x68>
 800dfac:	2101      	movs	r1, #1
 800dfae:	fa01 f605 	lsl.w	r6, r1, r5
 800dfb2:	1d72      	adds	r2, r6, #5
 800dfb4:	0092      	lsls	r2, r2, #2
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f001 fcdc 	bl	800f974 <_calloc_r>
 800dfbc:	b160      	cbz	r0, 800dfd8 <_Balloc+0x64>
 800dfbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfc2:	e00e      	b.n	800dfe2 <_Balloc+0x6e>
 800dfc4:	2221      	movs	r2, #33	@ 0x21
 800dfc6:	2104      	movs	r1, #4
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f001 fcd3 	bl	800f974 <_calloc_r>
 800dfce:	69e3      	ldr	r3, [r4, #28]
 800dfd0:	60f0      	str	r0, [r6, #12]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1e4      	bne.n	800dfa2 <_Balloc+0x2e>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	6802      	ldr	r2, [r0, #0]
 800dfde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfe8:	e7f7      	b.n	800dfda <_Balloc+0x66>
 800dfea:	bf00      	nop
 800dfec:	08011f31 	.word	0x08011f31
 800dff0:	08012011 	.word	0x08012011

0800dff4 <_Bfree>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	69c6      	ldr	r6, [r0, #28]
 800dff8:	4605      	mov	r5, r0
 800dffa:	460c      	mov	r4, r1
 800dffc:	b976      	cbnz	r6, 800e01c <_Bfree+0x28>
 800dffe:	2010      	movs	r0, #16
 800e000:	f7fb fe68 	bl	8009cd4 <malloc>
 800e004:	4602      	mov	r2, r0
 800e006:	61e8      	str	r0, [r5, #28]
 800e008:	b920      	cbnz	r0, 800e014 <_Bfree+0x20>
 800e00a:	4b09      	ldr	r3, [pc, #36]	@ (800e030 <_Bfree+0x3c>)
 800e00c:	4809      	ldr	r0, [pc, #36]	@ (800e034 <_Bfree+0x40>)
 800e00e:	218f      	movs	r1, #143	@ 0x8f
 800e010:	f001 fc92 	bl	800f938 <__assert_func>
 800e014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e018:	6006      	str	r6, [r0, #0]
 800e01a:	60c6      	str	r6, [r0, #12]
 800e01c:	b13c      	cbz	r4, 800e02e <_Bfree+0x3a>
 800e01e:	69eb      	ldr	r3, [r5, #28]
 800e020:	6862      	ldr	r2, [r4, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e028:	6021      	str	r1, [r4, #0]
 800e02a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e02e:	bd70      	pop	{r4, r5, r6, pc}
 800e030:	08011f31 	.word	0x08011f31
 800e034:	08012011 	.word	0x08012011

0800e038 <__multadd>:
 800e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03c:	690d      	ldr	r5, [r1, #16]
 800e03e:	4607      	mov	r7, r0
 800e040:	460c      	mov	r4, r1
 800e042:	461e      	mov	r6, r3
 800e044:	f101 0c14 	add.w	ip, r1, #20
 800e048:	2000      	movs	r0, #0
 800e04a:	f8dc 3000 	ldr.w	r3, [ip]
 800e04e:	b299      	uxth	r1, r3
 800e050:	fb02 6101 	mla	r1, r2, r1, r6
 800e054:	0c1e      	lsrs	r6, r3, #16
 800e056:	0c0b      	lsrs	r3, r1, #16
 800e058:	fb02 3306 	mla	r3, r2, r6, r3
 800e05c:	b289      	uxth	r1, r1
 800e05e:	3001      	adds	r0, #1
 800e060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e064:	4285      	cmp	r5, r0
 800e066:	f84c 1b04 	str.w	r1, [ip], #4
 800e06a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e06e:	dcec      	bgt.n	800e04a <__multadd+0x12>
 800e070:	b30e      	cbz	r6, 800e0b6 <__multadd+0x7e>
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	42ab      	cmp	r3, r5
 800e076:	dc19      	bgt.n	800e0ac <__multadd+0x74>
 800e078:	6861      	ldr	r1, [r4, #4]
 800e07a:	4638      	mov	r0, r7
 800e07c:	3101      	adds	r1, #1
 800e07e:	f7ff ff79 	bl	800df74 <_Balloc>
 800e082:	4680      	mov	r8, r0
 800e084:	b928      	cbnz	r0, 800e092 <__multadd+0x5a>
 800e086:	4602      	mov	r2, r0
 800e088:	4b0c      	ldr	r3, [pc, #48]	@ (800e0bc <__multadd+0x84>)
 800e08a:	480d      	ldr	r0, [pc, #52]	@ (800e0c0 <__multadd+0x88>)
 800e08c:	21ba      	movs	r1, #186	@ 0xba
 800e08e:	f001 fc53 	bl	800f938 <__assert_func>
 800e092:	6922      	ldr	r2, [r4, #16]
 800e094:	3202      	adds	r2, #2
 800e096:	f104 010c 	add.w	r1, r4, #12
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	300c      	adds	r0, #12
 800e09e:	f7fe fd1b 	bl	800cad8 <memcpy>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	f7ff ffa5 	bl	800dff4 <_Bfree>
 800e0aa:	4644      	mov	r4, r8
 800e0ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0b0:	3501      	adds	r5, #1
 800e0b2:	615e      	str	r6, [r3, #20]
 800e0b4:	6125      	str	r5, [r4, #16]
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0bc:	08011fa0 	.word	0x08011fa0
 800e0c0:	08012011 	.word	0x08012011

0800e0c4 <__s2b>:
 800e0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	4615      	mov	r5, r2
 800e0cc:	461f      	mov	r7, r3
 800e0ce:	2209      	movs	r2, #9
 800e0d0:	3308      	adds	r3, #8
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0d8:	2100      	movs	r1, #0
 800e0da:	2201      	movs	r2, #1
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	db09      	blt.n	800e0f4 <__s2b+0x30>
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f7ff ff47 	bl	800df74 <_Balloc>
 800e0e6:	b940      	cbnz	r0, 800e0fa <__s2b+0x36>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	4b19      	ldr	r3, [pc, #100]	@ (800e150 <__s2b+0x8c>)
 800e0ec:	4819      	ldr	r0, [pc, #100]	@ (800e154 <__s2b+0x90>)
 800e0ee:	21d3      	movs	r1, #211	@ 0xd3
 800e0f0:	f001 fc22 	bl	800f938 <__assert_func>
 800e0f4:	0052      	lsls	r2, r2, #1
 800e0f6:	3101      	adds	r1, #1
 800e0f8:	e7f0      	b.n	800e0dc <__s2b+0x18>
 800e0fa:	9b08      	ldr	r3, [sp, #32]
 800e0fc:	6143      	str	r3, [r0, #20]
 800e0fe:	2d09      	cmp	r5, #9
 800e100:	f04f 0301 	mov.w	r3, #1
 800e104:	6103      	str	r3, [r0, #16]
 800e106:	dd16      	ble.n	800e136 <__s2b+0x72>
 800e108:	f104 0909 	add.w	r9, r4, #9
 800e10c:	46c8      	mov	r8, r9
 800e10e:	442c      	add	r4, r5
 800e110:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e114:	4601      	mov	r1, r0
 800e116:	3b30      	subs	r3, #48	@ 0x30
 800e118:	220a      	movs	r2, #10
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ff8c 	bl	800e038 <__multadd>
 800e120:	45a0      	cmp	r8, r4
 800e122:	d1f5      	bne.n	800e110 <__s2b+0x4c>
 800e124:	f1a5 0408 	sub.w	r4, r5, #8
 800e128:	444c      	add	r4, r9
 800e12a:	1b2d      	subs	r5, r5, r4
 800e12c:	1963      	adds	r3, r4, r5
 800e12e:	42bb      	cmp	r3, r7
 800e130:	db04      	blt.n	800e13c <__s2b+0x78>
 800e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e136:	340a      	adds	r4, #10
 800e138:	2509      	movs	r5, #9
 800e13a:	e7f6      	b.n	800e12a <__s2b+0x66>
 800e13c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e140:	4601      	mov	r1, r0
 800e142:	3b30      	subs	r3, #48	@ 0x30
 800e144:	220a      	movs	r2, #10
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ff76 	bl	800e038 <__multadd>
 800e14c:	e7ee      	b.n	800e12c <__s2b+0x68>
 800e14e:	bf00      	nop
 800e150:	08011fa0 	.word	0x08011fa0
 800e154:	08012011 	.word	0x08012011

0800e158 <__hi0bits>:
 800e158:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e15c:	4603      	mov	r3, r0
 800e15e:	bf36      	itet	cc
 800e160:	0403      	lslcc	r3, r0, #16
 800e162:	2000      	movcs	r0, #0
 800e164:	2010      	movcc	r0, #16
 800e166:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e16a:	bf3c      	itt	cc
 800e16c:	021b      	lslcc	r3, r3, #8
 800e16e:	3008      	addcc	r0, #8
 800e170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e174:	bf3c      	itt	cc
 800e176:	011b      	lslcc	r3, r3, #4
 800e178:	3004      	addcc	r0, #4
 800e17a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e17e:	bf3c      	itt	cc
 800e180:	009b      	lslcc	r3, r3, #2
 800e182:	3002      	addcc	r0, #2
 800e184:	2b00      	cmp	r3, #0
 800e186:	db05      	blt.n	800e194 <__hi0bits+0x3c>
 800e188:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e18c:	f100 0001 	add.w	r0, r0, #1
 800e190:	bf08      	it	eq
 800e192:	2020      	moveq	r0, #32
 800e194:	4770      	bx	lr

0800e196 <__lo0bits>:
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	4602      	mov	r2, r0
 800e19a:	f013 0007 	ands.w	r0, r3, #7
 800e19e:	d00b      	beq.n	800e1b8 <__lo0bits+0x22>
 800e1a0:	07d9      	lsls	r1, r3, #31
 800e1a2:	d421      	bmi.n	800e1e8 <__lo0bits+0x52>
 800e1a4:	0798      	lsls	r0, r3, #30
 800e1a6:	bf49      	itett	mi
 800e1a8:	085b      	lsrmi	r3, r3, #1
 800e1aa:	089b      	lsrpl	r3, r3, #2
 800e1ac:	2001      	movmi	r0, #1
 800e1ae:	6013      	strmi	r3, [r2, #0]
 800e1b0:	bf5c      	itt	pl
 800e1b2:	6013      	strpl	r3, [r2, #0]
 800e1b4:	2002      	movpl	r0, #2
 800e1b6:	4770      	bx	lr
 800e1b8:	b299      	uxth	r1, r3
 800e1ba:	b909      	cbnz	r1, 800e1c0 <__lo0bits+0x2a>
 800e1bc:	0c1b      	lsrs	r3, r3, #16
 800e1be:	2010      	movs	r0, #16
 800e1c0:	b2d9      	uxtb	r1, r3
 800e1c2:	b909      	cbnz	r1, 800e1c8 <__lo0bits+0x32>
 800e1c4:	3008      	adds	r0, #8
 800e1c6:	0a1b      	lsrs	r3, r3, #8
 800e1c8:	0719      	lsls	r1, r3, #28
 800e1ca:	bf04      	itt	eq
 800e1cc:	091b      	lsreq	r3, r3, #4
 800e1ce:	3004      	addeq	r0, #4
 800e1d0:	0799      	lsls	r1, r3, #30
 800e1d2:	bf04      	itt	eq
 800e1d4:	089b      	lsreq	r3, r3, #2
 800e1d6:	3002      	addeq	r0, #2
 800e1d8:	07d9      	lsls	r1, r3, #31
 800e1da:	d403      	bmi.n	800e1e4 <__lo0bits+0x4e>
 800e1dc:	085b      	lsrs	r3, r3, #1
 800e1de:	f100 0001 	add.w	r0, r0, #1
 800e1e2:	d003      	beq.n	800e1ec <__lo0bits+0x56>
 800e1e4:	6013      	str	r3, [r2, #0]
 800e1e6:	4770      	bx	lr
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	4770      	bx	lr
 800e1ec:	2020      	movs	r0, #32
 800e1ee:	4770      	bx	lr

0800e1f0 <__i2b>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	f7ff febd 	bl	800df74 <_Balloc>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	b928      	cbnz	r0, 800e20a <__i2b+0x1a>
 800e1fe:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <__i2b+0x24>)
 800e200:	4805      	ldr	r0, [pc, #20]	@ (800e218 <__i2b+0x28>)
 800e202:	f240 1145 	movw	r1, #325	@ 0x145
 800e206:	f001 fb97 	bl	800f938 <__assert_func>
 800e20a:	2301      	movs	r3, #1
 800e20c:	6144      	str	r4, [r0, #20]
 800e20e:	6103      	str	r3, [r0, #16]
 800e210:	bd10      	pop	{r4, pc}
 800e212:	bf00      	nop
 800e214:	08011fa0 	.word	0x08011fa0
 800e218:	08012011 	.word	0x08012011

0800e21c <__multiply>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	4614      	mov	r4, r2
 800e222:	690a      	ldr	r2, [r1, #16]
 800e224:	6923      	ldr	r3, [r4, #16]
 800e226:	429a      	cmp	r2, r3
 800e228:	bfa8      	it	ge
 800e22a:	4623      	movge	r3, r4
 800e22c:	460f      	mov	r7, r1
 800e22e:	bfa4      	itt	ge
 800e230:	460c      	movge	r4, r1
 800e232:	461f      	movge	r7, r3
 800e234:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e238:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	6861      	ldr	r1, [r4, #4]
 800e240:	eb0a 0609 	add.w	r6, sl, r9
 800e244:	42b3      	cmp	r3, r6
 800e246:	b085      	sub	sp, #20
 800e248:	bfb8      	it	lt
 800e24a:	3101      	addlt	r1, #1
 800e24c:	f7ff fe92 	bl	800df74 <_Balloc>
 800e250:	b930      	cbnz	r0, 800e260 <__multiply+0x44>
 800e252:	4602      	mov	r2, r0
 800e254:	4b44      	ldr	r3, [pc, #272]	@ (800e368 <__multiply+0x14c>)
 800e256:	4845      	ldr	r0, [pc, #276]	@ (800e36c <__multiply+0x150>)
 800e258:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e25c:	f001 fb6c 	bl	800f938 <__assert_func>
 800e260:	f100 0514 	add.w	r5, r0, #20
 800e264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e268:	462b      	mov	r3, r5
 800e26a:	2200      	movs	r2, #0
 800e26c:	4543      	cmp	r3, r8
 800e26e:	d321      	bcc.n	800e2b4 <__multiply+0x98>
 800e270:	f107 0114 	add.w	r1, r7, #20
 800e274:	f104 0214 	add.w	r2, r4, #20
 800e278:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e27c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e280:	9302      	str	r3, [sp, #8]
 800e282:	1b13      	subs	r3, r2, r4
 800e284:	3b15      	subs	r3, #21
 800e286:	f023 0303 	bic.w	r3, r3, #3
 800e28a:	3304      	adds	r3, #4
 800e28c:	f104 0715 	add.w	r7, r4, #21
 800e290:	42ba      	cmp	r2, r7
 800e292:	bf38      	it	cc
 800e294:	2304      	movcc	r3, #4
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	9b02      	ldr	r3, [sp, #8]
 800e29a:	9103      	str	r1, [sp, #12]
 800e29c:	428b      	cmp	r3, r1
 800e29e:	d80c      	bhi.n	800e2ba <__multiply+0x9e>
 800e2a0:	2e00      	cmp	r6, #0
 800e2a2:	dd03      	ble.n	800e2ac <__multiply+0x90>
 800e2a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d05b      	beq.n	800e364 <__multiply+0x148>
 800e2ac:	6106      	str	r6, [r0, #16]
 800e2ae:	b005      	add	sp, #20
 800e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b4:	f843 2b04 	str.w	r2, [r3], #4
 800e2b8:	e7d8      	b.n	800e26c <__multiply+0x50>
 800e2ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800e2be:	f1ba 0f00 	cmp.w	sl, #0
 800e2c2:	d024      	beq.n	800e30e <__multiply+0xf2>
 800e2c4:	f104 0e14 	add.w	lr, r4, #20
 800e2c8:	46a9      	mov	r9, r5
 800e2ca:	f04f 0c00 	mov.w	ip, #0
 800e2ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2d2:	f8d9 3000 	ldr.w	r3, [r9]
 800e2d6:	fa1f fb87 	uxth.w	fp, r7
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2e4:	f8d9 7000 	ldr.w	r7, [r9]
 800e2e8:	4463      	add	r3, ip
 800e2ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2fc:	4572      	cmp	r2, lr
 800e2fe:	f849 3b04 	str.w	r3, [r9], #4
 800e302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e306:	d8e2      	bhi.n	800e2ce <__multiply+0xb2>
 800e308:	9b01      	ldr	r3, [sp, #4]
 800e30a:	f845 c003 	str.w	ip, [r5, r3]
 800e30e:	9b03      	ldr	r3, [sp, #12]
 800e310:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e314:	3104      	adds	r1, #4
 800e316:	f1b9 0f00 	cmp.w	r9, #0
 800e31a:	d021      	beq.n	800e360 <__multiply+0x144>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	f104 0c14 	add.w	ip, r4, #20
 800e322:	46ae      	mov	lr, r5
 800e324:	f04f 0a00 	mov.w	sl, #0
 800e328:	f8bc b000 	ldrh.w	fp, [ip]
 800e32c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e330:	fb09 770b 	mla	r7, r9, fp, r7
 800e334:	4457      	add	r7, sl
 800e336:	b29b      	uxth	r3, r3
 800e338:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e33c:	f84e 3b04 	str.w	r3, [lr], #4
 800e340:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e348:	f8be 3000 	ldrh.w	r3, [lr]
 800e34c:	fb09 330a 	mla	r3, r9, sl, r3
 800e350:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e354:	4562      	cmp	r2, ip
 800e356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e35a:	d8e5      	bhi.n	800e328 <__multiply+0x10c>
 800e35c:	9f01      	ldr	r7, [sp, #4]
 800e35e:	51eb      	str	r3, [r5, r7]
 800e360:	3504      	adds	r5, #4
 800e362:	e799      	b.n	800e298 <__multiply+0x7c>
 800e364:	3e01      	subs	r6, #1
 800e366:	e79b      	b.n	800e2a0 <__multiply+0x84>
 800e368:	08011fa0 	.word	0x08011fa0
 800e36c:	08012011 	.word	0x08012011

0800e370 <__pow5mult>:
 800e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e374:	4615      	mov	r5, r2
 800e376:	f012 0203 	ands.w	r2, r2, #3
 800e37a:	4607      	mov	r7, r0
 800e37c:	460e      	mov	r6, r1
 800e37e:	d007      	beq.n	800e390 <__pow5mult+0x20>
 800e380:	4c25      	ldr	r4, [pc, #148]	@ (800e418 <__pow5mult+0xa8>)
 800e382:	3a01      	subs	r2, #1
 800e384:	2300      	movs	r3, #0
 800e386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e38a:	f7ff fe55 	bl	800e038 <__multadd>
 800e38e:	4606      	mov	r6, r0
 800e390:	10ad      	asrs	r5, r5, #2
 800e392:	d03d      	beq.n	800e410 <__pow5mult+0xa0>
 800e394:	69fc      	ldr	r4, [r7, #28]
 800e396:	b97c      	cbnz	r4, 800e3b8 <__pow5mult+0x48>
 800e398:	2010      	movs	r0, #16
 800e39a:	f7fb fc9b 	bl	8009cd4 <malloc>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	61f8      	str	r0, [r7, #28]
 800e3a2:	b928      	cbnz	r0, 800e3b0 <__pow5mult+0x40>
 800e3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e41c <__pow5mult+0xac>)
 800e3a6:	481e      	ldr	r0, [pc, #120]	@ (800e420 <__pow5mult+0xb0>)
 800e3a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e3ac:	f001 fac4 	bl	800f938 <__assert_func>
 800e3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3b4:	6004      	str	r4, [r0, #0]
 800e3b6:	60c4      	str	r4, [r0, #12]
 800e3b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3c0:	b94c      	cbnz	r4, 800e3d6 <__pow5mult+0x66>
 800e3c2:	f240 2171 	movw	r1, #625	@ 0x271
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	f7ff ff12 	bl	800e1f0 <__i2b>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	6003      	str	r3, [r0, #0]
 800e3d6:	f04f 0900 	mov.w	r9, #0
 800e3da:	07eb      	lsls	r3, r5, #31
 800e3dc:	d50a      	bpl.n	800e3f4 <__pow5mult+0x84>
 800e3de:	4631      	mov	r1, r6
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	f7ff ff1a 	bl	800e21c <__multiply>
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4680      	mov	r8, r0
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fe01 	bl	800dff4 <_Bfree>
 800e3f2:	4646      	mov	r6, r8
 800e3f4:	106d      	asrs	r5, r5, #1
 800e3f6:	d00b      	beq.n	800e410 <__pow5mult+0xa0>
 800e3f8:	6820      	ldr	r0, [r4, #0]
 800e3fa:	b938      	cbnz	r0, 800e40c <__pow5mult+0x9c>
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	4621      	mov	r1, r4
 800e400:	4638      	mov	r0, r7
 800e402:	f7ff ff0b 	bl	800e21c <__multiply>
 800e406:	6020      	str	r0, [r4, #0]
 800e408:	f8c0 9000 	str.w	r9, [r0]
 800e40c:	4604      	mov	r4, r0
 800e40e:	e7e4      	b.n	800e3da <__pow5mult+0x6a>
 800e410:	4630      	mov	r0, r6
 800e412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e416:	bf00      	nop
 800e418:	0801206c 	.word	0x0801206c
 800e41c:	08011f31 	.word	0x08011f31
 800e420:	08012011 	.word	0x08012011

0800e424 <__lshift>:
 800e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e428:	460c      	mov	r4, r1
 800e42a:	6849      	ldr	r1, [r1, #4]
 800e42c:	6923      	ldr	r3, [r4, #16]
 800e42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e432:	68a3      	ldr	r3, [r4, #8]
 800e434:	4607      	mov	r7, r0
 800e436:	4691      	mov	r9, r2
 800e438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e43c:	f108 0601 	add.w	r6, r8, #1
 800e440:	42b3      	cmp	r3, r6
 800e442:	db0b      	blt.n	800e45c <__lshift+0x38>
 800e444:	4638      	mov	r0, r7
 800e446:	f7ff fd95 	bl	800df74 <_Balloc>
 800e44a:	4605      	mov	r5, r0
 800e44c:	b948      	cbnz	r0, 800e462 <__lshift+0x3e>
 800e44e:	4602      	mov	r2, r0
 800e450:	4b28      	ldr	r3, [pc, #160]	@ (800e4f4 <__lshift+0xd0>)
 800e452:	4829      	ldr	r0, [pc, #164]	@ (800e4f8 <__lshift+0xd4>)
 800e454:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e458:	f001 fa6e 	bl	800f938 <__assert_func>
 800e45c:	3101      	adds	r1, #1
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	e7ee      	b.n	800e440 <__lshift+0x1c>
 800e462:	2300      	movs	r3, #0
 800e464:	f100 0114 	add.w	r1, r0, #20
 800e468:	f100 0210 	add.w	r2, r0, #16
 800e46c:	4618      	mov	r0, r3
 800e46e:	4553      	cmp	r3, sl
 800e470:	db33      	blt.n	800e4da <__lshift+0xb6>
 800e472:	6920      	ldr	r0, [r4, #16]
 800e474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e478:	f104 0314 	add.w	r3, r4, #20
 800e47c:	f019 091f 	ands.w	r9, r9, #31
 800e480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e488:	d02b      	beq.n	800e4e2 <__lshift+0xbe>
 800e48a:	f1c9 0e20 	rsb	lr, r9, #32
 800e48e:	468a      	mov	sl, r1
 800e490:	2200      	movs	r2, #0
 800e492:	6818      	ldr	r0, [r3, #0]
 800e494:	fa00 f009 	lsl.w	r0, r0, r9
 800e498:	4310      	orrs	r0, r2
 800e49a:	f84a 0b04 	str.w	r0, [sl], #4
 800e49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4a2:	459c      	cmp	ip, r3
 800e4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e4a8:	d8f3      	bhi.n	800e492 <__lshift+0x6e>
 800e4aa:	ebac 0304 	sub.w	r3, ip, r4
 800e4ae:	3b15      	subs	r3, #21
 800e4b0:	f023 0303 	bic.w	r3, r3, #3
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	f104 0015 	add.w	r0, r4, #21
 800e4ba:	4584      	cmp	ip, r0
 800e4bc:	bf38      	it	cc
 800e4be:	2304      	movcc	r3, #4
 800e4c0:	50ca      	str	r2, [r1, r3]
 800e4c2:	b10a      	cbz	r2, 800e4c8 <__lshift+0xa4>
 800e4c4:	f108 0602 	add.w	r6, r8, #2
 800e4c8:	3e01      	subs	r6, #1
 800e4ca:	4638      	mov	r0, r7
 800e4cc:	612e      	str	r6, [r5, #16]
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	f7ff fd90 	bl	800dff4 <_Bfree>
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4de:	3301      	adds	r3, #1
 800e4e0:	e7c5      	b.n	800e46e <__lshift+0x4a>
 800e4e2:	3904      	subs	r1, #4
 800e4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4ec:	459c      	cmp	ip, r3
 800e4ee:	d8f9      	bhi.n	800e4e4 <__lshift+0xc0>
 800e4f0:	e7ea      	b.n	800e4c8 <__lshift+0xa4>
 800e4f2:	bf00      	nop
 800e4f4:	08011fa0 	.word	0x08011fa0
 800e4f8:	08012011 	.word	0x08012011

0800e4fc <__mcmp>:
 800e4fc:	690a      	ldr	r2, [r1, #16]
 800e4fe:	4603      	mov	r3, r0
 800e500:	6900      	ldr	r0, [r0, #16]
 800e502:	1a80      	subs	r0, r0, r2
 800e504:	b530      	push	{r4, r5, lr}
 800e506:	d10e      	bne.n	800e526 <__mcmp+0x2a>
 800e508:	3314      	adds	r3, #20
 800e50a:	3114      	adds	r1, #20
 800e50c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e51c:	4295      	cmp	r5, r2
 800e51e:	d003      	beq.n	800e528 <__mcmp+0x2c>
 800e520:	d205      	bcs.n	800e52e <__mcmp+0x32>
 800e522:	f04f 30ff 	mov.w	r0, #4294967295
 800e526:	bd30      	pop	{r4, r5, pc}
 800e528:	42a3      	cmp	r3, r4
 800e52a:	d3f3      	bcc.n	800e514 <__mcmp+0x18>
 800e52c:	e7fb      	b.n	800e526 <__mcmp+0x2a>
 800e52e:	2001      	movs	r0, #1
 800e530:	e7f9      	b.n	800e526 <__mcmp+0x2a>
	...

0800e534 <__mdiff>:
 800e534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	4689      	mov	r9, r1
 800e53a:	4606      	mov	r6, r0
 800e53c:	4611      	mov	r1, r2
 800e53e:	4648      	mov	r0, r9
 800e540:	4614      	mov	r4, r2
 800e542:	f7ff ffdb 	bl	800e4fc <__mcmp>
 800e546:	1e05      	subs	r5, r0, #0
 800e548:	d112      	bne.n	800e570 <__mdiff+0x3c>
 800e54a:	4629      	mov	r1, r5
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7ff fd11 	bl	800df74 <_Balloc>
 800e552:	4602      	mov	r2, r0
 800e554:	b928      	cbnz	r0, 800e562 <__mdiff+0x2e>
 800e556:	4b3f      	ldr	r3, [pc, #252]	@ (800e654 <__mdiff+0x120>)
 800e558:	f240 2137 	movw	r1, #567	@ 0x237
 800e55c:	483e      	ldr	r0, [pc, #248]	@ (800e658 <__mdiff+0x124>)
 800e55e:	f001 f9eb 	bl	800f938 <__assert_func>
 800e562:	2301      	movs	r3, #1
 800e564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e568:	4610      	mov	r0, r2
 800e56a:	b003      	add	sp, #12
 800e56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e570:	bfbc      	itt	lt
 800e572:	464b      	movlt	r3, r9
 800e574:	46a1      	movlt	r9, r4
 800e576:	4630      	mov	r0, r6
 800e578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e57c:	bfba      	itte	lt
 800e57e:	461c      	movlt	r4, r3
 800e580:	2501      	movlt	r5, #1
 800e582:	2500      	movge	r5, #0
 800e584:	f7ff fcf6 	bl	800df74 <_Balloc>
 800e588:	4602      	mov	r2, r0
 800e58a:	b918      	cbnz	r0, 800e594 <__mdiff+0x60>
 800e58c:	4b31      	ldr	r3, [pc, #196]	@ (800e654 <__mdiff+0x120>)
 800e58e:	f240 2145 	movw	r1, #581	@ 0x245
 800e592:	e7e3      	b.n	800e55c <__mdiff+0x28>
 800e594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e598:	6926      	ldr	r6, [r4, #16]
 800e59a:	60c5      	str	r5, [r0, #12]
 800e59c:	f109 0310 	add.w	r3, r9, #16
 800e5a0:	f109 0514 	add.w	r5, r9, #20
 800e5a4:	f104 0e14 	add.w	lr, r4, #20
 800e5a8:	f100 0b14 	add.w	fp, r0, #20
 800e5ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e5b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	46d9      	mov	r9, fp
 800e5b8:	f04f 0c00 	mov.w	ip, #0
 800e5bc:	9b01      	ldr	r3, [sp, #4]
 800e5be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e5c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e5c6:	9301      	str	r3, [sp, #4]
 800e5c8:	fa1f f38a 	uxth.w	r3, sl
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	b283      	uxth	r3, r0
 800e5d0:	1acb      	subs	r3, r1, r3
 800e5d2:	0c00      	lsrs	r0, r0, #16
 800e5d4:	4463      	add	r3, ip
 800e5d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5e4:	4576      	cmp	r6, lr
 800e5e6:	f849 3b04 	str.w	r3, [r9], #4
 800e5ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5ee:	d8e5      	bhi.n	800e5bc <__mdiff+0x88>
 800e5f0:	1b33      	subs	r3, r6, r4
 800e5f2:	3b15      	subs	r3, #21
 800e5f4:	f023 0303 	bic.w	r3, r3, #3
 800e5f8:	3415      	adds	r4, #21
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	42a6      	cmp	r6, r4
 800e5fe:	bf38      	it	cc
 800e600:	2304      	movcc	r3, #4
 800e602:	441d      	add	r5, r3
 800e604:	445b      	add	r3, fp
 800e606:	461e      	mov	r6, r3
 800e608:	462c      	mov	r4, r5
 800e60a:	4544      	cmp	r4, r8
 800e60c:	d30e      	bcc.n	800e62c <__mdiff+0xf8>
 800e60e:	f108 0103 	add.w	r1, r8, #3
 800e612:	1b49      	subs	r1, r1, r5
 800e614:	f021 0103 	bic.w	r1, r1, #3
 800e618:	3d03      	subs	r5, #3
 800e61a:	45a8      	cmp	r8, r5
 800e61c:	bf38      	it	cc
 800e61e:	2100      	movcc	r1, #0
 800e620:	440b      	add	r3, r1
 800e622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e626:	b191      	cbz	r1, 800e64e <__mdiff+0x11a>
 800e628:	6117      	str	r7, [r2, #16]
 800e62a:	e79d      	b.n	800e568 <__mdiff+0x34>
 800e62c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e630:	46e6      	mov	lr, ip
 800e632:	0c08      	lsrs	r0, r1, #16
 800e634:	fa1c fc81 	uxtah	ip, ip, r1
 800e638:	4471      	add	r1, lr
 800e63a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e63e:	b289      	uxth	r1, r1
 800e640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e644:	f846 1b04 	str.w	r1, [r6], #4
 800e648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e64c:	e7dd      	b.n	800e60a <__mdiff+0xd6>
 800e64e:	3f01      	subs	r7, #1
 800e650:	e7e7      	b.n	800e622 <__mdiff+0xee>
 800e652:	bf00      	nop
 800e654:	08011fa0 	.word	0x08011fa0
 800e658:	08012011 	.word	0x08012011

0800e65c <__ulp>:
 800e65c:	b082      	sub	sp, #8
 800e65e:	ed8d 0b00 	vstr	d0, [sp]
 800e662:	9a01      	ldr	r2, [sp, #4]
 800e664:	4b0f      	ldr	r3, [pc, #60]	@ (800e6a4 <__ulp+0x48>)
 800e666:	4013      	ands	r3, r2
 800e668:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dc08      	bgt.n	800e682 <__ulp+0x26>
 800e670:	425b      	negs	r3, r3
 800e672:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e676:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e67a:	da04      	bge.n	800e686 <__ulp+0x2a>
 800e67c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e680:	4113      	asrs	r3, r2
 800e682:	2200      	movs	r2, #0
 800e684:	e008      	b.n	800e698 <__ulp+0x3c>
 800e686:	f1a2 0314 	sub.w	r3, r2, #20
 800e68a:	2b1e      	cmp	r3, #30
 800e68c:	bfda      	itte	le
 800e68e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e692:	40da      	lsrle	r2, r3
 800e694:	2201      	movgt	r2, #1
 800e696:	2300      	movs	r3, #0
 800e698:	4619      	mov	r1, r3
 800e69a:	4610      	mov	r0, r2
 800e69c:	ec41 0b10 	vmov	d0, r0, r1
 800e6a0:	b002      	add	sp, #8
 800e6a2:	4770      	bx	lr
 800e6a4:	7ff00000 	.word	0x7ff00000

0800e6a8 <__b2d>:
 800e6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ac:	6906      	ldr	r6, [r0, #16]
 800e6ae:	f100 0814 	add.w	r8, r0, #20
 800e6b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e6b6:	1f37      	subs	r7, r6, #4
 800e6b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e6bc:	4610      	mov	r0, r2
 800e6be:	f7ff fd4b 	bl	800e158 <__hi0bits>
 800e6c2:	f1c0 0320 	rsb	r3, r0, #32
 800e6c6:	280a      	cmp	r0, #10
 800e6c8:	600b      	str	r3, [r1, #0]
 800e6ca:	491b      	ldr	r1, [pc, #108]	@ (800e738 <__b2d+0x90>)
 800e6cc:	dc15      	bgt.n	800e6fa <__b2d+0x52>
 800e6ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800e6d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e6d6:	45b8      	cmp	r8, r7
 800e6d8:	ea43 0501 	orr.w	r5, r3, r1
 800e6dc:	bf34      	ite	cc
 800e6de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6e2:	2300      	movcs	r3, #0
 800e6e4:	3015      	adds	r0, #21
 800e6e6:	fa02 f000 	lsl.w	r0, r2, r0
 800e6ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800e6ee:	4303      	orrs	r3, r0
 800e6f0:	461c      	mov	r4, r3
 800e6f2:	ec45 4b10 	vmov	d0, r4, r5
 800e6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fa:	45b8      	cmp	r8, r7
 800e6fc:	bf3a      	itte	cc
 800e6fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e702:	f1a6 0708 	subcc.w	r7, r6, #8
 800e706:	2300      	movcs	r3, #0
 800e708:	380b      	subs	r0, #11
 800e70a:	d012      	beq.n	800e732 <__b2d+0x8a>
 800e70c:	f1c0 0120 	rsb	r1, r0, #32
 800e710:	fa23 f401 	lsr.w	r4, r3, r1
 800e714:	4082      	lsls	r2, r0
 800e716:	4322      	orrs	r2, r4
 800e718:	4547      	cmp	r7, r8
 800e71a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e71e:	bf8c      	ite	hi
 800e720:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e724:	2200      	movls	r2, #0
 800e726:	4083      	lsls	r3, r0
 800e728:	40ca      	lsrs	r2, r1
 800e72a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e72e:	4313      	orrs	r3, r2
 800e730:	e7de      	b.n	800e6f0 <__b2d+0x48>
 800e732:	ea42 0501 	orr.w	r5, r2, r1
 800e736:	e7db      	b.n	800e6f0 <__b2d+0x48>
 800e738:	3ff00000 	.word	0x3ff00000

0800e73c <__d2b>:
 800e73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e740:	460f      	mov	r7, r1
 800e742:	2101      	movs	r1, #1
 800e744:	ec59 8b10 	vmov	r8, r9, d0
 800e748:	4616      	mov	r6, r2
 800e74a:	f7ff fc13 	bl	800df74 <_Balloc>
 800e74e:	4604      	mov	r4, r0
 800e750:	b930      	cbnz	r0, 800e760 <__d2b+0x24>
 800e752:	4602      	mov	r2, r0
 800e754:	4b23      	ldr	r3, [pc, #140]	@ (800e7e4 <__d2b+0xa8>)
 800e756:	4824      	ldr	r0, [pc, #144]	@ (800e7e8 <__d2b+0xac>)
 800e758:	f240 310f 	movw	r1, #783	@ 0x30f
 800e75c:	f001 f8ec 	bl	800f938 <__assert_func>
 800e760:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e764:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e768:	b10d      	cbz	r5, 800e76e <__d2b+0x32>
 800e76a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	f1b8 0300 	subs.w	r3, r8, #0
 800e774:	d023      	beq.n	800e7be <__d2b+0x82>
 800e776:	4668      	mov	r0, sp
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	f7ff fd0c 	bl	800e196 <__lo0bits>
 800e77e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e782:	b1d0      	cbz	r0, 800e7ba <__d2b+0x7e>
 800e784:	f1c0 0320 	rsb	r3, r0, #32
 800e788:	fa02 f303 	lsl.w	r3, r2, r3
 800e78c:	430b      	orrs	r3, r1
 800e78e:	40c2      	lsrs	r2, r0
 800e790:	6163      	str	r3, [r4, #20]
 800e792:	9201      	str	r2, [sp, #4]
 800e794:	9b01      	ldr	r3, [sp, #4]
 800e796:	61a3      	str	r3, [r4, #24]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	bf0c      	ite	eq
 800e79c:	2201      	moveq	r2, #1
 800e79e:	2202      	movne	r2, #2
 800e7a0:	6122      	str	r2, [r4, #16]
 800e7a2:	b1a5      	cbz	r5, 800e7ce <__d2b+0x92>
 800e7a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e7a8:	4405      	add	r5, r0
 800e7aa:	603d      	str	r5, [r7, #0]
 800e7ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e7b0:	6030      	str	r0, [r6, #0]
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	b003      	add	sp, #12
 800e7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ba:	6161      	str	r1, [r4, #20]
 800e7bc:	e7ea      	b.n	800e794 <__d2b+0x58>
 800e7be:	a801      	add	r0, sp, #4
 800e7c0:	f7ff fce9 	bl	800e196 <__lo0bits>
 800e7c4:	9b01      	ldr	r3, [sp, #4]
 800e7c6:	6163      	str	r3, [r4, #20]
 800e7c8:	3020      	adds	r0, #32
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	e7e8      	b.n	800e7a0 <__d2b+0x64>
 800e7ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e7d6:	6038      	str	r0, [r7, #0]
 800e7d8:	6918      	ldr	r0, [r3, #16]
 800e7da:	f7ff fcbd 	bl	800e158 <__hi0bits>
 800e7de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7e2:	e7e5      	b.n	800e7b0 <__d2b+0x74>
 800e7e4:	08011fa0 	.word	0x08011fa0
 800e7e8:	08012011 	.word	0x08012011

0800e7ec <__ratio>:
 800e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f0:	b085      	sub	sp, #20
 800e7f2:	e9cd 1000 	strd	r1, r0, [sp]
 800e7f6:	a902      	add	r1, sp, #8
 800e7f8:	f7ff ff56 	bl	800e6a8 <__b2d>
 800e7fc:	9800      	ldr	r0, [sp, #0]
 800e7fe:	a903      	add	r1, sp, #12
 800e800:	ec55 4b10 	vmov	r4, r5, d0
 800e804:	f7ff ff50 	bl	800e6a8 <__b2d>
 800e808:	9b01      	ldr	r3, [sp, #4]
 800e80a:	6919      	ldr	r1, [r3, #16]
 800e80c:	9b00      	ldr	r3, [sp, #0]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	1ac9      	subs	r1, r1, r3
 800e812:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e816:	1a9b      	subs	r3, r3, r2
 800e818:	ec5b ab10 	vmov	sl, fp, d0
 800e81c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e820:	2b00      	cmp	r3, #0
 800e822:	bfce      	itee	gt
 800e824:	462a      	movgt	r2, r5
 800e826:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e82a:	465a      	movle	r2, fp
 800e82c:	462f      	mov	r7, r5
 800e82e:	46d9      	mov	r9, fp
 800e830:	bfcc      	ite	gt
 800e832:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e836:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e83a:	464b      	mov	r3, r9
 800e83c:	4652      	mov	r2, sl
 800e83e:	4620      	mov	r0, r4
 800e840:	4639      	mov	r1, r7
 800e842:	f7f2 f813 	bl	800086c <__aeabi_ddiv>
 800e846:	ec41 0b10 	vmov	d0, r0, r1
 800e84a:	b005      	add	sp, #20
 800e84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e850 <__copybits>:
 800e850:	3901      	subs	r1, #1
 800e852:	b570      	push	{r4, r5, r6, lr}
 800e854:	1149      	asrs	r1, r1, #5
 800e856:	6914      	ldr	r4, [r2, #16]
 800e858:	3101      	adds	r1, #1
 800e85a:	f102 0314 	add.w	r3, r2, #20
 800e85e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e862:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e866:	1f05      	subs	r5, r0, #4
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d30c      	bcc.n	800e886 <__copybits+0x36>
 800e86c:	1aa3      	subs	r3, r4, r2
 800e86e:	3b11      	subs	r3, #17
 800e870:	f023 0303 	bic.w	r3, r3, #3
 800e874:	3211      	adds	r2, #17
 800e876:	42a2      	cmp	r2, r4
 800e878:	bf88      	it	hi
 800e87a:	2300      	movhi	r3, #0
 800e87c:	4418      	add	r0, r3
 800e87e:	2300      	movs	r3, #0
 800e880:	4288      	cmp	r0, r1
 800e882:	d305      	bcc.n	800e890 <__copybits+0x40>
 800e884:	bd70      	pop	{r4, r5, r6, pc}
 800e886:	f853 6b04 	ldr.w	r6, [r3], #4
 800e88a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e88e:	e7eb      	b.n	800e868 <__copybits+0x18>
 800e890:	f840 3b04 	str.w	r3, [r0], #4
 800e894:	e7f4      	b.n	800e880 <__copybits+0x30>

0800e896 <__any_on>:
 800e896:	f100 0214 	add.w	r2, r0, #20
 800e89a:	6900      	ldr	r0, [r0, #16]
 800e89c:	114b      	asrs	r3, r1, #5
 800e89e:	4298      	cmp	r0, r3
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	db11      	blt.n	800e8c8 <__any_on+0x32>
 800e8a4:	dd0a      	ble.n	800e8bc <__any_on+0x26>
 800e8a6:	f011 011f 	ands.w	r1, r1, #31
 800e8aa:	d007      	beq.n	800e8bc <__any_on+0x26>
 800e8ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e8b0:	fa24 f001 	lsr.w	r0, r4, r1
 800e8b4:	fa00 f101 	lsl.w	r1, r0, r1
 800e8b8:	428c      	cmp	r4, r1
 800e8ba:	d10b      	bne.n	800e8d4 <__any_on+0x3e>
 800e8bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d803      	bhi.n	800e8cc <__any_on+0x36>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	bd10      	pop	{r4, pc}
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	e7f7      	b.n	800e8bc <__any_on+0x26>
 800e8cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8d0:	2900      	cmp	r1, #0
 800e8d2:	d0f5      	beq.n	800e8c0 <__any_on+0x2a>
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	e7f6      	b.n	800e8c6 <__any_on+0x30>

0800e8d8 <_strtoul_l.constprop.0>:
 800e8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	4e34      	ldr	r6, [pc, #208]	@ (800e9b0 <_strtoul_l.constprop.0+0xd8>)
 800e8de:	4686      	mov	lr, r0
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8e8:	5d37      	ldrb	r7, [r6, r4]
 800e8ea:	f017 0708 	ands.w	r7, r7, #8
 800e8ee:	d1f8      	bne.n	800e8e2 <_strtoul_l.constprop.0+0xa>
 800e8f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800e8f2:	d12f      	bne.n	800e954 <_strtoul_l.constprop.0+0x7c>
 800e8f4:	782c      	ldrb	r4, [r5, #0]
 800e8f6:	2701      	movs	r7, #1
 800e8f8:	1c85      	adds	r5, r0, #2
 800e8fa:	f033 0010 	bics.w	r0, r3, #16
 800e8fe:	d109      	bne.n	800e914 <_strtoul_l.constprop.0+0x3c>
 800e900:	2c30      	cmp	r4, #48	@ 0x30
 800e902:	d12c      	bne.n	800e95e <_strtoul_l.constprop.0+0x86>
 800e904:	7828      	ldrb	r0, [r5, #0]
 800e906:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e90a:	2858      	cmp	r0, #88	@ 0x58
 800e90c:	d127      	bne.n	800e95e <_strtoul_l.constprop.0+0x86>
 800e90e:	786c      	ldrb	r4, [r5, #1]
 800e910:	2310      	movs	r3, #16
 800e912:	3502      	adds	r5, #2
 800e914:	f04f 38ff 	mov.w	r8, #4294967295
 800e918:	2600      	movs	r6, #0
 800e91a:	fbb8 f8f3 	udiv	r8, r8, r3
 800e91e:	fb03 f908 	mul.w	r9, r3, r8
 800e922:	ea6f 0909 	mvn.w	r9, r9
 800e926:	4630      	mov	r0, r6
 800e928:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e92c:	f1bc 0f09 	cmp.w	ip, #9
 800e930:	d81c      	bhi.n	800e96c <_strtoul_l.constprop.0+0x94>
 800e932:	4664      	mov	r4, ip
 800e934:	42a3      	cmp	r3, r4
 800e936:	dd2a      	ble.n	800e98e <_strtoul_l.constprop.0+0xb6>
 800e938:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e93c:	d007      	beq.n	800e94e <_strtoul_l.constprop.0+0x76>
 800e93e:	4580      	cmp	r8, r0
 800e940:	d322      	bcc.n	800e988 <_strtoul_l.constprop.0+0xb0>
 800e942:	d101      	bne.n	800e948 <_strtoul_l.constprop.0+0x70>
 800e944:	45a1      	cmp	r9, r4
 800e946:	db1f      	blt.n	800e988 <_strtoul_l.constprop.0+0xb0>
 800e948:	fb00 4003 	mla	r0, r0, r3, r4
 800e94c:	2601      	movs	r6, #1
 800e94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e952:	e7e9      	b.n	800e928 <_strtoul_l.constprop.0+0x50>
 800e954:	2c2b      	cmp	r4, #43	@ 0x2b
 800e956:	bf04      	itt	eq
 800e958:	782c      	ldrbeq	r4, [r5, #0]
 800e95a:	1c85      	addeq	r5, r0, #2
 800e95c:	e7cd      	b.n	800e8fa <_strtoul_l.constprop.0+0x22>
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1d8      	bne.n	800e914 <_strtoul_l.constprop.0+0x3c>
 800e962:	2c30      	cmp	r4, #48	@ 0x30
 800e964:	bf0c      	ite	eq
 800e966:	2308      	moveq	r3, #8
 800e968:	230a      	movne	r3, #10
 800e96a:	e7d3      	b.n	800e914 <_strtoul_l.constprop.0+0x3c>
 800e96c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e970:	f1bc 0f19 	cmp.w	ip, #25
 800e974:	d801      	bhi.n	800e97a <_strtoul_l.constprop.0+0xa2>
 800e976:	3c37      	subs	r4, #55	@ 0x37
 800e978:	e7dc      	b.n	800e934 <_strtoul_l.constprop.0+0x5c>
 800e97a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e97e:	f1bc 0f19 	cmp.w	ip, #25
 800e982:	d804      	bhi.n	800e98e <_strtoul_l.constprop.0+0xb6>
 800e984:	3c57      	subs	r4, #87	@ 0x57
 800e986:	e7d5      	b.n	800e934 <_strtoul_l.constprop.0+0x5c>
 800e988:	f04f 36ff 	mov.w	r6, #4294967295
 800e98c:	e7df      	b.n	800e94e <_strtoul_l.constprop.0+0x76>
 800e98e:	1c73      	adds	r3, r6, #1
 800e990:	d106      	bne.n	800e9a0 <_strtoul_l.constprop.0+0xc8>
 800e992:	2322      	movs	r3, #34	@ 0x22
 800e994:	f8ce 3000 	str.w	r3, [lr]
 800e998:	4630      	mov	r0, r6
 800e99a:	b932      	cbnz	r2, 800e9aa <_strtoul_l.constprop.0+0xd2>
 800e99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9a0:	b107      	cbz	r7, 800e9a4 <_strtoul_l.constprop.0+0xcc>
 800e9a2:	4240      	negs	r0, r0
 800e9a4:	2a00      	cmp	r2, #0
 800e9a6:	d0f9      	beq.n	800e99c <_strtoul_l.constprop.0+0xc4>
 800e9a8:	b106      	cbz	r6, 800e9ac <_strtoul_l.constprop.0+0xd4>
 800e9aa:	1e69      	subs	r1, r5, #1
 800e9ac:	6011      	str	r1, [r2, #0]
 800e9ae:	e7f5      	b.n	800e99c <_strtoul_l.constprop.0+0xc4>
 800e9b0:	08011d39 	.word	0x08011d39

0800e9b4 <_strtoul_r>:
 800e9b4:	f7ff bf90 	b.w	800e8d8 <_strtoul_l.constprop.0>

0800e9b8 <strtoul>:
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	460a      	mov	r2, r1
 800e9bc:	4601      	mov	r1, r0
 800e9be:	4802      	ldr	r0, [pc, #8]	@ (800e9c8 <strtoul+0x10>)
 800e9c0:	6800      	ldr	r0, [r0, #0]
 800e9c2:	f7ff bf89 	b.w	800e8d8 <_strtoul_l.constprop.0>
 800e9c6:	bf00      	nop
 800e9c8:	200001a4 	.word	0x200001a4

0800e9cc <__ascii_wctomb>:
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	b141      	cbz	r1, 800e9e4 <__ascii_wctomb+0x18>
 800e9d2:	2aff      	cmp	r2, #255	@ 0xff
 800e9d4:	d904      	bls.n	800e9e0 <__ascii_wctomb+0x14>
 800e9d6:	228a      	movs	r2, #138	@ 0x8a
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	4770      	bx	lr
 800e9e0:	700a      	strb	r2, [r1, #0]
 800e9e2:	2001      	movs	r0, #1
 800e9e4:	4770      	bx	lr

0800e9e6 <__ssputs_r>:
 800e9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ea:	688e      	ldr	r6, [r1, #8]
 800e9ec:	461f      	mov	r7, r3
 800e9ee:	42be      	cmp	r6, r7
 800e9f0:	680b      	ldr	r3, [r1, #0]
 800e9f2:	4682      	mov	sl, r0
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	4690      	mov	r8, r2
 800e9f8:	d82d      	bhi.n	800ea56 <__ssputs_r+0x70>
 800e9fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea02:	d026      	beq.n	800ea52 <__ssputs_r+0x6c>
 800ea04:	6965      	ldr	r5, [r4, #20]
 800ea06:	6909      	ldr	r1, [r1, #16]
 800ea08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea0c:	eba3 0901 	sub.w	r9, r3, r1
 800ea10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea14:	1c7b      	adds	r3, r7, #1
 800ea16:	444b      	add	r3, r9
 800ea18:	106d      	asrs	r5, r5, #1
 800ea1a:	429d      	cmp	r5, r3
 800ea1c:	bf38      	it	cc
 800ea1e:	461d      	movcc	r5, r3
 800ea20:	0553      	lsls	r3, r2, #21
 800ea22:	d527      	bpl.n	800ea74 <__ssputs_r+0x8e>
 800ea24:	4629      	mov	r1, r5
 800ea26:	f7fb f987 	bl	8009d38 <_malloc_r>
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	b360      	cbz	r0, 800ea88 <__ssputs_r+0xa2>
 800ea2e:	6921      	ldr	r1, [r4, #16]
 800ea30:	464a      	mov	r2, r9
 800ea32:	f7fe f851 	bl	800cad8 <memcpy>
 800ea36:	89a3      	ldrh	r3, [r4, #12]
 800ea38:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea40:	81a3      	strh	r3, [r4, #12]
 800ea42:	6126      	str	r6, [r4, #16]
 800ea44:	6165      	str	r5, [r4, #20]
 800ea46:	444e      	add	r6, r9
 800ea48:	eba5 0509 	sub.w	r5, r5, r9
 800ea4c:	6026      	str	r6, [r4, #0]
 800ea4e:	60a5      	str	r5, [r4, #8]
 800ea50:	463e      	mov	r6, r7
 800ea52:	42be      	cmp	r6, r7
 800ea54:	d900      	bls.n	800ea58 <__ssputs_r+0x72>
 800ea56:	463e      	mov	r6, r7
 800ea58:	6820      	ldr	r0, [r4, #0]
 800ea5a:	4632      	mov	r2, r6
 800ea5c:	4641      	mov	r1, r8
 800ea5e:	f000 ff2a 	bl	800f8b6 <memmove>
 800ea62:	68a3      	ldr	r3, [r4, #8]
 800ea64:	1b9b      	subs	r3, r3, r6
 800ea66:	60a3      	str	r3, [r4, #8]
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	4433      	add	r3, r6
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea74:	462a      	mov	r2, r5
 800ea76:	f000 ff9d 	bl	800f9b4 <_realloc_r>
 800ea7a:	4606      	mov	r6, r0
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d1e0      	bne.n	800ea42 <__ssputs_r+0x5c>
 800ea80:	6921      	ldr	r1, [r4, #16]
 800ea82:	4650      	mov	r0, sl
 800ea84:	f7fe fe9c 	bl	800d7c0 <_free_r>
 800ea88:	230c      	movs	r3, #12
 800ea8a:	f8ca 3000 	str.w	r3, [sl]
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea94:	81a3      	strh	r3, [r4, #12]
 800ea96:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9a:	e7e9      	b.n	800ea70 <__ssputs_r+0x8a>

0800ea9c <_svfiprintf_r>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	4698      	mov	r8, r3
 800eaa2:	898b      	ldrh	r3, [r1, #12]
 800eaa4:	061b      	lsls	r3, r3, #24
 800eaa6:	b09d      	sub	sp, #116	@ 0x74
 800eaa8:	4607      	mov	r7, r0
 800eaaa:	460d      	mov	r5, r1
 800eaac:	4614      	mov	r4, r2
 800eaae:	d510      	bpl.n	800ead2 <_svfiprintf_r+0x36>
 800eab0:	690b      	ldr	r3, [r1, #16]
 800eab2:	b973      	cbnz	r3, 800ead2 <_svfiprintf_r+0x36>
 800eab4:	2140      	movs	r1, #64	@ 0x40
 800eab6:	f7fb f93f 	bl	8009d38 <_malloc_r>
 800eaba:	6028      	str	r0, [r5, #0]
 800eabc:	6128      	str	r0, [r5, #16]
 800eabe:	b930      	cbnz	r0, 800eace <_svfiprintf_r+0x32>
 800eac0:	230c      	movs	r3, #12
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295
 800eac8:	b01d      	add	sp, #116	@ 0x74
 800eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eace:	2340      	movs	r3, #64	@ 0x40
 800ead0:	616b      	str	r3, [r5, #20]
 800ead2:	2300      	movs	r3, #0
 800ead4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ead6:	2320      	movs	r3, #32
 800ead8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eae0:	2330      	movs	r3, #48	@ 0x30
 800eae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec80 <_svfiprintf_r+0x1e4>
 800eae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaea:	f04f 0901 	mov.w	r9, #1
 800eaee:	4623      	mov	r3, r4
 800eaf0:	469a      	mov	sl, r3
 800eaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaf6:	b10a      	cbz	r2, 800eafc <_svfiprintf_r+0x60>
 800eaf8:	2a25      	cmp	r2, #37	@ 0x25
 800eafa:	d1f9      	bne.n	800eaf0 <_svfiprintf_r+0x54>
 800eafc:	ebba 0b04 	subs.w	fp, sl, r4
 800eb00:	d00b      	beq.n	800eb1a <_svfiprintf_r+0x7e>
 800eb02:	465b      	mov	r3, fp
 800eb04:	4622      	mov	r2, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7ff ff6c 	bl	800e9e6 <__ssputs_r>
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f000 80a7 	beq.w	800ec62 <_svfiprintf_r+0x1c6>
 800eb14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb16:	445a      	add	r2, fp
 800eb18:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 809f 	beq.w	800ec62 <_svfiprintf_r+0x1c6>
 800eb24:	2300      	movs	r3, #0
 800eb26:	f04f 32ff 	mov.w	r2, #4294967295
 800eb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb2e:	f10a 0a01 	add.w	sl, sl, #1
 800eb32:	9304      	str	r3, [sp, #16]
 800eb34:	9307      	str	r3, [sp, #28]
 800eb36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb3c:	4654      	mov	r4, sl
 800eb3e:	2205      	movs	r2, #5
 800eb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb44:	484e      	ldr	r0, [pc, #312]	@ (800ec80 <_svfiprintf_r+0x1e4>)
 800eb46:	f7f1 fb53 	bl	80001f0 <memchr>
 800eb4a:	9a04      	ldr	r2, [sp, #16]
 800eb4c:	b9d8      	cbnz	r0, 800eb86 <_svfiprintf_r+0xea>
 800eb4e:	06d0      	lsls	r0, r2, #27
 800eb50:	bf44      	itt	mi
 800eb52:	2320      	movmi	r3, #32
 800eb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb58:	0711      	lsls	r1, r2, #28
 800eb5a:	bf44      	itt	mi
 800eb5c:	232b      	movmi	r3, #43	@ 0x2b
 800eb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb62:	f89a 3000 	ldrb.w	r3, [sl]
 800eb66:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb68:	d015      	beq.n	800eb96 <_svfiprintf_r+0xfa>
 800eb6a:	9a07      	ldr	r2, [sp, #28]
 800eb6c:	4654      	mov	r4, sl
 800eb6e:	2000      	movs	r0, #0
 800eb70:	f04f 0c0a 	mov.w	ip, #10
 800eb74:	4621      	mov	r1, r4
 800eb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb7a:	3b30      	subs	r3, #48	@ 0x30
 800eb7c:	2b09      	cmp	r3, #9
 800eb7e:	d94b      	bls.n	800ec18 <_svfiprintf_r+0x17c>
 800eb80:	b1b0      	cbz	r0, 800ebb0 <_svfiprintf_r+0x114>
 800eb82:	9207      	str	r2, [sp, #28]
 800eb84:	e014      	b.n	800ebb0 <_svfiprintf_r+0x114>
 800eb86:	eba0 0308 	sub.w	r3, r0, r8
 800eb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	46a2      	mov	sl, r4
 800eb94:	e7d2      	b.n	800eb3c <_svfiprintf_r+0xa0>
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	1d19      	adds	r1, r3, #4
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	9103      	str	r1, [sp, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	bfbb      	ittet	lt
 800eba2:	425b      	neglt	r3, r3
 800eba4:	f042 0202 	orrlt.w	r2, r2, #2
 800eba8:	9307      	strge	r3, [sp, #28]
 800ebaa:	9307      	strlt	r3, [sp, #28]
 800ebac:	bfb8      	it	lt
 800ebae:	9204      	strlt	r2, [sp, #16]
 800ebb0:	7823      	ldrb	r3, [r4, #0]
 800ebb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebb4:	d10a      	bne.n	800ebcc <_svfiprintf_r+0x130>
 800ebb6:	7863      	ldrb	r3, [r4, #1]
 800ebb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebba:	d132      	bne.n	800ec22 <_svfiprintf_r+0x186>
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	1d1a      	adds	r2, r3, #4
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	9203      	str	r2, [sp, #12]
 800ebc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebc8:	3402      	adds	r4, #2
 800ebca:	9305      	str	r3, [sp, #20]
 800ebcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec90 <_svfiprintf_r+0x1f4>
 800ebd0:	7821      	ldrb	r1, [r4, #0]
 800ebd2:	2203      	movs	r2, #3
 800ebd4:	4650      	mov	r0, sl
 800ebd6:	f7f1 fb0b 	bl	80001f0 <memchr>
 800ebda:	b138      	cbz	r0, 800ebec <_svfiprintf_r+0x150>
 800ebdc:	9b04      	ldr	r3, [sp, #16]
 800ebde:	eba0 000a 	sub.w	r0, r0, sl
 800ebe2:	2240      	movs	r2, #64	@ 0x40
 800ebe4:	4082      	lsls	r2, r0
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	3401      	adds	r4, #1
 800ebea:	9304      	str	r3, [sp, #16]
 800ebec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf0:	4824      	ldr	r0, [pc, #144]	@ (800ec84 <_svfiprintf_r+0x1e8>)
 800ebf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebf6:	2206      	movs	r2, #6
 800ebf8:	f7f1 fafa 	bl	80001f0 <memchr>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d036      	beq.n	800ec6e <_svfiprintf_r+0x1d2>
 800ec00:	4b21      	ldr	r3, [pc, #132]	@ (800ec88 <_svfiprintf_r+0x1ec>)
 800ec02:	bb1b      	cbnz	r3, 800ec4c <_svfiprintf_r+0x1b0>
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	3307      	adds	r3, #7
 800ec08:	f023 0307 	bic.w	r3, r3, #7
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	9303      	str	r3, [sp, #12]
 800ec10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec12:	4433      	add	r3, r6
 800ec14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec16:	e76a      	b.n	800eaee <_svfiprintf_r+0x52>
 800ec18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	2001      	movs	r0, #1
 800ec20:	e7a8      	b.n	800eb74 <_svfiprintf_r+0xd8>
 800ec22:	2300      	movs	r3, #0
 800ec24:	3401      	adds	r4, #1
 800ec26:	9305      	str	r3, [sp, #20]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	f04f 0c0a 	mov.w	ip, #10
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec34:	3a30      	subs	r2, #48	@ 0x30
 800ec36:	2a09      	cmp	r2, #9
 800ec38:	d903      	bls.n	800ec42 <_svfiprintf_r+0x1a6>
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0c6      	beq.n	800ebcc <_svfiprintf_r+0x130>
 800ec3e:	9105      	str	r1, [sp, #20]
 800ec40:	e7c4      	b.n	800ebcc <_svfiprintf_r+0x130>
 800ec42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec46:	4604      	mov	r4, r0
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e7f0      	b.n	800ec2e <_svfiprintf_r+0x192>
 800ec4c:	ab03      	add	r3, sp, #12
 800ec4e:	9300      	str	r3, [sp, #0]
 800ec50:	462a      	mov	r2, r5
 800ec52:	4b0e      	ldr	r3, [pc, #56]	@ (800ec8c <_svfiprintf_r+0x1f0>)
 800ec54:	a904      	add	r1, sp, #16
 800ec56:	4638      	mov	r0, r7
 800ec58:	f7fc f836 	bl	800acc8 <_printf_float>
 800ec5c:	1c42      	adds	r2, r0, #1
 800ec5e:	4606      	mov	r6, r0
 800ec60:	d1d6      	bne.n	800ec10 <_svfiprintf_r+0x174>
 800ec62:	89ab      	ldrh	r3, [r5, #12]
 800ec64:	065b      	lsls	r3, r3, #25
 800ec66:	f53f af2d 	bmi.w	800eac4 <_svfiprintf_r+0x28>
 800ec6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec6c:	e72c      	b.n	800eac8 <_svfiprintf_r+0x2c>
 800ec6e:	ab03      	add	r3, sp, #12
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	462a      	mov	r2, r5
 800ec74:	4b05      	ldr	r3, [pc, #20]	@ (800ec8c <_svfiprintf_r+0x1f0>)
 800ec76:	a904      	add	r1, sp, #16
 800ec78:	4638      	mov	r0, r7
 800ec7a:	f7fc fabd 	bl	800b1f8 <_printf_i>
 800ec7e:	e7ed      	b.n	800ec5c <_svfiprintf_r+0x1c0>
 800ec80:	08012168 	.word	0x08012168
 800ec84:	08012172 	.word	0x08012172
 800ec88:	0800acc9 	.word	0x0800acc9
 800ec8c:	0800e9e7 	.word	0x0800e9e7
 800ec90:	0801216e 	.word	0x0801216e

0800ec94 <_sungetc_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	1c4b      	adds	r3, r1, #1
 800ec98:	4614      	mov	r4, r2
 800ec9a:	d103      	bne.n	800eca4 <_sungetc_r+0x10>
 800ec9c:	f04f 35ff 	mov.w	r5, #4294967295
 800eca0:	4628      	mov	r0, r5
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	8993      	ldrh	r3, [r2, #12]
 800eca6:	f023 0320 	bic.w	r3, r3, #32
 800ecaa:	8193      	strh	r3, [r2, #12]
 800ecac:	6853      	ldr	r3, [r2, #4]
 800ecae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ecb0:	b2cd      	uxtb	r5, r1
 800ecb2:	b18a      	cbz	r2, 800ecd8 <_sungetc_r+0x44>
 800ecb4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	dd08      	ble.n	800eccc <_sungetc_r+0x38>
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	1e5a      	subs	r2, r3, #1
 800ecbe:	6022      	str	r2, [r4, #0]
 800ecc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ecc4:	6863      	ldr	r3, [r4, #4]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	6063      	str	r3, [r4, #4]
 800ecca:	e7e9      	b.n	800eca0 <_sungetc_r+0xc>
 800eccc:	4621      	mov	r1, r4
 800ecce:	f000 fdb8 	bl	800f842 <__submore>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d0f1      	beq.n	800ecba <_sungetc_r+0x26>
 800ecd6:	e7e1      	b.n	800ec9c <_sungetc_r+0x8>
 800ecd8:	6921      	ldr	r1, [r4, #16]
 800ecda:	6822      	ldr	r2, [r4, #0]
 800ecdc:	b141      	cbz	r1, 800ecf0 <_sungetc_r+0x5c>
 800ecde:	4291      	cmp	r1, r2
 800ece0:	d206      	bcs.n	800ecf0 <_sungetc_r+0x5c>
 800ece2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ece6:	42a9      	cmp	r1, r5
 800ece8:	d102      	bne.n	800ecf0 <_sungetc_r+0x5c>
 800ecea:	3a01      	subs	r2, #1
 800ecec:	6022      	str	r2, [r4, #0]
 800ecee:	e7ea      	b.n	800ecc6 <_sungetc_r+0x32>
 800ecf0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ecf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ecfe:	4623      	mov	r3, r4
 800ed00:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ed04:	6023      	str	r3, [r4, #0]
 800ed06:	2301      	movs	r3, #1
 800ed08:	e7de      	b.n	800ecc8 <_sungetc_r+0x34>

0800ed0a <__ssrefill_r>:
 800ed0a:	b510      	push	{r4, lr}
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed10:	b169      	cbz	r1, 800ed2e <__ssrefill_r+0x24>
 800ed12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed16:	4299      	cmp	r1, r3
 800ed18:	d001      	beq.n	800ed1e <__ssrefill_r+0x14>
 800ed1a:	f7fe fd51 	bl	800d7c0 <_free_r>
 800ed1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed20:	6063      	str	r3, [r4, #4]
 800ed22:	2000      	movs	r0, #0
 800ed24:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed26:	b113      	cbz	r3, 800ed2e <__ssrefill_r+0x24>
 800ed28:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	6923      	ldr	r3, [r4, #16]
 800ed30:	6023      	str	r3, [r4, #0]
 800ed32:	2300      	movs	r3, #0
 800ed34:	6063      	str	r3, [r4, #4]
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f043 0320 	orr.w	r3, r3, #32
 800ed3c:	81a3      	strh	r3, [r4, #12]
 800ed3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed42:	e7f3      	b.n	800ed2c <__ssrefill_r+0x22>

0800ed44 <__ssvfiscanf_r>:
 800ed44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed48:	460c      	mov	r4, r1
 800ed4a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ed4e:	2100      	movs	r1, #0
 800ed50:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ed54:	49a5      	ldr	r1, [pc, #660]	@ (800efec <__ssvfiscanf_r+0x2a8>)
 800ed56:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ed58:	f10d 0804 	add.w	r8, sp, #4
 800ed5c:	49a4      	ldr	r1, [pc, #656]	@ (800eff0 <__ssvfiscanf_r+0x2ac>)
 800ed5e:	4fa5      	ldr	r7, [pc, #660]	@ (800eff4 <__ssvfiscanf_r+0x2b0>)
 800ed60:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ed64:	4606      	mov	r6, r0
 800ed66:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	7813      	ldrb	r3, [r2, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 8158 	beq.w	800f022 <__ssvfiscanf_r+0x2de>
 800ed72:	5cf9      	ldrb	r1, [r7, r3]
 800ed74:	f011 0108 	ands.w	r1, r1, #8
 800ed78:	f102 0501 	add.w	r5, r2, #1
 800ed7c:	d019      	beq.n	800edb2 <__ssvfiscanf_r+0x6e>
 800ed7e:	6863      	ldr	r3, [r4, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	dd0f      	ble.n	800eda4 <__ssvfiscanf_r+0x60>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	781a      	ldrb	r2, [r3, #0]
 800ed88:	5cba      	ldrb	r2, [r7, r2]
 800ed8a:	0712      	lsls	r2, r2, #28
 800ed8c:	d401      	bmi.n	800ed92 <__ssvfiscanf_r+0x4e>
 800ed8e:	462a      	mov	r2, r5
 800ed90:	e7eb      	b.n	800ed6a <__ssvfiscanf_r+0x26>
 800ed92:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ed94:	3201      	adds	r2, #1
 800ed96:	9245      	str	r2, [sp, #276]	@ 0x114
 800ed98:	6862      	ldr	r2, [r4, #4]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	3a01      	subs	r2, #1
 800ed9e:	6062      	str	r2, [r4, #4]
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	e7ec      	b.n	800ed7e <__ssvfiscanf_r+0x3a>
 800eda4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eda6:	4621      	mov	r1, r4
 800eda8:	4630      	mov	r0, r6
 800edaa:	4798      	blx	r3
 800edac:	2800      	cmp	r0, #0
 800edae:	d0e9      	beq.n	800ed84 <__ssvfiscanf_r+0x40>
 800edb0:	e7ed      	b.n	800ed8e <__ssvfiscanf_r+0x4a>
 800edb2:	2b25      	cmp	r3, #37	@ 0x25
 800edb4:	d012      	beq.n	800eddc <__ssvfiscanf_r+0x98>
 800edb6:	4699      	mov	r9, r3
 800edb8:	6863      	ldr	r3, [r4, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f340 8093 	ble.w	800eee6 <__ssvfiscanf_r+0x1a2>
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	7813      	ldrb	r3, [r2, #0]
 800edc4:	454b      	cmp	r3, r9
 800edc6:	f040 812c 	bne.w	800f022 <__ssvfiscanf_r+0x2de>
 800edca:	6863      	ldr	r3, [r4, #4]
 800edcc:	3b01      	subs	r3, #1
 800edce:	6063      	str	r3, [r4, #4]
 800edd0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800edd2:	3201      	adds	r2, #1
 800edd4:	3301      	adds	r3, #1
 800edd6:	6022      	str	r2, [r4, #0]
 800edd8:	9345      	str	r3, [sp, #276]	@ 0x114
 800edda:	e7d8      	b.n	800ed8e <__ssvfiscanf_r+0x4a>
 800eddc:	9141      	str	r1, [sp, #260]	@ 0x104
 800edde:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ede0:	7853      	ldrb	r3, [r2, #1]
 800ede2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede4:	bf02      	ittt	eq
 800ede6:	2310      	moveq	r3, #16
 800ede8:	1c95      	addeq	r5, r2, #2
 800edea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800edec:	220a      	movs	r2, #10
 800edee:	46a9      	mov	r9, r5
 800edf0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800edf4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800edf8:	2b09      	cmp	r3, #9
 800edfa:	d91e      	bls.n	800ee3a <__ssvfiscanf_r+0xf6>
 800edfc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800eff8 <__ssvfiscanf_r+0x2b4>
 800ee00:	2203      	movs	r2, #3
 800ee02:	4650      	mov	r0, sl
 800ee04:	f7f1 f9f4 	bl	80001f0 <memchr>
 800ee08:	b138      	cbz	r0, 800ee1a <__ssvfiscanf_r+0xd6>
 800ee0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ee0c:	eba0 000a 	sub.w	r0, r0, sl
 800ee10:	2301      	movs	r3, #1
 800ee12:	4083      	lsls	r3, r0
 800ee14:	4313      	orrs	r3, r2
 800ee16:	9341      	str	r3, [sp, #260]	@ 0x104
 800ee18:	464d      	mov	r5, r9
 800ee1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee1e:	2b78      	cmp	r3, #120	@ 0x78
 800ee20:	d806      	bhi.n	800ee30 <__ssvfiscanf_r+0xec>
 800ee22:	2b57      	cmp	r3, #87	@ 0x57
 800ee24:	d810      	bhi.n	800ee48 <__ssvfiscanf_r+0x104>
 800ee26:	2b25      	cmp	r3, #37	@ 0x25
 800ee28:	d0c5      	beq.n	800edb6 <__ssvfiscanf_r+0x72>
 800ee2a:	d857      	bhi.n	800eedc <__ssvfiscanf_r+0x198>
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d065      	beq.n	800eefc <__ssvfiscanf_r+0x1b8>
 800ee30:	2303      	movs	r3, #3
 800ee32:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ee34:	230a      	movs	r3, #10
 800ee36:	9342      	str	r3, [sp, #264]	@ 0x108
 800ee38:	e078      	b.n	800ef2c <__ssvfiscanf_r+0x1e8>
 800ee3a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ee3c:	fb02 1103 	mla	r1, r2, r3, r1
 800ee40:	3930      	subs	r1, #48	@ 0x30
 800ee42:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ee44:	464d      	mov	r5, r9
 800ee46:	e7d2      	b.n	800edee <__ssvfiscanf_r+0xaa>
 800ee48:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ee4c:	2a20      	cmp	r2, #32
 800ee4e:	d8ef      	bhi.n	800ee30 <__ssvfiscanf_r+0xec>
 800ee50:	a101      	add	r1, pc, #4	@ (adr r1, 800ee58 <__ssvfiscanf_r+0x114>)
 800ee52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee56:	bf00      	nop
 800ee58:	0800ef0b 	.word	0x0800ef0b
 800ee5c:	0800ee31 	.word	0x0800ee31
 800ee60:	0800ee31 	.word	0x0800ee31
 800ee64:	0800ef65 	.word	0x0800ef65
 800ee68:	0800ee31 	.word	0x0800ee31
 800ee6c:	0800ee31 	.word	0x0800ee31
 800ee70:	0800ee31 	.word	0x0800ee31
 800ee74:	0800ee31 	.word	0x0800ee31
 800ee78:	0800ee31 	.word	0x0800ee31
 800ee7c:	0800ee31 	.word	0x0800ee31
 800ee80:	0800ee31 	.word	0x0800ee31
 800ee84:	0800ef7b 	.word	0x0800ef7b
 800ee88:	0800ef61 	.word	0x0800ef61
 800ee8c:	0800eee3 	.word	0x0800eee3
 800ee90:	0800eee3 	.word	0x0800eee3
 800ee94:	0800eee3 	.word	0x0800eee3
 800ee98:	0800ee31 	.word	0x0800ee31
 800ee9c:	0800ef1d 	.word	0x0800ef1d
 800eea0:	0800ee31 	.word	0x0800ee31
 800eea4:	0800ee31 	.word	0x0800ee31
 800eea8:	0800ee31 	.word	0x0800ee31
 800eeac:	0800ee31 	.word	0x0800ee31
 800eeb0:	0800ef8b 	.word	0x0800ef8b
 800eeb4:	0800ef25 	.word	0x0800ef25
 800eeb8:	0800ef03 	.word	0x0800ef03
 800eebc:	0800ee31 	.word	0x0800ee31
 800eec0:	0800ee31 	.word	0x0800ee31
 800eec4:	0800ef87 	.word	0x0800ef87
 800eec8:	0800ee31 	.word	0x0800ee31
 800eecc:	0800ef61 	.word	0x0800ef61
 800eed0:	0800ee31 	.word	0x0800ee31
 800eed4:	0800ee31 	.word	0x0800ee31
 800eed8:	0800ef0b 	.word	0x0800ef0b
 800eedc:	3b45      	subs	r3, #69	@ 0x45
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d8a6      	bhi.n	800ee30 <__ssvfiscanf_r+0xec>
 800eee2:	2305      	movs	r3, #5
 800eee4:	e021      	b.n	800ef2a <__ssvfiscanf_r+0x1e6>
 800eee6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eee8:	4621      	mov	r1, r4
 800eeea:	4630      	mov	r0, r6
 800eeec:	4798      	blx	r3
 800eeee:	2800      	cmp	r0, #0
 800eef0:	f43f af66 	beq.w	800edc0 <__ssvfiscanf_r+0x7c>
 800eef4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800eef6:	2800      	cmp	r0, #0
 800eef8:	f040 808b 	bne.w	800f012 <__ssvfiscanf_r+0x2ce>
 800eefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ef00:	e08b      	b.n	800f01a <__ssvfiscanf_r+0x2d6>
 800ef02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef04:	f042 0220 	orr.w	r2, r2, #32
 800ef08:	9241      	str	r2, [sp, #260]	@ 0x104
 800ef0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ef10:	9241      	str	r2, [sp, #260]	@ 0x104
 800ef12:	2210      	movs	r2, #16
 800ef14:	2b6e      	cmp	r3, #110	@ 0x6e
 800ef16:	9242      	str	r2, [sp, #264]	@ 0x108
 800ef18:	d902      	bls.n	800ef20 <__ssvfiscanf_r+0x1dc>
 800ef1a:	e005      	b.n	800ef28 <__ssvfiscanf_r+0x1e4>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ef20:	2303      	movs	r3, #3
 800ef22:	e002      	b.n	800ef2a <__ssvfiscanf_r+0x1e6>
 800ef24:	2308      	movs	r3, #8
 800ef26:	9342      	str	r3, [sp, #264]	@ 0x108
 800ef28:	2304      	movs	r3, #4
 800ef2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	dd39      	ble.n	800efa6 <__ssvfiscanf_r+0x262>
 800ef32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef34:	0659      	lsls	r1, r3, #25
 800ef36:	d404      	bmi.n	800ef42 <__ssvfiscanf_r+0x1fe>
 800ef38:	6823      	ldr	r3, [r4, #0]
 800ef3a:	781a      	ldrb	r2, [r3, #0]
 800ef3c:	5cba      	ldrb	r2, [r7, r2]
 800ef3e:	0712      	lsls	r2, r2, #28
 800ef40:	d438      	bmi.n	800efb4 <__ssvfiscanf_r+0x270>
 800ef42:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	dc47      	bgt.n	800efd8 <__ssvfiscanf_r+0x294>
 800ef48:	466b      	mov	r3, sp
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	a941      	add	r1, sp, #260	@ 0x104
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f000 f9ae 	bl	800f2b0 <_scanf_chars>
 800ef54:	2801      	cmp	r0, #1
 800ef56:	d064      	beq.n	800f022 <__ssvfiscanf_r+0x2de>
 800ef58:	2802      	cmp	r0, #2
 800ef5a:	f47f af18 	bne.w	800ed8e <__ssvfiscanf_r+0x4a>
 800ef5e:	e7c9      	b.n	800eef4 <__ssvfiscanf_r+0x1b0>
 800ef60:	220a      	movs	r2, #10
 800ef62:	e7d7      	b.n	800ef14 <__ssvfiscanf_r+0x1d0>
 800ef64:	4629      	mov	r1, r5
 800ef66:	4640      	mov	r0, r8
 800ef68:	f000 fc32 	bl	800f7d0 <__sccl>
 800ef6c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef72:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef74:	4605      	mov	r5, r0
 800ef76:	2301      	movs	r3, #1
 800ef78:	e7d7      	b.n	800ef2a <__ssvfiscanf_r+0x1e6>
 800ef7a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ef7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef80:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef82:	2300      	movs	r3, #0
 800ef84:	e7d1      	b.n	800ef2a <__ssvfiscanf_r+0x1e6>
 800ef86:	2302      	movs	r3, #2
 800ef88:	e7cf      	b.n	800ef2a <__ssvfiscanf_r+0x1e6>
 800ef8a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ef8c:	06c3      	lsls	r3, r0, #27
 800ef8e:	f53f aefe 	bmi.w	800ed8e <__ssvfiscanf_r+0x4a>
 800ef92:	9b00      	ldr	r3, [sp, #0]
 800ef94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ef96:	1d19      	adds	r1, r3, #4
 800ef98:	9100      	str	r1, [sp, #0]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	07c0      	lsls	r0, r0, #31
 800ef9e:	bf4c      	ite	mi
 800efa0:	801a      	strhmi	r2, [r3, #0]
 800efa2:	601a      	strpl	r2, [r3, #0]
 800efa4:	e6f3      	b.n	800ed8e <__ssvfiscanf_r+0x4a>
 800efa6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800efa8:	4621      	mov	r1, r4
 800efaa:	4630      	mov	r0, r6
 800efac:	4798      	blx	r3
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0bf      	beq.n	800ef32 <__ssvfiscanf_r+0x1ee>
 800efb2:	e79f      	b.n	800eef4 <__ssvfiscanf_r+0x1b0>
 800efb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800efb6:	3201      	adds	r2, #1
 800efb8:	9245      	str	r2, [sp, #276]	@ 0x114
 800efba:	6862      	ldr	r2, [r4, #4]
 800efbc:	3a01      	subs	r2, #1
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	6062      	str	r2, [r4, #4]
 800efc2:	dd02      	ble.n	800efca <__ssvfiscanf_r+0x286>
 800efc4:	3301      	adds	r3, #1
 800efc6:	6023      	str	r3, [r4, #0]
 800efc8:	e7b6      	b.n	800ef38 <__ssvfiscanf_r+0x1f4>
 800efca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800efcc:	4621      	mov	r1, r4
 800efce:	4630      	mov	r0, r6
 800efd0:	4798      	blx	r3
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d0b0      	beq.n	800ef38 <__ssvfiscanf_r+0x1f4>
 800efd6:	e78d      	b.n	800eef4 <__ssvfiscanf_r+0x1b0>
 800efd8:	2b04      	cmp	r3, #4
 800efda:	dc0f      	bgt.n	800effc <__ssvfiscanf_r+0x2b8>
 800efdc:	466b      	mov	r3, sp
 800efde:	4622      	mov	r2, r4
 800efe0:	a941      	add	r1, sp, #260	@ 0x104
 800efe2:	4630      	mov	r0, r6
 800efe4:	f000 f9be 	bl	800f364 <_scanf_i>
 800efe8:	e7b4      	b.n	800ef54 <__ssvfiscanf_r+0x210>
 800efea:	bf00      	nop
 800efec:	0800ec95 	.word	0x0800ec95
 800eff0:	0800ed0b 	.word	0x0800ed0b
 800eff4:	08011d39 	.word	0x08011d39
 800eff8:	0801216e 	.word	0x0801216e
 800effc:	4b0a      	ldr	r3, [pc, #40]	@ (800f028 <__ssvfiscanf_r+0x2e4>)
 800effe:	2b00      	cmp	r3, #0
 800f000:	f43f aec5 	beq.w	800ed8e <__ssvfiscanf_r+0x4a>
 800f004:	466b      	mov	r3, sp
 800f006:	4622      	mov	r2, r4
 800f008:	a941      	add	r1, sp, #260	@ 0x104
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7fc fa14 	bl	800b438 <_scanf_float>
 800f010:	e7a0      	b.n	800ef54 <__ssvfiscanf_r+0x210>
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	065b      	lsls	r3, r3, #25
 800f016:	f53f af71 	bmi.w	800eefc <__ssvfiscanf_r+0x1b8>
 800f01a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f022:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f024:	e7f9      	b.n	800f01a <__ssvfiscanf_r+0x2d6>
 800f026:	bf00      	nop
 800f028:	0800b439 	.word	0x0800b439

0800f02c <__sfputc_r>:
 800f02c:	6893      	ldr	r3, [r2, #8]
 800f02e:	3b01      	subs	r3, #1
 800f030:	2b00      	cmp	r3, #0
 800f032:	b410      	push	{r4}
 800f034:	6093      	str	r3, [r2, #8]
 800f036:	da08      	bge.n	800f04a <__sfputc_r+0x1e>
 800f038:	6994      	ldr	r4, [r2, #24]
 800f03a:	42a3      	cmp	r3, r4
 800f03c:	db01      	blt.n	800f042 <__sfputc_r+0x16>
 800f03e:	290a      	cmp	r1, #10
 800f040:	d103      	bne.n	800f04a <__sfputc_r+0x1e>
 800f042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f046:	f7fc be08 	b.w	800bc5a <__swbuf_r>
 800f04a:	6813      	ldr	r3, [r2, #0]
 800f04c:	1c58      	adds	r0, r3, #1
 800f04e:	6010      	str	r0, [r2, #0]
 800f050:	7019      	strb	r1, [r3, #0]
 800f052:	4608      	mov	r0, r1
 800f054:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <__sfputs_r>:
 800f05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05c:	4606      	mov	r6, r0
 800f05e:	460f      	mov	r7, r1
 800f060:	4614      	mov	r4, r2
 800f062:	18d5      	adds	r5, r2, r3
 800f064:	42ac      	cmp	r4, r5
 800f066:	d101      	bne.n	800f06c <__sfputs_r+0x12>
 800f068:	2000      	movs	r0, #0
 800f06a:	e007      	b.n	800f07c <__sfputs_r+0x22>
 800f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f070:	463a      	mov	r2, r7
 800f072:	4630      	mov	r0, r6
 800f074:	f7ff ffda 	bl	800f02c <__sfputc_r>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	d1f3      	bne.n	800f064 <__sfputs_r+0xa>
 800f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f080 <_vfiprintf_r>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	460d      	mov	r5, r1
 800f086:	b09d      	sub	sp, #116	@ 0x74
 800f088:	4614      	mov	r4, r2
 800f08a:	4698      	mov	r8, r3
 800f08c:	4606      	mov	r6, r0
 800f08e:	b118      	cbz	r0, 800f098 <_vfiprintf_r+0x18>
 800f090:	6a03      	ldr	r3, [r0, #32]
 800f092:	b90b      	cbnz	r3, 800f098 <_vfiprintf_r+0x18>
 800f094:	f7fc fc70 	bl	800b978 <__sinit>
 800f098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f09a:	07d9      	lsls	r1, r3, #31
 800f09c:	d405      	bmi.n	800f0aa <_vfiprintf_r+0x2a>
 800f09e:	89ab      	ldrh	r3, [r5, #12]
 800f0a0:	059a      	lsls	r2, r3, #22
 800f0a2:	d402      	bmi.n	800f0aa <_vfiprintf_r+0x2a>
 800f0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0a6:	f7f5 ff26 	bl	8004ef6 <__retarget_lock_acquire_recursive>
 800f0aa:	89ab      	ldrh	r3, [r5, #12]
 800f0ac:	071b      	lsls	r3, r3, #28
 800f0ae:	d501      	bpl.n	800f0b4 <_vfiprintf_r+0x34>
 800f0b0:	692b      	ldr	r3, [r5, #16]
 800f0b2:	b99b      	cbnz	r3, 800f0dc <_vfiprintf_r+0x5c>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	f7fc fe0e 	bl	800bcd8 <__swsetup_r>
 800f0bc:	b170      	cbz	r0, 800f0dc <_vfiprintf_r+0x5c>
 800f0be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0c0:	07dc      	lsls	r4, r3, #31
 800f0c2:	d504      	bpl.n	800f0ce <_vfiprintf_r+0x4e>
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	b01d      	add	sp, #116	@ 0x74
 800f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ce:	89ab      	ldrh	r3, [r5, #12]
 800f0d0:	0598      	lsls	r0, r3, #22
 800f0d2:	d4f7      	bmi.n	800f0c4 <_vfiprintf_r+0x44>
 800f0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0d6:	f7f5 ff1a 	bl	8004f0e <__retarget_lock_release_recursive>
 800f0da:	e7f3      	b.n	800f0c4 <_vfiprintf_r+0x44>
 800f0dc:	2300      	movs	r3, #0
 800f0de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0e0:	2320      	movs	r3, #32
 800f0e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ea:	2330      	movs	r3, #48	@ 0x30
 800f0ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f29c <_vfiprintf_r+0x21c>
 800f0f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0f4:	f04f 0901 	mov.w	r9, #1
 800f0f8:	4623      	mov	r3, r4
 800f0fa:	469a      	mov	sl, r3
 800f0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f100:	b10a      	cbz	r2, 800f106 <_vfiprintf_r+0x86>
 800f102:	2a25      	cmp	r2, #37	@ 0x25
 800f104:	d1f9      	bne.n	800f0fa <_vfiprintf_r+0x7a>
 800f106:	ebba 0b04 	subs.w	fp, sl, r4
 800f10a:	d00b      	beq.n	800f124 <_vfiprintf_r+0xa4>
 800f10c:	465b      	mov	r3, fp
 800f10e:	4622      	mov	r2, r4
 800f110:	4629      	mov	r1, r5
 800f112:	4630      	mov	r0, r6
 800f114:	f7ff ffa1 	bl	800f05a <__sfputs_r>
 800f118:	3001      	adds	r0, #1
 800f11a:	f000 80a7 	beq.w	800f26c <_vfiprintf_r+0x1ec>
 800f11e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f120:	445a      	add	r2, fp
 800f122:	9209      	str	r2, [sp, #36]	@ 0x24
 800f124:	f89a 3000 	ldrb.w	r3, [sl]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 809f 	beq.w	800f26c <_vfiprintf_r+0x1ec>
 800f12e:	2300      	movs	r3, #0
 800f130:	f04f 32ff 	mov.w	r2, #4294967295
 800f134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f138:	f10a 0a01 	add.w	sl, sl, #1
 800f13c:	9304      	str	r3, [sp, #16]
 800f13e:	9307      	str	r3, [sp, #28]
 800f140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f144:	931a      	str	r3, [sp, #104]	@ 0x68
 800f146:	4654      	mov	r4, sl
 800f148:	2205      	movs	r2, #5
 800f14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14e:	4853      	ldr	r0, [pc, #332]	@ (800f29c <_vfiprintf_r+0x21c>)
 800f150:	f7f1 f84e 	bl	80001f0 <memchr>
 800f154:	9a04      	ldr	r2, [sp, #16]
 800f156:	b9d8      	cbnz	r0, 800f190 <_vfiprintf_r+0x110>
 800f158:	06d1      	lsls	r1, r2, #27
 800f15a:	bf44      	itt	mi
 800f15c:	2320      	movmi	r3, #32
 800f15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f162:	0713      	lsls	r3, r2, #28
 800f164:	bf44      	itt	mi
 800f166:	232b      	movmi	r3, #43	@ 0x2b
 800f168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f16c:	f89a 3000 	ldrb.w	r3, [sl]
 800f170:	2b2a      	cmp	r3, #42	@ 0x2a
 800f172:	d015      	beq.n	800f1a0 <_vfiprintf_r+0x120>
 800f174:	9a07      	ldr	r2, [sp, #28]
 800f176:	4654      	mov	r4, sl
 800f178:	2000      	movs	r0, #0
 800f17a:	f04f 0c0a 	mov.w	ip, #10
 800f17e:	4621      	mov	r1, r4
 800f180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f184:	3b30      	subs	r3, #48	@ 0x30
 800f186:	2b09      	cmp	r3, #9
 800f188:	d94b      	bls.n	800f222 <_vfiprintf_r+0x1a2>
 800f18a:	b1b0      	cbz	r0, 800f1ba <_vfiprintf_r+0x13a>
 800f18c:	9207      	str	r2, [sp, #28]
 800f18e:	e014      	b.n	800f1ba <_vfiprintf_r+0x13a>
 800f190:	eba0 0308 	sub.w	r3, r0, r8
 800f194:	fa09 f303 	lsl.w	r3, r9, r3
 800f198:	4313      	orrs	r3, r2
 800f19a:	9304      	str	r3, [sp, #16]
 800f19c:	46a2      	mov	sl, r4
 800f19e:	e7d2      	b.n	800f146 <_vfiprintf_r+0xc6>
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	1d19      	adds	r1, r3, #4
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	9103      	str	r1, [sp, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bfbb      	ittet	lt
 800f1ac:	425b      	neglt	r3, r3
 800f1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f1b2:	9307      	strge	r3, [sp, #28]
 800f1b4:	9307      	strlt	r3, [sp, #28]
 800f1b6:	bfb8      	it	lt
 800f1b8:	9204      	strlt	r2, [sp, #16]
 800f1ba:	7823      	ldrb	r3, [r4, #0]
 800f1bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1be:	d10a      	bne.n	800f1d6 <_vfiprintf_r+0x156>
 800f1c0:	7863      	ldrb	r3, [r4, #1]
 800f1c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1c4:	d132      	bne.n	800f22c <_vfiprintf_r+0x1ac>
 800f1c6:	9b03      	ldr	r3, [sp, #12]
 800f1c8:	1d1a      	adds	r2, r3, #4
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	9203      	str	r2, [sp, #12]
 800f1ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1d2:	3402      	adds	r4, #2
 800f1d4:	9305      	str	r3, [sp, #20]
 800f1d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2ac <_vfiprintf_r+0x22c>
 800f1da:	7821      	ldrb	r1, [r4, #0]
 800f1dc:	2203      	movs	r2, #3
 800f1de:	4650      	mov	r0, sl
 800f1e0:	f7f1 f806 	bl	80001f0 <memchr>
 800f1e4:	b138      	cbz	r0, 800f1f6 <_vfiprintf_r+0x176>
 800f1e6:	9b04      	ldr	r3, [sp, #16]
 800f1e8:	eba0 000a 	sub.w	r0, r0, sl
 800f1ec:	2240      	movs	r2, #64	@ 0x40
 800f1ee:	4082      	lsls	r2, r0
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	3401      	adds	r4, #1
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1fa:	4829      	ldr	r0, [pc, #164]	@ (800f2a0 <_vfiprintf_r+0x220>)
 800f1fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f200:	2206      	movs	r2, #6
 800f202:	f7f0 fff5 	bl	80001f0 <memchr>
 800f206:	2800      	cmp	r0, #0
 800f208:	d03f      	beq.n	800f28a <_vfiprintf_r+0x20a>
 800f20a:	4b26      	ldr	r3, [pc, #152]	@ (800f2a4 <_vfiprintf_r+0x224>)
 800f20c:	bb1b      	cbnz	r3, 800f256 <_vfiprintf_r+0x1d6>
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	3307      	adds	r3, #7
 800f212:	f023 0307 	bic.w	r3, r3, #7
 800f216:	3308      	adds	r3, #8
 800f218:	9303      	str	r3, [sp, #12]
 800f21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f21c:	443b      	add	r3, r7
 800f21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f220:	e76a      	b.n	800f0f8 <_vfiprintf_r+0x78>
 800f222:	fb0c 3202 	mla	r2, ip, r2, r3
 800f226:	460c      	mov	r4, r1
 800f228:	2001      	movs	r0, #1
 800f22a:	e7a8      	b.n	800f17e <_vfiprintf_r+0xfe>
 800f22c:	2300      	movs	r3, #0
 800f22e:	3401      	adds	r4, #1
 800f230:	9305      	str	r3, [sp, #20]
 800f232:	4619      	mov	r1, r3
 800f234:	f04f 0c0a 	mov.w	ip, #10
 800f238:	4620      	mov	r0, r4
 800f23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f23e:	3a30      	subs	r2, #48	@ 0x30
 800f240:	2a09      	cmp	r2, #9
 800f242:	d903      	bls.n	800f24c <_vfiprintf_r+0x1cc>
 800f244:	2b00      	cmp	r3, #0
 800f246:	d0c6      	beq.n	800f1d6 <_vfiprintf_r+0x156>
 800f248:	9105      	str	r1, [sp, #20]
 800f24a:	e7c4      	b.n	800f1d6 <_vfiprintf_r+0x156>
 800f24c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f250:	4604      	mov	r4, r0
 800f252:	2301      	movs	r3, #1
 800f254:	e7f0      	b.n	800f238 <_vfiprintf_r+0x1b8>
 800f256:	ab03      	add	r3, sp, #12
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	462a      	mov	r2, r5
 800f25c:	4b12      	ldr	r3, [pc, #72]	@ (800f2a8 <_vfiprintf_r+0x228>)
 800f25e:	a904      	add	r1, sp, #16
 800f260:	4630      	mov	r0, r6
 800f262:	f7fb fd31 	bl	800acc8 <_printf_float>
 800f266:	4607      	mov	r7, r0
 800f268:	1c78      	adds	r0, r7, #1
 800f26a:	d1d6      	bne.n	800f21a <_vfiprintf_r+0x19a>
 800f26c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f26e:	07d9      	lsls	r1, r3, #31
 800f270:	d405      	bmi.n	800f27e <_vfiprintf_r+0x1fe>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	059a      	lsls	r2, r3, #22
 800f276:	d402      	bmi.n	800f27e <_vfiprintf_r+0x1fe>
 800f278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f27a:	f7f5 fe48 	bl	8004f0e <__retarget_lock_release_recursive>
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	065b      	lsls	r3, r3, #25
 800f282:	f53f af1f 	bmi.w	800f0c4 <_vfiprintf_r+0x44>
 800f286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f288:	e71e      	b.n	800f0c8 <_vfiprintf_r+0x48>
 800f28a:	ab03      	add	r3, sp, #12
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	462a      	mov	r2, r5
 800f290:	4b05      	ldr	r3, [pc, #20]	@ (800f2a8 <_vfiprintf_r+0x228>)
 800f292:	a904      	add	r1, sp, #16
 800f294:	4630      	mov	r0, r6
 800f296:	f7fb ffaf 	bl	800b1f8 <_printf_i>
 800f29a:	e7e4      	b.n	800f266 <_vfiprintf_r+0x1e6>
 800f29c:	08012168 	.word	0x08012168
 800f2a0:	08012172 	.word	0x08012172
 800f2a4:	0800acc9 	.word	0x0800acc9
 800f2a8:	0800f05b 	.word	0x0800f05b
 800f2ac:	0801216e 	.word	0x0801216e

0800f2b0 <_scanf_chars>:
 800f2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b4:	4615      	mov	r5, r2
 800f2b6:	688a      	ldr	r2, [r1, #8]
 800f2b8:	4680      	mov	r8, r0
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	b932      	cbnz	r2, 800f2cc <_scanf_chars+0x1c>
 800f2be:	698a      	ldr	r2, [r1, #24]
 800f2c0:	2a00      	cmp	r2, #0
 800f2c2:	bf14      	ite	ne
 800f2c4:	f04f 32ff 	movne.w	r2, #4294967295
 800f2c8:	2201      	moveq	r2, #1
 800f2ca:	608a      	str	r2, [r1, #8]
 800f2cc:	6822      	ldr	r2, [r4, #0]
 800f2ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f360 <_scanf_chars+0xb0>
 800f2d2:	06d1      	lsls	r1, r2, #27
 800f2d4:	bf5f      	itttt	pl
 800f2d6:	681a      	ldrpl	r2, [r3, #0]
 800f2d8:	1d11      	addpl	r1, r2, #4
 800f2da:	6019      	strpl	r1, [r3, #0]
 800f2dc:	6816      	ldrpl	r6, [r2, #0]
 800f2de:	2700      	movs	r7, #0
 800f2e0:	69a0      	ldr	r0, [r4, #24]
 800f2e2:	b188      	cbz	r0, 800f308 <_scanf_chars+0x58>
 800f2e4:	2801      	cmp	r0, #1
 800f2e6:	d107      	bne.n	800f2f8 <_scanf_chars+0x48>
 800f2e8:	682b      	ldr	r3, [r5, #0]
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	6963      	ldr	r3, [r4, #20]
 800f2ee:	5c9b      	ldrb	r3, [r3, r2]
 800f2f0:	b953      	cbnz	r3, 800f308 <_scanf_chars+0x58>
 800f2f2:	2f00      	cmp	r7, #0
 800f2f4:	d031      	beq.n	800f35a <_scanf_chars+0xaa>
 800f2f6:	e022      	b.n	800f33e <_scanf_chars+0x8e>
 800f2f8:	2802      	cmp	r0, #2
 800f2fa:	d120      	bne.n	800f33e <_scanf_chars+0x8e>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f304:	071b      	lsls	r3, r3, #28
 800f306:	d41a      	bmi.n	800f33e <_scanf_chars+0x8e>
 800f308:	6823      	ldr	r3, [r4, #0]
 800f30a:	06da      	lsls	r2, r3, #27
 800f30c:	bf5e      	ittt	pl
 800f30e:	682b      	ldrpl	r3, [r5, #0]
 800f310:	781b      	ldrbpl	r3, [r3, #0]
 800f312:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f316:	682a      	ldr	r2, [r5, #0]
 800f318:	686b      	ldr	r3, [r5, #4]
 800f31a:	3201      	adds	r2, #1
 800f31c:	602a      	str	r2, [r5, #0]
 800f31e:	68a2      	ldr	r2, [r4, #8]
 800f320:	3b01      	subs	r3, #1
 800f322:	3a01      	subs	r2, #1
 800f324:	606b      	str	r3, [r5, #4]
 800f326:	3701      	adds	r7, #1
 800f328:	60a2      	str	r2, [r4, #8]
 800f32a:	b142      	cbz	r2, 800f33e <_scanf_chars+0x8e>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dcd7      	bgt.n	800f2e0 <_scanf_chars+0x30>
 800f330:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f334:	4629      	mov	r1, r5
 800f336:	4640      	mov	r0, r8
 800f338:	4798      	blx	r3
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0d0      	beq.n	800f2e0 <_scanf_chars+0x30>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	f013 0310 	ands.w	r3, r3, #16
 800f344:	d105      	bne.n	800f352 <_scanf_chars+0xa2>
 800f346:	68e2      	ldr	r2, [r4, #12]
 800f348:	3201      	adds	r2, #1
 800f34a:	60e2      	str	r2, [r4, #12]
 800f34c:	69a2      	ldr	r2, [r4, #24]
 800f34e:	b102      	cbz	r2, 800f352 <_scanf_chars+0xa2>
 800f350:	7033      	strb	r3, [r6, #0]
 800f352:	6923      	ldr	r3, [r4, #16]
 800f354:	443b      	add	r3, r7
 800f356:	6123      	str	r3, [r4, #16]
 800f358:	2000      	movs	r0, #0
 800f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35e:	bf00      	nop
 800f360:	08011d39 	.word	0x08011d39

0800f364 <_scanf_i>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	4698      	mov	r8, r3
 800f36a:	4b74      	ldr	r3, [pc, #464]	@ (800f53c <_scanf_i+0x1d8>)
 800f36c:	460c      	mov	r4, r1
 800f36e:	4682      	mov	sl, r0
 800f370:	4616      	mov	r6, r2
 800f372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f376:	b087      	sub	sp, #28
 800f378:	ab03      	add	r3, sp, #12
 800f37a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f37e:	4b70      	ldr	r3, [pc, #448]	@ (800f540 <_scanf_i+0x1dc>)
 800f380:	69a1      	ldr	r1, [r4, #24]
 800f382:	4a70      	ldr	r2, [pc, #448]	@ (800f544 <_scanf_i+0x1e0>)
 800f384:	2903      	cmp	r1, #3
 800f386:	bf08      	it	eq
 800f388:	461a      	moveq	r2, r3
 800f38a:	68a3      	ldr	r3, [r4, #8]
 800f38c:	9201      	str	r2, [sp, #4]
 800f38e:	1e5a      	subs	r2, r3, #1
 800f390:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f394:	bf88      	it	hi
 800f396:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f39a:	4627      	mov	r7, r4
 800f39c:	bf82      	ittt	hi
 800f39e:	eb03 0905 	addhi.w	r9, r3, r5
 800f3a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f3a6:	60a3      	strhi	r3, [r4, #8]
 800f3a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f3ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f3b0:	bf98      	it	ls
 800f3b2:	f04f 0900 	movls.w	r9, #0
 800f3b6:	6023      	str	r3, [r4, #0]
 800f3b8:	463d      	mov	r5, r7
 800f3ba:	f04f 0b00 	mov.w	fp, #0
 800f3be:	6831      	ldr	r1, [r6, #0]
 800f3c0:	ab03      	add	r3, sp, #12
 800f3c2:	7809      	ldrb	r1, [r1, #0]
 800f3c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	f7f0 ff11 	bl	80001f0 <memchr>
 800f3ce:	b328      	cbz	r0, 800f41c <_scanf_i+0xb8>
 800f3d0:	f1bb 0f01 	cmp.w	fp, #1
 800f3d4:	d159      	bne.n	800f48a <_scanf_i+0x126>
 800f3d6:	6862      	ldr	r2, [r4, #4]
 800f3d8:	b92a      	cbnz	r2, 800f3e6 <_scanf_i+0x82>
 800f3da:	6822      	ldr	r2, [r4, #0]
 800f3dc:	2108      	movs	r1, #8
 800f3de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f3e2:	6061      	str	r1, [r4, #4]
 800f3e4:	6022      	str	r2, [r4, #0]
 800f3e6:	6822      	ldr	r2, [r4, #0]
 800f3e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f3ec:	6022      	str	r2, [r4, #0]
 800f3ee:	68a2      	ldr	r2, [r4, #8]
 800f3f0:	1e51      	subs	r1, r2, #1
 800f3f2:	60a1      	str	r1, [r4, #8]
 800f3f4:	b192      	cbz	r2, 800f41c <_scanf_i+0xb8>
 800f3f6:	6832      	ldr	r2, [r6, #0]
 800f3f8:	1c51      	adds	r1, r2, #1
 800f3fa:	6031      	str	r1, [r6, #0]
 800f3fc:	7812      	ldrb	r2, [r2, #0]
 800f3fe:	f805 2b01 	strb.w	r2, [r5], #1
 800f402:	6872      	ldr	r2, [r6, #4]
 800f404:	3a01      	subs	r2, #1
 800f406:	2a00      	cmp	r2, #0
 800f408:	6072      	str	r2, [r6, #4]
 800f40a:	dc07      	bgt.n	800f41c <_scanf_i+0xb8>
 800f40c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f410:	4631      	mov	r1, r6
 800f412:	4650      	mov	r0, sl
 800f414:	4790      	blx	r2
 800f416:	2800      	cmp	r0, #0
 800f418:	f040 8085 	bne.w	800f526 <_scanf_i+0x1c2>
 800f41c:	f10b 0b01 	add.w	fp, fp, #1
 800f420:	f1bb 0f03 	cmp.w	fp, #3
 800f424:	d1cb      	bne.n	800f3be <_scanf_i+0x5a>
 800f426:	6863      	ldr	r3, [r4, #4]
 800f428:	b90b      	cbnz	r3, 800f42e <_scanf_i+0xca>
 800f42a:	230a      	movs	r3, #10
 800f42c:	6063      	str	r3, [r4, #4]
 800f42e:	6863      	ldr	r3, [r4, #4]
 800f430:	4945      	ldr	r1, [pc, #276]	@ (800f548 <_scanf_i+0x1e4>)
 800f432:	6960      	ldr	r0, [r4, #20]
 800f434:	1ac9      	subs	r1, r1, r3
 800f436:	f000 f9cb 	bl	800f7d0 <__sccl>
 800f43a:	f04f 0b00 	mov.w	fp, #0
 800f43e:	68a3      	ldr	r3, [r4, #8]
 800f440:	6822      	ldr	r2, [r4, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d03d      	beq.n	800f4c2 <_scanf_i+0x15e>
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	6960      	ldr	r0, [r4, #20]
 800f44a:	f891 c000 	ldrb.w	ip, [r1]
 800f44e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f452:	2800      	cmp	r0, #0
 800f454:	d035      	beq.n	800f4c2 <_scanf_i+0x15e>
 800f456:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f45a:	d124      	bne.n	800f4a6 <_scanf_i+0x142>
 800f45c:	0510      	lsls	r0, r2, #20
 800f45e:	d522      	bpl.n	800f4a6 <_scanf_i+0x142>
 800f460:	f10b 0b01 	add.w	fp, fp, #1
 800f464:	f1b9 0f00 	cmp.w	r9, #0
 800f468:	d003      	beq.n	800f472 <_scanf_i+0x10e>
 800f46a:	3301      	adds	r3, #1
 800f46c:	f109 39ff 	add.w	r9, r9, #4294967295
 800f470:	60a3      	str	r3, [r4, #8]
 800f472:	6873      	ldr	r3, [r6, #4]
 800f474:	3b01      	subs	r3, #1
 800f476:	2b00      	cmp	r3, #0
 800f478:	6073      	str	r3, [r6, #4]
 800f47a:	dd1b      	ble.n	800f4b4 <_scanf_i+0x150>
 800f47c:	6833      	ldr	r3, [r6, #0]
 800f47e:	3301      	adds	r3, #1
 800f480:	6033      	str	r3, [r6, #0]
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	3b01      	subs	r3, #1
 800f486:	60a3      	str	r3, [r4, #8]
 800f488:	e7d9      	b.n	800f43e <_scanf_i+0xda>
 800f48a:	f1bb 0f02 	cmp.w	fp, #2
 800f48e:	d1ae      	bne.n	800f3ee <_scanf_i+0x8a>
 800f490:	6822      	ldr	r2, [r4, #0]
 800f492:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f496:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f49a:	d1bf      	bne.n	800f41c <_scanf_i+0xb8>
 800f49c:	2110      	movs	r1, #16
 800f49e:	6061      	str	r1, [r4, #4]
 800f4a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f4a4:	e7a2      	b.n	800f3ec <_scanf_i+0x88>
 800f4a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f4aa:	6022      	str	r2, [r4, #0]
 800f4ac:	780b      	ldrb	r3, [r1, #0]
 800f4ae:	f805 3b01 	strb.w	r3, [r5], #1
 800f4b2:	e7de      	b.n	800f472 <_scanf_i+0x10e>
 800f4b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	4798      	blx	r3
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d0df      	beq.n	800f482 <_scanf_i+0x11e>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	05d9      	lsls	r1, r3, #23
 800f4c6:	d50d      	bpl.n	800f4e4 <_scanf_i+0x180>
 800f4c8:	42bd      	cmp	r5, r7
 800f4ca:	d909      	bls.n	800f4e0 <_scanf_i+0x17c>
 800f4cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f4d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	4798      	blx	r3
 800f4da:	f105 39ff 	add.w	r9, r5, #4294967295
 800f4de:	464d      	mov	r5, r9
 800f4e0:	42bd      	cmp	r5, r7
 800f4e2:	d028      	beq.n	800f536 <_scanf_i+0x1d2>
 800f4e4:	6822      	ldr	r2, [r4, #0]
 800f4e6:	f012 0210 	ands.w	r2, r2, #16
 800f4ea:	d113      	bne.n	800f514 <_scanf_i+0x1b0>
 800f4ec:	702a      	strb	r2, [r5, #0]
 800f4ee:	6863      	ldr	r3, [r4, #4]
 800f4f0:	9e01      	ldr	r6, [sp, #4]
 800f4f2:	4639      	mov	r1, r7
 800f4f4:	4650      	mov	r0, sl
 800f4f6:	47b0      	blx	r6
 800f4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f4fc:	6821      	ldr	r1, [r4, #0]
 800f4fe:	1d1a      	adds	r2, r3, #4
 800f500:	f8c8 2000 	str.w	r2, [r8]
 800f504:	f011 0f20 	tst.w	r1, #32
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	d00f      	beq.n	800f52c <_scanf_i+0x1c8>
 800f50c:	6018      	str	r0, [r3, #0]
 800f50e:	68e3      	ldr	r3, [r4, #12]
 800f510:	3301      	adds	r3, #1
 800f512:	60e3      	str	r3, [r4, #12]
 800f514:	6923      	ldr	r3, [r4, #16]
 800f516:	1bed      	subs	r5, r5, r7
 800f518:	445d      	add	r5, fp
 800f51a:	442b      	add	r3, r5
 800f51c:	6123      	str	r3, [r4, #16]
 800f51e:	2000      	movs	r0, #0
 800f520:	b007      	add	sp, #28
 800f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f526:	f04f 0b00 	mov.w	fp, #0
 800f52a:	e7ca      	b.n	800f4c2 <_scanf_i+0x15e>
 800f52c:	07ca      	lsls	r2, r1, #31
 800f52e:	bf4c      	ite	mi
 800f530:	8018      	strhmi	r0, [r3, #0]
 800f532:	6018      	strpl	r0, [r3, #0]
 800f534:	e7eb      	b.n	800f50e <_scanf_i+0x1aa>
 800f536:	2001      	movs	r0, #1
 800f538:	e7f2      	b.n	800f520 <_scanf_i+0x1bc>
 800f53a:	bf00      	nop
 800f53c:	0800fda4 	.word	0x0800fda4
 800f540:	0800ab71 	.word	0x0800ab71
 800f544:	0800e9b5 	.word	0x0800e9b5
 800f548:	08012189 	.word	0x08012189

0800f54c <__sflush_r>:
 800f54c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f554:	0716      	lsls	r6, r2, #28
 800f556:	4605      	mov	r5, r0
 800f558:	460c      	mov	r4, r1
 800f55a:	d454      	bmi.n	800f606 <__sflush_r+0xba>
 800f55c:	684b      	ldr	r3, [r1, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	dc02      	bgt.n	800f568 <__sflush_r+0x1c>
 800f562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f564:	2b00      	cmp	r3, #0
 800f566:	dd48      	ble.n	800f5fa <__sflush_r+0xae>
 800f568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f56a:	2e00      	cmp	r6, #0
 800f56c:	d045      	beq.n	800f5fa <__sflush_r+0xae>
 800f56e:	2300      	movs	r3, #0
 800f570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f574:	682f      	ldr	r7, [r5, #0]
 800f576:	6a21      	ldr	r1, [r4, #32]
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	d030      	beq.n	800f5de <__sflush_r+0x92>
 800f57c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	0759      	lsls	r1, r3, #29
 800f582:	d505      	bpl.n	800f590 <__sflush_r+0x44>
 800f584:	6863      	ldr	r3, [r4, #4]
 800f586:	1ad2      	subs	r2, r2, r3
 800f588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f58a:	b10b      	cbz	r3, 800f590 <__sflush_r+0x44>
 800f58c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f58e:	1ad2      	subs	r2, r2, r3
 800f590:	2300      	movs	r3, #0
 800f592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f594:	6a21      	ldr	r1, [r4, #32]
 800f596:	4628      	mov	r0, r5
 800f598:	47b0      	blx	r6
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	d106      	bne.n	800f5ae <__sflush_r+0x62>
 800f5a0:	6829      	ldr	r1, [r5, #0]
 800f5a2:	291d      	cmp	r1, #29
 800f5a4:	d82b      	bhi.n	800f5fe <__sflush_r+0xb2>
 800f5a6:	4a2a      	ldr	r2, [pc, #168]	@ (800f650 <__sflush_r+0x104>)
 800f5a8:	410a      	asrs	r2, r1
 800f5aa:	07d6      	lsls	r6, r2, #31
 800f5ac:	d427      	bmi.n	800f5fe <__sflush_r+0xb2>
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	6062      	str	r2, [r4, #4]
 800f5b2:	04d9      	lsls	r1, r3, #19
 800f5b4:	6922      	ldr	r2, [r4, #16]
 800f5b6:	6022      	str	r2, [r4, #0]
 800f5b8:	d504      	bpl.n	800f5c4 <__sflush_r+0x78>
 800f5ba:	1c42      	adds	r2, r0, #1
 800f5bc:	d101      	bne.n	800f5c2 <__sflush_r+0x76>
 800f5be:	682b      	ldr	r3, [r5, #0]
 800f5c0:	b903      	cbnz	r3, 800f5c4 <__sflush_r+0x78>
 800f5c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5c6:	602f      	str	r7, [r5, #0]
 800f5c8:	b1b9      	cbz	r1, 800f5fa <__sflush_r+0xae>
 800f5ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5ce:	4299      	cmp	r1, r3
 800f5d0:	d002      	beq.n	800f5d8 <__sflush_r+0x8c>
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	f7fe f8f4 	bl	800d7c0 <_free_r>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5dc:	e00d      	b.n	800f5fa <__sflush_r+0xae>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	47b0      	blx	r6
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	1c50      	adds	r0, r2, #1
 800f5e8:	d1c9      	bne.n	800f57e <__sflush_r+0x32>
 800f5ea:	682b      	ldr	r3, [r5, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d0c6      	beq.n	800f57e <__sflush_r+0x32>
 800f5f0:	2b1d      	cmp	r3, #29
 800f5f2:	d001      	beq.n	800f5f8 <__sflush_r+0xac>
 800f5f4:	2b16      	cmp	r3, #22
 800f5f6:	d11e      	bne.n	800f636 <__sflush_r+0xea>
 800f5f8:	602f      	str	r7, [r5, #0]
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	e022      	b.n	800f644 <__sflush_r+0xf8>
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f602:	b21b      	sxth	r3, r3
 800f604:	e01b      	b.n	800f63e <__sflush_r+0xf2>
 800f606:	690f      	ldr	r7, [r1, #16]
 800f608:	2f00      	cmp	r7, #0
 800f60a:	d0f6      	beq.n	800f5fa <__sflush_r+0xae>
 800f60c:	0793      	lsls	r3, r2, #30
 800f60e:	680e      	ldr	r6, [r1, #0]
 800f610:	bf08      	it	eq
 800f612:	694b      	ldreq	r3, [r1, #20]
 800f614:	600f      	str	r7, [r1, #0]
 800f616:	bf18      	it	ne
 800f618:	2300      	movne	r3, #0
 800f61a:	eba6 0807 	sub.w	r8, r6, r7
 800f61e:	608b      	str	r3, [r1, #8]
 800f620:	f1b8 0f00 	cmp.w	r8, #0
 800f624:	dde9      	ble.n	800f5fa <__sflush_r+0xae>
 800f626:	6a21      	ldr	r1, [r4, #32]
 800f628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f62a:	4643      	mov	r3, r8
 800f62c:	463a      	mov	r2, r7
 800f62e:	4628      	mov	r0, r5
 800f630:	47b0      	blx	r6
 800f632:	2800      	cmp	r0, #0
 800f634:	dc08      	bgt.n	800f648 <__sflush_r+0xfc>
 800f636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f63e:	81a3      	strh	r3, [r4, #12]
 800f640:	f04f 30ff 	mov.w	r0, #4294967295
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f648:	4407      	add	r7, r0
 800f64a:	eba8 0800 	sub.w	r8, r8, r0
 800f64e:	e7e7      	b.n	800f620 <__sflush_r+0xd4>
 800f650:	dfbffffe 	.word	0xdfbffffe

0800f654 <_fflush_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	690b      	ldr	r3, [r1, #16]
 800f658:	4605      	mov	r5, r0
 800f65a:	460c      	mov	r4, r1
 800f65c:	b913      	cbnz	r3, 800f664 <_fflush_r+0x10>
 800f65e:	2500      	movs	r5, #0
 800f660:	4628      	mov	r0, r5
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	b118      	cbz	r0, 800f66e <_fflush_r+0x1a>
 800f666:	6a03      	ldr	r3, [r0, #32]
 800f668:	b90b      	cbnz	r3, 800f66e <_fflush_r+0x1a>
 800f66a:	f7fc f985 	bl	800b978 <__sinit>
 800f66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d0f3      	beq.n	800f65e <_fflush_r+0xa>
 800f676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f678:	07d0      	lsls	r0, r2, #31
 800f67a:	d404      	bmi.n	800f686 <_fflush_r+0x32>
 800f67c:	0599      	lsls	r1, r3, #22
 800f67e:	d402      	bmi.n	800f686 <_fflush_r+0x32>
 800f680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f682:	f7f5 fc38 	bl	8004ef6 <__retarget_lock_acquire_recursive>
 800f686:	4628      	mov	r0, r5
 800f688:	4621      	mov	r1, r4
 800f68a:	f7ff ff5f 	bl	800f54c <__sflush_r>
 800f68e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f690:	07da      	lsls	r2, r3, #31
 800f692:	4605      	mov	r5, r0
 800f694:	d4e4      	bmi.n	800f660 <_fflush_r+0xc>
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	059b      	lsls	r3, r3, #22
 800f69a:	d4e1      	bmi.n	800f660 <_fflush_r+0xc>
 800f69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f69e:	f7f5 fc36 	bl	8004f0e <__retarget_lock_release_recursive>
 800f6a2:	e7dd      	b.n	800f660 <_fflush_r+0xc>

0800f6a4 <__swhatbuf_r>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ac:	2900      	cmp	r1, #0
 800f6ae:	b096      	sub	sp, #88	@ 0x58
 800f6b0:	4615      	mov	r5, r2
 800f6b2:	461e      	mov	r6, r3
 800f6b4:	da0d      	bge.n	800f6d2 <__swhatbuf_r+0x2e>
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6bc:	f04f 0100 	mov.w	r1, #0
 800f6c0:	bf14      	ite	ne
 800f6c2:	2340      	movne	r3, #64	@ 0x40
 800f6c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	6031      	str	r1, [r6, #0]
 800f6cc:	602b      	str	r3, [r5, #0]
 800f6ce:	b016      	add	sp, #88	@ 0x58
 800f6d0:	bd70      	pop	{r4, r5, r6, pc}
 800f6d2:	466a      	mov	r2, sp
 800f6d4:	f000 f90e 	bl	800f8f4 <_fstat_r>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	dbec      	blt.n	800f6b6 <__swhatbuf_r+0x12>
 800f6dc:	9901      	ldr	r1, [sp, #4]
 800f6de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6e6:	4259      	negs	r1, r3
 800f6e8:	4159      	adcs	r1, r3
 800f6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6ee:	e7eb      	b.n	800f6c8 <__swhatbuf_r+0x24>

0800f6f0 <__smakebuf_r>:
 800f6f0:	898b      	ldrh	r3, [r1, #12]
 800f6f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6f4:	079d      	lsls	r5, r3, #30
 800f6f6:	4606      	mov	r6, r0
 800f6f8:	460c      	mov	r4, r1
 800f6fa:	d507      	bpl.n	800f70c <__smakebuf_r+0x1c>
 800f6fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f700:	6023      	str	r3, [r4, #0]
 800f702:	6123      	str	r3, [r4, #16]
 800f704:	2301      	movs	r3, #1
 800f706:	6163      	str	r3, [r4, #20]
 800f708:	b003      	add	sp, #12
 800f70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f70c:	ab01      	add	r3, sp, #4
 800f70e:	466a      	mov	r2, sp
 800f710:	f7ff ffc8 	bl	800f6a4 <__swhatbuf_r>
 800f714:	9f00      	ldr	r7, [sp, #0]
 800f716:	4605      	mov	r5, r0
 800f718:	4639      	mov	r1, r7
 800f71a:	4630      	mov	r0, r6
 800f71c:	f7fa fb0c 	bl	8009d38 <_malloc_r>
 800f720:	b948      	cbnz	r0, 800f736 <__smakebuf_r+0x46>
 800f722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f726:	059a      	lsls	r2, r3, #22
 800f728:	d4ee      	bmi.n	800f708 <__smakebuf_r+0x18>
 800f72a:	f023 0303 	bic.w	r3, r3, #3
 800f72e:	f043 0302 	orr.w	r3, r3, #2
 800f732:	81a3      	strh	r3, [r4, #12]
 800f734:	e7e2      	b.n	800f6fc <__smakebuf_r+0xc>
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	6020      	str	r0, [r4, #0]
 800f73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f73e:	81a3      	strh	r3, [r4, #12]
 800f740:	9b01      	ldr	r3, [sp, #4]
 800f742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f746:	b15b      	cbz	r3, 800f760 <__smakebuf_r+0x70>
 800f748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f74c:	4630      	mov	r0, r6
 800f74e:	f000 f8e3 	bl	800f918 <_isatty_r>
 800f752:	b128      	cbz	r0, 800f760 <__smakebuf_r+0x70>
 800f754:	89a3      	ldrh	r3, [r4, #12]
 800f756:	f023 0303 	bic.w	r3, r3, #3
 800f75a:	f043 0301 	orr.w	r3, r3, #1
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	431d      	orrs	r5, r3
 800f764:	81a5      	strh	r5, [r4, #12]
 800f766:	e7cf      	b.n	800f708 <__smakebuf_r+0x18>

0800f768 <_putc_r>:
 800f768:	b570      	push	{r4, r5, r6, lr}
 800f76a:	460d      	mov	r5, r1
 800f76c:	4614      	mov	r4, r2
 800f76e:	4606      	mov	r6, r0
 800f770:	b118      	cbz	r0, 800f77a <_putc_r+0x12>
 800f772:	6a03      	ldr	r3, [r0, #32]
 800f774:	b90b      	cbnz	r3, 800f77a <_putc_r+0x12>
 800f776:	f7fc f8ff 	bl	800b978 <__sinit>
 800f77a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f77c:	07d8      	lsls	r0, r3, #31
 800f77e:	d405      	bmi.n	800f78c <_putc_r+0x24>
 800f780:	89a3      	ldrh	r3, [r4, #12]
 800f782:	0599      	lsls	r1, r3, #22
 800f784:	d402      	bmi.n	800f78c <_putc_r+0x24>
 800f786:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f788:	f7f5 fbb5 	bl	8004ef6 <__retarget_lock_acquire_recursive>
 800f78c:	68a3      	ldr	r3, [r4, #8]
 800f78e:	3b01      	subs	r3, #1
 800f790:	2b00      	cmp	r3, #0
 800f792:	60a3      	str	r3, [r4, #8]
 800f794:	da05      	bge.n	800f7a2 <_putc_r+0x3a>
 800f796:	69a2      	ldr	r2, [r4, #24]
 800f798:	4293      	cmp	r3, r2
 800f79a:	db12      	blt.n	800f7c2 <_putc_r+0x5a>
 800f79c:	b2eb      	uxtb	r3, r5
 800f79e:	2b0a      	cmp	r3, #10
 800f7a0:	d00f      	beq.n	800f7c2 <_putc_r+0x5a>
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	1c5a      	adds	r2, r3, #1
 800f7a6:	6022      	str	r2, [r4, #0]
 800f7a8:	701d      	strb	r5, [r3, #0]
 800f7aa:	b2ed      	uxtb	r5, r5
 800f7ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7ae:	07da      	lsls	r2, r3, #31
 800f7b0:	d405      	bmi.n	800f7be <_putc_r+0x56>
 800f7b2:	89a3      	ldrh	r3, [r4, #12]
 800f7b4:	059b      	lsls	r3, r3, #22
 800f7b6:	d402      	bmi.n	800f7be <_putc_r+0x56>
 800f7b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ba:	f7f5 fba8 	bl	8004f0e <__retarget_lock_release_recursive>
 800f7be:	4628      	mov	r0, r5
 800f7c0:	bd70      	pop	{r4, r5, r6, pc}
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	4622      	mov	r2, r4
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	f7fc fa47 	bl	800bc5a <__swbuf_r>
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	e7ed      	b.n	800f7ac <_putc_r+0x44>

0800f7d0 <__sccl>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	780b      	ldrb	r3, [r1, #0]
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	2b5e      	cmp	r3, #94	@ 0x5e
 800f7d8:	bf0b      	itete	eq
 800f7da:	784b      	ldrbeq	r3, [r1, #1]
 800f7dc:	1c4a      	addne	r2, r1, #1
 800f7de:	1c8a      	addeq	r2, r1, #2
 800f7e0:	2100      	movne	r1, #0
 800f7e2:	bf08      	it	eq
 800f7e4:	2101      	moveq	r1, #1
 800f7e6:	3801      	subs	r0, #1
 800f7e8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f7ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f7f0:	42a8      	cmp	r0, r5
 800f7f2:	d1fb      	bne.n	800f7ec <__sccl+0x1c>
 800f7f4:	b90b      	cbnz	r3, 800f7fa <__sccl+0x2a>
 800f7f6:	1e50      	subs	r0, r2, #1
 800f7f8:	bd70      	pop	{r4, r5, r6, pc}
 800f7fa:	f081 0101 	eor.w	r1, r1, #1
 800f7fe:	54e1      	strb	r1, [r4, r3]
 800f800:	4610      	mov	r0, r2
 800f802:	4602      	mov	r2, r0
 800f804:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f808:	2d2d      	cmp	r5, #45	@ 0x2d
 800f80a:	d005      	beq.n	800f818 <__sccl+0x48>
 800f80c:	2d5d      	cmp	r5, #93	@ 0x5d
 800f80e:	d016      	beq.n	800f83e <__sccl+0x6e>
 800f810:	2d00      	cmp	r5, #0
 800f812:	d0f1      	beq.n	800f7f8 <__sccl+0x28>
 800f814:	462b      	mov	r3, r5
 800f816:	e7f2      	b.n	800f7fe <__sccl+0x2e>
 800f818:	7846      	ldrb	r6, [r0, #1]
 800f81a:	2e5d      	cmp	r6, #93	@ 0x5d
 800f81c:	d0fa      	beq.n	800f814 <__sccl+0x44>
 800f81e:	42b3      	cmp	r3, r6
 800f820:	dcf8      	bgt.n	800f814 <__sccl+0x44>
 800f822:	3002      	adds	r0, #2
 800f824:	461a      	mov	r2, r3
 800f826:	3201      	adds	r2, #1
 800f828:	4296      	cmp	r6, r2
 800f82a:	54a1      	strb	r1, [r4, r2]
 800f82c:	dcfb      	bgt.n	800f826 <__sccl+0x56>
 800f82e:	1af2      	subs	r2, r6, r3
 800f830:	3a01      	subs	r2, #1
 800f832:	1c5d      	adds	r5, r3, #1
 800f834:	42b3      	cmp	r3, r6
 800f836:	bfa8      	it	ge
 800f838:	2200      	movge	r2, #0
 800f83a:	18ab      	adds	r3, r5, r2
 800f83c:	e7e1      	b.n	800f802 <__sccl+0x32>
 800f83e:	4610      	mov	r0, r2
 800f840:	e7da      	b.n	800f7f8 <__sccl+0x28>

0800f842 <__submore>:
 800f842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	460c      	mov	r4, r1
 800f848:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f84e:	4299      	cmp	r1, r3
 800f850:	d11d      	bne.n	800f88e <__submore+0x4c>
 800f852:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f856:	f7fa fa6f 	bl	8009d38 <_malloc_r>
 800f85a:	b918      	cbnz	r0, 800f864 <__submore+0x22>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f868:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f86a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f86e:	6360      	str	r0, [r4, #52]	@ 0x34
 800f870:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f874:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f878:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f87c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f880:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f884:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f888:	6020      	str	r0, [r4, #0]
 800f88a:	2000      	movs	r0, #0
 800f88c:	e7e8      	b.n	800f860 <__submore+0x1e>
 800f88e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f890:	0077      	lsls	r7, r6, #1
 800f892:	463a      	mov	r2, r7
 800f894:	f000 f88e 	bl	800f9b4 <_realloc_r>
 800f898:	4605      	mov	r5, r0
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d0de      	beq.n	800f85c <__submore+0x1a>
 800f89e:	eb00 0806 	add.w	r8, r0, r6
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	f7fd f916 	bl	800cad8 <memcpy>
 800f8ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f8b0:	f8c4 8000 	str.w	r8, [r4]
 800f8b4:	e7e9      	b.n	800f88a <__submore+0x48>

0800f8b6 <memmove>:
 800f8b6:	4288      	cmp	r0, r1
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	eb01 0402 	add.w	r4, r1, r2
 800f8be:	d902      	bls.n	800f8c6 <memmove+0x10>
 800f8c0:	4284      	cmp	r4, r0
 800f8c2:	4623      	mov	r3, r4
 800f8c4:	d807      	bhi.n	800f8d6 <memmove+0x20>
 800f8c6:	1e43      	subs	r3, r0, #1
 800f8c8:	42a1      	cmp	r1, r4
 800f8ca:	d008      	beq.n	800f8de <memmove+0x28>
 800f8cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8d4:	e7f8      	b.n	800f8c8 <memmove+0x12>
 800f8d6:	4402      	add	r2, r0
 800f8d8:	4601      	mov	r1, r0
 800f8da:	428a      	cmp	r2, r1
 800f8dc:	d100      	bne.n	800f8e0 <memmove+0x2a>
 800f8de:	bd10      	pop	{r4, pc}
 800f8e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8e8:	e7f7      	b.n	800f8da <memmove+0x24>
	...

0800f8ec <__gettzinfo>:
 800f8ec:	4800      	ldr	r0, [pc, #0]	@ (800f8f0 <__gettzinfo+0x4>)
 800f8ee:	4770      	bx	lr
 800f8f0:	200001f8 	.word	0x200001f8

0800f8f4 <_fstat_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	4d07      	ldr	r5, [pc, #28]	@ (800f914 <_fstat_r+0x20>)
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	4608      	mov	r0, r1
 800f8fe:	4611      	mov	r1, r2
 800f900:	602b      	str	r3, [r5, #0]
 800f902:	f7f5 fa3e 	bl	8004d82 <_fstat>
 800f906:	1c43      	adds	r3, r0, #1
 800f908:	d102      	bne.n	800f910 <_fstat_r+0x1c>
 800f90a:	682b      	ldr	r3, [r5, #0]
 800f90c:	b103      	cbz	r3, 800f910 <_fstat_r+0x1c>
 800f90e:	6023      	str	r3, [r4, #0]
 800f910:	bd38      	pop	{r3, r4, r5, pc}
 800f912:	bf00      	nop
 800f914:	200085a4 	.word	0x200085a4

0800f918 <_isatty_r>:
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4d06      	ldr	r5, [pc, #24]	@ (800f934 <_isatty_r+0x1c>)
 800f91c:	2300      	movs	r3, #0
 800f91e:	4604      	mov	r4, r0
 800f920:	4608      	mov	r0, r1
 800f922:	602b      	str	r3, [r5, #0]
 800f924:	f7f5 fa32 	bl	8004d8c <_isatty>
 800f928:	1c43      	adds	r3, r0, #1
 800f92a:	d102      	bne.n	800f932 <_isatty_r+0x1a>
 800f92c:	682b      	ldr	r3, [r5, #0]
 800f92e:	b103      	cbz	r3, 800f932 <_isatty_r+0x1a>
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	bd38      	pop	{r3, r4, r5, pc}
 800f934:	200085a4 	.word	0x200085a4

0800f938 <__assert_func>:
 800f938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f93a:	4614      	mov	r4, r2
 800f93c:	461a      	mov	r2, r3
 800f93e:	4b09      	ldr	r3, [pc, #36]	@ (800f964 <__assert_func+0x2c>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4605      	mov	r5, r0
 800f944:	68d8      	ldr	r0, [r3, #12]
 800f946:	b954      	cbnz	r4, 800f95e <__assert_func+0x26>
 800f948:	4b07      	ldr	r3, [pc, #28]	@ (800f968 <__assert_func+0x30>)
 800f94a:	461c      	mov	r4, r3
 800f94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f950:	9100      	str	r1, [sp, #0]
 800f952:	462b      	mov	r3, r5
 800f954:	4905      	ldr	r1, [pc, #20]	@ (800f96c <__assert_func+0x34>)
 800f956:	f000 f85b 	bl	800fa10 <fiprintf>
 800f95a:	f000 f86b 	bl	800fa34 <abort>
 800f95e:	4b04      	ldr	r3, [pc, #16]	@ (800f970 <__assert_func+0x38>)
 800f960:	e7f4      	b.n	800f94c <__assert_func+0x14>
 800f962:	bf00      	nop
 800f964:	200001a4 	.word	0x200001a4
 800f968:	08010f0e 	.word	0x08010f0e
 800f96c:	08012201 	.word	0x08012201
 800f970:	080121f4 	.word	0x080121f4

0800f974 <_calloc_r>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	fba1 5402 	umull	r5, r4, r1, r2
 800f97a:	b93c      	cbnz	r4, 800f98c <_calloc_r+0x18>
 800f97c:	4629      	mov	r1, r5
 800f97e:	f7fa f9db 	bl	8009d38 <_malloc_r>
 800f982:	4606      	mov	r6, r0
 800f984:	b928      	cbnz	r0, 800f992 <_calloc_r+0x1e>
 800f986:	2600      	movs	r6, #0
 800f988:	4630      	mov	r0, r6
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
 800f98c:	220c      	movs	r2, #12
 800f98e:	6002      	str	r2, [r0, #0]
 800f990:	e7f9      	b.n	800f986 <_calloc_r+0x12>
 800f992:	462a      	mov	r2, r5
 800f994:	4621      	mov	r1, r4
 800f996:	f7fc f9f5 	bl	800bd84 <memset>
 800f99a:	e7f5      	b.n	800f988 <_calloc_r+0x14>

0800f99c <__env_lock>:
 800f99c:	4801      	ldr	r0, [pc, #4]	@ (800f9a4 <__env_lock+0x8>)
 800f99e:	f7f5 baaa 	b.w	8004ef6 <__retarget_lock_acquire_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	200034ac 	.word	0x200034ac

0800f9a8 <__env_unlock>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	@ (800f9b0 <__env_unlock+0x8>)
 800f9aa:	f7f5 bab0 	b.w	8004f0e <__retarget_lock_release_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	200034ac 	.word	0x200034ac

0800f9b4 <_realloc_r>:
 800f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4615      	mov	r5, r2
 800f9bc:	460c      	mov	r4, r1
 800f9be:	b921      	cbnz	r1, 800f9ca <_realloc_r+0x16>
 800f9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	f7fa b9b7 	b.w	8009d38 <_malloc_r>
 800f9ca:	b92a      	cbnz	r2, 800f9d8 <_realloc_r+0x24>
 800f9cc:	f7fd fef8 	bl	800d7c0 <_free_r>
 800f9d0:	2400      	movs	r4, #0
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	f000 f833 	bl	800fa42 <_malloc_usable_size_r>
 800f9dc:	4285      	cmp	r5, r0
 800f9de:	4606      	mov	r6, r0
 800f9e0:	d802      	bhi.n	800f9e8 <_realloc_r+0x34>
 800f9e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9e6:	d8f4      	bhi.n	800f9d2 <_realloc_r+0x1e>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4640      	mov	r0, r8
 800f9ec:	f7fa f9a4 	bl	8009d38 <_malloc_r>
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d0ec      	beq.n	800f9d0 <_realloc_r+0x1c>
 800f9f6:	42b5      	cmp	r5, r6
 800f9f8:	462a      	mov	r2, r5
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	bf28      	it	cs
 800f9fe:	4632      	movcs	r2, r6
 800fa00:	f7fd f86a 	bl	800cad8 <memcpy>
 800fa04:	4621      	mov	r1, r4
 800fa06:	4640      	mov	r0, r8
 800fa08:	f7fd feda 	bl	800d7c0 <_free_r>
 800fa0c:	463c      	mov	r4, r7
 800fa0e:	e7e0      	b.n	800f9d2 <_realloc_r+0x1e>

0800fa10 <fiprintf>:
 800fa10:	b40e      	push	{r1, r2, r3}
 800fa12:	b503      	push	{r0, r1, lr}
 800fa14:	4601      	mov	r1, r0
 800fa16:	ab03      	add	r3, sp, #12
 800fa18:	4805      	ldr	r0, [pc, #20]	@ (800fa30 <fiprintf+0x20>)
 800fa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1e:	6800      	ldr	r0, [r0, #0]
 800fa20:	9301      	str	r3, [sp, #4]
 800fa22:	f7ff fb2d 	bl	800f080 <_vfiprintf_r>
 800fa26:	b002      	add	sp, #8
 800fa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa2c:	b003      	add	sp, #12
 800fa2e:	4770      	bx	lr
 800fa30:	200001a4 	.word	0x200001a4

0800fa34 <abort>:
 800fa34:	b508      	push	{r3, lr}
 800fa36:	2006      	movs	r0, #6
 800fa38:	f000 f834 	bl	800faa4 <raise>
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f7f5 f97b 	bl	8004d38 <_exit>

0800fa42 <_malloc_usable_size_r>:
 800fa42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa46:	1f18      	subs	r0, r3, #4
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bfbc      	itt	lt
 800fa4c:	580b      	ldrlt	r3, [r1, r0]
 800fa4e:	18c0      	addlt	r0, r0, r3
 800fa50:	4770      	bx	lr

0800fa52 <_raise_r>:
 800fa52:	291f      	cmp	r1, #31
 800fa54:	b538      	push	{r3, r4, r5, lr}
 800fa56:	4605      	mov	r5, r0
 800fa58:	460c      	mov	r4, r1
 800fa5a:	d904      	bls.n	800fa66 <_raise_r+0x14>
 800fa5c:	2316      	movs	r3, #22
 800fa5e:	6003      	str	r3, [r0, #0]
 800fa60:	f04f 30ff 	mov.w	r0, #4294967295
 800fa64:	bd38      	pop	{r3, r4, r5, pc}
 800fa66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa68:	b112      	cbz	r2, 800fa70 <_raise_r+0x1e>
 800fa6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa6e:	b94b      	cbnz	r3, 800fa84 <_raise_r+0x32>
 800fa70:	4628      	mov	r0, r5
 800fa72:	f000 f831 	bl	800fad8 <_getpid_r>
 800fa76:	4622      	mov	r2, r4
 800fa78:	4601      	mov	r1, r0
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa80:	f000 b818 	b.w	800fab4 <_kill_r>
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d00a      	beq.n	800fa9e <_raise_r+0x4c>
 800fa88:	1c59      	adds	r1, r3, #1
 800fa8a:	d103      	bne.n	800fa94 <_raise_r+0x42>
 800fa8c:	2316      	movs	r3, #22
 800fa8e:	6003      	str	r3, [r0, #0]
 800fa90:	2001      	movs	r0, #1
 800fa92:	e7e7      	b.n	800fa64 <_raise_r+0x12>
 800fa94:	2100      	movs	r1, #0
 800fa96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	4798      	blx	r3
 800fa9e:	2000      	movs	r0, #0
 800faa0:	e7e0      	b.n	800fa64 <_raise_r+0x12>
	...

0800faa4 <raise>:
 800faa4:	4b02      	ldr	r3, [pc, #8]	@ (800fab0 <raise+0xc>)
 800faa6:	4601      	mov	r1, r0
 800faa8:	6818      	ldr	r0, [r3, #0]
 800faaa:	f7ff bfd2 	b.w	800fa52 <_raise_r>
 800faae:	bf00      	nop
 800fab0:	200001a4 	.word	0x200001a4

0800fab4 <_kill_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4d07      	ldr	r5, [pc, #28]	@ (800fad4 <_kill_r+0x20>)
 800fab8:	2300      	movs	r3, #0
 800faba:	4604      	mov	r4, r0
 800fabc:	4608      	mov	r0, r1
 800fabe:	4611      	mov	r1, r2
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	f7f5 f931 	bl	8004d28 <_kill>
 800fac6:	1c43      	adds	r3, r0, #1
 800fac8:	d102      	bne.n	800fad0 <_kill_r+0x1c>
 800faca:	682b      	ldr	r3, [r5, #0]
 800facc:	b103      	cbz	r3, 800fad0 <_kill_r+0x1c>
 800face:	6023      	str	r3, [r4, #0]
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	bf00      	nop
 800fad4:	200085a4 	.word	0x200085a4

0800fad8 <_getpid_r>:
 800fad8:	f7f5 b924 	b.w	8004d24 <_getpid>
 800fadc:	0000      	movs	r0, r0
	...

0800fae0 <floor>:
 800fae0:	ec51 0b10 	vmov	r0, r1, d0
 800fae4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800faf0:	2e13      	cmp	r6, #19
 800faf2:	460c      	mov	r4, r1
 800faf4:	4605      	mov	r5, r0
 800faf6:	4680      	mov	r8, r0
 800faf8:	dc34      	bgt.n	800fb64 <floor+0x84>
 800fafa:	2e00      	cmp	r6, #0
 800fafc:	da17      	bge.n	800fb2e <floor+0x4e>
 800fafe:	a332      	add	r3, pc, #200	@ (adr r3, 800fbc8 <floor+0xe8>)
 800fb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb04:	f7f0 fbd2 	bl	80002ac <__adddf3>
 800fb08:	2200      	movs	r2, #0
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f7f1 f814 	bl	8000b38 <__aeabi_dcmpgt>
 800fb10:	b150      	cbz	r0, 800fb28 <floor+0x48>
 800fb12:	2c00      	cmp	r4, #0
 800fb14:	da55      	bge.n	800fbc2 <floor+0xe2>
 800fb16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fb1a:	432c      	orrs	r4, r5
 800fb1c:	2500      	movs	r5, #0
 800fb1e:	42ac      	cmp	r4, r5
 800fb20:	4c2b      	ldr	r4, [pc, #172]	@ (800fbd0 <floor+0xf0>)
 800fb22:	bf08      	it	eq
 800fb24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fb28:	4621      	mov	r1, r4
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	e023      	b.n	800fb76 <floor+0x96>
 800fb2e:	4f29      	ldr	r7, [pc, #164]	@ (800fbd4 <floor+0xf4>)
 800fb30:	4137      	asrs	r7, r6
 800fb32:	ea01 0307 	and.w	r3, r1, r7
 800fb36:	4303      	orrs	r3, r0
 800fb38:	d01d      	beq.n	800fb76 <floor+0x96>
 800fb3a:	a323      	add	r3, pc, #140	@ (adr r3, 800fbc8 <floor+0xe8>)
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	f7f0 fbb4 	bl	80002ac <__adddf3>
 800fb44:	2200      	movs	r2, #0
 800fb46:	2300      	movs	r3, #0
 800fb48:	f7f0 fff6 	bl	8000b38 <__aeabi_dcmpgt>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d0eb      	beq.n	800fb28 <floor+0x48>
 800fb50:	2c00      	cmp	r4, #0
 800fb52:	bfbe      	ittt	lt
 800fb54:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fb58:	4133      	asrlt	r3, r6
 800fb5a:	18e4      	addlt	r4, r4, r3
 800fb5c:	ea24 0407 	bic.w	r4, r4, r7
 800fb60:	2500      	movs	r5, #0
 800fb62:	e7e1      	b.n	800fb28 <floor+0x48>
 800fb64:	2e33      	cmp	r6, #51	@ 0x33
 800fb66:	dd0a      	ble.n	800fb7e <floor+0x9e>
 800fb68:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fb6c:	d103      	bne.n	800fb76 <floor+0x96>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	460b      	mov	r3, r1
 800fb72:	f7f0 fb9b 	bl	80002ac <__adddf3>
 800fb76:	ec41 0b10 	vmov	d0, r0, r1
 800fb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fb82:	f04f 37ff 	mov.w	r7, #4294967295
 800fb86:	40df      	lsrs	r7, r3
 800fb88:	4207      	tst	r7, r0
 800fb8a:	d0f4      	beq.n	800fb76 <floor+0x96>
 800fb8c:	a30e      	add	r3, pc, #56	@ (adr r3, 800fbc8 <floor+0xe8>)
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	f7f0 fb8b 	bl	80002ac <__adddf3>
 800fb96:	2200      	movs	r2, #0
 800fb98:	2300      	movs	r3, #0
 800fb9a:	f7f0 ffcd 	bl	8000b38 <__aeabi_dcmpgt>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d0c2      	beq.n	800fb28 <floor+0x48>
 800fba2:	2c00      	cmp	r4, #0
 800fba4:	da0a      	bge.n	800fbbc <floor+0xdc>
 800fba6:	2e14      	cmp	r6, #20
 800fba8:	d101      	bne.n	800fbae <floor+0xce>
 800fbaa:	3401      	adds	r4, #1
 800fbac:	e006      	b.n	800fbbc <floor+0xdc>
 800fbae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	40b3      	lsls	r3, r6
 800fbb6:	441d      	add	r5, r3
 800fbb8:	4545      	cmp	r5, r8
 800fbba:	d3f6      	bcc.n	800fbaa <floor+0xca>
 800fbbc:	ea25 0507 	bic.w	r5, r5, r7
 800fbc0:	e7b2      	b.n	800fb28 <floor+0x48>
 800fbc2:	2500      	movs	r5, #0
 800fbc4:	462c      	mov	r4, r5
 800fbc6:	e7af      	b.n	800fb28 <floor+0x48>
 800fbc8:	8800759c 	.word	0x8800759c
 800fbcc:	7e37e43c 	.word	0x7e37e43c
 800fbd0:	bff00000 	.word	0xbff00000
 800fbd4:	000fffff 	.word	0x000fffff

0800fbd8 <round>:
 800fbd8:	ec51 0b10 	vmov	r0, r1, d0
 800fbdc:	b570      	push	{r4, r5, r6, lr}
 800fbde:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800fbe2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800fbe6:	2a13      	cmp	r2, #19
 800fbe8:	460b      	mov	r3, r1
 800fbea:	4605      	mov	r5, r0
 800fbec:	dc1b      	bgt.n	800fc26 <round+0x4e>
 800fbee:	2a00      	cmp	r2, #0
 800fbf0:	da0b      	bge.n	800fc0a <round+0x32>
 800fbf2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800fbf6:	3201      	adds	r2, #1
 800fbf8:	bf04      	itt	eq
 800fbfa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800fbfe:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800fc02:	2200      	movs	r2, #0
 800fc04:	4619      	mov	r1, r3
 800fc06:	4610      	mov	r0, r2
 800fc08:	e015      	b.n	800fc36 <round+0x5e>
 800fc0a:	4c15      	ldr	r4, [pc, #84]	@ (800fc60 <round+0x88>)
 800fc0c:	4114      	asrs	r4, r2
 800fc0e:	ea04 0601 	and.w	r6, r4, r1
 800fc12:	4306      	orrs	r6, r0
 800fc14:	d00f      	beq.n	800fc36 <round+0x5e>
 800fc16:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800fc1a:	fa41 f202 	asr.w	r2, r1, r2
 800fc1e:	4413      	add	r3, r2
 800fc20:	ea23 0304 	bic.w	r3, r3, r4
 800fc24:	e7ed      	b.n	800fc02 <round+0x2a>
 800fc26:	2a33      	cmp	r2, #51	@ 0x33
 800fc28:	dd08      	ble.n	800fc3c <round+0x64>
 800fc2a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800fc2e:	d102      	bne.n	800fc36 <round+0x5e>
 800fc30:	4602      	mov	r2, r0
 800fc32:	f7f0 fb3b 	bl	80002ac <__adddf3>
 800fc36:	ec41 0b10 	vmov	d0, r0, r1
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800fc40:	f04f 34ff 	mov.w	r4, #4294967295
 800fc44:	40f4      	lsrs	r4, r6
 800fc46:	4204      	tst	r4, r0
 800fc48:	d0f5      	beq.n	800fc36 <round+0x5e>
 800fc4a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800fc4e:	2201      	movs	r2, #1
 800fc50:	408a      	lsls	r2, r1
 800fc52:	1952      	adds	r2, r2, r5
 800fc54:	bf28      	it	cs
 800fc56:	3301      	addcs	r3, #1
 800fc58:	ea22 0204 	bic.w	r2, r2, r4
 800fc5c:	e7d2      	b.n	800fc04 <round+0x2c>
 800fc5e:	bf00      	nop
 800fc60:	000fffff 	.word	0x000fffff

0800fc64 <_init>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	bf00      	nop
 800fc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6a:	bc08      	pop	{r3}
 800fc6c:	469e      	mov	lr, r3
 800fc6e:	4770      	bx	lr

0800fc70 <_fini>:
 800fc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc72:	bf00      	nop
 800fc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc76:	bc08      	pop	{r3}
 800fc78:	469e      	mov	lr, r3
 800fc7a:	4770      	bx	lr
