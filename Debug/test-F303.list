
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001820  0800cc70  0800cc70  0000dc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e490  0800e490  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e490  0800e490  0000f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e498  0800e498  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e498  0800e498  0000f498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e49c  0800e49c  0000f49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e4a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00008a9c  200001e0  200001e0  000101e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008c7c  20008c7c  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000312ed  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062d4  00000000  00000000  000414f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011959  00000000  00000000  000477cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c50  00000000  00000000  00059128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ea8  00000000  00000000  0005ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000063f1  00000000  00000000  0005cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f697  00000000  00000000  00063011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6fc1  00000000  00000000  000926a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00169669  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000656c  00000000  00000000  001696ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0016fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc58 	.word	0x0800cc58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cc58 	.word	0x0800cc58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM;


JT808_TerminalRegistration create_terminal_registration(){
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000cf8:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000cfa:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000cfc:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000cfe:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000d02:	4622      	mov	r2, r4
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	6859      	ldr	r1, [r3, #4]
 8000d08:	4626      	mov	r6, r4
 8000d0a:	c603      	stmia	r6!, {r0, r1}
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	42bb      	cmp	r3, r7
 8000d10:	4634      	mov	r4, r6
 8000d12:	d1f7      	bne.n	8000d04 <create_terminal_registration+0x10>
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000d18:	4613      	mov	r3, r2
 8000d1a:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000d1c:	462a      	mov	r2, r5
 8000d1e:	461c      	mov	r4, r3
 8000d20:	cc03      	ldmia	r4!, {r0, r1}
 8000d22:	42b4      	cmp	r4, r6
 8000d24:	6010      	str	r0, [r2, #0]
 8000d26:	6051      	str	r1, [r2, #4]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	f102 0208 	add.w	r2, r2, #8
 8000d2e:	d1f6      	bne.n	8000d1e <create_terminal_registration+0x2a>
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	6010      	str	r0, [r2, #0]
}
 8000d34:	4628      	mov	r0, r5
 8000d36:	b011      	add	sp, #68	@ 0x44
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	0800cc70 	.word	0x0800cc70

08000d40 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000d40:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000d42:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000d44:	b093      	sub	sp, #76	@ 0x4c
 8000d46:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000d48:	462a      	mov	r2, r5
 8000d4a:	4906      	ldr	r1, [pc, #24]	@ (8000d64 <create_location_info_report+0x24>)
 8000d4c:	a801      	add	r0, sp, #4
 8000d4e:	f008 ff43 	bl	8009bd8 <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000d52:	462a      	mov	r2, r5
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	4620      	mov	r0, r4
 8000d58:	f008 ff3e 	bl	8009bd8 <memcpy>
}
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	b013      	add	sp, #76	@ 0x4c
 8000d60:	bd30      	pop	{r4, r5, pc}
 8000d62:	bf00      	nop
 8000d64:	0800ccac 	.word	0x0800ccac

08000d68 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000d68:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000d6a:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000d6c:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000d70:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000d72:	bf0c      	ite	eq
 8000d74:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000d78:	f043 0304 	orrne.w	r3, r3, #4
 8000d7c:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000d7e:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000d82:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000d84:	bf0c      	ite	eq
 8000d86:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000d8a:	f043 0308 	orrne.w	r3, r3, #8
 8000d8e:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000268 	.word	0x20000268

08000d98 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000d9c:	f7ff fa68 	bl	8000270 <strlen>
 8000da0:	4621      	mov	r1, r4
 8000da2:	b282      	uxth	r2, r0
}
 8000da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <send_AT_command+0x1c>)
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	f004 bfeb 	b.w	8005d88 <HAL_UART_Transmit>
 8000db2:	bf00      	nop
 8000db4:	20000760 	.word	0x20000760

08000db8 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8000db8:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <SIM_UART_ReInitializeRxDMA+0x28>)
 8000dbc:	f004 fd77 	bl	80058ae <HAL_UART_Abort>
	if(ret != HAL_OK)
 8000dc0:	b108      	cbz	r0, 8000dc6 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 8000dc2:	f002 f9b8 	bl	8003136 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8000dc6:	2032      	movs	r0, #50	@ 0x32
 8000dc8:	f005 f9ce 	bl	8006168 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <SIM_UART_ReInitializeRxDMA+0x2c>)
 8000dd2:	4903      	ldr	r1, [pc, #12]	@ (8000de0 <SIM_UART_ReInitializeRxDMA+0x28>)
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <SIM_UART_ReInitializeRxDMA+0x30>)
 8000dd6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dda:	f001 bedb 	b.w	8002b94 <RingBufferDmaU8_initUSARTRx>
 8000dde:	bf00      	nop
 8000de0:	20000760 	.word	0x20000760
 8000de4:	200002e4 	.word	0x200002e4
 8000de8:	200002d4 	.word	0x200002d4

08000dec <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8000dec:	f7ff ba40 	b.w	8000270 <strlen>

08000df0 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 8000df0:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 8000df2:	4c0e      	ldr	r4, [pc, #56]	@ (8000e2c <receive_response+0x3c>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000df4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <receive_response+0x40>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000df6:	4d0f      	ldr	r5, [pc, #60]	@ (8000e34 <receive_response+0x44>)
void receive_response(char *cmd_str) {
 8000df8:	b0a1      	sub	sp, #132	@ 0x84
 8000dfa:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000dfc:	2180      	movs	r1, #128	@ 0x80
 8000dfe:	4668      	mov	r0, sp
 8000e00:	f008 fd32 	bl	8009868 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8000e04:	4669      	mov	r1, sp
 8000e06:	4620      	mov	r0, r4
 8000e08:	f002 fc5e 	bl	80036c8 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f7ff ffed 	bl	8000dec <find_length>
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	b282      	uxth	r2, r0
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f004 ffb4 	bl	8005d88 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 8000e20:	4905      	ldr	r1, [pc, #20]	@ (8000e38 <receive_response+0x48>)
 8000e22:	4620      	mov	r0, r4
 8000e24:	f002 fc50 	bl	80036c8 <uart_transmit_string>
//	osDelay(1000);
}
 8000e28:	b021      	add	sp, #132	@ 0x84
 8000e2a:	bd30      	pop	{r4, r5, pc}
 8000e2c:	20000870 	.word	0x20000870
 8000e30:	0800cd4c 	.word	0x0800cd4c
 8000e34:	200002e4 	.word	0x200002e4
 8000e38:	0800db6a 	.word	0x0800db6a

08000e3c <init_SIM_module>:

void init_SIM_module() {
 8000e3c:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 8000e3e:	4c0b      	ldr	r4, [pc, #44]	@ (8000e6c <init_SIM_module+0x30>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	4611      	mov	r1, r2
 8000e44:	4620      	mov	r0, r4
 8000e46:	f003 fc4f 	bl	80046e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f003 fc4a 	bl	80046e8 <HAL_GPIO_WritePin>
	osDelay(2000);
 8000e54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e58:	f005 f986 	bl	8006168 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	2201      	movs	r2, #1
}
 8000e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e64:	2102      	movs	r1, #2
 8000e66:	f003 bc3f 	b.w	80046e8 <HAL_GPIO_WritePin>
 8000e6a:	bf00      	nop
 8000e6c:	48000800 	.word	0x48000800

08000e70 <reboot_SIM_module>:

void reboot_SIM_module(){
 8000e70:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e72:	4c11      	ldr	r4, [pc, #68]	@ (8000eb8 <reboot_SIM_module+0x48>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2102      	movs	r1, #2
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f003 fc35 	bl	80046e8 <HAL_GPIO_WritePin>
	osDelay(1500);
 8000e7e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e82:	f005 f971 	bl	8006168 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f003 fc2c 	bl	80046e8 <HAL_GPIO_WritePin>
	osDelay(10000);
 8000e90:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e94:	f005 f968 	bl	8006168 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f003 fc23 	bl	80046e8 <HAL_GPIO_WritePin>
	osDelay(1500);
 8000ea2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ea6:	f005 f95f 	bl	8006168 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	2201      	movs	r2, #1
}
 8000eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	f003 bc18 	b.w	80046e8 <HAL_GPIO_WritePin>
 8000eb8:	48000800 	.word	0x48000800

08000ebc <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8000ebc:	220a      	movs	r2, #10
 8000ebe:	fb90 f3f2 	sdiv	r3, r0, r2
 8000ec2:	fb02 0013 	mls	r0, r2, r3, r0
}
 8000ec6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8000eca:	4770      	bx	lr
 8000ecc:	0000      	movs	r0, r0
	...

08000ed0 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8000ed0:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8000ed2:	4d43      	ldr	r5, [pc, #268]	@ (8000fe0 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8000ed4:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8000ed6:	69a8      	ldr	r0, [r5, #24]
 8000ed8:	f7ff fff0 	bl	8000ebc <convert_dec_to_hex_value>
 8000edc:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8000ee0:	6968      	ldr	r0, [r5, #20]
 8000ee2:	f7ff ffeb 	bl	8000ebc <convert_dec_to_hex_value>
 8000ee6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 8000eea:	6928      	ldr	r0, [r5, #16]
 8000eec:	f7ff ffe6 	bl	8000ebc <convert_dec_to_hex_value>
 8000ef0:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8000ef4:	6828      	ldr	r0, [r5, #0]
 8000ef6:	f7ff ffe1 	bl	8000ebc <convert_dec_to_hex_value>
 8000efa:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 8000efe:	6868      	ldr	r0, [r5, #4]
 8000f00:	f7ff ffdc 	bl	8000ebc <convert_dec_to_hex_value>
 8000f04:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8000f08:	68a8      	ldr	r0, [r5, #8]
 8000f0a:	f7ff ffd7 	bl	8000ebc <convert_dec_to_hex_value>
 8000f0e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8000f12:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8000f16:	a32e      	add	r3, pc, #184	@ (adr r3, 8000fd0 <save_rmc_to_location_info+0x100>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	f7ff fb6c 	bl	80005f8 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8000f20:	ec41 0b10 	vmov	d0, r0, r1
 8000f24:	f00b fe52 	bl	800cbcc <round>
 8000f28:	ec51 0b10 	vmov	r0, r1, d0
 8000f2c:	f7ff fe14 	bl	8000b58 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8000f30:	a327      	add	r3, pc, #156	@ (adr r3, 8000fd0 <save_rmc_to_location_info+0x100>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8000f36:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8000f38:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8000f3c:	f7ff fb5c 	bl	80005f8 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 8000f40:	ec41 0b10 	vmov	d0, r0, r1
 8000f44:	f00b fe42 	bl	800cbcc <round>
 8000f48:	ec51 0b10 	vmov	r0, r1, d0
 8000f4c:	f7ff fe04 	bl	8000b58 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 8000f50:	0e33      	lsrs	r3, r6, #24
 8000f52:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 8000f54:	1433      	asrs	r3, r6, #16
 8000f56:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 8000f58:	1233      	asrs	r3, r6, #8
 8000f5a:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 8000f5c:	0e03      	lsrs	r3, r0, #24
 8000f5e:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 8000f60:	1403      	asrs	r3, r0, #16
 8000f62:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 8000f64:	1203      	asrs	r3, r0, #8
 8000f66:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 8000f68:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 8000f6a:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 8000f6c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8000f70:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8000f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f78:	ee17 0a90 	vmov	r0, s15
 8000f7c:	f7ff fae4 	bl	8000548 <__aeabi_f2d>
 8000f80:	a315      	add	r3, pc, #84	@ (adr r3, 8000fd8 <save_rmc_to_location_info+0x108>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb37 	bl	80005f8 <__aeabi_dmul>
 8000f8a:	ec41 0b10 	vmov	d0, r0, r1
 8000f8e:	f00b fe1d 	bl	800cbcc <round>
 8000f92:	ec51 0b10 	vmov	r0, r1, d0
 8000f96:	f7ff fddf 	bl	8000b58 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 8000f9a:	1203      	asrs	r3, r0, #8
 8000f9c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 8000f9e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8000fa2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_f2d>
 8000fa8:	ec41 0b10 	vmov	d0, r0, r1
 8000fac:	f00b fe0e 	bl	800cbcc <round>
 8000fb0:	ec51 0b10 	vmov	r0, r1, d0
 8000fb4:	f7ff fdd0 	bl	8000b58 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8000fb8:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 8000fba:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8000fbe:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8000fc2:	f104 0011 	add.w	r0, r4, #17
}
 8000fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 8000fca:	f7ff becd 	b.w	8000d68 <set_status_bit>
 8000fce:	bf00      	nop
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	412e8480 	.word	0x412e8480
 8000fd8:	c083126f 	.word	0xc083126f
 8000fdc:	3ffda1ca 	.word	0x3ffda1ca
 8000fe0:	20000268 	.word	0x20000268

08000fe4 <first_check_SIM>:

//AT
int first_check_SIM()
{
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8000fe6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000fea:	2100      	movs	r1, #0
 8000fec:	4845      	ldr	r0, [pc, #276]	@ (8001104 <first_check_SIM+0x120>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 8000fee:	4d46      	ldr	r5, [pc, #280]	@ (8001108 <first_check_SIM+0x124>)
 8000ff0:	4c44      	ldr	r4, [pc, #272]	@ (8001104 <first_check_SIM+0x120>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8000ff2:	4e46      	ldr	r6, [pc, #280]	@ (800110c <first_check_SIM+0x128>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8000ff4:	f008 fd34 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8000ff8:	f7ff fede 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8000ffc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001000:	2100      	movs	r1, #0
 8001002:	4840      	ldr	r0, [pc, #256]	@ (8001104 <first_check_SIM+0x120>)
 8001004:	f008 fd2c 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001008:	f7ff fed6 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800100c:	4629      	mov	r1, r5
 800100e:	4620      	mov	r0, r4
 8001010:	f008 fd40 	bl	8009a94 <strstr>
 8001014:	2800      	cmp	r0, #0
 8001016:	d056      	beq.n	80010c6 <first_check_SIM+0xe2>
		osDelay(1000);
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001018:	483c      	ldr	r0, [pc, #240]	@ (800110c <first_check_SIM+0x128>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800101a:	4e3d      	ldr	r6, [pc, #244]	@ (8001110 <first_check_SIM+0x12c>)
 800101c:	4d39      	ldr	r5, [pc, #228]	@ (8001104 <first_check_SIM+0x120>)
		receive_response("First check SIM MODULE\n");
 800101e:	4f3d      	ldr	r7, [pc, #244]	@ (8001114 <first_check_SIM+0x130>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001020:	f7ff fee6 	bl	8000df0 <receive_response>
	osDelay(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001028:	f005 f89e 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800102c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001030:	2100      	movs	r1, #0
 8001032:	4834      	ldr	r0, [pc, #208]	@ (8001104 <first_check_SIM+0x120>)
 8001034:	f008 fd14 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001038:	f7ff febe 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 800103c:	4836      	ldr	r0, [pc, #216]	@ (8001118 <first_check_SIM+0x134>)
 800103e:	f7ff feab 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001042:	4631      	mov	r1, r6
 8001044:	4628      	mov	r0, r5
 8001046:	f008 fd25 	bl	8009a94 <strstr>
 800104a:	4604      	mov	r4, r0
 800104c:	2800      	cmp	r0, #0
 800104e:	d145      	bne.n	80010dc <first_check_SIM+0xf8>
	}
	receive_response("First check SIM MODULE\n");
 8001050:	4830      	ldr	r0, [pc, #192]	@ (8001114 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001052:	4e2f      	ldr	r6, [pc, #188]	@ (8001110 <first_check_SIM+0x12c>)
 8001054:	4d2b      	ldr	r5, [pc, #172]	@ (8001104 <first_check_SIM+0x120>)
		receive_response("Check status of SIM MODULE\n");
 8001056:	4f31      	ldr	r7, [pc, #196]	@ (800111c <first_check_SIM+0x138>)
	receive_response("First check SIM MODULE\n");
 8001058:	f7ff feca 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800105c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001060:	4621      	mov	r1, r4
 8001062:	4828      	ldr	r0, [pc, #160]	@ (8001104 <first_check_SIM+0x120>)
 8001064:	f008 fcfc 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001068:	f7ff fea6 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 800106c:	482c      	ldr	r0, [pc, #176]	@ (8001120 <first_check_SIM+0x13c>)
 800106e:	f7ff fe93 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001072:	4631      	mov	r1, r6
 8001074:	4628      	mov	r0, r5
 8001076:	f008 fd0d 	bl	8009a94 <strstr>
 800107a:	4604      	mov	r4, r0
 800107c:	bb90      	cbnz	r0, 80010e4 <first_check_SIM+0x100>
		osDelay(1000);
	}
	receive_response("Check status of SIM MODULE\n");
 800107e:	4827      	ldr	r0, [pc, #156]	@ (800111c <first_check_SIM+0x138>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CMEE=2\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001080:	4e23      	ldr	r6, [pc, #140]	@ (8001110 <first_check_SIM+0x12c>)
 8001082:	4d20      	ldr	r5, [pc, #128]	@ (8001104 <first_check_SIM+0x120>)
		receive_response("Check enable result code\n");
 8001084:	4f27      	ldr	r7, [pc, #156]	@ (8001124 <first_check_SIM+0x140>)
	receive_response("Check status of SIM MODULE\n");
 8001086:	f7ff feb3 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800108a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800108e:	4621      	mov	r1, r4
 8001090:	481c      	ldr	r0, [pc, #112]	@ (8001104 <first_check_SIM+0x120>)
 8001092:	f008 fce5 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001096:	f7ff fe8f 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CMEE=2\r\n");
 800109a:	4823      	ldr	r0, [pc, #140]	@ (8001128 <first_check_SIM+0x144>)
 800109c:	f7ff fe7c 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80010a0:	4631      	mov	r1, r6
 80010a2:	4628      	mov	r0, r5
 80010a4:	f008 fcf6 	bl	8009a94 <strstr>
 80010a8:	4604      	mov	r4, r0
 80010aa:	bb18      	cbnz	r0, 80010f4 <first_check_SIM+0x110>
		osDelay(1000);
	}
	receive_response("Check enable result code\n");
 80010ac:	481d      	ldr	r0, [pc, #116]	@ (8001124 <first_check_SIM+0x140>)
 80010ae:	f7ff fe9f 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80010b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010b6:	4621      	mov	r1, r4
 80010b8:	4812      	ldr	r0, [pc, #72]	@ (8001104 <first_check_SIM+0x120>)
 80010ba:	f008 fcd1 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80010be:	f7ff fe7b 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 80010c2:	2001      	movs	r0, #1
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80010c6:	4630      	mov	r0, r6
 80010c8:	f7ff fe92 	bl	8000df0 <receive_response>
		osDelay(1000);
 80010cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d0:	f005 f84a 	bl	8006168 <osDelay>
		osDelay(200);
 80010d4:	20c8      	movs	r0, #200	@ 0xc8
 80010d6:	f005 f847 	bl	8006168 <osDelay>
 80010da:	e797      	b.n	800100c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 80010dc:	4638      	mov	r0, r7
 80010de:	f7ff fe87 	bl	8000df0 <receive_response>
 80010e2:	e7ae      	b.n	8001042 <first_check_SIM+0x5e>
		receive_response("Check status of SIM MODULE\n");
 80010e4:	4638      	mov	r0, r7
 80010e6:	f7ff fe83 	bl	8000df0 <receive_response>
		osDelay(1000);
 80010ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ee:	f005 f83b 	bl	8006168 <osDelay>
 80010f2:	e7be      	b.n	8001072 <first_check_SIM+0x8e>
		receive_response("Check enable result code\n");
 80010f4:	4638      	mov	r0, r7
 80010f6:	f7ff fe7b 	bl	8000df0 <receive_response>
		osDelay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fe:	f005 f833 	bl	8006168 <osDelay>
 8001102:	e7cd      	b.n	80010a0 <first_check_SIM+0xbc>
 8001104:	200002e4 	.word	0x200002e4
 8001108:	0800cd89 	.word	0x0800cd89
 800110c:	0800cd65 	.word	0x0800cd65
 8001110:	0800cdae 	.word	0x0800cdae
 8001114:	0800cd96 	.word	0x0800cd96
 8001118:	0800cd91 	.word	0x0800cd91
 800111c:	0800cdbb 	.word	0x0800cdbb
 8001120:	0800cdb1 	.word	0x0800cdb1
 8001124:	0800cde3 	.word	0x0800cde3
 8001128:	0800cdd7 	.word	0x0800cdd7

0800112c <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800112c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800112e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001130:	4604      	mov	r4, r0
 8001132:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001136:	b1cb      	cbz	r3, 800116c <extract_last_12_digits_bcd+0x40>
 8001138:	2b41      	cmp	r3, #65	@ 0x41
 800113a:	d1f9      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
 800113c:	7803      	ldrb	r3, [r0, #0]
 800113e:	2b54      	cmp	r3, #84	@ 0x54
 8001140:	d1f6      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
 8001142:	7843      	ldrb	r3, [r0, #1]
 8001144:	2b2b      	cmp	r3, #43	@ 0x2b
 8001146:	d1f3      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
 8001148:	7883      	ldrb	r3, [r0, #2]
 800114a:	2b43      	cmp	r3, #67	@ 0x43
 800114c:	d1f0      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800114e:	78c3      	ldrb	r3, [r0, #3]
 8001150:	2b47      	cmp	r3, #71	@ 0x47
 8001152:	d1ed      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
 8001154:	7903      	ldrb	r3, [r0, #4]
 8001156:	2b53      	cmp	r3, #83	@ 0x53
 8001158:	d1ea      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
 800115a:	7943      	ldrb	r3, [r0, #5]
 800115c:	2b4e      	cmp	r3, #78	@ 0x4e
 800115e:	d1e7      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001160:	7983      	ldrb	r3, [r0, #6]
 8001162:	2b3d      	cmp	r3, #61	@ 0x3d
 8001164:	d1e4      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001166:	79c3      	ldrb	r3, [r0, #7]
 8001168:	2b31      	cmp	r3, #49	@ 0x31
 800116a:	d1e1      	bne.n	8001130 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800116c:	4922      	ldr	r1, [pc, #136]	@ (80011f8 <extract_last_12_digits_bcd+0xcc>)
 800116e:	4823      	ldr	r0, [pc, #140]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 8001170:	f002 faaa 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001174:	4821      	ldr	r0, [pc, #132]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 8001176:	4621      	mov	r1, r4
 8001178:	f002 faa6 	bl	80036c8 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800117c:	7823      	ldrb	r3, [r4, #0]
 800117e:	b96b      	cbnz	r3, 800119c <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 8001180:	491f      	ldr	r1, [pc, #124]	@ (8001200 <extract_last_12_digits_bcd+0xd4>)
 8001182:	481e      	ldr	r0, [pc, #120]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 8001184:	f002 faa0 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 8001188:	4629      	mov	r1, r5
 800118a:	481c      	ldr	r0, [pc, #112]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 800118c:	f002 fa9c 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001190:	491c      	ldr	r1, [pc, #112]	@ (8001204 <extract_last_12_digits_bcd+0xd8>)
 8001192:	481a      	ldr	r0, [pc, #104]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 8001194:	f002 fa98 	bl	80036c8 <uart_transmit_string>
}
 8001198:	b004      	add	sp, #16
 800119a:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 800119c:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 800119e:	7821      	ldrb	r1, [r4, #0]
 80011a0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80011a4:	4623      	mov	r3, r4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	3401      	adds	r4, #1
 80011aa:	b109      	cbz	r1, 80011b0 <extract_last_12_digits_bcd+0x84>
 80011ac:	2a09      	cmp	r2, #9
 80011ae:	d8f6      	bhi.n	800119e <extract_last_12_digits_bcd+0x72>
 80011b0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80011b2:	4616      	mov	r6, r2
 80011b4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80011b8:	3930      	subs	r1, #48	@ 0x30
 80011ba:	2909      	cmp	r1, #9
 80011bc:	d9f9      	bls.n	80011b2 <extract_last_12_digits_bcd+0x86>
 80011be:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80011c0:	4911      	ldr	r1, [pc, #68]	@ (8001208 <extract_last_12_digits_bcd+0xdc>)
 80011c2:	480e      	ldr	r0, [pc, #56]	@ (80011fc <extract_last_12_digits_bcd+0xd0>)
 80011c4:	f002 fa80 	bl	80036c8 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80011c8:	4a10      	ldr	r2, [pc, #64]	@ (800120c <extract_last_12_digits_bcd+0xe0>)
 80011ca:	4623      	mov	r3, r4
 80011cc:	210a      	movs	r1, #10
 80011ce:	a801      	add	r0, sp, #4
 80011d0:	f008 fb4a 	bl	8009868 <sniprintf>
		if (digit_count >= 12) {
 80011d4:	2c0b      	cmp	r4, #11
 80011d6:	d9d3      	bls.n	8001180 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80011d8:	f1a6 030c 	sub.w	r3, r6, #12
 80011dc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80011de:	7819      	ldrb	r1, [r3, #0]
 80011e0:	785a      	ldrb	r2, [r3, #1]
 80011e2:	3930      	subs	r1, #48	@ 0x30
 80011e4:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80011e6:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80011e8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80011ec:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80011ee:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 80011f2:	d1f4      	bne.n	80011de <extract_last_12_digits_bcd+0xb2>
 80011f4:	e7c4      	b.n	8001180 <extract_last_12_digits_bcd+0x54>
 80011f6:	bf00      	nop
 80011f8:	0800cdfd 	.word	0x0800cdfd
 80011fc:	20000870 	.word	0x20000870
 8001200:	0800ce1f 	.word	0x0800ce1f
 8001204:	0800d47e 	.word	0x0800d47e
 8001208:	0800ce3a 	.word	0x0800ce3a
 800120c:	0800ce62 	.word	0x0800ce62

08001210 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001212:	489c      	ldr	r0, [pc, #624]	@ (8001484 <check_SIM_ready+0x274>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001214:	4d9c      	ldr	r5, [pc, #624]	@ (8001488 <check_SIM_ready+0x278>)
 8001216:	4c9d      	ldr	r4, [pc, #628]	@ (800148c <check_SIM_ready+0x27c>)
		receive_response("Check IMEI-0:\n");
 8001218:	4e9d      	ldr	r6, [pc, #628]	@ (8001490 <check_SIM_ready+0x280>)
	send_AT_command(GET_IMEI);
 800121a:	f7ff fdbd 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800121e:	4629      	mov	r1, r5
 8001220:	4620      	mov	r0, r4
 8001222:	f008 fc37 	bl	8009a94 <strstr>
 8001226:	2800      	cmp	r0, #0
 8001228:	f000 80f8 	beq.w	800141c <check_SIM_ready+0x20c>
		osDelay(1000);
	}
	receive_response("Check IMEI-0:\n");
 800122c:	4898      	ldr	r0, [pc, #608]	@ (8001490 <check_SIM_ready+0x280>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800122e:	4d96      	ldr	r5, [pc, #600]	@ (8001488 <check_SIM_ready+0x278>)
 8001230:	4c96      	ldr	r4, [pc, #600]	@ (800148c <check_SIM_ready+0x27c>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001232:	4e98      	ldr	r6, [pc, #608]	@ (8001494 <check_SIM_ready+0x284>)
	receive_response("Check IMEI-0:\n");
 8001234:	f7ff fddc 	bl	8000df0 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001238:	4997      	ldr	r1, [pc, #604]	@ (8001498 <check_SIM_ready+0x288>)
 800123a:	4894      	ldr	r0, [pc, #592]	@ (800148c <check_SIM_ready+0x27c>)
 800123c:	f7ff ff76 	bl	800112c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001240:	4996      	ldr	r1, [pc, #600]	@ (800149c <check_SIM_ready+0x28c>)
 8001242:	4897      	ldr	r0, [pc, #604]	@ (80014a0 <check_SIM_ready+0x290>)
 8001244:	f002 fa40 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 8001248:	4993      	ldr	r1, [pc, #588]	@ (8001498 <check_SIM_ready+0x288>)
 800124a:	4895      	ldr	r0, [pc, #596]	@ (80014a0 <check_SIM_ready+0x290>)
 800124c:	f002 fa3c 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001250:	4994      	ldr	r1, [pc, #592]	@ (80014a4 <check_SIM_ready+0x294>)
 8001252:	4893      	ldr	r0, [pc, #588]	@ (80014a0 <check_SIM_ready+0x290>)
 8001254:	f002 fa38 	bl	80036c8 <uart_transmit_string>
	osDelay(100);
 8001258:	2064      	movs	r0, #100	@ 0x64
 800125a:	f004 ff85 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800125e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001262:	2100      	movs	r1, #0
 8001264:	4889      	ldr	r0, [pc, #548]	@ (800148c <check_SIM_ready+0x27c>)
 8001266:	f008 fbfb 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 800126a:	f7ff fda5 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 800126e:	488e      	ldr	r0, [pc, #568]	@ (80014a8 <check_SIM_ready+0x298>)
 8001270:	f7ff fd92 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001274:	4629      	mov	r1, r5
 8001276:	4620      	mov	r0, r4
 8001278:	f008 fc0c 	bl	8009a94 <strstr>
 800127c:	2800      	cmp	r0, #0
 800127e:	f000 80d5 	beq.w	800142c <check_SIM_ready+0x21c>
		osDelay(1000);
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 8001282:	4884      	ldr	r0, [pc, #528]	@ (8001494 <check_SIM_ready+0x284>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001284:	4e80      	ldr	r6, [pc, #512]	@ (8001488 <check_SIM_ready+0x278>)
 8001286:	4d81      	ldr	r5, [pc, #516]	@ (800148c <check_SIM_ready+0x27c>)
		receive_response("Check SIM\n");
 8001288:	4f88      	ldr	r7, [pc, #544]	@ (80014ac <check_SIM_ready+0x29c>)
	receive_response("Check MODEL IDENTIFICATION\n");
 800128a:	f7ff fdb1 	bl	8000df0 <receive_response>
	osDelay(100);
 800128e:	2064      	movs	r0, #100	@ 0x64
 8001290:	f004 ff6a 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001294:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001298:	2100      	movs	r1, #0
 800129a:	487c      	ldr	r0, [pc, #496]	@ (800148c <check_SIM_ready+0x27c>)
 800129c:	f008 fbe0 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80012a0:	f7ff fd8a 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80012a4:	4882      	ldr	r0, [pc, #520]	@ (80014b0 <check_SIM_ready+0x2a0>)
 80012a6:	f7ff fd77 	bl	8000d98 <send_AT_command>
	osDelay(100);
 80012aa:	2064      	movs	r0, #100	@ 0x64
 80012ac:	f004 ff5c 	bl	8006168 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80012b0:	2405      	movs	r4, #5
 80012b2:	4631      	mov	r1, r6
 80012b4:	4628      	mov	r0, r5
 80012b6:	f008 fbed 	bl	8009a94 <strstr>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	f000 80be 	beq.w	800143c <check_SIM_ready+0x22c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 80012c0:	487a      	ldr	r0, [pc, #488]	@ (80014ac <check_SIM_ready+0x29c>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80012c2:	4e7c      	ldr	r6, [pc, #496]	@ (80014b4 <check_SIM_ready+0x2a4>)
 80012c4:	4d71      	ldr	r5, [pc, #452]	@ (800148c <check_SIM_ready+0x27c>)
		receive_response("Check SIM CCID\n");
 80012c6:	4f7c      	ldr	r7, [pc, #496]	@ (80014b8 <check_SIM_ready+0x2a8>)
	receive_response("Check SIM\n");
 80012c8:	f7ff fd92 	bl	8000df0 <receive_response>
	osDelay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f004 ff4b 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012d6:	2100      	movs	r1, #0
 80012d8:	486c      	ldr	r0, [pc, #432]	@ (800148c <check_SIM_ready+0x27c>)
 80012da:	f008 fbc1 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80012de:	f7ff fd6b 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 80012e2:	2064      	movs	r0, #100	@ 0x64
 80012e4:	f004 ff40 	bl	8006168 <osDelay>
	send_AT_command(GET_SIM_CCID);
 80012e8:	4874      	ldr	r0, [pc, #464]	@ (80014bc <check_SIM_ready+0x2ac>)
 80012ea:	f7ff fd55 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 80012ee:	2405      	movs	r4, #5
 80012f0:	4631      	mov	r1, r6
 80012f2:	4628      	mov	r0, r5
 80012f4:	f008 fbce 	bl	8009a94 <strstr>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	f000 80b3 	beq.w	8001464 <check_SIM_ready+0x254>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 80012fe:	486e      	ldr	r0, [pc, #440]	@ (80014b8 <check_SIM_ready+0x2a8>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001300:	4d6f      	ldr	r5, [pc, #444]	@ (80014c0 <check_SIM_ready+0x2b0>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001302:	4e70      	ldr	r6, [pc, #448]	@ (80014c4 <check_SIM_ready+0x2b4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001304:	4c60      	ldr	r4, [pc, #384]	@ (8001488 <check_SIM_ready+0x278>)
	receive_response("Check SIM CCID\n");
 8001306:	f7ff fd73 	bl	8000df0 <receive_response>
	osDelay(100);
 800130a:	2064      	movs	r0, #100	@ 0x64
 800130c:	f004 ff2c 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001310:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001314:	2100      	movs	r1, #0
 8001316:	485d      	ldr	r0, [pc, #372]	@ (800148c <check_SIM_ready+0x27c>)
 8001318:	f008 fba2 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 800131c:	f7ff fd4c 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001320:	4869      	ldr	r0, [pc, #420]	@ (80014c8 <check_SIM_ready+0x2b8>)
 8001322:	f7ff fd39 	bl	8000d98 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001326:	4869      	ldr	r0, [pc, #420]	@ (80014cc <check_SIM_ready+0x2bc>)
 8001328:	f7ff fd62 	bl	8000df0 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 800132c:	4628      	mov	r0, r5
 800132e:	f7ff fd33 	bl	8000d98 <send_AT_command>
		osDelay(150);
 8001332:	2096      	movs	r0, #150	@ 0x96
 8001334:	f004 ff18 	bl	8006168 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001338:	4630      	mov	r0, r6
 800133a:	f7ff fd59 	bl	8000df0 <receive_response>
		osDelay(1000);
 800133e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001342:	f004 ff11 	bl	8006168 <osDelay>
		osDelay(300);
 8001346:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800134a:	f004 ff0d 	bl	8006168 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800134e:	484f      	ldr	r0, [pc, #316]	@ (800148c <check_SIM_ready+0x27c>)
 8001350:	4621      	mov	r1, r4
 8001352:	f008 fb9f 	bl	8009a94 <strstr>
		if(first_pointer != NULL){
 8001356:	2800      	cmp	r0, #0
 8001358:	d0e8      	beq.n	800132c <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 800135a:	4621      	mov	r1, r4
 800135c:	3001      	adds	r0, #1
 800135e:	f008 fb99 	bl	8009a94 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001362:	2800      	cmp	r0, #0
 8001364:	d0e2      	beq.n	800132c <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001366:	2064      	movs	r0, #100	@ 0x64
 8001368:	f004 fefe 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800136c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001370:	2100      	movs	r1, #0
 8001372:	4846      	ldr	r0, [pc, #280]	@ (800148c <check_SIM_ready+0x27c>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 8001374:	4d56      	ldr	r5, [pc, #344]	@ (80014d0 <check_SIM_ready+0x2c0>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 8001376:	4e57      	ldr	r6, [pc, #348]	@ (80014d4 <check_SIM_ready+0x2c4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001378:	4c43      	ldr	r4, [pc, #268]	@ (8001488 <check_SIM_ready+0x278>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800137a:	f008 fb71 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 800137e:	f7ff fd1b 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 8001382:	4855      	ldr	r0, [pc, #340]	@ (80014d8 <check_SIM_ready+0x2c8>)
 8001384:	f7ff fd08 	bl	8000d98 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001388:	4854      	ldr	r0, [pc, #336]	@ (80014dc <check_SIM_ready+0x2cc>)
 800138a:	f7ff fd31 	bl	8000df0 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 800138e:	4628      	mov	r0, r5
 8001390:	f7ff fd02 	bl	8000d98 <send_AT_command>
		osDelay(150);
 8001394:	2096      	movs	r0, #150	@ 0x96
 8001396:	f004 fee7 	bl	8006168 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff fd28 	bl	8000df0 <receive_response>
		osDelay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a4:	f004 fee0 	bl	8006168 <osDelay>
		osDelay(300);
 80013a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ac:	f004 fedc 	bl	8006168 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80013b0:	4836      	ldr	r0, [pc, #216]	@ (800148c <check_SIM_ready+0x27c>)
 80013b2:	4621      	mov	r1, r4
 80013b4:	f008 fb6e 	bl	8009a94 <strstr>
		if(first_pointer != NULL){
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d0e8      	beq.n	800138e <check_SIM_ready+0x17e>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 80013bc:	4621      	mov	r1, r4
 80013be:	3001      	adds	r0, #1
 80013c0:	f008 fb68 	bl	8009a94 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0e2      	beq.n	800138e <check_SIM_ready+0x17e>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80013c8:	2064      	movs	r0, #100	@ 0x64
 80013ca:	f004 fecd 	bl	8006168 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 80013ce:	4841      	ldr	r0, [pc, #260]	@ (80014d4 <check_SIM_ready+0x2c4>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80013d0:	4d2d      	ldr	r5, [pc, #180]	@ (8001488 <check_SIM_ready+0x278>)
 80013d2:	4c2e      	ldr	r4, [pc, #184]	@ (800148c <check_SIM_ready+0x27c>)
		receive_response("Check Signal Quality Report\n");
 80013d4:	4e42      	ldr	r6, [pc, #264]	@ (80014e0 <check_SIM_ready+0x2d0>)
	receive_response("Check Network Registration Status (PS Service)\n");
 80013d6:	f7ff fd0b 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80013da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80013de:	2100      	movs	r1, #0
 80013e0:	482a      	ldr	r0, [pc, #168]	@ (800148c <check_SIM_ready+0x27c>)
 80013e2:	f008 fb3d 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80013e6:	f7ff fce7 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80013ea:	483e      	ldr	r0, [pc, #248]	@ (80014e4 <check_SIM_ready+0x2d4>)
 80013ec:	f7ff fcd4 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80013f0:	4629      	mov	r1, r5
 80013f2:	4620      	mov	r0, r4
 80013f4:	f008 fb4e 	bl	8009a94 <strstr>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d03e      	beq.n	800147a <check_SIM_ready+0x26a>
	}
	receive_response("Check Signal Quality Report\n");
 80013fc:	4838      	ldr	r0, [pc, #224]	@ (80014e0 <check_SIM_ready+0x2d0>)
 80013fe:	f7ff fcf7 	bl	8000df0 <receive_response>
	osDelay(100);
 8001402:	2064      	movs	r0, #100	@ 0x64
 8001404:	f004 feb0 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001408:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800140c:	2100      	movs	r1, #0
 800140e:	481f      	ldr	r0, [pc, #124]	@ (800148c <check_SIM_ready+0x27c>)
 8001410:	f008 fb26 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001414:	f7ff fcd0 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	


	return 1;
 8001418:	2001      	movs	r0, #1
 800141a:	e022      	b.n	8001462 <check_SIM_ready+0x252>
		receive_response("Check IMEI-0:\n");
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff fce7 	bl	8000df0 <receive_response>
		osDelay(1000);
 8001422:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001426:	f004 fe9f 	bl	8006168 <osDelay>
 800142a:	e6f8      	b.n	800121e <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 800142c:	4630      	mov	r0, r6
 800142e:	f7ff fcdf 	bl	8000df0 <receive_response>
		osDelay(1000);
 8001432:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001436:	f004 fe97 	bl	8006168 <osDelay>
 800143a:	e71b      	b.n	8001274 <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 800143c:	4638      	mov	r0, r7
 800143e:	f7ff fcd7 	bl	8000df0 <receive_response>
		osDelay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001446:	f004 fe8f 	bl	8006168 <osDelay>
		if (count_check_sim >= 5){
 800144a:	3c01      	subs	r4, #1
 800144c:	f47f af31 	bne.w	80012b2 <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001450:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	@ (800148c <check_SIM_ready+0x27c>)
 8001458:	f008 fb02 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 800145c:	f7ff fcac 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001460:	2000      	movs	r0, #0
}
 8001462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 8001464:	4638      	mov	r0, r7
 8001466:	f7ff fcc3 	bl	8000df0 <receive_response>
		osDelay(1000);
 800146a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146e:	f004 fe7b 	bl	8006168 <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 8001472:	3c01      	subs	r4, #1
 8001474:	f47f af3c 	bne.w	80012f0 <check_SIM_ready+0xe0>
 8001478:	e7ea      	b.n	8001450 <check_SIM_ready+0x240>
		receive_response("Check Signal Quality Report\n");
 800147a:	4630      	mov	r0, r6
 800147c:	f7ff fcb8 	bl	8000df0 <receive_response>
 8001480:	e7b6      	b.n	80013f0 <check_SIM_ready+0x1e0>
 8001482:	bf00      	nop
 8001484:	0800ce65 	.word	0x0800ce65
 8001488:	0800cdae 	.word	0x0800cdae
 800148c:	200002e4 	.word	0x200002e4
 8001490:	0800ce71 	.word	0x0800ce71
 8001494:	0800cea3 	.word	0x0800cea3
 8001498:	20000260 	.word	0x20000260
 800149c:	0800ce80 	.word	0x0800ce80
 80014a0:	20000870 	.word	0x20000870
 80014a4:	0800d47e 	.word	0x0800d47e
 80014a8:	0800ce99 	.word	0x0800ce99
 80014ac:	0800ceca 	.word	0x0800ceca
 80014b0:	0800cebf 	.word	0x0800cebf
 80014b4:	0800cef0 	.word	0x0800cef0
 80014b8:	0800cee0 	.word	0x0800cee0
 80014bc:	0800ced5 	.word	0x0800ced5
 80014c0:	0800cf39 	.word	0x0800cf39
 80014c4:	0800cf44 	.word	0x0800cf44
 80014c8:	0800cef8 	.word	0x0800cef8
 80014cc:	0800cf04 	.word	0x0800cf04
 80014d0:	0800cfb6 	.word	0x0800cfb6
 80014d4:	0800cfc2 	.word	0x0800cfc2
 80014d8:	0800cf74 	.word	0x0800cf74
 80014dc:	0800cf81 	.word	0x0800cf81
 80014e0:	0800cffb 	.word	0x0800cffb
 80014e4:	0800cff2 	.word	0x0800cff2

080014e8 <check_configure_APN>:

void check_configure_APN(){
 80014e8:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <check_configure_APN+0x18>)
 80014ec:	f7ff fc54 	bl	8000d98 <send_AT_command>
	osDelay(150);
 80014f0:	2096      	movs	r0, #150	@ 0x96
 80014f2:	f004 fe39 	bl	8006168 <osDelay>
	receive_response("Check Configuring APN\n");
}
 80014f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 80014fa:	4802      	ldr	r0, [pc, #8]	@ (8001504 <check_configure_APN+0x1c>)
 80014fc:	f7ff bc78 	b.w	8000df0 <receive_response>
 8001500:	0800d018 	.word	0x0800d018
 8001504:	0800d026 	.word	0x0800d026

08001508 <configure_APN>:

int configure_APN(int context_id){
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800150c:	2200      	movs	r2, #0
 800150e:	9204      	str	r2, [sp, #16]
 8001510:	4a16      	ldr	r2, [pc, #88]	@ (800156c <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001512:	4c17      	ldr	r4, [pc, #92]	@ (8001570 <configure_APN+0x68>)
 8001514:	4d17      	ldr	r5, [pc, #92]	@ (8001574 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001516:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800151a:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <configure_APN+0x70>)
 800151c:	9201      	str	r2, [sp, #4]
 800151e:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001520:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001526:	9200      	str	r2, [sp, #0]
 8001528:	a806      	add	r0, sp, #24
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <configure_APN+0x74>)
 800152c:	f008 f99c 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001530:	a806      	add	r0, sp, #24
 8001532:	f7ff fc31 	bl	8000d98 <send_AT_command>
	osDelay(150);
 8001536:	2096      	movs	r0, #150	@ 0x96
 8001538:	f004 fe16 	bl	8006168 <osDelay>
	receive_response("CONFIGURE APN\n");
 800153c:	4810      	ldr	r0, [pc, #64]	@ (8001580 <configure_APN+0x78>)
 800153e:	f7ff fc57 	bl	8000df0 <receive_response>
		check_configure_APN();
 8001542:	f7ff ffd1 	bl	80014e8 <check_configure_APN>
		osDelay(1300);
 8001546:	f240 5014 	movw	r0, #1300	@ 0x514
 800154a:	f004 fe0d 	bl	8006168 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800154e:	4908      	ldr	r1, [pc, #32]	@ (8001570 <configure_APN+0x68>)
 8001550:	4628      	mov	r0, r5
 8001552:	f008 fa9f 	bl	8009a94 <strstr>
		if(first_pointer != NULL){
 8001556:	2800      	cmp	r0, #0
 8001558:	d0f3      	beq.n	8001542 <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 800155a:	4621      	mov	r1, r4
 800155c:	3001      	adds	r0, #1
 800155e:	f008 fa99 	bl	8009a94 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001562:	2800      	cmp	r0, #0
 8001564:	d0ed      	beq.n	8001542 <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001566:	2001      	movs	r0, #1
 8001568:	b047      	add	sp, #284	@ 0x11c
 800156a:	bd30      	pop	{r4, r5, pc}
 800156c:	0800db6b 	.word	0x0800db6b
 8001570:	0800cdae 	.word	0x0800cdae
 8001574:	200002e4 	.word	0x200002e4
 8001578:	0800d063 	.word	0x0800d063
 800157c:	0800d03d 	.word	0x0800d03d
 8001580:	0800d06d 	.word	0x0800d06d

08001584 <check_activate_context>:

void check_activate_context(){
 8001584:	b500      	push	{lr}
 8001586:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001588:	4906      	ldr	r1, [pc, #24]	@ (80015a4 <check_activate_context+0x20>)
 800158a:	4668      	mov	r0, sp
 800158c:	f008 fb1c 	bl	8009bc8 <strcpy>
	send_AT_command((char*)command);
 8001590:	4668      	mov	r0, sp
 8001592:	f7ff fc01 	bl	8000d98 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <check_activate_context+0x24>)
 8001598:	f7ff fc2a 	bl	8000df0 <receive_response>
}
 800159c:	b021      	add	sp, #132	@ 0x84
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a2:	bf00      	nop
 80015a4:	0800d07c 	.word	0x0800d07c
 80015a8:	0800d088 	.word	0x0800d088

080015ac <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 80015ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b0:	b0a0      	sub	sp, #128	@ 0x80
 80015b2:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80015b4:	4a26      	ldr	r2, [pc, #152]	@ (8001650 <activate_context+0xa4>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 80015b6:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001660 <activate_context+0xb4>
 80015ba:	4e26      	ldr	r6, [pc, #152]	@ (8001654 <activate_context+0xa8>)
			count_error = 0;
//			return 0;
			break;
		}

		receive_response("Check Activate Context\r\n");
 80015bc:	4f26      	ldr	r7, [pc, #152]	@ (8001658 <activate_context+0xac>)
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80015be:	2180      	movs	r1, #128	@ 0x80
 80015c0:	4668      	mov	r0, sp
 80015c2:	f008 f951 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 80015c6:	4668      	mov	r0, sp
 80015c8:	f7ff fbe6 	bl	8000d98 <send_AT_command>
	osDelay(150);
 80015cc:	2096      	movs	r0, #150	@ 0x96
 80015ce:	f004 fdcb 	bl	8006168 <osDelay>
	receive_response("Activate Context\r\n");
 80015d2:	4822      	ldr	r0, [pc, #136]	@ (800165c <activate_context+0xb0>)
 80015d4:	f7ff fc0c 	bl	8000df0 <receive_response>
 80015d8:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 80015da:	2400      	movs	r4, #0
		check_activate_context();
 80015dc:	f7ff ffd2 	bl	8001584 <check_activate_context>
		osDelay(300);
 80015e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015e4:	f004 fdc0 	bl	8006168 <osDelay>
		if(count_check >= 50){
 80015e8:	3d01      	subs	r5, #1
 80015ea:	d021      	beq.n	8001630 <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 80015ec:	4641      	mov	r1, r8
 80015ee:	4630      	mov	r0, r6
 80015f0:	f008 fa50 	bl	8009a94 <strstr>
 80015f4:	b340      	cbz	r0, 8001648 <activate_context+0x9c>
			osDelay(500);
 80015f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015fa:	f004 fdb5 	bl	8006168 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001602:	2100      	movs	r1, #0
 8001604:	4630      	mov	r0, r6
 8001606:	f008 fa2b 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 800160a:	f7ff fbd5 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 800160e:	4668      	mov	r0, sp
 8001610:	f7ff fbc2 	bl	8000d98 <send_AT_command>
			count_error++;
 8001614:	3401      	adds	r4, #1
			osDelay(200);
 8001616:	20c8      	movs	r0, #200	@ 0xc8
 8001618:	f004 fda6 	bl	8006168 <osDelay>
		if(count_error >= 3){
 800161c:	2c03      	cmp	r4, #3
 800161e:	d113      	bne.n	8001648 <activate_context+0x9c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001620:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001624:	2100      	movs	r1, #0
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <activate_context+0xa8>)
 8001628:	f008 fa1a 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 800162c:	f7ff fbc4 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001630:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001634:	2100      	movs	r1, #0
 8001636:	4807      	ldr	r0, [pc, #28]	@ (8001654 <activate_context+0xa8>)
 8001638:	f008 fa12 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 800163c:	f7ff fbbc 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001640:	2001      	movs	r0, #1
 8001642:	b020      	add	sp, #128	@ 0x80
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001648:	4638      	mov	r0, r7
 800164a:	f7ff fbd1 	bl	8000df0 <receive_response>
		check_activate_context();
 800164e:	e7c5      	b.n	80015dc <activate_context+0x30>
 8001650:	0800d0a0 	.word	0x0800d0a0
 8001654:	200002e4 	.word	0x200002e4
 8001658:	0800d0b4 	.word	0x0800d0b4
 800165c:	0800d0ba 	.word	0x0800d0ba
 8001660:	0800d0ae 	.word	0x0800d0ae

08001664 <deactivate_context>:

int deactivate_context(int context_id){
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f004 fd7c 	bl	8006168 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001670:	4623      	mov	r3, r4
 8001672:	4a1d      	ldr	r2, [pc, #116]	@ (80016e8 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001674:	4e1d      	ldr	r6, [pc, #116]	@ (80016ec <deactivate_context+0x88>)
 8001676:	4d1e      	ldr	r5, [pc, #120]	@ (80016f0 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001678:	4f1e      	ldr	r7, [pc, #120]	@ (80016f4 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 800167a:	2180      	movs	r1, #128	@ 0x80
 800167c:	4668      	mov	r0, sp
 800167e:	f008 f8f3 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001682:	4668      	mov	r0, sp
 8001684:	f7ff fb88 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001688:	2415      	movs	r4, #21
 800168a:	4631      	mov	r1, r6
 800168c:	4628      	mov	r0, r5
 800168e:	f008 fa01 	bl	8009a94 <strstr>
 8001692:	b178      	cbz	r0, 80016b4 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001694:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <deactivate_context+0x90>)
 8001696:	f7ff fbab 	bl	8000df0 <receive_response>
	osDelay(100);
 800169a:	2064      	movs	r0, #100	@ 0x64
 800169c:	f004 fd64 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016a4:	2100      	movs	r1, #0
 80016a6:	4812      	ldr	r0, [pc, #72]	@ (80016f0 <deactivate_context+0x8c>)
 80016a8:	f008 f9da 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80016ac:	f7ff fb84 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80016b0:	2001      	movs	r0, #1
 80016b2:	e010      	b.n	80016d6 <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 80016b4:	4638      	mov	r0, r7
 80016b6:	f7ff fb9b 	bl	8000df0 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80016ba:	490f      	ldr	r1, [pc, #60]	@ (80016f8 <deactivate_context+0x94>)
 80016bc:	4628      	mov	r0, r5
 80016be:	f008 f9e9 	bl	8009a94 <strstr>
 80016c2:	b150      	cbz	r0, 80016da <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016c8:	2100      	movs	r1, #0
 80016ca:	4809      	ldr	r0, [pc, #36]	@ (80016f0 <deactivate_context+0x8c>)
 80016cc:	f008 f9c8 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 80016d0:	f7ff fb72 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80016d4:	2000      	movs	r0, #0
}
 80016d6:	b021      	add	sp, #132	@ 0x84
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 80016da:	3c01      	subs	r4, #1
 80016dc:	d0f2      	beq.n	80016c4 <deactivate_context+0x60>
		osDelay(1200);
 80016de:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80016e2:	f004 fd41 	bl	8006168 <osDelay>
 80016e6:	e7d0      	b.n	800168a <deactivate_context+0x26>
 80016e8:	0800d0cd 	.word	0x0800d0cd
 80016ec:	0800cdae 	.word	0x0800cdae
 80016f0:	200002e4 	.word	0x200002e4
 80016f4:	0800d0dd 	.word	0x0800d0dd
 80016f8:	0800d0ae 	.word	0x0800d0ae

080016fc <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 80016fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001700:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001706:	f241 3397 	movw	r3, #5015	@ 0x1397
 800170a:	9303      	str	r3, [sp, #12]
 800170c:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <open_socket_service+0x144>)
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <open_socket_service+0x148>)
 8001712:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <open_socket_service+0x14c>)
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
	while(elapsed_time_ms < timeout_seconds){
//	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001714:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001860 <open_socket_service+0x164>
		if (strstr((char *) response, "ERROR") != NULL){
 8001718:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8001870 <open_socket_service+0x174>
 800171c:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8001854 <open_socket_service+0x158>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001720:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001724:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001726:	4603      	mov	r3, r0
 8001728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172c:	a826      	add	r0, sp, #152	@ 0x98
 800172e:	f008 f89b 	bl	8009868 <sniprintf>
	send_AT_command((char *) command);
 8001732:	a826      	add	r0, sp, #152	@ 0x98
 8001734:	f7ff fb30 	bl	8000d98 <send_AT_command>
	osDelay(100);
 8001738:	2064      	movs	r0, #100	@ 0x64
 800173a:	f004 fd15 	bl	8006168 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 800173e:	4943      	ldr	r1, [pc, #268]	@ (800184c <open_socket_service+0x150>)
 8001740:	4843      	ldr	r0, [pc, #268]	@ (8001850 <open_socket_service+0x154>)
 8001742:	f001 ffc1 	bl	80036c8 <uart_transmit_string>
	int count_error = 0;
 8001746:	2600      	movs	r6, #0
	int elapsed_time_ms = 0;
 8001748:	4635      	mov	r5, r6
		receive_response("Check OPEN socket service: \r\n");
 800174a:	4648      	mov	r0, r9
 800174c:	f7ff fb50 	bl	8000df0 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001750:	4651      	mov	r1, sl
 8001752:	4640      	mov	r0, r8
 8001754:	f008 f99e 	bl	8009a94 <strstr>
 8001758:	b1e8      	cbz	r0, 8001796 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800175a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800175e:	2100      	movs	r1, #0
 8001760:	4640      	mov	r0, r8
 8001762:	f008 f97d 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001766:	f7ff fb27 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 800176a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800176e:	f004 fcfb 	bl	8006168 <osDelay>
			count_error++;
 8001772:	3601      	adds	r6, #1
			send_AT_command((char *) command);
 8001774:	a826      	add	r0, sp, #152	@ 0x98
 8001776:	f7ff fb0f 	bl	8000d98 <send_AT_command>
		}
		if(count_error >= 6){
 800177a:	2e06      	cmp	r6, #6
 800177c:	d10b      	bne.n	8001796 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800177e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001782:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001784:	4833      	ldr	r0, [pc, #204]	@ (8001854 <open_socket_service+0x158>)
 8001786:	f008 f96b 	bl	8009a60 <memset>
				SIM_UART_ReInitializeRxDMA();
 800178a:	f7ff fb15 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800178e:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001790:	b066      	add	sp, #408	@ 0x198
 8001792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001796:	4930      	ldr	r1, [pc, #192]	@ (8001858 <open_socket_service+0x15c>)
 8001798:	4640      	mov	r0, r8
 800179a:	f008 f97b 	bl	8009a94 <strstr>
		elapsed_time_ms++;
 800179e:	3501      	adds	r5, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80017a0:	4a2e      	ldr	r2, [pc, #184]	@ (800185c <open_socket_service+0x160>)
 80017a2:	462b      	mov	r3, r5
 80017a4:	2180      	movs	r1, #128	@ 0x80
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80017a6:	4607      	mov	r7, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80017a8:	a806      	add	r0, sp, #24
 80017aa:	f008 f85d 	bl	8009868 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80017ae:	4828      	ldr	r0, [pc, #160]	@ (8001850 <open_socket_service+0x154>)
 80017b0:	a906      	add	r1, sp, #24
 80017b2:	f001 ff89 	bl	80036c8 <uart_transmit_string>
		osDelay(1000);
 80017b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ba:	f004 fcd5 	bl	8006168 <osDelay>
	while(elapsed_time_ms < timeout_seconds){
 80017be:	2d32      	cmp	r5, #50	@ 0x32
 80017c0:	d1c3      	bne.n	800174a <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 80017c2:	4827      	ldr	r0, [pc, #156]	@ (8001860 <open_socket_service+0x164>)
 80017c4:	f7ff fb14 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017c8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017cc:	2100      	movs	r1, #0
 80017ce:	4821      	ldr	r0, [pc, #132]	@ (8001854 <open_socket_service+0x158>)
 80017d0:	f008 f946 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80017d4:	f7ff faf0 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 80017d8:	2f00      	cmp	r7, #0
 80017da:	d0d8      	beq.n	800178e <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <open_socket_service+0x168>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80017de:	4e22      	ldr	r6, [pc, #136]	@ (8001868 <open_socket_service+0x16c>)
 80017e0:	4d1c      	ldr	r5, [pc, #112]	@ (8001854 <open_socket_service+0x158>)
			receive_response("Check SOCKET CONNECTION\n");
 80017e2:	4f22      	ldr	r7, [pc, #136]	@ (800186c <open_socket_service+0x170>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80017e4:	4623      	mov	r3, r4
 80017e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ea:	a826      	add	r0, sp, #152	@ 0x98
 80017ec:	f008 f83c 	bl	8009868 <sniprintf>
		send_AT_command((char*) command);
 80017f0:	a826      	add	r0, sp, #152	@ 0x98
 80017f2:	f7ff fad1 	bl	8000d98 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80017f6:	4631      	mov	r1, r6
 80017f8:	4628      	mov	r0, r5
 80017fa:	f008 f94b 	bl	8009a94 <strstr>
 80017fe:	4604      	mov	r4, r0
 8001800:	b160      	cbz	r0, 800181c <open_socket_service+0x120>
		osDelay(100);
 8001802:	2064      	movs	r0, #100	@ 0x64
 8001804:	f004 fcb0 	bl	8006168 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001808:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800180c:	2100      	movs	r1, #0
 800180e:	4811      	ldr	r0, [pc, #68]	@ (8001854 <open_socket_service+0x158>)
 8001810:	f008 f926 	bl	8009a60 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001814:	f7ff fad0 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001818:	2001      	movs	r0, #1
 800181a:	e7b9      	b.n	8001790 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 800181c:	4638      	mov	r0, r7
 800181e:	f7ff fae7 	bl	8000df0 <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001822:	4913      	ldr	r1, [pc, #76]	@ (8001870 <open_socket_service+0x174>)
 8001824:	4628      	mov	r0, r5
 8001826:	f008 f935 	bl	8009a94 <strstr>
 800182a:	b118      	cbz	r0, 8001834 <open_socket_service+0x138>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800182c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001830:	4621      	mov	r1, r4
 8001832:	e7a7      	b.n	8001784 <open_socket_service+0x88>
			osDelay(1000);
 8001834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001838:	f004 fc96 	bl	8006168 <osDelay>
 800183c:	e7db      	b.n	80017f6 <open_socket_service+0xfa>
 800183e:	bf00      	nop
 8001840:	0800d116 	.word	0x0800d116
 8001844:	0800d124 	.word	0x0800d124
 8001848:	0800d0f1 	.word	0x0800d0f1
 800184c:	0800d128 	.word	0x0800d128
 8001850:	20000870 	.word	0x20000870
 8001854:	200002e4 	.word	0x200002e4
 8001858:	0800d157 	.word	0x0800d157
 800185c:	0800d160 	.word	0x0800d160
 8001860:	0800d139 	.word	0x0800d139
 8001864:	0800d172 	.word	0x0800d172
 8001868:	0800cdae 	.word	0x0800cdae
 800186c:	0800d184 	.word	0x0800d184
 8001870:	0800d0ae 	.word	0x0800d0ae

08001874 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001878:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 800187a:	f8df a034 	ldr.w	sl, [pc, #52]	@ 80018b0 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 800187e:	4607      	mov	r7, r0
 8001880:	460e      	mov	r6, r1
 8001882:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001884:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001886:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 800188a:	42b5      	cmp	r5, r6
 800188c:	db02      	blt.n	8001894 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 800188e:	4620      	mov	r0, r4
 8001890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001894:	3402      	adds	r4, #2
 8001896:	4544      	cmp	r4, r8
 8001898:	da07      	bge.n	80018aa <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 800189a:	5d7a      	ldrb	r2, [r7, r5]
 800189c:	4651      	mov	r1, sl
 800189e:	eb09 0004 	add.w	r0, r9, r4
 80018a2:	f008 f815 	bl	80098d0 <siprintf>
    for (int i = 0; i < length; i++) {
 80018a6:	3501      	adds	r5, #1
 80018a8:	e7ef      	b.n	800188a <formatToHexString+0x16>
            return -1;
 80018aa:	f04f 34ff 	mov.w	r4, #4294967295
 80018ae:	e7ee      	b.n	800188e <formatToHexString+0x1a>
 80018b0:	0800d19d 	.word	0x0800d19d

080018b4 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 80018b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 80018b6:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 80018b8:	460c      	mov	r4, r1
 80018ba:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	460a      	mov	r2, r1
 80018c2:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 80018c4:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 80018c6:	f7ff ffd5 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 80018ca:	462b      	mov	r3, r5
 80018cc:	9000      	str	r0, [sp, #0]
 80018ce:	4622      	mov	r2, r4
 80018d0:	2102      	movs	r1, #2
 80018d2:	1c70      	adds	r0, r6, #1
 80018d4:	f7ff ffce 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 80018d8:	462b      	mov	r3, r5
 80018da:	9000      	str	r0, [sp, #0]
 80018dc:	4622      	mov	r2, r4
 80018de:	2102      	movs	r1, #2
 80018e0:	1cf0      	adds	r0, r6, #3
 80018e2:	f7ff ffc7 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 80018e6:	462b      	mov	r3, r5
 80018e8:	9000      	str	r0, [sp, #0]
 80018ea:	4622      	mov	r2, r4
 80018ec:	2106      	movs	r1, #6
 80018ee:	1d70      	adds	r0, r6, #5
 80018f0:	f7ff ffc0 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 80018f4:	462b      	mov	r3, r5
 80018f6:	9000      	str	r0, [sp, #0]
 80018f8:	4622      	mov	r2, r4
 80018fa:	2102      	movs	r1, #2
 80018fc:	f106 000b 	add.w	r0, r6, #11
 8001900:	f7ff ffb8 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001904:	462b      	mov	r3, r5
 8001906:	9000      	str	r0, [sp, #0]
 8001908:	4622      	mov	r2, r4
 800190a:	2102      	movs	r1, #2
 800190c:	f106 000d 	add.w	r0, r6, #13
 8001910:	f7ff ffb0 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001914:	462b      	mov	r3, r5
 8001916:	9000      	str	r0, [sp, #0]
 8001918:	4622      	mov	r2, r4
 800191a:	2102      	movs	r1, #2
 800191c:	f106 000f 	add.w	r0, r6, #15
 8001920:	f7ff ffa8 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001924:	462b      	mov	r3, r5
 8001926:	9000      	str	r0, [sp, #0]
 8001928:	4622      	mov	r2, r4
 800192a:	2105      	movs	r1, #5
 800192c:	f106 0011 	add.w	r0, r6, #17
 8001930:	f7ff ffa0 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001934:	462b      	mov	r3, r5
 8001936:	9000      	str	r0, [sp, #0]
 8001938:	4622      	mov	r2, r4
 800193a:	2108      	movs	r1, #8
 800193c:	f106 0016 	add.w	r0, r6, #22
 8001940:	f7ff ff98 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001944:	462b      	mov	r3, r5
 8001946:	9000      	str	r0, [sp, #0]
 8001948:	4622      	mov	r2, r4
 800194a:	2107      	movs	r1, #7
 800194c:	f106 001e 	add.w	r0, r6, #30
 8001950:	f7ff ff90 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001954:	462b      	mov	r3, r5
 8001956:	9000      	str	r0, [sp, #0]
 8001958:	4622      	mov	r2, r4
 800195a:	2101      	movs	r1, #1
 800195c:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001960:	f7ff ff88 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001964:	462b      	mov	r3, r5
 8001966:	9000      	str	r0, [sp, #0]
 8001968:	4622      	mov	r2, r4
 800196a:	2114      	movs	r1, #20
 800196c:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001970:	f7ff ff80 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001974:	462b      	mov	r3, r5
 8001976:	9000      	str	r0, [sp, #0]
 8001978:	4622      	mov	r2, r4
 800197a:	2101      	movs	r1, #1
 800197c:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001980:	f7ff ff78 	bl	8001874 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001984:	462b      	mov	r3, r5
 8001986:	9000      	str	r0, [sp, #0]
 8001988:	4622      	mov	r2, r4
 800198a:	2101      	movs	r1, #1
 800198c:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001990:	f7ff ff70 	bl	8001874 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001994:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001998:	b002      	add	sp, #8
 800199a:	bd70      	pop	{r4, r5, r6, pc}

0800199c <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 800199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a0:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 80019a2:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 80019a4:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 80019a6:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 80019a8:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 80019aa:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 80019ac:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 80019ae:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 80019b2:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 80019b4:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 80019b8:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 80019ba:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 80019be:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 80019c0:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 80019c4:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 80019c6:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 80019ca:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 80019cc:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 80019d0:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 80019d2:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 80019d6:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 80019d8:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 80019dc:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 80019de:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 80019e2:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 80019e4:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 80019e8:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80019ea:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 80019ee:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80019f0:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 80019f4:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80019f6:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 80019fa:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80019fc:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001a00:	9002      	str	r0, [sp, #8]
 8001a02:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001a04:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001a06:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001a0a:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001a0c:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001a0e:	460d      	mov	r5, r1
 8001a10:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001a12:	490f      	ldr	r1, [pc, #60]	@ (8001a50 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001a14:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001a16:	2250      	movs	r2, #80	@ 0x50
 8001a18:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001a1a:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001a1c:	f008 f8dc 	bl	8009bd8 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001a20:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001a24:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001a26:	9000      	str	r0, [sp, #0]
 8001a28:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001a2c:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001a30:	4633      	mov	r3, r6
 8001a32:	462a      	mov	r2, r5
 8001a34:	f7ff ff1e 	bl	8001874 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	db05      	blt.n	8001a48 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	2c14      	cmp	r4, #20
 8001a40:	d1f1      	bne.n	8001a26 <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001a42:	b02a      	add	sp, #168	@ 0xa8
 8001a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	e7f9      	b.n	8001a42 <generateLocationInfoMessage+0xa6>
 8001a4e:	bf00      	nop
 8001a50:	0800ccf0 	.word	0x0800ccf0

08001a54 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001a5a:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001a5c:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001a5e:	ae02      	add	r6, sp, #8
 8001a60:	227c      	movs	r2, #124	@ 0x7c
 8001a62:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001a64:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001a66:	a803      	add	r0, sp, #12
 8001a68:	6034      	str	r4, [r6, #0]
 8001a6a:	f007 fff9 	bl	8009a60 <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	4631      	mov	r1, r6
 8001a72:	4638      	mov	r0, r7
 8001a74:	f7ff ff1e 	bl	80018b4 <generateRegistrationMessage>
	if (result < 0) {
 8001a78:	42a0      	cmp	r0, r4
 8001a7a:	da07      	bge.n	8001a8c <login_to_server+0x38>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001a7c:	481b      	ldr	r0, [pc, #108]	@ (8001aec <login_to_server+0x98>)
 8001a7e:	491c      	ldr	r1, [pc, #112]	@ (8001af0 <login_to_server+0x9c>)
 8001a80:	f001 fe22 	bl	80036c8 <uart_transmit_string>
		return 1;
 8001a84:	2001      	movs	r0, #1
	receive_response("Check sending to server\n");
	osDelay(100);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 8001a86:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001a8c:	462b      	mov	r3, r5
 8001a8e:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <login_to_server+0xa0>)
 8001a90:	9600      	str	r6, [sp, #0]
 8001a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a96:	a842      	add	r0, sp, #264	@ 0x108
 8001a98:	f007 fee6 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001a9c:	a842      	add	r0, sp, #264	@ 0x108
 8001a9e:	f7ff f97b 	bl	8000d98 <send_AT_command>
		if (strstr((char*) response, "ERROR") != NULL){
 8001aa2:	4e15      	ldr	r6, [pc, #84]	@ (8001af8 <login_to_server+0xa4>)
 8001aa4:	4f15      	ldr	r7, [pc, #84]	@ (8001afc <login_to_server+0xa8>)
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001aa6:	4d16      	ldr	r5, [pc, #88]	@ (8001b00 <login_to_server+0xac>)
		if (strstr((char*) response, "ERROR") != NULL){
 8001aa8:	4631      	mov	r1, r6
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f007 fff2 	bl	8009a94 <strstr>
 8001ab0:	b990      	cbnz	r0, 8001ad8 <login_to_server+0x84>
		count_check++;
 8001ab2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	2180      	movs	r1, #128	@ 0x80
 8001aba:	a822      	add	r0, sp, #136	@ 0x88
 8001abc:	f007 fed4 	bl	8009868 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001ac0:	a922      	add	r1, sp, #136	@ 0x88
 8001ac2:	480a      	ldr	r0, [pc, #40]	@ (8001aec <login_to_server+0x98>)
 8001ac4:	f001 fe00 	bl	80036c8 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001ac8:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <login_to_server+0xb0>)
 8001aca:	f7ff f991 	bl	8000df0 <receive_response>
		osDelay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f004 fb4a 	bl	8006168 <osDelay>
		if(count_check >= 50){
 8001ad4:	2c32      	cmp	r4, #50	@ 0x32
 8001ad6:	d1e7      	bne.n	8001aa8 <login_to_server+0x54>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ad8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001adc:	2100      	movs	r1, #0
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <login_to_server+0xa8>)
 8001ae0:	f007 ffbe 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ae4:	f7ff f968 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001ae8:	2000      	movs	r0, #0
 8001aea:	e7cc      	b.n	8001a86 <login_to_server+0x32>
 8001aec:	20000870 	.word	0x20000870
 8001af0:	0800d1a2 	.word	0x0800d1a2
 8001af4:	0800d1cc 	.word	0x0800d1cc
 8001af8:	0800d0ae 	.word	0x0800d0ae
 8001afc:	200002e4 	.word	0x200002e4
 8001b00:	0800d160 	.word	0x0800d160
 8001b04:	0800d1e2 	.word	0x0800d1e2

08001b08 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b0c:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001b10:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001b12:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001b14:	ae23      	add	r6, sp, #140	@ 0x8c
 8001b16:	227f      	movs	r2, #127	@ 0x7f
 8001b18:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001b1a:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001b1c:	a824      	add	r0, sp, #144	@ 0x90
 8001b1e:	6034      	str	r4, [r6, #0]
 8001b20:	f007 ff9e 	bl	8009a60 <memset>
	int count_check = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001b24:	2283      	movs	r2, #131	@ 0x83
 8001b26:	4631      	mov	r1, r6
 8001b28:	4638      	mov	r0, r7
 8001b2a:	f7ff ff37 	bl	800199c <generateLocationInfoMessage>
	if (result < 0) {
 8001b2e:	42a0      	cmp	r0, r4
 8001b30:	da08      	bge.n	8001b44 <send_location_to_server+0x3c>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001b32:	4825      	ldr	r0, [pc, #148]	@ (8001bc8 <send_location_to_server+0xc0>)
 8001b34:	4925      	ldr	r1, [pc, #148]	@ (8001bcc <send_location_to_server+0xc4>)
 8001b36:	f001 fdc7 	bl	80036c8 <uart_transmit_string>
		return 1;
 8001b3a:	2001      	movs	r0, #1
	receive_response("Check sending to server\n");
	osDelay(100);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 8001b3c:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8001b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001b44:	4a22      	ldr	r2, [pc, #136]	@ (8001bd0 <send_location_to_server+0xc8>)
 8001b46:	9600      	str	r6, [sp, #0]
 8001b48:	462b      	mov	r3, r5
 8001b4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b4e:	a844      	add	r0, sp, #272	@ 0x110
 8001b50:	f007 fe8a 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001b54:	a844      	add	r0, sp, #272	@ 0x110
 8001b56:	f7ff f91f 	bl	8000d98 <send_AT_command>
		if (strstr((char*) response, "ERROR") != NULL){
 8001b5a:	4f1e      	ldr	r7, [pc, #120]	@ (8001bd4 <send_location_to_server+0xcc>)
 8001b5c:	4e1e      	ldr	r6, [pc, #120]	@ (8001bd8 <send_location_to_server+0xd0>)
		 if (strstr((char*)response, "closed") != NULL) {
 8001b5e:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001be4 <send_location_to_server+0xdc>
		if (strstr((char*) response, "ERROR") != NULL){
 8001b62:	4639      	mov	r1, r7
 8001b64:	4630      	mov	r0, r6
 8001b66:	f007 ff95 	bl	8009a94 <strstr>
 8001b6a:	4605      	mov	r5, r0
 8001b6c:	bb08      	cbnz	r0, 8001bb2 <send_location_to_server+0xaa>
		 if (strstr((char*)response, "closed") != NULL) {
 8001b6e:	4641      	mov	r1, r8
 8001b70:	4630      	mov	r0, r6
 8001b72:	f007 ff8f 	bl	8009a94 <strstr>
 8001b76:	b148      	cbz	r0, 8001b8c <send_location_to_server+0x84>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b78:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <send_location_to_server+0xd0>)
 8001b80:	f007 ff6e 	bl	8009a60 <memset>
			 SIM_UART_ReInitializeRxDMA();
 8001b84:	f7ff f918 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8001b88:	2002      	movs	r0, #2
 8001b8a:	e7d7      	b.n	8001b3c <send_location_to_server+0x34>
		count_check++;
 8001b8c:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001b8e:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <send_location_to_server+0xd4>)
 8001b90:	4623      	mov	r3, r4
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	a803      	add	r0, sp, #12
 8001b96:	f007 fe67 	bl	8009868 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001b9a:	a903      	add	r1, sp, #12
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <send_location_to_server+0xc0>)
 8001b9e:	f001 fd93 	bl	80036c8 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001ba2:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <send_location_to_server+0xd8>)
 8001ba4:	f7ff f924 	bl	8000df0 <receive_response>
		osDelay(100);
 8001ba8:	2064      	movs	r0, #100	@ 0x64
 8001baa:	f004 fadd 	bl	8006168 <osDelay>
		if(count_check >= 50){
 8001bae:	2c32      	cmp	r4, #50	@ 0x32
 8001bb0:	d1d7      	bne.n	8001b62 <send_location_to_server+0x5a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001bb2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <send_location_to_server+0xd0>)
 8001bba:	f007 ff51 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001bbe:	f7ff f8fb 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e7ba      	b.n	8001b3c <send_location_to_server+0x34>
 8001bc6:	bf00      	nop
 8001bc8:	20000870 	.word	0x20000870
 8001bcc:	0800d1a2 	.word	0x0800d1a2
 8001bd0:	0800d1cc 	.word	0x0800d1cc
 8001bd4:	0800d0ae 	.word	0x0800d0ae
 8001bd8:	200002e4 	.word	0x200002e4
 8001bdc:	0800d160 	.word	0x0800d160
 8001be0:	0800d1e2 	.word	0x0800d1e2
 8001be4:	0800d1fb 	.word	0x0800d1fb

08001be8 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bec:	4604      	mov	r4, r0
 8001bee:	b0e1      	sub	sp, #388	@ 0x184
	uint8_t command[256];
	int count_check = 0;
	uint8_t output[128];
	int count_timeout = 0;
	int count_error = 0;
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8001bf0:	482b      	ldr	r0, [pc, #172]	@ (8001ca0 <check_data_sent_to_server+0xb8>)
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
	send_AT_command((char*)command);
	while(1){
//	while(strstr((char *) response, "+QIRD") == NULL){
		char output_elapsed[128];
		if (strstr((char*)response, "ERROR") != NULL){
 8001bf2:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8001cc0 <check_data_sent_to_server+0xd8>
 8001bf6:	4f2b      	ldr	r7, [pc, #172]	@ (8001ca4 <check_data_sent_to_server+0xbc>)
			Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 8001bf8:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8001cc4 <check_data_sent_to_server+0xdc>
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8001bfc:	f001 fd74 	bl	80036e8 <Debug_printf>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8001c00:	4623      	mov	r3, r4
 8001c02:	4a29      	ldr	r2, [pc, #164]	@ (8001ca8 <check_data_sent_to_server+0xc0>)
 8001c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c08:	a820      	add	r0, sp, #128	@ 0x80
 8001c0a:	f007 fe2d 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001c0e:	a820      	add	r0, sp, #128	@ 0x80
 8001c10:	f7ff f8c2 	bl	8000d98 <send_AT_command>
	int count_error = 0;
 8001c14:	2500      	movs	r5, #0
	int count_timeout = 0;
 8001c16:	462e      	mov	r6, r5
	int count_check = 0;
 8001c18:	462c      	mov	r4, r5
		if (strstr((char*)response, "ERROR") != NULL){
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	4638      	mov	r0, r7
 8001c1e:	f007 ff39 	bl	8009a94 <strstr>
 8001c22:	b170      	cbz	r0, 8001c42 <check_data_sent_to_server+0x5a>
			Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 8001c24:	4648      	mov	r0, r9
 8001c26:	f001 fd5f 	bl	80036e8 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4638      	mov	r0, r7
 8001c32:	f007 ff15 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c36:	f7ff f8bf 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char*)command);
 8001c3a:	a820      	add	r0, sp, #128	@ 0x80
 8001c3c:	f7ff f8ac 	bl	8000d98 <send_AT_command>
			count_error++;
 8001c40:	3501      	adds	r5, #1
		}
		if(count_check >= 50){
 8001c42:	2c32      	cmp	r4, #50	@ 0x32
 8001c44:	d10c      	bne.n	8001c60 <check_data_sent_to_server+0x78>
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4638      	mov	r0, r7
 8001c4e:	f007 ff07 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c52:	f7ff f8b1 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char*)command);
 8001c56:	a820      	add	r0, sp, #128	@ 0x80
 8001c58:	f7ff f89e 	bl	8000d98 <send_AT_command>
			count_timeout++;
 8001c5c:	3601      	adds	r6, #1
			count_check = 0;
 8001c5e:	2400      	movs	r4, #0

		}
		if(count_error == 3){
 8001c60:	2d03      	cmp	r5, #3
 8001c62:	d106      	bne.n	8001c72 <check_data_sent_to_server+0x8a>
			Debug_printf("\n--------------------- SENDING CONNECTION ERROR ---------------------------\n");
 8001c64:	4811      	ldr	r0, [pc, #68]	@ (8001cac <check_data_sent_to_server+0xc4>)
			return 0;
		}
		if(count_timeout == 3){
			Debug_printf("\n--------------------- SENDING CONNECTION TIME OUT ---------------------------\n");
 8001c66:	f001 fd3f 	bl	80036e8 <Debug_printf>
		}
	}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	b061      	add	sp, #388	@ 0x184
 8001c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(count_timeout == 3){
 8001c72:	2e03      	cmp	r6, #3
 8001c74:	d101      	bne.n	8001c7a <check_data_sent_to_server+0x92>
			Debug_printf("\n--------------------- SENDING CONNECTION TIME OUT ---------------------------\n");
 8001c76:	480e      	ldr	r0, [pc, #56]	@ (8001cb0 <check_data_sent_to_server+0xc8>)
 8001c78:	e7f5      	b.n	8001c66 <check_data_sent_to_server+0x7e>
		osDelay(100);
 8001c7a:	2064      	movs	r0, #100	@ 0x64
 8001c7c:	f004 fa74 	bl	8006168 <osDelay>
		snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8001c80:	4623      	mov	r3, r4
 8001c82:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <check_data_sent_to_server+0xcc>)
 8001c84:	2180      	movs	r1, #128	@ 0x80
 8001c86:	4668      	mov	r0, sp
 8001c88:	f007 fdee 	bl	8009868 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001c8c:	480a      	ldr	r0, [pc, #40]	@ (8001cb8 <check_data_sent_to_server+0xd0>)
 8001c8e:	4669      	mov	r1, sp
 8001c90:	f001 fd1a 	bl	80036c8 <uart_transmit_string>
		receive_response("Check received data from server\n");
 8001c94:	4809      	ldr	r0, [pc, #36]	@ (8001cbc <check_data_sent_to_server+0xd4>)
		count_check++;
 8001c96:	3401      	adds	r4, #1
		receive_response("Check received data from server\n");
 8001c98:	f7ff f8aa 	bl	8000df0 <receive_response>
	while(1){
 8001c9c:	e7bd      	b.n	8001c1a <check_data_sent_to_server+0x32>
 8001c9e:	bf00      	nop
 8001ca0:	0800d202 	.word	0x0800d202
 8001ca4:	200002e4 	.word	0x200002e4
 8001ca8:	0800d23b 	.word	0x0800d23b
 8001cac:	0800d28c 	.word	0x0800d28c
 8001cb0:	0800d2d9 	.word	0x0800d2d9
 8001cb4:	0800d329 	.word	0x0800d329
 8001cb8:	20000870 	.word	0x20000870
 8001cbc:	0800d348 	.word	0x0800d348
 8001cc0:	0800d0ae 	.word	0x0800d0ae
 8001cc4:	0800d24c 	.word	0x0800d24c

08001cc8 <close_connection>:


int close_connection(int connect_id){
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b0c1      	sub	sp, #260	@ 0x104
 8001ccc:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001cce:	4a1e      	ldr	r2, [pc, #120]	@ (8001d48 <close_connection+0x80>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001cd0:	4e1e      	ldr	r6, [pc, #120]	@ (8001d4c <close_connection+0x84>)
 8001cd2:	4d1f      	ldr	r5, [pc, #124]	@ (8001d50 <close_connection+0x88>)
		receive_response("Check CLOSING to server\n");
 8001cd4:	4f1f      	ldr	r7, [pc, #124]	@ (8001d54 <close_connection+0x8c>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001cd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cda:	4668      	mov	r0, sp
 8001cdc:	f007 fdc4 	bl	8009868 <sniprintf>
	send_AT_command((char*)command);
 8001ce0:	4668      	mov	r0, sp
 8001ce2:	f7ff f859 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001ce6:	2406      	movs	r4, #6
 8001ce8:	4631      	mov	r1, r6
 8001cea:	4628      	mov	r0, r5
 8001cec:	f007 fed2 	bl	8009a94 <strstr>
 8001cf0:	b178      	cbz	r0, 8001d12 <close_connection+0x4a>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 8001cf2:	4818      	ldr	r0, [pc, #96]	@ (8001d54 <close_connection+0x8c>)
 8001cf4:	f7ff f87c 	bl	8000df0 <receive_response>
	osDelay(100);
 8001cf8:	2064      	movs	r0, #100	@ 0x64
 8001cfa:	f004 fa35 	bl	8006168 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cfe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d02:	2100      	movs	r1, #0
 8001d04:	4812      	ldr	r0, [pc, #72]	@ (8001d50 <close_connection+0x88>)
 8001d06:	f007 feab 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d0a:	f7ff f855 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001d0e:	2001      	movs	r0, #1
 8001d10:	e010      	b.n	8001d34 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 8001d12:	4638      	mov	r0, r7
 8001d14:	f7ff f86c 	bl	8000df0 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 8001d18:	490f      	ldr	r1, [pc, #60]	@ (8001d58 <close_connection+0x90>)
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f007 feba 	bl	8009a94 <strstr>
 8001d20:	b150      	cbz	r0, 8001d38 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d22:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d26:	2100      	movs	r1, #0
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <close_connection+0x88>)
 8001d2a:	f007 fe99 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001d2e:	f7ff f843 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001d32:	2000      	movs	r0, #0
}
 8001d34:	b041      	add	sp, #260	@ 0x104
 8001d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 5){
 8001d38:	3c01      	subs	r4, #1
 8001d3a:	d0f2      	beq.n	8001d22 <close_connection+0x5a>
		osDelay(1000);
 8001d3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d40:	f004 fa12 	bl	8006168 <osDelay>
		count_check++;
 8001d44:	e7d0      	b.n	8001ce8 <close_connection+0x20>
 8001d46:	bf00      	nop
 8001d48:	0800d369 	.word	0x0800d369
 8001d4c:	0800cdae 	.word	0x0800cdae
 8001d50:	200002e4 	.word	0x200002e4
 8001d54:	0800d379 	.word	0x0800d379
 8001d58:	0800d0ae 	.word	0x0800d0ae

08001d5c <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8001d60:	ab0d      	add	r3, sp, #52	@ 0x34
 8001d62:	9304      	str	r3, [sp, #16]
 8001d64:	ab0c      	add	r3, sp, #48	@ 0x30
 8001d66:	9303      	str	r3, [sp, #12]
 8001d68:	ab0b      	add	r3, sp, #44	@ 0x2c
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	ab0a      	add	r3, sp, #40	@ 0x28
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	ab09      	add	r3, sp, #36	@ 0x24
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	aa07      	add	r2, sp, #28
 8001d76:	ab08      	add	r3, sp, #32
 8001d78:	4925      	ldr	r1, [pc, #148]	@ (8001e10 <extract_time_CCLK+0xb4>)
 8001d7a:	f007 fdc9 	bl	8009910 <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8001d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001d80:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8001d82:	2a17      	cmp	r2, #23
		hour -= 24;
 8001d84:	bfc3      	ittte	gt
 8001d86:	3b17      	subgt	r3, #23
 8001d88:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 8001d8a:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8001d8c:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8001d8e:	bfc4      	itt	gt
 8001d90:	3301      	addgt	r3, #1
 8001d92:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8001d94:	9b07      	ldr	r3, [sp, #28]
 8001d96:	2b17      	cmp	r3, #23
 8001d98:	dd37      	ble.n	8001e0a <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 8001d9a:	4c1e      	ldr	r4, [pc, #120]	@ (8001e14 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8001d9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8001d9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8001da0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 8001da2:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8001da4:	9b08      	ldr	r3, [sp, #32]
 8001da6:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 8001da8:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 8001daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8001dac:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 8001dae:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 8001db0:	b2c9      	uxtb	r1, r1
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 8001db6:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 8001db8:	f000 fefa 	bl	8002bb0 <set_time>
	set_date(year, month, day);
 8001dbc:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8001dc0:	f89d 1020 	ldrb.w	r1, [sp, #32]
 8001dc4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8001dc8:	f000 ff10 	bl	8002bec <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8001dcc:	68a3      	ldr	r3, [r4, #8]
 8001dce:	9304      	str	r3, [sp, #16]
 8001dd0:	6863      	ldr	r3, [r4, #4]
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	6923      	ldr	r3, [r4, #16]
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	6963      	ldr	r3, [r4, #20]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	69a3      	ldr	r3, [r4, #24]
 8001de2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <extract_time_CCLK+0xbc>)
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	a80e      	add	r0, sp, #56	@ 0x38
 8001de8:	f007 fd3e 	bl	8009868 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 8001dec:	490b      	ldr	r1, [pc, #44]	@ (8001e1c <extract_time_CCLK+0xc0>)
 8001dee:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <extract_time_CCLK+0xc4>)
 8001df0:	f001 fc6a 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 8001df4:	490b      	ldr	r1, [pc, #44]	@ (8001e24 <extract_time_CCLK+0xc8>)
 8001df6:	480a      	ldr	r0, [pc, #40]	@ (8001e20 <extract_time_CCLK+0xc4>)
 8001df8:	f001 fc66 	bl	80036c8 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 8001dfc:	4808      	ldr	r0, [pc, #32]	@ (8001e20 <extract_time_CCLK+0xc4>)
 8001dfe:	a90e      	add	r1, sp, #56	@ 0x38
 8001e00:	f001 fc62 	bl	80036c8 <uart_transmit_string>
	return 1;
 8001e04:	2001      	movs	r0, #1
}
 8001e06:	b02e      	add	sp, #184	@ 0xb8
 8001e08:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e7fb      	b.n	8001e06 <extract_time_CCLK+0xaa>
 8001e0e:	bf00      	nop
 8001e10:	0800d392 	.word	0x0800d392
 8001e14:	20000268 	.word	0x20000268
 8001e18:	0800d3c0 	.word	0x0800d3c0
 8001e1c:	0800d3fa 	.word	0x0800d3fa
 8001e20:	20000870 	.word	0x20000870
 8001e24:	0800db6a 	.word	0x0800db6a

08001e28 <getCurrentTime>:


int getCurrentTime(){
 8001e28:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8001e2a:	4818      	ldr	r0, [pc, #96]	@ (8001e8c <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e2c:	4d18      	ldr	r5, [pc, #96]	@ (8001e90 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8001e2e:	4e19      	ldr	r6, [pc, #100]	@ (8001e94 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8001e30:	f7fe ffb2 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e34:	2404      	movs	r4, #4
 8001e36:	4818      	ldr	r0, [pc, #96]	@ (8001e98 <getCurrentTime+0x70>)
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f007 fe2b 	bl	8009a94 <strstr>
 8001e3e:	b190      	cbz	r0, 8001e66 <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8001e40:	4814      	ldr	r0, [pc, #80]	@ (8001e94 <getCurrentTime+0x6c>)
 8001e42:	f7fe ffd5 	bl	8000df0 <receive_response>
	int result_extract = extract_time_CCLK(response);
 8001e46:	4814      	ldr	r0, [pc, #80]	@ (8001e98 <getCurrentTime+0x70>)
 8001e48:	f7ff ff88 	bl	8001d5c <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e4c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 8001e50:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e52:	2100      	movs	r1, #0
 8001e54:	4810      	ldr	r0, [pc, #64]	@ (8001e98 <getCurrentTime+0x70>)
 8001e56:	f007 fe03 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e5a:	f7fe ffad 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8001e5e:	1e20      	subs	r0, r4, #0
 8001e60:	bf18      	it	ne
 8001e62:	2001      	movne	r0, #1
 8001e64:	e00a      	b.n	8001e7c <getCurrentTime+0x54>
		if(count_check >= 3 ){
 8001e66:	3c01      	subs	r4, #1
 8001e68:	d109      	bne.n	8001e7e <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e6a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e6e:	4621      	mov	r1, r4
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <getCurrentTime+0x70>)
 8001e72:	f007 fdf5 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001e76:	f7fe ff9f 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001e7a:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8001e7e:	4630      	mov	r0, r6
 8001e80:	f7fe ffb6 	bl	8000df0 <receive_response>
		osDelay(100);
 8001e84:	2064      	movs	r0, #100	@ 0x64
 8001e86:	f004 f96f 	bl	8006168 <osDelay>
		count_check++;
 8001e8a:	e7d4      	b.n	8001e36 <getCurrentTime+0xe>
 8001e8c:	0800d405 	.word	0x0800d405
 8001e90:	0800cdae 	.word	0x0800cdae
 8001e94:	0800d410 	.word	0x0800d410
 8001e98:	200002e4 	.word	0x200002e4

08001e9c <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 8001e9c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8001e9e:	4955      	ldr	r1, [pc, #340]	@ (8001ff4 <receiveRMCDataWithAddrGSM+0x158>)
 8001ea0:	4855      	ldr	r0, [pc, #340]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8001ea2:	4d56      	ldr	r5, [pc, #344]	@ (8001ffc <receiveRMCDataWithAddrGSM+0x160>)
void receiveRMCDataWithAddrGSM(){
 8001ea4:	b09b      	sub	sp, #108	@ 0x6c
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8001ea6:	f001 fc0f 	bl	80036c8 <uart_transmit_string>
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8001eaa:	4855      	ldr	r0, [pc, #340]	@ (8002000 <receiveRMCDataWithAddrGSM+0x164>)
 8001eac:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001eb0:	6800      	ldr	r0, [r0, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	f004 f971 	bl	800619c <osMessageQueueGet>
	if(status == osOK){
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	f040 8094 	bne.w	8001fe8 <receiveRMCDataWithAddrGSM+0x14c>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8001ec0:	4950      	ldr	r1, [pc, #320]	@ (8002004 <receiveRMCDataWithAddrGSM+0x168>)
 8001ec2:	484d      	ldr	r0, [pc, #308]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedDataGSM.address;
 8001ec4:	4c50      	ldr	r4, [pc, #320]	@ (8002008 <receiveRMCDataWithAddrGSM+0x16c>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8001ec6:	f001 fbff 	bl	80036c8 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 8001eca:	4950      	ldr	r1, [pc, #320]	@ (800200c <receiveRMCDataWithAddrGSM+0x170>)
 8001ecc:	484a      	ldr	r0, [pc, #296]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
 8001ece:	f001 fbfb 	bl	80036c8 <uart_transmit_string>
		current_addr_gsm = receivedDataGSM.address;
 8001ed2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001ed4:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 8001ed6:	6820      	ldr	r0, [r4, #0]
 8001ed8:	494d      	ldr	r1, [pc, #308]	@ (8002010 <receiveRMCDataWithAddrGSM+0x174>)
 8001eda:	f000 fdeb 	bl	8002ab4 <checkAddrExistInQueue>
 8001ede:	b140      	cbz	r0, 8001ef2 <receiveRMCDataWithAddrGSM+0x56>
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8002014 <receiveRMCDataWithAddrGSM+0x178>)
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d377      	bcc.n	8001fda <receiveRMCDataWithAddrGSM+0x13e>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8001ef0:	d873      	bhi.n	8001fda <receiveRMCDataWithAddrGSM+0x13e>
//			current_addr_gsm = receivedDataGSM->address;
			Debug_printf("Saving data to variable to send to the server\n");
 8001ef2:	4849      	ldr	r0, [pc, #292]	@ (8002018 <receiveRMCDataWithAddrGSM+0x17c>)
 8001ef4:	f001 fbf8 	bl	80036e8 <Debug_printf>
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 8001ef8:	6821      	ldr	r1, [r4, #0]
 8001efa:	4848      	ldr	r0, [pc, #288]	@ (800201c <receiveRMCDataWithAddrGSM+0x180>)
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8001efc:	4c48      	ldr	r4, [pc, #288]	@ (8002020 <receiveRMCDataWithAddrGSM+0x184>)
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 8001efe:	f001 fbf3 	bl	80036e8 <Debug_printf>
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8001f02:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8001f06:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedDataGSM.rmc.lcation.longitude;
 8001f0a:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8001f0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedDataGSM.rmc.speed;
 8001f12:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001f14:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedDataGSM.rmc.course;
 8001f16:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001f18:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedDataGSM.rmc.lcation.NS;
 8001f1a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8001f1e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedDataGSM.rmc.lcation.EW;
 8001f22:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8001f26:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedDataGSM.rmc.isValid;
 8001f2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001f2c:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedDataGSM.rmc.date.Yr;
 8001f2e:	69ab      	ldr	r3, [r5, #24]
 8001f30:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 8001f32:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 8001f34:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 8001f36:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 8001f38:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
 8001f3a:	692b      	ldr	r3, [r5, #16]
 8001f3c:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 8001f42:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 8001f44:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8001f46:	a808      	add	r0, sp, #32
 8001f48:	e9cd 2100 	strd	r2, r1, [sp]
 8001f4c:	4a35      	ldr	r2, [pc, #212]	@ (8002024 <receiveRMCDataWithAddrGSM+0x188>)
 8001f4e:	2146      	movs	r1, #70	@ 0x46
 8001f50:	f007 fc8a 	bl	8009868 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8001f54:	a908      	add	r1, sp, #32
 8001f56:	4828      	ldr	r0, [pc, #160]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
 8001f58:	f001 fbb6 	bl	80036c8 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 8001f5c:	69a3      	ldr	r3, [r4, #24]
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	6963      	ldr	r3, [r4, #20]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6923      	ldr	r3, [r4, #16]
 8001f66:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <receiveRMCDataWithAddrGSM+0x18c>)
 8001f68:	2146      	movs	r1, #70	@ 0x46
 8001f6a:	a808      	add	r0, sp, #32
 8001f6c:	f007 fc7c 	bl	8009868 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8001f70:	a908      	add	r1, sp, #32
 8001f72:	4821      	ldr	r0, [pc, #132]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
 8001f74:	f001 fba8 	bl	80036c8 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedDataGSM.rmc.lcation.EW);
 8001f78:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8001f7c:	9306      	str	r3, [sp, #24]
 8001f7e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8001f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f86:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001f90:	2146      	movs	r1, #70	@ 0x46
 8001f92:	e9cd 2300 	strd	r2, r3, [sp]
 8001f96:	a808      	add	r0, sp, #32
 8001f98:	4a24      	ldr	r2, [pc, #144]	@ (800202c <receiveRMCDataWithAddrGSM+0x190>)
 8001f9a:	f007 fc65 	bl	8009868 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8001f9e:	a908      	add	r1, sp, #32
 8001fa0:	4815      	ldr	r0, [pc, #84]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
 8001fa2:	f001 fb91 	bl	80036c8 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 8001fa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001fac:	f7fe facc 	bl	8000548 <__aeabi_f2d>
 8001fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fb4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001fb6:	f7fe fac7 	bl	8000548 <__aeabi_f2d>
 8001fba:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <receiveRMCDataWithAddrGSM+0x194>)
 8001fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8001fc0:	2146      	movs	r1, #70	@ 0x46
 8001fc2:	a808      	add	r0, sp, #32
 8001fc4:	f007 fc50 	bl	8009868 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8001fc8:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <receiveRMCDataWithAddrGSM+0x15c>)
 8001fca:	a908      	add	r1, sp, #32
 8001fcc:	f001 fb7c 	bl	80036c8 <uart_transmit_string>

			received_RMC = 1;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <receiveRMCDataWithAddrGSM+0x198>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
		}
	}
	else{
		Debug_printf("There is no address mail left\n");
	}
}
 8001fd6:	b01b      	add	sp, #108	@ 0x6c
 8001fd8:	bd30      	pop	{r4, r5, pc}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 8001fda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8001fdc:	4816      	ldr	r0, [pc, #88]	@ (8002038 <receiveRMCDataWithAddrGSM+0x19c>)
}
 8001fde:	b01b      	add	sp, #108	@ 0x6c
 8001fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 8001fe4:	f001 bb80 	b.w	80036e8 <Debug_printf>
		Debug_printf("There is no address mail left\n");
 8001fe8:	4814      	ldr	r0, [pc, #80]	@ (800203c <receiveRMCDataWithAddrGSM+0x1a0>)
}
 8001fea:	b01b      	add	sp, #108	@ 0x6c
 8001fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Debug_printf("There is no address mail left\n");
 8001ff0:	f001 bb7a 	b.w	80036e8 <Debug_printf>
 8001ff4:	0800d41a 	.word	0x0800d41a
 8001ff8:	20000870 	.word	0x20000870
 8001ffc:	20000200 	.word	0x20000200
 8002000:	2000068c 	.word	0x2000068c
 8002004:	0800d43a 	.word	0x0800d43a
 8002008:	20000468 	.word	0x20000468
 800200c:	0800d45d 	.word	0x0800d45d
 8002010:	20000480 	.word	0x20000480
 8002014:	20000464 	.word	0x20000464
 8002018:	0800d481 	.word	0x0800d481
 800201c:	0800d4b0 	.word	0x0800d4b0
 8002020:	20000268 	.word	0x20000268
 8002024:	0800d4ef 	.word	0x0800d4ef
 8002028:	0800d518 	.word	0x0800d518
 800202c:	0800d541 	.word	0x0800d541
 8002030:	0800d576 	.word	0x0800d576
 8002034:	200002d0 	.word	0x200002d0
 8002038:	0800d5b5 	.word	0x0800d5b5
 800203c:	0800d613 	.word	0x0800d613

08002040 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int count_resend = 0;
	int count_check = 0;
	while(count_resend < 3){
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002044:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8002138 <processUploadDataToServer+0xf8>
		send_location_to_server(0, location_info);

//		if(result_send_location){
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002048:	4f31      	ldr	r7, [pc, #196]	@ (8002110 <processUploadDataToServer+0xd0>)
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 800204a:	4606      	mov	r6, r0
	int count_resend = 0;
 800204c:	2500      	movs	r5, #0
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 800204e:	4629      	mov	r1, r5
 8002050:	4640      	mov	r0, r8
 8002052:	f001 fb49 	bl	80036e8 <Debug_printf>
		send_location_to_server(0, location_info);
 8002056:	4631      	mov	r1, r6
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fd55 	bl	8001b08 <send_location_to_server>
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 800205e:	492d      	ldr	r1, [pc, #180]	@ (8002114 <processUploadDataToServer+0xd4>)
 8002060:	482b      	ldr	r0, [pc, #172]	@ (8002110 <processUploadDataToServer+0xd0>)
 8002062:	f001 fb31 	bl	80036c8 <uart_transmit_string>
		int result_check = check_data_sent_to_server(0);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fdbe 	bl	8001be8 <check_data_sent_to_server>
		if(result_check){
 800206c:	4604      	mov	r4, r0
 800206e:	b190      	cbz	r0, 8002096 <processUploadDataToServer+0x56>
			uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002070:	4929      	ldr	r1, [pc, #164]	@ (8002118 <processUploadDataToServer+0xd8>)
 8002072:	4827      	ldr	r0, [pc, #156]	@ (8002110 <processUploadDataToServer+0xd0>)
 8002074:	f001 fb28 	bl	80036c8 <uart_transmit_string>
			receive_response("Check location report\n");
 8002078:	4828      	ldr	r0, [pc, #160]	@ (800211c <processUploadDataToServer+0xdc>)
 800207a:	f7fe feb9 	bl	8000df0 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800207e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002082:	2100      	movs	r1, #0
 8002084:	4826      	ldr	r0, [pc, #152]	@ (8002120 <processUploadDataToServer+0xe0>)
 8002086:	f007 fceb 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 800208a:	f7fe fe95 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
			return 1;
 800208e:	2401      	movs	r4, #1
	}
	receive_response("First check SIM MODULE\n");
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 0;
}
 8002090:	4620      	mov	r0, r4
 8002092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 8002096:	4923      	ldr	r1, [pc, #140]	@ (8002124 <processUploadDataToServer+0xe4>)
 8002098:	4638      	mov	r0, r7
 800209a:	f001 fb15 	bl	80036c8 <uart_transmit_string>
			count_resend++;
 800209e:	3501      	adds	r5, #1
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020a4:	4621      	mov	r1, r4
 80020a6:	481e      	ldr	r0, [pc, #120]	@ (8002120 <processUploadDataToServer+0xe0>)
 80020a8:	f007 fcda 	bl	8009a60 <memset>
			SIM_UART_ReInitializeRxDMA();
 80020ac:	f7fe fe84 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	while(count_resend < 3){
 80020b0:	2d03      	cmp	r5, #3
 80020b2:	d1cc      	bne.n	800204e <processUploadDataToServer+0xe>
	send_AT_command(FIRST_CHECK);
 80020b4:	481c      	ldr	r0, [pc, #112]	@ (8002128 <processUploadDataToServer+0xe8>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80020b6:	4f1d      	ldr	r7, [pc, #116]	@ (800212c <processUploadDataToServer+0xec>)
		receive_response("First check SIM MODULE\n");
 80020b8:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8002130 <processUploadDataToServer+0xf0>
	send_AT_command(FIRST_CHECK);
 80020bc:	f7fe fe6c 	bl	8000d98 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80020c0:	260c      	movs	r6, #12
 80020c2:	4817      	ldr	r0, [pc, #92]	@ (8002120 <processUploadDataToServer+0xe0>)
 80020c4:	4639      	mov	r1, r7
 80020c6:	f007 fce5 	bl	8009a94 <strstr>
 80020ca:	4605      	mov	r5, r0
 80020cc:	b958      	cbnz	r0, 80020e6 <processUploadDataToServer+0xa6>
	receive_response("First check SIM MODULE\n");
 80020ce:	4818      	ldr	r0, [pc, #96]	@ (8002130 <processUploadDataToServer+0xf0>)
 80020d0:	f7fe fe8e 	bl	8000df0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020d8:	4629      	mov	r1, r5
 80020da:	4811      	ldr	r0, [pc, #68]	@ (8002120 <processUploadDataToServer+0xe0>)
 80020dc:	f007 fcc0 	bl	8009a60 <memset>
	SIM_UART_ReInitializeRxDMA();
 80020e0:	f7fe fe6a 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
	return 0;
 80020e4:	e7d4      	b.n	8002090 <processUploadDataToServer+0x50>
		receive_response("First check SIM MODULE\n");
 80020e6:	4640      	mov	r0, r8
 80020e8:	f7fe fe82 	bl	8000df0 <receive_response>
		if(count_check > 10){
 80020ec:	3e01      	subs	r6, #1
 80020ee:	d10a      	bne.n	8002106 <processUploadDataToServer+0xc6>
			Debug_printf("SIM MODULE BUG");
 80020f0:	4810      	ldr	r0, [pc, #64]	@ (8002134 <processUploadDataToServer+0xf4>)
 80020f2:	f001 faf9 	bl	80036e8 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020f6:	480a      	ldr	r0, [pc, #40]	@ (8002120 <processUploadDataToServer+0xe0>)
 80020f8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020fc:	4631      	mov	r1, r6
 80020fe:	f007 fcaf 	bl	8009a60 <memset>
			return 2;
 8002102:	2402      	movs	r4, #2
 8002104:	e7c4      	b.n	8002090 <processUploadDataToServer+0x50>
		osDelay(100);
 8002106:	2064      	movs	r0, #100	@ 0x64
 8002108:	f004 f82e 	bl	8006168 <osDelay>
 800210c:	e7d9      	b.n	80020c2 <processUploadDataToServer+0x82>
 800210e:	bf00      	nop
 8002110:	20000870 	.word	0x20000870
 8002114:	0800d699 	.word	0x0800d699
 8002118:	0800d6c9 	.word	0x0800d6c9
 800211c:	0800d6da 	.word	0x0800d6da
 8002120:	200002e4 	.word	0x200002e4
 8002124:	0800d6f1 	.word	0x0800d6f1
 8002128:	0800cd91 	.word	0x0800cd91
 800212c:	0800cdae 	.word	0x0800cdae
 8002130:	0800cd96 	.word	0x0800cd96
 8002134:	0800d720 	.word	0x0800d720
 8002138:	0800d632 	.word	0x0800d632

0800213c <StartGSM>:

void StartGSM(void const * argument)
{
 800213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002140:	487d      	ldr	r0, [pc, #500]	@ (8002338 <StartGSM+0x1fc>)
 8002142:	4e7e      	ldr	r6, [pc, #504]	@ (800233c <StartGSM+0x200>)
					if(received_RMC == 1){
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						Debug_printf("Current stack address to be sent to the server: \n");
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002144:	4f7e      	ldr	r7, [pc, #504]	@ (8002340 <StartGSM+0x204>)
{
 8002146:	b0a3      	sub	sp, #140	@ 0x8c
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002148:	f001 face 	bl	80036e8 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800214c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002150:	4a7c      	ldr	r2, [pc, #496]	@ (8002344 <StartGSM+0x208>)
 8002152:	497d      	ldr	r1, [pc, #500]	@ (8002348 <StartGSM+0x20c>)
 8002154:	487d      	ldr	r0, [pc, #500]	@ (800234c <StartGSM+0x210>)
 8002156:	f000 fd1d 	bl	8002b94 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 800215a:	a802      	add	r0, sp, #8
 800215c:	f7fe fdca 	bl	8000cf4 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002160:	a811      	add	r0, sp, #68	@ 0x44
 8002162:	f7fe fded 	bl	8000d40 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 8002166:	487a      	ldr	r0, [pc, #488]	@ (8002350 <StartGSM+0x214>)
 8002168:	f000 fc38 	bl	80029dc <initQueue_GSM>
	init_SIM_module();
 800216c:	f7fe fe66 	bl	8000e3c <init_SIM_module>
	int is_set_uniqueID = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
	int process = 0;
 8002174:	461c      	mov	r4, r3
		osDelay(300);
 8002176:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800217a:	f003 fff5 	bl	8006168 <osDelay>
		switch(process){
 800217e:	2c08      	cmp	r4, #8
 8002180:	d868      	bhi.n	8002254 <StartGSM+0x118>
 8002182:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002186:	0009      	.short	0x0009
 8002188:	004f0021 	.word	0x004f0021
 800218c:	00aa007b 	.word	0x00aa007b
 8002190:	00cb00be 	.word	0x00cb00be
 8002194:	03ce0109 	.word	0x03ce0109
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002198:	496e      	ldr	r1, [pc, #440]	@ (8002354 <StartGSM+0x218>)
 800219a:	486f      	ldr	r0, [pc, #444]	@ (8002358 <StartGSM+0x21c>)
 800219c:	f001 fa94 	bl	80036c8 <uart_transmit_string>
				isReady = first_check_SIM();
 80021a0:	f7fe ff20 	bl	8000fe4 <first_check_SIM>
				if(isReady) process++;
 80021a4:	4601      	mov	r1, r0
 80021a6:	2800      	cmp	r0, #0
 80021a8:	f040 8095 	bne.w	80022d6 <StartGSM+0x19a>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80021ac:	f44f 72c0 	mov.w	r2, #384	@ 0x180
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80021b0:	4864      	ldr	r0, [pc, #400]	@ (8002344 <StartGSM+0x208>)
 80021b2:	f007 fc55 	bl	8009a60 <memset>
					SIM_UART_ReInitializeRxDMA();
 80021b6:	f7fe fdff 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80021ba:	4968      	ldr	r1, [pc, #416]	@ (800235c <StartGSM+0x220>)
 80021bc:	4866      	ldr	r0, [pc, #408]	@ (8002358 <StartGSM+0x21c>)
 80021be:	f001 fa83 	bl	80036c8 <uart_transmit_string>
					reboot_SIM_module();
 80021c2:	f7fe fe55 	bl	8000e70 <reboot_SIM_module>
					process = 0;
 80021c6:	e02b      	b.n	8002220 <StartGSM+0xe4>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 80021c8:	4965      	ldr	r1, [pc, #404]	@ (8002360 <StartGSM+0x224>)
 80021ca:	4863      	ldr	r0, [pc, #396]	@ (8002358 <StartGSM+0x21c>)
 80021cc:	f001 fa7c 	bl	80036c8 <uart_transmit_string>
				osDelay(100);
 80021d0:	2064      	movs	r0, #100	@ 0x64
 80021d2:	f003 ffc9 	bl	8006168 <osDelay>
				int check_SIM = check_SIM_ready();
 80021d6:	f7ff f81b 	bl	8001210 <check_SIM_ready>
				if(is_set_uniqueID == 0){
 80021da:	9b01      	ldr	r3, [sp, #4]
				int check_SIM = check_SIM_ready();
 80021dc:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0){
 80021de:	b953      	cbnz	r3, 80021f6 <StartGSM+0xba>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 80021e0:	4b60      	ldr	r3, [pc, #384]	@ (8002364 <StartGSM+0x228>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	889b      	ldrh	r3, [r3, #4]
 80021e6:	f8cd 200d 	str.w	r2, [sp, #13]
 80021ea:	f8ad 3011 	strh.w	r3, [sp, #17]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 80021ee:	f8cd 2049 	str.w	r2, [sp, #73]	@ 0x49
 80021f2:	f8ad 304d 	strh.w	r3, [sp, #77]	@ 0x4d
				osDelay(150);
 80021f6:	2096      	movs	r0, #150	@ 0x96
 80021f8:	f003 ffb6 	bl	8006168 <osDelay>
				if (check_SIM == 0){
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	f040 83ad 	bne.w	800295c <StartGSM+0x820>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002202:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002206:	4629      	mov	r1, r5
 8002208:	484e      	ldr	r0, [pc, #312]	@ (8002344 <StartGSM+0x208>)
 800220a:	f007 fc29 	bl	8009a60 <memset>
					SIM_UART_ReInitializeRxDMA();
 800220e:	f7fe fdd3 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8002212:	4955      	ldr	r1, [pc, #340]	@ (8002368 <StartGSM+0x22c>)
 8002214:	4850      	ldr	r0, [pc, #320]	@ (8002358 <StartGSM+0x21c>)
 8002216:	f001 fa57 	bl	80036c8 <uart_transmit_string>
					reboot_SIM_module();
 800221a:	f7fe fe29 	bl	8000e70 <reboot_SIM_module>
					process = 0;
 800221e:	9401      	str	r4, [sp, #4]
									process++;
 8002220:	2400      	movs	r4, #0
 8002222:	e017      	b.n	8002254 <StartGSM+0x118>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 8002224:	4951      	ldr	r1, [pc, #324]	@ (800236c <StartGSM+0x230>)
 8002226:	484c      	ldr	r0, [pc, #304]	@ (8002358 <StartGSM+0x21c>)
 8002228:	f001 fa4e 	bl	80036c8 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800222c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002230:	2100      	movs	r1, #0
 8002232:	4844      	ldr	r0, [pc, #272]	@ (8002344 <StartGSM+0x208>)
 8002234:	f007 fc14 	bl	8009a60 <memset>
				SIM_UART_ReInitializeRxDMA();
 8002238:	f7fe fdbe 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff f963 	bl	8001508 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002242:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002246:	2100      	movs	r1, #0
 8002248:	483e      	ldr	r0, [pc, #248]	@ (8002344 <StartGSM+0x208>)
 800224a:	f007 fc09 	bl	8009a60 <memset>
				SIM_UART_ReInitializeRxDMA();
 800224e:	f7fe fdb3 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
				process++;
 8002252:	2403      	movs	r4, #3
				}
				break;
		}
		if(is_in_sending == 0){
 8002254:	6833      	ldr	r3, [r6, #0]
 8002256:	b90b      	cbnz	r3, 800225c <StartGSM+0x120>
			receiveRMCDataWithAddrGSM();
 8002258:	f7ff fe20 	bl	8001e9c <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 800225c:	6833      	ldr	r3, [r6, #0]
			is_in_sending = 0;
		}
		Debug_printf("\nHello from GSM\n");
 800225e:	4844      	ldr	r0, [pc, #272]	@ (8002370 <StartGSM+0x234>)
		if(is_in_sending == 1){
 8002260:	2b01      	cmp	r3, #1
			is_in_sending = 0;
 8002262:	bf04      	itt	eq
 8002264:	2300      	moveq	r3, #0
 8002266:	6033      	streq	r3, [r6, #0]
		Debug_printf("\nHello from GSM\n");
 8002268:	f001 fa3e 	bl	80036e8 <Debug_printf>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 800226c:	4941      	ldr	r1, [pc, #260]	@ (8002374 <StartGSM+0x238>)
 800226e:	483a      	ldr	r0, [pc, #232]	@ (8002358 <StartGSM+0x21c>)
 8002270:	f001 fa2a 	bl	80036c8 <uart_transmit_string>
		osDelay(200);
 8002274:	20c8      	movs	r0, #200	@ 0xc8
 8002276:	f003 ff77 	bl	8006168 <osDelay>
		osDelay(300);
 800227a:	e77c      	b.n	8002176 <StartGSM+0x3a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 800227c:	493e      	ldr	r1, [pc, #248]	@ (8002378 <StartGSM+0x23c>)
 800227e:	4836      	ldr	r0, [pc, #216]	@ (8002358 <StartGSM+0x21c>)
 8002280:	f001 fa22 	bl	80036c8 <uart_transmit_string>
				int receive_activate = activate_context(1);
 8002284:	2001      	movs	r0, #1
 8002286:	f7ff f991 	bl	80015ac <activate_context>
				if(receive_activate){
 800228a:	4605      	mov	r5, r0
 800228c:	b190      	cbz	r0, 80022b4 <StartGSM+0x178>
					getCurrentTime();
 800228e:	f7ff fdcb 	bl	8001e28 <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002292:	493a      	ldr	r1, [pc, #232]	@ (800237c <StartGSM+0x240>)
 8002294:	4830      	ldr	r0, [pc, #192]	@ (8002358 <StartGSM+0x21c>)
 8002296:	f001 fa17 	bl	80036c8 <uart_transmit_string>
					osDelay(200);
 800229a:	20c8      	movs	r0, #200	@ 0xc8
 800229c:	f003 ff64 	bl	8006168 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022a4:	2100      	movs	r1, #0
 80022a6:	4827      	ldr	r0, [pc, #156]	@ (8002344 <StartGSM+0x208>)
 80022a8:	f007 fbda 	bl	8009a60 <memset>
					SIM_UART_ReInitializeRxDMA();
 80022ac:	f7fe fd84 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
					process++;
 80022b0:	2404      	movs	r4, #4
 80022b2:	e7cf      	b.n	8002254 <StartGSM+0x118>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 80022b4:	4932      	ldr	r1, [pc, #200]	@ (8002380 <StartGSM+0x244>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 80022b6:	4828      	ldr	r0, [pc, #160]	@ (8002358 <StartGSM+0x21c>)
 80022b8:	f001 fa06 	bl	80036c8 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff f9d1 	bl	8001664 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022c2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 80022c6:	4604      	mov	r4, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022c8:	4629      	mov	r1, r5
 80022ca:	481e      	ldr	r0, [pc, #120]	@ (8002344 <StartGSM+0x208>)
 80022cc:	f007 fbc8 	bl	8009a60 <memset>
					SIM_UART_ReInitializeRxDMA();
 80022d0:	f7fe fd72 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 80022d4:	b18c      	cbz	r4, 80022fa <StartGSM+0x1be>
					if (receive_deactivate) process = 1;
 80022d6:	2401      	movs	r4, #1
 80022d8:	e7bc      	b.n	8002254 <StartGSM+0x118>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 80022da:	492a      	ldr	r1, [pc, #168]	@ (8002384 <StartGSM+0x248>)
 80022dc:	481e      	ldr	r0, [pc, #120]	@ (8002358 <StartGSM+0x21c>)
 80022de:	f001 f9f3 	bl	80036c8 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 80022e2:	2300      	movs	r3, #0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7ff fa07 	bl	80016fc <open_socket_service>
				if(received_res){
 80022ee:	4605      	mov	r5, r0
 80022f0:	2800      	cmp	r0, #0
 80022f2:	f040 8336 	bne.w	8002962 <StartGSM+0x826>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 80022f6:	4924      	ldr	r1, [pc, #144]	@ (8002388 <StartGSM+0x24c>)
 80022f8:	e7dd      	b.n	80022b6 <StartGSM+0x17a>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022fe:	4621      	mov	r1, r4
 8002300:	e756      	b.n	80021b0 <StartGSM+0x74>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002302:	4922      	ldr	r1, [pc, #136]	@ (800238c <StartGSM+0x250>)
 8002304:	4814      	ldr	r0, [pc, #80]	@ (8002358 <StartGSM+0x21c>)
 8002306:	f001 f9df 	bl	80036c8 <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 800230a:	a902      	add	r1, sp, #8
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fba1 	bl	8001a54 <login_to_server>
				if(result_send_login){
 8002312:	2800      	cmp	r0, #0
 8002314:	f040 8327 	bne.w	8002966 <StartGSM+0x82a>
				else process = 8;
 8002318:	2408      	movs	r4, #8
 800231a:	e79b      	b.n	8002254 <StartGSM+0x118>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 800231c:	480e      	ldr	r0, [pc, #56]	@ (8002358 <StartGSM+0x21c>)
 800231e:	491c      	ldr	r1, [pc, #112]	@ (8002390 <StartGSM+0x254>)
 8002320:	f001 f9d2 	bl	80036c8 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff fc5f 	bl	8001be8 <check_data_sent_to_server>
				if(result_check_login){
 800232a:	2800      	cmp	r0, #0
 800232c:	d0f4      	beq.n	8002318 <StartGSM+0x1dc>
					receive_response("Check terminal register\n");
 800232e:	4819      	ldr	r0, [pc, #100]	@ (8002394 <StartGSM+0x258>)
 8002330:	f7fe fd5e 	bl	8000df0 <receive_response>
					process++;
 8002334:	2407      	movs	r4, #7
 8002336:	e78d      	b.n	8002254 <StartGSM+0x118>
 8002338:	0800d72f 	.word	0x0800d72f
 800233c:	200002cc 	.word	0x200002cc
 8002340:	20000468 	.word	0x20000468
 8002344:	200002e4 	.word	0x200002e4
 8002348:	20000760 	.word	0x20000760
 800234c:	200002d4 	.word	0x200002d4
 8002350:	20000480 	.word	0x20000480
 8002354:	0800d786 	.word	0x0800d786
 8002358:	20000870 	.word	0x20000870
 800235c:	0800d794 	.word	0x0800d794
 8002360:	0800d7aa 	.word	0x0800d7aa
 8002364:	20000260 	.word	0x20000260
 8002368:	0800d7c3 	.word	0x0800d7c3
 800236c:	0800d7d8 	.word	0x0800d7d8
 8002370:	0800deba 	.word	0x0800deba
 8002374:	0800db69 	.word	0x0800db69
 8002378:	0800d800 	.word	0x0800d800
 800237c:	0800d827 	.word	0x0800d827
 8002380:	0800d84a 	.word	0x0800d84a
 8002384:	0800d867 	.word	0x0800d867
 8002388:	0800d88d 	.word	0x0800d88d
 800238c:	0800d8a7 	.word	0x0800d8a7
 8002390:	0800d8d7 	.word	0x0800d8d7
 8002394:	0800d8fe 	.word	0x0800d8fe
				is_in_sending = 1;
 8002398:	2301      	movs	r3, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 800239a:	49a3      	ldr	r1, [pc, #652]	@ (8002628 <StartGSM+0x4ec>)
 800239c:	48a3      	ldr	r0, [pc, #652]	@ (800262c <StartGSM+0x4f0>)
				is_in_sending = 1;
 800239e:	6033      	str	r3, [r6, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 80023a0:	f001 f992 	bl	80036c8 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 80023a4:	f7ff fd40 	bl	8001e28 <getCurrentTime>
				if(result_get_current == 0){
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d0b5      	beq.n	8002318 <StartGSM+0x1dc>
						received_RMC = 0;
 80023ac:	2500      	movs	r5, #0
 80023ae:	4ba0      	ldr	r3, [pc, #640]	@ (8002630 <StartGSM+0x4f4>)
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 80023b0:	49a0      	ldr	r1, [pc, #640]	@ (8002634 <StartGSM+0x4f8>)
 80023b2:	489e      	ldr	r0, [pc, #632]	@ (800262c <StartGSM+0x4f0>)
						received_RMC = 0;
 80023b4:	601d      	str	r5, [r3, #0]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 80023b6:	f001 f987 	bl	80036c8 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 80023ba:	a811      	add	r0, sp, #68	@ 0x44
 80023bc:	f7fe fd88 	bl	8000ed0 <save_rmc_to_location_info>
						HAL_TIM_Base_Start(&htim3);
 80023c0:	f8df a2e4 	ldr.w	sl, [pc, #740]	@ 80026a8 <StartGSM+0x56c>
						Debug_printf("Current stack address to be sent to the server: \n");
 80023c4:	489c      	ldr	r0, [pc, #624]	@ (8002638 <StartGSM+0x4fc>)
							uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80023c6:	4c9d      	ldr	r4, [pc, #628]	@ (800263c <StartGSM+0x500>)
							result_final = processUploadDataToServer(&location_info);
 80023c8:	f8df 92e0 	ldr.w	r9, [pc, #736]	@ 80026ac <StartGSM+0x570>
						Debug_printf("Current stack address to be sent to the server: \n");
 80023cc:	f001 f98c 	bl	80036e8 <Debug_printf>
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	489b      	ldr	r0, [pc, #620]	@ (8002640 <StartGSM+0x504>)
 80023d4:	f001 f988 	bl	80036e8 <Debug_printf>
						HAL_TIM_Base_Start(&htim3);
 80023d8:	4650      	mov	r0, sl
 80023da:	f002 ffb7 	bl	800534c <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 80023de:	f8da 3000 	ldr.w	r3, [sl]
							uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80023e2:	6820      	ldr	r0, [r4, #0]
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 80023e4:	625d      	str	r5, [r3, #36]	@ 0x24
							uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80023e6:	f003 feab 	bl	8006140 <osThreadGetStackSpace>
							Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80023ea:	6821      	ldr	r1, [r4, #0]
 80023ec:	4c95      	ldr	r4, [pc, #596]	@ (8002644 <StartGSM+0x508>)
							uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80023ee:	4602      	mov	r2, r0
							Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80023f0:	4895      	ldr	r0, [pc, #596]	@ (8002648 <StartGSM+0x50c>)
 80023f2:	f001 f979 	bl	80036e8 <Debug_printf>
							result_final = processUploadDataToServer(&location_info);
 80023f6:	a811      	add	r0, sp, #68	@ 0x44
 80023f8:	f7ff fe22 	bl	8002040 <processUploadDataToServer>
							if(result_final == 1){
 80023fc:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 80023fe:	f8c9 0000 	str.w	r0, [r9]
							if(result_final == 1){
 8002402:	f040 815b 	bne.w	80026bc <StartGSM+0x580>
								uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002406:	4991      	ldr	r1, [pc, #580]	@ (800264c <StartGSM+0x510>)
 8002408:	4888      	ldr	r0, [pc, #544]	@ (800262c <StartGSM+0x4f0>)
 800240a:	f001 f95d 	bl	80036c8 <uart_transmit_string>
								receive_response("Check location report\n");
 800240e:	4890      	ldr	r0, [pc, #576]	@ (8002650 <StartGSM+0x514>)
 8002410:	f7fe fcee 	bl	8000df0 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002414:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002418:	2100      	movs	r1, #0
 800241a:	488e      	ldr	r0, [pc, #568]	@ (8002654 <StartGSM+0x518>)
 800241c:	f007 fb20 	bl	8009a60 <memset>
								SIM_UART_ReInitializeRxDMA();
 8002420:	f7fe fcca 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	2a01      	cmp	r2, #1
 8002428:	d030      	beq.n	800248c <StartGSM+0x350>
 800242a:	4b8b      	ldr	r3, [pc, #556]	@ (8002658 <StartGSM+0x51c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	f040 80e0 	bne.w	80025f4 <StartGSM+0x4b8>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002434:	4889      	ldr	r0, [pc, #548]	@ (800265c <StartGSM+0x520>)
									if(is_keep_up == 0) num_in_mail_sent++;
 8002436:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 80026b0 <StartGSM+0x574>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 800243a:	f001 f955 	bl	80036e8 <Debug_printf>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	4887      	ldr	r0, [pc, #540]	@ (8002660 <StartGSM+0x524>)
 8002442:	f000 fad3 	bl	80029ec <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002446:	f8d8 3000 	ldr.w	r3, [r8]
 800244a:	b91b      	cbnz	r3, 8002454 <StartGSM+0x318>
 800244c:	4a85      	ldr	r2, [pc, #532]	@ (8002664 <StartGSM+0x528>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	6013      	str	r3, [r2, #0]
									for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002454:	f8df c208 	ldr.w	ip, [pc, #520]	@ 8002660 <StartGSM+0x524>
 8002458:	f8dc 3208 	ldr.w	r3, [ip, #520]	@ 0x208
										int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800245c:	f8dc 0200 	ldr.w	r0, [ip, #512]	@ 0x200
									for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002460:	f103 3bff 	add.w	fp, r3, #4294967295
										if(result_addr_queue.data[idx] != (FLASH_END_ADDRESS - 0x100) && in_getting_mail_stack == 1){
 8002464:	4b80      	ldr	r3, [pc, #512]	@ (8002668 <StartGSM+0x52c>)
 8002466:	2200      	movs	r2, #0
 8002468:	f8d3 9000 	ldr.w	r9, [r3]
 800246c:	4611      	mov	r1, r2
									for (int i = 0; i < result_addr_queue.size-1; i++) {
 800246e:	458b      	cmp	fp, r1
 8002470:	dc16      	bgt.n	80024a0 <StartGSM+0x364>
 8002472:	b352      	cbz	r2, 80024ca <StartGSM+0x38e>
 8002474:	2301      	movs	r3, #1
 8002476:	f8c8 3000 	str.w	r3, [r8]
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 800247a:	f1b9 0f01 	cmp.w	r9, #1
 800247e:	d128      	bne.n	80024d2 <StartGSM+0x396>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002480:	f04f 0c00 	mov.w	ip, #0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002484:	f8df e1d8 	ldr.w	lr, [pc, #472]	@ 8002660 <StartGSM+0x524>
										int count_stack = 0;
 8002488:	4661      	mov	r1, ip
 800248a:	e082      	b.n	8002592 <StartGSM+0x456>
										end_addr_disconnect = current_addr_gsm;
 800248c:	4b77      	ldr	r3, [pc, #476]	@ (800266c <StartGSM+0x530>)
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002492:	4975      	ldr	r1, [pc, #468]	@ (8002668 <StartGSM+0x52c>)
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002494:	4876      	ldr	r0, [pc, #472]	@ (8002670 <StartGSM+0x534>)
										in_getting_mail_stack = 1;
 8002496:	600a      	str	r2, [r1, #0]
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	f001 f925 	bl	80036e8 <Debug_printf>
 800249e:	e7c9      	b.n	8002434 <StartGSM+0x2f8>
										int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80024a0:	1843      	adds	r3, r0, r1
 80024a2:	f1d3 0e00 	rsbs	lr, r3, #0
 80024a6:	f00e 0e7f 	and.w	lr, lr, #127	@ 0x7f
 80024aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ae:	bf58      	it	pl
 80024b0:	f1ce 0300 	rsbpl	r3, lr, #0
										if(result_addr_queue.data[idx] != (FLASH_END_ADDRESS - 0x100) && in_getting_mail_stack == 1){
 80024b4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80024b8:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80024bc:	d003      	beq.n	80024c6 <StartGSM+0x38a>
 80024be:	f1b9 0f01 	cmp.w	r9, #1
 80024c2:	bf08      	it	eq
 80024c4:	2201      	moveq	r2, #1
									for (int i = 0; i < result_addr_queue.size-1; i++) {
 80024c6:	3101      	adds	r1, #1
 80024c8:	e7d1      	b.n	800246e <StartGSM+0x332>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 80024ca:	f8d8 3000 	ldr.w	r3, [r8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d0d3      	beq.n	800247a <StartGSM+0x33e>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 80024d2:	4868      	ldr	r0, [pc, #416]	@ (8002674 <StartGSM+0x538>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 80024d4:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 800266c <StartGSM+0x530>
 80024d8:	f8df b1c8 	ldr.w	fp, [pc, #456]	@ 80026a4 <StartGSM+0x568>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 80024dc:	f001 f904 	bl	80036e8 <Debug_printf>
									printQueue_GSM(&result_addr_queue);
 80024e0:	485f      	ldr	r0, [pc, #380]	@ (8002660 <StartGSM+0x524>)
 80024e2:	f000 fab3 	bl	8002a4c <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 80024e6:	f8d9 3000 	ldr.w	r3, [r9]
 80024ea:	f8db 1000 	ldr.w	r1, [fp]
 80024ee:	3b80      	subs	r3, #128	@ 0x80
 80024f0:	428b      	cmp	r3, r1
 80024f2:	f200 8092 	bhi.w	800261a <StartGSM+0x4de>
 80024f6:	f8d9 0000 	ldr.w	r0, [r9]
 80024fa:	4959      	ldr	r1, [pc, #356]	@ (8002660 <StartGSM+0x524>)
 80024fc:	3880      	subs	r0, #128	@ 0x80
 80024fe:	f000 fad9 	bl	8002ab4 <checkAddrExistInQueue>
 8002502:	2800      	cmp	r0, #0
 8002504:	f000 8089 	beq.w	800261a <StartGSM+0x4de>
										Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002508:	485b      	ldr	r0, [pc, #364]	@ (8002678 <StartGSM+0x53c>)
 800250a:	f001 f8ed 	bl	80036e8 <Debug_printf>
										is_using_flash = 0;
 800250e:	4a52      	ldr	r2, [pc, #328]	@ (8002658 <StartGSM+0x51c>)
										clearQueue_GSM(&result_addr_queue);
 8002510:	4853      	ldr	r0, [pc, #332]	@ (8002660 <StartGSM+0x524>)
										is_using_flash = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002516:	f000 fa89 	bl	8002a2c <clearQueue_GSM>
										count_shiftleft = 0;
 800251a:	4a58      	ldr	r2, [pc, #352]	@ (800267c <StartGSM+0x540>)
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800251c:	4858      	ldr	r0, [pc, #352]	@ (8002680 <StartGSM+0x544>)
										start_addr_disconnect = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	f8cb 3000 	str.w	r3, [fp]
										is_keep_up = 0;
 8002524:	f8c8 3000 	str.w	r3, [r8]
										end_addr_disconnect = 0;
 8002528:	f8c9 3000 	str.w	r3, [r9]
										count_shiftleft = 0;
 800252c:	7013      	strb	r3, [r2, #0]
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800252e:	f001 f8db 	bl	80036e8 <Debug_printf>
											Debug_printf("Receiving MAIL\n");
 8002532:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80026b4 <StartGSM+0x578>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002536:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8002684 <StartGSM+0x548>
 800253a:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80026b8 <StartGSM+0x57c>
											Debug_printf("Receiving MAIL\n");
 800253e:	4658      	mov	r0, fp
 8002540:	f001 f8d2 	bl	80036e8 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002544:	494f      	ldr	r1, [pc, #316]	@ (8002684 <StartGSM+0x548>)
 8002546:	f8d9 0000 	ldr.w	r0, [r9]
 800254a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800254e:	2200      	movs	r2, #0
 8002550:	f003 fe24 	bl	800619c <osMessageQueueGet>
											if(status == osOK){
 8002554:	2800      	cmp	r0, #0
 8002556:	d149      	bne.n	80025ec <StartGSM+0x4b0>
												Debug_printf("Receiving MAIL For CLEARING: %08lx\n", receivedDataGSM.address);
 8002558:	f8d8 1058 	ldr.w	r1, [r8, #88]	@ 0x58
 800255c:	484a      	ldr	r0, [pc, #296]	@ (8002688 <StartGSM+0x54c>)
 800255e:	f001 f8c3 	bl	80036e8 <Debug_printf>
										while(1){
 8002562:	e7ec      	b.n	800253e <StartGSM+0x402>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002564:	eb00 030c 	add.w	r3, r0, ip
 8002568:	425a      	negs	r2, r3
 800256a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800256e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002572:	bf58      	it	pl
 8002574:	4253      	negpl	r3, r2
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002576:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800257a:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
 800257e:	d106      	bne.n	800258e <StartGSM+0x452>
 8002580:	3301      	adds	r3, #1
 8002582:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8002586:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 800258a:	bf08      	it	eq
 800258c:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800258e:	f10c 0c01 	add.w	ip, ip, #1
 8002592:	45e3      	cmp	fp, ip
 8002594:	dce6      	bgt.n	8002564 <StartGSM+0x428>
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002596:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 8002660 <StartGSM+0x524>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800259a:	f04f 0c00 	mov.w	ip, #0
 800259e:	45e3      	cmp	fp, ip
 80025a0:	dc06      	bgt.n	80025b0 <StartGSM+0x474>
										in_getting_mail_stack = 0;
 80025a2:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <StartGSM+0x52c>)
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 80025a4:	4839      	ldr	r0, [pc, #228]	@ (800268c <StartGSM+0x550>)
										in_getting_mail_stack = 0;
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 80025aa:	f001 f89d 	bl	80036e8 <Debug_printf>
 80025ae:	e790      	b.n	80024d2 <StartGSM+0x396>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80025b0:	eb0c 0300 	add.w	r3, ip, r0
 80025b4:	425a      	negs	r2, r3
 80025b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025be:	bf58      	it	pl
 80025c0:	4253      	negpl	r3, r2
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 80025c2:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80025c6:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
 80025ca:	d10c      	bne.n	80025e6 <StartGSM+0x4aa>
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80025d2:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 80025d6:	bf01      	itttt	eq
 80025d8:	01ca      	lsleq	r2, r1, #7
 80025da:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
 80025de:	f84e 2023 	streq.w	r2, [lr, r3, lsl #2]
												count_stack--;
 80025e2:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80025e6:	f10c 0c01 	add.w	ip, ip, #1
 80025ea:	e7d8      	b.n	800259e <StartGSM+0x462>
												Debug_printf("Have cleared out all mail queue\n");
 80025ec:	4828      	ldr	r0, [pc, #160]	@ (8002690 <StartGSM+0x554>)
 80025ee:	f001 f87b 	bl	80036e8 <Debug_printf>
									is_disconnect = 0;
 80025f2:	6025      	str	r5, [r4, #0]
								is_pushing_data = 0;
 80025f4:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <StartGSM+0x558>)
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 80025f6:	4828      	ldr	r0, [pc, #160]	@ (8002698 <StartGSM+0x55c>)
								is_pushing_data = 0;
 80025f8:	601d      	str	r5, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3)/1000;
 80025fa:	f8da 3000 	ldr.w	r3, [sl]
 80025fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002604:	fbb1 f1f3 	udiv	r1, r1, r3
 8002608:	f001 f86e 	bl	80036e8 <Debug_printf>
							Debug_printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 800260c:	4823      	ldr	r0, [pc, #140]	@ (800269c <StartGSM+0x560>)
 800260e:	f001 f86b 	bl	80036e8 <Debug_printf>
							osDelay(200);
 8002612:	20c8      	movs	r0, #200	@ 0xc8
 8002614:	f003 fda8 	bl	8006168 <osDelay>
 8002618:	e6c9      	b.n	80023ae <StartGSM+0x272>
										Debug_printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 800261a:	4821      	ldr	r0, [pc, #132]	@ (80026a0 <StartGSM+0x564>)
 800261c:	f001 f864 	bl	80036e8 <Debug_printf>
										is_using_flash = 1;
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <StartGSM+0x51c>)
 8002622:	2301      	movs	r3, #1
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e7e4      	b.n	80025f2 <StartGSM+0x4b6>
 8002628:	0800d917 	.word	0x0800d917
 800262c:	20000870 	.word	0x20000870
 8002630:	200002d0 	.word	0x200002d0
 8002634:	0800d937 	.word	0x0800d937
 8002638:	0800d958 	.word	0x0800d958
 800263c:	20000690 	.word	0x20000690
 8002640:	0800d98a 	.word	0x0800d98a
 8002644:	2000047c 	.word	0x2000047c
 8002648:	0800d9d1 	.word	0x0800d9d1
 800264c:	0800d6c9 	.word	0x0800d6c9
 8002650:	0800d6da 	.word	0x0800d6da
 8002654:	200002e4 	.word	0x200002e4
 8002658:	20000478 	.word	0x20000478
 800265c:	0800da69 	.word	0x0800da69
 8002660:	20000480 	.word	0x20000480
 8002664:	200002c0 	.word	0x200002c0
 8002668:	200002c4 	.word	0x200002c4
 800266c:	20000464 	.word	0x20000464
 8002670:	0800da2a 	.word	0x0800da2a
 8002674:	0800dafc 	.word	0x0800dafc
 8002678:	0800db31 	.word	0x0800db31
 800267c:	20000474 	.word	0x20000474
 8002680:	0800db6c 	.word	0x0800db6c
 8002684:	20000200 	.word	0x20000200
 8002688:	0800dbbc 	.word	0x0800dbbc
 800268c:	0800daab 	.word	0x0800daab
 8002690:	0800dbe0 	.word	0x0800dbe0
 8002694:	20000470 	.word	0x20000470
 8002698:	0800dc48 	.word	0x0800dc48
 800269c:	0800dc92 	.word	0x0800dc92
 80026a0:	0800dc01 	.word	0x0800dc01
 80026a4:	2000046c 	.word	0x2000046c
 80026a8:	200008f8 	.word	0x200008f8
 80026ac:	20000000 	.word	0x20000000
 80026b0:	200002c8 	.word	0x200002c8
 80026b4:	0800dbac 	.word	0x0800dbac
 80026b8:	2000068c 	.word	0x2000068c
								uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 80026bc:	49ab      	ldr	r1, [pc, #684]	@ (800296c <StartGSM+0x830>)
 80026be:	48ac      	ldr	r0, [pc, #688]	@ (8002970 <StartGSM+0x834>)
 80026c0:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 80029d0 <StartGSM+0x894>
 80026c4:	f001 f800 	bl	80036c8 <uart_transmit_string>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026c8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026cc:	2100      	movs	r1, #0
 80026ce:	48a9      	ldr	r0, [pc, #676]	@ (8002974 <StartGSM+0x838>)
 80026d0:	f007 f9c6 	bl	8009a60 <memset>
								SIM_UART_ReInitializeRxDMA();
 80026d4:	f7fe fb70 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	b95b      	cbnz	r3, 80026f4 <StartGSM+0x5b8>
									if(is_using_flash == 0){
 80026dc:	f8d8 3000 	ldr.w	r3, [r8]
 80026e0:	b933      	cbnz	r3, 80026f0 <StartGSM+0x5b4>
										start_addr_disconnect = current_addr_gsm;
 80026e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002978 <StartGSM+0x83c>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	601a      	str	r2, [r3, #0]
										Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	48a4      	ldr	r0, [pc, #656]	@ (800297c <StartGSM+0x840>)
 80026ec:	f000 fffc 	bl	80036e8 <Debug_printf>
									is_disconnect = 1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	6023      	str	r3, [r4, #0]
								if(is_using_flash == 1){
 80026f4:	f8d8 3000 	ldr.w	r3, [r8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 80f1 	bne.w	80028e0 <StartGSM+0x7a4>
									if(is_keep_up){
 80026fe:	f8df a2d4 	ldr.w	sl, [pc, #724]	@ 80029d4 <StartGSM+0x898>
 8002702:	4d9f      	ldr	r5, [pc, #636]	@ (8002980 <StartGSM+0x844>)
 8002704:	f8da 2000 	ldr.w	r2, [sl]
 8002708:	bb4a      	cbnz	r2, 800275e <StartGSM+0x622>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800270a:	f8d5 4208 	ldr.w	r4, [r5, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800270e:	f8d5 c200 	ldr.w	ip, [r5, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002712:	3c01      	subs	r4, #1
 8002714:	4696      	mov	lr, r2
										int count_stack = 0;
 8002716:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002718:	4574      	cmp	r4, lr
 800271a:	f300 80bf 	bgt.w	800289c <StartGSM+0x760>
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 800271e:	4d98      	ldr	r5, [pc, #608]	@ (8002980 <StartGSM+0x844>)
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002720:	4294      	cmp	r4, r2
 8002722:	dd38      	ble.n	8002796 <StartGSM+0x65a>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002724:	eb02 000c 	add.w	r0, r2, ip
 8002728:	4243      	negs	r3, r0
 800272a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800272e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002732:	bf58      	it	pl
 8002734:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002736:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800273a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 800273e:	d10c      	bne.n	800275a <StartGSM+0x61e>
 8002740:	1c43      	adds	r3, r0, #1
 8002742:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002746:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 800274a:	bf01      	itttt	eq
 800274c:	01cb      	lsleq	r3, r1, #7
 800274e:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002752:	f845 3020 	streq.w	r3, [r5, r0, lsl #2]
												count_stack--;
 8002756:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800275a:	3201      	adds	r2, #1
 800275c:	e7e0      	b.n	8002720 <StartGSM+0x5e4>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 800275e:	4889      	ldr	r0, [pc, #548]	@ (8002984 <StartGSM+0x848>)
 8002760:	f000 ffc2 	bl	80036e8 <Debug_printf>
										printQueue_GSM(&result_addr_queue);
 8002764:	4628      	mov	r0, r5
 8002766:	f000 f971 	bl	8002a4c <printQueue_GSM>
										Debug_printf("\n--------------- Update the result address data: GSM --------------\n");
 800276a:	4887      	ldr	r0, [pc, #540]	@ (8002988 <StartGSM+0x84c>)
 800276c:	f000 ffbc 	bl	80036e8 <Debug_printf>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002770:	4a81      	ldr	r2, [pc, #516]	@ (8002978 <StartGSM+0x83c>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002772:	f04f 0b00 	mov.w	fp, #0
 8002776:	f8d5 1208 	ldr.w	r1, [r5, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800277a:	f8d5 4200 	ldr.w	r4, [r5, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 800277e:	4559      	cmp	r1, fp
 8002780:	dc59      	bgt.n	8002836 <StartGSM+0x6fa>
										int count_shiftleft_dub = count_shiftleft;
 8002782:	4b82      	ldr	r3, [pc, #520]	@ (800298c <StartGSM+0x850>)
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8002784:	f8df e1f8 	ldr.w	lr, [pc, #504]	@ 8002980 <StartGSM+0x844>
										int count_shiftleft_dub = count_shiftleft;
 8002788:	f893 c000 	ldrb.w	ip, [r3]
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 800278c:	4665      	mov	r5, ip
 800278e:	01ed      	lsls	r5, r5, #7
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002790:	2000      	movs	r0, #0
 8002792:	4281      	cmp	r1, r0
 8002794:	dc69      	bgt.n	800286a <StartGSM+0x72e>
									printQueue_GSM(&result_addr_queue);
 8002796:	487a      	ldr	r0, [pc, #488]	@ (8002980 <StartGSM+0x844>)
 8002798:	f000 f958 	bl	8002a4c <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 800279c:	4b76      	ldr	r3, [pc, #472]	@ (8002978 <StartGSM+0x83c>)
 800279e:	497b      	ldr	r1, [pc, #492]	@ (800298c <StartGSM+0x850>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	7808      	ldrb	r0, [r1, #0]
 80027a4:	eba2 12c0 	sub.w	r2, r2, r0, lsl #7
 80027a8:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 80027b0:	ea4f 14c0 	mov.w	r4, r0, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 80027b4:	f0c0 808a 	bcc.w	80028cc <StartGSM+0x790>
									end_addr_disconnect -= 128 *count_shiftleft;
 80027b8:	4a75      	ldr	r2, [pc, #468]	@ (8002990 <StartGSM+0x854>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80027ba:	4876      	ldr	r0, [pc, #472]	@ (8002994 <StartGSM+0x858>)
									end_addr_disconnect -= 128 *count_shiftleft;
 80027bc:	6813      	ldr	r3, [r2, #0]
										Debug_printf("Receiving MAIL\n");
 80027be:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80029d8 <StartGSM+0x89c>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80027c2:	4d75      	ldr	r5, [pc, #468]	@ (8002998 <StartGSM+0x85c>)
									end_addr_disconnect -= 128 *count_shiftleft;
 80027c4:	1b1b      	subs	r3, r3, r4
 80027c6:	6013      	str	r3, [r2, #0]
									count_shiftleft = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	700b      	strb	r3, [r1, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80027cc:	f000 ff8c 	bl	80036e8 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80027d0:	4c72      	ldr	r4, [pc, #456]	@ (800299c <StartGSM+0x860>)
										Debug_printf("Receiving MAIL\n");
 80027d2:	4658      	mov	r0, fp
 80027d4:	f000 ff88 	bl	80036e8 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80027d8:	4970      	ldr	r1, [pc, #448]	@ (800299c <StartGSM+0x860>)
 80027da:	6828      	ldr	r0, [r5, #0]
 80027dc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80027e0:	2200      	movs	r2, #0
 80027e2:	f003 fcdb 	bl	800619c <osMessageQueueGet>
										if(status == osOK){
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d174      	bne.n	80028d4 <StartGSM+0x798>
											Debug_printf("Receiving MAIL: %08lx\n", receivedDataGSM.address);
 80027ea:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80027ec:	486c      	ldr	r0, [pc, #432]	@ (80029a0 <StartGSM+0x864>)
 80027ee:	f000 ff7b 	bl	80036e8 <Debug_printf>
											if(is_keep_up == 0 && receivedDataGSM.address == 0x4F00){
 80027f2:	f8da 2000 	ldr.w	r2, [sl]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d1eb      	bne.n	80027d2 <StartGSM+0x696>
 80027fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027fc:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002800:	d1e7      	bne.n	80027d2 <StartGSM+0x696>
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002802:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <StartGSM+0x868>)
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002804:	495e      	ldr	r1, [pc, #376]	@ (8002980 <StartGSM+0x844>)
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002806:	f8d3 e000 	ldr.w	lr, [r3]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 800280a:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
 800280e:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002812:	4596      	cmp	lr, r2
 8002814:	dddd      	ble.n	80027d2 <StartGSM+0x696>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002816:	ebac 0302 	sub.w	r3, ip, r2
 800281a:	4258      	negs	r0, r3
 800281c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002824:	bf58      	it	pl
 8002826:	4243      	negpl	r3, r0
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002828:	3201      	adds	r2, #1
													result_addr_queue.data[idx] -= 128;
 800282a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800282e:	3880      	subs	r0, #128	@ 0x80
 8002830:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002834:	e7ed      	b.n	8002812 <StartGSM+0x6d6>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002836:	445c      	add	r4, fp
 8002838:	4261      	negs	r1, r4
 800283a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800283e:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002842:	bf58      	it	pl
 8002844:	424c      	negpl	r4, r1
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 800284c:	4281      	cmp	r1, r0
 800284e:	d209      	bcs.n	8002864 <StartGSM+0x728>
												Debug_printf("CURRENT INDEX TO CHECK DELETING: %08lx", result_addr_queue.data[idx]);
 8002850:	4855      	ldr	r0, [pc, #340]	@ (80029a8 <StartGSM+0x86c>)
 8002852:	f000 ff49 	bl	80036e8 <Debug_printf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 8002856:	4621      	mov	r1, r4
 8002858:	4628      	mov	r0, r5
 800285a:	f000 f951 	bl	8002b00 <deleteMiddle_GSM>
												i--;
 800285e:	4a46      	ldr	r2, [pc, #280]	@ (8002978 <StartGSM+0x83c>)
 8002860:	f10b 3bff 	add.w	fp, fp, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002864:	f10b 0b01 	add.w	fp, fp, #1
 8002868:	e785      	b.n	8002776 <StartGSM+0x63a>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800286a:	1903      	adds	r3, r0, r4
 800286c:	425a      	negs	r2, r3
 800286e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002876:	bf58      	it	pl
 8002878:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++) {
 800287a:	3001      	adds	r0, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 800287c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8002880:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8002884:	bf06      	itte	eq
 8002886:	ea4f 12cc 	moveq.w	r2, ip, lsl #7
 800288a:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 800288e:	1b52      	subne	r2, r2, r5
 8002890:	f84e 2023 	str.w	r2, [lr, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8002894:	bf08      	it	eq
 8002896:	f10c 3cff 	addeq.w	ip, ip, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 800289a:	e77a      	b.n	8002792 <StartGSM+0x656>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800289c:	eb0c 030e 	add.w	r3, ip, lr
 80028a0:	4258      	negs	r0, r3
 80028a2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80028a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028aa:	bf58      	it	pl
 80028ac:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 80028ae:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80028b2:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 80028b6:	d106      	bne.n	80028c6 <StartGSM+0x78a>
 80028b8:	3301      	adds	r3, #1
 80028ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80028be:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 80028c2:	bf08      	it	eq
 80028c4:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80028c6:	f10e 0e01 	add.w	lr, lr, #1
 80028ca:	e725      	b.n	8002718 <StartGSM+0x5dc>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 80028cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e771      	b.n	80027b8 <StartGSM+0x67c>
											Debug_printf("Have cleared out all mail queue\n");
 80028d4:	4835      	ldr	r0, [pc, #212]	@ (80029ac <StartGSM+0x870>)
 80028d6:	f000 ff07 	bl	80036e8 <Debug_printf>
									is_using_flash = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c8 3000 	str.w	r3, [r8]
								is_pushing_data = 0;
 80028e0:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <StartGSM+0x874>)
 80028e2:	2400      	movs	r4, #0
 80028e4:	601c      	str	r4, [r3, #0]
								if(result_final == 2){
 80028e6:	f8d9 3000 	ldr.w	r3, [r9]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d114      	bne.n	8002918 <StartGSM+0x7dc>
									Debug_printf("---------------------SIM ERROR ----------------------\n");
 80028ee:	4831      	ldr	r0, [pc, #196]	@ (80029b4 <StartGSM+0x878>)
 80028f0:	f000 fefa 	bl	80036e8 <Debug_printf>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028f4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028f8:	4621      	mov	r1, r4
 80028fa:	481e      	ldr	r0, [pc, #120]	@ (8002974 <StartGSM+0x838>)
 80028fc:	f007 f8b0 	bl	8009a60 <memset>
									SIM_UART_ReInitializeRxDMA();
 8002900:	f7fe fa5a 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
									uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002904:	492c      	ldr	r1, [pc, #176]	@ (80029b8 <StartGSM+0x87c>)
 8002906:	481a      	ldr	r0, [pc, #104]	@ (8002970 <StartGSM+0x834>)
 8002908:	f000 fede 	bl	80036c8 <uart_transmit_string>
									reboot_SIM_module();
 800290c:	f7fe fab0 	bl	8000e70 <reboot_SIM_module>
				Debug_printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 8002910:	482a      	ldr	r0, [pc, #168]	@ (80029bc <StartGSM+0x880>)
 8002912:	f000 fee9 	bl	80036e8 <Debug_printf>
				break;
 8002916:	e49d      	b.n	8002254 <StartGSM+0x118>
									Debug_printf("\n--------------------SENDING ERROR -----------------------\n");
 8002918:	4829      	ldr	r0, [pc, #164]	@ (80029c0 <StartGSM+0x884>)
 800291a:	f000 fee5 	bl	80036e8 <Debug_printf>
									process++;
 800291e:	2408      	movs	r4, #8
									break;
 8002920:	e7f6      	b.n	8002910 <StartGSM+0x7d4>
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002922:	4c28      	ldr	r4, [pc, #160]	@ (80029c4 <StartGSM+0x888>)
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	f003 fc0b 	bl	8006140 <osThreadGetStackSpace>
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 800292a:	6821      	ldr	r1, [r4, #0]
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 800292c:	4602      	mov	r2, r0
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 800292e:	4826      	ldr	r0, [pc, #152]	@ (80029c8 <StartGSM+0x88c>)
 8002930:	f000 feda 	bl	80036e8 <Debug_printf>
				int result_close = close_connection(0);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff f9c7 	bl	8001cc8 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800293a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 800293e:	4601      	mov	r1, r0
 8002940:	2800      	cmp	r0, #0
 8002942:	f43f ac35 	beq.w	80021b0 <StartGSM+0x74>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002946:	2100      	movs	r1, #0
 8002948:	480a      	ldr	r0, [pc, #40]	@ (8002974 <StartGSM+0x838>)
 800294a:	f007 f889 	bl	8009a60 <memset>
					SIM_UART_ReInitializeRxDMA();
 800294e:	f7fe fa33 	bl	8000db8 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002952:	491e      	ldr	r1, [pc, #120]	@ (80029cc <StartGSM+0x890>)
 8002954:	4806      	ldr	r0, [pc, #24]	@ (8002970 <StartGSM+0x834>)
 8002956:	f000 feb7 	bl	80036c8 <uart_transmit_string>
						process = 4;
 800295a:	e4a9      	b.n	80022b0 <StartGSM+0x174>
 800295c:	9401      	str	r4, [sp, #4]
				else process++;
 800295e:	2402      	movs	r4, #2
 8002960:	e478      	b.n	8002254 <StartGSM+0x118>
						process++;
 8002962:	2405      	movs	r4, #5
 8002964:	e476      	b.n	8002254 <StartGSM+0x118>
					process++;
 8002966:	2406      	movs	r4, #6
 8002968:	e474      	b.n	8002254 <StartGSM+0x118>
 800296a:	bf00      	nop
 800296c:	0800dcda 	.word	0x0800dcda
 8002970:	20000870 	.word	0x20000870
 8002974:	200002e4 	.word	0x200002e4
 8002978:	2000046c 	.word	0x2000046c
 800297c:	0800dce9 	.word	0x0800dce9
 8002980:	20000480 	.word	0x20000480
 8002984:	0800dd1a 	.word	0x0800dd1a
 8002988:	0800dd67 	.word	0x0800dd67
 800298c:	20000474 	.word	0x20000474
 8002990:	20000464 	.word	0x20000464
 8002994:	0800db6c 	.word	0x0800db6c
 8002998:	2000068c 	.word	0x2000068c
 800299c:	20000200 	.word	0x20000200
 80029a0:	0800ddd3 	.word	0x0800ddd3
 80029a4:	200002c0 	.word	0x200002c0
 80029a8:	0800ddac 	.word	0x0800ddac
 80029ac:	0800dbe0 	.word	0x0800dbe0
 80029b0:	20000470 	.word	0x20000470
 80029b4:	0800ddea 	.word	0x0800ddea
 80029b8:	0800d794 	.word	0x0800d794
 80029bc:	0800de5d 	.word	0x0800de5d
 80029c0:	0800de21 	.word	0x0800de21
 80029c4:	20000690 	.word	0x20000690
 80029c8:	0800d9d1 	.word	0x0800d9d1
 80029cc:	0800de9d 	.word	0x0800de9d
 80029d0:	20000478 	.word	0x20000478
 80029d4:	200002c8 	.word	0x200002c8
 80029d8:	0800dbac 	.word	0x0800dbac

080029dc <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 80029dc:	2300      	movs	r3, #0
 80029de:	f04f 32ff 	mov.w	r2, #4294967295
 80029e2:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 80029e6:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 80029ea:	4770      	bx	lr

080029ec <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 80029ec:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 80029f0:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 80029f2:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 80029f4:	d104      	bne.n	8002a00 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 80029f6:	480c      	ldr	r0, [pc, #48]	@ (8002a28 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 80029f8:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 80029fc:	f000 be74 	b.w	80036e8 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002a00:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002a04:	3301      	adds	r3, #1
 8002a06:	425c      	negs	r4, r3
 8002a08:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a10:	bf58      	it	pl
 8002a12:	4263      	negpl	r3, r4
    q->size++;
 8002a14:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002a16:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 8002a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8002a1e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 8002a22:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 8002a26:	4770      	bx	lr
 8002a28:	0800decb 	.word	0x0800decb

08002a2c <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8002a2c:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8002a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 8002a32:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 8002a34:	2100      	movs	r1, #0
 8002a36:	f007 f813 	bl	8009a60 <memset>
	}
    q->front = 0;
    q->rear = -1;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 8002a44:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8002a48:	bd10      	pop	{r4, pc}
	...

08002a4c <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8002a4c:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8002a4e:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8002a52:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8002a54:	b925      	cbnz	r5, 8002a60 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 8002a56:	4813      	ldr	r0, [pc, #76]	@ (8002aa4 <printQueue_GSM+0x58>)
 8002a58:	f000 fe46 	bl	80036e8 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 8002a60:	4811      	ldr	r0, [pc, #68]	@ (8002aa8 <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002a62:	4e12      	ldr	r6, [pc, #72]	@ (8002aac <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 8002a64:	f000 fe40 	bl	80036e8 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002a68:	2500      	movs	r5, #0
 8002a6a:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8002a6e:	42ab      	cmp	r3, r5
 8002a70:	dc05      	bgt.n	8002a7e <printQueue_GSM+0x32>
    Debug_printf("\n");
 8002a72:	480f      	ldr	r0, [pc, #60]	@ (8002ab0 <printQueue_GSM+0x64>)
 8002a74:	f000 fe38 	bl	80036e8 <Debug_printf>
    return q->size;
 8002a78:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8002a7c:	e7ee      	b.n	8002a5c <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8002a7e:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8002a82:	442b      	add	r3, r5
 8002a84:	425a      	negs	r2, r3
 8002a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a8e:	bf58      	it	pl
 8002a90:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002a92:	4629      	mov	r1, r5
 8002a94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8002a98:	4630      	mov	r0, r6
 8002a9a:	f000 fe25 	bl	80036e8 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002a9e:	3501      	adds	r5, #1
 8002aa0:	e7e3      	b.n	8002a6a <printQueue_GSM+0x1e>
 8002aa2:	bf00      	nop
 8002aa4:	0800dede 	.word	0x0800dede
 8002aa8:	0800def2 	.word	0x0800def2
 8002aac:	0800df08 	.word	0x0800df08
 8002ab0:	0800db6a 	.word	0x0800db6a

08002ab4 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 8002ab4:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 8002ab6:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 8002aba:	2200      	movs	r2, #0
 8002abc:	4295      	cmp	r5, r2
 8002abe:	dc05      	bgt.n	8002acc <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	480d      	ldr	r0, [pc, #52]	@ (8002af8 <checkAddrExistInQueue+0x44>)
 8002ac4:	f000 fe10 	bl	80036e8 <Debug_printf>
    return 0;
 8002ac8:	2000      	movs	r0, #0
 8002aca:	e012      	b.n	8002af2 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 8002acc:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8002ad0:	4413      	add	r3, r2
 8002ad2:	425c      	negs	r4, r3
 8002ad4:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002adc:	bf58      	it	pl
 8002ade:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8002ae0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ae4:	4283      	cmp	r3, r0
 8002ae6:	d105      	bne.n	8002af4 <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 8002ae8:	4601      	mov	r1, r0
 8002aea:	4804      	ldr	r0, [pc, #16]	@ (8002afc <checkAddrExistInQueue+0x48>)
 8002aec:	f000 fdfc 	bl	80036e8 <Debug_printf>
            return 1;
 8002af0:	2001      	movs	r0, #1
}
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8002af4:	3201      	adds	r2, #1
 8002af6:	e7e1      	b.n	8002abc <checkAddrExistInQueue+0x8>
 8002af8:	0800df18 	.word	0x0800df18
 8002afc:	0800df1c 	.word	0x0800df1c

08002b00 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8002b00:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8002b02:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 8002b06:	b91d      	cbnz	r5, 8002b10 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 8002b08:	481f      	ldr	r0, [pc, #124]	@ (8002b88 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 8002b0a:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 8002b0c:	f000 bdec 	b.w	80036e8 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8002b10:	2900      	cmp	r1, #0
 8002b12:	db01      	blt.n	8002b18 <deleteMiddle_GSM+0x18>
 8002b14:	428d      	cmp	r5, r1
 8002b16:	dc01      	bgt.n	8002b1c <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 8002b18:	481c      	ldr	r0, [pc, #112]	@ (8002b8c <deleteMiddle_GSM+0x8c>)
 8002b1a:	e7f6      	b.n	8002b0a <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002b1c:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8002b20:	440b      	add	r3, r1
 8002b22:	425a      	negs	r2, r3
 8002b24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8002b2c:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002b30:	bf58      	it	pl
 8002b32:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8002b34:	3d01      	subs	r5, #1
 8002b36:	42b5      	cmp	r5, r6
 8002b38:	dc0f      	bgt.n	8002b5a <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 8002b3a:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002b3e:	337f      	adds	r3, #127	@ 0x7f
 8002b40:	425a      	negs	r2, r3
 8002b42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4a:	bf58      	it	pl
 8002b4c:	4253      	negpl	r3, r2
    q->size--;
 8002b4e:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8002b52:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 8002b54:	480e      	ldr	r0, [pc, #56]	@ (8002b90 <deleteMiddle_GSM+0x90>)
 8002b56:	f000 bdc7 	b.w	80036e8 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 8002b5a:	199a      	adds	r2, r3, r6
 8002b5c:	4254      	negs	r4, r2
 8002b5e:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002b62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b66:	bf58      	it	pl
 8002b68:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 8002b6a:	1c54      	adds	r4, r2, #1
 8002b6c:	4267      	negs	r7, r4
 8002b6e:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8002b72:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002b76:	bf58      	it	pl
 8002b78:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 8002b7a:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 8002b7c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8002b80:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8002b84:	e7d7      	b.n	8002b36 <deleteMiddle_GSM+0x36>
 8002b86:	bf00      	nop
 8002b88:	0800df32 	.word	0x0800df32
 8002b8c:	0800df5a 	.word	0x0800df5a
 8002b90:	0800df79 	.word	0x0800df79

08002b94 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002b94:	b410      	push	{r4}
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8002b9a:	80a3      	strh	r3, [r4, #4]
{
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002ba0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002ba2:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002ba4:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002ba6:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8002bac:	f003 ba12 	b.w	8005fd4 <HAL_UART_Receive_DMA>

08002bb0 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	4606      	mov	r6, r0
 8002bb6:	460d      	mov	r5, r1
 8002bb8:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2211      	movs	r2, #17
 8002bbe:	f10d 0007 	add.w	r0, sp, #7
 8002bc2:	f006 ff4d 	bl	8009a60 <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002bc6:	4808      	ldr	r0, [pc, #32]	@ (8002be8 <set_time+0x38>)
	sTime.Hours = hr;
 8002bc8:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8002bd0:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8002bd4:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002bd8:	f002 faa8 	bl	800512c <HAL_RTC_SetTime>
 8002bdc:	b108      	cbz	r0, 8002be2 <set_time+0x32>
	{
		Error_Handler();
 8002bde:	f000 faaa 	bl	8003136 <Error_Handler>
	}
}
 8002be2:	b006      	add	sp, #24
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
 8002be6:	bf00      	nop
 8002be8:	20000a0c 	.word	0x20000a0c

08002bec <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8002bec:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8002bee:	2300      	movs	r3, #0
	sDate.Month = month;
 8002bf0:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8002bf4:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8002bf8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4806      	ldr	r0, [pc, #24]	@ (8002c18 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8002c00:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002c04:	a901      	add	r1, sp, #4
 8002c06:	f002 faeb 	bl	80051e0 <HAL_RTC_SetDate>
 8002c0a:	b108      	cbz	r0, 8002c10 <set_date+0x24>
	{
		Error_Handler();
 8002c0c:	f000 fa93 	bl	8003136 <Error_Handler>
	}
}
 8002c10:	b003      	add	sp, #12
 8002c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c16:	bf00      	nop
 8002c18:	20000a0c 	.word	0x20000a0c

08002c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c1c:	b500      	push	{lr}
 8002c1e:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c20:	2228      	movs	r2, #40	@ 0x28
 8002c22:	2100      	movs	r1, #0
 8002c24:	a805      	add	r0, sp, #20
 8002c26:	f006 ff1b 	bl	8009a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c2a:	2214      	movs	r2, #20
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4668      	mov	r0, sp
 8002c30:	f006 ff16 	bl	8009a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	223c      	movs	r2, #60	@ 0x3c
 8002c36:	2100      	movs	r1, #0
 8002c38:	eb0d 0002 	add.w	r0, sp, r2
 8002c3c:	f006 ff10 	bl	8009a60 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c40:	f001 fd58 	bl	80046f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c44:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <SystemClock_Config+0xa0>)
 8002c46:	6a13      	ldr	r3, [r2, #32]
 8002c48:	f023 0318 	bic.w	r3, r3, #24
 8002c4c:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002c4e:	2306      	movs	r3, #6
 8002c50:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c52:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c54:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c58:	2310      	movs	r3, #16
 8002c5a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002c64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c68:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002c6a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c6c:	f001 fd4a 	bl	8004704 <HAL_RCC_OscConfig>
 8002c70:	4601      	mov	r1, r0
 8002c72:	b108      	cbz	r0, 8002c78 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c78:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c7a:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c7e:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c82:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c84:	4668      	mov	r0, sp
 8002c86:	f001 ffbd 	bl	8004c04 <HAL_RCC_ClockConfig>
 8002c8a:	b108      	cbz	r0, 8002c90 <SystemClock_Config+0x74>
 8002c8c:	b672      	cpsid	i
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <SystemClock_Config+0xa4>)
 8002c92:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c94:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c9c:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca2:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002ca4:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ca8:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002caa:	f002 f8a1 	bl	8004df0 <HAL_RCCEx_PeriphCLKConfig>
 8002cae:	b108      	cbz	r0, 8002cb4 <SystemClock_Config+0x98>
 8002cb0:	b672      	cpsid	i
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <SystemClock_Config+0x96>
}
 8002cb4:	b01f      	add	sp, #124	@ 0x7c
 8002cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	00010187 	.word	0x00010187

08002cc4 <main>:
{
 8002cc4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	4db8      	ldr	r5, [pc, #736]	@ (8002fa8 <main+0x2e4>)
{
 8002cc8:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 8002cca:	f000 fdaf 	bl	800382c <HAL_Init>
  SystemClock_Config();
 8002cce:	f7ff ffa5 	bl	8002c1c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	2214      	movs	r2, #20
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	a808      	add	r0, sp, #32
 8002cd8:	f006 fec2 	bl	8009a60 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cdc:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002cde:	48b3      	ldr	r0, [pc, #716]	@ (8002fac <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ce4:	616b      	str	r3, [r5, #20]
 8002ce6:	696b      	ldr	r3, [r5, #20]
 8002ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	696b      	ldr	r3, [r5, #20]
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf6:	616b      	str	r3, [r5, #20]
 8002cf8:	696b      	ldr	r3, [r5, #20]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	9303      	str	r3, [sp, #12]
 8002d00:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	696b      	ldr	r3, [r5, #20]
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d08:	616b      	str	r3, [r5, #20]
 8002d0a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002d0c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002d12:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	9304      	str	r3, [sp, #16]
 8002d16:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002d18:	f001 fce6 	bl	80046e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8002d1c:	48a3      	ldr	r0, [pc, #652]	@ (8002fac <main+0x2e8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f240 2156 	movw	r1, #598	@ 0x256
 8002d24:	f001 fce0 	bl	80046e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002d28:	48a1      	ldr	r0, [pc, #644]	@ (8002fb0 <main+0x2ec>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2104      	movs	r1, #4
 8002d2e:	f001 fcdb 	bl	80046e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002d32:	489f      	ldr	r0, [pc, #636]	@ (8002fb0 <main+0x2ec>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d3a:	f001 fcd5 	bl	80046e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002d4a:	f001 fccd 	bl	80046e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4e:	2701      	movs	r7, #1
 8002d50:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d54:	4895      	ldr	r0, [pc, #596]	@ (8002fac <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d56:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d58:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5a:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d60:	f001 fbfe 	bl	8004560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002d64:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	4891      	ldr	r0, [pc, #580]	@ (8002fac <main+0x2e8>)
 8002d68:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d72:	f001 fbf5 	bl	8004560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d76:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	488d      	ldr	r0, [pc, #564]	@ (8002fb0 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7e:	e9cd 3408 	strd	r3, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	f001 fbed 	bl	8004560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d86:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d88:	4889      	ldr	r0, [pc, #548]	@ (8002fb0 <main+0x2ec>)
 8002d8a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8c:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d90:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d98:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f001 fbe0 	bl	8004560 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	4883      	ldr	r0, [pc, #524]	@ (8002fb0 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dac:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dae:	f001 fbd7 	bl	8004560 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	a908      	add	r1, sp, #32
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbc:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc0:	e9cd 780a 	strd	r7, r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f001 fbcc 	bl	8004560 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dc8:	696b      	ldr	r3, [r5, #20]
 8002dca:	433b      	orrs	r3, r7
 8002dcc:	616b      	str	r3, [r5, #20]
 8002dce:	696b      	ldr	r3, [r5, #20]
 8002dd0:	403b      	ands	r3, r7
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dd6:	696b      	ldr	r3, [r5, #20]
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	616b      	str	r3, [r5, #20]
 8002dde:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 8002de0:	4d74      	ldr	r5, [pc, #464]	@ (8002fb4 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002de2:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002de6:	4622      	mov	r2, r4
 8002de8:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dea:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002dec:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002df0:	f001 fa92 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002df4:	200d      	movs	r0, #13
 8002df6:	f001 fac1 	bl	800437c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	2105      	movs	r1, #5
 8002dfe:	200f      	movs	r0, #15
 8002e00:	f001 fa8a 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002e04:	200f      	movs	r0, #15
 8002e06:	f001 fab9 	bl	800437c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	2105      	movs	r1, #5
 8002e0e:	2010      	movs	r0, #16
 8002e10:	f001 fa82 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e14:	2010      	movs	r0, #16
 8002e16:	f001 fab1 	bl	800437c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	2105      	movs	r1, #5
 8002e1e:	2038      	movs	r0, #56	@ 0x38
 8002e20:	f001 fa7a 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002e24:	2038      	movs	r0, #56	@ 0x38
 8002e26:	f001 faa9 	bl	800437c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8002e2a:	4622      	mov	r2, r4
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	203c      	movs	r0, #60	@ 0x3c
 8002e30:	f001 fa72 	bl	8004318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002e34:	203c      	movs	r0, #60	@ 0x3c
 8002e36:	f001 faa1 	bl	800437c <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8002e3a:	2214      	movs	r2, #20
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	a808      	add	r0, sp, #32
 8002e40:	f006 fe0e 	bl	8009a60 <memset>
  hrtc.Instance = RTC;
 8002e44:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb8 <main+0x2f4>)
  RTC_DateTypeDef sDate = {0};
 8002e46:	9405      	str	r4, [sp, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e48:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8002e4c:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8002e50:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e52:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8002e54:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e58:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e5c:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e5e:	f002 f912 	bl	8005086 <HAL_RTC_Init>
 8002e62:	4602      	mov	r2, r0
 8002e64:	b108      	cbz	r0, 8002e6a <main+0x1a6>
 8002e66:	b672      	cpsid	i
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e6a:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sTime.Hours = 0;
 8002e6e:	f8ad 0020 	strh.w	r0, [sp, #32]
  sTime.Seconds = 0;
 8002e72:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002e76:	a908      	add	r1, sp, #32
 8002e78:	4628      	mov	r0, r5
 8002e7a:	f002 f957 	bl	800512c <HAL_RTC_SetTime>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	b108      	cbz	r0, 8002e86 <main+0x1c2>
 8002e82:	b672      	cpsid	i
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e86:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <main+0x2f8>)
 8002e88:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e8a:	a905      	add	r1, sp, #20
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f002 f9a7 	bl	80051e0 <HAL_RTC_SetDate>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b108      	cbz	r0, 8002e9a <main+0x1d6>
 8002e96:	b672      	cpsid	i
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <main+0x1d4>
  hspi1.Instance = SPI1;
 8002e9a:	4849      	ldr	r0, [pc, #292]	@ (8002fc0 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e9c:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8002fe0 <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ea0:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ea2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ea6:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eaa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eae:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002eb2:	2510      	movs	r5, #16
 8002eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb8:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8002ebc:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ebe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ec2:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ec6:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002eca:	2308      	movs	r3, #8
 8002ecc:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ece:	f002 f9ce 	bl	800526e <HAL_SPI_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b108      	cbz	r0, 8002eda <main+0x216>
 8002ed6:	b672      	cpsid	i
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <main+0x214>
  huart1.Instance = USART1;
 8002eda:	483a      	ldr	r0, [pc, #232]	@ (8002fc4 <main+0x300>)
  huart1.Init.BaudRate = 115200;
 8002edc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc8 <main+0x304>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ede:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8002ee0:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eee:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef2:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8002ef4:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ef8:	f002 fff0 	bl	8005edc <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	b108      	cbz	r0, 8002f04 <main+0x240>
 8002f00:	b672      	cpsid	i
  while (1)
 8002f02:	e7fe      	b.n	8002f02 <main+0x23e>
  huart2.Instance = USART2;
 8002f04:	4831      	ldr	r0, [pc, #196]	@ (8002fcc <main+0x308>)
  huart2.Init.BaudRate = 9600;
 8002f06:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8002fe4 <main+0x320>
 8002f0a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f0e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f12:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f16:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8002f1e:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f22:	f002 ffdb 	bl	8005edc <HAL_UART_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	b108      	cbz	r0, 8002f2e <main+0x26a>
 8002f2a:	b672      	cpsid	i
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <main+0x268>
  huart3.Instance = USART3;
 8002f2e:	4828      	ldr	r0, [pc, #160]	@ (8002fd0 <main+0x30c>)
 8002f30:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <main+0x310>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f32:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002f36:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f3a:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f3e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f42:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f46:	f002 ffc9 	bl	8005edc <HAL_UART_Init>
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	b108      	cbz	r0, 8002f52 <main+0x28e>
 8002f4e:	b672      	cpsid	i
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f52:	462a      	mov	r2, r5
 8002f54:	4601      	mov	r1, r0
 8002f56:	a808      	add	r0, sp, #32
 8002f58:	f006 fd82 	bl	8009a60 <memset>
  htim3.Instance = TIM3;
 8002f5c:	4d1e      	ldr	r5, [pc, #120]	@ (8002fd8 <main+0x314>)
  htim3.Init.Prescaler = 8000;
 8002f5e:	481f      	ldr	r0, [pc, #124]	@ (8002fdc <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 8002f62:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002f66:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8002f6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f6e:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f70:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f74:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f78:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f7c:	f002 fb56 	bl	800562c <HAL_TIM_Base_Init>
 8002f80:	b108      	cbz	r0, 8002f86 <main+0x2c2>
 8002f82:	b672      	cpsid	i
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <main+0x2c0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f86:	a908      	add	r1, sp, #32
 8002f88:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8a:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f8c:	f002 fb88 	bl	80056a0 <HAL_TIM_ConfigClockSource>
 8002f90:	b108      	cbz	r0, 8002f96 <main+0x2d2>
 8002f92:	b672      	cpsid	i
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <main+0x2d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f96:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f98:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f9a:	a905      	add	r1, sp, #20
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f002 fc19 	bl	80057d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa2:	b308      	cbz	r0, 8002fe8 <main+0x324>
 8002fa4:	b672      	cpsid	i
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <main+0x2e2>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	48000800 	.word	0x48000800
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	20000a0c 	.word	0x20000a0c
 8002fb8:	40002800 	.word	0x40002800
 8002fbc:	00010101 	.word	0x00010101
 8002fc0:	200009a8 	.word	0x200009a8
 8002fc4:	20000870 	.word	0x20000870
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	200007e8 	.word	0x200007e8
 8002fd0:	20000760 	.word	0x20000760
 8002fd4:	40004800 	.word	0x40004800
 8002fd8:	200008f8 	.word	0x200008f8
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40013000 	.word	0x40013000
 8002fe4:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002fe8:	4c46      	ldr	r4, [pc, #280]	@ (8003104 <main+0x440>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fea:	2218      	movs	r2, #24
 8002fec:	2100      	movs	r1, #0
 8002fee:	a808      	add	r0, sp, #32
 8002ff0:	f006 fd36 	bl	8009a60 <memset>
  hadc2.Instance = ADC2;
 8002ff4:	4a44      	ldr	r2, [pc, #272]	@ (8003108 <main+0x444>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ff6:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ff8:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ffa:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ffc:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002ffe:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003002:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003006:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800300a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800300c:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 800300e:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003010:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003014:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003016:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003018:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800301a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800301c:	f000 fc60 	bl	80038e0 <HAL_ADC_Init>
 8003020:	b108      	cbz	r0, 8003026 <main+0x362>
 8003022:	b672      	cpsid	i
  while (1)
 8003024:	e7fe      	b.n	8003024 <main+0x360>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003026:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 800302a:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Channel = ADC_CHANNEL_2;
 800302e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003030:	a908      	add	r1, sp, #32
 8003032:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003034:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003038:	f000 ff54 	bl	8003ee4 <HAL_ADC_ConfigChannel>
 800303c:	4605      	mov	r5, r0
 800303e:	b108      	cbz	r0, 8003044 <main+0x380>
 8003040:	b672      	cpsid	i
  while (1)
 8003042:	e7fe      	b.n	8003042 <main+0x37e>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003044:	4c31      	ldr	r4, [pc, #196]	@ (800310c <main+0x448>)
  ADC_MultiModeTypeDef multimode = {0};
 8003046:	9007      	str	r0, [sp, #28]
 8003048:	e9cd 0005 	strd	r0, r0, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800304c:	4601      	mov	r1, r0
 800304e:	2218      	movs	r2, #24
 8003050:	a808      	add	r0, sp, #32
 8003052:	f006 fd05 	bl	8009a60 <memset>
  hadc3.Instance = ADC3;
 8003056:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <main+0x44c>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003058:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800305c:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800305e:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003062:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003066:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800306a:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 800306e:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003070:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003074:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003076:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003078:	f000 fc32 	bl	80038e0 <HAL_ADC_Init>
 800307c:	b108      	cbz	r0, 8003082 <main+0x3be>
 800307e:	b672      	cpsid	i
  while (1)
 8003080:	e7fe      	b.n	8003080 <main+0x3bc>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003082:	9005      	str	r0, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003084:	a905      	add	r1, sp, #20
 8003086:	4620      	mov	r0, r4
 8003088:	f001 f8b0 	bl	80041ec <HAL_ADCEx_MultiModeConfigChannel>
 800308c:	b108      	cbz	r0, 8003092 <main+0x3ce>
 800308e:	b672      	cpsid	i
  while (1)
 8003090:	e7fe      	b.n	8003090 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_12;
 8003092:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003094:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8003098:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800309c:	a908      	add	r1, sp, #32
 800309e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030a0:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80030a4:	f000 ff1e 	bl	8003ee4 <HAL_ADC_ConfigChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	b108      	cbz	r0, 80030b0 <main+0x3ec>
 80030ac:	b672      	cpsid	i
  while (1)
 80030ae:	e7fe      	b.n	80030ae <main+0x3ea>
  hspi2.Instance = SPI2;
 80030b0:	4818      	ldr	r0, [pc, #96]	@ (8003114 <main+0x450>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030b2:	4919      	ldr	r1, [pc, #100]	@ (8003118 <main+0x454>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030b4:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030b6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030ba:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80030be:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c2:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ca:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80030ce:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030d4:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d8:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030da:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030dc:	2308      	movs	r3, #8
 80030de:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030e0:	f002 f8c5 	bl	800526e <HAL_SPI_Init>
 80030e4:	4604      	mov	r4, r0
 80030e6:	b108      	cbz	r0, 80030ec <main+0x428>
 80030e8:	b672      	cpsid	i
  while (1)
 80030ea:	e7fe      	b.n	80030ea <main+0x426>
  osKernelInitialize();
 80030ec:	f002 ff90 	bl	8006010 <osKernelInitialize>
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 80030f0:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <main+0x458>)
 80030f2:	480b      	ldr	r0, [pc, #44]	@ (8003120 <main+0x45c>)
 80030f4:	4621      	mov	r1, r4
 80030f6:	f002 ffc7 	bl	8006088 <osThreadNew>
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <main+0x460>)
 80030fc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80030fe:	f002 ffa3 	bl	8006048 <osKernelStart>
  while (1)
 8003102:	e7fe      	b.n	8003102 <main+0x43e>
 8003104:	20000b04 	.word	0x20000b04
 8003108:	50000100 	.word	0x50000100
 800310c:	20000ab4 	.word	0x20000ab4
 8003110:	50000400 	.word	0x50000400
 8003114:	20000944 	.word	0x20000944
 8003118:	40003800 	.word	0x40003800
 800311c:	0800dfdc 	.word	0x0800dfdc
 8003120:	0800213d 	.word	0x0800213d
 8003124:	20000690 	.word	0x20000690

08003128 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003128:	6803      	ldr	r3, [r0, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d101      	bne.n	8003134 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003130:	f000 bb8e 	b.w	8003850 <HAL_IncTick>
}
 8003134:	4770      	bx	lr

08003136 <Error_Handler>:
 8003136:	b672      	cpsid	i
  while (1)
 8003138:	e7fe      	b.n	8003138 <Error_Handler+0x2>
	...

0800313c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <HAL_MspInit+0x38>)
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	619a      	str	r2, [r3, #24]
 8003146:	699a      	ldr	r2, [r3, #24]
{
 8003148:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	f002 0201 	and.w	r2, r2, #1
 800314e:	9200      	str	r2, [sp, #0]
 8003150:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003158:	61da      	str	r2, [r3, #28]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	210f      	movs	r1, #15
 8003168:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800316e:	f001 b8d3 	b.w	8004318 <HAL_NVIC_SetPriority>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003178:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317a:	2214      	movs	r2, #20
{
 800317c:	b08a      	sub	sp, #40	@ 0x28
 800317e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	2100      	movs	r1, #0
 8003182:	eb0d 0002 	add.w	r0, sp, r2
 8003186:	f006 fc6b 	bl	8009a60 <memset>
  if(hadc->Instance==ADC2)
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	4a3d      	ldr	r2, [pc, #244]	@ (8003284 <HAL_ADC_MspInit+0x10c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d137      	bne.n	8003202 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003192:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8003194:	4c3d      	ldr	r4, [pc, #244]	@ (800328c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800319c:	615a      	str	r2, [r3, #20]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80031a4:	9201      	str	r2, [sp, #4]
 80031a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b6:	9302      	str	r3, [sp, #8]
 80031b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ba:	2620      	movs	r6, #32
 80031bc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031c2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c4:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f001 f9ca 	bl	8004560 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d0:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80032a0 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031d4:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d8:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031da:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80031de:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e4:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80031e8:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ec:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80031ee:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80031f0:	f001 f8f2 	bl	80043d8 <HAL_DMA_Init>
 80031f4:	b108      	cbz	r0, 80031fa <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80031f6:	f7ff ff9e 	bl	8003136 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80031fa:	63ac      	str	r4, [r5, #56]	@ 0x38
 80031fc:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80031fe:	b00a      	add	sp, #40	@ 0x28
 8003200:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_ADC_MspInit+0x118>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d1fa      	bne.n	80031fe <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 800320a:	4c22      	ldr	r4, [pc, #136]	@ (8003294 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800320c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	4822      	ldr	r0, [pc, #136]	@ (8003298 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003210:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800321c:	9203      	str	r2, [sp, #12]
 800321e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003230:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003234:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003236:	2303      	movs	r3, #3
 8003238:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323c:	f001 f990 	bl	8004560 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003240:	2080      	movs	r0, #128	@ 0x80
 8003242:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003246:	4915      	ldr	r1, [pc, #84]	@ (800329c <HAL_ADC_MspInit+0x124>)
 8003248:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800324a:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800324e:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8003252:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003254:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003256:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800325a:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800325e:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003260:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003262:	f001 f8b9 	bl	80043d8 <HAL_DMA_Init>
 8003266:	b108      	cbz	r0, 800326c <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8003268:	f7ff ff65 	bl	8003136 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800326c:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2105      	movs	r1, #5
 8003272:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003274:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8003276:	f001 f84f 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800327a:	202f      	movs	r0, #47	@ 0x2f
 800327c:	f001 f87e 	bl	800437c <HAL_NVIC_EnableIRQ>
}
 8003280:	e7bd      	b.n	80031fe <HAL_ADC_MspInit+0x86>
 8003282:	bf00      	nop
 8003284:	50000100 	.word	0x50000100
 8003288:	40021000 	.word	0x40021000
 800328c:	20000a70 	.word	0x20000a70
 8003290:	50000400 	.word	0x50000400
 8003294:	20000a2c 	.word	0x20000a2c
 8003298:	48000400 	.word	0x48000400
 800329c:	40020458 	.word	0x40020458
 80032a0:	40020408 	.word	0x40020408

080032a4 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80032a4:	6802      	ldr	r2, [r0, #0]
 80032a6:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_RTC_MspInit+0x20>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d10a      	bne.n	80032c2 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80032b0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <HAL_RTC_MspInit+0x24>)
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80032c2:	4770      	bx	lr
 80032c4:	40002800 	.word	0x40002800
 80032c8:	10908100 	.word	0x10908100

080032cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ce:	2214      	movs	r2, #20
{
 80032d0:	b08a      	sub	sp, #40	@ 0x28
 80032d2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	2100      	movs	r1, #0
 80032d6:	eb0d 0002 	add.w	r0, sp, r2
 80032da:	f006 fbc1 	bl	8009a60 <memset>
  if(hspi->Instance==SPI1)
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_SPI_MspInit+0x90>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d120      	bne.n	8003328 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003360 <HAL_SPI_MspInit+0x94>)
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032ee:	619a      	str	r2, [r3, #24]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80032f6:	9201      	str	r2, [sp, #4]
 80032f8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003300:	615a      	str	r2, [r3, #20]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800330c:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800330e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003312:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003316:	2305      	movs	r3, #5
 8003318:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	4811      	ldr	r0, [pc, #68]	@ (8003364 <HAL_SPI_MspInit+0x98>)
 800331e:	a905      	add	r1, sp, #20
 8003320:	f001 f91e 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003324:	b00a      	add	sp, #40	@ 0x28
 8003326:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003328:	4a0f      	ldr	r2, [pc, #60]	@ (8003368 <HAL_SPI_MspInit+0x9c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d1fa      	bne.n	8003324 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <HAL_SPI_MspInit+0x94>)
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003336:	61da      	str	r2, [r3, #28]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003348:	615a      	str	r2, [r3, #20]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003354:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003358:	e7d9      	b.n	800330e <HAL_SPI_MspInit+0x42>
 800335a:	bf00      	nop
 800335c:	40013000 	.word	0x40013000
 8003360:	40021000 	.word	0x40021000
 8003364:	48000400 	.word	0x48000400
 8003368:	40003800 	.word	0x40003800

0800336c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800336c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_TIM_Base_MspInit+0x3c>)
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d115      	bne.n	80033a2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003376:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800337a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	f042 0202 	orr.w	r2, r2, #2
 8003382:	61da      	str	r2, [r3, #28]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003390:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003392:	f000 ffc1 	bl	8004318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003396:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003398:	b003      	add	sp, #12
 800339a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800339e:	f000 bfed 	b.w	800437c <HAL_NVIC_EnableIRQ>
}
 80033a2:	b003      	add	sp, #12
 80033a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80033a8:	40000400 	.word	0x40000400

080033ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ac:	b530      	push	{r4, r5, lr}
 80033ae:	4605      	mov	r5, r0
 80033b0:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	2214      	movs	r2, #20
 80033b4:	2100      	movs	r1, #0
 80033b6:	a807      	add	r0, sp, #28
 80033b8:	f006 fb52 	bl	8009a60 <memset>
  if(huart->Instance==USART1)
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	4a4a      	ldr	r2, [pc, #296]	@ (80034e8 <HAL_UART_MspInit+0x13c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d137      	bne.n	8003434 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c4:	4b49      	ldr	r3, [pc, #292]	@ (80034ec <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80033c6:	4c4a      	ldr	r4, [pc, #296]	@ (80034f0 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ce:	619a      	str	r2, [r3, #24]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80033d6:	9201      	str	r2, [sp, #4]
 80033d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 80033f0:	2302      	movs	r3, #2
 80033f2:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f6:	2203      	movs	r2, #3
 80033f8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	a907      	add	r1, sp, #28
 80033fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003400:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f001 f8ac 	bl	8004560 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003408:	4b3a      	ldr	r3, [pc, #232]	@ (80034f4 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800340a:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340c:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800340e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003414:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003418:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800341a:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800341c:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800341e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003420:	4620      	mov	r0, r4
 8003422:	f000 ffd9 	bl	80043d8 <HAL_DMA_Init>
 8003426:	b108      	cbz	r0, 800342c <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8003428:	f7ff fe85 	bl	8003136 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800342c:	676c      	str	r4, [r5, #116]	@ 0x74
 800342e:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003430:	b00d      	add	sp, #52	@ 0x34
 8003432:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8003434:	4a30      	ldr	r2, [pc, #192]	@ (80034f8 <HAL_UART_MspInit+0x14c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d123      	bne.n	8003482 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800343a:	4b2c      	ldr	r3, [pc, #176]	@ (80034ec <HAL_UART_MspInit+0x140>)
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003442:	61da      	str	r2, [r3, #28]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800344a:	9203      	str	r2, [sp, #12]
 800344c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	240c      	movs	r4, #12
 8003462:	2302      	movs	r3, #2
 8003464:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003468:	f04f 0c03 	mov.w	ip, #3
 800346c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	a907      	add	r1, sp, #28
 8003470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003474:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003478:	4c20      	ldr	r4, [pc, #128]	@ (80034fc <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	f001 f871 	bl	8004560 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800347e:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <HAL_UART_MspInit+0x154>)
 8003480:	e7c3      	b.n	800340a <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 8003482:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <HAL_UART_MspInit+0x158>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d1d3      	bne.n	8003430 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003488:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	481f      	ldr	r0, [pc, #124]	@ (8003508 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800348c:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800348e:	4c1f      	ldr	r4, [pc, #124]	@ (800350c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003490:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800349c:	9205      	str	r2, [sp, #20]
 800349e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80034a6:	615a      	str	r2, [r3, #20]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034bc:	2103      	movs	r1, #3
 80034be:	2307      	movs	r3, #7
 80034c0:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	a907      	add	r1, sp, #28
 80034c6:	f001 f84b 	bl	8004560 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ca:	4811      	ldr	r0, [pc, #68]	@ (8003510 <HAL_UART_MspInit+0x164>)
 80034cc:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d0:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d8:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034da:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80034dc:	2320      	movs	r3, #32
 80034de:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80034e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e4:	e79b      	b.n	800341e <HAL_UART_MspInit+0x72>
 80034e6:	bf00      	nop
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40021000 	.word	0x40021000
 80034f0:	2000071c 	.word	0x2000071c
 80034f4:	40020058 	.word	0x40020058
 80034f8:	40004400 	.word	0x40004400
 80034fc:	200006d8 	.word	0x200006d8
 8003500:	4002006c 	.word	0x4002006c
 8003504:	40004800 	.word	0x40004800
 8003508:	48000400 	.word	0x48000400
 800350c:	20000694 	.word	0x20000694
 8003510:	40020030 	.word	0x40020030

08003514 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003514:	4b21      	ldr	r3, [pc, #132]	@ (800359c <HAL_InitTick+0x88>)
{
 8003516:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	61da      	str	r2, [r3, #28]
 8003520:	69db      	ldr	r3, [r3, #28]
{
 8003522:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	9302      	str	r3, [sp, #8]
{
 800352a:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800352c:	a901      	add	r1, sp, #4
 800352e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003530:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003532:	f001 fc3f 	bl	8004db4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003536:	9b06      	ldr	r3, [sp, #24]
 8003538:	bb53      	cbnz	r3, 8003590 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800353a:	f001 fc0b 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800353e:	4e18      	ldr	r6, [pc, #96]	@ (80035a0 <HAL_InitTick+0x8c>)
 8003540:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003544:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003546:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800354a:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_InitTick+0x90>)
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003554:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8003556:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8003560:	f002 f864 	bl	800562c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003564:	4604      	mov	r4, r0
 8003566:	b980      	cbnz	r0, 800358a <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003568:	4630      	mov	r0, r6
 800356a:	f001 ff21 	bl	80053b0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800356e:	4604      	mov	r4, r0
 8003570:	b958      	cbnz	r0, 800358a <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003572:	201c      	movs	r0, #28
 8003574:	f000 ff02 	bl	800437c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003578:	2d0f      	cmp	r5, #15
 800357a:	d80d      	bhi.n	8003598 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800357c:	4622      	mov	r2, r4
 800357e:	4629      	mov	r1, r5
 8003580:	201c      	movs	r0, #28
 8003582:	f000 fec9 	bl	8004318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003586:	4b08      	ldr	r3, [pc, #32]	@ (80035a8 <HAL_InitTick+0x94>)
 8003588:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800358a:	4620      	mov	r0, r4
 800358c:	b008      	add	sp, #32
 800358e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003590:	f001 fbe0 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8003594:	0040      	lsls	r0, r0, #1
 8003596:	e7d2      	b.n	800353e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8003598:	2401      	movs	r4, #1
 800359a:	e7f6      	b.n	800358a <HAL_InitTick+0x76>
 800359c:	40021000 	.word	0x40021000
 80035a0:	20000b54 	.word	0x20000b54
 80035a4:	000f4240 	.word	0x000f4240
 80035a8:	2000000c 	.word	0x2000000c

080035ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035ac:	e7fe      	b.n	80035ac <NMI_Handler>

080035ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ae:	e7fe      	b.n	80035ae <HardFault_Handler>

080035b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <MemManage_Handler>

080035b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler>

080035b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <UsageFault_Handler>

080035b6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b6:	4770      	bx	lr

080035b8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035b8:	4801      	ldr	r0, [pc, #4]	@ (80035c0 <DMA1_Channel3_IRQHandler+0x8>)
 80035ba:	f000 bf89 	b.w	80044d0 <HAL_DMA_IRQHandler>
 80035be:	bf00      	nop
 80035c0:	20000694 	.word	0x20000694

080035c4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035c4:	4801      	ldr	r0, [pc, #4]	@ (80035cc <DMA1_Channel5_IRQHandler+0x8>)
 80035c6:	f000 bf83 	b.w	80044d0 <HAL_DMA_IRQHandler>
 80035ca:	bf00      	nop
 80035cc:	2000071c 	.word	0x2000071c

080035d0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035d0:	4801      	ldr	r0, [pc, #4]	@ (80035d8 <DMA1_Channel6_IRQHandler+0x8>)
 80035d2:	f000 bf7d 	b.w	80044d0 <HAL_DMA_IRQHandler>
 80035d6:	bf00      	nop
 80035d8:	200006d8 	.word	0x200006d8

080035dc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035dc:	4801      	ldr	r0, [pc, #4]	@ (80035e4 <TIM2_IRQHandler+0x8>)
 80035de:	f001 bf21 	b.w	8005424 <HAL_TIM_IRQHandler>
 80035e2:	bf00      	nop
 80035e4:	20000b54 	.word	0x20000b54

080035e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035e8:	4801      	ldr	r0, [pc, #4]	@ (80035f0 <TIM3_IRQHandler+0x8>)
 80035ea:	f001 bf1b 	b.w	8005424 <HAL_TIM_IRQHandler>
 80035ee:	bf00      	nop
 80035f0:	200008f8 	.word	0x200008f8

080035f4 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80035f4:	4801      	ldr	r0, [pc, #4]	@ (80035fc <ADC3_IRQHandler+0x8>)
 80035f6:	f000 ba93 	b.w	8003b20 <HAL_ADC_IRQHandler>
 80035fa:	bf00      	nop
 80035fc:	20000ab4 	.word	0x20000ab4

08003600 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003600:	4801      	ldr	r0, [pc, #4]	@ (8003608 <DMA2_Channel1_IRQHandler+0x8>)
 8003602:	f000 bf65 	b.w	80044d0 <HAL_DMA_IRQHandler>
 8003606:	bf00      	nop
 8003608:	20000a70 	.word	0x20000a70

0800360c <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <DMA2_Channel5_IRQHandler+0x8>)
 800360e:	f000 bf5f 	b.w	80044d0 <HAL_DMA_IRQHandler>
 8003612:	bf00      	nop
 8003614:	20000a2c 	.word	0x20000a2c

08003618 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003618:	2001      	movs	r0, #1
 800361a:	4770      	bx	lr

0800361c <_kill>:

int _kill(int pid, int sig)
{
 800361c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800361e:	f006 faa9 	bl	8009b74 <__errno>
 8003622:	2316      	movs	r3, #22
 8003624:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003626:	f04f 30ff 	mov.w	r0, #4294967295
 800362a:	bd08      	pop	{r3, pc}

0800362c <_exit>:

void _exit (int status)
{
 800362c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800362e:	f006 faa1 	bl	8009b74 <__errno>
 8003632:	2316      	movs	r3, #22
 8003634:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003636:	e7fe      	b.n	8003636 <_exit+0xa>

08003638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	460d      	mov	r5, r1
 800363c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	460e      	mov	r6, r1
 8003640:	1b73      	subs	r3, r6, r5
 8003642:	429c      	cmp	r4, r3
 8003644:	dc01      	bgt.n	800364a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003646:	4620      	mov	r0, r4
 8003648:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800364a:	f3af 8000 	nop.w
 800364e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	e7f5      	b.n	8003640 <_read+0x8>

08003654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	460d      	mov	r5, r1
 8003658:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	460e      	mov	r6, r1
 800365c:	1b73      	subs	r3, r6, r5
 800365e:	429c      	cmp	r4, r3
 8003660:	dc01      	bgt.n	8003666 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003662:	4620      	mov	r0, r4
 8003664:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003666:	f816 0b01 	ldrb.w	r0, [r6], #1
 800366a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	e7f5      	b.n	800365c <_write+0x8>

08003670 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	4770      	bx	lr

08003676 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800367a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800367c:	2000      	movs	r0, #0
 800367e:	4770      	bx	lr

08003680 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003680:	2001      	movs	r0, #1
 8003682:	4770      	bx	lr

08003684 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003684:	2000      	movs	r0, #0
 8003686:	4770      	bx	lr

08003688 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003688:	4a0b      	ldr	r2, [pc, #44]	@ (80036b8 <_sbrk+0x30>)
 800368a:	6811      	ldr	r1, [r2, #0]
{
 800368c:	b510      	push	{r4, lr}
 800368e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003690:	b909      	cbnz	r1, 8003696 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003692:	490a      	ldr	r1, [pc, #40]	@ (80036bc <_sbrk+0x34>)
 8003694:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003696:	6810      	ldr	r0, [r2, #0]
 8003698:	4909      	ldr	r1, [pc, #36]	@ (80036c0 <_sbrk+0x38>)
 800369a:	4c0a      	ldr	r4, [pc, #40]	@ (80036c4 <_sbrk+0x3c>)
 800369c:	4403      	add	r3, r0
 800369e:	1b09      	subs	r1, r1, r4
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d906      	bls.n	80036b2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80036a4:	f006 fa66 	bl	8009b74 <__errno>
 80036a8:	230c      	movs	r3, #12
 80036aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80036b0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80036b2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80036b4:	e7fc      	b.n	80036b0 <_sbrk+0x28>
 80036b6:	bf00      	nop
 80036b8:	20000ba0 	.word	0x20000ba0
 80036bc:	20008c80 	.word	0x20008c80
 80036c0:	2000a000 	.word	0x2000a000
 80036c4:	00000400 	.word	0x00000400

080036c8 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80036cc:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80036ce:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80036d0:	f7fc fdce 	bl	8000270 <strlen>
 80036d4:	4621      	mov	r1, r4
 80036d6:	b282      	uxth	r2, r0
 80036d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036dc:	4628      	mov	r0, r5
}
 80036de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80036e2:	f002 bb51 	b.w	8005d88 <HAL_UART_Transmit>
	...

080036e8 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80036e8:	b40f      	push	{r0, r1, r2, r3}
 80036ea:	b500      	push	{lr}
 80036ec:	b0c3      	sub	sp, #268	@ 0x10c
 80036ee:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80036f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80036f4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80036f8:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80036fa:	a802      	add	r0, sp, #8
 80036fc:	f006 f9a2 	bl	8009a44 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8003700:	4804      	ldr	r0, [pc, #16]	@ (8003714 <Debug_printf+0x2c>)
 8003702:	a902      	add	r1, sp, #8
 8003704:	f7ff ffe0 	bl	80036c8 <uart_transmit_string>
}
 8003708:	b043      	add	sp, #268	@ 0x10c
 800370a:	f85d eb04 	ldr.w	lr, [sp], #4
 800370e:	b004      	add	sp, #16
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000870 	.word	0x20000870

08003718 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003718:	4a03      	ldr	r2, [pc, #12]	@ (8003728 <SystemInit+0x10>)
 800371a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800371e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003722:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800372c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003730:	f7ff fff2 	bl	8003718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003734:	480c      	ldr	r0, [pc, #48]	@ (8003768 <LoopForever+0x6>)
  ldr r1, =_edata
 8003736:	490d      	ldr	r1, [pc, #52]	@ (800376c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003738:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <LoopForever+0xe>)
  movs r3, #0
 800373a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800373c:	e002      	b.n	8003744 <LoopCopyDataInit>

0800373e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003742:	3304      	adds	r3, #4

08003744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003748:	d3f9      	bcc.n	800373e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374a:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800374c:	4c0a      	ldr	r4, [pc, #40]	@ (8003778 <LoopForever+0x16>)
  movs r3, #0
 800374e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003750:	e001      	b.n	8003756 <LoopFillZerobss>

08003752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003754:	3204      	adds	r2, #4

08003756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003758:	d3fb      	bcc.n	8003752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800375a:	f006 fa11 	bl	8009b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375e:	f7ff fab1 	bl	8002cc4 <main>

08003762 <LoopForever>:

LoopForever:
    b LoopForever
 8003762:	e7fe      	b.n	8003762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003764:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800376c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003770:	0800e4a0 	.word	0x0800e4a0
  ldr r2, =_sbss
 8003774:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003778:	20008c7c 	.word	0x20008c7c

0800377c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800377c:	e7fe      	b.n	800377c <ADC1_2_IRQHandler>

0800377e <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 800377e:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8003780:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003782:	f7ff fcd8 	bl	8003136 <Error_Handler>
 8003786:	e7fe      	b.n	8003786 <__cxa_guard_abort.part.0+0x8>

08003788 <stm32_lock_acquire>:
{
 8003788:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800378a:	7a03      	ldrb	r3, [r0, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d903      	bls.n	8003798 <stm32_lock_acquire+0x10>
 8003790:	b672      	cpsid	i
 8003792:	f7ff fcd0 	bl	8003136 <Error_Handler>
 8003796:	e7fe      	b.n	8003796 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800379c:	f3ef 8211 	mrs	r2, BASEPRI
 80037a0:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80037a4:	f381 8811 	msr	BASEPRI, r1
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80037b4:	bd08      	pop	{r3, pc}

080037b6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80037b6:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 80037b8:	7a03      	ldrb	r3, [r0, #8]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80037be:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 80037c0:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80037c2:	d903      	bls.n	80037cc <stm32_lock_release+0x16>
 80037c4:	b672      	cpsid	i
 80037c6:	f7ff fcb6 	bl	8003136 <Error_Handler>
 80037ca:	e7fe      	b.n	80037ca <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037d0:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 80037d4:	bd08      	pop	{r3, pc}

080037d6 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80037d6:	b510      	push	{r4, lr}
  if (lock == NULL)
 80037d8:	4604      	mov	r4, r0
 80037da:	b920      	cbnz	r0, 80037e6 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 80037dc:	f006 f9ca 	bl	8009b74 <__errno>
 80037e0:	2316      	movs	r3, #22
 80037e2:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 80037e4:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80037e6:	200c      	movs	r0, #12
 80037e8:	f004 f9d4 	bl	8007b94 <malloc>
 80037ec:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 80037ee:	b120      	cbz	r0, 80037fa <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 80037f6:	7203      	strb	r3, [r0, #8]
}
 80037f8:	e7f4      	b.n	80037e4 <__retarget_lock_init_recursive+0xe>
 80037fa:	f7ff ffc0 	bl	800377e <__cxa_guard_abort.part.0>

080037fe <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 80037fe:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003800:	b908      	cbnz	r0, 8003806 <__retarget_lock_acquire+0x8>
 8003802:	f7ff ffbc 	bl	800377e <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8003806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800380a:	f7ff bfbd 	b.w	8003788 <stm32_lock_acquire>

0800380e <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 800380e:	f7ff bff6 	b.w	80037fe <__retarget_lock_acquire>

08003812 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8003812:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003814:	b918      	cbnz	r0, 800381e <__retarget_lock_release+0xc>
 8003816:	b672      	cpsid	i
 8003818:	f7ff fc8d 	bl	8003136 <Error_Handler>
 800381c:	e7fe      	b.n	800381c <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 800381e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003822:	f7ff bfc8 	b.w	80037b6 <stm32_lock_release>

08003826 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8003826:	f7ff bff4 	b.w	8003812 <__retarget_lock_release>
	...

0800382c <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800382c:	4a07      	ldr	r2, [pc, #28]	@ (800384c <HAL_Init+0x20>)
{
 800382e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003838:	2003      	movs	r0, #3
 800383a:	f000 fd5b 	bl	80042f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800383e:	200f      	movs	r0, #15
 8003840:	f7ff fe68 	bl	8003514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003844:	f7ff fc7a 	bl	800313c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003848:	2000      	movs	r0, #0
 800384a:	bd08      	pop	{r3, pc}
 800384c:	40022000 	.word	0x40022000

08003850 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003850:	4a03      	ldr	r2, [pc, #12]	@ (8003860 <HAL_IncTick+0x10>)
 8003852:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <HAL_IncTick+0x14>)
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	440b      	add	r3, r1
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000bbc 	.word	0x20000bbc
 8003864:	20000008 	.word	0x20000008

08003868 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003868:	4b01      	ldr	r3, [pc, #4]	@ (8003870 <HAL_GetTick+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000bbc 	.word	0x20000bbc

08003874 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8003874:	4770      	bx	lr

08003876 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003878:	4770      	bx	lr

0800387a <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800387a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	f002 0203 	and.w	r2, r2, #3
 8003884:	2a01      	cmp	r2, #1
{
 8003886:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003888:	d001      	beq.n	800388e <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	07d1      	lsls	r1, r2, #31
 8003892:	d5fa      	bpl.n	800388a <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	f002 020d 	and.w	r2, r2, #13
 800389a:	2a01      	cmp	r2, #1
 800389c:	d115      	bne.n	80038ca <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	f042 0202 	orr.w	r2, r2, #2
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80038aa:	f7ff ffdd 	bl	8003868 <HAL_GetTick>
 80038ae:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d5e8      	bpl.n	800388a <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038b8:	f7ff ffd6 	bl	8003868 <HAL_GetTick>
 80038bc:	1b40      	subs	r0, r0, r5
 80038be:	2802      	cmp	r0, #2
 80038c0:	d9f6      	bls.n	80038b0 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	07da      	lsls	r2, r3, #31
 80038c8:	d5f2      	bpl.n	80038b0 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038cc:	f043 0310 	orr.w	r3, r3, #16
 80038d0:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80038da:	2001      	movs	r0, #1
 80038dc:	e7d6      	b.n	800388c <ADC_Disable+0x12>
	...

080038e0 <HAL_ADC_Init>:
{
 80038e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80038e6:	4604      	mov	r4, r0
 80038e8:	2800      	cmp	r0, #0
 80038ea:	f000 8103 	beq.w	8003af4 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80038f0:	06d5      	lsls	r5, r2, #27
 80038f2:	d46a      	bmi.n	80039ca <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80038f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d035      	beq.n	8003966 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fa:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	00d2      	lsls	r2, r2, #3
 8003902:	d502      	bpl.n	800390a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003904:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003906:	009d      	lsls	r5, r3, #2
 8003908:	d50a      	bpl.n	8003920 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800390a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800390c:	f023 0312 	bic.w	r3, r3, #18
 8003910:	f043 0310 	orr.w	r3, r3, #16
 8003914:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800391e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003922:	06d9      	lsls	r1, r3, #27
 8003924:	f100 80e0 	bmi.w	8003ae8 <HAL_ADC_Init+0x208>
 8003928:	2800      	cmp	r0, #0
 800392a:	f040 80dd 	bne.w	8003ae8 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003932:	0752      	lsls	r2, r2, #29
 8003934:	f100 80d8 	bmi.w	8003ae8 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8003938:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800393a:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800393e:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003948:	4a6b      	ldr	r2, [pc, #428]	@ (8003af8 <HAL_ADC_Init+0x218>)
 800394a:	d042      	beq.n	80039d2 <HAL_ADC_Init+0xf2>
 800394c:	4293      	cmp	r3, r2
 800394e:	d03e      	beq.n	80039ce <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003950:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8003954:	4293      	cmp	r3, r2
 8003956:	4969      	ldr	r1, [pc, #420]	@ (8003afc <HAL_ADC_Init+0x21c>)
 8003958:	f000 80b3 	beq.w	8003ac2 <HAL_ADC_Init+0x1e2>
 800395c:	428b      	cmp	r3, r1
 800395e:	bf18      	it	ne
 8003960:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003962:	4967      	ldr	r1, [pc, #412]	@ (8003b00 <HAL_ADC_Init+0x220>)
 8003964:	e036      	b.n	80039d4 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8003966:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800396a:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 800396c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8003970:	f7ff fc02 	bl	8003178 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	00d8      	lsls	r0, r3, #3
 800397a:	d4be      	bmi.n	80038fa <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 800397c:	4620      	mov	r0, r4
 800397e:	f7ff ff7c 	bl	800387a <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003982:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003984:	06d1      	lsls	r1, r2, #27
 8003986:	d4b9      	bmi.n	80038fc <HAL_ADC_Init+0x1c>
 8003988:	2800      	cmp	r0, #0
 800398a:	d1b7      	bne.n	80038fc <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 800398c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800398e:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8003990:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003994:	f023 0302 	bic.w	r3, r3, #2
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800399e:	6893      	ldr	r3, [r2, #8]
 80039a0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80039a4:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80039a6:	6893      	ldr	r3, [r2, #8]
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039ae:	4b55      	ldr	r3, [pc, #340]	@ (8003b04 <HAL_ADC_Init+0x224>)
 80039b0:	4a55      	ldr	r2, [pc, #340]	@ (8003b08 <HAL_ADC_Init+0x228>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039b8:	220a      	movs	r2, #10
 80039ba:	4353      	muls	r3, r2
            wait_loop_index--;
 80039bc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80039be:	9b01      	ldr	r3, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d09a      	beq.n	80038fa <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80039c4:	9b01      	ldr	r3, [sp, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	e7f8      	b.n	80039bc <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ca:	4618      	mov	r0, r3
 80039cc:	e7a8      	b.n	8003920 <HAL_ADC_Init+0x40>
 80039ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d2:	494e      	ldr	r1, [pc, #312]	@ (8003b0c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80039d4:	689d      	ldr	r5, [r3, #8]
 80039d6:	f005 0503 	and.w	r5, r5, #3
 80039da:	2d01      	cmp	r5, #1
 80039dc:	d102      	bne.n	80039e4 <HAL_ADC_Init+0x104>
 80039de:	681d      	ldr	r5, [r3, #0]
 80039e0:	07ed      	lsls	r5, r5, #31
 80039e2:	d40e      	bmi.n	8003a02 <HAL_ADC_Init+0x122>
 80039e4:	b13a      	cbz	r2, 80039f6 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80039e6:	6895      	ldr	r5, [r2, #8]
 80039e8:	f005 0503 	and.w	r5, r5, #3
 80039ec:	2d01      	cmp	r5, #1
 80039ee:	d102      	bne.n	80039f6 <HAL_ADC_Init+0x116>
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	07d2      	lsls	r2, r2, #31
 80039f4:	d405      	bmi.n	8003a02 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80039f6:	688a      	ldr	r2, [r1, #8]
 80039f8:	6865      	ldr	r5, [r4, #4]
 80039fa:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80039fe:	432a      	orrs	r2, r5
 8003a00:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003a02:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a0a:	7e65      	ldrb	r5, [r4, #25]
 8003a0c:	3901      	subs	r1, #1
 8003a0e:	bf18      	it	ne
 8003a10:	2101      	movne	r1, #1
 8003a12:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8003a16:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a1a:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003a1e:	2901      	cmp	r1, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	d14f      	bne.n	8003ac6 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003a26:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a28:	3901      	subs	r1, #1
 8003a2a:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8003a2e:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a32:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003a34:	2901      	cmp	r1, #1
 8003a36:	d015      	beq.n	8003a64 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003a38:	4d35      	ldr	r5, [pc, #212]	@ (8003b10 <HAL_ADC_Init+0x230>)
 8003a3a:	42ab      	cmp	r3, r5
 8003a3c:	d003      	beq.n	8003a46 <HAL_ADC_Init+0x166>
 8003a3e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8003a42:	42ab      	cmp	r3, r5
 8003a44:	d10a      	bne.n	8003a5c <HAL_ADC_Init+0x17c>
 8003a46:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8003a4a:	d047      	beq.n	8003adc <HAL_ADC_Init+0x1fc>
 8003a4c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003a50:	d047      	beq.n	8003ae2 <HAL_ADC_Init+0x202>
 8003a52:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8003a56:	bf08      	it	eq
 8003a58:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8003a5c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003a5e:	4315      	orrs	r5, r2
 8003a60:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	f011 0f0c 	tst.w	r1, #12
 8003a6a:	d10c      	bne.n	8003a86 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003a6c:	68d9      	ldr	r1, [r3, #12]
 8003a6e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003a72:	f021 0102 	bic.w	r1, r1, #2
 8003a76:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003a78:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8003a7c:	7e25      	ldrb	r5, [r4, #24]
 8003a7e:	0049      	lsls	r1, r1, #1
 8003a80:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8003a84:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8003a86:	68dd      	ldr	r5, [r3, #12]
 8003a88:	4922      	ldr	r1, [pc, #136]	@ (8003b14 <HAL_ADC_Init+0x234>)
 8003a8a:	4029      	ands	r1, r5
 8003a8c:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a8e:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8003a90:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a92:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003a94:	bf05      	ittet	eq
 8003a96:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8003a98:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a9a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003a9c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003aa0:	bf06      	itte	eq
 8003aa2:	f021 010f 	biceq.w	r1, r1, #15
 8003aa6:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003aa8:	f022 020f 	bicne.w	r2, r2, #15
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ab4:	f023 0303 	bic.w	r3, r3, #3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8003abe:	b003      	add	sp, #12
 8003ac0:	bd30      	pop	{r4, r5, pc}
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	e74d      	b.n	8003962 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8003ac6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003ac8:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8003acc:	f041 0120 	orr.w	r1, r1, #32
 8003ad0:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003ad4:	f041 0101 	orr.w	r1, r1, #1
 8003ad8:	6461      	str	r1, [r4, #68]	@ 0x44
 8003ada:	e7aa      	b.n	8003a32 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003adc:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8003ae0:	e7bc      	b.n	8003a5c <HAL_ADC_Init+0x17c>
 8003ae2:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8003ae6:	e7b9      	b.n	8003a5c <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8003ae8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aea:	f023 0312 	bic.w	r3, r3, #18
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8003af4:	2001      	movs	r0, #1
 8003af6:	e7e2      	b.n	8003abe <HAL_ADC_Init+0x1de>
 8003af8:	50000100 	.word	0x50000100
 8003afc:	50000500 	.word	0x50000500
 8003b00:	50000700 	.word	0x50000700
 8003b04:	20000004 	.word	0x20000004
 8003b08:	000f4240 	.word	0x000f4240
 8003b0c:	50000300 	.word	0x50000300
 8003b10:	50000400 	.word	0x50000400
 8003b14:	fff0c007 	.word	0xfff0c007

08003b18 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8003b18:	4770      	bx	lr

08003b1a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8003b1a:	4770      	bx	lr

08003b1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8003b1c:	4770      	bx	lr

08003b1e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b20:	6803      	ldr	r3, [r0, #0]
{
 8003b22:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b24:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b26:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b28:	076a      	lsls	r2, r5, #29
{
 8003b2a:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b2c:	d501      	bpl.n	8003b32 <HAL_ADC_IRQHandler+0x12>
 8003b2e:	0770      	lsls	r0, r6, #29
 8003b30:	d403      	bmi.n	8003b3a <HAL_ADC_IRQHandler+0x1a>
 8003b32:	0729      	lsls	r1, r5, #28
 8003b34:	d543      	bpl.n	8003bbe <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003b36:	0732      	lsls	r2, r6, #28
 8003b38:	d541      	bpl.n	8003bbe <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003b3c:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b3e:	bf5e      	ittt	pl
 8003b40:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8003b42:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8003b46:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b4c:	d003      	beq.n	8003b56 <HAL_ADC_IRQHandler+0x36>
 8003b4e:	4a90      	ldr	r2, [pc, #576]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f040 8105 	bne.w	8003d60 <HAL_ADC_IRQHandler+0x240>
 8003b56:	4a8f      	ldr	r2, [pc, #572]	@ (8003d94 <HAL_ADC_IRQHandler+0x274>)
 8003b58:	6891      	ldr	r1, [r2, #8]
 8003b5a:	06c9      	lsls	r1, r1, #27
 8003b5c:	d00c      	beq.n	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b62:	d003      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x4c>
 8003b64:	498a      	ldr	r1, [pc, #552]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003b66:	428b      	cmp	r3, r1
 8003b68:	f040 80ff 	bne.w	8003d6a <HAL_ADC_IRQHandler+0x24a>
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2a05      	cmp	r2, #5
 8003b74:	f040 8114 	bne.w	8003da0 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003b78:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003b7a:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003b7c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003b80:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8003b84:	4311      	orrs	r1, r2
 8003b86:	d114      	bne.n	8003bb2 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003b88:	0729      	lsls	r1, r5, #28
 8003b8a:	d512      	bpl.n	8003bb2 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	0752      	lsls	r2, r2, #29
 8003b90:	f100 8122 	bmi.w	8003dd8 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	f022 020c 	bic.w	r2, r2, #12
 8003b9a:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba2:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ba6:	04d8      	lsls	r0, r3, #19
 8003ba8:	d403      	bmi.n	8003bb2 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003baa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7ff fe5e 	bl	8003874 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	220c      	movs	r2, #12
 8003bbc:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bbe:	06a9      	lsls	r1, r5, #26
 8003bc0:	d501      	bpl.n	8003bc6 <HAL_ADC_IRQHandler+0xa6>
 8003bc2:	06b2      	lsls	r2, r6, #26
 8003bc4:	d403      	bmi.n	8003bce <HAL_ADC_IRQHandler+0xae>
 8003bc6:	066b      	lsls	r3, r5, #25
 8003bc8:	d562      	bpl.n	8003c90 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003bca:	0670      	lsls	r0, r6, #25
 8003bcc:	d560      	bpl.n	8003c90 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bd4:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bdc:	d003      	beq.n	8003be6 <HAL_ADC_IRQHandler+0xc6>
 8003bde:	4a6c      	ldr	r2, [pc, #432]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	f040 8102 	bne.w	8003dea <HAL_ADC_IRQHandler+0x2ca>
 8003be6:	4a6b      	ldr	r2, [pc, #428]	@ (8003d94 <HAL_ADC_IRQHandler+0x274>)
 8003be8:	6891      	ldr	r1, [r2, #8]
 8003bea:	06c9      	lsls	r1, r1, #27
 8003bec:	d00c      	beq.n	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf2:	d003      	beq.n	8003bfc <HAL_ADC_IRQHandler+0xdc>
 8003bf4:	4966      	ldr	r1, [pc, #408]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003bf6:	428b      	cmp	r3, r1
 8003bf8:	f040 80fc 	bne.w	8003df4 <HAL_ADC_IRQHandler+0x2d4>
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	f002 021f 	and.w	r2, r2, #31
 8003c02:	2a05      	cmp	r2, #5
 8003c04:	f040 8108 	bne.w	8003e18 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003c08:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003c0a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003c0c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8003c10:	d138      	bne.n	8003c84 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003c12:	0191      	lsls	r1, r2, #6
 8003c14:	d506      	bpl.n	8003c24 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c16:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003c18:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003c1c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8003c20:	4311      	orrs	r1, r2
 8003c22:	d12f      	bne.n	8003c84 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003c24:	0668      	lsls	r0, r5, #25
 8003c26:	d52d      	bpl.n	8003c84 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2c:	d003      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x116>
 8003c2e:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	f040 810d 	bne.w	8003e50 <HAL_ADC_IRQHandler+0x330>
 8003c36:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_ADC_IRQHandler+0x274>)
 8003c38:	6891      	ldr	r1, [r2, #8]
 8003c3a:	06c9      	lsls	r1, r1, #27
 8003c3c:	d00c      	beq.n	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c42:	d003      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x12c>
 8003c44:	4952      	ldr	r1, [pc, #328]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003c46:	428b      	cmp	r3, r1
 8003c48:	f040 8107 	bne.w	8003e5a <HAL_ADC_IRQHandler+0x33a>
 8003c4c:	6892      	ldr	r2, [r2, #8]
 8003c4e:	f002 021f 	and.w	r2, r2, #31
 8003c52:	2a06      	cmp	r2, #6
 8003c54:	f040 8113 	bne.w	8003e7e <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003c58:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003c5a:	0291      	lsls	r1, r2, #10
 8003c5c:	d412      	bmi.n	8003c84 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	0712      	lsls	r2, r2, #28
 8003c62:	f100 8128 	bmi.w	8003eb6 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c6c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c74:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c78:	05d8      	lsls	r0, r3, #23
 8003c7a:	d403      	bmi.n	8003c84 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7ff ff47 	bl	8003b18 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	2260      	movs	r2, #96	@ 0x60
 8003c8e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c90:	0629      	lsls	r1, r5, #24
 8003c92:	d50b      	bpl.n	8003cac <HAL_ADC_IRQHandler+0x18c>
 8003c94:	0632      	lsls	r2, r6, #24
 8003c96:	d509      	bpl.n	8003cac <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9e:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff fde8 	bl	8003876 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	2280      	movs	r2, #128	@ 0x80
 8003caa:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003cac:	05eb      	lsls	r3, r5, #23
 8003cae:	d50c      	bpl.n	8003cca <HAL_ADC_IRQHandler+0x1aa>
 8003cb0:	05f0      	lsls	r0, r6, #23
 8003cb2:	d50a      	bpl.n	8003cca <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003cb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cba:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff ff2d 	bl	8003b1c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc8:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003cca:	05a9      	lsls	r1, r5, #22
 8003ccc:	d50c      	bpl.n	8003ce8 <HAL_ADC_IRQHandler+0x1c8>
 8003cce:	05b2      	lsls	r2, r6, #22
 8003cd0:	d50a      	bpl.n	8003ce8 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003cd2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd8:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f7ff ff1f 	bl	8003b1e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ce8:	06eb      	lsls	r3, r5, #27
 8003cea:	d525      	bpl.n	8003d38 <HAL_ADC_IRQHandler+0x218>
 8003cec:	06f0      	lsls	r0, r6, #27
 8003cee:	d523      	bpl.n	8003d38 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d012      	beq.n	8003d1c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003cfc:	f000 80e4 	beq.w	8003ec8 <HAL_ADC_IRQHandler+0x3a8>
 8003d00:	4823      	ldr	r0, [pc, #140]	@ (8003d90 <HAL_ADC_IRQHandler+0x270>)
 8003d02:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <HAL_ADC_IRQHandler+0x278>)
 8003d04:	4923      	ldr	r1, [pc, #140]	@ (8003d94 <HAL_ADC_IRQHandler+0x274>)
 8003d06:	4282      	cmp	r2, r0
 8003d08:	bf08      	it	eq
 8003d0a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	06c9      	lsls	r1, r1, #27
 8003d10:	f040 80dc 	bne.w	8003ecc <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003d14:	68d3      	ldr	r3, [r2, #12]
 8003d16:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003d1a:	d00a      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d22:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d24:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fda3 	bl	8003878 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	2210      	movs	r2, #16
 8003d36:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d38:	056a      	lsls	r2, r5, #21
 8003d3a:	d510      	bpl.n	8003d5e <HAL_ADC_IRQHandler+0x23e>
 8003d3c:	0573      	lsls	r3, r6, #21
 8003d3e:	d50e      	bpl.n	8003d5e <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d46:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d48:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003d4a:	f043 0308 	orr.w	r3, r3, #8
 8003d4e:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d56:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f7ff fede 	bl	8003b1a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003d60:	4a0d      	ldr	r2, [pc, #52]	@ (8003d98 <HAL_ADC_IRQHandler+0x278>)
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	06d0      	lsls	r0, r2, #27
 8003d66:	f43f af07 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d98 <HAL_ADC_IRQHandler+0x278>)
 8003d6c:	6892      	ldr	r2, [r2, #8]
 8003d6e:	f002 021f 	and.w	r2, r2, #31
 8003d72:	2a05      	cmp	r2, #5
 8003d74:	f43f af00 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003d78:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <HAL_ADC_IRQHandler+0x278>)
 8003d7a:	6892      	ldr	r2, [r2, #8]
 8003d7c:	f002 021f 	and.w	r2, r2, #31
 8003d80:	2a09      	cmp	r2, #9
 8003d82:	f43f aef9 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <HAL_ADC_IRQHandler+0x27c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d123      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0x2b4>
 8003d8c:	e6f4      	b.n	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003d8e:	bf00      	nop
 8003d90:	50000100 	.word	0x50000100
 8003d94:	50000300 	.word	0x50000300
 8003d98:	50000700 	.word	0x50000700
 8003d9c:	50000400 	.word	0x50000400
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da4:	d002      	beq.n	8003dac <HAL_ADC_IRQHandler+0x28c>
 8003da6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d1e5      	bne.n	8003d78 <HAL_ADC_IRQHandler+0x258>
 8003dac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed8 <HAL_ADC_IRQHandler+0x3b8>)
 8003dae:	6892      	ldr	r2, [r2, #8]
 8003db0:	f002 021f 	and.w	r2, r2, #31
 8003db4:	2a09      	cmp	r2, #9
 8003db6:	f43f aedf 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dbe:	f43f aedb 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
 8003dc2:	4a46      	ldr	r2, [pc, #280]	@ (8003edc <HAL_ADC_IRQHandler+0x3bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f43f aed7 	beq.w	8003b78 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003dca:	4942      	ldr	r1, [pc, #264]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf08      	it	eq
 8003dd0:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	e6d0      	b.n	8003b7a <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dda:	f043 0310 	orr.w	r3, r3, #16
 8003dde:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6463      	str	r3, [r4, #68]	@ 0x44
 8003de8:	e6e3      	b.n	8003bb2 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003dea:	4a3d      	ldr	r2, [pc, #244]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	06d0      	lsls	r0, r2, #27
 8003df0:	f43f af0a 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003df4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003df6:	6892      	ldr	r2, [r2, #8]
 8003df8:	f002 021f 	and.w	r2, r2, #31
 8003dfc:	2a05      	cmp	r2, #5
 8003dfe:	f43f af03 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003e02:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2a09      	cmp	r2, #9
 8003e0c:	f43f aefc 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003e10:	4a32      	ldr	r2, [pc, #200]	@ (8003edc <HAL_ADC_IRQHandler+0x3bc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d11a      	bne.n	8003e4c <HAL_ADC_IRQHandler+0x32c>
 8003e16:	e6f7      	b.n	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1c:	d002      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x304>
 8003e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d1ee      	bne.n	8003e02 <HAL_ADC_IRQHandler+0x2e2>
 8003e24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed8 <HAL_ADC_IRQHandler+0x3b8>)
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	f002 021f 	and.w	r2, r2, #31
 8003e2c:	2a09      	cmp	r2, #9
 8003e2e:	f43f aeeb 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e36:	f43f aee7 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
 8003e3a:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_ADC_IRQHandler+0x3bc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f43f aee3 	beq.w	8003c08 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003e42:	4924      	ldr	r1, [pc, #144]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf08      	it	eq
 8003e48:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	e6dc      	b.n	8003c0a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003e50:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003e52:	6892      	ldr	r2, [r2, #8]
 8003e54:	06d0      	lsls	r0, r2, #27
 8003e56:	f43f aeff 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003e5c:	6892      	ldr	r2, [r2, #8]
 8003e5e:	f002 021f 	and.w	r2, r2, #31
 8003e62:	2a06      	cmp	r2, #6
 8003e64:	f43f aef8 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003e68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_ADC_IRQHandler+0x3c0>)
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	f002 021f 	and.w	r2, r2, #31
 8003e70:	2a07      	cmp	r2, #7
 8003e72:	f43f aef1 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003e76:	4a19      	ldr	r2, [pc, #100]	@ (8003edc <HAL_ADC_IRQHandler+0x3bc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d11a      	bne.n	8003eb2 <HAL_ADC_IRQHandler+0x392>
 8003e7c:	e6ec      	b.n	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e82:	d002      	beq.n	8003e8a <HAL_ADC_IRQHandler+0x36a>
 8003e84:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d1ee      	bne.n	8003e68 <HAL_ADC_IRQHandler+0x348>
 8003e8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ed8 <HAL_ADC_IRQHandler+0x3b8>)
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	f002 021f 	and.w	r2, r2, #31
 8003e92:	2a07      	cmp	r2, #7
 8003e94:	f43f aee0 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e9c:	f43f aedc 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
 8003ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8003edc <HAL_ADC_IRQHandler+0x3bc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	f43f aed8 	beq.w	8003c58 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003ea8:	490a      	ldr	r1, [pc, #40]	@ (8003ed4 <HAL_ADC_IRQHandler+0x3b4>)
 8003eaa:	428b      	cmp	r3, r1
 8003eac:	bf08      	it	eq
 8003eae:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003eb2:	68d2      	ldr	r2, [r2, #12]
 8003eb4:	e6d1      	b.n	8003c5a <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eb8:	f043 0310 	orr.w	r3, r3, #16
 8003ebc:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6463      	str	r3, [r4, #68]	@ 0x44
 8003ec6:	e6dd      	b.n	8003c84 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec8:	4b03      	ldr	r3, [pc, #12]	@ (8003ed8 <HAL_ADC_IRQHandler+0x3b8>)
 8003eca:	e71f      	b.n	8003d0c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8003ed2:	e722      	b.n	8003d1a <HAL_ADC_IRQHandler+0x1fa>
 8003ed4:	50000100 	.word	0x50000100
 8003ed8:	50000300 	.word	0x50000300
 8003edc:	50000400 	.word	0x50000400
 8003ee0:	50000700 	.word	0x50000700

08003ee4 <HAL_ADC_ConfigChannel>:
{
 8003ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ee6:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003eec:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ef0:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f000 816a 	beq.w	80041cc <HAL_ADC_ConfigChannel+0x2e8>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	0757      	lsls	r7, r2, #29
 8003f04:	f100 815c 	bmi.w	80041c0 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8003f08:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8003f0a:	680c      	ldr	r4, [r1, #0]
 8003f0c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8003f0e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8003f10:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8003f14:	d82c      	bhi.n	8003f70 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8003f16:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003f18:	271f      	movs	r7, #31
 8003f1a:	4097      	lsls	r7, r2
 8003f1c:	ea26 0607 	bic.w	r6, r6, r7
 8003f20:	fa04 f202 	lsl.w	r2, r4, r2
 8003f24:	4332      	orrs	r2, r6
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	f012 0f0c 	tst.w	r2, #12
 8003f2e:	d158      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f30:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f32:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003f36:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003f3a:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f3e:	d93c      	bls.n	8003fba <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f40:	699f      	ldr	r7, [r3, #24]
 8003f42:	3a1e      	subs	r2, #30
 8003f44:	4096      	lsls	r6, r2
 8003f46:	ea27 0606 	bic.w	r6, r7, r6
 8003f4a:	fa0c f202 	lsl.w	r2, ip, r2
 8003f4e:	4332      	orrs	r2, r6
 8003f50:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	694e      	ldr	r6, [r1, #20]
 8003f56:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8003f5e:	690a      	ldr	r2, [r1, #16]
 8003f60:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f62:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8003f64:	2a03      	cmp	r2, #3
 8003f66:	d86b      	bhi.n	8004040 <HAL_ADC_ConfigChannel+0x15c>
 8003f68:	e8df f002 	tbb	[pc, r2]
 8003f6c:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8003f70:	2e09      	cmp	r6, #9
 8003f72:	d80a      	bhi.n	8003f8a <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8003f74:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8003f76:	3a1e      	subs	r2, #30
 8003f78:	271f      	movs	r7, #31
 8003f7a:	4097      	lsls	r7, r2
 8003f7c:	ea26 0607 	bic.w	r6, r6, r7
 8003f80:	fa04 f202 	lsl.w	r2, r4, r2
 8003f84:	4332      	orrs	r2, r6
 8003f86:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f88:	e7ce      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8003f8a:	2e0e      	cmp	r6, #14
 8003f8c:	f04f 061f 	mov.w	r6, #31
 8003f90:	d809      	bhi.n	8003fa6 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f92:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8003f94:	3a3c      	subs	r2, #60	@ 0x3c
 8003f96:	4096      	lsls	r6, r2
 8003f98:	ea27 0606 	bic.w	r6, r7, r6
 8003f9c:	fa04 f202 	lsl.w	r2, r4, r2
 8003fa0:	4332      	orrs	r2, r6
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fa4:	e7c0      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003fa6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8003fa8:	3a5a      	subs	r2, #90	@ 0x5a
 8003faa:	4096      	lsls	r6, r2
 8003fac:	ea27 0606 	bic.w	r6, r7, r6
 8003fb0:	fa04 f202 	lsl.w	r2, r4, r2
 8003fb4:	4332      	orrs	r2, r6
 8003fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fb8:	e7b6      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fba:	695f      	ldr	r7, [r3, #20]
 8003fbc:	4096      	lsls	r6, r2
 8003fbe:	ea27 0606 	bic.w	r6, r7, r6
 8003fc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8003fc6:	ea46 060c 	orr.w	r6, r6, ip
 8003fca:	615e      	str	r6, [r3, #20]
 8003fcc:	e7c1      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003fce:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8003fd2:	4a7f      	ldr	r2, [pc, #508]	@ (80041d0 <HAL_ADC_ConfigChannel+0x2ec>)
 8003fd4:	ea0c 0202 	and.w	r2, ip, r2
 8003fd8:	433a      	orrs	r2, r7
 8003fda:	4332      	orrs	r2, r6
 8003fdc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	f002 0203 	and.w	r2, r2, #3
 8003fe8:	2a01      	cmp	r2, #1
 8003fea:	d14d      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1a4>
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	07d6      	lsls	r6, r2, #31
 8003ff0:	d54a      	bpl.n	8004088 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8003ffa:	b003      	add	sp, #12
 8003ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003ffe:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8004002:	4a73      	ldr	r2, [pc, #460]	@ (80041d0 <HAL_ADC_ConfigChannel+0x2ec>)
 8004004:	ea0c 0202 	and.w	r2, ip, r2
 8004008:	433a      	orrs	r2, r7
 800400a:	4332      	orrs	r2, r6
 800400c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004010:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8004012:	e7e6      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004014:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8004018:	4a6d      	ldr	r2, [pc, #436]	@ (80041d0 <HAL_ADC_ConfigChannel+0x2ec>)
 800401a:	ea0c 0202 	and.w	r2, ip, r2
 800401e:	433a      	orrs	r2, r7
 8004020:	4332      	orrs	r2, r6
 8004022:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004026:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004028:	e7db      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800402a:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800402e:	4a68      	ldr	r2, [pc, #416]	@ (80041d0 <HAL_ADC_ConfigChannel+0x2ec>)
 8004030:	ea0c 0202 	and.w	r2, ip, r2
 8004034:	433a      	orrs	r2, r7
 8004036:	4332      	orrs	r2, r6
 8004038:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800403c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800403e:	e7d0      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004040:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004042:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004046:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004048:	bf02      	ittt	eq
 800404a:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 800404c:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004050:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004052:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004054:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004058:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800405a:	bf02      	ittt	eq
 800405c:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 800405e:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004062:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004064:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004066:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800406a:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800406c:	bf02      	ittt	eq
 800406e:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8004070:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004074:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004076:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004078:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800407c:	42ba      	cmp	r2, r7
 800407e:	d1b0      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004080:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004082:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004086:	e7d9      	b.n	800403c <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004088:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800408a:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800408c:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004090:	d047      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004092:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004096:	ea21 0202 	bic.w	r2, r1, r2
 800409a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800409e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a2:	d164      	bne.n	800416e <HAL_ADC_ConfigChannel+0x28a>
 80040a4:	494b      	ldr	r1, [pc, #300]	@ (80041d4 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040a6:	2c10      	cmp	r4, #16
 80040a8:	d166      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040aa:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040ac:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80040b0:	d19f      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80040b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b6:	4a48      	ldr	r2, [pc, #288]	@ (80041d8 <HAL_ADC_ConfigChannel+0x2f4>)
 80040b8:	d009      	beq.n	80040ce <HAL_ADC_ConfigChannel+0x1ea>
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d069      	beq.n	8004192 <HAL_ADC_ConfigChannel+0x2ae>
 80040be:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80040c2:	4293      	cmp	r3, r2
 80040c4:	4845      	ldr	r0, [pc, #276]	@ (80041dc <HAL_ADC_ConfigChannel+0x2f8>)
 80040c6:	d067      	beq.n	8004198 <HAL_ADC_ConfigChannel+0x2b4>
 80040c8:	4283      	cmp	r3, r0
 80040ca:	bf18      	it	ne
 80040cc:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80040ce:	6898      	ldr	r0, [r3, #8]
 80040d0:	f000 0003 	and.w	r0, r0, #3
 80040d4:	2801      	cmp	r0, #1
 80040d6:	d102      	bne.n	80040de <HAL_ADC_ConfigChannel+0x1fa>
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	07c0      	lsls	r0, r0, #31
 80040dc:	d470      	bmi.n	80041c0 <HAL_ADC_ConfigChannel+0x2dc>
 80040de:	b13a      	cbz	r2, 80040f0 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80040e0:	6890      	ldr	r0, [r2, #8]
 80040e2:	f000 0003 	and.w	r0, r0, #3
 80040e6:	2801      	cmp	r0, #1
 80040e8:	d102      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x20c>
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	07d2      	lsls	r2, r2, #31
 80040ee:	d467      	bmi.n	80041c0 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80040f0:	2c10      	cmp	r4, #16
 80040f2:	d153      	bne.n	800419c <HAL_ADC_ConfigChannel+0x2b8>
 80040f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f8:	f47f af7b 	bne.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80040fc:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040fe:	4a38      	ldr	r2, [pc, #224]	@ (80041e0 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004104:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004106:	4b37      	ldr	r3, [pc, #220]	@ (80041e4 <HAL_ADC_ConfigChannel+0x300>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fbb3 f3f2 	udiv	r3, r3, r2
 800410e:	220a      	movs	r2, #10
 8004110:	4353      	muls	r3, r2
            wait_loop_index--;
 8004112:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004114:	9b01      	ldr	r3, [sp, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f43f af6b 	beq.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 800411c:	9b01      	ldr	r3, [sp, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	e7f7      	b.n	8004112 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004122:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004126:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004128:	ea42 0200 	orr.w	r2, r2, r0
 800412c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004130:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004132:	d90c      	bls.n	800414e <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004134:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	3a1b      	subs	r2, #27
 800413c:	2607      	movs	r6, #7
 800413e:	4096      	lsls	r6, r2
 8004140:	ea21 0106 	bic.w	r1, r1, r6
 8004144:	fa00 f202 	lsl.w	r2, r0, r2
 8004148:	430a      	orrs	r2, r1
 800414a:	619a      	str	r2, [r3, #24]
 800414c:	e7a7      	b.n	800409e <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 800414e:	1c61      	adds	r1, r4, #1
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004156:	2607      	movs	r6, #7
 8004158:	408e      	lsls	r6, r1
 800415a:	ea22 0206 	bic.w	r2, r2, r6
 800415e:	fa00 f101 	lsl.w	r1, r0, r1
 8004162:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8004168:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800416a:	f43f af42 	beq.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
 800416e:	4a1a      	ldr	r2, [pc, #104]	@ (80041d8 <HAL_ADC_ConfigChannel+0x2f4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d097      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x1c0>
 8004174:	491c      	ldr	r1, [pc, #112]	@ (80041e8 <HAL_ADC_ConfigChannel+0x304>)
 8004176:	e796      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004178:	2c11      	cmp	r4, #17
 800417a:	d103      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800417c:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800417e:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8004182:	e795      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004184:	2c12      	cmp	r4, #18
 8004186:	f47f af34 	bne.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800418a:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800418c:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8004190:	e78e      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x1cc>
 8004192:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004196:	e79a      	b.n	80040ce <HAL_ADC_ConfigChannel+0x1ea>
 8004198:	4602      	mov	r2, r0
 800419a:	e798      	b.n	80040ce <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800419c:	2c11      	cmp	r4, #17
 800419e:	d108      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x2ce>
 80041a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041a4:	f47f af25 	bne.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80041a8:	688b      	ldr	r3, [r1, #8]
 80041aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80041ae:	608b      	str	r3, [r1, #8]
 80041b0:	e71f      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041b2:	2c12      	cmp	r4, #18
 80041b4:	f47f af1d 	bne.w	8003ff2 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80041b8:	688b      	ldr	r3, [r1, #8]
 80041ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041be:	e7f6      	b.n	80041ae <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80041c2:	f043 0320 	orr.w	r3, r3, #32
 80041c6:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80041c8:	2001      	movs	r0, #1
 80041ca:	e713      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 80041cc:	2002      	movs	r0, #2
 80041ce:	e714      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x116>
 80041d0:	83fff000 	.word	0x83fff000
 80041d4:	50000300 	.word	0x50000300
 80041d8:	50000100 	.word	0x50000100
 80041dc:	50000500 	.word	0x50000500
 80041e0:	000f4240 	.word	0x000f4240
 80041e4:	20000004 	.word	0x20000004
 80041e8:	50000700 	.word	0x50000700

080041ec <HAL_ADCEx_MultiModeConfigChannel>:
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041ee:	6804      	ldr	r4, [r0, #0]
 80041f0:	4b3c      	ldr	r3, [pc, #240]	@ (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80041f2:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 80041f6:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041f8:	d009      	beq.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 80041fa:	429c      	cmp	r4, r3
 80041fc:	d047      	beq.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 80041fe:	4a3a      	ldr	r2, [pc, #232]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8004200:	4294      	cmp	r4, r2
 8004202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004206:	d002      	beq.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8004208:	429c      	cmp	r4, r3
 800420a:	d166      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800420c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800420e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8004212:	2a01      	cmp	r2, #1
 8004214:	d063      	beq.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8004216:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004218:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 800421a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800421e:	68a2      	ldr	r2, [r4, #8]
 8004220:	0752      	lsls	r2, r2, #29
 8004222:	d454      	bmi.n	80042ce <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	0757      	lsls	r7, r2, #29
 8004228:	d451      	bmi.n	80042ce <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800422a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800422e:	d031      	beq.n	8004294 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004230:	4f2c      	ldr	r7, [pc, #176]	@ (80042e4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8004232:	4a2e      	ldr	r2, [pc, #184]	@ (80042ec <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8004234:	4e2e      	ldr	r6, [pc, #184]	@ (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004236:	42bc      	cmp	r4, r7
 8004238:	bf08      	it	eq
 800423a:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800423c:	b360      	cbz	r0, 8004298 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800423e:	6897      	ldr	r7, [r2, #8]
 8004240:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8004244:	684e      	ldr	r6, [r1, #4]
 8004246:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 800424a:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800424e:	433e      	orrs	r6, r7
 8004250:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004252:	68a6      	ldr	r6, [r4, #8]
 8004254:	f006 0603 	and.w	r6, r6, #3
 8004258:	2e01      	cmp	r6, #1
 800425a:	d102      	bne.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 800425c:	6824      	ldr	r4, [r4, #0]
 800425e:	07e6      	lsls	r6, r4, #31
 8004260:	d410      	bmi.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004262:	689c      	ldr	r4, [r3, #8]
 8004264:	f004 0403 	and.w	r4, r4, #3
 8004268:	2c01      	cmp	r4, #1
 800426a:	d102      	bne.n	8004272 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	07dc      	lsls	r4, r3, #31
 8004270:	d408      	bmi.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004272:	6893      	ldr	r3, [r2, #8]
 8004274:	6889      	ldr	r1, [r1, #8]
 8004276:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800427a:	4308      	orrs	r0, r1
 800427c:	f023 030f 	bic.w	r3, r3, #15
 8004280:	4318      	orrs	r0, r3
 8004282:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004284:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004286:	2300      	movs	r3, #0
 8004288:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004292:	e7bc      	b.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004294:	4a16      	ldr	r2, [pc, #88]	@ (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004296:	e7d1      	b.n	800423c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004298:	6891      	ldr	r1, [r2, #8]
 800429a:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800429e:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80042a0:	68a1      	ldr	r1, [r4, #8]
 80042a2:	f001 0103 	and.w	r1, r1, #3
 80042a6:	2901      	cmp	r1, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	07c9      	lsls	r1, r1, #31
 80042ae:	d4e9      	bmi.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80042b0:	6899      	ldr	r1, [r3, #8]
 80042b2:	f001 0103 	and.w	r1, r1, #3
 80042b6:	2901      	cmp	r1, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d4e1      	bmi.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80042c0:	6893      	ldr	r3, [r2, #8]
 80042c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042c6:	f023 030f 	bic.w	r3, r3, #15
 80042ca:	6093      	str	r3, [r2, #8]
 80042cc:	e7da      	b.n	8004284 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ce:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80042d0:	f043 0320 	orr.w	r3, r3, #32
 80042d4:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
 80042d8:	e7d5      	b.n	8004286 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	e7d6      	b.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 80042de:	2002      	movs	r0, #2
 80042e0:	e7d4      	b.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80042e2:	bf00      	nop
 80042e4:	50000100 	.word	0x50000100
 80042e8:	50000400 	.word	0x50000400
 80042ec:	50000700 	.word	0x50000700
 80042f0:	50000300 	.word	0x50000300

080042f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f4:	4907      	ldr	r1, [pc, #28]	@ (8004314 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80042f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042fc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004304:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800430c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004310:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004318:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431a:	b530      	push	{r4, r5, lr}
 800431c:	68dc      	ldr	r4, [r3, #12]
 800431e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004322:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004326:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	2b04      	cmp	r3, #4
 800432a:	bf28      	it	cs
 800432c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004334:	bf8c      	ite	hi
 8004336:	3c03      	subhi	r4, #3
 8004338:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433a:	fa05 f303 	lsl.w	r3, r5, r3
 800433e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004342:	40a5      	lsls	r5, r4
 8004344:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800434a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	bfac      	ite	ge
 8004352:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004356:	4a08      	ldrlt	r2, [pc, #32]	@ (8004378 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435c:	bfb8      	it	lt
 800435e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004362:	b2db      	uxtb	r3, r3
 8004364:	bfaa      	itet	ge
 8004366:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004370:	bd30      	pop	{r4, r5, pc}
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	e000ed14 	.word	0xe000ed14

0800437c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800437c:	2800      	cmp	r0, #0
 800437e:	db07      	blt.n	8004390 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004380:	0941      	lsrs	r1, r0, #5
 8004382:	4a04      	ldr	r2, [pc, #16]	@ (8004394 <HAL_NVIC_EnableIRQ+0x18>)
 8004384:	f000 001f 	and.w	r0, r0, #31
 8004388:	2301      	movs	r3, #1
 800438a:	4083      	lsls	r3, r0
 800438c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	e000e100 	.word	0xe000e100

08004398 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004398:	6802      	ldr	r2, [r0, #0]
 800439a:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <DMA_CalcBaseAndBitshift+0x2c>)
 800439c:	429a      	cmp	r2, r3
 800439e:	f04f 0114 	mov.w	r1, #20
 80043a2:	d808      	bhi.n	80043b6 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <DMA_CalcBaseAndBitshift+0x30>)
 80043a6:	4413      	add	r3, r2
 80043a8:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <DMA_CalcBaseAndBitshift+0x34>)
 80043aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80043b0:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80043b4:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043b6:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <DMA_CalcBaseAndBitshift+0x38>)
 80043b8:	4413      	add	r3, r2
 80043ba:	4a06      	ldr	r2, [pc, #24]	@ (80043d4 <DMA_CalcBaseAndBitshift+0x3c>)
 80043bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c0:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80043c2:	e7f5      	b.n	80043b0 <DMA_CalcBaseAndBitshift+0x18>
 80043c4:	40020407 	.word	0x40020407
 80043c8:	bffdfff8 	.word	0xbffdfff8
 80043cc:	40020000 	.word	0x40020000
 80043d0:	bffdfbf8 	.word	0xbffdfbf8
 80043d4:	40020400 	.word	0x40020400

080043d8 <HAL_DMA_Init>:
{
 80043d8:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 80043da:	4604      	mov	r4, r0
 80043dc:	b1e0      	cbz	r0, 8004418 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 80043de:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 80043e2:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e4:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 80043e6:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e8:	432b      	orrs	r3, r5
 80043ea:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80043ec:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ee:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f0:	6945      	ldr	r5, [r0, #20]
 80043f2:	432b      	orrs	r3, r5
 80043f4:	6985      	ldr	r5, [r0, #24]
 80043f6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f8:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043fa:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 80043fe:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8004402:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8004404:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004406:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8004408:	f7ff ffc6 	bl	8004398 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800440e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004412:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8004414:	8423      	strh	r3, [r4, #32]
}
 8004416:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004418:	2001      	movs	r0, #1
 800441a:	e7fc      	b.n	8004416 <HAL_DMA_Init+0x3e>

0800441c <HAL_DMA_Start_IT>:
{
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800441e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004422:	2c01      	cmp	r4, #1
 8004424:	d033      	beq.n	800448e <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004426:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 800442a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800442c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800442e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004432:	f04f 0400 	mov.w	r4, #0
 8004436:	d128      	bne.n	800448a <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004438:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 800443a:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800443c:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800443e:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004442:	6826      	ldr	r6, [r4, #0]
 8004444:	f026 0601 	bic.w	r6, r6, #1
 8004448:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800444a:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 800444e:	40bd      	lsls	r5, r7
 8004450:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8004452:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004454:	6843      	ldr	r3, [r0, #4]
 8004456:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004458:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 800445a:	bf0b      	itete	eq
 800445c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800445e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004460:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8004462:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004464:	b14b      	cbz	r3, 800447a <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800446c:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2000      	movs	r0, #0
}
 8004478:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f043 030a 	orr.w	r3, r3, #10
 8004480:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	e7f0      	b.n	800446c <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800448a:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 800448e:	2002      	movs	r0, #2
 8004490:	e7f2      	b.n	8004478 <HAL_DMA_Start_IT+0x5c>

08004492 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8004492:	b140      	cbz	r0, 80044a6 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004494:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004498:	2b02      	cmp	r3, #2
 800449a:	d006      	beq.n	80044aa <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800449c:	2304      	movs	r3, #4
 800449e:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80044a0:	2300      	movs	r3, #0
 80044a2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80044aa:	6803      	ldr	r3, [r0, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	f022 020e 	bic.w	r2, r2, #14
 80044b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044bc:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 80044c0:	2301      	movs	r3, #1
 80044c2:	408b      	lsls	r3, r1
 80044c4:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 80044c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044ca:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 80044cc:	2000      	movs	r0, #0
}
 80044ce:	4770      	bx	lr

080044d0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044d0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80044d2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80044d4:	6803      	ldr	r3, [r0, #0]
{
 80044d6:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044d8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044da:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80044dc:	2404      	movs	r4, #4
 80044de:	4094      	lsls	r4, r2
 80044e0:	4234      	tst	r4, r6
 80044e2:	d00e      	beq.n	8004502 <HAL_DMA_IRQHandler+0x32>
 80044e4:	f015 0f04 	tst.w	r5, #4
 80044e8:	d00b      	beq.n	8004502 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80044ee:	bf5e      	ittt	pl
 80044f0:	681a      	ldrpl	r2, [r3, #0]
 80044f2:	f022 0204 	bicpl.w	r2, r2, #4
 80044f6:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80044f8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80044fa:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80044fc:	b363      	cbz	r3, 8004558 <HAL_DMA_IRQHandler+0x88>
}
 80044fe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004500:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004502:	2402      	movs	r4, #2
 8004504:	4094      	lsls	r4, r2
 8004506:	4234      	tst	r4, r6
 8004508:	d012      	beq.n	8004530 <HAL_DMA_IRQHandler+0x60>
 800450a:	f015 0f02 	tst.w	r5, #2
 800450e:	d00f      	beq.n	8004530 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	0695      	lsls	r5, r2, #26
 8004514:	d406      	bmi.n	8004524 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	f022 020a 	bic.w	r2, r2, #10
 800451c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800451e:	2301      	movs	r3, #1
 8004520:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004524:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004526:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004528:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800452c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800452e:	e7e5      	b.n	80044fc <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004530:	2408      	movs	r4, #8
 8004532:	4094      	lsls	r4, r2
 8004534:	4234      	tst	r4, r6
 8004536:	d00f      	beq.n	8004558 <HAL_DMA_IRQHandler+0x88>
 8004538:	072c      	lsls	r4, r5, #28
 800453a:	d50d      	bpl.n	8004558 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800453c:	681c      	ldr	r4, [r3, #0]
 800453e:	f024 040e 	bic.w	r4, r4, #14
 8004542:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004544:	2301      	movs	r3, #1
 8004546:	fa03 f202 	lsl.w	r2, r3, r2
 800454a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454c:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800454e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004552:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8004554:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004556:	e7d1      	b.n	80044fc <HAL_DMA_IRQHandler+0x2c>
}
 8004558:	bc70      	pop	{r4, r5, r6}
 800455a:	4770      	bx	lr

0800455c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800455c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 800455e:	4770      	bx	lr

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80046e4 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004568:	4c5c      	ldr	r4, [pc, #368]	@ (80046dc <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 800456a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456c:	680a      	ldr	r2, [r1, #0]
 800456e:	fa32 f503 	lsrs.w	r5, r2, r3
 8004572:	d102      	bne.n	800457a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8004574:	b003      	add	sp, #12
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800457a:	2501      	movs	r5, #1
 800457c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8004580:	ea18 0202 	ands.w	r2, r8, r2
 8004584:	f000 80a0 	beq.w	80046c8 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004588:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800458a:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800458c:	f006 0503 	and.w	r5, r6, #3
 8004590:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004594:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004598:	1e6f      	subs	r7, r5, #1
 800459a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800459c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a0:	d834      	bhi.n	800460c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80045a2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80045a4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a8:	68cf      	ldr	r7, [r1, #12]
 80045aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80045ae:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80045b2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80045b4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ba:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80045be:	409f      	lsls	r7, r3
 80045c0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80045c4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80045c6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045c8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045cc:	688f      	ldr	r7, [r1, #8]
 80045ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80045d2:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80045d8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045da:	d119      	bne.n	8004610 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80045dc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80045e0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045e4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80045e8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045ec:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80045f0:	f04f 0b0f 	mov.w	fp, #15
 80045f4:	fa0b fb0a 	lsl.w	fp, fp, sl
 80045f8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045fc:	690f      	ldr	r7, [r1, #16]
 80045fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8004602:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8004606:	f8c8 7020 	str.w	r7, [r8, #32]
 800460a:	e001      	b.n	8004610 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460c:	2d03      	cmp	r5, #3
 800460e:	d1da      	bne.n	80045c6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8004610:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004612:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004616:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800461a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800461c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004620:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004622:	d051      	beq.n	80046c8 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004624:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8004628:	f045 0501 	orr.w	r5, r5, #1
 800462c:	f8c9 5018 	str.w	r5, [r9, #24]
 8004630:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8004634:	f023 0703 	bic.w	r7, r3, #3
 8004638:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800463c:	f005 0501 	and.w	r5, r5, #1
 8004640:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8004644:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004646:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800464c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800464e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004652:	f04f 0e0f 	mov.w	lr, #15
 8004656:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800465a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800465e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004662:	d033      	beq.n	80046cc <HAL_GPIO_Init+0x16c>
 8004664:	4d1e      	ldr	r5, [pc, #120]	@ (80046e0 <HAL_GPIO_Init+0x180>)
 8004666:	42a8      	cmp	r0, r5
 8004668:	d032      	beq.n	80046d0 <HAL_GPIO_Init+0x170>
 800466a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800466e:	42a8      	cmp	r0, r5
 8004670:	d030      	beq.n	80046d4 <HAL_GPIO_Init+0x174>
 8004672:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004676:	42a8      	cmp	r0, r5
 8004678:	d02e      	beq.n	80046d8 <HAL_GPIO_Init+0x178>
 800467a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800467e:	42a8      	cmp	r0, r5
 8004680:	bf14      	ite	ne
 8004682:	2505      	movne	r5, #5
 8004684:	2504      	moveq	r5, #4
 8004686:	fa05 f50c 	lsl.w	r5, r5, ip
 800468a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800468e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8004690:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004692:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004694:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8004698:	bf0c      	ite	eq
 800469a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800469c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800469e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80046a0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046a2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80046a6:	bf0c      	ite	eq
 80046a8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80046aa:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80046ac:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80046ae:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046b0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80046b4:	bf0c      	ite	eq
 80046b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80046b8:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80046ba:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80046bc:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046be:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80046c0:	bf54      	ite	pl
 80046c2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80046c4:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 80046c6:	6025      	str	r5, [r4, #0]
    position++;
 80046c8:	3301      	adds	r3, #1
 80046ca:	e74f      	b.n	800456c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046cc:	2500      	movs	r5, #0
 80046ce:	e7da      	b.n	8004686 <HAL_GPIO_Init+0x126>
 80046d0:	2501      	movs	r5, #1
 80046d2:	e7d8      	b.n	8004686 <HAL_GPIO_Init+0x126>
 80046d4:	2502      	movs	r5, #2
 80046d6:	e7d6      	b.n	8004686 <HAL_GPIO_Init+0x126>
 80046d8:	2503      	movs	r5, #3
 80046da:	e7d4      	b.n	8004686 <HAL_GPIO_Init+0x126>
 80046dc:	40010400 	.word	0x40010400
 80046e0:	48000400 	.word	0x48000400
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e8:	b10a      	cbz	r2, 80046ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ea:	6181      	str	r1, [r0, #24]
 80046ec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ee:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80046f4:	4a02      	ldr	r2, [pc, #8]	@ (8004700 <HAL_PWR_EnableBkUpAccess+0xc>)
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	4770      	bx	lr
 8004700:	40007000 	.word	0x40007000

08004704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	4605      	mov	r5, r0
 800470a:	2800      	cmp	r0, #0
 800470c:	d033      	beq.n	8004776 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470e:	6803      	ldr	r3, [r0, #0]
 8004710:	07da      	lsls	r2, r3, #31
 8004712:	d411      	bmi.n	8004738 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	079b      	lsls	r3, r3, #30
 8004718:	f100 8081 	bmi.w	800481e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	071c      	lsls	r4, r3, #28
 8004720:	f100 80eb 	bmi.w	80048fa <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	0758      	lsls	r0, r3, #29
 8004728:	f100 8130 	bmi.w	800498c <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472c:	69eb      	ldr	r3, [r5, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 81b5 	bne.w	8004a9e <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e047      	b.n	80047c8 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004738:	4cb0      	ldr	r4, [pc, #704]	@ (80049fc <HAL_RCC_OscConfig+0x2f8>)
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b04      	cmp	r3, #4
 8004742:	d007      	beq.n	8004754 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d115      	bne.n	800477a <HAL_RCC_OscConfig+0x76>
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	03df      	lsls	r7, r3, #15
 8004752:	d512      	bpl.n	800477a <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004758:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	2201      	movs	r2, #1
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	420b      	tst	r3, r1
 800476e:	d0d1      	beq.n	8004714 <HAL_RCC_OscConfig+0x10>
 8004770:	686b      	ldr	r3, [r5, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ce      	bne.n	8004714 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
 8004778:	e026      	b.n	80047c8 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800477a:	686a      	ldr	r2, [r5, #4]
 800477c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004780:	d125      	bne.n	80047ce <HAL_RCC_OscConfig+0xca>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800478a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800478c:	68a9      	ldr	r1, [r5, #8]
 800478e:	f023 030f 	bic.w	r3, r3, #15
 8004792:	430b      	orrs	r3, r1
 8004794:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004796:	b352      	cbz	r2, 80047ee <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8004798:	f7ff f866 	bl	8003868 <HAL_GetTick>
 800479c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80047a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	f04f 0801 	mov.w	r8, #1
 80047a6:	fa97 f3a7 	rbit	r3, r7
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	fa97 f3a7 	rbit	r3, r7
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	fa08 f303 	lsl.w	r3, r8, r3
 80047b8:	4213      	tst	r3, r2
 80047ba:	d1ab      	bne.n	8004714 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047bc:	f7ff f854 	bl	8003868 <HAL_GetTick>
 80047c0:	1b80      	subs	r0, r0, r6
 80047c2:	2864      	cmp	r0, #100	@ 0x64
 80047c4:	d9ef      	bls.n	80047a6 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80047c6:	2003      	movs	r0, #3
}
 80047c8:	b002      	add	sp, #8
 80047ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	b932      	cbnz	r2, 80047e0 <HAL_RCC_OscConfig+0xdc>
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047de:	e7d3      	b.n	8004788 <HAL_RCC_OscConfig+0x84>
 80047e0:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80047e4:	d1f5      	bne.n	80047d2 <HAL_RCC_OscConfig+0xce>
 80047e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	e7c9      	b.n	8004782 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 80047ee:	f7ff f83b 	bl	8003868 <HAL_GetTick>
 80047f2:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80047f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f8:	f04f 0801 	mov.w	r8, #1
 80047fc:	fa97 f3a7 	rbit	r3, r7
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	fa97 f3a7 	rbit	r3, r7
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	fa08 f303 	lsl.w	r3, r8, r3
 800480e:	4213      	tst	r3, r2
 8004810:	d080      	beq.n	8004714 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004812:	f7ff f829 	bl	8003868 <HAL_GetTick>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	2864      	cmp	r0, #100	@ 0x64
 800481a:	d9ef      	bls.n	80047fc <HAL_RCC_OscConfig+0xf8>
 800481c:	e7d3      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800481e:	4c77      	ldr	r4, [pc, #476]	@ (80049fc <HAL_RCC_OscConfig+0x2f8>)
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	f013 0f0c 	tst.w	r3, #12
 8004826:	d007      	beq.n	8004838 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b08      	cmp	r3, #8
 8004830:	d11f      	bne.n	8004872 <HAL_RCC_OscConfig+0x16e>
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	03de      	lsls	r6, r3, #15
 8004836:	d41c      	bmi.n	8004872 <HAL_RCC_OscConfig+0x16e>
 8004838:	2302      	movs	r3, #2
 800483a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	6821      	ldr	r1, [r4, #0]
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	2201      	movs	r2, #1
 8004846:	fab3 f383 	clz	r3, r3
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	420b      	tst	r3, r1
 8004850:	d002      	beq.n	8004858 <HAL_RCC_OscConfig+0x154>
 8004852:	692b      	ldr	r3, [r5, #16]
 8004854:	4293      	cmp	r3, r2
 8004856:	d18e      	bne.n	8004776 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	6821      	ldr	r1, [r4, #0]
 800485a:	22f8      	movs	r2, #248	@ 0xf8
 800485c:	fa92 f2a2 	rbit	r2, r2
 8004860:	696b      	ldr	r3, [r5, #20]
 8004862:	fab2 f282 	clz	r2, r2
 8004866:	4093      	lsls	r3, r2
 8004868:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 800486c:	4313      	orrs	r3, r2
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	e754      	b.n	800471c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004872:	692a      	ldr	r2, [r5, #16]
 8004874:	2601      	movs	r6, #1
 8004876:	b1fa      	cbz	r2, 80048b8 <HAL_RCC_OscConfig+0x1b4>
 8004878:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004884:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	f04f 0802 	mov.w	r8, #2
 800488e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8004890:	f7fe ffea 	bl	8003868 <HAL_GetTick>
 8004894:	4607      	mov	r7, r0
 8004896:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	fa98 f3a8 	rbit	r3, r8
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	fa06 f303 	lsl.w	r3, r6, r3
 80048a8:	4213      	tst	r3, r2
 80048aa:	d1d5      	bne.n	8004858 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fe ffdc 	bl	8003868 <HAL_GetTick>
 80048b0:	1bc0      	subs	r0, r0, r7
 80048b2:	2802      	cmp	r0, #2
 80048b4:	d9ef      	bls.n	8004896 <HAL_RCC_OscConfig+0x192>
 80048b6:	e786      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
 80048b8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80048c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	f04f 0802 	mov.w	r8, #2
 80048ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80048d0:	f7fe ffca 	bl	8003868 <HAL_GetTick>
 80048d4:	4607      	mov	r7, r0
 80048d6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	fa98 f3a8 	rbit	r3, r8
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	fa06 f303 	lsl.w	r3, r6, r3
 80048e8:	4213      	tst	r3, r2
 80048ea:	f43f af17 	beq.w	800471c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ee:	f7fe ffbb 	bl	8003868 <HAL_GetTick>
 80048f2:	1bc0      	subs	r0, r0, r7
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d9ee      	bls.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
 80048f8:	e765      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048fa:	69aa      	ldr	r2, [r5, #24]
 80048fc:	4e3f      	ldr	r6, [pc, #252]	@ (80049fc <HAL_RCC_OscConfig+0x2f8>)
 80048fe:	4940      	ldr	r1, [pc, #256]	@ (8004a00 <HAL_RCC_OscConfig+0x2fc>)
 8004900:	2401      	movs	r4, #1
 8004902:	b30a      	cbz	r2, 8004948 <HAL_RCC_OscConfig+0x244>
 8004904:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	440b      	add	r3, r1
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	2702      	movs	r7, #2
 8004912:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8004914:	f7fe ffa8 	bl	8003868 <HAL_GetTick>
 8004918:	4680      	mov	r8, r0
 800491a:	fa97 f3a7 	rbit	r3, r7
 800491e:	fa97 f3a7 	rbit	r3, r7
 8004922:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004928:	fa97 f3a7 	rbit	r3, r7
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	fa04 f303 	lsl.w	r3, r4, r3
 8004934:	4213      	tst	r3, r2
 8004936:	f47f aef5 	bne.w	8004724 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800493a:	f7fe ff95 	bl	8003868 <HAL_GetTick>
 800493e:	eba0 0008 	sub.w	r0, r0, r8
 8004942:	2802      	cmp	r0, #2
 8004944:	d9e9      	bls.n	800491a <HAL_RCC_OscConfig+0x216>
 8004946:	e73e      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
 8004948:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	440b      	add	r3, r1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	2702      	movs	r7, #2
 8004956:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004958:	f7fe ff86 	bl	8003868 <HAL_GetTick>
 800495c:	4680      	mov	r8, r0
 800495e:	fa97 f3a7 	rbit	r3, r7
 8004962:	fa97 f3a7 	rbit	r3, r7
 8004966:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800496c:	fa97 f3a7 	rbit	r3, r7
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	fa04 f303 	lsl.w	r3, r4, r3
 8004978:	4213      	tst	r3, r2
 800497a:	f43f aed3 	beq.w	8004724 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fe ff73 	bl	8003868 <HAL_GetTick>
 8004982:	eba0 0008 	sub.w	r0, r0, r8
 8004986:	2802      	cmp	r0, #2
 8004988:	d9e9      	bls.n	800495e <HAL_RCC_OscConfig+0x25a>
 800498a:	e71c      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498c:	4c1b      	ldr	r4, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x2f8>)
 800498e:	69e3      	ldr	r3, [r4, #28]
 8004990:	00d9      	lsls	r1, r3, #3
 8004992:	d431      	bmi.n	80049f8 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	69e3      	ldr	r3, [r4, #28]
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499a:	61e3      	str	r3, [r4, #28]
 800499c:	69e3      	ldr	r3, [r4, #28]
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	4f16      	ldr	r7, [pc, #88]	@ (8004a04 <HAL_RCC_OscConfig+0x300>)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	05da      	lsls	r2, r3, #23
 80049ae:	d52b      	bpl.n	8004a08 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	68eb      	ldr	r3, [r5, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d139      	bne.n	8004a2a <HAL_RCC_OscConfig+0x326>
 80049b6:	6a23      	ldr	r3, [r4, #32]
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80049be:	f7fe ff53 	bl	8003868 <HAL_GetTick>
 80049c2:	2702      	movs	r7, #2
 80049c4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c6:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80049ce:	fa97 f3a7 	rbit	r3, r7
 80049d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	6a22      	ldr	r2, [r4, #32]
 80049d8:	fa97 f3a7 	rbit	r3, r7
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	fa09 f303 	lsl.w	r3, r9, r3
 80049e4:	4213      	tst	r3, r2
 80049e6:	d053      	beq.n	8004a90 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	f43f ae9f 	beq.w	800472c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ee:	69e3      	ldr	r3, [r4, #28]
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	61e3      	str	r3, [r4, #28]
 80049f6:	e699      	b.n	800472c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80049f8:	2600      	movs	r6, #0
 80049fa:	e7d5      	b.n	80049a8 <HAL_RCC_OscConfig+0x2a4>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	10908120 	.word	0x10908120
 8004a04:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004a10:	f7fe ff2a 	bl	8003868 <HAL_GetTick>
 8004a14:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	05db      	lsls	r3, r3, #23
 8004a1a:	d4c9      	bmi.n	80049b0 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1c:	f7fe ff24 	bl	8003868 <HAL_GetTick>
 8004a20:	eba0 0008 	sub.w	r0, r0, r8
 8004a24:	2864      	cmp	r0, #100	@ 0x64
 8004a26:	d9f6      	bls.n	8004a16 <HAL_RCC_OscConfig+0x312>
 8004a28:	e6cd      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2a:	bb1b      	cbnz	r3, 8004a74 <HAL_RCC_OscConfig+0x370>
 8004a2c:	6a23      	ldr	r3, [r4, #32]
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6223      	str	r3, [r4, #32]
 8004a34:	6a23      	ldr	r3, [r4, #32]
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004a3c:	f7fe ff14 	bl	8003868 <HAL_GetTick>
 8004a40:	2702      	movs	r7, #2
 8004a42:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a44:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004a4c:	fa97 f3a7 	rbit	r3, r7
 8004a50:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	6a22      	ldr	r2, [r4, #32]
 8004a56:	fa97 f3a7 	rbit	r3, r7
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a62:	4213      	tst	r3, r2
 8004a64:	d0c0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fe feff 	bl	8003868 <HAL_GetTick>
 8004a6a:	eba0 0008 	sub.w	r0, r0, r8
 8004a6e:	4550      	cmp	r0, sl
 8004a70:	d9ec      	bls.n	8004a4c <HAL_RCC_OscConfig+0x348>
 8004a72:	e6a8      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	2b05      	cmp	r3, #5
 8004a76:	6a23      	ldr	r3, [r4, #32]
 8004a78:	d103      	bne.n	8004a82 <HAL_RCC_OscConfig+0x37e>
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	6223      	str	r3, [r4, #32]
 8004a80:	e799      	b.n	80049b6 <HAL_RCC_OscConfig+0x2b2>
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6223      	str	r3, [r4, #32]
 8004a88:	6a23      	ldr	r3, [r4, #32]
 8004a8a:	f023 0304 	bic.w	r3, r3, #4
 8004a8e:	e795      	b.n	80049bc <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fe feea 	bl	8003868 <HAL_GetTick>
 8004a94:	eba0 0008 	sub.w	r0, r0, r8
 8004a98:	4550      	cmp	r0, sl
 8004a9a:	d998      	bls.n	80049ce <HAL_RCC_OscConfig+0x2ca>
 8004a9c:	e693      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a9e:	4c46      	ldr	r4, [pc, #280]	@ (8004bb8 <HAL_RCC_OscConfig+0x4b4>)
 8004aa0:	6862      	ldr	r2, [r4, #4]
 8004aa2:	f002 020c 	and.w	r2, r2, #12
 8004aa6:	2a08      	cmp	r2, #8
 8004aa8:	d074      	beq.n	8004b94 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab0:	d14d      	bne.n	8004b4e <HAL_RCC_OscConfig+0x44a>
 8004ab2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004abe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fece 	bl	8003868 <HAL_GetTick>
 8004acc:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8004ad0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad2:	2601      	movs	r6, #1
 8004ad4:	fa98 f3a8 	rbit	r3, r8
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	fa98 f3a8 	rbit	r3, r8
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	fa06 f303 	lsl.w	r3, r6, r3
 8004ae6:	4213      	tst	r3, r2
 8004ae8:	d12b      	bne.n	8004b42 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aea:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8004aee:	6862      	ldr	r2, [r4, #4]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004af6:	4313      	orrs	r3, r2
 8004af8:	6063      	str	r3, [r4, #4]
 8004afa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004afe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b0a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b0e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b10:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8004b12:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8004b14:	f7fe fea8 	bl	8003868 <HAL_GetTick>
 8004b18:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	fa96 f3a6 	rbit	r3, r6
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	fa07 f303 	lsl.w	r3, r7, r3
 8004b30:	4213      	tst	r3, r2
 8004b32:	f47f adff 	bne.w	8004734 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe fe97 	bl	8003868 <HAL_GetTick>
 8004b3a:	1b40      	subs	r0, r0, r5
 8004b3c:	2802      	cmp	r0, #2
 8004b3e:	d9ee      	bls.n	8004b1e <HAL_RCC_OscConfig+0x41a>
 8004b40:	e641      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fe fe91 	bl	8003868 <HAL_GetTick>
 8004b46:	1bc0      	subs	r0, r0, r7
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d9c3      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x3d0>
 8004b4c:	e63b      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
 8004b4e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b64:	f7fe fe80 	bl	8003868 <HAL_GetTick>
 8004b68:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004b6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6e:	2701      	movs	r7, #1
 8004b70:	fa96 f3a6 	rbit	r3, r6
 8004b74:	6822      	ldr	r2, [r4, #0]
 8004b76:	fa96 f3a6 	rbit	r3, r6
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	fa07 f303 	lsl.w	r3, r7, r3
 8004b82:	4213      	tst	r3, r2
 8004b84:	f43f add6 	beq.w	8004734 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fe fe6e 	bl	8003868 <HAL_GetTick>
 8004b8c:	1b40      	subs	r0, r0, r5
 8004b8e:	2802      	cmp	r0, #2
 8004b90:	d9ee      	bls.n	8004b70 <HAL_RCC_OscConfig+0x46c>
 8004b92:	e618      	b.n	80047c6 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f43f adee 	beq.w	8004776 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8004b9a:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b9c:	6a2b      	ldr	r3, [r5, #32]
 8004b9e:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	f47f ade7 	bne.w	8004776 <HAL_RCC_OscConfig+0x72>
 8004ba8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004baa:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bae:	1ac0      	subs	r0, r0, r3
 8004bb0:	bf18      	it	ne
 8004bb2:	2001      	movne	r0, #1
 8004bb4:	e608      	b.n	80047c8 <HAL_RCC_OscConfig+0xc4>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000

08004bbc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x34>)
 8004bbe:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bc0:	f002 010c 	and.w	r1, r2, #12
 8004bc4:	2908      	cmp	r1, #8
 8004bc6:	d111      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bca:	480a      	ldr	r0, [pc, #40]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x38>)
 8004bcc:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004bd0:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004bd2:	bf44      	itt	mi
 8004bd4:	f003 030f 	andmi.w	r3, r3, #15
 8004bd8:	4a07      	ldrmi	r2, [pc, #28]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bda:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004bdc:	bf49      	itett	mi
 8004bde:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004be0:	4b06      	ldrpl	r3, [pc, #24]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004be2:	4b07      	ldrmi	r3, [pc, #28]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x44>)
 8004be4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004be8:	4358      	muls	r0, r3
 8004bea:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004bec:	4804      	ldr	r0, [pc, #16]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004bee:	4770      	bx	lr
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	0800e028 	.word	0x0800e028
 8004bf8:	0800e018 	.word	0x0800e018
 8004bfc:	003d0900 	.word	0x003d0900
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_ClockConfig>:
{
 8004c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c08:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	b910      	cbnz	r0, 8004c14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004c0e:	2001      	movs	r0, #1
}
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4a4a      	ldr	r2, [pc, #296]	@ (8004d40 <HAL_RCC_ClockConfig+0x13c>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	d32e      	bcc.n	8004c7e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	0791      	lsls	r1, r2, #30
 8004c24:	d436      	bmi.n	8004c94 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c26:	07d2      	lsls	r2, r2, #31
 8004c28:	d43c      	bmi.n	8004ca4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2a:	4a45      	ldr	r2, [pc, #276]	@ (8004d40 <HAL_RCC_ClockConfig+0x13c>)
 8004c2c:	6813      	ldr	r3, [r2, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	42ab      	cmp	r3, r5
 8004c34:	d870      	bhi.n	8004d18 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	4d42      	ldr	r5, [pc, #264]	@ (8004d44 <HAL_RCC_ClockConfig+0x140>)
 8004c3a:	f012 0f04 	tst.w	r2, #4
 8004c3e:	d177      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	0713      	lsls	r3, r2, #28
 8004c42:	d506      	bpl.n	8004c52 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c44:	686b      	ldr	r3, [r5, #4]
 8004c46:	6922      	ldr	r2, [r4, #16]
 8004c48:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004c4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c50:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c52:	f7ff ffb3 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004c56:	686b      	ldr	r3, [r5, #4]
 8004c58:	22f0      	movs	r2, #240	@ 0xf0
 8004c5a:	fa92 f2a2 	rbit	r2, r2
 8004c5e:	fab2 f282 	clz	r2, r2
 8004c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c66:	40d3      	lsrs	r3, r2
 8004c68:	4a37      	ldr	r2, [pc, #220]	@ (8004d48 <HAL_RCC_ClockConfig+0x144>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	40d8      	lsrs	r0, r3
 8004c6e:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <HAL_RCC_ClockConfig+0x148>)
 8004c70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004c72:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <HAL_RCC_ClockConfig+0x14c>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f7fe fc4d 	bl	8003514 <HAL_InitTick>
  return HAL_OK;
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e7c8      	b.n	8004c10 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	f023 0307 	bic.w	r3, r3, #7
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	d1bd      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xa>
 8004c92:	e7c5      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	492b      	ldr	r1, [pc, #172]	@ (8004d44 <HAL_RCC_ClockConfig+0x140>)
 8004c96:	68a0      	ldr	r0, [r4, #8]
 8004c98:	684b      	ldr	r3, [r1, #4]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c9e:	4303      	orrs	r3, r0
 8004ca0:	604b      	str	r3, [r1, #4]
 8004ca2:	e7c0      	b.n	8004c26 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca4:	6862      	ldr	r2, [r4, #4]
 8004ca6:	4e27      	ldr	r6, [pc, #156]	@ (8004d44 <HAL_RCC_ClockConfig+0x140>)
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	d124      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xf2>
 8004cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004cb0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb4:	6831      	ldr	r1, [r6, #0]
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	d0a3      	beq.n	8004c0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cc6:	6873      	ldr	r3, [r6, #4]
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004cd0:	f7fe fdca 	bl	8003868 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004cd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cda:	6873      	ldr	r3, [r6, #4]
 8004cdc:	6862      	ldr	r2, [r4, #4]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ce6:	d0a0      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fe fdbe 	bl	8003868 <HAL_GetTick>
 8004cec:	1bc0      	subs	r0, r0, r7
 8004cee:	4540      	cmp	r0, r8
 8004cf0:	d9f3      	bls.n	8004cda <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	e78c      	b.n	8004c10 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cf6:	2a02      	cmp	r2, #2
 8004cf8:	bf0c      	ite	eq
 8004cfa:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8004cfe:	2302      	movne	r3, #2
 8004d00:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	6830      	ldr	r0, [r6, #0]
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	fa01 f303 	lsl.w	r3, r1, r3
 8004d14:	4203      	tst	r3, r0
 8004d16:	e7d5      	b.n	8004cc4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	f023 0307 	bic.w	r3, r3, #7
 8004d1e:	432b      	orrs	r3, r5
 8004d20:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	42ab      	cmp	r3, r5
 8004d2a:	f47f af70 	bne.w	8004c0e <HAL_RCC_ClockConfig+0xa>
 8004d2e:	e782      	b.n	8004c36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	686b      	ldr	r3, [r5, #4]
 8004d32:	68e1      	ldr	r1, [r4, #12]
 8004d34:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	606b      	str	r3, [r5, #4]
 8004d3c:	e780      	b.n	8004c40 <HAL_RCC_ClockConfig+0x3c>
 8004d3e:	bf00      	nop
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40021000 	.word	0x40021000
 8004d48:	0800e008 	.word	0x0800e008
 8004d4c:	20000004 	.word	0x20000004
 8004d50:	2000000c 	.word	0x2000000c

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d54:	4b08      	ldr	r3, [pc, #32]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	fa92 f2a2 	rbit	r2, r2
 8004d60:	fab2 f282 	clz	r2, r2
 8004d64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d68:	40d3      	lsrs	r3, r2
 8004d6a:	4a04      	ldr	r2, [pc, #16]	@ (8004d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004d70:	6810      	ldr	r0, [r2, #0]
}    
 8004d72:	40d8      	lsrs	r0, r3
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800e000 	.word	0x0800e000
 8004d80:	20000004 	.word	0x20000004

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d84:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d86:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	fa92 f2a2 	rbit	r2, r2
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d98:	40d3      	lsrs	r3, r2
 8004d9a:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d9c:	5cd3      	ldrb	r3, [r2, r3]
 8004d9e:	4a04      	ldr	r2, [pc, #16]	@ (8004db0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8004da0:	6810      	ldr	r0, [r2, #0]
} 
 8004da2:	40d8      	lsrs	r0, r3
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	0800e000 	.word	0x0800e000
 8004db0:	20000004 	.word	0x20000004

08004db4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004db4:	230f      	movs	r3, #15
 8004db6:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_GetClockConfig+0x34>)
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004dc8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004dd0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	08db      	lsrs	r3, r3, #3
 8004dd6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004dda:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_RCC_GetClockConfig+0x38>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	600b      	str	r3, [r1, #0]
}
 8004de6:	4770      	bx	lr
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40022000 	.word	0x40022000

08004df0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004df0:	6803      	ldr	r3, [r0, #0]
{
 8004df2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004df6:	03dd      	lsls	r5, r3, #15
{
 8004df8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dfa:	d524      	bpl.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfc:	4d78      	ldr	r5, [pc, #480]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004dfe:	69eb      	ldr	r3, [r5, #28]
 8004e00:	00d8      	lsls	r0, r3, #3
 8004e02:	f100 8091 	bmi.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	69eb      	ldr	r3, [r5, #28]
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	61eb      	str	r3, [r5, #28]
 8004e0e:	69eb      	ldr	r3, [r5, #28]
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e18:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1a:	4f72      	ldr	r7, [pc, #456]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	05d9      	lsls	r1, r3, #23
 8004e20:	f140 8084 	bpl.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e24:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004e2c:	f040 8093 	bne.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e30:	6a2b      	ldr	r3, [r5, #32]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e3c:	b11e      	cbz	r6, 8004e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3e:	69eb      	ldr	r3, [r5, #28]
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	07df      	lsls	r7, r3, #31
 8004e4a:	d506      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e4c:	4964      	ldr	r1, [pc, #400]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e4e:	68a0      	ldr	r0, [r4, #8]
 8004e50:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e52:	f022 0203 	bic.w	r2, r2, #3
 8004e56:	4302      	orrs	r2, r0
 8004e58:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e5a:	079e      	lsls	r6, r3, #30
 8004e5c:	d506      	bpl.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e5e:	4960      	ldr	r1, [pc, #384]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e60:	68e0      	ldr	r0, [r4, #12]
 8004e62:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e64:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004e68:	4302      	orrs	r2, r0
 8004e6a:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6c:	075d      	lsls	r5, r3, #29
 8004e6e:	d506      	bpl.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e70:	495b      	ldr	r1, [pc, #364]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e72:	6920      	ldr	r0, [r4, #16]
 8004e74:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e76:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004e7a:	4302      	orrs	r2, r0
 8004e7c:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7e:	0698      	lsls	r0, r3, #26
 8004e80:	d506      	bpl.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e82:	4957      	ldr	r1, [pc, #348]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e84:	69e0      	ldr	r0, [r4, #28]
 8004e86:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e88:	f022 0210 	bic.w	r2, r2, #16
 8004e8c:	4302      	orrs	r2, r0
 8004e8e:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e90:	0399      	lsls	r1, r3, #14
 8004e92:	d506      	bpl.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e94:	4952      	ldr	r1, [pc, #328]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004e96:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004e98:	684a      	ldr	r2, [r1, #4]
 8004e9a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8004e9e:	4302      	orrs	r2, r0
 8004ea0:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea2:	065a      	lsls	r2, r3, #25
 8004ea4:	d506      	bpl.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ea6:	494e      	ldr	r1, [pc, #312]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ea8:	6a20      	ldr	r0, [r4, #32]
 8004eaa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004eac:	f022 0220 	bic.w	r2, r2, #32
 8004eb0:	4302      	orrs	r2, r0
 8004eb2:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb4:	071f      	lsls	r7, r3, #28
 8004eb6:	d506      	bpl.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eb8:	4949      	ldr	r1, [pc, #292]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004eba:	6960      	ldr	r0, [r4, #20]
 8004ebc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004ebe:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004ec2:	4302      	orrs	r2, r0
 8004ec4:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec6:	06de      	lsls	r6, r3, #27
 8004ec8:	d506      	bpl.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eca:	4945      	ldr	r1, [pc, #276]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ecc:	69a0      	ldr	r0, [r4, #24]
 8004ece:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004ed0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004ed4:	4302      	orrs	r2, r0
 8004ed6:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed8:	059d      	lsls	r5, r3, #22
 8004eda:	d506      	bpl.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004edc:	4940      	ldr	r1, [pc, #256]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ede:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004ee0:	684a      	ldr	r2, [r1, #4]
 8004ee2:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8004ee6:	4302      	orrs	r2, r0
 8004ee8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eea:	0618      	lsls	r0, r3, #24
 8004eec:	d506      	bpl.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eee:	493c      	ldr	r1, [pc, #240]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004ef0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004ef2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004ef4:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004ef8:	4302      	orrs	r2, r0
 8004efa:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004efc:	05d9      	lsls	r1, r3, #23
 8004efe:	d506      	bpl.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f00:	4937      	ldr	r1, [pc, #220]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004f02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004f04:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004f06:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8004f0a:	4302      	orrs	r2, r0
 8004f0c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f0e:	04da      	lsls	r2, r3, #19
 8004f10:	d506      	bpl.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f12:	4933      	ldr	r1, [pc, #204]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004f14:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004f16:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f1c:	4302      	orrs	r2, r0
 8004f1e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f20:	049b      	lsls	r3, r3, #18
 8004f22:	d454      	bmi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f24:	2000      	movs	r0, #0
 8004f26:	e013      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8004f28:	2600      	movs	r6, #0
 8004f2a:	e776      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f32:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004f34:	f7fe fc98 	bl	8003868 <HAL_GetTick>
 8004f38:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	05da      	lsls	r2, r3, #23
 8004f3e:	f53f af71 	bmi.w	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fe fc91 	bl	8003868 <HAL_GetTick>
 8004f46:	eba0 0008 	sub.w	r0, r0, r8
 8004f4a:	2864      	cmp	r0, #100	@ 0x64
 8004f4c:	d9f5      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8004f4e:	2003      	movs	r0, #3
}
 8004f50:	b002      	add	sp, #8
 8004f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f56:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f43f af68 	beq.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f60:	6a29      	ldr	r1, [r5, #32]
 8004f62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f66:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004f6a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f6e:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004f72:	fab2 f282 	clz	r2, r2
 8004f76:	4462      	add	r2, ip
 8004f78:	0092      	lsls	r2, r2, #2
 8004f7a:	2701      	movs	r7, #1
 8004f7c:	6017      	str	r7, [r2, #0]
 8004f7e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	4463      	add	r3, ip
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f8e:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8004f90:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f92:	f57f af4d 	bpl.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8004f96:	f7fe fc67 	bl	8003868 <HAL_GetTick>
 8004f9a:	f04f 0802 	mov.w	r8, #2
 8004f9e:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004fa4:	fa98 f3a8 	rbit	r3, r8
 8004fa8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	6a2a      	ldr	r2, [r5, #32]
 8004fae:	fa98 f3a8 	rbit	r3, r8
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	fa07 f303 	lsl.w	r3, r7, r3
 8004fba:	4213      	tst	r3, r2
 8004fbc:	f47f af38 	bne.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe fc52 	bl	8003868 <HAL_GetTick>
 8004fc4:	eba0 0009 	sub.w	r0, r0, r9
 8004fc8:	4550      	cmp	r0, sl
 8004fca:	d9eb      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004fcc:	e7bf      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004fce:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fd2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fdc:	e7a2      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	10908100 	.word	0x10908100

08004fec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004fee:	6803      	ldr	r3, [r0, #0]
 8004ff0:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <HAL_RTC_WaitForSynchro+0x2c>)
 8004ff2:	60da      	str	r2, [r3, #12]
{
 8004ff4:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ff6:	f7fe fc37 	bl	8003868 <HAL_GetTick>
 8004ffa:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	069b      	lsls	r3, r3, #26
 8005002:	d501      	bpl.n	8005008 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005004:	2000      	movs	r0, #0
}
 8005006:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005008:	f7fe fc2e 	bl	8003868 <HAL_GetTick>
 800500c:	1b40      	subs	r0, r0, r5
 800500e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005012:	d9f3      	bls.n	8004ffc <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8005014:	2003      	movs	r0, #3
 8005016:	e7f6      	b.n	8005006 <HAL_RTC_WaitForSynchro+0x1a>
 8005018:	0001ff5f 	.word	0x0001ff5f

0800501c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800501c:	6803      	ldr	r3, [r0, #0]
{
 800501e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005020:	68dc      	ldr	r4, [r3, #12]
 8005022:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8005026:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005028:	d117      	bne.n	800505a <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005030:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005032:	f7fe fc19 	bl	8003868 <HAL_GetTick>
 8005036:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	065b      	lsls	r3, r3, #25
 800503e:	d400      	bmi.n	8005042 <RTC_EnterInitMode+0x26>
 8005040:	b10c      	cbz	r4, 8005046 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8005042:	4620      	mov	r0, r4
 8005044:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005046:	f7fe fc0f 	bl	8003868 <HAL_GetTick>
 800504a:	1b80      	subs	r0, r0, r6
 800504c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005050:	bf82      	ittt	hi
 8005052:	2304      	movhi	r3, #4
 8005054:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8005056:	2401      	movhi	r4, #1
 8005058:	e7ee      	b.n	8005038 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2400      	movs	r4, #0
 800505c:	e7f1      	b.n	8005042 <RTC_EnterInitMode+0x26>

0800505e <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800505e:	6803      	ldr	r3, [r0, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8005066:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005068:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	069b      	lsls	r3, r3, #26
{
 800506e:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005070:	d501      	bpl.n	8005076 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005074:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005076:	f7ff ffb9 	bl	8004fec <HAL_RTC_WaitForSynchro>
 800507a:	2800      	cmp	r0, #0
 800507c:	d0f9      	beq.n	8005072 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800507e:	2304      	movs	r3, #4
 8005080:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8005082:	2001      	movs	r0, #1
 8005084:	e7f6      	b.n	8005074 <RTC_ExitInitMode+0x16>

08005086 <HAL_RTC_Init>:
{
 8005086:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8005088:	4604      	mov	r4, r0
 800508a:	2800      	cmp	r0, #0
 800508c:	d041      	beq.n	8005112 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800508e:	7f43      	ldrb	r3, [r0, #29]
 8005090:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005094:	b913      	cbnz	r3, 800509c <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8005096:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005098:	f7fe f904 	bl	80032a4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800509c:	2302      	movs	r3, #2
 800509e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	06d2      	lsls	r2, r2, #27
 80050a6:	d503      	bpl.n	80050b0 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80050a8:	2301      	movs	r3, #1
 80050aa:	7763      	strb	r3, [r4, #29]
 80050ac:	2000      	movs	r0, #0
}
 80050ae:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050b0:	22ca      	movs	r2, #202	@ 0xca
 80050b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050b4:	2253      	movs	r2, #83	@ 0x53
 80050b6:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7ff ffaf 	bl	800501c <RTC_EnterInitMode>
    if (status == HAL_OK)
 80050be:	bb10      	cbnz	r0, 8005106 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050c0:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050c2:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80050ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ce:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050d0:	6862      	ldr	r2, [r4, #4]
 80050d2:	6899      	ldr	r1, [r3, #8]
 80050d4:	4302      	orrs	r2, r0
 80050d6:	6960      	ldr	r0, [r4, #20]
 80050d8:	4302      	orrs	r2, r0
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050de:	68e2      	ldr	r2, [r4, #12]
 80050e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68a1      	ldr	r1, [r4, #8]
 80050e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050ea:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7ff ffb6 	bl	800505e <RTC_ExitInitMode>
    if (status == HAL_OK)
 80050f2:	b940      	cbnz	r0, 8005106 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80050f4:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80050f6:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80050f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005102:	430a      	orrs	r2, r1
 8005104:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	22ff      	movs	r2, #255	@ 0xff
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800510c:	2800      	cmp	r0, #0
 800510e:	d0cb      	beq.n	80050a8 <HAL_RTC_Init+0x22>
 8005110:	e7cd      	b.n	80050ae <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8005112:	2001      	movs	r0, #1
 8005114:	e7cb      	b.n	80050ae <HAL_RTC_Init+0x28>

08005116 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8005116:	2300      	movs	r3, #0

  while (number >= 10U)
 8005118:	2809      	cmp	r0, #9
 800511a:	d803      	bhi.n	8005124 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800511c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8005120:	b2c0      	uxtb	r0, r0
 8005122:	4770      	bx	lr
    number -= 10U;
 8005124:	380a      	subs	r0, #10
    bcdhigh++;
 8005126:	3301      	adds	r3, #1
    number -= 10U;
 8005128:	b2c0      	uxtb	r0, r0
 800512a:	e7f5      	b.n	8005118 <RTC_ByteToBcd2+0x2>

0800512c <HAL_RTC_SetTime>:
{
 800512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8005130:	7f03      	ldrb	r3, [r0, #28]
 8005132:	2b01      	cmp	r3, #1
{
 8005134:	4606      	mov	r6, r0
 8005136:	460f      	mov	r7, r1
 8005138:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800513c:	d041      	beq.n	80051c2 <HAL_RTC_SetTime+0x96>
 800513e:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005140:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8005142:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005144:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8005146:	7838      	ldrb	r0, [r7, #0]
 8005148:	787d      	ldrb	r5, [r7, #1]
 800514a:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800514c:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 800514e:	2a00      	cmp	r2, #0
 8005150:	d139      	bne.n	80051c6 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005152:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8005156:	bf08      	it	eq
 8005158:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800515a:	f7ff ffdc 	bl	8005116 <RTC_ByteToBcd2>
 800515e:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff ffd8 	bl	8005116 <RTC_ByteToBcd2>
 8005166:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005168:	4620      	mov	r0, r4
 800516a:	f7ff ffd4 	bl	8005116 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800516e:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005170:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8005174:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005178:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800517c:	23ca      	movs	r3, #202	@ 0xca
 800517e:	624b      	str	r3, [r1, #36]	@ 0x24
 8005180:	2353      	movs	r3, #83	@ 0x53
 8005182:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff ff49 	bl	800501c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800518a:	b9a8      	cbnz	r0, 80051b8 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800518c:	6832      	ldr	r2, [r6, #0]
 800518e:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8005192:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8005196:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005198:	6893      	ldr	r3, [r2, #8]
 800519a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800519e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051a0:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 80051a4:	6891      	ldr	r1, [r2, #8]
 80051a6:	4303      	orrs	r3, r0
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 80051ac:	4630      	mov	r0, r6
 80051ae:	f7ff ff56 	bl	800505e <RTC_ExitInitMode>
  if (status == HAL_OK)
 80051b2:	b908      	cbnz	r0, 80051b8 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 80051b4:	2301      	movs	r3, #1
 80051b6:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	22ff      	movs	r2, #255	@ 0xff
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80051be:	2300      	movs	r3, #0
 80051c0:	7733      	strb	r3, [r6, #28]
}
 80051c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051c6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80051ca:	bf08      	it	eq
 80051cc:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80051ce:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80051d0:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80051d6:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051da:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80051de:	e7cd      	b.n	800517c <HAL_RTC_SetTime+0x50>

080051e0 <HAL_RTC_SetDate>:
{
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80051e2:	7f03      	ldrb	r3, [r0, #28]
 80051e4:	2b01      	cmp	r3, #1
{
 80051e6:	4605      	mov	r5, r0
 80051e8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80051ec:	d027      	beq.n	800523e <HAL_RTC_SetDate+0x5e>
 80051ee:	2301      	movs	r3, #1
 80051f0:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051f2:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051f4:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051f6:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80051f8:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 80051fa:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051fc:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051fe:	b1fa      	cbz	r2, 8005240 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005200:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8005204:	433b      	orrs	r3, r7
 8005206:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	22ca      	movs	r2, #202	@ 0xca
 800520e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005210:	2253      	movs	r2, #83	@ 0x53
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005214:	4628      	mov	r0, r5
 8005216:	f7ff ff01 	bl	800501c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800521a:	b958      	cbnz	r0, 8005234 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800521c:	682a      	ldr	r2, [r5, #0]
 800521e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8005222:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8005226:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8005228:	4628      	mov	r0, r5
 800522a:	f7ff ff18 	bl	800505e <RTC_ExitInitMode>
  if (status == HAL_OK)
 800522e:	b908      	cbnz	r0, 8005234 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8005230:	2301      	movs	r3, #1
 8005232:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	22ff      	movs	r2, #255	@ 0xff
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800523a:	2300      	movs	r3, #0
 800523c:	772b      	strb	r3, [r5, #28]
}
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005240:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005242:	bf42      	ittt	mi
 8005244:	f024 0410 	bicmi.w	r4, r4, #16
 8005248:	340a      	addmi	r4, #10
 800524a:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800524c:	f7ff ff63 	bl	8005116 <RTC_ByteToBcd2>
 8005250:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005252:	7848      	ldrb	r0, [r1, #1]
 8005254:	f7ff ff5f 	bl	8005116 <RTC_ByteToBcd2>
 8005258:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800525a:	4638      	mov	r0, r7
 800525c:	f7ff ff5b 	bl	8005116 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005260:	ea40 0306 	orr.w	r3, r0, r6
 8005264:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005268:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 800526c:	e7cd      	b.n	800520a <HAL_RTC_SetDate+0x2a>

0800526e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800526e:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005270:	4604      	mov	r4, r0
 8005272:	2800      	cmp	r0, #0
 8005274:	d067      	beq.n	8005346 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005276:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d15d      	bne.n	8005338 <HAL_SPI_Init+0xca>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527c:	6842      	ldr	r2, [r0, #4]
 800527e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005282:	d000      	beq.n	8005286 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800528a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800528e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005292:	b923      	cbnz	r3, 800529e <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005294:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005298:	4620      	mov	r0, r4
 800529a:	f7fe f817 	bl	80032cc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800529e:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052a0:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80052a8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052aa:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80052ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	d942      	bls.n	8005340 <HAL_SPI_Init+0xd2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052ba:	461d      	mov	r5, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052bc:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c0:	bf18      	it	ne
 80052c2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c4:	68a6      	ldr	r6, [r4, #8]
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	69a1      	ldr	r1, [r4, #24]
 80052ca:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80052ce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80052d2:	4333      	orrs	r3, r6
 80052d4:	6926      	ldr	r6, [r4, #16]
 80052d6:	f006 0602 	and.w	r6, r6, #2
 80052da:	4333      	orrs	r3, r6
 80052dc:	6966      	ldr	r6, [r4, #20]
 80052de:	f006 0601 	and.w	r6, r6, #1
 80052e2:	4333      	orrs	r3, r6
 80052e4:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80052e8:	4333      	orrs	r3, r6
 80052ea:	69e6      	ldr	r6, [r4, #28]
 80052ec:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80052f0:	4333      	orrs	r3, r6
 80052f2:	6a26      	ldr	r6, [r4, #32]
 80052f4:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 80052f8:	4333      	orrs	r3, r6
 80052fa:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052fc:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8005300:	4333      	orrs	r3, r6
 8005302:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005304:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8005306:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005308:	f006 0608 	and.w	r6, r6, #8
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8005314:	4333      	orrs	r3, r6
 8005316:	0c09      	lsrs	r1, r1, #16
 8005318:	4303      	orrs	r3, r0
 800531a:	f001 0104 	and.w	r1, r1, #4
 800531e:	430b      	orrs	r3, r1
 8005320:	432b      	orrs	r3, r5
 8005322:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005324:	69d3      	ldr	r3, [r2, #28]
 8005326:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800532a:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800532e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005330:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005332:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 8005336:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005338:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800533e:	e7a2      	b.n	8005286 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005340:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005344:	e7bc      	b.n	80052c0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8005346:	2001      	movs	r0, #1
 8005348:	e7f5      	b.n	8005336 <HAL_SPI_Init+0xc8>
	...

0800534c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800534c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005350:	2b01      	cmp	r3, #1
 8005352:	d127      	bne.n	80053a4 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005356:	4a14      	ldr	r2, [pc, #80]	@ (80053a8 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535c:	6803      	ldr	r3, [r0, #0]
 800535e:	4293      	cmp	r3, r2
 8005360:	d012      	beq.n	8005388 <HAL_TIM_Base_Start+0x3c>
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d00f      	beq.n	8005388 <HAL_TIM_Base_Start+0x3c>
 8005368:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <HAL_TIM_Base_Start+0x3c>
 8005370:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <HAL_TIM_Base_Start+0x3c>
 8005378:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <HAL_TIM_Base_Start+0x3c>
 8005380:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005384:	4293      	cmp	r3, r2
 8005386:	d107      	bne.n	8005398 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <HAL_TIM_Base_Start+0x60>)
 800538c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	2a06      	cmp	r2, #6
 8005390:	d006      	beq.n	80053a0 <HAL_TIM_Base_Start+0x54>
 8005392:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005396:	d003      	beq.n	80053a0 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr
    return HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
}
 80053a6:	4770      	bx	lr
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	00010007 	.word	0x00010007

080053b0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d12b      	bne.n	8005410 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	2302      	movs	r3, #2
 80053ba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053be:	6803      	ldr	r3, [r0, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	4a12      	ldr	r2, [pc, #72]	@ (8005414 <HAL_TIM_Base_Start_IT+0x64>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d012      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x44>
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d2:	d00f      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x44>
 80053d4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x44>
 80053dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x44>
 80053e4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x44>
 80053ec:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	4a08      	ldr	r2, [pc, #32]	@ (8005418 <HAL_TIM_Base_Start_IT+0x68>)
 80053f8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fa:	2a06      	cmp	r2, #6
 80053fc:	d006      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x5c>
 80053fe:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005402:	d003      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800540c:	2000      	movs	r0, #0
 800540e:	4770      	bx	lr
    return HAL_ERROR;
 8005410:	2001      	movs	r0, #1
}
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	00010007 	.word	0x00010007

0800541c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8005424:	6803      	ldr	r3, [r0, #0]
{
 8005426:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005428:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800542a:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800542c:	07b2      	lsls	r2, r6, #30
{
 800542e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005430:	d50d      	bpl.n	800544e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005432:	07a9      	lsls	r1, r5, #30
 8005434:	d50b      	bpl.n	800544e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005436:	f06f 0202 	mvn.w	r2, #2
 800543a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543c:	2201      	movs	r2, #1
 800543e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	079a      	lsls	r2, r3, #30
 8005444:	d074      	beq.n	8005530 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005446:	f7ff ffea 	bl	800541e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	2300      	movs	r3, #0
 800544c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800544e:	0773      	lsls	r3, r6, #29
 8005450:	d510      	bpl.n	8005474 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005452:	0768      	lsls	r0, r5, #29
 8005454:	d50e      	bpl.n	8005474 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	2202      	movs	r2, #2
 8005460:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005468:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800546a:	d067      	beq.n	800553c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800546c:	f7ff ffd7 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005470:	2300      	movs	r3, #0
 8005472:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005474:	0731      	lsls	r1, r6, #28
 8005476:	d50f      	bpl.n	8005498 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005478:	072a      	lsls	r2, r5, #28
 800547a:	d50d      	bpl.n	8005498 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f06f 0208 	mvn.w	r2, #8
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005484:	2204      	movs	r2, #4
 8005486:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800548c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548e:	d05b      	beq.n	8005548 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8005490:	f7ff ffc5 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005494:	2300      	movs	r3, #0
 8005496:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005498:	06f0      	lsls	r0, r6, #27
 800549a:	d510      	bpl.n	80054be <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800549c:	06e9      	lsls	r1, r5, #27
 800549e:	d50e      	bpl.n	80054be <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f06f 0210 	mvn.w	r2, #16
 80054a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a8:	2208      	movs	r2, #8
 80054aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b4:	d04e      	beq.n	8005554 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	f7ff ffb2 	bl	800541e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	2300      	movs	r3, #0
 80054bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054be:	07f2      	lsls	r2, r6, #31
 80054c0:	d508      	bpl.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054c2:	07eb      	lsls	r3, r5, #31
 80054c4:	d506      	bpl.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f06f 0201 	mvn.w	r2, #1
 80054cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7fd fe2a 	bl	8003128 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054d4:	0630      	lsls	r0, r6, #24
 80054d6:	d508      	bpl.n	80054ea <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d8:	0629      	lsls	r1, r5, #24
 80054da:	d506      	bpl.n	80054ea <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f9b8 	bl	800585a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054ea:	05f2      	lsls	r2, r6, #23
 80054ec:	d508      	bpl.n	8005500 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ee:	062b      	lsls	r3, r5, #24
 80054f0:	d506      	bpl.n	8005500 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 f9ae 	bl	800585c <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005500:	0670      	lsls	r0, r6, #25
 8005502:	d508      	bpl.n	8005516 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005504:	0669      	lsls	r1, r5, #25
 8005506:	d506      	bpl.n	8005516 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800550e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff ff86 	bl	8005422 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005516:	06b2      	lsls	r2, r6, #26
 8005518:	d522      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800551a:	06ab      	lsls	r3, r5, #26
 800551c:	d520      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005524:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005526:	611a      	str	r2, [r3, #16]
}
 8005528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800552c:	f000 b994 	b.w	8005858 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005530:	f7ff ff74 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff73 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 800553a:	e786      	b.n	800544a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553c:	f7ff ff6e 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	4620      	mov	r0, r4
 8005542:	f7ff ff6d 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 8005546:	e793      	b.n	8005470 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	f7ff ff68 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff67 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 8005552:	e79f      	b.n	8005494 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	f7ff ff62 	bl	800541c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff61 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
 800555e:	e7ac      	b.n	80054ba <HAL_TIM_IRQHandler+0x96>
}
 8005560:	bd70      	pop	{r4, r5, r6, pc}
	...

08005564 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	4a2f      	ldr	r2, [pc, #188]	@ (8005624 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8005566:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005568:	4290      	cmp	r0, r2
 800556a:	d00e      	beq.n	800558a <TIM_Base_SetConfig+0x26>
 800556c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0x26>
 8005572:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005576:	4290      	cmp	r0, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0x26>
 800557a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800557e:	4290      	cmp	r0, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0x26>
 8005582:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005586:	4290      	cmp	r0, r2
 8005588:	d115      	bne.n	80055b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800558a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800558c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005590:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005592:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <TIM_Base_SetConfig+0xc0>)
 8005594:	4290      	cmp	r0, r2
 8005596:	d019      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 8005598:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800559c:	d016      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 800559e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80055a2:	4290      	cmp	r0, r2
 80055a4:	d012      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 80055a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055aa:	4290      	cmp	r0, r2
 80055ac:	d00e      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 80055ae:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80055b2:	4290      	cmp	r0, r2
 80055b4:	d00a      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 80055b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <TIM_Base_SetConfig+0xc4>)
 80055b8:	4290      	cmp	r0, r2
 80055ba:	d007      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 80055bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055c0:	4290      	cmp	r0, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0x68>
 80055c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055c8:	4290      	cmp	r0, r2
 80055ca:	d103      	bne.n	80055d4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d4:	694a      	ldr	r2, [r1, #20]
 80055d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055da:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80055dc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055de:	688b      	ldr	r3, [r1, #8]
 80055e0:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e2:	680b      	ldr	r3, [r1, #0]
 80055e4:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <TIM_Base_SetConfig+0xc0>)
 80055e8:	4298      	cmp	r0, r3
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0xa8>
 80055ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f0:	4298      	cmp	r0, r3
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0xa8>
 80055f4:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80055f8:	4298      	cmp	r0, r3
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0xa8>
 80055fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005600:	4298      	cmp	r0, r3
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0xa8>
 8005604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005608:	4298      	cmp	r0, r3
 800560a:	d101      	bne.n	8005610 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800560c:	690b      	ldr	r3, [r1, #16]
 800560e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005610:	2301      	movs	r3, #1
 8005612:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005614:	6903      	ldr	r3, [r0, #16]
 8005616:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005618:	bf42      	ittt	mi
 800561a:	6903      	ldrmi	r3, [r0, #16]
 800561c:	f023 0301 	bicmi.w	r3, r3, #1
 8005620:	6103      	strmi	r3, [r0, #16]
  }
}
 8005622:	4770      	bx	lr
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40014000 	.word	0x40014000

0800562c <HAL_TIM_Base_Init>:
{
 800562c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800562e:	4604      	mov	r4, r0
 8005630:	b350      	cbz	r0, 8005688 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005632:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005636:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800563a:	b91b      	cbnz	r3, 8005644 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800563c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005640:	f7fd fe94 	bl	800336c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005646:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	1d21      	adds	r1, r4, #4
 800564e:	f7ff ff89 	bl	8005564 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005652:	2301      	movs	r3, #1
 8005654:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8005658:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800565e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005662:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005666:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800566a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800566e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005676:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800567a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800567e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005682:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005686:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005688:	2001      	movs	r0, #1
 800568a:	e7fc      	b.n	8005686 <HAL_TIM_Base_Init+0x5a>

0800568c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800568c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005690:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005692:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005696:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800569a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569c:	6082      	str	r2, [r0, #8]
}
 800569e:	bd10      	pop	{r4, pc}

080056a0 <HAL_TIM_ConfigClockSource>:
{
 80056a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80056a2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80056a6:	2b01      	cmp	r3, #1
{
 80056a8:	4604      	mov	r4, r0
 80056aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80056ae:	f000 808c 	beq.w	80057ca <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 80056b2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80056b6:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80056ba:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80056be:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c0:	4b43      	ldr	r3, [pc, #268]	@ (80057d0 <HAL_TIM_ConfigClockSource+0x130>)
 80056c2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80056c4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80056c6:	680b      	ldr	r3, [r1, #0]
 80056c8:	2b60      	cmp	r3, #96	@ 0x60
 80056ca:	d04f      	beq.n	800576c <HAL_TIM_ConfigClockSource+0xcc>
 80056cc:	d832      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x94>
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d064      	beq.n	800579c <HAL_TIM_ConfigClockSource+0xfc>
 80056d2:	d816      	bhi.n	8005702 <HAL_TIM_ConfigClockSource+0x62>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d00d      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x54>
 80056d8:	d80a      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x50>
 80056da:	f033 0110 	bics.w	r1, r3, #16
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80056e6:	2300      	movs	r3, #0
 80056e8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80056ec:	4610      	mov	r0, r2
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d1f5      	bne.n	80056e0 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80056f4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005700:	e028      	b.n	8005754 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8005702:	2b50      	cmp	r3, #80	@ 0x50
 8005704:	d1ec      	bne.n	80056e0 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8005706:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005708:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800570a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570c:	6a03      	ldr	r3, [r0, #32]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005714:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800571e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005722:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005724:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005726:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005728:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800572a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005732:	e00f      	b.n	8005754 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d00d      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xb6>
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573e:	d00c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xba>
 8005740:	2b70      	cmp	r3, #112	@ 0x70
 8005742:	d1cd      	bne.n	80056e0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	68cb      	ldr	r3, [r1, #12]
 8005746:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800574a:	f7ff ff9f 	bl	800568c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800574e:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005750:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005754:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2200      	movs	r2, #0
 8005758:	e7c2      	b.n	80056e0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	68cb      	ldr	r3, [r1, #12]
 800575c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005760:	f7ff ff94 	bl	800568c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005764:	6883      	ldr	r3, [r0, #8]
 8005766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800576a:	e7f3      	b.n	8005754 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 800576c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576e:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005770:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005772:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005774:	f022 0210 	bic.w	r2, r2, #16
 8005778:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005780:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005788:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800578c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800578e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005790:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005796:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800579a:	e7db      	b.n	8005754 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 800579c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80057a0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	6a03      	ldr	r3, [r0, #32]
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ac:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80057b8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80057bc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80057be:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c4:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80057c8:	e7c4      	b.n	8005754 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 80057ca:	4602      	mov	r2, r0
 80057cc:	e78e      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x4c>
 80057ce:	bf00      	nop
 80057d0:	fffe0088 	.word	0xfffe0088

080057d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057d6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80057da:	2b01      	cmp	r3, #1
{
 80057dc:	4604      	mov	r4, r0
 80057de:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80057e2:	d032      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e4:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e6:	4d19      	ldr	r5, [pc, #100]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057ec:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80057ee:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057f2:	d002      	beq.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80057f4:	4e16      	ldr	r6, [pc, #88]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80057f6:	42b3      	cmp	r3, r6
 80057f8:	d103      	bne.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fa:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057fc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005800:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005802:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005808:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800580c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	d011      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005814:	d00e      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005816:	4a0f      	ldr	r2, [pc, #60]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800581c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005824:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800582c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005830:	4293      	cmp	r3, r2
 8005832:	d104      	bne.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005834:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005836:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800583e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005840:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005842:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005846:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40000400 	.word	0x40000400

08005858 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005858:	4770      	bx	lr

0800585a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800585c:	4770      	bx	lr

0800585e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	e852 3f00 	ldrex	r3, [r2]
 8005864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800586c:	6802      	ldr	r2, [r0, #0]
 800586e:	2900      	cmp	r1, #0
 8005870:	d1f5      	bne.n	800585e <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	f102 0308 	add.w	r3, r2, #8
 8005876:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	f102 0c08 	add.w	ip, r2, #8
 8005882:	e84c 3100 	strex	r1, r3, [ip]
 8005886:	2900      	cmp	r1, #0
 8005888:	d1f3      	bne.n	8005872 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005894:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	e842 3100 	strex	r1, r3, [r2]
 800589c:	2900      	cmp	r1, #0
 800589e:	d1f7      	bne.n	8005890 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a0:	2320      	movs	r3, #32
 80058a2:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	2300      	movs	r3, #0
 80058a8:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058aa:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80058ac:	4770      	bx	lr

080058ae <HAL_UART_Abort>:
{
 80058ae:	b510      	push	{r4, lr}
 80058b0:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80058b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	e852 3f00 	ldrex	r3, [r2]
 80058b8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	2900      	cmp	r1, #0
 80058c4:	d1f5      	bne.n	80058b2 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	f103 0208 	add.w	r2, r3, #8
 80058ca:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	f103 0008 	add.w	r0, r3, #8
 80058d6:	e840 2100 	strex	r1, r2, [r0]
 80058da:	2900      	cmp	r1, #0
 80058dc:	d1f3      	bne.n	80058c6 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80058e0:	2a01      	cmp	r2, #1
 80058e2:	d107      	bne.n	80058f4 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80058e8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	e843 2100 	strex	r1, r2, [r3]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	d1f7      	bne.n	80058e4 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	0612      	lsls	r2, r2, #24
 80058f8:	d51b      	bpl.n	8005932 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	f103 0208 	add.w	r2, r3, #8
 80058fe:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005902:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	f103 0008 	add.w	r0, r3, #8
 800590a:	e840 2100 	strex	r1, r2, [r0]
 800590e:	2900      	cmp	r1, #0
 8005910:	d1f3      	bne.n	80058fa <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8005912:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005914:	b168      	cbz	r0, 8005932 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8005916:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005918:	f7fe fdbb 	bl	8004492 <HAL_DMA_Abort>
 800591c:	b148      	cbz	r0, 8005932 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800591e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005920:	f7fe fe1c 	bl	800455c <HAL_DMA_GetError>
 8005924:	2820      	cmp	r0, #32
 8005926:	d104      	bne.n	8005932 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005928:	2310      	movs	r3, #16
 800592a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800592e:	2003      	movs	r0, #3
}
 8005930:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	6893      	ldr	r3, [r2, #8]
 8005936:	065b      	lsls	r3, r3, #25
 8005938:	d516      	bpl.n	8005968 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	f102 0308 	add.w	r3, r2, #8
 800593e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	f102 0008 	add.w	r0, r2, #8
 800594a:	e840 3100 	strex	r1, r3, [r0]
 800594e:	2900      	cmp	r1, #0
 8005950:	d1f3      	bne.n	800593a <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8005952:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005954:	b140      	cbz	r0, 8005968 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8005956:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005958:	f7fe fd9b 	bl	8004492 <HAL_DMA_Abort>
 800595c:	b120      	cbz	r0, 8005968 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800595e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005960:	f7fe fdfc 	bl	800455c <HAL_DMA_GetError>
 8005964:	2820      	cmp	r0, #32
 8005966:	d0df      	beq.n	8005928 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005968:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 800596a:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800596c:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 800596e:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8005972:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005976:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	f042 0208 	orr.w	r2, r2, #8
 800597e:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8005980:	2320      	movs	r3, #32
 8005982:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 800598e:	e7cf      	b.n	8005930 <HAL_UART_Abort+0x82>

08005990 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005990:	4770      	bx	lr

08005992 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005992:	4770      	bx	lr

08005994 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005994:	4770      	bx	lr

08005996 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005996:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005998:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800599a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800599c:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 80059a0:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059a2:	689c      	ldr	r4, [r3, #8]
 80059a4:	0624      	lsls	r4, r4, #24
 80059a6:	d50e      	bpl.n	80059c6 <UART_DMAError+0x30>
 80059a8:	2a21      	cmp	r2, #33	@ 0x21
 80059aa:	d10c      	bne.n	80059c6 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059b6:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	e843 2400 	strex	r4, r2, [r3]
 80059be:	2c00      	cmp	r4, #0
 80059c0:	d1f7      	bne.n	80059b2 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 80059c2:	2220      	movs	r2, #32
 80059c4:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	065b      	lsls	r3, r3, #25
 80059ca:	d506      	bpl.n	80059da <UART_DMAError+0x44>
 80059cc:	2922      	cmp	r1, #34	@ 0x22
 80059ce:	d104      	bne.n	80059da <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80059d6:	f7ff ff42 	bl	800585e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059da:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80059de:	f043 0310 	orr.w	r3, r3, #16
 80059e2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e6:	f7ff ffd5 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ea:	bd10      	pop	{r4, pc}

080059ec <HAL_UARTEx_RxEventCallback>:
}
 80059ec:	4770      	bx	lr

080059ee <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059ee:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80059f0:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80059f2:	2301      	movs	r3, #1
 80059f4:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059fc:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005a00:	0849      	lsrs	r1, r1, #1
 8005a02:	f7ff fff3 	bl	80059ec <HAL_UARTEx_RxEventCallback>
}
 8005a06:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8005a08:	f7ff ffc3 	bl	8005992 <HAL_UART_RxHalfCpltCallback>
}
 8005a0c:	e7fb      	b.n	8005a06 <UART_DMARxHalfCplt+0x18>

08005a0e <UART_DMAReceiveCplt>:
{
 8005a0e:	b508      	push	{r3, lr}
 8005a10:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a12:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d032      	beq.n	8005a80 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	e852 3f00 	ldrex	r3, [r2]
 8005a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005a2e:	6803      	ldr	r3, [r0, #0]
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d1f5      	bne.n	8005a20 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	f103 0208 	add.w	r2, r3, #8
 8005a38:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	f103 0c08 	add.w	ip, r3, #8
 8005a44:	e84c 2100 	strex	r1, r2, [ip]
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	d1f3      	bne.n	8005a34 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	f103 0208 	add.w	r2, r3, #8
 8005a50:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	f103 0c08 	add.w	ip, r3, #8
 8005a5c:	e84c 2100 	strex	r1, r2, [ip]
 8005a60:	2900      	cmp	r1, #0
 8005a62:	d1f3      	bne.n	8005a4c <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6a:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005a6c:	2a01      	cmp	r2, #1
 8005a6e:	d107      	bne.n	8005a80 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	e843 2100 	strex	r1, r2, [r3]
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	d1f7      	bne.n	8005a70 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a80:	2300      	movs	r3, #0
 8005a82:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d104      	bne.n	8005a94 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005a8e:	f7ff ffad 	bl	80059ec <HAL_UARTEx_RxEventCallback>
}
 8005a92:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005a94:	f7ff ff7c 	bl	8005990 <HAL_UART_RxCpltCallback>
}
 8005a98:	e7fb      	b.n	8005a92 <UART_DMAReceiveCplt+0x84>
	...

08005a9c <UART_SetConfig>:
{
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa0:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa4:	6925      	ldr	r5, [r4, #16]
 8005aa6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aaa:	432a      	orrs	r2, r5
 8005aac:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aae:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ab4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aba:	430a      	orrs	r2, r1
 8005abc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005ac2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005acc:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ace:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005ad4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ada:	4a56      	ldr	r2, [pc, #344]	@ (8005c34 <UART_SetConfig+0x198>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d112      	bne.n	8005b06 <UART_SetConfig+0x6a>
 8005ae0:	4b55      	ldr	r3, [pc, #340]	@ (8005c38 <UART_SetConfig+0x19c>)
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	f000 8091 	beq.w	8005c10 <UART_SetConfig+0x174>
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d022      	beq.n	8005b38 <UART_SetConfig+0x9c>
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	f040 8092 	bne.w	8005c1c <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005afc:	f040 8085 	bne.w	8005c0a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005b00:	f7ff f85c 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
        break;
 8005b04:	e06b      	b.n	8005bde <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b06:	4a4d      	ldr	r2, [pc, #308]	@ (8005c3c <UART_SetConfig+0x1a0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d12e      	bne.n	8005b6a <UART_SetConfig+0xce>
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8005c38 <UART_SetConfig+0x19c>)
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b18:	d07a      	beq.n	8005c10 <UART_SetConfig+0x174>
 8005b1a:	d80a      	bhi.n	8005b32 <UART_SetConfig+0x96>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8083 	beq.w	8005c28 <UART_SetConfig+0x18c>
 8005b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b26:	d0e7      	beq.n	8005af8 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8005b28:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005b2a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005b2c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b36:	d1f7      	bne.n	8005b28 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b38:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005b3c:	4840      	ldr	r0, [pc, #256]	@ (8005c40 <UART_SetConfig+0x1a4>)
 8005b3e:	d156      	bne.n	8005bee <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	0853      	lsrs	r3, r2, #1
 8005b44:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005b48:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b4c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005b50:	f1a3 0110 	sub.w	r1, r3, #16
 8005b54:	4291      	cmp	r1, r2
 8005b56:	d8e7      	bhi.n	8005b28 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b58:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005b5c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b5e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b60:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
 8005b68:	e03b      	b.n	8005be2 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6a:	4a36      	ldr	r2, [pc, #216]	@ (8005c44 <UART_SetConfig+0x1a8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10f      	bne.n	8005b90 <UART_SetConfig+0xf4>
 8005b70:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <UART_SetConfig+0x19c>)
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005b78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b7c:	d048      	beq.n	8005c10 <UART_SetConfig+0x174>
 8005b7e:	d804      	bhi.n	8005b8a <UART_SetConfig+0xee>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d051      	beq.n	8005c28 <UART_SetConfig+0x18c>
 8005b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b88:	e7cd      	b.n	8005b26 <UART_SetConfig+0x8a>
 8005b8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005b8e:	e7d2      	b.n	8005b36 <UART_SetConfig+0x9a>
 8005b90:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <UART_SetConfig+0x1ac>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10f      	bne.n	8005bb6 <UART_SetConfig+0x11a>
 8005b96:	4b28      	ldr	r3, [pc, #160]	@ (8005c38 <UART_SetConfig+0x19c>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ba2:	d035      	beq.n	8005c10 <UART_SetConfig+0x174>
 8005ba4:	d804      	bhi.n	8005bb0 <UART_SetConfig+0x114>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d03e      	beq.n	8005c28 <UART_SetConfig+0x18c>
 8005baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bae:	e7ba      	b.n	8005b26 <UART_SetConfig+0x8a>
 8005bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bb4:	e7bf      	b.n	8005b36 <UART_SetConfig+0x9a>
 8005bb6:	4a25      	ldr	r2, [pc, #148]	@ (8005c4c <UART_SetConfig+0x1b0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d1b5      	bne.n	8005b28 <UART_SetConfig+0x8c>
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <UART_SetConfig+0x19c>)
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bc8:	d022      	beq.n	8005c10 <UART_SetConfig+0x174>
 8005bca:	d803      	bhi.n	8005bd4 <UART_SetConfig+0x138>
 8005bcc:	b363      	cbz	r3, 8005c28 <UART_SetConfig+0x18c>
 8005bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bd2:	e7a8      	b.n	8005b26 <UART_SetConfig+0x8a>
 8005bd4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005bd8:	e7ad      	b.n	8005b36 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bda:	f7ff f8d3 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d1ae      	bne.n	8005b40 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8005be2:	2000      	movs	r0, #0
 8005be4:	e7a1      	b.n	8005b2a <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7ff f8b5 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d0f9      	beq.n	8005be2 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bee:	6862      	ldr	r2, [r4, #4]
 8005bf0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005bf4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005bfc:	f1a3 0110 	sub.w	r1, r3, #16
 8005c00:	4291      	cmp	r1, r2
 8005c02:	d891      	bhi.n	8005b28 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c04:	6822      	ldr	r2, [r4, #0]
 8005c06:	60d3      	str	r3, [r2, #12]
 8005c08:	e7eb      	b.n	8005be2 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe ffd7 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
        break;
 8005c0e:	e7ec      	b.n	8005bea <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005c14:	d094      	beq.n	8005b40 <UART_SetConfig+0xa4>
 8005c16:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005c1a:	e7e8      	b.n	8005bee <UART_SetConfig+0x152>
 8005c1c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005c20:	d0db      	beq.n	8005bda <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c22:	f7ff f8af 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
        break;
 8005c26:	e7e0      	b.n	8005bea <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c28:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005c2c:	d1db      	bne.n	8005be6 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2e:	f7ff f891 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
        break;
 8005c32:	e7d4      	b.n	8005bde <UART_SetConfig+0x142>
 8005c34:	40013800 	.word	0x40013800
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40004400 	.word	0x40004400
 8005c40:	007a1200 	.word	0x007a1200
 8005c44:	40004800 	.word	0x40004800
 8005c48:	40004c00 	.word	0x40004c00
 8005c4c:	40005000 	.word	0x40005000

08005c50 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005c52:	071a      	lsls	r2, r3, #28
{
 8005c54:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c56:	d506      	bpl.n	8005c66 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005c5c:	684a      	ldr	r2, [r1, #4]
 8005c5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c62:	4322      	orrs	r2, r4
 8005c64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c66:	07dc      	lsls	r4, r3, #31
 8005c68:	d506      	bpl.n	8005c78 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6a:	6801      	ldr	r1, [r0, #0]
 8005c6c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005c6e:	684a      	ldr	r2, [r1, #4]
 8005c70:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005c74:	4322      	orrs	r2, r4
 8005c76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c78:	0799      	lsls	r1, r3, #30
 8005c7a:	d506      	bpl.n	8005c8a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7c:	6801      	ldr	r1, [r0, #0]
 8005c7e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005c80:	684a      	ldr	r2, [r1, #4]
 8005c82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005c86:	4322      	orrs	r2, r4
 8005c88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c8a:	075a      	lsls	r2, r3, #29
 8005c8c:	d506      	bpl.n	8005c9c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c8e:	6801      	ldr	r1, [r0, #0]
 8005c90:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005c92:	684a      	ldr	r2, [r1, #4]
 8005c94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c98:	4322      	orrs	r2, r4
 8005c9a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c9c:	06dc      	lsls	r4, r3, #27
 8005c9e:	d506      	bpl.n	8005cae <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ca0:	6801      	ldr	r1, [r0, #0]
 8005ca2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005caa:	4322      	orrs	r2, r4
 8005cac:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cae:	0699      	lsls	r1, r3, #26
 8005cb0:	d506      	bpl.n	8005cc0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cb2:	6801      	ldr	r1, [r0, #0]
 8005cb4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005cb6:	688a      	ldr	r2, [r1, #8]
 8005cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cbc:	4322      	orrs	r2, r4
 8005cbe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cc0:	065a      	lsls	r2, r3, #25
 8005cc2:	d50f      	bpl.n	8005ce4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc4:	6801      	ldr	r1, [r0, #0]
 8005cc6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005cc8:	684a      	ldr	r2, [r1, #4]
 8005cca:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005cce:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cd4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cd6:	d105      	bne.n	8005ce4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd8:	684a      	ldr	r2, [r1, #4]
 8005cda:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005cdc:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005ce0:	4322      	orrs	r2, r4
 8005ce2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce4:	061b      	lsls	r3, r3, #24
 8005ce6:	d506      	bpl.n	8005cf6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ce8:	6802      	ldr	r2, [r0, #0]
 8005cea:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005cec:	6853      	ldr	r3, [r2, #4]
 8005cee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	6053      	str	r3, [r2, #4]
}
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <UART_WaitOnFlagUntilTimeout>:
{
 8005cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	4617      	mov	r7, r2
 8005d06:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	69d3      	ldr	r3, [r2, #28]
 8005d0c:	ea35 0303 	bics.w	r3, r5, r3
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	42bb      	cmp	r3, r7
 8005d18:	d001      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e022      	b.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005d1e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d22:	d0f2      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d24:	f7fd fda0 	bl	8003868 <HAL_GetTick>
 8005d28:	eba0 0008 	sub.w	r0, r0, r8
 8005d2c:	4548      	cmp	r0, r9
 8005d2e:	d829      	bhi.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x8c>
 8005d30:	f1b9 0f00 	cmp.w	r9, #0
 8005d34:	d026      	beq.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d36:	6821      	ldr	r1, [r4, #0]
 8005d38:	680b      	ldr	r3, [r1, #0]
 8005d3a:	075a      	lsls	r2, r3, #29
 8005d3c:	d5e4      	bpl.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x10>
 8005d3e:	2d80      	cmp	r5, #128	@ 0x80
 8005d40:	d0e2      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x10>
 8005d42:	2d40      	cmp	r5, #64	@ 0x40
 8005d44:	d0e0      	beq.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d46:	69ce      	ldr	r6, [r1, #28]
 8005d48:	f016 0608 	ands.w	r6, r6, #8
 8005d4c:	d00c      	beq.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d4e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8005d50:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d52:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005d54:	f7ff fd83 	bl	800585e <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005d58:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d5a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8005d5e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8005d62:	2001      	movs	r0, #1
}
 8005d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d68:	69cb      	ldr	r3, [r1, #28]
 8005d6a:	051b      	lsls	r3, r3, #20
 8005d6c:	d5cc      	bpl.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d72:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fd72 	bl	800585e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d7a:	2320      	movs	r3, #32
 8005d7c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8005d80:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8005d84:	2003      	movs	r0, #3
 8005d86:	e7ed      	b.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x6c>

08005d88 <HAL_UART_Transmit>:
{
 8005d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005d90:	2b20      	cmp	r3, #32
{
 8005d92:	4604      	mov	r4, r0
 8005d94:	460e      	mov	r6, r1
 8005d96:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d98:	d143      	bne.n	8005e22 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8005d9a:	2900      	cmp	r1, #0
 8005d9c:	d043      	beq.n	8005e26 <HAL_UART_Transmit+0x9e>
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	d041      	beq.n	8005e26 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	2500      	movs	r5, #0
 8005da6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005daa:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005dac:	f7fd fd5c 	bl	8003868 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005db2:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8005dba:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8005dbc:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	d103      	bne.n	8005dca <HAL_UART_Transmit+0x42>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	b90b      	cbnz	r3, 8005dca <HAL_UART_Transmit+0x42>
 8005dc6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005dc8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005dca:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005dd2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd4:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005dd6:	b93a      	cbnz	r2, 8005de8 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd8:	2140      	movs	r1, #64	@ 0x40
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff8c 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005de0:	2320      	movs	r3, #32
 8005de2:	b940      	cbnz	r0, 8005df6 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005de4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005de6:	e008      	b.n	8005dfa <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	@ 0x80
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff ff83 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005df2:	b128      	cbz	r0, 8005e00 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8005df4:	2320      	movs	r3, #32
 8005df6:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005df8:	2003      	movs	r0, #3
}
 8005dfa:	b003      	add	sp, #12
 8005dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e00:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005e02:	b95e      	cbnz	r6, 8005e1c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e04:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e0c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005e0e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005e12:	3a01      	subs	r2, #1
 8005e14:	b292      	uxth	r2, r2
 8005e16:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8005e1a:	e7d6      	b.n	8005dca <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e1c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005e20:	e7f4      	b.n	8005e0c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005e22:	2002      	movs	r0, #2
 8005e24:	e7e9      	b.n	8005dfa <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7e7      	b.n	8005dfa <HAL_UART_Transmit+0x72>

08005e2a <UART_CheckIdleState>:
{
 8005e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e2c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2e:	2600      	movs	r6, #0
 8005e30:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8005e34:	f7fd fd18 	bl	8003868 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005e3e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e40:	d51b      	bpl.n	8005e7a <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff ff51 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005e56:	b180      	cbz	r0, 8005e7a <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e58:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	e852 3f00 	ldrex	r3, [r2]
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	e842 3100 	strex	r1, r3, [r2]
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d1f6      	bne.n	8005e58 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005e6e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005e70:	2300      	movs	r3, #0
 8005e72:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005e76:	b002      	add	sp, #8
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	075b      	lsls	r3, r3, #29
 8005e80:	d524      	bpl.n	8005ecc <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	462b      	mov	r3, r5
 8005e8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff ff31 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005e96:	b1c8      	cbz	r0, 8005ecc <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e98:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	e852 3f00 	ldrex	r3, [r2]
 8005e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	2900      	cmp	r1, #0
 8005eaa:	d1f5      	bne.n	8005e98 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	f102 0308 	add.w	r3, r2, #8
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	f102 0008 	add.w	r0, r2, #8
 8005ebc:	e840 3100 	strex	r1, r3, [r0]
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d1f3      	bne.n	8005eac <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005eca:	e7d0      	b.n	8005e6e <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8005ecc:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ed2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed8:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005eda:	e7c9      	b.n	8005e70 <UART_CheckIdleState+0x46>

08005edc <HAL_UART_Init>:
{
 8005edc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	b340      	cbz	r0, 8005f34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005ee4:	b91b      	cbnz	r3, 8005eee <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005ee6:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005eea:	f7fd fa5f 	bl	80033ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005eee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005ef0:	2324      	movs	r3, #36	@ 0x24
 8005ef2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005efc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005efe:	b113      	cbz	r3, 8005f06 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7ff fea5 	bl	8005c50 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f06:	4620      	mov	r0, r4
 8005f08:	f7ff fdc8 	bl	8005a9c <UART_SetConfig>
 8005f0c:	2801      	cmp	r0, #1
 8005f0e:	d011      	beq.n	8005f34 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005f28:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005f2a:	601a      	str	r2, [r3, #0]
}
 8005f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005f30:	f7ff bf7b 	b.w	8005e2a <UART_CheckIdleState>
}
 8005f34:	2001      	movs	r0, #1
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <UART_Start_Receive_DMA>:
{
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8005f3e:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8005f44:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f4a:	2022      	movs	r0, #34	@ 0x22
 8005f4c:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8005f50:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f52:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8005f54:	b1a0      	cbz	r0, 8005f80 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f56:	4e1c      	ldr	r6, [pc, #112]	@ (8005fc8 <UART_Start_Receive_DMA+0x90>)
 8005f58:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f5a:	4e1c      	ldr	r6, [pc, #112]	@ (8005fcc <UART_Start_Receive_DMA+0x94>)
 8005f5c:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f5e:	4e1c      	ldr	r6, [pc, #112]	@ (8005fd0 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005f60:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005f64:	460a      	mov	r2, r1
 8005f66:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8005f6a:	f7fe fa57 	bl	800441c <HAL_DMA_Start_IT>
 8005f6e:	b138      	cbz	r0, 8005f80 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f70:	2310      	movs	r3, #16
 8005f72:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8005f76:	2320      	movs	r3, #32
 8005f78:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8005f7c:	2001      	movs	r0, #1
}
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f80:	6922      	ldr	r2, [r4, #16]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	b13a      	cbz	r2, 8005f96 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	e843 2100 	strex	r1, r2, [r3]
 8005f92:	2900      	cmp	r1, #0
 8005f94:	d1f7      	bne.n	8005f86 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	f103 0208 	add.w	r2, r3, #8
 8005f9a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	f103 0008 	add.w	r0, r3, #8
 8005fa6:	e840 2100 	strex	r1, r2, [r0]
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d1f3      	bne.n	8005f96 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	f103 0208 	add.w	r2, r3, #8
 8005fb2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f103 0108 	add.w	r1, r3, #8
 8005fbe:	e841 2000 	strex	r0, r2, [r1]
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d1f3      	bne.n	8005fae <UART_Start_Receive_DMA+0x76>
 8005fc6:	e7da      	b.n	8005f7e <UART_Start_Receive_DMA+0x46>
 8005fc8:	08005a0f 	.word	0x08005a0f
 8005fcc:	080059ef 	.word	0x080059ef
 8005fd0:	08005997 	.word	0x08005997

08005fd4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fd4:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005fd8:	2b20      	cmp	r3, #32
{
 8005fda:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fdc:	d112      	bne.n	8006004 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8005fde:	b1a1      	cbz	r1, 800600a <HAL_UART_Receive_DMA+0x36>
 8005fe0:	b19a      	cbz	r2, 800600a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe4:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe6:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	d507      	bpl.n	8005ffe <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	e844 3500 	strex	r5, r3, [r4]
 8005ffa:	2d00      	cmp	r5, #0
 8005ffc:	d1f7      	bne.n	8005fee <HAL_UART_Receive_DMA+0x1a>
}
 8005ffe:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006000:	f7ff bf9a 	b.w	8005f38 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8006004:	2002      	movs	r0, #2
}
 8006006:	bc30      	pop	{r4, r5}
 8006008:	4770      	bx	lr
      return HAL_ERROR;
 800600a:	2001      	movs	r0, #1
 800600c:	e7fb      	b.n	8006006 <HAL_UART_Receive_DMA+0x32>
	...

08006010 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006014:	b113      	cbz	r3, 800601c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006016:	f06f 0005 	mvn.w	r0, #5
 800601a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800601c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f8      	bne.n	8006016 <osKernelInitialize+0x6>
 8006024:	4b07      	ldr	r3, [pc, #28]	@ (8006044 <osKernelInitialize+0x34>)
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	2802      	cmp	r0, #2
 800602a:	d106      	bne.n	800603a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800602c:	f3ef 8311 	mrs	r3, BASEPRI
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f0      	bne.n	8006016 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006038:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800603a:	2800      	cmp	r0, #0
 800603c:	d1fa      	bne.n	8006034 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006042:	4770      	bx	lr
 8006044:	20000f78 	.word	0x20000f78

08006048 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006048:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800604e:	b113      	cbz	r3, 8006056 <osKernelStart+0xe>
    stat = osErrorISR;
 8006050:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006054:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800605a:	2c00      	cmp	r4, #0
 800605c:	d1f8      	bne.n	8006050 <osKernelStart+0x8>
 800605e:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <osKernelStart+0x3c>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	2a02      	cmp	r2, #2
 8006064:	d106      	bne.n	8006074 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <osKernelStart+0x8>
      stat = osError;
 800606e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006072:	e7ef      	b.n	8006054 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8006074:	2a01      	cmp	r2, #1
 8006076:	d1fa      	bne.n	800606e <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8006078:	2202      	movs	r2, #2
 800607a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800607c:	f000 fe30 	bl	8006ce0 <vTaskStartScheduler>
      stat = osOK;
 8006080:	4620      	mov	r0, r4
 8006082:	e7e7      	b.n	8006054 <osKernelStart+0xc>
 8006084:	20000f78 	.word	0x20000f78

08006088 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	b087      	sub	sp, #28
 800608c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800608e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006090:	460b      	mov	r3, r1
  hTask = NULL;
 8006092:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006094:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006098:	bb52      	cbnz	r2, 80060f0 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609a:	f3ef 8210 	mrs	r2, PRIMASK
 800609e:	bb3a      	cbnz	r2, 80060f0 <osThreadNew+0x68>
 80060a0:	4a26      	ldr	r2, [pc, #152]	@ (800613c <osThreadNew+0xb4>)
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	2a02      	cmp	r2, #2
 80060a6:	d102      	bne.n	80060ae <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060a8:	f3ef 8211 	mrs	r2, BASEPRI
 80060ac:	bb02      	cbnz	r2, 80060f0 <osThreadNew+0x68>
 80060ae:	b1f8      	cbz	r0, 80060f0 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80060b0:	2200      	movs	r2, #0
 80060b2:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	d030      	beq.n	800611c <osThreadNew+0x94>
      if (attr->name != NULL) {
 80060ba:	6821      	ldr	r1, [r4, #0]
 80060bc:	b909      	cbnz	r1, 80060c2 <osThreadNew+0x3a>
    name  = &empty;
 80060be:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80060c2:	69a5      	ldr	r5, [r4, #24]
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	bf08      	it	eq
 80060c8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060ca:	1e6a      	subs	r2, r5, #1
 80060cc:	2a37      	cmp	r2, #55	@ 0x37
 80060ce:	46ac      	mov	ip, r5
 80060d0:	d82a      	bhi.n	8006128 <osThreadNew+0xa0>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	07d2      	lsls	r2, r2, #31
 80060d6:	d427      	bmi.n	8006128 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80060d8:	6966      	ldr	r6, [r4, #20]
 80060da:	b166      	cbz	r6, 80060f6 <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060dc:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060de:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80060e2:	b157      	cbz	r7, 80060fa <osThreadNew+0x72>
 80060e4:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 80060e8:	d902      	bls.n	80060f0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ea:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060ec:	b104      	cbz	r4, 80060f0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ee:	b9ee      	cbnz	r6, 800612c <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060f0:	9805      	ldr	r0, [sp, #20]
}
 80060f2:	b007      	add	sp, #28
 80060f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80060f6:	2240      	movs	r2, #64	@ 0x40
 80060f8:	e7f1      	b.n	80060de <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060fa:	f1be 0f00 	cmp.w	lr, #0
 80060fe:	d1f7      	bne.n	80060f0 <osThreadNew+0x68>
      if (mem == 0) {
 8006100:	6924      	ldr	r4, [r4, #16]
 8006102:	2c00      	cmp	r4, #0
 8006104:	d1f4      	bne.n	80060f0 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006106:	ac05      	add	r4, sp, #20
 8006108:	e9cd c400 	strd	ip, r4, [sp]
 800610c:	b292      	uxth	r2, r2
 800610e:	f000 fdb9 	bl	8006c84 <xTaskCreate>
 8006112:	2801      	cmp	r0, #1
          hTask = NULL;
 8006114:	bf1c      	itt	ne
 8006116:	2300      	movne	r3, #0
 8006118:	9305      	strne	r3, [sp, #20]
 800611a:	e7e9      	b.n	80060f0 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 800611c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006120:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 8006122:	f10d 0113 	add.w	r1, sp, #19
 8006126:	e7ee      	b.n	8006106 <osThreadNew+0x7e>
        return (NULL);
 8006128:	2000      	movs	r0, #0
 800612a:	e7e2      	b.n	80060f2 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800612c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006130:	9500      	str	r5, [sp, #0]
 8006132:	f000 fd70 	bl	8006c16 <xTaskCreateStatic>
 8006136:	9005      	str	r0, [sp, #20]
 8006138:	e7da      	b.n	80060f0 <osThreadNew+0x68>
 800613a:	bf00      	nop
 800613c:	20000f78 	.word	0x20000f78

08006140 <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006140:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8006144:	b963      	cbnz	r3, 8006160 <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006146:	f3ef 8310 	mrs	r3, PRIMASK
 800614a:	b94b      	cbnz	r3, 8006160 <osThreadGetStackSpace+0x20>
 800614c:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <osThreadGetStackSpace+0x24>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d102      	bne.n	800615a <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006154:	f3ef 8311 	mrs	r3, BASEPRI
 8006158:	b913      	cbnz	r3, 8006160 <osThreadGetStackSpace+0x20>
 800615a:	b108      	cbz	r0, 8006160 <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 800615c:	f001 b842 	b.w	80071e4 <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr
 8006164:	20000f78 	.word	0x20000f78

08006168 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006168:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800616e:	b113      	cbz	r3, 8006176 <osDelay+0xe>
    stat = osErrorISR;
 8006170:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006174:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006176:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f8      	bne.n	8006170 <osDelay+0x8>
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <osDelay+0x30>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d103      	bne.n	800618e <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <osDelay+0x8>
    if (ticks != 0U) {
 800618e:	b108      	cbz	r0, 8006194 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006190:	f000 ff04 	bl	8006f9c <vTaskDelay>
    stat = osOK;
 8006194:	2000      	movs	r0, #0
  return (stat);
 8006196:	e7ed      	b.n	8006174 <osDelay+0xc>
 8006198:	20000f78 	.word	0x20000f78

0800619c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800619c:	b513      	push	{r0, r1, r4, lr}
 800619e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80061a4:	b123      	cbz	r3, 80061b0 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061a6:	b9e0      	cbnz	r0, 80061e2 <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 80061a8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80061ac:	b002      	add	sp, #8
 80061ae:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f6      	bne.n	80061a6 <osMessageQueueGet+0xa>
 80061b8:	4b18      	ldr	r3, [pc, #96]	@ (800621c <osMessageQueueGet+0x80>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d103      	bne.n	80061c8 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061c0:	f3ef 8311 	mrs	r3, BASEPRI
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ee      	bne.n	80061a6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0ed      	beq.n	80061a8 <osMessageQueueGet+0xc>
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d0eb      	beq.n	80061a8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061d0:	4622      	mov	r2, r4
 80061d2:	f000 faa3 	bl	800671c <xQueueReceive>
 80061d6:	2801      	cmp	r0, #1
 80061d8:	d012      	beq.n	8006200 <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 80061da:	b164      	cbz	r4, 80061f6 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80061dc:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80061e0:	e7e4      	b.n	80061ac <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d0e0      	beq.n	80061a8 <osMessageQueueGet+0xc>
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	d1de      	bne.n	80061a8 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061ea:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80061ec:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061ee:	f000 fb33 	bl	8006858 <xQueueReceiveFromISR>
 80061f2:	2801      	cmp	r0, #1
 80061f4:	d002      	beq.n	80061fc <osMessageQueueGet+0x60>
        stat = osErrorResource;
 80061f6:	f06f 0002 	mvn.w	r0, #2
 80061fa:	e7d7      	b.n	80061ac <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80061fc:	9b01      	ldr	r3, [sp, #4]
 80061fe:	b90b      	cbnz	r3, 8006204 <osMessageQueueGet+0x68>
  stat = osOK;
 8006200:	2000      	movs	r0, #0
 8006202:	e7d3      	b.n	80061ac <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8006204:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	e7f2      	b.n	8006200 <osMessageQueueGet+0x64>
 800621a:	bf00      	nop
 800621c:	20000f78 	.word	0x20000f78

08006220 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006220:	4b03      	ldr	r3, [pc, #12]	@ (8006230 <vApplicationGetIdleTaskMemory+0x10>)
 8006222:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006224:	4b03      	ldr	r3, [pc, #12]	@ (8006234 <vApplicationGetIdleTaskMemory+0x14>)
 8006226:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006228:	2340      	movs	r3, #64	@ 0x40
 800622a:	6013      	str	r3, [r2, #0]
}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000f1c 	.word	0x20000f1c
 8006234:	20000e1c 	.word	0x20000e1c

08006238 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <vApplicationGetTimerTaskMemory+0x10>)
 800623a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800623c:	4b03      	ldr	r3, [pc, #12]	@ (800624c <vApplicationGetTimerTaskMemory+0x14>)
 800623e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006240:	2380      	movs	r3, #128	@ 0x80
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000dc0 	.word	0x20000dc0
 800624c:	20000bc0 	.word	0x20000bc0

08006250 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006250:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006254:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006258:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800625c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800625e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006264:	4770      	bx	lr

08006266 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800626a:	4770      	bx	lr

0800626c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800626c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800626e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006274:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006276:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006278:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800627a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800627c:	3301      	adds	r3, #1
 800627e:	6003      	str	r3, [r0, #0]
}
 8006280:	4770      	bx	lr

08006282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006284:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006286:	1c63      	adds	r3, r4, #1
 8006288:	d10a      	bne.n	80062a0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800628a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006290:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006292:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006294:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006296:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006298:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800629a:	3301      	adds	r3, #1
 800629c:	6003      	str	r3, [r0, #0]
}
 800629e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a0:	f100 0208 	add.w	r2, r0, #8
 80062a4:	4613      	mov	r3, r2
 80062a6:	6852      	ldr	r2, [r2, #4]
 80062a8:	6815      	ldr	r5, [r2, #0]
 80062aa:	42a5      	cmp	r5, r4
 80062ac:	d9fa      	bls.n	80062a4 <vListInsert+0x22>
 80062ae:	e7ed      	b.n	800628c <vListInsert+0xa>

080062b0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80062b4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062b6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062be:	bf08      	it	eq
 80062c0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80062c2:	2200      	movs	r2, #0
 80062c4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	3a01      	subs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062cc:	6818      	ldr	r0, [r3, #0]
}
 80062ce:	4770      	bx	lr

080062d0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062d0:	b510      	push	{r4, lr}
 80062d2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d4:	f001 fa2e 	bl	8007734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062d8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80062da:	f001 fa4b 	bl	8007774 <vPortExitCritical>

	return xReturn;
}
 80062de:	fab4 f084 	clz	r0, r4
 80062e2:	0940      	lsrs	r0, r0, #5
 80062e4:	bd10      	pop	{r4, pc}

080062e6 <prvCopyDataToQueue>:
{
 80062e6:	b570      	push	{r4, r5, r6, lr}
 80062e8:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ea:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ec:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80062ee:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062f0:	b942      	cbnz	r2, 8006304 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062f2:	6806      	ldr	r6, [r0, #0]
 80062f4:	b99e      	cbnz	r6, 800631e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80062f6:	6840      	ldr	r0, [r0, #4]
 80062f8:	f000 ff94 	bl	8007224 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80062fc:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062fe:	3501      	adds	r5, #1
 8006300:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006302:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006304:	b96e      	cbnz	r6, 8006322 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006306:	6880      	ldr	r0, [r0, #8]
 8006308:	f003 fc66 	bl	8009bd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006310:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006312:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006314:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006316:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006318:	bf24      	itt	cs
 800631a:	6823      	ldrcs	r3, [r4, #0]
 800631c:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800631e:	2000      	movs	r0, #0
 8006320:	e7ed      	b.n	80062fe <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006322:	68c0      	ldr	r0, [r0, #12]
 8006324:	f003 fc58 	bl	8009bd8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006328:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	4251      	negs	r1, r2
 800632e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006330:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006332:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006334:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006336:	bf3e      	ittt	cc
 8006338:	6863      	ldrcc	r3, [r4, #4]
 800633a:	185b      	addcc	r3, r3, r1
 800633c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800633e:	2e02      	cmp	r6, #2
 8006340:	d1ed      	bne.n	800631e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006342:	b10d      	cbz	r5, 8006348 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006344:	3d01      	subs	r5, #1
 8006346:	e7ea      	b.n	800631e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8006348:	4628      	mov	r0, r5
 800634a:	e7d8      	b.n	80062fe <prvCopyDataToQueue+0x18>

0800634c <prvCopyDataFromQueue>:
{
 800634c:	4603      	mov	r3, r0
 800634e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006352:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006354:	b16a      	cbz	r2, 8006372 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006356:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006358:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800635a:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800635c:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800635e:	bf28      	it	cs
 8006360:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006362:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006364:	bf28      	it	cs
 8006366:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006368:	68d9      	ldr	r1, [r3, #12]
}
 800636a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800636e:	f003 bc33 	b.w	8009bd8 <memcpy>
}
 8006372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006376:	4770      	bx	lr

08006378 <prvUnlockQueue>:
{
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800637c:	f001 f9da 	bl	8007734 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006380:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006384:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006388:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800638a:	2d00      	cmp	r5, #0
 800638c:	dc14      	bgt.n	80063b8 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800638e:	23ff      	movs	r3, #255	@ 0xff
 8006390:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006394:	f001 f9ee 	bl	8007774 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006398:	f001 f9cc 	bl	8007734 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800639c:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063a0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80063a4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	dc12      	bgt.n	80063d0 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80063aa:	23ff      	movs	r3, #255	@ 0xff
 80063ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80063b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80063b4:	f001 b9de 	b.w	8007774 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0e7      	beq.n	800638e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 fe82 	bl	80070c8 <xTaskRemoveFromEventList>
 80063c4:	b108      	cbz	r0, 80063ca <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80063c6:	f000 ff07 	bl	80071d8 <vTaskMissedYield>
			--cTxLock;
 80063ca:	3d01      	subs	r5, #1
 80063cc:	b26d      	sxtb	r5, r5
 80063ce:	e7dc      	b.n	800638a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0e9      	beq.n	80063aa <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 fe76 	bl	80070c8 <xTaskRemoveFromEventList>
 80063dc:	b108      	cbz	r0, 80063e2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80063de:	f000 fefb 	bl	80071d8 <vTaskMissedYield>
				--cRxLock;
 80063e2:	3d01      	subs	r5, #1
 80063e4:	b26d      	sxtb	r5, r5
 80063e6:	e7de      	b.n	80063a6 <prvUnlockQueue+0x2e>

080063e8 <xQueueGenericReset>:
{
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80063ec:	4604      	mov	r4, r0
 80063ee:	b940      	cbnz	r0, 8006402 <xQueueGenericReset+0x1a>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	e7fe      	b.n	8006400 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006402:	f001 f997 	bl	8007734 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006406:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800640a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800640c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800640e:	434b      	muls	r3, r1
 8006410:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006412:	1a5b      	subs	r3, r3, r1
 8006414:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006416:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8006418:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800641a:	2000      	movs	r0, #0
 800641c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800641e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006420:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006424:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006428:	b9a5      	cbnz	r5, 8006454 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	b173      	cbz	r3, 800644c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642e:	f104 0010 	add.w	r0, r4, #16
 8006432:	f000 fe49 	bl	80070c8 <xTaskRemoveFromEventList>
 8006436:	b148      	cbz	r0, 800644c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006438:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800643c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006440:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800644c:	f001 f992 	bl	8007774 <vPortExitCritical>
}
 8006450:	2001      	movs	r0, #1
 8006452:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006454:	f104 0010 	add.w	r0, r4, #16
 8006458:	f7ff fefa 	bl	8006250 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800645c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006460:	f7ff fef6 	bl	8006250 <vListInitialise>
 8006464:	e7f2      	b.n	800644c <xQueueGenericReset+0x64>

08006466 <xQueueGenericCreateStatic>:
	{
 8006466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006468:	460d      	mov	r5, r1
 800646a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800646c:	b940      	cbnz	r0, 8006480 <xQueueGenericCreateStatic+0x1a>
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	e7fe      	b.n	800647e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8006480:	b943      	cbnz	r3, 8006494 <xQueueGenericCreateStatic+0x2e>
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	e7fe      	b.n	8006492 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006494:	b14a      	cbz	r2, 80064aa <xQueueGenericCreateStatic+0x44>
 8006496:	b991      	cbnz	r1, 80064be <xQueueGenericCreateStatic+0x58>
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064aa:	b141      	cbz	r1, 80064be <xQueueGenericCreateStatic+0x58>
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064be:	2350      	movs	r3, #80	@ 0x50
 80064c0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	2b50      	cmp	r3, #80	@ 0x50
 80064c6:	d008      	beq.n	80064da <xQueueGenericCreateStatic+0x74>
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064da:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064dc:	2d00      	cmp	r5, #0
 80064de:	bf08      	it	eq
 80064e0:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80064e2:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064e6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80064ea:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff7b 	bl	80063e8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80064f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80064f6:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80064fa:	4620      	mov	r0, r4
 80064fc:	b003      	add	sp, #12
 80064fe:	bd30      	pop	{r4, r5, pc}

08006500 <xQueueGenericSend>:
{
 8006500:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006504:	460f      	mov	r7, r1
 8006506:	9201      	str	r2, [sp, #4]
 8006508:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800650a:	4604      	mov	r4, r0
 800650c:	b940      	cbnz	r0, 8006520 <xQueueGenericSend+0x20>
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	e7fe      	b.n	800651e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006520:	b951      	cbnz	r1, 8006538 <xQueueGenericSend+0x38>
 8006522:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006524:	b143      	cbz	r3, 8006538 <xQueueGenericSend+0x38>
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	e7fe      	b.n	8006536 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006538:	2e02      	cmp	r6, #2
 800653a:	d10b      	bne.n	8006554 <xQueueGenericSend+0x54>
 800653c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d008      	beq.n	8006554 <xQueueGenericSend+0x54>
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	e7fe      	b.n	8006552 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006554:	f000 fe56 	bl	8007204 <xTaskGetSchedulerState>
 8006558:	4605      	mov	r5, r0
 800655a:	b330      	cbz	r0, 80065aa <xQueueGenericSend+0xaa>
 800655c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800655e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006562:	f001 f8e7 	bl	8007734 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006566:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006568:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800656a:	429a      	cmp	r2, r3
 800656c:	d301      	bcc.n	8006572 <xQueueGenericSend+0x72>
 800656e:	2e02      	cmp	r6, #2
 8006570:	d127      	bne.n	80065c2 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006572:	4632      	mov	r2, r6
 8006574:	4639      	mov	r1, r7
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff feb5 	bl	80062e6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800657e:	b11b      	cbz	r3, 8006588 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006580:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006584:	f000 fda0 	bl	80070c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006588:	b148      	cbz	r0, 800659e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800658a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800659e:	f001 f8e9 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 80065a2:	2001      	movs	r0, #1
}
 80065a4:	b004      	add	sp, #16
 80065a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065aa:	9b01      	ldr	r3, [sp, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0d6      	beq.n	800655e <xQueueGenericSend+0x5e>
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	b91b      	cbnz	r3, 80065ce <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80065c6:	f001 f8d5 	bl	8007774 <vPortExitCritical>
					return errQUEUE_FULL;
 80065ca:	2000      	movs	r0, #0
 80065cc:	e7ea      	b.n	80065a4 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80065ce:	b915      	cbnz	r5, 80065d6 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065d0:	a802      	add	r0, sp, #8
 80065d2:	f000 fdb9 	bl	8007148 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80065d6:	f001 f8cd 	bl	8007774 <vPortExitCritical>
		vTaskSuspendAll();
 80065da:	f000 fbc7 	bl	8006d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065de:	f001 f8a9 	bl	8007734 <vPortEnterCritical>
 80065e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80065e6:	2bff      	cmp	r3, #255	@ 0xff
 80065e8:	bf08      	it	eq
 80065ea:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80065ee:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80065f2:	2bff      	cmp	r3, #255	@ 0xff
 80065f4:	bf08      	it	eq
 80065f6:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80065fa:	f001 f8bb 	bl	8007774 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065fe:	a901      	add	r1, sp, #4
 8006600:	a802      	add	r0, sp, #8
 8006602:	f000 fdad 	bl	8007160 <xTaskCheckForTimeOut>
 8006606:	bb38      	cbnz	r0, 8006658 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006608:	f001 f894 	bl	8007734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800660c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800660e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006610:	429a      	cmp	r2, r3
 8006612:	d10e      	bne.n	8006632 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006614:	f001 f8ae 	bl	8007774 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	f104 0010 	add.w	r0, r4, #16
 800661e:	f000 fd1b 	bl	8007058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006622:	4620      	mov	r0, r4
 8006624:	f7ff fea8 	bl	8006378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006628:	f000 fc44 	bl	8006eb4 <xTaskResumeAll>
 800662c:	b148      	cbz	r0, 8006642 <xQueueGenericSend+0x142>
 800662e:	2501      	movs	r5, #1
 8006630:	e797      	b.n	8006562 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8006632:	f001 f89f 	bl	8007774 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006636:	4620      	mov	r0, r4
 8006638:	f7ff fe9e 	bl	8006378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800663c:	f000 fc3a 	bl	8006eb4 <xTaskResumeAll>
 8006640:	e7f5      	b.n	800662e <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006642:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	e7ea      	b.n	800662e <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fe8d 	bl	8006378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800665e:	f000 fc29 	bl	8006eb4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006662:	e7b2      	b.n	80065ca <xQueueGenericSend+0xca>

08006664 <xQueueGenericSendFromISR>:
{
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	4689      	mov	r9, r1
 800666a:	4617      	mov	r7, r2
 800666c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800666e:	4604      	mov	r4, r0
 8006670:	b940      	cbnz	r0, 8006684 <xQueueGenericSendFromISR+0x20>
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	e7fe      	b.n	8006682 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006684:	b951      	cbnz	r1, 800669c <xQueueGenericSendFromISR+0x38>
 8006686:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006688:	b143      	cbz	r3, 800669c <xQueueGenericSendFromISR+0x38>
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	e7fe      	b.n	800669a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800669c:	2e02      	cmp	r6, #2
 800669e:	d10b      	bne.n	80066b8 <xQueueGenericSendFromISR+0x54>
 80066a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d008      	beq.n	80066b8 <xQueueGenericSendFromISR+0x54>
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	e7fe      	b.n	80066b6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066b8:	f001 f94e 	bl	8007958 <vPortValidateInterruptPriority>
	__asm volatile
 80066bc:	f3ef 8811 	mrs	r8, BASEPRI
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80066d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d301      	bcc.n	80066dc <xQueueGenericSendFromISR+0x78>
 80066d8:	2e02      	cmp	r6, #2
 80066da:	d11d      	bne.n	8006718 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80066dc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e0:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80066e2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e4:	4649      	mov	r1, r9
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff fdfd 	bl	80062e6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80066ec:	1c6b      	adds	r3, r5, #1
 80066ee:	d10e      	bne.n	800670e <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066f2:	b13b      	cbz	r3, 8006704 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80066f8:	f000 fce6 	bl	80070c8 <xTaskRemoveFromEventList>
 80066fc:	b110      	cbz	r0, 8006704 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80066fe:	b10f      	cbz	r7, 8006704 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8006704:	2001      	movs	r0, #1
	__asm volatile
 8006706:	f388 8811 	msr	BASEPRI, r8
}
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800670e:	3501      	adds	r5, #1
 8006710:	b26d      	sxtb	r5, r5
 8006712:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8006716:	e7f5      	b.n	8006704 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8006718:	2000      	movs	r0, #0
 800671a:	e7f4      	b.n	8006706 <xQueueGenericSendFromISR+0xa2>

0800671c <xQueueReceive>:
{
 800671c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006720:	460e      	mov	r6, r1
 8006722:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006724:	4604      	mov	r4, r0
 8006726:	b940      	cbnz	r0, 800673a <xQueueReceive+0x1e>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	e7fe      	b.n	8006738 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800673a:	b951      	cbnz	r1, 8006752 <xQueueReceive+0x36>
 800673c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800673e:	b143      	cbz	r3, 8006752 <xQueueReceive+0x36>
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	e7fe      	b.n	8006750 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006752:	f000 fd57 	bl	8007204 <xTaskGetSchedulerState>
 8006756:	4605      	mov	r5, r0
 8006758:	b318      	cbz	r0, 80067a2 <xQueueReceive+0x86>
 800675a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800675c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006760:	f000 ffe8 	bl	8007734 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006764:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006766:	b347      	cbz	r7, 80067ba <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006768:	4631      	mov	r1, r6
 800676a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800676c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800676e:	f7ff fded 	bl	800634c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006772:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	b173      	cbz	r3, 8006796 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006778:	f104 0010 	add.w	r0, r4, #16
 800677c:	f000 fca4 	bl	80070c8 <xTaskRemoveFromEventList>
 8006780:	b148      	cbz	r0, 8006796 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8006782:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800678a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006796:	f000 ffed 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 800679a:	2001      	movs	r0, #1
}
 800679c:	b004      	add	sp, #16
 800679e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0d9      	beq.n	800675c <xQueueReceive+0x40>
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	e7fe      	b.n	80067b8 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	b91b      	cbnz	r3, 80067c6 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80067be:	f000 ffd9 	bl	8007774 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80067c2:	2000      	movs	r0, #0
 80067c4:	e7ea      	b.n	800679c <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80067c6:	b915      	cbnz	r5, 80067ce <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c8:	a802      	add	r0, sp, #8
 80067ca:	f000 fcbd 	bl	8007148 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80067ce:	f000 ffd1 	bl	8007774 <vPortExitCritical>
		vTaskSuspendAll();
 80067d2:	f000 facb 	bl	8006d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067d6:	f000 ffad 	bl	8007734 <vPortEnterCritical>
 80067da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80067de:	2bff      	cmp	r3, #255	@ 0xff
 80067e0:	bf08      	it	eq
 80067e2:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80067e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80067ea:	2bff      	cmp	r3, #255	@ 0xff
 80067ec:	bf08      	it	eq
 80067ee:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80067f2:	f000 ffbf 	bl	8007774 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067f6:	a901      	add	r1, sp, #4
 80067f8:	a802      	add	r0, sp, #8
 80067fa:	f000 fcb1 	bl	8007160 <xTaskCheckForTimeOut>
 80067fe:	bb00      	cbnz	r0, 8006842 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff fd65 	bl	80062d0 <prvIsQueueEmpty>
 8006806:	b1b0      	cbz	r0, 8006836 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006808:	9901      	ldr	r1, [sp, #4]
 800680a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800680e:	f000 fc23 	bl	8007058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fdb0 	bl	8006378 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006818:	f000 fb4c 	bl	8006eb4 <xTaskResumeAll>
 800681c:	b948      	cbnz	r0, 8006832 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800681e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006826:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	2501      	movs	r5, #1
 8006834:	e794      	b.n	8006760 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff fd9e 	bl	8006378 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800683c:	f000 fb3a 	bl	8006eb4 <xTaskResumeAll>
 8006840:	e7f7      	b.n	8006832 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff fd98 	bl	8006378 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006848:	f000 fb34 	bl	8006eb4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff fd3f 	bl	80062d0 <prvIsQueueEmpty>
 8006852:	2800      	cmp	r0, #0
 8006854:	d0ed      	beq.n	8006832 <xQueueReceive+0x116>
 8006856:	e7b4      	b.n	80067c2 <xQueueReceive+0xa6>

08006858 <xQueueReceiveFromISR>:
{
 8006858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4689      	mov	r9, r1
 800685e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006860:	4604      	mov	r4, r0
 8006862:	b940      	cbnz	r0, 8006876 <xQueueReceiveFromISR+0x1e>
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	e7fe      	b.n	8006874 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006876:	b951      	cbnz	r1, 800688e <xQueueReceiveFromISR+0x36>
 8006878:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800687a:	b143      	cbz	r3, 800688e <xQueueReceiveFromISR+0x36>
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	e7fe      	b.n	800688c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800688e:	f001 f863 	bl	8007958 <vPortValidateInterruptPriority>
	__asm volatile
 8006892:	f3ef 8711 	mrs	r7, BASEPRI
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a8:	b30d      	cbz	r5, 80068ee <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80068aa:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ae:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80068b0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7ff fd4a 	bl	800634c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068b8:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80068ba:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068bc:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80068be:	d111      	bne.n	80068e4 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c0:	6923      	ldr	r3, [r4, #16]
 80068c2:	b153      	cbz	r3, 80068da <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c4:	f104 0010 	add.w	r0, r4, #16
 80068c8:	f000 fbfe 	bl	80070c8 <xTaskRemoveFromEventList>
 80068cc:	b128      	cbz	r0, 80068da <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80068ce:	f1b8 0f00 	cmp.w	r8, #0
 80068d2:	d002      	beq.n	80068da <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80068da:	2001      	movs	r0, #1
	__asm volatile
 80068dc:	f387 8811 	msr	BASEPRI, r7
}
 80068e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068e4:	3601      	adds	r6, #1
 80068e6:	b276      	sxtb	r6, r6
 80068e8:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80068ec:	e7f5      	b.n	80068da <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80068ee:	4628      	mov	r0, r5
 80068f0:	e7f4      	b.n	80068dc <xQueueReceiveFromISR+0x84>
	...

080068f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068f4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068f6:	4a07      	ldr	r2, [pc, #28]	@ (8006914 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068f8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068fa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80068fe:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8006902:	b91d      	cbnz	r5, 800690c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006904:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006908:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800690a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800690c:	3301      	adds	r3, #1
 800690e:	2b08      	cmp	r3, #8
 8006910:	d1f3      	bne.n	80068fa <vQueueAddToRegistry+0x6>
 8006912:	e7fa      	b.n	800690a <vQueueAddToRegistry+0x16>
 8006914:	20000f7c 	.word	0x20000f7c

08006918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4604      	mov	r4, r0
 800691c:	460d      	mov	r5, r1
 800691e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006920:	f000 ff08 	bl	8007734 <vPortEnterCritical>
 8006924:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006928:	2bff      	cmp	r3, #255	@ 0xff
 800692a:	bf04      	itt	eq
 800692c:	2300      	moveq	r3, #0
 800692e:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8006932:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006936:	2bff      	cmp	r3, #255	@ 0xff
 8006938:	bf04      	itt	eq
 800693a:	2300      	moveq	r3, #0
 800693c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8006940:	f000 ff18 	bl	8007774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006944:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006946:	b92b      	cbnz	r3, 8006954 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006948:	4632      	mov	r2, r6
 800694a:	4629      	mov	r1, r5
 800694c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006950:	f000 fb9c 	bl	800708c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006954:	4620      	mov	r0, r4
	}
 8006956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800695a:	f7ff bd0d 	b.w	8006378 <prvUnlockQueue>
	...

08006960 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006966:	f000 fee5 	bl	8007734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800696a:	4b30      	ldr	r3, [pc, #192]	@ (8006a2c <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 800696c:	4e30      	ldr	r6, [pc, #192]	@ (8006a30 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4f30      	ldr	r7, [pc, #192]	@ (8006a34 <prvAddNewTaskToReadyList+0xd4>)
 8006972:	3201      	adds	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006976:	6835      	ldr	r5, [r6, #0]
 8006978:	2d00      	cmp	r5, #0
 800697a:	d14b      	bne.n	8006a14 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800697c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11f      	bne.n	80069c4 <prvAddNewTaskToReadyList+0x64>
 8006984:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006986:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006988:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800698a:	f7ff fc61 	bl	8006250 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800698e:	2d38      	cmp	r5, #56	@ 0x38
 8006990:	f108 0814 	add.w	r8, r8, #20
 8006994:	d1f7      	bne.n	8006986 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006996:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8006a5c <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800699a:	4d27      	ldr	r5, [pc, #156]	@ (8006a38 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 800699c:	4640      	mov	r0, r8
 800699e:	f7ff fc57 	bl	8006250 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7ff fc54 	bl	8006250 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069a8:	4824      	ldr	r0, [pc, #144]	@ (8006a3c <prvAddNewTaskToReadyList+0xdc>)
 80069aa:	f7ff fc51 	bl	8006250 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069ae:	4824      	ldr	r0, [pc, #144]	@ (8006a40 <prvAddNewTaskToReadyList+0xe0>)
 80069b0:	f7ff fc4e 	bl	8006250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069b4:	4823      	ldr	r0, [pc, #140]	@ (8006a44 <prvAddNewTaskToReadyList+0xe4>)
 80069b6:	f7ff fc4b 	bl	8006250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069ba:	4b23      	ldr	r3, [pc, #140]	@ (8006a48 <prvAddNewTaskToReadyList+0xe8>)
 80069bc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069c0:	4b22      	ldr	r3, [pc, #136]	@ (8006a4c <prvAddNewTaskToReadyList+0xec>)
 80069c2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80069c4:	4a22      	ldr	r2, [pc, #136]	@ (8006a50 <prvAddNewTaskToReadyList+0xf0>)
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80069cc:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069ce:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80069d0:	6811      	ldr	r1, [r2, #0]
 80069d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069d4:	2014      	movs	r0, #20
 80069d6:	428b      	cmp	r3, r1
 80069d8:	fb00 7003 	mla	r0, r0, r3, r7
 80069dc:	f104 0104 	add.w	r1, r4, #4
 80069e0:	bf88      	it	hi
 80069e2:	6013      	strhi	r3, [r2, #0]
 80069e4:	f7ff fc42 	bl	800626c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80069e8:	f000 fec4 	bl	8007774 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80069ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <prvAddNewTaskToReadyList+0xf8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	b173      	cbz	r3, 8006a10 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069f2:	6833      	ldr	r3, [r6, #0]
 80069f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d209      	bcs.n	8006a10 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80069fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
}
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006a14:	4b10      	ldr	r3, [pc, #64]	@ (8006a58 <prvAddNewTaskToReadyList+0xf8>)
 8006a16:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d1d2      	bne.n	80069c4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a1e:	6832      	ldr	r2, [r6, #0]
 8006a20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a22:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006a24:	bf98      	it	ls
 8006a26:	6034      	strls	r4, [r6, #0]
 8006a28:	e7cc      	b.n	80069c4 <prvAddNewTaskToReadyList+0x64>
 8006a2a:	bf00      	nop
 8006a2c:	20000fe0 	.word	0x20000fe0
 8006a30:	200014b4 	.word	0x200014b4
 8006a34:	20001054 	.word	0x20001054
 8006a38:	2000102c 	.word	0x2000102c
 8006a3c:	20001010 	.word	0x20001010
 8006a40:	20000ffc 	.word	0x20000ffc
 8006a44:	20000fe4 	.word	0x20000fe4
 8006a48:	20001028 	.word	0x20001028
 8006a4c:	20001024 	.word	0x20001024
 8006a50:	20000fc4 	.word	0x20000fc4
 8006a54:	20000fd8 	.word	0x20000fd8
 8006a58:	20000fd4 	.word	0x20000fd4
 8006a5c:	20001040 	.word	0x20001040

08006a60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a62:	4b15      	ldr	r3, [pc, #84]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a64:	4d15      	ldr	r5, [pc, #84]	@ (8006abc <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8006a66:	681c      	ldr	r4, [r3, #0]
{
 8006a68:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6a:	6828      	ldr	r0, [r5, #0]
 8006a6c:	3004      	adds	r0, #4
{
 8006a6e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a70:	f7ff fc1e 	bl	80062b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a74:	1c73      	adds	r3, r6, #1
 8006a76:	d107      	bne.n	8006a88 <prvAddCurrentTaskToDelayedList+0x28>
 8006a78:	b137      	cbz	r7, 8006a88 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	6829      	ldr	r1, [r5, #0]
 8006a7c:	4810      	ldr	r0, [pc, #64]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a82:	3104      	adds	r1, #4
 8006a84:	f7ff bbf2 	b.w	800626c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	19a4      	adds	r4, r4, r6
 8006a8c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a8e:	d307      	bcc.n	8006aa0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0x64>)
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	6829      	ldr	r1, [r5, #0]
}
 8006a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9a:	3104      	adds	r1, #4
 8006a9c:	f7ff bbf1 	b.w	8006282 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa0:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	6829      	ldr	r1, [r5, #0]
 8006aa6:	3104      	adds	r1, #4
 8006aa8:	f7ff fbeb 	bl	8006282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006aac:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <prvAddCurrentTaskToDelayedList+0x6c>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006ab2:	bf88      	it	hi
 8006ab4:	601c      	strhi	r4, [r3, #0]
}
 8006ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab8:	20000fdc 	.word	0x20000fdc
 8006abc:	200014b4 	.word	0x200014b4
 8006ac0:	20000fe4 	.word	0x20000fe4
 8006ac4:	20001024 	.word	0x20001024
 8006ac8:	20001028 	.word	0x20001028
 8006acc:	20000fc0 	.word	0x20000fc0

08006ad0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad0:	4a06      	ldr	r2, [pc, #24]	@ (8006aec <prvResetNextTaskUnblockTime+0x1c>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <prvResetNextTaskUnblockTime+0x20>)
 8006ad8:	b919      	cbnz	r1, 8006ae2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ade:	601a      	str	r2, [r3, #0]
}
 8006ae0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ae6:	68d2      	ldr	r2, [r2, #12]
 8006ae8:	6852      	ldr	r2, [r2, #4]
 8006aea:	e7f8      	b.n	8006ade <prvResetNextTaskUnblockTime+0xe>
 8006aec:	20001028 	.word	0x20001028
 8006af0:	20000fc0 	.word	0x20000fc0

08006af4 <prvDeleteTCB>:
	{
 8006af4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006af6:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 8006afa:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afc:	b93b      	cbnz	r3, 8006b0e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8006afe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006b00:	f001 f810 	bl	8007b24 <vPortFree>
				vPortFree( pxTCB );
 8006b04:	4620      	mov	r0, r4
	}
 8006b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006b0a:	f001 b80b 	b.w	8007b24 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d0f9      	beq.n	8006b06 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d008      	beq.n	8006b28 <prvDeleteTCB+0x34>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	e7fe      	b.n	8006b26 <prvDeleteTCB+0x32>
	}
 8006b28:	bd10      	pop	{r4, pc}
	...

08006b2c <prvIdleTask>:
{
 8006b2c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b2e:	4c13      	ldr	r4, [pc, #76]	@ (8006b7c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b30:	4f13      	ldr	r7, [pc, #76]	@ (8006b80 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006b32:	4d14      	ldr	r5, [pc, #80]	@ (8006b84 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	b973      	cbnz	r3, 8006b56 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b38:	4b13      	ldr	r3, [pc, #76]	@ (8006b88 <prvIdleTask+0x5c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d9f8      	bls.n	8006b32 <prvIdleTask+0x6>
				taskYIELD();
 8006b40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	e7ed      	b.n	8006b32 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8006b56:	f000 fded 	bl	8007734 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5e:	1d30      	adds	r0, r6, #4
 8006b60:	f7ff fba6 	bl	80062b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006b70:	f000 fe00 	bl	8007774 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbd 	bl	8006af4 <prvDeleteTCB>
 8006b7a:	e7db      	b.n	8006b34 <prvIdleTask+0x8>
 8006b7c:	20000ff8 	.word	0x20000ff8
 8006b80:	20000ffc 	.word	0x20000ffc
 8006b84:	20000fe0 	.word	0x20000fe0
 8006b88:	20001054 	.word	0x20001054

08006b8c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b94:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006b96:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b98:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006b9a:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b9c:	21a5      	movs	r1, #165	@ 0xa5
 8006b9e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006ba0:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ba2:	f002 ff5d 	bl	8009a60 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ba6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006ba8:	3e04      	subs	r6, #4
 8006baa:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006bac:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb0:	1e6b      	subs	r3, r5, #1
 8006bb2:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8006bb6:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006bbc:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8006bc0:	b109      	cbz	r1, 8006bc6 <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc2:	42ab      	cmp	r3, r5
 8006bc4:	d1f8      	bne.n	8006bb8 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bc6:	9d08      	ldr	r5, [sp, #32]
 8006bc8:	2d37      	cmp	r5, #55	@ 0x37
 8006bca:	bf28      	it	cs
 8006bcc:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bce:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8006bd2:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8006bd6:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bd8:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bda:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bde:	f7ff fb42 	bl	8006266 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006be6:	f104 0018 	add.w	r0, r4, #24
 8006bea:	f7ff fb3c 	bl	8006266 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006bee:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bf2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bf6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bf8:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 fd6b 	bl	80076dc <pxPortInitialiseStack>
 8006c06:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	d001      	beq.n	8006c12 <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c0e:	f8c9 4000 	str.w	r4, [r9]
}
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006c16 <xTaskCreateStatic>:
	{
 8006c16:	b570      	push	{r4, r5, r6, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006c1e:	b945      	cbnz	r5, 8006c32 <xTaskCreateStatic+0x1c>
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	e7fe      	b.n	8006c30 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006c32:	b944      	cbnz	r4, 8006c46 <xTaskCreateStatic+0x30>
 8006c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	e7fe      	b.n	8006c44 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c46:	265c      	movs	r6, #92	@ 0x5c
 8006c48:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c4a:	9e05      	ldr	r6, [sp, #20]
 8006c4c:	2e5c      	cmp	r6, #92	@ 0x5c
 8006c4e:	d008      	beq.n	8006c62 <xTaskCreateStatic+0x4c>
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	e7fe      	b.n	8006c60 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c62:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c64:	2502      	movs	r5, #2
 8006c66:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c6a:	ad04      	add	r5, sp, #16
 8006c6c:	9501      	str	r5, [sp, #4]
 8006c6e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006c70:	9402      	str	r4, [sp, #8]
 8006c72:	9500      	str	r5, [sp, #0]
 8006c74:	f7ff ff8a 	bl	8006b8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f7ff fe71 	bl	8006960 <prvAddNewTaskToReadyList>
	}
 8006c7e:	9804      	ldr	r0, [sp, #16]
 8006c80:	b006      	add	sp, #24
 8006c82:	bd70      	pop	{r4, r5, r6, pc}

08006c84 <xTaskCreate>:
	{
 8006c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4607      	mov	r7, r0
 8006c8a:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	0090      	lsls	r0, r2, #2
	{
 8006c8e:	4688      	mov	r8, r1
 8006c90:	4616      	mov	r6, r2
 8006c92:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c94:	f000 feb4 	bl	8007a00 <pvPortMalloc>
			if( pxStack != NULL )
 8006c98:	4605      	mov	r5, r0
 8006c9a:	b920      	cbnz	r0, 8006ca6 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006ca0:	b005      	add	sp, #20
 8006ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ca6:	205c      	movs	r0, #92	@ 0x5c
 8006ca8:	f000 feaa 	bl	8007a00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006cac:	4604      	mov	r4, r0
 8006cae:	b198      	cbz	r0, 8006cd8 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8006cb8:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cbe:	9002      	str	r0, [sp, #8]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ff5f 	bl	8006b8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff fe46 	bl	8006960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	e7e3      	b.n	8006ca0 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 ff23 	bl	8007b24 <vPortFree>
		if( pxNewTCB != NULL )
 8006cde:	e7dd      	b.n	8006c9c <xTaskCreate+0x18>

08006ce0 <vTaskStartScheduler>:
{
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ce4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ce6:	aa07      	add	r2, sp, #28
 8006ce8:	a906      	add	r1, sp, #24
 8006cea:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cec:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cf0:	f7ff fa96 	bl	8006220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	9302      	str	r3, [sp, #8]
 8006cf8:	9b06      	ldr	r3, [sp, #24]
 8006cfa:	9a07      	ldr	r2, [sp, #28]
 8006cfc:	4916      	ldr	r1, [pc, #88]	@ (8006d58 <vTaskStartScheduler+0x78>)
 8006cfe:	4817      	ldr	r0, [pc, #92]	@ (8006d5c <vTaskStartScheduler+0x7c>)
 8006d00:	e9cd 4300 	strd	r4, r3, [sp]
 8006d04:	4623      	mov	r3, r4
 8006d06:	f7ff ff86 	bl	8006c16 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006d0a:	b318      	cbz	r0, 8006d54 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8006d0c:	f000 fb1e 	bl	800734c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006d10:	2801      	cmp	r0, #1
 8006d12:	d114      	bne.n	8006d3e <vTaskStartScheduler+0x5e>
 8006d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d24:	4b0e      	ldr	r3, [pc, #56]	@ (8006d60 <vTaskStartScheduler+0x80>)
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <vTaskStartScheduler+0x84>)
 8006d2e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d30:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <vTaskStartScheduler+0x88>)
 8006d32:	601c      	str	r4, [r3, #0]
}
 8006d34:	b008      	add	sp, #32
 8006d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006d3a:	f000 bd8b 	b.w	8007854 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d108      	bne.n	8006d54 <vTaskStartScheduler+0x74>
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	e7fe      	b.n	8006d52 <vTaskStartScheduler+0x72>
}
 8006d54:	b008      	add	sp, #32
 8006d56:	bd10      	pop	{r4, pc}
 8006d58:	0800e038 	.word	0x0800e038
 8006d5c:	08006b2d 	.word	0x08006b2d
 8006d60:	20000fc0 	.word	0x20000fc0
 8006d64:	20000fd4 	.word	0x20000fd4
 8006d68:	20000fdc 	.word	0x20000fdc

08006d6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006d6c:	4a02      	ldr	r2, [pc, #8]	@ (8006d78 <vTaskSuspendAll+0xc>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	3301      	adds	r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000fbc 	.word	0x20000fbc

08006d7c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006d7c:	4b01      	ldr	r3, [pc, #4]	@ (8006d84 <xTaskGetTickCount+0x8>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
}
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000fdc 	.word	0x20000fdc

08006d88 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d88:	4b3f      	ldr	r3, [pc, #252]	@ (8006e88 <xTaskIncrementTick+0x100>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
{
 8006d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d171      	bne.n	8006e78 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d94:	4b3d      	ldr	r3, [pc, #244]	@ (8006e8c <xTaskIncrementTick+0x104>)
 8006d96:	681c      	ldr	r4, [r3, #0]
 8006d98:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006d9a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d9c:	b9bc      	cbnz	r4, 8006dce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e90 <xTaskIncrementTick+0x108>)
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	b142      	cbz	r2, 8006db8 <xTaskIncrementTick+0x30>
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	e7fe      	b.n	8006db6 <xTaskIncrementTick+0x2e>
 8006db8:	4a36      	ldr	r2, [pc, #216]	@ (8006e94 <xTaskIncrementTick+0x10c>)
 8006dba:	6819      	ldr	r1, [r3, #0]
 8006dbc:	6810      	ldr	r0, [r2, #0]
 8006dbe:	6018      	str	r0, [r3, #0]
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	4a35      	ldr	r2, [pc, #212]	@ (8006e98 <xTaskIncrementTick+0x110>)
 8006dc4:	6813      	ldr	r3, [r2, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	f7ff fe81 	bl	8006ad0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dce:	4d33      	ldr	r5, [pc, #204]	@ (8006e9c <xTaskIncrementTick+0x114>)
 8006dd0:	4e33      	ldr	r6, [pc, #204]	@ (8006ea0 <xTaskIncrementTick+0x118>)
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	4f33      	ldr	r7, [pc, #204]	@ (8006ea4 <xTaskIncrementTick+0x11c>)
 8006dd6:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8006dd8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ddc:	d911      	bls.n	8006e02 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006de2:	2114      	movs	r1, #20
 8006de4:	434a      	muls	r2, r1
 8006de6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8006de8:	2a02      	cmp	r2, #2
 8006dea:	bf28      	it	cs
 8006dec:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006df0:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea8 <xTaskIncrementTick+0x120>)
 8006df2:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006df4:	2a00      	cmp	r2, #0
}
 8006df6:	bf0c      	ite	eq
 8006df8:	4658      	moveq	r0, fp
 8006dfa:	2001      	movne	r0, #1
 8006dfc:	b003      	add	sp, #12
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e02:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8006e90 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8006e06:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8006eb0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0a:	f8d9 2000 	ldr.w	r2, [r9]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	b91a      	cbnz	r2, 8006e1a <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	602a      	str	r2, [r5, #0]
					break;
 8006e18:	e7e1      	b.n	8006dde <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e1a:	f8d9 2000 	ldr.w	r2, [r9]
 8006e1e:	68d2      	ldr	r2, [r2, #12]
 8006e20:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8006e28:	428c      	cmp	r4, r1
 8006e2a:	d201      	bcs.n	8006e30 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8006e2c:	6029      	str	r1, [r5, #0]
						break;
 8006e2e:	e7d6      	b.n	8006dde <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e30:	f108 0304 	add.w	r3, r8, #4
 8006e34:	4618      	mov	r0, r3
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	f7ff fa3a 	bl	80062b0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e3c:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8006e40:	b119      	cbz	r1, 8006e4a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e42:	f108 0018 	add.w	r0, r8, #24
 8006e46:	f7ff fa33 	bl	80062b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e4a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8006e4e:	f8da 1000 	ldr.w	r1, [sl]
 8006e52:	2314      	movs	r3, #20
 8006e54:	4288      	cmp	r0, r1
 8006e56:	bf88      	it	hi
 8006e58:	f8ca 0000 	strhi.w	r0, [sl]
 8006e5c:	9901      	ldr	r1, [sp, #4]
 8006e5e:	fb03 6000 	mla	r0, r3, r0, r6
 8006e62:	f7ff fa03 	bl	800626c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e66:	6838      	ldr	r0, [r7, #0]
 8006e68:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006e6c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006e6e:	4291      	cmp	r1, r2
 8006e70:	bf28      	it	cs
 8006e72:	f04f 0b01 	movcs.w	fp, #1
 8006e76:	e7c8      	b.n	8006e0a <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8006e78:	4a0c      	ldr	r2, [pc, #48]	@ (8006eac <xTaskIncrementTick+0x124>)
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006e80:	f04f 0b00 	mov.w	fp, #0
 8006e84:	e7b4      	b.n	8006df0 <xTaskIncrementTick+0x68>
 8006e86:	bf00      	nop
 8006e88:	20000fbc 	.word	0x20000fbc
 8006e8c:	20000fdc 	.word	0x20000fdc
 8006e90:	20001028 	.word	0x20001028
 8006e94:	20001024 	.word	0x20001024
 8006e98:	20000fc8 	.word	0x20000fc8
 8006e9c:	20000fc0 	.word	0x20000fc0
 8006ea0:	20001054 	.word	0x20001054
 8006ea4:	200014b4 	.word	0x200014b4
 8006ea8:	20000fcc 	.word	0x20000fcc
 8006eac:	20000fd0 	.word	0x20000fd0
 8006eb0:	20000fd8 	.word	0x20000fd8

08006eb4 <xTaskResumeAll>:
{
 8006eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006eb8:	4c30      	ldr	r4, [pc, #192]	@ (8006f7c <xTaskResumeAll+0xc8>)
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	b943      	cbnz	r3, 8006ed0 <xTaskResumeAll+0x1c>
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	e7fe      	b.n	8006ece <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006ed0:	f000 fc30 	bl	8007734 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eda:	6824      	ldr	r4, [r4, #0]
 8006edc:	b12c      	cbz	r4, 8006eea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006ede:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ee0:	f000 fc48 	bl	8007774 <vPortExitCritical>
}
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eea:	4b25      	ldr	r3, [pc, #148]	@ (8006f80 <xTaskResumeAll+0xcc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f5      	beq.n	8006ede <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef2:	4d24      	ldr	r5, [pc, #144]	@ (8006f84 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8006ef4:	4e24      	ldr	r6, [pc, #144]	@ (8006f88 <xTaskResumeAll+0xd4>)
 8006ef6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8006f98 <xTaskResumeAll+0xe4>
 8006efa:	e01d      	b.n	8006f38 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006efc:	68eb      	ldr	r3, [r5, #12]
 8006efe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f00:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f02:	f104 0018 	add.w	r0, r4, #24
 8006f06:	f7ff f9d3 	bl	80062b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff f9d0 	bl	80062b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f12:	6832      	ldr	r2, [r6, #0]
 8006f14:	2014      	movs	r0, #20
 8006f16:	4293      	cmp	r3, r2
 8006f18:	fb00 8003 	mla	r0, r0, r3, r8
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	bf88      	it	hi
 8006f20:	6033      	strhi	r3, [r6, #0]
 8006f22:	f7ff f9a3 	bl	800626c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <xTaskResumeAll+0xd8>)
 8006f28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8006f32:	4b17      	ldr	r3, [pc, #92]	@ (8006f90 <xTaskResumeAll+0xdc>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1de      	bne.n	8006efc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006f3e:	b10c      	cbz	r4, 8006f44 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8006f40:	f7ff fdc6 	bl	8006ad0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f44:	4d13      	ldr	r5, [pc, #76]	@ (8006f94 <xTaskResumeAll+0xe0>)
 8006f46:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f48:	b144      	cbz	r4, 8006f5c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8006f4a:	4e11      	ldr	r6, [pc, #68]	@ (8006f90 <xTaskResumeAll+0xdc>)
 8006f4c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006f4e:	f7ff ff1b 	bl	8006d88 <xTaskIncrementTick>
 8006f52:	b100      	cbz	r0, 8006f56 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006f54:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f56:	3c01      	subs	r4, #1
 8006f58:	d1f9      	bne.n	8006f4e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8006f5a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <xTaskResumeAll+0xdc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0bc      	beq.n	8006ede <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006f78:	2401      	movs	r4, #1
 8006f7a:	e7b1      	b.n	8006ee0 <xTaskResumeAll+0x2c>
 8006f7c:	20000fbc 	.word	0x20000fbc
 8006f80:	20000fe0 	.word	0x20000fe0
 8006f84:	20001010 	.word	0x20001010
 8006f88:	20000fd8 	.word	0x20000fd8
 8006f8c:	200014b4 	.word	0x200014b4
 8006f90:	20000fcc 	.word	0x20000fcc
 8006f94:	20000fd0 	.word	0x20000fd0
 8006f98:	20001054 	.word	0x20001054

08006f9c <vTaskDelay>:
	{
 8006f9c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f9e:	b950      	cbnz	r0, 8006fb6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006fa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
	}
 8006fb4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <vTaskDelay+0x44>)
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	b141      	cbz	r1, 8006fce <vTaskDelay+0x32>
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	e7fe      	b.n	8006fcc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006fce:	f7ff fecd 	bl	8006d6c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fd2:	f7ff fd45 	bl	8006a60 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006fd6:	f7ff ff6d 	bl	8006eb4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d0e0      	beq.n	8006fa0 <vTaskDelay+0x4>
 8006fde:	e7e9      	b.n	8006fb4 <vTaskDelay+0x18>
 8006fe0:	20000fbc 	.word	0x20000fbc

08006fe4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fe4:	4b17      	ldr	r3, [pc, #92]	@ (8007044 <vTaskSwitchContext+0x60>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	4b17      	ldr	r3, [pc, #92]	@ (8007048 <vTaskSwitchContext+0x64>)
{
 8006fea:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fec:	b112      	cbz	r2, 8006ff4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
}
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ff4:	4d15      	ldr	r5, [pc, #84]	@ (800704c <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8006ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ff8:	682a      	ldr	r2, [r5, #0]
 8006ffa:	4915      	ldr	r1, [pc, #84]	@ (8007050 <vTaskSwitchContext+0x6c>)
 8006ffc:	2614      	movs	r6, #20
 8006ffe:	fb06 f302 	mul.w	r3, r6, r2
 8007002:	18c8      	adds	r0, r1, r3
 8007004:	58cc      	ldr	r4, [r1, r3]
 8007006:	b18c      	cbz	r4, 800702c <vTaskSwitchContext+0x48>
 8007008:	6844      	ldr	r4, [r0, #4]
 800700a:	3308      	adds	r3, #8
 800700c:	6864      	ldr	r4, [r4, #4]
 800700e:	6044      	str	r4, [r0, #4]
 8007010:	440b      	add	r3, r1
 8007012:	429c      	cmp	r4, r3
 8007014:	bf04      	itt	eq
 8007016:	6863      	ldreq	r3, [r4, #4]
 8007018:	6043      	streq	r3, [r0, #4]
 800701a:	2314      	movs	r3, #20
 800701c:	fb03 1102 	mla	r1, r3, r2, r1
 8007020:	684b      	ldr	r3, [r1, #4]
 8007022:	68d9      	ldr	r1, [r3, #12]
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <vTaskSwitchContext+0x70>)
 8007026:	6019      	str	r1, [r3, #0]
 8007028:	602a      	str	r2, [r5, #0]
}
 800702a:	e7e2      	b.n	8006ff2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800702c:	b942      	cbnz	r2, 8007040 <vTaskSwitchContext+0x5c>
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	e7fe      	b.n	800703e <vTaskSwitchContext+0x5a>
 8007040:	3a01      	subs	r2, #1
 8007042:	e7dc      	b.n	8006ffe <vTaskSwitchContext+0x1a>
 8007044:	20000fbc 	.word	0x20000fbc
 8007048:	20000fcc 	.word	0x20000fcc
 800704c:	20000fd8 	.word	0x20000fd8
 8007050:	20001054 	.word	0x20001054
 8007054:	200014b4 	.word	0x200014b4

08007058 <vTaskPlaceOnEventList>:
{
 8007058:	b510      	push	{r4, lr}
 800705a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800705c:	b940      	cbnz	r0, 8007070 <vTaskPlaceOnEventList+0x18>
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	e7fe      	b.n	800706e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007070:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <vTaskPlaceOnEventList+0x30>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	3118      	adds	r1, #24
 8007076:	f7ff f904 	bl	8006282 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800707a:	4620      	mov	r0, r4
 800707c:	2101      	movs	r1, #1
}
 800707e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007082:	f7ff bced 	b.w	8006a60 <prvAddCurrentTaskToDelayedList>
 8007086:	bf00      	nop
 8007088:	200014b4 	.word	0x200014b4

0800708c <vTaskPlaceOnEventListRestricted>:
	{
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	460d      	mov	r5, r1
 8007090:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8007092:	b940      	cbnz	r0, 80070a6 <vTaskPlaceOnEventListRestricted+0x1a>
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	e7fe      	b.n	80070a4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070a6:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <vTaskPlaceOnEventListRestricted+0x38>)
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	3118      	adds	r1, #24
 80070ac:	f7ff f8de 	bl	800626c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80070b0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070b2:	4621      	mov	r1, r4
 80070b4:	bf0c      	ite	eq
 80070b6:	4628      	moveq	r0, r5
 80070b8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80070bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070c0:	f7ff bcce 	b.w	8006a60 <prvAddCurrentTaskToDelayedList>
 80070c4:	200014b4 	.word	0x200014b4

080070c8 <xTaskRemoveFromEventList>:
{
 80070c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80070ca:	68c3      	ldr	r3, [r0, #12]
 80070cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80070ce:	b944      	cbnz	r4, 80070e2 <xTaskRemoveFromEventList+0x1a>
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	e7fe      	b.n	80070e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e2:	f104 0518 	add.w	r5, r4, #24
 80070e6:	4628      	mov	r0, r5
 80070e8:	f7ff f8e2 	bl	80062b0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ec:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <xTaskRemoveFromEventList+0x68>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	b9db      	cbnz	r3, 800712a <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070f2:	1d25      	adds	r5, r4, #4
 80070f4:	4628      	mov	r0, r5
 80070f6:	f7ff f8db 	bl	80062b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <xTaskRemoveFromEventList+0x6c>)
 80070fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80070fe:	6811      	ldr	r1, [r2, #0]
 8007100:	428b      	cmp	r3, r1
 8007102:	bf88      	it	hi
 8007104:	6013      	strhi	r3, [r2, #0]
 8007106:	4a0c      	ldr	r2, [pc, #48]	@ (8007138 <xTaskRemoveFromEventList+0x70>)
 8007108:	2014      	movs	r0, #20
 800710a:	4629      	mov	r1, r5
 800710c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007110:	f7ff f8ac 	bl	800626c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007114:	4b09      	ldr	r3, [pc, #36]	@ (800713c <xTaskRemoveFromEventList+0x74>)
 8007116:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800711e:	bf83      	ittte	hi
 8007120:	4b07      	ldrhi	r3, [pc, #28]	@ (8007140 <xTaskRemoveFromEventList+0x78>)
 8007122:	2001      	movhi	r0, #1
 8007124:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007126:	2000      	movls	r0, #0
}
 8007128:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800712a:	4806      	ldr	r0, [pc, #24]	@ (8007144 <xTaskRemoveFromEventList+0x7c>)
 800712c:	4629      	mov	r1, r5
 800712e:	e7ef      	b.n	8007110 <xTaskRemoveFromEventList+0x48>
 8007130:	20000fbc 	.word	0x20000fbc
 8007134:	20000fd8 	.word	0x20000fd8
 8007138:	20001054 	.word	0x20001054
 800713c:	200014b4 	.word	0x200014b4
 8007140:	20000fcc 	.word	0x20000fcc
 8007144:	20001010 	.word	0x20001010

08007148 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <vTaskInternalSetTimeOutState+0x10>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800714e:	4b03      	ldr	r3, [pc, #12]	@ (800715c <vTaskInternalSetTimeOutState+0x14>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6043      	str	r3, [r0, #4]
}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000fc8 	.word	0x20000fc8
 800715c:	20000fdc 	.word	0x20000fdc

08007160 <xTaskCheckForTimeOut>:
{
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007164:	4605      	mov	r5, r0
 8007166:	b940      	cbnz	r0, 800717a <xTaskCheckForTimeOut+0x1a>
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	e7fe      	b.n	8007178 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800717a:	b941      	cbnz	r1, 800718e <xTaskCheckForTimeOut+0x2e>
 800717c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	e7fe      	b.n	800718c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800718e:	f000 fad1 	bl	8007734 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007192:	4b0f      	ldr	r3, [pc, #60]	@ (80071d0 <xTaskCheckForTimeOut+0x70>)
 8007194:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	d010      	beq.n	80071be <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800719c:	480d      	ldr	r0, [pc, #52]	@ (80071d4 <xTaskCheckForTimeOut+0x74>)
 800719e:	682e      	ldr	r6, [r5, #0]
 80071a0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071a2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071a4:	4286      	cmp	r6, r0
 80071a6:	d001      	beq.n	80071ac <xTaskCheckForTimeOut+0x4c>
 80071a8:	428a      	cmp	r2, r1
 80071aa:	d90f      	bls.n	80071cc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071ac:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ae:	4283      	cmp	r3, r0
 80071b0:	d90a      	bls.n	80071c8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80071b2:	1a5b      	subs	r3, r3, r1
 80071b4:	4413      	add	r3, r2
 80071b6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071b8:	4628      	mov	r0, r5
 80071ba:	f7ff ffc5 	bl	8007148 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80071be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80071c0:	f000 fad8 	bl	8007774 <vPortExitCritical>
}
 80071c4:	4620      	mov	r0, r4
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80071cc:	2401      	movs	r4, #1
 80071ce:	e7f7      	b.n	80071c0 <xTaskCheckForTimeOut+0x60>
 80071d0:	20000fdc 	.word	0x20000fdc
 80071d4:	20000fc8 	.word	0x20000fc8

080071d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80071d8:	4b01      	ldr	r3, [pc, #4]	@ (80071e0 <vTaskMissedYield+0x8>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	4770      	bx	lr
 80071e0:	20000fcc 	.word	0x20000fcc

080071e4 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80071e4:	b908      	cbnz	r0, 80071ea <uxTaskGetStackHighWaterMark+0x6>
 80071e6:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <uxTaskGetStackHighWaterMark+0x1c>)
 80071e8:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80071ea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 80071ec:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80071ee:	5c13      	ldrb	r3, [r2, r0]
 80071f0:	2ba5      	cmp	r3, #165	@ 0xa5
 80071f2:	d002      	beq.n	80071fa <uxTaskGetStackHighWaterMark+0x16>
	}
 80071f4:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80071f8:	4770      	bx	lr
			ulCount++;
 80071fa:	3001      	adds	r0, #1
 80071fc:	e7f7      	b.n	80071ee <uxTaskGetStackHighWaterMark+0xa>
 80071fe:	bf00      	nop
 8007200:	200014b4 	.word	0x200014b4

08007204 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007204:	4b05      	ldr	r3, [pc, #20]	@ (800721c <xTaskGetSchedulerState+0x18>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	b133      	cbz	r3, 8007218 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720a:	4b05      	ldr	r3, [pc, #20]	@ (8007220 <xTaskGetSchedulerState+0x1c>)
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	fab0 f080 	clz	r0, r0
 8007212:	0940      	lsrs	r0, r0, #5
 8007214:	0040      	lsls	r0, r0, #1
 8007216:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007218:	2001      	movs	r0, #1
	}
 800721a:	4770      	bx	lr
 800721c:	20000fd4 	.word	0x20000fd4
 8007220:	20000fbc 	.word	0x20000fbc

08007224 <xTaskPriorityDisinherit>:
	{
 8007224:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007226:	b908      	cbnz	r0, 800722c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8007228:	2000      	movs	r0, #0
	}
 800722a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800722c:	4b1b      	ldr	r3, [pc, #108]	@ (800729c <xTaskPriorityDisinherit+0x78>)
 800722e:	681c      	ldr	r4, [r3, #0]
 8007230:	4284      	cmp	r4, r0
 8007232:	d008      	beq.n	8007246 <xTaskPriorityDisinherit+0x22>
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	e7fe      	b.n	8007244 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007246:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007248:	b943      	cbnz	r3, 800725c <xTaskPriorityDisinherit+0x38>
 800724a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	e7fe      	b.n	800725a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800725c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800725e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007260:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007262:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007264:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007266:	d0df      	beq.n	8007228 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1dd      	bne.n	8007228 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800726c:	1d25      	adds	r5, r4, #4
 800726e:	4628      	mov	r0, r5
 8007270:	f7ff f81e 	bl	80062b0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007274:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007276:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007278:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800727c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800727e:	4a08      	ldr	r2, [pc, #32]	@ (80072a0 <xTaskPriorityDisinherit+0x7c>)
 8007280:	6811      	ldr	r1, [r2, #0]
 8007282:	428b      	cmp	r3, r1
 8007284:	bf88      	it	hi
 8007286:	6013      	strhi	r3, [r2, #0]
 8007288:	4a06      	ldr	r2, [pc, #24]	@ (80072a4 <xTaskPriorityDisinherit+0x80>)
 800728a:	2014      	movs	r0, #20
 800728c:	fb00 2003 	mla	r0, r0, r3, r2
 8007290:	4629      	mov	r1, r5
 8007292:	f7fe ffeb 	bl	800626c <vListInsertEnd>
					xReturn = pdTRUE;
 8007296:	2001      	movs	r0, #1
		return xReturn;
 8007298:	e7c7      	b.n	800722a <xTaskPriorityDisinherit+0x6>
 800729a:	bf00      	nop
 800729c:	200014b4 	.word	0x200014b4
 80072a0:	20000fd8 	.word	0x20000fd8
 80072a4:	20001054 	.word	0x20001054

080072a8 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80072a8:	4291      	cmp	r1, r2
{
 80072aa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ac:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072ae:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80072b0:	d80a      	bhi.n	80072c8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	6983      	ldr	r3, [r0, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d20d      	bcs.n	80072d6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072ba:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <prvInsertTimerInActiveList+0x34>)
 80072bc:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f7fe ffdf 	bl	8006282 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80072c4:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80072c6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d201      	bcs.n	80072d0 <prvInsertTimerInActiveList+0x28>
 80072cc:	4299      	cmp	r1, r3
 80072ce:	d202      	bcs.n	80072d6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072d0:	4b03      	ldr	r3, [pc, #12]	@ (80072e0 <prvInsertTimerInActiveList+0x38>)
 80072d2:	1d01      	adds	r1, r0, #4
 80072d4:	e7f3      	b.n	80072be <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80072d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80072d8:	e7f5      	b.n	80072c6 <prvInsertTimerInActiveList+0x1e>
 80072da:	bf00      	nop
 80072dc:	200015b4 	.word	0x200015b4
 80072e0:	200015b8 	.word	0x200015b8

080072e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80072e6:	4c11      	ldr	r4, [pc, #68]	@ (800732c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80072e8:	f000 fa24 	bl	8007734 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80072ec:	6825      	ldr	r5, [r4, #0]
 80072ee:	b9bd      	cbnz	r5, 8007320 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80072f0:	4f0f      	ldr	r7, [pc, #60]	@ (8007330 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80072f2:	4e10      	ldr	r6, [pc, #64]	@ (8007334 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7fe ffab 	bl	8006250 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7fe ffa8 	bl	8006250 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007300:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007302:	4a0e      	ldr	r2, [pc, #56]	@ (800733c <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007304:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007306:	4b0e      	ldr	r3, [pc, #56]	@ (8007340 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007308:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 800730a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730c:	200a      	movs	r0, #10
 800730e:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <prvCheckForValidListAndQueue+0x60>)
 8007310:	9500      	str	r5, [sp, #0]
 8007312:	f7ff f8a8 	bl	8006466 <xQueueGenericCreateStatic>
 8007316:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007318:	b110      	cbz	r0, 8007320 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800731a:	490b      	ldr	r1, [pc, #44]	@ (8007348 <prvCheckForValidListAndQueue+0x64>)
 800731c:	f7ff faea 	bl	80068f4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007320:	b003      	add	sp, #12
 8007322:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007326:	f000 ba25 	b.w	8007774 <vPortExitCritical>
 800732a:	bf00      	nop
 800732c:	200015b0 	.word	0x200015b0
 8007330:	200015d0 	.word	0x200015d0
 8007334:	200015bc 	.word	0x200015bc
 8007338:	200015b8 	.word	0x200015b8
 800733c:	20001508 	.word	0x20001508
 8007340:	200015b4 	.word	0x200015b4
 8007344:	200014b8 	.word	0x200014b8
 8007348:	0800e03d 	.word	0x0800e03d

0800734c <xTimerCreateTimerTask>:
{
 800734c:	b510      	push	{r4, lr}
 800734e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007350:	f7ff ffc8 	bl	80072e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007354:	4b12      	ldr	r3, [pc, #72]	@ (80073a0 <xTimerCreateTimerTask+0x54>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	b1b3      	cbz	r3, 8007388 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800735a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800735c:	aa07      	add	r2, sp, #28
 800735e:	a906      	add	r1, sp, #24
 8007360:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007362:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007366:	f7fe ff67 	bl	8006238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800736a:	9b05      	ldr	r3, [sp, #20]
 800736c:	9302      	str	r3, [sp, #8]
 800736e:	9b06      	ldr	r3, [sp, #24]
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	2302      	movs	r3, #2
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	9a07      	ldr	r2, [sp, #28]
 8007378:	490a      	ldr	r1, [pc, #40]	@ (80073a4 <xTimerCreateTimerTask+0x58>)
 800737a:	480b      	ldr	r0, [pc, #44]	@ (80073a8 <xTimerCreateTimerTask+0x5c>)
 800737c:	4623      	mov	r3, r4
 800737e:	f7ff fc4a 	bl	8006c16 <xTaskCreateStatic>
 8007382:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <xTimerCreateTimerTask+0x60>)
 8007384:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007386:	b940      	cbnz	r0, 800739a <xTimerCreateTimerTask+0x4e>
 8007388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007398:	e7fe      	b.n	8007398 <xTimerCreateTimerTask+0x4c>
}
 800739a:	2001      	movs	r0, #1
 800739c:	b008      	add	sp, #32
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	200015b0 	.word	0x200015b0
 80073a4:	0800e042 	.word	0x0800e042
 80073a8:	080074a9 	.word	0x080074a9
 80073ac:	200015ac 	.word	0x200015ac

080073b0 <xTimerGenericCommand>:
{
 80073b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073b2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80073b4:	4604      	mov	r4, r0
{
 80073b6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80073b8:	b940      	cbnz	r0, 80073cc <xTimerGenericCommand+0x1c>
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	e7fe      	b.n	80073ca <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80073cc:	4d0d      	ldr	r5, [pc, #52]	@ (8007404 <xTimerGenericCommand+0x54>)
 80073ce:	6828      	ldr	r0, [r5, #0]
 80073d0:	b180      	cbz	r0, 80073f4 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073d2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073d4:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80073d8:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073da:	dc0d      	bgt.n	80073f8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073dc:	f7ff ff12 	bl	8007204 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073e0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073e2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073e4:	bf08      	it	eq
 80073e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073e8:	6828      	ldr	r0, [r5, #0]
 80073ea:	bf18      	it	ne
 80073ec:	461a      	movne	r2, r3
 80073ee:	4669      	mov	r1, sp
 80073f0:	f7ff f886 	bl	8006500 <xQueueGenericSend>
}
 80073f4:	b004      	add	sp, #16
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073f8:	2300      	movs	r3, #0
 80073fa:	4669      	mov	r1, sp
 80073fc:	f7ff f932 	bl	8006664 <xQueueGenericSendFromISR>
 8007400:	e7f8      	b.n	80073f4 <xTimerGenericCommand+0x44>
 8007402:	bf00      	nop
 8007404:	200015b0 	.word	0x200015b0

08007408 <prvSampleTimeNow>:
{
 8007408:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800740c:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80074a4 <prvSampleTimeNow+0x9c>
{
 8007410:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007412:	f7ff fcb3 	bl	8006d7c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007416:	f8d8 3000 	ldr.w	r3, [r8]
 800741a:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800741c:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800741e:	d909      	bls.n	8007434 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007420:	4f1e      	ldr	r7, [pc, #120]	@ (800749c <prvSampleTimeNow+0x94>)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	b96a      	cbnz	r2, 8007444 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8007428:	4a1d      	ldr	r2, [pc, #116]	@ (80074a0 <prvSampleTimeNow+0x98>)
 800742a:	6811      	ldr	r1, [r2, #0]
 800742c:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800742e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <prvSampleTimeNow+0x2e>
 8007434:	2300      	movs	r3, #0
}
 8007436:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8007438:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800743a:	f8c8 5000 	str.w	r5, [r8]
}
 800743e:	b002      	add	sp, #8
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007444:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007446:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007448:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800744c:	f104 0a04 	add.w	sl, r4, #4
 8007450:	4650      	mov	r0, sl
 8007452:	f7fe ff2d 	bl	80062b0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007456:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007458:	4620      	mov	r0, r4
 800745a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800745c:	69e3      	ldr	r3, [r4, #28]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d1df      	bne.n	8007422 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007462:	69a3      	ldr	r3, [r4, #24]
 8007464:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8007466:	4599      	cmp	r9, r3
 8007468:	d206      	bcs.n	8007478 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800746c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800746e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007470:	4651      	mov	r1, sl
 8007472:	f7fe ff06 	bl	8006282 <vListInsert>
 8007476:	e7d4      	b.n	8007422 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	464a      	mov	r2, r9
 800747e:	4619      	mov	r1, r3
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff ff95 	bl	80073b0 <xTimerGenericCommand>
				configASSERT( xResult );
 8007486:	2800      	cmp	r0, #0
 8007488:	d1cb      	bne.n	8007422 <prvSampleTimeNow+0x1a>
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	e7fe      	b.n	800749a <prvSampleTimeNow+0x92>
 800749c:	200015b8 	.word	0x200015b8
 80074a0:	200015b4 	.word	0x200015b4
 80074a4:	200015a8 	.word	0x200015a8

080074a8 <prvTimerTask>:
{
 80074a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074ac:	4e69      	ldr	r6, [pc, #420]	@ (8007654 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074ae:	4f6a      	ldr	r7, [pc, #424]	@ (8007658 <prvTimerTask+0x1b0>)
{
 80074b0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074b2:	6833      	ldr	r3, [r6, #0]
 80074b4:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	d033      	beq.n	8007522 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80074c0:	f7ff fc54 	bl	8006d6c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074c4:	a804      	add	r0, sp, #16
 80074c6:	f7ff ff9f 	bl	8007408 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80074ca:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074cc:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	d175      	bne.n	80075be <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	d058      	beq.n	8007588 <prvTimerTask+0xe0>
 80074d6:	4540      	cmp	r0, r8
 80074d8:	d35c      	bcc.n	8007594 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 80074da:	f7ff fceb 	bl	8006eb4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074de:	6833      	ldr	r3, [r6, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074e4:	1d28      	adds	r0, r5, #4
 80074e6:	f7fe fee3 	bl	80062b0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074ea:	69eb      	ldr	r3, [r5, #28]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d11a      	bne.n	8007526 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074f0:	69a9      	ldr	r1, [r5, #24]
 80074f2:	4643      	mov	r3, r8
 80074f4:	464a      	mov	r2, r9
 80074f6:	4441      	add	r1, r8
 80074f8:	4628      	mov	r0, r5
 80074fa:	f7ff fed5 	bl	80072a8 <prvInsertTimerInActiveList>
 80074fe:	b190      	cbz	r0, 8007526 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007500:	9400      	str	r4, [sp, #0]
 8007502:	4623      	mov	r3, r4
 8007504:	4642      	mov	r2, r8
 8007506:	4621      	mov	r1, r4
 8007508:	4628      	mov	r0, r5
 800750a:	f7ff ff51 	bl	80073b0 <xTimerGenericCommand>
			configASSERT( xResult );
 800750e:	b950      	cbnz	r0, 8007526 <prvTimerTask+0x7e>
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	e7fe      	b.n	8007520 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8007522:	46a8      	mov	r8, r5
 8007524:	e7cc      	b.n	80074c0 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007526:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8007528:	4628      	mov	r0, r5
 800752a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800752c:	6838      	ldr	r0, [r7, #0]
 800752e:	2200      	movs	r2, #0
 8007530:	a904      	add	r1, sp, #16
 8007532:	f7ff f8f3 	bl	800671c <xQueueReceive>
 8007536:	2800      	cmp	r0, #0
 8007538:	d0bb      	beq.n	80074b2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800753a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800753c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800753e:	2b00      	cmp	r3, #0
 8007540:	db40      	blt.n	80075c4 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007542:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007544:	6963      	ldr	r3, [r4, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d143      	bne.n	80075d2 <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800754a:	a803      	add	r0, sp, #12
 800754c:	f7ff ff5c 	bl	8007408 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007550:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007552:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007554:	2b09      	cmp	r3, #9
 8007556:	d8e9      	bhi.n	800752c <prvTimerTask+0x84>
 8007558:	a101      	add	r1, pc, #4	@ (adr r1, 8007560 <prvTimerTask+0xb8>)
 800755a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	080075db 	.word	0x080075db
 8007564:	080075db 	.word	0x080075db
 8007568:	080075db 	.word	0x080075db
 800756c:	0800752d 	.word	0x0800752d
 8007570:	0800761f 	.word	0x0800761f
 8007574:	08007643 	.word	0x08007643
 8007578:	080075db 	.word	0x080075db
 800757c:	080075db 	.word	0x080075db
 8007580:	0800752d 	.word	0x0800752d
 8007584:	0800761f 	.word	0x0800761f
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007588:	4b34      	ldr	r3, [pc, #208]	@ (800765c <prvTimerTask+0x1b4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681c      	ldr	r4, [r3, #0]
 800758e:	fab4 f484 	clz	r4, r4
 8007592:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007594:	6838      	ldr	r0, [r7, #0]
 8007596:	4622      	mov	r2, r4
 8007598:	eba8 0109 	sub.w	r1, r8, r9
 800759c:	f7ff f9bc 	bl	8006918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075a0:	f7ff fc88 	bl	8006eb4 <xTaskResumeAll>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d1c1      	bne.n	800752c <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 80075a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	e7b6      	b.n	800752c <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 80075be:	f7ff fc79 	bl	8006eb4 <xTaskResumeAll>
}
 80075c2:	e7b3      	b.n	800752c <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	9907      	ldr	r1, [sp, #28]
 80075c8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dbad      	blt.n	800752c <prvTimerTask+0x84>
 80075d0:	e7b7      	b.n	8007542 <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d2:	1d20      	adds	r0, r4, #4
 80075d4:	f7fe fe6c 	bl	80062b0 <uxListRemove>
 80075d8:	e7b7      	b.n	800754a <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075da:	69a1      	ldr	r1, [r4, #24]
 80075dc:	9b05      	ldr	r3, [sp, #20]
 80075de:	4620      	mov	r0, r4
 80075e0:	4419      	add	r1, r3
 80075e2:	f7ff fe61 	bl	80072a8 <prvInsertTimerInActiveList>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d0a0      	beq.n	800752c <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80075ec:	4620      	mov	r0, r4
 80075ee:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075f0:	69e3      	ldr	r3, [r4, #28]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d19a      	bne.n	800752c <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075f6:	69a2      	ldr	r2, [r4, #24]
 80075f8:	9905      	ldr	r1, [sp, #20]
 80075fa:	2300      	movs	r3, #0
 80075fc:	440a      	add	r2, r1
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4619      	mov	r1, r3
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff fed4 	bl	80073b0 <xTimerGenericCommand>
							configASSERT( xResult );
 8007608:	2800      	cmp	r0, #0
 800760a:	d18f      	bne.n	800752c <prvTimerTask+0x84>
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	e7fe      	b.n	800761c <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800761e:	9905      	ldr	r1, [sp, #20]
 8007620:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007622:	b941      	cbnz	r1, 8007636 <prvTimerTask+0x18e>
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	e7fe      	b.n	8007634 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007636:	4603      	mov	r3, r0
 8007638:	4401      	add	r1, r0
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fe34 	bl	80072a8 <prvInsertTimerInActiveList>
					break;
 8007640:	e774      	b.n	800752c <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007642:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007646:	2b00      	cmp	r3, #0
 8007648:	f47f af70 	bne.w	800752c <prvTimerTask+0x84>
							vPortFree( pxTimer );
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fa69 	bl	8007b24 <vPortFree>
 8007652:	e76b      	b.n	800752c <prvTimerTask+0x84>
 8007654:	200015b8 	.word	0x200015b8
 8007658:	200015b0 	.word	0x200015b0
 800765c:	200015b4 	.word	0x200015b4

08007660 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007660:	4808      	ldr	r0, [pc, #32]	@ (8007684 <prvPortStartFirstTask+0x24>)
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	6800      	ldr	r0, [r0, #0]
 8007666:	f380 8808 	msr	MSP, r0
 800766a:	f04f 0000 	mov.w	r0, #0
 800766e:	f380 8814 	msr	CONTROL, r0
 8007672:	b662      	cpsie	i
 8007674:	b661      	cpsie	f
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	df00      	svc	0
 8007680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007682:	0000      	.short	0x0000
 8007684:	e000ed08 	.word	0xe000ed08

08007688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007688:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007698 <vPortEnableVFP+0x10>
 800768c:	6801      	ldr	r1, [r0, #0]
 800768e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007692:	6001      	str	r1, [r0, #0]
 8007694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007696:	0000      	.short	0x0000
 8007698:	e000ed88 	.word	0xe000ed88

0800769c <prvTaskExitError>:
{
 800769c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <prvTaskExitError+0x3c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	d008      	beq.n	80076bc <prvTaskExitError+0x20>
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	e7fe      	b.n	80076ba <prvTaskExitError+0x1e>
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80076cc:	9b01      	ldr	r3, [sp, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0fc      	beq.n	80076cc <prvTaskExitError+0x30>
}
 80076d2:	b002      	add	sp, #8
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20000010 	.word	0x20000010

080076dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076e4:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <pxPortInitialiseStack+0x28>)
 80076e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076ee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80076fe:	3844      	subs	r0, #68	@ 0x44
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	0800769d 	.word	0x0800769d
	...

08007710 <SVC_Handler>:
	__asm volatile (
 8007710:	4b07      	ldr	r3, [pc, #28]	@ (8007730 <pxCurrentTCBConst2>)
 8007712:	6819      	ldr	r1, [r3, #0]
 8007714:	6808      	ldr	r0, [r1, #0]
 8007716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	f380 8809 	msr	PSP, r0
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f04f 0000 	mov.w	r0, #0
 8007726:	f380 8811 	msr	BASEPRI, r0
 800772a:	4770      	bx	lr
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst2>:
 8007730:	200014b4 	.word	0x200014b4

08007734 <vPortEnterCritical>:
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007744:	4a0a      	ldr	r2, [pc, #40]	@ (8007770 <vPortEnterCritical+0x3c>)
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800774a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800774c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800774e:	d10e      	bne.n	800776e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007750:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007754:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007758:	b2db      	uxtb	r3, r3
 800775a:	b143      	cbz	r3, 800776e <vPortEnterCritical+0x3a>
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	e7fe      	b.n	800776c <vPortEnterCritical+0x38>
}
 800776e:	4770      	bx	lr
 8007770:	20000010 	.word	0x20000010

08007774 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007774:	4a08      	ldr	r2, [pc, #32]	@ (8007798 <vPortExitCritical+0x24>)
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	b943      	cbnz	r3, 800778c <vPortExitCritical+0x18>
 800777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	e7fe      	b.n	800778a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800778c:	3b01      	subs	r3, #1
 800778e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007790:	b90b      	cbnz	r3, 8007796 <vPortExitCritical+0x22>
	__asm volatile
 8007792:	f383 8811 	msr	BASEPRI, r3
}
 8007796:	4770      	bx	lr
 8007798:	20000010 	.word	0x20000010
 800779c:	00000000 	.word	0x00000000

080077a0 <PendSV_Handler>:
	__asm volatile
 80077a0:	f3ef 8009 	mrs	r0, PSP
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	4b15      	ldr	r3, [pc, #84]	@ (8007800 <pxCurrentTCBConst>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f01e 0f10 	tst.w	lr, #16
 80077b0:	bf08      	it	eq
 80077b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6010      	str	r0, [r2, #0]
 80077bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077c4:	f380 8811 	msr	BASEPRI, r0
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f7ff fc08 	bl	8006fe4 <vTaskSwitchContext>
 80077d4:	f04f 0000 	mov.w	r0, #0
 80077d8:	f380 8811 	msr	BASEPRI, r0
 80077dc:	bc09      	pop	{r0, r3}
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	6808      	ldr	r0, [r1, #0]
 80077e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	f01e 0f10 	tst.w	lr, #16
 80077ea:	bf08      	it	eq
 80077ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077f0:	f380 8809 	msr	PSP, r0
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst>:
 8007800:	200014b4 	.word	0x200014b4

08007804 <SysTick_Handler>:
{
 8007804:	b508      	push	{r3, lr}
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007816:	f7ff fab7 	bl	8006d88 <xTaskIncrementTick>
 800781a:	b128      	cbz	r0, 8007828 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007824:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007828:	2300      	movs	r3, #0
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bd08      	pop	{r3, pc}

08007830 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007830:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007834:	2300      	movs	r3, #0
 8007836:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007838:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800783a:	4b05      	ldr	r3, [pc, #20]	@ (8007850 <vPortSetupTimerInterrupt+0x20>)
 800783c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	fbb3 f3f1 	udiv	r3, r3, r1
 8007846:	3b01      	subs	r3, #1
 8007848:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800784a:	2307      	movs	r3, #7
 800784c:	6113      	str	r3, [r2, #16]
}
 800784e:	4770      	bx	lr
 8007850:	20000004 	.word	0x20000004

08007854 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007854:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007858:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800785a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800785e:	4a38      	ldr	r2, [pc, #224]	@ (8007940 <xPortStartScheduler+0xec>)
 8007860:	4291      	cmp	r1, r2
 8007862:	d108      	bne.n	8007876 <xPortStartScheduler+0x22>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	e7fe      	b.n	8007874 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007876:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800787a:	4b32      	ldr	r3, [pc, #200]	@ (8007944 <xPortStartScheduler+0xf0>)
 800787c:	429a      	cmp	r2, r3
 800787e:	d108      	bne.n	8007892 <xPortStartScheduler+0x3e>
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	e7fe      	b.n	8007890 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007892:	4b2d      	ldr	r3, [pc, #180]	@ (8007948 <xPortStartScheduler+0xf4>)
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800789a:	22ff      	movs	r2, #255	@ 0xff
 800789c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800789e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078a0:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80078ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078b0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078b2:	4a27      	ldr	r2, [pc, #156]	@ (8007950 <xPortStartScheduler+0xfc>)
 80078b4:	2307      	movs	r3, #7
 80078b6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078b8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80078bc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078be:	0609      	lsls	r1, r1, #24
 80078c0:	d40a      	bmi.n	80078d8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d011      	beq.n	80078ea <xPortStartScheduler+0x96>
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	e7fe      	b.n	80078d6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80078d8:	3b01      	subs	r3, #1
 80078da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f88d 3003 	strb.w	r3, [sp, #3]
 80078e8:	e7e6      	b.n	80078b8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80078ee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	4a15      	ldr	r2, [pc, #84]	@ (8007948 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078f4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078fc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007904:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007908:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800790c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007910:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007914:	f7ff ff8c 	bl	8007830 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007918:	4b0e      	ldr	r3, [pc, #56]	@ (8007954 <xPortStartScheduler+0x100>)
 800791a:	2500      	movs	r5, #0
 800791c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800791e:	f7ff feb3 	bl	8007688 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007922:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007926:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800792a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800792e:	f7ff fe97 	bl	8007660 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007932:	f7ff fb57 	bl	8006fe4 <vTaskSwitchContext>
	prvTaskExitError();
 8007936:	f7ff feb1 	bl	800769c <prvTaskExitError>
}
 800793a:	4628      	mov	r0, r5
 800793c:	b003      	add	sp, #12
 800793e:	bd30      	pop	{r4, r5, pc}
 8007940:	410fc271 	.word	0x410fc271
 8007944:	410fc270 	.word	0x410fc270
 8007948:	e000e400 	.word	0xe000e400
 800794c:	200015e8 	.word	0x200015e8
 8007950:	200015e4 	.word	0x200015e4
 8007954:	20000010 	.word	0x20000010

08007958 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007958:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800795c:	2b0f      	cmp	r3, #15
 800795e:	d90e      	bls.n	800797e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007960:	4a11      	ldr	r2, [pc, #68]	@ (80079a8 <vPortValidateInterruptPriority+0x50>)
 8007962:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007964:	4a11      	ldr	r2, [pc, #68]	@ (80079ac <vPortValidateInterruptPriority+0x54>)
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d908      	bls.n	800797e <vPortValidateInterruptPriority+0x26>
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	e7fe      	b.n	800797c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800797e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007982:	4a0b      	ldr	r2, [pc, #44]	@ (80079b0 <vPortValidateInterruptPriority+0x58>)
 8007984:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800798e:	4293      	cmp	r3, r2
 8007990:	d908      	bls.n	80079a4 <vPortValidateInterruptPriority+0x4c>
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	e7fe      	b.n	80079a2 <vPortValidateInterruptPriority+0x4a>
	}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	e000e3f0 	.word	0xe000e3f0
 80079ac:	200015e8 	.word	0x200015e8
 80079b0:	200015e4 	.word	0x200015e4

080079b4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079b4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b6:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <prvInsertBlockIntoFreeList+0x44>)
 80079b8:	461a      	mov	r2, r3
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4283      	cmp	r3, r0
 80079be:	d3fb      	bcc.n	80079b8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079c0:	6854      	ldr	r4, [r2, #4]
 80079c2:	1911      	adds	r1, r2, r4
 80079c4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079c6:	bf01      	itttt	eq
 80079c8:	6841      	ldreq	r1, [r0, #4]
 80079ca:	4610      	moveq	r0, r2
 80079cc:	1909      	addeq	r1, r1, r4
 80079ce:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079d0:	6844      	ldr	r4, [r0, #4]
 80079d2:	1901      	adds	r1, r0, r4
 80079d4:	428b      	cmp	r3, r1
 80079d6:	d10c      	bne.n	80079f2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079d8:	4908      	ldr	r1, [pc, #32]	@ (80079fc <prvInsertBlockIntoFreeList+0x48>)
 80079da:	6809      	ldr	r1, [r1, #0]
 80079dc:	428b      	cmp	r3, r1
 80079de:	d003      	beq.n	80079e8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079e0:	6859      	ldr	r1, [r3, #4]
 80079e2:	4421      	add	r1, r4
 80079e4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079e6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079e8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079ea:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079ec:	bf18      	it	ne
 80079ee:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079f2:	4619      	mov	r1, r3
 80079f4:	e7f8      	b.n	80079e8 <prvInsertBlockIntoFreeList+0x34>
 80079f6:	bf00      	nop
 80079f8:	200015fc 	.word	0x200015fc
 80079fc:	200015f8 	.word	0x200015f8

08007a00 <pvPortMalloc>:
{
 8007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a06:	f7ff f9b1 	bl	8006d6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a0a:	493f      	ldr	r1, [pc, #252]	@ (8007b08 <pvPortMalloc+0x108>)
 8007a0c:	4d3f      	ldr	r5, [pc, #252]	@ (8007b0c <pvPortMalloc+0x10c>)
 8007a0e:	680b      	ldr	r3, [r1, #0]
 8007a10:	b9fb      	cbnz	r3, 8007a52 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8007a12:	4a3f      	ldr	r2, [pc, #252]	@ (8007b10 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a14:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a16:	bf1c      	itt	ne
 8007a18:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a1a:	4b3e      	ldrne	r3, [pc, #248]	@ (8007b14 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a1c:	4e3e      	ldr	r6, [pc, #248]	@ (8007b18 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a1e:	bf1a      	itte	ne
 8007a20:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a24:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a26:	f247 5330 	movweq	r3, #30000	@ 0x7530
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a2a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007a2c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007a32:	2000      	movs	r0, #0
 8007a34:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a36:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007a38:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a3c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a3e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007a42:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a44:	4b35      	ldr	r3, [pc, #212]	@ (8007b1c <pvPortMalloc+0x11c>)
 8007a46:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a48:	4b35      	ldr	r3, [pc, #212]	@ (8007b20 <pvPortMalloc+0x120>)
 8007a4a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a50:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a52:	682e      	ldr	r6, [r5, #0]
 8007a54:	4226      	tst	r6, r4
 8007a56:	d152      	bne.n	8007afe <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8007a58:	2c00      	cmp	r4, #0
 8007a5a:	d043      	beq.n	8007ae4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8007a5c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a60:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a62:	bf1c      	itt	ne
 8007a64:	f023 0307 	bicne.w	r3, r3, #7
 8007a68:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d047      	beq.n	8007afe <pvPortMalloc+0xfe>
 8007a6e:	4f2c      	ldr	r7, [pc, #176]	@ (8007b20 <pvPortMalloc+0x120>)
 8007a70:	683c      	ldr	r4, [r7, #0]
 8007a72:	429c      	cmp	r4, r3
 8007a74:	d343      	bcc.n	8007afe <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8007a76:	4a28      	ldr	r2, [pc, #160]	@ (8007b18 <pvPortMalloc+0x118>)
 8007a78:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a7a:	6868      	ldr	r0, [r5, #4]
 8007a7c:	4298      	cmp	r0, r3
 8007a7e:	d204      	bcs.n	8007a8a <pvPortMalloc+0x8a>
 8007a80:	f8d5 c000 	ldr.w	ip, [r5]
 8007a84:	f1bc 0f00 	cmp.w	ip, #0
 8007a88:	d115      	bne.n	8007ab6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8007a8a:	6809      	ldr	r1, [r1, #0]
 8007a8c:	42a9      	cmp	r1, r5
 8007a8e:	d036      	beq.n	8007afe <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a90:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a92:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a96:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a98:	1ac2      	subs	r2, r0, r3
 8007a9a:	2a10      	cmp	r2, #16
 8007a9c:	d912      	bls.n	8007ac4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a9e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa0:	0741      	lsls	r1, r0, #29
 8007aa2:	d00b      	beq.n	8007abc <pvPortMalloc+0xbc>
 8007aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	e7fe      	b.n	8007ab4 <pvPortMalloc+0xb4>
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	4665      	mov	r5, ip
 8007aba:	e7de      	b.n	8007a7a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007abc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007abe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ac0:	f7ff ff78 	bl	80079b4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ac4:	4915      	ldr	r1, [pc, #84]	@ (8007b1c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ac8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007aca:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007acc:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ace:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8007ad2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad6:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ad8:	bf38      	it	cc
 8007ada:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007adc:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ade:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8007ae2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007ae4:	f7ff f9e6 	bl	8006eb4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ae8:	0763      	lsls	r3, r4, #29
 8007aea:	d00a      	beq.n	8007b02 <pvPortMalloc+0x102>
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	e7fe      	b.n	8007afc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8007afe:	2400      	movs	r4, #0
 8007b00:	e7f0      	b.n	8007ae4 <pvPortMalloc+0xe4>
}
 8007b02:	4620      	mov	r0, r4
 8007b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b08:	200015f8 	.word	0x200015f8
 8007b0c:	200015ec 	.word	0x200015ec
 8007b10:	20001604 	.word	0x20001604
 8007b14:	20008b34 	.word	0x20008b34
 8007b18:	200015fc 	.word	0x200015fc
 8007b1c:	200015f0 	.word	0x200015f0
 8007b20:	200015f4 	.word	0x200015f4

08007b24 <vPortFree>:
{
 8007b24:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007b26:	4604      	mov	r4, r0
 8007b28:	b370      	cbz	r0, 8007b88 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b2a:	4a18      	ldr	r2, [pc, #96]	@ (8007b8c <vPortFree+0x68>)
 8007b2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	4213      	tst	r3, r2
 8007b34:	d108      	bne.n	8007b48 <vPortFree+0x24>
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	e7fe      	b.n	8007b46 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b48:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007b4c:	b141      	cbz	r1, 8007b60 <vPortFree+0x3c>
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	e7fe      	b.n	8007b5e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b60:	ea23 0302 	bic.w	r3, r3, r2
 8007b64:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007b68:	f7ff f900 	bl	8006d6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b6c:	4a08      	ldr	r2, [pc, #32]	@ (8007b90 <vPortFree+0x6c>)
 8007b6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007b72:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b74:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b78:	440b      	add	r3, r1
 8007b7a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b7c:	f7ff ff1a 	bl	80079b4 <prvInsertBlockIntoFreeList>
}
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007b84:	f7ff b996 	b.w	8006eb4 <xTaskResumeAll>
}
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	200015ec 	.word	0x200015ec
 8007b90:	200015f4 	.word	0x200015f4

08007b94 <malloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <malloc+0xc>)
 8007b96:	4601      	mov	r1, r0
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f000 b825 	b.w	8007be8 <_malloc_r>
 8007b9e:	bf00      	nop
 8007ba0:	2000018c 	.word	0x2000018c

08007ba4 <sbrk_aligned>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8007be4 <sbrk_aligned+0x40>)
 8007ba8:	460c      	mov	r4, r1
 8007baa:	6831      	ldr	r1, [r6, #0]
 8007bac:	4605      	mov	r5, r0
 8007bae:	b911      	cbnz	r1, 8007bb6 <sbrk_aligned+0x12>
 8007bb0:	f001 ffbe 	bl	8009b30 <_sbrk_r>
 8007bb4:	6030      	str	r0, [r6, #0]
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f001 ffb9 	bl	8009b30 <_sbrk_r>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d103      	bne.n	8007bca <sbrk_aligned+0x26>
 8007bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	bd70      	pop	{r4, r5, r6, pc}
 8007bca:	1cc4      	adds	r4, r0, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d0f8      	beq.n	8007bc6 <sbrk_aligned+0x22>
 8007bd4:	1a21      	subs	r1, r4, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f001 ffaa 	bl	8009b30 <_sbrk_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d1f2      	bne.n	8007bc6 <sbrk_aligned+0x22>
 8007be0:	e7ef      	b.n	8007bc2 <sbrk_aligned+0x1e>
 8007be2:	bf00      	nop
 8007be4:	20008b34 	.word	0x20008b34

08007be8 <_malloc_r>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	1ccd      	adds	r5, r1, #3
 8007bee:	f025 0503 	bic.w	r5, r5, #3
 8007bf2:	3508      	adds	r5, #8
 8007bf4:	2d0c      	cmp	r5, #12
 8007bf6:	bf38      	it	cc
 8007bf8:	250c      	movcc	r5, #12
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	db01      	blt.n	8007c04 <_malloc_r+0x1c>
 8007c00:	42a9      	cmp	r1, r5
 8007c02:	d904      	bls.n	8007c0e <_malloc_r+0x26>
 8007c04:	230c      	movs	r3, #12
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ce4 <_malloc_r+0xfc>
 8007c12:	f000 f869 	bl	8007ce8 <__malloc_lock>
 8007c16:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1a:	461c      	mov	r4, r3
 8007c1c:	bb44      	cbnz	r4, 8007c70 <_malloc_r+0x88>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff ffbf 	bl	8007ba4 <sbrk_aligned>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	4604      	mov	r4, r0
 8007c2a:	d158      	bne.n	8007cde <_malloc_r+0xf6>
 8007c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c30:	4627      	mov	r7, r4
 8007c32:	2f00      	cmp	r7, #0
 8007c34:	d143      	bne.n	8007cbe <_malloc_r+0xd6>
 8007c36:	2c00      	cmp	r4, #0
 8007c38:	d04b      	beq.n	8007cd2 <_malloc_r+0xea>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4630      	mov	r0, r6
 8007c40:	eb04 0903 	add.w	r9, r4, r3
 8007c44:	f001 ff74 	bl	8009b30 <_sbrk_r>
 8007c48:	4581      	cmp	r9, r0
 8007c4a:	d142      	bne.n	8007cd2 <_malloc_r+0xea>
 8007c4c:	6821      	ldr	r1, [r4, #0]
 8007c4e:	1a6d      	subs	r5, r5, r1
 8007c50:	4629      	mov	r1, r5
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ffa6 	bl	8007ba4 <sbrk_aligned>
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d03a      	beq.n	8007cd2 <_malloc_r+0xea>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	442b      	add	r3, r5
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	f8d8 3000 	ldr.w	r3, [r8]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	bb62      	cbnz	r2, 8007cc4 <_malloc_r+0xdc>
 8007c6a:	f8c8 7000 	str.w	r7, [r8]
 8007c6e:	e00f      	b.n	8007c90 <_malloc_r+0xa8>
 8007c70:	6822      	ldr	r2, [r4, #0]
 8007c72:	1b52      	subs	r2, r2, r5
 8007c74:	d420      	bmi.n	8007cb8 <_malloc_r+0xd0>
 8007c76:	2a0b      	cmp	r2, #11
 8007c78:	d917      	bls.n	8007caa <_malloc_r+0xc2>
 8007c7a:	1961      	adds	r1, r4, r5
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	6025      	str	r5, [r4, #0]
 8007c80:	bf18      	it	ne
 8007c82:	6059      	strne	r1, [r3, #4]
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	bf08      	it	eq
 8007c88:	f8c8 1000 	streq.w	r1, [r8]
 8007c8c:	5162      	str	r2, [r4, r5]
 8007c8e:	604b      	str	r3, [r1, #4]
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 f82f 	bl	8007cf4 <__malloc_unlock>
 8007c96:	f104 000b 	add.w	r0, r4, #11
 8007c9a:	1d23      	adds	r3, r4, #4
 8007c9c:	f020 0007 	bic.w	r0, r0, #7
 8007ca0:	1ac2      	subs	r2, r0, r3
 8007ca2:	bf1c      	itt	ne
 8007ca4:	1a1b      	subne	r3, r3, r0
 8007ca6:	50a3      	strne	r3, [r4, r2]
 8007ca8:	e7af      	b.n	8007c0a <_malloc_r+0x22>
 8007caa:	6862      	ldr	r2, [r4, #4]
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	bf0c      	ite	eq
 8007cb0:	f8c8 2000 	streq.w	r2, [r8]
 8007cb4:	605a      	strne	r2, [r3, #4]
 8007cb6:	e7eb      	b.n	8007c90 <_malloc_r+0xa8>
 8007cb8:	4623      	mov	r3, r4
 8007cba:	6864      	ldr	r4, [r4, #4]
 8007cbc:	e7ae      	b.n	8007c1c <_malloc_r+0x34>
 8007cbe:	463c      	mov	r4, r7
 8007cc0:	687f      	ldr	r7, [r7, #4]
 8007cc2:	e7b6      	b.n	8007c32 <_malloc_r+0x4a>
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d1fb      	bne.n	8007cc4 <_malloc_r+0xdc>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6053      	str	r3, [r2, #4]
 8007cd0:	e7de      	b.n	8007c90 <_malloc_r+0xa8>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	6033      	str	r3, [r6, #0]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 f80c 	bl	8007cf4 <__malloc_unlock>
 8007cdc:	e794      	b.n	8007c08 <_malloc_r+0x20>
 8007cde:	6005      	str	r5, [r0, #0]
 8007ce0:	e7d6      	b.n	8007c90 <_malloc_r+0xa8>
 8007ce2:	bf00      	nop
 8007ce4:	20008b38 	.word	0x20008b38

08007ce8 <__malloc_lock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	@ (8007cf0 <__malloc_lock+0x8>)
 8007cea:	f7fb bd90 	b.w	800380e <__retarget_lock_acquire_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20000ba4 	.word	0x20000ba4

08007cf4 <__malloc_unlock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	@ (8007cfc <__malloc_unlock+0x8>)
 8007cf6:	f7fb bd96 	b.w	8003826 <__retarget_lock_release_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	20000ba4 	.word	0x20000ba4

08007d00 <sulp>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	4604      	mov	r4, r0
 8007d04:	460d      	mov	r5, r1
 8007d06:	ec45 4b10 	vmov	d0, r4, r5
 8007d0a:	4616      	mov	r6, r2
 8007d0c:	f003 fcda 	bl	800b6c4 <__ulp>
 8007d10:	ec51 0b10 	vmov	r0, r1, d0
 8007d14:	b17e      	cbz	r6, 8007d36 <sulp+0x36>
 8007d16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d1a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dd09      	ble.n	8007d36 <sulp+0x36>
 8007d22:	051b      	lsls	r3, r3, #20
 8007d24:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007d28:	2400      	movs	r4, #0
 8007d2a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007d2e:	4622      	mov	r2, r4
 8007d30:	462b      	mov	r3, r5
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	ec41 0b10 	vmov	d0, r0, r1
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	0000      	movs	r0, r0
	...

08007d40 <_strtod_l>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	b09f      	sub	sp, #124	@ 0x7c
 8007d46:	460c      	mov	r4, r1
 8007d48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007d4e:	9005      	str	r0, [sp, #20]
 8007d50:	f04f 0a00 	mov.w	sl, #0
 8007d54:	f04f 0b00 	mov.w	fp, #0
 8007d58:	460a      	mov	r2, r1
 8007d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d5c:	7811      	ldrb	r1, [r2, #0]
 8007d5e:	292b      	cmp	r1, #43	@ 0x2b
 8007d60:	d04a      	beq.n	8007df8 <_strtod_l+0xb8>
 8007d62:	d838      	bhi.n	8007dd6 <_strtod_l+0x96>
 8007d64:	290d      	cmp	r1, #13
 8007d66:	d832      	bhi.n	8007dce <_strtod_l+0x8e>
 8007d68:	2908      	cmp	r1, #8
 8007d6a:	d832      	bhi.n	8007dd2 <_strtod_l+0x92>
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d03b      	beq.n	8007de8 <_strtod_l+0xa8>
 8007d70:	2200      	movs	r2, #0
 8007d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007d74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007d76:	782a      	ldrb	r2, [r5, #0]
 8007d78:	2a30      	cmp	r2, #48	@ 0x30
 8007d7a:	f040 80b3 	bne.w	8007ee4 <_strtod_l+0x1a4>
 8007d7e:	786a      	ldrb	r2, [r5, #1]
 8007d80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d84:	2a58      	cmp	r2, #88	@ 0x58
 8007d86:	d16e      	bne.n	8007e66 <_strtod_l+0x126>
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4a8e      	ldr	r2, [pc, #568]	@ (8007fcc <_strtod_l+0x28c>)
 8007d94:	9805      	ldr	r0, [sp, #20]
 8007d96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d98:	a919      	add	r1, sp, #100	@ 0x64
 8007d9a:	f002 fe3b 	bl	800aa14 <__gethex>
 8007d9e:	f010 060f 	ands.w	r6, r0, #15
 8007da2:	4604      	mov	r4, r0
 8007da4:	d005      	beq.n	8007db2 <_strtod_l+0x72>
 8007da6:	2e06      	cmp	r6, #6
 8007da8:	d128      	bne.n	8007dfc <_strtod_l+0xbc>
 8007daa:	3501      	adds	r5, #1
 8007dac:	2300      	movs	r3, #0
 8007dae:	9519      	str	r5, [sp, #100]	@ 0x64
 8007db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007db2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f040 858e 	bne.w	80088d6 <_strtod_l+0xb96>
 8007dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dbc:	b1cb      	cbz	r3, 8007df2 <_strtod_l+0xb2>
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007dc4:	ec43 2b10 	vmov	d0, r2, r3
 8007dc8:	b01f      	add	sp, #124	@ 0x7c
 8007dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dce:	2920      	cmp	r1, #32
 8007dd0:	d1ce      	bne.n	8007d70 <_strtod_l+0x30>
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	e7c1      	b.n	8007d5a <_strtod_l+0x1a>
 8007dd6:	292d      	cmp	r1, #45	@ 0x2d
 8007dd8:	d1ca      	bne.n	8007d70 <_strtod_l+0x30>
 8007dda:	2101      	movs	r1, #1
 8007ddc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007dde:	1c51      	adds	r1, r2, #1
 8007de0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007de2:	7852      	ldrb	r2, [r2, #1]
 8007de4:	2a00      	cmp	r2, #0
 8007de6:	d1c5      	bne.n	8007d74 <_strtod_l+0x34>
 8007de8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007dea:	9419      	str	r4, [sp, #100]	@ 0x64
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f040 8570 	bne.w	80088d2 <_strtod_l+0xb92>
 8007df2:	4652      	mov	r2, sl
 8007df4:	465b      	mov	r3, fp
 8007df6:	e7e5      	b.n	8007dc4 <_strtod_l+0x84>
 8007df8:	2100      	movs	r1, #0
 8007dfa:	e7ef      	b.n	8007ddc <_strtod_l+0x9c>
 8007dfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007dfe:	b13a      	cbz	r2, 8007e10 <_strtod_l+0xd0>
 8007e00:	2135      	movs	r1, #53	@ 0x35
 8007e02:	a81c      	add	r0, sp, #112	@ 0x70
 8007e04:	f003 fd58 	bl	800b8b8 <__copybits>
 8007e08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e0a:	9805      	ldr	r0, [sp, #20]
 8007e0c:	f003 f926 	bl	800b05c <_Bfree>
 8007e10:	3e01      	subs	r6, #1
 8007e12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007e14:	2e04      	cmp	r6, #4
 8007e16:	d806      	bhi.n	8007e26 <_strtod_l+0xe6>
 8007e18:	e8df f006 	tbb	[pc, r6]
 8007e1c:	201d0314 	.word	0x201d0314
 8007e20:	14          	.byte	0x14
 8007e21:	00          	.byte	0x00
 8007e22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007e26:	05e1      	lsls	r1, r4, #23
 8007e28:	bf48      	it	mi
 8007e2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e32:	0d1b      	lsrs	r3, r3, #20
 8007e34:	051b      	lsls	r3, r3, #20
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1bb      	bne.n	8007db2 <_strtod_l+0x72>
 8007e3a:	f001 fe9b 	bl	8009b74 <__errno>
 8007e3e:	2322      	movs	r3, #34	@ 0x22
 8007e40:	6003      	str	r3, [r0, #0]
 8007e42:	e7b6      	b.n	8007db2 <_strtod_l+0x72>
 8007e44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007e48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007e4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007e50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e54:	e7e7      	b.n	8007e26 <_strtod_l+0xe6>
 8007e56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007fd4 <_strtod_l+0x294>
 8007e5a:	e7e4      	b.n	8007e26 <_strtod_l+0xe6>
 8007e5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007e60:	f04f 3aff 	mov.w	sl, #4294967295
 8007e64:	e7df      	b.n	8007e26 <_strtod_l+0xe6>
 8007e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b30      	cmp	r3, #48	@ 0x30
 8007e70:	d0f9      	beq.n	8007e66 <_strtod_l+0x126>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d09d      	beq.n	8007db2 <_strtod_l+0x72>
 8007e76:	2301      	movs	r3, #1
 8007e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9308      	str	r3, [sp, #32]
 8007e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e84:	461f      	mov	r7, r3
 8007e86:	220a      	movs	r2, #10
 8007e88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007e8a:	7805      	ldrb	r5, [r0, #0]
 8007e8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007e90:	b2d9      	uxtb	r1, r3
 8007e92:	2909      	cmp	r1, #9
 8007e94:	d928      	bls.n	8007ee8 <_strtod_l+0x1a8>
 8007e96:	494e      	ldr	r1, [pc, #312]	@ (8007fd0 <_strtod_l+0x290>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f001 fde9 	bl	8009a70 <strncmp>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d032      	beq.n	8007f08 <_strtod_l+0x1c8>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4681      	mov	r9, r0
 8007ea8:	463d      	mov	r5, r7
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2a65      	cmp	r2, #101	@ 0x65
 8007eae:	d001      	beq.n	8007eb4 <_strtod_l+0x174>
 8007eb0:	2a45      	cmp	r2, #69	@ 0x45
 8007eb2:	d114      	bne.n	8007ede <_strtod_l+0x19e>
 8007eb4:	b91d      	cbnz	r5, 8007ebe <_strtod_l+0x17e>
 8007eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eb8:	4302      	orrs	r2, r0
 8007eba:	d095      	beq.n	8007de8 <_strtod_l+0xa8>
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007ec0:	1c62      	adds	r2, r4, #1
 8007ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ec4:	7862      	ldrb	r2, [r4, #1]
 8007ec6:	2a2b      	cmp	r2, #43	@ 0x2b
 8007ec8:	d077      	beq.n	8007fba <_strtod_l+0x27a>
 8007eca:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ecc:	d07b      	beq.n	8007fc6 <_strtod_l+0x286>
 8007ece:	f04f 0c00 	mov.w	ip, #0
 8007ed2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007ed6:	2909      	cmp	r1, #9
 8007ed8:	f240 8082 	bls.w	8007fe0 <_strtod_l+0x2a0>
 8007edc:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ede:	f04f 0800 	mov.w	r8, #0
 8007ee2:	e0a2      	b.n	800802a <_strtod_l+0x2ea>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e7c7      	b.n	8007e78 <_strtod_l+0x138>
 8007ee8:	2f08      	cmp	r7, #8
 8007eea:	bfd5      	itete	le
 8007eec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007eee:	9908      	ldrgt	r1, [sp, #32]
 8007ef0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ef4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007ef8:	f100 0001 	add.w	r0, r0, #1
 8007efc:	bfd4      	ite	le
 8007efe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007f00:	9308      	strgt	r3, [sp, #32]
 8007f02:	3701      	adds	r7, #1
 8007f04:	9019      	str	r0, [sp, #100]	@ 0x64
 8007f06:	e7bf      	b.n	8007e88 <_strtod_l+0x148>
 8007f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f0e:	785a      	ldrb	r2, [r3, #1]
 8007f10:	b37f      	cbz	r7, 8007f72 <_strtod_l+0x232>
 8007f12:	4681      	mov	r9, r0
 8007f14:	463d      	mov	r5, r7
 8007f16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d912      	bls.n	8007f44 <_strtod_l+0x204>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e7c4      	b.n	8007eac <_strtod_l+0x16c>
 8007f22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f28:	785a      	ldrb	r2, [r3, #1]
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	2a30      	cmp	r2, #48	@ 0x30
 8007f2e:	d0f8      	beq.n	8007f22 <_strtod_l+0x1e2>
 8007f30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	f200 84d3 	bhi.w	80088e0 <_strtod_l+0xba0>
 8007f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f3e:	4681      	mov	r9, r0
 8007f40:	2000      	movs	r0, #0
 8007f42:	4605      	mov	r5, r0
 8007f44:	3a30      	subs	r2, #48	@ 0x30
 8007f46:	f100 0301 	add.w	r3, r0, #1
 8007f4a:	d02a      	beq.n	8007fa2 <_strtod_l+0x262>
 8007f4c:	4499      	add	r9, r3
 8007f4e:	eb00 0c05 	add.w	ip, r0, r5
 8007f52:	462b      	mov	r3, r5
 8007f54:	210a      	movs	r1, #10
 8007f56:	4563      	cmp	r3, ip
 8007f58:	d10d      	bne.n	8007f76 <_strtod_l+0x236>
 8007f5a:	1c69      	adds	r1, r5, #1
 8007f5c:	4401      	add	r1, r0
 8007f5e:	4428      	add	r0, r5
 8007f60:	2808      	cmp	r0, #8
 8007f62:	dc16      	bgt.n	8007f92 <_strtod_l+0x252>
 8007f64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f66:	230a      	movs	r3, #10
 8007f68:	fb03 2300 	mla	r3, r3, r0, r2
 8007f6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e018      	b.n	8007fa4 <_strtod_l+0x264>
 8007f72:	4638      	mov	r0, r7
 8007f74:	e7da      	b.n	8007f2c <_strtod_l+0x1ec>
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	f103 0301 	add.w	r3, r3, #1
 8007f7c:	dc03      	bgt.n	8007f86 <_strtod_l+0x246>
 8007f7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007f80:	434e      	muls	r6, r1
 8007f82:	960a      	str	r6, [sp, #40]	@ 0x28
 8007f84:	e7e7      	b.n	8007f56 <_strtod_l+0x216>
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	bfde      	ittt	le
 8007f8a:	9e08      	ldrle	r6, [sp, #32]
 8007f8c:	434e      	mulle	r6, r1
 8007f8e:	9608      	strle	r6, [sp, #32]
 8007f90:	e7e1      	b.n	8007f56 <_strtod_l+0x216>
 8007f92:	280f      	cmp	r0, #15
 8007f94:	dceb      	bgt.n	8007f6e <_strtod_l+0x22e>
 8007f96:	9808      	ldr	r0, [sp, #32]
 8007f98:	230a      	movs	r3, #10
 8007f9a:	fb03 2300 	mla	r3, r3, r0, r2
 8007f9e:	9308      	str	r3, [sp, #32]
 8007fa0:	e7e5      	b.n	8007f6e <_strtod_l+0x22e>
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fa6:	1c50      	adds	r0, r2, #1
 8007fa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007faa:	7852      	ldrb	r2, [r2, #1]
 8007fac:	4618      	mov	r0, r3
 8007fae:	460d      	mov	r5, r1
 8007fb0:	e7b1      	b.n	8007f16 <_strtod_l+0x1d6>
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e77d      	b.n	8007eb6 <_strtod_l+0x176>
 8007fba:	f04f 0c00 	mov.w	ip, #0
 8007fbe:	1ca2      	adds	r2, r4, #2
 8007fc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fc2:	78a2      	ldrb	r2, [r4, #2]
 8007fc4:	e785      	b.n	8007ed2 <_strtod_l+0x192>
 8007fc6:	f04f 0c01 	mov.w	ip, #1
 8007fca:	e7f8      	b.n	8007fbe <_strtod_l+0x27e>
 8007fcc:	0800e060 	.word	0x0800e060
 8007fd0:	0800e04a 	.word	0x0800e04a
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007fda:	1c51      	adds	r1, r2, #1
 8007fdc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fde:	7852      	ldrb	r2, [r2, #1]
 8007fe0:	2a30      	cmp	r2, #48	@ 0x30
 8007fe2:	d0f9      	beq.n	8007fd8 <_strtod_l+0x298>
 8007fe4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007fe8:	2908      	cmp	r1, #8
 8007fea:	f63f af78 	bhi.w	8007ede <_strtod_l+0x19e>
 8007fee:	3a30      	subs	r2, #48	@ 0x30
 8007ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ff4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007ff6:	f04f 080a 	mov.w	r8, #10
 8007ffa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ffc:	1c56      	adds	r6, r2, #1
 8007ffe:	9619      	str	r6, [sp, #100]	@ 0x64
 8008000:	7852      	ldrb	r2, [r2, #1]
 8008002:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008006:	f1be 0f09 	cmp.w	lr, #9
 800800a:	d939      	bls.n	8008080 <_strtod_l+0x340>
 800800c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800800e:	1a76      	subs	r6, r6, r1
 8008010:	2e08      	cmp	r6, #8
 8008012:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008016:	dc03      	bgt.n	8008020 <_strtod_l+0x2e0>
 8008018:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800801a:	4588      	cmp	r8, r1
 800801c:	bfa8      	it	ge
 800801e:	4688      	movge	r8, r1
 8008020:	f1bc 0f00 	cmp.w	ip, #0
 8008024:	d001      	beq.n	800802a <_strtod_l+0x2ea>
 8008026:	f1c8 0800 	rsb	r8, r8, #0
 800802a:	2d00      	cmp	r5, #0
 800802c:	d14e      	bne.n	80080cc <_strtod_l+0x38c>
 800802e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008030:	4308      	orrs	r0, r1
 8008032:	f47f aebe 	bne.w	8007db2 <_strtod_l+0x72>
 8008036:	2b00      	cmp	r3, #0
 8008038:	f47f aed6 	bne.w	8007de8 <_strtod_l+0xa8>
 800803c:	2a69      	cmp	r2, #105	@ 0x69
 800803e:	d028      	beq.n	8008092 <_strtod_l+0x352>
 8008040:	dc25      	bgt.n	800808e <_strtod_l+0x34e>
 8008042:	2a49      	cmp	r2, #73	@ 0x49
 8008044:	d025      	beq.n	8008092 <_strtod_l+0x352>
 8008046:	2a4e      	cmp	r2, #78	@ 0x4e
 8008048:	f47f aece 	bne.w	8007de8 <_strtod_l+0xa8>
 800804c:	499b      	ldr	r1, [pc, #620]	@ (80082bc <_strtod_l+0x57c>)
 800804e:	a819      	add	r0, sp, #100	@ 0x64
 8008050:	f002 ff02 	bl	800ae58 <__match>
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f aec7 	beq.w	8007de8 <_strtod_l+0xa8>
 800805a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b28      	cmp	r3, #40	@ 0x28
 8008060:	d12e      	bne.n	80080c0 <_strtod_l+0x380>
 8008062:	4997      	ldr	r1, [pc, #604]	@ (80082c0 <_strtod_l+0x580>)
 8008064:	aa1c      	add	r2, sp, #112	@ 0x70
 8008066:	a819      	add	r0, sp, #100	@ 0x64
 8008068:	f002 ff0a 	bl	800ae80 <__hexnan>
 800806c:	2805      	cmp	r0, #5
 800806e:	d127      	bne.n	80080c0 <_strtod_l+0x380>
 8008070:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008072:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008076:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800807a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800807e:	e698      	b.n	8007db2 <_strtod_l+0x72>
 8008080:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008082:	fb08 2101 	mla	r1, r8, r1, r2
 8008086:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800808a:	920e      	str	r2, [sp, #56]	@ 0x38
 800808c:	e7b5      	b.n	8007ffa <_strtod_l+0x2ba>
 800808e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008090:	e7da      	b.n	8008048 <_strtod_l+0x308>
 8008092:	498c      	ldr	r1, [pc, #560]	@ (80082c4 <_strtod_l+0x584>)
 8008094:	a819      	add	r0, sp, #100	@ 0x64
 8008096:	f002 fedf 	bl	800ae58 <__match>
 800809a:	2800      	cmp	r0, #0
 800809c:	f43f aea4 	beq.w	8007de8 <_strtod_l+0xa8>
 80080a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080a2:	4989      	ldr	r1, [pc, #548]	@ (80082c8 <_strtod_l+0x588>)
 80080a4:	3b01      	subs	r3, #1
 80080a6:	a819      	add	r0, sp, #100	@ 0x64
 80080a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80080aa:	f002 fed5 	bl	800ae58 <__match>
 80080ae:	b910      	cbnz	r0, 80080b6 <_strtod_l+0x376>
 80080b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080b2:	3301      	adds	r3, #1
 80080b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80080b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80082d8 <_strtod_l+0x598>
 80080ba:	f04f 0a00 	mov.w	sl, #0
 80080be:	e678      	b.n	8007db2 <_strtod_l+0x72>
 80080c0:	4882      	ldr	r0, [pc, #520]	@ (80082cc <_strtod_l+0x58c>)
 80080c2:	f001 fd99 	bl	8009bf8 <nan>
 80080c6:	ec5b ab10 	vmov	sl, fp, d0
 80080ca:	e672      	b.n	8007db2 <_strtod_l+0x72>
 80080cc:	eba8 0309 	sub.w	r3, r8, r9
 80080d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d4:	2f00      	cmp	r7, #0
 80080d6:	bf08      	it	eq
 80080d8:	462f      	moveq	r7, r5
 80080da:	2d10      	cmp	r5, #16
 80080dc:	462c      	mov	r4, r5
 80080de:	bfa8      	it	ge
 80080e0:	2410      	movge	r4, #16
 80080e2:	f7f8 fa0f 	bl	8000504 <__aeabi_ui2d>
 80080e6:	2d09      	cmp	r5, #9
 80080e8:	4682      	mov	sl, r0
 80080ea:	468b      	mov	fp, r1
 80080ec:	dc13      	bgt.n	8008116 <_strtod_l+0x3d6>
 80080ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f43f ae5e 	beq.w	8007db2 <_strtod_l+0x72>
 80080f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f8:	dd78      	ble.n	80081ec <_strtod_l+0x4ac>
 80080fa:	2b16      	cmp	r3, #22
 80080fc:	dc5f      	bgt.n	80081be <_strtod_l+0x47e>
 80080fe:	4974      	ldr	r1, [pc, #464]	@ (80082d0 <_strtod_l+0x590>)
 8008100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008108:	4652      	mov	r2, sl
 800810a:	465b      	mov	r3, fp
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	4682      	mov	sl, r0
 8008112:	468b      	mov	fp, r1
 8008114:	e64d      	b.n	8007db2 <_strtod_l+0x72>
 8008116:	4b6e      	ldr	r3, [pc, #440]	@ (80082d0 <_strtod_l+0x590>)
 8008118:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800811c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008120:	f7f8 fa6a 	bl	80005f8 <__aeabi_dmul>
 8008124:	4682      	mov	sl, r0
 8008126:	9808      	ldr	r0, [sp, #32]
 8008128:	468b      	mov	fp, r1
 800812a:	f7f8 f9eb 	bl	8000504 <__aeabi_ui2d>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4650      	mov	r0, sl
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 f8a9 	bl	800028c <__adddf3>
 800813a:	2d0f      	cmp	r5, #15
 800813c:	4682      	mov	sl, r0
 800813e:	468b      	mov	fp, r1
 8008140:	ddd5      	ble.n	80080ee <_strtod_l+0x3ae>
 8008142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008144:	1b2c      	subs	r4, r5, r4
 8008146:	441c      	add	r4, r3
 8008148:	2c00      	cmp	r4, #0
 800814a:	f340 8096 	ble.w	800827a <_strtod_l+0x53a>
 800814e:	f014 030f 	ands.w	r3, r4, #15
 8008152:	d00a      	beq.n	800816a <_strtod_l+0x42a>
 8008154:	495e      	ldr	r1, [pc, #376]	@ (80082d0 <_strtod_l+0x590>)
 8008156:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008162:	f7f8 fa49 	bl	80005f8 <__aeabi_dmul>
 8008166:	4682      	mov	sl, r0
 8008168:	468b      	mov	fp, r1
 800816a:	f034 040f 	bics.w	r4, r4, #15
 800816e:	d073      	beq.n	8008258 <_strtod_l+0x518>
 8008170:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008174:	dd48      	ble.n	8008208 <_strtod_l+0x4c8>
 8008176:	2400      	movs	r4, #0
 8008178:	46a0      	mov	r8, r4
 800817a:	940a      	str	r4, [sp, #40]	@ 0x28
 800817c:	46a1      	mov	r9, r4
 800817e:	9a05      	ldr	r2, [sp, #20]
 8008180:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80082d8 <_strtod_l+0x598>
 8008184:	2322      	movs	r3, #34	@ 0x22
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	f04f 0a00 	mov.w	sl, #0
 800818c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	f43f ae0f 	beq.w	8007db2 <_strtod_l+0x72>
 8008194:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008196:	9805      	ldr	r0, [sp, #20]
 8008198:	f002 ff60 	bl	800b05c <_Bfree>
 800819c:	9805      	ldr	r0, [sp, #20]
 800819e:	4649      	mov	r1, r9
 80081a0:	f002 ff5c 	bl	800b05c <_Bfree>
 80081a4:	9805      	ldr	r0, [sp, #20]
 80081a6:	4641      	mov	r1, r8
 80081a8:	f002 ff58 	bl	800b05c <_Bfree>
 80081ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081ae:	9805      	ldr	r0, [sp, #20]
 80081b0:	f002 ff54 	bl	800b05c <_Bfree>
 80081b4:	9805      	ldr	r0, [sp, #20]
 80081b6:	4621      	mov	r1, r4
 80081b8:	f002 ff50 	bl	800b05c <_Bfree>
 80081bc:	e5f9      	b.n	8007db2 <_strtod_l+0x72>
 80081be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80081c4:	4293      	cmp	r3, r2
 80081c6:	dbbc      	blt.n	8008142 <_strtod_l+0x402>
 80081c8:	4c41      	ldr	r4, [pc, #260]	@ (80082d0 <_strtod_l+0x590>)
 80081ca:	f1c5 050f 	rsb	r5, r5, #15
 80081ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081da:	f7f8 fa0d 	bl	80005f8 <__aeabi_dmul>
 80081de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e0:	1b5d      	subs	r5, r3, r5
 80081e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80081e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081ea:	e78f      	b.n	800810c <_strtod_l+0x3cc>
 80081ec:	3316      	adds	r3, #22
 80081ee:	dba8      	blt.n	8008142 <_strtod_l+0x402>
 80081f0:	4b37      	ldr	r3, [pc, #220]	@ (80082d0 <_strtod_l+0x590>)
 80081f2:	eba9 0808 	sub.w	r8, r9, r8
 80081f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80081fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80081fe:	4650      	mov	r0, sl
 8008200:	4659      	mov	r1, fp
 8008202:	f7f8 fb23 	bl	800084c <__aeabi_ddiv>
 8008206:	e783      	b.n	8008110 <_strtod_l+0x3d0>
 8008208:	4b32      	ldr	r3, [pc, #200]	@ (80082d4 <_strtod_l+0x594>)
 800820a:	9308      	str	r3, [sp, #32]
 800820c:	2300      	movs	r3, #0
 800820e:	1124      	asrs	r4, r4, #4
 8008210:	4650      	mov	r0, sl
 8008212:	4659      	mov	r1, fp
 8008214:	461e      	mov	r6, r3
 8008216:	2c01      	cmp	r4, #1
 8008218:	dc21      	bgt.n	800825e <_strtod_l+0x51e>
 800821a:	b10b      	cbz	r3, 8008220 <_strtod_l+0x4e0>
 800821c:	4682      	mov	sl, r0
 800821e:	468b      	mov	fp, r1
 8008220:	492c      	ldr	r1, [pc, #176]	@ (80082d4 <_strtod_l+0x594>)
 8008222:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008226:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800822a:	4652      	mov	r2, sl
 800822c:	465b      	mov	r3, fp
 800822e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008232:	f7f8 f9e1 	bl	80005f8 <__aeabi_dmul>
 8008236:	4b28      	ldr	r3, [pc, #160]	@ (80082d8 <_strtod_l+0x598>)
 8008238:	460a      	mov	r2, r1
 800823a:	400b      	ands	r3, r1
 800823c:	4927      	ldr	r1, [pc, #156]	@ (80082dc <_strtod_l+0x59c>)
 800823e:	428b      	cmp	r3, r1
 8008240:	4682      	mov	sl, r0
 8008242:	d898      	bhi.n	8008176 <_strtod_l+0x436>
 8008244:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008248:	428b      	cmp	r3, r1
 800824a:	bf86      	itte	hi
 800824c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80082e0 <_strtod_l+0x5a0>
 8008250:	f04f 3aff 	movhi.w	sl, #4294967295
 8008254:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008258:	2300      	movs	r3, #0
 800825a:	9308      	str	r3, [sp, #32]
 800825c:	e07a      	b.n	8008354 <_strtod_l+0x614>
 800825e:	07e2      	lsls	r2, r4, #31
 8008260:	d505      	bpl.n	800826e <_strtod_l+0x52e>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f8 f9c6 	bl	80005f8 <__aeabi_dmul>
 800826c:	2301      	movs	r3, #1
 800826e:	9a08      	ldr	r2, [sp, #32]
 8008270:	3208      	adds	r2, #8
 8008272:	3601      	adds	r6, #1
 8008274:	1064      	asrs	r4, r4, #1
 8008276:	9208      	str	r2, [sp, #32]
 8008278:	e7cd      	b.n	8008216 <_strtod_l+0x4d6>
 800827a:	d0ed      	beq.n	8008258 <_strtod_l+0x518>
 800827c:	4264      	negs	r4, r4
 800827e:	f014 020f 	ands.w	r2, r4, #15
 8008282:	d00a      	beq.n	800829a <_strtod_l+0x55a>
 8008284:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <_strtod_l+0x590>)
 8008286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828a:	4650      	mov	r0, sl
 800828c:	4659      	mov	r1, fp
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f8 fadb 	bl	800084c <__aeabi_ddiv>
 8008296:	4682      	mov	sl, r0
 8008298:	468b      	mov	fp, r1
 800829a:	1124      	asrs	r4, r4, #4
 800829c:	d0dc      	beq.n	8008258 <_strtod_l+0x518>
 800829e:	2c1f      	cmp	r4, #31
 80082a0:	dd20      	ble.n	80082e4 <_strtod_l+0x5a4>
 80082a2:	2400      	movs	r4, #0
 80082a4:	46a0      	mov	r8, r4
 80082a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80082a8:	46a1      	mov	r9, r4
 80082aa:	9a05      	ldr	r2, [sp, #20]
 80082ac:	2322      	movs	r3, #34	@ 0x22
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	f04f 0b00 	mov.w	fp, #0
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e768      	b.n	800818c <_strtod_l+0x44c>
 80082ba:	bf00      	nop
 80082bc:	0800e1ae 	.word	0x0800e1ae
 80082c0:	0800e04c 	.word	0x0800e04c
 80082c4:	0800e1a6 	.word	0x0800e1a6
 80082c8:	0800e1e3 	.word	0x0800e1e3
 80082cc:	0800db6b 	.word	0x0800db6b
 80082d0:	0800e360 	.word	0x0800e360
 80082d4:	0800e338 	.word	0x0800e338
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	7ca00000 	.word	0x7ca00000
 80082e0:	7fefffff 	.word	0x7fefffff
 80082e4:	f014 0310 	ands.w	r3, r4, #16
 80082e8:	bf18      	it	ne
 80082ea:	236a      	movne	r3, #106	@ 0x6a
 80082ec:	4ea9      	ldr	r6, [pc, #676]	@ (8008594 <_strtod_l+0x854>)
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	4650      	mov	r0, sl
 80082f2:	4659      	mov	r1, fp
 80082f4:	2300      	movs	r3, #0
 80082f6:	07e2      	lsls	r2, r4, #31
 80082f8:	d504      	bpl.n	8008304 <_strtod_l+0x5c4>
 80082fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082fe:	f7f8 f97b 	bl	80005f8 <__aeabi_dmul>
 8008302:	2301      	movs	r3, #1
 8008304:	1064      	asrs	r4, r4, #1
 8008306:	f106 0608 	add.w	r6, r6, #8
 800830a:	d1f4      	bne.n	80082f6 <_strtod_l+0x5b6>
 800830c:	b10b      	cbz	r3, 8008312 <_strtod_l+0x5d2>
 800830e:	4682      	mov	sl, r0
 8008310:	468b      	mov	fp, r1
 8008312:	9b08      	ldr	r3, [sp, #32]
 8008314:	b1b3      	cbz	r3, 8008344 <_strtod_l+0x604>
 8008316:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800831a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800831e:	2b00      	cmp	r3, #0
 8008320:	4659      	mov	r1, fp
 8008322:	dd0f      	ble.n	8008344 <_strtod_l+0x604>
 8008324:	2b1f      	cmp	r3, #31
 8008326:	dd55      	ble.n	80083d4 <_strtod_l+0x694>
 8008328:	2b34      	cmp	r3, #52	@ 0x34
 800832a:	bfde      	ittt	le
 800832c:	f04f 33ff 	movle.w	r3, #4294967295
 8008330:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008334:	4093      	lslle	r3, r2
 8008336:	f04f 0a00 	mov.w	sl, #0
 800833a:	bfcc      	ite	gt
 800833c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008340:	ea03 0b01 	andle.w	fp, r3, r1
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	4650      	mov	r0, sl
 800834a:	4659      	mov	r1, fp
 800834c:	f7f8 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008350:	2800      	cmp	r0, #0
 8008352:	d1a6      	bne.n	80082a2 <_strtod_l+0x562>
 8008354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800835a:	9805      	ldr	r0, [sp, #20]
 800835c:	462b      	mov	r3, r5
 800835e:	463a      	mov	r2, r7
 8008360:	f002 fee4 	bl	800b12c <__s2b>
 8008364:	900a      	str	r0, [sp, #40]	@ 0x28
 8008366:	2800      	cmp	r0, #0
 8008368:	f43f af05 	beq.w	8008176 <_strtod_l+0x436>
 800836c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800836e:	2a00      	cmp	r2, #0
 8008370:	eba9 0308 	sub.w	r3, r9, r8
 8008374:	bfa8      	it	ge
 8008376:	2300      	movge	r3, #0
 8008378:	9312      	str	r3, [sp, #72]	@ 0x48
 800837a:	2400      	movs	r4, #0
 800837c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008380:	9316      	str	r3, [sp, #88]	@ 0x58
 8008382:	46a0      	mov	r8, r4
 8008384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008386:	9805      	ldr	r0, [sp, #20]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	f002 fe27 	bl	800afdc <_Balloc>
 800838e:	4681      	mov	r9, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	f43f aef4 	beq.w	800817e <_strtod_l+0x43e>
 8008396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	3202      	adds	r2, #2
 800839c:	f103 010c 	add.w	r1, r3, #12
 80083a0:	0092      	lsls	r2, r2, #2
 80083a2:	300c      	adds	r0, #12
 80083a4:	f001 fc18 	bl	8009bd8 <memcpy>
 80083a8:	ec4b ab10 	vmov	d0, sl, fp
 80083ac:	9805      	ldr	r0, [sp, #20]
 80083ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80083b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80083b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80083b6:	f003 f9f5 	bl	800b7a4 <__d2b>
 80083ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80083bc:	2800      	cmp	r0, #0
 80083be:	f43f aede 	beq.w	800817e <_strtod_l+0x43e>
 80083c2:	9805      	ldr	r0, [sp, #20]
 80083c4:	2101      	movs	r1, #1
 80083c6:	f002 ff47 	bl	800b258 <__i2b>
 80083ca:	4680      	mov	r8, r0
 80083cc:	b948      	cbnz	r0, 80083e2 <_strtod_l+0x6a2>
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	e6d4      	b.n	800817e <_strtod_l+0x43e>
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	ea03 0a0a 	and.w	sl, r3, sl
 80083e0:	e7b0      	b.n	8008344 <_strtod_l+0x604>
 80083e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80083e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	bfab      	itete	ge
 80083ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80083ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80083ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80083f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80083f2:	bfac      	ite	ge
 80083f4:	18ef      	addge	r7, r5, r3
 80083f6:	1b5e      	sublt	r6, r3, r5
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	1aed      	subs	r5, r5, r3
 80083fc:	4415      	add	r5, r2
 80083fe:	4b66      	ldr	r3, [pc, #408]	@ (8008598 <_strtod_l+0x858>)
 8008400:	3d01      	subs	r5, #1
 8008402:	429d      	cmp	r5, r3
 8008404:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008408:	da50      	bge.n	80084ac <_strtod_l+0x76c>
 800840a:	1b5b      	subs	r3, r3, r5
 800840c:	2b1f      	cmp	r3, #31
 800840e:	eba2 0203 	sub.w	r2, r2, r3
 8008412:	f04f 0101 	mov.w	r1, #1
 8008416:	dc3d      	bgt.n	8008494 <_strtod_l+0x754>
 8008418:	fa01 f303 	lsl.w	r3, r1, r3
 800841c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800841e:	2300      	movs	r3, #0
 8008420:	9310      	str	r3, [sp, #64]	@ 0x40
 8008422:	18bd      	adds	r5, r7, r2
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	42af      	cmp	r7, r5
 8008428:	4416      	add	r6, r2
 800842a:	441e      	add	r6, r3
 800842c:	463b      	mov	r3, r7
 800842e:	bfa8      	it	ge
 8008430:	462b      	movge	r3, r5
 8008432:	42b3      	cmp	r3, r6
 8008434:	bfa8      	it	ge
 8008436:	4633      	movge	r3, r6
 8008438:	2b00      	cmp	r3, #0
 800843a:	bfc2      	ittt	gt
 800843c:	1aed      	subgt	r5, r5, r3
 800843e:	1af6      	subgt	r6, r6, r3
 8008440:	1aff      	subgt	r7, r7, r3
 8008442:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008444:	2b00      	cmp	r3, #0
 8008446:	dd16      	ble.n	8008476 <_strtod_l+0x736>
 8008448:	4641      	mov	r1, r8
 800844a:	9805      	ldr	r0, [sp, #20]
 800844c:	461a      	mov	r2, r3
 800844e:	f002 ffc3 	bl	800b3d8 <__pow5mult>
 8008452:	4680      	mov	r8, r0
 8008454:	2800      	cmp	r0, #0
 8008456:	d0ba      	beq.n	80083ce <_strtod_l+0x68e>
 8008458:	4601      	mov	r1, r0
 800845a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800845c:	9805      	ldr	r0, [sp, #20]
 800845e:	f002 ff11 	bl	800b284 <__multiply>
 8008462:	900e      	str	r0, [sp, #56]	@ 0x38
 8008464:	2800      	cmp	r0, #0
 8008466:	f43f ae8a 	beq.w	800817e <_strtod_l+0x43e>
 800846a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800846c:	9805      	ldr	r0, [sp, #20]
 800846e:	f002 fdf5 	bl	800b05c <_Bfree>
 8008472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008474:	931a      	str	r3, [sp, #104]	@ 0x68
 8008476:	2d00      	cmp	r5, #0
 8008478:	dc1d      	bgt.n	80084b6 <_strtod_l+0x776>
 800847a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd23      	ble.n	80084c8 <_strtod_l+0x788>
 8008480:	4649      	mov	r1, r9
 8008482:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008484:	9805      	ldr	r0, [sp, #20]
 8008486:	f002 ffa7 	bl	800b3d8 <__pow5mult>
 800848a:	4681      	mov	r9, r0
 800848c:	b9e0      	cbnz	r0, 80084c8 <_strtod_l+0x788>
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	e674      	b.n	800817e <_strtod_l+0x43e>
 8008494:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008498:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800849c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80084a0:	35e2      	adds	r5, #226	@ 0xe2
 80084a2:	fa01 f305 	lsl.w	r3, r1, r5
 80084a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80084a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80084aa:	e7ba      	b.n	8008422 <_strtod_l+0x6e2>
 80084ac:	2300      	movs	r3, #0
 80084ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80084b0:	2301      	movs	r3, #1
 80084b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084b4:	e7b5      	b.n	8008422 <_strtod_l+0x6e2>
 80084b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084b8:	9805      	ldr	r0, [sp, #20]
 80084ba:	462a      	mov	r2, r5
 80084bc:	f002 ffe6 	bl	800b48c <__lshift>
 80084c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d1d9      	bne.n	800847a <_strtod_l+0x73a>
 80084c6:	e65a      	b.n	800817e <_strtod_l+0x43e>
 80084c8:	2e00      	cmp	r6, #0
 80084ca:	dd07      	ble.n	80084dc <_strtod_l+0x79c>
 80084cc:	4649      	mov	r1, r9
 80084ce:	9805      	ldr	r0, [sp, #20]
 80084d0:	4632      	mov	r2, r6
 80084d2:	f002 ffdb 	bl	800b48c <__lshift>
 80084d6:	4681      	mov	r9, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	d0d8      	beq.n	800848e <_strtod_l+0x74e>
 80084dc:	2f00      	cmp	r7, #0
 80084de:	dd08      	ble.n	80084f2 <_strtod_l+0x7b2>
 80084e0:	4641      	mov	r1, r8
 80084e2:	9805      	ldr	r0, [sp, #20]
 80084e4:	463a      	mov	r2, r7
 80084e6:	f002 ffd1 	bl	800b48c <__lshift>
 80084ea:	4680      	mov	r8, r0
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f43f ae46 	beq.w	800817e <_strtod_l+0x43e>
 80084f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084f4:	9805      	ldr	r0, [sp, #20]
 80084f6:	464a      	mov	r2, r9
 80084f8:	f003 f850 	bl	800b59c <__mdiff>
 80084fc:	4604      	mov	r4, r0
 80084fe:	2800      	cmp	r0, #0
 8008500:	f43f ae3d 	beq.w	800817e <_strtod_l+0x43e>
 8008504:	68c3      	ldr	r3, [r0, #12]
 8008506:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008508:	2300      	movs	r3, #0
 800850a:	60c3      	str	r3, [r0, #12]
 800850c:	4641      	mov	r1, r8
 800850e:	f003 f829 	bl	800b564 <__mcmp>
 8008512:	2800      	cmp	r0, #0
 8008514:	da46      	bge.n	80085a4 <_strtod_l+0x864>
 8008516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008518:	ea53 030a 	orrs.w	r3, r3, sl
 800851c:	d16c      	bne.n	80085f8 <_strtod_l+0x8b8>
 800851e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008522:	2b00      	cmp	r3, #0
 8008524:	d168      	bne.n	80085f8 <_strtod_l+0x8b8>
 8008526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800852a:	0d1b      	lsrs	r3, r3, #20
 800852c:	051b      	lsls	r3, r3, #20
 800852e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008532:	d961      	bls.n	80085f8 <_strtod_l+0x8b8>
 8008534:	6963      	ldr	r3, [r4, #20]
 8008536:	b913      	cbnz	r3, 800853e <_strtod_l+0x7fe>
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	2b01      	cmp	r3, #1
 800853c:	dd5c      	ble.n	80085f8 <_strtod_l+0x8b8>
 800853e:	4621      	mov	r1, r4
 8008540:	2201      	movs	r2, #1
 8008542:	9805      	ldr	r0, [sp, #20]
 8008544:	f002 ffa2 	bl	800b48c <__lshift>
 8008548:	4641      	mov	r1, r8
 800854a:	4604      	mov	r4, r0
 800854c:	f003 f80a 	bl	800b564 <__mcmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	dd51      	ble.n	80085f8 <_strtod_l+0x8b8>
 8008554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008558:	9a08      	ldr	r2, [sp, #32]
 800855a:	0d1b      	lsrs	r3, r3, #20
 800855c:	051b      	lsls	r3, r3, #20
 800855e:	2a00      	cmp	r2, #0
 8008560:	d06b      	beq.n	800863a <_strtod_l+0x8fa>
 8008562:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008566:	d868      	bhi.n	800863a <_strtod_l+0x8fa>
 8008568:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800856c:	f67f ae9d 	bls.w	80082aa <_strtod_l+0x56a>
 8008570:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <_strtod_l+0x85c>)
 8008572:	4650      	mov	r0, sl
 8008574:	4659      	mov	r1, fp
 8008576:	2200      	movs	r2, #0
 8008578:	f7f8 f83e 	bl	80005f8 <__aeabi_dmul>
 800857c:	4b08      	ldr	r3, [pc, #32]	@ (80085a0 <_strtod_l+0x860>)
 800857e:	400b      	ands	r3, r1
 8008580:	4682      	mov	sl, r0
 8008582:	468b      	mov	fp, r1
 8008584:	2b00      	cmp	r3, #0
 8008586:	f47f ae05 	bne.w	8008194 <_strtod_l+0x454>
 800858a:	9a05      	ldr	r2, [sp, #20]
 800858c:	2322      	movs	r3, #34	@ 0x22
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	e600      	b.n	8008194 <_strtod_l+0x454>
 8008592:	bf00      	nop
 8008594:	0800e078 	.word	0x0800e078
 8008598:	fffffc02 	.word	0xfffffc02
 800859c:	39500000 	.word	0x39500000
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80085a8:	d165      	bne.n	8008676 <_strtod_l+0x936>
 80085aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80085ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085b0:	b35a      	cbz	r2, 800860a <_strtod_l+0x8ca>
 80085b2:	4a9f      	ldr	r2, [pc, #636]	@ (8008830 <_strtod_l+0xaf0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d12b      	bne.n	8008610 <_strtod_l+0x8d0>
 80085b8:	9b08      	ldr	r3, [sp, #32]
 80085ba:	4651      	mov	r1, sl
 80085bc:	b303      	cbz	r3, 8008600 <_strtod_l+0x8c0>
 80085be:	4b9d      	ldr	r3, [pc, #628]	@ (8008834 <_strtod_l+0xaf4>)
 80085c0:	465a      	mov	r2, fp
 80085c2:	4013      	ands	r3, r2
 80085c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80085c8:	f04f 32ff 	mov.w	r2, #4294967295
 80085cc:	d81b      	bhi.n	8008606 <_strtod_l+0x8c6>
 80085ce:	0d1b      	lsrs	r3, r3, #20
 80085d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	4299      	cmp	r1, r3
 80085da:	d119      	bne.n	8008610 <_strtod_l+0x8d0>
 80085dc:	4b96      	ldr	r3, [pc, #600]	@ (8008838 <_strtod_l+0xaf8>)
 80085de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d102      	bne.n	80085ea <_strtod_l+0x8aa>
 80085e4:	3101      	adds	r1, #1
 80085e6:	f43f adca 	beq.w	800817e <_strtod_l+0x43e>
 80085ea:	4b92      	ldr	r3, [pc, #584]	@ (8008834 <_strtod_l+0xaf4>)
 80085ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085ee:	401a      	ands	r2, r3
 80085f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1b8      	bne.n	8008570 <_strtod_l+0x830>
 80085fe:	e5c9      	b.n	8008194 <_strtod_l+0x454>
 8008600:	f04f 33ff 	mov.w	r3, #4294967295
 8008604:	e7e8      	b.n	80085d8 <_strtod_l+0x898>
 8008606:	4613      	mov	r3, r2
 8008608:	e7e6      	b.n	80085d8 <_strtod_l+0x898>
 800860a:	ea53 030a 	orrs.w	r3, r3, sl
 800860e:	d0a1      	beq.n	8008554 <_strtod_l+0x814>
 8008610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008612:	b1db      	cbz	r3, 800864c <_strtod_l+0x90c>
 8008614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008616:	4213      	tst	r3, r2
 8008618:	d0ee      	beq.n	80085f8 <_strtod_l+0x8b8>
 800861a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861c:	9a08      	ldr	r2, [sp, #32]
 800861e:	4650      	mov	r0, sl
 8008620:	4659      	mov	r1, fp
 8008622:	b1bb      	cbz	r3, 8008654 <_strtod_l+0x914>
 8008624:	f7ff fb6c 	bl	8007d00 <sulp>
 8008628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800862c:	ec53 2b10 	vmov	r2, r3, d0
 8008630:	f7f7 fe2c 	bl	800028c <__adddf3>
 8008634:	4682      	mov	sl, r0
 8008636:	468b      	mov	fp, r1
 8008638:	e7de      	b.n	80085f8 <_strtod_l+0x8b8>
 800863a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800863e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008646:	f04f 3aff 	mov.w	sl, #4294967295
 800864a:	e7d5      	b.n	80085f8 <_strtod_l+0x8b8>
 800864c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800864e:	ea13 0f0a 	tst.w	r3, sl
 8008652:	e7e1      	b.n	8008618 <_strtod_l+0x8d8>
 8008654:	f7ff fb54 	bl	8007d00 <sulp>
 8008658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800865c:	ec53 2b10 	vmov	r2, r3, d0
 8008660:	f7f7 fe12 	bl	8000288 <__aeabi_dsub>
 8008664:	2200      	movs	r2, #0
 8008666:	2300      	movs	r3, #0
 8008668:	4682      	mov	sl, r0
 800866a:	468b      	mov	fp, r1
 800866c:	f7f8 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008670:	2800      	cmp	r0, #0
 8008672:	d0c1      	beq.n	80085f8 <_strtod_l+0x8b8>
 8008674:	e619      	b.n	80082aa <_strtod_l+0x56a>
 8008676:	4641      	mov	r1, r8
 8008678:	4620      	mov	r0, r4
 800867a:	f003 f8eb 	bl	800b854 <__ratio>
 800867e:	ec57 6b10 	vmov	r6, r7, d0
 8008682:	2200      	movs	r2, #0
 8008684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 fa30 	bl	8000af0 <__aeabi_dcmple>
 8008690:	2800      	cmp	r0, #0
 8008692:	d06f      	beq.n	8008774 <_strtod_l+0xa34>
 8008694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d17a      	bne.n	8008790 <_strtod_l+0xa50>
 800869a:	f1ba 0f00 	cmp.w	sl, #0
 800869e:	d158      	bne.n	8008752 <_strtod_l+0xa12>
 80086a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d15a      	bne.n	8008760 <_strtod_l+0xa20>
 80086aa:	4b64      	ldr	r3, [pc, #400]	@ (800883c <_strtod_l+0xafc>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4630      	mov	r0, r6
 80086b0:	4639      	mov	r1, r7
 80086b2:	f7f8 fa13 	bl	8000adc <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d159      	bne.n	800876e <_strtod_l+0xa2e>
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	4b60      	ldr	r3, [pc, #384]	@ (8008840 <_strtod_l+0xb00>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	f7f7 ff99 	bl	80005f8 <__aeabi_dmul>
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80086ce:	9606      	str	r6, [sp, #24]
 80086d0:	9307      	str	r3, [sp, #28]
 80086d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086d6:	4d57      	ldr	r5, [pc, #348]	@ (8008834 <_strtod_l+0xaf4>)
 80086d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086de:	401d      	ands	r5, r3
 80086e0:	4b58      	ldr	r3, [pc, #352]	@ (8008844 <_strtod_l+0xb04>)
 80086e2:	429d      	cmp	r5, r3
 80086e4:	f040 80b2 	bne.w	800884c <_strtod_l+0xb0c>
 80086e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80086ee:	ec4b ab10 	vmov	d0, sl, fp
 80086f2:	f002 ffe7 	bl	800b6c4 <__ulp>
 80086f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086fa:	ec51 0b10 	vmov	r0, r1, d0
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	f7f7 fdc1 	bl	800028c <__adddf3>
 800870a:	460b      	mov	r3, r1
 800870c:	4949      	ldr	r1, [pc, #292]	@ (8008834 <_strtod_l+0xaf4>)
 800870e:	4a4e      	ldr	r2, [pc, #312]	@ (8008848 <_strtod_l+0xb08>)
 8008710:	4019      	ands	r1, r3
 8008712:	4291      	cmp	r1, r2
 8008714:	4682      	mov	sl, r0
 8008716:	d942      	bls.n	800879e <_strtod_l+0xa5e>
 8008718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800871a:	4b47      	ldr	r3, [pc, #284]	@ (8008838 <_strtod_l+0xaf8>)
 800871c:	429a      	cmp	r2, r3
 800871e:	d103      	bne.n	8008728 <_strtod_l+0x9e8>
 8008720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008722:	3301      	adds	r3, #1
 8008724:	f43f ad2b 	beq.w	800817e <_strtod_l+0x43e>
 8008728:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008838 <_strtod_l+0xaf8>
 800872c:	f04f 3aff 	mov.w	sl, #4294967295
 8008730:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008732:	9805      	ldr	r0, [sp, #20]
 8008734:	f002 fc92 	bl	800b05c <_Bfree>
 8008738:	9805      	ldr	r0, [sp, #20]
 800873a:	4649      	mov	r1, r9
 800873c:	f002 fc8e 	bl	800b05c <_Bfree>
 8008740:	9805      	ldr	r0, [sp, #20]
 8008742:	4641      	mov	r1, r8
 8008744:	f002 fc8a 	bl	800b05c <_Bfree>
 8008748:	9805      	ldr	r0, [sp, #20]
 800874a:	4621      	mov	r1, r4
 800874c:	f002 fc86 	bl	800b05c <_Bfree>
 8008750:	e618      	b.n	8008384 <_strtod_l+0x644>
 8008752:	f1ba 0f01 	cmp.w	sl, #1
 8008756:	d103      	bne.n	8008760 <_strtod_l+0xa20>
 8008758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875a:	2b00      	cmp	r3, #0
 800875c:	f43f ada5 	beq.w	80082aa <_strtod_l+0x56a>
 8008760:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008810 <_strtod_l+0xad0>
 8008764:	4f35      	ldr	r7, [pc, #212]	@ (800883c <_strtod_l+0xafc>)
 8008766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800876a:	2600      	movs	r6, #0
 800876c:	e7b1      	b.n	80086d2 <_strtod_l+0x992>
 800876e:	4f34      	ldr	r7, [pc, #208]	@ (8008840 <_strtod_l+0xb00>)
 8008770:	2600      	movs	r6, #0
 8008772:	e7aa      	b.n	80086ca <_strtod_l+0x98a>
 8008774:	4b32      	ldr	r3, [pc, #200]	@ (8008840 <_strtod_l+0xb00>)
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8008780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d09f      	beq.n	80086ca <_strtod_l+0x98a>
 800878a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800878e:	e7a0      	b.n	80086d2 <_strtod_l+0x992>
 8008790:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008818 <_strtod_l+0xad8>
 8008794:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008798:	ec57 6b17 	vmov	r6, r7, d7
 800879c:	e799      	b.n	80086d2 <_strtod_l+0x992>
 800879e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1c1      	bne.n	8008730 <_strtod_l+0x9f0>
 80087ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80087b0:	0d1b      	lsrs	r3, r3, #20
 80087b2:	051b      	lsls	r3, r3, #20
 80087b4:	429d      	cmp	r5, r3
 80087b6:	d1bb      	bne.n	8008730 <_strtod_l+0x9f0>
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f8 fa64 	bl	8000c88 <__aeabi_d2lz>
 80087c0:	f7f7 feec 	bl	800059c <__aeabi_l2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f7 fd5c 	bl	8000288 <__aeabi_dsub>
 80087d0:	460b      	mov	r3, r1
 80087d2:	4602      	mov	r2, r0
 80087d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80087d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80087dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087de:	ea46 060a 	orr.w	r6, r6, sl
 80087e2:	431e      	orrs	r6, r3
 80087e4:	d06f      	beq.n	80088c6 <_strtod_l+0xb86>
 80087e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008820 <_strtod_l+0xae0>)
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f7f8 f976 	bl	8000adc <__aeabi_dcmplt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f47f accf 	bne.w	8008194 <_strtod_l+0x454>
 80087f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008828 <_strtod_l+0xae8>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008800:	f7f8 f98a 	bl	8000b18 <__aeabi_dcmpgt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d093      	beq.n	8008730 <_strtod_l+0x9f0>
 8008808:	e4c4      	b.n	8008194 <_strtod_l+0x454>
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w
 8008810:	00000000 	.word	0x00000000
 8008814:	bff00000 	.word	0xbff00000
 8008818:	00000000 	.word	0x00000000
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	94a03595 	.word	0x94a03595
 8008824:	3fdfffff 	.word	0x3fdfffff
 8008828:	35afe535 	.word	0x35afe535
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	000fffff 	.word	0x000fffff
 8008834:	7ff00000 	.word	0x7ff00000
 8008838:	7fefffff 	.word	0x7fefffff
 800883c:	3ff00000 	.word	0x3ff00000
 8008840:	3fe00000 	.word	0x3fe00000
 8008844:	7fe00000 	.word	0x7fe00000
 8008848:	7c9fffff 	.word	0x7c9fffff
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	b323      	cbz	r3, 800889a <_strtod_l+0xb5a>
 8008850:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008854:	d821      	bhi.n	800889a <_strtod_l+0xb5a>
 8008856:	a328      	add	r3, pc, #160	@ (adr r3, 80088f8 <_strtod_l+0xbb8>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f8 f946 	bl	8000af0 <__aeabi_dcmple>
 8008864:	b1a0      	cbz	r0, 8008890 <_strtod_l+0xb50>
 8008866:	4639      	mov	r1, r7
 8008868:	4630      	mov	r0, r6
 800886a:	f7f8 f99d 	bl	8000ba8 <__aeabi_d2uiz>
 800886e:	2801      	cmp	r0, #1
 8008870:	bf38      	it	cc
 8008872:	2001      	movcc	r0, #1
 8008874:	f7f7 fe46 	bl	8000504 <__aeabi_ui2d>
 8008878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800887a:	4606      	mov	r6, r0
 800887c:	460f      	mov	r7, r1
 800887e:	b9fb      	cbnz	r3, 80088c0 <_strtod_l+0xb80>
 8008880:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008884:	9014      	str	r0, [sp, #80]	@ 0x50
 8008886:	9315      	str	r3, [sp, #84]	@ 0x54
 8008888:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800888c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008890:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008892:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008896:	1b5b      	subs	r3, r3, r5
 8008898:	9311      	str	r3, [sp, #68]	@ 0x44
 800889a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800889e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80088a2:	f002 ff0f 	bl	800b6c4 <__ulp>
 80088a6:	4650      	mov	r0, sl
 80088a8:	ec53 2b10 	vmov	r2, r3, d0
 80088ac:	4659      	mov	r1, fp
 80088ae:	f7f7 fea3 	bl	80005f8 <__aeabi_dmul>
 80088b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80088b6:	f7f7 fce9 	bl	800028c <__adddf3>
 80088ba:	4682      	mov	sl, r0
 80088bc:	468b      	mov	fp, r1
 80088be:	e770      	b.n	80087a2 <_strtod_l+0xa62>
 80088c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80088c4:	e7e0      	b.n	8008888 <_strtod_l+0xb48>
 80088c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008900 <_strtod_l+0xbc0>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f8 f906 	bl	8000adc <__aeabi_dcmplt>
 80088d0:	e798      	b.n	8008804 <_strtod_l+0xac4>
 80088d2:	2300      	movs	r3, #0
 80088d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80088d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	f7ff ba6d 	b.w	8007dba <_strtod_l+0x7a>
 80088e0:	2a65      	cmp	r2, #101	@ 0x65
 80088e2:	f43f ab66 	beq.w	8007fb2 <_strtod_l+0x272>
 80088e6:	2a45      	cmp	r2, #69	@ 0x45
 80088e8:	f43f ab63 	beq.w	8007fb2 <_strtod_l+0x272>
 80088ec:	2301      	movs	r3, #1
 80088ee:	f7ff bb9e 	b.w	800802e <_strtod_l+0x2ee>
 80088f2:	bf00      	nop
 80088f4:	f3af 8000 	nop.w
 80088f8:	ffc00000 	.word	0xffc00000
 80088fc:	41dfffff 	.word	0x41dfffff
 8008900:	94a03595 	.word	0x94a03595
 8008904:	3fcfffff 	.word	0x3fcfffff

08008908 <_strtod_r>:
 8008908:	4b01      	ldr	r3, [pc, #4]	@ (8008910 <_strtod_r+0x8>)
 800890a:	f7ff ba19 	b.w	8007d40 <_strtod_l>
 800890e:	bf00      	nop
 8008910:	20000020 	.word	0x20000020

08008914 <_strtol_l.constprop.0>:
 8008914:	2b24      	cmp	r3, #36	@ 0x24
 8008916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891a:	4686      	mov	lr, r0
 800891c:	4690      	mov	r8, r2
 800891e:	d801      	bhi.n	8008924 <_strtol_l.constprop.0+0x10>
 8008920:	2b01      	cmp	r3, #1
 8008922:	d106      	bne.n	8008932 <_strtol_l.constprop.0+0x1e>
 8008924:	f001 f926 	bl	8009b74 <__errno>
 8008928:	2316      	movs	r3, #22
 800892a:	6003      	str	r3, [r0, #0]
 800892c:	2000      	movs	r0, #0
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	4834      	ldr	r0, [pc, #208]	@ (8008a04 <_strtol_l.constprop.0+0xf0>)
 8008934:	460d      	mov	r5, r1
 8008936:	462a      	mov	r2, r5
 8008938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800893c:	5d06      	ldrb	r6, [r0, r4]
 800893e:	f016 0608 	ands.w	r6, r6, #8
 8008942:	d1f8      	bne.n	8008936 <_strtol_l.constprop.0+0x22>
 8008944:	2c2d      	cmp	r4, #45	@ 0x2d
 8008946:	d12d      	bne.n	80089a4 <_strtol_l.constprop.0+0x90>
 8008948:	782c      	ldrb	r4, [r5, #0]
 800894a:	2601      	movs	r6, #1
 800894c:	1c95      	adds	r5, r2, #2
 800894e:	f033 0210 	bics.w	r2, r3, #16
 8008952:	d109      	bne.n	8008968 <_strtol_l.constprop.0+0x54>
 8008954:	2c30      	cmp	r4, #48	@ 0x30
 8008956:	d12a      	bne.n	80089ae <_strtol_l.constprop.0+0x9a>
 8008958:	782a      	ldrb	r2, [r5, #0]
 800895a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800895e:	2a58      	cmp	r2, #88	@ 0x58
 8008960:	d125      	bne.n	80089ae <_strtol_l.constprop.0+0x9a>
 8008962:	786c      	ldrb	r4, [r5, #1]
 8008964:	2310      	movs	r3, #16
 8008966:	3502      	adds	r5, #2
 8008968:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800896c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008970:	2200      	movs	r2, #0
 8008972:	fbbc f9f3 	udiv	r9, ip, r3
 8008976:	4610      	mov	r0, r2
 8008978:	fb03 ca19 	mls	sl, r3, r9, ip
 800897c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008980:	2f09      	cmp	r7, #9
 8008982:	d81b      	bhi.n	80089bc <_strtol_l.constprop.0+0xa8>
 8008984:	463c      	mov	r4, r7
 8008986:	42a3      	cmp	r3, r4
 8008988:	dd27      	ble.n	80089da <_strtol_l.constprop.0+0xc6>
 800898a:	1c57      	adds	r7, r2, #1
 800898c:	d007      	beq.n	800899e <_strtol_l.constprop.0+0x8a>
 800898e:	4581      	cmp	r9, r0
 8008990:	d320      	bcc.n	80089d4 <_strtol_l.constprop.0+0xc0>
 8008992:	d101      	bne.n	8008998 <_strtol_l.constprop.0+0x84>
 8008994:	45a2      	cmp	sl, r4
 8008996:	db1d      	blt.n	80089d4 <_strtol_l.constprop.0+0xc0>
 8008998:	fb00 4003 	mla	r0, r0, r3, r4
 800899c:	2201      	movs	r2, #1
 800899e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089a2:	e7eb      	b.n	800897c <_strtol_l.constprop.0+0x68>
 80089a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80089a6:	bf04      	itt	eq
 80089a8:	782c      	ldrbeq	r4, [r5, #0]
 80089aa:	1c95      	addeq	r5, r2, #2
 80089ac:	e7cf      	b.n	800894e <_strtol_l.constprop.0+0x3a>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1da      	bne.n	8008968 <_strtol_l.constprop.0+0x54>
 80089b2:	2c30      	cmp	r4, #48	@ 0x30
 80089b4:	bf0c      	ite	eq
 80089b6:	2308      	moveq	r3, #8
 80089b8:	230a      	movne	r3, #10
 80089ba:	e7d5      	b.n	8008968 <_strtol_l.constprop.0+0x54>
 80089bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80089c0:	2f19      	cmp	r7, #25
 80089c2:	d801      	bhi.n	80089c8 <_strtol_l.constprop.0+0xb4>
 80089c4:	3c37      	subs	r4, #55	@ 0x37
 80089c6:	e7de      	b.n	8008986 <_strtol_l.constprop.0+0x72>
 80089c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80089cc:	2f19      	cmp	r7, #25
 80089ce:	d804      	bhi.n	80089da <_strtol_l.constprop.0+0xc6>
 80089d0:	3c57      	subs	r4, #87	@ 0x57
 80089d2:	e7d8      	b.n	8008986 <_strtol_l.constprop.0+0x72>
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	e7e1      	b.n	800899e <_strtol_l.constprop.0+0x8a>
 80089da:	1c53      	adds	r3, r2, #1
 80089dc:	d108      	bne.n	80089f0 <_strtol_l.constprop.0+0xdc>
 80089de:	2322      	movs	r3, #34	@ 0x22
 80089e0:	f8ce 3000 	str.w	r3, [lr]
 80089e4:	4660      	mov	r0, ip
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	d0a0      	beq.n	800892e <_strtol_l.constprop.0+0x1a>
 80089ec:	1e69      	subs	r1, r5, #1
 80089ee:	e006      	b.n	80089fe <_strtol_l.constprop.0+0xea>
 80089f0:	b106      	cbz	r6, 80089f4 <_strtol_l.constprop.0+0xe0>
 80089f2:	4240      	negs	r0, r0
 80089f4:	f1b8 0f00 	cmp.w	r8, #0
 80089f8:	d099      	beq.n	800892e <_strtol_l.constprop.0+0x1a>
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d1f6      	bne.n	80089ec <_strtol_l.constprop.0+0xd8>
 80089fe:	f8c8 1000 	str.w	r1, [r8]
 8008a02:	e794      	b.n	800892e <_strtol_l.constprop.0+0x1a>
 8008a04:	0800e0a1 	.word	0x0800e0a1

08008a08 <_strtol_r>:
 8008a08:	f7ff bf84 	b.w	8008914 <_strtol_l.constprop.0>

08008a0c <__cvt>:
 8008a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	ec57 6b10 	vmov	r6, r7, d0
 8008a14:	2f00      	cmp	r7, #0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4619      	mov	r1, r3
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	bfbb      	ittet	lt
 8008a1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a22:	461f      	movlt	r7, r3
 8008a24:	2300      	movge	r3, #0
 8008a26:	232d      	movlt	r3, #45	@ 0x2d
 8008a28:	700b      	strb	r3, [r1, #0]
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a30:	4691      	mov	r9, r2
 8008a32:	f023 0820 	bic.w	r8, r3, #32
 8008a36:	bfbc      	itt	lt
 8008a38:	4632      	movlt	r2, r6
 8008a3a:	4616      	movlt	r6, r2
 8008a3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a40:	d005      	beq.n	8008a4e <__cvt+0x42>
 8008a42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a46:	d100      	bne.n	8008a4a <__cvt+0x3e>
 8008a48:	3401      	adds	r4, #1
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	e000      	b.n	8008a50 <__cvt+0x44>
 8008a4e:	2103      	movs	r1, #3
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	ab02      	add	r3, sp, #8
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	ec47 6b10 	vmov	d0, r6, r7
 8008a5c:	4653      	mov	r3, sl
 8008a5e:	4622      	mov	r2, r4
 8008a60:	f001 f962 	bl	8009d28 <_dtoa_r>
 8008a64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a68:	4605      	mov	r5, r0
 8008a6a:	d119      	bne.n	8008aa0 <__cvt+0x94>
 8008a6c:	f019 0f01 	tst.w	r9, #1
 8008a70:	d00e      	beq.n	8008a90 <__cvt+0x84>
 8008a72:	eb00 0904 	add.w	r9, r0, r4
 8008a76:	2200      	movs	r2, #0
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f8 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a82:	b108      	cbz	r0, 8008a88 <__cvt+0x7c>
 8008a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a88:	2230      	movs	r2, #48	@ 0x30
 8008a8a:	9b03      	ldr	r3, [sp, #12]
 8008a8c:	454b      	cmp	r3, r9
 8008a8e:	d31e      	bcc.n	8008ace <__cvt+0xc2>
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a94:	1b5b      	subs	r3, r3, r5
 8008a96:	4628      	mov	r0, r5
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	b004      	add	sp, #16
 8008a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008aa4:	eb00 0904 	add.w	r9, r0, r4
 8008aa8:	d1e5      	bne.n	8008a76 <__cvt+0x6a>
 8008aaa:	7803      	ldrb	r3, [r0, #0]
 8008aac:	2b30      	cmp	r3, #48	@ 0x30
 8008aae:	d10a      	bne.n	8008ac6 <__cvt+0xba>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f8 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8008abc:	b918      	cbnz	r0, 8008ac6 <__cvt+0xba>
 8008abe:	f1c4 0401 	rsb	r4, r4, #1
 8008ac2:	f8ca 4000 	str.w	r4, [sl]
 8008ac6:	f8da 3000 	ldr.w	r3, [sl]
 8008aca:	4499      	add	r9, r3
 8008acc:	e7d3      	b.n	8008a76 <__cvt+0x6a>
 8008ace:	1c59      	adds	r1, r3, #1
 8008ad0:	9103      	str	r1, [sp, #12]
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e7d9      	b.n	8008a8a <__cvt+0x7e>

08008ad6 <__exponent>:
 8008ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	bfba      	itte	lt
 8008adc:	4249      	neglt	r1, r1
 8008ade:	232d      	movlt	r3, #45	@ 0x2d
 8008ae0:	232b      	movge	r3, #43	@ 0x2b
 8008ae2:	2909      	cmp	r1, #9
 8008ae4:	7002      	strb	r2, [r0, #0]
 8008ae6:	7043      	strb	r3, [r0, #1]
 8008ae8:	dd29      	ble.n	8008b3e <__exponent+0x68>
 8008aea:	f10d 0307 	add.w	r3, sp, #7
 8008aee:	461d      	mov	r5, r3
 8008af0:	270a      	movs	r7, #10
 8008af2:	461a      	mov	r2, r3
 8008af4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008af8:	fb07 1416 	mls	r4, r7, r6, r1
 8008afc:	3430      	adds	r4, #48	@ 0x30
 8008afe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b02:	460c      	mov	r4, r1
 8008b04:	2c63      	cmp	r4, #99	@ 0x63
 8008b06:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	dcf1      	bgt.n	8008af2 <__exponent+0x1c>
 8008b0e:	3130      	adds	r1, #48	@ 0x30
 8008b10:	1e94      	subs	r4, r2, #2
 8008b12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b16:	1c41      	adds	r1, r0, #1
 8008b18:	4623      	mov	r3, r4
 8008b1a:	42ab      	cmp	r3, r5
 8008b1c:	d30a      	bcc.n	8008b34 <__exponent+0x5e>
 8008b1e:	f10d 0309 	add.w	r3, sp, #9
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	42ac      	cmp	r4, r5
 8008b26:	bf88      	it	hi
 8008b28:	2300      	movhi	r3, #0
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	4403      	add	r3, r0
 8008b2e:	1a18      	subs	r0, r3, r0
 8008b30:	b003      	add	sp, #12
 8008b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b3c:	e7ed      	b.n	8008b1a <__exponent+0x44>
 8008b3e:	2330      	movs	r3, #48	@ 0x30
 8008b40:	3130      	adds	r1, #48	@ 0x30
 8008b42:	7083      	strb	r3, [r0, #2]
 8008b44:	70c1      	strb	r1, [r0, #3]
 8008b46:	1d03      	adds	r3, r0, #4
 8008b48:	e7f1      	b.n	8008b2e <__exponent+0x58>
	...

08008b4c <_printf_float>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	b08d      	sub	sp, #52	@ 0x34
 8008b52:	460c      	mov	r4, r1
 8008b54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b58:	4616      	mov	r6, r2
 8008b5a:	461f      	mov	r7, r3
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	f000 ffaf 	bl	8009ac0 <_localeconv_r>
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7f7 fb82 	bl	8000270 <strlen>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b70:	f8d8 3000 	ldr.w	r3, [r8]
 8008b74:	9005      	str	r0, [sp, #20]
 8008b76:	3307      	adds	r3, #7
 8008b78:	f023 0307 	bic.w	r3, r3, #7
 8008b7c:	f103 0208 	add.w	r2, r3, #8
 8008b80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b84:	f8d4 b000 	ldr.w	fp, [r4]
 8008b88:	f8c8 2000 	str.w	r2, [r8]
 8008b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b94:	9307      	str	r3, [sp, #28]
 8008b96:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba2:	4b9c      	ldr	r3, [pc, #624]	@ (8008e14 <_printf_float+0x2c8>)
 8008ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba8:	f7f7 ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8008bac:	bb70      	cbnz	r0, 8008c0c <_printf_float+0xc0>
 8008bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bb2:	4b98      	ldr	r3, [pc, #608]	@ (8008e14 <_printf_float+0x2c8>)
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb8:	f7f7 ff9a 	bl	8000af0 <__aeabi_dcmple>
 8008bbc:	bb30      	cbnz	r0, 8008c0c <_printf_float+0xc0>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f7 ff89 	bl	8000adc <__aeabi_dcmplt>
 8008bca:	b110      	cbz	r0, 8008bd2 <_printf_float+0x86>
 8008bcc:	232d      	movs	r3, #45	@ 0x2d
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bd2:	4a91      	ldr	r2, [pc, #580]	@ (8008e18 <_printf_float+0x2cc>)
 8008bd4:	4b91      	ldr	r3, [pc, #580]	@ (8008e1c <_printf_float+0x2d0>)
 8008bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bda:	bf94      	ite	ls
 8008bdc:	4690      	movls	r8, r2
 8008bde:	4698      	movhi	r8, r3
 8008be0:	2303      	movs	r3, #3
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	f02b 0304 	bic.w	r3, fp, #4
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	9700      	str	r7, [sp, #0]
 8008bf0:	4633      	mov	r3, r6
 8008bf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f9d2 	bl	8008fa0 <_printf_common>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f040 808d 	bne.w	8008d1c <_printf_float+0x1d0>
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	b00d      	add	sp, #52	@ 0x34
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	4640      	mov	r0, r8
 8008c12:	4649      	mov	r1, r9
 8008c14:	f7f7 ff8a 	bl	8000b2c <__aeabi_dcmpun>
 8008c18:	b140      	cbz	r0, 8008c2c <_printf_float+0xe0>
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bfbc      	itt	lt
 8008c20:	232d      	movlt	r3, #45	@ 0x2d
 8008c22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c26:	4a7e      	ldr	r2, [pc, #504]	@ (8008e20 <_printf_float+0x2d4>)
 8008c28:	4b7e      	ldr	r3, [pc, #504]	@ (8008e24 <_printf_float+0x2d8>)
 8008c2a:	e7d4      	b.n	8008bd6 <_printf_float+0x8a>
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c32:	9206      	str	r2, [sp, #24]
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	d13b      	bne.n	8008cb0 <_printf_float+0x164>
 8008c38:	2306      	movs	r3, #6
 8008c3a:	6063      	str	r3, [r4, #4]
 8008c3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c40:	2300      	movs	r3, #0
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	9303      	str	r3, [sp, #12]
 8008c46:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c4c:	ab09      	add	r3, sp, #36	@ 0x24
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	6861      	ldr	r1, [r4, #4]
 8008c52:	ec49 8b10 	vmov	d0, r8, r9
 8008c56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7ff fed6 	bl	8008a0c <__cvt>
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c64:	2b47      	cmp	r3, #71	@ 0x47
 8008c66:	4680      	mov	r8, r0
 8008c68:	d129      	bne.n	8008cbe <_printf_float+0x172>
 8008c6a:	1cc8      	adds	r0, r1, #3
 8008c6c:	db02      	blt.n	8008c74 <_printf_float+0x128>
 8008c6e:	6863      	ldr	r3, [r4, #4]
 8008c70:	4299      	cmp	r1, r3
 8008c72:	dd41      	ble.n	8008cf8 <_printf_float+0x1ac>
 8008c74:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c78:	fa5f fa8a 	uxtb.w	sl, sl
 8008c7c:	3901      	subs	r1, #1
 8008c7e:	4652      	mov	r2, sl
 8008c80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c84:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c86:	f7ff ff26 	bl	8008ad6 <__exponent>
 8008c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c8c:	1813      	adds	r3, r2, r0
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	4681      	mov	r9, r0
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	dc02      	bgt.n	8008c9c <_printf_float+0x150>
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	07d2      	lsls	r2, r2, #31
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_float+0x154>
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0a2      	beq.n	8008bee <_printf_float+0xa2>
 8008ca8:	232d      	movs	r3, #45	@ 0x2d
 8008caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cae:	e79e      	b.n	8008bee <_printf_float+0xa2>
 8008cb0:	9a06      	ldr	r2, [sp, #24]
 8008cb2:	2a47      	cmp	r2, #71	@ 0x47
 8008cb4:	d1c2      	bne.n	8008c3c <_printf_float+0xf0>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1c0      	bne.n	8008c3c <_printf_float+0xf0>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e7bd      	b.n	8008c3a <_printf_float+0xee>
 8008cbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cc2:	d9db      	bls.n	8008c7c <_printf_float+0x130>
 8008cc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008cc8:	d118      	bne.n	8008cfc <_printf_float+0x1b0>
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	dd0b      	ble.n	8008ce8 <_printf_float+0x19c>
 8008cd0:	6121      	str	r1, [r4, #16]
 8008cd2:	b913      	cbnz	r3, 8008cda <_printf_float+0x18e>
 8008cd4:	6822      	ldr	r2, [r4, #0]
 8008cd6:	07d0      	lsls	r0, r2, #31
 8008cd8:	d502      	bpl.n	8008ce0 <_printf_float+0x194>
 8008cda:	3301      	adds	r3, #1
 8008cdc:	440b      	add	r3, r1
 8008cde:	6123      	str	r3, [r4, #16]
 8008ce0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ce2:	f04f 0900 	mov.w	r9, #0
 8008ce6:	e7db      	b.n	8008ca0 <_printf_float+0x154>
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_printf_float+0x1a4>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	07d2      	lsls	r2, r2, #31
 8008cee:	d501      	bpl.n	8008cf4 <_printf_float+0x1a8>
 8008cf0:	3302      	adds	r3, #2
 8008cf2:	e7f4      	b.n	8008cde <_printf_float+0x192>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e7f2      	b.n	8008cde <_printf_float+0x192>
 8008cf8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	db05      	blt.n	8008d0e <_printf_float+0x1c2>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	6121      	str	r1, [r4, #16]
 8008d06:	07d8      	lsls	r0, r3, #31
 8008d08:	d5ea      	bpl.n	8008ce0 <_printf_float+0x194>
 8008d0a:	1c4b      	adds	r3, r1, #1
 8008d0c:	e7e7      	b.n	8008cde <_printf_float+0x192>
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	bfd4      	ite	le
 8008d12:	f1c1 0202 	rsble	r2, r1, #2
 8008d16:	2201      	movgt	r2, #1
 8008d18:	4413      	add	r3, r2
 8008d1a:	e7e0      	b.n	8008cde <_printf_float+0x192>
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	055a      	lsls	r2, r3, #21
 8008d20:	d407      	bmi.n	8008d32 <_printf_float+0x1e6>
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	4642      	mov	r2, r8
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d12b      	bne.n	8008d88 <_printf_float+0x23c>
 8008d30:	e767      	b.n	8008c02 <_printf_float+0xb6>
 8008d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d36:	f240 80dd 	bls.w	8008ef4 <_printf_float+0x3a8>
 8008d3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2300      	movs	r3, #0
 8008d42:	f7f7 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d033      	beq.n	8008db2 <_printf_float+0x266>
 8008d4a:	4a37      	ldr	r2, [pc, #220]	@ (8008e28 <_printf_float+0x2dc>)
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b8      	blx	r7
 8008d54:	3001      	adds	r0, #1
 8008d56:	f43f af54 	beq.w	8008c02 <_printf_float+0xb6>
 8008d5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d5e:	4543      	cmp	r3, r8
 8008d60:	db02      	blt.n	8008d68 <_printf_float+0x21c>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	07d8      	lsls	r0, r3, #31
 8008d66:	d50f      	bpl.n	8008d88 <_printf_float+0x23c>
 8008d68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f af45 	beq.w	8008c02 <_printf_float+0xb6>
 8008d78:	f04f 0900 	mov.w	r9, #0
 8008d7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d80:	f104 0a1a 	add.w	sl, r4, #26
 8008d84:	45c8      	cmp	r8, r9
 8008d86:	dc09      	bgt.n	8008d9c <_printf_float+0x250>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	079b      	lsls	r3, r3, #30
 8008d8c:	f100 8103 	bmi.w	8008f96 <_printf_float+0x44a>
 8008d90:	68e0      	ldr	r0, [r4, #12]
 8008d92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d94:	4298      	cmp	r0, r3
 8008d96:	bfb8      	it	lt
 8008d98:	4618      	movlt	r0, r3
 8008d9a:	e734      	b.n	8008c06 <_printf_float+0xba>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4652      	mov	r2, sl
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f af2b 	beq.w	8008c02 <_printf_float+0xb6>
 8008dac:	f109 0901 	add.w	r9, r9, #1
 8008db0:	e7e8      	b.n	8008d84 <_printf_float+0x238>
 8008db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dc39      	bgt.n	8008e2c <_printf_float+0x2e0>
 8008db8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e28 <_printf_float+0x2dc>)
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	f43f af1d 	beq.w	8008c02 <_printf_float+0xb6>
 8008dc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008dcc:	ea59 0303 	orrs.w	r3, r9, r3
 8008dd0:	d102      	bne.n	8008dd8 <_printf_float+0x28c>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	07d9      	lsls	r1, r3, #31
 8008dd6:	d5d7      	bpl.n	8008d88 <_printf_float+0x23c>
 8008dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f af0d 	beq.w	8008c02 <_printf_float+0xb6>
 8008de8:	f04f 0a00 	mov.w	sl, #0
 8008dec:	f104 0b1a 	add.w	fp, r4, #26
 8008df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df2:	425b      	negs	r3, r3
 8008df4:	4553      	cmp	r3, sl
 8008df6:	dc01      	bgt.n	8008dfc <_printf_float+0x2b0>
 8008df8:	464b      	mov	r3, r9
 8008dfa:	e793      	b.n	8008d24 <_printf_float+0x1d8>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	465a      	mov	r2, fp
 8008e00:	4631      	mov	r1, r6
 8008e02:	4628      	mov	r0, r5
 8008e04:	47b8      	blx	r7
 8008e06:	3001      	adds	r0, #1
 8008e08:	f43f aefb 	beq.w	8008c02 <_printf_float+0xb6>
 8008e0c:	f10a 0a01 	add.w	sl, sl, #1
 8008e10:	e7ee      	b.n	8008df0 <_printf_float+0x2a4>
 8008e12:	bf00      	nop
 8008e14:	7fefffff 	.word	0x7fefffff
 8008e18:	0800e1a1 	.word	0x0800e1a1
 8008e1c:	0800e1a5 	.word	0x0800e1a5
 8008e20:	0800e1a9 	.word	0x0800e1a9
 8008e24:	0800e1ad 	.word	0x0800e1ad
 8008e28:	0800e44f 	.word	0x0800e44f
 8008e2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e32:	4553      	cmp	r3, sl
 8008e34:	bfa8      	it	ge
 8008e36:	4653      	movge	r3, sl
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	4699      	mov	r9, r3
 8008e3c:	dc36      	bgt.n	8008eac <_printf_float+0x360>
 8008e3e:	f04f 0b00 	mov.w	fp, #0
 8008e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e46:	f104 021a 	add.w	r2, r4, #26
 8008e4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e4c:	9306      	str	r3, [sp, #24]
 8008e4e:	eba3 0309 	sub.w	r3, r3, r9
 8008e52:	455b      	cmp	r3, fp
 8008e54:	dc31      	bgt.n	8008eba <_printf_float+0x36e>
 8008e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e58:	459a      	cmp	sl, r3
 8008e5a:	dc3a      	bgt.n	8008ed2 <_printf_float+0x386>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	07da      	lsls	r2, r3, #31
 8008e60:	d437      	bmi.n	8008ed2 <_printf_float+0x386>
 8008e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e64:	ebaa 0903 	sub.w	r9, sl, r3
 8008e68:	9b06      	ldr	r3, [sp, #24]
 8008e6a:	ebaa 0303 	sub.w	r3, sl, r3
 8008e6e:	4599      	cmp	r9, r3
 8008e70:	bfa8      	it	ge
 8008e72:	4699      	movge	r9, r3
 8008e74:	f1b9 0f00 	cmp.w	r9, #0
 8008e78:	dc33      	bgt.n	8008ee2 <_printf_float+0x396>
 8008e7a:	f04f 0800 	mov.w	r8, #0
 8008e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e82:	f104 0b1a 	add.w	fp, r4, #26
 8008e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e88:	ebaa 0303 	sub.w	r3, sl, r3
 8008e8c:	eba3 0309 	sub.w	r3, r3, r9
 8008e90:	4543      	cmp	r3, r8
 8008e92:	f77f af79 	ble.w	8008d88 <_printf_float+0x23c>
 8008e96:	2301      	movs	r3, #1
 8008e98:	465a      	mov	r2, fp
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f aeae 	beq.w	8008c02 <_printf_float+0xb6>
 8008ea6:	f108 0801 	add.w	r8, r8, #1
 8008eaa:	e7ec      	b.n	8008e86 <_printf_float+0x33a>
 8008eac:	4642      	mov	r2, r8
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	47b8      	blx	r7
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d1c2      	bne.n	8008e3e <_printf_float+0x2f2>
 8008eb8:	e6a3      	b.n	8008c02 <_printf_float+0xb6>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	9206      	str	r2, [sp, #24]
 8008ec2:	47b8      	blx	r7
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f43f ae9c 	beq.w	8008c02 <_printf_float+0xb6>
 8008eca:	9a06      	ldr	r2, [sp, #24]
 8008ecc:	f10b 0b01 	add.w	fp, fp, #1
 8008ed0:	e7bb      	b.n	8008e4a <_printf_float+0x2fe>
 8008ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	d1c0      	bne.n	8008e62 <_printf_float+0x316>
 8008ee0:	e68f      	b.n	8008c02 <_printf_float+0xb6>
 8008ee2:	9a06      	ldr	r2, [sp, #24]
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	4442      	add	r2, r8
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d1c3      	bne.n	8008e7a <_printf_float+0x32e>
 8008ef2:	e686      	b.n	8008c02 <_printf_float+0xb6>
 8008ef4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ef8:	f1ba 0f01 	cmp.w	sl, #1
 8008efc:	dc01      	bgt.n	8008f02 <_printf_float+0x3b6>
 8008efe:	07db      	lsls	r3, r3, #31
 8008f00:	d536      	bpl.n	8008f70 <_printf_float+0x424>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4642      	mov	r2, r8
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f ae78 	beq.w	8008c02 <_printf_float+0xb6>
 8008f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	f43f ae70 	beq.w	8008c02 <_printf_float+0xb6>
 8008f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f26:	2200      	movs	r2, #0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f2e:	f7f7 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f32:	b9c0      	cbnz	r0, 8008f66 <_printf_float+0x41a>
 8008f34:	4653      	mov	r3, sl
 8008f36:	f108 0201 	add.w	r2, r8, #1
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b8      	blx	r7
 8008f40:	3001      	adds	r0, #1
 8008f42:	d10c      	bne.n	8008f5e <_printf_float+0x412>
 8008f44:	e65d      	b.n	8008c02 <_printf_float+0xb6>
 8008f46:	2301      	movs	r3, #1
 8008f48:	465a      	mov	r2, fp
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	f43f ae56 	beq.w	8008c02 <_printf_float+0xb6>
 8008f56:	f108 0801 	add.w	r8, r8, #1
 8008f5a:	45d0      	cmp	r8, sl
 8008f5c:	dbf3      	blt.n	8008f46 <_printf_float+0x3fa>
 8008f5e:	464b      	mov	r3, r9
 8008f60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f64:	e6df      	b.n	8008d26 <_printf_float+0x1da>
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	f104 0b1a 	add.w	fp, r4, #26
 8008f6e:	e7f4      	b.n	8008f5a <_printf_float+0x40e>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4642      	mov	r2, r8
 8008f74:	e7e1      	b.n	8008f3a <_printf_float+0x3ee>
 8008f76:	2301      	movs	r3, #1
 8008f78:	464a      	mov	r2, r9
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b8      	blx	r7
 8008f80:	3001      	adds	r0, #1
 8008f82:	f43f ae3e 	beq.w	8008c02 <_printf_float+0xb6>
 8008f86:	f108 0801 	add.w	r8, r8, #1
 8008f8a:	68e3      	ldr	r3, [r4, #12]
 8008f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f8e:	1a5b      	subs	r3, r3, r1
 8008f90:	4543      	cmp	r3, r8
 8008f92:	dcf0      	bgt.n	8008f76 <_printf_float+0x42a>
 8008f94:	e6fc      	b.n	8008d90 <_printf_float+0x244>
 8008f96:	f04f 0800 	mov.w	r8, #0
 8008f9a:	f104 0919 	add.w	r9, r4, #25
 8008f9e:	e7f4      	b.n	8008f8a <_printf_float+0x43e>

08008fa0 <_printf_common>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	4698      	mov	r8, r3
 8008fa8:	688a      	ldr	r2, [r1, #8]
 8008faa:	690b      	ldr	r3, [r1, #16]
 8008fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	bfb8      	it	lt
 8008fb4:	4613      	movlt	r3, r2
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_printf_common+0x26>
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	0699      	lsls	r1, r3, #26
 8008fca:	bf42      	ittt	mi
 8008fcc:	6833      	ldrmi	r3, [r6, #0]
 8008fce:	3302      	addmi	r3, #2
 8008fd0:	6033      	strmi	r3, [r6, #0]
 8008fd2:	6825      	ldr	r5, [r4, #0]
 8008fd4:	f015 0506 	ands.w	r5, r5, #6
 8008fd8:	d106      	bne.n	8008fe8 <_printf_common+0x48>
 8008fda:	f104 0a19 	add.w	sl, r4, #25
 8008fde:	68e3      	ldr	r3, [r4, #12]
 8008fe0:	6832      	ldr	r2, [r6, #0]
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	42ab      	cmp	r3, r5
 8008fe6:	dc26      	bgt.n	8009036 <_printf_common+0x96>
 8008fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	3b00      	subs	r3, #0
 8008ff0:	bf18      	it	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	0692      	lsls	r2, r2, #26
 8008ff6:	d42b      	bmi.n	8009050 <_printf_common+0xb0>
 8008ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ffc:	4641      	mov	r1, r8
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c8      	blx	r9
 8009002:	3001      	adds	r0, #1
 8009004:	d01e      	beq.n	8009044 <_printf_common+0xa4>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	6922      	ldr	r2, [r4, #16]
 800900a:	f003 0306 	and.w	r3, r3, #6
 800900e:	2b04      	cmp	r3, #4
 8009010:	bf02      	ittt	eq
 8009012:	68e5      	ldreq	r5, [r4, #12]
 8009014:	6833      	ldreq	r3, [r6, #0]
 8009016:	1aed      	subeq	r5, r5, r3
 8009018:	68a3      	ldr	r3, [r4, #8]
 800901a:	bf0c      	ite	eq
 800901c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009020:	2500      	movne	r5, #0
 8009022:	4293      	cmp	r3, r2
 8009024:	bfc4      	itt	gt
 8009026:	1a9b      	subgt	r3, r3, r2
 8009028:	18ed      	addgt	r5, r5, r3
 800902a:	2600      	movs	r6, #0
 800902c:	341a      	adds	r4, #26
 800902e:	42b5      	cmp	r5, r6
 8009030:	d11a      	bne.n	8009068 <_printf_common+0xc8>
 8009032:	2000      	movs	r0, #0
 8009034:	e008      	b.n	8009048 <_printf_common+0xa8>
 8009036:	2301      	movs	r3, #1
 8009038:	4652      	mov	r2, sl
 800903a:	4641      	mov	r1, r8
 800903c:	4638      	mov	r0, r7
 800903e:	47c8      	blx	r9
 8009040:	3001      	adds	r0, #1
 8009042:	d103      	bne.n	800904c <_printf_common+0xac>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	3501      	adds	r5, #1
 800904e:	e7c6      	b.n	8008fde <_printf_common+0x3e>
 8009050:	18e1      	adds	r1, r4, r3
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	2030      	movs	r0, #48	@ 0x30
 8009056:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800905a:	4422      	add	r2, r4
 800905c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009060:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009064:	3302      	adds	r3, #2
 8009066:	e7c7      	b.n	8008ff8 <_printf_common+0x58>
 8009068:	2301      	movs	r3, #1
 800906a:	4622      	mov	r2, r4
 800906c:	4641      	mov	r1, r8
 800906e:	4638      	mov	r0, r7
 8009070:	47c8      	blx	r9
 8009072:	3001      	adds	r0, #1
 8009074:	d0e6      	beq.n	8009044 <_printf_common+0xa4>
 8009076:	3601      	adds	r6, #1
 8009078:	e7d9      	b.n	800902e <_printf_common+0x8e>
	...

0800907c <_printf_i>:
 800907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	7e0f      	ldrb	r7, [r1, #24]
 8009082:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009084:	2f78      	cmp	r7, #120	@ 0x78
 8009086:	4691      	mov	r9, r2
 8009088:	4680      	mov	r8, r0
 800908a:	460c      	mov	r4, r1
 800908c:	469a      	mov	sl, r3
 800908e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009092:	d807      	bhi.n	80090a4 <_printf_i+0x28>
 8009094:	2f62      	cmp	r7, #98	@ 0x62
 8009096:	d80a      	bhi.n	80090ae <_printf_i+0x32>
 8009098:	2f00      	cmp	r7, #0
 800909a:	f000 80d2 	beq.w	8009242 <_printf_i+0x1c6>
 800909e:	2f58      	cmp	r7, #88	@ 0x58
 80090a0:	f000 80b9 	beq.w	8009216 <_printf_i+0x19a>
 80090a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090ac:	e03a      	b.n	8009124 <_printf_i+0xa8>
 80090ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090b2:	2b15      	cmp	r3, #21
 80090b4:	d8f6      	bhi.n	80090a4 <_printf_i+0x28>
 80090b6:	a101      	add	r1, pc, #4	@ (adr r1, 80090bc <_printf_i+0x40>)
 80090b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009129 	.word	0x08009129
 80090c4:	080090a5 	.word	0x080090a5
 80090c8:	080090a5 	.word	0x080090a5
 80090cc:	080090a5 	.word	0x080090a5
 80090d0:	080090a5 	.word	0x080090a5
 80090d4:	08009129 	.word	0x08009129
 80090d8:	080090a5 	.word	0x080090a5
 80090dc:	080090a5 	.word	0x080090a5
 80090e0:	080090a5 	.word	0x080090a5
 80090e4:	080090a5 	.word	0x080090a5
 80090e8:	08009229 	.word	0x08009229
 80090ec:	08009153 	.word	0x08009153
 80090f0:	080091e3 	.word	0x080091e3
 80090f4:	080090a5 	.word	0x080090a5
 80090f8:	080090a5 	.word	0x080090a5
 80090fc:	0800924b 	.word	0x0800924b
 8009100:	080090a5 	.word	0x080090a5
 8009104:	08009153 	.word	0x08009153
 8009108:	080090a5 	.word	0x080090a5
 800910c:	080090a5 	.word	0x080090a5
 8009110:	080091eb 	.word	0x080091eb
 8009114:	6833      	ldr	r3, [r6, #0]
 8009116:	1d1a      	adds	r2, r3, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6032      	str	r2, [r6, #0]
 800911c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009120:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009124:	2301      	movs	r3, #1
 8009126:	e09d      	b.n	8009264 <_printf_i+0x1e8>
 8009128:	6833      	ldr	r3, [r6, #0]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1d19      	adds	r1, r3, #4
 800912e:	6031      	str	r1, [r6, #0]
 8009130:	0606      	lsls	r6, r0, #24
 8009132:	d501      	bpl.n	8009138 <_printf_i+0xbc>
 8009134:	681d      	ldr	r5, [r3, #0]
 8009136:	e003      	b.n	8009140 <_printf_i+0xc4>
 8009138:	0645      	lsls	r5, r0, #25
 800913a:	d5fb      	bpl.n	8009134 <_printf_i+0xb8>
 800913c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009140:	2d00      	cmp	r5, #0
 8009142:	da03      	bge.n	800914c <_printf_i+0xd0>
 8009144:	232d      	movs	r3, #45	@ 0x2d
 8009146:	426d      	negs	r5, r5
 8009148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800914c:	4859      	ldr	r0, [pc, #356]	@ (80092b4 <_printf_i+0x238>)
 800914e:	230a      	movs	r3, #10
 8009150:	e011      	b.n	8009176 <_printf_i+0xfa>
 8009152:	6821      	ldr	r1, [r4, #0]
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	0608      	lsls	r0, r1, #24
 8009158:	f853 5b04 	ldr.w	r5, [r3], #4
 800915c:	d402      	bmi.n	8009164 <_printf_i+0xe8>
 800915e:	0649      	lsls	r1, r1, #25
 8009160:	bf48      	it	mi
 8009162:	b2ad      	uxthmi	r5, r5
 8009164:	2f6f      	cmp	r7, #111	@ 0x6f
 8009166:	4853      	ldr	r0, [pc, #332]	@ (80092b4 <_printf_i+0x238>)
 8009168:	6033      	str	r3, [r6, #0]
 800916a:	bf14      	ite	ne
 800916c:	230a      	movne	r3, #10
 800916e:	2308      	moveq	r3, #8
 8009170:	2100      	movs	r1, #0
 8009172:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009176:	6866      	ldr	r6, [r4, #4]
 8009178:	60a6      	str	r6, [r4, #8]
 800917a:	2e00      	cmp	r6, #0
 800917c:	bfa2      	ittt	ge
 800917e:	6821      	ldrge	r1, [r4, #0]
 8009180:	f021 0104 	bicge.w	r1, r1, #4
 8009184:	6021      	strge	r1, [r4, #0]
 8009186:	b90d      	cbnz	r5, 800918c <_printf_i+0x110>
 8009188:	2e00      	cmp	r6, #0
 800918a:	d04b      	beq.n	8009224 <_printf_i+0x1a8>
 800918c:	4616      	mov	r6, r2
 800918e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009192:	fb03 5711 	mls	r7, r3, r1, r5
 8009196:	5dc7      	ldrb	r7, [r0, r7]
 8009198:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800919c:	462f      	mov	r7, r5
 800919e:	42bb      	cmp	r3, r7
 80091a0:	460d      	mov	r5, r1
 80091a2:	d9f4      	bls.n	800918e <_printf_i+0x112>
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d10b      	bne.n	80091c0 <_printf_i+0x144>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07df      	lsls	r7, r3, #31
 80091ac:	d508      	bpl.n	80091c0 <_printf_i+0x144>
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4299      	cmp	r1, r3
 80091b4:	bfde      	ittt	le
 80091b6:	2330      	movle	r3, #48	@ 0x30
 80091b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091c0:	1b92      	subs	r2, r2, r6
 80091c2:	6122      	str	r2, [r4, #16]
 80091c4:	f8cd a000 	str.w	sl, [sp]
 80091c8:	464b      	mov	r3, r9
 80091ca:	aa03      	add	r2, sp, #12
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff fee6 	bl	8008fa0 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d14a      	bne.n	800926e <_printf_i+0x1f2>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b004      	add	sp, #16
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	f043 0320 	orr.w	r3, r3, #32
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	4833      	ldr	r0, [pc, #204]	@ (80092b8 <_printf_i+0x23c>)
 80091ec:	2778      	movs	r7, #120	@ 0x78
 80091ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	6831      	ldr	r1, [r6, #0]
 80091f6:	061f      	lsls	r7, r3, #24
 80091f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80091fc:	d402      	bmi.n	8009204 <_printf_i+0x188>
 80091fe:	065f      	lsls	r7, r3, #25
 8009200:	bf48      	it	mi
 8009202:	b2ad      	uxthmi	r5, r5
 8009204:	6031      	str	r1, [r6, #0]
 8009206:	07d9      	lsls	r1, r3, #31
 8009208:	bf44      	itt	mi
 800920a:	f043 0320 	orrmi.w	r3, r3, #32
 800920e:	6023      	strmi	r3, [r4, #0]
 8009210:	b11d      	cbz	r5, 800921a <_printf_i+0x19e>
 8009212:	2310      	movs	r3, #16
 8009214:	e7ac      	b.n	8009170 <_printf_i+0xf4>
 8009216:	4827      	ldr	r0, [pc, #156]	@ (80092b4 <_printf_i+0x238>)
 8009218:	e7e9      	b.n	80091ee <_printf_i+0x172>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	f023 0320 	bic.w	r3, r3, #32
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	e7f6      	b.n	8009212 <_printf_i+0x196>
 8009224:	4616      	mov	r6, r2
 8009226:	e7bd      	b.n	80091a4 <_printf_i+0x128>
 8009228:	6833      	ldr	r3, [r6, #0]
 800922a:	6825      	ldr	r5, [r4, #0]
 800922c:	6961      	ldr	r1, [r4, #20]
 800922e:	1d18      	adds	r0, r3, #4
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	062e      	lsls	r6, r5, #24
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	d501      	bpl.n	800923c <_printf_i+0x1c0>
 8009238:	6019      	str	r1, [r3, #0]
 800923a:	e002      	b.n	8009242 <_printf_i+0x1c6>
 800923c:	0668      	lsls	r0, r5, #25
 800923e:	d5fb      	bpl.n	8009238 <_printf_i+0x1bc>
 8009240:	8019      	strh	r1, [r3, #0]
 8009242:	2300      	movs	r3, #0
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	4616      	mov	r6, r2
 8009248:	e7bc      	b.n	80091c4 <_printf_i+0x148>
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	1d1a      	adds	r2, r3, #4
 800924e:	6032      	str	r2, [r6, #0]
 8009250:	681e      	ldr	r6, [r3, #0]
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	2100      	movs	r1, #0
 8009256:	4630      	mov	r0, r6
 8009258:	f7f6 ffba 	bl	80001d0 <memchr>
 800925c:	b108      	cbz	r0, 8009262 <_printf_i+0x1e6>
 800925e:	1b80      	subs	r0, r0, r6
 8009260:	6060      	str	r0, [r4, #4]
 8009262:	6863      	ldr	r3, [r4, #4]
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	2300      	movs	r3, #0
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800926c:	e7aa      	b.n	80091c4 <_printf_i+0x148>
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	4632      	mov	r2, r6
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	47d0      	blx	sl
 8009278:	3001      	adds	r0, #1
 800927a:	d0ad      	beq.n	80091d8 <_printf_i+0x15c>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	079b      	lsls	r3, r3, #30
 8009280:	d413      	bmi.n	80092aa <_printf_i+0x22e>
 8009282:	68e0      	ldr	r0, [r4, #12]
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	4298      	cmp	r0, r3
 8009288:	bfb8      	it	lt
 800928a:	4618      	movlt	r0, r3
 800928c:	e7a6      	b.n	80091dc <_printf_i+0x160>
 800928e:	2301      	movs	r3, #1
 8009290:	4632      	mov	r2, r6
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	47d0      	blx	sl
 8009298:	3001      	adds	r0, #1
 800929a:	d09d      	beq.n	80091d8 <_printf_i+0x15c>
 800929c:	3501      	adds	r5, #1
 800929e:	68e3      	ldr	r3, [r4, #12]
 80092a0:	9903      	ldr	r1, [sp, #12]
 80092a2:	1a5b      	subs	r3, r3, r1
 80092a4:	42ab      	cmp	r3, r5
 80092a6:	dcf2      	bgt.n	800928e <_printf_i+0x212>
 80092a8:	e7eb      	b.n	8009282 <_printf_i+0x206>
 80092aa:	2500      	movs	r5, #0
 80092ac:	f104 0619 	add.w	r6, r4, #25
 80092b0:	e7f5      	b.n	800929e <_printf_i+0x222>
 80092b2:	bf00      	nop
 80092b4:	0800e1b1 	.word	0x0800e1b1
 80092b8:	0800e1c2 	.word	0x0800e1c2

080092bc <_scanf_float>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	b087      	sub	sp, #28
 80092c2:	4617      	mov	r7, r2
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	688b      	ldr	r3, [r1, #8]
 80092c8:	1e5a      	subs	r2, r3, #1
 80092ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80092ce:	bf81      	itttt	hi
 80092d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80092d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80092d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80092dc:	608b      	strhi	r3, [r1, #8]
 80092de:	680b      	ldr	r3, [r1, #0]
 80092e0:	460a      	mov	r2, r1
 80092e2:	f04f 0500 	mov.w	r5, #0
 80092e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80092ea:	f842 3b1c 	str.w	r3, [r2], #28
 80092ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80092f2:	4680      	mov	r8, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	bf98      	it	ls
 80092f8:	f04f 0b00 	movls.w	fp, #0
 80092fc:	9201      	str	r2, [sp, #4]
 80092fe:	4616      	mov	r6, r2
 8009300:	46aa      	mov	sl, r5
 8009302:	46a9      	mov	r9, r5
 8009304:	9502      	str	r5, [sp, #8]
 8009306:	68a2      	ldr	r2, [r4, #8]
 8009308:	b152      	cbz	r2, 8009320 <_scanf_float+0x64>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009310:	d864      	bhi.n	80093dc <_scanf_float+0x120>
 8009312:	2b40      	cmp	r3, #64	@ 0x40
 8009314:	d83c      	bhi.n	8009390 <_scanf_float+0xd4>
 8009316:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800931a:	b2c8      	uxtb	r0, r1
 800931c:	280e      	cmp	r0, #14
 800931e:	d93a      	bls.n	8009396 <_scanf_float+0xda>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	d003      	beq.n	800932e <_scanf_float+0x72>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009332:	f1ba 0f01 	cmp.w	sl, #1
 8009336:	f200 8117 	bhi.w	8009568 <_scanf_float+0x2ac>
 800933a:	9b01      	ldr	r3, [sp, #4]
 800933c:	429e      	cmp	r6, r3
 800933e:	f200 8108 	bhi.w	8009552 <_scanf_float+0x296>
 8009342:	2001      	movs	r0, #1
 8009344:	b007      	add	sp, #28
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800934e:	2a0d      	cmp	r2, #13
 8009350:	d8e6      	bhi.n	8009320 <_scanf_float+0x64>
 8009352:	a101      	add	r1, pc, #4	@ (adr r1, 8009358 <_scanf_float+0x9c>)
 8009354:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009358:	0800949f 	.word	0x0800949f
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	08009321 	.word	0x08009321
 8009368:	080094ff 	.word	0x080094ff
 800936c:	080094d7 	.word	0x080094d7
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094ad 	.word	0x080094ad
 800937c:	08009321 	.word	0x08009321
 8009380:	08009321 	.word	0x08009321
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	08009465 	.word	0x08009465
 8009390:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009394:	e7db      	b.n	800934e <_scanf_float+0x92>
 8009396:	290e      	cmp	r1, #14
 8009398:	d8c2      	bhi.n	8009320 <_scanf_float+0x64>
 800939a:	a001      	add	r0, pc, #4	@ (adr r0, 80093a0 <_scanf_float+0xe4>)
 800939c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093a0:	08009455 	.word	0x08009455
 80093a4:	08009321 	.word	0x08009321
 80093a8:	08009455 	.word	0x08009455
 80093ac:	080094eb 	.word	0x080094eb
 80093b0:	08009321 	.word	0x08009321
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	0800943b 	.word	0x0800943b
 80093bc:	0800943b 	.word	0x0800943b
 80093c0:	0800943b 	.word	0x0800943b
 80093c4:	0800943b 	.word	0x0800943b
 80093c8:	0800943b 	.word	0x0800943b
 80093cc:	0800943b 	.word	0x0800943b
 80093d0:	0800943b 	.word	0x0800943b
 80093d4:	0800943b 	.word	0x0800943b
 80093d8:	0800943b 	.word	0x0800943b
 80093dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80093de:	d809      	bhi.n	80093f4 <_scanf_float+0x138>
 80093e0:	2b60      	cmp	r3, #96	@ 0x60
 80093e2:	d8b2      	bhi.n	800934a <_scanf_float+0x8e>
 80093e4:	2b54      	cmp	r3, #84	@ 0x54
 80093e6:	d07b      	beq.n	80094e0 <_scanf_float+0x224>
 80093e8:	2b59      	cmp	r3, #89	@ 0x59
 80093ea:	d199      	bne.n	8009320 <_scanf_float+0x64>
 80093ec:	2d07      	cmp	r5, #7
 80093ee:	d197      	bne.n	8009320 <_scanf_float+0x64>
 80093f0:	2508      	movs	r5, #8
 80093f2:	e02c      	b.n	800944e <_scanf_float+0x192>
 80093f4:	2b74      	cmp	r3, #116	@ 0x74
 80093f6:	d073      	beq.n	80094e0 <_scanf_float+0x224>
 80093f8:	2b79      	cmp	r3, #121	@ 0x79
 80093fa:	e7f6      	b.n	80093ea <_scanf_float+0x12e>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	05c8      	lsls	r0, r1, #23
 8009400:	d51b      	bpl.n	800943a <_scanf_float+0x17e>
 8009402:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009406:	6021      	str	r1, [r4, #0]
 8009408:	f109 0901 	add.w	r9, r9, #1
 800940c:	f1bb 0f00 	cmp.w	fp, #0
 8009410:	d003      	beq.n	800941a <_scanf_float+0x15e>
 8009412:	3201      	adds	r2, #1
 8009414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009418:	60a2      	str	r2, [r4, #8]
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	3b01      	subs	r3, #1
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	f340 8087 	ble.w	8009540 <_scanf_float+0x284>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	e765      	b.n	8009306 <_scanf_float+0x4a>
 800943a:	eb1a 0105 	adds.w	r1, sl, r5
 800943e:	f47f af6f 	bne.w	8009320 <_scanf_float+0x64>
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	460d      	mov	r5, r1
 800944c:	468a      	mov	sl, r1
 800944e:	f806 3b01 	strb.w	r3, [r6], #1
 8009452:	e7e2      	b.n	800941a <_scanf_float+0x15e>
 8009454:	6822      	ldr	r2, [r4, #0]
 8009456:	0610      	lsls	r0, r2, #24
 8009458:	f57f af62 	bpl.w	8009320 <_scanf_float+0x64>
 800945c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009460:	6022      	str	r2, [r4, #0]
 8009462:	e7f4      	b.n	800944e <_scanf_float+0x192>
 8009464:	f1ba 0f00 	cmp.w	sl, #0
 8009468:	d10e      	bne.n	8009488 <_scanf_float+0x1cc>
 800946a:	f1b9 0f00 	cmp.w	r9, #0
 800946e:	d10e      	bne.n	800948e <_scanf_float+0x1d2>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009476:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800947a:	d108      	bne.n	800948e <_scanf_float+0x1d2>
 800947c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	f04f 0a01 	mov.w	sl, #1
 8009486:	e7e2      	b.n	800944e <_scanf_float+0x192>
 8009488:	f1ba 0f02 	cmp.w	sl, #2
 800948c:	d055      	beq.n	800953a <_scanf_float+0x27e>
 800948e:	2d01      	cmp	r5, #1
 8009490:	d002      	beq.n	8009498 <_scanf_float+0x1dc>
 8009492:	2d04      	cmp	r5, #4
 8009494:	f47f af44 	bne.w	8009320 <_scanf_float+0x64>
 8009498:	3501      	adds	r5, #1
 800949a:	b2ed      	uxtb	r5, r5
 800949c:	e7d7      	b.n	800944e <_scanf_float+0x192>
 800949e:	f1ba 0f01 	cmp.w	sl, #1
 80094a2:	f47f af3d 	bne.w	8009320 <_scanf_float+0x64>
 80094a6:	f04f 0a02 	mov.w	sl, #2
 80094aa:	e7d0      	b.n	800944e <_scanf_float+0x192>
 80094ac:	b97d      	cbnz	r5, 80094ce <_scanf_float+0x212>
 80094ae:	f1b9 0f00 	cmp.w	r9, #0
 80094b2:	f47f af38 	bne.w	8009326 <_scanf_float+0x6a>
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80094bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80094c0:	f040 8108 	bne.w	80096d4 <_scanf_float+0x418>
 80094c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	2501      	movs	r5, #1
 80094cc:	e7bf      	b.n	800944e <_scanf_float+0x192>
 80094ce:	2d03      	cmp	r5, #3
 80094d0:	d0e2      	beq.n	8009498 <_scanf_float+0x1dc>
 80094d2:	2d05      	cmp	r5, #5
 80094d4:	e7de      	b.n	8009494 <_scanf_float+0x1d8>
 80094d6:	2d02      	cmp	r5, #2
 80094d8:	f47f af22 	bne.w	8009320 <_scanf_float+0x64>
 80094dc:	2503      	movs	r5, #3
 80094de:	e7b6      	b.n	800944e <_scanf_float+0x192>
 80094e0:	2d06      	cmp	r5, #6
 80094e2:	f47f af1d 	bne.w	8009320 <_scanf_float+0x64>
 80094e6:	2507      	movs	r5, #7
 80094e8:	e7b1      	b.n	800944e <_scanf_float+0x192>
 80094ea:	6822      	ldr	r2, [r4, #0]
 80094ec:	0591      	lsls	r1, r2, #22
 80094ee:	f57f af17 	bpl.w	8009320 <_scanf_float+0x64>
 80094f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80094fc:	e7a7      	b.n	800944e <_scanf_float+0x192>
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009504:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009508:	d006      	beq.n	8009518 <_scanf_float+0x25c>
 800950a:	0550      	lsls	r0, r2, #21
 800950c:	f57f af08 	bpl.w	8009320 <_scanf_float+0x64>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	f000 80de 	beq.w	80096d4 <_scanf_float+0x418>
 8009518:	0591      	lsls	r1, r2, #22
 800951a:	bf58      	it	pl
 800951c:	9902      	ldrpl	r1, [sp, #8]
 800951e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009522:	bf58      	it	pl
 8009524:	eba9 0101 	subpl.w	r1, r9, r1
 8009528:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800952c:	bf58      	it	pl
 800952e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009532:	6022      	str	r2, [r4, #0]
 8009534:	f04f 0900 	mov.w	r9, #0
 8009538:	e789      	b.n	800944e <_scanf_float+0x192>
 800953a:	f04f 0a03 	mov.w	sl, #3
 800953e:	e786      	b.n	800944e <_scanf_float+0x192>
 8009540:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009544:	4639      	mov	r1, r7
 8009546:	4640      	mov	r0, r8
 8009548:	4798      	blx	r3
 800954a:	2800      	cmp	r0, #0
 800954c:	f43f aedb 	beq.w	8009306 <_scanf_float+0x4a>
 8009550:	e6e6      	b.n	8009320 <_scanf_float+0x64>
 8009552:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009556:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800955a:	463a      	mov	r2, r7
 800955c:	4640      	mov	r0, r8
 800955e:	4798      	blx	r3
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	3b01      	subs	r3, #1
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	e6e8      	b.n	800933a <_scanf_float+0x7e>
 8009568:	1e6b      	subs	r3, r5, #1
 800956a:	2b06      	cmp	r3, #6
 800956c:	d824      	bhi.n	80095b8 <_scanf_float+0x2fc>
 800956e:	2d02      	cmp	r5, #2
 8009570:	d836      	bhi.n	80095e0 <_scanf_float+0x324>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	429e      	cmp	r6, r3
 8009576:	f67f aee4 	bls.w	8009342 <_scanf_float+0x86>
 800957a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800957e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009582:	463a      	mov	r2, r7
 8009584:	4640      	mov	r0, r8
 8009586:	4798      	blx	r3
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	3b01      	subs	r3, #1
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	e7f0      	b.n	8009572 <_scanf_float+0x2b6>
 8009590:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009594:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009598:	463a      	mov	r2, r7
 800959a:	4640      	mov	r0, r8
 800959c:	4798      	blx	r3
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095a8:	fa5f fa8a 	uxtb.w	sl, sl
 80095ac:	f1ba 0f02 	cmp.w	sl, #2
 80095b0:	d1ee      	bne.n	8009590 <_scanf_float+0x2d4>
 80095b2:	3d03      	subs	r5, #3
 80095b4:	b2ed      	uxtb	r5, r5
 80095b6:	1b76      	subs	r6, r6, r5
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	05da      	lsls	r2, r3, #23
 80095bc:	d530      	bpl.n	8009620 <_scanf_float+0x364>
 80095be:	055b      	lsls	r3, r3, #21
 80095c0:	d511      	bpl.n	80095e6 <_scanf_float+0x32a>
 80095c2:	9b01      	ldr	r3, [sp, #4]
 80095c4:	429e      	cmp	r6, r3
 80095c6:	f67f aebc 	bls.w	8009342 <_scanf_float+0x86>
 80095ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095d2:	463a      	mov	r2, r7
 80095d4:	4640      	mov	r0, r8
 80095d6:	4798      	blx	r3
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	3b01      	subs	r3, #1
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	e7f0      	b.n	80095c2 <_scanf_float+0x306>
 80095e0:	46aa      	mov	sl, r5
 80095e2:	46b3      	mov	fp, r6
 80095e4:	e7de      	b.n	80095a4 <_scanf_float+0x2e8>
 80095e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	2965      	cmp	r1, #101	@ 0x65
 80095ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80095f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80095f6:	6123      	str	r3, [r4, #16]
 80095f8:	d00c      	beq.n	8009614 <_scanf_float+0x358>
 80095fa:	2945      	cmp	r1, #69	@ 0x45
 80095fc:	d00a      	beq.n	8009614 <_scanf_float+0x358>
 80095fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009602:	463a      	mov	r2, r7
 8009604:	4640      	mov	r0, r8
 8009606:	4798      	blx	r3
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800960e:	3b01      	subs	r3, #1
 8009610:	1eb5      	subs	r5, r6, #2
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009618:	463a      	mov	r2, r7
 800961a:	4640      	mov	r0, r8
 800961c:	4798      	blx	r3
 800961e:	462e      	mov	r6, r5
 8009620:	6822      	ldr	r2, [r4, #0]
 8009622:	f012 0210 	ands.w	r2, r2, #16
 8009626:	d001      	beq.n	800962c <_scanf_float+0x370>
 8009628:	2000      	movs	r0, #0
 800962a:	e68b      	b.n	8009344 <_scanf_float+0x88>
 800962c:	7032      	strb	r2, [r6, #0]
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009638:	d11c      	bne.n	8009674 <_scanf_float+0x3b8>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	454b      	cmp	r3, r9
 800963e:	eba3 0209 	sub.w	r2, r3, r9
 8009642:	d123      	bne.n	800968c <_scanf_float+0x3d0>
 8009644:	9901      	ldr	r1, [sp, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	4640      	mov	r0, r8
 800964a:	f7ff f95d 	bl	8008908 <_strtod_r>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	6821      	ldr	r1, [r4, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f011 0f02 	tst.w	r1, #2
 8009658:	ec57 6b10 	vmov	r6, r7, d0
 800965c:	f103 0204 	add.w	r2, r3, #4
 8009660:	d01f      	beq.n	80096a2 <_scanf_float+0x3e6>
 8009662:	9903      	ldr	r1, [sp, #12]
 8009664:	600a      	str	r2, [r1, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	e9c3 6700 	strd	r6, r7, [r3]
 800966c:	68e3      	ldr	r3, [r4, #12]
 800966e:	3301      	adds	r3, #1
 8009670:	60e3      	str	r3, [r4, #12]
 8009672:	e7d9      	b.n	8009628 <_scanf_float+0x36c>
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0e4      	beq.n	8009644 <_scanf_float+0x388>
 800967a:	9905      	ldr	r1, [sp, #20]
 800967c:	230a      	movs	r3, #10
 800967e:	3101      	adds	r1, #1
 8009680:	4640      	mov	r0, r8
 8009682:	f7ff f9c1 	bl	8008a08 <_strtol_r>
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	9e05      	ldr	r6, [sp, #20]
 800968a:	1ac2      	subs	r2, r0, r3
 800968c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009690:	429e      	cmp	r6, r3
 8009692:	bf28      	it	cs
 8009694:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009698:	4910      	ldr	r1, [pc, #64]	@ (80096dc <_scanf_float+0x420>)
 800969a:	4630      	mov	r0, r6
 800969c:	f000 f918 	bl	80098d0 <siprintf>
 80096a0:	e7d0      	b.n	8009644 <_scanf_float+0x388>
 80096a2:	f011 0f04 	tst.w	r1, #4
 80096a6:	9903      	ldr	r1, [sp, #12]
 80096a8:	600a      	str	r2, [r1, #0]
 80096aa:	d1dc      	bne.n	8009666 <_scanf_float+0x3aa>
 80096ac:	681d      	ldr	r5, [r3, #0]
 80096ae:	4632      	mov	r2, r6
 80096b0:	463b      	mov	r3, r7
 80096b2:	4630      	mov	r0, r6
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f7 fa39 	bl	8000b2c <__aeabi_dcmpun>
 80096ba:	b128      	cbz	r0, 80096c8 <_scanf_float+0x40c>
 80096bc:	4808      	ldr	r0, [pc, #32]	@ (80096e0 <_scanf_float+0x424>)
 80096be:	f000 faa3 	bl	8009c08 <nanf>
 80096c2:	ed85 0a00 	vstr	s0, [r5]
 80096c6:	e7d1      	b.n	800966c <_scanf_float+0x3b0>
 80096c8:	4630      	mov	r0, r6
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f7 fa8c 	bl	8000be8 <__aeabi_d2f>
 80096d0:	6028      	str	r0, [r5, #0]
 80096d2:	e7cb      	b.n	800966c <_scanf_float+0x3b0>
 80096d4:	f04f 0900 	mov.w	r9, #0
 80096d8:	e629      	b.n	800932e <_scanf_float+0x72>
 80096da:	bf00      	nop
 80096dc:	0800e1d3 	.word	0x0800e1d3
 80096e0:	0800db6b 	.word	0x0800db6b

080096e4 <std>:
 80096e4:	2300      	movs	r3, #0
 80096e6:	b510      	push	{r4, lr}
 80096e8:	4604      	mov	r4, r0
 80096ea:	e9c0 3300 	strd	r3, r3, [r0]
 80096ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096f2:	6083      	str	r3, [r0, #8]
 80096f4:	8181      	strh	r1, [r0, #12]
 80096f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80096f8:	81c2      	strh	r2, [r0, #14]
 80096fa:	6183      	str	r3, [r0, #24]
 80096fc:	4619      	mov	r1, r3
 80096fe:	2208      	movs	r2, #8
 8009700:	305c      	adds	r0, #92	@ 0x5c
 8009702:	f000 f9ad 	bl	8009a60 <memset>
 8009706:	4b0d      	ldr	r3, [pc, #52]	@ (800973c <std+0x58>)
 8009708:	6263      	str	r3, [r4, #36]	@ 0x24
 800970a:	4b0d      	ldr	r3, [pc, #52]	@ (8009740 <std+0x5c>)
 800970c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800970e:	4b0d      	ldr	r3, [pc, #52]	@ (8009744 <std+0x60>)
 8009710:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009712:	4b0d      	ldr	r3, [pc, #52]	@ (8009748 <std+0x64>)
 8009714:	6323      	str	r3, [r4, #48]	@ 0x30
 8009716:	4b0d      	ldr	r3, [pc, #52]	@ (800974c <std+0x68>)
 8009718:	6224      	str	r4, [r4, #32]
 800971a:	429c      	cmp	r4, r3
 800971c:	d006      	beq.n	800972c <std+0x48>
 800971e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009722:	4294      	cmp	r4, r2
 8009724:	d002      	beq.n	800972c <std+0x48>
 8009726:	33d0      	adds	r3, #208	@ 0xd0
 8009728:	429c      	cmp	r4, r3
 800972a:	d105      	bne.n	8009738 <std+0x54>
 800972c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009734:	f7fa b84f 	b.w	80037d6 <__retarget_lock_init_recursive>
 8009738:	bd10      	pop	{r4, pc}
 800973a:	bf00      	nop
 800973c:	08009965 	.word	0x08009965
 8009740:	0800998b 	.word	0x0800998b
 8009744:	080099c3 	.word	0x080099c3
 8009748:	080099e7 	.word	0x080099e7
 800974c:	20008b3c 	.word	0x20008b3c

08009750 <stdio_exit_handler>:
 8009750:	4a02      	ldr	r2, [pc, #8]	@ (800975c <stdio_exit_handler+0xc>)
 8009752:	4903      	ldr	r1, [pc, #12]	@ (8009760 <stdio_exit_handler+0x10>)
 8009754:	4803      	ldr	r0, [pc, #12]	@ (8009764 <stdio_exit_handler+0x14>)
 8009756:	f000 b869 	b.w	800982c <_fwalk_sglue>
 800975a:	bf00      	nop
 800975c:	20000014 	.word	0x20000014
 8009760:	0800c425 	.word	0x0800c425
 8009764:	20000190 	.word	0x20000190

08009768 <cleanup_stdio>:
 8009768:	6841      	ldr	r1, [r0, #4]
 800976a:	4b0c      	ldr	r3, [pc, #48]	@ (800979c <cleanup_stdio+0x34>)
 800976c:	4299      	cmp	r1, r3
 800976e:	b510      	push	{r4, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	d001      	beq.n	8009778 <cleanup_stdio+0x10>
 8009774:	f002 fe56 	bl	800c424 <_fflush_r>
 8009778:	68a1      	ldr	r1, [r4, #8]
 800977a:	4b09      	ldr	r3, [pc, #36]	@ (80097a0 <cleanup_stdio+0x38>)
 800977c:	4299      	cmp	r1, r3
 800977e:	d002      	beq.n	8009786 <cleanup_stdio+0x1e>
 8009780:	4620      	mov	r0, r4
 8009782:	f002 fe4f 	bl	800c424 <_fflush_r>
 8009786:	68e1      	ldr	r1, [r4, #12]
 8009788:	4b06      	ldr	r3, [pc, #24]	@ (80097a4 <cleanup_stdio+0x3c>)
 800978a:	4299      	cmp	r1, r3
 800978c:	d004      	beq.n	8009798 <cleanup_stdio+0x30>
 800978e:	4620      	mov	r0, r4
 8009790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009794:	f002 be46 	b.w	800c424 <_fflush_r>
 8009798:	bd10      	pop	{r4, pc}
 800979a:	bf00      	nop
 800979c:	20008b3c 	.word	0x20008b3c
 80097a0:	20008ba4 	.word	0x20008ba4
 80097a4:	20008c0c 	.word	0x20008c0c

080097a8 <global_stdio_init.part.0>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	4b0b      	ldr	r3, [pc, #44]	@ (80097d8 <global_stdio_init.part.0+0x30>)
 80097ac:	4c0b      	ldr	r4, [pc, #44]	@ (80097dc <global_stdio_init.part.0+0x34>)
 80097ae:	4a0c      	ldr	r2, [pc, #48]	@ (80097e0 <global_stdio_init.part.0+0x38>)
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	4620      	mov	r0, r4
 80097b4:	2200      	movs	r2, #0
 80097b6:	2104      	movs	r1, #4
 80097b8:	f7ff ff94 	bl	80096e4 <std>
 80097bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097c0:	2201      	movs	r2, #1
 80097c2:	2109      	movs	r1, #9
 80097c4:	f7ff ff8e 	bl	80096e4 <std>
 80097c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097cc:	2202      	movs	r2, #2
 80097ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d2:	2112      	movs	r1, #18
 80097d4:	f7ff bf86 	b.w	80096e4 <std>
 80097d8:	20008c74 	.word	0x20008c74
 80097dc:	20008b3c 	.word	0x20008b3c
 80097e0:	08009751 	.word	0x08009751

080097e4 <__sfp_lock_acquire>:
 80097e4:	4801      	ldr	r0, [pc, #4]	@ (80097ec <__sfp_lock_acquire+0x8>)
 80097e6:	f7fa b812 	b.w	800380e <__retarget_lock_acquire_recursive>
 80097ea:	bf00      	nop
 80097ec:	20000bb0 	.word	0x20000bb0

080097f0 <__sfp_lock_release>:
 80097f0:	4801      	ldr	r0, [pc, #4]	@ (80097f8 <__sfp_lock_release+0x8>)
 80097f2:	f7fa b818 	b.w	8003826 <__retarget_lock_release_recursive>
 80097f6:	bf00      	nop
 80097f8:	20000bb0 	.word	0x20000bb0

080097fc <__sinit>:
 80097fc:	b510      	push	{r4, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	f7ff fff0 	bl	80097e4 <__sfp_lock_acquire>
 8009804:	6a23      	ldr	r3, [r4, #32]
 8009806:	b11b      	cbz	r3, 8009810 <__sinit+0x14>
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f7ff bff0 	b.w	80097f0 <__sfp_lock_release>
 8009810:	4b04      	ldr	r3, [pc, #16]	@ (8009824 <__sinit+0x28>)
 8009812:	6223      	str	r3, [r4, #32]
 8009814:	4b04      	ldr	r3, [pc, #16]	@ (8009828 <__sinit+0x2c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f5      	bne.n	8009808 <__sinit+0xc>
 800981c:	f7ff ffc4 	bl	80097a8 <global_stdio_init.part.0>
 8009820:	e7f2      	b.n	8009808 <__sinit+0xc>
 8009822:	bf00      	nop
 8009824:	08009769 	.word	0x08009769
 8009828:	20008c74 	.word	0x20008c74

0800982c <_fwalk_sglue>:
 800982c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009830:	4607      	mov	r7, r0
 8009832:	4688      	mov	r8, r1
 8009834:	4614      	mov	r4, r2
 8009836:	2600      	movs	r6, #0
 8009838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800983c:	f1b9 0901 	subs.w	r9, r9, #1
 8009840:	d505      	bpl.n	800984e <_fwalk_sglue+0x22>
 8009842:	6824      	ldr	r4, [r4, #0]
 8009844:	2c00      	cmp	r4, #0
 8009846:	d1f7      	bne.n	8009838 <_fwalk_sglue+0xc>
 8009848:	4630      	mov	r0, r6
 800984a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d907      	bls.n	8009864 <_fwalk_sglue+0x38>
 8009854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009858:	3301      	adds	r3, #1
 800985a:	d003      	beq.n	8009864 <_fwalk_sglue+0x38>
 800985c:	4629      	mov	r1, r5
 800985e:	4638      	mov	r0, r7
 8009860:	47c0      	blx	r8
 8009862:	4306      	orrs	r6, r0
 8009864:	3568      	adds	r5, #104	@ 0x68
 8009866:	e7e9      	b.n	800983c <_fwalk_sglue+0x10>

08009868 <sniprintf>:
 8009868:	b40c      	push	{r2, r3}
 800986a:	b530      	push	{r4, r5, lr}
 800986c:	4b17      	ldr	r3, [pc, #92]	@ (80098cc <sniprintf+0x64>)
 800986e:	1e0c      	subs	r4, r1, #0
 8009870:	681d      	ldr	r5, [r3, #0]
 8009872:	b09d      	sub	sp, #116	@ 0x74
 8009874:	da08      	bge.n	8009888 <sniprintf+0x20>
 8009876:	238b      	movs	r3, #139	@ 0x8b
 8009878:	602b      	str	r3, [r5, #0]
 800987a:	f04f 30ff 	mov.w	r0, #4294967295
 800987e:	b01d      	add	sp, #116	@ 0x74
 8009880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009884:	b002      	add	sp, #8
 8009886:	4770      	bx	lr
 8009888:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800988c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009890:	bf14      	ite	ne
 8009892:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009896:	4623      	moveq	r3, r4
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	9307      	str	r3, [sp, #28]
 800989c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	9006      	str	r0, [sp, #24]
 80098a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80098aa:	ab21      	add	r3, sp, #132	@ 0x84
 80098ac:	a902      	add	r1, sp, #8
 80098ae:	4628      	mov	r0, r5
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	f002 f91d 	bl	800baf0 <_svfiprintf_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	bfbc      	itt	lt
 80098ba:	238b      	movlt	r3, #139	@ 0x8b
 80098bc:	602b      	strlt	r3, [r5, #0]
 80098be:	2c00      	cmp	r4, #0
 80098c0:	d0dd      	beq.n	800987e <sniprintf+0x16>
 80098c2:	9b02      	ldr	r3, [sp, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
 80098c8:	e7d9      	b.n	800987e <sniprintf+0x16>
 80098ca:	bf00      	nop
 80098cc:	2000018c 	.word	0x2000018c

080098d0 <siprintf>:
 80098d0:	b40e      	push	{r1, r2, r3}
 80098d2:	b500      	push	{lr}
 80098d4:	b09c      	sub	sp, #112	@ 0x70
 80098d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80098d8:	9002      	str	r0, [sp, #8]
 80098da:	9006      	str	r0, [sp, #24]
 80098dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098e0:	4809      	ldr	r0, [pc, #36]	@ (8009908 <siprintf+0x38>)
 80098e2:	9107      	str	r1, [sp, #28]
 80098e4:	9104      	str	r1, [sp, #16]
 80098e6:	4909      	ldr	r1, [pc, #36]	@ (800990c <siprintf+0x3c>)
 80098e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ec:	9105      	str	r1, [sp, #20]
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	a902      	add	r1, sp, #8
 80098f4:	f002 f8fc 	bl	800baf0 <_svfiprintf_r>
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	b01c      	add	sp, #112	@ 0x70
 8009900:	f85d eb04 	ldr.w	lr, [sp], #4
 8009904:	b003      	add	sp, #12
 8009906:	4770      	bx	lr
 8009908:	2000018c 	.word	0x2000018c
 800990c:	ffff0208 	.word	0xffff0208

08009910 <siscanf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b530      	push	{r4, r5, lr}
 8009914:	b09c      	sub	sp, #112	@ 0x70
 8009916:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009918:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800991c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009920:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	9006      	str	r0, [sp, #24]
 8009928:	f7f6 fca2 	bl	8000270 <strlen>
 800992c:	4b0b      	ldr	r3, [pc, #44]	@ (800995c <siscanf+0x4c>)
 800992e:	9003      	str	r0, [sp, #12]
 8009930:	9007      	str	r0, [sp, #28]
 8009932:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009934:	480a      	ldr	r0, [pc, #40]	@ (8009960 <siscanf+0x50>)
 8009936:	9401      	str	r4, [sp, #4]
 8009938:	2300      	movs	r3, #0
 800993a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800993c:	9314      	str	r3, [sp, #80]	@ 0x50
 800993e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009942:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009946:	462a      	mov	r2, r5
 8009948:	4623      	mov	r3, r4
 800994a:	a902      	add	r1, sp, #8
 800994c:	6800      	ldr	r0, [r0, #0]
 800994e:	f002 fa23 	bl	800bd98 <__ssvfiscanf_r>
 8009952:	b01c      	add	sp, #112	@ 0x70
 8009954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009958:	b003      	add	sp, #12
 800995a:	4770      	bx	lr
 800995c:	08009987 	.word	0x08009987
 8009960:	2000018c 	.word	0x2000018c

08009964 <__sread>:
 8009964:	b510      	push	{r4, lr}
 8009966:	460c      	mov	r4, r1
 8009968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996c:	f000 f8ce 	bl	8009b0c <_read_r>
 8009970:	2800      	cmp	r0, #0
 8009972:	bfab      	itete	ge
 8009974:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009976:	89a3      	ldrhlt	r3, [r4, #12]
 8009978:	181b      	addge	r3, r3, r0
 800997a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800997e:	bfac      	ite	ge
 8009980:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009982:	81a3      	strhlt	r3, [r4, #12]
 8009984:	bd10      	pop	{r4, pc}

08009986 <__seofread>:
 8009986:	2000      	movs	r0, #0
 8009988:	4770      	bx	lr

0800998a <__swrite>:
 800998a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	461f      	mov	r7, r3
 8009990:	898b      	ldrh	r3, [r1, #12]
 8009992:	05db      	lsls	r3, r3, #23
 8009994:	4605      	mov	r5, r0
 8009996:	460c      	mov	r4, r1
 8009998:	4616      	mov	r6, r2
 800999a:	d505      	bpl.n	80099a8 <__swrite+0x1e>
 800999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a0:	2302      	movs	r3, #2
 80099a2:	2200      	movs	r2, #0
 80099a4:	f000 f8a0 	bl	8009ae8 <_lseek_r>
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	4632      	mov	r2, r6
 80099b6:	463b      	mov	r3, r7
 80099b8:	4628      	mov	r0, r5
 80099ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099be:	f000 b8c7 	b.w	8009b50 <_write_r>

080099c2 <__sseek>:
 80099c2:	b510      	push	{r4, lr}
 80099c4:	460c      	mov	r4, r1
 80099c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ca:	f000 f88d 	bl	8009ae8 <_lseek_r>
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	bf15      	itete	ne
 80099d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099de:	81a3      	strheq	r3, [r4, #12]
 80099e0:	bf18      	it	ne
 80099e2:	81a3      	strhne	r3, [r4, #12]
 80099e4:	bd10      	pop	{r4, pc}

080099e6 <__sclose>:
 80099e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ea:	f000 b86d 	b.w	8009ac8 <_close_r>

080099ee <_vsniprintf_r>:
 80099ee:	b530      	push	{r4, r5, lr}
 80099f0:	4614      	mov	r4, r2
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	b09b      	sub	sp, #108	@ 0x6c
 80099f6:	4605      	mov	r5, r0
 80099f8:	461a      	mov	r2, r3
 80099fa:	da05      	bge.n	8009a08 <_vsniprintf_r+0x1a>
 80099fc:	238b      	movs	r3, #139	@ 0x8b
 80099fe:	6003      	str	r3, [r0, #0]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	b01b      	add	sp, #108	@ 0x6c
 8009a06:	bd30      	pop	{r4, r5, pc}
 8009a08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a10:	bf14      	ite	ne
 8009a12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a16:	4623      	moveq	r3, r4
 8009a18:	9302      	str	r3, [sp, #8]
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a20:	9100      	str	r1, [sp, #0]
 8009a22:	9104      	str	r1, [sp, #16]
 8009a24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a28:	4669      	mov	r1, sp
 8009a2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009a2c:	f002 f860 	bl	800baf0 <_svfiprintf_r>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	bfbc      	itt	lt
 8009a34:	238b      	movlt	r3, #139	@ 0x8b
 8009a36:	602b      	strlt	r3, [r5, #0]
 8009a38:	2c00      	cmp	r4, #0
 8009a3a:	d0e3      	beq.n	8009a04 <_vsniprintf_r+0x16>
 8009a3c:	9b00      	ldr	r3, [sp, #0]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e7df      	b.n	8009a04 <_vsniprintf_r+0x16>

08009a44 <vsniprintf>:
 8009a44:	b507      	push	{r0, r1, r2, lr}
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	4803      	ldr	r0, [pc, #12]	@ (8009a5c <vsniprintf+0x18>)
 8009a50:	6800      	ldr	r0, [r0, #0]
 8009a52:	f7ff ffcc 	bl	80099ee <_vsniprintf_r>
 8009a56:	b003      	add	sp, #12
 8009a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a5c:	2000018c 	.word	0x2000018c

08009a60 <memset>:
 8009a60:	4402      	add	r2, r0
 8009a62:	4603      	mov	r3, r0
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d100      	bne.n	8009a6a <memset+0xa>
 8009a68:	4770      	bx	lr
 8009a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6e:	e7f9      	b.n	8009a64 <memset+0x4>

08009a70 <strncmp>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	b16a      	cbz	r2, 8009a90 <strncmp+0x20>
 8009a74:	3901      	subs	r1, #1
 8009a76:	1884      	adds	r4, r0, r2
 8009a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d103      	bne.n	8009a8c <strncmp+0x1c>
 8009a84:	42a0      	cmp	r0, r4
 8009a86:	d001      	beq.n	8009a8c <strncmp+0x1c>
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	d1f5      	bne.n	8009a78 <strncmp+0x8>
 8009a8c:	1ad0      	subs	r0, r2, r3
 8009a8e:	bd10      	pop	{r4, pc}
 8009a90:	4610      	mov	r0, r2
 8009a92:	e7fc      	b.n	8009a8e <strncmp+0x1e>

08009a94 <strstr>:
 8009a94:	780a      	ldrb	r2, [r1, #0]
 8009a96:	b570      	push	{r4, r5, r6, lr}
 8009a98:	b96a      	cbnz	r2, 8009ab6 <strstr+0x22>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d109      	bne.n	8009ab4 <strstr+0x20>
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f6      	beq.n	8009a9a <strstr+0x6>
 8009aac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009ab0:	429e      	cmp	r6, r3
 8009ab2:	d0f7      	beq.n	8009aa4 <strstr+0x10>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	7803      	ldrb	r3, [r0, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1ef      	bne.n	8009a9c <strstr+0x8>
 8009abc:	4618      	mov	r0, r3
 8009abe:	e7ec      	b.n	8009a9a <strstr+0x6>

08009ac0 <_localeconv_r>:
 8009ac0:	4800      	ldr	r0, [pc, #0]	@ (8009ac4 <_localeconv_r+0x4>)
 8009ac2:	4770      	bx	lr
 8009ac4:	20000110 	.word	0x20000110

08009ac8 <_close_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	@ (8009ae4 <_close_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f9 fdcc 	bl	8003670 <_close>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_close_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_close_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20008c78 	.word	0x20008c78

08009ae8 <_lseek_r>:
 8009ae8:	b538      	push	{r3, r4, r5, lr}
 8009aea:	4d07      	ldr	r5, [pc, #28]	@ (8009b08 <_lseek_r+0x20>)
 8009aec:	4604      	mov	r4, r0
 8009aee:	4608      	mov	r0, r1
 8009af0:	4611      	mov	r1, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	602a      	str	r2, [r5, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	f7f9 fdc4 	bl	8003684 <_lseek>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_lseek_r+0x1e>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_lseek_r+0x1e>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	20008c78 	.word	0x20008c78

08009b0c <_read_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	@ (8009b2c <_read_r+0x20>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f9 fd8c 	bl	8003638 <_read>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_read_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_read_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20008c78 	.word	0x20008c78

08009b30 <_sbrk_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_sbrk_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f9 fda4 	bl	8003688 <_sbrk>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_sbrk_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_sbrk_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20008c78 	.word	0x20008c78

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	@ (8009b70 <_write_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f9 fd78 	bl	8003654 <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20008c78 	.word	0x20008c78

08009b74 <__errno>:
 8009b74:	4b01      	ldr	r3, [pc, #4]	@ (8009b7c <__errno+0x8>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	2000018c 	.word	0x2000018c

08009b80 <__libc_init_array>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4d0d      	ldr	r5, [pc, #52]	@ (8009bb8 <__libc_init_array+0x38>)
 8009b84:	4c0d      	ldr	r4, [pc, #52]	@ (8009bbc <__libc_init_array+0x3c>)
 8009b86:	1b64      	subs	r4, r4, r5
 8009b88:	10a4      	asrs	r4, r4, #2
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	42a6      	cmp	r6, r4
 8009b8e:	d109      	bne.n	8009ba4 <__libc_init_array+0x24>
 8009b90:	4d0b      	ldr	r5, [pc, #44]	@ (8009bc0 <__libc_init_array+0x40>)
 8009b92:	4c0c      	ldr	r4, [pc, #48]	@ (8009bc4 <__libc_init_array+0x44>)
 8009b94:	f003 f860 	bl	800cc58 <_init>
 8009b98:	1b64      	subs	r4, r4, r5
 8009b9a:	10a4      	asrs	r4, r4, #2
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	42a6      	cmp	r6, r4
 8009ba0:	d105      	bne.n	8009bae <__libc_init_array+0x2e>
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba8:	4798      	blx	r3
 8009baa:	3601      	adds	r6, #1
 8009bac:	e7ee      	b.n	8009b8c <__libc_init_array+0xc>
 8009bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb2:	4798      	blx	r3
 8009bb4:	3601      	adds	r6, #1
 8009bb6:	e7f2      	b.n	8009b9e <__libc_init_array+0x1e>
 8009bb8:	0800e498 	.word	0x0800e498
 8009bbc:	0800e498 	.word	0x0800e498
 8009bc0:	0800e498 	.word	0x0800e498
 8009bc4:	0800e49c 	.word	0x0800e49c

08009bc8 <strcpy>:
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bce:	f803 2b01 	strb.w	r2, [r3], #1
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	d1f9      	bne.n	8009bca <strcpy+0x2>
 8009bd6:	4770      	bx	lr

08009bd8 <memcpy>:
 8009bd8:	440a      	add	r2, r1
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be0:	d100      	bne.n	8009be4 <memcpy+0xc>
 8009be2:	4770      	bx	lr
 8009be4:	b510      	push	{r4, lr}
 8009be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	d1f9      	bne.n	8009be6 <memcpy+0xe>
 8009bf2:	bd10      	pop	{r4, pc}
 8009bf4:	0000      	movs	r0, r0
	...

08009bf8 <nan>:
 8009bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c00 <nan+0x8>
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	00000000 	.word	0x00000000
 8009c04:	7ff80000 	.word	0x7ff80000

08009c08 <nanf>:
 8009c08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009c10 <nanf+0x8>
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	7fc00000 	.word	0x7fc00000

08009c14 <quorem>:
 8009c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	6903      	ldr	r3, [r0, #16]
 8009c1a:	690c      	ldr	r4, [r1, #16]
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	4607      	mov	r7, r0
 8009c20:	db7e      	blt.n	8009d20 <quorem+0x10c>
 8009c22:	3c01      	subs	r4, #1
 8009c24:	f101 0814 	add.w	r8, r1, #20
 8009c28:	00a3      	lsls	r3, r4, #2
 8009c2a:	f100 0514 	add.w	r5, r0, #20
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c46:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c4a:	d32e      	bcc.n	8009caa <quorem+0x96>
 8009c4c:	f04f 0a00 	mov.w	sl, #0
 8009c50:	46c4      	mov	ip, r8
 8009c52:	46ae      	mov	lr, r5
 8009c54:	46d3      	mov	fp, sl
 8009c56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c5a:	b298      	uxth	r0, r3
 8009c5c:	fb06 a000 	mla	r0, r6, r0, sl
 8009c60:	0c02      	lsrs	r2, r0, #16
 8009c62:	0c1b      	lsrs	r3, r3, #16
 8009c64:	fb06 2303 	mla	r3, r6, r3, r2
 8009c68:	f8de 2000 	ldr.w	r2, [lr]
 8009c6c:	b280      	uxth	r0, r0
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	1a12      	subs	r2, r2, r0
 8009c72:	445a      	add	r2, fp
 8009c74:	f8de 0000 	ldr.w	r0, [lr]
 8009c78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c86:	b292      	uxth	r2, r2
 8009c88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c8c:	45e1      	cmp	r9, ip
 8009c8e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c96:	d2de      	bcs.n	8009c56 <quorem+0x42>
 8009c98:	9b00      	ldr	r3, [sp, #0]
 8009c9a:	58eb      	ldr	r3, [r5, r3]
 8009c9c:	b92b      	cbnz	r3, 8009caa <quorem+0x96>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	d32f      	bcc.n	8009d08 <quorem+0xf4>
 8009ca8:	613c      	str	r4, [r7, #16]
 8009caa:	4638      	mov	r0, r7
 8009cac:	f001 fc5a 	bl	800b564 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	db25      	blt.n	8009d00 <quorem+0xec>
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cbc:	f8d1 c000 	ldr.w	ip, [r1]
 8009cc0:	fa1f fe82 	uxth.w	lr, r2
 8009cc4:	fa1f f38c 	uxth.w	r3, ip
 8009cc8:	eba3 030e 	sub.w	r3, r3, lr
 8009ccc:	4403      	add	r3, r0
 8009cce:	0c12      	lsrs	r2, r2, #16
 8009cd0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cd4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cde:	45c1      	cmp	r9, r8
 8009ce0:	f841 3b04 	str.w	r3, [r1], #4
 8009ce4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ce8:	d2e6      	bcs.n	8009cb8 <quorem+0xa4>
 8009cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cf2:	b922      	cbnz	r2, 8009cfe <quorem+0xea>
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <quorem+0x100>
 8009cfc:	613c      	str	r4, [r7, #16]
 8009cfe:	3601      	adds	r6, #1
 8009d00:	4630      	mov	r0, r6
 8009d02:	b003      	add	sp, #12
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	3b04      	subs	r3, #4
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	d1cb      	bne.n	8009ca8 <quorem+0x94>
 8009d10:	3c01      	subs	r4, #1
 8009d12:	e7c6      	b.n	8009ca2 <quorem+0x8e>
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	3b04      	subs	r3, #4
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d1ef      	bne.n	8009cfc <quorem+0xe8>
 8009d1c:	3c01      	subs	r4, #1
 8009d1e:	e7ea      	b.n	8009cf6 <quorem+0xe2>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e7ee      	b.n	8009d02 <quorem+0xee>
 8009d24:	0000      	movs	r0, r0
	...

08009d28 <_dtoa_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	69c7      	ldr	r7, [r0, #28]
 8009d2e:	b099      	sub	sp, #100	@ 0x64
 8009d30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d34:	ec55 4b10 	vmov	r4, r5, d0
 8009d38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d3c:	4683      	mov	fp, r0
 8009d3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d42:	b97f      	cbnz	r7, 8009d64 <_dtoa_r+0x3c>
 8009d44:	2010      	movs	r0, #16
 8009d46:	f7fd ff25 	bl	8007b94 <malloc>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d50:	b920      	cbnz	r0, 8009d5c <_dtoa_r+0x34>
 8009d52:	4ba7      	ldr	r3, [pc, #668]	@ (8009ff0 <_dtoa_r+0x2c8>)
 8009d54:	21ef      	movs	r1, #239	@ 0xef
 8009d56:	48a7      	ldr	r0, [pc, #668]	@ (8009ff4 <_dtoa_r+0x2cc>)
 8009d58:	f002 fc1a 	bl	800c590 <__assert_func>
 8009d5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d60:	6007      	str	r7, [r0, #0]
 8009d62:	60c7      	str	r7, [r0, #12]
 8009d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	b159      	cbz	r1, 8009d84 <_dtoa_r+0x5c>
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	604a      	str	r2, [r1, #4]
 8009d70:	2301      	movs	r3, #1
 8009d72:	4093      	lsls	r3, r2
 8009d74:	608b      	str	r3, [r1, #8]
 8009d76:	4658      	mov	r0, fp
 8009d78:	f001 f970 	bl	800b05c <_Bfree>
 8009d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	1e2b      	subs	r3, r5, #0
 8009d86:	bfb9      	ittee	lt
 8009d88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d8c:	9303      	strlt	r3, [sp, #12]
 8009d8e:	2300      	movge	r3, #0
 8009d90:	6033      	strge	r3, [r6, #0]
 8009d92:	9f03      	ldr	r7, [sp, #12]
 8009d94:	4b98      	ldr	r3, [pc, #608]	@ (8009ff8 <_dtoa_r+0x2d0>)
 8009d96:	bfbc      	itt	lt
 8009d98:	2201      	movlt	r2, #1
 8009d9a:	6032      	strlt	r2, [r6, #0]
 8009d9c:	43bb      	bics	r3, r7
 8009d9e:	d112      	bne.n	8009dc6 <_dtoa_r+0x9e>
 8009da0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009da2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dac:	4323      	orrs	r3, r4
 8009dae:	f000 854d 	beq.w	800a84c <_dtoa_r+0xb24>
 8009db2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009db4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a00c <_dtoa_r+0x2e4>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 854f 	beq.w	800a85c <_dtoa_r+0xb34>
 8009dbe:	f10a 0303 	add.w	r3, sl, #3
 8009dc2:	f000 bd49 	b.w	800a858 <_dtoa_r+0xb30>
 8009dc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	ec51 0b17 	vmov	r0, r1, d7
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009dd6:	f7f6 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	b158      	cbz	r0, 8009df6 <_dtoa_r+0xce>
 8009dde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009de0:	2301      	movs	r3, #1
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009de6:	b113      	cbz	r3, 8009dee <_dtoa_r+0xc6>
 8009de8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009dea:	4b84      	ldr	r3, [pc, #528]	@ (8009ffc <_dtoa_r+0x2d4>)
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a010 <_dtoa_r+0x2e8>
 8009df2:	f000 bd33 	b.w	800a85c <_dtoa_r+0xb34>
 8009df6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009dfa:	aa16      	add	r2, sp, #88	@ 0x58
 8009dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8009dfe:	4658      	mov	r0, fp
 8009e00:	f001 fcd0 	bl	800b7a4 <__d2b>
 8009e04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e08:	4681      	mov	r9, r0
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d077      	beq.n	8009efe <_dtoa_r+0x1d6>
 8009e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	4b74      	ldr	r3, [pc, #464]	@ (800a000 <_dtoa_r+0x2d8>)
 8009e2e:	f7f6 fa2b 	bl	8000288 <__aeabi_dsub>
 8009e32:	a369      	add	r3, pc, #420	@ (adr r3, 8009fd8 <_dtoa_r+0x2b0>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fbde 	bl	80005f8 <__aeabi_dmul>
 8009e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8009fe0 <_dtoa_r+0x2b8>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fa23 	bl	800028c <__adddf3>
 8009e46:	4604      	mov	r4, r0
 8009e48:	4630      	mov	r0, r6
 8009e4a:	460d      	mov	r5, r1
 8009e4c:	f7f6 fb6a 	bl	8000524 <__aeabi_i2d>
 8009e50:	a365      	add	r3, pc, #404	@ (adr r3, 8009fe8 <_dtoa_r+0x2c0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fa13 	bl	800028c <__adddf3>
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	f7f6 fe75 	bl	8000b58 <__aeabi_d2iz>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4607      	mov	r7, r0
 8009e72:	2300      	movs	r3, #0
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fe30 	bl	8000adc <__aeabi_dcmplt>
 8009e7c:	b140      	cbz	r0, 8009e90 <_dtoa_r+0x168>
 8009e7e:	4638      	mov	r0, r7
 8009e80:	f7f6 fb50 	bl	8000524 <__aeabi_i2d>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e8c:	b900      	cbnz	r0, 8009e90 <_dtoa_r+0x168>
 8009e8e:	3f01      	subs	r7, #1
 8009e90:	2f16      	cmp	r7, #22
 8009e92:	d851      	bhi.n	8009f38 <_dtoa_r+0x210>
 8009e94:	4b5b      	ldr	r3, [pc, #364]	@ (800a004 <_dtoa_r+0x2dc>)
 8009e96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ea2:	f7f6 fe1b 	bl	8000adc <__aeabi_dcmplt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d048      	beq.n	8009f3c <_dtoa_r+0x214>
 8009eaa:	3f01      	subs	r7, #1
 8009eac:	2300      	movs	r3, #0
 8009eae:	9312      	str	r3, [sp, #72]	@ 0x48
 8009eb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009eb2:	1b9b      	subs	r3, r3, r6
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	bf44      	itt	mi
 8009eb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ebc:	2300      	movmi	r3, #0
 8009ebe:	9208      	str	r2, [sp, #32]
 8009ec0:	bf54      	ite	pl
 8009ec2:	f04f 0800 	movpl.w	r8, #0
 8009ec6:	9308      	strmi	r3, [sp, #32]
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	db39      	blt.n	8009f40 <_dtoa_r+0x218>
 8009ecc:	9b08      	ldr	r3, [sp, #32]
 8009ece:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ed0:	443b      	add	r3, r7
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	d864      	bhi.n	8009fa8 <_dtoa_r+0x280>
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	bfc4      	itt	gt
 8009ee2:	3b04      	subgt	r3, #4
 8009ee4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8009eec:	bfcc      	ite	gt
 8009eee:	2400      	movgt	r4, #0
 8009ef0:	2401      	movle	r4, #1
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d863      	bhi.n	8009fbe <_dtoa_r+0x296>
 8009ef6:	e8df f003 	tbb	[pc, r3]
 8009efa:	372a      	.short	0x372a
 8009efc:	5535      	.short	0x5535
 8009efe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009f02:	441e      	add	r6, r3
 8009f04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	bfc1      	itttt	gt
 8009f0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f10:	409f      	lslgt	r7, r3
 8009f12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f1a:	bfd6      	itet	le
 8009f1c:	f1c3 0320 	rsble	r3, r3, #32
 8009f20:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f24:	fa04 f003 	lslle.w	r0, r4, r3
 8009f28:	f7f6 faec 	bl	8000504 <__aeabi_ui2d>
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f32:	3e01      	subs	r6, #1
 8009f34:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f36:	e777      	b.n	8009e28 <_dtoa_r+0x100>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e7b8      	b.n	8009eae <_dtoa_r+0x186>
 8009f3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f3e:	e7b7      	b.n	8009eb0 <_dtoa_r+0x188>
 8009f40:	427b      	negs	r3, r7
 8009f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f44:	2300      	movs	r3, #0
 8009f46:	eba8 0807 	sub.w	r8, r8, r7
 8009f4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f4c:	e7c4      	b.n	8009ed8 <_dtoa_r+0x1b0>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc35      	bgt.n	8009fc4 <_dtoa_r+0x29c>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f62:	e00b      	b.n	8009f7c <_dtoa_r+0x254>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e7f3      	b.n	8009f50 <_dtoa_r+0x228>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f6e:	18fb      	adds	r3, r7, r3
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	bfb8      	it	lt
 8009f7a:	2301      	movlt	r3, #1
 8009f7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f80:	2100      	movs	r1, #0
 8009f82:	2204      	movs	r2, #4
 8009f84:	f102 0514 	add.w	r5, r2, #20
 8009f88:	429d      	cmp	r5, r3
 8009f8a:	d91f      	bls.n	8009fcc <_dtoa_r+0x2a4>
 8009f8c:	6041      	str	r1, [r0, #4]
 8009f8e:	4658      	mov	r0, fp
 8009f90:	f001 f824 	bl	800afdc <_Balloc>
 8009f94:	4682      	mov	sl, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d13c      	bne.n	800a014 <_dtoa_r+0x2ec>
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	@ (800a008 <_dtoa_r+0x2e0>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fa2:	e6d8      	b.n	8009d56 <_dtoa_r+0x2e>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e7e0      	b.n	8009f6a <_dtoa_r+0x242>
 8009fa8:	2401      	movs	r4, #1
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2312      	movs	r3, #18
 8009fbc:	e7d0      	b.n	8009f60 <_dtoa_r+0x238>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fc2:	e7f5      	b.n	8009fb0 <_dtoa_r+0x288>
 8009fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	9307      	str	r3, [sp, #28]
 8009fca:	e7d7      	b.n	8009f7c <_dtoa_r+0x254>
 8009fcc:	3101      	adds	r1, #1
 8009fce:	0052      	lsls	r2, r2, #1
 8009fd0:	e7d8      	b.n	8009f84 <_dtoa_r+0x25c>
 8009fd2:	bf00      	nop
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	636f4361 	.word	0x636f4361
 8009fdc:	3fd287a7 	.word	0x3fd287a7
 8009fe0:	8b60c8b3 	.word	0x8b60c8b3
 8009fe4:	3fc68a28 	.word	0x3fc68a28
 8009fe8:	509f79fb 	.word	0x509f79fb
 8009fec:	3fd34413 	.word	0x3fd34413
 8009ff0:	0800e1ed 	.word	0x0800e1ed
 8009ff4:	0800e204 	.word	0x0800e204
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	0800e450 	.word	0x0800e450
 800a000:	3ff80000 	.word	0x3ff80000
 800a004:	0800e360 	.word	0x0800e360
 800a008:	0800e25c 	.word	0x0800e25c
 800a00c:	0800e1e9 	.word	0x0800e1e9
 800a010:	0800e44f 	.word	0x0800e44f
 800a014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a018:	6018      	str	r0, [r3, #0]
 800a01a:	9b07      	ldr	r3, [sp, #28]
 800a01c:	2b0e      	cmp	r3, #14
 800a01e:	f200 80a4 	bhi.w	800a16a <_dtoa_r+0x442>
 800a022:	2c00      	cmp	r4, #0
 800a024:	f000 80a1 	beq.w	800a16a <_dtoa_r+0x442>
 800a028:	2f00      	cmp	r7, #0
 800a02a:	dd33      	ble.n	800a094 <_dtoa_r+0x36c>
 800a02c:	4bad      	ldr	r3, [pc, #692]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a02e:	f007 020f 	and.w	r2, r7, #15
 800a032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a036:	ed93 7b00 	vldr	d7, [r3]
 800a03a:	05f8      	lsls	r0, r7, #23
 800a03c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a040:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a044:	d516      	bpl.n	800a074 <_dtoa_r+0x34c>
 800a046:	4ba8      	ldr	r3, [pc, #672]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a050:	f7f6 fbfc 	bl	800084c <__aeabi_ddiv>
 800a054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a058:	f004 040f 	and.w	r4, r4, #15
 800a05c:	2603      	movs	r6, #3
 800a05e:	4da2      	ldr	r5, [pc, #648]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a060:	b954      	cbnz	r4, 800a078 <_dtoa_r+0x350>
 800a062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06a:	f7f6 fbef 	bl	800084c <__aeabi_ddiv>
 800a06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a072:	e028      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a074:	2602      	movs	r6, #2
 800a076:	e7f2      	b.n	800a05e <_dtoa_r+0x336>
 800a078:	07e1      	lsls	r1, r4, #31
 800a07a:	d508      	bpl.n	800a08e <_dtoa_r+0x366>
 800a07c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a08c:	3601      	adds	r6, #1
 800a08e:	1064      	asrs	r4, r4, #1
 800a090:	3508      	adds	r5, #8
 800a092:	e7e5      	b.n	800a060 <_dtoa_r+0x338>
 800a094:	f000 80d2 	beq.w	800a23c <_dtoa_r+0x514>
 800a098:	427c      	negs	r4, r7
 800a09a:	4b92      	ldr	r3, [pc, #584]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a09c:	4d92      	ldr	r5, [pc, #584]	@ (800a2e8 <_dtoa_r+0x5c0>)
 800a09e:	f004 020f 	and.w	r2, r4, #15
 800a0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b6:	1124      	asrs	r4, r4, #4
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2602      	movs	r6, #2
 800a0bc:	2c00      	cmp	r4, #0
 800a0be:	f040 80b2 	bne.w	800a226 <_dtoa_r+0x4fe>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1d3      	bne.n	800a06e <_dtoa_r+0x346>
 800a0c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 80b7 	beq.w	800a240 <_dtoa_r+0x518>
 800a0d2:	4b86      	ldr	r3, [pc, #536]	@ (800a2ec <_dtoa_r+0x5c4>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fcff 	bl	8000adc <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f000 80ae 	beq.w	800a240 <_dtoa_r+0x518>
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 80aa 	beq.w	800a240 <_dtoa_r+0x518>
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dd37      	ble.n	800a162 <_dtoa_r+0x43a>
 800a0f2:	1e7b      	subs	r3, r7, #1
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4b7d      	ldr	r3, [pc, #500]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 fa7b 	bl	80005f8 <__aeabi_dmul>
 800a102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a106:	9c00      	ldr	r4, [sp, #0]
 800a108:	3601      	adds	r6, #1
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7f6 fa0a 	bl	8000524 <__aeabi_i2d>
 800a110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a114:	f7f6 fa70 	bl	80005f8 <__aeabi_dmul>
 800a118:	4b76      	ldr	r3, [pc, #472]	@ (800a2f4 <_dtoa_r+0x5cc>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f8b6 	bl	800028c <__adddf3>
 800a120:	4605      	mov	r5, r0
 800a122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a126:	2c00      	cmp	r4, #0
 800a128:	f040 808d 	bne.w	800a246 <_dtoa_r+0x51e>
 800a12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a130:	4b71      	ldr	r3, [pc, #452]	@ (800a2f8 <_dtoa_r+0x5d0>)
 800a132:	2200      	movs	r2, #0
 800a134:	f7f6 f8a8 	bl	8000288 <__aeabi_dsub>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a140:	462a      	mov	r2, r5
 800a142:	4633      	mov	r3, r6
 800a144:	f7f6 fce8 	bl	8000b18 <__aeabi_dcmpgt>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 828b 	bne.w	800a664 <_dtoa_r+0x93c>
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a152:	462a      	mov	r2, r5
 800a154:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a158:	f7f6 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f040 8128 	bne.w	800a3b2 <_dtoa_r+0x68a>
 800a162:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a166:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f2c0 815a 	blt.w	800a426 <_dtoa_r+0x6fe>
 800a172:	2f0e      	cmp	r7, #14
 800a174:	f300 8157 	bgt.w	800a426 <_dtoa_r+0x6fe>
 800a178:	4b5a      	ldr	r3, [pc, #360]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a17a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a17e:	ed93 7b00 	vldr	d7, [r3]
 800a182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	ed8d 7b00 	vstr	d7, [sp]
 800a18a:	da03      	bge.n	800a194 <_dtoa_r+0x46c>
 800a18c:	9b07      	ldr	r3, [sp, #28]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f340 8101 	ble.w	800a396 <_dtoa_r+0x66e>
 800a194:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a198:	4656      	mov	r6, sl
 800a19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 fb53 	bl	800084c <__aeabi_ddiv>
 800a1a6:	f7f6 fcd7 	bl	8000b58 <__aeabi_d2iz>
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	f7f6 f9ba 	bl	8000524 <__aeabi_i2d>
 800a1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b4:	f7f6 fa20 	bl	80005f8 <__aeabi_dmul>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1c4:	f7f6 f860 	bl	8000288 <__aeabi_dsub>
 800a1c8:	f806 4b01 	strb.w	r4, [r6], #1
 800a1cc:	9d07      	ldr	r5, [sp, #28]
 800a1ce:	eba6 040a 	sub.w	r4, r6, sl
 800a1d2:	42a5      	cmp	r5, r4
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	f040 8117 	bne.w	800a40a <_dtoa_r+0x6e2>
 800a1dc:	f7f6 f856 	bl	800028c <__adddf3>
 800a1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	f7f6 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 80f9 	bne.w	800a3e4 <_dtoa_r+0x6bc>
 800a1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7f6 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1fe:	b118      	cbz	r0, 800a208 <_dtoa_r+0x4e0>
 800a200:	f018 0f01 	tst.w	r8, #1
 800a204:	f040 80ee 	bne.w	800a3e4 <_dtoa_r+0x6bc>
 800a208:	4649      	mov	r1, r9
 800a20a:	4658      	mov	r0, fp
 800a20c:	f000 ff26 	bl	800b05c <_Bfree>
 800a210:	2300      	movs	r3, #0
 800a212:	7033      	strb	r3, [r6, #0]
 800a214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a216:	3701      	adds	r7, #1
 800a218:	601f      	str	r7, [r3, #0]
 800a21a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 831d 	beq.w	800a85c <_dtoa_r+0xb34>
 800a222:	601e      	str	r6, [r3, #0]
 800a224:	e31a      	b.n	800a85c <_dtoa_r+0xb34>
 800a226:	07e2      	lsls	r2, r4, #31
 800a228:	d505      	bpl.n	800a236 <_dtoa_r+0x50e>
 800a22a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a22e:	f7f6 f9e3 	bl	80005f8 <__aeabi_dmul>
 800a232:	3601      	adds	r6, #1
 800a234:	2301      	movs	r3, #1
 800a236:	1064      	asrs	r4, r4, #1
 800a238:	3508      	adds	r5, #8
 800a23a:	e73f      	b.n	800a0bc <_dtoa_r+0x394>
 800a23c:	2602      	movs	r6, #2
 800a23e:	e742      	b.n	800a0c6 <_dtoa_r+0x39e>
 800a240:	9c07      	ldr	r4, [sp, #28]
 800a242:	9704      	str	r7, [sp, #16]
 800a244:	e761      	b.n	800a10a <_dtoa_r+0x3e2>
 800a246:	4b27      	ldr	r3, [pc, #156]	@ (800a2e4 <_dtoa_r+0x5bc>)
 800a248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a24a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a24e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a252:	4454      	add	r4, sl
 800a254:	2900      	cmp	r1, #0
 800a256:	d053      	beq.n	800a300 <_dtoa_r+0x5d8>
 800a258:	4928      	ldr	r1, [pc, #160]	@ (800a2fc <_dtoa_r+0x5d4>)
 800a25a:	2000      	movs	r0, #0
 800a25c:	f7f6 faf6 	bl	800084c <__aeabi_ddiv>
 800a260:	4633      	mov	r3, r6
 800a262:	462a      	mov	r2, r5
 800a264:	f7f6 f810 	bl	8000288 <__aeabi_dsub>
 800a268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a26c:	4656      	mov	r6, sl
 800a26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a272:	f7f6 fc71 	bl	8000b58 <__aeabi_d2iz>
 800a276:	4605      	mov	r5, r0
 800a278:	f7f6 f954 	bl	8000524 <__aeabi_i2d>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a284:	f7f6 f800 	bl	8000288 <__aeabi_dsub>
 800a288:	3530      	adds	r5, #48	@ 0x30
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a292:	f806 5b01 	strb.w	r5, [r6], #1
 800a296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a29a:	f7f6 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d171      	bne.n	800a386 <_dtoa_r+0x65e>
 800a2a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2a6:	4911      	ldr	r1, [pc, #68]	@ (800a2ec <_dtoa_r+0x5c4>)
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	f7f5 ffed 	bl	8000288 <__aeabi_dsub>
 800a2ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2b2:	f7f6 fc13 	bl	8000adc <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f040 8095 	bne.w	800a3e6 <_dtoa_r+0x6be>
 800a2bc:	42a6      	cmp	r6, r4
 800a2be:	f43f af50 	beq.w	800a162 <_dtoa_r+0x43a>
 800a2c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	4b08      	ldr	r3, [pc, #32]	@ (800a2f0 <_dtoa_r+0x5c8>)
 800a2d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e2:	e7c4      	b.n	800a26e <_dtoa_r+0x546>
 800a2e4:	0800e360 	.word	0x0800e360
 800a2e8:	0800e338 	.word	0x0800e338
 800a2ec:	3ff00000 	.word	0x3ff00000
 800a2f0:	40240000 	.word	0x40240000
 800a2f4:	401c0000 	.word	0x401c0000
 800a2f8:	40140000 	.word	0x40140000
 800a2fc:	3fe00000 	.word	0x3fe00000
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	f7f6 f978 	bl	80005f8 <__aeabi_dmul>
 800a308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a30c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a30e:	4656      	mov	r6, sl
 800a310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a314:	f7f6 fc20 	bl	8000b58 <__aeabi_d2iz>
 800a318:	4605      	mov	r5, r0
 800a31a:	f7f6 f903 	bl	8000524 <__aeabi_i2d>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a326:	f7f5 ffaf 	bl	8000288 <__aeabi_dsub>
 800a32a:	3530      	adds	r5, #48	@ 0x30
 800a32c:	f806 5b01 	strb.w	r5, [r6], #1
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	42a6      	cmp	r6, r4
 800a336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a33a:	f04f 0200 	mov.w	r2, #0
 800a33e:	d124      	bne.n	800a38a <_dtoa_r+0x662>
 800a340:	4bac      	ldr	r3, [pc, #688]	@ (800a5f4 <_dtoa_r+0x8cc>)
 800a342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a346:	f7f5 ffa1 	bl	800028c <__adddf3>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a352:	f7f6 fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d145      	bne.n	800a3e6 <_dtoa_r+0x6be>
 800a35a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a35e:	49a5      	ldr	r1, [pc, #660]	@ (800a5f4 <_dtoa_r+0x8cc>)
 800a360:	2000      	movs	r0, #0
 800a362:	f7f5 ff91 	bl	8000288 <__aeabi_dsub>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a36e:	f7f6 fbb5 	bl	8000adc <__aeabi_dcmplt>
 800a372:	2800      	cmp	r0, #0
 800a374:	f43f aef5 	beq.w	800a162 <_dtoa_r+0x43a>
 800a378:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a37a:	1e73      	subs	r3, r6, #1
 800a37c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a37e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a382:	2b30      	cmp	r3, #48	@ 0x30
 800a384:	d0f8      	beq.n	800a378 <_dtoa_r+0x650>
 800a386:	9f04      	ldr	r7, [sp, #16]
 800a388:	e73e      	b.n	800a208 <_dtoa_r+0x4e0>
 800a38a:	4b9b      	ldr	r3, [pc, #620]	@ (800a5f8 <_dtoa_r+0x8d0>)
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a394:	e7bc      	b.n	800a310 <_dtoa_r+0x5e8>
 800a396:	d10c      	bne.n	800a3b2 <_dtoa_r+0x68a>
 800a398:	4b98      	ldr	r3, [pc, #608]	@ (800a5fc <_dtoa_r+0x8d4>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3a8:	f7f6 fbac 	bl	8000b04 <__aeabi_dcmpge>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f000 8157 	beq.w	800a660 <_dtoa_r+0x938>
 800a3b2:	2400      	movs	r4, #0
 800a3b4:	4625      	mov	r5, r4
 800a3b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	4656      	mov	r6, sl
 800a3be:	2700      	movs	r7, #0
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4658      	mov	r0, fp
 800a3c4:	f000 fe4a 	bl	800b05c <_Bfree>
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d0dc      	beq.n	800a386 <_dtoa_r+0x65e>
 800a3cc:	b12f      	cbz	r7, 800a3da <_dtoa_r+0x6b2>
 800a3ce:	42af      	cmp	r7, r5
 800a3d0:	d003      	beq.n	800a3da <_dtoa_r+0x6b2>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	f000 fe41 	bl	800b05c <_Bfree>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4658      	mov	r0, fp
 800a3de:	f000 fe3d 	bl	800b05c <_Bfree>
 800a3e2:	e7d0      	b.n	800a386 <_dtoa_r+0x65e>
 800a3e4:	9704      	str	r7, [sp, #16]
 800a3e6:	4633      	mov	r3, r6
 800a3e8:	461e      	mov	r6, r3
 800a3ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3ee:	2a39      	cmp	r2, #57	@ 0x39
 800a3f0:	d107      	bne.n	800a402 <_dtoa_r+0x6da>
 800a3f2:	459a      	cmp	sl, r3
 800a3f4:	d1f8      	bne.n	800a3e8 <_dtoa_r+0x6c0>
 800a3f6:	9a04      	ldr	r2, [sp, #16]
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	9204      	str	r2, [sp, #16]
 800a3fc:	2230      	movs	r2, #48	@ 0x30
 800a3fe:	f88a 2000 	strb.w	r2, [sl]
 800a402:	781a      	ldrb	r2, [r3, #0]
 800a404:	3201      	adds	r2, #1
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	e7bd      	b.n	800a386 <_dtoa_r+0x65e>
 800a40a:	4b7b      	ldr	r3, [pc, #492]	@ (800a5f8 <_dtoa_r+0x8d0>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	2200      	movs	r2, #0
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	460d      	mov	r5, r1
 800a41a:	f7f6 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800a41e:	2800      	cmp	r0, #0
 800a420:	f43f aebb 	beq.w	800a19a <_dtoa_r+0x472>
 800a424:	e6f0      	b.n	800a208 <_dtoa_r+0x4e0>
 800a426:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a428:	2a00      	cmp	r2, #0
 800a42a:	f000 80db 	beq.w	800a5e4 <_dtoa_r+0x8bc>
 800a42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a430:	2a01      	cmp	r2, #1
 800a432:	f300 80bf 	bgt.w	800a5b4 <_dtoa_r+0x88c>
 800a436:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a438:	2a00      	cmp	r2, #0
 800a43a:	f000 80b7 	beq.w	800a5ac <_dtoa_r+0x884>
 800a43e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a442:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a444:	4646      	mov	r6, r8
 800a446:	9a08      	ldr	r2, [sp, #32]
 800a448:	2101      	movs	r1, #1
 800a44a:	441a      	add	r2, r3
 800a44c:	4658      	mov	r0, fp
 800a44e:	4498      	add	r8, r3
 800a450:	9208      	str	r2, [sp, #32]
 800a452:	f000 ff01 	bl	800b258 <__i2b>
 800a456:	4605      	mov	r5, r0
 800a458:	b15e      	cbz	r6, 800a472 <_dtoa_r+0x74a>
 800a45a:	9b08      	ldr	r3, [sp, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd08      	ble.n	800a472 <_dtoa_r+0x74a>
 800a460:	42b3      	cmp	r3, r6
 800a462:	9a08      	ldr	r2, [sp, #32]
 800a464:	bfa8      	it	ge
 800a466:	4633      	movge	r3, r6
 800a468:	eba8 0803 	sub.w	r8, r8, r3
 800a46c:	1af6      	subs	r6, r6, r3
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	9308      	str	r3, [sp, #32]
 800a472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a474:	b1f3      	cbz	r3, 800a4b4 <_dtoa_r+0x78c>
 800a476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80b7 	beq.w	800a5ec <_dtoa_r+0x8c4>
 800a47e:	b18c      	cbz	r4, 800a4a4 <_dtoa_r+0x77c>
 800a480:	4629      	mov	r1, r5
 800a482:	4622      	mov	r2, r4
 800a484:	4658      	mov	r0, fp
 800a486:	f000 ffa7 	bl	800b3d8 <__pow5mult>
 800a48a:	464a      	mov	r2, r9
 800a48c:	4601      	mov	r1, r0
 800a48e:	4605      	mov	r5, r0
 800a490:	4658      	mov	r0, fp
 800a492:	f000 fef7 	bl	800b284 <__multiply>
 800a496:	4649      	mov	r1, r9
 800a498:	9004      	str	r0, [sp, #16]
 800a49a:	4658      	mov	r0, fp
 800a49c:	f000 fdde 	bl	800b05c <_Bfree>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	4699      	mov	r9, r3
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	1b1a      	subs	r2, r3, r4
 800a4a8:	d004      	beq.n	800a4b4 <_dtoa_r+0x78c>
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4658      	mov	r0, fp
 800a4ae:	f000 ff93 	bl	800b3d8 <__pow5mult>
 800a4b2:	4681      	mov	r9, r0
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fece 	bl	800b258 <__i2b>
 800a4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4be:	4604      	mov	r4, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 81cf 	beq.w	800a864 <_dtoa_r+0xb3c>
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	4658      	mov	r0, fp
 800a4cc:	f000 ff84 	bl	800b3d8 <__pow5mult>
 800a4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	f300 8095 	bgt.w	800a604 <_dtoa_r+0x8dc>
 800a4da:	9b02      	ldr	r3, [sp, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 8087 	bne.w	800a5f0 <_dtoa_r+0x8c8>
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 8089 	bne.w	800a600 <_dtoa_r+0x8d8>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4f4:	0d1b      	lsrs	r3, r3, #20
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	b12b      	cbz	r3, 800a506 <_dtoa_r+0x7de>
 800a4fa:	9b08      	ldr	r3, [sp, #32]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	f108 0801 	add.w	r8, r8, #1
 800a504:	2301      	movs	r3, #1
 800a506:	930a      	str	r3, [sp, #40]	@ 0x28
 800a508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 81b0 	beq.w	800a870 <_dtoa_r+0xb48>
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a516:	6918      	ldr	r0, [r3, #16]
 800a518:	f000 fe52 	bl	800b1c0 <__hi0bits>
 800a51c:	f1c0 0020 	rsb	r0, r0, #32
 800a520:	9b08      	ldr	r3, [sp, #32]
 800a522:	4418      	add	r0, r3
 800a524:	f010 001f 	ands.w	r0, r0, #31
 800a528:	d077      	beq.n	800a61a <_dtoa_r+0x8f2>
 800a52a:	f1c0 0320 	rsb	r3, r0, #32
 800a52e:	2b04      	cmp	r3, #4
 800a530:	dd6b      	ble.n	800a60a <_dtoa_r+0x8e2>
 800a532:	9b08      	ldr	r3, [sp, #32]
 800a534:	f1c0 001c 	rsb	r0, r0, #28
 800a538:	4403      	add	r3, r0
 800a53a:	4480      	add	r8, r0
 800a53c:	4406      	add	r6, r0
 800a53e:	9308      	str	r3, [sp, #32]
 800a540:	f1b8 0f00 	cmp.w	r8, #0
 800a544:	dd05      	ble.n	800a552 <_dtoa_r+0x82a>
 800a546:	4649      	mov	r1, r9
 800a548:	4642      	mov	r2, r8
 800a54a:	4658      	mov	r0, fp
 800a54c:	f000 ff9e 	bl	800b48c <__lshift>
 800a550:	4681      	mov	r9, r0
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	dd05      	ble.n	800a564 <_dtoa_r+0x83c>
 800a558:	4621      	mov	r1, r4
 800a55a:	461a      	mov	r2, r3
 800a55c:	4658      	mov	r0, fp
 800a55e:	f000 ff95 	bl	800b48c <__lshift>
 800a562:	4604      	mov	r4, r0
 800a564:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a566:	2b00      	cmp	r3, #0
 800a568:	d059      	beq.n	800a61e <_dtoa_r+0x8f6>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4648      	mov	r0, r9
 800a56e:	f000 fff9 	bl	800b564 <__mcmp>
 800a572:	2800      	cmp	r0, #0
 800a574:	da53      	bge.n	800a61e <_dtoa_r+0x8f6>
 800a576:	1e7b      	subs	r3, r7, #1
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	4649      	mov	r1, r9
 800a57c:	2300      	movs	r3, #0
 800a57e:	220a      	movs	r2, #10
 800a580:	4658      	mov	r0, fp
 800a582:	f000 fd8d 	bl	800b0a0 <__multadd>
 800a586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a588:	4681      	mov	r9, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8172 	beq.w	800a874 <_dtoa_r+0xb4c>
 800a590:	2300      	movs	r3, #0
 800a592:	4629      	mov	r1, r5
 800a594:	220a      	movs	r2, #10
 800a596:	4658      	mov	r0, fp
 800a598:	f000 fd82 	bl	800b0a0 <__multadd>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	dc67      	bgt.n	800a674 <_dtoa_r+0x94c>
 800a5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	dc41      	bgt.n	800a62e <_dtoa_r+0x906>
 800a5aa:	e063      	b.n	800a674 <_dtoa_r+0x94c>
 800a5ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5b2:	e746      	b.n	800a442 <_dtoa_r+0x71a>
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	1e5c      	subs	r4, r3, #1
 800a5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	bfbf      	itttt	lt
 800a5be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a5c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a5c4:	1ae3      	sublt	r3, r4, r3
 800a5c6:	bfb4      	ite	lt
 800a5c8:	18d2      	addlt	r2, r2, r3
 800a5ca:	1b1c      	subge	r4, r3, r4
 800a5cc:	9b07      	ldr	r3, [sp, #28]
 800a5ce:	bfbc      	itt	lt
 800a5d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5d2:	2400      	movlt	r4, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	bfb5      	itete	lt
 800a5d8:	eba8 0603 	sublt.w	r6, r8, r3
 800a5dc:	9b07      	ldrge	r3, [sp, #28]
 800a5de:	2300      	movlt	r3, #0
 800a5e0:	4646      	movge	r6, r8
 800a5e2:	e730      	b.n	800a446 <_dtoa_r+0x71e>
 800a5e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5e8:	4646      	mov	r6, r8
 800a5ea:	e735      	b.n	800a458 <_dtoa_r+0x730>
 800a5ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5ee:	e75c      	b.n	800a4aa <_dtoa_r+0x782>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e788      	b.n	800a506 <_dtoa_r+0x7de>
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	40140000 	.word	0x40140000
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	e780      	b.n	800a506 <_dtoa_r+0x7de>
 800a604:	2300      	movs	r3, #0
 800a606:	930a      	str	r3, [sp, #40]	@ 0x28
 800a608:	e782      	b.n	800a510 <_dtoa_r+0x7e8>
 800a60a:	d099      	beq.n	800a540 <_dtoa_r+0x818>
 800a60c:	9a08      	ldr	r2, [sp, #32]
 800a60e:	331c      	adds	r3, #28
 800a610:	441a      	add	r2, r3
 800a612:	4498      	add	r8, r3
 800a614:	441e      	add	r6, r3
 800a616:	9208      	str	r2, [sp, #32]
 800a618:	e792      	b.n	800a540 <_dtoa_r+0x818>
 800a61a:	4603      	mov	r3, r0
 800a61c:	e7f6      	b.n	800a60c <_dtoa_r+0x8e4>
 800a61e:	9b07      	ldr	r3, [sp, #28]
 800a620:	9704      	str	r7, [sp, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc20      	bgt.n	800a668 <_dtoa_r+0x940>
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	dd1e      	ble.n	800a66c <_dtoa_r+0x944>
 800a62e:	9b00      	ldr	r3, [sp, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f47f aec0 	bne.w	800a3b6 <_dtoa_r+0x68e>
 800a636:	4621      	mov	r1, r4
 800a638:	2205      	movs	r2, #5
 800a63a:	4658      	mov	r0, fp
 800a63c:	f000 fd30 	bl	800b0a0 <__multadd>
 800a640:	4601      	mov	r1, r0
 800a642:	4604      	mov	r4, r0
 800a644:	4648      	mov	r0, r9
 800a646:	f000 ff8d 	bl	800b564 <__mcmp>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f77f aeb3 	ble.w	800a3b6 <_dtoa_r+0x68e>
 800a650:	4656      	mov	r6, sl
 800a652:	2331      	movs	r3, #49	@ 0x31
 800a654:	f806 3b01 	strb.w	r3, [r6], #1
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	3301      	adds	r3, #1
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	e6ae      	b.n	800a3be <_dtoa_r+0x696>
 800a660:	9c07      	ldr	r4, [sp, #28]
 800a662:	9704      	str	r7, [sp, #16]
 800a664:	4625      	mov	r5, r4
 800a666:	e7f3      	b.n	800a650 <_dtoa_r+0x928>
 800a668:	9b07      	ldr	r3, [sp, #28]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 8104 	beq.w	800a87c <_dtoa_r+0xb54>
 800a674:	2e00      	cmp	r6, #0
 800a676:	dd05      	ble.n	800a684 <_dtoa_r+0x95c>
 800a678:	4629      	mov	r1, r5
 800a67a:	4632      	mov	r2, r6
 800a67c:	4658      	mov	r0, fp
 800a67e:	f000 ff05 	bl	800b48c <__lshift>
 800a682:	4605      	mov	r5, r0
 800a684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a686:	2b00      	cmp	r3, #0
 800a688:	d05a      	beq.n	800a740 <_dtoa_r+0xa18>
 800a68a:	6869      	ldr	r1, [r5, #4]
 800a68c:	4658      	mov	r0, fp
 800a68e:	f000 fca5 	bl	800afdc <_Balloc>
 800a692:	4606      	mov	r6, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <_dtoa_r+0x97a>
 800a696:	4b84      	ldr	r3, [pc, #528]	@ (800a8a8 <_dtoa_r+0xb80>)
 800a698:	4602      	mov	r2, r0
 800a69a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a69e:	f7ff bb5a 	b.w	8009d56 <_dtoa_r+0x2e>
 800a6a2:	692a      	ldr	r2, [r5, #16]
 800a6a4:	3202      	adds	r2, #2
 800a6a6:	0092      	lsls	r2, r2, #2
 800a6a8:	f105 010c 	add.w	r1, r5, #12
 800a6ac:	300c      	adds	r0, #12
 800a6ae:	f7ff fa93 	bl	8009bd8 <memcpy>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	4658      	mov	r0, fp
 800a6b8:	f000 fee8 	bl	800b48c <__lshift>
 800a6bc:	f10a 0301 	add.w	r3, sl, #1
 800a6c0:	9307      	str	r3, [sp, #28]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	4453      	add	r3, sl
 800a6c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	462f      	mov	r7, r5
 800a6d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	9b07      	ldr	r3, [sp, #28]
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4648      	mov	r0, r9
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	f7ff fa99 	bl	8009c14 <quorem>
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	9002      	str	r0, [sp, #8]
 800a6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6ea:	4648      	mov	r0, r9
 800a6ec:	f000 ff3a 	bl	800b564 <__mcmp>
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	9008      	str	r0, [sp, #32]
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4658      	mov	r0, fp
 800a6f8:	f000 ff50 	bl	800b59c <__mdiff>
 800a6fc:	68c2      	ldr	r2, [r0, #12]
 800a6fe:	4606      	mov	r6, r0
 800a700:	bb02      	cbnz	r2, 800a744 <_dtoa_r+0xa1c>
 800a702:	4601      	mov	r1, r0
 800a704:	4648      	mov	r0, r9
 800a706:	f000 ff2d 	bl	800b564 <__mcmp>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4631      	mov	r1, r6
 800a70e:	4658      	mov	r0, fp
 800a710:	920e      	str	r2, [sp, #56]	@ 0x38
 800a712:	f000 fca3 	bl	800b05c <_Bfree>
 800a716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a71a:	9e07      	ldr	r6, [sp, #28]
 800a71c:	ea43 0102 	orr.w	r1, r3, r2
 800a720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a722:	4319      	orrs	r1, r3
 800a724:	d110      	bne.n	800a748 <_dtoa_r+0xa20>
 800a726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a72a:	d029      	beq.n	800a780 <_dtoa_r+0xa58>
 800a72c:	9b08      	ldr	r3, [sp, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd02      	ble.n	800a738 <_dtoa_r+0xa10>
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	f883 8000 	strb.w	r8, [r3]
 800a73e:	e63f      	b.n	800a3c0 <_dtoa_r+0x698>
 800a740:	4628      	mov	r0, r5
 800a742:	e7bb      	b.n	800a6bc <_dtoa_r+0x994>
 800a744:	2201      	movs	r2, #1
 800a746:	e7e1      	b.n	800a70c <_dtoa_r+0x9e4>
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	db04      	blt.n	800a758 <_dtoa_r+0xa30>
 800a74e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a750:	430b      	orrs	r3, r1
 800a752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a754:	430b      	orrs	r3, r1
 800a756:	d120      	bne.n	800a79a <_dtoa_r+0xa72>
 800a758:	2a00      	cmp	r2, #0
 800a75a:	dded      	ble.n	800a738 <_dtoa_r+0xa10>
 800a75c:	4649      	mov	r1, r9
 800a75e:	2201      	movs	r2, #1
 800a760:	4658      	mov	r0, fp
 800a762:	f000 fe93 	bl	800b48c <__lshift>
 800a766:	4621      	mov	r1, r4
 800a768:	4681      	mov	r9, r0
 800a76a:	f000 fefb 	bl	800b564 <__mcmp>
 800a76e:	2800      	cmp	r0, #0
 800a770:	dc03      	bgt.n	800a77a <_dtoa_r+0xa52>
 800a772:	d1e1      	bne.n	800a738 <_dtoa_r+0xa10>
 800a774:	f018 0f01 	tst.w	r8, #1
 800a778:	d0de      	beq.n	800a738 <_dtoa_r+0xa10>
 800a77a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a77e:	d1d8      	bne.n	800a732 <_dtoa_r+0xa0a>
 800a780:	9a00      	ldr	r2, [sp, #0]
 800a782:	2339      	movs	r3, #57	@ 0x39
 800a784:	7013      	strb	r3, [r2, #0]
 800a786:	4633      	mov	r3, r6
 800a788:	461e      	mov	r6, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a790:	2a39      	cmp	r2, #57	@ 0x39
 800a792:	d052      	beq.n	800a83a <_dtoa_r+0xb12>
 800a794:	3201      	adds	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e612      	b.n	800a3c0 <_dtoa_r+0x698>
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	dd07      	ble.n	800a7ae <_dtoa_r+0xa86>
 800a79e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7a2:	d0ed      	beq.n	800a780 <_dtoa_r+0xa58>
 800a7a4:	9a00      	ldr	r2, [sp, #0]
 800a7a6:	f108 0301 	add.w	r3, r8, #1
 800a7aa:	7013      	strb	r3, [r2, #0]
 800a7ac:	e608      	b.n	800a3c0 <_dtoa_r+0x698>
 800a7ae:	9b07      	ldr	r3, [sp, #28]
 800a7b0:	9a07      	ldr	r2, [sp, #28]
 800a7b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d028      	beq.n	800a80e <_dtoa_r+0xae6>
 800a7bc:	4649      	mov	r1, r9
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f000 fc6c 	bl	800b0a0 <__multadd>
 800a7c8:	42af      	cmp	r7, r5
 800a7ca:	4681      	mov	r9, r0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	f04f 020a 	mov.w	r2, #10
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	d107      	bne.n	800a7ea <_dtoa_r+0xac2>
 800a7da:	f000 fc61 	bl	800b0a0 <__multadd>
 800a7de:	4607      	mov	r7, r0
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	9b07      	ldr	r3, [sp, #28]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	e774      	b.n	800a6d4 <_dtoa_r+0x9ac>
 800a7ea:	f000 fc59 	bl	800b0a0 <__multadd>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	f000 fc52 	bl	800b0a0 <__multadd>
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	e7f0      	b.n	800a7e2 <_dtoa_r+0xaba>
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfcc      	ite	gt
 800a806:	461e      	movgt	r6, r3
 800a808:	2601      	movle	r6, #1
 800a80a:	4456      	add	r6, sl
 800a80c:	2700      	movs	r7, #0
 800a80e:	4649      	mov	r1, r9
 800a810:	2201      	movs	r2, #1
 800a812:	4658      	mov	r0, fp
 800a814:	f000 fe3a 	bl	800b48c <__lshift>
 800a818:	4621      	mov	r1, r4
 800a81a:	4681      	mov	r9, r0
 800a81c:	f000 fea2 	bl	800b564 <__mcmp>
 800a820:	2800      	cmp	r0, #0
 800a822:	dcb0      	bgt.n	800a786 <_dtoa_r+0xa5e>
 800a824:	d102      	bne.n	800a82c <_dtoa_r+0xb04>
 800a826:	f018 0f01 	tst.w	r8, #1
 800a82a:	d1ac      	bne.n	800a786 <_dtoa_r+0xa5e>
 800a82c:	4633      	mov	r3, r6
 800a82e:	461e      	mov	r6, r3
 800a830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a834:	2a30      	cmp	r2, #48	@ 0x30
 800a836:	d0fa      	beq.n	800a82e <_dtoa_r+0xb06>
 800a838:	e5c2      	b.n	800a3c0 <_dtoa_r+0x698>
 800a83a:	459a      	cmp	sl, r3
 800a83c:	d1a4      	bne.n	800a788 <_dtoa_r+0xa60>
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	3301      	adds	r3, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	2331      	movs	r3, #49	@ 0x31
 800a846:	f88a 3000 	strb.w	r3, [sl]
 800a84a:	e5b9      	b.n	800a3c0 <_dtoa_r+0x698>
 800a84c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a84e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8ac <_dtoa_r+0xb84>
 800a852:	b11b      	cbz	r3, 800a85c <_dtoa_r+0xb34>
 800a854:	f10a 0308 	add.w	r3, sl, #8
 800a858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	4650      	mov	r0, sl
 800a85e:	b019      	add	sp, #100	@ 0x64
 800a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a866:	2b01      	cmp	r3, #1
 800a868:	f77f ae37 	ble.w	800a4da <_dtoa_r+0x7b2>
 800a86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a870:	2001      	movs	r0, #1
 800a872:	e655      	b.n	800a520 <_dtoa_r+0x7f8>
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f77f aed6 	ble.w	800a628 <_dtoa_r+0x900>
 800a87c:	4656      	mov	r6, sl
 800a87e:	4621      	mov	r1, r4
 800a880:	4648      	mov	r0, r9
 800a882:	f7ff f9c7 	bl	8009c14 <quorem>
 800a886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a88a:	f806 8b01 	strb.w	r8, [r6], #1
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	eba6 020a 	sub.w	r2, r6, sl
 800a894:	4293      	cmp	r3, r2
 800a896:	ddb3      	ble.n	800a800 <_dtoa_r+0xad8>
 800a898:	4649      	mov	r1, r9
 800a89a:	2300      	movs	r3, #0
 800a89c:	220a      	movs	r2, #10
 800a89e:	4658      	mov	r0, fp
 800a8a0:	f000 fbfe 	bl	800b0a0 <__multadd>
 800a8a4:	4681      	mov	r9, r0
 800a8a6:	e7ea      	b.n	800a87e <_dtoa_r+0xb56>
 800a8a8:	0800e25c 	.word	0x0800e25c
 800a8ac:	0800e1e0 	.word	0x0800e1e0

0800a8b0 <_free_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d041      	beq.n	800a93c <_free_r+0x8c>
 800a8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8bc:	1f0c      	subs	r4, r1, #4
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bfb8      	it	lt
 800a8c2:	18e4      	addlt	r4, r4, r3
 800a8c4:	f7fd fa10 	bl	8007ce8 <__malloc_lock>
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a940 <_free_r+0x90>)
 800a8ca:	6813      	ldr	r3, [r2, #0]
 800a8cc:	b933      	cbnz	r3, 800a8dc <_free_r+0x2c>
 800a8ce:	6063      	str	r3, [r4, #4]
 800a8d0:	6014      	str	r4, [r2, #0]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d8:	f7fd ba0c 	b.w	8007cf4 <__malloc_unlock>
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d908      	bls.n	800a8f2 <_free_r+0x42>
 800a8e0:	6820      	ldr	r0, [r4, #0]
 800a8e2:	1821      	adds	r1, r4, r0
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	bf01      	itttt	eq
 800a8e8:	6819      	ldreq	r1, [r3, #0]
 800a8ea:	685b      	ldreq	r3, [r3, #4]
 800a8ec:	1809      	addeq	r1, r1, r0
 800a8ee:	6021      	streq	r1, [r4, #0]
 800a8f0:	e7ed      	b.n	800a8ce <_free_r+0x1e>
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	b10b      	cbz	r3, 800a8fc <_free_r+0x4c>
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d9fa      	bls.n	800a8f2 <_free_r+0x42>
 800a8fc:	6811      	ldr	r1, [r2, #0]
 800a8fe:	1850      	adds	r0, r2, r1
 800a900:	42a0      	cmp	r0, r4
 800a902:	d10b      	bne.n	800a91c <_free_r+0x6c>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	4401      	add	r1, r0
 800a908:	1850      	adds	r0, r2, r1
 800a90a:	4283      	cmp	r3, r0
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	d1e0      	bne.n	800a8d2 <_free_r+0x22>
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	6053      	str	r3, [r2, #4]
 800a916:	4408      	add	r0, r1
 800a918:	6010      	str	r0, [r2, #0]
 800a91a:	e7da      	b.n	800a8d2 <_free_r+0x22>
 800a91c:	d902      	bls.n	800a924 <_free_r+0x74>
 800a91e:	230c      	movs	r3, #12
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	e7d6      	b.n	800a8d2 <_free_r+0x22>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	1821      	adds	r1, r4, r0
 800a928:	428b      	cmp	r3, r1
 800a92a:	bf04      	itt	eq
 800a92c:	6819      	ldreq	r1, [r3, #0]
 800a92e:	685b      	ldreq	r3, [r3, #4]
 800a930:	6063      	str	r3, [r4, #4]
 800a932:	bf04      	itt	eq
 800a934:	1809      	addeq	r1, r1, r0
 800a936:	6021      	streq	r1, [r4, #0]
 800a938:	6054      	str	r4, [r2, #4]
 800a93a:	e7ca      	b.n	800a8d2 <_free_r+0x22>
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	20008b38 	.word	0x20008b38

0800a944 <rshift>:
 800a944:	6903      	ldr	r3, [r0, #16]
 800a946:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a952:	f100 0414 	add.w	r4, r0, #20
 800a956:	dd45      	ble.n	800a9e4 <rshift+0xa0>
 800a958:	f011 011f 	ands.w	r1, r1, #31
 800a95c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a960:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a964:	d10c      	bne.n	800a980 <rshift+0x3c>
 800a966:	f100 0710 	add.w	r7, r0, #16
 800a96a:	4629      	mov	r1, r5
 800a96c:	42b1      	cmp	r1, r6
 800a96e:	d334      	bcc.n	800a9da <rshift+0x96>
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	1eea      	subs	r2, r5, #3
 800a976:	4296      	cmp	r6, r2
 800a978:	bf38      	it	cc
 800a97a:	2300      	movcc	r3, #0
 800a97c:	4423      	add	r3, r4
 800a97e:	e015      	b.n	800a9ac <rshift+0x68>
 800a980:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a984:	f1c1 0820 	rsb	r8, r1, #32
 800a988:	40cf      	lsrs	r7, r1
 800a98a:	f105 0e04 	add.w	lr, r5, #4
 800a98e:	46a1      	mov	r9, r4
 800a990:	4576      	cmp	r6, lr
 800a992:	46f4      	mov	ip, lr
 800a994:	d815      	bhi.n	800a9c2 <rshift+0x7e>
 800a996:	1a9a      	subs	r2, r3, r2
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	3a04      	subs	r2, #4
 800a99c:	3501      	adds	r5, #1
 800a99e:	42ae      	cmp	r6, r5
 800a9a0:	bf38      	it	cc
 800a9a2:	2200      	movcc	r2, #0
 800a9a4:	18a3      	adds	r3, r4, r2
 800a9a6:	50a7      	str	r7, [r4, r2]
 800a9a8:	b107      	cbz	r7, 800a9ac <rshift+0x68>
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	1b1a      	subs	r2, r3, r4
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9b4:	bf08      	it	eq
 800a9b6:	2300      	moveq	r3, #0
 800a9b8:	6102      	str	r2, [r0, #16]
 800a9ba:	bf08      	it	eq
 800a9bc:	6143      	streq	r3, [r0, #20]
 800a9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c2:	f8dc c000 	ldr.w	ip, [ip]
 800a9c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9ca:	ea4c 0707 	orr.w	r7, ip, r7
 800a9ce:	f849 7b04 	str.w	r7, [r9], #4
 800a9d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9d6:	40cf      	lsrs	r7, r1
 800a9d8:	e7da      	b.n	800a990 <rshift+0x4c>
 800a9da:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9de:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9e2:	e7c3      	b.n	800a96c <rshift+0x28>
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	e7e1      	b.n	800a9ac <rshift+0x68>

0800a9e8 <__hexdig_fun>:
 800a9e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d802      	bhi.n	800a9f6 <__hexdig_fun+0xe>
 800a9f0:	3820      	subs	r0, #32
 800a9f2:	b2c0      	uxtb	r0, r0
 800a9f4:	4770      	bx	lr
 800a9f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d801      	bhi.n	800aa02 <__hexdig_fun+0x1a>
 800a9fe:	3847      	subs	r0, #71	@ 0x47
 800aa00:	e7f7      	b.n	800a9f2 <__hexdig_fun+0xa>
 800aa02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	d801      	bhi.n	800aa0e <__hexdig_fun+0x26>
 800aa0a:	3827      	subs	r0, #39	@ 0x27
 800aa0c:	e7f1      	b.n	800a9f2 <__hexdig_fun+0xa>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	4770      	bx	lr
	...

0800aa14 <__gethex>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	468a      	mov	sl, r1
 800aa1c:	9302      	str	r3, [sp, #8]
 800aa1e:	680b      	ldr	r3, [r1, #0]
 800aa20:	9001      	str	r0, [sp, #4]
 800aa22:	4690      	mov	r8, r2
 800aa24:	1c9c      	adds	r4, r3, #2
 800aa26:	46a1      	mov	r9, r4
 800aa28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa2c:	2830      	cmp	r0, #48	@ 0x30
 800aa2e:	d0fa      	beq.n	800aa26 <__gethex+0x12>
 800aa30:	eba9 0303 	sub.w	r3, r9, r3
 800aa34:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa38:	f7ff ffd6 	bl	800a9e8 <__hexdig_fun>
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d168      	bne.n	800ab14 <__gethex+0x100>
 800aa42:	49a0      	ldr	r1, [pc, #640]	@ (800acc4 <__gethex+0x2b0>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	4648      	mov	r0, r9
 800aa48:	f7ff f812 	bl	8009a70 <strncmp>
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d167      	bne.n	800ab22 <__gethex+0x10e>
 800aa52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa56:	4626      	mov	r6, r4
 800aa58:	f7ff ffc6 	bl	800a9e8 <__hexdig_fun>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d062      	beq.n	800ab26 <__gethex+0x112>
 800aa60:	4623      	mov	r3, r4
 800aa62:	7818      	ldrb	r0, [r3, #0]
 800aa64:	2830      	cmp	r0, #48	@ 0x30
 800aa66:	4699      	mov	r9, r3
 800aa68:	f103 0301 	add.w	r3, r3, #1
 800aa6c:	d0f9      	beq.n	800aa62 <__gethex+0x4e>
 800aa6e:	f7ff ffbb 	bl	800a9e8 <__hexdig_fun>
 800aa72:	fab0 f580 	clz	r5, r0
 800aa76:	096d      	lsrs	r5, r5, #5
 800aa78:	f04f 0b01 	mov.w	fp, #1
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	4616      	mov	r6, r2
 800aa80:	3201      	adds	r2, #1
 800aa82:	7830      	ldrb	r0, [r6, #0]
 800aa84:	f7ff ffb0 	bl	800a9e8 <__hexdig_fun>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1f8      	bne.n	800aa7e <__gethex+0x6a>
 800aa8c:	498d      	ldr	r1, [pc, #564]	@ (800acc4 <__gethex+0x2b0>)
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7fe ffed 	bl	8009a70 <strncmp>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d13f      	bne.n	800ab1a <__gethex+0x106>
 800aa9a:	b944      	cbnz	r4, 800aaae <__gethex+0x9a>
 800aa9c:	1c74      	adds	r4, r6, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	7830      	ldrb	r0, [r6, #0]
 800aaa6:	f7ff ff9f 	bl	800a9e8 <__hexdig_fun>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d1f8      	bne.n	800aaa0 <__gethex+0x8c>
 800aaae:	1ba4      	subs	r4, r4, r6
 800aab0:	00a7      	lsls	r7, r4, #2
 800aab2:	7833      	ldrb	r3, [r6, #0]
 800aab4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aab8:	2b50      	cmp	r3, #80	@ 0x50
 800aaba:	d13e      	bne.n	800ab3a <__gethex+0x126>
 800aabc:	7873      	ldrb	r3, [r6, #1]
 800aabe:	2b2b      	cmp	r3, #43	@ 0x2b
 800aac0:	d033      	beq.n	800ab2a <__gethex+0x116>
 800aac2:	2b2d      	cmp	r3, #45	@ 0x2d
 800aac4:	d034      	beq.n	800ab30 <__gethex+0x11c>
 800aac6:	1c71      	adds	r1, r6, #1
 800aac8:	2400      	movs	r4, #0
 800aaca:	7808      	ldrb	r0, [r1, #0]
 800aacc:	f7ff ff8c 	bl	800a9e8 <__hexdig_fun>
 800aad0:	1e43      	subs	r3, r0, #1
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b18      	cmp	r3, #24
 800aad6:	d830      	bhi.n	800ab3a <__gethex+0x126>
 800aad8:	f1a0 0210 	sub.w	r2, r0, #16
 800aadc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aae0:	f7ff ff82 	bl	800a9e8 <__hexdig_fun>
 800aae4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aae8:	fa5f fc8c 	uxtb.w	ip, ip
 800aaec:	f1bc 0f18 	cmp.w	ip, #24
 800aaf0:	f04f 030a 	mov.w	r3, #10
 800aaf4:	d91e      	bls.n	800ab34 <__gethex+0x120>
 800aaf6:	b104      	cbz	r4, 800aafa <__gethex+0xe6>
 800aaf8:	4252      	negs	r2, r2
 800aafa:	4417      	add	r7, r2
 800aafc:	f8ca 1000 	str.w	r1, [sl]
 800ab00:	b1ed      	cbz	r5, 800ab3e <__gethex+0x12a>
 800ab02:	f1bb 0f00 	cmp.w	fp, #0
 800ab06:	bf0c      	ite	eq
 800ab08:	2506      	moveq	r5, #6
 800ab0a:	2500      	movne	r5, #0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	b005      	add	sp, #20
 800ab10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab14:	2500      	movs	r5, #0
 800ab16:	462c      	mov	r4, r5
 800ab18:	e7b0      	b.n	800aa7c <__gethex+0x68>
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d1c7      	bne.n	800aaae <__gethex+0x9a>
 800ab1e:	4627      	mov	r7, r4
 800ab20:	e7c7      	b.n	800aab2 <__gethex+0x9e>
 800ab22:	464e      	mov	r6, r9
 800ab24:	462f      	mov	r7, r5
 800ab26:	2501      	movs	r5, #1
 800ab28:	e7c3      	b.n	800aab2 <__gethex+0x9e>
 800ab2a:	2400      	movs	r4, #0
 800ab2c:	1cb1      	adds	r1, r6, #2
 800ab2e:	e7cc      	b.n	800aaca <__gethex+0xb6>
 800ab30:	2401      	movs	r4, #1
 800ab32:	e7fb      	b.n	800ab2c <__gethex+0x118>
 800ab34:	fb03 0002 	mla	r0, r3, r2, r0
 800ab38:	e7ce      	b.n	800aad8 <__gethex+0xc4>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	e7de      	b.n	800aafc <__gethex+0xe8>
 800ab3e:	eba6 0309 	sub.w	r3, r6, r9
 800ab42:	3b01      	subs	r3, #1
 800ab44:	4629      	mov	r1, r5
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	dc0a      	bgt.n	800ab60 <__gethex+0x14c>
 800ab4a:	9801      	ldr	r0, [sp, #4]
 800ab4c:	f000 fa46 	bl	800afdc <_Balloc>
 800ab50:	4604      	mov	r4, r0
 800ab52:	b940      	cbnz	r0, 800ab66 <__gethex+0x152>
 800ab54:	4b5c      	ldr	r3, [pc, #368]	@ (800acc8 <__gethex+0x2b4>)
 800ab56:	4602      	mov	r2, r0
 800ab58:	21e4      	movs	r1, #228	@ 0xe4
 800ab5a:	485c      	ldr	r0, [pc, #368]	@ (800accc <__gethex+0x2b8>)
 800ab5c:	f001 fd18 	bl	800c590 <__assert_func>
 800ab60:	3101      	adds	r1, #1
 800ab62:	105b      	asrs	r3, r3, #1
 800ab64:	e7ef      	b.n	800ab46 <__gethex+0x132>
 800ab66:	f100 0a14 	add.w	sl, r0, #20
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4655      	mov	r5, sl
 800ab6e:	469b      	mov	fp, r3
 800ab70:	45b1      	cmp	r9, r6
 800ab72:	d337      	bcc.n	800abe4 <__gethex+0x1d0>
 800ab74:	f845 bb04 	str.w	fp, [r5], #4
 800ab78:	eba5 050a 	sub.w	r5, r5, sl
 800ab7c:	10ad      	asrs	r5, r5, #2
 800ab7e:	6125      	str	r5, [r4, #16]
 800ab80:	4658      	mov	r0, fp
 800ab82:	f000 fb1d 	bl	800b1c0 <__hi0bits>
 800ab86:	016d      	lsls	r5, r5, #5
 800ab88:	f8d8 6000 	ldr.w	r6, [r8]
 800ab8c:	1a2d      	subs	r5, r5, r0
 800ab8e:	42b5      	cmp	r5, r6
 800ab90:	dd54      	ble.n	800ac3c <__gethex+0x228>
 800ab92:	1bad      	subs	r5, r5, r6
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 feb1 	bl	800b8fe <__any_on>
 800ab9c:	4681      	mov	r9, r0
 800ab9e:	b178      	cbz	r0, 800abc0 <__gethex+0x1ac>
 800aba0:	1e6b      	subs	r3, r5, #1
 800aba2:	1159      	asrs	r1, r3, #5
 800aba4:	f003 021f 	and.w	r2, r3, #31
 800aba8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abac:	f04f 0901 	mov.w	r9, #1
 800abb0:	fa09 f202 	lsl.w	r2, r9, r2
 800abb4:	420a      	tst	r2, r1
 800abb6:	d003      	beq.n	800abc0 <__gethex+0x1ac>
 800abb8:	454b      	cmp	r3, r9
 800abba:	dc36      	bgt.n	800ac2a <__gethex+0x216>
 800abbc:	f04f 0902 	mov.w	r9, #2
 800abc0:	4629      	mov	r1, r5
 800abc2:	4620      	mov	r0, r4
 800abc4:	f7ff febe 	bl	800a944 <rshift>
 800abc8:	442f      	add	r7, r5
 800abca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abce:	42bb      	cmp	r3, r7
 800abd0:	da42      	bge.n	800ac58 <__gethex+0x244>
 800abd2:	9801      	ldr	r0, [sp, #4]
 800abd4:	4621      	mov	r1, r4
 800abd6:	f000 fa41 	bl	800b05c <_Bfree>
 800abda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abdc:	2300      	movs	r3, #0
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	25a3      	movs	r5, #163	@ 0xa3
 800abe2:	e793      	b.n	800ab0c <__gethex+0xf8>
 800abe4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abe8:	2a2e      	cmp	r2, #46	@ 0x2e
 800abea:	d012      	beq.n	800ac12 <__gethex+0x1fe>
 800abec:	2b20      	cmp	r3, #32
 800abee:	d104      	bne.n	800abfa <__gethex+0x1e6>
 800abf0:	f845 bb04 	str.w	fp, [r5], #4
 800abf4:	f04f 0b00 	mov.w	fp, #0
 800abf8:	465b      	mov	r3, fp
 800abfa:	7830      	ldrb	r0, [r6, #0]
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	f7ff fef3 	bl	800a9e8 <__hexdig_fun>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	f000 000f 	and.w	r0, r0, #15
 800ac08:	4098      	lsls	r0, r3
 800ac0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac0e:	3304      	adds	r3, #4
 800ac10:	e7ae      	b.n	800ab70 <__gethex+0x15c>
 800ac12:	45b1      	cmp	r9, r6
 800ac14:	d8ea      	bhi.n	800abec <__gethex+0x1d8>
 800ac16:	492b      	ldr	r1, [pc, #172]	@ (800acc4 <__gethex+0x2b0>)
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7fe ff27 	bl	8009a70 <strncmp>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d1e1      	bne.n	800abec <__gethex+0x1d8>
 800ac28:	e7a2      	b.n	800ab70 <__gethex+0x15c>
 800ac2a:	1ea9      	subs	r1, r5, #2
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 fe66 	bl	800b8fe <__any_on>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0c2      	beq.n	800abbc <__gethex+0x1a8>
 800ac36:	f04f 0903 	mov.w	r9, #3
 800ac3a:	e7c1      	b.n	800abc0 <__gethex+0x1ac>
 800ac3c:	da09      	bge.n	800ac52 <__gethex+0x23e>
 800ac3e:	1b75      	subs	r5, r6, r5
 800ac40:	4621      	mov	r1, r4
 800ac42:	9801      	ldr	r0, [sp, #4]
 800ac44:	462a      	mov	r2, r5
 800ac46:	f000 fc21 	bl	800b48c <__lshift>
 800ac4a:	1b7f      	subs	r7, r7, r5
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	f100 0a14 	add.w	sl, r0, #20
 800ac52:	f04f 0900 	mov.w	r9, #0
 800ac56:	e7b8      	b.n	800abca <__gethex+0x1b6>
 800ac58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac5c:	42bd      	cmp	r5, r7
 800ac5e:	dd6f      	ble.n	800ad40 <__gethex+0x32c>
 800ac60:	1bed      	subs	r5, r5, r7
 800ac62:	42ae      	cmp	r6, r5
 800ac64:	dc34      	bgt.n	800acd0 <__gethex+0x2bc>
 800ac66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d022      	beq.n	800acb4 <__gethex+0x2a0>
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d024      	beq.n	800acbc <__gethex+0x2a8>
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d115      	bne.n	800aca2 <__gethex+0x28e>
 800ac76:	42ae      	cmp	r6, r5
 800ac78:	d113      	bne.n	800aca2 <__gethex+0x28e>
 800ac7a:	2e01      	cmp	r6, #1
 800ac7c:	d10b      	bne.n	800ac96 <__gethex+0x282>
 800ac7e:	9a02      	ldr	r2, [sp, #8]
 800ac80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	2301      	movs	r3, #1
 800ac88:	6123      	str	r3, [r4, #16]
 800ac8a:	f8ca 3000 	str.w	r3, [sl]
 800ac8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac90:	2562      	movs	r5, #98	@ 0x62
 800ac92:	601c      	str	r4, [r3, #0]
 800ac94:	e73a      	b.n	800ab0c <__gethex+0xf8>
 800ac96:	1e71      	subs	r1, r6, #1
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fe30 	bl	800b8fe <__any_on>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d1ed      	bne.n	800ac7e <__gethex+0x26a>
 800aca2:	9801      	ldr	r0, [sp, #4]
 800aca4:	4621      	mov	r1, r4
 800aca6:	f000 f9d9 	bl	800b05c <_Bfree>
 800acaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acac:	2300      	movs	r3, #0
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	2550      	movs	r5, #80	@ 0x50
 800acb2:	e72b      	b.n	800ab0c <__gethex+0xf8>
 800acb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f3      	bne.n	800aca2 <__gethex+0x28e>
 800acba:	e7e0      	b.n	800ac7e <__gethex+0x26a>
 800acbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1dd      	bne.n	800ac7e <__gethex+0x26a>
 800acc2:	e7ee      	b.n	800aca2 <__gethex+0x28e>
 800acc4:	0800e04a 	.word	0x0800e04a
 800acc8:	0800e25c 	.word	0x0800e25c
 800accc:	0800e26d 	.word	0x0800e26d
 800acd0:	1e6f      	subs	r7, r5, #1
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	d130      	bne.n	800ad3a <__gethex+0x326>
 800acd8:	b127      	cbz	r7, 800ace4 <__gethex+0x2d0>
 800acda:	4639      	mov	r1, r7
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 fe0e 	bl	800b8fe <__any_on>
 800ace2:	4681      	mov	r9, r0
 800ace4:	117a      	asrs	r2, r7, #5
 800ace6:	2301      	movs	r3, #1
 800ace8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acec:	f007 071f 	and.w	r7, r7, #31
 800acf0:	40bb      	lsls	r3, r7
 800acf2:	4213      	tst	r3, r2
 800acf4:	4629      	mov	r1, r5
 800acf6:	4620      	mov	r0, r4
 800acf8:	bf18      	it	ne
 800acfa:	f049 0902 	orrne.w	r9, r9, #2
 800acfe:	f7ff fe21 	bl	800a944 <rshift>
 800ad02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad06:	1b76      	subs	r6, r6, r5
 800ad08:	2502      	movs	r5, #2
 800ad0a:	f1b9 0f00 	cmp.w	r9, #0
 800ad0e:	d047      	beq.n	800ada0 <__gethex+0x38c>
 800ad10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d015      	beq.n	800ad44 <__gethex+0x330>
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d017      	beq.n	800ad4c <__gethex+0x338>
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d109      	bne.n	800ad34 <__gethex+0x320>
 800ad20:	f019 0f02 	tst.w	r9, #2
 800ad24:	d006      	beq.n	800ad34 <__gethex+0x320>
 800ad26:	f8da 3000 	ldr.w	r3, [sl]
 800ad2a:	ea49 0903 	orr.w	r9, r9, r3
 800ad2e:	f019 0f01 	tst.w	r9, #1
 800ad32:	d10e      	bne.n	800ad52 <__gethex+0x33e>
 800ad34:	f045 0510 	orr.w	r5, r5, #16
 800ad38:	e032      	b.n	800ada0 <__gethex+0x38c>
 800ad3a:	f04f 0901 	mov.w	r9, #1
 800ad3e:	e7d1      	b.n	800ace4 <__gethex+0x2d0>
 800ad40:	2501      	movs	r5, #1
 800ad42:	e7e2      	b.n	800ad0a <__gethex+0x2f6>
 800ad44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad46:	f1c3 0301 	rsb	r3, r3, #1
 800ad4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0f0      	beq.n	800ad34 <__gethex+0x320>
 800ad52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad56:	f104 0314 	add.w	r3, r4, #20
 800ad5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad62:	f04f 0c00 	mov.w	ip, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad70:	d01b      	beq.n	800adaa <__gethex+0x396>
 800ad72:	3201      	adds	r2, #1
 800ad74:	6002      	str	r2, [r0, #0]
 800ad76:	2d02      	cmp	r5, #2
 800ad78:	f104 0314 	add.w	r3, r4, #20
 800ad7c:	d13c      	bne.n	800adf8 <__gethex+0x3e4>
 800ad7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad82:	3a01      	subs	r2, #1
 800ad84:	42b2      	cmp	r2, r6
 800ad86:	d109      	bne.n	800ad9c <__gethex+0x388>
 800ad88:	1171      	asrs	r1, r6, #5
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad90:	f006 061f 	and.w	r6, r6, #31
 800ad94:	fa02 f606 	lsl.w	r6, r2, r6
 800ad98:	421e      	tst	r6, r3
 800ad9a:	d13a      	bne.n	800ae12 <__gethex+0x3fe>
 800ad9c:	f045 0520 	orr.w	r5, r5, #32
 800ada0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada2:	601c      	str	r4, [r3, #0]
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	601f      	str	r7, [r3, #0]
 800ada8:	e6b0      	b.n	800ab0c <__gethex+0xf8>
 800adaa:	4299      	cmp	r1, r3
 800adac:	f843 cc04 	str.w	ip, [r3, #-4]
 800adb0:	d8d9      	bhi.n	800ad66 <__gethex+0x352>
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	459b      	cmp	fp, r3
 800adb6:	db17      	blt.n	800ade8 <__gethex+0x3d4>
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	9801      	ldr	r0, [sp, #4]
 800adbc:	3101      	adds	r1, #1
 800adbe:	f000 f90d 	bl	800afdc <_Balloc>
 800adc2:	4681      	mov	r9, r0
 800adc4:	b918      	cbnz	r0, 800adce <__gethex+0x3ba>
 800adc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae30 <__gethex+0x41c>)
 800adc8:	4602      	mov	r2, r0
 800adca:	2184      	movs	r1, #132	@ 0x84
 800adcc:	e6c5      	b.n	800ab5a <__gethex+0x146>
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	3202      	adds	r2, #2
 800add2:	f104 010c 	add.w	r1, r4, #12
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	300c      	adds	r0, #12
 800adda:	f7fe fefd 	bl	8009bd8 <memcpy>
 800adde:	4621      	mov	r1, r4
 800ade0:	9801      	ldr	r0, [sp, #4]
 800ade2:	f000 f93b 	bl	800b05c <_Bfree>
 800ade6:	464c      	mov	r4, r9
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf0:	6122      	str	r2, [r4, #16]
 800adf2:	2201      	movs	r2, #1
 800adf4:	615a      	str	r2, [r3, #20]
 800adf6:	e7be      	b.n	800ad76 <__gethex+0x362>
 800adf8:	6922      	ldr	r2, [r4, #16]
 800adfa:	455a      	cmp	r2, fp
 800adfc:	dd0b      	ble.n	800ae16 <__gethex+0x402>
 800adfe:	2101      	movs	r1, #1
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7ff fd9f 	bl	800a944 <rshift>
 800ae06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0a:	3701      	adds	r7, #1
 800ae0c:	42bb      	cmp	r3, r7
 800ae0e:	f6ff aee0 	blt.w	800abd2 <__gethex+0x1be>
 800ae12:	2501      	movs	r5, #1
 800ae14:	e7c2      	b.n	800ad9c <__gethex+0x388>
 800ae16:	f016 061f 	ands.w	r6, r6, #31
 800ae1a:	d0fa      	beq.n	800ae12 <__gethex+0x3fe>
 800ae1c:	4453      	add	r3, sl
 800ae1e:	f1c6 0620 	rsb	r6, r6, #32
 800ae22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae26:	f000 f9cb 	bl	800b1c0 <__hi0bits>
 800ae2a:	42b0      	cmp	r0, r6
 800ae2c:	dbe7      	blt.n	800adfe <__gethex+0x3ea>
 800ae2e:	e7f0      	b.n	800ae12 <__gethex+0x3fe>
 800ae30:	0800e25c 	.word	0x0800e25c

0800ae34 <L_shift>:
 800ae34:	f1c2 0208 	rsb	r2, r2, #8
 800ae38:	0092      	lsls	r2, r2, #2
 800ae3a:	b570      	push	{r4, r5, r6, lr}
 800ae3c:	f1c2 0620 	rsb	r6, r2, #32
 800ae40:	6843      	ldr	r3, [r0, #4]
 800ae42:	6804      	ldr	r4, [r0, #0]
 800ae44:	fa03 f506 	lsl.w	r5, r3, r6
 800ae48:	432c      	orrs	r4, r5
 800ae4a:	40d3      	lsrs	r3, r2
 800ae4c:	6004      	str	r4, [r0, #0]
 800ae4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae52:	4288      	cmp	r0, r1
 800ae54:	d3f4      	bcc.n	800ae40 <L_shift+0xc>
 800ae56:	bd70      	pop	{r4, r5, r6, pc}

0800ae58 <__match>:
 800ae58:	b530      	push	{r4, r5, lr}
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae62:	b914      	cbnz	r4, 800ae6a <__match+0x12>
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	2001      	movs	r0, #1
 800ae68:	bd30      	pop	{r4, r5, pc}
 800ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae72:	2d19      	cmp	r5, #25
 800ae74:	bf98      	it	ls
 800ae76:	3220      	addls	r2, #32
 800ae78:	42a2      	cmp	r2, r4
 800ae7a:	d0f0      	beq.n	800ae5e <__match+0x6>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e7f3      	b.n	800ae68 <__match+0x10>

0800ae80 <__hexnan>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	680b      	ldr	r3, [r1, #0]
 800ae86:	6801      	ldr	r1, [r0, #0]
 800ae88:	115e      	asrs	r6, r3, #5
 800ae8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae8e:	f013 031f 	ands.w	r3, r3, #31
 800ae92:	b087      	sub	sp, #28
 800ae94:	bf18      	it	ne
 800ae96:	3604      	addne	r6, #4
 800ae98:	2500      	movs	r5, #0
 800ae9a:	1f37      	subs	r7, r6, #4
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	4690      	mov	r8, r2
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aea6:	46b9      	mov	r9, r7
 800aea8:	463c      	mov	r4, r7
 800aeaa:	9502      	str	r5, [sp, #8]
 800aeac:	46ab      	mov	fp, r5
 800aeae:	784a      	ldrb	r2, [r1, #1]
 800aeb0:	1c4b      	adds	r3, r1, #1
 800aeb2:	9303      	str	r3, [sp, #12]
 800aeb4:	b342      	cbz	r2, 800af08 <__hexnan+0x88>
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	9105      	str	r1, [sp, #20]
 800aeba:	9204      	str	r2, [sp, #16]
 800aebc:	f7ff fd94 	bl	800a9e8 <__hexdig_fun>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d151      	bne.n	800af68 <__hexnan+0xe8>
 800aec4:	9a04      	ldr	r2, [sp, #16]
 800aec6:	9905      	ldr	r1, [sp, #20]
 800aec8:	2a20      	cmp	r2, #32
 800aeca:	d818      	bhi.n	800aefe <__hexnan+0x7e>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	459b      	cmp	fp, r3
 800aed0:	dd13      	ble.n	800aefa <__hexnan+0x7a>
 800aed2:	454c      	cmp	r4, r9
 800aed4:	d206      	bcs.n	800aee4 <__hexnan+0x64>
 800aed6:	2d07      	cmp	r5, #7
 800aed8:	dc04      	bgt.n	800aee4 <__hexnan+0x64>
 800aeda:	462a      	mov	r2, r5
 800aedc:	4649      	mov	r1, r9
 800aede:	4620      	mov	r0, r4
 800aee0:	f7ff ffa8 	bl	800ae34 <L_shift>
 800aee4:	4544      	cmp	r4, r8
 800aee6:	d952      	bls.n	800af8e <__hexnan+0x10e>
 800aee8:	2300      	movs	r3, #0
 800aeea:	f1a4 0904 	sub.w	r9, r4, #4
 800aeee:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef2:	f8cd b008 	str.w	fp, [sp, #8]
 800aef6:	464c      	mov	r4, r9
 800aef8:	461d      	mov	r5, r3
 800aefa:	9903      	ldr	r1, [sp, #12]
 800aefc:	e7d7      	b.n	800aeae <__hexnan+0x2e>
 800aefe:	2a29      	cmp	r2, #41	@ 0x29
 800af00:	d157      	bne.n	800afb2 <__hexnan+0x132>
 800af02:	3102      	adds	r1, #2
 800af04:	f8ca 1000 	str.w	r1, [sl]
 800af08:	f1bb 0f00 	cmp.w	fp, #0
 800af0c:	d051      	beq.n	800afb2 <__hexnan+0x132>
 800af0e:	454c      	cmp	r4, r9
 800af10:	d206      	bcs.n	800af20 <__hexnan+0xa0>
 800af12:	2d07      	cmp	r5, #7
 800af14:	dc04      	bgt.n	800af20 <__hexnan+0xa0>
 800af16:	462a      	mov	r2, r5
 800af18:	4649      	mov	r1, r9
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff ff8a 	bl	800ae34 <L_shift>
 800af20:	4544      	cmp	r4, r8
 800af22:	d936      	bls.n	800af92 <__hexnan+0x112>
 800af24:	f1a8 0204 	sub.w	r2, r8, #4
 800af28:	4623      	mov	r3, r4
 800af2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af32:	429f      	cmp	r7, r3
 800af34:	d2f9      	bcs.n	800af2a <__hexnan+0xaa>
 800af36:	1b3b      	subs	r3, r7, r4
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	3304      	adds	r3, #4
 800af3e:	3401      	adds	r4, #1
 800af40:	3e03      	subs	r6, #3
 800af42:	42b4      	cmp	r4, r6
 800af44:	bf88      	it	hi
 800af46:	2304      	movhi	r3, #4
 800af48:	4443      	add	r3, r8
 800af4a:	2200      	movs	r2, #0
 800af4c:	f843 2b04 	str.w	r2, [r3], #4
 800af50:	429f      	cmp	r7, r3
 800af52:	d2fb      	bcs.n	800af4c <__hexnan+0xcc>
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	b91b      	cbnz	r3, 800af60 <__hexnan+0xe0>
 800af58:	4547      	cmp	r7, r8
 800af5a:	d128      	bne.n	800afae <__hexnan+0x12e>
 800af5c:	2301      	movs	r3, #1
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	2005      	movs	r0, #5
 800af62:	b007      	add	sp, #28
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	3501      	adds	r5, #1
 800af6a:	2d08      	cmp	r5, #8
 800af6c:	f10b 0b01 	add.w	fp, fp, #1
 800af70:	dd06      	ble.n	800af80 <__hexnan+0x100>
 800af72:	4544      	cmp	r4, r8
 800af74:	d9c1      	bls.n	800aefa <__hexnan+0x7a>
 800af76:	2300      	movs	r3, #0
 800af78:	f844 3c04 	str.w	r3, [r4, #-4]
 800af7c:	2501      	movs	r5, #1
 800af7e:	3c04      	subs	r4, #4
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	f000 000f 	and.w	r0, r0, #15
 800af86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af8a:	6020      	str	r0, [r4, #0]
 800af8c:	e7b5      	b.n	800aefa <__hexnan+0x7a>
 800af8e:	2508      	movs	r5, #8
 800af90:	e7b3      	b.n	800aefa <__hexnan+0x7a>
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0dd      	beq.n	800af54 <__hexnan+0xd4>
 800af98:	f1c3 0320 	rsb	r3, r3, #32
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	40da      	lsrs	r2, r3
 800afa2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afa6:	4013      	ands	r3, r2
 800afa8:	f846 3c04 	str.w	r3, [r6, #-4]
 800afac:	e7d2      	b.n	800af54 <__hexnan+0xd4>
 800afae:	3f04      	subs	r7, #4
 800afb0:	e7d0      	b.n	800af54 <__hexnan+0xd4>
 800afb2:	2004      	movs	r0, #4
 800afb4:	e7d5      	b.n	800af62 <__hexnan+0xe2>

0800afb6 <__ascii_mbtowc>:
 800afb6:	b082      	sub	sp, #8
 800afb8:	b901      	cbnz	r1, 800afbc <__ascii_mbtowc+0x6>
 800afba:	a901      	add	r1, sp, #4
 800afbc:	b142      	cbz	r2, 800afd0 <__ascii_mbtowc+0x1a>
 800afbe:	b14b      	cbz	r3, 800afd4 <__ascii_mbtowc+0x1e>
 800afc0:	7813      	ldrb	r3, [r2, #0]
 800afc2:	600b      	str	r3, [r1, #0]
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	1e10      	subs	r0, r2, #0
 800afc8:	bf18      	it	ne
 800afca:	2001      	movne	r0, #1
 800afcc:	b002      	add	sp, #8
 800afce:	4770      	bx	lr
 800afd0:	4610      	mov	r0, r2
 800afd2:	e7fb      	b.n	800afcc <__ascii_mbtowc+0x16>
 800afd4:	f06f 0001 	mvn.w	r0, #1
 800afd8:	e7f8      	b.n	800afcc <__ascii_mbtowc+0x16>
	...

0800afdc <_Balloc>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	69c6      	ldr	r6, [r0, #28]
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	b976      	cbnz	r6, 800b004 <_Balloc+0x28>
 800afe6:	2010      	movs	r0, #16
 800afe8:	f7fc fdd4 	bl	8007b94 <malloc>
 800afec:	4602      	mov	r2, r0
 800afee:	61e0      	str	r0, [r4, #28]
 800aff0:	b920      	cbnz	r0, 800affc <_Balloc+0x20>
 800aff2:	4b18      	ldr	r3, [pc, #96]	@ (800b054 <_Balloc+0x78>)
 800aff4:	4818      	ldr	r0, [pc, #96]	@ (800b058 <_Balloc+0x7c>)
 800aff6:	216b      	movs	r1, #107	@ 0x6b
 800aff8:	f001 faca 	bl	800c590 <__assert_func>
 800affc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b000:	6006      	str	r6, [r0, #0]
 800b002:	60c6      	str	r6, [r0, #12]
 800b004:	69e6      	ldr	r6, [r4, #28]
 800b006:	68f3      	ldr	r3, [r6, #12]
 800b008:	b183      	cbz	r3, 800b02c <_Balloc+0x50>
 800b00a:	69e3      	ldr	r3, [r4, #28]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b012:	b9b8      	cbnz	r0, 800b044 <_Balloc+0x68>
 800b014:	2101      	movs	r1, #1
 800b016:	fa01 f605 	lsl.w	r6, r1, r5
 800b01a:	1d72      	adds	r2, r6, #5
 800b01c:	0092      	lsls	r2, r2, #2
 800b01e:	4620      	mov	r0, r4
 800b020:	f001 fad4 	bl	800c5cc <_calloc_r>
 800b024:	b160      	cbz	r0, 800b040 <_Balloc+0x64>
 800b026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b02a:	e00e      	b.n	800b04a <_Balloc+0x6e>
 800b02c:	2221      	movs	r2, #33	@ 0x21
 800b02e:	2104      	movs	r1, #4
 800b030:	4620      	mov	r0, r4
 800b032:	f001 facb 	bl	800c5cc <_calloc_r>
 800b036:	69e3      	ldr	r3, [r4, #28]
 800b038:	60f0      	str	r0, [r6, #12]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1e4      	bne.n	800b00a <_Balloc+0x2e>
 800b040:	2000      	movs	r0, #0
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	6802      	ldr	r2, [r0, #0]
 800b046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b04a:	2300      	movs	r3, #0
 800b04c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b050:	e7f7      	b.n	800b042 <_Balloc+0x66>
 800b052:	bf00      	nop
 800b054:	0800e1ed 	.word	0x0800e1ed
 800b058:	0800e2cd 	.word	0x0800e2cd

0800b05c <_Bfree>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	69c6      	ldr	r6, [r0, #28]
 800b060:	4605      	mov	r5, r0
 800b062:	460c      	mov	r4, r1
 800b064:	b976      	cbnz	r6, 800b084 <_Bfree+0x28>
 800b066:	2010      	movs	r0, #16
 800b068:	f7fc fd94 	bl	8007b94 <malloc>
 800b06c:	4602      	mov	r2, r0
 800b06e:	61e8      	str	r0, [r5, #28]
 800b070:	b920      	cbnz	r0, 800b07c <_Bfree+0x20>
 800b072:	4b09      	ldr	r3, [pc, #36]	@ (800b098 <_Bfree+0x3c>)
 800b074:	4809      	ldr	r0, [pc, #36]	@ (800b09c <_Bfree+0x40>)
 800b076:	218f      	movs	r1, #143	@ 0x8f
 800b078:	f001 fa8a 	bl	800c590 <__assert_func>
 800b07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b080:	6006      	str	r6, [r0, #0]
 800b082:	60c6      	str	r6, [r0, #12]
 800b084:	b13c      	cbz	r4, 800b096 <_Bfree+0x3a>
 800b086:	69eb      	ldr	r3, [r5, #28]
 800b088:	6862      	ldr	r2, [r4, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b090:	6021      	str	r1, [r4, #0]
 800b092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b096:	bd70      	pop	{r4, r5, r6, pc}
 800b098:	0800e1ed 	.word	0x0800e1ed
 800b09c:	0800e2cd 	.word	0x0800e2cd

0800b0a0 <__multadd>:
 800b0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a4:	690d      	ldr	r5, [r1, #16]
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	461e      	mov	r6, r3
 800b0ac:	f101 0c14 	add.w	ip, r1, #20
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	f8dc 3000 	ldr.w	r3, [ip]
 800b0b6:	b299      	uxth	r1, r3
 800b0b8:	fb02 6101 	mla	r1, r2, r1, r6
 800b0bc:	0c1e      	lsrs	r6, r3, #16
 800b0be:	0c0b      	lsrs	r3, r1, #16
 800b0c0:	fb02 3306 	mla	r3, r2, r6, r3
 800b0c4:	b289      	uxth	r1, r1
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0cc:	4285      	cmp	r5, r0
 800b0ce:	f84c 1b04 	str.w	r1, [ip], #4
 800b0d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0d6:	dcec      	bgt.n	800b0b2 <__multadd+0x12>
 800b0d8:	b30e      	cbz	r6, 800b11e <__multadd+0x7e>
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	42ab      	cmp	r3, r5
 800b0de:	dc19      	bgt.n	800b114 <__multadd+0x74>
 800b0e0:	6861      	ldr	r1, [r4, #4]
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	3101      	adds	r1, #1
 800b0e6:	f7ff ff79 	bl	800afdc <_Balloc>
 800b0ea:	4680      	mov	r8, r0
 800b0ec:	b928      	cbnz	r0, 800b0fa <__multadd+0x5a>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b124 <__multadd+0x84>)
 800b0f2:	480d      	ldr	r0, [pc, #52]	@ (800b128 <__multadd+0x88>)
 800b0f4:	21ba      	movs	r1, #186	@ 0xba
 800b0f6:	f001 fa4b 	bl	800c590 <__assert_func>
 800b0fa:	6922      	ldr	r2, [r4, #16]
 800b0fc:	3202      	adds	r2, #2
 800b0fe:	f104 010c 	add.w	r1, r4, #12
 800b102:	0092      	lsls	r2, r2, #2
 800b104:	300c      	adds	r0, #12
 800b106:	f7fe fd67 	bl	8009bd8 <memcpy>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff ffa5 	bl	800b05c <_Bfree>
 800b112:	4644      	mov	r4, r8
 800b114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b118:	3501      	adds	r5, #1
 800b11a:	615e      	str	r6, [r3, #20]
 800b11c:	6125      	str	r5, [r4, #16]
 800b11e:	4620      	mov	r0, r4
 800b120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b124:	0800e25c 	.word	0x0800e25c
 800b128:	0800e2cd 	.word	0x0800e2cd

0800b12c <__s2b>:
 800b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b130:	460c      	mov	r4, r1
 800b132:	4615      	mov	r5, r2
 800b134:	461f      	mov	r7, r3
 800b136:	2209      	movs	r2, #9
 800b138:	3308      	adds	r3, #8
 800b13a:	4606      	mov	r6, r0
 800b13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b140:	2100      	movs	r1, #0
 800b142:	2201      	movs	r2, #1
 800b144:	429a      	cmp	r2, r3
 800b146:	db09      	blt.n	800b15c <__s2b+0x30>
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ff47 	bl	800afdc <_Balloc>
 800b14e:	b940      	cbnz	r0, 800b162 <__s2b+0x36>
 800b150:	4602      	mov	r2, r0
 800b152:	4b19      	ldr	r3, [pc, #100]	@ (800b1b8 <__s2b+0x8c>)
 800b154:	4819      	ldr	r0, [pc, #100]	@ (800b1bc <__s2b+0x90>)
 800b156:	21d3      	movs	r1, #211	@ 0xd3
 800b158:	f001 fa1a 	bl	800c590 <__assert_func>
 800b15c:	0052      	lsls	r2, r2, #1
 800b15e:	3101      	adds	r1, #1
 800b160:	e7f0      	b.n	800b144 <__s2b+0x18>
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	6143      	str	r3, [r0, #20]
 800b166:	2d09      	cmp	r5, #9
 800b168:	f04f 0301 	mov.w	r3, #1
 800b16c:	6103      	str	r3, [r0, #16]
 800b16e:	dd16      	ble.n	800b19e <__s2b+0x72>
 800b170:	f104 0909 	add.w	r9, r4, #9
 800b174:	46c8      	mov	r8, r9
 800b176:	442c      	add	r4, r5
 800b178:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b17c:	4601      	mov	r1, r0
 800b17e:	3b30      	subs	r3, #48	@ 0x30
 800b180:	220a      	movs	r2, #10
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ff8c 	bl	800b0a0 <__multadd>
 800b188:	45a0      	cmp	r8, r4
 800b18a:	d1f5      	bne.n	800b178 <__s2b+0x4c>
 800b18c:	f1a5 0408 	sub.w	r4, r5, #8
 800b190:	444c      	add	r4, r9
 800b192:	1b2d      	subs	r5, r5, r4
 800b194:	1963      	adds	r3, r4, r5
 800b196:	42bb      	cmp	r3, r7
 800b198:	db04      	blt.n	800b1a4 <__s2b+0x78>
 800b19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19e:	340a      	adds	r4, #10
 800b1a0:	2509      	movs	r5, #9
 800b1a2:	e7f6      	b.n	800b192 <__s2b+0x66>
 800b1a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	3b30      	subs	r3, #48	@ 0x30
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7ff ff76 	bl	800b0a0 <__multadd>
 800b1b4:	e7ee      	b.n	800b194 <__s2b+0x68>
 800b1b6:	bf00      	nop
 800b1b8:	0800e25c 	.word	0x0800e25c
 800b1bc:	0800e2cd 	.word	0x0800e2cd

0800b1c0 <__hi0bits>:
 800b1c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	bf36      	itet	cc
 800b1c8:	0403      	lslcc	r3, r0, #16
 800b1ca:	2000      	movcs	r0, #0
 800b1cc:	2010      	movcc	r0, #16
 800b1ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1d2:	bf3c      	itt	cc
 800b1d4:	021b      	lslcc	r3, r3, #8
 800b1d6:	3008      	addcc	r0, #8
 800b1d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1dc:	bf3c      	itt	cc
 800b1de:	011b      	lslcc	r3, r3, #4
 800b1e0:	3004      	addcc	r0, #4
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e6:	bf3c      	itt	cc
 800b1e8:	009b      	lslcc	r3, r3, #2
 800b1ea:	3002      	addcc	r0, #2
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	db05      	blt.n	800b1fc <__hi0bits+0x3c>
 800b1f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1f4:	f100 0001 	add.w	r0, r0, #1
 800b1f8:	bf08      	it	eq
 800b1fa:	2020      	moveq	r0, #32
 800b1fc:	4770      	bx	lr

0800b1fe <__lo0bits>:
 800b1fe:	6803      	ldr	r3, [r0, #0]
 800b200:	4602      	mov	r2, r0
 800b202:	f013 0007 	ands.w	r0, r3, #7
 800b206:	d00b      	beq.n	800b220 <__lo0bits+0x22>
 800b208:	07d9      	lsls	r1, r3, #31
 800b20a:	d421      	bmi.n	800b250 <__lo0bits+0x52>
 800b20c:	0798      	lsls	r0, r3, #30
 800b20e:	bf49      	itett	mi
 800b210:	085b      	lsrmi	r3, r3, #1
 800b212:	089b      	lsrpl	r3, r3, #2
 800b214:	2001      	movmi	r0, #1
 800b216:	6013      	strmi	r3, [r2, #0]
 800b218:	bf5c      	itt	pl
 800b21a:	6013      	strpl	r3, [r2, #0]
 800b21c:	2002      	movpl	r0, #2
 800b21e:	4770      	bx	lr
 800b220:	b299      	uxth	r1, r3
 800b222:	b909      	cbnz	r1, 800b228 <__lo0bits+0x2a>
 800b224:	0c1b      	lsrs	r3, r3, #16
 800b226:	2010      	movs	r0, #16
 800b228:	b2d9      	uxtb	r1, r3
 800b22a:	b909      	cbnz	r1, 800b230 <__lo0bits+0x32>
 800b22c:	3008      	adds	r0, #8
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	bf04      	itt	eq
 800b234:	091b      	lsreq	r3, r3, #4
 800b236:	3004      	addeq	r0, #4
 800b238:	0799      	lsls	r1, r3, #30
 800b23a:	bf04      	itt	eq
 800b23c:	089b      	lsreq	r3, r3, #2
 800b23e:	3002      	addeq	r0, #2
 800b240:	07d9      	lsls	r1, r3, #31
 800b242:	d403      	bmi.n	800b24c <__lo0bits+0x4e>
 800b244:	085b      	lsrs	r3, r3, #1
 800b246:	f100 0001 	add.w	r0, r0, #1
 800b24a:	d003      	beq.n	800b254 <__lo0bits+0x56>
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	4770      	bx	lr
 800b250:	2000      	movs	r0, #0
 800b252:	4770      	bx	lr
 800b254:	2020      	movs	r0, #32
 800b256:	4770      	bx	lr

0800b258 <__i2b>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	460c      	mov	r4, r1
 800b25c:	2101      	movs	r1, #1
 800b25e:	f7ff febd 	bl	800afdc <_Balloc>
 800b262:	4602      	mov	r2, r0
 800b264:	b928      	cbnz	r0, 800b272 <__i2b+0x1a>
 800b266:	4b05      	ldr	r3, [pc, #20]	@ (800b27c <__i2b+0x24>)
 800b268:	4805      	ldr	r0, [pc, #20]	@ (800b280 <__i2b+0x28>)
 800b26a:	f240 1145 	movw	r1, #325	@ 0x145
 800b26e:	f001 f98f 	bl	800c590 <__assert_func>
 800b272:	2301      	movs	r3, #1
 800b274:	6144      	str	r4, [r0, #20]
 800b276:	6103      	str	r3, [r0, #16]
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	bf00      	nop
 800b27c:	0800e25c 	.word	0x0800e25c
 800b280:	0800e2cd 	.word	0x0800e2cd

0800b284 <__multiply>:
 800b284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b288:	4614      	mov	r4, r2
 800b28a:	690a      	ldr	r2, [r1, #16]
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	429a      	cmp	r2, r3
 800b290:	bfa8      	it	ge
 800b292:	4623      	movge	r3, r4
 800b294:	460f      	mov	r7, r1
 800b296:	bfa4      	itt	ge
 800b298:	460c      	movge	r4, r1
 800b29a:	461f      	movge	r7, r3
 800b29c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b2a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	6861      	ldr	r1, [r4, #4]
 800b2a8:	eb0a 0609 	add.w	r6, sl, r9
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	bfb8      	it	lt
 800b2b2:	3101      	addlt	r1, #1
 800b2b4:	f7ff fe92 	bl	800afdc <_Balloc>
 800b2b8:	b930      	cbnz	r0, 800b2c8 <__multiply+0x44>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b44      	ldr	r3, [pc, #272]	@ (800b3d0 <__multiply+0x14c>)
 800b2be:	4845      	ldr	r0, [pc, #276]	@ (800b3d4 <__multiply+0x150>)
 800b2c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2c4:	f001 f964 	bl	800c590 <__assert_func>
 800b2c8:	f100 0514 	add.w	r5, r0, #20
 800b2cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2d0:	462b      	mov	r3, r5
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4543      	cmp	r3, r8
 800b2d6:	d321      	bcc.n	800b31c <__multiply+0x98>
 800b2d8:	f107 0114 	add.w	r1, r7, #20
 800b2dc:	f104 0214 	add.w	r2, r4, #20
 800b2e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	1b13      	subs	r3, r2, r4
 800b2ec:	3b15      	subs	r3, #21
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	f104 0715 	add.w	r7, r4, #21
 800b2f8:	42ba      	cmp	r2, r7
 800b2fa:	bf38      	it	cc
 800b2fc:	2304      	movcc	r3, #4
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	9b02      	ldr	r3, [sp, #8]
 800b302:	9103      	str	r1, [sp, #12]
 800b304:	428b      	cmp	r3, r1
 800b306:	d80c      	bhi.n	800b322 <__multiply+0x9e>
 800b308:	2e00      	cmp	r6, #0
 800b30a:	dd03      	ble.n	800b314 <__multiply+0x90>
 800b30c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b310:	2b00      	cmp	r3, #0
 800b312:	d05b      	beq.n	800b3cc <__multiply+0x148>
 800b314:	6106      	str	r6, [r0, #16]
 800b316:	b005      	add	sp, #20
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	f843 2b04 	str.w	r2, [r3], #4
 800b320:	e7d8      	b.n	800b2d4 <__multiply+0x50>
 800b322:	f8b1 a000 	ldrh.w	sl, [r1]
 800b326:	f1ba 0f00 	cmp.w	sl, #0
 800b32a:	d024      	beq.n	800b376 <__multiply+0xf2>
 800b32c:	f104 0e14 	add.w	lr, r4, #20
 800b330:	46a9      	mov	r9, r5
 800b332:	f04f 0c00 	mov.w	ip, #0
 800b336:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b33a:	f8d9 3000 	ldr.w	r3, [r9]
 800b33e:	fa1f fb87 	uxth.w	fp, r7
 800b342:	b29b      	uxth	r3, r3
 800b344:	fb0a 330b 	mla	r3, sl, fp, r3
 800b348:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b34c:	f8d9 7000 	ldr.w	r7, [r9]
 800b350:	4463      	add	r3, ip
 800b352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b356:	fb0a c70b 	mla	r7, sl, fp, ip
 800b35a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b35e:	b29b      	uxth	r3, r3
 800b360:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b364:	4572      	cmp	r2, lr
 800b366:	f849 3b04 	str.w	r3, [r9], #4
 800b36a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b36e:	d8e2      	bhi.n	800b336 <__multiply+0xb2>
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	f845 c003 	str.w	ip, [r5, r3]
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b37c:	3104      	adds	r1, #4
 800b37e:	f1b9 0f00 	cmp.w	r9, #0
 800b382:	d021      	beq.n	800b3c8 <__multiply+0x144>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	f104 0c14 	add.w	ip, r4, #20
 800b38a:	46ae      	mov	lr, r5
 800b38c:	f04f 0a00 	mov.w	sl, #0
 800b390:	f8bc b000 	ldrh.w	fp, [ip]
 800b394:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b398:	fb09 770b 	mla	r7, r9, fp, r7
 800b39c:	4457      	add	r7, sl
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3a4:	f84e 3b04 	str.w	r3, [lr], #4
 800b3a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b0:	f8be 3000 	ldrh.w	r3, [lr]
 800b3b4:	fb09 330a 	mla	r3, r9, sl, r3
 800b3b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b3bc:	4562      	cmp	r2, ip
 800b3be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3c2:	d8e5      	bhi.n	800b390 <__multiply+0x10c>
 800b3c4:	9f01      	ldr	r7, [sp, #4]
 800b3c6:	51eb      	str	r3, [r5, r7]
 800b3c8:	3504      	adds	r5, #4
 800b3ca:	e799      	b.n	800b300 <__multiply+0x7c>
 800b3cc:	3e01      	subs	r6, #1
 800b3ce:	e79b      	b.n	800b308 <__multiply+0x84>
 800b3d0:	0800e25c 	.word	0x0800e25c
 800b3d4:	0800e2cd 	.word	0x0800e2cd

0800b3d8 <__pow5mult>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4615      	mov	r5, r2
 800b3de:	f012 0203 	ands.w	r2, r2, #3
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	d007      	beq.n	800b3f8 <__pow5mult+0x20>
 800b3e8:	4c25      	ldr	r4, [pc, #148]	@ (800b480 <__pow5mult+0xa8>)
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3f2:	f7ff fe55 	bl	800b0a0 <__multadd>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	10ad      	asrs	r5, r5, #2
 800b3fa:	d03d      	beq.n	800b478 <__pow5mult+0xa0>
 800b3fc:	69fc      	ldr	r4, [r7, #28]
 800b3fe:	b97c      	cbnz	r4, 800b420 <__pow5mult+0x48>
 800b400:	2010      	movs	r0, #16
 800b402:	f7fc fbc7 	bl	8007b94 <malloc>
 800b406:	4602      	mov	r2, r0
 800b408:	61f8      	str	r0, [r7, #28]
 800b40a:	b928      	cbnz	r0, 800b418 <__pow5mult+0x40>
 800b40c:	4b1d      	ldr	r3, [pc, #116]	@ (800b484 <__pow5mult+0xac>)
 800b40e:	481e      	ldr	r0, [pc, #120]	@ (800b488 <__pow5mult+0xb0>)
 800b410:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b414:	f001 f8bc 	bl	800c590 <__assert_func>
 800b418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b41c:	6004      	str	r4, [r0, #0]
 800b41e:	60c4      	str	r4, [r0, #12]
 800b420:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b428:	b94c      	cbnz	r4, 800b43e <__pow5mult+0x66>
 800b42a:	f240 2171 	movw	r1, #625	@ 0x271
 800b42e:	4638      	mov	r0, r7
 800b430:	f7ff ff12 	bl	800b258 <__i2b>
 800b434:	2300      	movs	r3, #0
 800b436:	f8c8 0008 	str.w	r0, [r8, #8]
 800b43a:	4604      	mov	r4, r0
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	f04f 0900 	mov.w	r9, #0
 800b442:	07eb      	lsls	r3, r5, #31
 800b444:	d50a      	bpl.n	800b45c <__pow5mult+0x84>
 800b446:	4631      	mov	r1, r6
 800b448:	4622      	mov	r2, r4
 800b44a:	4638      	mov	r0, r7
 800b44c:	f7ff ff1a 	bl	800b284 <__multiply>
 800b450:	4631      	mov	r1, r6
 800b452:	4680      	mov	r8, r0
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff fe01 	bl	800b05c <_Bfree>
 800b45a:	4646      	mov	r6, r8
 800b45c:	106d      	asrs	r5, r5, #1
 800b45e:	d00b      	beq.n	800b478 <__pow5mult+0xa0>
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	b938      	cbnz	r0, 800b474 <__pow5mult+0x9c>
 800b464:	4622      	mov	r2, r4
 800b466:	4621      	mov	r1, r4
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff ff0b 	bl	800b284 <__multiply>
 800b46e:	6020      	str	r0, [r4, #0]
 800b470:	f8c0 9000 	str.w	r9, [r0]
 800b474:	4604      	mov	r4, r0
 800b476:	e7e4      	b.n	800b442 <__pow5mult+0x6a>
 800b478:	4630      	mov	r0, r6
 800b47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b47e:	bf00      	nop
 800b480:	0800e328 	.word	0x0800e328
 800b484:	0800e1ed 	.word	0x0800e1ed
 800b488:	0800e2cd 	.word	0x0800e2cd

0800b48c <__lshift>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	6849      	ldr	r1, [r1, #4]
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	4607      	mov	r7, r0
 800b49e:	4691      	mov	r9, r2
 800b4a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4a4:	f108 0601 	add.w	r6, r8, #1
 800b4a8:	42b3      	cmp	r3, r6
 800b4aa:	db0b      	blt.n	800b4c4 <__lshift+0x38>
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff fd95 	bl	800afdc <_Balloc>
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	b948      	cbnz	r0, 800b4ca <__lshift+0x3e>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b28      	ldr	r3, [pc, #160]	@ (800b55c <__lshift+0xd0>)
 800b4ba:	4829      	ldr	r0, [pc, #164]	@ (800b560 <__lshift+0xd4>)
 800b4bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4c0:	f001 f866 	bl	800c590 <__assert_func>
 800b4c4:	3101      	adds	r1, #1
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	e7ee      	b.n	800b4a8 <__lshift+0x1c>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f100 0114 	add.w	r1, r0, #20
 800b4d0:	f100 0210 	add.w	r2, r0, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	4553      	cmp	r3, sl
 800b4d8:	db33      	blt.n	800b542 <__lshift+0xb6>
 800b4da:	6920      	ldr	r0, [r4, #16]
 800b4dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4e0:	f104 0314 	add.w	r3, r4, #20
 800b4e4:	f019 091f 	ands.w	r9, r9, #31
 800b4e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4f0:	d02b      	beq.n	800b54a <__lshift+0xbe>
 800b4f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b4f6:	468a      	mov	sl, r1
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	6818      	ldr	r0, [r3, #0]
 800b4fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b500:	4310      	orrs	r0, r2
 800b502:	f84a 0b04 	str.w	r0, [sl], #4
 800b506:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50a:	459c      	cmp	ip, r3
 800b50c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b510:	d8f3      	bhi.n	800b4fa <__lshift+0x6e>
 800b512:	ebac 0304 	sub.w	r3, ip, r4
 800b516:	3b15      	subs	r3, #21
 800b518:	f023 0303 	bic.w	r3, r3, #3
 800b51c:	3304      	adds	r3, #4
 800b51e:	f104 0015 	add.w	r0, r4, #21
 800b522:	4584      	cmp	ip, r0
 800b524:	bf38      	it	cc
 800b526:	2304      	movcc	r3, #4
 800b528:	50ca      	str	r2, [r1, r3]
 800b52a:	b10a      	cbz	r2, 800b530 <__lshift+0xa4>
 800b52c:	f108 0602 	add.w	r6, r8, #2
 800b530:	3e01      	subs	r6, #1
 800b532:	4638      	mov	r0, r7
 800b534:	612e      	str	r6, [r5, #16]
 800b536:	4621      	mov	r1, r4
 800b538:	f7ff fd90 	bl	800b05c <_Bfree>
 800b53c:	4628      	mov	r0, r5
 800b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b542:	f842 0f04 	str.w	r0, [r2, #4]!
 800b546:	3301      	adds	r3, #1
 800b548:	e7c5      	b.n	800b4d6 <__lshift+0x4a>
 800b54a:	3904      	subs	r1, #4
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	f841 2f04 	str.w	r2, [r1, #4]!
 800b554:	459c      	cmp	ip, r3
 800b556:	d8f9      	bhi.n	800b54c <__lshift+0xc0>
 800b558:	e7ea      	b.n	800b530 <__lshift+0xa4>
 800b55a:	bf00      	nop
 800b55c:	0800e25c 	.word	0x0800e25c
 800b560:	0800e2cd 	.word	0x0800e2cd

0800b564 <__mcmp>:
 800b564:	690a      	ldr	r2, [r1, #16]
 800b566:	4603      	mov	r3, r0
 800b568:	6900      	ldr	r0, [r0, #16]
 800b56a:	1a80      	subs	r0, r0, r2
 800b56c:	b530      	push	{r4, r5, lr}
 800b56e:	d10e      	bne.n	800b58e <__mcmp+0x2a>
 800b570:	3314      	adds	r3, #20
 800b572:	3114      	adds	r1, #20
 800b574:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b57c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b584:	4295      	cmp	r5, r2
 800b586:	d003      	beq.n	800b590 <__mcmp+0x2c>
 800b588:	d205      	bcs.n	800b596 <__mcmp+0x32>
 800b58a:	f04f 30ff 	mov.w	r0, #4294967295
 800b58e:	bd30      	pop	{r4, r5, pc}
 800b590:	42a3      	cmp	r3, r4
 800b592:	d3f3      	bcc.n	800b57c <__mcmp+0x18>
 800b594:	e7fb      	b.n	800b58e <__mcmp+0x2a>
 800b596:	2001      	movs	r0, #1
 800b598:	e7f9      	b.n	800b58e <__mcmp+0x2a>
	...

0800b59c <__mdiff>:
 800b59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	f7ff ffdb 	bl	800b564 <__mcmp>
 800b5ae:	1e05      	subs	r5, r0, #0
 800b5b0:	d112      	bne.n	800b5d8 <__mdiff+0x3c>
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff fd11 	bl	800afdc <_Balloc>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	b928      	cbnz	r0, 800b5ca <__mdiff+0x2e>
 800b5be:	4b3f      	ldr	r3, [pc, #252]	@ (800b6bc <__mdiff+0x120>)
 800b5c0:	f240 2137 	movw	r1, #567	@ 0x237
 800b5c4:	483e      	ldr	r0, [pc, #248]	@ (800b6c0 <__mdiff+0x124>)
 800b5c6:	f000 ffe3 	bl	800c590 <__assert_func>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	b003      	add	sp, #12
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	bfbc      	itt	lt
 800b5da:	464b      	movlt	r3, r9
 800b5dc:	46a1      	movlt	r9, r4
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5e4:	bfba      	itte	lt
 800b5e6:	461c      	movlt	r4, r3
 800b5e8:	2501      	movlt	r5, #1
 800b5ea:	2500      	movge	r5, #0
 800b5ec:	f7ff fcf6 	bl	800afdc <_Balloc>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	b918      	cbnz	r0, 800b5fc <__mdiff+0x60>
 800b5f4:	4b31      	ldr	r3, [pc, #196]	@ (800b6bc <__mdiff+0x120>)
 800b5f6:	f240 2145 	movw	r1, #581	@ 0x245
 800b5fa:	e7e3      	b.n	800b5c4 <__mdiff+0x28>
 800b5fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b600:	6926      	ldr	r6, [r4, #16]
 800b602:	60c5      	str	r5, [r0, #12]
 800b604:	f109 0310 	add.w	r3, r9, #16
 800b608:	f109 0514 	add.w	r5, r9, #20
 800b60c:	f104 0e14 	add.w	lr, r4, #20
 800b610:	f100 0b14 	add.w	fp, r0, #20
 800b614:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b618:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	46d9      	mov	r9, fp
 800b620:	f04f 0c00 	mov.w	ip, #0
 800b624:	9b01      	ldr	r3, [sp, #4]
 800b626:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b62a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	fa1f f38a 	uxth.w	r3, sl
 800b634:	4619      	mov	r1, r3
 800b636:	b283      	uxth	r3, r0
 800b638:	1acb      	subs	r3, r1, r3
 800b63a:	0c00      	lsrs	r0, r0, #16
 800b63c:	4463      	add	r3, ip
 800b63e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b642:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b646:	b29b      	uxth	r3, r3
 800b648:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b64c:	4576      	cmp	r6, lr
 800b64e:	f849 3b04 	str.w	r3, [r9], #4
 800b652:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b656:	d8e5      	bhi.n	800b624 <__mdiff+0x88>
 800b658:	1b33      	subs	r3, r6, r4
 800b65a:	3b15      	subs	r3, #21
 800b65c:	f023 0303 	bic.w	r3, r3, #3
 800b660:	3415      	adds	r4, #21
 800b662:	3304      	adds	r3, #4
 800b664:	42a6      	cmp	r6, r4
 800b666:	bf38      	it	cc
 800b668:	2304      	movcc	r3, #4
 800b66a:	441d      	add	r5, r3
 800b66c:	445b      	add	r3, fp
 800b66e:	461e      	mov	r6, r3
 800b670:	462c      	mov	r4, r5
 800b672:	4544      	cmp	r4, r8
 800b674:	d30e      	bcc.n	800b694 <__mdiff+0xf8>
 800b676:	f108 0103 	add.w	r1, r8, #3
 800b67a:	1b49      	subs	r1, r1, r5
 800b67c:	f021 0103 	bic.w	r1, r1, #3
 800b680:	3d03      	subs	r5, #3
 800b682:	45a8      	cmp	r8, r5
 800b684:	bf38      	it	cc
 800b686:	2100      	movcc	r1, #0
 800b688:	440b      	add	r3, r1
 800b68a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b68e:	b191      	cbz	r1, 800b6b6 <__mdiff+0x11a>
 800b690:	6117      	str	r7, [r2, #16]
 800b692:	e79d      	b.n	800b5d0 <__mdiff+0x34>
 800b694:	f854 1b04 	ldr.w	r1, [r4], #4
 800b698:	46e6      	mov	lr, ip
 800b69a:	0c08      	lsrs	r0, r1, #16
 800b69c:	fa1c fc81 	uxtah	ip, ip, r1
 800b6a0:	4471      	add	r1, lr
 800b6a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b6a6:	b289      	uxth	r1, r1
 800b6a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b6ac:	f846 1b04 	str.w	r1, [r6], #4
 800b6b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6b4:	e7dd      	b.n	800b672 <__mdiff+0xd6>
 800b6b6:	3f01      	subs	r7, #1
 800b6b8:	e7e7      	b.n	800b68a <__mdiff+0xee>
 800b6ba:	bf00      	nop
 800b6bc:	0800e25c 	.word	0x0800e25c
 800b6c0:	0800e2cd 	.word	0x0800e2cd

0800b6c4 <__ulp>:
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	ed8d 0b00 	vstr	d0, [sp]
 800b6ca:	9a01      	ldr	r2, [sp, #4]
 800b6cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b70c <__ulp+0x48>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc08      	bgt.n	800b6ea <__ulp+0x26>
 800b6d8:	425b      	negs	r3, r3
 800b6da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b6de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6e2:	da04      	bge.n	800b6ee <__ulp+0x2a>
 800b6e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b6e8:	4113      	asrs	r3, r2
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	e008      	b.n	800b700 <__ulp+0x3c>
 800b6ee:	f1a2 0314 	sub.w	r3, r2, #20
 800b6f2:	2b1e      	cmp	r3, #30
 800b6f4:	bfda      	itte	le
 800b6f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b6fa:	40da      	lsrle	r2, r3
 800b6fc:	2201      	movgt	r2, #1
 800b6fe:	2300      	movs	r3, #0
 800b700:	4619      	mov	r1, r3
 800b702:	4610      	mov	r0, r2
 800b704:	ec41 0b10 	vmov	d0, r0, r1
 800b708:	b002      	add	sp, #8
 800b70a:	4770      	bx	lr
 800b70c:	7ff00000 	.word	0x7ff00000

0800b710 <__b2d>:
 800b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	6906      	ldr	r6, [r0, #16]
 800b716:	f100 0814 	add.w	r8, r0, #20
 800b71a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b71e:	1f37      	subs	r7, r6, #4
 800b720:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b724:	4610      	mov	r0, r2
 800b726:	f7ff fd4b 	bl	800b1c0 <__hi0bits>
 800b72a:	f1c0 0320 	rsb	r3, r0, #32
 800b72e:	280a      	cmp	r0, #10
 800b730:	600b      	str	r3, [r1, #0]
 800b732:	491b      	ldr	r1, [pc, #108]	@ (800b7a0 <__b2d+0x90>)
 800b734:	dc15      	bgt.n	800b762 <__b2d+0x52>
 800b736:	f1c0 0c0b 	rsb	ip, r0, #11
 800b73a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b73e:	45b8      	cmp	r8, r7
 800b740:	ea43 0501 	orr.w	r5, r3, r1
 800b744:	bf34      	ite	cc
 800b746:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b74a:	2300      	movcs	r3, #0
 800b74c:	3015      	adds	r0, #21
 800b74e:	fa02 f000 	lsl.w	r0, r2, r0
 800b752:	fa23 f30c 	lsr.w	r3, r3, ip
 800b756:	4303      	orrs	r3, r0
 800b758:	461c      	mov	r4, r3
 800b75a:	ec45 4b10 	vmov	d0, r4, r5
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b762:	45b8      	cmp	r8, r7
 800b764:	bf3a      	itte	cc
 800b766:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b76a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b76e:	2300      	movcs	r3, #0
 800b770:	380b      	subs	r0, #11
 800b772:	d012      	beq.n	800b79a <__b2d+0x8a>
 800b774:	f1c0 0120 	rsb	r1, r0, #32
 800b778:	fa23 f401 	lsr.w	r4, r3, r1
 800b77c:	4082      	lsls	r2, r0
 800b77e:	4322      	orrs	r2, r4
 800b780:	4547      	cmp	r7, r8
 800b782:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b786:	bf8c      	ite	hi
 800b788:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b78c:	2200      	movls	r2, #0
 800b78e:	4083      	lsls	r3, r0
 800b790:	40ca      	lsrs	r2, r1
 800b792:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b796:	4313      	orrs	r3, r2
 800b798:	e7de      	b.n	800b758 <__b2d+0x48>
 800b79a:	ea42 0501 	orr.w	r5, r2, r1
 800b79e:	e7db      	b.n	800b758 <__b2d+0x48>
 800b7a0:	3ff00000 	.word	0x3ff00000

0800b7a4 <__d2b>:
 800b7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	460f      	mov	r7, r1
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	ec59 8b10 	vmov	r8, r9, d0
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	f7ff fc13 	bl	800afdc <_Balloc>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b930      	cbnz	r0, 800b7c8 <__d2b+0x24>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b23      	ldr	r3, [pc, #140]	@ (800b84c <__d2b+0xa8>)
 800b7be:	4824      	ldr	r0, [pc, #144]	@ (800b850 <__d2b+0xac>)
 800b7c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b7c4:	f000 fee4 	bl	800c590 <__assert_func>
 800b7c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7d0:	b10d      	cbz	r5, 800b7d6 <__d2b+0x32>
 800b7d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b7dc:	d023      	beq.n	800b826 <__d2b+0x82>
 800b7de:	4668      	mov	r0, sp
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	f7ff fd0c 	bl	800b1fe <__lo0bits>
 800b7e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7ea:	b1d0      	cbz	r0, 800b822 <__d2b+0x7e>
 800b7ec:	f1c0 0320 	rsb	r3, r0, #32
 800b7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	40c2      	lsrs	r2, r0
 800b7f8:	6163      	str	r3, [r4, #20]
 800b7fa:	9201      	str	r2, [sp, #4]
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	61a3      	str	r3, [r4, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	bf0c      	ite	eq
 800b804:	2201      	moveq	r2, #1
 800b806:	2202      	movne	r2, #2
 800b808:	6122      	str	r2, [r4, #16]
 800b80a:	b1a5      	cbz	r5, 800b836 <__d2b+0x92>
 800b80c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b810:	4405      	add	r5, r0
 800b812:	603d      	str	r5, [r7, #0]
 800b814:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b818:	6030      	str	r0, [r6, #0]
 800b81a:	4620      	mov	r0, r4
 800b81c:	b003      	add	sp, #12
 800b81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b822:	6161      	str	r1, [r4, #20]
 800b824:	e7ea      	b.n	800b7fc <__d2b+0x58>
 800b826:	a801      	add	r0, sp, #4
 800b828:	f7ff fce9 	bl	800b1fe <__lo0bits>
 800b82c:	9b01      	ldr	r3, [sp, #4]
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	3020      	adds	r0, #32
 800b832:	2201      	movs	r2, #1
 800b834:	e7e8      	b.n	800b808 <__d2b+0x64>
 800b836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b83a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b83e:	6038      	str	r0, [r7, #0]
 800b840:	6918      	ldr	r0, [r3, #16]
 800b842:	f7ff fcbd 	bl	800b1c0 <__hi0bits>
 800b846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b84a:	e7e5      	b.n	800b818 <__d2b+0x74>
 800b84c:	0800e25c 	.word	0x0800e25c
 800b850:	0800e2cd 	.word	0x0800e2cd

0800b854 <__ratio>:
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	b085      	sub	sp, #20
 800b85a:	e9cd 1000 	strd	r1, r0, [sp]
 800b85e:	a902      	add	r1, sp, #8
 800b860:	f7ff ff56 	bl	800b710 <__b2d>
 800b864:	9800      	ldr	r0, [sp, #0]
 800b866:	a903      	add	r1, sp, #12
 800b868:	ec55 4b10 	vmov	r4, r5, d0
 800b86c:	f7ff ff50 	bl	800b710 <__b2d>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	6919      	ldr	r1, [r3, #16]
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	1ac9      	subs	r1, r1, r3
 800b87a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	ec5b ab10 	vmov	sl, fp, d0
 800b884:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfce      	itee	gt
 800b88c:	462a      	movgt	r2, r5
 800b88e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b892:	465a      	movle	r2, fp
 800b894:	462f      	mov	r7, r5
 800b896:	46d9      	mov	r9, fp
 800b898:	bfcc      	ite	gt
 800b89a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b89e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b8a2:	464b      	mov	r3, r9
 800b8a4:	4652      	mov	r2, sl
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	f7f4 ffcf 	bl	800084c <__aeabi_ddiv>
 800b8ae:	ec41 0b10 	vmov	d0, r0, r1
 800b8b2:	b005      	add	sp, #20
 800b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8b8 <__copybits>:
 800b8b8:	3901      	subs	r1, #1
 800b8ba:	b570      	push	{r4, r5, r6, lr}
 800b8bc:	1149      	asrs	r1, r1, #5
 800b8be:	6914      	ldr	r4, [r2, #16]
 800b8c0:	3101      	adds	r1, #1
 800b8c2:	f102 0314 	add.w	r3, r2, #20
 800b8c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8ce:	1f05      	subs	r5, r0, #4
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	d30c      	bcc.n	800b8ee <__copybits+0x36>
 800b8d4:	1aa3      	subs	r3, r4, r2
 800b8d6:	3b11      	subs	r3, #17
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	3211      	adds	r2, #17
 800b8de:	42a2      	cmp	r2, r4
 800b8e0:	bf88      	it	hi
 800b8e2:	2300      	movhi	r3, #0
 800b8e4:	4418      	add	r0, r3
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4288      	cmp	r0, r1
 800b8ea:	d305      	bcc.n	800b8f8 <__copybits+0x40>
 800b8ec:	bd70      	pop	{r4, r5, r6, pc}
 800b8ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8f6:	e7eb      	b.n	800b8d0 <__copybits+0x18>
 800b8f8:	f840 3b04 	str.w	r3, [r0], #4
 800b8fc:	e7f4      	b.n	800b8e8 <__copybits+0x30>

0800b8fe <__any_on>:
 800b8fe:	f100 0214 	add.w	r2, r0, #20
 800b902:	6900      	ldr	r0, [r0, #16]
 800b904:	114b      	asrs	r3, r1, #5
 800b906:	4298      	cmp	r0, r3
 800b908:	b510      	push	{r4, lr}
 800b90a:	db11      	blt.n	800b930 <__any_on+0x32>
 800b90c:	dd0a      	ble.n	800b924 <__any_on+0x26>
 800b90e:	f011 011f 	ands.w	r1, r1, #31
 800b912:	d007      	beq.n	800b924 <__any_on+0x26>
 800b914:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b918:	fa24 f001 	lsr.w	r0, r4, r1
 800b91c:	fa00 f101 	lsl.w	r1, r0, r1
 800b920:	428c      	cmp	r4, r1
 800b922:	d10b      	bne.n	800b93c <__any_on+0x3e>
 800b924:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b928:	4293      	cmp	r3, r2
 800b92a:	d803      	bhi.n	800b934 <__any_on+0x36>
 800b92c:	2000      	movs	r0, #0
 800b92e:	bd10      	pop	{r4, pc}
 800b930:	4603      	mov	r3, r0
 800b932:	e7f7      	b.n	800b924 <__any_on+0x26>
 800b934:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b938:	2900      	cmp	r1, #0
 800b93a:	d0f5      	beq.n	800b928 <__any_on+0x2a>
 800b93c:	2001      	movs	r0, #1
 800b93e:	e7f6      	b.n	800b92e <__any_on+0x30>

0800b940 <_strtoul_l.constprop.0>:
 800b940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b944:	4e34      	ldr	r6, [pc, #208]	@ (800ba18 <_strtoul_l.constprop.0+0xd8>)
 800b946:	4686      	mov	lr, r0
 800b948:	460d      	mov	r5, r1
 800b94a:	4628      	mov	r0, r5
 800b94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b950:	5d37      	ldrb	r7, [r6, r4]
 800b952:	f017 0708 	ands.w	r7, r7, #8
 800b956:	d1f8      	bne.n	800b94a <_strtoul_l.constprop.0+0xa>
 800b958:	2c2d      	cmp	r4, #45	@ 0x2d
 800b95a:	d12f      	bne.n	800b9bc <_strtoul_l.constprop.0+0x7c>
 800b95c:	782c      	ldrb	r4, [r5, #0]
 800b95e:	2701      	movs	r7, #1
 800b960:	1c85      	adds	r5, r0, #2
 800b962:	f033 0010 	bics.w	r0, r3, #16
 800b966:	d109      	bne.n	800b97c <_strtoul_l.constprop.0+0x3c>
 800b968:	2c30      	cmp	r4, #48	@ 0x30
 800b96a:	d12c      	bne.n	800b9c6 <_strtoul_l.constprop.0+0x86>
 800b96c:	7828      	ldrb	r0, [r5, #0]
 800b96e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b972:	2858      	cmp	r0, #88	@ 0x58
 800b974:	d127      	bne.n	800b9c6 <_strtoul_l.constprop.0+0x86>
 800b976:	786c      	ldrb	r4, [r5, #1]
 800b978:	2310      	movs	r3, #16
 800b97a:	3502      	adds	r5, #2
 800b97c:	f04f 38ff 	mov.w	r8, #4294967295
 800b980:	2600      	movs	r6, #0
 800b982:	fbb8 f8f3 	udiv	r8, r8, r3
 800b986:	fb03 f908 	mul.w	r9, r3, r8
 800b98a:	ea6f 0909 	mvn.w	r9, r9
 800b98e:	4630      	mov	r0, r6
 800b990:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b994:	f1bc 0f09 	cmp.w	ip, #9
 800b998:	d81c      	bhi.n	800b9d4 <_strtoul_l.constprop.0+0x94>
 800b99a:	4664      	mov	r4, ip
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	dd2a      	ble.n	800b9f6 <_strtoul_l.constprop.0+0xb6>
 800b9a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b9a4:	d007      	beq.n	800b9b6 <_strtoul_l.constprop.0+0x76>
 800b9a6:	4580      	cmp	r8, r0
 800b9a8:	d322      	bcc.n	800b9f0 <_strtoul_l.constprop.0+0xb0>
 800b9aa:	d101      	bne.n	800b9b0 <_strtoul_l.constprop.0+0x70>
 800b9ac:	45a1      	cmp	r9, r4
 800b9ae:	db1f      	blt.n	800b9f0 <_strtoul_l.constprop.0+0xb0>
 800b9b0:	fb00 4003 	mla	r0, r0, r3, r4
 800b9b4:	2601      	movs	r6, #1
 800b9b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9ba:	e7e9      	b.n	800b990 <_strtoul_l.constprop.0+0x50>
 800b9bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b9be:	bf04      	itt	eq
 800b9c0:	782c      	ldrbeq	r4, [r5, #0]
 800b9c2:	1c85      	addeq	r5, r0, #2
 800b9c4:	e7cd      	b.n	800b962 <_strtoul_l.constprop.0+0x22>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1d8      	bne.n	800b97c <_strtoul_l.constprop.0+0x3c>
 800b9ca:	2c30      	cmp	r4, #48	@ 0x30
 800b9cc:	bf0c      	ite	eq
 800b9ce:	2308      	moveq	r3, #8
 800b9d0:	230a      	movne	r3, #10
 800b9d2:	e7d3      	b.n	800b97c <_strtoul_l.constprop.0+0x3c>
 800b9d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b9d8:	f1bc 0f19 	cmp.w	ip, #25
 800b9dc:	d801      	bhi.n	800b9e2 <_strtoul_l.constprop.0+0xa2>
 800b9de:	3c37      	subs	r4, #55	@ 0x37
 800b9e0:	e7dc      	b.n	800b99c <_strtoul_l.constprop.0+0x5c>
 800b9e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b9e6:	f1bc 0f19 	cmp.w	ip, #25
 800b9ea:	d804      	bhi.n	800b9f6 <_strtoul_l.constprop.0+0xb6>
 800b9ec:	3c57      	subs	r4, #87	@ 0x57
 800b9ee:	e7d5      	b.n	800b99c <_strtoul_l.constprop.0+0x5c>
 800b9f0:	f04f 36ff 	mov.w	r6, #4294967295
 800b9f4:	e7df      	b.n	800b9b6 <_strtoul_l.constprop.0+0x76>
 800b9f6:	1c73      	adds	r3, r6, #1
 800b9f8:	d106      	bne.n	800ba08 <_strtoul_l.constprop.0+0xc8>
 800b9fa:	2322      	movs	r3, #34	@ 0x22
 800b9fc:	f8ce 3000 	str.w	r3, [lr]
 800ba00:	4630      	mov	r0, r6
 800ba02:	b932      	cbnz	r2, 800ba12 <_strtoul_l.constprop.0+0xd2>
 800ba04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba08:	b107      	cbz	r7, 800ba0c <_strtoul_l.constprop.0+0xcc>
 800ba0a:	4240      	negs	r0, r0
 800ba0c:	2a00      	cmp	r2, #0
 800ba0e:	d0f9      	beq.n	800ba04 <_strtoul_l.constprop.0+0xc4>
 800ba10:	b106      	cbz	r6, 800ba14 <_strtoul_l.constprop.0+0xd4>
 800ba12:	1e69      	subs	r1, r5, #1
 800ba14:	6011      	str	r1, [r2, #0]
 800ba16:	e7f5      	b.n	800ba04 <_strtoul_l.constprop.0+0xc4>
 800ba18:	0800e0a1 	.word	0x0800e0a1

0800ba1c <_strtoul_r>:
 800ba1c:	f7ff bf90 	b.w	800b940 <_strtoul_l.constprop.0>

0800ba20 <__ascii_wctomb>:
 800ba20:	4603      	mov	r3, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	b141      	cbz	r1, 800ba38 <__ascii_wctomb+0x18>
 800ba26:	2aff      	cmp	r2, #255	@ 0xff
 800ba28:	d904      	bls.n	800ba34 <__ascii_wctomb+0x14>
 800ba2a:	228a      	movs	r2, #138	@ 0x8a
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba32:	4770      	bx	lr
 800ba34:	700a      	strb	r2, [r1, #0]
 800ba36:	2001      	movs	r0, #1
 800ba38:	4770      	bx	lr

0800ba3a <__ssputs_r>:
 800ba3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3e:	688e      	ldr	r6, [r1, #8]
 800ba40:	461f      	mov	r7, r3
 800ba42:	42be      	cmp	r6, r7
 800ba44:	680b      	ldr	r3, [r1, #0]
 800ba46:	4682      	mov	sl, r0
 800ba48:	460c      	mov	r4, r1
 800ba4a:	4690      	mov	r8, r2
 800ba4c:	d82d      	bhi.n	800baaa <__ssputs_r+0x70>
 800ba4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba52:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba56:	d026      	beq.n	800baa6 <__ssputs_r+0x6c>
 800ba58:	6965      	ldr	r5, [r4, #20]
 800ba5a:	6909      	ldr	r1, [r1, #16]
 800ba5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba60:	eba3 0901 	sub.w	r9, r3, r1
 800ba64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba68:	1c7b      	adds	r3, r7, #1
 800ba6a:	444b      	add	r3, r9
 800ba6c:	106d      	asrs	r5, r5, #1
 800ba6e:	429d      	cmp	r5, r3
 800ba70:	bf38      	it	cc
 800ba72:	461d      	movcc	r5, r3
 800ba74:	0553      	lsls	r3, r2, #21
 800ba76:	d527      	bpl.n	800bac8 <__ssputs_r+0x8e>
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7fc f8b5 	bl	8007be8 <_malloc_r>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	b360      	cbz	r0, 800badc <__ssputs_r+0xa2>
 800ba82:	6921      	ldr	r1, [r4, #16]
 800ba84:	464a      	mov	r2, r9
 800ba86:	f7fe f8a7 	bl	8009bd8 <memcpy>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6126      	str	r6, [r4, #16]
 800ba98:	6165      	str	r5, [r4, #20]
 800ba9a:	444e      	add	r6, r9
 800ba9c:	eba5 0509 	sub.w	r5, r5, r9
 800baa0:	6026      	str	r6, [r4, #0]
 800baa2:	60a5      	str	r5, [r4, #8]
 800baa4:	463e      	mov	r6, r7
 800baa6:	42be      	cmp	r6, r7
 800baa8:	d900      	bls.n	800baac <__ssputs_r+0x72>
 800baaa:	463e      	mov	r6, r7
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	4632      	mov	r2, r6
 800bab0:	4641      	mov	r1, r8
 800bab2:	f000 fd52 	bl	800c55a <memmove>
 800bab6:	68a3      	ldr	r3, [r4, #8]
 800bab8:	1b9b      	subs	r3, r3, r6
 800baba:	60a3      	str	r3, [r4, #8]
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	4433      	add	r3, r6
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	2000      	movs	r0, #0
 800bac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac8:	462a      	mov	r2, r5
 800baca:	f000 fd93 	bl	800c5f4 <_realloc_r>
 800bace:	4606      	mov	r6, r0
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d1e0      	bne.n	800ba96 <__ssputs_r+0x5c>
 800bad4:	6921      	ldr	r1, [r4, #16]
 800bad6:	4650      	mov	r0, sl
 800bad8:	f7fe feea 	bl	800a8b0 <_free_r>
 800badc:	230c      	movs	r3, #12
 800bade:	f8ca 3000 	str.w	r3, [sl]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae8:	81a3      	strh	r3, [r4, #12]
 800baea:	f04f 30ff 	mov.w	r0, #4294967295
 800baee:	e7e9      	b.n	800bac4 <__ssputs_r+0x8a>

0800baf0 <_svfiprintf_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	4698      	mov	r8, r3
 800baf6:	898b      	ldrh	r3, [r1, #12]
 800baf8:	061b      	lsls	r3, r3, #24
 800bafa:	b09d      	sub	sp, #116	@ 0x74
 800bafc:	4607      	mov	r7, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	4614      	mov	r4, r2
 800bb02:	d510      	bpl.n	800bb26 <_svfiprintf_r+0x36>
 800bb04:	690b      	ldr	r3, [r1, #16]
 800bb06:	b973      	cbnz	r3, 800bb26 <_svfiprintf_r+0x36>
 800bb08:	2140      	movs	r1, #64	@ 0x40
 800bb0a:	f7fc f86d 	bl	8007be8 <_malloc_r>
 800bb0e:	6028      	str	r0, [r5, #0]
 800bb10:	6128      	str	r0, [r5, #16]
 800bb12:	b930      	cbnz	r0, 800bb22 <_svfiprintf_r+0x32>
 800bb14:	230c      	movs	r3, #12
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b01d      	add	sp, #116	@ 0x74
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	2340      	movs	r3, #64	@ 0x40
 800bb24:	616b      	str	r3, [r5, #20]
 800bb26:	2300      	movs	r3, #0
 800bb28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb2a:	2320      	movs	r3, #32
 800bb2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb30:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb34:	2330      	movs	r3, #48	@ 0x30
 800bb36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bcd4 <_svfiprintf_r+0x1e4>
 800bb3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3e:	f04f 0901 	mov.w	r9, #1
 800bb42:	4623      	mov	r3, r4
 800bb44:	469a      	mov	sl, r3
 800bb46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb4a:	b10a      	cbz	r2, 800bb50 <_svfiprintf_r+0x60>
 800bb4c:	2a25      	cmp	r2, #37	@ 0x25
 800bb4e:	d1f9      	bne.n	800bb44 <_svfiprintf_r+0x54>
 800bb50:	ebba 0b04 	subs.w	fp, sl, r4
 800bb54:	d00b      	beq.n	800bb6e <_svfiprintf_r+0x7e>
 800bb56:	465b      	mov	r3, fp
 800bb58:	4622      	mov	r2, r4
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f7ff ff6c 	bl	800ba3a <__ssputs_r>
 800bb62:	3001      	adds	r0, #1
 800bb64:	f000 80a7 	beq.w	800bcb6 <_svfiprintf_r+0x1c6>
 800bb68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb6a:	445a      	add	r2, fp
 800bb6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb6e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 809f 	beq.w	800bcb6 <_svfiprintf_r+0x1c6>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb82:	f10a 0a01 	add.w	sl, sl, #1
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	9307      	str	r3, [sp, #28]
 800bb8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb90:	4654      	mov	r4, sl
 800bb92:	2205      	movs	r2, #5
 800bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb98:	484e      	ldr	r0, [pc, #312]	@ (800bcd4 <_svfiprintf_r+0x1e4>)
 800bb9a:	f7f4 fb19 	bl	80001d0 <memchr>
 800bb9e:	9a04      	ldr	r2, [sp, #16]
 800bba0:	b9d8      	cbnz	r0, 800bbda <_svfiprintf_r+0xea>
 800bba2:	06d0      	lsls	r0, r2, #27
 800bba4:	bf44      	itt	mi
 800bba6:	2320      	movmi	r3, #32
 800bba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbac:	0711      	lsls	r1, r2, #28
 800bbae:	bf44      	itt	mi
 800bbb0:	232b      	movmi	r3, #43	@ 0x2b
 800bbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbc:	d015      	beq.n	800bbea <_svfiprintf_r+0xfa>
 800bbbe:	9a07      	ldr	r2, [sp, #28]
 800bbc0:	4654      	mov	r4, sl
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f04f 0c0a 	mov.w	ip, #10
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbce:	3b30      	subs	r3, #48	@ 0x30
 800bbd0:	2b09      	cmp	r3, #9
 800bbd2:	d94b      	bls.n	800bc6c <_svfiprintf_r+0x17c>
 800bbd4:	b1b0      	cbz	r0, 800bc04 <_svfiprintf_r+0x114>
 800bbd6:	9207      	str	r2, [sp, #28]
 800bbd8:	e014      	b.n	800bc04 <_svfiprintf_r+0x114>
 800bbda:	eba0 0308 	sub.w	r3, r0, r8
 800bbde:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	46a2      	mov	sl, r4
 800bbe8:	e7d2      	b.n	800bb90 <_svfiprintf_r+0xa0>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	1d19      	adds	r1, r3, #4
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	9103      	str	r1, [sp, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	bfbb      	ittet	lt
 800bbf6:	425b      	neglt	r3, r3
 800bbf8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbfc:	9307      	strge	r3, [sp, #28]
 800bbfe:	9307      	strlt	r3, [sp, #28]
 800bc00:	bfb8      	it	lt
 800bc02:	9204      	strlt	r2, [sp, #16]
 800bc04:	7823      	ldrb	r3, [r4, #0]
 800bc06:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc08:	d10a      	bne.n	800bc20 <_svfiprintf_r+0x130>
 800bc0a:	7863      	ldrb	r3, [r4, #1]
 800bc0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0e:	d132      	bne.n	800bc76 <_svfiprintf_r+0x186>
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	1d1a      	adds	r2, r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	9203      	str	r2, [sp, #12]
 800bc18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc1c:	3402      	adds	r4, #2
 800bc1e:	9305      	str	r3, [sp, #20]
 800bc20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bce4 <_svfiprintf_r+0x1f4>
 800bc24:	7821      	ldrb	r1, [r4, #0]
 800bc26:	2203      	movs	r2, #3
 800bc28:	4650      	mov	r0, sl
 800bc2a:	f7f4 fad1 	bl	80001d0 <memchr>
 800bc2e:	b138      	cbz	r0, 800bc40 <_svfiprintf_r+0x150>
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	eba0 000a 	sub.w	r0, r0, sl
 800bc36:	2240      	movs	r2, #64	@ 0x40
 800bc38:	4082      	lsls	r2, r0
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	3401      	adds	r4, #1
 800bc3e:	9304      	str	r3, [sp, #16]
 800bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc44:	4824      	ldr	r0, [pc, #144]	@ (800bcd8 <_svfiprintf_r+0x1e8>)
 800bc46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc4a:	2206      	movs	r2, #6
 800bc4c:	f7f4 fac0 	bl	80001d0 <memchr>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d036      	beq.n	800bcc2 <_svfiprintf_r+0x1d2>
 800bc54:	4b21      	ldr	r3, [pc, #132]	@ (800bcdc <_svfiprintf_r+0x1ec>)
 800bc56:	bb1b      	cbnz	r3, 800bca0 <_svfiprintf_r+0x1b0>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	3307      	adds	r3, #7
 800bc5c:	f023 0307 	bic.w	r3, r3, #7
 800bc60:	3308      	adds	r3, #8
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc66:	4433      	add	r3, r6
 800bc68:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc6a:	e76a      	b.n	800bb42 <_svfiprintf_r+0x52>
 800bc6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc70:	460c      	mov	r4, r1
 800bc72:	2001      	movs	r0, #1
 800bc74:	e7a8      	b.n	800bbc8 <_svfiprintf_r+0xd8>
 800bc76:	2300      	movs	r3, #0
 800bc78:	3401      	adds	r4, #1
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f04f 0c0a 	mov.w	ip, #10
 800bc82:	4620      	mov	r0, r4
 800bc84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc88:	3a30      	subs	r2, #48	@ 0x30
 800bc8a:	2a09      	cmp	r2, #9
 800bc8c:	d903      	bls.n	800bc96 <_svfiprintf_r+0x1a6>
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0c6      	beq.n	800bc20 <_svfiprintf_r+0x130>
 800bc92:	9105      	str	r1, [sp, #20]
 800bc94:	e7c4      	b.n	800bc20 <_svfiprintf_r+0x130>
 800bc96:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e7f0      	b.n	800bc82 <_svfiprintf_r+0x192>
 800bca0:	ab03      	add	r3, sp, #12
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	462a      	mov	r2, r5
 800bca6:	4b0e      	ldr	r3, [pc, #56]	@ (800bce0 <_svfiprintf_r+0x1f0>)
 800bca8:	a904      	add	r1, sp, #16
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f7fc ff4e 	bl	8008b4c <_printf_float>
 800bcb0:	1c42      	adds	r2, r0, #1
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	d1d6      	bne.n	800bc64 <_svfiprintf_r+0x174>
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	065b      	lsls	r3, r3, #25
 800bcba:	f53f af2d 	bmi.w	800bb18 <_svfiprintf_r+0x28>
 800bcbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcc0:	e72c      	b.n	800bb1c <_svfiprintf_r+0x2c>
 800bcc2:	ab03      	add	r3, sp, #12
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	462a      	mov	r2, r5
 800bcc8:	4b05      	ldr	r3, [pc, #20]	@ (800bce0 <_svfiprintf_r+0x1f0>)
 800bcca:	a904      	add	r1, sp, #16
 800bccc:	4638      	mov	r0, r7
 800bcce:	f7fd f9d5 	bl	800907c <_printf_i>
 800bcd2:	e7ed      	b.n	800bcb0 <_svfiprintf_r+0x1c0>
 800bcd4:	0800e428 	.word	0x0800e428
 800bcd8:	0800e432 	.word	0x0800e432
 800bcdc:	08008b4d 	.word	0x08008b4d
 800bce0:	0800ba3b 	.word	0x0800ba3b
 800bce4:	0800e42e 	.word	0x0800e42e

0800bce8 <_sungetc_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	1c4b      	adds	r3, r1, #1
 800bcec:	4614      	mov	r4, r2
 800bcee:	d103      	bne.n	800bcf8 <_sungetc_r+0x10>
 800bcf0:	f04f 35ff 	mov.w	r5, #4294967295
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	8993      	ldrh	r3, [r2, #12]
 800bcfa:	f023 0320 	bic.w	r3, r3, #32
 800bcfe:	8193      	strh	r3, [r2, #12]
 800bd00:	6853      	ldr	r3, [r2, #4]
 800bd02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bd04:	b2cd      	uxtb	r5, r1
 800bd06:	b18a      	cbz	r2, 800bd2c <_sungetc_r+0x44>
 800bd08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	dd08      	ble.n	800bd20 <_sungetc_r+0x38>
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	1e5a      	subs	r2, r3, #1
 800bd12:	6022      	str	r2, [r4, #0]
 800bd14:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd18:	6863      	ldr	r3, [r4, #4]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	6063      	str	r3, [r4, #4]
 800bd1e:	e7e9      	b.n	800bcf4 <_sungetc_r+0xc>
 800bd20:	4621      	mov	r1, r4
 800bd22:	f000 fbe0 	bl	800c4e6 <__submore>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d0f1      	beq.n	800bd0e <_sungetc_r+0x26>
 800bd2a:	e7e1      	b.n	800bcf0 <_sungetc_r+0x8>
 800bd2c:	6921      	ldr	r1, [r4, #16]
 800bd2e:	6822      	ldr	r2, [r4, #0]
 800bd30:	b141      	cbz	r1, 800bd44 <_sungetc_r+0x5c>
 800bd32:	4291      	cmp	r1, r2
 800bd34:	d206      	bcs.n	800bd44 <_sungetc_r+0x5c>
 800bd36:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bd3a:	42a9      	cmp	r1, r5
 800bd3c:	d102      	bne.n	800bd44 <_sungetc_r+0x5c>
 800bd3e:	3a01      	subs	r2, #1
 800bd40:	6022      	str	r2, [r4, #0]
 800bd42:	e7ea      	b.n	800bd1a <_sungetc_r+0x32>
 800bd44:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bd48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4e:	2303      	movs	r3, #3
 800bd50:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bd52:	4623      	mov	r3, r4
 800bd54:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e7de      	b.n	800bd1c <_sungetc_r+0x34>

0800bd5e <__ssrefill_r>:
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	460c      	mov	r4, r1
 800bd62:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bd64:	b169      	cbz	r1, 800bd82 <__ssrefill_r+0x24>
 800bd66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	d001      	beq.n	800bd72 <__ssrefill_r+0x14>
 800bd6e:	f7fe fd9f 	bl	800a8b0 <_free_r>
 800bd72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd74:	6063      	str	r3, [r4, #4]
 800bd76:	2000      	movs	r0, #0
 800bd78:	6360      	str	r0, [r4, #52]	@ 0x34
 800bd7a:	b113      	cbz	r3, 800bd82 <__ssrefill_r+0x24>
 800bd7c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	bd10      	pop	{r4, pc}
 800bd82:	6923      	ldr	r3, [r4, #16]
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	6063      	str	r3, [r4, #4]
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f043 0320 	orr.w	r3, r3, #32
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	e7f3      	b.n	800bd80 <__ssrefill_r+0x22>

0800bd98 <__ssvfiscanf_r>:
 800bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800bda2:	2100      	movs	r1, #0
 800bda4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bda8:	49a5      	ldr	r1, [pc, #660]	@ (800c040 <__ssvfiscanf_r+0x2a8>)
 800bdaa:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bdac:	f10d 0804 	add.w	r8, sp, #4
 800bdb0:	49a4      	ldr	r1, [pc, #656]	@ (800c044 <__ssvfiscanf_r+0x2ac>)
 800bdb2:	4fa5      	ldr	r7, [pc, #660]	@ (800c048 <__ssvfiscanf_r+0x2b0>)
 800bdb4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bdb8:	4606      	mov	r6, r0
 800bdba:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	7813      	ldrb	r3, [r2, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 8158 	beq.w	800c076 <__ssvfiscanf_r+0x2de>
 800bdc6:	5cf9      	ldrb	r1, [r7, r3]
 800bdc8:	f011 0108 	ands.w	r1, r1, #8
 800bdcc:	f102 0501 	add.w	r5, r2, #1
 800bdd0:	d019      	beq.n	800be06 <__ssvfiscanf_r+0x6e>
 800bdd2:	6863      	ldr	r3, [r4, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	dd0f      	ble.n	800bdf8 <__ssvfiscanf_r+0x60>
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	5cba      	ldrb	r2, [r7, r2]
 800bdde:	0712      	lsls	r2, r2, #28
 800bde0:	d401      	bmi.n	800bde6 <__ssvfiscanf_r+0x4e>
 800bde2:	462a      	mov	r2, r5
 800bde4:	e7eb      	b.n	800bdbe <__ssvfiscanf_r+0x26>
 800bde6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bde8:	3201      	adds	r2, #1
 800bdea:	9245      	str	r2, [sp, #276]	@ 0x114
 800bdec:	6862      	ldr	r2, [r4, #4]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	3a01      	subs	r2, #1
 800bdf2:	6062      	str	r2, [r4, #4]
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	e7ec      	b.n	800bdd2 <__ssvfiscanf_r+0x3a>
 800bdf8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4798      	blx	r3
 800be00:	2800      	cmp	r0, #0
 800be02:	d0e9      	beq.n	800bdd8 <__ssvfiscanf_r+0x40>
 800be04:	e7ed      	b.n	800bde2 <__ssvfiscanf_r+0x4a>
 800be06:	2b25      	cmp	r3, #37	@ 0x25
 800be08:	d012      	beq.n	800be30 <__ssvfiscanf_r+0x98>
 800be0a:	4699      	mov	r9, r3
 800be0c:	6863      	ldr	r3, [r4, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f340 8093 	ble.w	800bf3a <__ssvfiscanf_r+0x1a2>
 800be14:	6822      	ldr	r2, [r4, #0]
 800be16:	7813      	ldrb	r3, [r2, #0]
 800be18:	454b      	cmp	r3, r9
 800be1a:	f040 812c 	bne.w	800c076 <__ssvfiscanf_r+0x2de>
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	3b01      	subs	r3, #1
 800be22:	6063      	str	r3, [r4, #4]
 800be24:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800be26:	3201      	adds	r2, #1
 800be28:	3301      	adds	r3, #1
 800be2a:	6022      	str	r2, [r4, #0]
 800be2c:	9345      	str	r3, [sp, #276]	@ 0x114
 800be2e:	e7d8      	b.n	800bde2 <__ssvfiscanf_r+0x4a>
 800be30:	9141      	str	r1, [sp, #260]	@ 0x104
 800be32:	9143      	str	r1, [sp, #268]	@ 0x10c
 800be34:	7853      	ldrb	r3, [r2, #1]
 800be36:	2b2a      	cmp	r3, #42	@ 0x2a
 800be38:	bf02      	ittt	eq
 800be3a:	2310      	moveq	r3, #16
 800be3c:	1c95      	addeq	r5, r2, #2
 800be3e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800be40:	220a      	movs	r2, #10
 800be42:	46a9      	mov	r9, r5
 800be44:	f819 1b01 	ldrb.w	r1, [r9], #1
 800be48:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800be4c:	2b09      	cmp	r3, #9
 800be4e:	d91e      	bls.n	800be8e <__ssvfiscanf_r+0xf6>
 800be50:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c04c <__ssvfiscanf_r+0x2b4>
 800be54:	2203      	movs	r2, #3
 800be56:	4650      	mov	r0, sl
 800be58:	f7f4 f9ba 	bl	80001d0 <memchr>
 800be5c:	b138      	cbz	r0, 800be6e <__ssvfiscanf_r+0xd6>
 800be5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800be60:	eba0 000a 	sub.w	r0, r0, sl
 800be64:	2301      	movs	r3, #1
 800be66:	4083      	lsls	r3, r0
 800be68:	4313      	orrs	r3, r2
 800be6a:	9341      	str	r3, [sp, #260]	@ 0x104
 800be6c:	464d      	mov	r5, r9
 800be6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be72:	2b78      	cmp	r3, #120	@ 0x78
 800be74:	d806      	bhi.n	800be84 <__ssvfiscanf_r+0xec>
 800be76:	2b57      	cmp	r3, #87	@ 0x57
 800be78:	d810      	bhi.n	800be9c <__ssvfiscanf_r+0x104>
 800be7a:	2b25      	cmp	r3, #37	@ 0x25
 800be7c:	d0c5      	beq.n	800be0a <__ssvfiscanf_r+0x72>
 800be7e:	d857      	bhi.n	800bf30 <__ssvfiscanf_r+0x198>
 800be80:	2b00      	cmp	r3, #0
 800be82:	d065      	beq.n	800bf50 <__ssvfiscanf_r+0x1b8>
 800be84:	2303      	movs	r3, #3
 800be86:	9347      	str	r3, [sp, #284]	@ 0x11c
 800be88:	230a      	movs	r3, #10
 800be8a:	9342      	str	r3, [sp, #264]	@ 0x108
 800be8c:	e078      	b.n	800bf80 <__ssvfiscanf_r+0x1e8>
 800be8e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800be90:	fb02 1103 	mla	r1, r2, r3, r1
 800be94:	3930      	subs	r1, #48	@ 0x30
 800be96:	9143      	str	r1, [sp, #268]	@ 0x10c
 800be98:	464d      	mov	r5, r9
 800be9a:	e7d2      	b.n	800be42 <__ssvfiscanf_r+0xaa>
 800be9c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bea0:	2a20      	cmp	r2, #32
 800bea2:	d8ef      	bhi.n	800be84 <__ssvfiscanf_r+0xec>
 800bea4:	a101      	add	r1, pc, #4	@ (adr r1, 800beac <__ssvfiscanf_r+0x114>)
 800bea6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800beaa:	bf00      	nop
 800beac:	0800bf5f 	.word	0x0800bf5f
 800beb0:	0800be85 	.word	0x0800be85
 800beb4:	0800be85 	.word	0x0800be85
 800beb8:	0800bfb9 	.word	0x0800bfb9
 800bebc:	0800be85 	.word	0x0800be85
 800bec0:	0800be85 	.word	0x0800be85
 800bec4:	0800be85 	.word	0x0800be85
 800bec8:	0800be85 	.word	0x0800be85
 800becc:	0800be85 	.word	0x0800be85
 800bed0:	0800be85 	.word	0x0800be85
 800bed4:	0800be85 	.word	0x0800be85
 800bed8:	0800bfcf 	.word	0x0800bfcf
 800bedc:	0800bfb5 	.word	0x0800bfb5
 800bee0:	0800bf37 	.word	0x0800bf37
 800bee4:	0800bf37 	.word	0x0800bf37
 800bee8:	0800bf37 	.word	0x0800bf37
 800beec:	0800be85 	.word	0x0800be85
 800bef0:	0800bf71 	.word	0x0800bf71
 800bef4:	0800be85 	.word	0x0800be85
 800bef8:	0800be85 	.word	0x0800be85
 800befc:	0800be85 	.word	0x0800be85
 800bf00:	0800be85 	.word	0x0800be85
 800bf04:	0800bfdf 	.word	0x0800bfdf
 800bf08:	0800bf79 	.word	0x0800bf79
 800bf0c:	0800bf57 	.word	0x0800bf57
 800bf10:	0800be85 	.word	0x0800be85
 800bf14:	0800be85 	.word	0x0800be85
 800bf18:	0800bfdb 	.word	0x0800bfdb
 800bf1c:	0800be85 	.word	0x0800be85
 800bf20:	0800bfb5 	.word	0x0800bfb5
 800bf24:	0800be85 	.word	0x0800be85
 800bf28:	0800be85 	.word	0x0800be85
 800bf2c:	0800bf5f 	.word	0x0800bf5f
 800bf30:	3b45      	subs	r3, #69	@ 0x45
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d8a6      	bhi.n	800be84 <__ssvfiscanf_r+0xec>
 800bf36:	2305      	movs	r3, #5
 800bf38:	e021      	b.n	800bf7e <__ssvfiscanf_r+0x1e6>
 800bf3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4798      	blx	r3
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f43f af66 	beq.w	800be14 <__ssvfiscanf_r+0x7c>
 800bf48:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f040 808b 	bne.w	800c066 <__ssvfiscanf_r+0x2ce>
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e08b      	b.n	800c06e <__ssvfiscanf_r+0x2d6>
 800bf56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf58:	f042 0220 	orr.w	r2, r2, #32
 800bf5c:	9241      	str	r2, [sp, #260]	@ 0x104
 800bf5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf64:	9241      	str	r2, [sp, #260]	@ 0x104
 800bf66:	2210      	movs	r2, #16
 800bf68:	2b6e      	cmp	r3, #110	@ 0x6e
 800bf6a:	9242      	str	r2, [sp, #264]	@ 0x108
 800bf6c:	d902      	bls.n	800bf74 <__ssvfiscanf_r+0x1dc>
 800bf6e:	e005      	b.n	800bf7c <__ssvfiscanf_r+0x1e4>
 800bf70:	2300      	movs	r3, #0
 800bf72:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf74:	2303      	movs	r3, #3
 800bf76:	e002      	b.n	800bf7e <__ssvfiscanf_r+0x1e6>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf7c:	2304      	movs	r3, #4
 800bf7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	dd39      	ble.n	800bffa <__ssvfiscanf_r+0x262>
 800bf86:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bf88:	0659      	lsls	r1, r3, #25
 800bf8a:	d404      	bmi.n	800bf96 <__ssvfiscanf_r+0x1fe>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	781a      	ldrb	r2, [r3, #0]
 800bf90:	5cba      	ldrb	r2, [r7, r2]
 800bf92:	0712      	lsls	r2, r2, #28
 800bf94:	d438      	bmi.n	800c008 <__ssvfiscanf_r+0x270>
 800bf96:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	dc47      	bgt.n	800c02c <__ssvfiscanf_r+0x294>
 800bf9c:	466b      	mov	r3, sp
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	a941      	add	r1, sp, #260	@ 0x104
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f000 f86c 	bl	800c080 <_scanf_chars>
 800bfa8:	2801      	cmp	r0, #1
 800bfaa:	d064      	beq.n	800c076 <__ssvfiscanf_r+0x2de>
 800bfac:	2802      	cmp	r0, #2
 800bfae:	f47f af18 	bne.w	800bde2 <__ssvfiscanf_r+0x4a>
 800bfb2:	e7c9      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800bfb4:	220a      	movs	r2, #10
 800bfb6:	e7d7      	b.n	800bf68 <__ssvfiscanf_r+0x1d0>
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4640      	mov	r0, r8
 800bfbc:	f000 fa5a 	bl	800c474 <__sccl>
 800bfc0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc6:	9341      	str	r3, [sp, #260]	@ 0x104
 800bfc8:	4605      	mov	r5, r0
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e7d7      	b.n	800bf7e <__ssvfiscanf_r+0x1e6>
 800bfce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd4:	9341      	str	r3, [sp, #260]	@ 0x104
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e7d1      	b.n	800bf7e <__ssvfiscanf_r+0x1e6>
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e7cf      	b.n	800bf7e <__ssvfiscanf_r+0x1e6>
 800bfde:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bfe0:	06c3      	lsls	r3, r0, #27
 800bfe2:	f53f aefe 	bmi.w	800bde2 <__ssvfiscanf_r+0x4a>
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bfea:	1d19      	adds	r1, r3, #4
 800bfec:	9100      	str	r1, [sp, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	07c0      	lsls	r0, r0, #31
 800bff2:	bf4c      	ite	mi
 800bff4:	801a      	strhmi	r2, [r3, #0]
 800bff6:	601a      	strpl	r2, [r3, #0]
 800bff8:	e6f3      	b.n	800bde2 <__ssvfiscanf_r+0x4a>
 800bffa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bffc:	4621      	mov	r1, r4
 800bffe:	4630      	mov	r0, r6
 800c000:	4798      	blx	r3
 800c002:	2800      	cmp	r0, #0
 800c004:	d0bf      	beq.n	800bf86 <__ssvfiscanf_r+0x1ee>
 800c006:	e79f      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800c008:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c00a:	3201      	adds	r2, #1
 800c00c:	9245      	str	r2, [sp, #276]	@ 0x114
 800c00e:	6862      	ldr	r2, [r4, #4]
 800c010:	3a01      	subs	r2, #1
 800c012:	2a00      	cmp	r2, #0
 800c014:	6062      	str	r2, [r4, #4]
 800c016:	dd02      	ble.n	800c01e <__ssvfiscanf_r+0x286>
 800c018:	3301      	adds	r3, #1
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	e7b6      	b.n	800bf8c <__ssvfiscanf_r+0x1f4>
 800c01e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c020:	4621      	mov	r1, r4
 800c022:	4630      	mov	r0, r6
 800c024:	4798      	blx	r3
 800c026:	2800      	cmp	r0, #0
 800c028:	d0b0      	beq.n	800bf8c <__ssvfiscanf_r+0x1f4>
 800c02a:	e78d      	b.n	800bf48 <__ssvfiscanf_r+0x1b0>
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	dc0f      	bgt.n	800c050 <__ssvfiscanf_r+0x2b8>
 800c030:	466b      	mov	r3, sp
 800c032:	4622      	mov	r2, r4
 800c034:	a941      	add	r1, sp, #260	@ 0x104
 800c036:	4630      	mov	r0, r6
 800c038:	f000 f87c 	bl	800c134 <_scanf_i>
 800c03c:	e7b4      	b.n	800bfa8 <__ssvfiscanf_r+0x210>
 800c03e:	bf00      	nop
 800c040:	0800bce9 	.word	0x0800bce9
 800c044:	0800bd5f 	.word	0x0800bd5f
 800c048:	0800e0a1 	.word	0x0800e0a1
 800c04c:	0800e42e 	.word	0x0800e42e
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <__ssvfiscanf_r+0x2e4>)
 800c052:	2b00      	cmp	r3, #0
 800c054:	f43f aec5 	beq.w	800bde2 <__ssvfiscanf_r+0x4a>
 800c058:	466b      	mov	r3, sp
 800c05a:	4622      	mov	r2, r4
 800c05c:	a941      	add	r1, sp, #260	@ 0x104
 800c05e:	4630      	mov	r0, r6
 800c060:	f7fd f92c 	bl	80092bc <_scanf_float>
 800c064:	e7a0      	b.n	800bfa8 <__ssvfiscanf_r+0x210>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	065b      	lsls	r3, r3, #25
 800c06a:	f53f af71 	bmi.w	800bf50 <__ssvfiscanf_r+0x1b8>
 800c06e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c076:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c078:	e7f9      	b.n	800c06e <__ssvfiscanf_r+0x2d6>
 800c07a:	bf00      	nop
 800c07c:	080092bd 	.word	0x080092bd

0800c080 <_scanf_chars>:
 800c080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c084:	4615      	mov	r5, r2
 800c086:	688a      	ldr	r2, [r1, #8]
 800c088:	4680      	mov	r8, r0
 800c08a:	460c      	mov	r4, r1
 800c08c:	b932      	cbnz	r2, 800c09c <_scanf_chars+0x1c>
 800c08e:	698a      	ldr	r2, [r1, #24]
 800c090:	2a00      	cmp	r2, #0
 800c092:	bf14      	ite	ne
 800c094:	f04f 32ff 	movne.w	r2, #4294967295
 800c098:	2201      	moveq	r2, #1
 800c09a:	608a      	str	r2, [r1, #8]
 800c09c:	6822      	ldr	r2, [r4, #0]
 800c09e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c130 <_scanf_chars+0xb0>
 800c0a2:	06d1      	lsls	r1, r2, #27
 800c0a4:	bf5f      	itttt	pl
 800c0a6:	681a      	ldrpl	r2, [r3, #0]
 800c0a8:	1d11      	addpl	r1, r2, #4
 800c0aa:	6019      	strpl	r1, [r3, #0]
 800c0ac:	6816      	ldrpl	r6, [r2, #0]
 800c0ae:	2700      	movs	r7, #0
 800c0b0:	69a0      	ldr	r0, [r4, #24]
 800c0b2:	b188      	cbz	r0, 800c0d8 <_scanf_chars+0x58>
 800c0b4:	2801      	cmp	r0, #1
 800c0b6:	d107      	bne.n	800c0c8 <_scanf_chars+0x48>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	6963      	ldr	r3, [r4, #20]
 800c0be:	5c9b      	ldrb	r3, [r3, r2]
 800c0c0:	b953      	cbnz	r3, 800c0d8 <_scanf_chars+0x58>
 800c0c2:	2f00      	cmp	r7, #0
 800c0c4:	d031      	beq.n	800c12a <_scanf_chars+0xaa>
 800c0c6:	e022      	b.n	800c10e <_scanf_chars+0x8e>
 800c0c8:	2802      	cmp	r0, #2
 800c0ca:	d120      	bne.n	800c10e <_scanf_chars+0x8e>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c0d4:	071b      	lsls	r3, r3, #28
 800c0d6:	d41a      	bmi.n	800c10e <_scanf_chars+0x8e>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	06da      	lsls	r2, r3, #27
 800c0dc:	bf5e      	ittt	pl
 800c0de:	682b      	ldrpl	r3, [r5, #0]
 800c0e0:	781b      	ldrbpl	r3, [r3, #0]
 800c0e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c0e6:	682a      	ldr	r2, [r5, #0]
 800c0e8:	686b      	ldr	r3, [r5, #4]
 800c0ea:	3201      	adds	r2, #1
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	68a2      	ldr	r2, [r4, #8]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	3a01      	subs	r2, #1
 800c0f4:	606b      	str	r3, [r5, #4]
 800c0f6:	3701      	adds	r7, #1
 800c0f8:	60a2      	str	r2, [r4, #8]
 800c0fa:	b142      	cbz	r2, 800c10e <_scanf_chars+0x8e>
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	dcd7      	bgt.n	800c0b0 <_scanf_chars+0x30>
 800c100:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c104:	4629      	mov	r1, r5
 800c106:	4640      	mov	r0, r8
 800c108:	4798      	blx	r3
 800c10a:	2800      	cmp	r0, #0
 800c10c:	d0d0      	beq.n	800c0b0 <_scanf_chars+0x30>
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	f013 0310 	ands.w	r3, r3, #16
 800c114:	d105      	bne.n	800c122 <_scanf_chars+0xa2>
 800c116:	68e2      	ldr	r2, [r4, #12]
 800c118:	3201      	adds	r2, #1
 800c11a:	60e2      	str	r2, [r4, #12]
 800c11c:	69a2      	ldr	r2, [r4, #24]
 800c11e:	b102      	cbz	r2, 800c122 <_scanf_chars+0xa2>
 800c120:	7033      	strb	r3, [r6, #0]
 800c122:	6923      	ldr	r3, [r4, #16]
 800c124:	443b      	add	r3, r7
 800c126:	6123      	str	r3, [r4, #16]
 800c128:	2000      	movs	r0, #0
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	bf00      	nop
 800c130:	0800e0a1 	.word	0x0800e0a1

0800c134 <_scanf_i>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	4698      	mov	r8, r3
 800c13a:	4b74      	ldr	r3, [pc, #464]	@ (800c30c <_scanf_i+0x1d8>)
 800c13c:	460c      	mov	r4, r1
 800c13e:	4682      	mov	sl, r0
 800c140:	4616      	mov	r6, r2
 800c142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c146:	b087      	sub	sp, #28
 800c148:	ab03      	add	r3, sp, #12
 800c14a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c14e:	4b70      	ldr	r3, [pc, #448]	@ (800c310 <_scanf_i+0x1dc>)
 800c150:	69a1      	ldr	r1, [r4, #24]
 800c152:	4a70      	ldr	r2, [pc, #448]	@ (800c314 <_scanf_i+0x1e0>)
 800c154:	2903      	cmp	r1, #3
 800c156:	bf08      	it	eq
 800c158:	461a      	moveq	r2, r3
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	9201      	str	r2, [sp, #4]
 800c15e:	1e5a      	subs	r2, r3, #1
 800c160:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c164:	bf88      	it	hi
 800c166:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c16a:	4627      	mov	r7, r4
 800c16c:	bf82      	ittt	hi
 800c16e:	eb03 0905 	addhi.w	r9, r3, r5
 800c172:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c176:	60a3      	strhi	r3, [r4, #8]
 800c178:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c17c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c180:	bf98      	it	ls
 800c182:	f04f 0900 	movls.w	r9, #0
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	463d      	mov	r5, r7
 800c18a:	f04f 0b00 	mov.w	fp, #0
 800c18e:	6831      	ldr	r1, [r6, #0]
 800c190:	ab03      	add	r3, sp, #12
 800c192:	7809      	ldrb	r1, [r1, #0]
 800c194:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c198:	2202      	movs	r2, #2
 800c19a:	f7f4 f819 	bl	80001d0 <memchr>
 800c19e:	b328      	cbz	r0, 800c1ec <_scanf_i+0xb8>
 800c1a0:	f1bb 0f01 	cmp.w	fp, #1
 800c1a4:	d159      	bne.n	800c25a <_scanf_i+0x126>
 800c1a6:	6862      	ldr	r2, [r4, #4]
 800c1a8:	b92a      	cbnz	r2, 800c1b6 <_scanf_i+0x82>
 800c1aa:	6822      	ldr	r2, [r4, #0]
 800c1ac:	2108      	movs	r1, #8
 800c1ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1b2:	6061      	str	r1, [r4, #4]
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	6822      	ldr	r2, [r4, #0]
 800c1b8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c1bc:	6022      	str	r2, [r4, #0]
 800c1be:	68a2      	ldr	r2, [r4, #8]
 800c1c0:	1e51      	subs	r1, r2, #1
 800c1c2:	60a1      	str	r1, [r4, #8]
 800c1c4:	b192      	cbz	r2, 800c1ec <_scanf_i+0xb8>
 800c1c6:	6832      	ldr	r2, [r6, #0]
 800c1c8:	1c51      	adds	r1, r2, #1
 800c1ca:	6031      	str	r1, [r6, #0]
 800c1cc:	7812      	ldrb	r2, [r2, #0]
 800c1ce:	f805 2b01 	strb.w	r2, [r5], #1
 800c1d2:	6872      	ldr	r2, [r6, #4]
 800c1d4:	3a01      	subs	r2, #1
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	6072      	str	r2, [r6, #4]
 800c1da:	dc07      	bgt.n	800c1ec <_scanf_i+0xb8>
 800c1dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	4790      	blx	r2
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f040 8085 	bne.w	800c2f6 <_scanf_i+0x1c2>
 800c1ec:	f10b 0b01 	add.w	fp, fp, #1
 800c1f0:	f1bb 0f03 	cmp.w	fp, #3
 800c1f4:	d1cb      	bne.n	800c18e <_scanf_i+0x5a>
 800c1f6:	6863      	ldr	r3, [r4, #4]
 800c1f8:	b90b      	cbnz	r3, 800c1fe <_scanf_i+0xca>
 800c1fa:	230a      	movs	r3, #10
 800c1fc:	6063      	str	r3, [r4, #4]
 800c1fe:	6863      	ldr	r3, [r4, #4]
 800c200:	4945      	ldr	r1, [pc, #276]	@ (800c318 <_scanf_i+0x1e4>)
 800c202:	6960      	ldr	r0, [r4, #20]
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	f000 f935 	bl	800c474 <__sccl>
 800c20a:	f04f 0b00 	mov.w	fp, #0
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	6822      	ldr	r2, [r4, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d03d      	beq.n	800c292 <_scanf_i+0x15e>
 800c216:	6831      	ldr	r1, [r6, #0]
 800c218:	6960      	ldr	r0, [r4, #20]
 800c21a:	f891 c000 	ldrb.w	ip, [r1]
 800c21e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c222:	2800      	cmp	r0, #0
 800c224:	d035      	beq.n	800c292 <_scanf_i+0x15e>
 800c226:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c22a:	d124      	bne.n	800c276 <_scanf_i+0x142>
 800c22c:	0510      	lsls	r0, r2, #20
 800c22e:	d522      	bpl.n	800c276 <_scanf_i+0x142>
 800c230:	f10b 0b01 	add.w	fp, fp, #1
 800c234:	f1b9 0f00 	cmp.w	r9, #0
 800c238:	d003      	beq.n	800c242 <_scanf_i+0x10e>
 800c23a:	3301      	adds	r3, #1
 800c23c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c240:	60a3      	str	r3, [r4, #8]
 800c242:	6873      	ldr	r3, [r6, #4]
 800c244:	3b01      	subs	r3, #1
 800c246:	2b00      	cmp	r3, #0
 800c248:	6073      	str	r3, [r6, #4]
 800c24a:	dd1b      	ble.n	800c284 <_scanf_i+0x150>
 800c24c:	6833      	ldr	r3, [r6, #0]
 800c24e:	3301      	adds	r3, #1
 800c250:	6033      	str	r3, [r6, #0]
 800c252:	68a3      	ldr	r3, [r4, #8]
 800c254:	3b01      	subs	r3, #1
 800c256:	60a3      	str	r3, [r4, #8]
 800c258:	e7d9      	b.n	800c20e <_scanf_i+0xda>
 800c25a:	f1bb 0f02 	cmp.w	fp, #2
 800c25e:	d1ae      	bne.n	800c1be <_scanf_i+0x8a>
 800c260:	6822      	ldr	r2, [r4, #0]
 800c262:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c266:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c26a:	d1bf      	bne.n	800c1ec <_scanf_i+0xb8>
 800c26c:	2110      	movs	r1, #16
 800c26e:	6061      	str	r1, [r4, #4]
 800c270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c274:	e7a2      	b.n	800c1bc <_scanf_i+0x88>
 800c276:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c27a:	6022      	str	r2, [r4, #0]
 800c27c:	780b      	ldrb	r3, [r1, #0]
 800c27e:	f805 3b01 	strb.w	r3, [r5], #1
 800c282:	e7de      	b.n	800c242 <_scanf_i+0x10e>
 800c284:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c288:	4631      	mov	r1, r6
 800c28a:	4650      	mov	r0, sl
 800c28c:	4798      	blx	r3
 800c28e:	2800      	cmp	r0, #0
 800c290:	d0df      	beq.n	800c252 <_scanf_i+0x11e>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	05d9      	lsls	r1, r3, #23
 800c296:	d50d      	bpl.n	800c2b4 <_scanf_i+0x180>
 800c298:	42bd      	cmp	r5, r7
 800c29a:	d909      	bls.n	800c2b0 <_scanf_i+0x17c>
 800c29c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2a4:	4632      	mov	r2, r6
 800c2a6:	4650      	mov	r0, sl
 800c2a8:	4798      	blx	r3
 800c2aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2ae:	464d      	mov	r5, r9
 800c2b0:	42bd      	cmp	r5, r7
 800c2b2:	d028      	beq.n	800c306 <_scanf_i+0x1d2>
 800c2b4:	6822      	ldr	r2, [r4, #0]
 800c2b6:	f012 0210 	ands.w	r2, r2, #16
 800c2ba:	d113      	bne.n	800c2e4 <_scanf_i+0x1b0>
 800c2bc:	702a      	strb	r2, [r5, #0]
 800c2be:	6863      	ldr	r3, [r4, #4]
 800c2c0:	9e01      	ldr	r6, [sp, #4]
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	4650      	mov	r0, sl
 800c2c6:	47b0      	blx	r6
 800c2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2cc:	6821      	ldr	r1, [r4, #0]
 800c2ce:	1d1a      	adds	r2, r3, #4
 800c2d0:	f8c8 2000 	str.w	r2, [r8]
 800c2d4:	f011 0f20 	tst.w	r1, #32
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	d00f      	beq.n	800c2fc <_scanf_i+0x1c8>
 800c2dc:	6018      	str	r0, [r3, #0]
 800c2de:	68e3      	ldr	r3, [r4, #12]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	60e3      	str	r3, [r4, #12]
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	1bed      	subs	r5, r5, r7
 800c2e8:	445d      	add	r5, fp
 800c2ea:	442b      	add	r3, r5
 800c2ec:	6123      	str	r3, [r4, #16]
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	b007      	add	sp, #28
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	f04f 0b00 	mov.w	fp, #0
 800c2fa:	e7ca      	b.n	800c292 <_scanf_i+0x15e>
 800c2fc:	07ca      	lsls	r2, r1, #31
 800c2fe:	bf4c      	ite	mi
 800c300:	8018      	strhmi	r0, [r3, #0]
 800c302:	6018      	strpl	r0, [r3, #0]
 800c304:	e7eb      	b.n	800c2de <_scanf_i+0x1aa>
 800c306:	2001      	movs	r0, #1
 800c308:	e7f2      	b.n	800c2f0 <_scanf_i+0x1bc>
 800c30a:	bf00      	nop
 800c30c:	0800cd40 	.word	0x0800cd40
 800c310:	08008a09 	.word	0x08008a09
 800c314:	0800ba1d 	.word	0x0800ba1d
 800c318:	0800e449 	.word	0x0800e449

0800c31c <__sflush_r>:
 800c31c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c324:	0716      	lsls	r6, r2, #28
 800c326:	4605      	mov	r5, r0
 800c328:	460c      	mov	r4, r1
 800c32a:	d454      	bmi.n	800c3d6 <__sflush_r+0xba>
 800c32c:	684b      	ldr	r3, [r1, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dc02      	bgt.n	800c338 <__sflush_r+0x1c>
 800c332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c334:	2b00      	cmp	r3, #0
 800c336:	dd48      	ble.n	800c3ca <__sflush_r+0xae>
 800c338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c33a:	2e00      	cmp	r6, #0
 800c33c:	d045      	beq.n	800c3ca <__sflush_r+0xae>
 800c33e:	2300      	movs	r3, #0
 800c340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c344:	682f      	ldr	r7, [r5, #0]
 800c346:	6a21      	ldr	r1, [r4, #32]
 800c348:	602b      	str	r3, [r5, #0]
 800c34a:	d030      	beq.n	800c3ae <__sflush_r+0x92>
 800c34c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	0759      	lsls	r1, r3, #29
 800c352:	d505      	bpl.n	800c360 <__sflush_r+0x44>
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	1ad2      	subs	r2, r2, r3
 800c358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c35a:	b10b      	cbz	r3, 800c360 <__sflush_r+0x44>
 800c35c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c35e:	1ad2      	subs	r2, r2, r3
 800c360:	2300      	movs	r3, #0
 800c362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c364:	6a21      	ldr	r1, [r4, #32]
 800c366:	4628      	mov	r0, r5
 800c368:	47b0      	blx	r6
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	d106      	bne.n	800c37e <__sflush_r+0x62>
 800c370:	6829      	ldr	r1, [r5, #0]
 800c372:	291d      	cmp	r1, #29
 800c374:	d82b      	bhi.n	800c3ce <__sflush_r+0xb2>
 800c376:	4a2a      	ldr	r2, [pc, #168]	@ (800c420 <__sflush_r+0x104>)
 800c378:	410a      	asrs	r2, r1
 800c37a:	07d6      	lsls	r6, r2, #31
 800c37c:	d427      	bmi.n	800c3ce <__sflush_r+0xb2>
 800c37e:	2200      	movs	r2, #0
 800c380:	6062      	str	r2, [r4, #4]
 800c382:	04d9      	lsls	r1, r3, #19
 800c384:	6922      	ldr	r2, [r4, #16]
 800c386:	6022      	str	r2, [r4, #0]
 800c388:	d504      	bpl.n	800c394 <__sflush_r+0x78>
 800c38a:	1c42      	adds	r2, r0, #1
 800c38c:	d101      	bne.n	800c392 <__sflush_r+0x76>
 800c38e:	682b      	ldr	r3, [r5, #0]
 800c390:	b903      	cbnz	r3, 800c394 <__sflush_r+0x78>
 800c392:	6560      	str	r0, [r4, #84]	@ 0x54
 800c394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c396:	602f      	str	r7, [r5, #0]
 800c398:	b1b9      	cbz	r1, 800c3ca <__sflush_r+0xae>
 800c39a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	d002      	beq.n	800c3a8 <__sflush_r+0x8c>
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7fe fa84 	bl	800a8b0 <_free_r>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3ac:	e00d      	b.n	800c3ca <__sflush_r+0xae>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	47b0      	blx	r6
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	1c50      	adds	r0, r2, #1
 800c3b8:	d1c9      	bne.n	800c34e <__sflush_r+0x32>
 800c3ba:	682b      	ldr	r3, [r5, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d0c6      	beq.n	800c34e <__sflush_r+0x32>
 800c3c0:	2b1d      	cmp	r3, #29
 800c3c2:	d001      	beq.n	800c3c8 <__sflush_r+0xac>
 800c3c4:	2b16      	cmp	r3, #22
 800c3c6:	d11e      	bne.n	800c406 <__sflush_r+0xea>
 800c3c8:	602f      	str	r7, [r5, #0]
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	e022      	b.n	800c414 <__sflush_r+0xf8>
 800c3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3d2:	b21b      	sxth	r3, r3
 800c3d4:	e01b      	b.n	800c40e <__sflush_r+0xf2>
 800c3d6:	690f      	ldr	r7, [r1, #16]
 800c3d8:	2f00      	cmp	r7, #0
 800c3da:	d0f6      	beq.n	800c3ca <__sflush_r+0xae>
 800c3dc:	0793      	lsls	r3, r2, #30
 800c3de:	680e      	ldr	r6, [r1, #0]
 800c3e0:	bf08      	it	eq
 800c3e2:	694b      	ldreq	r3, [r1, #20]
 800c3e4:	600f      	str	r7, [r1, #0]
 800c3e6:	bf18      	it	ne
 800c3e8:	2300      	movne	r3, #0
 800c3ea:	eba6 0807 	sub.w	r8, r6, r7
 800c3ee:	608b      	str	r3, [r1, #8]
 800c3f0:	f1b8 0f00 	cmp.w	r8, #0
 800c3f4:	dde9      	ble.n	800c3ca <__sflush_r+0xae>
 800c3f6:	6a21      	ldr	r1, [r4, #32]
 800c3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3fa:	4643      	mov	r3, r8
 800c3fc:	463a      	mov	r2, r7
 800c3fe:	4628      	mov	r0, r5
 800c400:	47b0      	blx	r6
 800c402:	2800      	cmp	r0, #0
 800c404:	dc08      	bgt.n	800c418 <__sflush_r+0xfc>
 800c406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c418:	4407      	add	r7, r0
 800c41a:	eba8 0800 	sub.w	r8, r8, r0
 800c41e:	e7e7      	b.n	800c3f0 <__sflush_r+0xd4>
 800c420:	dfbffffe 	.word	0xdfbffffe

0800c424 <_fflush_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	690b      	ldr	r3, [r1, #16]
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b913      	cbnz	r3, 800c434 <_fflush_r+0x10>
 800c42e:	2500      	movs	r5, #0
 800c430:	4628      	mov	r0, r5
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	b118      	cbz	r0, 800c43e <_fflush_r+0x1a>
 800c436:	6a03      	ldr	r3, [r0, #32]
 800c438:	b90b      	cbnz	r3, 800c43e <_fflush_r+0x1a>
 800c43a:	f7fd f9df 	bl	80097fc <__sinit>
 800c43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0f3      	beq.n	800c42e <_fflush_r+0xa>
 800c446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c448:	07d0      	lsls	r0, r2, #31
 800c44a:	d404      	bmi.n	800c456 <_fflush_r+0x32>
 800c44c:	0599      	lsls	r1, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_fflush_r+0x32>
 800c450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c452:	f7f7 f9dc 	bl	800380e <__retarget_lock_acquire_recursive>
 800c456:	4628      	mov	r0, r5
 800c458:	4621      	mov	r1, r4
 800c45a:	f7ff ff5f 	bl	800c31c <__sflush_r>
 800c45e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c460:	07da      	lsls	r2, r3, #31
 800c462:	4605      	mov	r5, r0
 800c464:	d4e4      	bmi.n	800c430 <_fflush_r+0xc>
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	059b      	lsls	r3, r3, #22
 800c46a:	d4e1      	bmi.n	800c430 <_fflush_r+0xc>
 800c46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c46e:	f7f7 f9da 	bl	8003826 <__retarget_lock_release_recursive>
 800c472:	e7dd      	b.n	800c430 <_fflush_r+0xc>

0800c474 <__sccl>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	780b      	ldrb	r3, [r1, #0]
 800c478:	4604      	mov	r4, r0
 800c47a:	2b5e      	cmp	r3, #94	@ 0x5e
 800c47c:	bf0b      	itete	eq
 800c47e:	784b      	ldrbeq	r3, [r1, #1]
 800c480:	1c4a      	addne	r2, r1, #1
 800c482:	1c8a      	addeq	r2, r1, #2
 800c484:	2100      	movne	r1, #0
 800c486:	bf08      	it	eq
 800c488:	2101      	moveq	r1, #1
 800c48a:	3801      	subs	r0, #1
 800c48c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c490:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c494:	42a8      	cmp	r0, r5
 800c496:	d1fb      	bne.n	800c490 <__sccl+0x1c>
 800c498:	b90b      	cbnz	r3, 800c49e <__sccl+0x2a>
 800c49a:	1e50      	subs	r0, r2, #1
 800c49c:	bd70      	pop	{r4, r5, r6, pc}
 800c49e:	f081 0101 	eor.w	r1, r1, #1
 800c4a2:	54e1      	strb	r1, [r4, r3]
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c4ac:	2d2d      	cmp	r5, #45	@ 0x2d
 800c4ae:	d005      	beq.n	800c4bc <__sccl+0x48>
 800c4b0:	2d5d      	cmp	r5, #93	@ 0x5d
 800c4b2:	d016      	beq.n	800c4e2 <__sccl+0x6e>
 800c4b4:	2d00      	cmp	r5, #0
 800c4b6:	d0f1      	beq.n	800c49c <__sccl+0x28>
 800c4b8:	462b      	mov	r3, r5
 800c4ba:	e7f2      	b.n	800c4a2 <__sccl+0x2e>
 800c4bc:	7846      	ldrb	r6, [r0, #1]
 800c4be:	2e5d      	cmp	r6, #93	@ 0x5d
 800c4c0:	d0fa      	beq.n	800c4b8 <__sccl+0x44>
 800c4c2:	42b3      	cmp	r3, r6
 800c4c4:	dcf8      	bgt.n	800c4b8 <__sccl+0x44>
 800c4c6:	3002      	adds	r0, #2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	3201      	adds	r2, #1
 800c4cc:	4296      	cmp	r6, r2
 800c4ce:	54a1      	strb	r1, [r4, r2]
 800c4d0:	dcfb      	bgt.n	800c4ca <__sccl+0x56>
 800c4d2:	1af2      	subs	r2, r6, r3
 800c4d4:	3a01      	subs	r2, #1
 800c4d6:	1c5d      	adds	r5, r3, #1
 800c4d8:	42b3      	cmp	r3, r6
 800c4da:	bfa8      	it	ge
 800c4dc:	2200      	movge	r2, #0
 800c4de:	18ab      	adds	r3, r5, r2
 800c4e0:	e7e1      	b.n	800c4a6 <__sccl+0x32>
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	e7da      	b.n	800c49c <__sccl+0x28>

0800c4e6 <__submore>:
 800c4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c4ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d11d      	bne.n	800c532 <__submore+0x4c>
 800c4f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c4fa:	f7fb fb75 	bl	8007be8 <_malloc_r>
 800c4fe:	b918      	cbnz	r0, 800c508 <__submore+0x22>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c50c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c50e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c512:	6360      	str	r0, [r4, #52]	@ 0x34
 800c514:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c518:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c51c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c520:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c524:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c528:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c52c:	6020      	str	r0, [r4, #0]
 800c52e:	2000      	movs	r0, #0
 800c530:	e7e8      	b.n	800c504 <__submore+0x1e>
 800c532:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c534:	0077      	lsls	r7, r6, #1
 800c536:	463a      	mov	r2, r7
 800c538:	f000 f85c 	bl	800c5f4 <_realloc_r>
 800c53c:	4605      	mov	r5, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	d0de      	beq.n	800c500 <__submore+0x1a>
 800c542:	eb00 0806 	add.w	r8, r0, r6
 800c546:	4601      	mov	r1, r0
 800c548:	4632      	mov	r2, r6
 800c54a:	4640      	mov	r0, r8
 800c54c:	f7fd fb44 	bl	8009bd8 <memcpy>
 800c550:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c554:	f8c4 8000 	str.w	r8, [r4]
 800c558:	e7e9      	b.n	800c52e <__submore+0x48>

0800c55a <memmove>:
 800c55a:	4288      	cmp	r0, r1
 800c55c:	b510      	push	{r4, lr}
 800c55e:	eb01 0402 	add.w	r4, r1, r2
 800c562:	d902      	bls.n	800c56a <memmove+0x10>
 800c564:	4284      	cmp	r4, r0
 800c566:	4623      	mov	r3, r4
 800c568:	d807      	bhi.n	800c57a <memmove+0x20>
 800c56a:	1e43      	subs	r3, r0, #1
 800c56c:	42a1      	cmp	r1, r4
 800c56e:	d008      	beq.n	800c582 <memmove+0x28>
 800c570:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c574:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c578:	e7f8      	b.n	800c56c <memmove+0x12>
 800c57a:	4402      	add	r2, r0
 800c57c:	4601      	mov	r1, r0
 800c57e:	428a      	cmp	r2, r1
 800c580:	d100      	bne.n	800c584 <memmove+0x2a>
 800c582:	bd10      	pop	{r4, pc}
 800c584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c588:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c58c:	e7f7      	b.n	800c57e <memmove+0x24>
	...

0800c590 <__assert_func>:
 800c590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c592:	4614      	mov	r4, r2
 800c594:	461a      	mov	r2, r3
 800c596:	4b09      	ldr	r3, [pc, #36]	@ (800c5bc <__assert_func+0x2c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4605      	mov	r5, r0
 800c59c:	68d8      	ldr	r0, [r3, #12]
 800c59e:	b954      	cbnz	r4, 800c5b6 <__assert_func+0x26>
 800c5a0:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <__assert_func+0x30>)
 800c5a2:	461c      	mov	r4, r3
 800c5a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a8:	9100      	str	r1, [sp, #0]
 800c5aa:	462b      	mov	r3, r5
 800c5ac:	4905      	ldr	r1, [pc, #20]	@ (800c5c4 <__assert_func+0x34>)
 800c5ae:	f000 f84f 	bl	800c650 <fiprintf>
 800c5b2:	f000 f85f 	bl	800c674 <abort>
 800c5b6:	4b04      	ldr	r3, [pc, #16]	@ (800c5c8 <__assert_func+0x38>)
 800c5b8:	e7f4      	b.n	800c5a4 <__assert_func+0x14>
 800c5ba:	bf00      	nop
 800c5bc:	2000018c 	.word	0x2000018c
 800c5c0:	0800db6b 	.word	0x0800db6b
 800c5c4:	0800e461 	.word	0x0800e461
 800c5c8:	0800e454 	.word	0x0800e454

0800c5cc <_calloc_r>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	fba1 5402 	umull	r5, r4, r1, r2
 800c5d2:	b93c      	cbnz	r4, 800c5e4 <_calloc_r+0x18>
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	f7fb fb07 	bl	8007be8 <_malloc_r>
 800c5da:	4606      	mov	r6, r0
 800c5dc:	b928      	cbnz	r0, 800c5ea <_calloc_r+0x1e>
 800c5de:	2600      	movs	r6, #0
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	220c      	movs	r2, #12
 800c5e6:	6002      	str	r2, [r0, #0]
 800c5e8:	e7f9      	b.n	800c5de <_calloc_r+0x12>
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7fd fa37 	bl	8009a60 <memset>
 800c5f2:	e7f5      	b.n	800c5e0 <_calloc_r+0x14>

0800c5f4 <_realloc_r>:
 800c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	4615      	mov	r5, r2
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	b921      	cbnz	r1, 800c60a <_realloc_r+0x16>
 800c600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	4611      	mov	r1, r2
 800c606:	f7fb baef 	b.w	8007be8 <_malloc_r>
 800c60a:	b92a      	cbnz	r2, 800c618 <_realloc_r+0x24>
 800c60c:	f7fe f950 	bl	800a8b0 <_free_r>
 800c610:	2400      	movs	r4, #0
 800c612:	4620      	mov	r0, r4
 800c614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c618:	f000 f833 	bl	800c682 <_malloc_usable_size_r>
 800c61c:	4285      	cmp	r5, r0
 800c61e:	4606      	mov	r6, r0
 800c620:	d802      	bhi.n	800c628 <_realloc_r+0x34>
 800c622:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c626:	d8f4      	bhi.n	800c612 <_realloc_r+0x1e>
 800c628:	4629      	mov	r1, r5
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7fb fadc 	bl	8007be8 <_malloc_r>
 800c630:	4607      	mov	r7, r0
 800c632:	2800      	cmp	r0, #0
 800c634:	d0ec      	beq.n	800c610 <_realloc_r+0x1c>
 800c636:	42b5      	cmp	r5, r6
 800c638:	462a      	mov	r2, r5
 800c63a:	4621      	mov	r1, r4
 800c63c:	bf28      	it	cs
 800c63e:	4632      	movcs	r2, r6
 800c640:	f7fd faca 	bl	8009bd8 <memcpy>
 800c644:	4621      	mov	r1, r4
 800c646:	4640      	mov	r0, r8
 800c648:	f7fe f932 	bl	800a8b0 <_free_r>
 800c64c:	463c      	mov	r4, r7
 800c64e:	e7e0      	b.n	800c612 <_realloc_r+0x1e>

0800c650 <fiprintf>:
 800c650:	b40e      	push	{r1, r2, r3}
 800c652:	b503      	push	{r0, r1, lr}
 800c654:	4601      	mov	r1, r0
 800c656:	ab03      	add	r3, sp, #12
 800c658:	4805      	ldr	r0, [pc, #20]	@ (800c670 <fiprintf+0x20>)
 800c65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65e:	6800      	ldr	r0, [r0, #0]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f000 f83f 	bl	800c6e4 <_vfiprintf_r>
 800c666:	b002      	add	sp, #8
 800c668:	f85d eb04 	ldr.w	lr, [sp], #4
 800c66c:	b003      	add	sp, #12
 800c66e:	4770      	bx	lr
 800c670:	2000018c 	.word	0x2000018c

0800c674 <abort>:
 800c674:	b508      	push	{r3, lr}
 800c676:	2006      	movs	r0, #6
 800c678:	f000 fa08 	bl	800ca8c <raise>
 800c67c:	2001      	movs	r0, #1
 800c67e:	f7f6 ffd5 	bl	800362c <_exit>

0800c682 <_malloc_usable_size_r>:
 800c682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c686:	1f18      	subs	r0, r3, #4
 800c688:	2b00      	cmp	r3, #0
 800c68a:	bfbc      	itt	lt
 800c68c:	580b      	ldrlt	r3, [r1, r0]
 800c68e:	18c0      	addlt	r0, r0, r3
 800c690:	4770      	bx	lr

0800c692 <__sfputc_r>:
 800c692:	6893      	ldr	r3, [r2, #8]
 800c694:	3b01      	subs	r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	b410      	push	{r4}
 800c69a:	6093      	str	r3, [r2, #8]
 800c69c:	da08      	bge.n	800c6b0 <__sfputc_r+0x1e>
 800c69e:	6994      	ldr	r4, [r2, #24]
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	db01      	blt.n	800c6a8 <__sfputc_r+0x16>
 800c6a4:	290a      	cmp	r1, #10
 800c6a6:	d103      	bne.n	800c6b0 <__sfputc_r+0x1e>
 800c6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ac:	f000 b932 	b.w	800c914 <__swbuf_r>
 800c6b0:	6813      	ldr	r3, [r2, #0]
 800c6b2:	1c58      	adds	r0, r3, #1
 800c6b4:	6010      	str	r0, [r2, #0]
 800c6b6:	7019      	strb	r1, [r3, #0]
 800c6b8:	4608      	mov	r0, r1
 800c6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <__sfputs_r>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	4614      	mov	r4, r2
 800c6c8:	18d5      	adds	r5, r2, r3
 800c6ca:	42ac      	cmp	r4, r5
 800c6cc:	d101      	bne.n	800c6d2 <__sfputs_r+0x12>
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	e007      	b.n	800c6e2 <__sfputs_r+0x22>
 800c6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d6:	463a      	mov	r2, r7
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff ffda 	bl	800c692 <__sfputc_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d1f3      	bne.n	800c6ca <__sfputs_r+0xa>
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6e4 <_vfiprintf_r>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	460d      	mov	r5, r1
 800c6ea:	b09d      	sub	sp, #116	@ 0x74
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	4698      	mov	r8, r3
 800c6f0:	4606      	mov	r6, r0
 800c6f2:	b118      	cbz	r0, 800c6fc <_vfiprintf_r+0x18>
 800c6f4:	6a03      	ldr	r3, [r0, #32]
 800c6f6:	b90b      	cbnz	r3, 800c6fc <_vfiprintf_r+0x18>
 800c6f8:	f7fd f880 	bl	80097fc <__sinit>
 800c6fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6fe:	07d9      	lsls	r1, r3, #31
 800c700:	d405      	bmi.n	800c70e <_vfiprintf_r+0x2a>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	059a      	lsls	r2, r3, #22
 800c706:	d402      	bmi.n	800c70e <_vfiprintf_r+0x2a>
 800c708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c70a:	f7f7 f880 	bl	800380e <__retarget_lock_acquire_recursive>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	071b      	lsls	r3, r3, #28
 800c712:	d501      	bpl.n	800c718 <_vfiprintf_r+0x34>
 800c714:	692b      	ldr	r3, [r5, #16]
 800c716:	b99b      	cbnz	r3, 800c740 <_vfiprintf_r+0x5c>
 800c718:	4629      	mov	r1, r5
 800c71a:	4630      	mov	r0, r6
 800c71c:	f000 f938 	bl	800c990 <__swsetup_r>
 800c720:	b170      	cbz	r0, 800c740 <_vfiprintf_r+0x5c>
 800c722:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c724:	07dc      	lsls	r4, r3, #31
 800c726:	d504      	bpl.n	800c732 <_vfiprintf_r+0x4e>
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	b01d      	add	sp, #116	@ 0x74
 800c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	0598      	lsls	r0, r3, #22
 800c736:	d4f7      	bmi.n	800c728 <_vfiprintf_r+0x44>
 800c738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c73a:	f7f7 f874 	bl	8003826 <__retarget_lock_release_recursive>
 800c73e:	e7f3      	b.n	800c728 <_vfiprintf_r+0x44>
 800c740:	2300      	movs	r3, #0
 800c742:	9309      	str	r3, [sp, #36]	@ 0x24
 800c744:	2320      	movs	r3, #32
 800c746:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c74a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c74e:	2330      	movs	r3, #48	@ 0x30
 800c750:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c900 <_vfiprintf_r+0x21c>
 800c754:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c758:	f04f 0901 	mov.w	r9, #1
 800c75c:	4623      	mov	r3, r4
 800c75e:	469a      	mov	sl, r3
 800c760:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c764:	b10a      	cbz	r2, 800c76a <_vfiprintf_r+0x86>
 800c766:	2a25      	cmp	r2, #37	@ 0x25
 800c768:	d1f9      	bne.n	800c75e <_vfiprintf_r+0x7a>
 800c76a:	ebba 0b04 	subs.w	fp, sl, r4
 800c76e:	d00b      	beq.n	800c788 <_vfiprintf_r+0xa4>
 800c770:	465b      	mov	r3, fp
 800c772:	4622      	mov	r2, r4
 800c774:	4629      	mov	r1, r5
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ffa2 	bl	800c6c0 <__sfputs_r>
 800c77c:	3001      	adds	r0, #1
 800c77e:	f000 80a7 	beq.w	800c8d0 <_vfiprintf_r+0x1ec>
 800c782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c784:	445a      	add	r2, fp
 800c786:	9209      	str	r2, [sp, #36]	@ 0x24
 800c788:	f89a 3000 	ldrb.w	r3, [sl]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 809f 	beq.w	800c8d0 <_vfiprintf_r+0x1ec>
 800c792:	2300      	movs	r3, #0
 800c794:	f04f 32ff 	mov.w	r2, #4294967295
 800c798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c79c:	f10a 0a01 	add.w	sl, sl, #1
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	9307      	str	r3, [sp, #28]
 800c7a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7aa:	4654      	mov	r4, sl
 800c7ac:	2205      	movs	r2, #5
 800c7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b2:	4853      	ldr	r0, [pc, #332]	@ (800c900 <_vfiprintf_r+0x21c>)
 800c7b4:	f7f3 fd0c 	bl	80001d0 <memchr>
 800c7b8:	9a04      	ldr	r2, [sp, #16]
 800c7ba:	b9d8      	cbnz	r0, 800c7f4 <_vfiprintf_r+0x110>
 800c7bc:	06d1      	lsls	r1, r2, #27
 800c7be:	bf44      	itt	mi
 800c7c0:	2320      	movmi	r3, #32
 800c7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c6:	0713      	lsls	r3, r2, #28
 800c7c8:	bf44      	itt	mi
 800c7ca:	232b      	movmi	r3, #43	@ 0x2b
 800c7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7d6:	d015      	beq.n	800c804 <_vfiprintf_r+0x120>
 800c7d8:	9a07      	ldr	r2, [sp, #28]
 800c7da:	4654      	mov	r4, sl
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f04f 0c0a 	mov.w	ip, #10
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e8:	3b30      	subs	r3, #48	@ 0x30
 800c7ea:	2b09      	cmp	r3, #9
 800c7ec:	d94b      	bls.n	800c886 <_vfiprintf_r+0x1a2>
 800c7ee:	b1b0      	cbz	r0, 800c81e <_vfiprintf_r+0x13a>
 800c7f0:	9207      	str	r2, [sp, #28]
 800c7f2:	e014      	b.n	800c81e <_vfiprintf_r+0x13a>
 800c7f4:	eba0 0308 	sub.w	r3, r0, r8
 800c7f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	46a2      	mov	sl, r4
 800c802:	e7d2      	b.n	800c7aa <_vfiprintf_r+0xc6>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	1d19      	adds	r1, r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	9103      	str	r1, [sp, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bfbb      	ittet	lt
 800c810:	425b      	neglt	r3, r3
 800c812:	f042 0202 	orrlt.w	r2, r2, #2
 800c816:	9307      	strge	r3, [sp, #28]
 800c818:	9307      	strlt	r3, [sp, #28]
 800c81a:	bfb8      	it	lt
 800c81c:	9204      	strlt	r2, [sp, #16]
 800c81e:	7823      	ldrb	r3, [r4, #0]
 800c820:	2b2e      	cmp	r3, #46	@ 0x2e
 800c822:	d10a      	bne.n	800c83a <_vfiprintf_r+0x156>
 800c824:	7863      	ldrb	r3, [r4, #1]
 800c826:	2b2a      	cmp	r3, #42	@ 0x2a
 800c828:	d132      	bne.n	800c890 <_vfiprintf_r+0x1ac>
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	1d1a      	adds	r2, r3, #4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	9203      	str	r2, [sp, #12]
 800c832:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c836:	3402      	adds	r4, #2
 800c838:	9305      	str	r3, [sp, #20]
 800c83a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c910 <_vfiprintf_r+0x22c>
 800c83e:	7821      	ldrb	r1, [r4, #0]
 800c840:	2203      	movs	r2, #3
 800c842:	4650      	mov	r0, sl
 800c844:	f7f3 fcc4 	bl	80001d0 <memchr>
 800c848:	b138      	cbz	r0, 800c85a <_vfiprintf_r+0x176>
 800c84a:	9b04      	ldr	r3, [sp, #16]
 800c84c:	eba0 000a 	sub.w	r0, r0, sl
 800c850:	2240      	movs	r2, #64	@ 0x40
 800c852:	4082      	lsls	r2, r0
 800c854:	4313      	orrs	r3, r2
 800c856:	3401      	adds	r4, #1
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85e:	4829      	ldr	r0, [pc, #164]	@ (800c904 <_vfiprintf_r+0x220>)
 800c860:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c864:	2206      	movs	r2, #6
 800c866:	f7f3 fcb3 	bl	80001d0 <memchr>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d03f      	beq.n	800c8ee <_vfiprintf_r+0x20a>
 800c86e:	4b26      	ldr	r3, [pc, #152]	@ (800c908 <_vfiprintf_r+0x224>)
 800c870:	bb1b      	cbnz	r3, 800c8ba <_vfiprintf_r+0x1d6>
 800c872:	9b03      	ldr	r3, [sp, #12]
 800c874:	3307      	adds	r3, #7
 800c876:	f023 0307 	bic.w	r3, r3, #7
 800c87a:	3308      	adds	r3, #8
 800c87c:	9303      	str	r3, [sp, #12]
 800c87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c880:	443b      	add	r3, r7
 800c882:	9309      	str	r3, [sp, #36]	@ 0x24
 800c884:	e76a      	b.n	800c75c <_vfiprintf_r+0x78>
 800c886:	fb0c 3202 	mla	r2, ip, r2, r3
 800c88a:	460c      	mov	r4, r1
 800c88c:	2001      	movs	r0, #1
 800c88e:	e7a8      	b.n	800c7e2 <_vfiprintf_r+0xfe>
 800c890:	2300      	movs	r3, #0
 800c892:	3401      	adds	r4, #1
 800c894:	9305      	str	r3, [sp, #20]
 800c896:	4619      	mov	r1, r3
 800c898:	f04f 0c0a 	mov.w	ip, #10
 800c89c:	4620      	mov	r0, r4
 800c89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8a2:	3a30      	subs	r2, #48	@ 0x30
 800c8a4:	2a09      	cmp	r2, #9
 800c8a6:	d903      	bls.n	800c8b0 <_vfiprintf_r+0x1cc>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d0c6      	beq.n	800c83a <_vfiprintf_r+0x156>
 800c8ac:	9105      	str	r1, [sp, #20]
 800c8ae:	e7c4      	b.n	800c83a <_vfiprintf_r+0x156>
 800c8b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e7f0      	b.n	800c89c <_vfiprintf_r+0x1b8>
 800c8ba:	ab03      	add	r3, sp, #12
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	462a      	mov	r2, r5
 800c8c0:	4b12      	ldr	r3, [pc, #72]	@ (800c90c <_vfiprintf_r+0x228>)
 800c8c2:	a904      	add	r1, sp, #16
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7fc f941 	bl	8008b4c <_printf_float>
 800c8ca:	4607      	mov	r7, r0
 800c8cc:	1c78      	adds	r0, r7, #1
 800c8ce:	d1d6      	bne.n	800c87e <_vfiprintf_r+0x19a>
 800c8d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8d2:	07d9      	lsls	r1, r3, #31
 800c8d4:	d405      	bmi.n	800c8e2 <_vfiprintf_r+0x1fe>
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	059a      	lsls	r2, r3, #22
 800c8da:	d402      	bmi.n	800c8e2 <_vfiprintf_r+0x1fe>
 800c8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8de:	f7f6 ffa2 	bl	8003826 <__retarget_lock_release_recursive>
 800c8e2:	89ab      	ldrh	r3, [r5, #12]
 800c8e4:	065b      	lsls	r3, r3, #25
 800c8e6:	f53f af1f 	bmi.w	800c728 <_vfiprintf_r+0x44>
 800c8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8ec:	e71e      	b.n	800c72c <_vfiprintf_r+0x48>
 800c8ee:	ab03      	add	r3, sp, #12
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	462a      	mov	r2, r5
 800c8f4:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <_vfiprintf_r+0x228>)
 800c8f6:	a904      	add	r1, sp, #16
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7fc fbbf 	bl	800907c <_printf_i>
 800c8fe:	e7e4      	b.n	800c8ca <_vfiprintf_r+0x1e6>
 800c900:	0800e428 	.word	0x0800e428
 800c904:	0800e432 	.word	0x0800e432
 800c908:	08008b4d 	.word	0x08008b4d
 800c90c:	0800c6c1 	.word	0x0800c6c1
 800c910:	0800e42e 	.word	0x0800e42e

0800c914 <__swbuf_r>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	460e      	mov	r6, r1
 800c918:	4614      	mov	r4, r2
 800c91a:	4605      	mov	r5, r0
 800c91c:	b118      	cbz	r0, 800c926 <__swbuf_r+0x12>
 800c91e:	6a03      	ldr	r3, [r0, #32]
 800c920:	b90b      	cbnz	r3, 800c926 <__swbuf_r+0x12>
 800c922:	f7fc ff6b 	bl	80097fc <__sinit>
 800c926:	69a3      	ldr	r3, [r4, #24]
 800c928:	60a3      	str	r3, [r4, #8]
 800c92a:	89a3      	ldrh	r3, [r4, #12]
 800c92c:	071a      	lsls	r2, r3, #28
 800c92e:	d501      	bpl.n	800c934 <__swbuf_r+0x20>
 800c930:	6923      	ldr	r3, [r4, #16]
 800c932:	b943      	cbnz	r3, 800c946 <__swbuf_r+0x32>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f82a 	bl	800c990 <__swsetup_r>
 800c93c:	b118      	cbz	r0, 800c946 <__swbuf_r+0x32>
 800c93e:	f04f 37ff 	mov.w	r7, #4294967295
 800c942:	4638      	mov	r0, r7
 800c944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	1a98      	subs	r0, r3, r2
 800c94c:	6963      	ldr	r3, [r4, #20]
 800c94e:	b2f6      	uxtb	r6, r6
 800c950:	4283      	cmp	r3, r0
 800c952:	4637      	mov	r7, r6
 800c954:	dc05      	bgt.n	800c962 <__swbuf_r+0x4e>
 800c956:	4621      	mov	r1, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	f7ff fd63 	bl	800c424 <_fflush_r>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d1ed      	bne.n	800c93e <__swbuf_r+0x2a>
 800c962:	68a3      	ldr	r3, [r4, #8]
 800c964:	3b01      	subs	r3, #1
 800c966:	60a3      	str	r3, [r4, #8]
 800c968:	6823      	ldr	r3, [r4, #0]
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	6022      	str	r2, [r4, #0]
 800c96e:	701e      	strb	r6, [r3, #0]
 800c970:	6962      	ldr	r2, [r4, #20]
 800c972:	1c43      	adds	r3, r0, #1
 800c974:	429a      	cmp	r2, r3
 800c976:	d004      	beq.n	800c982 <__swbuf_r+0x6e>
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	07db      	lsls	r3, r3, #31
 800c97c:	d5e1      	bpl.n	800c942 <__swbuf_r+0x2e>
 800c97e:	2e0a      	cmp	r6, #10
 800c980:	d1df      	bne.n	800c942 <__swbuf_r+0x2e>
 800c982:	4621      	mov	r1, r4
 800c984:	4628      	mov	r0, r5
 800c986:	f7ff fd4d 	bl	800c424 <_fflush_r>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0d9      	beq.n	800c942 <__swbuf_r+0x2e>
 800c98e:	e7d6      	b.n	800c93e <__swbuf_r+0x2a>

0800c990 <__swsetup_r>:
 800c990:	b538      	push	{r3, r4, r5, lr}
 800c992:	4b29      	ldr	r3, [pc, #164]	@ (800ca38 <__swsetup_r+0xa8>)
 800c994:	4605      	mov	r5, r0
 800c996:	6818      	ldr	r0, [r3, #0]
 800c998:	460c      	mov	r4, r1
 800c99a:	b118      	cbz	r0, 800c9a4 <__swsetup_r+0x14>
 800c99c:	6a03      	ldr	r3, [r0, #32]
 800c99e:	b90b      	cbnz	r3, 800c9a4 <__swsetup_r+0x14>
 800c9a0:	f7fc ff2c 	bl	80097fc <__sinit>
 800c9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a8:	0719      	lsls	r1, r3, #28
 800c9aa:	d422      	bmi.n	800c9f2 <__swsetup_r+0x62>
 800c9ac:	06da      	lsls	r2, r3, #27
 800c9ae:	d407      	bmi.n	800c9c0 <__swsetup_r+0x30>
 800c9b0:	2209      	movs	r2, #9
 800c9b2:	602a      	str	r2, [r5, #0]
 800c9b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	e033      	b.n	800ca28 <__swsetup_r+0x98>
 800c9c0:	0758      	lsls	r0, r3, #29
 800c9c2:	d512      	bpl.n	800c9ea <__swsetup_r+0x5a>
 800c9c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9c6:	b141      	cbz	r1, 800c9da <__swsetup_r+0x4a>
 800c9c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	d002      	beq.n	800c9d6 <__swsetup_r+0x46>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f7fd ff6d 	bl	800a8b0 <_free_r>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	6063      	str	r3, [r4, #4]
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	f043 0308 	orr.w	r3, r3, #8
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	6923      	ldr	r3, [r4, #16]
 800c9f4:	b94b      	cbnz	r3, 800ca0a <__swsetup_r+0x7a>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca00:	d003      	beq.n	800ca0a <__swsetup_r+0x7a>
 800ca02:	4621      	mov	r1, r4
 800ca04:	4628      	mov	r0, r5
 800ca06:	f000 f883 	bl	800cb10 <__smakebuf_r>
 800ca0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0e:	f013 0201 	ands.w	r2, r3, #1
 800ca12:	d00a      	beq.n	800ca2a <__swsetup_r+0x9a>
 800ca14:	2200      	movs	r2, #0
 800ca16:	60a2      	str	r2, [r4, #8]
 800ca18:	6962      	ldr	r2, [r4, #20]
 800ca1a:	4252      	negs	r2, r2
 800ca1c:	61a2      	str	r2, [r4, #24]
 800ca1e:	6922      	ldr	r2, [r4, #16]
 800ca20:	b942      	cbnz	r2, 800ca34 <__swsetup_r+0xa4>
 800ca22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca26:	d1c5      	bne.n	800c9b4 <__swsetup_r+0x24>
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	0799      	lsls	r1, r3, #30
 800ca2c:	bf58      	it	pl
 800ca2e:	6962      	ldrpl	r2, [r4, #20]
 800ca30:	60a2      	str	r2, [r4, #8]
 800ca32:	e7f4      	b.n	800ca1e <__swsetup_r+0x8e>
 800ca34:	2000      	movs	r0, #0
 800ca36:	e7f7      	b.n	800ca28 <__swsetup_r+0x98>
 800ca38:	2000018c 	.word	0x2000018c

0800ca3c <_raise_r>:
 800ca3c:	291f      	cmp	r1, #31
 800ca3e:	b538      	push	{r3, r4, r5, lr}
 800ca40:	4605      	mov	r5, r0
 800ca42:	460c      	mov	r4, r1
 800ca44:	d904      	bls.n	800ca50 <_raise_r+0x14>
 800ca46:	2316      	movs	r3, #22
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca52:	b112      	cbz	r2, 800ca5a <_raise_r+0x1e>
 800ca54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca58:	b94b      	cbnz	r3, 800ca6e <_raise_r+0x32>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f000 f830 	bl	800cac0 <_getpid_r>
 800ca60:	4622      	mov	r2, r4
 800ca62:	4601      	mov	r1, r0
 800ca64:	4628      	mov	r0, r5
 800ca66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca6a:	f000 b817 	b.w	800ca9c <_kill_r>
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d00a      	beq.n	800ca88 <_raise_r+0x4c>
 800ca72:	1c59      	adds	r1, r3, #1
 800ca74:	d103      	bne.n	800ca7e <_raise_r+0x42>
 800ca76:	2316      	movs	r3, #22
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	e7e7      	b.n	800ca4e <_raise_r+0x12>
 800ca7e:	2100      	movs	r1, #0
 800ca80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca84:	4620      	mov	r0, r4
 800ca86:	4798      	blx	r3
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7e0      	b.n	800ca4e <_raise_r+0x12>

0800ca8c <raise>:
 800ca8c:	4b02      	ldr	r3, [pc, #8]	@ (800ca98 <raise+0xc>)
 800ca8e:	4601      	mov	r1, r0
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	f7ff bfd3 	b.w	800ca3c <_raise_r>
 800ca96:	bf00      	nop
 800ca98:	2000018c 	.word	0x2000018c

0800ca9c <_kill_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d07      	ldr	r5, [pc, #28]	@ (800cabc <_kill_r+0x20>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	4611      	mov	r1, r2
 800caa8:	602b      	str	r3, [r5, #0]
 800caaa:	f7f6 fdb7 	bl	800361c <_kill>
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	d102      	bne.n	800cab8 <_kill_r+0x1c>
 800cab2:	682b      	ldr	r3, [r5, #0]
 800cab4:	b103      	cbz	r3, 800cab8 <_kill_r+0x1c>
 800cab6:	6023      	str	r3, [r4, #0]
 800cab8:	bd38      	pop	{r3, r4, r5, pc}
 800caba:	bf00      	nop
 800cabc:	20008c78 	.word	0x20008c78

0800cac0 <_getpid_r>:
 800cac0:	f7f6 bdaa 	b.w	8003618 <_getpid>

0800cac4 <__swhatbuf_r>:
 800cac4:	b570      	push	{r4, r5, r6, lr}
 800cac6:	460c      	mov	r4, r1
 800cac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cacc:	2900      	cmp	r1, #0
 800cace:	b096      	sub	sp, #88	@ 0x58
 800cad0:	4615      	mov	r5, r2
 800cad2:	461e      	mov	r6, r3
 800cad4:	da0d      	bge.n	800caf2 <__swhatbuf_r+0x2e>
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cadc:	f04f 0100 	mov.w	r1, #0
 800cae0:	bf14      	ite	ne
 800cae2:	2340      	movne	r3, #64	@ 0x40
 800cae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cae8:	2000      	movs	r0, #0
 800caea:	6031      	str	r1, [r6, #0]
 800caec:	602b      	str	r3, [r5, #0]
 800caee:	b016      	add	sp, #88	@ 0x58
 800caf0:	bd70      	pop	{r4, r5, r6, pc}
 800caf2:	466a      	mov	r2, sp
 800caf4:	f000 f848 	bl	800cb88 <_fstat_r>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	dbec      	blt.n	800cad6 <__swhatbuf_r+0x12>
 800cafc:	9901      	ldr	r1, [sp, #4]
 800cafe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb06:	4259      	negs	r1, r3
 800cb08:	4159      	adcs	r1, r3
 800cb0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb0e:	e7eb      	b.n	800cae8 <__swhatbuf_r+0x24>

0800cb10 <__smakebuf_r>:
 800cb10:	898b      	ldrh	r3, [r1, #12]
 800cb12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb14:	079d      	lsls	r5, r3, #30
 800cb16:	4606      	mov	r6, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	d507      	bpl.n	800cb2c <__smakebuf_r+0x1c>
 800cb1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	2301      	movs	r3, #1
 800cb26:	6163      	str	r3, [r4, #20]
 800cb28:	b003      	add	sp, #12
 800cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb2c:	ab01      	add	r3, sp, #4
 800cb2e:	466a      	mov	r2, sp
 800cb30:	f7ff ffc8 	bl	800cac4 <__swhatbuf_r>
 800cb34:	9f00      	ldr	r7, [sp, #0]
 800cb36:	4605      	mov	r5, r0
 800cb38:	4639      	mov	r1, r7
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f7fb f854 	bl	8007be8 <_malloc_r>
 800cb40:	b948      	cbnz	r0, 800cb56 <__smakebuf_r+0x46>
 800cb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb46:	059a      	lsls	r2, r3, #22
 800cb48:	d4ee      	bmi.n	800cb28 <__smakebuf_r+0x18>
 800cb4a:	f023 0303 	bic.w	r3, r3, #3
 800cb4e:	f043 0302 	orr.w	r3, r3, #2
 800cb52:	81a3      	strh	r3, [r4, #12]
 800cb54:	e7e2      	b.n	800cb1c <__smakebuf_r+0xc>
 800cb56:	89a3      	ldrh	r3, [r4, #12]
 800cb58:	6020      	str	r0, [r4, #0]
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb66:	b15b      	cbz	r3, 800cb80 <__smakebuf_r+0x70>
 800cb68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f000 f81d 	bl	800cbac <_isatty_r>
 800cb72:	b128      	cbz	r0, 800cb80 <__smakebuf_r+0x70>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f023 0303 	bic.w	r3, r3, #3
 800cb7a:	f043 0301 	orr.w	r3, r3, #1
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	431d      	orrs	r5, r3
 800cb84:	81a5      	strh	r5, [r4, #12]
 800cb86:	e7cf      	b.n	800cb28 <__smakebuf_r+0x18>

0800cb88 <_fstat_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d07      	ldr	r5, [pc, #28]	@ (800cba8 <_fstat_r+0x20>)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4604      	mov	r4, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	4611      	mov	r1, r2
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f7f6 fd6e 	bl	8003676 <_fstat>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	d102      	bne.n	800cba4 <_fstat_r+0x1c>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	b103      	cbz	r3, 800cba4 <_fstat_r+0x1c>
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	bd38      	pop	{r3, r4, r5, pc}
 800cba6:	bf00      	nop
 800cba8:	20008c78 	.word	0x20008c78

0800cbac <_isatty_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d06      	ldr	r5, [pc, #24]	@ (800cbc8 <_isatty_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	602b      	str	r3, [r5, #0]
 800cbb8:	f7f6 fd62 	bl	8003680 <_isatty>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_isatty_r+0x1a>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_isatty_r+0x1a>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20008c78 	.word	0x20008c78

0800cbcc <round>:
 800cbcc:	ec51 0b10 	vmov	r0, r1, d0
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cbd6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800cbda:	2a13      	cmp	r2, #19
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4605      	mov	r5, r0
 800cbe0:	dc1b      	bgt.n	800cc1a <round+0x4e>
 800cbe2:	2a00      	cmp	r2, #0
 800cbe4:	da0b      	bge.n	800cbfe <round+0x32>
 800cbe6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800cbea:	3201      	adds	r2, #1
 800cbec:	bf04      	itt	eq
 800cbee:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800cbf2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	e015      	b.n	800cc2a <round+0x5e>
 800cbfe:	4c15      	ldr	r4, [pc, #84]	@ (800cc54 <round+0x88>)
 800cc00:	4114      	asrs	r4, r2
 800cc02:	ea04 0601 	and.w	r6, r4, r1
 800cc06:	4306      	orrs	r6, r0
 800cc08:	d00f      	beq.n	800cc2a <round+0x5e>
 800cc0a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800cc0e:	fa41 f202 	asr.w	r2, r1, r2
 800cc12:	4413      	add	r3, r2
 800cc14:	ea23 0304 	bic.w	r3, r3, r4
 800cc18:	e7ed      	b.n	800cbf6 <round+0x2a>
 800cc1a:	2a33      	cmp	r2, #51	@ 0x33
 800cc1c:	dd08      	ble.n	800cc30 <round+0x64>
 800cc1e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800cc22:	d102      	bne.n	800cc2a <round+0x5e>
 800cc24:	4602      	mov	r2, r0
 800cc26:	f7f3 fb31 	bl	800028c <__adddf3>
 800cc2a:	ec41 0b10 	vmov	d0, r0, r1
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800cc34:	f04f 34ff 	mov.w	r4, #4294967295
 800cc38:	40f4      	lsrs	r4, r6
 800cc3a:	4204      	tst	r4, r0
 800cc3c:	d0f5      	beq.n	800cc2a <round+0x5e>
 800cc3e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800cc42:	2201      	movs	r2, #1
 800cc44:	408a      	lsls	r2, r1
 800cc46:	1952      	adds	r2, r2, r5
 800cc48:	bf28      	it	cs
 800cc4a:	3301      	addcs	r3, #1
 800cc4c:	ea22 0204 	bic.w	r2, r2, r4
 800cc50:	e7d2      	b.n	800cbf8 <round+0x2c>
 800cc52:	bf00      	nop
 800cc54:	000fffff 	.word	0x000fffff

0800cc58 <_init>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr

0800cc64 <_fini>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr
