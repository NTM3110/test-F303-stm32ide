
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001958  0800e768  0800e768  0000f768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100c0  080100c0  00012248  2**0
                  CONTENTS
  4 .ARM          00000008  080100c0  080100c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100c8  080100c8  00012248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100c8  080100c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080100cc  080100cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  080100d0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012248  2**0
                  CONTENTS
 10 .bss          000094b4  20000248  20000248  00012248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200096fc  200096fc  00012248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003003d  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006170  00000000  00000000  000422b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f2e0  00000000  00000000  00048425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b00  00000000  00000000  00057708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b40  00000000  00000000  00059208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006a98  00000000  00000000  0005ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002db22  00000000  00000000  000617e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5b6d  00000000  00000000  0008f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00164e6f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006610  00000000  00000000  00164eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0016b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e74c 	.word	0x0800e74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800e74c 	.word	0x0800e74c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d16:	4e0d      	ldr	r6, [pc, #52]	@ (8000d4c <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <sendRMCDataToFlash+0x3c>)
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d20:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <sendRMCDataToFlash+0x40>)
 8000d24:	f006 f968 	bl	8006ff8 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	f006 fb9f 	bl	8007470 <osMailAlloc>
 8000d32:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000d34:	b148      	cbz	r0, 8000d4a <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000d36:	4629      	mov	r1, r5
 8000d38:	2258      	movs	r2, #88	@ 0x58
 8000d3a:	f00a fc60 	bl	800b5fe <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d3e:	6830      	ldr	r0, [r6, #0]
 8000d40:	4621      	mov	r1, r4
    }
}
 8000d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d46:	f006 bb98 	b.w	800747a <osMailPut>
}
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	200002c8 	.word	0x200002c8
 8000d50:	0800e898 	.word	0x0800e898
 8000d54:	20001248 	.word	0x20001248

08000d58 <getRMC>:


void getRMC(){
 8000d58:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000d5a:	4c3a      	ldr	r4, [pc, #232]	@ (8000e44 <getRMC+0xec>)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <getRMC+0xf0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000d68:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d6c:	2924      	cmp	r1, #36	@ 0x24
 8000d6e:	4615      	mov	r5, r2
 8000d70:	f102 0201 	add.w	r2, r2, #1
 8000d74:	d160      	bne.n	8000e38 <getRMC+0xe0>
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	2947      	cmp	r1, #71	@ 0x47
 8000d7a:	d15d      	bne.n	8000e38 <getRMC+0xe0>
 8000d7c:	7859      	ldrb	r1, [r3, #1]
 8000d7e:	294e      	cmp	r1, #78	@ 0x4e
 8000d80:	d15a      	bne.n	8000e38 <getRMC+0xe0>
 8000d82:	7899      	ldrb	r1, [r3, #2]
 8000d84:	2952      	cmp	r1, #82	@ 0x52
 8000d86:	d157      	bne.n	8000e38 <getRMC+0xe0>
 8000d88:	78d9      	ldrb	r1, [r3, #3]
 8000d8a:	294d      	cmp	r1, #77	@ 0x4d
 8000d8c:	d154      	bne.n	8000e38 <getRMC+0xe0>
 8000d8e:	7919      	ldrb	r1, [r3, #4]
 8000d90:	2943      	cmp	r1, #67	@ 0x43
 8000d92:	d151      	bne.n	8000e38 <getRMC+0xe0>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000d94:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000d98:	3101      	adds	r1, #1
 8000d9a:	29c8      	cmp	r1, #200	@ 0xc8
 8000d9c:	d94c      	bls.n	8000e38 <getRMC+0xe0>
			isRMCExist = 1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <getRMC+0xf4>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da0:	492b      	ldr	r1, [pc, #172]	@ (8000e50 <getRMC+0xf8>)
 8000da2:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <getRMC+0xfc>)
			isRMCExist = 1;
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	220c      	movs	r2, #12
 8000dae:	f006 f923 	bl	8006ff8 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000db2:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <getRMC+0x100>)
 8000db4:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000db6:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000db8:	7859      	ldrb	r1, [r3, #1]
 8000dba:	290a      	cmp	r1, #10
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	d135      	bne.n	8000e2c <getRMC+0xd4>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <getRMC+0x100>)
	}
	if(isRMCExist == 1){
 8000dc2:	4d22      	ldr	r5, [pc, #136]	@ (8000e4c <getRMC+0xf4>)
		rmc_str[i] = 0;
 8000dc4:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4418      	add	r0, r3
 8000dcc:	f009 fdbe 	bl	800a94c <memset>
	if(isRMCExist == 1){
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <getRMC+0x92>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		if(rmc.isValid == 1){
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <getRMC+0x104>)
 8000dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d103      	bne.n	8000de6 <getRMC+0x8e>
			sendRMCDataToFlash(&rmc);
 8000dde:	f7ff ff99 	bl	8000d14 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
			getRMC_time = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	602b      	str	r3, [r5, #0]
	}
	if(getRMC_time >= 500){
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000df0:	db0f      	blt.n	8000e12 <getRMC+0xba>
		GPS_DISABLE();
 8000df2:	2201      	movs	r2, #1
 8000df4:	2104      	movs	r1, #4
 8000df6:	481a      	ldr	r0, [pc, #104]	@ (8000e60 <getRMC+0x108>)
 8000df8:	f004 f9a6 	bl	8005148 <HAL_GPIO_WritePin>
		osDelay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f006 fa6a 	bl	80072d8 <osDelay>
		GPS_ENABLE();
 8000e04:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <getRMC+0x108>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f004 f99d 	bl	8005148 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <getRMC+0x10c>)
 8000e16:	f003 f9d9 	bl	80041cc <Debug_printf>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
}
 8000e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <getRMC+0x100>)
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <getRMC+0xfc>)
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	f006 b8e6 	b.w	8006ff8 <HAL_UART_Transmit>
				rmc_str[idx] = gpsSentence[i];
 8000e2c:	7829      	ldrb	r1, [r5, #0]
 8000e2e:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000e32:	3301      	adds	r3, #1
 8000e34:	3001      	adds	r0, #1
				i++;
 8000e36:	e7bf      	b.n	8000db8 <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e38:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000e3c:	d194      	bne.n	8000d68 <getRMC+0x10>
	int length = 0;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e7be      	b.n	8000dc0 <getRMC+0x68>
 8000e42:	bf00      	nop
 8000e44:	20000264 	.word	0x20000264
 8000e48:	200002cc 	.word	0x200002cc
 8000e4c:	20000268 	.word	0x20000268
 8000e50:	0800e8ae 	.word	0x0800e8ae
 8000e54:	20001248 	.word	0x20001248
 8000e58:	20000adc 	.word	0x20000adc
 8000e5c:	20000270 	.word	0x20000270
 8000e60:	48000800 	.word	0x48000800
 8000e64:	0800e8bb 	.word	0x0800e8bb

08000e68 <StartGPS>:


void StartGPS(void const * argument)
{
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e6a:	4935      	ldr	r1, [pc, #212]	@ (8000f40 <StartGPS+0xd8>)
 8000e6c:	4835      	ldr	r0, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
		//rmc.lcation.latitude -= 0.000001;
//		rmc.tim.sec += 2;
//		rmc.lcation.latitude = route[count].latitude;
//		rmc.lcation.longitude = route[count].longitude;
//		count++;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000e6e:	4d35      	ldr	r5, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e74:	220c      	movs	r2, #12
 8000e76:	f006 f8bf 	bl	8006ff8 <HAL_UART_Transmit>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000e7a:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <StartGPS+0xe0>)
 8000e7c:	4933      	ldr	r1, [pc, #204]	@ (8000f4c <StartGPS+0xe4>)
 8000e7e:	4834      	ldr	r0, [pc, #208]	@ (8000f50 <StartGPS+0xe8>)
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	f001 ff52 	bl	8002d2c <RingBufferDmaU8_initUSARTRx>
	rmc.tim.hour = 0;
 8000e88:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <StartGPS+0xec>)
	rmc.speed = 22.4;
 8000e8a:	4a33      	ldr	r2, [pc, #204]	@ (8000f58 <StartGPS+0xf0>)
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.lcation.latitude = 20.998022;
 8000e8e:	a128      	add	r1, pc, #160	@ (adr r1, 8000f30 <StartGPS+0xc8>)
 8000e90:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.course = 30.5;
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <StartGPS+0xf4>)
 8000e96:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000e98:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000e9c:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000e9e:	a126      	add	r1, pc, #152	@ (adr r1, 8000f38 <StartGPS+0xd0>)
 8000ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000ea8:	2245      	movs	r2, #69	@ 0x45
	rmc.tim.hour = 0;
 8000eaa:	2400      	movs	r4, #0
	rmc.lcation.EW = 'E';
 8000eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
 8000eb0:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000eb2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.min = 0;
 8000eb6:	e9c3 4400 	strd	r4, r4, [r3]
	rmc.date.Mon = 0;
 8000eba:	e9c3 4404 	strd	r4, r4, [r3, #16]
	rmc.tim.sec = 0;
 8000ebe:	609c      	str	r4, [r3, #8]
	rmc.isValid = 1;
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Yr = 0;
 8000ec2:	619c      	str	r4, [r3, #24]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ec4:	220b      	movs	r2, #11
 8000ec6:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ec8:	4621      	mov	r1, r4
 8000eca:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ecc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000ed0:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ed4:	f006 faa1 	bl	800741a <osMailCreate>
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <StartGPS+0xf8>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000eda:	4621      	mov	r1, r4
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000edc:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <StartGPS+0xe0>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee4:	4c1f      	ldr	r4, [pc, #124]	@ (8000f64 <StartGPS+0xfc>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee6:	f009 fd31 	bl	800a94c <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f004 f929 	bl	8005148 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000ef6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000efa:	f003 f9d7 	bl	80042ac <HAL_Delay>
		getRMC();
 8000efe:	f7ff ff2b 	bl	8000d58 <getRMC>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	220d      	movs	r2, #13
 8000f08:	4917      	ldr	r1, [pc, #92]	@ (8000f68 <StartGPS+0x100>)
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f006 f874 	bl	8006ff8 <HAL_UART_Transmit>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n ");
 8000f10:	4628      	mov	r0, r5
 8000f12:	4916      	ldr	r1, [pc, #88]	@ (8000f6c <StartGPS+0x104>)
 8000f14:	f003 f94a 	bl	80041ac <uart_transmit_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f18:	4620      	mov	r0, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f20:	f004 f912 	bl	8005148 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000f24:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f28:	f003 f9c0 	bl	80042ac <HAL_Delay>
	while(1)
 8000f2c:	e7dd      	b.n	8000eea <StartGPS+0x82>
 8000f2e:	bf00      	nop
 8000f30:	5eaab042 	.word	0x5eaab042
 8000f34:	4034ff7e 	.word	0x4034ff7e
 8000f38:	48451330 	.word	0x48451330
 8000f3c:	405a72dd 	.word	0x405a72dd
 8000f40:	0800e8d4 	.word	0x0800e8d4
 8000f44:	20001248 	.word	0x20001248
 8000f48:	200002cc 	.word	0x200002cc
 8000f4c:	200011c0 	.word	0x200011c0
 8000f50:	20000acc 	.word	0x20000acc
 8000f54:	20000270 	.word	0x20000270
 8000f58:	41b33333 	.word	0x41b33333
 8000f5c:	41f40000 	.word	0x41f40000
 8000f60:	200002c8 	.word	0x200002c8
 8000f64:	48000800 	.word	0x48000800
 8000f68:	0800e8e1 	.word	0x0800e8e1
 8000f6c:	0800e8ef 	.word	0x0800e8ef

08000f70 <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};

uint8_t flashBufferMailReceived[128];

JT808_TerminalRegistration create_terminal_registration(){
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000f74:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000f76:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000f78:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000f7a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000f7e:	4622      	mov	r2, r4
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	4626      	mov	r6, r4
 8000f86:	c603      	stmia	r6!, {r0, r1}
 8000f88:	3308      	adds	r3, #8
 8000f8a:	42bb      	cmp	r3, r7
 8000f8c:	4634      	mov	r4, r6
 8000f8e:	d1f7      	bne.n	8000f80 <create_terminal_registration+0x10>
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000f94:	4613      	mov	r3, r2
 8000f96:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000f98:	462a      	mov	r2, r5
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	cc03      	ldmia	r4!, {r0, r1}
 8000f9e:	42b4      	cmp	r4, r6
 8000fa0:	6010      	str	r0, [r2, #0]
 8000fa2:	6051      	str	r1, [r2, #4]
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	f102 0208 	add.w	r2, r2, #8
 8000faa:	d1f6      	bne.n	8000f9a <create_terminal_registration+0x2a>
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	6010      	str	r0, [r2, #0]
}
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	b011      	add	sp, #68	@ 0x44
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800e768 	.word	0x0800e768

08000fbc <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000fbc:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000fbe:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000fc0:	b093      	sub	sp, #76	@ 0x4c
 8000fc2:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000fc4:	462a      	mov	r2, r5
 8000fc6:	4906      	ldr	r1, [pc, #24]	@ (8000fe0 <create_location_info_report+0x24>)
 8000fc8:	a801      	add	r0, sp, #4
 8000fca:	f00a fb18 	bl	800b5fe <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000fce:	462a      	mov	r2, r5
 8000fd0:	a901      	add	r1, sp, #4
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f00a fb13 	bl	800b5fe <memcpy>
}
 8000fd8:	4620      	mov	r0, r4
 8000fda:	b013      	add	sp, #76	@ 0x4c
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800e7a4 	.word	0x0800e7a4

08000fe4 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fe6:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe8:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000fec:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fee:	bf0c      	ite	eq
 8000ff0:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ff4:	f043 0304 	orrne.w	r3, r3, #4
 8000ff8:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000ffa:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000ffe:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001000:	bf0c      	ite	eq
 8001002:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001006:	f043 0308 	orrne.w	r3, r3, #8
 800100a:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000be8 	.word	0x20000be8

08001014 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001018:	f7ff f93a 	bl	8000290 <strlen>
 800101c:	4621      	mov	r1, r4
 800101e:	b282      	uxth	r2, r0
}
 8001020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <send_AT_command+0x1c>)
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	f005 bfe5 	b.w	8006ff8 <HAL_UART_Transmit>
 800102e:	bf00      	nop
 8001030:	20001138 	.word	0x20001138

08001034 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001034:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001038:	f005 fd71 	bl	8006b1e <HAL_UART_Abort>
	if(ret != HAL_OK)
 800103c:	b108      	cbz	r0, 8001042 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800103e:	f002 f9e0 	bl	8003402 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8001042:	2032      	movs	r0, #50	@ 0x32
 8001044:	f006 f948 	bl	80072d8 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <SIM_UART_ReInitializeRxDMA+0x2c>)
 800104e:	4903      	ldr	r1, [pc, #12]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <SIM_UART_ReInitializeRxDMA+0x30>)
 8001052:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001056:	f001 be69 	b.w	8002d2c <RingBufferDmaU8_initUSARTRx>
 800105a:	bf00      	nop
 800105c:	20001138 	.word	0x20001138
 8001060:	20000c80 	.word	0x20000c80
 8001064:	20000c70 	.word	0x20000c70

08001068 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001068:	f7ff b912 	b.w	8000290 <strlen>

0800106c <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 800106c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800106e:	4c10      	ldr	r4, [pc, #64]	@ (80010b0 <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001072:	4d11      	ldr	r5, [pc, #68]	@ (80010b8 <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 8001074:	b0a1      	sub	sp, #132	@ 0x84
 8001076:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	4668      	mov	r0, sp
 800107c:	f009 fb6a 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8001080:	4669      	mov	r1, sp
 8001082:	4620      	mov	r0, r4
 8001084:	f003 f892 	bl	80041ac <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff ffed 	bl	8001068 <find_length>
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	b282      	uxth	r2, r0
 8001094:	4629      	mov	r1, r5
 8001096:	4620      	mov	r0, r4
 8001098:	f005 ffae 	bl	8006ff8 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 800109c:	4907      	ldr	r1, [pc, #28]	@ (80010bc <receive_response+0x50>)
 800109e:	4620      	mov	r0, r4
 80010a0:	f003 f884 	bl	80041ac <uart_transmit_string>
	osDelay(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a8:	f006 f916 	bl	80072d8 <osDelay>
}
 80010ac:	b021      	add	sp, #132	@ 0x84
 80010ae:	bd30      	pop	{r4, r5, pc}
 80010b0:	20001248 	.word	0x20001248
 80010b4:	0800e8f3 	.word	0x0800e8f3
 80010b8:	20000c80 	.word	0x20000c80
 80010bc:	0800f638 	.word	0x0800f638

080010c0 <init_SIM_module>:

void init_SIM_module() {
 80010c0:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80010c2:	4c0b      	ldr	r4, [pc, #44]	@ (80010f0 <init_SIM_module+0x30>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	4611      	mov	r1, r2
 80010c8:	4620      	mov	r0, r4
 80010ca:	f004 f83d 	bl	8005148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2102      	movs	r1, #2
 80010d2:	4620      	mov	r0, r4
 80010d4:	f004 f838 	bl	8005148 <HAL_GPIO_WritePin>
	osDelay(2000);
 80010d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010dc:	f006 f8fc 	bl	80072d8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e0:	4620      	mov	r0, r4
 80010e2:	2201      	movs	r2, #1
}
 80010e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e8:	2102      	movs	r1, #2
 80010ea:	f004 b82d 	b.w	8005148 <HAL_GPIO_WritePin>
 80010ee:	bf00      	nop
 80010f0:	48000800 	.word	0x48000800

080010f4 <reboot_SIM_module>:

void reboot_SIM_module(){
 80010f4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010f6:	4c11      	ldr	r4, [pc, #68]	@ (800113c <reboot_SIM_module+0x48>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	4620      	mov	r0, r4
 80010fe:	f004 f823 	bl	8005148 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001102:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001106:	f006 f8e7 	bl	80072d8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2102      	movs	r1, #2
 800110e:	4620      	mov	r0, r4
 8001110:	f004 f81a 	bl	8005148 <HAL_GPIO_WritePin>
	osDelay(10000);
 8001114:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001118:	f006 f8de 	bl	80072d8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	4620      	mov	r0, r4
 8001122:	f004 f811 	bl	8005148 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001126:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800112a:	f006 f8d5 	bl	80072d8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800112e:	4620      	mov	r0, r4
 8001130:	2201      	movs	r2, #1
}
 8001132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001136:	2102      	movs	r1, #2
 8001138:	f004 b806 	b.w	8005148 <HAL_GPIO_WritePin>
 800113c:	48000800 	.word	0x48000800

08001140 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001140:	220a      	movs	r2, #10
 8001142:	fb90 f3f2 	sdiv	r3, r0, r2
 8001146:	fb02 0013 	mls	r0, r2, r3, r0
}
 800114a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800114e:	4770      	bx	lr

08001150 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001150:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001152:	4d43      	ldr	r5, [pc, #268]	@ (8001260 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001154:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001156:	69a8      	ldr	r0, [r5, #24]
 8001158:	f7ff fff2 	bl	8001140 <convert_dec_to_hex_value>
 800115c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001160:	6968      	ldr	r0, [r5, #20]
 8001162:	f7ff ffed 	bl	8001140 <convert_dec_to_hex_value>
 8001166:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800116a:	6928      	ldr	r0, [r5, #16]
 800116c:	f7ff ffe8 	bl	8001140 <convert_dec_to_hex_value>
 8001170:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001174:	6828      	ldr	r0, [r5, #0]
 8001176:	f7ff ffe3 	bl	8001140 <convert_dec_to_hex_value>
 800117a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800117e:	6868      	ldr	r0, [r5, #4]
 8001180:	f7ff ffde 	bl	8001140 <convert_dec_to_hex_value>
 8001184:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001188:	68a8      	ldr	r0, [r5, #8]
 800118a:	f7ff ffd9 	bl	8001140 <convert_dec_to_hex_value>
 800118e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001192:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001196:	a32e      	add	r3, pc, #184	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa3c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011a0:	ec41 0b10 	vmov	d0, r0, r1
 80011a4:	f00d fa8c 	bl	800e6c0 <round>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f7ff fce4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b0:	a327      	add	r3, pc, #156	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011b6:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011c0:	ec41 0b10 	vmov	d0, r0, r1
 80011c4:	f00d fa7c 	bl	800e6c0 <round>
 80011c8:	ec51 0b10 	vmov	r0, r1, d0
 80011cc:	f7ff fcd4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011d0:	0e33      	lsrs	r3, r6, #24
 80011d2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011d4:	1433      	asrs	r3, r6, #16
 80011d6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011d8:	1233      	asrs	r3, r6, #8
 80011da:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011dc:	0e03      	lsrs	r3, r0, #24
 80011de:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011e0:	1403      	asrs	r3, r0, #16
 80011e2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011e4:	1203      	asrs	r3, r0, #8
 80011e6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011e8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011ea:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011ec:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011f0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9b4 	bl	8000568 <__aeabi_f2d>
 8001200:	a315      	add	r3, pc, #84	@ (adr r3, 8001258 <save_rmc_to_location_info+0x108>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa07 	bl	8000618 <__aeabi_dmul>
 800120a:	ec41 0b10 	vmov	d0, r0, r1
 800120e:	f00d fa57 	bl	800e6c0 <round>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	f7ff fcaf 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800121a:	1203      	asrs	r3, r0, #8
 800121c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800121e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001222:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	ec41 0b10 	vmov	d0, r0, r1
 800122c:	f00d fa48 	bl	800e6c0 <round>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	f7ff fca0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001238:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800123a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800123e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001242:	f104 0011 	add.w	r0, r4, #17
}
 8001246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800124a:	f7ff becb 	b.w	8000fe4 <set_status_bit>
 800124e:	bf00      	nop
 8001250:	00000000 	.word	0x00000000
 8001254:	412e8480 	.word	0x412e8480
 8001258:	c083126f 	.word	0xc083126f
 800125c:	3ffda1ca 	.word	0x3ffda1ca
 8001260:	20000be8 	.word	0x20000be8

08001264 <first_check_SIM>:
    return 1;
}

//AT
int first_check_SIM()
{
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001266:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800126a:	2100      	movs	r1, #0
 800126c:	482f      	ldr	r0, [pc, #188]	@ (800132c <first_check_SIM+0xc8>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800126e:	4d30      	ldr	r5, [pc, #192]	@ (8001330 <first_check_SIM+0xcc>)
 8001270:	4c2e      	ldr	r4, [pc, #184]	@ (800132c <first_check_SIM+0xc8>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001272:	4e30      	ldr	r6, [pc, #192]	@ (8001334 <first_check_SIM+0xd0>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001274:	f009 fb6a 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001278:	f7ff fedc 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800127c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001280:	2100      	movs	r1, #0
 8001282:	482a      	ldr	r0, [pc, #168]	@ (800132c <first_check_SIM+0xc8>)
 8001284:	f009 fb62 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001288:	f7ff fed4 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f009 fbac 	bl	800a9ec <strstr>
 8001294:	2800      	cmp	r0, #0
 8001296:	d03a      	beq.n	800130e <first_check_SIM+0xaa>
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001298:	4826      	ldr	r0, [pc, #152]	@ (8001334 <first_check_SIM+0xd0>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800129a:	4e27      	ldr	r6, [pc, #156]	@ (8001338 <first_check_SIM+0xd4>)
 800129c:	4d23      	ldr	r5, [pc, #140]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("First check SIM MODULE\n");
 800129e:	4f27      	ldr	r7, [pc, #156]	@ (800133c <first_check_SIM+0xd8>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80012a0:	f7ff fee4 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012a8:	2100      	movs	r1, #0
 80012aa:	4820      	ldr	r0, [pc, #128]	@ (800132c <first_check_SIM+0xc8>)
 80012ac:	f009 fb4e 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012b0:	f7ff fec0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <first_check_SIM+0xdc>)
 80012b6:	f7ff fead 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012ba:	4631      	mov	r1, r6
 80012bc:	4628      	mov	r0, r5
 80012be:	f009 fb95 	bl	800a9ec <strstr>
 80012c2:	4604      	mov	r4, r0
 80012c4:	bb50      	cbnz	r0, 800131c <first_check_SIM+0xb8>
	}
	receive_response("First check SIM MODULE\n");
 80012c6:	481d      	ldr	r0, [pc, #116]	@ (800133c <first_check_SIM+0xd8>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012c8:	4e1b      	ldr	r6, [pc, #108]	@ (8001338 <first_check_SIM+0xd4>)
 80012ca:	4d18      	ldr	r5, [pc, #96]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("Check status of SIM MODULE\n");
 80012cc:	4f1d      	ldr	r7, [pc, #116]	@ (8001344 <first_check_SIM+0xe0>)
	receive_response("First check SIM MODULE\n");
 80012ce:	f7ff fecd 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012d6:	4621      	mov	r1, r4
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <first_check_SIM+0xc8>)
 80012da:	f009 fb37 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012de:	f7ff fea9 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <first_check_SIM+0xe4>)
 80012e4:	f7ff fe96 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012e8:	4631      	mov	r1, r6
 80012ea:	4628      	mov	r0, r5
 80012ec:	f009 fb7e 	bl	800a9ec <strstr>
 80012f0:	4604      	mov	r4, r0
 80012f2:	b9b8      	cbnz	r0, 8001324 <first_check_SIM+0xc0>
	}
	receive_response("Check status of SIM MODULE\n");
 80012f4:	4813      	ldr	r0, [pc, #76]	@ (8001344 <first_check_SIM+0xe0>)
 80012f6:	f7ff feb9 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012fe:	4621      	mov	r1, r4
 8001300:	480a      	ldr	r0, [pc, #40]	@ (800132c <first_check_SIM+0xc8>)
 8001302:	f009 fb23 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001306:	f7ff fe95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 800130a:	2001      	movs	r0, #1
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff feac 	bl	800106c <receive_response>
		osDelay(200);
 8001314:	20c8      	movs	r0, #200	@ 0xc8
 8001316:	f005 ffdf 	bl	80072d8 <osDelay>
 800131a:	e7b7      	b.n	800128c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 800131c:	4638      	mov	r0, r7
 800131e:	f7ff fea5 	bl	800106c <receive_response>
 8001322:	e7ca      	b.n	80012ba <first_check_SIM+0x56>
		receive_response("Check status of SIM MODULE\n");
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff fea1 	bl	800106c <receive_response>
 800132a:	e7dd      	b.n	80012e8 <first_check_SIM+0x84>
 800132c:	20000c80 	.word	0x20000c80
 8001330:	0800e9b9 	.word	0x0800e9b9
 8001334:	0800e995 	.word	0x0800e995
 8001338:	0800e9de 	.word	0x0800e9de
 800133c:	0800e9c6 	.word	0x0800e9c6
 8001340:	0800e9c1 	.word	0x0800e9c1
 8001344:	0800e9eb 	.word	0x0800e9eb
 8001348:	0800e9e1 	.word	0x0800e9e1

0800134c <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800134c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800134e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001350:	4604      	mov	r4, r0
 8001352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001356:	b1cb      	cbz	r3, 800138c <extract_last_12_digits_bcd+0x40>
 8001358:	2b41      	cmp	r3, #65	@ 0x41
 800135a:	d1f9      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800135c:	7803      	ldrb	r3, [r0, #0]
 800135e:	2b54      	cmp	r3, #84	@ 0x54
 8001360:	d1f6      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001362:	7843      	ldrb	r3, [r0, #1]
 8001364:	2b2b      	cmp	r3, #43	@ 0x2b
 8001366:	d1f3      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001368:	7883      	ldrb	r3, [r0, #2]
 800136a:	2b43      	cmp	r3, #67	@ 0x43
 800136c:	d1f0      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800136e:	78c3      	ldrb	r3, [r0, #3]
 8001370:	2b47      	cmp	r3, #71	@ 0x47
 8001372:	d1ed      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001374:	7903      	ldrb	r3, [r0, #4]
 8001376:	2b53      	cmp	r3, #83	@ 0x53
 8001378:	d1ea      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800137a:	7943      	ldrb	r3, [r0, #5]
 800137c:	2b4e      	cmp	r3, #78	@ 0x4e
 800137e:	d1e7      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001380:	7983      	ldrb	r3, [r0, #6]
 8001382:	2b3d      	cmp	r3, #61	@ 0x3d
 8001384:	d1e4      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001386:	79c3      	ldrb	r3, [r0, #7]
 8001388:	2b31      	cmp	r3, #49	@ 0x31
 800138a:	d1e1      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800138c:	4922      	ldr	r1, [pc, #136]	@ (8001418 <extract_last_12_digits_bcd+0xcc>)
 800138e:	4823      	ldr	r0, [pc, #140]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001390:	f002 ff0c 	bl	80041ac <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001394:	4821      	ldr	r0, [pc, #132]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001396:	4621      	mov	r1, r4
 8001398:	f002 ff08 	bl	80041ac <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800139c:	7823      	ldrb	r3, [r4, #0]
 800139e:	b96b      	cbnz	r3, 80013bc <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 80013a0:	491f      	ldr	r1, [pc, #124]	@ (8001420 <extract_last_12_digits_bcd+0xd4>)
 80013a2:	481e      	ldr	r0, [pc, #120]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013a4:	f002 ff02 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 80013a8:	4629      	mov	r1, r5
 80013aa:	481c      	ldr	r0, [pc, #112]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013ac:	f002 fefe 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80013b0:	491c      	ldr	r1, [pc, #112]	@ (8001424 <extract_last_12_digits_bcd+0xd8>)
 80013b2:	481a      	ldr	r0, [pc, #104]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013b4:	f002 fefa 	bl	80041ac <uart_transmit_string>
}
 80013b8:	b004      	add	sp, #16
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 80013bc:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 80013be:	7821      	ldrb	r1, [r4, #0]
 80013c0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80013c4:	4623      	mov	r3, r4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	3401      	adds	r4, #1
 80013ca:	b109      	cbz	r1, 80013d0 <extract_last_12_digits_bcd+0x84>
 80013cc:	2a09      	cmp	r2, #9
 80013ce:	d8f6      	bhi.n	80013be <extract_last_12_digits_bcd+0x72>
 80013d0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80013d2:	4616      	mov	r6, r2
 80013d4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013d8:	3930      	subs	r1, #48	@ 0x30
 80013da:	2909      	cmp	r1, #9
 80013dc:	d9f9      	bls.n	80013d2 <extract_last_12_digits_bcd+0x86>
 80013de:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80013e0:	4911      	ldr	r1, [pc, #68]	@ (8001428 <extract_last_12_digits_bcd+0xdc>)
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013e4:	f002 fee2 	bl	80041ac <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80013e8:	4a10      	ldr	r2, [pc, #64]	@ (800142c <extract_last_12_digits_bcd+0xe0>)
 80013ea:	4623      	mov	r3, r4
 80013ec:	210a      	movs	r1, #10
 80013ee:	a801      	add	r0, sp, #4
 80013f0:	f009 f9b0 	bl	800a754 <sniprintf>
		if (digit_count >= 12) {
 80013f4:	2c0b      	cmp	r4, #11
 80013f6:	d9d3      	bls.n	80013a0 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80013f8:	f1a6 030c 	sub.w	r3, r6, #12
 80013fc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013fe:	7819      	ldrb	r1, [r3, #0]
 8001400:	785a      	ldrb	r2, [r3, #1]
 8001402:	3930      	subs	r1, #48	@ 0x30
 8001404:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 8001406:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001408:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 800140c:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800140e:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 8001412:	d1f4      	bne.n	80013fe <extract_last_12_digits_bcd+0xb2>
 8001414:	e7c4      	b.n	80013a0 <extract_last_12_digits_bcd+0x54>
 8001416:	bf00      	nop
 8001418:	0800ea07 	.word	0x0800ea07
 800141c:	20001248 	.word	0x20001248
 8001420:	0800ea29 	.word	0x0800ea29
 8001424:	0800f66e 	.word	0x0800f66e
 8001428:	0800ea44 	.word	0x0800ea44
 800142c:	0800ee74 	.word	0x0800ee74

08001430 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001432:	488f      	ldr	r0, [pc, #572]	@ (8001670 <check_SIM_ready+0x240>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001434:	4d8f      	ldr	r5, [pc, #572]	@ (8001674 <check_SIM_ready+0x244>)
 8001436:	4c90      	ldr	r4, [pc, #576]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check IMEI-0:\n");
 8001438:	4e90      	ldr	r6, [pc, #576]	@ (800167c <check_SIM_ready+0x24c>)
	send_AT_command(GET_IMEI);
 800143a:	f7ff fdeb 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800143e:	4629      	mov	r1, r5
 8001440:	4620      	mov	r0, r4
 8001442:	f009 fad3 	bl	800a9ec <strstr>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 80ef 	beq.w	800162a <check_SIM_ready+0x1fa>
	}
	receive_response("Check IMEI-0:\n");
 800144c:	488b      	ldr	r0, [pc, #556]	@ (800167c <check_SIM_ready+0x24c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800144e:	4d89      	ldr	r5, [pc, #548]	@ (8001674 <check_SIM_ready+0x244>)
 8001450:	4c89      	ldr	r4, [pc, #548]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001452:	4e8b      	ldr	r6, [pc, #556]	@ (8001680 <check_SIM_ready+0x250>)
	receive_response("Check IMEI-0:\n");
 8001454:	f7ff fe0a 	bl	800106c <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001458:	498a      	ldr	r1, [pc, #552]	@ (8001684 <check_SIM_ready+0x254>)
 800145a:	4887      	ldr	r0, [pc, #540]	@ (8001678 <check_SIM_ready+0x248>)
 800145c:	f7ff ff76 	bl	800134c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001460:	4989      	ldr	r1, [pc, #548]	@ (8001688 <check_SIM_ready+0x258>)
 8001462:	488a      	ldr	r0, [pc, #552]	@ (800168c <check_SIM_ready+0x25c>)
 8001464:	f002 fea2 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 8001468:	4986      	ldr	r1, [pc, #536]	@ (8001684 <check_SIM_ready+0x254>)
 800146a:	4888      	ldr	r0, [pc, #544]	@ (800168c <check_SIM_ready+0x25c>)
 800146c:	f002 fe9e 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001470:	4987      	ldr	r1, [pc, #540]	@ (8001690 <check_SIM_ready+0x260>)
 8001472:	4886      	ldr	r0, [pc, #536]	@ (800168c <check_SIM_ready+0x25c>)
 8001474:	f002 fe9a 	bl	80041ac <uart_transmit_string>
	osDelay(100);
 8001478:	2064      	movs	r0, #100	@ 0x64
 800147a:	f005 ff2d 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800147e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001482:	2100      	movs	r1, #0
 8001484:	487c      	ldr	r0, [pc, #496]	@ (8001678 <check_SIM_ready+0x248>)
 8001486:	f009 fa61 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800148a:	f7ff fdd3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 800148e:	4881      	ldr	r0, [pc, #516]	@ (8001694 <check_SIM_ready+0x264>)
 8001490:	f7ff fdc0 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001494:	4629      	mov	r1, r5
 8001496:	4620      	mov	r0, r4
 8001498:	f009 faa8 	bl	800a9ec <strstr>
 800149c:	2800      	cmp	r0, #0
 800149e:	f000 80c8 	beq.w	8001632 <check_SIM_ready+0x202>
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 80014a2:	4877      	ldr	r0, [pc, #476]	@ (8001680 <check_SIM_ready+0x250>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014a4:	4e73      	ldr	r6, [pc, #460]	@ (8001674 <check_SIM_ready+0x244>)
 80014a6:	4d74      	ldr	r5, [pc, #464]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM\n");
 80014a8:	4f7b      	ldr	r7, [pc, #492]	@ (8001698 <check_SIM_ready+0x268>)
	receive_response("Check MODEL IDENTIFICATION\n");
 80014aa:	f7ff fddf 	bl	800106c <receive_response>
	osDelay(100);
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f005 ff12 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014b4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014b8:	2100      	movs	r1, #0
 80014ba:	486f      	ldr	r0, [pc, #444]	@ (8001678 <check_SIM_ready+0x248>)
 80014bc:	f009 fa46 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014c0:	f7ff fdb8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80014c4:	4875      	ldr	r0, [pc, #468]	@ (800169c <check_SIM_ready+0x26c>)
 80014c6:	f7ff fda5 	bl	8001014 <send_AT_command>
	osDelay(100);
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f005 ff04 	bl	80072d8 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014d0:	2405      	movs	r4, #5
 80014d2:	4631      	mov	r1, r6
 80014d4:	4628      	mov	r0, r5
 80014d6:	f009 fa89 	bl	800a9ec <strstr>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f000 80ad 	beq.w	800163a <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 80014e0:	486d      	ldr	r0, [pc, #436]	@ (8001698 <check_SIM_ready+0x268>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80014e2:	4e6f      	ldr	r6, [pc, #444]	@ (80016a0 <check_SIM_ready+0x270>)
 80014e4:	4d64      	ldr	r5, [pc, #400]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM CCID\n");
 80014e6:	4f6f      	ldr	r7, [pc, #444]	@ (80016a4 <check_SIM_ready+0x274>)
	receive_response("Check SIM\n");
 80014e8:	f7ff fdc0 	bl	800106c <receive_response>
	osDelay(100);
 80014ec:	2064      	movs	r0, #100	@ 0x64
 80014ee:	f005 fef3 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014f6:	2100      	movs	r1, #0
 80014f8:	485f      	ldr	r0, [pc, #380]	@ (8001678 <check_SIM_ready+0x248>)
 80014fa:	f009 fa27 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014fe:	f7ff fd99 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001502:	2064      	movs	r0, #100	@ 0x64
 8001504:	f005 fee8 	bl	80072d8 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001508:	4867      	ldr	r0, [pc, #412]	@ (80016a8 <check_SIM_ready+0x278>)
 800150a:	f7ff fd83 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800150e:	2405      	movs	r4, #5
 8001510:	4631      	mov	r1, r6
 8001512:	4628      	mov	r0, r5
 8001514:	f009 fa6a 	bl	800a9ec <strstr>
 8001518:	2800      	cmp	r0, #0
 800151a:	f000 809e 	beq.w	800165a <check_SIM_ready+0x22a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 800151e:	4861      	ldr	r0, [pc, #388]	@ (80016a4 <check_SIM_ready+0x274>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001520:	4d62      	ldr	r5, [pc, #392]	@ (80016ac <check_SIM_ready+0x27c>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001522:	4e63      	ldr	r6, [pc, #396]	@ (80016b0 <check_SIM_ready+0x280>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001524:	4c53      	ldr	r4, [pc, #332]	@ (8001674 <check_SIM_ready+0x244>)
	receive_response("Check SIM CCID\n");
 8001526:	f7ff fda1 	bl	800106c <receive_response>
	osDelay(100);
 800152a:	2064      	movs	r0, #100	@ 0x64
 800152c:	f005 fed4 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001530:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001534:	2100      	movs	r1, #0
 8001536:	4850      	ldr	r0, [pc, #320]	@ (8001678 <check_SIM_ready+0x248>)
 8001538:	f009 fa08 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800153c:	f7ff fd7a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001540:	485c      	ldr	r0, [pc, #368]	@ (80016b4 <check_SIM_ready+0x284>)
 8001542:	f7ff fd67 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001546:	485c      	ldr	r0, [pc, #368]	@ (80016b8 <check_SIM_ready+0x288>)
 8001548:	f7ff fd90 	bl	800106c <receive_response>
		send_AT_command("AT+CREG?\r\n");
 800154c:	4628      	mov	r0, r5
 800154e:	f7ff fd61 	bl	8001014 <send_AT_command>
		osDelay(150);
 8001552:	2096      	movs	r0, #150	@ 0x96
 8001554:	f005 fec0 	bl	80072d8 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001558:	4630      	mov	r0, r6
 800155a:	f7ff fd87 	bl	800106c <receive_response>
		osDelay(300);
 800155e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001562:	f005 feb9 	bl	80072d8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001566:	4844      	ldr	r0, [pc, #272]	@ (8001678 <check_SIM_ready+0x248>)
 8001568:	4621      	mov	r1, r4
 800156a:	f009 fa3f 	bl	800a9ec <strstr>
		if(first_pointer != NULL){
 800156e:	2800      	cmp	r0, #0
 8001570:	d0ec      	beq.n	800154c <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001572:	4621      	mov	r1, r4
 8001574:	3001      	adds	r0, #1
 8001576:	f009 fa39 	bl	800a9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800157a:	2800      	cmp	r0, #0
 800157c:	d0e6      	beq.n	800154c <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f005 feaa 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001584:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001588:	2100      	movs	r1, #0
 800158a:	483b      	ldr	r0, [pc, #236]	@ (8001678 <check_SIM_ready+0x248>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 800158c:	4d4b      	ldr	r5, [pc, #300]	@ (80016bc <check_SIM_ready+0x28c>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 800158e:	4e4c      	ldr	r6, [pc, #304]	@ (80016c0 <check_SIM_ready+0x290>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001590:	4c38      	ldr	r4, [pc, #224]	@ (8001674 <check_SIM_ready+0x244>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001592:	f009 f9db 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001596:	f7ff fd4d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 800159a:	484a      	ldr	r0, [pc, #296]	@ (80016c4 <check_SIM_ready+0x294>)
 800159c:	f7ff fd3a 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 80015a0:	4849      	ldr	r0, [pc, #292]	@ (80016c8 <check_SIM_ready+0x298>)
 80015a2:	f7ff fd63 	bl	800106c <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fd34 	bl	8001014 <send_AT_command>
		osDelay(150);
 80015ac:	2096      	movs	r0, #150	@ 0x96
 80015ae:	f005 fe93 	bl	80072d8 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 80015b2:	4630      	mov	r0, r6
 80015b4:	f7ff fd5a 	bl	800106c <receive_response>
		osDelay(300);
 80015b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015bc:	f005 fe8c 	bl	80072d8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <check_SIM_ready+0x248>)
 80015c2:	4621      	mov	r1, r4
 80015c4:	f009 fa12 	bl	800a9ec <strstr>
		if(first_pointer != NULL){
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0ec      	beq.n	80015a6 <check_SIM_ready+0x176>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80015cc:	4621      	mov	r1, r4
 80015ce:	3001      	adds	r0, #1
 80015d0:	f009 fa0c 	bl	800a9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d0e6      	beq.n	80015a6 <check_SIM_ready+0x176>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80015d8:	2064      	movs	r0, #100	@ 0x64
 80015da:	f005 fe7d 	bl	80072d8 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 80015de:	4838      	ldr	r0, [pc, #224]	@ (80016c0 <check_SIM_ready+0x290>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015e0:	4d24      	ldr	r5, [pc, #144]	@ (8001674 <check_SIM_ready+0x244>)
 80015e2:	4c25      	ldr	r4, [pc, #148]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check Signal Quality Report\n");
 80015e4:	4e39      	ldr	r6, [pc, #228]	@ (80016cc <check_SIM_ready+0x29c>)
	receive_response("Check Network Registration Status (PS Service)\n");
 80015e6:	f7ff fd41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015ee:	2100      	movs	r1, #0
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <check_SIM_ready+0x248>)
 80015f2:	f009 f9ab 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015f6:	f7ff fd1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80015fa:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <check_SIM_ready+0x2a0>)
 80015fc:	f7ff fd0a 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001600:	4629      	mov	r1, r5
 8001602:	4620      	mov	r0, r4
 8001604:	f009 f9f2 	bl	800a9ec <strstr>
 8001608:	b370      	cbz	r0, 8001668 <check_SIM_ready+0x238>
	}
	receive_response("Check Signal Quality Report\n");
 800160a:	4830      	ldr	r0, [pc, #192]	@ (80016cc <check_SIM_ready+0x29c>)
 800160c:	f7ff fd2e 	bl	800106c <receive_response>
	osDelay(100);
 8001610:	2064      	movs	r0, #100	@ 0x64
 8001612:	f005 fe61 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001616:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800161a:	2100      	movs	r1, #0
 800161c:	4816      	ldr	r0, [pc, #88]	@ (8001678 <check_SIM_ready+0x248>)
 800161e:	f009 f995 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001622:	f7ff fd07 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	

	return 1;
 8001626:	2001      	movs	r0, #1
 8001628:	e016      	b.n	8001658 <check_SIM_ready+0x228>
		receive_response("Check IMEI-0:\n");
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff fd1e 	bl	800106c <receive_response>
 8001630:	e705      	b.n	800143e <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001632:	4630      	mov	r0, r6
 8001634:	f7ff fd1a 	bl	800106c <receive_response>
 8001638:	e72c      	b.n	8001494 <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 800163a:	4638      	mov	r0, r7
 800163c:	f7ff fd16 	bl	800106c <receive_response>
		if (count_check_sim >= 5){
 8001640:	3c01      	subs	r4, #1
 8001642:	f47f af46 	bne.w	80014d2 <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001646:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800164a:	2100      	movs	r1, #0
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <check_SIM_ready+0x248>)
 800164e:	f009 f97d 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001652:	f7ff fcef 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001656:	2000      	movs	r0, #0
}
 8001658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fd06 	bl	800106c <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 8001660:	3c01      	subs	r4, #1
 8001662:	f47f af55 	bne.w	8001510 <check_SIM_ready+0xe0>
 8001666:	e7ee      	b.n	8001646 <check_SIM_ready+0x216>
		receive_response("Check Signal Quality Report\n");
 8001668:	4630      	mov	r0, r6
 800166a:	f7ff fcff 	bl	800106c <receive_response>
 800166e:	e7c7      	b.n	8001600 <check_SIM_ready+0x1d0>
 8001670:	0800ea6c 	.word	0x0800ea6c
 8001674:	0800e9de 	.word	0x0800e9de
 8001678:	20000c80 	.word	0x20000c80
 800167c:	0800ea78 	.word	0x0800ea78
 8001680:	0800eaaa 	.word	0x0800eaaa
 8001684:	20000bdc 	.word	0x20000bdc
 8001688:	0800ea87 	.word	0x0800ea87
 800168c:	20001248 	.word	0x20001248
 8001690:	0800f66e 	.word	0x0800f66e
 8001694:	0800eaa0 	.word	0x0800eaa0
 8001698:	0800ead1 	.word	0x0800ead1
 800169c:	0800eac6 	.word	0x0800eac6
 80016a0:	0800eaf7 	.word	0x0800eaf7
 80016a4:	0800eae7 	.word	0x0800eae7
 80016a8:	0800eadc 	.word	0x0800eadc
 80016ac:	0800eb40 	.word	0x0800eb40
 80016b0:	0800eb4b 	.word	0x0800eb4b
 80016b4:	0800eaff 	.word	0x0800eaff
 80016b8:	0800eb0b 	.word	0x0800eb0b
 80016bc:	0800ebbd 	.word	0x0800ebbd
 80016c0:	0800ebc9 	.word	0x0800ebc9
 80016c4:	0800eb7b 	.word	0x0800eb7b
 80016c8:	0800eb88 	.word	0x0800eb88
 80016cc:	0800ec02 	.word	0x0800ec02
 80016d0:	0800ebf9 	.word	0x0800ebf9

080016d4 <check_configure_APN>:

void check_configure_APN(){
 80016d4:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <check_configure_APN+0x18>)
 80016d8:	f7ff fc9c 	bl	8001014 <send_AT_command>
	osDelay(150);
 80016dc:	2096      	movs	r0, #150	@ 0x96
 80016de:	f005 fdfb 	bl	80072d8 <osDelay>
	receive_response("Check Configuring APN\n");
}
 80016e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 80016e6:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <check_configure_APN+0x1c>)
 80016e8:	f7ff bcc0 	b.w	800106c <receive_response>
 80016ec:	0800ec1f 	.word	0x0800ec1f
 80016f0:	0800ec2d 	.word	0x0800ec2d

080016f4 <configure_APN>:

int configure_APN(int context_id){
 80016f4:	b530      	push	{r4, r5, lr}
 80016f6:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016f8:	2200      	movs	r2, #0
 80016fa:	9204      	str	r2, [sp, #16]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80016fe:	4c17      	ldr	r4, [pc, #92]	@ (800175c <configure_APN+0x68>)
 8001700:	4d17      	ldr	r5, [pc, #92]	@ (8001760 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001702:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <configure_APN+0x70>)
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	2201      	movs	r2, #1
int configure_APN(int context_id){
 800170c:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800170e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	a806      	add	r0, sp, #24
 8001716:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <configure_APN+0x74>)
 8001718:	f009 f81c 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 800171c:	a806      	add	r0, sp, #24
 800171e:	f7ff fc79 	bl	8001014 <send_AT_command>
	osDelay(150);
 8001722:	2096      	movs	r0, #150	@ 0x96
 8001724:	f005 fdd8 	bl	80072d8 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001728:	4810      	ldr	r0, [pc, #64]	@ (800176c <configure_APN+0x78>)
 800172a:	f7ff fc9f 	bl	800106c <receive_response>
		check_configure_APN();
 800172e:	f7ff ffd1 	bl	80016d4 <check_configure_APN>
		osDelay(300);
 8001732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001736:	f005 fdcf 	bl	80072d8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <configure_APN+0x68>)
 800173c:	4628      	mov	r0, r5
 800173e:	f009 f955 	bl	800a9ec <strstr>
		if(first_pointer != NULL){
 8001742:	2800      	cmp	r0, #0
 8001744:	d0f3      	beq.n	800172e <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001746:	4621      	mov	r1, r4
 8001748:	3001      	adds	r0, #1
 800174a:	f009 f94f 	bl	800a9ec <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800174e:	2800      	cmp	r0, #0
 8001750:	d0ed      	beq.n	800172e <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001752:	2001      	movs	r0, #1
 8001754:	b047      	add	sp, #284	@ 0x11c
 8001756:	bd30      	pop	{r4, r5, pc}
 8001758:	0800f639 	.word	0x0800f639
 800175c:	0800e9de 	.word	0x0800e9de
 8001760:	20000c80 	.word	0x20000c80
 8001764:	0800ec6a 	.word	0x0800ec6a
 8001768:	0800ec44 	.word	0x0800ec44
 800176c:	0800ec74 	.word	0x0800ec74

08001770 <check_activate_context>:

void check_activate_context(){
 8001770:	b500      	push	{lr}
 8001772:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001774:	4906      	ldr	r1, [pc, #24]	@ (8001790 <check_activate_context+0x20>)
 8001776:	4668      	mov	r0, sp
 8001778:	f009 ff39 	bl	800b5ee <strcpy>
	send_AT_command((char*)command);
 800177c:	4668      	mov	r0, sp
 800177e:	f7ff fc49 	bl	8001014 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001782:	4804      	ldr	r0, [pc, #16]	@ (8001794 <check_activate_context+0x24>)
 8001784:	f7ff fc72 	bl	800106c <receive_response>
}
 8001788:	b021      	add	sp, #132	@ 0x84
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
 800178e:	bf00      	nop
 8001790:	0800ec83 	.word	0x0800ec83
 8001794:	0800ec8f 	.word	0x0800ec8f

08001798 <activate_context>:
		// Wait until the counter reaches 1000
		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
	}
	is_40s = 1;
}
int activate_context(int context_id){
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	b0a0      	sub	sp, #128	@ 0x80
 800179e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017a0:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <activate_context+0xd0>)
	osDelay(150);
	receive_response("Activate Context\r\n");
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	int count_check = 0;
	HAL_TIM_Base_Start(&htim3);
 80017a2:	4c32      	ldr	r4, [pc, #200]	@ (800186c <activate_context+0xd4>)
		osDelay(300);
		if(count_check >= 50){
			count_check = 0;
			return 0;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 80017a4:	4f32      	ldr	r7, [pc, #200]	@ (8001870 <activate_context+0xd8>)
 80017a6:	4e33      	ldr	r6, [pc, #204]	@ (8001874 <activate_context+0xdc>)
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}

		receive_response("Check Activate Context\r\n");
 80017a8:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001880 <activate_context+0xe8>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	4668      	mov	r0, sp
 80017b0:	f008 ffd0 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 80017b4:	4668      	mov	r0, sp
 80017b6:	f7ff fc2d 	bl	8001014 <send_AT_command>
	osDelay(150);
 80017ba:	2096      	movs	r0, #150	@ 0x96
 80017bc:	f005 fd8c 	bl	80072d8 <osDelay>
	receive_response("Activate Context\r\n");
 80017c0:	482d      	ldr	r0, [pc, #180]	@ (8001878 <activate_context+0xe0>)
 80017c2:	f7ff fc53 	bl	800106c <receive_response>
	HAL_TIM_Base_Start(&htim3);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f004 fef8 	bl	80065bc <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	2400      	movs	r4, #0
 80017d0:	625c      	str	r4, [r3, #36]	@ 0x24
 80017d2:	2533      	movs	r5, #51	@ 0x33
		check_activate_context();
 80017d4:	f7ff ffcc 	bl	8001770 <check_activate_context>
		osDelay(300);
 80017d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017dc:	f005 fd7c 	bl	80072d8 <osDelay>
		if(count_check >= 50){
 80017e0:	3d01      	subs	r5, #1
 80017e2:	d021      	beq.n	8001828 <activate_context+0x90>
		if (strstr((char*)response, "ERROR") != NULL){
 80017e4:	4639      	mov	r1, r7
 80017e6:	4630      	mov	r0, r6
 80017e8:	f009 f900 	bl	800a9ec <strstr>
 80017ec:	b300      	cbz	r0, 8001830 <activate_context+0x98>
			osDelay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017f2:	f005 fd71 	bl	80072d8 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017fa:	2100      	movs	r1, #0
 80017fc:	4630      	mov	r0, r6
 80017fe:	f009 f8a5 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001802:	f7ff fc17 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001806:	4668      	mov	r0, sp
 8001808:	f7ff fc04 	bl	8001014 <send_AT_command>
			count_error++;
 800180c:	3401      	adds	r4, #1
			osDelay(200);
 800180e:	20c8      	movs	r0, #200	@ 0xc8
 8001810:	f005 fd62 	bl	80072d8 <osDelay>
		if(count_error >=3){
 8001814:	2c03      	cmp	r4, #3
 8001816:	d10b      	bne.n	8001830 <activate_context+0x98>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001818:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800181c:	2100      	movs	r1, #0
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <activate_context+0xdc>)
 8001820:	f009 f894 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001824:	f7ff fc06 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001828:	2000      	movs	r0, #0
	}
	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 800182a:	b020      	add	sp, #128	@ 0x80
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001830:	4640      	mov	r0, r8
 8001832:	f7ff fc1b 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001836:	4911      	ldr	r1, [pc, #68]	@ (800187c <activate_context+0xe4>)
 8001838:	4630      	mov	r0, r6
 800183a:	f009 f8d7 	bl	800a9ec <strstr>
		if(first_pointer != NULL){
 800183e:	2800      	cmp	r0, #0
 8001840:	d0c8      	beq.n	80017d4 <activate_context+0x3c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001842:	490e      	ldr	r1, [pc, #56]	@ (800187c <activate_context+0xe4>)
 8001844:	3001      	adds	r0, #1
 8001846:	f009 f8d1 	bl	800a9ec <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 800184a:	2800      	cmp	r0, #0
 800184c:	d0c2      	beq.n	80017d4 <activate_context+0x3c>
	HAL_TIM_Base_Start(&htim3);
 800184e:	4807      	ldr	r0, [pc, #28]	@ (800186c <activate_context+0xd4>)
 8001850:	f004 feb4 	bl	80065bc <HAL_TIM_Base_Start>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001854:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001858:	2100      	movs	r1, #0
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <activate_context+0xdc>)
 800185c:	f009 f876 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001860:	f7ff fbe8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001864:	2001      	movs	r0, #1
 8001866:	e7e0      	b.n	800182a <activate_context+0x92>
 8001868:	0800eca7 	.word	0x0800eca7
 800186c:	200012d0 	.word	0x200012d0
 8001870:	0800ecb5 	.word	0x0800ecb5
 8001874:	20000c80 	.word	0x20000c80
 8001878:	0800ecc1 	.word	0x0800ecc1
 800187c:	0800e9de 	.word	0x0800e9de
 8001880:	0800ecbb 	.word	0x0800ecbb

08001884 <deactivate_context>:

int deactivate_context(int context_id){
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 800188a:	2064      	movs	r0, #100	@ 0x64
 800188c:	f005 fd24 	bl	80072d8 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001890:	4623      	mov	r3, r4
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001894:	4e1d      	ldr	r6, [pc, #116]	@ (800190c <deactivate_context+0x88>)
 8001896:	4d1e      	ldr	r5, [pc, #120]	@ (8001910 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001898:	4f1e      	ldr	r7, [pc, #120]	@ (8001914 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	4668      	mov	r0, sp
 800189e:	f008 ff59 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 80018a2:	4668      	mov	r0, sp
 80018a4:	f7ff fbb6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018a8:	2415      	movs	r4, #21
 80018aa:	4631      	mov	r1, r6
 80018ac:	4628      	mov	r0, r5
 80018ae:	f009 f89d 	bl	800a9ec <strstr>
 80018b2:	b178      	cbz	r0, 80018d4 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 80018b4:	4817      	ldr	r0, [pc, #92]	@ (8001914 <deactivate_context+0x90>)
 80018b6:	f7ff fbd9 	bl	800106c <receive_response>
	osDelay(100);
 80018ba:	2064      	movs	r0, #100	@ 0x64
 80018bc:	f005 fd0c 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018c4:	2100      	movs	r1, #0
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <deactivate_context+0x8c>)
 80018c8:	f009 f840 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80018cc:	f7ff fbb2 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e010      	b.n	80018f6 <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 80018d4:	4638      	mov	r0, r7
 80018d6:	f7ff fbc9 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80018da:	490f      	ldr	r1, [pc, #60]	@ (8001918 <deactivate_context+0x94>)
 80018dc:	4628      	mov	r0, r5
 80018de:	f009 f885 	bl	800a9ec <strstr>
 80018e2:	b150      	cbz	r0, 80018fa <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018e4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018e8:	2100      	movs	r1, #0
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <deactivate_context+0x8c>)
 80018ec:	f009 f82e 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 80018f0:	f7ff fba0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	b021      	add	sp, #132	@ 0x84
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 80018fa:	3c01      	subs	r4, #1
 80018fc:	d0f2      	beq.n	80018e4 <deactivate_context+0x60>
		osDelay(200);
 80018fe:	20c8      	movs	r0, #200	@ 0xc8
 8001900:	f005 fcea 	bl	80072d8 <osDelay>
 8001904:	e7d1      	b.n	80018aa <deactivate_context+0x26>
 8001906:	bf00      	nop
 8001908:	0800ecd4 	.word	0x0800ecd4
 800190c:	0800e9de 	.word	0x0800e9de
 8001910:	20000c80 	.word	0x20000c80
 8001914:	0800ece4 	.word	0x0800ece4
 8001918:	0800ecb5 	.word	0x0800ecb5

0800191c <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 800191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001920:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001926:	f241 3397 	movw	r3, #5015	@ 0x1397
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <open_socket_service+0x13c>)
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <open_socket_service+0x140>)
 8001932:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <open_socket_service+0x144>)
	//time_t start = time(NULL);
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001934:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8001a78 <open_socket_service+0x15c>
		if (strstr((char *) response, "ERROR") != NULL){
 8001938:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8001a88 <open_socket_service+0x16c>
 800193c:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8001a6c <open_socket_service+0x150>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001940:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001944:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001946:	4603      	mov	r3, r0
 8001948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800194c:	a826      	add	r0, sp, #152	@ 0x98
 800194e:	f008 ff01 	bl	800a754 <sniprintf>
	send_AT_command((char *) command);
 8001952:	a826      	add	r0, sp, #152	@ 0x98
 8001954:	f7ff fb5e 	bl	8001014 <send_AT_command>
	osDelay(100);
 8001958:	2064      	movs	r0, #100	@ 0x64
 800195a:	f005 fcbd 	bl	80072d8 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 800195e:	4941      	ldr	r1, [pc, #260]	@ (8001a64 <open_socket_service+0x148>)
 8001960:	4841      	ldr	r0, [pc, #260]	@ (8001a68 <open_socket_service+0x14c>)
 8001962:	f002 fc23 	bl	80041ac <uart_transmit_string>
	int count_error = 0;
 8001966:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001968:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 800196a:	4648      	mov	r0, r9
 800196c:	f7ff fb7e 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001970:	4651      	mov	r1, sl
 8001972:	4640      	mov	r0, r8
 8001974:	f009 f83a 	bl	800a9ec <strstr>
 8001978:	b1e8      	cbz	r0, 80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800197a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800197e:	2100      	movs	r1, #0
 8001980:	4640      	mov	r0, r8
 8001982:	f008 ffe3 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001986:	f7ff fb55 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 800198a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800198e:	f005 fca3 	bl	80072d8 <osDelay>
			count_error++;
 8001992:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001994:	a826      	add	r0, sp, #152	@ 0x98
 8001996:	f7ff fb3d 	bl	8001014 <send_AT_command>
		}
		if(count_error >= 6){
 800199a:	2f06      	cmp	r7, #6
 800199c:	d10b      	bne.n	80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800199e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019a2:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019a4:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <open_socket_service+0x150>)
 80019a6:	f008 ffd1 	bl	800a94c <memset>
				SIM_UART_ReInitializeRxDMA();
 80019aa:	f7ff fb43 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80019ae:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 80019b0:	b066      	add	sp, #408	@ 0x198
 80019b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019b6:	492e      	ldr	r1, [pc, #184]	@ (8001a70 <open_socket_service+0x154>)
 80019b8:	4640      	mov	r0, r8
 80019ba:	f009 f817 	bl	800a9ec <strstr>
		elapsed_time_ms++;
 80019be:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <open_socket_service+0x158>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019c2:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c4:	4633      	mov	r3, r6
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	a806      	add	r0, sp, #24
 80019ca:	f008 fec3 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80019ce:	4826      	ldr	r0, [pc, #152]	@ (8001a68 <open_socket_service+0x14c>)
 80019d0:	a906      	add	r1, sp, #24
 80019d2:	f002 fbeb 	bl	80041ac <uart_transmit_string>
		osDelay(300);
 80019d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019da:	f005 fc7d 	bl	80072d8 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 80019de:	b90d      	cbnz	r5, 80019e4 <open_socket_service+0xc8>
 80019e0:	2e32      	cmp	r6, #50	@ 0x32
 80019e2:	d1c2      	bne.n	800196a <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <open_socket_service+0x15c>)
 80019e6:	f7ff fb41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019ee:	2100      	movs	r1, #0
 80019f0:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <open_socket_service+0x150>)
 80019f2:	f008 ffab 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 80019f6:	f7ff fb1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	d0d7      	beq.n	80019ae <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019fe:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <open_socket_service+0x160>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a00:	4e1f      	ldr	r6, [pc, #124]	@ (8001a80 <open_socket_service+0x164>)
 8001a02:	4d1a      	ldr	r5, [pc, #104]	@ (8001a6c <open_socket_service+0x150>)
			receive_response("Check SOCKET CONNECTION\n");
 8001a04:	4f1f      	ldr	r7, [pc, #124]	@ (8001a84 <open_socket_service+0x168>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001a06:	4623      	mov	r3, r4
 8001a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0c:	a826      	add	r0, sp, #152	@ 0x98
 8001a0e:	f008 fea1 	bl	800a754 <sniprintf>
		send_AT_command((char*) command);
 8001a12:	a826      	add	r0, sp, #152	@ 0x98
 8001a14:	f7ff fafe 	bl	8001014 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f008 ffe6 	bl	800a9ec <strstr>
 8001a20:	4604      	mov	r4, r0
 8001a22:	b160      	cbz	r0, 8001a3e <open_socket_service+0x122>
		osDelay(100);
 8001a24:	2064      	movs	r0, #100	@ 0x64
 8001a26:	f005 fc57 	bl	80072d8 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a2e:	2100      	movs	r1, #0
 8001a30:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <open_socket_service+0x150>)
 8001a32:	f008 ff8b 	bl	800a94c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a36:	f7ff fafd 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7b8      	b.n	80019b0 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001a3e:	4638      	mov	r0, r7
 8001a40:	f7ff fb14 	bl	800106c <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001a44:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <open_socket_service+0x16c>)
 8001a46:	4628      	mov	r0, r5
 8001a48:	f008 ffd0 	bl	800a9ec <strstr>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d0e3      	beq.n	8001a18 <open_socket_service+0xfc>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a50:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a54:	4621      	mov	r1, r4
 8001a56:	e7a5      	b.n	80019a4 <open_socket_service+0x88>
 8001a58:	0800ed1d 	.word	0x0800ed1d
 8001a5c:	0800ed2c 	.word	0x0800ed2c
 8001a60:	0800ecf8 	.word	0x0800ecf8
 8001a64:	0800ed30 	.word	0x0800ed30
 8001a68:	20001248 	.word	0x20001248
 8001a6c:	20000c80 	.word	0x20000c80
 8001a70:	0800ed5f 	.word	0x0800ed5f
 8001a74:	0800ed68 	.word	0x0800ed68
 8001a78:	0800ed41 	.word	0x0800ed41
 8001a7c:	0800ed7a 	.word	0x0800ed7a
 8001a80:	0800e9de 	.word	0x0800e9de
 8001a84:	0800ed8c 	.word	0x0800ed8c
 8001a88:	0800ecb5 	.word	0x0800ecb5

08001a8c <check_socket_connection>:

//QPING command
void check_socket_connection(int context_ID){
 8001a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a90:	b0c3      	sub	sp, #268	@ 0x10c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a92:	4a29      	ldr	r2, [pc, #164]	@ (8001b38 <check_socket_connection+0xac>)
 8001a94:	9200      	str	r2, [sp, #0]
void check_socket_connection(int context_ID){
 8001a96:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <check_socket_connection+0xb0>)
	char *second_pointer = NULL;
	char *third_pointer = NULL;
	char *fourth_pointer = NULL;
	char *fifth_pointer = NULL;
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
		receive_response("Check SOCKET CONNECTION\n");
 8001a9a:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8001b40 <check_socket_connection+0xb4>
		first_pointer = strstr((char*)response, "+QPING:");
 8001a9e:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001b48 <check_socket_connection+0xbc>
 8001aa2:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8001b44 <check_socket_connection+0xb8>
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	a802      	add	r0, sp, #8
 8001aac:	f008 fe52 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 8001ab0:	a802      	add	r0, sp, #8
 8001ab2:	f7ff faaf 	bl	8001014 <send_AT_command>
	char *fifth_pointer = NULL;
 8001ab6:	2400      	movs	r4, #0
	char *fourth_pointer = NULL;
 8001ab8:	4627      	mov	r7, r4
	char *third_pointer = NULL;
 8001aba:	4626      	mov	r6, r4
	char *second_pointer = NULL;
 8001abc:	4625      	mov	r5, r4
		receive_response("Check SOCKET CONNECTION\n");
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f7ff fad4 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, "+QPING:");
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4658      	mov	r0, fp
 8001ac8:	f008 ff90 	bl	800a9ec <strstr>
		if(first_pointer != NULL){
 8001acc:	4681      	mov	r9, r0
 8001ace:	b120      	cbz	r0, 8001ada <check_socket_connection+0x4e>
			 second_pointer = strstr(first_pointer+1, "+QPING:");
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	f008 ff8a 	bl	800a9ec <strstr>
 8001ad8:	4605      	mov	r5, r0
		}
		if(second_pointer != NULL){
 8001ada:	b125      	cbz	r5, 8001ae6 <check_socket_connection+0x5a>
			 third_pointer = strstr(second_pointer+1, "+QPING:");
 8001adc:	4641      	mov	r1, r8
 8001ade:	1c68      	adds	r0, r5, #1
 8001ae0:	f008 ff84 	bl	800a9ec <strstr>
 8001ae4:	4606      	mov	r6, r0
		}
		if(third_pointer != NULL){
 8001ae6:	b126      	cbz	r6, 8001af2 <check_socket_connection+0x66>
			 fourth_pointer = strstr(third_pointer+1, "+QPING:");
 8001ae8:	4641      	mov	r1, r8
 8001aea:	1c70      	adds	r0, r6, #1
 8001aec:	f008 ff7e 	bl	800a9ec <strstr>
 8001af0:	4607      	mov	r7, r0
		}
		if(fourth_pointer != NULL){
 8001af2:	b127      	cbz	r7, 8001afe <check_socket_connection+0x72>
			 fifth_pointer = strstr(fourth_pointer+1, "+QPING:");
 8001af4:	4641      	mov	r1, r8
 8001af6:	1c78      	adds	r0, r7, #1
 8001af8:	f008 ff78 	bl	800a9ec <strstr>
 8001afc:	4604      	mov	r4, r0
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
 8001afe:	f1b9 0f00 	cmp.w	r9, #0
 8001b02:	d0dc      	beq.n	8001abe <check_socket_connection+0x32>
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	d0da      	beq.n	8001abe <check_socket_connection+0x32>
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	d0d8      	beq.n	8001abe <check_socket_connection+0x32>
 8001b0c:	2f00      	cmp	r7, #0
 8001b0e:	d0d6      	beq.n	8001abe <check_socket_connection+0x32>
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d0d4      	beq.n	8001abe <check_socket_connection+0x32>
		}
	}
	receive_response("Check SOCKET CONNECTION\n");
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <check_socket_connection+0xb4>)
 8001b16:	f7ff faa9 	bl	800106c <receive_response>
	osDelay(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f005 fbdc 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b20:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b24:	2100      	movs	r1, #0
 8001b26:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <check_socket_connection+0xb8>)
 8001b28:	f008 ff10 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b2c:	f7ff fa82 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
}
 8001b30:	b043      	add	sp, #268	@ 0x10c
 8001b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	0800ed1d 	.word	0x0800ed1d
 8001b3c:	0800eda5 	.word	0x0800eda5
 8001b40:	0800ed8c 	.word	0x0800ed8c
 8001b44:	20000c80 	.word	0x20000c80
 8001b48:	0800edb8 	.word	0x0800edb8

08001b4c <formatToHexString>:

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001b50:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b52:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001b88 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b56:	4607      	mov	r7, r0
 8001b58:	460e      	mov	r6, r1
 8001b5a:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001b5c:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b5e:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001b62:	42b5      	cmp	r5, r6
 8001b64:	db02      	blt.n	8001b6c <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001b66:	4620      	mov	r0, r4
 8001b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001b6c:	3402      	adds	r4, #2
 8001b6e:	4544      	cmp	r4, r8
 8001b70:	da07      	bge.n	8001b82 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b72:	5d7a      	ldrb	r2, [r7, r5]
 8001b74:	4651      	mov	r1, sl
 8001b76:	eb09 0004 	add.w	r0, r9, r4
 8001b7a:	f008 fe1f 	bl	800a7bc <siprintf>
    for (int i = 0; i < length; i++) {
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7ef      	b.n	8001b62 <formatToHexString+0x16>
            return -1;
 8001b82:	f04f 34ff 	mov.w	r4, #4294967295
 8001b86:	e7ee      	b.n	8001b66 <formatToHexString+0x1a>
 8001b88:	0800f8fd 	.word	0x0800f8fd

08001b8c <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b8e:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b90:	460c      	mov	r4, r1
 8001b92:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	460a      	mov	r2, r1
 8001b9a:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b9c:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b9e:	f7ff ffd5 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	2102      	movs	r1, #2
 8001baa:	1c70      	adds	r0, r6, #1
 8001bac:	f7ff ffce 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	1cf0      	adds	r0, r6, #3
 8001bba:	f7ff ffc7 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	9000      	str	r0, [sp, #0]
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	2106      	movs	r1, #6
 8001bc6:	1d70      	adds	r0, r6, #5
 8001bc8:	f7ff ffc0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001bcc:	462b      	mov	r3, r5
 8001bce:	9000      	str	r0, [sp, #0]
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	f106 000b 	add.w	r0, r6, #11
 8001bd8:	f7ff ffb8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001bdc:	462b      	mov	r3, r5
 8001bde:	9000      	str	r0, [sp, #0]
 8001be0:	4622      	mov	r2, r4
 8001be2:	2102      	movs	r1, #2
 8001be4:	f106 000d 	add.w	r0, r6, #13
 8001be8:	f7ff ffb0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001bec:	462b      	mov	r3, r5
 8001bee:	9000      	str	r0, [sp, #0]
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	f106 000f 	add.w	r0, r6, #15
 8001bf8:	f7ff ffa8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	9000      	str	r0, [sp, #0]
 8001c00:	4622      	mov	r2, r4
 8001c02:	2105      	movs	r1, #5
 8001c04:	f106 0011 	add.w	r0, r6, #17
 8001c08:	f7ff ffa0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	9000      	str	r0, [sp, #0]
 8001c10:	4622      	mov	r2, r4
 8001c12:	2108      	movs	r1, #8
 8001c14:	f106 0016 	add.w	r0, r6, #22
 8001c18:	f7ff ff98 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	9000      	str	r0, [sp, #0]
 8001c20:	4622      	mov	r2, r4
 8001c22:	2107      	movs	r1, #7
 8001c24:	f106 001e 	add.w	r0, r6, #30
 8001c28:	f7ff ff90 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	9000      	str	r0, [sp, #0]
 8001c30:	4622      	mov	r2, r4
 8001c32:	2101      	movs	r1, #1
 8001c34:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001c38:	f7ff ff88 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	9000      	str	r0, [sp, #0]
 8001c40:	4622      	mov	r2, r4
 8001c42:	2114      	movs	r1, #20
 8001c44:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001c48:	f7ff ff80 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	4622      	mov	r2, r4
 8001c52:	2101      	movs	r1, #1
 8001c54:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001c58:	f7ff ff78 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	9000      	str	r0, [sp, #0]
 8001c60:	4622      	mov	r2, r4
 8001c62:	2101      	movs	r1, #1
 8001c64:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001c68:	f7ff ff70 	bl	8001b4c <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001c6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001c70:	b002      	add	sp, #8
 8001c72:	bd70      	pop	{r4, r5, r6, pc}

08001c74 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c78:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001c7a:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001c7c:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001c7e:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001c80:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c82:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001c84:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c86:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001c8a:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c8c:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001c90:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c92:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001c96:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c98:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001c9c:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001c9e:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001ca2:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001ca4:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001caa:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001cae:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb0:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001cb4:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb6:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001cba:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cbc:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001cc0:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc2:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001cc6:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc8:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001ccc:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cce:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001cd2:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cd4:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001cd8:	9002      	str	r0, [sp, #8]
 8001cda:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cdc:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001cde:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001ce2:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001ce4:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cea:	490f      	ldr	r1, [pc, #60]	@ (8001d28 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001cec:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cee:	2250      	movs	r2, #80	@ 0x50
 8001cf0:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001cf2:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cf4:	f009 fc83 	bl	800b5fe <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cf8:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001cfc:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cfe:	9000      	str	r0, [sp, #0]
 8001d00:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001d04:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001d08:	4633      	mov	r3, r6
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	f7ff ff1e 	bl	8001b4c <formatToHexString>
        if (writeIndex < 0) return -1;
 8001d10:	2800      	cmp	r0, #0
 8001d12:	db05      	blt.n	8001d20 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001d14:	3401      	adds	r4, #1
 8001d16:	2c14      	cmp	r4, #20
 8001d18:	d1f1      	bne.n	8001cfe <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001d1a:	b02a      	add	sp, #168	@ 0xa8
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e7f9      	b.n	8001d1a <generateLocationInfoMessage+0xa6>
 8001d26:	bf00      	nop
 8001d28:	0800e7e8 	.word	0x0800e7e8

08001d2c <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001d32:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d34:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001d36:	ae02      	add	r6, sp, #8
 8001d38:	227c      	movs	r2, #124	@ 0x7c
 8001d3a:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d3c:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001d3e:	a803      	add	r0, sp, #12
 8001d40:	6034      	str	r4, [r6, #0]
 8001d42:	f008 fe03 	bl	800a94c <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	4631      	mov	r1, r6
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff ff1e 	bl	8001b8c <generateRegistrationMessage>
	if (result < 0) {
 8001d50:	42a0      	cmp	r0, r4
 8001d52:	da05      	bge.n	8001d60 <login_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001d54:	4926      	ldr	r1, [pc, #152]	@ (8001df0 <login_to_server+0xc4>)
 8001d56:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <login_to_server+0xc8>)
 8001d58:	f002 fa28 	bl	80041ac <uart_transmit_string>
		return 1;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e02f      	b.n	8001dc0 <login_to_server+0x94>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001d60:	462b      	mov	r3, r5
 8001d62:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <login_to_server+0xcc>)
 8001d64:	9600      	str	r6, [sp, #0]
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	a842      	add	r0, sp, #264	@ 0x108
 8001d6c:	f008 fcf2 	bl	800a754 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001d70:	a842      	add	r0, sp, #264	@ 0x108
 8001d72:	f7ff f94f 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d76:	4e21      	ldr	r6, [pc, #132]	@ (8001dfc <login_to_server+0xd0>)
 8001d78:	4d21      	ldr	r5, [pc, #132]	@ (8001e00 <login_to_server+0xd4>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001d7a:	4f22      	ldr	r7, [pc, #136]	@ (8001e04 <login_to_server+0xd8>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f008 fe34 	bl	800a9ec <strstr>
 8001d84:	b170      	cbz	r0, 8001da4 <login_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001d86:	481f      	ldr	r0, [pc, #124]	@ (8001e04 <login_to_server+0xd8>)
 8001d88:	f7ff f970 	bl	800106c <receive_response>
	osDelay(100);
 8001d8c:	2064      	movs	r0, #100	@ 0x64
 8001d8e:	f005 faa3 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d96:	2100      	movs	r1, #0
 8001d98:	4819      	ldr	r0, [pc, #100]	@ (8001e00 <login_to_server+0xd4>)
 8001d9a:	f008 fdd7 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d9e:	f7ff f949 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001da2:	e7db      	b.n	8001d5c <login_to_server+0x30>
		receive_response("Check sending to server\n");
 8001da4:	4638      	mov	r0, r7
 8001da6:	f7ff f961 	bl	800106c <receive_response>
		if(count_check >= 3){
 8001daa:	2c03      	cmp	r4, #3
 8001dac:	d10b      	bne.n	8001dc6 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001dae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001db2:	2100      	movs	r1, #0
 8001db4:	4812      	ldr	r0, [pc, #72]	@ (8001e00 <login_to_server+0xd4>)
 8001db6:	f008 fdc9 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001dba:	f7ff f93b 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <login_to_server+0xdc>)
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f008 fe0f 	bl	800a9ec <strstr>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1ed      	bne.n	8001dae <login_to_server+0x82>
		count_check++;
 8001dd2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <login_to_server+0xe0>)
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	a822      	add	r0, sp, #136	@ 0x88
 8001ddc:	f008 fcba 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001de0:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <login_to_server+0xc8>)
 8001de2:	a922      	add	r1, sp, #136	@ 0x88
 8001de4:	f002 f9e2 	bl	80041ac <uart_transmit_string>
		osDelay(200);
 8001de8:	20c8      	movs	r0, #200	@ 0xc8
 8001dea:	f005 fa75 	bl	80072d8 <osDelay>
 8001dee:	e7c5      	b.n	8001d7c <login_to_server+0x50>
 8001df0:	0800edc0 	.word	0x0800edc0
 8001df4:	20001248 	.word	0x20001248
 8001df8:	0800edea 	.word	0x0800edea
 8001dfc:	0800e9de 	.word	0x0800e9de
 8001e00:	20000c80 	.word	0x20000c80
 8001e04:	0800ee00 	.word	0x0800ee00
 8001e08:	0800ecb5 	.word	0x0800ecb5
 8001e0c:	0800ed68 	.word	0x0800ed68

08001e10 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001e18:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e1a:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001e1c:	ae23      	add	r6, sp, #140	@ 0x8c
 8001e1e:	227f      	movs	r2, #127	@ 0x7f
 8001e20:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e22:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001e24:	a824      	add	r0, sp, #144	@ 0x90
 8001e26:	6034      	str	r4, [r6, #0]
 8001e28:	f008 fd90 	bl	800a94c <memset>
	int count_check = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001e2c:	2283      	movs	r2, #131	@ 0x83
 8001e2e:	4631      	mov	r1, r6
 8001e30:	4638      	mov	r0, r7
 8001e32:	f7ff ff1f 	bl	8001c74 <generateLocationInfoMessage>
	if (result < 0) {
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	da05      	bge.n	8001e46 <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001e3a:	4930      	ldr	r1, [pc, #192]	@ (8001efc <send_location_to_server+0xec>)
 8001e3c:	4830      	ldr	r0, [pc, #192]	@ (8001f00 <send_location_to_server+0xf0>)
 8001e3e:	f002 f9b5 	bl	80041ac <uart_transmit_string>
		return 1;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e030      	b.n	8001ea8 <send_location_to_server+0x98>
	}

	// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <send_location_to_server+0xf4>)
 8001e48:	9600      	str	r6, [sp, #0]
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e50:	a844      	add	r0, sp, #272	@ 0x110
 8001e52:	f008 fc7f 	bl	800a754 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001e56:	a844      	add	r0, sp, #272	@ 0x110
 8001e58:	f7ff f8dc 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, "+QIURC") == NULL){
 8001e5c:	4f2a      	ldr	r7, [pc, #168]	@ (8001f08 <send_location_to_server+0xf8>)
 8001e5e:	4e2b      	ldr	r6, [pc, #172]	@ (8001f0c <send_location_to_server+0xfc>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001e60:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8001f10 <send_location_to_server+0x100>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e64:	4639      	mov	r1, r7
 8001e66:	4630      	mov	r0, r6
 8001e68:	f008 fdc0 	bl	800a9ec <strstr>
 8001e6c:	b170      	cbz	r0, 8001e8c <send_location_to_server+0x7c>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001e6e:	4828      	ldr	r0, [pc, #160]	@ (8001f10 <send_location_to_server+0x100>)
 8001e70:	f7ff f8fc 	bl	800106c <receive_response>
	osDelay(100);
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	f005 fa2f 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4822      	ldr	r0, [pc, #136]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e82:	f008 fd63 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e86:	f7ff f8d5 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e8a:	e7da      	b.n	8001e42 <send_location_to_server+0x32>
		receive_response("Check sending to server\n");
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	f7ff f8ed 	bl	800106c <receive_response>
		if(count_check >= 6){
 8001e92:	2c06      	cmp	r4, #6
 8001e94:	d10c      	bne.n	8001eb0 <send_location_to_server+0xa0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	481b      	ldr	r0, [pc, #108]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e9e:	f008 fd55 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ea2:	f7ff f8c7 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001ea6:	2000      	movs	r0, #0
}
 8001ea8:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001eb0:	4918      	ldr	r1, [pc, #96]	@ (8001f14 <send_location_to_server+0x104>)
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f008 fd9a 	bl	800a9ec <strstr>
 8001eb8:	4605      	mov	r5, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1eb      	bne.n	8001e96 <send_location_to_server+0x86>
		 if (strstr((char*)response, "closed") != NULL) {
 8001ebe:	4916      	ldr	r1, [pc, #88]	@ (8001f18 <send_location_to_server+0x108>)
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f008 fd93 	bl	800a9ec <strstr>
 8001ec6:	b148      	cbz	r0, 8001edc <send_location_to_server+0xcc>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ec8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ecc:	4629      	mov	r1, r5
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <send_location_to_server+0xfc>)
 8001ed0:	f008 fd3c 	bl	800a94c <memset>
			 SIM_UART_ReInitializeRxDMA();
 8001ed4:	f7ff f8ae 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8001ed8:	2002      	movs	r0, #2
 8001eda:	e7e5      	b.n	8001ea8 <send_location_to_server+0x98>
		count_check++;
 8001edc:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <send_location_to_server+0x10c>)
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	a803      	add	r0, sp, #12
 8001ee6:	f008 fc35 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <send_location_to_server+0xf0>)
 8001eec:	a903      	add	r1, sp, #12
 8001eee:	f002 f95d 	bl	80041ac <uart_transmit_string>
		osDelay(200);
 8001ef2:	20c8      	movs	r0, #200	@ 0xc8
 8001ef4:	f005 f9f0 	bl	80072d8 <osDelay>
 8001ef8:	e7b4      	b.n	8001e64 <send_location_to_server+0x54>
 8001efa:	bf00      	nop
 8001efc:	0800edc0 	.word	0x0800edc0
 8001f00:	20001248 	.word	0x20001248
 8001f04:	0800edea 	.word	0x0800edea
 8001f08:	0800ee20 	.word	0x0800ee20
 8001f0c:	20000c80 	.word	0x20000c80
 8001f10:	0800ee00 	.word	0x0800ee00
 8001f14:	0800ecb5 	.word	0x0800ecb5
 8001f18:	0800ee19 	.word	0x0800ee19
 8001f1c:	0800ed68 	.word	0x0800ed68

08001f20 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	b0e6      	sub	sp, #408	@ 0x198
	uint8_t command[256];
	int count_check = 0;
	uint8_t output[128];
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <check_data_sent_to_server+0x168>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f2a:	4f58      	ldr	r7, [pc, #352]	@ (800208c <check_data_sent_to_server+0x16c>)
 8001f2c:	4e58      	ldr	r6, [pc, #352]	@ (8002090 <check_data_sent_to_server+0x170>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f2e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80020a8 <check_data_sent_to_server+0x188>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
int check_data_sent_to_server(int connect_id){
 8001f36:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f38:	a826      	add	r0, sp, #152	@ 0x98
 8001f3a:	f008 fc0b 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 8001f3e:	a826      	add	r0, sp, #152	@ 0x98
 8001f40:	f7ff f868 	bl	8001014 <send_AT_command>
	int count_check = 0;
 8001f44:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f46:	4639      	mov	r1, r7
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f008 fd4f 	bl	800a9ec <strstr>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d063      	beq.n	800201a <check_data_sent_to_server+0xfa>
		receive_response("Check sending to server\n");
	}

	int sentBytes, ackedBytes, unackedBytes;

	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f52:	ad05      	add	r5, sp, #20
 8001f54:	494f      	ldr	r1, [pc, #316]	@ (8002094 <check_data_sent_to_server+0x174>)
 8001f56:	484e      	ldr	r0, [pc, #312]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	ab04      	add	r3, sp, #16
 8001f5c:	aa03      	add	r2, sp, #12
 8001f5e:	f008 fc4d 	bl	800a7fc <siscanf>
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f62:	9b05      	ldr	r3, [sp, #20]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	@ (8002098 <check_data_sent_to_server+0x178>)
	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f66:	4606      	mov	r6, r0
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	a806      	add	r0, sp, #24
 8001f6c:	f008 fbf2 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001f70:	484a      	ldr	r0, [pc, #296]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001f72:	a906      	add	r1, sp, #24
 8001f74:	f002 f91a 	bl	80041ac <uart_transmit_string>

	if (result == 3) {
 8001f78:	2e03      	cmp	r6, #3
 8001f7a:	d102      	bne.n	8001f82 <check_data_sent_to_server+0x62>
		if (unackedBytes > 0) {
 8001f7c:	9b05      	ldr	r3, [sp, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc55      	bgt.n	800202e <check_data_sent_to_server+0x10e>
			return 0;
		}
	}
	receive_response("Check sending to server\n");
 8001f82:	4847      	ldr	r0, [pc, #284]	@ (80020a0 <check_data_sent_to_server+0x180>)
	osDelay(200);

	count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f84:	4e47      	ldr	r6, [pc, #284]	@ (80020a4 <check_data_sent_to_server+0x184>)
 8001f86:	4d42      	ldr	r5, [pc, #264]	@ (8002090 <check_data_sent_to_server+0x170>)
		osDelay(300);
		if (strstr((char*)response, "ERROR") != NULL){
 8001f88:	4f47      	ldr	r7, [pc, #284]	@ (80020a8 <check_data_sent_to_server+0x188>)
	receive_response("Check sending to server\n");
 8001f8a:	f7ff f86f 	bl	800106c <receive_response>
	osDelay(100);
 8001f8e:	2064      	movs	r0, #100	@ 0x64
 8001f90:	f005 f9a2 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f98:	2100      	movs	r1, #0
 8001f9a:	483d      	ldr	r0, [pc, #244]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f9c:	f008 fcd6 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001fa0:	f7ff f848 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(200);
 8001fa4:	20c8      	movs	r0, #200	@ 0xc8
 8001fa6:	f005 f997 	bl	80072d8 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001faa:	4a40      	ldr	r2, [pc, #256]	@ (80020ac <check_data_sent_to_server+0x18c>)
 8001fac:	4623      	mov	r3, r4
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	a826      	add	r0, sp, #152	@ 0x98
 8001fb4:	f008 fbce 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 8001fb8:	a826      	add	r0, sp, #152	@ 0x98
 8001fba:	f7ff f82b 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001fbe:	4631      	mov	r1, r6
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f008 fd13 	bl	800a9ec <strstr>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d04d      	beq.n	8002066 <check_data_sent_to_server+0x146>
			return 0;
		}
		osDelay(200);
		receive_response("Check received data from server\n");
	}
	receive_response("Check received data from server\n");
 8001fca:	4839      	ldr	r0, [pc, #228]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8001fcc:	f7ff f84e 	bl	800106c <receive_response>
	char *token = strstr((char*)response, "+QIRD: ");
 8001fd0:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <check_data_sent_to_server+0x194>)
 8001fd2:	482f      	ldr	r0, [pc, #188]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001fd4:	f008 fd0a 	bl	800a9ec <strstr>
	int value = 0;

	if (token != NULL) {
 8001fd8:	b110      	cbz	r0, 8001fe0 <check_data_sent_to_server+0xc0>
		value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8001fda:	3007      	adds	r0, #7
 8001fdc:	f006 fd3a 	bl	8008a54 <atoi>
	int value = 0;
 8001fe0:	4604      	mov	r4, r0
	}
	snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <check_data_sent_to_server+0x198>)
 8001fe8:	a806      	add	r0, sp, #24
 8001fea:	f008 fbb3 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001fee:	482b      	ldr	r0, [pc, #172]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001ff0:	a906      	add	r1, sp, #24
 8001ff2:	f002 f8db 	bl	80041ac <uart_transmit_string>
	if(value == 0) return 0;
 8001ff6:	b1d4      	cbz	r4, 800202e <check_data_sent_to_server+0x10e>

	osDelay(100);
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	f005 f96d 	bl	80072d8 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8001ffe:	492f      	ldr	r1, [pc, #188]	@ (80020bc <check_data_sent_to_server+0x19c>)
 8002000:	4826      	ldr	r0, [pc, #152]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002002:	f002 f8d3 	bl	80041ac <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002006:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800200a:	2100      	movs	r1, #0
 800200c:	4820      	ldr	r0, [pc, #128]	@ (8002090 <check_data_sent_to_server+0x170>)
 800200e:	f008 fc9d 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002012:	f7ff f80f 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002016:	2001      	movs	r0, #1
 8002018:	e00a      	b.n	8002030 <check_data_sent_to_server+0x110>
		if(count_check >= 6){
 800201a:	2d06      	cmp	r5, #6
 800201c:	d10b      	bne.n	8002036 <check_data_sent_to_server+0x116>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800201e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002022:	2100      	movs	r1, #0
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <check_data_sent_to_server+0x170>)
 8002026:	f008 fc91 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 800202a:	f7ff f803 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	int value = 0;
 800202e:	2000      	movs	r0, #0
}
 8002030:	b066      	add	sp, #408	@ 0x198
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8002036:	4641      	mov	r1, r8
 8002038:	4630      	mov	r0, r6
 800203a:	f008 fcd7 	bl	800a9ec <strstr>
 800203e:	2800      	cmp	r0, #0
 8002040:	d1ed      	bne.n	800201e <check_data_sent_to_server+0xfe>
		count_check++;
 8002042:	3501      	adds	r5, #1
		osDelay(200);
 8002044:	20c8      	movs	r0, #200	@ 0xc8
 8002046:	f005 f947 	bl	80072d8 <osDelay>
		snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 800204a:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <check_data_sent_to_server+0x1a0>)
 800204c:	462b      	mov	r3, r5
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	a806      	add	r0, sp, #24
 8002052:	f008 fb7f 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002056:	4811      	ldr	r0, [pc, #68]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002058:	a906      	add	r1, sp, #24
 800205a:	f002 f8a7 	bl	80041ac <uart_transmit_string>
		receive_response("Check sending to server\n");
 800205e:	4810      	ldr	r0, [pc, #64]	@ (80020a0 <check_data_sent_to_server+0x180>)
 8002060:	f7ff f804 	bl	800106c <receive_response>
 8002064:	e76f      	b.n	8001f46 <check_data_sent_to_server+0x26>
		osDelay(300);
 8002066:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800206a:	f005 f935 	bl	80072d8 <osDelay>
		if (strstr((char*)response, "ERROR") != NULL){
 800206e:	4639      	mov	r1, r7
 8002070:	4628      	mov	r0, r5
 8002072:	f008 fcbb 	bl	800a9ec <strstr>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1d1      	bne.n	800201e <check_data_sent_to_server+0xfe>
		osDelay(200);
 800207a:	20c8      	movs	r0, #200	@ 0xc8
 800207c:	f005 f92c 	bl	80072d8 <osDelay>
		receive_response("Check received data from server\n");
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8002082:	f7fe fff3 	bl	800106c <receive_response>
 8002086:	e79a      	b.n	8001fbe <check_data_sent_to_server+0x9e>
 8002088:	0800ee27 	.word	0x0800ee27
 800208c:	0800e9de 	.word	0x0800e9de
 8002090:	20000c80 	.word	0x20000c80
 8002094:	0800ee57 	.word	0x0800ee57
 8002098:	0800ee77 	.word	0x0800ee77
 800209c:	20001248 	.word	0x20001248
 80020a0:	0800ee00 	.word	0x0800ee00
 80020a4:	0800eec3 	.word	0x0800eec3
 80020a8:	0800ecb5 	.word	0x0800ecb5
 80020ac:	0800ee90 	.word	0x0800ee90
 80020b0:	0800eea2 	.word	0x0800eea2
 80020b4:	0800eec9 	.word	0x0800eec9
 80020b8:	0800eed1 	.word	0x0800eed1
 80020bc:	0800eef4 	.word	0x0800eef4
 80020c0:	0800ee38 	.word	0x0800ee38

080020c4 <close_connection>:


int close_connection(int connect_id){
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b0c1      	sub	sp, #260	@ 0x104
 80020c8:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <close_connection+0x78>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020cc:	4e1c      	ldr	r6, [pc, #112]	@ (8002140 <close_connection+0x7c>)
 80020ce:	4d1d      	ldr	r5, [pc, #116]	@ (8002144 <close_connection+0x80>)
		receive_response("Check CLOSING to server\n");
 80020d0:	4f1d      	ldr	r7, [pc, #116]	@ (8002148 <close_connection+0x84>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020d6:	4668      	mov	r0, sp
 80020d8:	f008 fb3c 	bl	800a754 <sniprintf>
	send_AT_command((char*)command);
 80020dc:	4668      	mov	r0, sp
 80020de:	f7fe ff99 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020e2:	2406      	movs	r4, #6
 80020e4:	4631      	mov	r1, r6
 80020e6:	4628      	mov	r0, r5
 80020e8:	f008 fc80 	bl	800a9ec <strstr>
 80020ec:	b178      	cbz	r0, 800210e <close_connection+0x4a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80020ee:	4816      	ldr	r0, [pc, #88]	@ (8002148 <close_connection+0x84>)
 80020f0:	f7fe ffbc 	bl	800106c <receive_response>
	osDelay(100);
 80020f4:	2064      	movs	r0, #100	@ 0x64
 80020f6:	f005 f8ef 	bl	80072d8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020fe:	2100      	movs	r1, #0
 8002100:	4810      	ldr	r0, [pc, #64]	@ (8002144 <close_connection+0x80>)
 8002102:	f008 fc23 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002106:	f7fe ff95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800210a:	2001      	movs	r0, #1
 800210c:	e010      	b.n	8002130 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 800210e:	4638      	mov	r0, r7
 8002110:	f7fe ffac 	bl	800106c <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 8002114:	490d      	ldr	r1, [pc, #52]	@ (800214c <close_connection+0x88>)
 8002116:	4628      	mov	r0, r5
 8002118:	f008 fc68 	bl	800a9ec <strstr>
 800211c:	b150      	cbz	r0, 8002134 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800211e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002122:	2100      	movs	r1, #0
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <close_connection+0x80>)
 8002126:	f008 fc11 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 800212a:	f7fe ff83 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800212e:	2000      	movs	r0, #0
}
 8002130:	b041      	add	sp, #260	@ 0x104
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >=5){
 8002134:	3c01      	subs	r4, #1
 8002136:	d1d5      	bne.n	80020e4 <close_connection+0x20>
 8002138:	e7f1      	b.n	800211e <close_connection+0x5a>
 800213a:	bf00      	nop
 800213c:	0800ef15 	.word	0x0800ef15
 8002140:	0800e9de 	.word	0x0800e9de
 8002144:	20000c80 	.word	0x20000c80
 8002148:	0800ef25 	.word	0x0800ef25
 800214c:	0800ecb5 	.word	0x0800ecb5

08002150 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002150:	b510      	push	{r4, lr}
 8002152:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8002154:	ab0d      	add	r3, sp, #52	@ 0x34
 8002156:	9304      	str	r3, [sp, #16]
 8002158:	ab0c      	add	r3, sp, #48	@ 0x30
 800215a:	9303      	str	r3, [sp, #12]
 800215c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	ab0a      	add	r3, sp, #40	@ 0x28
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	ab09      	add	r3, sp, #36	@ 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	aa07      	add	r2, sp, #28
 800216a:	ab08      	add	r3, sp, #32
 800216c:	4925      	ldr	r1, [pc, #148]	@ (8002204 <extract_time_CCLK+0xb4>)
 800216e:	f008 fb45 	bl	800a7fc <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002174:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8002176:	2a17      	cmp	r2, #23
		hour -= 24;
 8002178:	bfc3      	ittte	gt
 800217a:	3b17      	subgt	r3, #23
 800217c:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 800217e:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002180:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002182:	bfc4      	itt	gt
 8002184:	3301      	addgt	r3, #1
 8002186:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002188:	9b07      	ldr	r3, [sp, #28]
 800218a:	2b17      	cmp	r3, #23
 800218c:	dd37      	ble.n	80021fe <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 800218e:	4c1e      	ldr	r4, [pc, #120]	@ (8002208 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002190:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002192:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002194:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 8002196:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002198:	9b08      	ldr	r3, [sp, #32]
 800219a:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 800219c:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 800219e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 80021a0:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 80021a2:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 80021aa:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 80021ac:	f000 fdcc 	bl	8002d48 <set_time>
	set_date(year, month, day);
 80021b0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80021b4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80021b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80021bc:	f000 fde2 	bl	8002d84 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80021c0:	68a3      	ldr	r3, [r4, #8]
 80021c2:	9304      	str	r3, [sp, #16]
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	6963      	ldr	r3, [r4, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	69a3      	ldr	r3, [r4, #24]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <extract_time_CCLK+0xbc>)
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	a80e      	add	r0, sp, #56	@ 0x38
 80021dc:	f008 faba 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80021e0:	490b      	ldr	r1, [pc, #44]	@ (8002210 <extract_time_CCLK+0xc0>)
 80021e2:	480c      	ldr	r0, [pc, #48]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021e4:	f001 ffe2 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80021e8:	490b      	ldr	r1, [pc, #44]	@ (8002218 <extract_time_CCLK+0xc8>)
 80021ea:	480a      	ldr	r0, [pc, #40]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021ec:	f001 ffde 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80021f0:	4808      	ldr	r0, [pc, #32]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021f2:	a90e      	add	r1, sp, #56	@ 0x38
 80021f4:	f001 ffda 	bl	80041ac <uart_transmit_string>
	return 1;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	b02e      	add	sp, #184	@ 0xb8
 80021fc:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80021fe:	2000      	movs	r0, #0
 8002200:	e7fb      	b.n	80021fa <extract_time_CCLK+0xaa>
 8002202:	bf00      	nop
 8002204:	0800ef3e 	.word	0x0800ef3e
 8002208:	20000be8 	.word	0x20000be8
 800220c:	0800e935 	.word	0x0800e935
 8002210:	0800e96f 	.word	0x0800e96f
 8002214:	20001248 	.word	0x20001248
 8002218:	0800f638 	.word	0x0800f638

0800221c <getCurrentTime>:


int getCurrentTime(){
 800221c:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 800221e:	4818      	ldr	r0, [pc, #96]	@ (8002280 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002220:	4d18      	ldr	r5, [pc, #96]	@ (8002284 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8002222:	4e19      	ldr	r6, [pc, #100]	@ (8002288 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8002224:	f7fe fef6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002228:	2404      	movs	r4, #4
 800222a:	4818      	ldr	r0, [pc, #96]	@ (800228c <getCurrentTime+0x70>)
 800222c:	4629      	mov	r1, r5
 800222e:	f008 fbdd 	bl	800a9ec <strstr>
 8002232:	b190      	cbz	r0, 800225a <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8002234:	4814      	ldr	r0, [pc, #80]	@ (8002288 <getCurrentTime+0x6c>)
 8002236:	f7fe ff19 	bl	800106c <receive_response>
	int result_extract = extract_time_CCLK(response);
 800223a:	4814      	ldr	r0, [pc, #80]	@ (800228c <getCurrentTime+0x70>)
 800223c:	f7ff ff88 	bl	8002150 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002240:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 8002244:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002246:	2100      	movs	r1, #0
 8002248:	4810      	ldr	r0, [pc, #64]	@ (800228c <getCurrentTime+0x70>)
 800224a:	f008 fb7f 	bl	800a94c <memset>
	SIM_UART_ReInitializeRxDMA();
 800224e:	f7fe fef1 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8002252:	1e20      	subs	r0, r4, #0
 8002254:	bf18      	it	ne
 8002256:	2001      	movne	r0, #1
 8002258:	e00a      	b.n	8002270 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 800225a:	3c01      	subs	r4, #1
 800225c:	d109      	bne.n	8002272 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800225e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002262:	4621      	mov	r1, r4
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <getCurrentTime+0x70>)
 8002266:	f008 fb71 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 800226a:	f7fe fee3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800226e:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002270:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8002272:	4630      	mov	r0, r6
 8002274:	f7fe fefa 	bl	800106c <receive_response>
		osDelay(100);
 8002278:	2064      	movs	r0, #100	@ 0x64
 800227a:	f005 f82d 	bl	80072d8 <osDelay>
		count_check++;
 800227e:	e7d4      	b.n	800222a <getCurrentTime+0xe>
 8002280:	0800ef6c 	.word	0x0800ef6c
 8002284:	0800e9de 	.word	0x0800e9de
 8002288:	0800ef77 	.word	0x0800ef77
 800228c:	20000c80 	.word	0x20000c80

08002290 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	b0d4      	sub	sp, #336	@ 0x150
 8002296:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8002298:	22ff      	movs	r2, #255	@ 0xff
 800229a:	4601      	mov	r1, r0
 800229c:	a814      	add	r0, sp, #80	@ 0x50
 800229e:	f008 fb7c 	bl	800a99a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a2:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80022a4:	213b      	movs	r1, #59	@ 0x3b
 80022a6:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a8:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80022ac:	f008 fb88 	bl	800a9c0 <strrchr>
    if (lastSemicolon) {
 80022b0:	b100      	cbz	r0, 80022b4 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80022b2:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80022b4:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80022b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80022ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80022be:	9308      	str	r3, [sp, #32]
 80022c0:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80022c4:	9307      	str	r3, [sp, #28]
 80022c6:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80022ca:	9306      	str	r3, [sp, #24]
 80022cc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80022d0:	9305      	str	r3, [sp, #20]
 80022d2:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	f104 0308 	add.w	r3, r4, #8
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	1d23      	adds	r3, r4, #4
 80022e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80022e4:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80022e8:	f104 0310 	add.w	r3, r4, #16
 80022ec:	ad10      	add	r5, sp, #64	@ 0x40
 80022ee:	ae0f      	add	r6, sp, #60	@ 0x3c
 80022f0:	af0e      	add	r7, sp, #56	@ 0x38
 80022f2:	f104 0218 	add.w	r2, r4, #24
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4911      	ldr	r1, [pc, #68]	@ (8002340 <parseRMCString+0xb0>)
 80022fa:	950d      	str	r5, [sp, #52]	@ 0x34
 80022fc:	f104 0314 	add.w	r3, r4, #20
 8002300:	960c      	str	r6, [sp, #48]	@ 0x30
 8002302:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002304:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002308:	a814      	add	r0, sp, #80	@ 0x50
 800230a:	f008 fa77 	bl	800a7fc <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <parseRMCString+0xb4>)
 8002310:	4640      	mov	r0, r8
 8002312:	f7fd ff5d 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8002316:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800231a:	17d1      	asrs	r1, r2, #31
 800231c:	0409      	lsls	r1, r1, #16
 800231e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002322:	430b      	orrs	r3, r1
 8002324:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002326:	fab0 f080 	clz	r0, r0
 800232a:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800232c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002330:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8002334:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002338:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800233a:	b054      	add	sp, #336	@ 0x150
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002340:	0800ef81 	.word	0x0800ef81
 8002344:	0800efbb 	.word	0x0800efbb

08002348 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	460d      	mov	r5, r1
 800234c:	b0ab      	sub	sp, #172	@ 0xac
	char addr_out[10];
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 800234e:	4940      	ldr	r1, [pc, #256]	@ (8002450 <readFlash+0x108>)
RMCSTRUCT readFlash(uint32_t addr){
 8002350:	4604      	mov	r4, r0
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 8002352:	4840      	ldr	r0, [pc, #256]	@ (8002454 <readFlash+0x10c>)
 8002354:	f001 ff2a 	bl	80041ac <uart_transmit_string>
	sprintf(addr_out, "%08lx", (addr));
 8002358:	493f      	ldr	r1, [pc, #252]	@ (8002458 <readFlash+0x110>)
 800235a:	462a      	mov	r2, r5
 800235c:	a806      	add	r0, sp, #24
 800235e:	f008 fa2d 	bl	800a7bc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002366:	2208      	movs	r2, #8
 8002368:	a906      	add	r1, sp, #24
 800236a:	483a      	ldr	r0, [pc, #232]	@ (8002454 <readFlash+0x10c>)
 800236c:	f004 fe44 	bl	8006ff8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002374:	4939      	ldr	r1, [pc, #228]	@ (800245c <readFlash+0x114>)
 8002376:	4837      	ldr	r0, [pc, #220]	@ (8002454 <readFlash+0x10c>)
 8002378:	2201      	movs	r2, #1
 800237a:	f004 fe3d 	bl	8006ff8 <HAL_UART_Transmit>
	W25_Reset();
 800237e:	f001 f888 	bl	8003492 <W25_Reset>
	W25_ReadData(addr, flashBufferMailReceived, 128);
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	4936      	ldr	r1, [pc, #216]	@ (8002460 <readFlash+0x118>)
 8002386:	4628      	mov	r0, r5
 8002388:	f001 f9a4 	bl	80036d4 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <readFlash+0x11c>)
 800238e:	aa09      	add	r2, sp, #36	@ 0x24
 8002390:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8002394:	4616      	mov	r6, r2
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	4615      	mov	r5, r2
 800239c:	c503      	stmia	r5!, {r0, r1}
 800239e:	3308      	adds	r3, #8
 80023a0:	42bb      	cmp	r3, r7
 80023a2:	462a      	mov	r2, r5
 80023a4:	d1f7      	bne.n	8002396 <readFlash+0x4e>
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80023aa:	4630      	mov	r0, r6
 80023ac:	f7fd ff70 	bl	8000290 <strlen>
 80023b0:	4631      	mov	r1, r6
 80023b2:	b282      	uxth	r2, r0
 80023b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b8:	4826      	ldr	r0, [pc, #152]	@ (8002454 <readFlash+0x10c>)
 80023ba:	f004 fe1d 	bl	8006ff8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferMailReceived, sizeof(flashBufferMailReceived), 1000);
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	4926      	ldr	r1, [pc, #152]	@ (8002460 <readFlash+0x118>)
 80023c6:	4823      	ldr	r0, [pc, #140]	@ (8002454 <readFlash+0x10c>)
 80023c8:	f004 fe16 	bl	8006ff8 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferMailReceived, &rmc);
 80023cc:	a914      	add	r1, sp, #80	@ 0x50
 80023ce:	4824      	ldr	r0, [pc, #144]	@ (8002460 <readFlash+0x118>)
 80023d0:	f7ff ff5e 	bl	8002290 <parseRMCString>

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 80023d4:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	@ 0x60
 80023d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80023da:	4823      	ldr	r0, [pc, #140]	@ (8002468 <readFlash+0x120>)
 80023dc:	f001 fef6 	bl	80041cc <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80023e0:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	@ 0x54
 80023e4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80023e6:	4821      	ldr	r0, [pc, #132]	@ (800246c <readFlash+0x124>)
 80023e8:	f001 fef0 	bl	80041cc <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80023ec:	f89d 30a0 	ldrb.w	r3, [sp, #160]	@ 0xa0
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 80023f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023fa:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	481b      	ldr	r0, [pc, #108]	@ (8002470 <readFlash+0x128>)
 8002402:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8002406:	f001 fee1 	bl	80041cc <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 800240a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800240c:	f7fe f8ac 	bl	8000568 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4817      	ldr	r0, [pc, #92]	@ (8002474 <readFlash+0x12c>)
 8002416:	f001 fed9 	bl	80041cc <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 800241a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800241c:	f7fe f8a4 	bl	8000568 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4814      	ldr	r0, [pc, #80]	@ (8002478 <readFlash+0x130>)
 8002426:	f001 fed1 	bl	80041cc <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <readFlash+0x134>)
 800242c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800242e:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <readFlash+0x138>)
 8002430:	4814      	ldr	r0, [pc, #80]	@ (8002484 <readFlash+0x13c>)
 8002432:	2900      	cmp	r1, #0
 8002434:	bf0c      	ite	eq
 8002436:	4611      	moveq	r1, r2
 8002438:	4619      	movne	r1, r3
 800243a:	f001 fec7 	bl	80041cc <Debug_printf>

	return rmc;
 800243e:	2258      	movs	r2, #88	@ 0x58
 8002440:	a914      	add	r1, sp, #80	@ 0x50
 8002442:	4620      	mov	r0, r4
 8002444:	f009 f8db 	bl	800b5fe <memcpy>
}
 8002448:	4620      	mov	r0, r4
 800244a:	b02b      	add	sp, #172	@ 0xac
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244e:	bf00      	nop
 8002450:	0800efc9 	.word	0x0800efc9
 8002454:	20001248 	.word	0x20001248
 8002458:	0800f704 	.word	0x0800f704
 800245c:	0800f0eb 	.word	0x0800f0eb
 8002460:	20000b5c 	.word	0x20000b5c
 8002464:	0800f059 	.word	0x0800f059
 8002468:	0800efe8 	.word	0x0800efe8
 800246c:	0800effe 	.word	0x0800effe
 8002470:	0800f014 	.word	0x0800f014
 8002474:	0800f030 	.word	0x0800f030
 8002478:	0800f03d 	.word	0x0800f03d
 800247c:	0800efbb 	.word	0x0800efbb
 8002480:	0800efc1 	.word	0x0800efc1
 8002484:	0800f04b 	.word	0x0800f04b

08002488 <receiveRMCDataWithAddrGSM>:

void receiveRMCDataWithAddrGSM(){
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t output_buffer[70];
	GSM_MAIL_STRUCT *receivedData;
	int is_exist_rmc = 0;
	if(is_using_flash == 0){
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <receiveRMCDataWithAddrGSM+0x228>)
 800248c:	4e89      	ldr	r6, [pc, #548]	@ (80026b4 <receiveRMCDataWithAddrGSM+0x22c>)
 800248e:	681d      	ldr	r5, [r3, #0]
void receiveRMCDataWithAddrGSM(){
 8002490:	b0c7      	sub	sp, #284	@ 0x11c
	if(is_using_flash == 0){
 8002492:	2d00      	cmp	r5, #0
 8002494:	f040 80c0 	bne.w	8002618 <receiveRMCDataWithAddrGSM+0x190>
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002498:	4f87      	ldr	r7, [pc, #540]	@ (80026b8 <receiveRMCDataWithAddrGSM+0x230>)
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800249a:	4988      	ldr	r1, [pc, #544]	@ (80026bc <receiveRMCDataWithAddrGSM+0x234>)
 800249c:	4888      	ldr	r0, [pc, #544]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800249e:	f001 fe85 	bl	80041ac <uart_transmit_string>
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024a8:	a834      	add	r0, sp, #208	@ 0xd0
 80024aa:	f005 f811 	bl	80074d0 <osMailGet>
		if(evt.status == osEventMail){
 80024ae:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80ad 	bne.w	8002610 <receiveRMCDataWithAddrGSM+0x188>
			uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80024b6:	4983      	ldr	r1, [pc, #524]	@ (80026c4 <receiveRMCDataWithAddrGSM+0x23c>)
 80024b8:	4881      	ldr	r0, [pc, #516]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024ba:	f001 fe77 	bl	80041ac <uart_transmit_string>
			uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80024be:	4982      	ldr	r1, [pc, #520]	@ (80026c8 <receiveRMCDataWithAddrGSM+0x240>)
 80024c0:	487f      	ldr	r0, [pc, #508]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024c2:	f001 fe73 	bl	80041ac <uart_transmit_string>
			receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 80024c6:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
			char addr_out[11];
			sprintf(addr_out, "%08lx", receivedData->address);
 80024c8:	4980      	ldr	r1, [pc, #512]	@ (80026cc <receiveRMCDataWithAddrGSM+0x244>)
 80024ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80024cc:	a81f      	add	r0, sp, #124	@ 0x7c
 80024ce:	f008 f975 	bl	800a7bc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 10, 1000);
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	220a      	movs	r2, #10
 80024d8:	a91f      	add	r1, sp, #124	@ 0x7c
 80024da:	4879      	ldr	r0, [pc, #484]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024dc:	f004 fd8c 	bl	8006ff8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n\r\n", 1, 1000);
 80024e0:	497b      	ldr	r1, [pc, #492]	@ (80026d0 <receiveRMCDataWithAddrGSM+0x248>)
 80024e2:	4877      	ldr	r0, [pc, #476]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e8:	2201      	movs	r2, #1
 80024ea:	f004 fd85 	bl	8006ff8 <HAL_UART_Transmit>

			snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime SENDING TO SERVER at GSM: %d:%d:%d\n", receivedData->rmc.tim.hour, receivedData->rmc.tim.min, receivedData->rmc.tim.sec);
 80024ee:	68a3      	ldr	r3, [r4, #8]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	4a76      	ldr	r2, [pc, #472]	@ (80026d4 <receiveRMCDataWithAddrGSM+0x24c>)
 80024fa:	2146      	movs	r1, #70	@ 0x46
 80024fc:	a822      	add	r0, sp, #136	@ 0x88
 80024fe:	f008 f929 	bl	800a754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002502:	486f      	ldr	r0, [pc, #444]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002504:	a922      	add	r1, sp, #136	@ 0x88
 8002506:	f001 fe51 	bl	80041ac <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", receivedData->rmc.date.Day, receivedData->rmc.date.Mon, receivedData->rmc.date.Yr);
 800250a:	69a3      	ldr	r3, [r4, #24]
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <receiveRMCDataWithAddrGSM+0x250>)
 8002516:	2146      	movs	r1, #70	@ 0x46
 8002518:	a822      	add	r0, sp, #136	@ 0x88
 800251a:	f008 f91b 	bl	800a754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800251e:	4868      	ldr	r0, [pc, #416]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002520:	a922      	add	r1, sp, #136	@ 0x88
 8002522:	f001 fe43 	bl	80041ac <uart_transmit_string>
			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", receivedData->rmc.lcation.latitude, receivedData->rmc.lcation.NS, receivedData->rmc.lcation.longitude, receivedData->rmc.lcation.EW);
 8002526:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800252a:	9306      	str	r3, [sp, #24]
 800252c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002534:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800253e:	2146      	movs	r1, #70	@ 0x46
 8002540:	e9cd 2300 	strd	r2, r3, [sp]
 8002544:	a822      	add	r0, sp, #136	@ 0x88
 8002546:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <receiveRMCDataWithAddrGSM+0x254>)
 8002548:	f008 f904 	bl	800a754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800254c:	485c      	ldr	r0, [pc, #368]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800254e:	a922      	add	r1, sp, #136	@ 0x88
 8002550:	f001 fe2c 	bl	80041ac <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->rmc.speed, receivedData->rmc.course, receivedData->rmc.isValid);
 8002554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002556:	9304      	str	r3, [sp, #16]
 8002558:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800255a:	f7fe f805 	bl	8000568 <__aeabi_f2d>
 800255e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002562:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002564:	f7fe f800 	bl	8000568 <__aeabi_f2d>
 8002568:	4a5d      	ldr	r2, [pc, #372]	@ (80026e0 <receiveRMCDataWithAddrGSM+0x258>)
 800256a:	e9cd 0100 	strd	r0, r1, [sp]
 800256e:	2146      	movs	r1, #70	@ 0x46
 8002570:	a822      	add	r0, sp, #136	@ 0x88
 8002572:	f008 f8ef 	bl	800a754 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002576:	4852      	ldr	r0, [pc, #328]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002578:	a922      	add	r1, sp, #136	@ 0x88
 800257a:	f001 fe17 	bl	80041ac <uart_transmit_string>
			osMailFree(RMC_MailQGSMId, receivedData);
 800257e:	4621      	mov	r1, r4
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f004 ffde 	bl	8007542 <osMailFree>
			Debug_printf("Saving data to variable to send to the server\n");
 8002586:	4857      	ldr	r0, [pc, #348]	@ (80026e4 <receiveRMCDataWithAddrGSM+0x25c>)
 8002588:	f001 fe20 	bl	80041cc <Debug_printf>
			current_addr_gsm = receivedData->address;
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800258e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002590:	601a      	str	r2, [r3, #0]
			is_exist_rmc = 1;
			if(is_ready_to_send == 0 && mode == MAIL){
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002594:	6831      	ldr	r1, [r6, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	d108      	bne.n	80025ae <receiveRMCDataWithAddrGSM+0x126>
				mode = STORAGE;
 800259c:	2201      	movs	r2, #1
 800259e:	6032      	str	r2, [r6, #0]
				start_addr_not_ready = current_addr_gsm;
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <receiveRMCDataWithAddrGSM+0x268>)
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a4:	4853      	ldr	r0, [pc, #332]	@ (80026f4 <receiveRMCDataWithAddrGSM+0x26c>)
				start_addr_not_ready = current_addr_gsm;
 80025a6:	601a      	str	r2, [r3, #0]
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f001 fe0f 	bl	80041cc <Debug_printf>
			is_exist_rmc = 1;
 80025ae:	2501      	movs	r5, #1
		}
		else{
			Debug_printf("There is no address mail left\n");
		}
	}
	if(mode == MAIL){
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d132      	bne.n	800261c <receiveRMCDataWithAddrGSM+0x194>
		Debug_printf("\n\n -------------Inside GETTING FROM MAIL mode------------\n\n");
 80025b6:	4850      	ldr	r0, [pc, #320]	@ (80026f8 <receiveRMCDataWithAddrGSM+0x270>)
 80025b8:	f001 fe08 	bl	80041cc <Debug_printf>
		if(is_exist_rmc){
 80025bc:	2d00      	cmp	r5, #0
 80025be:	d025      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025c0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
			rmc_jt.speed = receivedData->rmc.speed;
 80025c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025ca:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 80025ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80025d2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
			rmc_jt.course = receivedData->rmc.course;
 80025d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 80025da:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 80025e2:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 80025ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 80025ee:	69a2      	ldr	r2, [r4, #24]
 80025f0:	619a      	str	r2, [r3, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 80025f2:	6962      	ldr	r2, [r4, #20]
 80025f4:	615a      	str	r2, [r3, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 80025f6:	6922      	ldr	r2, [r4, #16]
 80025f8:	611a      	str	r2, [r3, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	601a      	str	r2, [r3, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 80025fe:	6862      	ldr	r2, [r4, #4]
 8002600:	605a      	str	r2, [r3, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002602:	68a2      	ldr	r2, [r4, #8]
 8002604:	609a      	str	r2, [r3, #8]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
				if(is_in_sending)
					rmc_jt = readFlash(current_addr_not_ready);
				received_RMC = 1;
 8002606:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <receiveRMCDataWithAddrGSM+0x278>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
			}
		}

	}
}
 800260c:	b047      	add	sp, #284	@ 0x11c
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_printf("There is no address mail left\n");
 8002610:	483c      	ldr	r0, [pc, #240]	@ (8002704 <receiveRMCDataWithAddrGSM+0x27c>)
 8002612:	f001 fddb 	bl	80041cc <Debug_printf>
 8002616:	e7cb      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
	int is_exist_rmc = 0;
 8002618:	2500      	movs	r5, #0
 800261a:	e7c9      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
		Debug_printf("\n\n -------------Inside GETTING FROM FLASH mode------------\n\n");
 800261c:	483a      	ldr	r0, [pc, #232]	@ (8002708 <receiveRMCDataWithAddrGSM+0x280>)
 800261e:	f001 fdd5 	bl	80041cc <Debug_printf>
		if(is_ready_to_send){
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <receiveRMCDataWithAddrGSM+0x218>
			sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", start_addr_disconnect);
 800262a:	4c38      	ldr	r4, [pc, #224]	@ (800270c <receiveRMCDataWithAddrGSM+0x284>)
 800262c:	4938      	ldr	r1, [pc, #224]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	a834      	add	r0, sp, #208	@ 0xd0
 8002632:	f008 f8c3 	bl	800a7bc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263a:	2246      	movs	r2, #70	@ 0x46
 800263c:	a934      	add	r1, sp, #208	@ 0xd0
 800263e:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002640:	f004 fcda 	bl	8006ff8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002648:	4932      	ldr	r1, [pc, #200]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800264c:	2201      	movs	r2, #1
 800264e:	f004 fcd3 	bl	8006ff8 <HAL_UART_Transmit>
			memset(addr_out, 0x00, 70);
 8002652:	2246      	movs	r2, #70	@ 0x46
 8002654:	2100      	movs	r1, #0
 8002656:	a834      	add	r0, sp, #208	@ 0xd0
 8002658:	f008 f978 	bl	800a94c <memset>
			sprintf(addr_out, "Current Address RECEIVED FROM MAIL QUEUE: %08lx", current_addr_gsm);
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800265e:	492e      	ldr	r1, [pc, #184]	@ (8002718 <receiveRMCDataWithAddrGSM+0x290>)
 8002660:	681a      	ldr	r2, [r3, #0]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002662:	a834      	add	r0, sp, #208	@ 0xd0
 8002664:	f008 f8aa 	bl	800a7bc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266c:	2246      	movs	r2, #70	@ 0x46
 800266e:	a934      	add	r1, sp, #208	@ 0xd0
 8002670:	4813      	ldr	r0, [pc, #76]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002672:	f004 fcc1 	bl	8006ff8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	4926      	ldr	r1, [pc, #152]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800267e:	2201      	movs	r2, #1
 8002680:	f004 fcba 	bl	8006ff8 <HAL_UART_Transmit>
				if(is_in_sending)
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <receiveRMCDataWithAddrGSM+0x294>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0bc      	beq.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
					rmc_jt = readFlash(current_addr_not_ready);
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	a808      	add	r0, sp, #32
 8002690:	f7ff fe5a 	bl	8002348 <readFlash>
 8002694:	2258      	movs	r2, #88	@ 0x58
 8002696:	a908      	add	r1, sp, #32
 8002698:	4818      	ldr	r0, [pc, #96]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
 800269a:	f008 ffb0 	bl	800b5fe <memcpy>
 800269e:	e7b2      	b.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
			if(current_addr_not_ready != 0){
 80026a0:	4c1f      	ldr	r4, [pc, #124]	@ (8002720 <receiveRMCDataWithAddrGSM+0x298>)
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0b1      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	4919      	ldr	r1, [pc, #100]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 80026ac:	e7d9      	b.n	8002662 <receiveRMCDataWithAddrGSM+0x1da>
 80026ae:	bf00      	nop
 80026b0:	20000c60 	.word	0x20000c60
 80026b4:	20000c58 	.word	0x20000c58
 80026b8:	20000e04 	.word	0x20000e04
 80026bc:	0800f082 	.word	0x0800f082
 80026c0:	20001248 	.word	0x20001248
 80026c4:	0800f0a2 	.word	0x0800f0a2
 80026c8:	0800f0c5 	.word	0x0800f0c5
 80026cc:	0800f704 	.word	0x0800f704
 80026d0:	0800f0e9 	.word	0x0800f0e9
 80026d4:	0800f0ee 	.word	0x0800f0ee
 80026d8:	0800f119 	.word	0x0800f119
 80026dc:	0800f142 	.word	0x0800f142
 80026e0:	0800f177 	.word	0x0800f177
 80026e4:	0800f1b6 	.word	0x0800f1b6
 80026e8:	20000c54 	.word	0x20000c54
 80026ec:	20000c64 	.word	0x20000c64
 80026f0:	20000c48 	.word	0x20000c48
 80026f4:	0800f1e5 	.word	0x0800f1e5
 80026f8:	0800f232 	.word	0x0800f232
 80026fc:	20000be8 	.word	0x20000be8
 8002700:	20000c68 	.word	0x20000c68
 8002704:	0800f213 	.word	0x0800f213
 8002708:	0800f26e 	.word	0x0800f26e
 800270c:	20000c50 	.word	0x20000c50
 8002710:	0800f2ab 	.word	0x0800f2ab
 8002714:	0800f0eb 	.word	0x0800f0eb
 8002718:	0800f2ed 	.word	0x0800f2ed
 800271c:	20000c5c 	.word	0x20000c5c
 8002720:	20000c40 	.word	0x20000c40

08002724 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002724:	b510      	push	{r4, lr}
 8002726:	4601      	mov	r1, r0
	int result_send_location = send_location_to_server(0, location_info);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fb71 	bl	8001e10 <send_location_to_server>

	if(result_send_location){
 800272e:	b338      	cbz	r0, 8002780 <processUploadDataToServer+0x5c>
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002730:	4916      	ldr	r1, [pc, #88]	@ (800278c <processUploadDataToServer+0x68>)
 8002732:	4817      	ldr	r0, [pc, #92]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002734:	f001 fd3a 	bl	80041ac <uart_transmit_string>
		int result_check = check_data_sent_to_server(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fbf1 	bl	8001f20 <check_data_sent_to_server>
		if(result_check){
 800273e:	4604      	mov	r4, r0
 8002740:	b180      	cbz	r0, 8002764 <processUploadDataToServer+0x40>
			uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002742:	4914      	ldr	r1, [pc, #80]	@ (8002794 <processUploadDataToServer+0x70>)
 8002744:	4812      	ldr	r0, [pc, #72]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002746:	f001 fd31 	bl	80041ac <uart_transmit_string>
			receive_response("Check location report\n");
 800274a:	4813      	ldr	r0, [pc, #76]	@ (8002798 <processUploadDataToServer+0x74>)
 800274c:	f7fe fc8e 	bl	800106c <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002750:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002754:	2100      	movs	r1, #0
 8002756:	4811      	ldr	r0, [pc, #68]	@ (800279c <processUploadDataToServer+0x78>)
 8002758:	f008 f8f8 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 800275c:	f7fe fc6a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 1;
 8002760:	2001      	movs	r0, #1
	}
	else{
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
		return 0;
	}
}
 8002762:	bd10      	pop	{r4, pc}
			uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR  (CHECKING SENDING RESULT ERROR)\n");
 8002764:	490e      	ldr	r1, [pc, #56]	@ (80027a0 <processUploadDataToServer+0x7c>)
 8002766:	480a      	ldr	r0, [pc, #40]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002768:	f001 fd20 	bl	80041ac <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800276c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002770:	4621      	mov	r1, r4
 8002772:	480a      	ldr	r0, [pc, #40]	@ (800279c <processUploadDataToServer+0x78>)
 8002774:	f008 f8ea 	bl	800a94c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002778:	f7fe fc5c 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800277c:	2000      	movs	r0, #0
 800277e:	e7f0      	b.n	8002762 <processUploadDataToServer+0x3e>
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
 8002780:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <processUploadDataToServer+0x80>)
 8002782:	4803      	ldr	r0, [pc, #12]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002784:	f001 fd12 	bl	80041ac <uart_transmit_string>
		return 0;
 8002788:	e7f8      	b.n	800277c <processUploadDataToServer+0x58>
 800278a:	bf00      	nop
 800278c:	0800f31d 	.word	0x0800f31d
 8002790:	20001248 	.word	0x20001248
 8002794:	0800f34d 	.word	0x0800f34d
 8002798:	0800f35e 	.word	0x0800f35e
 800279c:	20000c80 	.word	0x20000c80
 80027a0:	0800f375 	.word	0x0800f375
 80027a4:	0800f3a5 	.word	0x0800f3a5

080027a8 <StartGSM>:

void StartGSM(void const * argument)
{
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027ac:	4987      	ldr	r1, [pc, #540]	@ (80029cc <StartGSM+0x224>)
 80027ae:	4888      	ldr	r0, [pc, #544]	@ (80029d0 <StartGSM+0x228>)
					process = 4;
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
					SIM_UART_ReInitializeRxDMA();
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80027b0:	4c87      	ldr	r4, [pc, #540]	@ (80029d0 <StartGSM+0x228>)
{
 80027b2:	b0d9      	sub	sp, #356	@ 0x164
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027b4:	f001 fcfa 	bl	80041ac <uart_transmit_string>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80027b8:	4a86      	ldr	r2, [pc, #536]	@ (80029d4 <StartGSM+0x22c>)
 80027ba:	4987      	ldr	r1, [pc, #540]	@ (80029d8 <StartGSM+0x230>)
 80027bc:	4887      	ldr	r0, [pc, #540]	@ (80029dc <StartGSM+0x234>)
 80027be:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027c2:	f000 fab3 	bl	8002d2c <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80027c6:	a806      	add	r0, sp, #24
 80027c8:	f7fe fbd2 	bl	8000f70 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 80027cc:	a815      	add	r0, sp, #84	@ 0x54
 80027ce:	f7fe fbf5 	bl	8000fbc <create_location_info_report>
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027d2:	220b      	movs	r2, #11
 80027d4:	2304      	movs	r3, #4
 80027d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027da:	2100      	movs	r1, #0
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027dc:	ab02      	add	r3, sp, #8
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027de:	a803      	add	r0, sp, #12
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027e0:	9305      	str	r3, [sp, #20]
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027e2:	f004 fe1a 	bl	800741a <osMailCreate>
 80027e6:	4b7e      	ldr	r3, [pc, #504]	@ (80029e0 <StartGSM+0x238>)
 80027e8:	6018      	str	r0, [r3, #0]
	init_SIM_module();
 80027ea:	f7fe fc69 	bl	80010c0 <init_SIM_module>
	int is_set_uniqueID = 0;
 80027ee:	2700      	movs	r7, #0
	int process = 0;
 80027f0:	463e      	mov	r6, r7
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80027f2:	487c      	ldr	r0, [pc, #496]	@ (80029e4 <StartGSM+0x23c>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027fa:	f002 fca5 	bl	8005148 <HAL_GPIO_WritePin>
		osDelay(300);
 80027fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002802:	f004 fd69 	bl	80072d8 <osDelay>
		switch(process){
 8002806:	2e08      	cmp	r6, #8
 8002808:	d84f      	bhi.n	80028aa <StartGSM+0x102>
 800280a:	e8df f016 	tbh	[pc, r6, lsl #1]
 800280e:	0009      	.short	0x0009
 8002810:	00610022 	.word	0x00610022
 8002814:	00a9007a 	.word	0x00a9007a
 8002818:	00d100c4 	.word	0x00d100c4
 800281c:	0233010f 	.word	0x0233010f
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002820:	4971      	ldr	r1, [pc, #452]	@ (80029e8 <StartGSM+0x240>)
 8002822:	4620      	mov	r0, r4
 8002824:	f001 fcc2 	bl	80041ac <uart_transmit_string>
				isReady = first_check_SIM();
 8002828:	f7fe fd1c 	bl	8001264 <first_check_SIM>
				if(isReady) process++;
 800282c:	4601      	mov	r1, r0
 800282e:	2800      	cmp	r0, #0
 8002830:	f040 8094 	bne.w	800295c <StartGSM+0x1b4>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002834:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002838:	4866      	ldr	r0, [pc, #408]	@ (80029d4 <StartGSM+0x22c>)
 800283a:	f008 f887 	bl	800a94c <memset>
					SIM_UART_ReInitializeRxDMA();
 800283e:	f7fe fbf9 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002842:	496a      	ldr	r1, [pc, #424]	@ (80029ec <StartGSM+0x244>)
 8002844:	4620      	mov	r0, r4
 8002846:	f001 fcb1 	bl	80041ac <uart_transmit_string>
							process++;
 800284a:	2500      	movs	r5, #0
					reboot_SIM_module();
 800284c:	f7fe fc52 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 8002850:	e02a      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002852:	4967      	ldr	r1, [pc, #412]	@ (80029f0 <StartGSM+0x248>)
 8002854:	4620      	mov	r0, r4
 8002856:	f001 fca9 	bl	80041ac <uart_transmit_string>
				osDelay(100);
 800285a:	2064      	movs	r0, #100	@ 0x64
 800285c:	f004 fd3c 	bl	80072d8 <osDelay>
				int check_SIM = check_SIM_ready();
 8002860:	f7fe fde6 	bl	8001430 <check_SIM_ready>
 8002864:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0){
 8002866:	b957      	cbnz	r7, 800287e <StartGSM+0xd6>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002868:	4b62      	ldr	r3, [pc, #392]	@ (80029f4 <StartGSM+0x24c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	889b      	ldrh	r3, [r3, #4]
 800286e:	f8cd 201d 	str.w	r2, [sp, #29]
 8002872:	f8ad 3021 	strh.w	r3, [sp, #33]	@ 0x21
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002876:	f8cd 2059 	str.w	r2, [sp, #89]	@ 0x59
 800287a:	f8ad 305d 	strh.w	r3, [sp, #93]	@ 0x5d
				osDelay(150);
 800287e:	2096      	movs	r0, #150	@ 0x96
 8002880:	f004 fd2a 	bl	80072d8 <osDelay>
				if (check_SIM == 0){
 8002884:	2d00      	cmp	r5, #0
 8002886:	f040 8209 	bne.w	8002c9c <StartGSM+0x4f4>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800288a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800288e:	4629      	mov	r1, r5
 8002890:	4850      	ldr	r0, [pc, #320]	@ (80029d4 <StartGSM+0x22c>)
 8002892:	f008 f85b 	bl	800a94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002896:	f7fe fbcd 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 800289a:	4957      	ldr	r1, [pc, #348]	@ (80029f8 <StartGSM+0x250>)
 800289c:	4620      	mov	r0, r4
 800289e:	f001 fc85 	bl	80041ac <uart_transmit_string>
					reboot_SIM_module();
 80028a2:	f7fe fc27 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 80028a6:	4637      	mov	r7, r6
 80028a8:	462e      	mov	r6, r5
				}
				break;
		}
		receiveRMCDataWithAddrGSM();
 80028aa:	f7ff fded 	bl	8002488 <receiveRMCDataWithAddrGSM>

		Debug_printf("\nHello from GSM\n");
 80028ae:	4853      	ldr	r0, [pc, #332]	@ (80029fc <StartGSM+0x254>)
 80028b0:	f001 fc8c 	bl	80041cc <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	484b      	ldr	r0, [pc, #300]	@ (80029e4 <StartGSM+0x23c>)
 80028b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028bc:	f002 fc44 	bl	8005148 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80028c0:	4620      	mov	r0, r4
 80028c2:	494f      	ldr	r1, [pc, #316]	@ (8002a00 <StartGSM+0x258>)
 80028c4:	f001 fc72 	bl	80041ac <uart_transmit_string>
		osDelay(200);
 80028c8:	20c8      	movs	r0, #200	@ 0xc8
 80028ca:	f004 fd05 	bl	80072d8 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80028ce:	e790      	b.n	80027f2 <StartGSM+0x4a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80028d0:	494c      	ldr	r1, [pc, #304]	@ (8002a04 <StartGSM+0x25c>)
 80028d2:	4620      	mov	r0, r4
 80028d4:	f001 fc6a 	bl	80041ac <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028dc:	2100      	movs	r1, #0
 80028de:	483d      	ldr	r0, [pc, #244]	@ (80029d4 <StartGSM+0x22c>)
 80028e0:	f008 f834 	bl	800a94c <memset>
				SIM_UART_ReInitializeRxDMA();
 80028e4:	f7fe fba6 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7fe ff03 	bl	80016f4 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028f2:	2100      	movs	r1, #0
 80028f4:	4837      	ldr	r0, [pc, #220]	@ (80029d4 <StartGSM+0x22c>)
 80028f6:	f008 f829 	bl	800a94c <memset>
				process++;
 80028fa:	2503      	movs	r5, #3
				SIM_UART_ReInitializeRxDMA();
 80028fc:	f7fe fb9a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				break;
 8002900:	e7d2      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002902:	4941      	ldr	r1, [pc, #260]	@ (8002a08 <StartGSM+0x260>)
 8002904:	4620      	mov	r0, r4
 8002906:	f001 fc51 	bl	80041ac <uart_transmit_string>
				int receive_activate = activate_context(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f7fe ff44 	bl	8001798 <activate_context>
				if(receive_activate){
 8002910:	4606      	mov	r6, r0
 8002912:	b190      	cbz	r0, 800293a <StartGSM+0x192>
					getCurrentTime();
 8002914:	f7ff fc82 	bl	800221c <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002918:	493c      	ldr	r1, [pc, #240]	@ (8002a0c <StartGSM+0x264>)
 800291a:	4620      	mov	r0, r4
 800291c:	f001 fc46 	bl	80041ac <uart_transmit_string>
					osDelay(200);
 8002920:	20c8      	movs	r0, #200	@ 0xc8
 8002922:	f004 fcd9 	bl	80072d8 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002926:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800292a:	2100      	movs	r1, #0
 800292c:	4829      	ldr	r0, [pc, #164]	@ (80029d4 <StartGSM+0x22c>)
 800292e:	f008 f80d 	bl	800a94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002932:	f7fe fb7f 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002936:	2504      	movs	r5, #4
 8002938:	e7b6      	b.n	80028a8 <StartGSM+0x100>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 800293a:	4935      	ldr	r1, [pc, #212]	@ (8002a10 <StartGSM+0x268>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800293c:	4620      	mov	r0, r4
 800293e:	f001 fc35 	bl	80041ac <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002942:	2001      	movs	r0, #1
 8002944:	f7fe ff9e 	bl	8001884 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002948:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 800294c:	4605      	mov	r5, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800294e:	4631      	mov	r1, r6
 8002950:	4820      	ldr	r0, [pc, #128]	@ (80029d4 <StartGSM+0x22c>)
 8002952:	f007 fffb 	bl	800a94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002956:	f7fe fb6d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 800295a:	b1c5      	cbz	r5, 800298e <StartGSM+0x1e6>
					if (receive_deactivate) process = 1;
 800295c:	2501      	movs	r5, #1
 800295e:	e7a3      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002960:	492c      	ldr	r1, [pc, #176]	@ (8002a14 <StartGSM+0x26c>)
 8002962:	4620      	mov	r0, r4
 8002964:	f001 fc22 	bl	80041ac <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002968:	2300      	movs	r3, #0
 800296a:	461a      	mov	r2, r3
 800296c:	4619      	mov	r1, r3
 800296e:	2001      	movs	r0, #1
 8002970:	f7fe ffd4 	bl	800191c <open_socket_service>
				if(received_res){
 8002974:	4606      	mov	r6, r0
 8002976:	b140      	cbz	r0, 800298a <StartGSM+0x1e2>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 8002978:	4927      	ldr	r1, [pc, #156]	@ (8002a18 <StartGSM+0x270>)
 800297a:	4620      	mov	r0, r4
 800297c:	f001 fc16 	bl	80041ac <uart_transmit_string>
					check_socket_connection(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff f883 	bl	8001a8c <check_socket_connection>
					process++;
 8002986:	2505      	movs	r5, #5
 8002988:	e78e      	b.n	80028a8 <StartGSM+0x100>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800298a:	4924      	ldr	r1, [pc, #144]	@ (8002a1c <StartGSM+0x274>)
 800298c:	e7d6      	b.n	800293c <StartGSM+0x194>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800298e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002992:	4629      	mov	r1, r5
 8002994:	e750      	b.n	8002838 <StartGSM+0x90>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002996:	4922      	ldr	r1, [pc, #136]	@ (8002a20 <StartGSM+0x278>)
 8002998:	4620      	mov	r0, r4
 800299a:	f001 fc07 	bl	80041ac <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 800299e:	a906      	add	r1, sp, #24
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff f9c3 	bl	8001d2c <login_to_server>
				if(result_send_login){
 80029a6:	2800      	cmp	r0, #0
 80029a8:	f040 817b 	bne.w	8002ca2 <StartGSM+0x4fa>
				else process = 8;
 80029ac:	2508      	movs	r5, #8
 80029ae:	e77b      	b.n	80028a8 <StartGSM+0x100>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 80029b0:	4620      	mov	r0, r4
 80029b2:	491c      	ldr	r1, [pc, #112]	@ (8002a24 <StartGSM+0x27c>)
 80029b4:	f001 fbfa 	bl	80041ac <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fab1 	bl	8001f20 <check_data_sent_to_server>
				if(result_check_login){
 80029be:	2800      	cmp	r0, #0
 80029c0:	d0f4      	beq.n	80029ac <StartGSM+0x204>
					receive_response("Check terminal register\n");
 80029c2:	4819      	ldr	r0, [pc, #100]	@ (8002a28 <StartGSM+0x280>)
 80029c4:	f7fe fb52 	bl	800106c <receive_response>
					process++;
 80029c8:	2507      	movs	r5, #7
 80029ca:	e76d      	b.n	80028a8 <StartGSM+0x100>
 80029cc:	0800f3c4 	.word	0x0800f3c4
 80029d0:	20001248 	.word	0x20001248
 80029d4:	20000c80 	.word	0x20000c80
 80029d8:	20001138 	.word	0x20001138
 80029dc:	20000c70 	.word	0x20000c70
 80029e0:	20000e00 	.word	0x20000e00
 80029e4:	48000800 	.word	0x48000800
 80029e8:	0800f3e9 	.word	0x0800f3e9
 80029ec:	0800f3f7 	.word	0x0800f3f7
 80029f0:	0800f40d 	.word	0x0800f40d
 80029f4:	20000bdc 	.word	0x20000bdc
 80029f8:	0800f426 	.word	0x0800f426
 80029fc:	0800f883 	.word	0x0800f883
 8002a00:	0800f637 	.word	0x0800f637
 8002a04:	0800f43b 	.word	0x0800f43b
 8002a08:	0800f463 	.word	0x0800f463
 8002a0c:	0800f48a 	.word	0x0800f48a
 8002a10:	0800f4ad 	.word	0x0800f4ad
 8002a14:	0800f4ca 	.word	0x0800f4ca
 8002a18:	0800f4f0 	.word	0x0800f4f0
 8002a1c:	0800f510 	.word	0x0800f510
 8002a20:	0800f52a 	.word	0x0800f52a
 8002a24:	0800f55a 	.word	0x0800f55a
 8002a28:	0800f581 	.word	0x0800f581
				is_in_sending = 1;
 8002a2c:	4b9e      	ldr	r3, [pc, #632]	@ (8002ca8 <StartGSM+0x500>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a2e:	499f      	ldr	r1, [pc, #636]	@ (8002cac <StartGSM+0x504>)
				is_in_sending = 1;
 8002a30:	2501      	movs	r5, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a32:	4620      	mov	r0, r4
				is_in_sending = 1;
 8002a34:	601d      	str	r5, [r3, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a36:	f001 fbb9 	bl	80041ac <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002a3a:	f7ff fbef 	bl	800221c <getCurrentTime>
				if(result_get_current == 0){
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d0b4      	beq.n	80029ac <StartGSM+0x204>
				end_addr_not_ready = current_addr_gsm;
 8002a42:	4e9b      	ldr	r6, [pc, #620]	@ (8002cb0 <StartGSM+0x508>)
 8002a44:	f8df a2d4 	ldr.w	sl, [pc, #724]	@ 8002d1c <StartGSM+0x574>
 8002a48:	6833      	ldr	r3, [r6, #0]
 8002a4a:	f8ca 3000 	str.w	r3, [sl]
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a4e:	f8da 2000 	ldr.w	r2, [sl]
 8002a52:	4998      	ldr	r1, [pc, #608]	@ (8002cb4 <StartGSM+0x50c>)
					if(is_ready_to_send == 0){
 8002a54:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8002d20 <StartGSM+0x578>
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a58:	a826      	add	r0, sp, #152	@ 0x98
 8002a5a:	f007 feaf 	bl	800a7bc <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a62:	2246      	movs	r2, #70	@ 0x46
 8002a64:	a926      	add	r1, sp, #152	@ 0x98
 8002a66:	4620      	mov	r0, r4
 8002a68:	f004 fac6 	bl	8006ff8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a6c:	462a      	mov	r2, r5
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	4991      	ldr	r1, [pc, #580]	@ (8002cb8 <StartGSM+0x510>)
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002a74:	4d91      	ldr	r5, [pc, #580]	@ (8002cbc <StartGSM+0x514>)
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a76:	4620      	mov	r0, r4
 8002a78:	f004 fabe 	bl	8006ff8 <HAL_UART_Transmit>
				current_addr_not_ready = start_addr_not_ready;
 8002a7c:	4b90      	ldr	r3, [pc, #576]	@ (8002cc0 <StartGSM+0x518>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b90      	ldr	r3, [pc, #576]	@ (8002cc4 <StartGSM+0x51c>)
 8002a82:	601a      	str	r2, [r3, #0]
					if(is_ready_to_send == 0){
 8002a84:	f8d8 b000 	ldr.w	fp, [r8]
 8002a88:	f1bb 0f00 	cmp.w	fp, #0
 8002a8c:	f040 80b0 	bne.w	8002bf0 <StartGSM+0x448>
						sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002a90:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8002cc4 <StartGSM+0x51c>
 8002a94:	498c      	ldr	r1, [pc, #560]	@ (8002cc8 <StartGSM+0x520>)
 8002a96:	f8d9 2000 	ldr.w	r2, [r9]
 8002a9a:	a838      	add	r0, sp, #224	@ 0xe0
 8002a9c:	f007 fe8e 	bl	800a7bc <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa4:	2246      	movs	r2, #70	@ 0x46
 8002aa6:	a938      	add	r1, sp, #224	@ 0xe0
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f004 faa5 	bl	8006ff8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4980      	ldr	r1, [pc, #512]	@ (8002cb8 <StartGSM+0x510>)
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f004 fa9e 	bl	8006ff8 <HAL_UART_Transmit>
						if(current_addr_not_ready <= end_addr_not_ready){
 8002abc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ac0:	f8da 3000 	ldr.w	r3, [sl]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <StartGSM+0x524>)
 8002ac8:	f04f 0201 	mov.w	r2, #1
 8002acc:	f200 8085 	bhi.w	8002bda <StartGSM+0x432>
							is_using_flash = 1;
 8002ad0:	601a      	str	r2, [r3, #0]
							receiveRMCDataWithAddrGSM();
 8002ad2:	f7ff fcd9 	bl	8002488 <receiveRMCDataWithAddrGSM>
							current_addr_not_ready += 128;
 8002ad6:	f8d9 3000 	ldr.w	r3, [r9]
 8002ada:	3380      	adds	r3, #128	@ 0x80
 8002adc:	f8c9 3000 	str.w	r3, [r9]
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002ae0:	682a      	ldr	r2, [r5, #0]
 8002ae2:	6833      	ldr	r3, [r6, #0]
 8002ae4:	f8df 923c 	ldr.w	r9, [pc, #572]	@ 8002d24 <StartGSM+0x57c>
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10a      	bne.n	8002b02 <StartGSM+0x35a>
 8002aec:	4b78      	ldr	r3, [pc, #480]	@ (8002cd0 <StartGSM+0x528>)
 8002aee:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <StartGSM+0x524>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	d104      	bne.n	8002b02 <StartGSM+0x35a>
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002af8:	4876      	ldr	r0, [pc, #472]	@ (8002cd4 <StartGSM+0x52c>)
						received_RMC = 0;
 8002afa:	f8c9 3000 	str.w	r3, [r9]
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002afe:	f001 fb65 	bl	80041cc <Debug_printf>
					if(received_RMC == 1){
 8002b02:	f8d9 3000 	ldr.w	r3, [r9]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d163      	bne.n	8002bd2 <StartGSM+0x42a>
						received_RMC = 0;
 8002b0a:	2300      	movs	r3, #0
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b0c:	4972      	ldr	r1, [pc, #456]	@ (8002cd8 <StartGSM+0x530>)
						received_RMC = 0;
 8002b0e:	f8c9 3000 	str.w	r3, [r9]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b12:	4620      	mov	r0, r4
 8002b14:	f001 fb4a 	bl	80041ac <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002b18:	a815      	add	r0, sp, #84	@ 0x54
 8002b1a:	f7fe fb19 	bl	8001150 <save_rmc_to_location_info>
						if(is_ready_to_send == 1){
 8002b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d16a      	bne.n	8002bfc <StartGSM+0x454>
							Debug_printf("Current stack address to be sent to the server: \n");
 8002b26:	486d      	ldr	r0, [pc, #436]	@ (8002cdc <StartGSM+0x534>)
 8002b28:	f001 fb50 	bl	80041cc <Debug_printf>
							if(mode == MAIL)
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <StartGSM+0x538>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d160      	bne.n	8002bf6 <StartGSM+0x44e>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx", current_addr_gsm);
 8002b34:	6832      	ldr	r2, [r6, #0]
 8002b36:	496b      	ldr	r1, [pc, #428]	@ (8002ce4 <StartGSM+0x53c>)
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002b38:	a838      	add	r0, sp, #224	@ 0xe0
 8002b3a:	f007 fe3f 	bl	800a7bc <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 128, 1000);
 8002b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	a938      	add	r1, sp, #224	@ 0xe0
 8002b46:	4620      	mov	r0, r4
 8002b48:	f004 fa56 	bl	8006ff8 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002b4c:	495a      	ldr	r1, [pc, #360]	@ (8002cb8 <StartGSM+0x510>)
 8002b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b52:	2201      	movs	r2, #1
 8002b54:	4620      	mov	r0, r4
 8002b56:	f004 fa4f 	bl	8006ff8 <HAL_UART_Transmit>
						int result_final = processUploadDataToServer(&location_info);
 8002b5a:	a815      	add	r0, sp, #84	@ 0x54
 8002b5c:	f7ff fde2 	bl	8002724 <processUploadDataToServer>
						if(result_final == 1){
 8002b60:	2801      	cmp	r0, #1
 8002b62:	d155      	bne.n	8002c10 <StartGSM+0x468>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b64:	4960      	ldr	r1, [pc, #384]	@ (8002ce8 <StartGSM+0x540>)
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b66:	f8df 9178 	ldr.w	r9, [pc, #376]	@ 8002ce0 <StartGSM+0x538>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f001 fb1e 	bl	80041ac <uart_transmit_string>
							receive_response("Check location report\n");
 8002b70:	485e      	ldr	r0, [pc, #376]	@ (8002cec <StartGSM+0x544>)
 8002b72:	f7fe fa7b 	bl	800106c <receive_response>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	485c      	ldr	r0, [pc, #368]	@ (8002cf0 <StartGSM+0x548>)
 8002b7e:	f007 fee5 	bl	800a94c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002b82:	f7fe fa57 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b86:	f8d9 3000 	ldr.w	r3, [r9]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d121      	bne.n	8002bd2 <StartGSM+0x42a>
 8002b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d11d      	bne.n	8002bd2 <StartGSM+0x42a>
								is_disconnect = 0;
 8002b96:	494e      	ldr	r1, [pc, #312]	@ (8002cd0 <StartGSM+0x528>)
								end_addr_disconnect = current_addr_gsm;
 8002b98:	f8df b18c 	ldr.w	fp, [pc, #396]	@ 8002d28 <StartGSM+0x580>
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002b9c:	4855      	ldr	r0, [pc, #340]	@ (8002cf4 <StartGSM+0x54c>)
 8002b9e:	9301      	str	r3, [sp, #4]
								is_disconnect = 0;
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	600a      	str	r2, [r1, #0]
								end_addr_disconnect = current_addr_gsm;
 8002ba4:	6831      	ldr	r1, [r6, #0]
 8002ba6:	f8cb 1000 	str.w	r1, [fp]
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002baa:	f8db 1000 	ldr.w	r1, [fp]
 8002bae:	f001 fb0d 	bl	80041cc <Debug_printf>
								if(start_addr_disconnect >= (end_addr_disconnect)){
 8002bb2:	6828      	ldr	r0, [r5, #0]
 8002bb4:	f8db 1000 	ldr.w	r1, [fp]
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8002ccc <StartGSM+0x524>
 8002bbe:	4288      	cmp	r0, r1
 8002bc0:	d320      	bcc.n	8002c04 <StartGSM+0x45c>
									Debug_printf("\n\n\n---------------Starting to get catch-up location data from MAIL QUEUE-------------\n\n\n\n");
 8002bc2:	484d      	ldr	r0, [pc, #308]	@ (8002cf8 <StartGSM+0x550>)
 8002bc4:	f001 fb02 	bl	80041cc <Debug_printf>
									mode = MAIL;
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c9 2000 	str.w	r2, [r9]
									is_using_flash = 0;
 8002bce:	f8cb 2000 	str.w	r2, [fp]
					osDelay(200);
 8002bd2:	20c8      	movs	r0, #200	@ 0xc8
 8002bd4:	f004 fb80 	bl	80072d8 <osDelay>
					if(is_ready_to_send == 0){
 8002bd8:	e754      	b.n	8002a84 <StartGSM+0x2dc>
							is_ready_to_send = 1;
 8002bda:	f8c8 2000 	str.w	r2, [r8]
							mode = MAIL;
 8002bde:	4a40      	ldr	r2, [pc, #256]	@ (8002ce0 <StartGSM+0x538>)
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002be0:	4846      	ldr	r0, [pc, #280]	@ (8002cfc <StartGSM+0x554>)
							mode = MAIL;
 8002be2:	f8c2 b000 	str.w	fp, [r2]
							is_using_flash = 0;
 8002be6:	f8c3 b000 	str.w	fp, [r3]
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002bea:	f001 faef 	bl	80041cc <Debug_printf>
 8002bee:	e777      	b.n	8002ae0 <StartGSM+0x338>
						receiveRMCDataWithAddrGSM();
 8002bf0:	f7ff fc4a 	bl	8002488 <receiveRMCDataWithAddrGSM>
 8002bf4:	e774      	b.n	8002ae0 <StartGSM+0x338>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM FLASH MEMORY)  %08lx",  start_addr_disconnect);
 8002bf6:	682a      	ldr	r2, [r5, #0]
 8002bf8:	4941      	ldr	r1, [pc, #260]	@ (8002d00 <StartGSM+0x558>)
 8002bfa:	e79d      	b.n	8002b38 <StartGSM+0x390>
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <StartGSM+0x51c>)
 8002bfe:	4941      	ldr	r1, [pc, #260]	@ (8002d04 <StartGSM+0x55c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	e799      	b.n	8002b38 <StartGSM+0x390>
									is_using_flash = 1;
 8002c04:	f8cb 3000 	str.w	r3, [fp]
									start_addr_disconnect += 128;
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	3380      	adds	r3, #128	@ 0x80
 8002c0c:	602b      	str	r3, [r5, #0]
 8002c0e:	e7e0      	b.n	8002bd2 <StartGSM+0x42a>
						else if(result_final == 2){
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d112      	bne.n	8002c3a <StartGSM+0x492>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c14:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4835      	ldr	r0, [pc, #212]	@ (8002cf0 <StartGSM+0x548>)
 8002c1c:	f007 fe96 	bl	800a94c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002c20:	f7fe fa08 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002c24:	4938      	ldr	r1, [pc, #224]	@ (8002d08 <StartGSM+0x560>)
 8002c26:	4839      	ldr	r0, [pc, #228]	@ (8002d0c <StartGSM+0x564>)
 8002c28:	f001 fac0 	bl	80041ac <uart_transmit_string>
							reboot_SIM_module();
 8002c2c:	f7fe fa62 	bl	80010f4 <reboot_SIM_module>
							process = 0;
 8002c30:	2500      	movs	r5, #0
				is_in_sending = 0;
 8002c32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <StartGSM+0x500>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	6013      	str	r3, [r2, #0]
				break;
 8002c38:	e636      	b.n	80028a8 <StartGSM+0x100>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002c3a:	4935      	ldr	r1, [pc, #212]	@ (8002d10 <StartGSM+0x568>)
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f001 fab5 	bl	80041ac <uart_transmit_string>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c42:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c46:	2100      	movs	r1, #0
 8002c48:	4829      	ldr	r0, [pc, #164]	@ (8002cf0 <StartGSM+0x548>)
 8002c4a:	f007 fe7f 	bl	800a94c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002c4e:	f7fe f9f1 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(is_disconnect == 0){
 8002c52:	491f      	ldr	r1, [pc, #124]	@ (8002cd0 <StartGSM+0x528>)
 8002c54:	680a      	ldr	r2, [r1, #0]
 8002c56:	b95a      	cbnz	r2, 8002c70 <StartGSM+0x4c8>
								start_addr_disconnect = current_addr_gsm;
 8002c58:	6833      	ldr	r3, [r6, #0]
 8002c5a:	602b      	str	r3, [r5, #0]
								is_disconnect = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	600b      	str	r3, [r1, #0]
								is_using_flash = 0;
 8002c60:	491a      	ldr	r1, [pc, #104]	@ (8002ccc <StartGSM+0x524>)
								Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002c62:	482c      	ldr	r0, [pc, #176]	@ (8002d14 <StartGSM+0x56c>)
								is_using_flash = 0;
 8002c64:	600a      	str	r2, [r1, #0]
								mode = STORAGE;
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <StartGSM+0x538>)
								Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002c68:	6829      	ldr	r1, [r5, #0]
								mode = STORAGE;
 8002c6a:	6013      	str	r3, [r2, #0]
								Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002c6c:	f001 faae 	bl	80041cc <Debug_printf>
							process++;
 8002c70:	2508      	movs	r5, #8
 8002c72:	e7de      	b.n	8002c32 <StartGSM+0x48a>
				int result_close = close_connection(0);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff fa25 	bl	80020c4 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8002c7e:	4601      	mov	r1, r0
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f43f add9 	beq.w	8002838 <StartGSM+0x90>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c86:	2100      	movs	r1, #0
 8002c88:	4819      	ldr	r0, [pc, #100]	@ (8002cf0 <StartGSM+0x548>)
 8002c8a:	f007 fe5f 	bl	800a94c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002c8e:	f7fe f9d1 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002c92:	4921      	ldr	r1, [pc, #132]	@ (8002d18 <StartGSM+0x570>)
 8002c94:	4620      	mov	r0, r4
 8002c96:	f001 fa89 	bl	80041ac <uart_transmit_string>
					process = 4;
 8002c9a:	e64c      	b.n	8002936 <StartGSM+0x18e>
 8002c9c:	4637      	mov	r7, r6
				else process++;
 8002c9e:	2502      	movs	r5, #2
 8002ca0:	e602      	b.n	80028a8 <StartGSM+0x100>
					process++;
 8002ca2:	2506      	movs	r5, #6
 8002ca4:	e600      	b.n	80028a8 <StartGSM+0x100>
 8002ca6:	bf00      	nop
 8002ca8:	20000c5c 	.word	0x20000c5c
 8002cac:	0800f59a 	.word	0x0800f59a
 8002cb0:	20000c54 	.word	0x20000c54
 8002cb4:	0800f5ba 	.word	0x0800f5ba
 8002cb8:	0800f0eb 	.word	0x0800f0eb
 8002cbc:	20000c50 	.word	0x20000c50
 8002cc0:	20000c48 	.word	0x20000c48
 8002cc4:	20000c40 	.word	0x20000c40
 8002cc8:	0800f2ab 	.word	0x0800f2ab
 8002ccc:	20000c60 	.word	0x20000c60
 8002cd0:	20000c6c 	.word	0x20000c6c
 8002cd4:	0800f63a 	.word	0x0800f63a
 8002cd8:	0800f671 	.word	0x0800f671
 8002cdc:	0800f692 	.word	0x0800f692
 8002ce0:	20000c58 	.word	0x20000c58
 8002ce4:	0800f6c4 	.word	0x0800f6c4
 8002ce8:	0800f34d 	.word	0x0800f34d
 8002cec:	0800f35e 	.word	0x0800f35e
 8002cf0:	20000c80 	.word	0x20000c80
 8002cf4:	0800f78a 	.word	0x0800f78a
 8002cf8:	0800f7cc 	.word	0x0800f7cc
 8002cfc:	0800f5e3 	.word	0x0800f5e3
 8002d00:	0800f70a 	.word	0x0800f70a
 8002d04:	0800f752 	.word	0x0800f752
 8002d08:	0800f3f7 	.word	0x0800f3f7
 8002d0c:	20001248 	.word	0x20001248
 8002d10:	0800f826 	.word	0x0800f826
 8002d14:	0800f835 	.word	0x0800f835
 8002d18:	0800f866 	.word	0x0800f866
 8002d1c:	20000c44 	.word	0x20000c44
 8002d20:	20000c64 	.word	0x20000c64
 8002d24:	20000c68 	.word	0x20000c68
 8002d28:	20000c4c 	.word	0x20000c4c

08002d2c <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002d2c:	b410      	push	{r4}
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8002d32:	80a3      	strh	r3, [r4, #4]
{
 8002d34:	4611      	mov	r1, r2
 8002d36:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002d38:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002d3a:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002d3c:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002d3e:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002d40:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8002d44:	f004 ba7e 	b.w	8007244 <HAL_UART_Receive_DMA>

08002d48 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	4606      	mov	r6, r0
 8002d4e:	460d      	mov	r5, r1
 8002d50:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8002d52:	2100      	movs	r1, #0
 8002d54:	2211      	movs	r2, #17
 8002d56:	f10d 0007 	add.w	r0, sp, #7
 8002d5a:	f007 fdf7 	bl	800a94c <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d5e:	4808      	ldr	r0, [pc, #32]	@ (8002d80 <set_time+0x38>)
	sTime.Hours = hr;
 8002d60:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d64:	2200      	movs	r2, #0
 8002d66:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8002d68:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8002d6c:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d70:	f002 ff0c 	bl	8005b8c <HAL_RTC_SetTime>
 8002d74:	b108      	cbz	r0, 8002d7a <set_time+0x32>
	{
		Error_Handler();
 8002d76:	f000 fb44 	bl	8003402 <Error_Handler>
	}
}
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	bf00      	nop
 8002d80:	200013e4 	.word	0x200013e4

08002d84 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8002d84:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8002d86:	2300      	movs	r3, #0
	sDate.Month = month;
 8002d88:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8002d8c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8002d90:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d94:	461a      	mov	r2, r3
 8002d96:	4806      	ldr	r0, [pc, #24]	@ (8002db0 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8002d98:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d9c:	a901      	add	r1, sp, #4
 8002d9e:	f002 ff4f 	bl	8005c40 <HAL_RTC_SetDate>
 8002da2:	b108      	cbz	r0, 8002da8 <set_date+0x24>
	{
		Error_Handler();
 8002da4:	f000 fb2d 	bl	8003402 <Error_Handler>
	}
}
 8002da8:	b003      	add	sp, #12
 8002daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dae:	bf00      	nop
 8002db0:	200013e4 	.word	0x200013e4

08002db4 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002db6:	4d29      	ldr	r5, [pc, #164]	@ (8002e5c <get_RTC_time_date+0xa8>)
{
 8002db8:	b0b3      	sub	sp, #204	@ 0xcc
 8002dba:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002dbc:	a90d      	add	r1, sp, #52	@ 0x34
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f002 ff8d 	bl	8005ce0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002dc6:	a906      	add	r1, sp, #24
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f002 ffab 	bl	8005d26 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002dd0:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002dd4:	4d22      	ldr	r5, [pc, #136]	@ (8002e60 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8002ddc:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <get_RTC_time_date+0xb0>)
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	210a      	movs	r1, #10
 8002de2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8002de6:	a807      	add	r0, sp, #28
 8002de8:	f007 fcb4 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002dec:	a907      	add	r1, sp, #28
 8002dee:	4628      	mov	r0, r5
 8002df0:	f001 f9dc 	bl	80041ac <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8002df4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <get_RTC_time_date+0xb4>)
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	210c      	movs	r1, #12
 8002e04:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002e08:	a80a      	add	r0, sp, #40	@ 0x28
 8002e0a:	f007 fca3 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 8002e0e:	a90a      	add	r1, sp, #40	@ 0x28
 8002e10:	4628      	mov	r0, r5
 8002e12:	f001 f9cb 	bl	80041ac <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 8002e16:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 8002e1a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 8002e1e:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8002e22:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8002e26:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 8002e2a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002e2e:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8002e30:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8002e32:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8002e34:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8002e36:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8002e38:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 8002e3a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002e3e:	9200      	str	r2, [sp, #0]
 8002e40:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8002e44:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <get_RTC_time_date+0xb8>)
 8002e46:	2180      	movs	r1, #128	@ 0x80
 8002e48:	a812      	add	r0, sp, #72	@ 0x48
 8002e4a:	f007 fc83 	bl	800a754 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8002e4e:	a912      	add	r1, sp, #72	@ 0x48
 8002e50:	4628      	mov	r0, r5
 8002e52:	f001 f9ab 	bl	80041ac <uart_transmit_string>
}
 8002e56:	b033      	add	sp, #204	@ 0xcc
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200013e4 	.word	0x200013e4
 8002e60:	20001248 	.word	0x20001248
 8002e64:	0800e95f 	.word	0x0800e95f
 8002e68:	0800f894 	.word	0x0800f894
 8002e6c:	0800f8a6 	.word	0x0800f8a6

08002e70 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <vApplicationGetIdleTaskMemory+0x10>)
 8002e72:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <vApplicationGetIdleTaskMemory+0x14>)
 8002e76:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20001008 	.word	0x20001008
 8002e84:	20000e08 	.word	0x20000e08

08002e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e88:	b500      	push	{lr}
 8002e8a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8c:	2228      	movs	r2, #40	@ 0x28
 8002e8e:	2100      	movs	r1, #0
 8002e90:	a805      	add	r0, sp, #20
 8002e92:	f007 fd5b 	bl	800a94c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e96:	2214      	movs	r2, #20
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4668      	mov	r0, sp
 8002e9c:	f007 fd56 	bl	800a94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea0:	223c      	movs	r2, #60	@ 0x3c
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	eb0d 0002 	add.w	r0, sp, r2
 8002ea8:	f007 fd50 	bl	800a94c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eac:	f002 f952 	bl	8005154 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <SystemClock_Config+0xa0>)
 8002eb2:	6a13      	ldr	r3, [r2, #32]
 8002eb4:	f023 0318 	bic.w	r3, r3, #24
 8002eb8:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002eba:	2306      	movs	r3, #6
 8002ebc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ebe:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec8:	2002      	movs	r0, #2
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ed0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ed6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed8:	f002 f944 	bl	8005164 <HAL_RCC_OscConfig>
 8002edc:	4601      	mov	r1, r0
 8002ede:	b108      	cbz	r0, 8002ee4 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ee6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002eea:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eee:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ef0:	4668      	mov	r0, sp
 8002ef2:	f002 fbb7 	bl	8005664 <HAL_RCC_ClockConfig>
 8002ef6:	b108      	cbz	r0, 8002efc <SystemClock_Config+0x74>
 8002ef8:	b672      	cpsid	i
  while (1)
 8002efa:	e7fe      	b.n	8002efa <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <SystemClock_Config+0xa4>)
 8002efe:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f00:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f08:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0e:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f10:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f14:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f16:	f002 fc9b 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	b108      	cbz	r0, 8002f20 <SystemClock_Config+0x98>
 8002f1c:	b672      	cpsid	i
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <SystemClock_Config+0x96>
}
 8002f20:	b01f      	add	sp, #124	@ 0x7c
 8002f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	00010187 	.word	0x00010187

08002f30 <main>:
{
 8002f30:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	4db9      	ldr	r5, [pc, #740]	@ (8003218 <main+0x2e8>)
{
 8002f34:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8002f36:	f001 f995 	bl	8004264 <HAL_Init>
  SystemClock_Config();
 8002f3a:	f7ff ffa5 	bl	8002e88 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3e:	2214      	movs	r2, #20
 8002f40:	2100      	movs	r1, #0
 8002f42:	a815      	add	r0, sp, #84	@ 0x54
 8002f44:	f007 fd02 	bl	800a94c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f48:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f4a:	48b4      	ldr	r0, [pc, #720]	@ (800321c <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f50:	616b      	str	r3, [r5, #20]
 8002f52:	696b      	ldr	r3, [r5, #20]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f58:	9302      	str	r3, [sp, #8]
 8002f5a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	696b      	ldr	r3, [r5, #20]
 8002f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f62:	616b      	str	r3, [r5, #20]
 8002f64:	696b      	ldr	r3, [r5, #20]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	9303      	str	r3, [sp, #12]
 8002f6c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	696b      	ldr	r3, [r5, #20]
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f74:	616b      	str	r3, [r5, #20]
 8002f76:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f7e:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f80:	9304      	str	r3, [sp, #16]
 8002f82:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002f84:	f002 f8e0 	bl	8005148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8002f88:	48a4      	ldr	r0, [pc, #656]	@ (800321c <main+0x2ec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f240 2156 	movw	r1, #598	@ 0x256
 8002f90:	f002 f8da 	bl	8005148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002f94:	48a2      	ldr	r0, [pc, #648]	@ (8003220 <main+0x2f0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	2104      	movs	r1, #4
 8002f9a:	f002 f8d5 	bl	8005148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002f9e:	48a0      	ldr	r0, [pc, #640]	@ (8003220 <main+0x2f0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fa6:	f002 f8cf 	bl	8005148 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002faa:	2201      	movs	r2, #1
 8002fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002fb6:	f002 f8c7 	bl	8005148 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2701      	movs	r7, #1
 8002fbc:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc0:	4896      	ldr	r0, [pc, #600]	@ (800321c <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc2:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc6:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fcc:	f001 fff8 	bl	8004fc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002fd0:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd2:	eb0d 0103 	add.w	r1, sp, r3
 8002fd6:	4891      	ldr	r0, [pc, #580]	@ (800321c <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd8:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	f001 ffee 	bl	8004fc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fe4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	488e      	ldr	r0, [pc, #568]	@ (8003220 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fea:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fec:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f001 ffe6 	bl	8004fc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff4:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	488a      	ldr	r0, [pc, #552]	@ (8003220 <main+0x2f0>)
 8002ff8:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ffe:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003006:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300a:	f001 ffd9 	bl	8004fc0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	4884      	ldr	r0, [pc, #528]	@ (8003220 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003010:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003014:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003016:	e9cd 6715 	strd	r6, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800301a:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f001 ffd0 	bl	8004fc0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	a915      	add	r1, sp, #84	@ 0x54
 8003026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800302e:	e9cd 7817 	strd	r7, r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f001 ffc5 	bl	8004fc0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003036:	696b      	ldr	r3, [r5, #20]
 8003038:	433b      	orrs	r3, r7
 800303a:	616b      	str	r3, [r5, #20]
 800303c:	696b      	ldr	r3, [r5, #20]
 800303e:	403b      	ands	r3, r7
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003044:	696b      	ldr	r3, [r5, #20]
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	616b      	str	r3, [r5, #20]
 800304c:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 800304e:	4d75      	ldr	r5, [pc, #468]	@ (8003224 <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003050:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003054:	4622      	mov	r2, r4
 8003056:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003058:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800305a:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 800305c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800305e:	f001 fe8b 	bl	8004d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003062:	200d      	movs	r0, #13
 8003064:	f001 feba 	bl	8004ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003068:	4622      	mov	r2, r4
 800306a:	2105      	movs	r1, #5
 800306c:	200f      	movs	r0, #15
 800306e:	f001 fe83 	bl	8004d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003072:	200f      	movs	r0, #15
 8003074:	f001 feb2 	bl	8004ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003078:	4622      	mov	r2, r4
 800307a:	2105      	movs	r1, #5
 800307c:	2010      	movs	r0, #16
 800307e:	f001 fe7b 	bl	8004d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003082:	2010      	movs	r0, #16
 8003084:	f001 feaa 	bl	8004ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003088:	4622      	mov	r2, r4
 800308a:	2105      	movs	r1, #5
 800308c:	2038      	movs	r0, #56	@ 0x38
 800308e:	f001 fe73 	bl	8004d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003092:	2038      	movs	r0, #56	@ 0x38
 8003094:	f001 fea2 	bl	8004ddc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003098:	4622      	mov	r2, r4
 800309a:	2105      	movs	r1, #5
 800309c:	203c      	movs	r0, #60	@ 0x3c
 800309e:	f001 fe6b 	bl	8004d78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80030a2:	203c      	movs	r0, #60	@ 0x3c
 80030a4:	f001 fe9a 	bl	8004ddc <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 80030a8:	2214      	movs	r2, #20
 80030aa:	4621      	mov	r1, r4
 80030ac:	a815      	add	r0, sp, #84	@ 0x54
 80030ae:	f007 fc4d 	bl	800a94c <memset>
  hrtc.Instance = RTC;
 80030b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <main+0x2f8>)
  RTC_DateTypeDef sDate = {0};
 80030b4:	940e      	str	r4, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030b6:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 80030ba:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 80030be:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030c0:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80030c2:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030c6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030ca:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030cc:	f002 fd0b 	bl	8005ae6 <HAL_RTC_Init>
 80030d0:	b108      	cbz	r0, 80030d6 <main+0x1a6>
 80030d2:	b672      	cpsid	i
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030d6:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sTime.Hours = 0x0;
 80030da:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
  sTime.Seconds = 0x0;
 80030de:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030e2:	463a      	mov	r2, r7
 80030e4:	a915      	add	r1, sp, #84	@ 0x54
 80030e6:	4628      	mov	r0, r5
 80030e8:	f002 fd50 	bl	8005b8c <HAL_RTC_SetTime>
 80030ec:	b108      	cbz	r0, 80030f2 <main+0x1c2>
 80030ee:	b672      	cpsid	i
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80030f2:	4b4e      	ldr	r3, [pc, #312]	@ (800322c <main+0x2fc>)
 80030f4:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80030f6:	463a      	mov	r2, r7
 80030f8:	a90e      	add	r1, sp, #56	@ 0x38
 80030fa:	4628      	mov	r0, r5
 80030fc:	f002 fda0 	bl	8005c40 <HAL_RTC_SetDate>
 8003100:	4603      	mov	r3, r0
 8003102:	b108      	cbz	r0, 8003108 <main+0x1d8>
 8003104:	b672      	cpsid	i
  while (1)
 8003106:	e7fe      	b.n	8003106 <main+0x1d6>
  hspi1.Instance = SPI1;
 8003108:	4849      	ldr	r0, [pc, #292]	@ (8003230 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800310a:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8003250 <main+0x320>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800310e:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003110:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003114:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003118:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800311c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003120:	2510      	movs	r5, #16
 8003122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003126:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800312a:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800312c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003130:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003134:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003136:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003138:	2308      	movs	r3, #8
 800313a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800313c:	f002 ff1f 	bl	8005f7e <HAL_SPI_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	b108      	cbz	r0, 8003148 <main+0x218>
 8003144:	b672      	cpsid	i
  while (1)
 8003146:	e7fe      	b.n	8003146 <main+0x216>
  huart1.Instance = USART1;
 8003148:	483a      	ldr	r0, [pc, #232]	@ (8003234 <main+0x304>)
  huart1.Init.BaudRate = 115200;
 800314a:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800314c:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 800314e:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003152:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003154:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003158:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800315c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003160:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003162:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003166:	f003 fff1 	bl	800714c <HAL_UART_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	b108      	cbz	r0, 8003172 <main+0x242>
 800316e:	b672      	cpsid	i
  while (1)
 8003170:	e7fe      	b.n	8003170 <main+0x240>
  huart2.Instance = USART2;
 8003172:	4832      	ldr	r0, [pc, #200]	@ (800323c <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 8003174:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003254 <main+0x324>
 8003178:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800317c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003180:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003184:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003188:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800318c:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003190:	f003 ffdc 	bl	800714c <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	b108      	cbz	r0, 800319c <main+0x26c>
 8003198:	b672      	cpsid	i
  while (1)
 800319a:	e7fe      	b.n	800319a <main+0x26a>
  huart3.Instance = USART3;
 800319c:	4828      	ldr	r0, [pc, #160]	@ (8003240 <main+0x310>)
 800319e:	4a29      	ldr	r2, [pc, #164]	@ (8003244 <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80031a4:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031a8:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031b4:	f003 ffca 	bl	800714c <HAL_UART_Init>
 80031b8:	4604      	mov	r4, r0
 80031ba:	b108      	cbz	r0, 80031c0 <main+0x290>
 80031bc:	b672      	cpsid	i
  while (1)
 80031be:	e7fe      	b.n	80031be <main+0x28e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031c0:	462a      	mov	r2, r5
 80031c2:	4601      	mov	r1, r0
 80031c4:	a815      	add	r0, sp, #84	@ 0x54
 80031c6:	f007 fbc1 	bl	800a94c <memset>
  htim3.Instance = TIM3;
 80031ca:	4d1f      	ldr	r5, [pc, #124]	@ (8003248 <main+0x318>)
  htim3.Init.Prescaler = 8000;
 80031cc:	481f      	ldr	r0, [pc, #124]	@ (800324c <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ce:	9410      	str	r4, [sp, #64]	@ 0x40
  htim3.Init.Prescaler = 8000;
 80031d0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80031d4:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 80031d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031dc:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031de:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e2:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e6:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031ea:	f003 fb57 	bl	800689c <HAL_TIM_Base_Init>
 80031ee:	b108      	cbz	r0, 80031f4 <main+0x2c4>
 80031f0:	b672      	cpsid	i
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <main+0x2c2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031f4:	a915      	add	r1, sp, #84	@ 0x54
 80031f6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f8:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031fa:	f003 fb89 	bl	8006910 <HAL_TIM_ConfigClockSource>
 80031fe:	b108      	cbz	r0, 8003204 <main+0x2d4>
 8003200:	b672      	cpsid	i
  while (1)
 8003202:	e7fe      	b.n	8003202 <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003204:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003208:	a90e      	add	r1, sp, #56	@ 0x38
 800320a:	4628      	mov	r0, r5
 800320c:	f003 fc1a 	bl	8006a44 <HAL_TIMEx_MasterConfigSynchronization>
 8003210:	b310      	cbz	r0, 8003258 <main+0x328>
 8003212:	b672      	cpsid	i
  while (1)
 8003214:	e7fe      	b.n	8003214 <main+0x2e4>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	48000800 	.word	0x48000800
 8003220:	48000400 	.word	0x48000400
 8003224:	200013e4 	.word	0x200013e4
 8003228:	40002800 	.word	0x40002800
 800322c:	00010101 	.word	0x00010101
 8003230:	20001380 	.word	0x20001380
 8003234:	20001248 	.word	0x20001248
 8003238:	40013800 	.word	0x40013800
 800323c:	200011c0 	.word	0x200011c0
 8003240:	20001138 	.word	0x20001138
 8003244:	40004800 	.word	0x40004800
 8003248:	200012d0 	.word	0x200012d0
 800324c:	40000400 	.word	0x40000400
 8003250:	40013000 	.word	0x40013000
 8003254:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003258:	4c5b      	ldr	r4, [pc, #364]	@ (80033c8 <main+0x498>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800325a:	2218      	movs	r2, #24
 800325c:	2100      	movs	r1, #0
 800325e:	a815      	add	r0, sp, #84	@ 0x54
 8003260:	f007 fb74 	bl	800a94c <memset>
  hadc2.Instance = ADC2;
 8003264:	4a59      	ldr	r2, [pc, #356]	@ (80033cc <main+0x49c>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003266:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003268:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800326a:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800326c:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800326e:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003272:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003276:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800327a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800327c:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 800327e:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003280:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003284:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003286:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003288:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800328a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800328c:	f001 f858 	bl	8004340 <HAL_ADC_Init>
 8003290:	b108      	cbz	r0, 8003296 <main+0x366>
 8003292:	b672      	cpsid	i
  while (1)
 8003294:	e7fe      	b.n	8003294 <main+0x364>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003296:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 800329a:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.Channel = ADC_CHANNEL_2;
 800329e:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032a0:	a915      	add	r1, sp, #84	@ 0x54
 80032a2:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032a4:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032a8:	f001 fb4c 	bl	8004944 <HAL_ADC_ConfigChannel>
 80032ac:	4605      	mov	r5, r0
 80032ae:	b108      	cbz	r0, 80032b4 <main+0x384>
 80032b0:	b672      	cpsid	i
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <main+0x382>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80032b4:	4c46      	ldr	r4, [pc, #280]	@ (80033d0 <main+0x4a0>)
  ADC_MultiModeTypeDef multimode = {0};
 80032b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80032b8:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 80032bc:	4601      	mov	r1, r0
 80032be:	2218      	movs	r2, #24
 80032c0:	a815      	add	r0, sp, #84	@ 0x54
 80032c2:	f007 fb43 	bl	800a94c <memset>
  hadc3.Instance = ADC3;
 80032c6:	4b43      	ldr	r3, [pc, #268]	@ (80033d4 <main+0x4a4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80032c8:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032cc:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032ce:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032d2:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032d6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032da:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 80032de:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80032e0:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80032e4:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032e6:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032e8:	f001 f82a 	bl	8004340 <HAL_ADC_Init>
 80032ec:	b108      	cbz	r0, 80032f2 <main+0x3c2>
 80032ee:	b672      	cpsid	i
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <main+0x3c0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80032f2:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80032f4:	a90e      	add	r1, sp, #56	@ 0x38
 80032f6:	4620      	mov	r0, r4
 80032f8:	f001 fca8 	bl	8004c4c <HAL_ADCEx_MultiModeConfigChannel>
 80032fc:	b108      	cbz	r0, 8003302 <main+0x3d2>
 80032fe:	b672      	cpsid	i
  while (1)
 8003300:	e7fe      	b.n	8003300 <main+0x3d0>
  sConfig.Channel = ADC_CHANNEL_12;
 8003302:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003304:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 8003308:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800330c:	a915      	add	r1, sp, #84	@ 0x54
 800330e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003310:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003314:	f001 fb16 	bl	8004944 <HAL_ADC_ConfigChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	b108      	cbz	r0, 8003320 <main+0x3f0>
 800331c:	b672      	cpsid	i
  while (1)
 800331e:	e7fe      	b.n	800331e <main+0x3ee>
  hspi2.Instance = SPI2;
 8003320:	482d      	ldr	r0, [pc, #180]	@ (80033d8 <main+0x4a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003322:	492e      	ldr	r1, [pc, #184]	@ (80033dc <main+0x4ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003324:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003326:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800332a:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800332e:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003332:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003336:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800333a:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 800333e:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003340:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003344:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003348:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800334a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800334c:	2308      	movs	r3, #8
 800334e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003350:	f002 fe15 	bl	8005f7e <HAL_SPI_Init>
 8003354:	4607      	mov	r7, r0
 8003356:	b108      	cbz	r0, 800335c <main+0x42c>
 8003358:	b672      	cpsid	i
  while (1)
 800335a:	e7fe      	b.n	800335a <main+0x42a>
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 800335c:	4631      	mov	r1, r6
  osSemaphoreDef(timerBinarySem);
 800335e:	e9cd 0005 	strd	r0, r0, [sp, #20]
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 8003362:	a805      	add	r0, sp, #20
 8003364:	f003 ffc0 	bl	80072e8 <osSemaphoreCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 8003368:	4c1d      	ldr	r4, [pc, #116]	@ (80033e0 <main+0x4b0>)
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 800336a:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <main+0x4b4>)
 800336c:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 800336e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003370:	ad07      	add	r5, sp, #28
 8003372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003374:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003378:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800337c:	4639      	mov	r1, r7
 800337e:	a807      	add	r0, sp, #28
 8003380:	f003 ff82 	bl	8007288 <osThreadCreate>
 8003384:	4b18      	ldr	r3, [pc, #96]	@ (80033e8 <main+0x4b8>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8003386:	f104 060c 	add.w	r6, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800338a:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 800338c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800338e:	ad0e      	add	r5, sp, #56	@ 0x38
 8003390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003392:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003396:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800339a:	4639      	mov	r1, r7
 800339c:	a80e      	add	r0, sp, #56	@ 0x38
 800339e:	f003 ff73 	bl	8007288 <osThreadCreate>
 80033a2:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <main+0x4bc>)
  osThreadDef(GSM, StartGSM, osPriorityNormal, 0, 1560);
 80033a4:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80033a6:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityNormal, 0, 1560);
 80033a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033aa:	ad15      	add	r5, sp, #84	@ 0x54
 80033ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 80033b6:	4639      	mov	r1, r7
 80033b8:	a815      	add	r0, sp, #84	@ 0x54
 80033ba:	f003 ff65 	bl	8007288 <osThreadCreate>
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <main+0x4c0>)
 80033c0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80033c2:	f003 ff5c 	bl	800727e <osKernelStart>
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <main+0x496>
 80033c8:	200014dc 	.word	0x200014dc
 80033cc:	50000100 	.word	0x50000100
 80033d0:	2000148c 	.word	0x2000148c
 80033d4:	50000400 	.word	0x50000400
 80033d8:	2000131c 	.word	0x2000131c
 80033dc:	40003800 	.word	0x40003800
 80033e0:	0800e838 	.word	0x0800e838
 80033e4:	2000105c 	.word	0x2000105c
 80033e8:	20001068 	.word	0x20001068
 80033ec:	20001064 	.word	0x20001064
 80033f0:	20001060 	.word	0x20001060

080033f4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 80033f4:	6803      	ldr	r3, [r0, #0]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80033fc:	f000 bf44 	b.w	8004288 <HAL_IncTick>
}
 8003400:	4770      	bx	lr

08003402 <Error_Handler>:
 8003402:	b672      	cpsid	i
  while (1)
 8003404:	e7fe      	b.n	8003404 <Error_Handler+0x2>
	...

08003408 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003408:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800340a:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003416:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800341a:	f001 fe95 	bl	8005148 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 800341e:	4810      	ldr	r0, [pc, #64]	@ (8003460 <W25_ReadStatusReg1+0x58>)
 8003420:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003424:	2201      	movs	r2, #1
 8003426:	f10d 0106 	add.w	r1, sp, #6
 800342a:	f002 fe16 	bl	800605a <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 800342e:	4604      	mov	r4, r0
 8003430:	b940      	cbnz	r0, 8003444 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8003432:	480b      	ldr	r0, [pc, #44]	@ (8003460 <W25_ReadStatusReg1+0x58>)
 8003434:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003438:	2201      	movs	r2, #1
 800343a:	f10d 0107 	add.w	r1, sp, #7
 800343e:	f003 f806 	bl	800644e <HAL_SPI_Receive>
 8003442:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003444:	2201      	movs	r2, #1
 8003446:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800344a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344e:	f001 fe7b 	bl	8005148 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003452:	b91c      	cbnz	r4, 800345c <W25_ReadStatusReg1+0x54>
 8003454:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003458:	b002      	add	sp, #8
 800345a:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	e7fb      	b.n	8003458 <W25_ReadStatusReg1+0x50>
 8003460:	20001380 	.word	0x20001380

08003464 <W25_Busy>:

int W25_Busy(void)
{
 8003464:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003466:	f7ff ffcf 	bl	8003408 <W25_ReadStatusReg1>
}
 800346a:	f000 0001 	and.w	r0, r0, #1
 800346e:	bd08      	pop	{r3, pc}

08003470 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003474:	f000 ff14 	bl	80042a0 <HAL_GetTick>
 8003478:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 800347a:	f7ff fff3 	bl	8003464 <W25_Busy>
 800347e:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003480:	f000 ff0e 	bl	80042a0 <HAL_GetTick>
 8003484:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003486:	b114      	cbz	r4, 800348e <W25_DelayWhileBusy+0x1e>
 8003488:	42ab      	cmp	r3, r5
 800348a:	d3f6      	bcc.n	800347a <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 800348c:	2403      	movs	r4, #3
	return retval;
}
 800348e:	4620      	mov	r0, r4
 8003490:	bd70      	pop	{r4, r5, r6, pc}

08003492 <W25_Reset>:
void W25_Reset(){
 8003492:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800349a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349e:	f001 fe53 	bl	8005148 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80034a2:	2201      	movs	r2, #1
 80034a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ac:	f001 fe4c 	bl	8005148 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ba:	f001 fe45 	bl	8005148 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80034be:	2201      	movs	r2, #1
 80034c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c8:	f001 fe3e 	bl	8005148 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d6:	f001 fe37 	bl	8005148 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 80034da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e8:	f001 be2e 	b.w	8005148 <HAL_GPIO_WritePin>

080034ec <W25_ReadJedecID>:

int W25_ReadJedecID() {
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 80034f0:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80034f2:	2200      	movs	r2, #0
 80034f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 80034fc:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003500:	f001 fe22 	bl	8005148 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003504:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	aa03      	add	r2, sp, #12
 800350c:	2304      	movs	r3, #4
 800350e:	f10d 010b 	add.w	r1, sp, #11
 8003512:	4820      	ldr	r0, [pc, #128]	@ (8003594 <W25_ReadJedecID+0xa8>)
 8003514:	f002 fe6b 	bl	80061ee <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003518:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 800351a:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 800351c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003524:	f001 fe10 	bl	8005148 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <W25_ReadJedecID+0xac>)
 800352a:	aa07      	add	r2, sp, #28
 800352c:	f103 0710 	add.w	r7, r3, #16
 8003530:	4616      	mov	r6, r2
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	4614      	mov	r4, r2
 8003538:	c403      	stmia	r4!, {r0, r1}
 800353a:	3308      	adds	r3, #8
 800353c:	42bb      	cmp	r3, r7
 800353e:	4622      	mov	r2, r4
 8003540:	d1f7      	bne.n	8003532 <W25_ReadJedecID+0x46>
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003546:	4630      	mov	r0, r6
 8003548:	f7fc fea2 	bl	8000290 <strlen>
 800354c:	4631      	mov	r1, r6
 800354e:	b282      	uxth	r2, r0
 8003550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003554:	4811      	ldr	r0, [pc, #68]	@ (800359c <W25_ReadJedecID+0xb0>)
 8003556:	f003 fd4f 	bl	8006ff8 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 800355a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800355e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	490e      	ldr	r1, [pc, #56]	@ (80035a0 <W25_ReadJedecID+0xb4>)
 8003566:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800356a:	a804      	add	r0, sp, #16
 800356c:	f007 f926 	bl	800a7bc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003570:	a904      	add	r1, sp, #16
 8003572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003576:	220b      	movs	r2, #11
 8003578:	4808      	ldr	r0, [pc, #32]	@ (800359c <W25_ReadJedecID+0xb0>)
 800357a:	f003 fd3d 	bl	8006ff8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 800357e:	4909      	ldr	r1, [pc, #36]	@ (80035a4 <W25_ReadJedecID+0xb8>)
 8003580:	4806      	ldr	r0, [pc, #24]	@ (800359c <W25_ReadJedecID+0xb0>)
 8003582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003586:	2201      	movs	r2, #1
 8003588:	f003 fd36 	bl	8006ff8 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 800358c:	4628      	mov	r0, r5
 800358e:	b00d      	add	sp, #52	@ 0x34
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003592:	bf00      	nop
 8003594:	20001380 	.word	0x20001380
 8003598:	0800f904 	.word	0x0800f904
 800359c:	20001248 	.word	0x20001248
 80035a0:	0800f8f1 	.word	0x0800f8f1
 80035a4:	0800f902 	.word	0x0800f902

080035a8 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 80035a8:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80035aa:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80035b6:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035ba:	f001 fdc5 	bl	8005148 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80035be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c2:	f10d 0107 	add.w	r1, sp, #7
 80035c6:	2201      	movs	r2, #1
 80035c8:	4806      	ldr	r0, [pc, #24]	@ (80035e4 <W25_WriteEnable+0x3c>)
 80035ca:	f002 fd46 	bl	800605a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80035ce:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80035d0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80035d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035da:	f001 fdb5 	bl	8005148 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 80035de:	4620      	mov	r0, r4
 80035e0:	b002      	add	sp, #8
 80035e2:	bd10      	pop	{r4, pc}
 80035e4:	20001380 	.word	0x20001380

080035e8 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 80035e8:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 80035ea:	2320      	movs	r3, #32
 80035ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80035f0:	0c03      	lsrs	r3, r0, #16
 80035f2:	ba40      	rev16	r0, r0
 80035f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80035f8:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 80035fc:	f7ff ffd4 	bl	80035a8 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800360a:	f001 fd9d 	bl	8005148 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800360e:	2204      	movs	r2, #4
 8003610:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003614:	eb0d 0102 	add.w	r1, sp, r2
 8003618:	4808      	ldr	r0, [pc, #32]	@ (800363c <W25_SectorErase+0x54>)
 800361a:	f002 fd1e 	bl	800605a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800361e:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003620:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800362a:	f001 fd8d 	bl	8005148 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 800362e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003632:	f7ff ff1d 	bl	8003470 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003636:	4620      	mov	r0, r4
 8003638:	b002      	add	sp, #8
 800363a:	bd10      	pop	{r4, pc}
 800363c:	20001380 	.word	0x20001380

08003640 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003640:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	4606      	mov	r6, r0
 8003646:	4688      	mov	r8, r1
 8003648:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 800364a:	f7ff ffad 	bl	80035a8 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800364e:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80036d0 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003652:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003654:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003658:	b91f      	cbnz	r7, 8003662 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 800365a:	4620      	mov	r0, r4
 800365c:	b002      	add	sp, #8
 800365e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003662:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003664:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003666:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 800366a:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800366c:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003670:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003674:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800367a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800367e:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003682:	bf28      	it	cs
 8003684:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003686:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800368a:	f001 fd5d 	bl	8005148 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800368e:	2204      	movs	r2, #4
 8003690:	480f      	ldr	r0, [pc, #60]	@ (80036d0 <W25_PageProgram+0x90>)
 8003692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003696:	eb0d 0102 	add.w	r1, sp, r2
 800369a:	f002 fcde 	bl	800605a <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 800369e:	4604      	mov	r4, r0
 80036a0:	b938      	cbnz	r0, 80036b2 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 80036a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036a6:	b2aa      	uxth	r2, r5
 80036a8:	4641      	mov	r1, r8
 80036aa:	4650      	mov	r0, sl
 80036ac:	f002 fcd5 	bl	800605a <HAL_SPI_Transmit>
 80036b0:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 80036b2:	2201      	movs	r2, #1
 80036b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036bc:	f001 fd44 	bl	8005148 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80036c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 80036c4:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 80036c6:	442e      	add	r6, r5
		buf += count_this_pass;
 80036c8:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80036ca:	f7ff fed1 	bl	8003470 <W25_DelayWhileBusy>
 80036ce:	e7c3      	b.n	8003658 <W25_PageProgram+0x18>
 80036d0:	20001380 	.word	0x20001380

080036d4 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 80036d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 80036d6:	2303      	movs	r3, #3
 80036d8:	f88d 3004 	strb.w	r3, [sp, #4]
 80036dc:	0c03      	lsrs	r3, r0, #16
 80036de:	ba40      	rev16	r0, r0
 80036e0:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 80036e4:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 80036ee:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036f0:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 80036f2:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036f6:	f001 fd27 	bl	8005148 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 80036fa:	2204      	movs	r2, #4
 80036fc:	480d      	ldr	r0, [pc, #52]	@ (8003734 <W25_ReadData+0x60>)
 80036fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003702:	eb0d 0102 	add.w	r1, sp, r2
 8003706:	f002 fca8 	bl	800605a <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800370a:	4604      	mov	r4, r0
 800370c:	b978      	cbnz	r0, 800372e <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 800370e:	4809      	ldr	r0, [pc, #36]	@ (8003734 <W25_ReadData+0x60>)
 8003710:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003714:	b2b2      	uxth	r2, r6
 8003716:	4629      	mov	r1, r5
 8003718:	f002 fe99 	bl	800644e <HAL_SPI_Receive>
	if(retval != HAL_OK)
 800371c:	4604      	mov	r4, r0
 800371e:	b130      	cbz	r0, 800372e <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003720:	2201      	movs	r2, #1
 8003722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800372a:	f001 fd0d 	bl	8005148 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 800372e:	4620      	mov	r0, r4
 8003730:	b002      	add	sp, #8
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	20001380 	.word	0x20001380

08003738 <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003738:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 800373a:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 800373c:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 800373e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003742:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003744:	6843      	ldr	r3, [r0, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 800374a:	6803      	ldr	r3, [r0, #0]
 800374c:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 800374e:	680b      	ldr	r3, [r1, #0]
 8003750:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003752:	684b      	ldr	r3, [r1, #4]
 8003754:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003756:	688b      	ldr	r3, [r1, #8]
 8003758:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 800375a:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003762:	f007 fa2d 	bl	800abc0 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003766:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 800376a:	3070      	adds	r0, #112	@ 0x70
 800376c:	b00b      	add	sp, #44	@ 0x2c
 800376e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003774 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	ed2d 8b04 	vpush	{d8-d9}
 800377c:	4604      	mov	r4, r0
 800377e:	b09b      	sub	sp, #108	@ 0x6c
 8003780:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003784:	4601      	mov	r1, r0
 8003786:	3010      	adds	r0, #16
 8003788:	f7ff ffd6 	bl	8003738 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 800378c:	69a3      	ldr	r3, [r4, #24]
 800378e:	9314      	str	r3, [sp, #80]	@ 0x50
 8003790:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003794:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003796:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003798:	9315      	str	r3, [sp, #84]	@ 0x54
 800379a:	f7fc fee5 	bl	8000568 <__aeabi_f2d>
 800379e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 80037a2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80037a4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80037a8:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 80037ac:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 80037b0:	f7fc feda 	bl	8000568 <__aeabi_f2d>
 80037b4:	e9d4 9a00 	ldrd	r9, sl, [r4]
 80037b8:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 80037bc:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 80037c0:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 80037c4:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80037c6:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4811      	ldr	r0, [pc, #68]	@ (8003814 <format_rmc_data+0xa0>)
 80037d0:	4911      	ldr	r1, [pc, #68]	@ (8003818 <format_rmc_data+0xa4>)
 80037d2:	9608      	str	r6, [sp, #32]
 80037d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80037d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80037da:	4a10      	ldr	r2, [pc, #64]	@ (800381c <format_rmc_data+0xa8>)
 80037dc:	f8cd 9008 	str.w	r9, [sp, #8]
 80037e0:	2c00      	cmp	r4, #0
 80037e2:	bf08      	it	eq
 80037e4:	4601      	moveq	r1, r0
 80037e6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80037ea:	e9cd 5300 	strd	r5, r3, [sp]
 80037ee:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 80037f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80037f4:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 80037f8:	ed8d 8b06 	vstr	d8, [sp, #24]
 80037fc:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003800:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003804:	f006 ffa6 	bl	800a754 <sniprintf>
}
 8003808:	b01b      	add	sp, #108	@ 0x6c
 800380a:	ecbd 8b04 	vpop	{d8-d9}
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003812:	bf00      	nop
 8003814:	0800efc1 	.word	0x0800efc1
 8003818:	0800efbb 	.word	0x0800efbb
 800381c:	0800f94b 	.word	0x0800f94b

08003820 <saveRMC>:


void saveRMC(){
 8003820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8003822:	4c3d      	ldr	r4, [pc, #244]	@ (8003918 <saveRMC+0xf8>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003824:	483d      	ldr	r0, [pc, #244]	@ (800391c <saveRMC+0xfc>)
 8003826:	f000 fcd1 	bl	80041cc <Debug_printf>
	W25_Reset();
 800382a:	f7ff fe32 	bl	8003492 <W25_Reset>
	if (is_erased_rmc == 0){
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	b92b      	cbnz	r3, 800383e <saveRMC+0x1e>
		W25_SectorErase(address_rmc);
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <saveRMC+0x100>)
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	f7ff fed7 	bl	80035e8 <W25_SectorErase>
		is_erased_rmc = 1;
 800383a:	2301      	movs	r3, #1
 800383c:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 800383e:	4a39      	ldr	r2, [pc, #228]	@ (8003924 <saveRMC+0x104>)
 8003840:	2300      	movs	r3, #0
 8003842:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003844:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003848:	461c      	mov	r4, r3
 800384a:	3301      	adds	r3, #1
 800384c:	b109      	cbz	r1, 8003852 <saveRMC+0x32>
 800384e:	7811      	ldrb	r1, [r2, #0]
 8003850:	b111      	cbz	r1, 8003858 <saveRMC+0x38>
	for(size_t i = 0; i < 128; i++){
 8003852:	2b80      	cmp	r3, #128	@ 0x80
 8003854:	d1f6      	bne.n	8003844 <saveRMC+0x24>
	int k = 0;
 8003856:	2400      	movs	r4, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
 8003858:	4d31      	ldr	r5, [pc, #196]	@ (8003920 <saveRMC+0x100>)
 800385a:	4933      	ldr	r1, [pc, #204]	@ (8003928 <saveRMC+0x108>)
 800385c:	682a      	ldr	r2, [r5, #0]
 800385e:	a801      	add	r0, sp, #4
 8003860:	f006 ffac 	bl	800a7bc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8003864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003868:	2208      	movs	r2, #8
 800386a:	a901      	add	r1, sp, #4
 800386c:	482f      	ldr	r0, [pc, #188]	@ (800392c <saveRMC+0x10c>)
 800386e:	f003 fbc3 	bl	8006ff8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003872:	492f      	ldr	r1, [pc, #188]	@ (8003930 <saveRMC+0x110>)
 8003874:	482d      	ldr	r0, [pc, #180]	@ (800392c <saveRMC+0x10c>)
 8003876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387a:	2201      	movs	r2, #1
 800387c:	f003 fbbc 	bl	8006ff8 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8003880:	1933      	adds	r3, r6, r4
 8003882:	223b      	movs	r2, #59	@ 0x3b
 8003884:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8003886:	1ca3      	adds	r3, r4, #2
 8003888:	f8dd 1006 	ldr.w	r1, [sp, #6]
 800388c:	50f1      	str	r1, [r6, r3]
 800388e:	18f2      	adds	r2, r6, r3
 8003890:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003894:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8003896:	f104 0008 	add.w	r0, r4, #8
 800389a:	f1c4 0266 	rsb	r2, r4, #102	@ 0x66
 800389e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80038a2:	2100      	movs	r1, #0
 80038a4:	4430      	add	r0, r6
 80038a6:	f007 f851 	bl	800a94c <memset>
	}

//	SendUInt8ArrayToMailQueue(rmcBufferDemo,128);

	W25_Reset();
 80038aa:	f7ff fdf2 	bl	8003492 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	491c      	ldr	r1, [pc, #112]	@ (8003924 <saveRMC+0x104>)
 80038b2:	6828      	ldr	r0, [r5, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 80038b4:	4c1f      	ldr	r4, [pc, #124]	@ (8003934 <saveRMC+0x114>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 80038b6:	f7ff fec3 	bl	8003640 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 80038ba:	491f      	ldr	r1, [pc, #124]	@ (8003938 <saveRMC+0x118>)
 80038bc:	481b      	ldr	r0, [pc, #108]	@ (800392c <saveRMC+0x10c>)
 80038be:	f000 fc75 	bl	80041ac <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 80038c2:	4918      	ldr	r1, [pc, #96]	@ (8003924 <saveRMC+0x104>)
 80038c4:	4819      	ldr	r0, [pc, #100]	@ (800392c <saveRMC+0x10c>)
 80038c6:	f000 fc71 	bl	80041ac <uart_transmit_string>
	current_addr = address_rmc;
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	6023      	str	r3, [r4, #0]
	address_rmc+=128;
 80038ce:	3380      	adds	r3, #128	@ 0x80
 80038d0:	602b      	str	r3, [r5, #0]
	if(address_rmc % 0x1000 == 0x0000){
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	b92b      	cbnz	r3, 80038e4 <saveRMC+0xc4>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 80038d8:	4818      	ldr	r0, [pc, #96]	@ (800393c <saveRMC+0x11c>)
 80038da:	f000 fc77 	bl	80041cc <Debug_printf>
		W25_SectorErase(address_rmc);
 80038de:	6828      	ldr	r0, [r5, #0]
 80038e0:	f7ff fe82 	bl	80035e8 <W25_SectorErase>
	}
	if(current_addr >= 0x89C0){
 80038e4:	6822      	ldr	r2, [r4, #0]
 80038e6:	f648 13bf 	movw	r3, #35263	@ 0x89bf
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d904      	bls.n	80038f8 <saveRMC+0xd8>
		address_rmc = 0x3000;
 80038ee:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 80038f2:	6028      	str	r0, [r5, #0]
		W25_SectorErase(address_rmc);
 80038f4:	f7ff fe78 	bl	80035e8 <W25_SectorErase>
	}
	HAL_Delay(1000);
 80038f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038fc:	f000 fcd6 	bl	80042ac <HAL_Delay>
	Debug_printf("\n");
 8003900:	480f      	ldr	r0, [pc, #60]	@ (8003940 <saveRMC+0x120>)
 8003902:	f000 fc63 	bl	80041cc <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8003906:	480f      	ldr	r0, [pc, #60]	@ (8003944 <saveRMC+0x124>)
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	2100      	movs	r1, #0
}
 800390c:	b004      	add	sp, #16
 800390e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8003912:	f007 b81b 	b.w	800a94c <memset>
 8003916:	bf00      	nop
 8003918:	200016e8 	.word	0x200016e8
 800391c:	0800f97e 	.word	0x0800f97e
 8003920:	20000004 	.word	0x20000004
 8003924:	200015e8 	.word	0x200015e8
 8003928:	0800f704 	.word	0x0800f704
 800392c:	20001248 	.word	0x20001248
 8003930:	0800f0eb 	.word	0x0800f0eb
 8003934:	20000000 	.word	0x20000000
 8003938:	0800f99f 	.word	0x0800f99f
 800393c:	0800f9bf 	.word	0x0800f9bf
 8003940:	0800f638 	.word	0x0800f638
 8003944:	20001668 	.word	0x20001668

08003948 <sendRMCDataWithAddrToGSM>:
		}
	}
}

void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8003948:	6983      	ldr	r3, [r0, #24]
 800394a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8003950:	dd18      	ble.n	8003984 <sendRMCDataWithAddrToGSM+0x3c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003952:	4e0d      	ldr	r6, [pc, #52]	@ (8003988 <sendRMCDataWithAddrToGSM+0x40>)
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8003954:	490d      	ldr	r1, [pc, #52]	@ (800398c <sendRMCDataWithAddrToGSM+0x44>)
 8003956:	480e      	ldr	r0, [pc, #56]	@ (8003990 <sendRMCDataWithAddrToGSM+0x48>)
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	2221      	movs	r2, #33	@ 0x21
 800395e:	f003 fb4b 	bl	8006ff8 <HAL_UART_Transmit>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003962:	6830      	ldr	r0, [r6, #0]
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	f003 fd82 	bl	8007470 <osMailAlloc>
 800396c:	4604      	mov	r4, r0
		if (mail != NULL) {
 800396e:	b148      	cbz	r0, 8003984 <sendRMCDataWithAddrToGSM+0x3c>
			*mail = *mail_data; // Copy data into allocated memory
 8003970:	4629      	mov	r1, r5
 8003972:	2260      	movs	r2, #96	@ 0x60
 8003974:	f007 fe43 	bl	800b5fe <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003978:	6830      	ldr	r0, [r6, #0]
 800397a:	4621      	mov	r1, r4
		}
	}
}
 800397c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003980:	f003 bd7b 	b.w	800747a <osMailPut>
}
 8003984:	bd70      	pop	{r4, r5, r6, pc}
 8003986:	bf00      	nop
 8003988:	20000e04 	.word	0x20000e04
 800398c:	0800f9dc 	.word	0x0800f9dc
 8003990:	20001248 	.word	0x20001248

08003994 <receiveRMCDataFromGPS>:
			osMailPut(addr_MailQGSMId, mail); // Send the mail
		}
	}
}

void receiveRMCDataFromGPS(void) {
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003996:	4e64      	ldr	r6, [pc, #400]	@ (8003b28 <receiveRMCDataFromGPS+0x194>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8003998:	4964      	ldr	r1, [pc, #400]	@ (8003b2c <receiveRMCDataFromGPS+0x198>)
 800399a:	4865      	ldr	r0, [pc, #404]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
void receiveRMCDataFromGPS(void) {
 800399c:	b09f      	sub	sp, #124	@ 0x7c
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 800399e:	f000 fc05 	bl	80041ac <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 80039a2:	6831      	ldr	r1, [r6, #0]
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	a809      	add	r0, sp, #36	@ 0x24
 80039aa:	f003 fd91 	bl	80074d0 <osMailGet>
	if(evt.status == osEventMail){
 80039ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	f040 80b6 	bne.w	8003b22 <receiveRMCDataFromGPS+0x18e>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 80039b6:	495f      	ldr	r1, [pc, #380]	@ (8003b34 <receiveRMCDataFromGPS+0x1a0>)
 80039b8:	485d      	ldr	r0, [pc, #372]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
//		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
//		uart_transmit_string(&huart1, output_buffer);
//		uart_transmit_string(&huart1, (uint8_t*)"\n\n");

		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 80039ba:	4c5f      	ldr	r4, [pc, #380]	@ (8003b38 <receiveRMCDataFromGPS+0x1a4>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 80039bc:	f000 fbf6 	bl	80041ac <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 80039c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 80039c2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80039c6:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 80039ca:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80039ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 80039d2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80039d4:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 80039d6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80039d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 80039da:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80039de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 80039e2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80039e6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 80039ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039ec:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 80039f2:	686b      	ldr	r3, [r5, #4]
 80039f4:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 80039f6:	68ab      	ldr	r3, [r5, #8]
 80039f8:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 80039fa:	69ab      	ldr	r3, [r5, #24]
 80039fc:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 80039fe:	696b      	ldr	r3, [r5, #20]
 8003a00:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;


		get_RTC_time_date(&rmc_flash);
 8003a02:	4620      	mov	r0, r4
		rmc_flash.date.Day = receivedData->date.Day;
 8003a04:	692b      	ldr	r3, [r5, #16]
 8003a06:	6123      	str	r3, [r4, #16]
		get_RTC_time_date(&rmc_flash);
 8003a08:	f7ff f9d4 	bl	8002db4 <get_RTC_time_date>
//		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
//		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8003a0c:	68a3      	ldr	r3, [r4, #8]
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	4a49      	ldr	r2, [pc, #292]	@ (8003b3c <receiveRMCDataFromGPS+0x1a8>)
 8003a18:	2146      	movs	r1, #70	@ 0x46
 8003a1a:	a80c      	add	r0, sp, #48	@ 0x30
 8003a1c:	f006 fe9a 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003a20:	4843      	ldr	r0, [pc, #268]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
 8003a22:	a90c      	add	r1, sp, #48	@ 0x30
 8003a24:	f000 fbc2 	bl	80041ac <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FROM GPS AT SPI FLASH : %d/%d/%d\n", rmc_flash.date.Day, rmc_flash.date.Mon, rmc_flash.date.Yr);
 8003a28:	69a3      	ldr	r3, [r4, #24]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	6963      	ldr	r3, [r4, #20]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	4a43      	ldr	r2, [pc, #268]	@ (8003b40 <receiveRMCDataFromGPS+0x1ac>)
 8003a34:	2146      	movs	r1, #70	@ 0x46
 8003a36:	a80c      	add	r0, sp, #48	@ 0x30
 8003a38:	f006 fe8c 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003a3c:	483c      	ldr	r0, [pc, #240]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
 8003a3e:	a90c      	add	r1, sp, #48	@ 0x30
 8003a40:	f000 fbb4 	bl	80041ac <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8003a44:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003a48:	9306      	str	r3, [sp, #24]
 8003a4a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a52:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003a5c:	2146      	movs	r1, #70	@ 0x46
 8003a5e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a62:	a80c      	add	r0, sp, #48	@ 0x30
 8003a64:	4a37      	ldr	r2, [pc, #220]	@ (8003b44 <receiveRMCDataFromGPS+0x1b0>)
 8003a66:	f006 fe75 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003a6a:	4831      	ldr	r0, [pc, #196]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
 8003a6c:	a90c      	add	r1, sp, #48	@ 0x30
 8003a6e:	f000 fb9d 	bl	80041ac <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8003a72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a74:	9304      	str	r3, [sp, #16]
 8003a76:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003a78:	f7fc fd76 	bl	8000568 <__aeabi_f2d>
 8003a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a80:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003a82:	f7fc fd71 	bl	8000568 <__aeabi_f2d>
 8003a86:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <receiveRMCDataFromGPS+0x1b4>)
 8003a88:	e9cd 0100 	strd	r0, r1, [sp]
 8003a8c:	2146      	movs	r1, #70	@ 0x46
 8003a8e:	a80c      	add	r0, sp, #48	@ 0x30
 8003a90:	f006 fe60 	bl	800a754 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003a94:	4826      	ldr	r0, [pc, #152]	@ (8003b30 <receiveRMCDataFromGPS+0x19c>)
 8003a96:	a90c      	add	r1, sp, #48	@ 0x30
 8003a98:	f000 fb88 	bl	80041ac <uart_transmit_string>

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8003a9c:	492b      	ldr	r1, [pc, #172]	@ (8003b4c <receiveRMCDataFromGPS+0x1b8>)
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f7ff fe67 	bl	8003774 <format_rmc_data>

		if(rmc_flash.date.Yr >= 24 && countRMCReceived == 9){
 8003aa6:	69a3      	ldr	r3, [r4, #24]
 8003aa8:	2b17      	cmp	r3, #23
 8003aaa:	dd2f      	ble.n	8003b0c <receiveRMCDataFromGPS+0x178>
 8003aac:	4f28      	ldr	r7, [pc, #160]	@ (8003b50 <receiveRMCDataFromGPS+0x1bc>)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d12b      	bne.n	8003b0c <receiveRMCDataFromGPS+0x178>
			saveRMC();
 8003ab4:	f7ff feb4 	bl	8003820 <saveRMC>
			//sendRMCDataToGSM(&rmc_flash);
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8003ab8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003abc:	4825      	ldr	r0, [pc, #148]	@ (8003b54 <receiveRMCDataFromGPS+0x1c0>)
 8003abe:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8003ac2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003ac6:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
			mail_gsm.rmc.speed = rmc_flash.speed;
 8003aca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003acc:	6283      	str	r3, [r0, #40]	@ 0x28
			mail_gsm.rmc.course = rmc_flash.course;
 8003ace:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ad0:	62c3      	str	r3, [r0, #44]	@ 0x2c
			mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8003ad2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003ad6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8003ada:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003ade:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
			mail_gsm.rmc.isValid = rmc_flash.isValid;
 8003ae2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ae4:	6303      	str	r3, [r0, #48]	@ 0x30
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	6003      	str	r3, [r0, #0]
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	6043      	str	r3, [r0, #4]
			mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8003aee:	68a3      	ldr	r3, [r4, #8]
 8003af0:	6083      	str	r3, [r0, #8]
			mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8003af2:	69a3      	ldr	r3, [r4, #24]
 8003af4:	6183      	str	r3, [r0, #24]
			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8003af6:	6963      	ldr	r3, [r4, #20]
 8003af8:	6143      	str	r3, [r0, #20]
			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	6103      	str	r3, [r0, #16]
			mail_gsm.address = current_addr;
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <receiveRMCDataFromGPS+0x1c4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6583      	str	r3, [r0, #88]	@ 0x58
//			sendAddresstoGSM();
			sendRMCDataWithAddrToGSM(&mail_gsm);
 8003b04:	f7ff ff20 	bl	8003948 <sendRMCDataWithAddrToGSM>
			countRMCReceived = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	603b      	str	r3, [r7, #0]
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 8003b0c:	6830      	ldr	r0, [r6, #0]
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f003 fd17 	bl	8007542 <osMailFree>
		// Free memory after use
		if(rmc_flash.date.Yr >= 24)
 8003b14:	69a3      	ldr	r3, [r4, #24]
 8003b16:	2b17      	cmp	r3, #23
			countRMCReceived++;
 8003b18:	bfc1      	itttt	gt
 8003b1a:	4a0d      	ldrgt	r2, [pc, #52]	@ (8003b50 <receiveRMCDataFromGPS+0x1bc>)
 8003b1c:	6813      	ldrgt	r3, [r2, #0]
 8003b1e:	3301      	addgt	r3, #1
 8003b20:	6013      	strgt	r3, [r2, #0]
	}
}
 8003b22:	b01f      	add	sp, #124	@ 0x7c
 8003b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200002c8 	.word	0x200002c8
 8003b2c:	0800f9fe 	.word	0x0800f9fe
 8003b30:	20001248 	.word	0x20001248
 8003b34:	0800fa23 	.word	0x0800fa23
 8003b38:	20001590 	.word	0x20001590
 8003b3c:	0800fa44 	.word	0x0800fa44
 8003b40:	0800fa75 	.word	0x0800fa75
 8003b44:	0800faa5 	.word	0x0800faa5
 8003b48:	0800fae0 	.word	0x0800fae0
 8003b4c:	200015e8 	.word	0x200015e8
 8003b50:	2000152c 	.word	0x2000152c
 8003b54:	20001530 	.word	0x20001530
 8003b58:	20000000 	.word	0x20000000

08003b5c <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 8003b5c:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8003b5e:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <StartSpiFlash+0xa8>)
 8003b60:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8003c1c <StartSpiFlash+0xc0>
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8c8 3000 	str.w	r3, [r8]
{
 8003b6a:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8003b6c:	2360      	movs	r3, #96	@ 0x60
 8003b6e:	2280      	movs	r2, #128	@ 0x80
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003b70:	2100      	movs	r1, #0
 8003b72:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8003b74:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003b78:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003b7c:	f003 fc4d 	bl	800741a <osMailCreate>
 8003b80:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <StartSpiFlash+0xac>)
		osDelay(1500);
		//uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8003b82:	4e22      	ldr	r6, [pc, #136]	@ (8003c0c <StartSpiFlash+0xb0>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003b84:	4d22      	ldr	r5, [pc, #136]	@ (8003c10 <StartSpiFlash+0xb4>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003b86:	6018      	str	r0, [r3, #0]
		osDelay(1500);
 8003b88:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003b8c:	f003 fba4 	bl	80072d8 <osDelay>
		W25_Reset();
 8003b90:	f7ff fc7f 	bl	8003492 <W25_Reset>
		W25_ReadJedecID();
 8003b94:	f7ff fcaa 	bl	80034ec <W25_ReadJedecID>
		W25_Reset();
 8003b98:	f7ff fc7b 	bl	8003492 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8003b9c:	2280      	movs	r2, #128	@ 0x80
 8003b9e:	f8d8 0000 	ldr.w	r0, [r8]
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	f7ff fd96 	bl	80036d4 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <StartSpiFlash+0xb8>)
 8003baa:	aa04      	add	r2, sp, #16
 8003bac:	f103 0c10 	add.w	ip, r3, #16
 8003bb0:	4617      	mov	r7, r2
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	c403      	stmia	r4!, {r0, r1}
 8003bba:	3308      	adds	r3, #8
 8003bbc:	4563      	cmp	r3, ip
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	d1f7      	bne.n	8003bb2 <StartSpiFlash+0x56>
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	889b      	ldrh	r3, [r3, #4]
 8003bc6:	6020      	str	r0, [r4, #0]
 8003bc8:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f7fc fb60 	bl	8000290 <strlen>
 8003bd0:	4639      	mov	r1, r7
 8003bd2:	b282      	uxth	r2, r0
 8003bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f003 fa0d 	bl	8006ff8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003be2:	2280      	movs	r2, #128	@ 0x80
 8003be4:	4631      	mov	r1, r6
 8003be6:	4628      	mov	r0, r5
 8003be8:	f003 fa06 	bl	8006ff8 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8003bec:	f7ff fed2 	bl	8003994 <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	4909      	ldr	r1, [pc, #36]	@ (8003c18 <StartSpiFlash+0xbc>)
 8003bf4:	f000 fada 	bl	80041ac <uart_transmit_string>
		osDelay(1500);
 8003bf8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003bfc:	f003 fb6c 	bl	80072d8 <osDelay>
	for(;;){
 8003c00:	e7c2      	b.n	8003b88 <StartSpiFlash+0x2c>
 8003c02:	bf00      	nop
 8003c04:	20000004 	.word	0x20000004
 8003c08:	20000e04 	.word	0x20000e04
 8003c0c:	20001668 	.word	0x20001668
 8003c10:	20001248 	.word	0x20001248
 8003c14:	0800fb1e 	.word	0x0800fb1e
 8003c18:	0800f637 	.word	0x0800f637
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c20:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_MspInit+0x38>)
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	f042 0201 	orr.w	r2, r2, #1
 8003c28:	619a      	str	r2, [r3, #24]
 8003c2a:	699a      	ldr	r2, [r3, #24]
{
 8003c2c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2e:	f002 0201 	and.w	r2, r2, #1
 8003c32:	9200      	str	r2, [sp, #0]
 8003c34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003c3c:	61da      	str	r2, [r3, #28]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	210f      	movs	r1, #15
 8003c4c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c50:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c52:	f001 b891 	b.w	8004d78 <HAL_NVIC_SetPriority>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	2214      	movs	r2, #20
{
 8003c60:	b08a      	sub	sp, #40	@ 0x28
 8003c62:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	2100      	movs	r1, #0
 8003c66:	eb0d 0002 	add.w	r0, sp, r2
 8003c6a:	f006 fe6f 	bl	800a94c <memset>
  if(hadc->Instance==ADC2)
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	4a3d      	ldr	r2, [pc, #244]	@ (8003d68 <HAL_ADC_MspInit+0x10c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d137      	bne.n	8003ce6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c76:	4b3d      	ldr	r3, [pc, #244]	@ (8003d6c <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8003c78:	4c3d      	ldr	r4, [pc, #244]	@ (8003d70 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003c80:	615a      	str	r2, [r3, #20]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8003c88:	9201      	str	r2, [sp, #4]
 8003c8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003c92:	615a      	str	r2, [r3, #20]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	9302      	str	r3, [sp, #8]
 8003c9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9e:	2620      	movs	r6, #32
 8003ca0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ca6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca8:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f001 f988 	bl	8004fc0 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb4:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8003d84 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cb8:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cbc:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cbe:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003cc2:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc8:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003ccc:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd0:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003cd2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003cd4:	f001 f8b0 	bl	8004e38 <HAL_DMA_Init>
 8003cd8:	b108      	cbz	r0, 8003cde <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8003cda:	f7ff fb92 	bl	8003402 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003cde:	63ac      	str	r4, [r5, #56]	@ 0x38
 8003ce0:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ce2:	b00a      	add	sp, #40	@ 0x28
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8003ce6:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <HAL_ADC_MspInit+0x118>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d1fa      	bne.n	8003ce2 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003cec:	4b1f      	ldr	r3, [pc, #124]	@ (8003d6c <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8003cee:	4c22      	ldr	r4, [pc, #136]	@ (8003d78 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003cf0:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf2:	4822      	ldr	r0, [pc, #136]	@ (8003d7c <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003cf4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003cf8:	615a      	str	r2, [r3, #20]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003d0a:	615a      	str	r2, [r3, #20]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d14:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d16:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	f001 f94e 	bl	8004fc0 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d24:	2080      	movs	r0, #128	@ 0x80
 8003d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2a:	4915      	ldr	r1, [pc, #84]	@ (8003d80 <HAL_ADC_MspInit+0x124>)
 8003d2c:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d2e:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003d32:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8003d36:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003d38:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d3a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003d3e:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d42:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003d44:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003d46:	f001 f877 	bl	8004e38 <HAL_DMA_Init>
 8003d4a:	b108      	cbz	r0, 8003d50 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8003d4c:	f7ff fb59 	bl	8003402 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003d50:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2105      	movs	r1, #5
 8003d56:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003d58:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8003d5a:	f001 f80d 	bl	8004d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003d5e:	202f      	movs	r0, #47	@ 0x2f
 8003d60:	f001 f83c 	bl	8004ddc <HAL_NVIC_EnableIRQ>
}
 8003d64:	e7bd      	b.n	8003ce2 <HAL_ADC_MspInit+0x86>
 8003d66:	bf00      	nop
 8003d68:	50000100 	.word	0x50000100
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	20001448 	.word	0x20001448
 8003d74:	50000400 	.word	0x50000400
 8003d78:	20001404 	.word	0x20001404
 8003d7c:	48000400 	.word	0x48000400
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020408 	.word	0x40020408

08003d88 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003d88:	6802      	ldr	r2, [r0, #0]
 8003d8a:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <HAL_RTC_MspInit+0x20>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d10a      	bne.n	8003da6 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d94:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <HAL_RTC_MspInit+0x24>)
 8003d9a:	fab2 f282 	clz	r2, r2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003da6:	4770      	bx	lr
 8003da8:	40002800 	.word	0x40002800
 8003dac:	10908100 	.word	0x10908100

08003db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003db0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db2:	2214      	movs	r2, #20
{
 8003db4:	b08a      	sub	sp, #40	@ 0x28
 8003db6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	2100      	movs	r1, #0
 8003dba:	eb0d 0002 	add.w	r0, sp, r2
 8003dbe:	f006 fdc5 	bl	800a94c <memset>
  if(hspi->Instance==SPI1)
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <HAL_SPI_MspInit+0x90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d120      	bne.n	8003e0c <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dca:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_SPI_MspInit+0x94>)
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dd2:	619a      	str	r2, [r3, #24]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003dda:	9201      	str	r2, [sp, #4]
 8003ddc:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003de4:	615a      	str	r2, [r3, #20]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dec:	9302      	str	r3, [sp, #8]
 8003dee:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003df0:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003df2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df6:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dfa:	2305      	movs	r3, #5
 8003dfc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	4811      	ldr	r0, [pc, #68]	@ (8003e48 <HAL_SPI_MspInit+0x98>)
 8003e02:	a905      	add	r1, sp, #20
 8003e04:	f001 f8dc 	bl	8004fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e08:	b00a      	add	sp, #40	@ 0x28
 8003e0a:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e4c <HAL_SPI_MspInit+0x9c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d1fa      	bne.n	8003e08 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e12:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <HAL_SPI_MspInit+0x94>)
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e1a:	61da      	str	r2, [r3, #28]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003e22:	9203      	str	r2, [sp, #12]
 8003e24:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e2c:	615a      	str	r2, [r3, #20]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e38:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e3c:	e7d9      	b.n	8003df2 <HAL_SPI_MspInit+0x42>
 8003e3e:	bf00      	nop
 8003e40:	40013000 	.word	0x40013000
 8003e44:	40021000 	.word	0x40021000
 8003e48:	48000400 	.word	0x48000400
 8003e4c:	40003800 	.word	0x40003800

08003e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e50:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8003e52:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_TIM_Base_MspInit+0x3c>)
 8003e54:	6802      	ldr	r2, [r0, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d115      	bne.n	8003e86 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e5a:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003e5e:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	f042 0202 	orr.w	r2, r2, #2
 8003e66:	61da      	str	r2, [r3, #28]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003e76:	f000 ff7f 	bl	8004d78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e7a:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003e7c:	b003      	add	sp, #12
 8003e7e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e82:	f000 bfab 	b.w	8004ddc <HAL_NVIC_EnableIRQ>
}
 8003e86:	b003      	add	sp, #12
 8003e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e8c:	40000400 	.word	0x40000400

08003e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e90:	b530      	push	{r4, r5, lr}
 8003e92:	4605      	mov	r5, r0
 8003e94:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e96:	2214      	movs	r2, #20
 8003e98:	2100      	movs	r1, #0
 8003e9a:	a807      	add	r0, sp, #28
 8003e9c:	f006 fd56 	bl	800a94c <memset>
  if(huart->Instance==USART1)
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <HAL_UART_MspInit+0x13c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d137      	bne.n	8003f18 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ea8:	4b49      	ldr	r3, [pc, #292]	@ (8003fd0 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003eaa:	4c4a      	ldr	r4, [pc, #296]	@ (8003fd4 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eb2:	619a      	str	r2, [r3, #24]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003eba:	9201      	str	r2, [sp, #4]
 8003ebc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003ec4:	615a      	str	r2, [r3, #20]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eda:	2203      	movs	r2, #3
 8003edc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	a907      	add	r1, sp, #28
 8003ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ee4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee8:	f001 f86a 	bl	8004fc0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003eec:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd8 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003eee:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef0:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ef2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ef4:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ef8:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003efc:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003efe:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f00:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f02:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 ff97 	bl	8004e38 <HAL_DMA_Init>
 8003f0a:	b108      	cbz	r0, 8003f10 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8003f0c:	f7ff fa79 	bl	8003402 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003f10:	676c      	str	r4, [r5, #116]	@ 0x74
 8003f12:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f14:	b00d      	add	sp, #52	@ 0x34
 8003f16:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8003f18:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <HAL_UART_MspInit+0x14c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d123      	bne.n	8003f66 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd0 <HAL_UART_MspInit+0x140>)
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f26:	61da      	str	r2, [r3, #28]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003f2e:	9203      	str	r2, [sp, #12]
 8003f30:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f38:	615a      	str	r2, [r3, #20]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f44:	240c      	movs	r4, #12
 8003f46:	2302      	movs	r3, #2
 8003f48:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f4c:	f04f 0c03 	mov.w	ip, #3
 8003f50:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	a907      	add	r1, sp, #28
 8003f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f58:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003f5c:	4c20      	ldr	r4, [pc, #128]	@ (8003fe0 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5e:	f001 f82f 	bl	8004fc0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003f62:	4b20      	ldr	r3, [pc, #128]	@ (8003fe4 <HAL_UART_MspInit+0x154>)
 8003f64:	e7c3      	b.n	8003eee <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 8003f66:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <HAL_UART_MspInit+0x158>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d1d3      	bne.n	8003f14 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f6c:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f6e:	481f      	ldr	r0, [pc, #124]	@ (8003fec <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f70:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003f72:	4c1f      	ldr	r4, [pc, #124]	@ (8003ff0 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f74:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f78:	61da      	str	r2, [r3, #28]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8003f80:	9205      	str	r2, [sp, #20]
 8003f82:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f8a:	615a      	str	r2, [r3, #20]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f92:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f98:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fa0:	2103      	movs	r1, #3
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa8:	a907      	add	r1, sp, #28
 8003faa:	f001 f809 	bl	8004fc0 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fae:	4811      	ldr	r0, [pc, #68]	@ (8003ff4 <HAL_UART_MspInit+0x164>)
 8003fb0:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fb2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb4:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fb8:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fbc:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fbe:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fc8:	e79b      	b.n	8003f02 <HAL_UART_MspInit+0x72>
 8003fca:	bf00      	nop
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	200010f4 	.word	0x200010f4
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	200010b0 	.word	0x200010b0
 8003fe4:	4002006c 	.word	0x4002006c
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	48000400 	.word	0x48000400
 8003ff0:	2000106c 	.word	0x2000106c
 8003ff4:	40020030 	.word	0x40020030

08003ff8 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003ff8:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <HAL_InitTick+0x88>)
{
 8003ffa:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	61da      	str	r2, [r3, #28]
 8004004:	69db      	ldr	r3, [r3, #28]
{
 8004006:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	9302      	str	r3, [sp, #8]
{
 800400e:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004010:	a901      	add	r1, sp, #4
 8004012:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004014:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004016:	f001 fbfd 	bl	8005814 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800401a:	9b06      	ldr	r3, [sp, #24]
 800401c:	bb53      	cbnz	r3, 8004074 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800401e:	f001 fbc9 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004022:	4e18      	ldr	r6, [pc, #96]	@ (8004084 <HAL_InitTick+0x8c>)
 8004024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004028:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800402a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800402e:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004030:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_InitTick+0x90>)
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004038:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 800403a:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004040:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004042:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004044:	f002 fc2a 	bl	800689c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004048:	4604      	mov	r4, r0
 800404a:	b980      	cbnz	r0, 800406e <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800404c:	4630      	mov	r0, r6
 800404e:	f002 fae7 	bl	8006620 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004052:	4604      	mov	r4, r0
 8004054:	b958      	cbnz	r0, 800406e <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004056:	201c      	movs	r0, #28
 8004058:	f000 fec0 	bl	8004ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405c:	2d0f      	cmp	r5, #15
 800405e:	d80d      	bhi.n	800407c <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004060:	4622      	mov	r2, r4
 8004062:	4629      	mov	r1, r5
 8004064:	201c      	movs	r0, #28
 8004066:	f000 fe87 	bl	8004d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_InitTick+0x94>)
 800406c:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800406e:	4620      	mov	r0, r4
 8004070:	b008      	add	sp, #32
 8004072:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004074:	f001 fb9e 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8004078:	0040      	lsls	r0, r0, #1
 800407a:	e7d2      	b.n	8004022 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 800407c:	2401      	movs	r4, #1
 800407e:	e7f6      	b.n	800406e <HAL_InitTick+0x76>
 8004080:	40021000 	.word	0x40021000
 8004084:	200016ec 	.word	0x200016ec
 8004088:	000f4240 	.word	0x000f4240
 800408c:	20000014 	.word	0x20000014

08004090 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004090:	e7fe      	b.n	8004090 <NMI_Handler>

08004092 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004092:	e7fe      	b.n	8004092 <HardFault_Handler>

08004094 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004094:	e7fe      	b.n	8004094 <MemManage_Handler>

08004096 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler>

08004098 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <UsageFault_Handler>

0800409a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800409a:	4770      	bx	lr

0800409c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <DMA1_Channel3_IRQHandler+0x8>)
 800409e:	f000 bf47 	b.w	8004f30 <HAL_DMA_IRQHandler>
 80040a2:	bf00      	nop
 80040a4:	2000106c 	.word	0x2000106c

080040a8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040a8:	4801      	ldr	r0, [pc, #4]	@ (80040b0 <DMA1_Channel5_IRQHandler+0x8>)
 80040aa:	f000 bf41 	b.w	8004f30 <HAL_DMA_IRQHandler>
 80040ae:	bf00      	nop
 80040b0:	200010f4 	.word	0x200010f4

080040b4 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80040b4:	4801      	ldr	r0, [pc, #4]	@ (80040bc <DMA1_Channel6_IRQHandler+0x8>)
 80040b6:	f000 bf3b 	b.w	8004f30 <HAL_DMA_IRQHandler>
 80040ba:	bf00      	nop
 80040bc:	200010b0 	.word	0x200010b0

080040c0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040c0:	4801      	ldr	r0, [pc, #4]	@ (80040c8 <TIM2_IRQHandler+0x8>)
 80040c2:	f002 bae7 	b.w	8006694 <HAL_TIM_IRQHandler>
 80040c6:	bf00      	nop
 80040c8:	200016ec 	.word	0x200016ec

080040cc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80040cc:	4801      	ldr	r0, [pc, #4]	@ (80040d4 <TIM3_IRQHandler+0x8>)
 80040ce:	f002 bae1 	b.w	8006694 <HAL_TIM_IRQHandler>
 80040d2:	bf00      	nop
 80040d4:	200012d0 	.word	0x200012d0

080040d8 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80040d8:	4801      	ldr	r0, [pc, #4]	@ (80040e0 <ADC3_IRQHandler+0x8>)
 80040da:	f000 ba51 	b.w	8004580 <HAL_ADC_IRQHandler>
 80040de:	bf00      	nop
 80040e0:	2000148c 	.word	0x2000148c

080040e4 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80040e4:	4801      	ldr	r0, [pc, #4]	@ (80040ec <DMA2_Channel1_IRQHandler+0x8>)
 80040e6:	f000 bf23 	b.w	8004f30 <HAL_DMA_IRQHandler>
 80040ea:	bf00      	nop
 80040ec:	20001448 	.word	0x20001448

080040f0 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80040f0:	4801      	ldr	r0, [pc, #4]	@ (80040f8 <DMA2_Channel5_IRQHandler+0x8>)
 80040f2:	f000 bf1d 	b.w	8004f30 <HAL_DMA_IRQHandler>
 80040f6:	bf00      	nop
 80040f8:	20001404 	.word	0x20001404

080040fc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80040fc:	2001      	movs	r0, #1
 80040fe:	4770      	bx	lr

08004100 <_kill>:

int _kill(int pid, int sig)
{
 8004100:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004102:	f007 fa45 	bl	800b590 <__errno>
 8004106:	2316      	movs	r3, #22
 8004108:	6003      	str	r3, [r0, #0]
  return -1;
}
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	bd08      	pop	{r3, pc}

08004110 <_exit>:

void _exit (int status)
{
 8004110:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004112:	f007 fa3d 	bl	800b590 <__errno>
 8004116:	2316      	movs	r3, #22
 8004118:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800411a:	e7fe      	b.n	800411a <_exit+0xa>

0800411c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	460d      	mov	r5, r1
 8004120:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004122:	460e      	mov	r6, r1
 8004124:	1b73      	subs	r3, r6, r5
 8004126:	429c      	cmp	r4, r3
 8004128:	dc01      	bgt.n	800412e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800412a:	4620      	mov	r0, r4
 800412c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800412e:	f3af 8000 	nop.w
 8004132:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004136:	e7f5      	b.n	8004124 <_read+0x8>

08004138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	460d      	mov	r5, r1
 800413c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413e:	460e      	mov	r6, r1
 8004140:	1b73      	subs	r3, r6, r5
 8004142:	429c      	cmp	r4, r3
 8004144:	dc01      	bgt.n	800414a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004146:	4620      	mov	r0, r4
 8004148:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800414a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800414e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004152:	e7f5      	b.n	8004140 <_write+0x8>

08004154 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	4770      	bx	lr

0800415a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800415a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800415e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004160:	2000      	movs	r0, #0
 8004162:	4770      	bx	lr

08004164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004164:	2001      	movs	r0, #1
 8004166:	4770      	bx	lr

08004168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004168:	2000      	movs	r0, #0
 800416a:	4770      	bx	lr

0800416c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800416c:	4a0b      	ldr	r2, [pc, #44]	@ (800419c <_sbrk+0x30>)
 800416e:	6811      	ldr	r1, [r2, #0]
{
 8004170:	b510      	push	{r4, lr}
 8004172:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004174:	b909      	cbnz	r1, 800417a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004176:	490a      	ldr	r1, [pc, #40]	@ (80041a0 <_sbrk+0x34>)
 8004178:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800417a:	6810      	ldr	r0, [r2, #0]
 800417c:	4909      	ldr	r1, [pc, #36]	@ (80041a4 <_sbrk+0x38>)
 800417e:	4c0a      	ldr	r4, [pc, #40]	@ (80041a8 <_sbrk+0x3c>)
 8004180:	4403      	add	r3, r0
 8004182:	1b09      	subs	r1, r1, r4
 8004184:	428b      	cmp	r3, r1
 8004186:	d906      	bls.n	8004196 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004188:	f007 fa02 	bl	800b590 <__errno>
 800418c:	230c      	movs	r3, #12
 800418e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004190:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004194:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004196:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004198:	e7fc      	b.n	8004194 <_sbrk+0x28>
 800419a:	bf00      	nop
 800419c:	2000173c 	.word	0x2000173c
 80041a0:	20009700 	.word	0x20009700
 80041a4:	2000a000 	.word	0x2000a000
 80041a8:	00000400 	.word	0x00000400

080041ac <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80041b0:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80041b2:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80041b4:	f7fc f86c 	bl	8000290 <strlen>
 80041b8:	4621      	mov	r1, r4
 80041ba:	b282      	uxth	r2, r0
 80041bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041c0:	4628      	mov	r0, r5
}
 80041c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80041c6:	f002 bf17 	b.w	8006ff8 <HAL_UART_Transmit>
	...

080041cc <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80041cc:	b40f      	push	{r0, r1, r2, r3}
 80041ce:	b500      	push	{lr}
 80041d0:	b0c3      	sub	sp, #268	@ 0x10c
 80041d2:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80041d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80041d8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80041dc:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80041de:	a802      	add	r0, sp, #8
 80041e0:	f006 fba6 	bl	800a930 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 80041e4:	4804      	ldr	r0, [pc, #16]	@ (80041f8 <Debug_printf+0x2c>)
 80041e6:	a902      	add	r1, sp, #8
 80041e8:	f7ff ffe0 	bl	80041ac <uart_transmit_string>
}
 80041ec:	b043      	add	sp, #268	@ 0x10c
 80041ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f2:	b004      	add	sp, #16
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20001248 	.word	0x20001248

080041fc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041fc:	4a03      	ldr	r2, [pc, #12]	@ (800420c <SystemInit+0x10>)
 80041fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004206:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004248 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004214:	f7ff fff2 	bl	80041fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004218:	480c      	ldr	r0, [pc, #48]	@ (800424c <LoopForever+0x6>)
  ldr r1, =_edata
 800421a:	490d      	ldr	r1, [pc, #52]	@ (8004250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800421c:	4a0d      	ldr	r2, [pc, #52]	@ (8004254 <LoopForever+0xe>)
  movs r3, #0
 800421e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004220:	e002      	b.n	8004228 <LoopCopyDataInit>

08004222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004226:	3304      	adds	r3, #4

08004228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800422c:	d3f9      	bcc.n	8004222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422e:	4a0a      	ldr	r2, [pc, #40]	@ (8004258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004230:	4c0a      	ldr	r4, [pc, #40]	@ (800425c <LoopForever+0x16>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004234:	e001      	b.n	800423a <LoopFillZerobss>

08004236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004238:	3204      	adds	r2, #4

0800423a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800423c:	d3fb      	bcc.n	8004236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800423e:	f007 f9ad 	bl	800b59c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004242:	f7fe fe75 	bl	8002f30 <main>

08004246 <LoopForever>:

LoopForever:
    b LoopForever
 8004246:	e7fe      	b.n	8004246 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004248:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800424c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004250:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004254:	080100d0 	.word	0x080100d0
  ldr r2, =_sbss
 8004258:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800425c:	200096fc 	.word	0x200096fc

08004260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC1_2_IRQHandler>
	...

08004264 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004264:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <HAL_Init+0x20>)
{
 8004266:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	f043 0310 	orr.w	r3, r3, #16
 800426e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004270:	2003      	movs	r0, #3
 8004272:	f000 fd6f 	bl	8004d54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004276:	200f      	movs	r0, #15
 8004278:	f7ff febe 	bl	8003ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800427c:	f7ff fcd0 	bl	8003c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004280:	2000      	movs	r0, #0
 8004282:	bd08      	pop	{r3, pc}
 8004284:	40022000 	.word	0x40022000

08004288 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004288:	4a03      	ldr	r2, [pc, #12]	@ (8004298 <HAL_IncTick+0x10>)
 800428a:	4b04      	ldr	r3, [pc, #16]	@ (800429c <HAL_IncTick+0x14>)
 800428c:	6811      	ldr	r1, [r2, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	440b      	add	r3, r1
 8004292:	6013      	str	r3, [r2, #0]
}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20001740 	.word	0x20001740
 800429c:	20000010 	.word	0x20000010

080042a0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80042a0:	4b01      	ldr	r3, [pc, #4]	@ (80042a8 <HAL_GetTick+0x8>)
 80042a2:	6818      	ldr	r0, [r3, #0]
}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20001740 	.word	0x20001740

080042ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80042b0:	f7ff fff6 	bl	80042a0 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80042b6:	bf1c      	itt	ne
 80042b8:	4b05      	ldrne	r3, [pc, #20]	@ (80042d0 <HAL_Delay+0x24>)
 80042ba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80042bc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80042be:	bf18      	it	ne
 80042c0:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80042c2:	f7ff ffed 	bl	80042a0 <HAL_GetTick>
 80042c6:	1b43      	subs	r3, r0, r5
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	d3fa      	bcc.n	80042c2 <HAL_Delay+0x16>
  {
  }
}
 80042cc:	bd38      	pop	{r3, r4, r5, pc}
 80042ce:	bf00      	nop
 80042d0:	20000010 	.word	0x20000010

080042d4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80042d4:	4770      	bx	lr

080042d6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80042d6:	4770      	bx	lr

080042d8 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80042d8:	4770      	bx	lr

080042da <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80042da:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80042dc:	6803      	ldr	r3, [r0, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f002 0203 	and.w	r2, r2, #3
 80042e4:	2a01      	cmp	r2, #1
{
 80042e6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80042e8:	d001      	beq.n	80042ee <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80042ea:	2000      	movs	r0, #0
}
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	07d1      	lsls	r1, r2, #31
 80042f2:	d5fa      	bpl.n	80042ea <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	f002 020d 	and.w	r2, r2, #13
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	d115      	bne.n	800432a <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	f042 0202 	orr.w	r2, r2, #2
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	2203      	movs	r2, #3
 8004308:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800430a:	f7ff ffc9 	bl	80042a0 <HAL_GetTick>
 800430e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	07db      	lsls	r3, r3, #31
 8004316:	d5e8      	bpl.n	80042ea <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004318:	f7ff ffc2 	bl	80042a0 <HAL_GetTick>
 800431c:	1b40      	subs	r0, r0, r5
 800431e:	2802      	cmp	r0, #2
 8004320:	d9f6      	bls.n	8004310 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	07da      	lsls	r2, r3, #31
 8004328:	d5f2      	bpl.n	8004310 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004332:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800433a:	2001      	movs	r0, #1
 800433c:	e7d6      	b.n	80042ec <ADC_Disable+0x12>
	...

08004340 <HAL_ADC_Init>:
{
 8004340:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004346:	4604      	mov	r4, r0
 8004348:	2800      	cmp	r0, #0
 800434a:	f000 8103 	beq.w	8004554 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800434e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004350:	06d5      	lsls	r5, r2, #27
 8004352:	d46a      	bmi.n	800442a <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004354:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d035      	beq.n	80043c6 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	00d2      	lsls	r2, r2, #3
 8004362:	d502      	bpl.n	800436a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004364:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004366:	009d      	lsls	r5, r3, #2
 8004368:	d50a      	bpl.n	8004380 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800436a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800436c:	f023 0312 	bic.w	r3, r3, #18
 8004370:	f043 0310 	orr.w	r3, r3, #16
 8004374:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004376:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800437e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004382:	06d9      	lsls	r1, r3, #27
 8004384:	f100 80e0 	bmi.w	8004548 <HAL_ADC_Init+0x208>
 8004388:	2800      	cmp	r0, #0
 800438a:	f040 80dd 	bne.w	8004548 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8004392:	0752      	lsls	r2, r2, #29
 8004394:	f100 80d8 	bmi.w	8004548 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8004398:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800439a:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800439e:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004558 <HAL_ADC_Init+0x218>)
 80043aa:	d042      	beq.n	8004432 <HAL_ADC_Init+0xf2>
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d03e      	beq.n	800442e <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80043b0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80043b4:	4293      	cmp	r3, r2
 80043b6:	4969      	ldr	r1, [pc, #420]	@ (800455c <HAL_ADC_Init+0x21c>)
 80043b8:	f000 80b3 	beq.w	8004522 <HAL_ADC_Init+0x1e2>
 80043bc:	428b      	cmp	r3, r1
 80043be:	bf18      	it	ne
 80043c0:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c2:	4967      	ldr	r1, [pc, #412]	@ (8004560 <HAL_ADC_Init+0x220>)
 80043c4:	e036      	b.n	8004434 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80043c6:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80043ca:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80043cc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80043d0:	f7ff fc44 	bl	8003c5c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	00d8      	lsls	r0, r3, #3
 80043da:	d4be      	bmi.n	800435a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80043dc:	4620      	mov	r0, r4
 80043de:	f7ff ff7c 	bl	80042da <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80043e4:	06d1      	lsls	r1, r2, #27
 80043e6:	d4b9      	bmi.n	800435c <HAL_ADC_Init+0x1c>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d1b7      	bne.n	800435c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80043ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80043ee:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80043f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043f4:	f023 0302 	bic.w	r3, r3, #2
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80043fe:	6893      	ldr	r3, [r2, #8]
 8004400:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004404:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004406:	6893      	ldr	r3, [r2, #8]
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800440e:	4b55      	ldr	r3, [pc, #340]	@ (8004564 <HAL_ADC_Init+0x224>)
 8004410:	4a55      	ldr	r2, [pc, #340]	@ (8004568 <HAL_ADC_Init+0x228>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fbb3 f3f2 	udiv	r3, r3, r2
 8004418:	220a      	movs	r2, #10
 800441a:	4353      	muls	r3, r2
            wait_loop_index--;
 800441c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800441e:	9b01      	ldr	r3, [sp, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d09a      	beq.n	800435a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8004424:	9b01      	ldr	r3, [sp, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	e7f8      	b.n	800441c <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800442a:	4618      	mov	r0, r3
 800442c:	e7a8      	b.n	8004380 <HAL_ADC_Init+0x40>
 800442e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004432:	494e      	ldr	r1, [pc, #312]	@ (800456c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004434:	689d      	ldr	r5, [r3, #8]
 8004436:	f005 0503 	and.w	r5, r5, #3
 800443a:	2d01      	cmp	r5, #1
 800443c:	d102      	bne.n	8004444 <HAL_ADC_Init+0x104>
 800443e:	681d      	ldr	r5, [r3, #0]
 8004440:	07ed      	lsls	r5, r5, #31
 8004442:	d40e      	bmi.n	8004462 <HAL_ADC_Init+0x122>
 8004444:	b13a      	cbz	r2, 8004456 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004446:	6895      	ldr	r5, [r2, #8]
 8004448:	f005 0503 	and.w	r5, r5, #3
 800444c:	2d01      	cmp	r5, #1
 800444e:	d102      	bne.n	8004456 <HAL_ADC_Init+0x116>
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	07d2      	lsls	r2, r2, #31
 8004454:	d405      	bmi.n	8004462 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004456:	688a      	ldr	r2, [r1, #8]
 8004458:	6865      	ldr	r5, [r4, #4]
 800445a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800445e:	432a      	orrs	r2, r5
 8004460:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004462:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004466:	430a      	orrs	r2, r1
 8004468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800446a:	7e65      	ldrb	r5, [r4, #25]
 800446c:	3901      	subs	r1, #1
 800446e:	bf18      	it	ne
 8004470:	2101      	movne	r1, #1
 8004472:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004476:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800447a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800447e:	2901      	cmp	r1, #1
 8004480:	d107      	bne.n	8004492 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004482:	2d00      	cmp	r5, #0
 8004484:	d14f      	bne.n	8004526 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004486:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004488:	3901      	subs	r1, #1
 800448a:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 800448e:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004492:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004494:	2901      	cmp	r1, #1
 8004496:	d015      	beq.n	80044c4 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004498:	4d35      	ldr	r5, [pc, #212]	@ (8004570 <HAL_ADC_Init+0x230>)
 800449a:	42ab      	cmp	r3, r5
 800449c:	d003      	beq.n	80044a6 <HAL_ADC_Init+0x166>
 800449e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	d10a      	bne.n	80044bc <HAL_ADC_Init+0x17c>
 80044a6:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80044aa:	d047      	beq.n	800453c <HAL_ADC_Init+0x1fc>
 80044ac:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80044b0:	d047      	beq.n	8004542 <HAL_ADC_Init+0x202>
 80044b2:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80044b6:	bf08      	it	eq
 80044b8:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80044bc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80044be:	4315      	orrs	r5, r2
 80044c0:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	f011 0f0c 	tst.w	r1, #12
 80044ca:	d10c      	bne.n	80044e6 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80044cc:	68d9      	ldr	r1, [r3, #12]
 80044ce:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80044d2:	f021 0102 	bic.w	r1, r1, #2
 80044d6:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80044d8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80044dc:	7e25      	ldrb	r5, [r4, #24]
 80044de:	0049      	lsls	r1, r1, #1
 80044e0:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80044e4:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80044e6:	68dd      	ldr	r5, [r3, #12]
 80044e8:	4922      	ldr	r1, [pc, #136]	@ (8004574 <HAL_ADC_Init+0x234>)
 80044ea:	4029      	ands	r1, r5
 80044ec:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044ee:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80044f0:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044f2:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80044f4:	bf05      	ittet	eq
 80044f6:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 80044f8:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044fa:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80044fc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004500:	bf06      	itte	eq
 8004502:	f021 010f 	biceq.w	r1, r1, #15
 8004506:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004508:	f022 020f 	bicne.w	r2, r2, #15
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800450e:	2300      	movs	r3, #0
 8004510:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004514:	f023 0303 	bic.w	r3, r3, #3
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800451e:	b003      	add	sp, #12
 8004520:	bd30      	pop	{r4, r5, pc}
 8004522:	460a      	mov	r2, r1
 8004524:	e74d      	b.n	80043c2 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8004526:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004528:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 800452c:	f041 0120 	orr.w	r1, r1, #32
 8004530:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004532:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004534:	f041 0101 	orr.w	r1, r1, #1
 8004538:	6461      	str	r1, [r4, #68]	@ 0x44
 800453a:	e7aa      	b.n	8004492 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800453c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004540:	e7bc      	b.n	80044bc <HAL_ADC_Init+0x17c>
 8004542:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8004546:	e7b9      	b.n	80044bc <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8004548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800454a:	f023 0312 	bic.w	r3, r3, #18
 800454e:	f043 0310 	orr.w	r3, r3, #16
 8004552:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
 8004556:	e7e2      	b.n	800451e <HAL_ADC_Init+0x1de>
 8004558:	50000100 	.word	0x50000100
 800455c:	50000500 	.word	0x50000500
 8004560:	50000700 	.word	0x50000700
 8004564:	2000000c 	.word	0x2000000c
 8004568:	000f4240 	.word	0x000f4240
 800456c:	50000300 	.word	0x50000300
 8004570:	50000400 	.word	0x50000400
 8004574:	fff0c007 	.word	0xfff0c007

08004578 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8004578:	4770      	bx	lr

0800457a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 800457c:	4770      	bx	lr

0800457e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 800457e:	4770      	bx	lr

08004580 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004580:	6803      	ldr	r3, [r0, #0]
{
 8004582:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004584:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004586:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004588:	076a      	lsls	r2, r5, #29
{
 800458a:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800458c:	d501      	bpl.n	8004592 <HAL_ADC_IRQHandler+0x12>
 800458e:	0770      	lsls	r0, r6, #29
 8004590:	d403      	bmi.n	800459a <HAL_ADC_IRQHandler+0x1a>
 8004592:	0729      	lsls	r1, r5, #28
 8004594:	d543      	bpl.n	800461e <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004596:	0732      	lsls	r2, r6, #28
 8004598:	d541      	bpl.n	800461e <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800459a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800459c:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800459e:	bf5e      	ittt	pl
 80045a0:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80045a2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80045a6:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80045a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ac:	d003      	beq.n	80045b6 <HAL_ADC_IRQHandler+0x36>
 80045ae:	4a90      	ldr	r2, [pc, #576]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	f040 8105 	bne.w	80047c0 <HAL_ADC_IRQHandler+0x240>
 80045b6:	4a8f      	ldr	r2, [pc, #572]	@ (80047f4 <HAL_ADC_IRQHandler+0x274>)
 80045b8:	6891      	ldr	r1, [r2, #8]
 80045ba:	06c9      	lsls	r1, r1, #27
 80045bc:	d00c      	beq.n	80045d8 <HAL_ADC_IRQHandler+0x58>
 80045be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c2:	d003      	beq.n	80045cc <HAL_ADC_IRQHandler+0x4c>
 80045c4:	498a      	ldr	r1, [pc, #552]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 80045c6:	428b      	cmp	r3, r1
 80045c8:	f040 80ff 	bne.w	80047ca <HAL_ADC_IRQHandler+0x24a>
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	f002 021f 	and.w	r2, r2, #31
 80045d2:	2a05      	cmp	r2, #5
 80045d4:	f040 8114 	bne.w	8004800 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80045d8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80045da:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80045dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80045e0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80045e4:	4311      	orrs	r1, r2
 80045e6:	d114      	bne.n	8004612 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80045e8:	0729      	lsls	r1, r5, #28
 80045ea:	d512      	bpl.n	8004612 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	0752      	lsls	r2, r2, #29
 80045f0:	f100 8122 	bmi.w	8004838 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	f022 020c 	bic.w	r2, r2, #12
 80045fa:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80045fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004602:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004606:	04d8      	lsls	r0, r3, #19
 8004608:	d403      	bmi.n	8004612 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800460a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe5e 	bl	80042d4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	220c      	movs	r2, #12
 800461c:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800461e:	06a9      	lsls	r1, r5, #26
 8004620:	d501      	bpl.n	8004626 <HAL_ADC_IRQHandler+0xa6>
 8004622:	06b2      	lsls	r2, r6, #26
 8004624:	d403      	bmi.n	800462e <HAL_ADC_IRQHandler+0xae>
 8004626:	066b      	lsls	r3, r5, #25
 8004628:	d562      	bpl.n	80046f0 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800462a:	0670      	lsls	r0, r6, #25
 800462c:	d560      	bpl.n	80046f0 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800462e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004634:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800463c:	d003      	beq.n	8004646 <HAL_ADC_IRQHandler+0xc6>
 800463e:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 8004640:	4293      	cmp	r3, r2
 8004642:	f040 8102 	bne.w	800484a <HAL_ADC_IRQHandler+0x2ca>
 8004646:	4a6b      	ldr	r2, [pc, #428]	@ (80047f4 <HAL_ADC_IRQHandler+0x274>)
 8004648:	6891      	ldr	r1, [r2, #8]
 800464a:	06c9      	lsls	r1, r1, #27
 800464c:	d00c      	beq.n	8004668 <HAL_ADC_IRQHandler+0xe8>
 800464e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004652:	d003      	beq.n	800465c <HAL_ADC_IRQHandler+0xdc>
 8004654:	4966      	ldr	r1, [pc, #408]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 8004656:	428b      	cmp	r3, r1
 8004658:	f040 80fc 	bne.w	8004854 <HAL_ADC_IRQHandler+0x2d4>
 800465c:	6892      	ldr	r2, [r2, #8]
 800465e:	f002 021f 	and.w	r2, r2, #31
 8004662:	2a05      	cmp	r2, #5
 8004664:	f040 8108 	bne.w	8004878 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004668:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800466a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800466c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8004670:	d138      	bne.n	80046e4 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004672:	0191      	lsls	r1, r2, #6
 8004674:	d506      	bpl.n	8004684 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004676:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004678:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800467c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004680:	4311      	orrs	r1, r2
 8004682:	d12f      	bne.n	80046e4 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004684:	0668      	lsls	r0, r5, #25
 8004686:	d52d      	bpl.n	80046e4 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800468c:	d003      	beq.n	8004696 <HAL_ADC_IRQHandler+0x116>
 800468e:	4a58      	ldr	r2, [pc, #352]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 8004690:	4293      	cmp	r3, r2
 8004692:	f040 810d 	bne.w	80048b0 <HAL_ADC_IRQHandler+0x330>
 8004696:	4a57      	ldr	r2, [pc, #348]	@ (80047f4 <HAL_ADC_IRQHandler+0x274>)
 8004698:	6891      	ldr	r1, [r2, #8]
 800469a:	06c9      	lsls	r1, r1, #27
 800469c:	d00c      	beq.n	80046b8 <HAL_ADC_IRQHandler+0x138>
 800469e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a2:	d003      	beq.n	80046ac <HAL_ADC_IRQHandler+0x12c>
 80046a4:	4952      	ldr	r1, [pc, #328]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 80046a6:	428b      	cmp	r3, r1
 80046a8:	f040 8107 	bne.w	80048ba <HAL_ADC_IRQHandler+0x33a>
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	f002 021f 	and.w	r2, r2, #31
 80046b2:	2a06      	cmp	r2, #6
 80046b4:	f040 8113 	bne.w	80048de <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80046b8:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80046ba:	0291      	lsls	r1, r2, #10
 80046bc:	d412      	bmi.n	80046e4 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	0712      	lsls	r2, r2, #28
 80046c2:	f100 8128 	bmi.w	8004916 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046cc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80046ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046d4:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80046d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046d8:	05d8      	lsls	r0, r3, #23
 80046da:	d403      	bmi.n	80046e4 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7ff ff47 	bl	8004578 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	2260      	movs	r2, #96	@ 0x60
 80046ee:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80046f0:	0629      	lsls	r1, r5, #24
 80046f2:	d50b      	bpl.n	800470c <HAL_ADC_IRQHandler+0x18c>
 80046f4:	0632      	lsls	r2, r6, #24
 80046f6:	d509      	bpl.n	800470c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fe:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fde8 	bl	80042d6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	2280      	movs	r2, #128	@ 0x80
 800470a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800470c:	05eb      	lsls	r3, r5, #23
 800470e:	d50c      	bpl.n	800472a <HAL_ADC_IRQHandler+0x1aa>
 8004710:	05f0      	lsls	r0, r6, #23
 8004712:	d50a      	bpl.n	800472a <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800471a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff ff2d 	bl	800457c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004728:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800472a:	05a9      	lsls	r1, r5, #22
 800472c:	d50c      	bpl.n	8004748 <HAL_ADC_IRQHandler+0x1c8>
 800472e:	05b2      	lsls	r2, r6, #22
 8004730:	d50a      	bpl.n	8004748 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004738:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff ff1f 	bl	800457e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004746:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004748:	06eb      	lsls	r3, r5, #27
 800474a:	d525      	bpl.n	8004798 <HAL_ADC_IRQHandler+0x218>
 800474c:	06f0      	lsls	r0, r6, #27
 800474e:	d523      	bpl.n	8004798 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004752:	2b01      	cmp	r3, #1
 8004754:	d012      	beq.n	800477c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800475c:	f000 80e4 	beq.w	8004928 <HAL_ADC_IRQHandler+0x3a8>
 8004760:	4823      	ldr	r0, [pc, #140]	@ (80047f0 <HAL_ADC_IRQHandler+0x270>)
 8004762:	4b25      	ldr	r3, [pc, #148]	@ (80047f8 <HAL_ADC_IRQHandler+0x278>)
 8004764:	4923      	ldr	r1, [pc, #140]	@ (80047f4 <HAL_ADC_IRQHandler+0x274>)
 8004766:	4282      	cmp	r2, r0
 8004768:	bf08      	it	eq
 800476a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	06c9      	lsls	r1, r1, #27
 8004770:	f040 80dc 	bne.w	800492c <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004774:	68d3      	ldr	r3, [r2, #12]
 8004776:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800477a:	d00a      	beq.n	8004792 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800477c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800477e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004782:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004784:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004786:	f043 0302 	orr.w	r3, r3, #2
 800478a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 800478c:	4620      	mov	r0, r4
 800478e:	f7ff fda3 	bl	80042d8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	2210      	movs	r2, #16
 8004796:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004798:	056a      	lsls	r2, r5, #21
 800479a:	d510      	bpl.n	80047be <HAL_ADC_IRQHandler+0x23e>
 800479c:	0573      	lsls	r3, r6, #21
 800479e:	d50e      	bpl.n	80047be <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047a6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80047a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80047aa:	f043 0308 	orr.w	r3, r3, #8
 80047ae:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047b6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff fede 	bl	800457a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80047be:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80047c0:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <HAL_ADC_IRQHandler+0x278>)
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	06d0      	lsls	r0, r2, #27
 80047c6:	f43f af07 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
 80047ca:	4a0b      	ldr	r2, [pc, #44]	@ (80047f8 <HAL_ADC_IRQHandler+0x278>)
 80047cc:	6892      	ldr	r2, [r2, #8]
 80047ce:	f002 021f 	and.w	r2, r2, #31
 80047d2:	2a05      	cmp	r2, #5
 80047d4:	f43f af00 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
 80047d8:	4a07      	ldr	r2, [pc, #28]	@ (80047f8 <HAL_ADC_IRQHandler+0x278>)
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	f002 021f 	and.w	r2, r2, #31
 80047e0:	2a09      	cmp	r2, #9
 80047e2:	f43f aef9 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
 80047e6:	4a05      	ldr	r2, [pc, #20]	@ (80047fc <HAL_ADC_IRQHandler+0x27c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d123      	bne.n	8004834 <HAL_ADC_IRQHandler+0x2b4>
 80047ec:	e6f4      	b.n	80045d8 <HAL_ADC_IRQHandler+0x58>
 80047ee:	bf00      	nop
 80047f0:	50000100 	.word	0x50000100
 80047f4:	50000300 	.word	0x50000300
 80047f8:	50000700 	.word	0x50000700
 80047fc:	50000400 	.word	0x50000400
 8004800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004804:	d002      	beq.n	800480c <HAL_ADC_IRQHandler+0x28c>
 8004806:	4a4b      	ldr	r2, [pc, #300]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d1e5      	bne.n	80047d8 <HAL_ADC_IRQHandler+0x258>
 800480c:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_ADC_IRQHandler+0x3b8>)
 800480e:	6892      	ldr	r2, [r2, #8]
 8004810:	f002 021f 	and.w	r2, r2, #31
 8004814:	2a09      	cmp	r2, #9
 8004816:	f43f aedf 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
 800481a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800481e:	f43f aedb 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
 8004822:	4a46      	ldr	r2, [pc, #280]	@ (800493c <HAL_ADC_IRQHandler+0x3bc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	f43f aed7 	beq.w	80045d8 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800482a:	4942      	ldr	r1, [pc, #264]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 800482c:	428b      	cmp	r3, r1
 800482e:	bf08      	it	eq
 8004830:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	e6d0      	b.n	80045da <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004840:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6463      	str	r3, [r4, #68]	@ 0x44
 8004848:	e6e3      	b.n	8004612 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800484a:	4a3d      	ldr	r2, [pc, #244]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	06d0      	lsls	r0, r2, #27
 8004850:	f43f af0a 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
 8004854:	4a3a      	ldr	r2, [pc, #232]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	f002 021f 	and.w	r2, r2, #31
 800485c:	2a05      	cmp	r2, #5
 800485e:	f43f af03 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
 8004862:	4a37      	ldr	r2, [pc, #220]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 8004864:	6892      	ldr	r2, [r2, #8]
 8004866:	f002 021f 	and.w	r2, r2, #31
 800486a:	2a09      	cmp	r2, #9
 800486c:	f43f aefc 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
 8004870:	4a32      	ldr	r2, [pc, #200]	@ (800493c <HAL_ADC_IRQHandler+0x3bc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d11a      	bne.n	80048ac <HAL_ADC_IRQHandler+0x32c>
 8004876:	e6f7      	b.n	8004668 <HAL_ADC_IRQHandler+0xe8>
 8004878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800487c:	d002      	beq.n	8004884 <HAL_ADC_IRQHandler+0x304>
 800487e:	4a2d      	ldr	r2, [pc, #180]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d1ee      	bne.n	8004862 <HAL_ADC_IRQHandler+0x2e2>
 8004884:	4a2c      	ldr	r2, [pc, #176]	@ (8004938 <HAL_ADC_IRQHandler+0x3b8>)
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	f002 021f 	and.w	r2, r2, #31
 800488c:	2a09      	cmp	r2, #9
 800488e:	f43f aeeb 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
 8004892:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004896:	f43f aee7 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
 800489a:	4a28      	ldr	r2, [pc, #160]	@ (800493c <HAL_ADC_IRQHandler+0x3bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	f43f aee3 	beq.w	8004668 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80048a2:	4924      	ldr	r1, [pc, #144]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 80048a4:	428b      	cmp	r3, r1
 80048a6:	bf08      	it	eq
 80048a8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80048ac:	68d2      	ldr	r2, [r2, #12]
 80048ae:	e6dc      	b.n	800466a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80048b0:	4a23      	ldr	r2, [pc, #140]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	06d0      	lsls	r0, r2, #27
 80048b6:	f43f aeff 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
 80048ba:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	f002 021f 	and.w	r2, r2, #31
 80048c2:	2a06      	cmp	r2, #6
 80048c4:	f43f aef8 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
 80048c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004940 <HAL_ADC_IRQHandler+0x3c0>)
 80048ca:	6892      	ldr	r2, [r2, #8]
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2a07      	cmp	r2, #7
 80048d2:	f43f aef1 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
 80048d6:	4a19      	ldr	r2, [pc, #100]	@ (800493c <HAL_ADC_IRQHandler+0x3bc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d11a      	bne.n	8004912 <HAL_ADC_IRQHandler+0x392>
 80048dc:	e6ec      	b.n	80046b8 <HAL_ADC_IRQHandler+0x138>
 80048de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048e2:	d002      	beq.n	80048ea <HAL_ADC_IRQHandler+0x36a>
 80048e4:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d1ee      	bne.n	80048c8 <HAL_ADC_IRQHandler+0x348>
 80048ea:	4a13      	ldr	r2, [pc, #76]	@ (8004938 <HAL_ADC_IRQHandler+0x3b8>)
 80048ec:	6892      	ldr	r2, [r2, #8]
 80048ee:	f002 021f 	and.w	r2, r2, #31
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	f43f aee0 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
 80048f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048fc:	f43f aedc 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
 8004900:	4a0e      	ldr	r2, [pc, #56]	@ (800493c <HAL_ADC_IRQHandler+0x3bc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f43f aed8 	beq.w	80046b8 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004908:	490a      	ldr	r1, [pc, #40]	@ (8004934 <HAL_ADC_IRQHandler+0x3b4>)
 800490a:	428b      	cmp	r3, r1
 800490c:	bf08      	it	eq
 800490e:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004912:	68d2      	ldr	r2, [r2, #12]
 8004914:	e6d1      	b.n	80046ba <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004916:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004918:	f043 0310 	orr.w	r3, r3, #16
 800491c:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6463      	str	r3, [r4, #68]	@ 0x44
 8004926:	e6dd      	b.n	80046e4 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_ADC_IRQHandler+0x3b8>)
 800492a:	e71f      	b.n	800476c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8004932:	e722      	b.n	800477a <HAL_ADC_IRQHandler+0x1fa>
 8004934:	50000100 	.word	0x50000100
 8004938:	50000300 	.word	0x50000300
 800493c:	50000400 	.word	0x50000400
 8004940:	50000700 	.word	0x50000700

08004944 <HAL_ADC_ConfigChannel>:
{
 8004944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004946:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800494c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004950:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8004952:	2b01      	cmp	r3, #1
 8004954:	f000 816a 	beq.w	8004c2c <HAL_ADC_ConfigChannel+0x2e8>
 8004958:	2301      	movs	r3, #1
 800495a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	0757      	lsls	r7, r2, #29
 8004964:	f100 815c 	bmi.w	8004c20 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8004968:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 800496a:	680c      	ldr	r4, [r1, #0]
 800496c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800496e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8004970:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8004974:	d82c      	bhi.n	80049d0 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8004976:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8004978:	271f      	movs	r7, #31
 800497a:	4097      	lsls	r7, r2
 800497c:	ea26 0607 	bic.w	r6, r6, r7
 8004980:	fa04 f202 	lsl.w	r2, r4, r2
 8004984:	4332      	orrs	r2, r6
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	f012 0f0c 	tst.w	r2, #12
 800498e:	d158      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004990:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004992:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004996:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800499a:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800499e:	d93c      	bls.n	8004a1a <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80049a0:	699f      	ldr	r7, [r3, #24]
 80049a2:	3a1e      	subs	r2, #30
 80049a4:	4096      	lsls	r6, r2
 80049a6:	ea27 0606 	bic.w	r6, r7, r6
 80049aa:	fa0c f202 	lsl.w	r2, ip, r2
 80049ae:	4332      	orrs	r2, r6
 80049b0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	694e      	ldr	r6, [r1, #20]
 80049b6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80049ba:	0052      	lsls	r2, r2, #1
 80049bc:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80049be:	690a      	ldr	r2, [r1, #16]
 80049c0:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80049c2:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80049c4:	2a03      	cmp	r2, #3
 80049c6:	d86b      	bhi.n	8004aa0 <HAL_ADC_ConfigChannel+0x15c>
 80049c8:	e8df f002 	tbb	[pc, r2]
 80049cc:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80049d0:	2e09      	cmp	r6, #9
 80049d2:	d80a      	bhi.n	80049ea <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80049d4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80049d6:	3a1e      	subs	r2, #30
 80049d8:	271f      	movs	r7, #31
 80049da:	4097      	lsls	r7, r2
 80049dc:	ea26 0607 	bic.w	r6, r6, r7
 80049e0:	fa04 f202 	lsl.w	r2, r4, r2
 80049e4:	4332      	orrs	r2, r6
 80049e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80049e8:	e7ce      	b.n	8004988 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80049ea:	2e0e      	cmp	r6, #14
 80049ec:	f04f 061f 	mov.w	r6, #31
 80049f0:	d809      	bhi.n	8004a06 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80049f2:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80049f4:	3a3c      	subs	r2, #60	@ 0x3c
 80049f6:	4096      	lsls	r6, r2
 80049f8:	ea27 0606 	bic.w	r6, r7, r6
 80049fc:	fa04 f202 	lsl.w	r2, r4, r2
 8004a00:	4332      	orrs	r2, r6
 8004a02:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a04:	e7c0      	b.n	8004988 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004a06:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8004a08:	3a5a      	subs	r2, #90	@ 0x5a
 8004a0a:	4096      	lsls	r6, r2
 8004a0c:	ea27 0606 	bic.w	r6, r7, r6
 8004a10:	fa04 f202 	lsl.w	r2, r4, r2
 8004a14:	4332      	orrs	r2, r6
 8004a16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a18:	e7b6      	b.n	8004988 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a1a:	695f      	ldr	r7, [r3, #20]
 8004a1c:	4096      	lsls	r6, r2
 8004a1e:	ea27 0606 	bic.w	r6, r7, r6
 8004a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8004a26:	ea46 060c 	orr.w	r6, r6, ip
 8004a2a:	615e      	str	r6, [r3, #20]
 8004a2c:	e7c1      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004a2e:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8004a32:	4a7f      	ldr	r2, [pc, #508]	@ (8004c30 <HAL_ADC_ConfigChannel+0x2ec>)
 8004a34:	ea0c 0202 	and.w	r2, ip, r2
 8004a38:	433a      	orrs	r2, r7
 8004a3a:	4332      	orrs	r2, r6
 8004a3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	f002 0203 	and.w	r2, r2, #3
 8004a48:	2a01      	cmp	r2, #1
 8004a4a:	d14d      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x1a4>
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	07d6      	lsls	r6, r2, #31
 8004a50:	d54a      	bpl.n	8004ae8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a52:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004a54:	2300      	movs	r3, #0
 8004a56:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8004a5a:	b003      	add	sp, #12
 8004a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004a5e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8004a62:	4a73      	ldr	r2, [pc, #460]	@ (8004c30 <HAL_ADC_ConfigChannel+0x2ec>)
 8004a64:	ea0c 0202 	and.w	r2, ip, r2
 8004a68:	433a      	orrs	r2, r7
 8004a6a:	4332      	orrs	r2, r6
 8004a6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a70:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8004a72:	e7e6      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004a74:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8004a78:	4a6d      	ldr	r2, [pc, #436]	@ (8004c30 <HAL_ADC_ConfigChannel+0x2ec>)
 8004a7a:	ea0c 0202 	and.w	r2, ip, r2
 8004a7e:	433a      	orrs	r2, r7
 8004a80:	4332      	orrs	r2, r6
 8004a82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a86:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004a88:	e7db      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004a8a:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8004a8e:	4a68      	ldr	r2, [pc, #416]	@ (8004c30 <HAL_ADC_ConfigChannel+0x2ec>)
 8004a90:	ea0c 0202 	and.w	r2, ip, r2
 8004a94:	433a      	orrs	r2, r7
 8004a96:	4332      	orrs	r2, r6
 8004a98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004a9e:	e7d0      	b.n	8004a42 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004aa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004aa2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004aa6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004aa8:	bf02      	ittt	eq
 8004aaa:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8004aac:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004ab0:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ab2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ab4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004ab8:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004aba:	bf02      	ittt	eq
 8004abc:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8004abe:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004ac2:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ac4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004ac6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004aca:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004acc:	bf02      	ittt	eq
 8004ace:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8004ad0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004ad4:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ad6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004ad8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004adc:	42ba      	cmp	r2, r7
 8004ade:	d1b0      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004ae0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004ae2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ae6:	e7d9      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004ae8:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004aea:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004aec:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004af0:	d047      	beq.n	8004b82 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004af2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004af6:	ea21 0202 	bic.w	r2, r1, r2
 8004afa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b02:	d164      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x28a>
 8004b04:	494b      	ldr	r1, [pc, #300]	@ (8004c34 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b06:	2c10      	cmp	r4, #16
 8004b08:	d166      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004b0a:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b0c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004b10:	d19f      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b16:	4a48      	ldr	r2, [pc, #288]	@ (8004c38 <HAL_ADC_ConfigChannel+0x2f4>)
 8004b18:	d009      	beq.n	8004b2e <HAL_ADC_ConfigChannel+0x1ea>
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d069      	beq.n	8004bf2 <HAL_ADC_ConfigChannel+0x2ae>
 8004b1e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8004b22:	4293      	cmp	r3, r2
 8004b24:	4845      	ldr	r0, [pc, #276]	@ (8004c3c <HAL_ADC_ConfigChannel+0x2f8>)
 8004b26:	d067      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0x2b4>
 8004b28:	4283      	cmp	r3, r0
 8004b2a:	bf18      	it	ne
 8004b2c:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004b2e:	6898      	ldr	r0, [r3, #8]
 8004b30:	f000 0003 	and.w	r0, r0, #3
 8004b34:	2801      	cmp	r0, #1
 8004b36:	d102      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x1fa>
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	07c0      	lsls	r0, r0, #31
 8004b3c:	d470      	bmi.n	8004c20 <HAL_ADC_ConfigChannel+0x2dc>
 8004b3e:	b13a      	cbz	r2, 8004b50 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004b40:	6890      	ldr	r0, [r2, #8]
 8004b42:	f000 0003 	and.w	r0, r0, #3
 8004b46:	2801      	cmp	r0, #1
 8004b48:	d102      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x20c>
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	07d2      	lsls	r2, r2, #31
 8004b4e:	d467      	bmi.n	8004c20 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b50:	2c10      	cmp	r4, #16
 8004b52:	d153      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x2b8>
 8004b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b58:	f47f af7b 	bne.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004b5c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5e:	4a38      	ldr	r2, [pc, #224]	@ (8004c40 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b64:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_ADC_ConfigChannel+0x300>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6e:	220a      	movs	r2, #10
 8004b70:	4353      	muls	r3, r2
            wait_loop_index--;
 8004b72:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f43f af6b 	beq.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8004b7c:	9b01      	ldr	r3, [sp, #4]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	e7f7      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004b82:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b86:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004b88:	ea42 0200 	orr.w	r2, r2, r0
 8004b8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b90:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b92:	d90c      	bls.n	8004bae <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004b94:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	3a1b      	subs	r2, #27
 8004b9c:	2607      	movs	r6, #7
 8004b9e:	4096      	lsls	r6, r2
 8004ba0:	ea21 0106 	bic.w	r1, r1, r6
 8004ba4:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	619a      	str	r2, [r3, #24]
 8004bac:	e7a7      	b.n	8004afe <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8004bae:	1c61      	adds	r1, r4, #1
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004bb6:	2607      	movs	r6, #7
 8004bb8:	408e      	lsls	r6, r1
 8004bba:	ea22 0206 	bic.w	r2, r2, r6
 8004bbe:	fa00 f101 	lsl.w	r1, r0, r1
 8004bc2:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8004bc8:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bca:	f43f af42 	beq.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
 8004bce:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <HAL_ADC_ConfigChannel+0x2f4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d097      	beq.n	8004b04 <HAL_ADC_ConfigChannel+0x1c0>
 8004bd4:	491c      	ldr	r1, [pc, #112]	@ (8004c48 <HAL_ADC_ConfigChannel+0x304>)
 8004bd6:	e796      	b.n	8004b06 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004bd8:	2c11      	cmp	r4, #17
 8004bda:	d103      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004bdc:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004bde:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8004be2:	e795      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004be4:	2c12      	cmp	r4, #18
 8004be6:	f47f af34 	bne.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004bea:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004bec:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8004bf0:	e78e      	b.n	8004b10 <HAL_ADC_ConfigChannel+0x1cc>
 8004bf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004bf6:	e79a      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x1ea>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	e798      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004bfc:	2c11      	cmp	r4, #17
 8004bfe:	d108      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x2ce>
 8004c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c04:	f47f af25 	bne.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004c08:	688b      	ldr	r3, [r1, #8]
 8004c0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004c0e:	608b      	str	r3, [r1, #8]
 8004c10:	e71f      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c12:	2c12      	cmp	r4, #18
 8004c14:	f47f af1d 	bne.w	8004a52 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004c18:	688b      	ldr	r3, [r1, #8]
 8004c1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	e7f6      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c20:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004c22:	f043 0320 	orr.w	r3, r3, #32
 8004c26:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
 8004c2a:	e713      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8004c2c:	2002      	movs	r0, #2
 8004c2e:	e714      	b.n	8004a5a <HAL_ADC_ConfigChannel+0x116>
 8004c30:	83fff000 	.word	0x83fff000
 8004c34:	50000300 	.word	0x50000300
 8004c38:	50000100 	.word	0x50000100
 8004c3c:	50000500 	.word	0x50000500
 8004c40:	000f4240 	.word	0x000f4240
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	50000700 	.word	0x50000700

08004c4c <HAL_ADCEx_MultiModeConfigChannel>:
{
 8004c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004c4e:	6804      	ldr	r4, [r0, #0]
 8004c50:	4b3c      	ldr	r3, [pc, #240]	@ (8004d44 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8004c52:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8004c56:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004c58:	d009      	beq.n	8004c6e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d047      	beq.n	8004cee <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8004c5e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d48 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8004c60:	4294      	cmp	r4, r2
 8004c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c66:	d002      	beq.n	8004c6e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	d166      	bne.n	8004d3a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c6c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8004c6e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8004c72:	2a01      	cmp	r2, #1
 8004c74:	d063      	beq.n	8004d3e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8004c76:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c78:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8004c7a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004c7e:	68a2      	ldr	r2, [r4, #8]
 8004c80:	0752      	lsls	r2, r2, #29
 8004c82:	d454      	bmi.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	0757      	lsls	r7, r2, #29
 8004c88:	d451      	bmi.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c8a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8004c8e:	d031      	beq.n	8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004c90:	4f2c      	ldr	r7, [pc, #176]	@ (8004d44 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8004c92:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8004c94:	4e2e      	ldr	r6, [pc, #184]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004c96:	42bc      	cmp	r4, r7
 8004c98:	bf08      	it	eq
 8004c9a:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c9c:	b360      	cbz	r0, 8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004c9e:	6897      	ldr	r7, [r2, #8]
 8004ca0:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8004ca4:	684e      	ldr	r6, [r1, #4]
 8004ca6:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8004caa:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8004cae:	433e      	orrs	r6, r7
 8004cb0:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004cb2:	68a6      	ldr	r6, [r4, #8]
 8004cb4:	f006 0603 	and.w	r6, r6, #3
 8004cb8:	2e01      	cmp	r6, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8004cbc:	6824      	ldr	r4, [r4, #0]
 8004cbe:	07e6      	lsls	r6, r4, #31
 8004cc0:	d410      	bmi.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004cc2:	689c      	ldr	r4, [r3, #8]
 8004cc4:	f004 0403 	and.w	r4, r4, #3
 8004cc8:	2c01      	cmp	r4, #1
 8004cca:	d102      	bne.n	8004cd2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	07dc      	lsls	r4, r3, #31
 8004cd0:	d408      	bmi.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004cd2:	6893      	ldr	r3, [r2, #8]
 8004cd4:	6889      	ldr	r1, [r1, #8]
 8004cd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cda:	4308      	orrs	r0, r1
 8004cdc:	f023 030f 	bic.w	r3, r3, #15
 8004ce0:	4318      	orrs	r0, r3
 8004ce2:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8004cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004cf2:	e7bc      	b.n	8004c6e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf4:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8004cf6:	e7d1      	b.n	8004c9c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cf8:	6891      	ldr	r1, [r2, #8]
 8004cfa:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004cfe:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004d00:	68a1      	ldr	r1, [r4, #8]
 8004d02:	f001 0103 	and.w	r1, r1, #3
 8004d06:	2901      	cmp	r1, #1
 8004d08:	d102      	bne.n	8004d10 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8004d0a:	6821      	ldr	r1, [r4, #0]
 8004d0c:	07c9      	lsls	r1, r1, #31
 8004d0e:	d4e9      	bmi.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004d10:	6899      	ldr	r1, [r3, #8]
 8004d12:	f001 0103 	and.w	r1, r1, #3
 8004d16:	2901      	cmp	r1, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	07db      	lsls	r3, r3, #31
 8004d1e:	d4e1      	bmi.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004d20:	6893      	ldr	r3, [r2, #8]
 8004d22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d26:	f023 030f 	bic.w	r3, r3, #15
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	e7da      	b.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d2e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004d30:	f043 0320 	orr.w	r3, r3, #32
 8004d34:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8004d36:	2001      	movs	r0, #1
 8004d38:	e7d5      	b.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	e7d6      	b.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8004d3e:	2002      	movs	r0, #2
 8004d40:	e7d4      	b.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004d42:	bf00      	nop
 8004d44:	50000100 	.word	0x50000100
 8004d48:	50000400 	.word	0x50000400
 8004d4c:	50000700 	.word	0x50000700
 8004d50:	50000300 	.word	0x50000300

08004d54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d54:	4907      	ldr	r1, [pc, #28]	@ (8004d74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004d56:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d5c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d5e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d64:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004d70:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d78:	4b16      	ldr	r3, [pc, #88]	@ (8004dd4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d7a:	b530      	push	{r4, r5, lr}
 8004d7c:	68dc      	ldr	r4, [r3, #12]
 8004d7e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d82:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d86:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	bf28      	it	cs
 8004d8c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d8e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d90:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d94:	bf8c      	ite	hi
 8004d96:	3c03      	subhi	r4, #3
 8004d98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d9a:	fa05 f303 	lsl.w	r3, r5, r3
 8004d9e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da2:	40a5      	lsls	r5, r4
 8004da4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8004daa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db0:	bfac      	ite	ge
 8004db2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db6:	4a08      	ldrlt	r2, [pc, #32]	@ (8004dd8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dbc:	bfb8      	it	lt
 8004dbe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	bfaa      	itet	ge
 8004dc6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004dd0:	bd30      	pop	{r4, r5, pc}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed00 	.word	0xe000ed00
 8004dd8:	e000ed14 	.word	0xe000ed14

08004ddc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	db07      	blt.n	8004df0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de0:	0941      	lsrs	r1, r0, #5
 8004de2:	4a04      	ldr	r2, [pc, #16]	@ (8004df4 <HAL_NVIC_EnableIRQ+0x18>)
 8004de4:	f000 001f 	and.w	r0, r0, #31
 8004de8:	2301      	movs	r3, #1
 8004dea:	4083      	lsls	r3, r0
 8004dec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000e100 	.word	0xe000e100

08004df8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004df8:	6802      	ldr	r2, [r0, #0]
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <DMA_CalcBaseAndBitshift+0x2c>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	f04f 0114 	mov.w	r1, #20
 8004e02:	d808      	bhi.n	8004e16 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <DMA_CalcBaseAndBitshift+0x30>)
 8004e06:	4413      	add	r3, r2
 8004e08:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x34>)
 8004e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e0e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8004e10:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004e14:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <DMA_CalcBaseAndBitshift+0x38>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4a06      	ldr	r2, [pc, #24]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x3c>)
 8004e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e20:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8004e22:	e7f5      	b.n	8004e10 <DMA_CalcBaseAndBitshift+0x18>
 8004e24:	40020407 	.word	0x40020407
 8004e28:	bffdfff8 	.word	0xbffdfff8
 8004e2c:	40020000 	.word	0x40020000
 8004e30:	bffdfbf8 	.word	0xbffdfbf8
 8004e34:	40020400 	.word	0x40020400

08004e38 <HAL_DMA_Init>:
{
 8004e38:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	b1e0      	cbz	r0, 8004e78 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8004e3e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8004e42:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e44:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8004e46:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e48:	432b      	orrs	r3, r5
 8004e4a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8004e4c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e50:	6945      	ldr	r5, [r0, #20]
 8004e52:	432b      	orrs	r3, r5
 8004e54:	6985      	ldr	r5, [r0, #24]
 8004e56:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e58:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e5a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8004e5e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e62:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8004e64:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004e66:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8004e68:	f7ff ffc6 	bl	8004df8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e6c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8004e6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e72:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8004e74:	8423      	strh	r3, [r4, #32]
}
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
 8004e7a:	e7fc      	b.n	8004e76 <HAL_DMA_Init+0x3e>

08004e7c <HAL_DMA_Start_IT>:
{
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8004e7e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004e82:	2c01      	cmp	r4, #1
 8004e84:	d033      	beq.n	8004eee <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e86:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8004e8a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e8c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8004e8e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e92:	f04f 0400 	mov.w	r4, #0
 8004e96:	d128      	bne.n	8004eea <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e98:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e9a:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e9c:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e9e:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ea2:	6826      	ldr	r6, [r4, #0]
 8004ea4:	f026 0601 	bic.w	r6, r6, #1
 8004ea8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004eaa:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8004eae:	40bd      	lsls	r5, r7
 8004eb0:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8004eb2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eb4:	6843      	ldr	r3, [r0, #4]
 8004eb6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004eb8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8004eba:	bf0b      	itete	eq
 8004ebc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8004ebe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004ec0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8004ec2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004ec4:	b14b      	cbz	r3, 8004eda <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ecc:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2000      	movs	r0, #0
}
 8004ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 030a 	orr.w	r3, r3, #10
 8004ee0:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	f023 0304 	bic.w	r3, r3, #4
 8004ee8:	e7f0      	b.n	8004ecc <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8004eea:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8004eee:	2002      	movs	r0, #2
 8004ef0:	e7f2      	b.n	8004ed8 <HAL_DMA_Start_IT+0x5c>

08004ef2 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8004ef2:	b140      	cbz	r0, 8004f06 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ef4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d006      	beq.n	8004f0a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004efc:	2304      	movs	r3, #4
 8004efe:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8004f00:	2300      	movs	r3, #0
 8004f02:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8004f06:	2001      	movs	r0, #1
 8004f08:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f0a:	6803      	ldr	r3, [r0, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f022 020e 	bic.w	r2, r2, #14
 8004f12:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f1c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8004f20:	2301      	movs	r3, #1
 8004f22:	408b      	lsls	r3, r1
 8004f24:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8004f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f2a:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8004f2c:	2000      	movs	r0, #0
}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f30:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f32:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004f34:	6803      	ldr	r3, [r0, #0]
{
 8004f36:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f38:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004f3a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f3c:	2404      	movs	r4, #4
 8004f3e:	4094      	lsls	r4, r2
 8004f40:	4234      	tst	r4, r6
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x32>
 8004f44:	f015 0f04 	tst.w	r5, #4
 8004f48:	d00b      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f4e:	bf5e      	ittt	pl
 8004f50:	681a      	ldrpl	r2, [r3, #0]
 8004f52:	f022 0204 	bicpl.w	r2, r2, #4
 8004f56:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004f58:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004f5a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8004f5c:	b363      	cbz	r3, 8004fb8 <HAL_DMA_IRQHandler+0x88>
}
 8004f5e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004f60:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004f62:	2402      	movs	r4, #2
 8004f64:	4094      	lsls	r4, r2
 8004f66:	4234      	tst	r4, r6
 8004f68:	d012      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x60>
 8004f6a:	f015 0f02 	tst.w	r5, #2
 8004f6e:	d00f      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	0695      	lsls	r5, r2, #26
 8004f74:	d406      	bmi.n	8004f84 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f022 020a 	bic.w	r2, r2, #10
 8004f7c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004f84:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f86:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004f88:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004f8c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004f8e:	e7e5      	b.n	8004f5c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f90:	2408      	movs	r4, #8
 8004f92:	4094      	lsls	r4, r2
 8004f94:	4234      	tst	r4, r6
 8004f96:	d00f      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x88>
 8004f98:	072c      	lsls	r4, r5, #28
 8004f9a:	d50d      	bpl.n	8004fb8 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f9c:	681c      	ldr	r4, [r3, #0]
 8004f9e:	f024 040e 	bic.w	r4, r4, #14
 8004fa2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	fa03 f202 	lsl.w	r2, r3, r2
 8004faa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fac:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8004fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb2:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8004fb4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004fb6:	e7d1      	b.n	8004f5c <HAL_DMA_IRQHandler+0x2c>
}
 8004fb8:	bc70      	pop	{r4, r5, r6}
 8004fba:	4770      	bx	lr

08004fbc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004fbc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc4:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005144 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc8:	4c5c      	ldr	r4, [pc, #368]	@ (800513c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8004fca:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fcc:	680a      	ldr	r2, [r1, #0]
 8004fce:	fa32 f503 	lsrs.w	r5, r2, r3
 8004fd2:	d102      	bne.n	8004fda <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8004fd4:	b003      	add	sp, #12
 8004fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fda:	2501      	movs	r5, #1
 8004fdc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8004fe0:	ea18 0202 	ands.w	r2, r8, r2
 8004fe4:	f000 80a0 	beq.w	8005128 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fe8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004fea:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fec:	f006 0503 	and.w	r5, r6, #3
 8004ff0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ff4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ff8:	1e6f      	subs	r7, r5, #1
 8004ffa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ffc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005000:	d834      	bhi.n	800506c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8005002:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005004:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005008:	68cf      	ldr	r7, [r1, #12]
 800500a:	fa07 f70e 	lsl.w	r7, r7, lr
 800500e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005012:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005014:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005016:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800501e:	409f      	lsls	r7, r3
 8005020:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005024:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005026:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005028:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800502c:	688f      	ldr	r7, [r1, #8]
 800502e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005032:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005036:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005038:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800503a:	d119      	bne.n	8005070 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800503c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005040:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005044:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005048:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800504c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005050:	f04f 0b0f 	mov.w	fp, #15
 8005054:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005058:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800505c:	690f      	ldr	r7, [r1, #16]
 800505e:	fa07 f70a 	lsl.w	r7, r7, sl
 8005062:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005066:	f8c8 7020 	str.w	r7, [r8, #32]
 800506a:	e001      	b.n	8005070 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800506c:	2d03      	cmp	r5, #3
 800506e:	d1da      	bne.n	8005026 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005070:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005072:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005076:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800507a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800507c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005080:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005082:	d051      	beq.n	8005128 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005084:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005088:	f045 0501 	orr.w	r5, r5, #1
 800508c:	f8c9 5018 	str.w	r5, [r9, #24]
 8005090:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005094:	f023 0703 	bic.w	r7, r3, #3
 8005098:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800509c:	f005 0501 	and.w	r5, r5, #1
 80050a0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80050a4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050a6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050aa:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80050ac:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80050b2:	f04f 0e0f 	mov.w	lr, #15
 80050b6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050ba:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050be:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050c2:	d033      	beq.n	800512c <HAL_GPIO_Init+0x16c>
 80050c4:	4d1e      	ldr	r5, [pc, #120]	@ (8005140 <HAL_GPIO_Init+0x180>)
 80050c6:	42a8      	cmp	r0, r5
 80050c8:	d032      	beq.n	8005130 <HAL_GPIO_Init+0x170>
 80050ca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050ce:	42a8      	cmp	r0, r5
 80050d0:	d030      	beq.n	8005134 <HAL_GPIO_Init+0x174>
 80050d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050d6:	42a8      	cmp	r0, r5
 80050d8:	d02e      	beq.n	8005138 <HAL_GPIO_Init+0x178>
 80050da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050de:	42a8      	cmp	r0, r5
 80050e0:	bf14      	ite	ne
 80050e2:	2505      	movne	r5, #5
 80050e4:	2504      	moveq	r5, #4
 80050e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80050ea:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050ee:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80050f0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80050f2:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050f4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80050f8:	bf0c      	ite	eq
 80050fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80050fc:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80050fe:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8005100:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005102:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8005106:	bf0c      	ite	eq
 8005108:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800510a:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 800510c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800510e:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005110:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8005114:	bf0c      	ite	eq
 8005116:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005118:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800511a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 800511c:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800511e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005120:	bf54      	ite	pl
 8005122:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005124:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8005126:	6025      	str	r5, [r4, #0]
    position++;
 8005128:	3301      	adds	r3, #1
 800512a:	e74f      	b.n	8004fcc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800512c:	2500      	movs	r5, #0
 800512e:	e7da      	b.n	80050e6 <HAL_GPIO_Init+0x126>
 8005130:	2501      	movs	r5, #1
 8005132:	e7d8      	b.n	80050e6 <HAL_GPIO_Init+0x126>
 8005134:	2502      	movs	r5, #2
 8005136:	e7d6      	b.n	80050e6 <HAL_GPIO_Init+0x126>
 8005138:	2503      	movs	r5, #3
 800513a:	e7d4      	b.n	80050e6 <HAL_GPIO_Init+0x126>
 800513c:	40010400 	.word	0x40010400
 8005140:	48000400 	.word	0x48000400
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005148:	b10a      	cbz	r2, 800514e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800514a:	6181      	str	r1, [r0, #24]
 800514c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800514e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005150:	4770      	bx	lr
	...

08005154 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005154:	4a02      	ldr	r2, [pc, #8]	@ (8005160 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515c:	6013      	str	r3, [r2, #0]
}
 800515e:	4770      	bx	lr
 8005160:	40007000 	.word	0x40007000

08005164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005164:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005168:	4605      	mov	r5, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d033      	beq.n	80051d6 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800516e:	6803      	ldr	r3, [r0, #0]
 8005170:	07da      	lsls	r2, r3, #31
 8005172:	d411      	bmi.n	8005198 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	079b      	lsls	r3, r3, #30
 8005178:	f100 8081 	bmi.w	800527e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	071c      	lsls	r4, r3, #28
 8005180:	f100 80eb 	bmi.w	800535a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	0758      	lsls	r0, r3, #29
 8005188:	f100 8130 	bmi.w	80053ec <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800518c:	69eb      	ldr	r3, [r5, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 81b5 	bne.w	80054fe <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8005194:	2000      	movs	r0, #0
 8005196:	e047      	b.n	8005228 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005198:	4cb0      	ldr	r4, [pc, #704]	@ (800545c <HAL_RCC_OscConfig+0x2f8>)
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d007      	beq.n	80051b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d115      	bne.n	80051da <HAL_RCC_OscConfig+0x76>
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	03df      	lsls	r7, r3, #15
 80051b2:	d512      	bpl.n	80051da <HAL_RCC_OscConfig+0x76>
 80051b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051b8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	2201      	movs	r2, #1
 80051c4:	fab3 f383 	clz	r3, r3
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	420b      	tst	r3, r1
 80051ce:	d0d1      	beq.n	8005174 <HAL_RCC_OscConfig+0x10>
 80051d0:	686b      	ldr	r3, [r5, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1ce      	bne.n	8005174 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
 80051d8:	e026      	b.n	8005228 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051da:	686a      	ldr	r2, [r5, #4]
 80051dc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80051e0:	d125      	bne.n	800522e <HAL_RCC_OscConfig+0xca>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051ec:	68a9      	ldr	r1, [r5, #8]
 80051ee:	f023 030f 	bic.w	r3, r3, #15
 80051f2:	430b      	orrs	r3, r1
 80051f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f6:	b352      	cbz	r2, 800524e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80051f8:	f7ff f852 	bl	80042a0 <HAL_GetTick>
 80051fc:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005200:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	f04f 0801 	mov.w	r8, #1
 8005206:	fa97 f3a7 	rbit	r3, r7
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	fa97 f3a7 	rbit	r3, r7
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	fa08 f303 	lsl.w	r3, r8, r3
 8005218:	4213      	tst	r3, r2
 800521a:	d1ab      	bne.n	8005174 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800521c:	f7ff f840 	bl	80042a0 <HAL_GetTick>
 8005220:	1b80      	subs	r0, r0, r6
 8005222:	2864      	cmp	r0, #100	@ 0x64
 8005224:	d9ef      	bls.n	8005206 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8005226:	2003      	movs	r0, #3
}
 8005228:	b002      	add	sp, #8
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	b932      	cbnz	r2, 8005240 <HAL_RCC_OscConfig+0xdc>
 8005232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800523e:	e7d3      	b.n	80051e8 <HAL_RCC_OscConfig+0x84>
 8005240:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8005244:	d1f5      	bne.n	8005232 <HAL_RCC_OscConfig+0xce>
 8005246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	e7c9      	b.n	80051e2 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 800524e:	f7ff f827 	bl	80042a0 <HAL_GetTick>
 8005252:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005256:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005258:	f04f 0801 	mov.w	r8, #1
 800525c:	fa97 f3a7 	rbit	r3, r7
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	fa97 f3a7 	rbit	r3, r7
 8005266:	fab3 f383 	clz	r3, r3
 800526a:	fa08 f303 	lsl.w	r3, r8, r3
 800526e:	4213      	tst	r3, r2
 8005270:	d080      	beq.n	8005174 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005272:	f7ff f815 	bl	80042a0 <HAL_GetTick>
 8005276:	1b80      	subs	r0, r0, r6
 8005278:	2864      	cmp	r0, #100	@ 0x64
 800527a:	d9ef      	bls.n	800525c <HAL_RCC_OscConfig+0xf8>
 800527c:	e7d3      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800527e:	4c77      	ldr	r4, [pc, #476]	@ (800545c <HAL_RCC_OscConfig+0x2f8>)
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	f013 0f0c 	tst.w	r3, #12
 8005286:	d007      	beq.n	8005298 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b08      	cmp	r3, #8
 8005290:	d11f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x16e>
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	03de      	lsls	r6, r3, #15
 8005296:	d41c      	bmi.n	80052d2 <HAL_RCC_OscConfig+0x16e>
 8005298:	2302      	movs	r3, #2
 800529a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	fa93 f3a3 	rbit	r3, r3
 80052a4:	2201      	movs	r2, #1
 80052a6:	fab3 f383 	clz	r3, r3
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	420b      	tst	r3, r1
 80052b0:	d002      	beq.n	80052b8 <HAL_RCC_OscConfig+0x154>
 80052b2:	692b      	ldr	r3, [r5, #16]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d18e      	bne.n	80051d6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	22f8      	movs	r2, #248	@ 0xf8
 80052bc:	fa92 f2a2 	rbit	r2, r2
 80052c0:	696b      	ldr	r3, [r5, #20]
 80052c2:	fab2 f282 	clz	r2, r2
 80052c6:	4093      	lsls	r3, r2
 80052c8:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80052cc:	4313      	orrs	r3, r2
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	e754      	b.n	800517c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052d2:	692a      	ldr	r2, [r5, #16]
 80052d4:	2601      	movs	r6, #1
 80052d6:	b1fa      	cbz	r2, 8005318 <HAL_RCC_OscConfig+0x1b4>
 80052d8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80052dc:	fab3 f383 	clz	r3, r3
 80052e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80052e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	f04f 0802 	mov.w	r8, #2
 80052ee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80052f0:	f7fe ffd6 	bl	80042a0 <HAL_GetTick>
 80052f4:	4607      	mov	r7, r0
 80052f6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fa:	6822      	ldr	r2, [r4, #0]
 80052fc:	fa98 f3a8 	rbit	r3, r8
 8005300:	fab3 f383 	clz	r3, r3
 8005304:	fa06 f303 	lsl.w	r3, r6, r3
 8005308:	4213      	tst	r3, r2
 800530a:	d1d5      	bne.n	80052b8 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800530c:	f7fe ffc8 	bl	80042a0 <HAL_GetTick>
 8005310:	1bc0      	subs	r0, r0, r7
 8005312:	2802      	cmp	r0, #2
 8005314:	d9ef      	bls.n	80052f6 <HAL_RCC_OscConfig+0x192>
 8005316:	e786      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
 8005318:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800531c:	fab3 f383 	clz	r3, r3
 8005320:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005324:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	f04f 0802 	mov.w	r8, #2
 800532e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005330:	f7fe ffb6 	bl	80042a0 <HAL_GetTick>
 8005334:	4607      	mov	r7, r0
 8005336:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	fa98 f3a8 	rbit	r3, r8
 8005340:	fab3 f383 	clz	r3, r3
 8005344:	fa06 f303 	lsl.w	r3, r6, r3
 8005348:	4213      	tst	r3, r2
 800534a:	f43f af17 	beq.w	800517c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800534e:	f7fe ffa7 	bl	80042a0 <HAL_GetTick>
 8005352:	1bc0      	subs	r0, r0, r7
 8005354:	2802      	cmp	r0, #2
 8005356:	d9ee      	bls.n	8005336 <HAL_RCC_OscConfig+0x1d2>
 8005358:	e765      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800535a:	69aa      	ldr	r2, [r5, #24]
 800535c:	4e3f      	ldr	r6, [pc, #252]	@ (800545c <HAL_RCC_OscConfig+0x2f8>)
 800535e:	4940      	ldr	r1, [pc, #256]	@ (8005460 <HAL_RCC_OscConfig+0x2fc>)
 8005360:	2401      	movs	r4, #1
 8005362:	b30a      	cbz	r2, 80053a8 <HAL_RCC_OscConfig+0x244>
 8005364:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8005368:	fab3 f383 	clz	r3, r3
 800536c:	440b      	add	r3, r1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	2702      	movs	r7, #2
 8005372:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8005374:	f7fe ff94 	bl	80042a0 <HAL_GetTick>
 8005378:	4680      	mov	r8, r0
 800537a:	fa97 f3a7 	rbit	r3, r7
 800537e:	fa97 f3a7 	rbit	r3, r7
 8005382:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005386:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005388:	fa97 f3a7 	rbit	r3, r7
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	fa04 f303 	lsl.w	r3, r4, r3
 8005394:	4213      	tst	r3, r2
 8005396:	f47f aef5 	bne.w	8005184 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539a:	f7fe ff81 	bl	80042a0 <HAL_GetTick>
 800539e:	eba0 0008 	sub.w	r0, r0, r8
 80053a2:	2802      	cmp	r0, #2
 80053a4:	d9e9      	bls.n	800537a <HAL_RCC_OscConfig+0x216>
 80053a6:	e73e      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
 80053a8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80053ac:	fab3 f383 	clz	r3, r3
 80053b0:	440b      	add	r3, r1
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	2702      	movs	r7, #2
 80053b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80053b8:	f7fe ff72 	bl	80042a0 <HAL_GetTick>
 80053bc:	4680      	mov	r8, r0
 80053be:	fa97 f3a7 	rbit	r3, r7
 80053c2:	fa97 f3a7 	rbit	r3, r7
 80053c6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ca:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80053cc:	fa97 f3a7 	rbit	r3, r7
 80053d0:	fab3 f383 	clz	r3, r3
 80053d4:	fa04 f303 	lsl.w	r3, r4, r3
 80053d8:	4213      	tst	r3, r2
 80053da:	f43f aed3 	beq.w	8005184 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053de:	f7fe ff5f 	bl	80042a0 <HAL_GetTick>
 80053e2:	eba0 0008 	sub.w	r0, r0, r8
 80053e6:	2802      	cmp	r0, #2
 80053e8:	d9e9      	bls.n	80053be <HAL_RCC_OscConfig+0x25a>
 80053ea:	e71c      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ec:	4c1b      	ldr	r4, [pc, #108]	@ (800545c <HAL_RCC_OscConfig+0x2f8>)
 80053ee:	69e3      	ldr	r3, [r4, #28]
 80053f0:	00d9      	lsls	r1, r3, #3
 80053f2:	d431      	bmi.n	8005458 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f4:	69e3      	ldr	r3, [r4, #28]
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	61e3      	str	r3, [r4, #28]
 80053fc:	69e3      	ldr	r3, [r4, #28]
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005406:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	4f16      	ldr	r7, [pc, #88]	@ (8005464 <HAL_RCC_OscConfig+0x300>)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	05da      	lsls	r2, r3, #23
 800540e:	d52b      	bpl.n	8005468 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005410:	68eb      	ldr	r3, [r5, #12]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d139      	bne.n	800548a <HAL_RCC_OscConfig+0x326>
 8005416:	6a23      	ldr	r3, [r4, #32]
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800541e:	f7fe ff3f 	bl	80042a0 <HAL_GetTick>
 8005422:	2702      	movs	r7, #2
 8005424:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542a:	f241 3a88 	movw	sl, #5000	@ 0x1388
 800542e:	fa97 f3a7 	rbit	r3, r7
 8005432:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	6a22      	ldr	r2, [r4, #32]
 8005438:	fa97 f3a7 	rbit	r3, r7
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	fa09 f303 	lsl.w	r3, r9, r3
 8005444:	4213      	tst	r3, r2
 8005446:	d053      	beq.n	80054f0 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8005448:	2e00      	cmp	r6, #0
 800544a:	f43f ae9f 	beq.w	800518c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	69e3      	ldr	r3, [r4, #28]
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005454:	61e3      	str	r3, [r4, #28]
 8005456:	e699      	b.n	800518c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005458:	2600      	movs	r6, #0
 800545a:	e7d5      	b.n	8005408 <HAL_RCC_OscConfig+0x2a4>
 800545c:	40021000 	.word	0x40021000
 8005460:	10908120 	.word	0x10908120
 8005464:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005470:	f7fe ff16 	bl	80042a0 <HAL_GetTick>
 8005474:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	05db      	lsls	r3, r3, #23
 800547a:	d4c9      	bmi.n	8005410 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547c:	f7fe ff10 	bl	80042a0 <HAL_GetTick>
 8005480:	eba0 0008 	sub.w	r0, r0, r8
 8005484:	2864      	cmp	r0, #100	@ 0x64
 8005486:	d9f6      	bls.n	8005476 <HAL_RCC_OscConfig+0x312>
 8005488:	e6cd      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548a:	bb1b      	cbnz	r3, 80054d4 <HAL_RCC_OscConfig+0x370>
 800548c:	6a23      	ldr	r3, [r4, #32]
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	6223      	str	r3, [r4, #32]
 8005494:	6a23      	ldr	r3, [r4, #32]
 8005496:	f023 0304 	bic.w	r3, r3, #4
 800549a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800549c:	f7fe ff00 	bl	80042a0 <HAL_GetTick>
 80054a0:	2702      	movs	r7, #2
 80054a2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a4:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80054ac:	fa97 f3a7 	rbit	r3, r7
 80054b0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b4:	6a22      	ldr	r2, [r4, #32]
 80054b6:	fa97 f3a7 	rbit	r3, r7
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	fa09 f303 	lsl.w	r3, r9, r3
 80054c2:	4213      	tst	r3, r2
 80054c4:	d0c0      	beq.n	8005448 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c6:	f7fe feeb 	bl	80042a0 <HAL_GetTick>
 80054ca:	eba0 0008 	sub.w	r0, r0, r8
 80054ce:	4550      	cmp	r0, sl
 80054d0:	d9ec      	bls.n	80054ac <HAL_RCC_OscConfig+0x348>
 80054d2:	e6a8      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	6a23      	ldr	r3, [r4, #32]
 80054d8:	d103      	bne.n	80054e2 <HAL_RCC_OscConfig+0x37e>
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	6223      	str	r3, [r4, #32]
 80054e0:	e799      	b.n	8005416 <HAL_RCC_OscConfig+0x2b2>
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6223      	str	r3, [r4, #32]
 80054e8:	6a23      	ldr	r3, [r4, #32]
 80054ea:	f023 0304 	bic.w	r3, r3, #4
 80054ee:	e795      	b.n	800541c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fe fed6 	bl	80042a0 <HAL_GetTick>
 80054f4:	eba0 0008 	sub.w	r0, r0, r8
 80054f8:	4550      	cmp	r0, sl
 80054fa:	d998      	bls.n	800542e <HAL_RCC_OscConfig+0x2ca>
 80054fc:	e693      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054fe:	4c46      	ldr	r4, [pc, #280]	@ (8005618 <HAL_RCC_OscConfig+0x4b4>)
 8005500:	6862      	ldr	r2, [r4, #4]
 8005502:	f002 020c 	and.w	r2, r2, #12
 8005506:	2a08      	cmp	r2, #8
 8005508:	d074      	beq.n	80055f4 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800550a:	2b02      	cmp	r3, #2
 800550c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005510:	d14d      	bne.n	80055ae <HAL_RCC_OscConfig+0x44a>
 8005512:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800551e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005528:	f7fe feba 	bl	80042a0 <HAL_GetTick>
 800552c:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8005530:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005532:	2601      	movs	r6, #1
 8005534:	fa98 f3a8 	rbit	r3, r8
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	fa98 f3a8 	rbit	r3, r8
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	fa06 f303 	lsl.w	r3, r6, r3
 8005546:	4213      	tst	r3, r2
 8005548:	d12b      	bne.n	80055a2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800554a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800554e:	6862      	ldr	r2, [r4, #4]
 8005550:	430b      	orrs	r3, r1
 8005552:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005556:	4313      	orrs	r3, r2
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800555e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800556a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800556e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005570:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8005572:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005574:	f7fe fe94 	bl	80042a0 <HAL_GetTick>
 8005578:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800557c:	4605      	mov	r5, r0
 800557e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	fa96 f3a6 	rbit	r3, r6
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	fa07 f303 	lsl.w	r3, r7, r3
 8005590:	4213      	tst	r3, r2
 8005592:	f47f adff 	bne.w	8005194 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005596:	f7fe fe83 	bl	80042a0 <HAL_GetTick>
 800559a:	1b40      	subs	r0, r0, r5
 800559c:	2802      	cmp	r0, #2
 800559e:	d9ee      	bls.n	800557e <HAL_RCC_OscConfig+0x41a>
 80055a0:	e641      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a2:	f7fe fe7d 	bl	80042a0 <HAL_GetTick>
 80055a6:	1bc0      	subs	r0, r0, r7
 80055a8:	2802      	cmp	r0, #2
 80055aa:	d9c3      	bls.n	8005534 <HAL_RCC_OscConfig+0x3d0>
 80055ac:	e63b      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
 80055ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80055b2:	fab3 f383 	clz	r3, r3
 80055b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80055ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80055c4:	f7fe fe6c 	bl	80042a0 <HAL_GetTick>
 80055c8:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80055cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ce:	2701      	movs	r7, #1
 80055d0:	fa96 f3a6 	rbit	r3, r6
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	fa96 f3a6 	rbit	r3, r6
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	fa07 f303 	lsl.w	r3, r7, r3
 80055e2:	4213      	tst	r3, r2
 80055e4:	f43f add6 	beq.w	8005194 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e8:	f7fe fe5a 	bl	80042a0 <HAL_GetTick>
 80055ec:	1b40      	subs	r0, r0, r5
 80055ee:	2802      	cmp	r0, #2
 80055f0:	d9ee      	bls.n	80055d0 <HAL_RCC_OscConfig+0x46c>
 80055f2:	e618      	b.n	8005226 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	f43f adee 	beq.w	80051d6 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80055fa:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80055fc:	6a2b      	ldr	r3, [r5, #32]
 80055fe:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005602:	429a      	cmp	r2, r3
 8005604:	f47f ade7 	bne.w	80051d6 <HAL_RCC_OscConfig+0x72>
 8005608:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800560a:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800560e:	1ac0      	subs	r0, r0, r3
 8005610:	bf18      	it	ne
 8005612:	2001      	movne	r0, #1
 8005614:	e608      	b.n	8005228 <HAL_RCC_OscConfig+0xc4>
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000

0800561c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCC_GetSysClockFreq+0x34>)
 800561e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005620:	f002 010c 	and.w	r1, r2, #12
 8005624:	2908      	cmp	r1, #8
 8005626:	d111      	bne.n	800564c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800562a:	480a      	ldr	r0, [pc, #40]	@ (8005654 <HAL_RCC_GetSysClockFreq+0x38>)
 800562c:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005630:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005632:	bf44      	itt	mi
 8005634:	f003 030f 	andmi.w	r3, r3, #15
 8005638:	4a07      	ldrmi	r2, [pc, #28]	@ (8005658 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800563a:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800563c:	bf49      	itett	mi
 800563e:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005640:	4b06      	ldrpl	r3, [pc, #24]	@ (800565c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005642:	4b07      	ldrmi	r3, [pc, #28]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x44>)
 8005644:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005648:	4358      	muls	r0, r3
 800564a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800564c:	4804      	ldr	r0, [pc, #16]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800564e:	4770      	bx	lr
 8005650:	40021000 	.word	0x40021000
 8005654:	0800fb5c 	.word	0x0800fb5c
 8005658:	0800fb4c 	.word	0x0800fb4c
 800565c:	003d0900 	.word	0x003d0900
 8005660:	007a1200 	.word	0x007a1200

08005664 <HAL_RCC_ClockConfig>:
{
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800566a:	4604      	mov	r4, r0
 800566c:	b910      	cbnz	r0, 8005674 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800566e:	2001      	movs	r0, #1
}
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4a4a      	ldr	r2, [pc, #296]	@ (80057a0 <HAL_RCC_ClockConfig+0x13c>)
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	428b      	cmp	r3, r1
 800567e:	d32e      	bcc.n	80056de <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	0791      	lsls	r1, r2, #30
 8005684:	d436      	bmi.n	80056f4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005686:	07d2      	lsls	r2, r2, #31
 8005688:	d43c      	bmi.n	8005704 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800568a:	4a45      	ldr	r2, [pc, #276]	@ (80057a0 <HAL_RCC_ClockConfig+0x13c>)
 800568c:	6813      	ldr	r3, [r2, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	42ab      	cmp	r3, r5
 8005694:	d870      	bhi.n	8005778 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	4d42      	ldr	r5, [pc, #264]	@ (80057a4 <HAL_RCC_ClockConfig+0x140>)
 800569a:	f012 0f04 	tst.w	r2, #4
 800569e:	d177      	bne.n	8005790 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a0:	0713      	lsls	r3, r2, #28
 80056a2:	d506      	bpl.n	80056b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a4:	686b      	ldr	r3, [r5, #4]
 80056a6:	6922      	ldr	r2, [r4, #16]
 80056a8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80056ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80056b0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056b2:	f7ff ffb3 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80056b6:	686b      	ldr	r3, [r5, #4]
 80056b8:	22f0      	movs	r2, #240	@ 0xf0
 80056ba:	fa92 f2a2 	rbit	r2, r2
 80056be:	fab2 f282 	clz	r2, r2
 80056c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c6:	40d3      	lsrs	r3, r2
 80056c8:	4a37      	ldr	r2, [pc, #220]	@ (80057a8 <HAL_RCC_ClockConfig+0x144>)
 80056ca:	5cd3      	ldrb	r3, [r2, r3]
 80056cc:	40d8      	lsrs	r0, r3
 80056ce:	4b37      	ldr	r3, [pc, #220]	@ (80057ac <HAL_RCC_ClockConfig+0x148>)
 80056d0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80056d2:	4b37      	ldr	r3, [pc, #220]	@ (80057b0 <HAL_RCC_ClockConfig+0x14c>)
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f7fe fc8f 	bl	8003ff8 <HAL_InitTick>
  return HAL_OK;
 80056da:	2000      	movs	r0, #0
 80056dc:	e7c8      	b.n	8005670 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	430b      	orrs	r3, r1
 80056e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	428b      	cmp	r3, r1
 80056f0:	d1bd      	bne.n	800566e <HAL_RCC_ClockConfig+0xa>
 80056f2:	e7c5      	b.n	8005680 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f4:	492b      	ldr	r1, [pc, #172]	@ (80057a4 <HAL_RCC_ClockConfig+0x140>)
 80056f6:	68a0      	ldr	r0, [r4, #8]
 80056f8:	684b      	ldr	r3, [r1, #4]
 80056fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fe:	4303      	orrs	r3, r0
 8005700:	604b      	str	r3, [r1, #4]
 8005702:	e7c0      	b.n	8005686 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005704:	6862      	ldr	r2, [r4, #4]
 8005706:	4e27      	ldr	r6, [pc, #156]	@ (80057a4 <HAL_RCC_ClockConfig+0x140>)
 8005708:	2a01      	cmp	r2, #1
 800570a:	d124      	bne.n	8005756 <HAL_RCC_ClockConfig+0xf2>
 800570c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005710:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005714:	6831      	ldr	r1, [r6, #0]
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005724:	d0a3      	beq.n	800566e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005726:	6873      	ldr	r3, [r6, #4]
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	4313      	orrs	r3, r2
 800572e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005730:	f7fe fdb6 	bl	80042a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005738:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573a:	6873      	ldr	r3, [r6, #4]
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005746:	d0a0      	beq.n	800568a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fe fdaa 	bl	80042a0 <HAL_GetTick>
 800574c:	1bc0      	subs	r0, r0, r7
 800574e:	4540      	cmp	r0, r8
 8005750:	d9f3      	bls.n	800573a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005752:	2003      	movs	r0, #3
 8005754:	e78c      	b.n	8005670 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005756:	2a02      	cmp	r2, #2
 8005758:	bf0c      	ite	eq
 800575a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 800575e:	2302      	movne	r3, #2
 8005760:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005764:	6830      	ldr	r0, [r6, #0]
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	2101      	movs	r1, #1
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	fa01 f303 	lsl.w	r3, r1, r3
 8005774:	4203      	tst	r3, r0
 8005776:	e7d5      	b.n	8005724 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	432b      	orrs	r3, r5
 8005780:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	42ab      	cmp	r3, r5
 800578a:	f47f af70 	bne.w	800566e <HAL_RCC_ClockConfig+0xa>
 800578e:	e782      	b.n	8005696 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005790:	686b      	ldr	r3, [r5, #4]
 8005792:	68e1      	ldr	r1, [r4, #12]
 8005794:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005798:	430b      	orrs	r3, r1
 800579a:	606b      	str	r3, [r5, #4]
 800579c:	e780      	b.n	80056a0 <HAL_RCC_ClockConfig+0x3c>
 800579e:	bf00      	nop
 80057a0:	40022000 	.word	0x40022000
 80057a4:	40021000 	.word	0x40021000
 80057a8:	0800fb3c 	.word	0x0800fb3c
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	20000014 	.word	0x20000014

080057b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057b4:	4b08      	ldr	r3, [pc, #32]	@ (80057d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	fa92 f2a2 	rbit	r2, r2
 80057c0:	fab2 f282 	clz	r2, r2
 80057c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057c8:	40d3      	lsrs	r3, r2
 80057ca:	4a04      	ldr	r2, [pc, #16]	@ (80057dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057cc:	5cd3      	ldrb	r3, [r2, r3]
 80057ce:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80057d0:	6810      	ldr	r0, [r2, #0]
}    
 80057d2:	40d8      	lsrs	r0, r3
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	0800fb34 	.word	0x0800fb34
 80057e0:	2000000c 	.word	0x2000000c

080057e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	fa92 f2a2 	rbit	r2, r2
 80057f0:	fab2 f282 	clz	r2, r2
 80057f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80057f8:	40d3      	lsrs	r3, r2
 80057fa:	4a04      	ldr	r2, [pc, #16]	@ (800580c <HAL_RCC_GetPCLK2Freq+0x28>)
 80057fc:	5cd3      	ldrb	r3, [r2, r3]
 80057fe:	4a04      	ldr	r2, [pc, #16]	@ (8005810 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005800:	6810      	ldr	r0, [r2, #0]
} 
 8005802:	40d8      	lsrs	r0, r3
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	0800fb34 	.word	0x0800fb34
 8005810:	2000000c 	.word	0x2000000c

08005814 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005814:	230f      	movs	r3, #15
 8005816:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_GetClockConfig+0x34>)
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	f002 0203 	and.w	r2, r2, #3
 8005820:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005828:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005830:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800583a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800583c:	4b03      	ldr	r3, [pc, #12]	@ (800584c <HAL_RCC_GetClockConfig+0x38>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	600b      	str	r3, [r1, #0]
}
 8005846:	4770      	bx	lr
 8005848:	40021000 	.word	0x40021000
 800584c:	40022000 	.word	0x40022000

08005850 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005850:	6803      	ldr	r3, [r0, #0]
{
 8005852:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005856:	03dd      	lsls	r5, r3, #15
{
 8005858:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800585a:	d524      	bpl.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585c:	4d78      	ldr	r5, [pc, #480]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800585e:	69eb      	ldr	r3, [r5, #28]
 8005860:	00d8      	lsls	r0, r3, #3
 8005862:	f100 8091 	bmi.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	69eb      	ldr	r3, [r5, #28]
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800586c:	61eb      	str	r3, [r5, #28]
 800586e:	69eb      	ldr	r3, [r5, #28]
 8005870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005878:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587a:	4f72      	ldr	r7, [pc, #456]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	05d9      	lsls	r1, r3, #23
 8005880:	f140 8084 	bpl.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005884:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005886:	6862      	ldr	r2, [r4, #4]
 8005888:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800588c:	f040 8093 	bne.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005890:	6a2b      	ldr	r3, [r5, #32]
 8005892:	6862      	ldr	r2, [r4, #4]
 8005894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005898:	4313      	orrs	r3, r2
 800589a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800589c:	b11e      	cbz	r6, 80058a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	69eb      	ldr	r3, [r5, #28]
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	07df      	lsls	r7, r3, #31
 80058aa:	d506      	bpl.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ac:	4964      	ldr	r1, [pc, #400]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058ae:	68a0      	ldr	r0, [r4, #8]
 80058b0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80058b2:	f022 0203 	bic.w	r2, r2, #3
 80058b6:	4302      	orrs	r2, r0
 80058b8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ba:	079e      	lsls	r6, r3, #30
 80058bc:	d506      	bpl.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058be:	4960      	ldr	r1, [pc, #384]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80058c4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80058c8:	4302      	orrs	r2, r0
 80058ca:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058cc:	075d      	lsls	r5, r3, #29
 80058ce:	d506      	bpl.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058d0:	495b      	ldr	r1, [pc, #364]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058d2:	6920      	ldr	r0, [r4, #16]
 80058d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80058d6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80058da:	4302      	orrs	r2, r0
 80058dc:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058de:	0698      	lsls	r0, r3, #26
 80058e0:	d506      	bpl.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e2:	4957      	ldr	r1, [pc, #348]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058e4:	69e0      	ldr	r0, [r4, #28]
 80058e6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80058e8:	f022 0210 	bic.w	r2, r2, #16
 80058ec:	4302      	orrs	r2, r0
 80058ee:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058f0:	0399      	lsls	r1, r3, #14
 80058f2:	d506      	bpl.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058f4:	4952      	ldr	r1, [pc, #328]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80058f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80058f8:	684a      	ldr	r2, [r1, #4]
 80058fa:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80058fe:	4302      	orrs	r2, r0
 8005900:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005902:	065a      	lsls	r2, r3, #25
 8005904:	d506      	bpl.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005906:	494e      	ldr	r1, [pc, #312]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005908:	6a20      	ldr	r0, [r4, #32]
 800590a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800590c:	f022 0220 	bic.w	r2, r2, #32
 8005910:	4302      	orrs	r2, r0
 8005912:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005914:	071f      	lsls	r7, r3, #28
 8005916:	d506      	bpl.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005918:	4949      	ldr	r1, [pc, #292]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800591a:	6960      	ldr	r0, [r4, #20]
 800591c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800591e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005922:	4302      	orrs	r2, r0
 8005924:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005926:	06de      	lsls	r6, r3, #27
 8005928:	d506      	bpl.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800592a:	4945      	ldr	r1, [pc, #276]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800592c:	69a0      	ldr	r0, [r4, #24]
 800592e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005930:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005934:	4302      	orrs	r2, r0
 8005936:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005938:	059d      	lsls	r5, r3, #22
 800593a:	d506      	bpl.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800593c:	4940      	ldr	r1, [pc, #256]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800593e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005940:	684a      	ldr	r2, [r1, #4]
 8005942:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005946:	4302      	orrs	r2, r0
 8005948:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800594a:	0618      	lsls	r0, r3, #24
 800594c:	d506      	bpl.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800594e:	493c      	ldr	r1, [pc, #240]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005950:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005952:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005954:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005958:	4302      	orrs	r2, r0
 800595a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800595c:	05d9      	lsls	r1, r3, #23
 800595e:	d506      	bpl.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005960:	4937      	ldr	r1, [pc, #220]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005962:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005964:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005966:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 800596a:	4302      	orrs	r2, r0
 800596c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800596e:	04da      	lsls	r2, r3, #19
 8005970:	d506      	bpl.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005972:	4933      	ldr	r1, [pc, #204]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005974:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005976:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005978:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800597c:	4302      	orrs	r2, r0
 800597e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005980:	049b      	lsls	r3, r3, #18
 8005982:	d454      	bmi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005984:	2000      	movs	r0, #0
 8005986:	e013      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8005988:	2600      	movs	r6, #0
 800598a:	e776      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005992:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005994:	f7fe fc84 	bl	80042a0 <HAL_GetTick>
 8005998:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	05da      	lsls	r2, r3, #23
 800599e:	f53f af71 	bmi.w	8005884 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a2:	f7fe fc7d 	bl	80042a0 <HAL_GetTick>
 80059a6:	eba0 0008 	sub.w	r0, r0, r8
 80059aa:	2864      	cmp	r0, #100	@ 0x64
 80059ac:	d9f5      	bls.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 80059ae:	2003      	movs	r0, #3
}
 80059b0:	b002      	add	sp, #8
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059b6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f43f af68 	beq.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059c0:	6a29      	ldr	r1, [r5, #32]
 80059c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059c6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80059ca:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ce:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80059d2:	fab2 f282 	clz	r2, r2
 80059d6:	4462      	add	r2, ip
 80059d8:	0092      	lsls	r2, r2, #2
 80059da:	2701      	movs	r7, #1
 80059dc:	6017      	str	r7, [r2, #0]
 80059de:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	4463      	add	r3, ip
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059ee:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80059f0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059f2:	f57f af4d 	bpl.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80059f6:	f7fe fc53 	bl	80042a0 <HAL_GetTick>
 80059fa:	f04f 0802 	mov.w	r8, #2
 80059fe:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005a04:	fa98 f3a8 	rbit	r3, r8
 8005a08:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0c:	6a2a      	ldr	r2, [r5, #32]
 8005a0e:	fa98 f3a8 	rbit	r3, r8
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	fa07 f303 	lsl.w	r3, r7, r3
 8005a1a:	4213      	tst	r3, r2
 8005a1c:	f47f af38 	bne.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fe fc3e 	bl	80042a0 <HAL_GetTick>
 8005a24:	eba0 0009 	sub.w	r0, r0, r9
 8005a28:	4550      	cmp	r0, sl
 8005a2a:	d9eb      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005a2c:	e7bf      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a32:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a3c:	e7a2      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40007000 	.word	0x40007000
 8005a48:	10908100 	.word	0x10908100

08005a4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005a4e:	6803      	ldr	r3, [r0, #0]
 8005a50:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RTC_WaitForSynchro+0x2c>)
 8005a52:	60da      	str	r2, [r3, #12]
{
 8005a54:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a56:	f7fe fc23 	bl	80042a0 <HAL_GetTick>
 8005a5a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	069b      	lsls	r3, r3, #26
 8005a62:	d501      	bpl.n	8005a68 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005a64:	2000      	movs	r0, #0
}
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a68:	f7fe fc1a 	bl	80042a0 <HAL_GetTick>
 8005a6c:	1b40      	subs	r0, r0, r5
 8005a6e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005a72:	d9f3      	bls.n	8005a5c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8005a74:	2003      	movs	r0, #3
 8005a76:	e7f6      	b.n	8005a66 <HAL_RTC_WaitForSynchro+0x1a>
 8005a78:	0001ff5f 	.word	0x0001ff5f

08005a7c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a7c:	6803      	ldr	r3, [r0, #0]
{
 8005a7e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a80:	68dc      	ldr	r4, [r3, #12]
 8005a82:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8005a86:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a88:	d117      	bne.n	8005aba <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a90:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a92:	f7fe fc05 	bl	80042a0 <HAL_GetTick>
 8005a96:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	065b      	lsls	r3, r3, #25
 8005a9e:	d400      	bmi.n	8005aa2 <RTC_EnterInitMode+0x26>
 8005aa0:	b10c      	cbz	r4, 8005aa6 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aa6:	f7fe fbfb 	bl	80042a0 <HAL_GetTick>
 8005aaa:	1b80      	subs	r0, r0, r6
 8005aac:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ab0:	bf82      	ittt	hi
 8005ab2:	2304      	movhi	r3, #4
 8005ab4:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8005ab6:	2401      	movhi	r4, #1
 8005ab8:	e7ee      	b.n	8005a98 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2400      	movs	r4, #0
 8005abc:	e7f1      	b.n	8005aa2 <RTC_EnterInitMode+0x26>

08005abe <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005abe:	6803      	ldr	r3, [r0, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8005ac6:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ac8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	069b      	lsls	r3, r3, #26
{
 8005ace:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005ad0:	d501      	bpl.n	8005ad6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8005ad4:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ad6:	f7ff ffb9 	bl	8005a4c <HAL_RTC_WaitForSynchro>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d0f9      	beq.n	8005ad2 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	e7f6      	b.n	8005ad4 <RTC_ExitInitMode+0x16>

08005ae6 <HAL_RTC_Init>:
{
 8005ae6:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d041      	beq.n	8005b72 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005aee:	7f43      	ldrb	r3, [r0, #29]
 8005af0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005af4:	b913      	cbnz	r3, 8005afc <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8005af6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005af8:	f7fe f946 	bl	8003d88 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	06d2      	lsls	r2, r2, #27
 8005b06:	d503      	bpl.n	8005b10 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	7763      	strb	r3, [r4, #29]
 8005b0c:	2000      	movs	r0, #0
}
 8005b0e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b10:	22ca      	movs	r2, #202	@ 0xca
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b14:	2253      	movs	r2, #83	@ 0x53
 8005b16:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff ffaf 	bl	8005a7c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005b1e:	bb10      	cbnz	r0, 8005b66 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b20:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b22:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b2e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b30:	6862      	ldr	r2, [r4, #4]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	4302      	orrs	r2, r0
 8005b36:	6960      	ldr	r0, [r4, #20]
 8005b38:	4302      	orrs	r2, r0
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b3e:	68e2      	ldr	r2, [r4, #12]
 8005b40:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b4a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff ffb6 	bl	8005abe <RTC_ExitInitMode>
    if (status == HAL_OK)
 8005b52:	b940      	cbnz	r0, 8005b66 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b54:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b56:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b5e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b62:	430a      	orrs	r2, r1
 8005b64:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	22ff      	movs	r2, #255	@ 0xff
 8005b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0cb      	beq.n	8005b08 <HAL_RTC_Init+0x22>
 8005b70:	e7cd      	b.n	8005b0e <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8005b72:	2001      	movs	r0, #1
 8005b74:	e7cb      	b.n	8005b0e <HAL_RTC_Init+0x28>

08005b76 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8005b76:	2300      	movs	r3, #0

  while (number >= 10U)
 8005b78:	2809      	cmp	r0, #9
 8005b7a:	d803      	bhi.n	8005b84 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b7c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8005b80:	b2c0      	uxtb	r0, r0
 8005b82:	4770      	bx	lr
    number -= 10U;
 8005b84:	380a      	subs	r0, #10
    bcdhigh++;
 8005b86:	3301      	adds	r3, #1
    number -= 10U;
 8005b88:	b2c0      	uxtb	r0, r0
 8005b8a:	e7f5      	b.n	8005b78 <RTC_ByteToBcd2+0x2>

08005b8c <HAL_RTC_SetTime>:
{
 8005b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8005b90:	7f03      	ldrb	r3, [r0, #28]
 8005b92:	2b01      	cmp	r3, #1
{
 8005b94:	4606      	mov	r6, r0
 8005b96:	460f      	mov	r7, r1
 8005b98:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8005b9c:	d041      	beq.n	8005c22 <HAL_RTC_SetTime+0x96>
 8005b9e:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ba0:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8005ba2:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ba4:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8005ba6:	7838      	ldrb	r0, [r7, #0]
 8005ba8:	787d      	ldrb	r5, [r7, #1]
 8005baa:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bac:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d139      	bne.n	8005c26 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bb2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8005bb6:	bf08      	it	eq
 8005bb8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bba:	f7ff ffdc 	bl	8005b76 <RTC_ByteToBcd2>
 8005bbe:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff ffd8 	bl	8005b76 <RTC_ByteToBcd2>
 8005bc6:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7ff ffd4 	bl	8005b76 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005bce:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005bd0:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8005bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005bd8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bdc:	23ca      	movs	r3, #202	@ 0xca
 8005bde:	624b      	str	r3, [r1, #36]	@ 0x24
 8005be0:	2353      	movs	r3, #83	@ 0x53
 8005be2:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff ff49 	bl	8005a7c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8005bea:	b9a8      	cbnz	r0, 8005c18 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bec:	6832      	ldr	r2, [r6, #0]
 8005bee:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8005bf2:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8005bf6:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005bf8:	6893      	ldr	r3, [r2, #8]
 8005bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bfe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c00:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8005c04:	6891      	ldr	r1, [r2, #8]
 8005c06:	4303      	orrs	r3, r0
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff ff56 	bl	8005abe <RTC_ExitInitMode>
  if (status == HAL_OK)
 8005c12:	b908      	cbnz	r0, 8005c18 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8005c14:	2301      	movs	r3, #1
 8005c16:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	22ff      	movs	r2, #255	@ 0xff
 8005c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	7733      	strb	r3, [r6, #28]
}
 8005c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c26:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8005c2a:	bf08      	it	eq
 8005c2c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c2e:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c30:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c32:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c36:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c3a:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8005c3e:	e7cd      	b.n	8005bdc <HAL_RTC_SetTime+0x50>

08005c40 <HAL_RTC_SetDate>:
{
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005c42:	7f03      	ldrb	r3, [r0, #28]
 8005c44:	2b01      	cmp	r3, #1
{
 8005c46:	4605      	mov	r5, r0
 8005c48:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8005c4c:	d027      	beq.n	8005c9e <HAL_RTC_SetDate+0x5e>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c52:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c54:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c56:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c58:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8005c5a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c5c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c5e:	b1fa      	cbz	r2, 8005ca0 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c60:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8005c64:	433b      	orrs	r3, r7
 8005c66:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	22ca      	movs	r2, #202	@ 0xca
 8005c6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c70:	2253      	movs	r2, #83	@ 0x53
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7ff ff01 	bl	8005a7c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8005c7a:	b958      	cbnz	r0, 8005c94 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c7c:	682a      	ldr	r2, [r5, #0]
 8005c7e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8005c82:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8005c86:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f7ff ff18 	bl	8005abe <RTC_ExitInitMode>
  if (status == HAL_OK)
 8005c8e:	b908      	cbnz	r0, 8005c94 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8005c90:	2301      	movs	r3, #1
 8005c92:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	22ff      	movs	r2, #255	@ 0xff
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	772b      	strb	r3, [r5, #28]
}
 8005c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ca0:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ca2:	bf42      	ittt	mi
 8005ca4:	f024 0410 	bicmi.w	r4, r4, #16
 8005ca8:	340a      	addmi	r4, #10
 8005caa:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cac:	f7ff ff63 	bl	8005b76 <RTC_ByteToBcd2>
 8005cb0:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cb2:	7848      	ldrb	r0, [r1, #1]
 8005cb4:	f7ff ff5f 	bl	8005b76 <RTC_ByteToBcd2>
 8005cb8:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff ff5b 	bl	8005b76 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cc0:	ea40 0306 	orr.w	r3, r0, r6
 8005cc4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cc8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8005ccc:	e7cd      	b.n	8005c6a <HAL_RTC_SetDate+0x2a>

08005cce <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005cce:	0903      	lsrs	r3, r0, #4
 8005cd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005cd4:	f000 000f 	and.w	r0, r0, #15
 8005cd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8005cdc:	b2c0      	uxtb	r0, r0
 8005cde:	4770      	bx	lr

08005ce0 <HAL_RTC_GetTime>:
{
 8005ce0:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ce2:	6803      	ldr	r3, [r0, #0]
 8005ce4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005ce6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ce8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005cea:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cec:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005cf0:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005cf4:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cf8:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005cfa:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005cfe:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d02:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d04:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005d06:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005d08:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8005d0a:	b952      	cbnz	r2, 8005d22 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d0c:	f7ff ffdf 	bl	8005cce <RTC_Bcd2ToByte>
 8005d10:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d12:	4628      	mov	r0, r5
 8005d14:	f7ff ffdb 	bl	8005cce <RTC_Bcd2ToByte>
 8005d18:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff ffd7 	bl	8005cce <RTC_Bcd2ToByte>
 8005d20:	7088      	strb	r0, [r1, #2]
}
 8005d22:	2000      	movs	r0, #0
 8005d24:	bd38      	pop	{r3, r4, r5, pc}

08005d26 <HAL_RTC_GetDate>:
{
 8005d26:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d28:	6803      	ldr	r3, [r0, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d2c:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d30:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d34:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d38:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d3c:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d3e:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d40:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d42:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8005d44:	b952      	cbnz	r2, 8005d5c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d46:	f7ff ffc2 	bl	8005cce <RTC_Bcd2ToByte>
 8005d4a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7ff ffbe 	bl	8005cce <RTC_Bcd2ToByte>
 8005d52:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7ff ffba 	bl	8005cce <RTC_Bcd2ToByte>
 8005d5a:	7088      	strb	r0, [r1, #2]
}
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}

08005d60 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d62:	460e      	mov	r6, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d68:	f7fe fa9a 	bl	80042a0 <HAL_GetTick>
 8005d6c:	4434      	add	r4, r6
 8005d6e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005d70:	f7fe fa96 	bl	80042a0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d74:	4b22      	ldr	r3, [pc, #136]	@ (8005e00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005d7c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005d7e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d80:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d82:	682a      	ldr	r2, [r5, #0]
 8005d84:	6890      	ldr	r0, [r2, #8]
 8005d86:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8005d8a:	d02d      	beq.n	8005de8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d8c:	1c73      	adds	r3, r6, #1
 8005d8e:	d0f9      	beq.n	8005d84 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d90:	f7fe fa86 	bl	80042a0 <HAL_GetTick>
 8005d94:	1bc0      	subs	r0, r0, r7
 8005d96:	42a0      	cmp	r0, r4
 8005d98:	d328      	bcc.n	8005dec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005da2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da4:	686a      	ldr	r2, [r5, #4]
 8005da6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005daa:	d10a      	bne.n	8005dc2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8005dac:	68aa      	ldr	r2, [r5, #8]
 8005dae:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005db2:	d002      	beq.n	8005dba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005db8:	d103      	bne.n	8005dc2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005dc4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005dc8:	d107      	bne.n	8005dda <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005de0:	2300      	movs	r3, #0
 8005de2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005de6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8005de8:	b003      	add	sp, #12
 8005dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8005dec:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005dee:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005df0:	2a00      	cmp	r2, #0
      count--;
 8005df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	bf08      	it	eq
 8005dfa:	4614      	moveq	r4, r2
 8005dfc:	e7c1      	b.n	8005d82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8005dfe:	bf00      	nop
 8005e00:	2000000c 	.word	0x2000000c

08005e04 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e08:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e0a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e0c:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005e0e:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e12:	4605      	mov	r5, r0
 8005e14:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e16:	f7fe fa43 	bl	80042a0 <HAL_GetTick>
 8005e1a:	443c      	add	r4, r7
 8005e1c:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005e1e:	f7fe fa3f 	bl	80042a0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e24:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2223      	movs	r2, #35	@ 0x23
 8005e2c:	4353      	muls	r3, r2
 8005e2e:	0d1b      	lsrs	r3, r3, #20
 8005e30:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005e32:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e34:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e36:	682a      	ldr	r2, [r5, #0]
 8005e38:	6890      	ldr	r0, [r2, #8]
 8005e3a:	4030      	ands	r0, r6
 8005e3c:	d038      	beq.n	8005eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e3e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e42:	bf01      	itttt	eq
 8005e44:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8005e48:	b2db      	uxtbeq	r3, r3
 8005e4a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e4e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e52:	1c7b      	adds	r3, r7, #1
 8005e54:	d0f0      	beq.n	8005e38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e56:	f7fe fa23 	bl	80042a0 <HAL_GetTick>
 8005e5a:	eba0 0008 	sub.w	r0, r0, r8
 8005e5e:	42a0      	cmp	r0, r4
 8005e60:	d329      	bcc.n	8005eb6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6c:	686a      	ldr	r2, [r5, #4]
 8005e6e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005e72:	d10a      	bne.n	8005e8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8005e74:	68aa      	ldr	r2, [r5, #8]
 8005e76:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005e7a:	d002      	beq.n	8005e82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e7c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005e80:	d103      	bne.n	8005e8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e8a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005e8c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005e90:	d107      	bne.n	8005ea2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005eae:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8005eb0:	b003      	add	sp, #12
 8005eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8005eb6:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005eb8:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005eba:	2a00      	cmp	r2, #0
      count--;
 8005ebc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	bf08      	it	eq
 8005ec4:	4614      	moveq	r4, r2
 8005ec6:	e7b6      	b.n	8005e36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8005ec8:	2000000c 	.word	0x2000000c

08005ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ece:	6843      	ldr	r3, [r0, #4]
 8005ed0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	460e      	mov	r6, r1
 8005ed8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eda:	d10b      	bne.n	8005ef4 <SPI_EndRxTransaction+0x28>
 8005edc:	6883      	ldr	r3, [r0, #8]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee2:	d002      	beq.n	8005eea <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee8:	d104      	bne.n	8005ef4 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005eea:	6822      	ldr	r2, [r4, #0]
 8005eec:	6813      	ldr	r3, [r2, #0]
 8005eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ef2:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef4:	463a      	mov	r2, r7
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7ff ff31 	bl	8005d60 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005efe:	4605      	mov	r5, r0
 8005f00:	b128      	cbz	r0, 8005f0e <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f02:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005f04:	f043 0320 	orr.w	r3, r3, #32
 8005f08:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f0a:	2503      	movs	r5, #3
 8005f0c:	e013      	b.n	8005f36 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f14:	d10f      	bne.n	8005f36 <SPI_EndRxTransaction+0x6a>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f1c:	d002      	beq.n	8005f24 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f22:	d108      	bne.n	8005f36 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f24:	463b      	mov	r3, r7
 8005f26:	4632      	mov	r2, r6
 8005f28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7ff ff69 	bl	8005e04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d1e5      	bne.n	8005f02 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8005f36:	4628      	mov	r0, r5
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f3a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f3c:	4613      	mov	r3, r2
{
 8005f3e:	460d      	mov	r5, r1
 8005f40:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f42:	460a      	mov	r2, r1
 8005f44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8005f48:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f4a:	f7ff ff5b 	bl	8005e04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005f4e:	b128      	cbz	r0, 8005f5c <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f50:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005f52:	f043 0320 	orr.w	r3, r3, #32
 8005f56:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f58:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	4629      	mov	r1, r5
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7ff fefd 	bl	8005d60 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d1f2      	bne.n	8005f50 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f6a:	4633      	mov	r3, r6
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff ff46 	bl	8005e04 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d0ee      	beq.n	8005f5a <SPI_EndRxTxTransaction+0x20>
 8005f7c:	e7e8      	b.n	8005f50 <SPI_EndRxTxTransaction+0x16>

08005f7e <HAL_SPI_Init>:
{
 8005f7e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8005f80:	4604      	mov	r4, r0
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d067      	beq.n	8006056 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f86:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d15d      	bne.n	8006048 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8c:	6842      	ldr	r2, [r0, #4]
 8005f8e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005f92:	d000      	beq.n	8005f96 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f94:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f9a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005f9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005fa2:	b923      	cbnz	r3, 8005fae <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8005fa4:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7fd ff01 	bl	8003db0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005fae:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fb0:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005fb8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fba:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	d942      	bls.n	8006050 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fca:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fcc:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd0:	bf18      	it	ne
 8005fd2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd4:	68a6      	ldr	r6, [r4, #8]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	69a1      	ldr	r1, [r4, #24]
 8005fda:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8005fde:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005fe2:	4333      	orrs	r3, r6
 8005fe4:	6926      	ldr	r6, [r4, #16]
 8005fe6:	f006 0602 	and.w	r6, r6, #2
 8005fea:	4333      	orrs	r3, r6
 8005fec:	6966      	ldr	r6, [r4, #20]
 8005fee:	f006 0601 	and.w	r6, r6, #1
 8005ff2:	4333      	orrs	r3, r6
 8005ff4:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8005ff8:	4333      	orrs	r3, r6
 8005ffa:	69e6      	ldr	r6, [r4, #28]
 8005ffc:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8006000:	4333      	orrs	r3, r6
 8006002:	6a26      	ldr	r6, [r4, #32]
 8006004:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8006008:	4333      	orrs	r3, r6
 800600a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800600c:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8006010:	4333      	orrs	r3, r6
 8006012:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006014:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8006016:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006018:	f006 0608 	and.w	r6, r6, #8
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8006024:	4333      	orrs	r3, r6
 8006026:	0c09      	lsrs	r1, r1, #16
 8006028:	4303      	orrs	r3, r0
 800602a:	f001 0104 	and.w	r1, r1, #4
 800602e:	430b      	orrs	r3, r1
 8006030:	432b      	orrs	r3, r5
 8006032:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006034:	69d3      	ldr	r3, [r2, #28]
 8006036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800603a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800603c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800603e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006040:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006042:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006046:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006048:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800604a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604e:	e7a2      	b.n	8005f96 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006050:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006054:	e7bc      	b.n	8005fd0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006056:	2001      	movs	r0, #1
 8006058:	e7f5      	b.n	8006046 <HAL_SPI_Init+0xc8>

0800605a <HAL_SPI_Transmit>:
{
 800605a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800605e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006060:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006064:	2b01      	cmp	r3, #1
{
 8006066:	4604      	mov	r4, r0
 8006068:	460d      	mov	r5, r1
 800606a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800606c:	f000 80bc 	beq.w	80061e8 <HAL_SPI_Transmit+0x18e>
 8006070:	2301      	movs	r3, #1
 8006072:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006076:	f7fe f913 	bl	80042a0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800607a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800607e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006080:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006082:	fa5f f983 	uxtb.w	r9, r3
 8006086:	f040 80ac 	bne.w	80061e2 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800608a:	2d00      	cmp	r5, #0
 800608c:	d069      	beq.n	8006162 <HAL_SPI_Transmit+0x108>
 800608e:	f1b8 0f00 	cmp.w	r8, #0
 8006092:	d066      	beq.n	8006162 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006094:	2303      	movs	r3, #3
 8006096:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800609a:	2300      	movs	r3, #0
 800609c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800609e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80060a2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80060a8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80060ac:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80060b2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060b4:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80060ba:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060be:	d107      	bne.n	80060d0 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80060c0:	6833      	ldr	r3, [r6, #0]
 80060c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ce:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d0:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d2:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060d4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80060d6:	bf5e      	ittt	pl
 80060d8:	6833      	ldrpl	r3, [r6, #0]
 80060da:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80060de:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060e0:	68e3      	ldr	r3, [r4, #12]
 80060e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060e6:	d943      	bls.n	8006170 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e8:	b112      	cbz	r2, 80060f0 <HAL_SPI_Transmit+0x96>
 80060ea:	f1b8 0f01 	cmp.w	r8, #1
 80060ee:	d107      	bne.n	8006100 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80060f4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f6:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80060f8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006100:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	b9b3      	cbnz	r3, 8006134 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006106:	4652      	mov	r2, sl
 8006108:	4639      	mov	r1, r7
 800610a:	4620      	mov	r0, r4
 800610c:	f7ff ff15 	bl	8005f3a <SPI_EndRxTxTransaction>
 8006110:	2800      	cmp	r0, #0
 8006112:	d163      	bne.n	80061dc <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006114:	68a3      	ldr	r3, [r4, #8]
 8006116:	b933      	cbnz	r3, 8006126 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	9201      	str	r2, [sp, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006126:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006128:	b9db      	cbnz	r3, 8006162 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800612a:	2201      	movs	r2, #1
 800612c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006130:	4699      	mov	r9, r3
 8006132:	e016      	b.n	8006162 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	6893      	ldr	r3, [r2, #8]
 8006138:	079d      	lsls	r5, r3, #30
 800613a:	d505      	bpl.n	8006148 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800613c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800613e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006142:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006146:	e7d7      	b.n	80060f8 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006148:	f7fe f8aa 	bl	80042a0 <HAL_GetTick>
 800614c:	eba0 000a 	sub.w	r0, r0, sl
 8006150:	42b8      	cmp	r0, r7
 8006152:	d3d5      	bcc.n	8006100 <HAL_SPI_Transmit+0xa6>
 8006154:	1c78      	adds	r0, r7, #1
 8006156:	d0d3      	beq.n	8006100 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006158:	2301      	movs	r3, #1
 800615a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800615e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006162:	2300      	movs	r3, #0
 8006164:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006168:	4648      	mov	r0, r9
 800616a:	b002      	add	sp, #8
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006170:	b112      	cbz	r2, 8006178 <HAL_SPI_Transmit+0x11e>
 8006172:	f1b8 0f01 	cmp.w	r8, #1
 8006176:	d113      	bne.n	80061a0 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006178:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d906      	bls.n	800618e <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006184:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006186:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006188:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800618a:	3b02      	subs	r3, #2
 800618c:	e006      	b.n	800619c <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618e:	782b      	ldrb	r3, [r5, #0]
 8006190:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8006192:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006194:	3301      	adds	r3, #1
 8006196:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006198:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800619a:	3b01      	subs	r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80061a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ae      	beq.n	8006106 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	6893      	ldr	r3, [r2, #8]
 80061ac:	0799      	lsls	r1, r3, #30
 80061ae:	d50c      	bpl.n	80061ca <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80061b0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80061b4:	b289      	uxth	r1, r1
 80061b6:	2901      	cmp	r1, #1
 80061b8:	d904      	bls.n	80061c4 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ba:	f833 1b02 	ldrh.w	r1, [r3], #2
 80061be:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80061c2:	e7e1      	b.n	8006188 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80061c8:	e7e3      	b.n	8006192 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ca:	f7fe f869 	bl	80042a0 <HAL_GetTick>
 80061ce:	eba0 000a 	sub.w	r0, r0, sl
 80061d2:	42b8      	cmp	r0, r7
 80061d4:	d3e4      	bcc.n	80061a0 <HAL_SPI_Transmit+0x146>
 80061d6:	1c7b      	adds	r3, r7, #1
 80061d8:	d0e2      	beq.n	80061a0 <HAL_SPI_Transmit+0x146>
 80061da:	e7bd      	b.n	8006158 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061dc:	2320      	movs	r3, #32
 80061de:	6623      	str	r3, [r4, #96]	@ 0x60
 80061e0:	e798      	b.n	8006114 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80061e2:	f04f 0902 	mov.w	r9, #2
 80061e6:	e7bc      	b.n	8006162 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80061e8:	f04f 0902 	mov.w	r9, #2
 80061ec:	e7bc      	b.n	8006168 <HAL_SPI_Transmit+0x10e>

080061ee <HAL_SPI_TransmitReceive>:
{
 80061ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80061f4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 80061f8:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80061fa:	2b01      	cmp	r3, #1
{
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006202:	f000 8122 	beq.w	800644a <HAL_SPI_TransmitReceive+0x25c>
 8006206:	2301      	movs	r3, #1
 8006208:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800620c:	f7fe f848 	bl	80042a0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006210:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006214:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006216:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8006218:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800621a:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800621c:	d00a      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x46>
 800621e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006222:	f040 8110 	bne.w	8006446 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006226:	68a2      	ldr	r2, [r4, #8]
 8006228:	2a00      	cmp	r2, #0
 800622a:	f040 810c 	bne.w	8006446 <HAL_SPI_TransmitReceive+0x258>
 800622e:	2904      	cmp	r1, #4
 8006230:	f040 8109 	bne.w	8006446 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006234:	b92d      	cbnz	r5, 8006242 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8006236:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006238:	2300      	movs	r3, #0
 800623a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800623e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006242:	f1b9 0f00 	cmp.w	r9, #0
 8006246:	d0f6      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x48>
 8006248:	2e00      	cmp	r6, #0
 800624a:	d0f4      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800624c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006250:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006252:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006254:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006258:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800625a:	bf1c      	itt	ne
 800625c:	2205      	movne	r2, #5
 800625e:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006262:	2200      	movs	r2, #0
 8006264:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006266:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800626a:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800626e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006270:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8006274:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006278:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800627a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800627c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800627e:	d801      	bhi.n	8006284 <HAL_SPI_TransmitReceive+0x96>
 8006280:	2e01      	cmp	r6, #1
 8006282:	d02e      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006284:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006288:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800628a:	680a      	ldr	r2, [r1, #0]
 800628c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800628e:	bf5e      	ittt	pl
 8006290:	680a      	ldrpl	r2, [r1, #0]
 8006292:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006296:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006298:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 800629c:	d957      	bls.n	800634e <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629e:	b10b      	cbz	r3, 80062a4 <HAL_SPI_TransmitReceive+0xb6>
 80062a0:	2e01      	cmp	r6, #1
 80062a2:	d107      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80062a8:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80062aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ac:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80062b4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b9ab      	cbnz	r3, 80062e8 <HAL_SPI_TransmitReceive+0xfa>
 80062bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	b98b      	cbnz	r3, 80062e8 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c4:	4642      	mov	r2, r8
 80062c6:	4639      	mov	r1, r7
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fe36 	bl	8005f3a <SPI_EndRxTxTransaction>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f040 80b5 	bne.w	800643e <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1ad      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80062da:	2301      	movs	r3, #1
 80062dc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80062e0:	e7aa      	b.n	8006238 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062e6:	e7cf      	b.n	8006288 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062e8:	6821      	ldr	r1, [r4, #0]
 80062ea:	688b      	ldr	r3, [r1, #8]
 80062ec:	079e      	lsls	r6, r3, #30
 80062ee:	d50d      	bpl.n	800630c <HAL_SPI_TransmitReceive+0x11e>
 80062f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	b153      	cbz	r3, 800630c <HAL_SPI_TransmitReceive+0x11e>
 80062f6:	b145      	cbz	r5, 800630a <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80062fa:	f833 2b02 	ldrh.w	r2, [r3], #2
 80062fe:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006302:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006304:	3b01      	subs	r3, #1
 8006306:	b29b      	uxth	r3, r3
 8006308:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800630a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	f012 0201 	ands.w	r2, r2, #1
 8006312:	d00f      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x146>
 8006314:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006318:	b29b      	uxth	r3, r3
 800631a:	b15b      	cbz	r3, 8006334 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800631c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800631e:	68c9      	ldr	r1, [r1, #12]
 8006320:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006326:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800632a:	3b01      	subs	r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006332:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006334:	f7fd ffb4 	bl	80042a0 <HAL_GetTick>
 8006338:	eba0 0008 	sub.w	r0, r0, r8
 800633c:	42b8      	cmp	r0, r7
 800633e:	d3ba      	bcc.n	80062b6 <HAL_SPI_TransmitReceive+0xc8>
 8006340:	1c78      	adds	r0, r7, #1
 8006342:	d0b8      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8006344:	2301      	movs	r3, #1
 8006346:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800634a:	2003      	movs	r0, #3
 800634c:	e774      	b.n	8006238 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800634e:	b10b      	cbz	r3, 8006354 <HAL_SPI_TransmitReceive+0x166>
 8006350:	2e01      	cmp	r6, #1
 8006352:	d10b      	bne.n	800636c <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8006354:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	d909      	bls.n	8006370 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800635c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006360:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8006362:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006364:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006366:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006368:	b29b      	uxth	r3, r3
 800636a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800636c:	2501      	movs	r5, #1
 800636e:	e048      	b.n	8006402 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006370:	782b      	ldrb	r3, [r5, #0]
 8006372:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8006374:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006376:	3301      	adds	r3, #1
 8006378:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800637a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800637c:	3b01      	subs	r3, #1
 800637e:	e7f3      	b.n	8006368 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	6893      	ldr	r3, [r2, #8]
 8006384:	0799      	lsls	r1, r3, #30
 8006386:	d511      	bpl.n	80063ac <HAL_SPI_TransmitReceive+0x1be>
 8006388:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	b173      	cbz	r3, 80063ac <HAL_SPI_TransmitReceive+0x1be>
 800638e:	b165      	cbz	r5, 80063aa <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8006390:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006392:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006394:	b289      	uxth	r1, r1
 8006396:	2901      	cmp	r1, #1
 8006398:	d93d      	bls.n	8006416 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800639e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063a4:	3b02      	subs	r3, #2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80063aa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	6891      	ldr	r1, [r2, #8]
 80063b0:	f011 0101 	ands.w	r1, r1, #1
 80063b4:	d01d      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x204>
 80063b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	b1cb      	cbz	r3, 80063f2 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80063be:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80063c4:	b280      	uxth	r0, r0
 80063c6:	2801      	cmp	r0, #1
 80063c8:	d92d      	bls.n	8006426 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ca:	68d0      	ldr	r0, [r2, #12]
 80063cc:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d0:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80063d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80063d6:	3b02      	subs	r3, #2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80063de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e6:	bf9e      	ittt	ls
 80063e8:	6853      	ldrls	r3, [r2, #4]
 80063ea:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80063ee:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80063f0:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063f2:	f7fd ff55 	bl	80042a0 <HAL_GetTick>
 80063f6:	eba0 0008 	sub.w	r0, r0, r8
 80063fa:	42b8      	cmp	r0, r7
 80063fc:	d301      	bcc.n	8006402 <HAL_SPI_TransmitReceive+0x214>
 80063fe:	1c7b      	adds	r3, r7, #1
 8006400:	d1a0      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006402:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1ba      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x192>
 800640a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1b5      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x192>
 8006414:	e756      	b.n	80062c4 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800641a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800641c:	3301      	adds	r3, #1
 800641e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006420:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006422:	3b01      	subs	r3, #1
 8006424:	e7bf      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006426:	7b12      	ldrb	r2, [r2, #12]
 8006428:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800642a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800642c:	3301      	adds	r3, #1
 800642e:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006430:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006434:	3b01      	subs	r3, #1
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800643c:	e7d8      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800643e:	2320      	movs	r3, #32
 8006440:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006442:	2001      	movs	r0, #1
 8006444:	e746      	b.n	80062d4 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8006446:	2002      	movs	r0, #2
 8006448:	e6f6      	b.n	8006238 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 800644a:	2002      	movs	r0, #2
 800644c:	e6f7      	b.n	800623e <HAL_SPI_TransmitReceive+0x50>

0800644e <HAL_SPI_Receive>:
{
 800644e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006452:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8006454:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8006458:	2b01      	cmp	r3, #1
{
 800645a:	4604      	mov	r4, r0
 800645c:	468a      	mov	sl, r1
 800645e:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8006460:	b2de      	uxtb	r6, r3
 8006462:	f040 80a7 	bne.w	80065b4 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006466:	6843      	ldr	r3, [r0, #4]
 8006468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800646c:	d10e      	bne.n	800648c <HAL_SPI_Receive+0x3e>
 800646e:	6883      	ldr	r3, [r0, #8]
 8006470:	b963      	cbnz	r3, 800648c <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006472:	2304      	movs	r3, #4
 8006474:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006478:	4613      	mov	r3, r2
 800647a:	9700      	str	r7, [sp, #0]
 800647c:	460a      	mov	r2, r1
 800647e:	f7ff feb6 	bl	80061ee <HAL_SPI_TransmitReceive>
 8006482:	4606      	mov	r6, r0
}
 8006484:	4630      	mov	r0, r6
 8006486:	b002      	add	sp, #8
 8006488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 800648c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006490:	2b01      	cmp	r3, #1
 8006492:	f000 8091 	beq.w	80065b8 <HAL_SPI_Receive+0x16a>
 8006496:	2301      	movs	r3, #1
 8006498:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800649c:	f7fd ff00 	bl	80042a0 <HAL_GetTick>
 80064a0:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 80064a2:	f1ba 0f00 	cmp.w	sl, #0
 80064a6:	d075      	beq.n	8006594 <HAL_SPI_Receive+0x146>
 80064a8:	f1b8 0f00 	cmp.w	r8, #0
 80064ac:	d072      	beq.n	8006594 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ae:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064b0:	2304      	movs	r3, #4
 80064b2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 80064b6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064ba:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064bc:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80064be:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 80064c2:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80064c4:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064c6:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c8:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ca:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064cc:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d0:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d4:	bf8c      	ite	hi
 80064d6:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064da:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80064de:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064e2:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ea:	d107      	bne.n	80064fc <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064f2:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fa:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006500:	bf5e      	ittt	pl
 8006502:	682b      	ldrpl	r3, [r5, #0]
 8006504:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006508:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800650a:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800650e:	d923      	bls.n	8006558 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8006510:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006514:	b29b      	uxth	r3, r3
 8006516:	b323      	cbz	r3, 8006562 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	07d2      	lsls	r2, r2, #31
 800651e:	d53d      	bpl.n	800659c <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006524:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006528:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800652a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800652e:	3b01      	subs	r3, #1
 8006530:	b29b      	uxth	r3, r3
 8006532:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006536:	e7eb      	b.n	8006510 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	07d0      	lsls	r0, r2, #31
 800653e:	d51d      	bpl.n	800657c <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006540:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006546:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006548:	3301      	adds	r3, #1
 800654a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800654c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006550:	3b01      	subs	r3, #1
 8006552:	b29b      	uxth	r3, r3
 8006554:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8006558:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1ea      	bne.n	8006538 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006562:	464a      	mov	r2, r9
 8006564:	4639      	mov	r1, r7
 8006566:	4620      	mov	r0, r4
 8006568:	f7ff fcb0 	bl	8005ecc <SPI_EndRxTransaction>
 800656c:	b9f8      	cbnz	r0, 80065ae <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800656e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006570:	b983      	cbnz	r3, 8006594 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8006572:	2201      	movs	r2, #1
 8006574:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006578:	461e      	mov	r6, r3
 800657a:	e00b      	b.n	8006594 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657c:	f7fd fe90 	bl	80042a0 <HAL_GetTick>
 8006580:	eba0 0009 	sub.w	r0, r0, r9
 8006584:	42b8      	cmp	r0, r7
 8006586:	d3e7      	bcc.n	8006558 <HAL_SPI_Receive+0x10a>
 8006588:	1c79      	adds	r1, r7, #1
 800658a:	d0e5      	beq.n	8006558 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 800658c:	2301      	movs	r3, #1
 800658e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006592:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8006594:	2300      	movs	r3, #0
 8006596:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 800659a:	e773      	b.n	8006484 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659c:	f7fd fe80 	bl	80042a0 <HAL_GetTick>
 80065a0:	eba0 0009 	sub.w	r0, r0, r9
 80065a4:	42b8      	cmp	r0, r7
 80065a6:	d3b3      	bcc.n	8006510 <HAL_SPI_Receive+0xc2>
 80065a8:	1c7b      	adds	r3, r7, #1
 80065aa:	d0b1      	beq.n	8006510 <HAL_SPI_Receive+0xc2>
 80065ac:	e7ee      	b.n	800658c <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065ae:	2320      	movs	r3, #32
 80065b0:	6623      	str	r3, [r4, #96]	@ 0x60
 80065b2:	e7dc      	b.n	800656e <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80065b4:	2602      	movs	r6, #2
 80065b6:	e7ed      	b.n	8006594 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 80065b8:	2602      	movs	r6, #2
 80065ba:	e763      	b.n	8006484 <HAL_SPI_Receive+0x36>

080065bc <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d127      	bne.n	8006614 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c6:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065cc:	6803      	ldr	r3, [r0, #0]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d012      	beq.n	80065f8 <HAL_TIM_Base_Start+0x3c>
 80065d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d6:	d00f      	beq.n	80065f8 <HAL_TIM_Base_Start+0x3c>
 80065d8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00b      	beq.n	80065f8 <HAL_TIM_Base_Start+0x3c>
 80065e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <HAL_TIM_Base_Start+0x3c>
 80065e8:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <HAL_TIM_Base_Start+0x3c>
 80065f0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f8:	6899      	ldr	r1, [r3, #8]
 80065fa:	4a08      	ldr	r2, [pc, #32]	@ (800661c <HAL_TIM_Base_Start+0x60>)
 80065fc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	2a06      	cmp	r2, #6
 8006600:	d006      	beq.n	8006610 <HAL_TIM_Base_Start+0x54>
 8006602:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006606:	d003      	beq.n	8006610 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2000      	movs	r0, #0
 8006612:	4770      	bx	lr
    return HAL_ERROR;
 8006614:	2001      	movs	r0, #1
}
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	00010007 	.word	0x00010007

08006620 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006620:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006624:	2b01      	cmp	r3, #1
 8006626:	d12b      	bne.n	8006680 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	2302      	movs	r3, #2
 800662a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800662e:	6803      	ldr	r3, [r0, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	4a12      	ldr	r2, [pc, #72]	@ (8006684 <HAL_TIM_Base_Start_IT+0x64>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d012      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x44>
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006642:	d00f      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x44>
 8006644:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x44>
 800664c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x44>
 8006654:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x44>
 800665c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006660:	4293      	cmp	r3, r2
 8006662:	d107      	bne.n	8006674 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006664:	6899      	ldr	r1, [r3, #8]
 8006666:	4a08      	ldr	r2, [pc, #32]	@ (8006688 <HAL_TIM_Base_Start_IT+0x68>)
 8006668:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666a:	2a06      	cmp	r2, #6
 800666c:	d006      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x5c>
 800666e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006672:	d003      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800667c:	2000      	movs	r0, #0
 800667e:	4770      	bx	lr
    return HAL_ERROR;
 8006680:	2001      	movs	r0, #1
}
 8006682:	4770      	bx	lr
 8006684:	40012c00 	.word	0x40012c00
 8006688:	00010007 	.word	0x00010007

0800668c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800668c:	4770      	bx	lr

0800668e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800668e:	4770      	bx	lr

08006690 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006690:	4770      	bx	lr

08006692 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006694:	6803      	ldr	r3, [r0, #0]
{
 8006696:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006698:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800669a:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800669c:	07b2      	lsls	r2, r6, #30
{
 800669e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066a0:	d50d      	bpl.n	80066be <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066a2:	07a9      	lsls	r1, r5, #30
 80066a4:	d50b      	bpl.n	80066be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a6:	f06f 0202 	mvn.w	r2, #2
 80066aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ac:	2201      	movs	r2, #1
 80066ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	079a      	lsls	r2, r3, #30
 80066b4:	d074      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	f7ff ffea 	bl	800668e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	2300      	movs	r3, #0
 80066bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066be:	0773      	lsls	r3, r6, #29
 80066c0:	d510      	bpl.n	80066e4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066c2:	0768      	lsls	r0, r5, #29
 80066c4:	d50e      	bpl.n	80066e4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f06f 0204 	mvn.w	r2, #4
 80066cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ce:	2202      	movs	r2, #2
 80066d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80066d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066da:	d067      	beq.n	80067ac <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80066dc:	f7ff ffd7 	bl	800668e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e0:	2300      	movs	r3, #0
 80066e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066e4:	0731      	lsls	r1, r6, #28
 80066e6:	d50f      	bpl.n	8006708 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066e8:	072a      	lsls	r2, r5, #28
 80066ea:	d50d      	bpl.n	8006708 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	f06f 0208 	mvn.w	r2, #8
 80066f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f4:	2204      	movs	r2, #4
 80066f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80066fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fe:	d05b      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8006700:	f7ff ffc5 	bl	800668e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006704:	2300      	movs	r3, #0
 8006706:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006708:	06f0      	lsls	r0, r6, #27
 800670a:	d510      	bpl.n	800672e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800670c:	06e9      	lsls	r1, r5, #27
 800670e:	d50e      	bpl.n	800672e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f06f 0210 	mvn.w	r2, #16
 8006716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006718:	2208      	movs	r2, #8
 800671a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006724:	d04e      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	f7ff ffb2 	bl	800668e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672a:	2300      	movs	r3, #0
 800672c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800672e:	07f2      	lsls	r2, r6, #31
 8006730:	d508      	bpl.n	8006744 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006732:	07eb      	lsls	r3, r5, #31
 8006734:	d506      	bpl.n	8006744 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	f06f 0201 	mvn.w	r2, #1
 800673c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800673e:	4620      	mov	r0, r4
 8006740:	f7fc fe58 	bl	80033f4 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006744:	0630      	lsls	r0, r6, #24
 8006746:	d508      	bpl.n	800675a <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006748:	0629      	lsls	r1, r5, #24
 800674a:	d506      	bpl.n	800675a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006752:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006754:	4620      	mov	r0, r4
 8006756:	f000 f9b8 	bl	8006aca <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800675a:	05f2      	lsls	r2, r6, #23
 800675c:	d508      	bpl.n	8006770 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800675e:	062b      	lsls	r3, r5, #24
 8006760:	d506      	bpl.n	8006770 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006768:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800676a:	4620      	mov	r0, r4
 800676c:	f000 f9ae 	bl	8006acc <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006770:	0670      	lsls	r0, r6, #25
 8006772:	d508      	bpl.n	8006786 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006774:	0669      	lsls	r1, r5, #25
 8006776:	d506      	bpl.n	8006786 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800677e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006780:	4620      	mov	r0, r4
 8006782:	f7ff ff86 	bl	8006692 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006786:	06b2      	lsls	r2, r6, #26
 8006788:	d522      	bpl.n	80067d0 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800678a:	06ab      	lsls	r3, r5, #26
 800678c:	d520      	bpl.n	80067d0 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006794:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006796:	611a      	str	r2, [r3, #16]
}
 8006798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800679c:	f000 b994 	b.w	8006ac8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a0:	f7ff ff74 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7ff ff73 	bl	8006690 <HAL_TIM_PWM_PulseFinishedCallback>
 80067aa:	e786      	b.n	80066ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ac:	f7ff ff6e 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7ff ff6d 	bl	8006690 <HAL_TIM_PWM_PulseFinishedCallback>
 80067b6:	e793      	b.n	80066e0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	f7ff ff68 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff ff67 	bl	8006690 <HAL_TIM_PWM_PulseFinishedCallback>
 80067c2:	e79f      	b.n	8006704 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c4:	f7ff ff62 	bl	800668c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff ff61 	bl	8006690 <HAL_TIM_PWM_PulseFinishedCallback>
 80067ce:	e7ac      	b.n	800672a <HAL_TIM_IRQHandler+0x96>
}
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080067d4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006894 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80067d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	4290      	cmp	r0, r2
 80067da:	d00e      	beq.n	80067fa <TIM_Base_SetConfig+0x26>
 80067dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80067e0:	d00b      	beq.n	80067fa <TIM_Base_SetConfig+0x26>
 80067e2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80067e6:	4290      	cmp	r0, r2
 80067e8:	d007      	beq.n	80067fa <TIM_Base_SetConfig+0x26>
 80067ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067ee:	4290      	cmp	r0, r2
 80067f0:	d003      	beq.n	80067fa <TIM_Base_SetConfig+0x26>
 80067f2:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80067f6:	4290      	cmp	r0, r2
 80067f8:	d115      	bne.n	8006826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80067fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006800:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <TIM_Base_SetConfig+0xc0>)
 8006804:	4290      	cmp	r0, r2
 8006806:	d019      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 8006808:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800680c:	d016      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 800680e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006812:	4290      	cmp	r0, r2
 8006814:	d012      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 8006816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800681a:	4290      	cmp	r0, r2
 800681c:	d00e      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 800681e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006822:	4290      	cmp	r0, r2
 8006824:	d00a      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 8006826:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <TIM_Base_SetConfig+0xc4>)
 8006828:	4290      	cmp	r0, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 800682c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006830:	4290      	cmp	r0, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x68>
 8006834:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006838:	4290      	cmp	r0, r2
 800683a:	d103      	bne.n	8006844 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006842:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	694a      	ldr	r2, [r1, #20]
 8006846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800684c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684e:	688b      	ldr	r3, [r1, #8]
 8006850:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006856:	4b0f      	ldr	r3, [pc, #60]	@ (8006894 <TIM_Base_SetConfig+0xc0>)
 8006858:	4298      	cmp	r0, r3
 800685a:	d00f      	beq.n	800687c <TIM_Base_SetConfig+0xa8>
 800685c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006860:	4298      	cmp	r0, r3
 8006862:	d00b      	beq.n	800687c <TIM_Base_SetConfig+0xa8>
 8006864:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006868:	4298      	cmp	r0, r3
 800686a:	d007      	beq.n	800687c <TIM_Base_SetConfig+0xa8>
 800686c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006870:	4298      	cmp	r0, r3
 8006872:	d003      	beq.n	800687c <TIM_Base_SetConfig+0xa8>
 8006874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006878:	4298      	cmp	r0, r3
 800687a:	d101      	bne.n	8006880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800687c:	690b      	ldr	r3, [r1, #16]
 800687e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006880:	2301      	movs	r3, #1
 8006882:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006884:	6903      	ldr	r3, [r0, #16]
 8006886:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006888:	bf42      	ittt	mi
 800688a:	6903      	ldrmi	r3, [r0, #16]
 800688c:	f023 0301 	bicmi.w	r3, r3, #1
 8006890:	6103      	strmi	r3, [r0, #16]
  }
}
 8006892:	4770      	bx	lr
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40014000 	.word	0x40014000

0800689c <HAL_TIM_Base_Init>:
{
 800689c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800689e:	4604      	mov	r4, r0
 80068a0:	b350      	cbz	r0, 80068f8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80068a2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80068a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068aa:	b91b      	cbnz	r3, 80068b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80068ac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80068b0:	f7fd face 	bl	8003e50 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068bc:	1d21      	adds	r1, r4, #4
 80068be:	f7ff ff89 	bl	80067d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80068c8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80068ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80068d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80068d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80068da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80068e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80068ea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80068ee:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80068f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
 80068fa:	e7fc      	b.n	80068f6 <HAL_TIM_Base_Init+0x5a>

080068fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068fc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068fe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006900:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006902:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006906:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800690a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690c:	6082      	str	r2, [r0, #8]
}
 800690e:	bd10      	pop	{r4, pc}

08006910 <HAL_TIM_ConfigClockSource>:
{
 8006910:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006912:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006916:	2b01      	cmp	r3, #1
{
 8006918:	4604      	mov	r4, r0
 800691a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800691e:	f000 808c 	beq.w	8006a3a <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006926:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006928:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800692a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800692e:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	4b43      	ldr	r3, [pc, #268]	@ (8006a40 <HAL_TIM_ConfigClockSource+0x130>)
 8006932:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006934:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006936:	680b      	ldr	r3, [r1, #0]
 8006938:	2b60      	cmp	r3, #96	@ 0x60
 800693a:	d04f      	beq.n	80069dc <HAL_TIM_ConfigClockSource+0xcc>
 800693c:	d832      	bhi.n	80069a4 <HAL_TIM_ConfigClockSource+0x94>
 800693e:	2b40      	cmp	r3, #64	@ 0x40
 8006940:	d064      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0xfc>
 8006942:	d816      	bhi.n	8006972 <HAL_TIM_ConfigClockSource+0x62>
 8006944:	2b20      	cmp	r3, #32
 8006946:	d00d      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0x54>
 8006948:	d80a      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x50>
 800694a:	f033 0110 	bics.w	r1, r3, #16
 800694e:	d009      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8006950:	2301      	movs	r3, #1
 8006952:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006956:	2300      	movs	r3, #0
 8006958:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800695c:	4610      	mov	r0, r2
 800695e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006960:	2b30      	cmp	r3, #48	@ 0x30
 8006962:	d1f5      	bne.n	8006950 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006964:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006966:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800696a:	4313      	orrs	r3, r2
 800696c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006970:	e028      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006972:	2b50      	cmp	r3, #80	@ 0x50
 8006974:	d1ec      	bne.n	8006950 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8006976:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006978:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800697a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697c:	6a03      	ldr	r3, [r0, #32]
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006986:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800698e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006992:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006994:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006996:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006998:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699e:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80069a2:	e00f      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a8:	d00d      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xb6>
 80069aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0xba>
 80069b0:	2b70      	cmp	r3, #112	@ 0x70
 80069b2:	d1cd      	bne.n	8006950 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80069b4:	68cb      	ldr	r3, [r1, #12]
 80069b6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80069ba:	f7ff ff9f 	bl	80068fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069be:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80069c4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2200      	movs	r2, #0
 80069c8:	e7c2      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80069ca:	68cb      	ldr	r3, [r1, #12]
 80069cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80069d0:	f7ff ff94 	bl	80068fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d4:	6883      	ldr	r3, [r0, #8]
 80069d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069da:	e7f3      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80069dc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069de:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80069e0:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80069e2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e4:	f022 0210 	bic.w	r2, r2, #16
 80069e8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80069fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80069fe:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006a00:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006a0a:	e7db      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8006a0c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006a10:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	6a03      	ldr	r3, [r0, #32]
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006a28:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006a2a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006a2c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006a2e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a34:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006a38:	e7c4      	b.n	80069c4 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	e78e      	b.n	800695c <HAL_TIM_ConfigClockSource+0x4c>
 8006a3e:	bf00      	nop
 8006a40:	fffe0088 	.word	0xfffe0088

08006a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a44:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a46:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006a4a:	2b01      	cmp	r3, #1
{
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006a52:	d032      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a54:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a56:	4d19      	ldr	r5, [pc, #100]	@ (8006abc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a5c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006a5e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a62:	d002      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006a64:	4e16      	ldr	r6, [pc, #88]	@ (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8006a66:	42b3      	cmp	r3, r6
 8006a68:	d103      	bne.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a6a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a6c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a70:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a72:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a78:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006a7c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	d011      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006a86:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006a8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006a94:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006a9c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d104      	bne.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aaa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006ab0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006ab6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	40012c00 	.word	0x40012c00
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40000400 	.word	0x40000400

08006ac8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006ac8:	4770      	bx	lr

08006aca <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006acc:	4770      	bx	lr

08006ace <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ace:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	e852 3f00 	ldrex	r3, [r2]
 8006ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006adc:	6802      	ldr	r2, [r0, #0]
 8006ade:	2900      	cmp	r1, #0
 8006ae0:	d1f5      	bne.n	8006ace <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	f102 0308 	add.w	r3, r2, #8
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f102 0c08 	add.w	ip, r2, #8
 8006af2:	e84c 3100 	strex	r1, r3, [ip]
 8006af6:	2900      	cmp	r1, #0
 8006af8:	d1f3      	bne.n	8006ae2 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afa:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	e842 3100 	strex	r1, r3, [r2]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d1f7      	bne.n	8006b00 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	2320      	movs	r3, #32
 8006b12:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	2300      	movs	r3, #0
 8006b18:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b1a:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006b1c:	4770      	bx	lr

08006b1e <HAL_UART_Abort>:
{
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	e852 3f00 	ldrex	r3, [r2]
 8006b28:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	2900      	cmp	r1, #0
 8006b34:	d1f5      	bne.n	8006b22 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	f103 0208 	add.w	r2, r3, #8
 8006b3a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f103 0008 	add.w	r0, r3, #8
 8006b46:	e840 2100 	strex	r1, r2, [r0]
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d1f3      	bne.n	8006b36 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006b50:	2a01      	cmp	r2, #1
 8006b52:	d107      	bne.n	8006b64 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006b58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	e843 2100 	strex	r1, r2, [r3]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	d1f7      	bne.n	8006b54 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	0612      	lsls	r2, r2, #24
 8006b68:	d51b      	bpl.n	8006ba2 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	f103 0208 	add.w	r2, r3, #8
 8006b6e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	f103 0008 	add.w	r0, r3, #8
 8006b7a:	e840 2100 	strex	r1, r2, [r0]
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	d1f3      	bne.n	8006b6a <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8006b82:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006b84:	b168      	cbz	r0, 8006ba2 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8006b86:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006b88:	f7fe f9b3 	bl	8004ef2 <HAL_DMA_Abort>
 8006b8c:	b148      	cbz	r0, 8006ba2 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006b8e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006b90:	f7fe fa14 	bl	8004fbc <HAL_DMA_GetError>
 8006b94:	2820      	cmp	r0, #32
 8006b96:	d104      	bne.n	8006ba2 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006b9e:	2003      	movs	r0, #3
}
 8006ba0:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	6893      	ldr	r3, [r2, #8]
 8006ba6:	065b      	lsls	r3, r3, #25
 8006ba8:	d516      	bpl.n	8006bd8 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	f102 0308 	add.w	r3, r2, #8
 8006bae:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	f102 0008 	add.w	r0, r2, #8
 8006bba:	e840 3100 	strex	r1, r3, [r0]
 8006bbe:	2900      	cmp	r1, #0
 8006bc0:	d1f3      	bne.n	8006baa <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8006bc2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006bc4:	b140      	cbz	r0, 8006bd8 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8006bc6:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006bc8:	f7fe f993 	bl	8004ef2 <HAL_DMA_Abort>
 8006bcc:	b120      	cbz	r0, 8006bd8 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006bce:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006bd0:	f7fe f9f4 	bl	8004fbc <HAL_DMA_GetError>
 8006bd4:	2820      	cmp	r0, #32
 8006bd6:	d0df      	beq.n	8006b98 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bd8:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8006bda:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bdc:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8006bde:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8006be2:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006be6:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bf4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf8:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8006bfe:	e7cf      	b.n	8006ba0 <HAL_UART_Abort+0x82>

08006c00 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8006c00:	4770      	bx	lr

08006c02 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006c04:	4770      	bx	lr

08006c06 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c06:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c08:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c0a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c0c:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8006c10:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c12:	689c      	ldr	r4, [r3, #8]
 8006c14:	0624      	lsls	r4, r4, #24
 8006c16:	d50e      	bpl.n	8006c36 <UART_DMAError+0x30>
 8006c18:	2a21      	cmp	r2, #33	@ 0x21
 8006c1a:	d10c      	bne.n	8006c36 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c26:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	e843 2400 	strex	r4, r2, [r3]
 8006c2e:	2c00      	cmp	r4, #0
 8006c30:	d1f7      	bne.n	8006c22 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8006c32:	2220      	movs	r2, #32
 8006c34:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	065b      	lsls	r3, r3, #25
 8006c3a:	d506      	bpl.n	8006c4a <UART_DMAError+0x44>
 8006c3c:	2922      	cmp	r1, #34	@ 0x22
 8006c3e:	d104      	bne.n	8006c4a <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8006c46:	f7ff ff42 	bl	8006ace <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c4a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8006c4e:	f043 0310 	orr.w	r3, r3, #16
 8006c52:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c56:	f7ff ffd5 	bl	8006c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <HAL_UARTEx_RxEventCallback>:
}
 8006c5c:	4770      	bx	lr

08006c5e <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c5e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8006c60:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c62:	2301      	movs	r3, #1
 8006c64:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c66:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d105      	bne.n	8006c78 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c6c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8006c70:	0849      	lsrs	r1, r1, #1
 8006c72:	f7ff fff3 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
}
 8006c76:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8006c78:	f7ff ffc3 	bl	8006c02 <HAL_UART_RxHalfCpltCallback>
}
 8006c7c:	e7fb      	b.n	8006c76 <UART_DMARxHalfCplt+0x18>

08006c7e <UART_DMAReceiveCplt>:
{
 8006c7e:	b508      	push	{r3, lr}
 8006c80:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c82:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d032      	beq.n	8006cf0 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	e852 3f00 	ldrex	r3, [r2]
 8006c96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006c9e:	6803      	ldr	r3, [r0, #0]
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d1f5      	bne.n	8006c90 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	f103 0208 	add.w	r2, r3, #8
 8006ca8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	f103 0c08 	add.w	ip, r3, #8
 8006cb4:	e84c 2100 	strex	r1, r2, [ip]
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d1f3      	bne.n	8006ca4 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	f103 0208 	add.w	r2, r3, #8
 8006cc0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	f103 0c08 	add.w	ip, r3, #8
 8006ccc:	e84c 2100 	strex	r1, r2, [ip]
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	d1f3      	bne.n	8006cbc <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cda:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d107      	bne.n	8006cf0 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	e843 2100 	strex	r1, r2, [r3]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d1f7      	bne.n	8006ce0 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf4:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d104      	bne.n	8006d04 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfa:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8006cfe:	f7ff ffad 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
}
 8006d02:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8006d04:	f7ff ff7c 	bl	8006c00 <HAL_UART_RxCpltCallback>
}
 8006d08:	e7fb      	b.n	8006d02 <UART_DMAReceiveCplt+0x84>
	...

08006d0c <UART_SetConfig>:
{
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d10:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d12:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d14:	6925      	ldr	r5, [r4, #16]
 8006d16:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d18:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d1a:	432a      	orrs	r2, r5
 8006d1c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d1e:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d22:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d24:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d28:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8006d32:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d34:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d3e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d40:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8006d44:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d46:	430a      	orrs	r2, r1
 8006d48:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d4a:	4a56      	ldr	r2, [pc, #344]	@ (8006ea4 <UART_SetConfig+0x198>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d112      	bne.n	8006d76 <UART_SetConfig+0x6a>
 8006d50:	4b55      	ldr	r3, [pc, #340]	@ (8006ea8 <UART_SetConfig+0x19c>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	f000 8091 	beq.w	8006e80 <UART_SetConfig+0x174>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d022      	beq.n	8006da8 <UART_SetConfig+0x9c>
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	f040 8092 	bne.w	8006e8c <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d68:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006d6c:	f040 8085 	bne.w	8006e7a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d70:	f7fe fc54 	bl	800561c <HAL_RCC_GetSysClockFreq>
        break;
 8006d74:	e06b      	b.n	8006e4e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d76:	4a4d      	ldr	r2, [pc, #308]	@ (8006eac <UART_SetConfig+0x1a0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d12e      	bne.n	8006dda <UART_SetConfig+0xce>
 8006d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea8 <UART_SetConfig+0x19c>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d88:	d07a      	beq.n	8006e80 <UART_SetConfig+0x174>
 8006d8a:	d80a      	bhi.n	8006da2 <UART_SetConfig+0x96>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8083 	beq.w	8006e98 <UART_SetConfig+0x18c>
 8006d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d96:	d0e7      	beq.n	8006d68 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8006d98:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006d9a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006d9c:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8006da0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006da6:	d1f7      	bne.n	8006d98 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006dac:	4840      	ldr	r0, [pc, #256]	@ (8006eb0 <UART_SetConfig+0x1a4>)
 8006dae:	d156      	bne.n	8006e5e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006db0:	6862      	ldr	r2, [r4, #4]
 8006db2:	0853      	lsrs	r3, r2, #1
 8006db4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006db8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dbc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006dc0:	f1a3 0110 	sub.w	r1, r3, #16
 8006dc4:	4291      	cmp	r1, r2
 8006dc6:	d8e7      	bhi.n	8006d98 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dc8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006dcc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dce:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dd0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60cb      	str	r3, [r1, #12]
 8006dd8:	e03b      	b.n	8006e52 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dda:	4a36      	ldr	r2, [pc, #216]	@ (8006eb4 <UART_SetConfig+0x1a8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10f      	bne.n	8006e00 <UART_SetConfig+0xf4>
 8006de0:	4b31      	ldr	r3, [pc, #196]	@ (8006ea8 <UART_SetConfig+0x19c>)
 8006de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006de8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006dec:	d048      	beq.n	8006e80 <UART_SetConfig+0x174>
 8006dee:	d804      	bhi.n	8006dfa <UART_SetConfig+0xee>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d051      	beq.n	8006e98 <UART_SetConfig+0x18c>
 8006df4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006df8:	e7cd      	b.n	8006d96 <UART_SetConfig+0x8a>
 8006dfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dfe:	e7d2      	b.n	8006da6 <UART_SetConfig+0x9a>
 8006e00:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb8 <UART_SetConfig+0x1ac>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d10f      	bne.n	8006e26 <UART_SetConfig+0x11a>
 8006e06:	4b28      	ldr	r3, [pc, #160]	@ (8006ea8 <UART_SetConfig+0x19c>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e12:	d035      	beq.n	8006e80 <UART_SetConfig+0x174>
 8006e14:	d804      	bhi.n	8006e20 <UART_SetConfig+0x114>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03e      	beq.n	8006e98 <UART_SetConfig+0x18c>
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e1e:	e7ba      	b.n	8006d96 <UART_SetConfig+0x8a>
 8006e20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e24:	e7bf      	b.n	8006da6 <UART_SetConfig+0x9a>
 8006e26:	4a25      	ldr	r2, [pc, #148]	@ (8006ebc <UART_SetConfig+0x1b0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d1b5      	bne.n	8006d98 <UART_SetConfig+0x8c>
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea8 <UART_SetConfig+0x19c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e38:	d022      	beq.n	8006e80 <UART_SetConfig+0x174>
 8006e3a:	d803      	bhi.n	8006e44 <UART_SetConfig+0x138>
 8006e3c:	b363      	cbz	r3, 8006e98 <UART_SetConfig+0x18c>
 8006e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e42:	e7a8      	b.n	8006d96 <UART_SetConfig+0x8a>
 8006e44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e48:	e7ad      	b.n	8006da6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4a:	f7fe fccb 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d1ae      	bne.n	8006db0 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8006e52:	2000      	movs	r0, #0
 8006e54:	e7a1      	b.n	8006d9a <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e56:	f7fe fcad 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d0f9      	beq.n	8006e52 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8006e64:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e68:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8006e6c:	f1a3 0110 	sub.w	r1, r3, #16
 8006e70:	4291      	cmp	r1, r2
 8006e72:	d891      	bhi.n	8006d98 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	60d3      	str	r3, [r2, #12]
 8006e78:	e7eb      	b.n	8006e52 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe fbcf 	bl	800561c <HAL_RCC_GetSysClockFreq>
        break;
 8006e7e:	e7ec      	b.n	8006e5a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006e84:	d094      	beq.n	8006db0 <UART_SetConfig+0xa4>
 8006e86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006e8a:	e7e8      	b.n	8006e5e <UART_SetConfig+0x152>
 8006e8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006e90:	d0db      	beq.n	8006e4a <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e92:	f7fe fca7 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e96:	e7e0      	b.n	8006e5a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e98:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006e9c:	d1db      	bne.n	8006e56 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e9e:	f7fe fc89 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
        break;
 8006ea2:	e7d4      	b.n	8006e4e <UART_SetConfig+0x142>
 8006ea4:	40013800 	.word	0x40013800
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	007a1200 	.word	0x007a1200
 8006eb4:	40004800 	.word	0x40004800
 8006eb8:	40004c00 	.word	0x40004c00
 8006ebc:	40005000 	.word	0x40005000

08006ec0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006ec2:	071a      	lsls	r2, r3, #28
{
 8006ec4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec6:	d506      	bpl.n	8006ed6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec8:	6801      	ldr	r1, [r0, #0]
 8006eca:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006ecc:	684a      	ldr	r2, [r1, #4]
 8006ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ed2:	4322      	orrs	r2, r4
 8006ed4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed6:	07dc      	lsls	r4, r3, #31
 8006ed8:	d506      	bpl.n	8006ee8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eda:	6801      	ldr	r1, [r0, #0]
 8006edc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006ede:	684a      	ldr	r2, [r1, #4]
 8006ee0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006ee4:	4322      	orrs	r2, r4
 8006ee6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ee8:	0799      	lsls	r1, r3, #30
 8006eea:	d506      	bpl.n	8006efa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eec:	6801      	ldr	r1, [r0, #0]
 8006eee:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006ef0:	684a      	ldr	r2, [r1, #4]
 8006ef2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006ef6:	4322      	orrs	r2, r4
 8006ef8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006efa:	075a      	lsls	r2, r3, #29
 8006efc:	d506      	bpl.n	8006f0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006efe:	6801      	ldr	r1, [r0, #0]
 8006f00:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006f02:	684a      	ldr	r2, [r1, #4]
 8006f04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006f08:	4322      	orrs	r2, r4
 8006f0a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f0c:	06dc      	lsls	r4, r3, #27
 8006f0e:	d506      	bpl.n	8006f1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f10:	6801      	ldr	r1, [r0, #0]
 8006f12:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006f14:	688a      	ldr	r2, [r1, #8]
 8006f16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f1a:	4322      	orrs	r2, r4
 8006f1c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1e:	0699      	lsls	r1, r3, #26
 8006f20:	d506      	bpl.n	8006f30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f22:	6801      	ldr	r1, [r0, #0]
 8006f24:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006f26:	688a      	ldr	r2, [r1, #8]
 8006f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f2c:	4322      	orrs	r2, r4
 8006f2e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f30:	065a      	lsls	r2, r3, #25
 8006f32:	d50f      	bpl.n	8006f54 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f34:	6801      	ldr	r1, [r0, #0]
 8006f36:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006f38:	684a      	ldr	r2, [r1, #4]
 8006f3a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006f3e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f40:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f44:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f46:	d105      	bne.n	8006f54 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f48:	684a      	ldr	r2, [r1, #4]
 8006f4a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006f4c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006f50:	4322      	orrs	r2, r4
 8006f52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f54:	061b      	lsls	r3, r3, #24
 8006f56:	d506      	bpl.n	8006f66 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f58:	6802      	ldr	r2, [r0, #0]
 8006f5a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006f5c:	6853      	ldr	r3, [r2, #4]
 8006f5e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]
}
 8006f66:	bd10      	pop	{r4, pc}

08006f68 <UART_WaitOnFlagUntilTimeout>:
{
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	4617      	mov	r7, r2
 8006f76:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	69d3      	ldr	r3, [r2, #28]
 8006f7c:	ea35 0303 	bics.w	r3, r5, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	d001      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e022      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006f92:	d0f2      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f94:	f7fd f984 	bl	80042a0 <HAL_GetTick>
 8006f98:	eba0 0008 	sub.w	r0, r0, r8
 8006f9c:	4548      	cmp	r0, r9
 8006f9e:	d829      	bhi.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	d026      	beq.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fa6:	6821      	ldr	r1, [r4, #0]
 8006fa8:	680b      	ldr	r3, [r1, #0]
 8006faa:	075a      	lsls	r2, r3, #29
 8006fac:	d5e4      	bpl.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x10>
 8006fae:	2d80      	cmp	r5, #128	@ 0x80
 8006fb0:	d0e2      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x10>
 8006fb2:	2d40      	cmp	r5, #64	@ 0x40
 8006fb4:	d0e0      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fb6:	69ce      	ldr	r6, [r1, #28]
 8006fb8:	f016 0608 	ands.w	r6, r6, #8
 8006fbc:	d00c      	beq.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fbe:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8006fc0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8006fc4:	f7ff fd83 	bl	8006ace <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8006fc8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fca:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006fce:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8006fd2:	2001      	movs	r0, #1
}
 8006fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd8:	69cb      	ldr	r3, [r1, #28]
 8006fda:	051b      	lsls	r3, r3, #20
 8006fdc:	d5cc      	bpl.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fe2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7ff fd72 	bl	8006ace <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fea:	2320      	movs	r3, #32
 8006fec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006ff0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	e7ed      	b.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x6c>

08006ff8 <HAL_UART_Transmit>:
{
 8006ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ffc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006ffe:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007000:	2b20      	cmp	r3, #32
{
 8007002:	4604      	mov	r4, r0
 8007004:	460e      	mov	r6, r1
 8007006:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007008:	d143      	bne.n	8007092 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800700a:	2900      	cmp	r1, #0
 800700c:	d043      	beq.n	8007096 <HAL_UART_Transmit+0x9e>
 800700e:	2a00      	cmp	r2, #0
 8007010:	d041      	beq.n	8007096 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007012:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	2500      	movs	r5, #0
 8007016:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800701a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800701c:	f7fd f940 	bl	80042a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007020:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8007022:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800702a:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800702c:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007030:	d103      	bne.n	800703a <HAL_UART_Transmit+0x42>
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	b90b      	cbnz	r3, 800703a <HAL_UART_Transmit+0x42>
 8007036:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007038:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800703a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800703e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007042:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007044:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8007046:	b93a      	cbnz	r2, 8007058 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007048:	2140      	movs	r1, #64	@ 0x40
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff ff8c 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 8007050:	2320      	movs	r3, #32
 8007052:	b940      	cbnz	r0, 8007066 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8007054:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8007056:	e008      	b.n	800706a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007058:	2200      	movs	r2, #0
 800705a:	2180      	movs	r1, #128	@ 0x80
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff ff83 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 8007062:	b128      	cbz	r0, 8007070 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8007064:	2320      	movs	r3, #32
 8007066:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007068:	2003      	movs	r0, #3
}
 800706a:	b003      	add	sp, #12
 800706c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007070:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007072:	b95e      	cbnz	r6, 800708c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007074:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007078:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800707c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800707e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8007082:	3a01      	subs	r2, #1
 8007084:	b292      	uxth	r2, r2
 8007086:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800708a:	e7d6      	b.n	800703a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800708c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007090:	e7f4      	b.n	800707c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8007092:	2002      	movs	r0, #2
 8007094:	e7e9      	b.n	800706a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8007096:	2001      	movs	r0, #1
 8007098:	e7e7      	b.n	800706a <HAL_UART_Transmit+0x72>

0800709a <UART_CheckIdleState>:
{
 800709a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800709c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709e:	2600      	movs	r6, #0
 80070a0:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80070a4:	f7fd f8fc 	bl	80042a0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80070ae:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070b0:	d51b      	bpl.n	80070ea <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4632      	mov	r2, r6
 80070ba:	4603      	mov	r3, r0
 80070bc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7ff ff51 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 80070c6:	b180      	cbz	r0, 80070ea <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	e852 3f00 	ldrex	r3, [r2]
 80070ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	e842 3100 	strex	r1, r3, [r2]
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d1f6      	bne.n	80070c8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80070da:	2320      	movs	r3, #32
 80070dc:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80070de:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80070e0:	2300      	movs	r3, #0
 80070e2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80070e6:	b002      	add	sp, #8
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	075b      	lsls	r3, r3, #29
 80070f0:	d524      	bpl.n	800713c <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	462b      	mov	r3, r5
 80070fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007100:	4620      	mov	r0, r4
 8007102:	f7ff ff31 	bl	8006f68 <UART_WaitOnFlagUntilTimeout>
 8007106:	b1c8      	cbz	r0, 800713c <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007108:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	e852 3f00 	ldrex	r3, [r2]
 800710e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	2900      	cmp	r1, #0
 800711a:	d1f5      	bne.n	8007108 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	f102 0308 	add.w	r3, r2, #8
 8007120:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007124:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	f102 0008 	add.w	r0, r2, #8
 800712c:	e840 3100 	strex	r1, r3, [r0]
 8007130:	2900      	cmp	r1, #0
 8007132:	d1f3      	bne.n	800711c <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007134:	2320      	movs	r3, #32
 8007136:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800713a:	e7d0      	b.n	80070de <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 800713c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007140:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007148:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800714a:	e7c9      	b.n	80070e0 <UART_CheckIdleState+0x46>

0800714c <HAL_UART_Init>:
{
 800714c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800714e:	4604      	mov	r4, r0
 8007150:	b340      	cbz	r0, 80071a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007152:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007154:	b91b      	cbnz	r3, 800715e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007156:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800715a:	f7fc fe99 	bl	8003e90 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800715e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007160:	2324      	movs	r3, #36	@ 0x24
 8007162:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007164:	6813      	ldr	r3, [r2, #0]
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800716c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800716e:	b113      	cbz	r3, 8007176 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007170:	4620      	mov	r0, r4
 8007172:	f7ff fea5 	bl	8006ec0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007176:	4620      	mov	r0, r4
 8007178:	f7ff fdc8 	bl	8006d0c <UART_SetConfig>
 800717c:	2801      	cmp	r0, #1
 800717e:	d011      	beq.n	80071a4 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007190:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007198:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80071a0:	f7ff bf7b 	b.w	800709a <UART_CheckIdleState>
}
 80071a4:	2001      	movs	r0, #1
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <UART_Start_Receive_DMA>:
{
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4613      	mov	r3, r2
 80071ac:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80071ae:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b2:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80071b4:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071ba:	2022      	movs	r0, #34	@ 0x22
 80071bc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80071c0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80071c2:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80071c4:	b1a0      	cbz	r0, 80071f0 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071c6:	4e1c      	ldr	r6, [pc, #112]	@ (8007238 <UART_Start_Receive_DMA+0x90>)
 80071c8:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071ca:	4e1c      	ldr	r6, [pc, #112]	@ (800723c <UART_Start_Receive_DMA+0x94>)
 80071cc:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071ce:	4e1c      	ldr	r6, [pc, #112]	@ (8007240 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 80071d0:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80071d4:	460a      	mov	r2, r1
 80071d6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80071da:	f7fd fe4f 	bl	8004e7c <HAL_DMA_Start_IT>
 80071de:	b138      	cbz	r0, 80071f0 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071e0:	2310      	movs	r3, #16
 80071e2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80071e6:	2320      	movs	r3, #32
 80071e8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 80071ec:	2001      	movs	r0, #1
}
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071f0:	6922      	ldr	r2, [r4, #16]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	b13a      	cbz	r2, 8007206 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	e843 2100 	strex	r1, r2, [r3]
 8007202:	2900      	cmp	r1, #0
 8007204:	d1f7      	bne.n	80071f6 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	f103 0208 	add.w	r2, r3, #8
 800720a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	f103 0008 	add.w	r0, r3, #8
 8007216:	e840 2100 	strex	r1, r2, [r0]
 800721a:	2900      	cmp	r1, #0
 800721c:	d1f3      	bne.n	8007206 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	f103 0208 	add.w	r2, r3, #8
 8007222:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	f103 0108 	add.w	r1, r3, #8
 800722e:	e841 2000 	strex	r0, r2, [r1]
 8007232:	2800      	cmp	r0, #0
 8007234:	d1f3      	bne.n	800721e <UART_Start_Receive_DMA+0x76>
 8007236:	e7da      	b.n	80071ee <UART_Start_Receive_DMA+0x46>
 8007238:	08006c7f 	.word	0x08006c7f
 800723c:	08006c5f 	.word	0x08006c5f
 8007240:	08006c07 	.word	0x08006c07

08007244 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007244:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007248:	2b20      	cmp	r3, #32
{
 800724a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800724c:	d112      	bne.n	8007274 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800724e:	b1a1      	cbz	r1, 800727a <HAL_UART_Receive_DMA+0x36>
 8007250:	b19a      	cbz	r2, 800727a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007252:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007254:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007258:	6863      	ldr	r3, [r4, #4]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	d507      	bpl.n	800726e <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007262:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	e844 3500 	strex	r5, r3, [r4]
 800726a:	2d00      	cmp	r5, #0
 800726c:	d1f7      	bne.n	800725e <HAL_UART_Receive_DMA+0x1a>
}
 800726e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007270:	f7ff bf9a 	b.w	80071a8 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007274:	2002      	movs	r0, #2
}
 8007276:	bc30      	pop	{r4, r5}
 8007278:	4770      	bx	lr
      return HAL_ERROR;
 800727a:	2001      	movs	r0, #1
 800727c:	e7fb      	b.n	8007276 <HAL_UART_Receive_DMA+0x32>

0800727e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800727e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007280:	f000 fe9c 	bl	8007fbc <vTaskStartScheduler>
  
  return osOK;
}
 8007284:	2000      	movs	r0, #0
 8007286:	bd08      	pop	{r3, pc}

08007288 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800728c:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800728e:	692a      	ldr	r2, [r5, #16]
 8007290:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007294:	460b      	mov	r3, r1
 8007296:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007298:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800729c:	b176      	cbz	r6, 80072bc <osThreadCreate+0x34>
 800729e:	69ad      	ldr	r5, [r5, #24]
 80072a0:	b165      	cbz	r5, 80072bc <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80072a2:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80072a4:	bf14      	ite	ne
 80072a6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072a8:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072aa:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80072ae:	9400      	str	r4, [sp, #0]
 80072b0:	f000 fe1f 	bl	8007ef2 <xTaskCreateStatic>
 80072b4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072b6:	9805      	ldr	r0, [sp, #20]
}
 80072b8:	b006      	add	sp, #24
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80072bc:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80072be:	bf14      	ite	ne
 80072c0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072c2:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072c4:	ad05      	add	r5, sp, #20
 80072c6:	e9cd 4500 	strd	r4, r5, [sp]
 80072ca:	b292      	uxth	r2, r2
 80072cc:	f000 fe48 	bl	8007f60 <xTaskCreate>
 80072d0:	2801      	cmp	r0, #1
 80072d2:	d0f0      	beq.n	80072b6 <osThreadCreate+0x2e>
      return NULL;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7ef      	b.n	80072b8 <osThreadCreate+0x30>

080072d8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072d8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80072da:	2801      	cmp	r0, #1
 80072dc:	bf38      	it	cc
 80072de:	2001      	movcc	r0, #1
 80072e0:	f000 ffba 	bl	8008258 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd08      	pop	{r3, pc}

080072e8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80072e8:	4603      	mov	r3, r0
 80072ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80072ec:	685d      	ldr	r5, [r3, #4]
{ 
 80072ee:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 80072f0:	b165      	cbz	r5, 800730c <osSemaphoreCreate+0x24>
    if (count == 1) {
 80072f2:	2901      	cmp	r1, #1
 80072f4:	d112      	bne.n	800731c <osSemaphoreCreate+0x34>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80072f6:	2303      	movs	r3, #3
 80072f8:	2200      	movs	r2, #0
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4611      	mov	r1, r2
 80072fe:	462b      	mov	r3, r5
 8007300:	f000 fa30 	bl	8007764 <xQueueGenericCreateStatic>
 8007304:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007306:	4620      	mov	r0, r4
 8007308:	b003      	add	sp, #12
 800730a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 800730c:	2901      	cmp	r1, #1
 800730e:	d105      	bne.n	800731c <osSemaphoreCreate+0x34>
      vSemaphoreCreateBinary(sema);
 8007310:	2203      	movs	r2, #3
 8007312:	4629      	mov	r1, r5
 8007314:	f000 fa6f 	bl	80077f6 <xQueueGenericCreate>
 8007318:	4604      	mov	r4, r0
 800731a:	b908      	cbnz	r0, 8007320 <osSemaphoreCreate+0x38>
{ 
 800731c:	2400      	movs	r4, #0
 800731e:	e7f2      	b.n	8007306 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 8007320:	462b      	mov	r3, r5
 8007322:	462a      	mov	r2, r5
 8007324:	4629      	mov	r1, r5
 8007326:	f000 fa8a 	bl	800783e <xQueueGenericSend>
 800732a:	e7ec      	b.n	8007306 <osSemaphoreCreate+0x1e>

0800732c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800732e:	6847      	ldr	r7, [r0, #4]
{
 8007330:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007332:	2014      	movs	r0, #20
 8007334:	f001 fac4 	bl	80088c0 <pvPortMalloc>

  
  if (thePool) {
 8007338:	4604      	mov	r4, r0
 800733a:	b1b8      	cbz	r0, 800736c <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 800733c:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800733e:	3703      	adds	r7, #3
 8007340:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8007344:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 8007346:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 800734a:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800734c:	f001 fab8 	bl	80088c0 <pvPortMalloc>
 8007350:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 8007352:	b140      	cbz	r0, 8007366 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007354:	6830      	ldr	r0, [r6, #0]
 8007356:	4378      	muls	r0, r7
 8007358:	f001 fab2 	bl	80088c0 <pvPortMalloc>
 800735c:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 800735e:	b978      	cbnz	r0, 8007380 <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8007360:	6860      	ldr	r0, [r4, #4]
 8007362:	f001 fb3f 	bl	80089e4 <vPortFree>
        vPortFree(thePool);
 8007366:	4620      	mov	r0, r4
 8007368:	f001 fb3c 	bl	80089e4 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800736c:	2400      	movs	r4, #0
 800736e:	e005      	b.n	800737c <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8007370:	6862      	ldr	r2, [r4, #4]
 8007372:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007374:	3301      	adds	r3, #1
 8007376:	6832      	ldr	r2, [r6, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d8f9      	bhi.n	8007370 <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 800737c:	4620      	mov	r0, r4
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007380:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 8007382:	4629      	mov	r1, r5
 8007384:	e7f7      	b.n	8007376 <osPoolCreate+0x4a>

08007386 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007386:	b570      	push	{r4, r5, r6, lr}
 8007388:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738a:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800738e:	b186      	cbz	r6, 80073b2 <osPoolAlloc+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007390:	f3ef 8511 	mrs	r5, BASEPRI
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80073a4:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80073a6:	68a1      	ldr	r1, [r4, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	4291      	cmp	r1, r2
 80073ac:	d104      	bne.n	80073b8 <osPoolAlloc+0x32>
  void *p = NULL;
 80073ae:	2500      	movs	r5, #0
 80073b0:	e012      	b.n	80073d8 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80073b2:	f001 f91f 	bl	80085f4 <vPortEnterCritical>
 80073b6:	e7f6      	b.n	80073a6 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80073c0:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80073c4:	6860      	ldr	r0, [r4, #4]
 80073c6:	5cc5      	ldrb	r5, [r0, r3]
 80073c8:	b96d      	cbnz	r5, 80073e6 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 80073ca:	2201      	movs	r2, #1
 80073cc:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80073ce:	68e2      	ldr	r2, [r4, #12]
 80073d0:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 80073d2:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80073d4:	fb02 5503 	mla	r5, r2, r3, r5
 80073d8:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 80073dc:	b12b      	cbz	r3, 80073ea <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073de:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 80073e2:	4628      	mov	r0, r5
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 80073e6:	3201      	adds	r2, #1
 80073e8:	e7df      	b.n	80073aa <osPoolAlloc+0x24>
    vPortExitCritical();
 80073ea:	f001 f923 	bl	8008634 <vPortExitCritical>
  return p;
 80073ee:	e7f8      	b.n	80073e2 <osPoolAlloc+0x5c>

080073f0 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 80073f0:	4603      	mov	r3, r0
 80073f2:	b180      	cbz	r0, 8007416 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 80073f4:	b179      	cbz	r1, 8007416 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 80073f6:	6802      	ldr	r2, [r0, #0]
 80073f8:	428a      	cmp	r2, r1
 80073fa:	d80c      	bhi.n	8007416 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 80073fc:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80073fe:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8007400:	fbb1 f2f0 	udiv	r2, r1, r0
 8007404:	fb00 1012 	mls	r0, r0, r2, r1
 8007408:	b928      	cbnz	r0, 8007416 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 800740a:	6899      	ldr	r1, [r3, #8]
 800740c:	4291      	cmp	r1, r2
 800740e:	d902      	bls.n	8007416 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8007414:	4770      	bx	lr
    return osErrorParameter;
 8007416:	2080      	movs	r0, #128	@ 0x80
}
 8007418:	4770      	bx	lr

0800741a <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800741a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800741c:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800741e:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007420:	9301      	str	r3, [sp, #4]
{
 8007422:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007424:	6843      	ldr	r3, [r0, #4]
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800742a:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800742c:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800742e:	f001 fa47 	bl	80088c0 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 8007432:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007434:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8007436:	681d      	ldr	r5, [r3, #0]
 8007438:	b16d      	cbz	r5, 8007456 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800743a:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	4632      	mov	r2, r6
 8007440:	2104      	movs	r1, #4
 8007442:	f000 f9d8 	bl	80077f6 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 8007446:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007448:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	686b      	ldr	r3, [r5, #4]
 800744e:	b92b      	cbnz	r3, 800745c <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8007450:	4628      	mov	r0, r5
 8007452:	f001 fac7 	bl	80089e4 <vPortFree>
    return NULL;
 8007456:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8007458:	b004      	add	sp, #16
 800745a:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800745c:	a801      	add	r0, sp, #4
 800745e:	f7ff ff65 	bl	800732c <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 8007462:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007464:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	6883      	ldr	r3, [r0, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f4      	bne.n	8007458 <osMailCreate+0x3e>
 800746e:	e7f0      	b.n	8007452 <osMailCreate+0x38>

08007470 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8007470:	b110      	cbz	r0, 8007478 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8007472:	6880      	ldr	r0, [r0, #8]
 8007474:	f7ff bf87 	b.w	8007386 <osPoolAlloc>
  
  return p;
}
 8007478:	4770      	bx	lr

0800747a <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800747a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800747c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800747e:	b328      	cbz	r0, 80074cc <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8007480:	2200      	movs	r2, #0
 8007482:	9203      	str	r2, [sp, #12]
 8007484:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007488:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 800748a:	b1c3      	cbz	r3, 80074be <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800748c:	4613      	mov	r3, r2
 800748e:	a901      	add	r1, sp, #4
 8007490:	aa03      	add	r2, sp, #12
 8007492:	f000 fa86 	bl	80079a2 <xQueueGenericSendFromISR>
 8007496:	2801      	cmp	r0, #1
 8007498:	d003      	beq.n	80074a2 <osMailPut+0x28>
      return osErrorOS;
 800749a:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800749c:	b005      	add	sp, #20
 800749e:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	b14b      	cbz	r3, 80074ba <osMailPut+0x40>
 80074a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	f3bf 8f6f 	isb	sy
  return osOK;
 80074ba:	2000      	movs	r0, #0
 80074bc:	e7ee      	b.n	800749c <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80074be:	461a      	mov	r2, r3
 80074c0:	a901      	add	r1, sp, #4
 80074c2:	f000 f9bc 	bl	800783e <xQueueGenericSend>
 80074c6:	2801      	cmp	r0, #1
 80074c8:	d0f7      	beq.n	80074ba <osMailPut+0x40>
 80074ca:	e7e6      	b.n	800749a <osMailPut+0x20>
    return osErrorParameter;
 80074cc:	2080      	movs	r0, #128	@ 0x80
 80074ce:	e7e5      	b.n	800749c <osMailPut+0x22>

080074d0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80074d0:	b530      	push	{r4, r5, lr}
 80074d2:	b085      	sub	sp, #20
 80074d4:	4605      	mov	r5, r0
 80074d6:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80074d8:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 80074da:	b911      	cbnz	r1, 80074e2 <osMailGet+0x12>
    event.status = osErrorParameter;
 80074dc:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	e01a      	b.n	8007518 <osMailGet+0x48>
  taskWoken = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80074ea:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 80074ec:	b1e3      	cbz	r3, 8007528 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80074ee:	466a      	mov	r2, sp
 80074f0:	a902      	add	r1, sp, #8
 80074f2:	f000 fb50 	bl	8007b96 <xQueueReceiveFromISR>
 80074f6:	1e43      	subs	r3, r0, #1
 80074f8:	4258      	negs	r0, r3
 80074fa:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 80074fc:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80074fe:	0140      	lsls	r0, r0, #5
 8007500:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007502:	b14b      	cbz	r3, 8007518 <osMailGet+0x48>
 8007504:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800750c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
    return event;
 8007518:	ab04      	add	r3, sp, #16
 800751a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800751e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007522:	4628      	mov	r0, r5
 8007524:	b005      	add	sp, #20
 8007526:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007528:	a902      	add	r1, sp, #8
 800752a:	f000 fa96 	bl	8007a5a <xQueueReceive>
 800752e:	2801      	cmp	r0, #1
 8007530:	d101      	bne.n	8007536 <osMailGet+0x66>
      event.status = osEventMail;
 8007532:	2320      	movs	r3, #32
 8007534:	e7d3      	b.n	80074de <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007536:	3c00      	subs	r4, #0
 8007538:	bf18      	it	ne
 800753a:	2401      	movne	r4, #1
 800753c:	01a4      	lsls	r4, r4, #6
 800753e:	9401      	str	r4, [sp, #4]
  return event;
 8007540:	e7ea      	b.n	8007518 <osMailGet+0x48>

08007542 <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8007542:	b110      	cbz	r0, 800754a <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007544:	6880      	ldr	r0, [r0, #8]
 8007546:	f7ff bf53 	b.w	80073f0 <osPoolFree>
}
 800754a:	2080      	movs	r0, #128	@ 0x80
 800754c:	4770      	bx	lr

0800754e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800754e:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007552:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007556:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800755c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007562:	4770      	bx	lr

08007564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007568:	4770      	bx	lr

0800756a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800756a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800756c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007572:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007574:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007576:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007578:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800757a:	3301      	adds	r3, #1
 800757c:	6003      	str	r3, [r0, #0]
}
 800757e:	4770      	bx	lr

08007580 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007580:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007582:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007584:	1c63      	adds	r3, r4, #1
 8007586:	d10a      	bne.n	800759e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007588:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800758e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007590:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007592:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007594:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007596:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007598:	3301      	adds	r3, #1
 800759a:	6003      	str	r3, [r0, #0]
}
 800759c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800759e:	f100 0208 	add.w	r2, r0, #8
 80075a2:	4613      	mov	r3, r2
 80075a4:	6852      	ldr	r2, [r2, #4]
 80075a6:	6815      	ldr	r5, [r2, #0]
 80075a8:	42a5      	cmp	r5, r4
 80075aa:	d9fa      	bls.n	80075a2 <vListInsert+0x22>
 80075ac:	e7ed      	b.n	800758a <vListInsert+0xa>

080075ae <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075ae:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075b2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075b4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075b6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075b8:	6859      	ldr	r1, [r3, #4]
 80075ba:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075bc:	bf08      	it	eq
 80075be:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075c0:	2200      	movs	r2, #0
 80075c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	3a01      	subs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075ca:	6818      	ldr	r0, [r3, #0]
}
 80075cc:	4770      	bx	lr

080075ce <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075d2:	f001 f80f 	bl	80085f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075d6:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80075d8:	f001 f82c 	bl	8008634 <vPortExitCritical>

	return xReturn;
}
 80075dc:	fab4 f084 	clz	r0, r4
 80075e0:	0940      	lsrs	r0, r0, #5
 80075e2:	bd10      	pop	{r4, pc}

080075e4 <prvCopyDataToQueue>:
{
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075e8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ea:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80075ec:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ee:	b942      	cbnz	r2, 8007602 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f0:	6806      	ldr	r6, [r0, #0]
 80075f2:	b99e      	cbnz	r6, 800761c <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075f4:	6840      	ldr	r0, [r0, #4]
 80075f6:	f000 ff47 	bl	8008488 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80075fa:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075fc:	3501      	adds	r5, #1
 80075fe:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007600:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007602:	b96e      	cbnz	r6, 8007620 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007604:	6880      	ldr	r0, [r0, #8]
 8007606:	f003 fffa 	bl	800b5fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800760e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007610:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007612:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007614:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007616:	bf24      	itt	cs
 8007618:	6823      	ldrcs	r3, [r4, #0]
 800761a:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800761c:	2000      	movs	r0, #0
 800761e:	e7ed      	b.n	80075fc <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007620:	68c0      	ldr	r0, [r0, #12]
 8007622:	f003 ffec 	bl	800b5fe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007626:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007628:	68e3      	ldr	r3, [r4, #12]
 800762a:	4251      	negs	r1, r2
 800762c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800762e:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007630:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007632:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007634:	bf3e      	ittt	cc
 8007636:	6863      	ldrcc	r3, [r4, #4]
 8007638:	185b      	addcc	r3, r3, r1
 800763a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800763c:	2e02      	cmp	r6, #2
 800763e:	d1ed      	bne.n	800761c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007640:	b10d      	cbz	r5, 8007646 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007642:	3d01      	subs	r5, #1
 8007644:	e7ea      	b.n	800761c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007646:	4628      	mov	r0, r5
 8007648:	e7d8      	b.n	80075fc <prvCopyDataToQueue+0x18>

0800764a <prvCopyDataFromQueue>:
{
 800764a:	4603      	mov	r3, r0
 800764c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800764e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007650:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007652:	b16a      	cbz	r2, 8007670 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007654:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007656:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007658:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800765a:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800765c:	bf28      	it	cs
 800765e:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007660:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007662:	bf28      	it	cs
 8007664:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007666:	68d9      	ldr	r1, [r3, #12]
}
 8007668:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800766c:	f003 bfc7 	b.w	800b5fe <memcpy>
}
 8007670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007674:	4770      	bx	lr

08007676 <prvUnlockQueue>:
{
 8007676:	b570      	push	{r4, r5, r6, lr}
 8007678:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800767a:	f000 ffbb 	bl	80085f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800767e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007682:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007686:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007688:	2d00      	cmp	r5, #0
 800768a:	dc14      	bgt.n	80076b6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800768c:	23ff      	movs	r3, #255	@ 0xff
 800768e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007692:	f000 ffcf 	bl	8008634 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007696:	f000 ffad 	bl	80085f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800769a:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80076a2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	dc12      	bgt.n	80076ce <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80076a8:	23ff      	movs	r3, #255	@ 0xff
 80076aa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80076ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80076b2:	f000 bfbf 	b.w	8008634 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0e7      	beq.n	800768c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076bc:	4630      	mov	r0, r6
 80076be:	f000 fe43 	bl	8008348 <xTaskRemoveFromEventList>
 80076c2:	b108      	cbz	r0, 80076c8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80076c4:	f000 feca 	bl	800845c <vTaskMissedYield>
			--cTxLock;
 80076c8:	3d01      	subs	r5, #1
 80076ca:	b26d      	sxtb	r5, r5
 80076cc:	e7dc      	b.n	8007688 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0e9      	beq.n	80076a8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d4:	4630      	mov	r0, r6
 80076d6:	f000 fe37 	bl	8008348 <xTaskRemoveFromEventList>
 80076da:	b108      	cbz	r0, 80076e0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80076dc:	f000 febe 	bl	800845c <vTaskMissedYield>
				--cRxLock;
 80076e0:	3d01      	subs	r5, #1
 80076e2:	b26d      	sxtb	r5, r5
 80076e4:	e7de      	b.n	80076a4 <prvUnlockQueue+0x2e>

080076e6 <xQueueGenericReset>:
{
 80076e6:	b538      	push	{r3, r4, r5, lr}
 80076e8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80076ea:	4604      	mov	r4, r0
 80076ec:	b940      	cbnz	r0, 8007700 <xQueueGenericReset+0x1a>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	e7fe      	b.n	80076fe <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007700:	f000 ff78 	bl	80085f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007704:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007708:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800770a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800770c:	434b      	muls	r3, r1
 800770e:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007710:	1a5b      	subs	r3, r3, r1
 8007712:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007714:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8007716:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007718:	2000      	movs	r0, #0
 800771a:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800771c:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800771e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007722:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007726:	b9a5      	cbnz	r5, 8007752 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	b173      	cbz	r3, 800774a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800772c:	f104 0010 	add.w	r0, r4, #16
 8007730:	f000 fe0a 	bl	8008348 <xTaskRemoveFromEventList>
 8007734:	b148      	cbz	r0, 800774a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007736:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800773a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800773e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800774a:	f000 ff73 	bl	8008634 <vPortExitCritical>
}
 800774e:	2001      	movs	r0, #1
 8007750:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007752:	f104 0010 	add.w	r0, r4, #16
 8007756:	f7ff fefa 	bl	800754e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800775a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800775e:	f7ff fef6 	bl	800754e <vListInitialise>
 8007762:	e7f2      	b.n	800774a <xQueueGenericReset+0x64>

08007764 <xQueueGenericCreateStatic>:
	{
 8007764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007766:	460d      	mov	r5, r1
 8007768:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800776a:	b940      	cbnz	r0, 800777e <xQueueGenericCreateStatic+0x1a>
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	e7fe      	b.n	800777c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800777e:	b943      	cbnz	r3, 8007792 <xQueueGenericCreateStatic+0x2e>
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	e7fe      	b.n	8007790 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007792:	b14a      	cbz	r2, 80077a8 <xQueueGenericCreateStatic+0x44>
 8007794:	b991      	cbnz	r1, 80077bc <xQueueGenericCreateStatic+0x58>
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	e7fe      	b.n	80077a6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077a8:	b141      	cbz	r1, 80077bc <xQueueGenericCreateStatic+0x58>
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	e7fe      	b.n	80077ba <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077bc:	2348      	movs	r3, #72	@ 0x48
 80077be:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	2b48      	cmp	r3, #72	@ 0x48
 80077c4:	d008      	beq.n	80077d8 <xQueueGenericCreateStatic+0x74>
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	e7fe      	b.n	80077d6 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077d8:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077da:	2d00      	cmp	r5, #0
 80077dc:	bf08      	it	eq
 80077de:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80077e0:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077e4:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80077e8:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff ff7b 	bl	80076e6 <xQueueGenericReset>
	}
 80077f0:	4620      	mov	r0, r4
 80077f2:	b003      	add	sp, #12
 80077f4:	bd30      	pop	{r4, r5, pc}

080077f6 <xQueueGenericCreate>:
	{
 80077f6:	b570      	push	{r4, r5, r6, lr}
 80077f8:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077fa:	4606      	mov	r6, r0
 80077fc:	b940      	cbnz	r0, 8007810 <xQueueGenericCreate+0x1a>
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	e7fe      	b.n	800780e <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007812:	3048      	adds	r0, #72	@ 0x48
 8007814:	f001 f854 	bl	80088c0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007818:	4604      	mov	r4, r0
 800781a:	b160      	cbz	r0, 8007836 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800781c:	2300      	movs	r3, #0
 800781e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007822:	b155      	cbz	r5, 800783a <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007824:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8007828:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800782c:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800782e:	2101      	movs	r1, #1
 8007830:	4620      	mov	r0, r4
 8007832:	f7ff ff58 	bl	80076e6 <xQueueGenericReset>
	}
 8007836:	4620      	mov	r0, r4
 8007838:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800783a:	4603      	mov	r3, r0
 800783c:	e7f4      	b.n	8007828 <xQueueGenericCreate+0x32>

0800783e <xQueueGenericSend>:
{
 800783e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007842:	460f      	mov	r7, r1
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007848:	4604      	mov	r4, r0
 800784a:	b940      	cbnz	r0, 800785e <xQueueGenericSend+0x20>
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	e7fe      	b.n	800785c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800785e:	b951      	cbnz	r1, 8007876 <xQueueGenericSend+0x38>
 8007860:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007862:	b143      	cbz	r3, 8007876 <xQueueGenericSend+0x38>
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	e7fe      	b.n	8007874 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007876:	2e02      	cmp	r6, #2
 8007878:	d10b      	bne.n	8007892 <xQueueGenericSend+0x54>
 800787a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d008      	beq.n	8007892 <xQueueGenericSend+0x54>
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	e7fe      	b.n	8007890 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007892:	f000 fde9 	bl	8008468 <xTaskGetSchedulerState>
 8007896:	4605      	mov	r5, r0
 8007898:	b330      	cbz	r0, 80078e8 <xQueueGenericSend+0xaa>
 800789a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800789c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80078a0:	f000 fea8 	bl	80085f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80078a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d301      	bcc.n	80078b0 <xQueueGenericSend+0x72>
 80078ac:	2e02      	cmp	r6, #2
 80078ae:	d127      	bne.n	8007900 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078b0:	4632      	mov	r2, r6
 80078b2:	4639      	mov	r1, r7
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff fe95 	bl	80075e4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078bc:	b11b      	cbz	r3, 80078c6 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078c2:	f000 fd41 	bl	8008348 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80078c6:	b148      	cbz	r0, 80078dc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80078c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80078dc:	f000 feaa 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 80078e0:	2001      	movs	r0, #1
}
 80078e2:	b004      	add	sp, #16
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e8:	9b01      	ldr	r3, [sp, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0d6      	beq.n	800789c <xQueueGenericSend+0x5e>
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	e7fe      	b.n	80078fe <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	b91b      	cbnz	r3, 800790c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007904:	f000 fe96 	bl	8008634 <vPortExitCritical>
					return errQUEUE_FULL;
 8007908:	2000      	movs	r0, #0
 800790a:	e7ea      	b.n	80078e2 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800790c:	b915      	cbnz	r5, 8007914 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800790e:	a802      	add	r0, sp, #8
 8007910:	f000 fd5c 	bl	80083cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007914:	f000 fe8e 	bl	8008634 <vPortExitCritical>
		vTaskSuspendAll();
 8007918:	f000 fb88 	bl	800802c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800791c:	f000 fe6a 	bl	80085f4 <vPortEnterCritical>
 8007920:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007924:	2bff      	cmp	r3, #255	@ 0xff
 8007926:	bf08      	it	eq
 8007928:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800792c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007930:	2bff      	cmp	r3, #255	@ 0xff
 8007932:	bf08      	it	eq
 8007934:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007938:	f000 fe7c 	bl	8008634 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800793c:	a901      	add	r1, sp, #4
 800793e:	a802      	add	r0, sp, #8
 8007940:	f000 fd50 	bl	80083e4 <xTaskCheckForTimeOut>
 8007944:	bb38      	cbnz	r0, 8007996 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007946:	f000 fe55 	bl	80085f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800794a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800794c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800794e:	429a      	cmp	r2, r3
 8007950:	d10e      	bne.n	8007970 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007952:	f000 fe6f 	bl	8008634 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	f104 0010 	add.w	r0, r4, #16
 800795c:	f000 fcda 	bl	8008314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007960:	4620      	mov	r0, r4
 8007962:	f7ff fe88 	bl	8007676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007966:	f000 fc01 	bl	800816c <xTaskResumeAll>
 800796a:	b148      	cbz	r0, 8007980 <xQueueGenericSend+0x142>
 800796c:	2501      	movs	r5, #1
 800796e:	e797      	b.n	80078a0 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007970:	f000 fe60 	bl	8008634 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007974:	4620      	mov	r0, r4
 8007976:	f7ff fe7e 	bl	8007676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800797a:	f000 fbf7 	bl	800816c <xTaskResumeAll>
 800797e:	e7f5      	b.n	800796c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007980:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007988:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	e7ea      	b.n	800796c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007996:	4620      	mov	r0, r4
 8007998:	f7ff fe6d 	bl	8007676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800799c:	f000 fbe6 	bl	800816c <xTaskResumeAll>
			return errQUEUE_FULL;
 80079a0:	e7b2      	b.n	8007908 <xQueueGenericSend+0xca>

080079a2 <xQueueGenericSendFromISR>:
{
 80079a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a6:	4689      	mov	r9, r1
 80079a8:	4617      	mov	r7, r2
 80079aa:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80079ac:	4604      	mov	r4, r0
 80079ae:	b940      	cbnz	r0, 80079c2 <xQueueGenericSendFromISR+0x20>
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	e7fe      	b.n	80079c0 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c2:	b951      	cbnz	r1, 80079da <xQueueGenericSendFromISR+0x38>
 80079c4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80079c6:	b143      	cbz	r3, 80079da <xQueueGenericSendFromISR+0x38>
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	e7fe      	b.n	80079d8 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079da:	2e02      	cmp	r6, #2
 80079dc:	d10b      	bne.n	80079f6 <xQueueGenericSendFromISR+0x54>
 80079de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d008      	beq.n	80079f6 <xQueueGenericSendFromISR+0x54>
 80079e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	e7fe      	b.n	80079f4 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079f6:	f000 ff0f 	bl	8008818 <vPortValidateInterruptPriority>
	__asm volatile
 80079fa:	f3ef 8811 	mrs	r8, BASEPRI
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d301      	bcc.n	8007a1a <xQueueGenericSendFromISR+0x78>
 8007a16:	2e02      	cmp	r6, #2
 8007a18:	d11d      	bne.n	8007a56 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a1a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a1e:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a20:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a22:	4649      	mov	r1, r9
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff fddd 	bl	80075e4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007a2a:	1c6b      	adds	r3, r5, #1
 8007a2c:	d10e      	bne.n	8007a4c <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a30:	b13b      	cbz	r3, 8007a42 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a32:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a36:	f000 fc87 	bl	8008348 <xTaskRemoveFromEventList>
 8007a3a:	b110      	cbz	r0, 8007a42 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007a3c:	b10f      	cbz	r7, 8007a42 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007a42:	2001      	movs	r0, #1
	__asm volatile
 8007a44:	f388 8811 	msr	BASEPRI, r8
}
 8007a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	b26d      	sxtb	r5, r5
 8007a50:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007a54:	e7f5      	b.n	8007a42 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007a56:	2000      	movs	r0, #0
 8007a58:	e7f4      	b.n	8007a44 <xQueueGenericSendFromISR+0xa2>

08007a5a <xQueueReceive>:
{
 8007a5a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007a5e:	460e      	mov	r6, r1
 8007a60:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007a62:	4604      	mov	r4, r0
 8007a64:	b940      	cbnz	r0, 8007a78 <xQueueReceive+0x1e>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	e7fe      	b.n	8007a76 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a78:	b951      	cbnz	r1, 8007a90 <xQueueReceive+0x36>
 8007a7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007a7c:	b143      	cbz	r3, 8007a90 <xQueueReceive+0x36>
 8007a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	e7fe      	b.n	8007a8e <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a90:	f000 fcea 	bl	8008468 <xTaskGetSchedulerState>
 8007a94:	4605      	mov	r5, r0
 8007a96:	b318      	cbz	r0, 8007ae0 <xQueueReceive+0x86>
 8007a98:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007a9a:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007a9e:	f000 fda9 	bl	80085f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aa2:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aa4:	b347      	cbz	r7, 8007af8 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aaa:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007aac:	f7ff fdcd 	bl	800764a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ab0:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	b173      	cbz	r3, 8007ad4 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab6:	f104 0010 	add.w	r0, r4, #16
 8007aba:	f000 fc45 	bl	8008348 <xTaskRemoveFromEventList>
 8007abe:	b148      	cbz	r0, 8007ad4 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8007ac0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ad4:	f000 fdae 	bl	8008634 <vPortExitCritical>
				return pdPASS;
 8007ad8:	2001      	movs	r0, #1
}
 8007ada:	b004      	add	sp, #16
 8007adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ae0:	9b01      	ldr	r3, [sp, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0d9      	beq.n	8007a9a <xQueueReceive+0x40>
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	e7fe      	b.n	8007af6 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af8:	9b01      	ldr	r3, [sp, #4]
 8007afa:	b91b      	cbnz	r3, 8007b04 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007afc:	f000 fd9a 	bl	8008634 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007b00:	2000      	movs	r0, #0
 8007b02:	e7ea      	b.n	8007ada <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007b04:	b915      	cbnz	r5, 8007b0c <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b06:	a802      	add	r0, sp, #8
 8007b08:	f000 fc60 	bl	80083cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b0c:	f000 fd92 	bl	8008634 <vPortExitCritical>
		vTaskSuspendAll();
 8007b10:	f000 fa8c 	bl	800802c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b14:	f000 fd6e 	bl	80085f4 <vPortEnterCritical>
 8007b18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b1c:	2bff      	cmp	r3, #255	@ 0xff
 8007b1e:	bf08      	it	eq
 8007b20:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007b24:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b28:	2bff      	cmp	r3, #255	@ 0xff
 8007b2a:	bf08      	it	eq
 8007b2c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007b30:	f000 fd80 	bl	8008634 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b34:	a901      	add	r1, sp, #4
 8007b36:	a802      	add	r0, sp, #8
 8007b38:	f000 fc54 	bl	80083e4 <xTaskCheckForTimeOut>
 8007b3c:	bb00      	cbnz	r0, 8007b80 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff fd45 	bl	80075ce <prvIsQueueEmpty>
 8007b44:	b1b0      	cbz	r0, 8007b74 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b46:	9901      	ldr	r1, [sp, #4]
 8007b48:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b4c:	f000 fbe2 	bl	8008314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7ff fd90 	bl	8007676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b56:	f000 fb09 	bl	800816c <xTaskResumeAll>
 8007b5a:	b948      	cbnz	r0, 8007b70 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007b5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	2501      	movs	r5, #1
 8007b72:	e794      	b.n	8007a9e <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff fd7e 	bl	8007676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b7a:	f000 faf7 	bl	800816c <xTaskResumeAll>
 8007b7e:	e7f7      	b.n	8007b70 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7ff fd78 	bl	8007676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b86:	f000 faf1 	bl	800816c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff fd1f 	bl	80075ce <prvIsQueueEmpty>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d0ed      	beq.n	8007b70 <xQueueReceive+0x116>
 8007b94:	e7b4      	b.n	8007b00 <xQueueReceive+0xa6>

08007b96 <xQueueReceiveFromISR>:
{
 8007b96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9a:	4689      	mov	r9, r1
 8007b9c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	b940      	cbnz	r0, 8007bb4 <xQueueReceiveFromISR+0x1e>
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	e7fe      	b.n	8007bb2 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bb4:	b951      	cbnz	r1, 8007bcc <xQueueReceiveFromISR+0x36>
 8007bb6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007bb8:	b143      	cbz	r3, 8007bcc <xQueueReceiveFromISR+0x36>
 8007bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	e7fe      	b.n	8007bca <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bcc:	f000 fe24 	bl	8008818 <vPortValidateInterruptPriority>
	__asm volatile
 8007bd0:	f3ef 8711 	mrs	r7, BASEPRI
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be6:	b30d      	cbz	r5, 8007c2c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007be8:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bec:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007bee:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff fd2a 	bl	800764a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf6:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007bf8:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bfa:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007bfc:	d111      	bne.n	8007c22 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	b153      	cbz	r3, 8007c18 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c02:	f104 0010 	add.w	r0, r4, #16
 8007c06:	f000 fb9f 	bl	8008348 <xTaskRemoveFromEventList>
 8007c0a:	b128      	cbz	r0, 8007c18 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8007c0c:	f1b8 0f00 	cmp.w	r8, #0
 8007c10:	d002      	beq.n	8007c18 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007c18:	2001      	movs	r0, #1
	__asm volatile
 8007c1a:	f387 8811 	msr	BASEPRI, r7
}
 8007c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c22:	3601      	adds	r6, #1
 8007c24:	b276      	sxtb	r6, r6
 8007c26:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8007c2a:	e7f5      	b.n	8007c18 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e7f4      	b.n	8007c1a <xQueueReceiveFromISR+0x84>

08007c30 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c36:	f000 fcdd 	bl	80085f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007cf8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8007c3c:	4e2f      	ldr	r6, [pc, #188]	@ (8007cfc <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	4f2f      	ldr	r7, [pc, #188]	@ (8007d00 <prvAddNewTaskToReadyList+0xd0>)
 8007c42:	3201      	adds	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007c46:	6835      	ldr	r5, [r6, #0]
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	d14a      	bne.n	8007ce2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c4c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d11f      	bne.n	8007c94 <prvAddNewTaskToReadyList+0x64>
 8007c54:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c56:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c58:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c5a:	f7ff fc78 	bl	800754e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c5e:	2d07      	cmp	r5, #7
 8007c60:	f108 0814 	add.w	r8, r8, #20
 8007c64:	d1f7      	bne.n	8007c56 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c66:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8007d28 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8007c6a:	4d26      	ldr	r5, [pc, #152]	@ (8007d04 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	f7ff fc6e 	bl	800754e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7ff fc6b 	bl	800754e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c78:	4823      	ldr	r0, [pc, #140]	@ (8007d08 <prvAddNewTaskToReadyList+0xd8>)
 8007c7a:	f7ff fc68 	bl	800754e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c7e:	4823      	ldr	r0, [pc, #140]	@ (8007d0c <prvAddNewTaskToReadyList+0xdc>)
 8007c80:	f7ff fc65 	bl	800754e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c84:	4822      	ldr	r0, [pc, #136]	@ (8007d10 <prvAddNewTaskToReadyList+0xe0>)
 8007c86:	f7ff fc62 	bl	800754e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c8a:	4b22      	ldr	r3, [pc, #136]	@ (8007d14 <prvAddNewTaskToReadyList+0xe4>)
 8007c8c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c90:	4b21      	ldr	r3, [pc, #132]	@ (8007d18 <prvAddNewTaskToReadyList+0xe8>)
 8007c92:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007c94:	4a21      	ldr	r2, [pc, #132]	@ (8007d1c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8007c96:	4922      	ldr	r1, [pc, #136]	@ (8007d20 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007c98:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007c9a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007ca0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4093      	lsls	r3, r2
 8007ca6:	4303      	orrs	r3, r0
 8007ca8:	2014      	movs	r0, #20
 8007caa:	600b      	str	r3, [r1, #0]
 8007cac:	fb00 7002 	mla	r0, r0, r2, r7
 8007cb0:	1d21      	adds	r1, r4, #4
 8007cb2:	f7ff fc5a 	bl	800756a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007cb6:	f000 fcbd 	bl	8008634 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007cba:	4b1a      	ldr	r3, [pc, #104]	@ (8007d24 <prvAddNewTaskToReadyList+0xf4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	b173      	cbz	r3, 8007cde <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cc0:	6833      	ldr	r3, [r6, #0]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d209      	bcs.n	8007cde <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8007cca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	f3bf 8f6f 	isb	sy
}
 8007cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <prvAddNewTaskToReadyList+0xf4>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ce6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	d1d3      	bne.n	8007c94 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cec:	6832      	ldr	r2, [r6, #0]
 8007cee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007cf0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007cf2:	bf98      	it	ls
 8007cf4:	6034      	strls	r4, [r6, #0]
 8007cf6:	e7cd      	b.n	8007c94 <prvAddNewTaskToReadyList+0x64>
 8007cf8:	20001768 	.word	0x20001768
 8007cfc:	20001868 	.word	0x20001868
 8007d00:	200017dc 	.word	0x200017dc
 8007d04:	200017b4 	.word	0x200017b4
 8007d08:	20001798 	.word	0x20001798
 8007d0c:	20001784 	.word	0x20001784
 8007d10:	2000176c 	.word	0x2000176c
 8007d14:	200017b0 	.word	0x200017b0
 8007d18:	200017ac 	.word	0x200017ac
 8007d1c:	2000174c 	.word	0x2000174c
 8007d20:	20001760 	.word	0x20001760
 8007d24:	2000175c 	.word	0x2000175c
 8007d28:	200017c8 	.word	0x200017c8

08007d2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d30:	4d1a      	ldr	r5, [pc, #104]	@ (8007d9c <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8007d32:	681c      	ldr	r4, [r3, #0]
{
 8007d34:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d36:	6828      	ldr	r0, [r5, #0]
 8007d38:	3004      	adds	r0, #4
{
 8007d3a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3c:	f7ff fc37 	bl	80075ae <uxListRemove>
 8007d40:	b940      	cbnz	r0, 8007d54 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d42:	682a      	ldr	r2, [r5, #0]
 8007d44:	4916      	ldr	r1, [pc, #88]	@ (8007da0 <prvAddCurrentTaskToDelayedList+0x74>)
 8007d46:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007d48:	680b      	ldr	r3, [r1, #0]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4082      	lsls	r2, r0
 8007d4e:	ea23 0302 	bic.w	r3, r3, r2
 8007d52:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d54:	1c73      	adds	r3, r6, #1
 8007d56:	d107      	bne.n	8007d68 <prvAddCurrentTaskToDelayedList+0x3c>
 8007d58:	b137      	cbz	r7, 8007d68 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d5a:	6829      	ldr	r1, [r5, #0]
 8007d5c:	4811      	ldr	r0, [pc, #68]	@ (8007da4 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d62:	3104      	adds	r1, #4
 8007d64:	f7ff bc01 	b.w	800756a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	19a4      	adds	r4, r4, r6
 8007d6c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d6e:	d307      	bcc.n	8007d80 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d70:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	6829      	ldr	r1, [r5, #0]
}
 8007d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7a:	3104      	adds	r1, #4
 8007d7c:	f7ff bc00 	b.w	8007580 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d80:	4b0a      	ldr	r3, [pc, #40]	@ (8007dac <prvAddCurrentTaskToDelayedList+0x80>)
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	6829      	ldr	r1, [r5, #0]
 8007d86:	3104      	adds	r1, #4
 8007d88:	f7ff fbfa 	bl	8007580 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d8c:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <prvAddCurrentTaskToDelayedList+0x84>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007d92:	bf88      	it	hi
 8007d94:	601c      	strhi	r4, [r3, #0]
}
 8007d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d98:	20001764 	.word	0x20001764
 8007d9c:	20001868 	.word	0x20001868
 8007da0:	20001760 	.word	0x20001760
 8007da4:	2000176c 	.word	0x2000176c
 8007da8:	200017ac 	.word	0x200017ac
 8007dac:	200017b0 	.word	0x200017b0
 8007db0:	20001748 	.word	0x20001748

08007db4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007db4:	4a06      	ldr	r2, [pc, #24]	@ (8007dd0 <prvResetNextTaskUnblockTime+0x1c>)
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	6819      	ldr	r1, [r3, #0]
 8007dba:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <prvResetNextTaskUnblockTime+0x20>)
 8007dbc:	b919      	cbnz	r1, 8007dc6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dc2:	601a      	str	r2, [r3, #0]
}
 8007dc4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dca:	68d2      	ldr	r2, [r2, #12]
 8007dcc:	6852      	ldr	r2, [r2, #4]
 8007dce:	e7f8      	b.n	8007dc2 <prvResetNextTaskUnblockTime+0xe>
 8007dd0:	200017b0 	.word	0x200017b0
 8007dd4:	20001748 	.word	0x20001748

08007dd8 <prvDeleteTCB>:
	{
 8007dd8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dda:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8007dde:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007de0:	b93b      	cbnz	r3, 8007df2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007de2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007de4:	f000 fdfe 	bl	80089e4 <vPortFree>
				vPortFree( pxTCB );
 8007de8:	4620      	mov	r0, r4
	}
 8007dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007dee:	f000 bdf9 	b.w	80089e4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d0f9      	beq.n	8007dea <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d008      	beq.n	8007e0c <prvDeleteTCB+0x34>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	e7fe      	b.n	8007e0a <prvDeleteTCB+0x32>
	}
 8007e0c:	bd10      	pop	{r4, pc}
	...

08007e10 <prvIdleTask>:
{
 8007e10:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e12:	4c13      	ldr	r4, [pc, #76]	@ (8007e60 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e14:	4f13      	ldr	r7, [pc, #76]	@ (8007e64 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007e16:	4d14      	ldr	r5, [pc, #80]	@ (8007e68 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	b973      	cbnz	r3, 8007e3a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e1c:	4b13      	ldr	r3, [pc, #76]	@ (8007e6c <prvIdleTask+0x5c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d9f8      	bls.n	8007e16 <prvIdleTask+0x6>
				taskYIELD();
 8007e24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	e7ed      	b.n	8007e16 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007e3a:	f000 fbdb 	bl	80085f4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e42:	1d30      	adds	r0, r6, #4
 8007e44:	f7ff fbb3 	bl	80075ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007e54:	f000 fbee 	bl	8008634 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ffbd 	bl	8007dd8 <prvDeleteTCB>
 8007e5e:	e7db      	b.n	8007e18 <prvIdleTask+0x8>
 8007e60:	20001780 	.word	0x20001780
 8007e64:	20001784 	.word	0x20001784
 8007e68:	20001768 	.word	0x20001768
 8007e6c:	200017dc 	.word	0x200017dc

08007e70 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007e78:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007e7c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007e84:	4699      	mov	r9, r3
 8007e86:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007e88:	1e4b      	subs	r3, r1, #1
 8007e8a:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e8e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8007e92:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e94:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007e98:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8007e9c:	b108      	cbz	r0, 8007ea2 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	d1f8      	bne.n	8007e94 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea2:	9d08      	ldr	r5, [sp, #32]
 8007ea4:	2d06      	cmp	r5, #6
 8007ea6:	bf28      	it	cs
 8007ea8:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007eaa:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8007eae:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8007eb2:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eb4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007eb6:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eba:	f7ff fb53 	bl	8007564 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebe:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ec2:	f104 0018 	add.w	r0, r4, #24
 8007ec6:	f7ff fb4d 	bl	8007564 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007eca:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ece:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ed0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ed2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ed4:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ed8:	464a      	mov	r2, r9
 8007eda:	4639      	mov	r1, r7
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 fb61 	bl	80085a4 <pxPortInitialiseStack>
 8007ee2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	d001      	beq.n	8007eee <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007eea:	f8c8 4000 	str.w	r4, [r8]
}
 8007eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007ef2 <xTaskCreateStatic>:
	{
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	b086      	sub	sp, #24
 8007ef6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007efa:	b945      	cbnz	r5, 8007f0e <xTaskCreateStatic+0x1c>
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	e7fe      	b.n	8007f0c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8007f0e:	b944      	cbnz	r4, 8007f22 <xTaskCreateStatic+0x30>
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	e7fe      	b.n	8007f20 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f22:	2654      	movs	r6, #84	@ 0x54
 8007f24:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f26:	9e05      	ldr	r6, [sp, #20]
 8007f28:	2e54      	cmp	r6, #84	@ 0x54
 8007f2a:	d008      	beq.n	8007f3e <xTaskCreateStatic+0x4c>
 8007f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	e7fe      	b.n	8007f3c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f3e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f40:	2502      	movs	r5, #2
 8007f42:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f46:	ad04      	add	r5, sp, #16
 8007f48:	9501      	str	r5, [sp, #4]
 8007f4a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007f4c:	9402      	str	r4, [sp, #8]
 8007f4e:	9500      	str	r5, [sp, #0]
 8007f50:	f7ff ff8e 	bl	8007e70 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f54:	4620      	mov	r0, r4
 8007f56:	f7ff fe6b 	bl	8007c30 <prvAddNewTaskToReadyList>
	}
 8007f5a:	9804      	ldr	r0, [sp, #16]
 8007f5c:	b006      	add	sp, #24
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}

08007f60 <xTaskCreate>:
	{
 8007f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f64:	4607      	mov	r7, r0
 8007f66:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f68:	0090      	lsls	r0, r2, #2
	{
 8007f6a:	4688      	mov	r8, r1
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f70:	f000 fca6 	bl	80088c0 <pvPortMalloc>
			if( pxStack != NULL )
 8007f74:	4605      	mov	r5, r0
 8007f76:	b920      	cbnz	r0, 8007f82 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007f7c:	b005      	add	sp, #20
 8007f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f82:	2054      	movs	r0, #84	@ 0x54
 8007f84:	f000 fc9c 	bl	80088c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007f88:	4604      	mov	r4, r0
 8007f8a:	b198      	cbz	r0, 8007fb4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8007f94:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f9a:	9002      	str	r0, [sp, #8]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f7ff ff63 	bl	8007e70 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff fe40 	bl	8007c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	e7e3      	b.n	8007f7c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 fd15 	bl	80089e4 <vPortFree>
		if( pxNewTCB != NULL )
 8007fba:	e7dd      	b.n	8007f78 <xTaskCreate+0x18>

08007fbc <vTaskStartScheduler>:
{
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fc0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fc2:	aa07      	add	r2, sp, #28
 8007fc4:	a906      	add	r1, sp, #24
 8007fc6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fc8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fcc:	f7fa ff50 	bl	8002e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fd0:	9b05      	ldr	r3, [sp, #20]
 8007fd2:	9302      	str	r3, [sp, #8]
 8007fd4:	9b06      	ldr	r3, [sp, #24]
 8007fd6:	9a07      	ldr	r2, [sp, #28]
 8007fd8:	490f      	ldr	r1, [pc, #60]	@ (8008018 <vTaskStartScheduler+0x5c>)
 8007fda:	4810      	ldr	r0, [pc, #64]	@ (800801c <vTaskStartScheduler+0x60>)
 8007fdc:	e9cd 4300 	strd	r4, r3, [sp]
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	f7ff ff86 	bl	8007ef2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007fe6:	b1a8      	cbz	r0, 8008014 <vTaskStartScheduler+0x58>
 8007fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff8:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <vTaskStartScheduler+0x64>)
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008000:	4b08      	ldr	r3, [pc, #32]	@ (8008024 <vTaskStartScheduler+0x68>)
 8008002:	2201      	movs	r2, #1
 8008004:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008006:	4b08      	ldr	r3, [pc, #32]	@ (8008028 <vTaskStartScheduler+0x6c>)
 8008008:	601c      	str	r4, [r3, #0]
}
 800800a:	b008      	add	sp, #32
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008010:	f000 bb80 	b.w	8008714 <xPortStartScheduler>
}
 8008014:	b008      	add	sp, #32
 8008016:	bd10      	pop	{r4, pc}
 8008018:	0800fb6c 	.word	0x0800fb6c
 800801c:	08007e11 	.word	0x08007e11
 8008020:	20001748 	.word	0x20001748
 8008024:	2000175c 	.word	0x2000175c
 8008028:	20001764 	.word	0x20001764

0800802c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800802c:	4a02      	ldr	r2, [pc, #8]	@ (8008038 <vTaskSuspendAll+0xc>)
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	3301      	adds	r3, #1
 8008032:	6013      	str	r3, [r2, #0]
}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20001744 	.word	0x20001744

0800803c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800803c:	4b40      	ldr	r3, [pc, #256]	@ (8008140 <xTaskIncrementTick+0x104>)
 800803e:	681b      	ldr	r3, [r3, #0]
{
 8008040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008044:	2b00      	cmp	r3, #0
 8008046:	d174      	bne.n	8008132 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008048:	4b3e      	ldr	r3, [pc, #248]	@ (8008144 <xTaskIncrementTick+0x108>)
 800804a:	681c      	ldr	r4, [r3, #0]
 800804c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800804e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008050:	b9bc      	cbnz	r4, 8008082 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008052:	4b3d      	ldr	r3, [pc, #244]	@ (8008148 <xTaskIncrementTick+0x10c>)
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	b142      	cbz	r2, 800806c <xTaskIncrementTick+0x30>
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	e7fe      	b.n	800806a <xTaskIncrementTick+0x2e>
 800806c:	4a37      	ldr	r2, [pc, #220]	@ (800814c <xTaskIncrementTick+0x110>)
 800806e:	6819      	ldr	r1, [r3, #0]
 8008070:	6810      	ldr	r0, [r2, #0]
 8008072:	6018      	str	r0, [r3, #0]
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	4a36      	ldr	r2, [pc, #216]	@ (8008150 <xTaskIncrementTick+0x114>)
 8008078:	6813      	ldr	r3, [r2, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	f7ff fe99 	bl	8007db4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008082:	4d34      	ldr	r5, [pc, #208]	@ (8008154 <xTaskIncrementTick+0x118>)
 8008084:	4e34      	ldr	r6, [pc, #208]	@ (8008158 <xTaskIncrementTick+0x11c>)
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	4f34      	ldr	r7, [pc, #208]	@ (800815c <xTaskIncrementTick+0x120>)
 800808a:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 800808c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008090:	d911      	bls.n	80080b6 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008096:	2114      	movs	r1, #20
 8008098:	434a      	muls	r2, r1
 800809a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800809c:	2a02      	cmp	r2, #2
 800809e:	bf28      	it	cs
 80080a0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80080a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008160 <xTaskIncrementTick+0x124>)
 80080a6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80080a8:	2a00      	cmp	r2, #0
}
 80080aa:	bf0c      	ite	eq
 80080ac:	4658      	moveq	r0, fp
 80080ae:	2001      	movne	r0, #1
 80080b0:	b003      	add	sp, #12
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080b6:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8008148 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80080ba:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8008168 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080be:	f8da 2000 	ldr.w	r2, [sl]
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	b91a      	cbnz	r2, 80080ce <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	602a      	str	r2, [r5, #0]
					break;
 80080cc:	e7e1      	b.n	8008092 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080ce:	f8da 2000 	ldr.w	r2, [sl]
 80080d2:	68d2      	ldr	r2, [r2, #12]
 80080d4:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80080dc:	428c      	cmp	r4, r1
 80080de:	d201      	bcs.n	80080e4 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80080e0:	6029      	str	r1, [r5, #0]
						break;
 80080e2:	e7d6      	b.n	8008092 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080e4:	f108 0304 	add.w	r3, r8, #4
 80080e8:	4618      	mov	r0, r3
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	f7ff fa5f 	bl	80075ae <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080f0:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80080f4:	b119      	cbz	r1, 80080fe <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080f6:	f108 0018 	add.w	r0, r8, #24
 80080fa:	f7ff fa58 	bl	80075ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080fe:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008102:	f8d9 3000 	ldr.w	r3, [r9]
 8008106:	2201      	movs	r2, #1
 8008108:	fa02 f100 	lsl.w	r1, r2, r0
 800810c:	4319      	orrs	r1, r3
 800810e:	f04f 0c14 	mov.w	ip, #20
 8008112:	f8c9 1000 	str.w	r1, [r9]
 8008116:	fb0c 6000 	mla	r0, ip, r0, r6
 800811a:	9901      	ldr	r1, [sp, #4]
 800811c:	f7ff fa25 	bl	800756a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008120:	6838      	ldr	r0, [r7, #0]
 8008122:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008126:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008128:	4291      	cmp	r1, r2
 800812a:	bf28      	it	cs
 800812c:	f04f 0b01 	movcs.w	fp, #1
 8008130:	e7c5      	b.n	80080be <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8008132:	4a0c      	ldr	r2, [pc, #48]	@ (8008164 <xTaskIncrementTick+0x128>)
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800813a:	f04f 0b00 	mov.w	fp, #0
 800813e:	e7b1      	b.n	80080a4 <xTaskIncrementTick+0x68>
 8008140:	20001744 	.word	0x20001744
 8008144:	20001764 	.word	0x20001764
 8008148:	200017b0 	.word	0x200017b0
 800814c:	200017ac 	.word	0x200017ac
 8008150:	20001750 	.word	0x20001750
 8008154:	20001748 	.word	0x20001748
 8008158:	200017dc 	.word	0x200017dc
 800815c:	20001868 	.word	0x20001868
 8008160:	20001754 	.word	0x20001754
 8008164:	20001758 	.word	0x20001758
 8008168:	20001760 	.word	0x20001760

0800816c <xTaskResumeAll>:
{
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008170:	4c31      	ldr	r4, [pc, #196]	@ (8008238 <xTaskResumeAll+0xcc>)
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	b943      	cbnz	r3, 8008188 <xTaskResumeAll+0x1c>
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	e7fe      	b.n	8008186 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008188:	f000 fa34 	bl	80085f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	3b01      	subs	r3, #1
 8008190:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008192:	6824      	ldr	r4, [r4, #0]
 8008194:	b12c      	cbz	r4, 80081a2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008196:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008198:	f000 fa4c 	bl	8008634 <vPortExitCritical>
}
 800819c:	4620      	mov	r0, r4
 800819e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081a2:	4b26      	ldr	r3, [pc, #152]	@ (800823c <xTaskResumeAll+0xd0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f5      	beq.n	8008196 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081aa:	4d25      	ldr	r5, [pc, #148]	@ (8008240 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80081ac:	4e25      	ldr	r6, [pc, #148]	@ (8008244 <xTaskResumeAll+0xd8>)
 80081ae:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8008254 <xTaskResumeAll+0xe8>
 80081b2:	e01f      	b.n	80081f4 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80081b4:	68eb      	ldr	r3, [r5, #12]
 80081b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b8:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081bc:	f104 0018 	add.w	r0, r4, #24
 80081c0:	f7ff f9f5 	bl	80075ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c4:	4648      	mov	r0, r9
 80081c6:	f7ff f9f2 	bl	80075ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081cc:	6831      	ldr	r1, [r6, #0]
 80081ce:	2701      	movs	r7, #1
 80081d0:	fa07 f302 	lsl.w	r3, r7, r2
 80081d4:	2014      	movs	r0, #20
 80081d6:	430b      	orrs	r3, r1
 80081d8:	fb00 8002 	mla	r0, r0, r2, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	6033      	str	r3, [r6, #0]
 80081e0:	f7ff f9c3 	bl	800756a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e4:	4b18      	ldr	r3, [pc, #96]	@ (8008248 <xTaskResumeAll+0xdc>)
 80081e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d301      	bcc.n	80081f4 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80081f0:	4b16      	ldr	r3, [pc, #88]	@ (800824c <xTaskResumeAll+0xe0>)
 80081f2:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1dc      	bne.n	80081b4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80081fa:	b10c      	cbz	r4, 8008200 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80081fc:	f7ff fdda 	bl	8007db4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008200:	4d13      	ldr	r5, [pc, #76]	@ (8008250 <xTaskResumeAll+0xe4>)
 8008202:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008204:	b144      	cbz	r4, 8008218 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008206:	4e11      	ldr	r6, [pc, #68]	@ (800824c <xTaskResumeAll+0xe0>)
 8008208:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800820a:	f7ff ff17 	bl	800803c <xTaskIncrementTick>
 800820e:	b100      	cbz	r0, 8008212 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008210:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008212:	3c01      	subs	r4, #1
 8008214:	d1f9      	bne.n	800820a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008216:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008218:	4b0c      	ldr	r3, [pc, #48]	@ (800824c <xTaskResumeAll+0xe0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0ba      	beq.n	8008196 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008220:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008228:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008234:	2401      	movs	r4, #1
 8008236:	e7af      	b.n	8008198 <xTaskResumeAll+0x2c>
 8008238:	20001744 	.word	0x20001744
 800823c:	20001768 	.word	0x20001768
 8008240:	20001798 	.word	0x20001798
 8008244:	20001760 	.word	0x20001760
 8008248:	20001868 	.word	0x20001868
 800824c:	20001754 	.word	0x20001754
 8008250:	20001758 	.word	0x20001758
 8008254:	200017dc 	.word	0x200017dc

08008258 <vTaskDelay>:
	{
 8008258:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800825a:	b950      	cbnz	r0, 8008272 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800825c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
	}
 8008270:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008272:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <vTaskDelay+0x44>)
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	b141      	cbz	r1, 800828a <vTaskDelay+0x32>
 8008278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	e7fe      	b.n	8008288 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800828a:	f7ff fecf 	bl	800802c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800828e:	f7ff fd4d 	bl	8007d2c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008292:	f7ff ff6b 	bl	800816c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008296:	2800      	cmp	r0, #0
 8008298:	d0e0      	beq.n	800825c <vTaskDelay+0x4>
 800829a:	e7e9      	b.n	8008270 <vTaskDelay+0x18>
 800829c:	20001744 	.word	0x20001744

080082a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082a0:	4b17      	ldr	r3, [pc, #92]	@ (8008300 <vTaskSwitchContext+0x60>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b17      	ldr	r3, [pc, #92]	@ (8008304 <vTaskSwitchContext+0x64>)
{
 80082a6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082a8:	b112      	cbz	r2, 80082b0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80082aa:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80082b0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80082b2:	4b15      	ldr	r3, [pc, #84]	@ (8008308 <vTaskSwitchContext+0x68>)
 80082b4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082b6:	fab2 f282 	clz	r2, r2
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	f1c2 021f 	rsb	r2, r2, #31
 80082c0:	2314      	movs	r3, #20
 80082c2:	4912      	ldr	r1, [pc, #72]	@ (800830c <vTaskSwitchContext+0x6c>)
 80082c4:	4353      	muls	r3, r2
 80082c6:	18c8      	adds	r0, r1, r3
 80082c8:	58cc      	ldr	r4, [r1, r3]
 80082ca:	b944      	cbnz	r4, 80082de <vTaskSwitchContext+0x3e>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	e7fe      	b.n	80082dc <vTaskSwitchContext+0x3c>
 80082de:	6844      	ldr	r4, [r0, #4]
 80082e0:	3308      	adds	r3, #8
 80082e2:	6864      	ldr	r4, [r4, #4]
 80082e4:	6044      	str	r4, [r0, #4]
 80082e6:	440b      	add	r3, r1
 80082e8:	429c      	cmp	r4, r3
 80082ea:	bf04      	itt	eq
 80082ec:	6863      	ldreq	r3, [r4, #4]
 80082ee:	6043      	streq	r3, [r0, #4]
 80082f0:	2314      	movs	r3, #20
 80082f2:	fb03 1102 	mla	r1, r3, r2, r1
 80082f6:	684b      	ldr	r3, [r1, #4]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <vTaskSwitchContext+0x70>)
 80082fc:	e7d6      	b.n	80082ac <vTaskSwitchContext+0xc>
 80082fe:	bf00      	nop
 8008300:	20001744 	.word	0x20001744
 8008304:	20001754 	.word	0x20001754
 8008308:	20001760 	.word	0x20001760
 800830c:	200017dc 	.word	0x200017dc
 8008310:	20001868 	.word	0x20001868

08008314 <vTaskPlaceOnEventList>:
{
 8008314:	b510      	push	{r4, lr}
 8008316:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008318:	b940      	cbnz	r0, 800832c <vTaskPlaceOnEventList+0x18>
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	e7fe      	b.n	800832a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800832c:	4b05      	ldr	r3, [pc, #20]	@ (8008344 <vTaskPlaceOnEventList+0x30>)
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	3118      	adds	r1, #24
 8008332:	f7ff f925 	bl	8007580 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008336:	4620      	mov	r0, r4
 8008338:	2101      	movs	r1, #1
}
 800833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800833e:	f7ff bcf5 	b.w	8007d2c <prvAddCurrentTaskToDelayedList>
 8008342:	bf00      	nop
 8008344:	20001868 	.word	0x20001868

08008348 <xTaskRemoveFromEventList>:
{
 8008348:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800834a:	68c3      	ldr	r3, [r0, #12]
 800834c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800834e:	b944      	cbnz	r4, 8008362 <xTaskRemoveFromEventList+0x1a>
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	e7fe      	b.n	8008360 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008362:	f104 0518 	add.w	r5, r4, #24
 8008366:	4628      	mov	r0, r5
 8008368:	f7ff f921 	bl	80075ae <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800836c:	4b11      	ldr	r3, [pc, #68]	@ (80083b4 <xTaskRemoveFromEventList+0x6c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	b9e3      	cbnz	r3, 80083ac <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008372:	1d25      	adds	r5, r4, #4
 8008374:	4628      	mov	r0, r5
 8008376:	f7ff f91a 	bl	80075ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800837a:	490f      	ldr	r1, [pc, #60]	@ (80083b8 <xTaskRemoveFromEventList+0x70>)
 800837c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800837e:	6808      	ldr	r0, [r1, #0]
 8008380:	2301      	movs	r3, #1
 8008382:	4093      	lsls	r3, r2
 8008384:	4303      	orrs	r3, r0
 8008386:	600b      	str	r3, [r1, #0]
 8008388:	4b0c      	ldr	r3, [pc, #48]	@ (80083bc <xTaskRemoveFromEventList+0x74>)
 800838a:	2014      	movs	r0, #20
 800838c:	4629      	mov	r1, r5
 800838e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008392:	f7ff f8ea 	bl	800756a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008396:	4b0a      	ldr	r3, [pc, #40]	@ (80083c0 <xTaskRemoveFromEventList+0x78>)
 8008398:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80083a0:	bf83      	ittte	hi
 80083a2:	4b08      	ldrhi	r3, [pc, #32]	@ (80083c4 <xTaskRemoveFromEventList+0x7c>)
 80083a4:	2001      	movhi	r0, #1
 80083a6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80083a8:	2000      	movls	r0, #0
}
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083ac:	4806      	ldr	r0, [pc, #24]	@ (80083c8 <xTaskRemoveFromEventList+0x80>)
 80083ae:	4629      	mov	r1, r5
 80083b0:	e7ef      	b.n	8008392 <xTaskRemoveFromEventList+0x4a>
 80083b2:	bf00      	nop
 80083b4:	20001744 	.word	0x20001744
 80083b8:	20001760 	.word	0x20001760
 80083bc:	200017dc 	.word	0x200017dc
 80083c0:	20001868 	.word	0x20001868
 80083c4:	20001754 	.word	0x20001754
 80083c8:	20001798 	.word	0x20001798

080083cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083cc:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <vTaskInternalSetTimeOutState+0x10>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80083d2:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <vTaskInternalSetTimeOutState+0x14>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6043      	str	r3, [r0, #4]
}
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20001750 	.word	0x20001750
 80083e0:	20001764 	.word	0x20001764

080083e4 <xTaskCheckForTimeOut>:
{
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80083e8:	4605      	mov	r5, r0
 80083ea:	b940      	cbnz	r0, 80083fe <xTaskCheckForTimeOut+0x1a>
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	e7fe      	b.n	80083fc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80083fe:	b941      	cbnz	r1, 8008412 <xTaskCheckForTimeOut+0x2e>
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	e7fe      	b.n	8008410 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008412:	f000 f8ef 	bl	80085f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008416:	4b0f      	ldr	r3, [pc, #60]	@ (8008454 <xTaskCheckForTimeOut+0x70>)
 8008418:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	d010      	beq.n	8008442 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008420:	480d      	ldr	r0, [pc, #52]	@ (8008458 <xTaskCheckForTimeOut+0x74>)
 8008422:	682e      	ldr	r6, [r5, #0]
 8008424:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008426:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008428:	4286      	cmp	r6, r0
 800842a:	d001      	beq.n	8008430 <xTaskCheckForTimeOut+0x4c>
 800842c:	428a      	cmp	r2, r1
 800842e:	d90f      	bls.n	8008450 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008430:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008432:	4283      	cmp	r3, r0
 8008434:	d90a      	bls.n	800844c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008436:	1a5b      	subs	r3, r3, r1
 8008438:	4413      	add	r3, r2
 800843a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800843c:	4628      	mov	r0, r5
 800843e:	f7ff ffc5 	bl	80083cc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008442:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008444:	f000 f8f6 	bl	8008634 <vPortExitCritical>
}
 8008448:	4620      	mov	r0, r4
 800844a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008450:	2401      	movs	r4, #1
 8008452:	e7f7      	b.n	8008444 <xTaskCheckForTimeOut+0x60>
 8008454:	20001764 	.word	0x20001764
 8008458:	20001750 	.word	0x20001750

0800845c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800845c:	4b01      	ldr	r3, [pc, #4]	@ (8008464 <vTaskMissedYield+0x8>)
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]
}
 8008462:	4770      	bx	lr
 8008464:	20001754 	.word	0x20001754

08008468 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008468:	4b05      	ldr	r3, [pc, #20]	@ (8008480 <xTaskGetSchedulerState+0x18>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	b133      	cbz	r3, 800847c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846e:	4b05      	ldr	r3, [pc, #20]	@ (8008484 <xTaskGetSchedulerState+0x1c>)
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	fab0 f080 	clz	r0, r0
 8008476:	0940      	lsrs	r0, r0, #5
 8008478:	0040      	lsls	r0, r0, #1
 800847a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800847c:	2001      	movs	r0, #1
	}
 800847e:	4770      	bx	lr
 8008480:	2000175c 	.word	0x2000175c
 8008484:	20001744 	.word	0x20001744

08008488 <xTaskPriorityDisinherit>:
	{
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800848a:	4604      	mov	r4, r0
 800848c:	b908      	cbnz	r0, 8008492 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800848e:	2000      	movs	r0, #0
	}
 8008490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008492:	4b22      	ldr	r3, [pc, #136]	@ (800851c <xTaskPriorityDisinherit+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4283      	cmp	r3, r0
 8008498:	d008      	beq.n	80084ac <xTaskPriorityDisinherit+0x24>
 800849a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	e7fe      	b.n	80084aa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80084ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ae:	b943      	cbnz	r3, 80084c2 <xTaskPriorityDisinherit+0x3a>
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	e7fe      	b.n	80084c0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084c2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80084c4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80084c6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084c8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80084ca:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084cc:	d0df      	beq.n	800848e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1dd      	bne.n	800848e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084d2:	1d06      	adds	r6, r0, #4
 80084d4:	4630      	mov	r0, r6
 80084d6:	f7ff f86a 	bl	80075ae <uxListRemove>
 80084da:	4f11      	ldr	r7, [pc, #68]	@ (8008520 <xTaskPriorityDisinherit+0x98>)
 80084dc:	4a11      	ldr	r2, [pc, #68]	@ (8008524 <xTaskPriorityDisinherit+0x9c>)
 80084de:	b950      	cbnz	r0, 80084f6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084e0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084e2:	2314      	movs	r3, #20
 80084e4:	434b      	muls	r3, r1
 80084e6:	58fb      	ldr	r3, [r7, r3]
 80084e8:	b92b      	cbnz	r3, 80084f6 <xTaskPriorityDisinherit+0x6e>
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	2501      	movs	r5, #1
 80084ee:	408d      	lsls	r5, r1
 80084f0:	ea23 0305 	bic.w	r3, r3, r5
 80084f4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80084f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fa:	f1c3 0107 	rsb	r1, r3, #7
 80084fe:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	2401      	movs	r4, #1
 8008504:	fa04 f503 	lsl.w	r5, r4, r3
 8008508:	2014      	movs	r0, #20
 800850a:	430d      	orrs	r5, r1
 800850c:	fb00 7003 	mla	r0, r0, r3, r7
 8008510:	4631      	mov	r1, r6
 8008512:	6015      	str	r5, [r2, #0]
 8008514:	f7ff f829 	bl	800756a <vListInsertEnd>
					xReturn = pdTRUE;
 8008518:	4620      	mov	r0, r4
		return xReturn;
 800851a:	e7b9      	b.n	8008490 <xTaskPriorityDisinherit+0x8>
 800851c:	20001868 	.word	0x20001868
 8008520:	200017dc 	.word	0x200017dc
 8008524:	20001760 	.word	0x20001760

08008528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008528:	4808      	ldr	r0, [pc, #32]	@ (800854c <prvPortStartFirstTask+0x24>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8814 	msr	CONTROL, r0
 800853a:	b662      	cpsie	i
 800853c:	b661      	cpsie	f
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	df00      	svc	0
 8008548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800854a:	0000      	.short	0x0000
 800854c:	e000ed08 	.word	0xe000ed08

08008550 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008550:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008560 <vPortEnableVFP+0x10>
 8008554:	6801      	ldr	r1, [r0, #0]
 8008556:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800855a:	6001      	str	r1, [r0, #0]
 800855c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800855e:	0000      	.short	0x0000
 8008560:	e000ed88 	.word	0xe000ed88

08008564 <prvTaskExitError>:
{
 8008564:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800856a:	4b0d      	ldr	r3, [pc, #52]	@ (80085a0 <prvTaskExitError+0x3c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	d008      	beq.n	8008584 <prvTaskExitError+0x20>
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	e7fe      	b.n	8008582 <prvTaskExitError+0x1e>
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0fc      	beq.n	8008594 <prvTaskExitError+0x30>
}
 800859a:	b002      	add	sp, #8
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000018 	.word	0x20000018

080085a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80085a8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085ac:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <pxPortInitialiseStack+0x28>)
 80085ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085b2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085b6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085ba:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085c2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80085c6:	3844      	subs	r0, #68	@ 0x44
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	08008565 	.word	0x08008565

080085d0 <SVC_Handler>:
	__asm volatile (
 80085d0:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <pxCurrentTCBConst2>)
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	f380 8809 	msr	PSP, r0
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f04f 0000 	mov.w	r0, #0
 80085e6:	f380 8811 	msr	BASEPRI, r0
 80085ea:	4770      	bx	lr
 80085ec:	f3af 8000 	nop.w

080085f0 <pxCurrentTCBConst2>:
 80085f0:	20001868 	.word	0x20001868

080085f4 <vPortEnterCritical>:
 80085f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008604:	4a0a      	ldr	r2, [pc, #40]	@ (8008630 <vPortEnterCritical+0x3c>)
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800860a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800860c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800860e:	d10e      	bne.n	800862e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008610:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008614:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8008618:	b2db      	uxtb	r3, r3
 800861a:	b143      	cbz	r3, 800862e <vPortEnterCritical+0x3a>
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	e7fe      	b.n	800862c <vPortEnterCritical+0x38>
}
 800862e:	4770      	bx	lr
 8008630:	20000018 	.word	0x20000018

08008634 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008634:	4a08      	ldr	r2, [pc, #32]	@ (8008658 <vPortExitCritical+0x24>)
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	b943      	cbnz	r3, 800864c <vPortExitCritical+0x18>
 800863a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	e7fe      	b.n	800864a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800864c:	3b01      	subs	r3, #1
 800864e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008650:	b90b      	cbnz	r3, 8008656 <vPortExitCritical+0x22>
	__asm volatile
 8008652:	f383 8811 	msr	BASEPRI, r3
}
 8008656:	4770      	bx	lr
 8008658:	20000018 	.word	0x20000018
 800865c:	00000000 	.word	0x00000000

08008660 <PendSV_Handler>:
	__asm volatile
 8008660:	f3ef 8009 	mrs	r0, PSP
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4b15      	ldr	r3, [pc, #84]	@ (80086c0 <pxCurrentTCBConst>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f01e 0f10 	tst.w	lr, #16
 8008670:	bf08      	it	eq
 8008672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008684:	f380 8811 	msr	BASEPRI, r0
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f7ff fe06 	bl	80082a0 <vTaskSwitchContext>
 8008694:	f04f 0000 	mov.w	r0, #0
 8008698:	f380 8811 	msr	BASEPRI, r0
 800869c:	bc09      	pop	{r0, r3}
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	6808      	ldr	r0, [r1, #0]
 80086a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a6:	f01e 0f10 	tst.w	lr, #16
 80086aa:	bf08      	it	eq
 80086ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086b0:	f380 8809 	msr	PSP, r0
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w

080086c0 <pxCurrentTCBConst>:
 80086c0:	20001868 	.word	0x20001868

080086c4 <SysTick_Handler>:
{
 80086c4:	b508      	push	{r3, lr}
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80086d6:	f7ff fcb1 	bl	800803c <xTaskIncrementTick>
 80086da:	b128      	cbz	r0, 80086e8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80086e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80086e8:	2300      	movs	r3, #0
 80086ea:	f383 8811 	msr	BASEPRI, r3
}
 80086ee:	bd08      	pop	{r3, pc}

080086f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80086f4:	2300      	movs	r3, #0
 80086f6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086f8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086fa:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <vPortSetupTimerInterrupt+0x20>)
 80086fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	fbb3 f3f1 	udiv	r3, r3, r1
 8008706:	3b01      	subs	r3, #1
 8008708:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800870a:	2307      	movs	r3, #7
 800870c:	6113      	str	r3, [r2, #16]
}
 800870e:	4770      	bx	lr
 8008710:	2000000c 	.word	0x2000000c

08008714 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008714:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800871a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800871e:	4a38      	ldr	r2, [pc, #224]	@ (8008800 <xPortStartScheduler+0xec>)
 8008720:	4291      	cmp	r1, r2
 8008722:	d108      	bne.n	8008736 <xPortStartScheduler+0x22>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	e7fe      	b.n	8008734 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008736:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800873a:	4b32      	ldr	r3, [pc, #200]	@ (8008804 <xPortStartScheduler+0xf0>)
 800873c:	429a      	cmp	r2, r3
 800873e:	d108      	bne.n	8008752 <xPortStartScheduler+0x3e>
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	e7fe      	b.n	8008750 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008752:	4b2d      	ldr	r3, [pc, #180]	@ (8008808 <xPortStartScheduler+0xf4>)
 8008754:	781a      	ldrb	r2, [r3, #0]
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800875a:	22ff      	movs	r2, #255	@ 0xff
 800875c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800875e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008760:	4a2a      	ldr	r2, [pc, #168]	@ (800880c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008768:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800876c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008770:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008772:	4a27      	ldr	r2, [pc, #156]	@ (8008810 <xPortStartScheduler+0xfc>)
 8008774:	2307      	movs	r3, #7
 8008776:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008778:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800877c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800877e:	0609      	lsls	r1, r1, #24
 8008780:	d40a      	bmi.n	8008798 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008782:	2b03      	cmp	r3, #3
 8008784:	d011      	beq.n	80087aa <xPortStartScheduler+0x96>
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	e7fe      	b.n	8008796 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8008798:	3b01      	subs	r3, #1
 800879a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800879c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f88d 3003 	strb.w	r3, [sp, #3]
 80087a8:	e7e6      	b.n	8008778 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80087ae:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	4a15      	ldr	r2, [pc, #84]	@ (8008808 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087b4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80087c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80087cc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80087d4:	f7ff ff8c 	bl	80086f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80087d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <xPortStartScheduler+0x100>)
 80087da:	2500      	movs	r5, #0
 80087dc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80087de:	f7ff feb7 	bl	8008550 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087e2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80087e6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087ea:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80087ee:	f7ff fe9b 	bl	8008528 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80087f2:	f7ff fd55 	bl	80082a0 <vTaskSwitchContext>
	prvTaskExitError();
 80087f6:	f7ff feb5 	bl	8008564 <prvTaskExitError>
}
 80087fa:	4628      	mov	r0, r5
 80087fc:	b003      	add	sp, #12
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	410fc271 	.word	0x410fc271
 8008804:	410fc270 	.word	0x410fc270
 8008808:	e000e400 	.word	0xe000e400
 800880c:	20001870 	.word	0x20001870
 8008810:	2000186c 	.word	0x2000186c
 8008814:	20000018 	.word	0x20000018

08008818 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008818:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800881c:	2b0f      	cmp	r3, #15
 800881e:	d90e      	bls.n	800883e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008820:	4a11      	ldr	r2, [pc, #68]	@ (8008868 <vPortValidateInterruptPriority+0x50>)
 8008822:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008824:	4a11      	ldr	r2, [pc, #68]	@ (800886c <vPortValidateInterruptPriority+0x54>)
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d908      	bls.n	800883e <vPortValidateInterruptPriority+0x26>
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	e7fe      	b.n	800883c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800883e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008842:	4a0b      	ldr	r2, [pc, #44]	@ (8008870 <vPortValidateInterruptPriority+0x58>)
 8008844:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800884e:	4293      	cmp	r3, r2
 8008850:	d908      	bls.n	8008864 <vPortValidateInterruptPriority+0x4c>
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	e7fe      	b.n	8008862 <vPortValidateInterruptPriority+0x4a>
	}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	e000e3f0 	.word	0xe000e3f0
 800886c:	20001870 	.word	0x20001870
 8008870:	2000186c 	.word	0x2000186c

08008874 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008874:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008876:	4b10      	ldr	r3, [pc, #64]	@ (80088b8 <prvInsertBlockIntoFreeList+0x44>)
 8008878:	461a      	mov	r2, r3
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4283      	cmp	r3, r0
 800887e:	d3fb      	bcc.n	8008878 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008880:	6854      	ldr	r4, [r2, #4]
 8008882:	1911      	adds	r1, r2, r4
 8008884:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008886:	bf01      	itttt	eq
 8008888:	6841      	ldreq	r1, [r0, #4]
 800888a:	4610      	moveq	r0, r2
 800888c:	1909      	addeq	r1, r1, r4
 800888e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008890:	6844      	ldr	r4, [r0, #4]
 8008892:	1901      	adds	r1, r0, r4
 8008894:	428b      	cmp	r3, r1
 8008896:	d10c      	bne.n	80088b2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008898:	4908      	ldr	r1, [pc, #32]	@ (80088bc <prvInsertBlockIntoFreeList+0x48>)
 800889a:	6809      	ldr	r1, [r1, #0]
 800889c:	428b      	cmp	r3, r1
 800889e:	d003      	beq.n	80088a8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	4421      	add	r1, r4
 80088a4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088a6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088a8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088aa:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088ac:	bf18      	it	ne
 80088ae:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b2:	4619      	mov	r1, r3
 80088b4:	e7f8      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x34>
 80088b6:	bf00      	nop
 80088b8:	20001884 	.word	0x20001884
 80088bc:	20001880 	.word	0x20001880

080088c0 <pvPortMalloc>:
{
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80088c6:	f7ff fbb1 	bl	800802c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80088ca:	4940      	ldr	r1, [pc, #256]	@ (80089cc <pvPortMalloc+0x10c>)
 80088cc:	4d40      	ldr	r5, [pc, #256]	@ (80089d0 <pvPortMalloc+0x110>)
 80088ce:	680b      	ldr	r3, [r1, #0]
 80088d0:	bb0b      	cbnz	r3, 8008916 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80088d2:	4a40      	ldr	r2, [pc, #256]	@ (80089d4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088d4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088d6:	bf1f      	itttt	ne
 80088d8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088da:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088de:	f502 42fa 	addne.w	r2, r2, #32000	@ 0x7d00
 80088e2:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088e4:	bf0c      	ite	eq
 80088e6:	f44f 43fa 	moveq.w	r3, #32000	@ 0x7d00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088ea:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088ec:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088ee:	4e3a      	ldr	r6, [pc, #232]	@ (80089d8 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 80088f0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f2:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80088f6:	2000      	movs	r0, #0
 80088f8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088fa:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80088fc:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008900:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008902:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8008906:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008908:	4b34      	ldr	r3, [pc, #208]	@ (80089dc <pvPortMalloc+0x11c>)
 800890a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800890c:	4b34      	ldr	r3, [pc, #208]	@ (80089e0 <pvPortMalloc+0x120>)
 800890e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008910:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008914:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008916:	682e      	ldr	r6, [r5, #0]
 8008918:	4226      	tst	r6, r4
 800891a:	d152      	bne.n	80089c2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800891c:	2c00      	cmp	r4, #0
 800891e:	d043      	beq.n	80089a8 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 8008920:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008924:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008926:	bf1c      	itt	ne
 8008928:	f023 0307 	bicne.w	r3, r3, #7
 800892c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800892e:	2b00      	cmp	r3, #0
 8008930:	d047      	beq.n	80089c2 <pvPortMalloc+0x102>
 8008932:	4f2b      	ldr	r7, [pc, #172]	@ (80089e0 <pvPortMalloc+0x120>)
 8008934:	683c      	ldr	r4, [r7, #0]
 8008936:	429c      	cmp	r4, r3
 8008938:	d343      	bcc.n	80089c2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800893a:	4a27      	ldr	r2, [pc, #156]	@ (80089d8 <pvPortMalloc+0x118>)
 800893c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800893e:	6868      	ldr	r0, [r5, #4]
 8008940:	4298      	cmp	r0, r3
 8008942:	d204      	bcs.n	800894e <pvPortMalloc+0x8e>
 8008944:	f8d5 c000 	ldr.w	ip, [r5]
 8008948:	f1bc 0f00 	cmp.w	ip, #0
 800894c:	d115      	bne.n	800897a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800894e:	6809      	ldr	r1, [r1, #0]
 8008950:	42a9      	cmp	r1, r5
 8008952:	d036      	beq.n	80089c2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008954:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008956:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800895a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800895c:	1ac2      	subs	r2, r0, r3
 800895e:	2a10      	cmp	r2, #16
 8008960:	d912      	bls.n	8008988 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008962:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	0741      	lsls	r1, r0, #29
 8008966:	d00b      	beq.n	8008980 <pvPortMalloc+0xc0>
 8008968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	e7fe      	b.n	8008978 <pvPortMalloc+0xb8>
 800897a:	462a      	mov	r2, r5
 800897c:	4665      	mov	r5, ip
 800897e:	e7de      	b.n	800893e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008980:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008982:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008984:	f7ff ff76 	bl	8008874 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008988:	4914      	ldr	r1, [pc, #80]	@ (80089dc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800898a:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800898c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800898e:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008990:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008992:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8008996:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800899a:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800899c:	bf38      	it	cc
 800899e:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089a0:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089a2:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 80089a6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80089a8:	f7ff fbe0 	bl	800816c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ac:	0763      	lsls	r3, r4, #29
 80089ae:	d00a      	beq.n	80089c6 <pvPortMalloc+0x106>
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	e7fe      	b.n	80089c0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 80089c2:	2400      	movs	r4, #0
 80089c4:	e7f0      	b.n	80089a8 <pvPortMalloc+0xe8>
}
 80089c6:	4620      	mov	r0, r4
 80089c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089cc:	20001880 	.word	0x20001880
 80089d0:	20001874 	.word	0x20001874
 80089d4:	2000188c 	.word	0x2000188c
 80089d8:	20001884 	.word	0x20001884
 80089dc:	20001878 	.word	0x20001878
 80089e0:	2000187c 	.word	0x2000187c

080089e4 <vPortFree>:
{
 80089e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80089e6:	4604      	mov	r4, r0
 80089e8:	b370      	cbz	r0, 8008a48 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089ea:	4a18      	ldr	r2, [pc, #96]	@ (8008a4c <vPortFree+0x68>)
 80089ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	4213      	tst	r3, r2
 80089f4:	d108      	bne.n	8008a08 <vPortFree+0x24>
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	e7fe      	b.n	8008a06 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a08:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008a0c:	b141      	cbz	r1, 8008a20 <vPortFree+0x3c>
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	e7fe      	b.n	8008a1e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a20:	ea23 0302 	bic.w	r3, r3, r2
 8008a24:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008a28:	f7ff fb00 	bl	800802c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a2c:	4a08      	ldr	r2, [pc, #32]	@ (8008a50 <vPortFree+0x6c>)
 8008a2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008a32:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a34:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a38:	440b      	add	r3, r1
 8008a3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a3c:	f7ff ff1a 	bl	8008874 <prvInsertBlockIntoFreeList>
}
 8008a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008a44:	f7ff bb92 	b.w	800816c <xTaskResumeAll>
}
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20001874 	.word	0x20001874
 8008a50:	2000187c 	.word	0x2000187c

08008a54 <atoi>:
 8008a54:	220a      	movs	r2, #10
 8008a56:	2100      	movs	r1, #0
 8008a58:	f000 bf44 	b.w	80098e4 <strtol>

08008a5c <malloc>:
 8008a5c:	4b02      	ldr	r3, [pc, #8]	@ (8008a68 <malloc+0xc>)
 8008a5e:	4601      	mov	r1, r0
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f000 b82d 	b.w	8008ac0 <_malloc_r>
 8008a66:	bf00      	nop
 8008a68:	2000019c 	.word	0x2000019c

08008a6c <free>:
 8008a6c:	4b02      	ldr	r3, [pc, #8]	@ (8008a78 <free+0xc>)
 8008a6e:	4601      	mov	r1, r0
 8008a70:	6818      	ldr	r0, [r3, #0]
 8008a72:	f003 bc39 	b.w	800c2e8 <_free_r>
 8008a76:	bf00      	nop
 8008a78:	2000019c 	.word	0x2000019c

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008abc <sbrk_aligned+0x40>)
 8008a80:	460c      	mov	r4, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	4605      	mov	r5, r0
 8008a86:	b911      	cbnz	r1, 8008a8e <sbrk_aligned+0x12>
 8008a88:	f002 fd60 	bl	800b54c <_sbrk_r>
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f002 fd5b 	bl	800b54c <_sbrk_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d103      	bne.n	8008aa2 <sbrk_aligned+0x26>
 8008a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	bd70      	pop	{r4, r5, r6, pc}
 8008aa2:	1cc4      	adds	r4, r0, #3
 8008aa4:	f024 0403 	bic.w	r4, r4, #3
 8008aa8:	42a0      	cmp	r0, r4
 8008aaa:	d0f8      	beq.n	8008a9e <sbrk_aligned+0x22>
 8008aac:	1a21      	subs	r1, r4, r0
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f002 fd4c 	bl	800b54c <_sbrk_r>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d1f2      	bne.n	8008a9e <sbrk_aligned+0x22>
 8008ab8:	e7ef      	b.n	8008a9a <sbrk_aligned+0x1e>
 8008aba:	bf00      	nop
 8008abc:	2000958c 	.word	0x2000958c

08008ac0 <_malloc_r>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	1ccd      	adds	r5, r1, #3
 8008ac6:	f025 0503 	bic.w	r5, r5, #3
 8008aca:	3508      	adds	r5, #8
 8008acc:	2d0c      	cmp	r5, #12
 8008ace:	bf38      	it	cc
 8008ad0:	250c      	movcc	r5, #12
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	db01      	blt.n	8008adc <_malloc_r+0x1c>
 8008ad8:	42a9      	cmp	r1, r5
 8008ada:	d904      	bls.n	8008ae6 <_malloc_r+0x26>
 8008adc:	230c      	movs	r3, #12
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bbc <_malloc_r+0xfc>
 8008aea:	f000 f869 	bl	8008bc0 <__malloc_lock>
 8008aee:	f8d8 3000 	ldr.w	r3, [r8]
 8008af2:	461c      	mov	r4, r3
 8008af4:	bb44      	cbnz	r4, 8008b48 <_malloc_r+0x88>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff ffbf 	bl	8008a7c <sbrk_aligned>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	4604      	mov	r4, r0
 8008b02:	d158      	bne.n	8008bb6 <_malloc_r+0xf6>
 8008b04:	f8d8 4000 	ldr.w	r4, [r8]
 8008b08:	4627      	mov	r7, r4
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	d143      	bne.n	8008b96 <_malloc_r+0xd6>
 8008b0e:	2c00      	cmp	r4, #0
 8008b10:	d04b      	beq.n	8008baa <_malloc_r+0xea>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4639      	mov	r1, r7
 8008b16:	4630      	mov	r0, r6
 8008b18:	eb04 0903 	add.w	r9, r4, r3
 8008b1c:	f002 fd16 	bl	800b54c <_sbrk_r>
 8008b20:	4581      	cmp	r9, r0
 8008b22:	d142      	bne.n	8008baa <_malloc_r+0xea>
 8008b24:	6821      	ldr	r1, [r4, #0]
 8008b26:	1a6d      	subs	r5, r5, r1
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ffa6 	bl	8008a7c <sbrk_aligned>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d03a      	beq.n	8008baa <_malloc_r+0xea>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	442b      	add	r3, r5
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	bb62      	cbnz	r2, 8008b9c <_malloc_r+0xdc>
 8008b42:	f8c8 7000 	str.w	r7, [r8]
 8008b46:	e00f      	b.n	8008b68 <_malloc_r+0xa8>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	1b52      	subs	r2, r2, r5
 8008b4c:	d420      	bmi.n	8008b90 <_malloc_r+0xd0>
 8008b4e:	2a0b      	cmp	r2, #11
 8008b50:	d917      	bls.n	8008b82 <_malloc_r+0xc2>
 8008b52:	1961      	adds	r1, r4, r5
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	6025      	str	r5, [r4, #0]
 8008b58:	bf18      	it	ne
 8008b5a:	6059      	strne	r1, [r3, #4]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	bf08      	it	eq
 8008b60:	f8c8 1000 	streq.w	r1, [r8]
 8008b64:	5162      	str	r2, [r4, r5]
 8008b66:	604b      	str	r3, [r1, #4]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 f82f 	bl	8008bcc <__malloc_unlock>
 8008b6e:	f104 000b 	add.w	r0, r4, #11
 8008b72:	1d23      	adds	r3, r4, #4
 8008b74:	f020 0007 	bic.w	r0, r0, #7
 8008b78:	1ac2      	subs	r2, r0, r3
 8008b7a:	bf1c      	itt	ne
 8008b7c:	1a1b      	subne	r3, r3, r0
 8008b7e:	50a3      	strne	r3, [r4, r2]
 8008b80:	e7af      	b.n	8008ae2 <_malloc_r+0x22>
 8008b82:	6862      	ldr	r2, [r4, #4]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	bf0c      	ite	eq
 8008b88:	f8c8 2000 	streq.w	r2, [r8]
 8008b8c:	605a      	strne	r2, [r3, #4]
 8008b8e:	e7eb      	b.n	8008b68 <_malloc_r+0xa8>
 8008b90:	4623      	mov	r3, r4
 8008b92:	6864      	ldr	r4, [r4, #4]
 8008b94:	e7ae      	b.n	8008af4 <_malloc_r+0x34>
 8008b96:	463c      	mov	r4, r7
 8008b98:	687f      	ldr	r7, [r7, #4]
 8008b9a:	e7b6      	b.n	8008b0a <_malloc_r+0x4a>
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	d1fb      	bne.n	8008b9c <_malloc_r+0xdc>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6053      	str	r3, [r2, #4]
 8008ba8:	e7de      	b.n	8008b68 <_malloc_r+0xa8>
 8008baa:	230c      	movs	r3, #12
 8008bac:	6033      	str	r3, [r6, #0]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f80c 	bl	8008bcc <__malloc_unlock>
 8008bb4:	e794      	b.n	8008ae0 <_malloc_r+0x20>
 8008bb6:	6005      	str	r5, [r0, #0]
 8008bb8:	e7d6      	b.n	8008b68 <_malloc_r+0xa8>
 8008bba:	bf00      	nop
 8008bbc:	20009590 	.word	0x20009590

08008bc0 <__malloc_lock>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__malloc_lock+0x8>)
 8008bc2:	f002 bd11 	b.w	800b5e8 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	200096fa 	.word	0x200096fa

08008bcc <__malloc_unlock>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__malloc_unlock+0x8>)
 8008bce:	f002 bd0d 	b.w	800b5ec <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	200096fa 	.word	0x200096fa

08008bd8 <sulp>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460d      	mov	r5, r1
 8008bde:	ec45 4b10 	vmov	d0, r4, r5
 8008be2:	4616      	mov	r6, r2
 8008be4:	f004 face 	bl	800d184 <__ulp>
 8008be8:	ec51 0b10 	vmov	r0, r1, d0
 8008bec:	b17e      	cbz	r6, 8008c0e <sulp+0x36>
 8008bee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dd09      	ble.n	8008c0e <sulp+0x36>
 8008bfa:	051b      	lsls	r3, r3, #20
 8008bfc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c00:	2400      	movs	r4, #0
 8008c02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	f7f7 fd05 	bl	8000618 <__aeabi_dmul>
 8008c0e:	ec41 0b10 	vmov	d0, r0, r1
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	0000      	movs	r0, r0
	...

08008c18 <_strtod_l>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b09f      	sub	sp, #124	@ 0x7c
 8008c1e:	460c      	mov	r4, r1
 8008c20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c22:	2200      	movs	r2, #0
 8008c24:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c26:	9005      	str	r0, [sp, #20]
 8008c28:	f04f 0a00 	mov.w	sl, #0
 8008c2c:	f04f 0b00 	mov.w	fp, #0
 8008c30:	460a      	mov	r2, r1
 8008c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c34:	7811      	ldrb	r1, [r2, #0]
 8008c36:	292b      	cmp	r1, #43	@ 0x2b
 8008c38:	d04a      	beq.n	8008cd0 <_strtod_l+0xb8>
 8008c3a:	d838      	bhi.n	8008cae <_strtod_l+0x96>
 8008c3c:	290d      	cmp	r1, #13
 8008c3e:	d832      	bhi.n	8008ca6 <_strtod_l+0x8e>
 8008c40:	2908      	cmp	r1, #8
 8008c42:	d832      	bhi.n	8008caa <_strtod_l+0x92>
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d03b      	beq.n	8008cc0 <_strtod_l+0xa8>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c4e:	782a      	ldrb	r2, [r5, #0]
 8008c50:	2a30      	cmp	r2, #48	@ 0x30
 8008c52:	f040 80b3 	bne.w	8008dbc <_strtod_l+0x1a4>
 8008c56:	786a      	ldrb	r2, [r5, #1]
 8008c58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c5c:	2a58      	cmp	r2, #88	@ 0x58
 8008c5e:	d16e      	bne.n	8008d3e <_strtod_l+0x126>
 8008c60:	9302      	str	r3, [sp, #8]
 8008c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	4a8e      	ldr	r2, [pc, #568]	@ (8008ea4 <_strtod_l+0x28c>)
 8008c6c:	9805      	ldr	r0, [sp, #20]
 8008c6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c70:	a919      	add	r1, sp, #100	@ 0x64
 8008c72:	f003 fbeb 	bl	800c44c <__gethex>
 8008c76:	f010 060f 	ands.w	r6, r0, #15
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d005      	beq.n	8008c8a <_strtod_l+0x72>
 8008c7e:	2e06      	cmp	r6, #6
 8008c80:	d128      	bne.n	8008cd4 <_strtod_l+0xbc>
 8008c82:	3501      	adds	r5, #1
 8008c84:	2300      	movs	r3, #0
 8008c86:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 858e 	bne.w	80097ae <_strtod_l+0xb96>
 8008c92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c94:	b1cb      	cbz	r3, 8008cca <_strtod_l+0xb2>
 8008c96:	4652      	mov	r2, sl
 8008c98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c9c:	ec43 2b10 	vmov	d0, r2, r3
 8008ca0:	b01f      	add	sp, #124	@ 0x7c
 8008ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca6:	2920      	cmp	r1, #32
 8008ca8:	d1ce      	bne.n	8008c48 <_strtod_l+0x30>
 8008caa:	3201      	adds	r2, #1
 8008cac:	e7c1      	b.n	8008c32 <_strtod_l+0x1a>
 8008cae:	292d      	cmp	r1, #45	@ 0x2d
 8008cb0:	d1ca      	bne.n	8008c48 <_strtod_l+0x30>
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008cb6:	1c51      	adds	r1, r2, #1
 8008cb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cba:	7852      	ldrb	r2, [r2, #1]
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d1c5      	bne.n	8008c4c <_strtod_l+0x34>
 8008cc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 8570 	bne.w	80097aa <_strtod_l+0xb92>
 8008cca:	4652      	mov	r2, sl
 8008ccc:	465b      	mov	r3, fp
 8008cce:	e7e5      	b.n	8008c9c <_strtod_l+0x84>
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	e7ef      	b.n	8008cb4 <_strtod_l+0x9c>
 8008cd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cd6:	b13a      	cbz	r2, 8008ce8 <_strtod_l+0xd0>
 8008cd8:	2135      	movs	r1, #53	@ 0x35
 8008cda:	a81c      	add	r0, sp, #112	@ 0x70
 8008cdc:	f004 fb4c 	bl	800d378 <__copybits>
 8008ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ce2:	9805      	ldr	r0, [sp, #20]
 8008ce4:	f003 ff1a 	bl	800cb1c <_Bfree>
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cec:	2e04      	cmp	r6, #4
 8008cee:	d806      	bhi.n	8008cfe <_strtod_l+0xe6>
 8008cf0:	e8df f006 	tbb	[pc, r6]
 8008cf4:	201d0314 	.word	0x201d0314
 8008cf8:	14          	.byte	0x14
 8008cf9:	00          	.byte	0x00
 8008cfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cfe:	05e1      	lsls	r1, r4, #23
 8008d00:	bf48      	it	mi
 8008d02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d0a:	0d1b      	lsrs	r3, r3, #20
 8008d0c:	051b      	lsls	r3, r3, #20
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1bb      	bne.n	8008c8a <_strtod_l+0x72>
 8008d12:	f002 fc3d 	bl	800b590 <__errno>
 8008d16:	2322      	movs	r3, #34	@ 0x22
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	e7b6      	b.n	8008c8a <_strtod_l+0x72>
 8008d1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d2c:	e7e7      	b.n	8008cfe <_strtod_l+0xe6>
 8008d2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008eac <_strtod_l+0x294>
 8008d32:	e7e4      	b.n	8008cfe <_strtod_l+0xe6>
 8008d34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d38:	f04f 3aff 	mov.w	sl, #4294967295
 8008d3c:	e7df      	b.n	8008cfe <_strtod_l+0xe6>
 8008d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b30      	cmp	r3, #48	@ 0x30
 8008d48:	d0f9      	beq.n	8008d3e <_strtod_l+0x126>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d09d      	beq.n	8008c8a <_strtod_l+0x72>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d56:	2300      	movs	r3, #0
 8008d58:	9308      	str	r3, [sp, #32]
 8008d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d5c:	461f      	mov	r7, r3
 8008d5e:	220a      	movs	r2, #10
 8008d60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d62:	7805      	ldrb	r5, [r0, #0]
 8008d64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d68:	b2d9      	uxtb	r1, r3
 8008d6a:	2909      	cmp	r1, #9
 8008d6c:	d928      	bls.n	8008dc0 <_strtod_l+0x1a8>
 8008d6e:	494e      	ldr	r1, [pc, #312]	@ (8008ea8 <_strtod_l+0x290>)
 8008d70:	2201      	movs	r2, #1
 8008d72:	f001 fe00 	bl	800a976 <strncmp>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d032      	beq.n	8008de0 <_strtod_l+0x1c8>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4681      	mov	r9, r0
 8008d80:	463d      	mov	r5, r7
 8008d82:	4603      	mov	r3, r0
 8008d84:	2a65      	cmp	r2, #101	@ 0x65
 8008d86:	d001      	beq.n	8008d8c <_strtod_l+0x174>
 8008d88:	2a45      	cmp	r2, #69	@ 0x45
 8008d8a:	d114      	bne.n	8008db6 <_strtod_l+0x19e>
 8008d8c:	b91d      	cbnz	r5, 8008d96 <_strtod_l+0x17e>
 8008d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d90:	4302      	orrs	r2, r0
 8008d92:	d095      	beq.n	8008cc0 <_strtod_l+0xa8>
 8008d94:	2500      	movs	r5, #0
 8008d96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d98:	1c62      	adds	r2, r4, #1
 8008d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d9c:	7862      	ldrb	r2, [r4, #1]
 8008d9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008da0:	d077      	beq.n	8008e92 <_strtod_l+0x27a>
 8008da2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008da4:	d07b      	beq.n	8008e9e <_strtod_l+0x286>
 8008da6:	f04f 0c00 	mov.w	ip, #0
 8008daa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008dae:	2909      	cmp	r1, #9
 8008db0:	f240 8082 	bls.w	8008eb8 <_strtod_l+0x2a0>
 8008db4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008db6:	f04f 0800 	mov.w	r8, #0
 8008dba:	e0a2      	b.n	8008f02 <_strtod_l+0x2ea>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e7c7      	b.n	8008d50 <_strtod_l+0x138>
 8008dc0:	2f08      	cmp	r7, #8
 8008dc2:	bfd5      	itete	le
 8008dc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008dc6:	9908      	ldrgt	r1, [sp, #32]
 8008dc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008dd0:	f100 0001 	add.w	r0, r0, #1
 8008dd4:	bfd4      	ite	le
 8008dd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008dd8:	9308      	strgt	r3, [sp, #32]
 8008dda:	3701      	adds	r7, #1
 8008ddc:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dde:	e7bf      	b.n	8008d60 <_strtod_l+0x148>
 8008de0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008de6:	785a      	ldrb	r2, [r3, #1]
 8008de8:	b37f      	cbz	r7, 8008e4a <_strtod_l+0x232>
 8008dea:	4681      	mov	r9, r0
 8008dec:	463d      	mov	r5, r7
 8008dee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008df2:	2b09      	cmp	r3, #9
 8008df4:	d912      	bls.n	8008e1c <_strtod_l+0x204>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e7c4      	b.n	8008d84 <_strtod_l+0x16c>
 8008dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e00:	785a      	ldrb	r2, [r3, #1]
 8008e02:	3001      	adds	r0, #1
 8008e04:	2a30      	cmp	r2, #48	@ 0x30
 8008e06:	d0f8      	beq.n	8008dfa <_strtod_l+0x1e2>
 8008e08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	f200 84d3 	bhi.w	80097b8 <_strtod_l+0xba0>
 8008e12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e16:	4681      	mov	r9, r0
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	3a30      	subs	r2, #48	@ 0x30
 8008e1e:	f100 0301 	add.w	r3, r0, #1
 8008e22:	d02a      	beq.n	8008e7a <_strtod_l+0x262>
 8008e24:	4499      	add	r9, r3
 8008e26:	eb00 0c05 	add.w	ip, r0, r5
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	210a      	movs	r1, #10
 8008e2e:	4563      	cmp	r3, ip
 8008e30:	d10d      	bne.n	8008e4e <_strtod_l+0x236>
 8008e32:	1c69      	adds	r1, r5, #1
 8008e34:	4401      	add	r1, r0
 8008e36:	4428      	add	r0, r5
 8008e38:	2808      	cmp	r0, #8
 8008e3a:	dc16      	bgt.n	8008e6a <_strtod_l+0x252>
 8008e3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e3e:	230a      	movs	r3, #10
 8008e40:	fb03 2300 	mla	r3, r3, r0, r2
 8008e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e46:	2300      	movs	r3, #0
 8008e48:	e018      	b.n	8008e7c <_strtod_l+0x264>
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	e7da      	b.n	8008e04 <_strtod_l+0x1ec>
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	f103 0301 	add.w	r3, r3, #1
 8008e54:	dc03      	bgt.n	8008e5e <_strtod_l+0x246>
 8008e56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e58:	434e      	muls	r6, r1
 8008e5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e5c:	e7e7      	b.n	8008e2e <_strtod_l+0x216>
 8008e5e:	2b10      	cmp	r3, #16
 8008e60:	bfde      	ittt	le
 8008e62:	9e08      	ldrle	r6, [sp, #32]
 8008e64:	434e      	mulle	r6, r1
 8008e66:	9608      	strle	r6, [sp, #32]
 8008e68:	e7e1      	b.n	8008e2e <_strtod_l+0x216>
 8008e6a:	280f      	cmp	r0, #15
 8008e6c:	dceb      	bgt.n	8008e46 <_strtod_l+0x22e>
 8008e6e:	9808      	ldr	r0, [sp, #32]
 8008e70:	230a      	movs	r3, #10
 8008e72:	fb03 2300 	mla	r3, r3, r0, r2
 8008e76:	9308      	str	r3, [sp, #32]
 8008e78:	e7e5      	b.n	8008e46 <_strtod_l+0x22e>
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e7e:	1c50      	adds	r0, r2, #1
 8008e80:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e82:	7852      	ldrb	r2, [r2, #1]
 8008e84:	4618      	mov	r0, r3
 8008e86:	460d      	mov	r5, r1
 8008e88:	e7b1      	b.n	8008dee <_strtod_l+0x1d6>
 8008e8a:	f04f 0900 	mov.w	r9, #0
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e77d      	b.n	8008d8e <_strtod_l+0x176>
 8008e92:	f04f 0c00 	mov.w	ip, #0
 8008e96:	1ca2      	adds	r2, r4, #2
 8008e98:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e9a:	78a2      	ldrb	r2, [r4, #2]
 8008e9c:	e785      	b.n	8008daa <_strtod_l+0x192>
 8008e9e:	f04f 0c01 	mov.w	ip, #1
 8008ea2:	e7f8      	b.n	8008e96 <_strtod_l+0x27e>
 8008ea4:	0800fb88 	.word	0x0800fb88
 8008ea8:	0800fb71 	.word	0x0800fb71
 8008eac:	7ff00000 	.word	0x7ff00000
 8008eb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb2:	1c51      	adds	r1, r2, #1
 8008eb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008eb6:	7852      	ldrb	r2, [r2, #1]
 8008eb8:	2a30      	cmp	r2, #48	@ 0x30
 8008eba:	d0f9      	beq.n	8008eb0 <_strtod_l+0x298>
 8008ebc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ec0:	2908      	cmp	r1, #8
 8008ec2:	f63f af78 	bhi.w	8008db6 <_strtod_l+0x19e>
 8008ec6:	3a30      	subs	r2, #48	@ 0x30
 8008ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ecc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ece:	f04f 080a 	mov.w	r8, #10
 8008ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ed4:	1c56      	adds	r6, r2, #1
 8008ed6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ed8:	7852      	ldrb	r2, [r2, #1]
 8008eda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ede:	f1be 0f09 	cmp.w	lr, #9
 8008ee2:	d939      	bls.n	8008f58 <_strtod_l+0x340>
 8008ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ee6:	1a76      	subs	r6, r6, r1
 8008ee8:	2e08      	cmp	r6, #8
 8008eea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008eee:	dc03      	bgt.n	8008ef8 <_strtod_l+0x2e0>
 8008ef0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ef2:	4588      	cmp	r8, r1
 8008ef4:	bfa8      	it	ge
 8008ef6:	4688      	movge	r8, r1
 8008ef8:	f1bc 0f00 	cmp.w	ip, #0
 8008efc:	d001      	beq.n	8008f02 <_strtod_l+0x2ea>
 8008efe:	f1c8 0800 	rsb	r8, r8, #0
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	d14e      	bne.n	8008fa4 <_strtod_l+0x38c>
 8008f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f08:	4308      	orrs	r0, r1
 8008f0a:	f47f aebe 	bne.w	8008c8a <_strtod_l+0x72>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f aed6 	bne.w	8008cc0 <_strtod_l+0xa8>
 8008f14:	2a69      	cmp	r2, #105	@ 0x69
 8008f16:	d028      	beq.n	8008f6a <_strtod_l+0x352>
 8008f18:	dc25      	bgt.n	8008f66 <_strtod_l+0x34e>
 8008f1a:	2a49      	cmp	r2, #73	@ 0x49
 8008f1c:	d025      	beq.n	8008f6a <_strtod_l+0x352>
 8008f1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f20:	f47f aece 	bne.w	8008cc0 <_strtod_l+0xa8>
 8008f24:	499b      	ldr	r1, [pc, #620]	@ (8009194 <_strtod_l+0x57c>)
 8008f26:	a819      	add	r0, sp, #100	@ 0x64
 8008f28:	f003 fcb2 	bl	800c890 <__match>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f aec7 	beq.w	8008cc0 <_strtod_l+0xa8>
 8008f32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b28      	cmp	r3, #40	@ 0x28
 8008f38:	d12e      	bne.n	8008f98 <_strtod_l+0x380>
 8008f3a:	4997      	ldr	r1, [pc, #604]	@ (8009198 <_strtod_l+0x580>)
 8008f3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f3e:	a819      	add	r0, sp, #100	@ 0x64
 8008f40:	f003 fcba 	bl	800c8b8 <__hexnan>
 8008f44:	2805      	cmp	r0, #5
 8008f46:	d127      	bne.n	8008f98 <_strtod_l+0x380>
 8008f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f56:	e698      	b.n	8008c8a <_strtod_l+0x72>
 8008f58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f5a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f62:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f64:	e7b5      	b.n	8008ed2 <_strtod_l+0x2ba>
 8008f66:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f68:	e7da      	b.n	8008f20 <_strtod_l+0x308>
 8008f6a:	498c      	ldr	r1, [pc, #560]	@ (800919c <_strtod_l+0x584>)
 8008f6c:	a819      	add	r0, sp, #100	@ 0x64
 8008f6e:	f003 fc8f 	bl	800c890 <__match>
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f43f aea4 	beq.w	8008cc0 <_strtod_l+0xa8>
 8008f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f7a:	4989      	ldr	r1, [pc, #548]	@ (80091a0 <_strtod_l+0x588>)
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	a819      	add	r0, sp, #100	@ 0x64
 8008f80:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f82:	f003 fc85 	bl	800c890 <__match>
 8008f86:	b910      	cbnz	r0, 8008f8e <_strtod_l+0x376>
 8008f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80091b0 <_strtod_l+0x598>
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	e678      	b.n	8008c8a <_strtod_l+0x72>
 8008f98:	4882      	ldr	r0, [pc, #520]	@ (80091a4 <_strtod_l+0x58c>)
 8008f9a:	f002 fb41 	bl	800b620 <nan>
 8008f9e:	ec5b ab10 	vmov	sl, fp, d0
 8008fa2:	e672      	b.n	8008c8a <_strtod_l+0x72>
 8008fa4:	eba8 0309 	sub.w	r3, r8, r9
 8008fa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fac:	2f00      	cmp	r7, #0
 8008fae:	bf08      	it	eq
 8008fb0:	462f      	moveq	r7, r5
 8008fb2:	2d10      	cmp	r5, #16
 8008fb4:	462c      	mov	r4, r5
 8008fb6:	bfa8      	it	ge
 8008fb8:	2410      	movge	r4, #16
 8008fba:	f7f7 fab3 	bl	8000524 <__aeabi_ui2d>
 8008fbe:	2d09      	cmp	r5, #9
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	dc13      	bgt.n	8008fee <_strtod_l+0x3d6>
 8008fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f43f ae5e 	beq.w	8008c8a <_strtod_l+0x72>
 8008fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd0:	dd78      	ble.n	80090c4 <_strtod_l+0x4ac>
 8008fd2:	2b16      	cmp	r3, #22
 8008fd4:	dc5f      	bgt.n	8009096 <_strtod_l+0x47e>
 8008fd6:	4974      	ldr	r1, [pc, #464]	@ (80091a8 <_strtod_l+0x590>)
 8008fd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	465b      	mov	r3, fp
 8008fe4:	f7f7 fb18 	bl	8000618 <__aeabi_dmul>
 8008fe8:	4682      	mov	sl, r0
 8008fea:	468b      	mov	fp, r1
 8008fec:	e64d      	b.n	8008c8a <_strtod_l+0x72>
 8008fee:	4b6e      	ldr	r3, [pc, #440]	@ (80091a8 <_strtod_l+0x590>)
 8008ff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ff4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ff8:	f7f7 fb0e 	bl	8000618 <__aeabi_dmul>
 8008ffc:	4682      	mov	sl, r0
 8008ffe:	9808      	ldr	r0, [sp, #32]
 8009000:	468b      	mov	fp, r1
 8009002:	f7f7 fa8f 	bl	8000524 <__aeabi_ui2d>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4650      	mov	r0, sl
 800900c:	4659      	mov	r1, fp
 800900e:	f7f7 f94d 	bl	80002ac <__adddf3>
 8009012:	2d0f      	cmp	r5, #15
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	ddd5      	ble.n	8008fc6 <_strtod_l+0x3ae>
 800901a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901c:	1b2c      	subs	r4, r5, r4
 800901e:	441c      	add	r4, r3
 8009020:	2c00      	cmp	r4, #0
 8009022:	f340 8096 	ble.w	8009152 <_strtod_l+0x53a>
 8009026:	f014 030f 	ands.w	r3, r4, #15
 800902a:	d00a      	beq.n	8009042 <_strtod_l+0x42a>
 800902c:	495e      	ldr	r1, [pc, #376]	@ (80091a8 <_strtod_l+0x590>)
 800902e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009032:	4652      	mov	r2, sl
 8009034:	465b      	mov	r3, fp
 8009036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903a:	f7f7 faed 	bl	8000618 <__aeabi_dmul>
 800903e:	4682      	mov	sl, r0
 8009040:	468b      	mov	fp, r1
 8009042:	f034 040f 	bics.w	r4, r4, #15
 8009046:	d073      	beq.n	8009130 <_strtod_l+0x518>
 8009048:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800904c:	dd48      	ble.n	80090e0 <_strtod_l+0x4c8>
 800904e:	2400      	movs	r4, #0
 8009050:	46a0      	mov	r8, r4
 8009052:	940a      	str	r4, [sp, #40]	@ 0x28
 8009054:	46a1      	mov	r9, r4
 8009056:	9a05      	ldr	r2, [sp, #20]
 8009058:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80091b0 <_strtod_l+0x598>
 800905c:	2322      	movs	r3, #34	@ 0x22
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	f04f 0a00 	mov.w	sl, #0
 8009064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f ae0f 	beq.w	8008c8a <_strtod_l+0x72>
 800906c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	f003 fd54 	bl	800cb1c <_Bfree>
 8009074:	9805      	ldr	r0, [sp, #20]
 8009076:	4649      	mov	r1, r9
 8009078:	f003 fd50 	bl	800cb1c <_Bfree>
 800907c:	9805      	ldr	r0, [sp, #20]
 800907e:	4641      	mov	r1, r8
 8009080:	f003 fd4c 	bl	800cb1c <_Bfree>
 8009084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009086:	9805      	ldr	r0, [sp, #20]
 8009088:	f003 fd48 	bl	800cb1c <_Bfree>
 800908c:	9805      	ldr	r0, [sp, #20]
 800908e:	4621      	mov	r1, r4
 8009090:	f003 fd44 	bl	800cb1c <_Bfree>
 8009094:	e5f9      	b.n	8008c8a <_strtod_l+0x72>
 8009096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009098:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800909c:	4293      	cmp	r3, r2
 800909e:	dbbc      	blt.n	800901a <_strtod_l+0x402>
 80090a0:	4c41      	ldr	r4, [pc, #260]	@ (80091a8 <_strtod_l+0x590>)
 80090a2:	f1c5 050f 	rsb	r5, r5, #15
 80090a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b2:	f7f7 fab1 	bl	8000618 <__aeabi_dmul>
 80090b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b8:	1b5d      	subs	r5, r3, r5
 80090ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80090be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090c2:	e78f      	b.n	8008fe4 <_strtod_l+0x3cc>
 80090c4:	3316      	adds	r3, #22
 80090c6:	dba8      	blt.n	800901a <_strtod_l+0x402>
 80090c8:	4b37      	ldr	r3, [pc, #220]	@ (80091a8 <_strtod_l+0x590>)
 80090ca:	eba9 0808 	sub.w	r8, r9, r8
 80090ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090d6:	4650      	mov	r0, sl
 80090d8:	4659      	mov	r1, fp
 80090da:	f7f7 fbc7 	bl	800086c <__aeabi_ddiv>
 80090de:	e783      	b.n	8008fe8 <_strtod_l+0x3d0>
 80090e0:	4b32      	ldr	r3, [pc, #200]	@ (80091ac <_strtod_l+0x594>)
 80090e2:	9308      	str	r3, [sp, #32]
 80090e4:	2300      	movs	r3, #0
 80090e6:	1124      	asrs	r4, r4, #4
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	461e      	mov	r6, r3
 80090ee:	2c01      	cmp	r4, #1
 80090f0:	dc21      	bgt.n	8009136 <_strtod_l+0x51e>
 80090f2:	b10b      	cbz	r3, 80090f8 <_strtod_l+0x4e0>
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	492c      	ldr	r1, [pc, #176]	@ (80091ac <_strtod_l+0x594>)
 80090fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800910a:	f7f7 fa85 	bl	8000618 <__aeabi_dmul>
 800910e:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <_strtod_l+0x598>)
 8009110:	460a      	mov	r2, r1
 8009112:	400b      	ands	r3, r1
 8009114:	4927      	ldr	r1, [pc, #156]	@ (80091b4 <_strtod_l+0x59c>)
 8009116:	428b      	cmp	r3, r1
 8009118:	4682      	mov	sl, r0
 800911a:	d898      	bhi.n	800904e <_strtod_l+0x436>
 800911c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009120:	428b      	cmp	r3, r1
 8009122:	bf86      	itte	hi
 8009124:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80091b8 <_strtod_l+0x5a0>
 8009128:	f04f 3aff 	movhi.w	sl, #4294967295
 800912c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009130:	2300      	movs	r3, #0
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	e07a      	b.n	800922c <_strtod_l+0x614>
 8009136:	07e2      	lsls	r2, r4, #31
 8009138:	d505      	bpl.n	8009146 <_strtod_l+0x52e>
 800913a:	9b08      	ldr	r3, [sp, #32]
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 fa6a 	bl	8000618 <__aeabi_dmul>
 8009144:	2301      	movs	r3, #1
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	3208      	adds	r2, #8
 800914a:	3601      	adds	r6, #1
 800914c:	1064      	asrs	r4, r4, #1
 800914e:	9208      	str	r2, [sp, #32]
 8009150:	e7cd      	b.n	80090ee <_strtod_l+0x4d6>
 8009152:	d0ed      	beq.n	8009130 <_strtod_l+0x518>
 8009154:	4264      	negs	r4, r4
 8009156:	f014 020f 	ands.w	r2, r4, #15
 800915a:	d00a      	beq.n	8009172 <_strtod_l+0x55a>
 800915c:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <_strtod_l+0x590>)
 800915e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009162:	4650      	mov	r0, sl
 8009164:	4659      	mov	r1, fp
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 fb7f 	bl	800086c <__aeabi_ddiv>
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	1124      	asrs	r4, r4, #4
 8009174:	d0dc      	beq.n	8009130 <_strtod_l+0x518>
 8009176:	2c1f      	cmp	r4, #31
 8009178:	dd20      	ble.n	80091bc <_strtod_l+0x5a4>
 800917a:	2400      	movs	r4, #0
 800917c:	46a0      	mov	r8, r4
 800917e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009180:	46a1      	mov	r9, r4
 8009182:	9a05      	ldr	r2, [sp, #20]
 8009184:	2322      	movs	r3, #34	@ 0x22
 8009186:	f04f 0a00 	mov.w	sl, #0
 800918a:	f04f 0b00 	mov.w	fp, #0
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	e768      	b.n	8009064 <_strtod_l+0x44c>
 8009192:	bf00      	nop
 8009194:	0800fcd6 	.word	0x0800fcd6
 8009198:	0800fb74 	.word	0x0800fb74
 800919c:	0800fcce 	.word	0x0800fcce
 80091a0:	0800fdb7 	.word	0x0800fdb7
 80091a4:	0800f639 	.word	0x0800f639
 80091a8:	0800ff30 	.word	0x0800ff30
 80091ac:	0800ff08 	.word	0x0800ff08
 80091b0:	7ff00000 	.word	0x7ff00000
 80091b4:	7ca00000 	.word	0x7ca00000
 80091b8:	7fefffff 	.word	0x7fefffff
 80091bc:	f014 0310 	ands.w	r3, r4, #16
 80091c0:	bf18      	it	ne
 80091c2:	236a      	movne	r3, #106	@ 0x6a
 80091c4:	4ea9      	ldr	r6, [pc, #676]	@ (800946c <_strtod_l+0x854>)
 80091c6:	9308      	str	r3, [sp, #32]
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	2300      	movs	r3, #0
 80091ce:	07e2      	lsls	r2, r4, #31
 80091d0:	d504      	bpl.n	80091dc <_strtod_l+0x5c4>
 80091d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091d6:	f7f7 fa1f 	bl	8000618 <__aeabi_dmul>
 80091da:	2301      	movs	r3, #1
 80091dc:	1064      	asrs	r4, r4, #1
 80091de:	f106 0608 	add.w	r6, r6, #8
 80091e2:	d1f4      	bne.n	80091ce <_strtod_l+0x5b6>
 80091e4:	b10b      	cbz	r3, 80091ea <_strtod_l+0x5d2>
 80091e6:	4682      	mov	sl, r0
 80091e8:	468b      	mov	fp, r1
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	b1b3      	cbz	r3, 800921c <_strtod_l+0x604>
 80091ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	4659      	mov	r1, fp
 80091fa:	dd0f      	ble.n	800921c <_strtod_l+0x604>
 80091fc:	2b1f      	cmp	r3, #31
 80091fe:	dd55      	ble.n	80092ac <_strtod_l+0x694>
 8009200:	2b34      	cmp	r3, #52	@ 0x34
 8009202:	bfde      	ittt	le
 8009204:	f04f 33ff 	movle.w	r3, #4294967295
 8009208:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800920c:	4093      	lslle	r3, r2
 800920e:	f04f 0a00 	mov.w	sl, #0
 8009212:	bfcc      	ite	gt
 8009214:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009218:	ea03 0b01 	andle.w	fp, r3, r1
 800921c:	2200      	movs	r2, #0
 800921e:	2300      	movs	r3, #0
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	f7f7 fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8009228:	2800      	cmp	r0, #0
 800922a:	d1a6      	bne.n	800917a <_strtod_l+0x562>
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009232:	9805      	ldr	r0, [sp, #20]
 8009234:	462b      	mov	r3, r5
 8009236:	463a      	mov	r2, r7
 8009238:	f003 fcd8 	bl	800cbec <__s2b>
 800923c:	900a      	str	r0, [sp, #40]	@ 0x28
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f af05 	beq.w	800904e <_strtod_l+0x436>
 8009244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009246:	2a00      	cmp	r2, #0
 8009248:	eba9 0308 	sub.w	r3, r9, r8
 800924c:	bfa8      	it	ge
 800924e:	2300      	movge	r3, #0
 8009250:	9312      	str	r3, [sp, #72]	@ 0x48
 8009252:	2400      	movs	r4, #0
 8009254:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009258:	9316      	str	r3, [sp, #88]	@ 0x58
 800925a:	46a0      	mov	r8, r4
 800925c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925e:	9805      	ldr	r0, [sp, #20]
 8009260:	6859      	ldr	r1, [r3, #4]
 8009262:	f003 fc1b 	bl	800ca9c <_Balloc>
 8009266:	4681      	mov	r9, r0
 8009268:	2800      	cmp	r0, #0
 800926a:	f43f aef4 	beq.w	8009056 <_strtod_l+0x43e>
 800926e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	3202      	adds	r2, #2
 8009274:	f103 010c 	add.w	r1, r3, #12
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	300c      	adds	r0, #12
 800927c:	f002 f9bf 	bl	800b5fe <memcpy>
 8009280:	ec4b ab10 	vmov	d0, sl, fp
 8009284:	9805      	ldr	r0, [sp, #20]
 8009286:	aa1c      	add	r2, sp, #112	@ 0x70
 8009288:	a91b      	add	r1, sp, #108	@ 0x6c
 800928a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800928e:	f003 ffe9 	bl	800d264 <__d2b>
 8009292:	901a      	str	r0, [sp, #104]	@ 0x68
 8009294:	2800      	cmp	r0, #0
 8009296:	f43f aede 	beq.w	8009056 <_strtod_l+0x43e>
 800929a:	9805      	ldr	r0, [sp, #20]
 800929c:	2101      	movs	r1, #1
 800929e:	f003 fd3b 	bl	800cd18 <__i2b>
 80092a2:	4680      	mov	r8, r0
 80092a4:	b948      	cbnz	r0, 80092ba <_strtod_l+0x6a2>
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	e6d4      	b.n	8009056 <_strtod_l+0x43e>
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	ea03 0a0a 	and.w	sl, r3, sl
 80092b8:	e7b0      	b.n	800921c <_strtod_l+0x604>
 80092ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80092bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80092be:	2d00      	cmp	r5, #0
 80092c0:	bfab      	itete	ge
 80092c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80092c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092ca:	bfac      	ite	ge
 80092cc:	18ef      	addge	r7, r5, r3
 80092ce:	1b5e      	sublt	r6, r3, r5
 80092d0:	9b08      	ldr	r3, [sp, #32]
 80092d2:	1aed      	subs	r5, r5, r3
 80092d4:	4415      	add	r5, r2
 80092d6:	4b66      	ldr	r3, [pc, #408]	@ (8009470 <_strtod_l+0x858>)
 80092d8:	3d01      	subs	r5, #1
 80092da:	429d      	cmp	r5, r3
 80092dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092e0:	da50      	bge.n	8009384 <_strtod_l+0x76c>
 80092e2:	1b5b      	subs	r3, r3, r5
 80092e4:	2b1f      	cmp	r3, #31
 80092e6:	eba2 0203 	sub.w	r2, r2, r3
 80092ea:	f04f 0101 	mov.w	r1, #1
 80092ee:	dc3d      	bgt.n	800936c <_strtod_l+0x754>
 80092f0:	fa01 f303 	lsl.w	r3, r1, r3
 80092f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092f6:	2300      	movs	r3, #0
 80092f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80092fa:	18bd      	adds	r5, r7, r2
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	42af      	cmp	r7, r5
 8009300:	4416      	add	r6, r2
 8009302:	441e      	add	r6, r3
 8009304:	463b      	mov	r3, r7
 8009306:	bfa8      	it	ge
 8009308:	462b      	movge	r3, r5
 800930a:	42b3      	cmp	r3, r6
 800930c:	bfa8      	it	ge
 800930e:	4633      	movge	r3, r6
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfc2      	ittt	gt
 8009314:	1aed      	subgt	r5, r5, r3
 8009316:	1af6      	subgt	r6, r6, r3
 8009318:	1aff      	subgt	r7, r7, r3
 800931a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800931c:	2b00      	cmp	r3, #0
 800931e:	dd16      	ble.n	800934e <_strtod_l+0x736>
 8009320:	4641      	mov	r1, r8
 8009322:	9805      	ldr	r0, [sp, #20]
 8009324:	461a      	mov	r2, r3
 8009326:	f003 fdb7 	bl	800ce98 <__pow5mult>
 800932a:	4680      	mov	r8, r0
 800932c:	2800      	cmp	r0, #0
 800932e:	d0ba      	beq.n	80092a6 <_strtod_l+0x68e>
 8009330:	4601      	mov	r1, r0
 8009332:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009334:	9805      	ldr	r0, [sp, #20]
 8009336:	f003 fd05 	bl	800cd44 <__multiply>
 800933a:	900e      	str	r0, [sp, #56]	@ 0x38
 800933c:	2800      	cmp	r0, #0
 800933e:	f43f ae8a 	beq.w	8009056 <_strtod_l+0x43e>
 8009342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	f003 fbe9 	bl	800cb1c <_Bfree>
 800934a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800934c:	931a      	str	r3, [sp, #104]	@ 0x68
 800934e:	2d00      	cmp	r5, #0
 8009350:	dc1d      	bgt.n	800938e <_strtod_l+0x776>
 8009352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	dd23      	ble.n	80093a0 <_strtod_l+0x788>
 8009358:	4649      	mov	r1, r9
 800935a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800935c:	9805      	ldr	r0, [sp, #20]
 800935e:	f003 fd9b 	bl	800ce98 <__pow5mult>
 8009362:	4681      	mov	r9, r0
 8009364:	b9e0      	cbnz	r0, 80093a0 <_strtod_l+0x788>
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	e674      	b.n	8009056 <_strtod_l+0x43e>
 800936c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009370:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009374:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009378:	35e2      	adds	r5, #226	@ 0xe2
 800937a:	fa01 f305 	lsl.w	r3, r1, r5
 800937e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009380:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009382:	e7ba      	b.n	80092fa <_strtod_l+0x6e2>
 8009384:	2300      	movs	r3, #0
 8009386:	9310      	str	r3, [sp, #64]	@ 0x40
 8009388:	2301      	movs	r3, #1
 800938a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800938c:	e7b5      	b.n	80092fa <_strtod_l+0x6e2>
 800938e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009390:	9805      	ldr	r0, [sp, #20]
 8009392:	462a      	mov	r2, r5
 8009394:	f003 fdda 	bl	800cf4c <__lshift>
 8009398:	901a      	str	r0, [sp, #104]	@ 0x68
 800939a:	2800      	cmp	r0, #0
 800939c:	d1d9      	bne.n	8009352 <_strtod_l+0x73a>
 800939e:	e65a      	b.n	8009056 <_strtod_l+0x43e>
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	dd07      	ble.n	80093b4 <_strtod_l+0x79c>
 80093a4:	4649      	mov	r1, r9
 80093a6:	9805      	ldr	r0, [sp, #20]
 80093a8:	4632      	mov	r2, r6
 80093aa:	f003 fdcf 	bl	800cf4c <__lshift>
 80093ae:	4681      	mov	r9, r0
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0d8      	beq.n	8009366 <_strtod_l+0x74e>
 80093b4:	2f00      	cmp	r7, #0
 80093b6:	dd08      	ble.n	80093ca <_strtod_l+0x7b2>
 80093b8:	4641      	mov	r1, r8
 80093ba:	9805      	ldr	r0, [sp, #20]
 80093bc:	463a      	mov	r2, r7
 80093be:	f003 fdc5 	bl	800cf4c <__lshift>
 80093c2:	4680      	mov	r8, r0
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f43f ae46 	beq.w	8009056 <_strtod_l+0x43e>
 80093ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093cc:	9805      	ldr	r0, [sp, #20]
 80093ce:	464a      	mov	r2, r9
 80093d0:	f003 fe44 	bl	800d05c <__mdiff>
 80093d4:	4604      	mov	r4, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f43f ae3d 	beq.w	8009056 <_strtod_l+0x43e>
 80093dc:	68c3      	ldr	r3, [r0, #12]
 80093de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093e0:	2300      	movs	r3, #0
 80093e2:	60c3      	str	r3, [r0, #12]
 80093e4:	4641      	mov	r1, r8
 80093e6:	f003 fe1d 	bl	800d024 <__mcmp>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	da46      	bge.n	800947c <_strtod_l+0x864>
 80093ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f0:	ea53 030a 	orrs.w	r3, r3, sl
 80093f4:	d16c      	bne.n	80094d0 <_strtod_l+0x8b8>
 80093f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d168      	bne.n	80094d0 <_strtod_l+0x8b8>
 80093fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009402:	0d1b      	lsrs	r3, r3, #20
 8009404:	051b      	lsls	r3, r3, #20
 8009406:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800940a:	d961      	bls.n	80094d0 <_strtod_l+0x8b8>
 800940c:	6963      	ldr	r3, [r4, #20]
 800940e:	b913      	cbnz	r3, 8009416 <_strtod_l+0x7fe>
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	2b01      	cmp	r3, #1
 8009414:	dd5c      	ble.n	80094d0 <_strtod_l+0x8b8>
 8009416:	4621      	mov	r1, r4
 8009418:	2201      	movs	r2, #1
 800941a:	9805      	ldr	r0, [sp, #20]
 800941c:	f003 fd96 	bl	800cf4c <__lshift>
 8009420:	4641      	mov	r1, r8
 8009422:	4604      	mov	r4, r0
 8009424:	f003 fdfe 	bl	800d024 <__mcmp>
 8009428:	2800      	cmp	r0, #0
 800942a:	dd51      	ble.n	80094d0 <_strtod_l+0x8b8>
 800942c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009430:	9a08      	ldr	r2, [sp, #32]
 8009432:	0d1b      	lsrs	r3, r3, #20
 8009434:	051b      	lsls	r3, r3, #20
 8009436:	2a00      	cmp	r2, #0
 8009438:	d06b      	beq.n	8009512 <_strtod_l+0x8fa>
 800943a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800943e:	d868      	bhi.n	8009512 <_strtod_l+0x8fa>
 8009440:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009444:	f67f ae9d 	bls.w	8009182 <_strtod_l+0x56a>
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <_strtod_l+0x85c>)
 800944a:	4650      	mov	r0, sl
 800944c:	4659      	mov	r1, fp
 800944e:	2200      	movs	r2, #0
 8009450:	f7f7 f8e2 	bl	8000618 <__aeabi_dmul>
 8009454:	4b08      	ldr	r3, [pc, #32]	@ (8009478 <_strtod_l+0x860>)
 8009456:	400b      	ands	r3, r1
 8009458:	4682      	mov	sl, r0
 800945a:	468b      	mov	fp, r1
 800945c:	2b00      	cmp	r3, #0
 800945e:	f47f ae05 	bne.w	800906c <_strtod_l+0x454>
 8009462:	9a05      	ldr	r2, [sp, #20]
 8009464:	2322      	movs	r3, #34	@ 0x22
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	e600      	b.n	800906c <_strtod_l+0x454>
 800946a:	bf00      	nop
 800946c:	0800fba0 	.word	0x0800fba0
 8009470:	fffffc02 	.word	0xfffffc02
 8009474:	39500000 	.word	0x39500000
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009480:	d165      	bne.n	800954e <_strtod_l+0x936>
 8009482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009488:	b35a      	cbz	r2, 80094e2 <_strtod_l+0x8ca>
 800948a:	4a9f      	ldr	r2, [pc, #636]	@ (8009708 <_strtod_l+0xaf0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d12b      	bne.n	80094e8 <_strtod_l+0x8d0>
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	4651      	mov	r1, sl
 8009494:	b303      	cbz	r3, 80094d8 <_strtod_l+0x8c0>
 8009496:	4b9d      	ldr	r3, [pc, #628]	@ (800970c <_strtod_l+0xaf4>)
 8009498:	465a      	mov	r2, fp
 800949a:	4013      	ands	r3, r2
 800949c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80094a0:	f04f 32ff 	mov.w	r2, #4294967295
 80094a4:	d81b      	bhi.n	80094de <_strtod_l+0x8c6>
 80094a6:	0d1b      	lsrs	r3, r3, #20
 80094a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094ac:	fa02 f303 	lsl.w	r3, r2, r3
 80094b0:	4299      	cmp	r1, r3
 80094b2:	d119      	bne.n	80094e8 <_strtod_l+0x8d0>
 80094b4:	4b96      	ldr	r3, [pc, #600]	@ (8009710 <_strtod_l+0xaf8>)
 80094b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d102      	bne.n	80094c2 <_strtod_l+0x8aa>
 80094bc:	3101      	adds	r1, #1
 80094be:	f43f adca 	beq.w	8009056 <_strtod_l+0x43e>
 80094c2:	4b92      	ldr	r3, [pc, #584]	@ (800970c <_strtod_l+0xaf4>)
 80094c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094c6:	401a      	ands	r2, r3
 80094c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094cc:	f04f 0a00 	mov.w	sl, #0
 80094d0:	9b08      	ldr	r3, [sp, #32]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1b8      	bne.n	8009448 <_strtod_l+0x830>
 80094d6:	e5c9      	b.n	800906c <_strtod_l+0x454>
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	e7e8      	b.n	80094b0 <_strtod_l+0x898>
 80094de:	4613      	mov	r3, r2
 80094e0:	e7e6      	b.n	80094b0 <_strtod_l+0x898>
 80094e2:	ea53 030a 	orrs.w	r3, r3, sl
 80094e6:	d0a1      	beq.n	800942c <_strtod_l+0x814>
 80094e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094ea:	b1db      	cbz	r3, 8009524 <_strtod_l+0x90c>
 80094ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094ee:	4213      	tst	r3, r2
 80094f0:	d0ee      	beq.n	80094d0 <_strtod_l+0x8b8>
 80094f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094f4:	9a08      	ldr	r2, [sp, #32]
 80094f6:	4650      	mov	r0, sl
 80094f8:	4659      	mov	r1, fp
 80094fa:	b1bb      	cbz	r3, 800952c <_strtod_l+0x914>
 80094fc:	f7ff fb6c 	bl	8008bd8 <sulp>
 8009500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009504:	ec53 2b10 	vmov	r2, r3, d0
 8009508:	f7f6 fed0 	bl	80002ac <__adddf3>
 800950c:	4682      	mov	sl, r0
 800950e:	468b      	mov	fp, r1
 8009510:	e7de      	b.n	80094d0 <_strtod_l+0x8b8>
 8009512:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009516:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800951a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800951e:	f04f 3aff 	mov.w	sl, #4294967295
 8009522:	e7d5      	b.n	80094d0 <_strtod_l+0x8b8>
 8009524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009526:	ea13 0f0a 	tst.w	r3, sl
 800952a:	e7e1      	b.n	80094f0 <_strtod_l+0x8d8>
 800952c:	f7ff fb54 	bl	8008bd8 <sulp>
 8009530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009534:	ec53 2b10 	vmov	r2, r3, d0
 8009538:	f7f6 feb6 	bl	80002a8 <__aeabi_dsub>
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	4682      	mov	sl, r0
 8009542:	468b      	mov	fp, r1
 8009544:	f7f7 fad0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009548:	2800      	cmp	r0, #0
 800954a:	d0c1      	beq.n	80094d0 <_strtod_l+0x8b8>
 800954c:	e619      	b.n	8009182 <_strtod_l+0x56a>
 800954e:	4641      	mov	r1, r8
 8009550:	4620      	mov	r0, r4
 8009552:	f003 fedf 	bl	800d314 <__ratio>
 8009556:	ec57 6b10 	vmov	r6, r7, d0
 800955a:	2200      	movs	r2, #0
 800955c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	f7f7 fad4 	bl	8000b10 <__aeabi_dcmple>
 8009568:	2800      	cmp	r0, #0
 800956a:	d06f      	beq.n	800964c <_strtod_l+0xa34>
 800956c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d17a      	bne.n	8009668 <_strtod_l+0xa50>
 8009572:	f1ba 0f00 	cmp.w	sl, #0
 8009576:	d158      	bne.n	800962a <_strtod_l+0xa12>
 8009578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800957a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800957e:	2b00      	cmp	r3, #0
 8009580:	d15a      	bne.n	8009638 <_strtod_l+0xa20>
 8009582:	4b64      	ldr	r3, [pc, #400]	@ (8009714 <_strtod_l+0xafc>)
 8009584:	2200      	movs	r2, #0
 8009586:	4630      	mov	r0, r6
 8009588:	4639      	mov	r1, r7
 800958a:	f7f7 fab7 	bl	8000afc <__aeabi_dcmplt>
 800958e:	2800      	cmp	r0, #0
 8009590:	d159      	bne.n	8009646 <_strtod_l+0xa2e>
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	4b60      	ldr	r3, [pc, #384]	@ (8009718 <_strtod_l+0xb00>)
 8009598:	2200      	movs	r2, #0
 800959a:	f7f7 f83d 	bl	8000618 <__aeabi_dmul>
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80095a6:	9606      	str	r6, [sp, #24]
 80095a8:	9307      	str	r3, [sp, #28]
 80095aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095ae:	4d57      	ldr	r5, [pc, #348]	@ (800970c <_strtod_l+0xaf4>)
 80095b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b6:	401d      	ands	r5, r3
 80095b8:	4b58      	ldr	r3, [pc, #352]	@ (800971c <_strtod_l+0xb04>)
 80095ba:	429d      	cmp	r5, r3
 80095bc:	f040 80b2 	bne.w	8009724 <_strtod_l+0xb0c>
 80095c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80095c6:	ec4b ab10 	vmov	d0, sl, fp
 80095ca:	f003 fddb 	bl	800d184 <__ulp>
 80095ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095d2:	ec51 0b10 	vmov	r0, r1, d0
 80095d6:	f7f7 f81f 	bl	8000618 <__aeabi_dmul>
 80095da:	4652      	mov	r2, sl
 80095dc:	465b      	mov	r3, fp
 80095de:	f7f6 fe65 	bl	80002ac <__adddf3>
 80095e2:	460b      	mov	r3, r1
 80095e4:	4949      	ldr	r1, [pc, #292]	@ (800970c <_strtod_l+0xaf4>)
 80095e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009720 <_strtod_l+0xb08>)
 80095e8:	4019      	ands	r1, r3
 80095ea:	4291      	cmp	r1, r2
 80095ec:	4682      	mov	sl, r0
 80095ee:	d942      	bls.n	8009676 <_strtod_l+0xa5e>
 80095f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095f2:	4b47      	ldr	r3, [pc, #284]	@ (8009710 <_strtod_l+0xaf8>)
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d103      	bne.n	8009600 <_strtod_l+0x9e8>
 80095f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095fa:	3301      	adds	r3, #1
 80095fc:	f43f ad2b 	beq.w	8009056 <_strtod_l+0x43e>
 8009600:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009710 <_strtod_l+0xaf8>
 8009604:	f04f 3aff 	mov.w	sl, #4294967295
 8009608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800960a:	9805      	ldr	r0, [sp, #20]
 800960c:	f003 fa86 	bl	800cb1c <_Bfree>
 8009610:	9805      	ldr	r0, [sp, #20]
 8009612:	4649      	mov	r1, r9
 8009614:	f003 fa82 	bl	800cb1c <_Bfree>
 8009618:	9805      	ldr	r0, [sp, #20]
 800961a:	4641      	mov	r1, r8
 800961c:	f003 fa7e 	bl	800cb1c <_Bfree>
 8009620:	9805      	ldr	r0, [sp, #20]
 8009622:	4621      	mov	r1, r4
 8009624:	f003 fa7a 	bl	800cb1c <_Bfree>
 8009628:	e618      	b.n	800925c <_strtod_l+0x644>
 800962a:	f1ba 0f01 	cmp.w	sl, #1
 800962e:	d103      	bne.n	8009638 <_strtod_l+0xa20>
 8009630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009632:	2b00      	cmp	r3, #0
 8009634:	f43f ada5 	beq.w	8009182 <_strtod_l+0x56a>
 8009638:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096e8 <_strtod_l+0xad0>
 800963c:	4f35      	ldr	r7, [pc, #212]	@ (8009714 <_strtod_l+0xafc>)
 800963e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009642:	2600      	movs	r6, #0
 8009644:	e7b1      	b.n	80095aa <_strtod_l+0x992>
 8009646:	4f34      	ldr	r7, [pc, #208]	@ (8009718 <_strtod_l+0xb00>)
 8009648:	2600      	movs	r6, #0
 800964a:	e7aa      	b.n	80095a2 <_strtod_l+0x98a>
 800964c:	4b32      	ldr	r3, [pc, #200]	@ (8009718 <_strtod_l+0xb00>)
 800964e:	4630      	mov	r0, r6
 8009650:	4639      	mov	r1, r7
 8009652:	2200      	movs	r2, #0
 8009654:	f7f6 ffe0 	bl	8000618 <__aeabi_dmul>
 8009658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800965a:	4606      	mov	r6, r0
 800965c:	460f      	mov	r7, r1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d09f      	beq.n	80095a2 <_strtod_l+0x98a>
 8009662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009666:	e7a0      	b.n	80095aa <_strtod_l+0x992>
 8009668:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096f0 <_strtod_l+0xad8>
 800966c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009670:	ec57 6b17 	vmov	r6, r7, d7
 8009674:	e799      	b.n	80095aa <_strtod_l+0x992>
 8009676:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1c1      	bne.n	8009608 <_strtod_l+0x9f0>
 8009684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009688:	0d1b      	lsrs	r3, r3, #20
 800968a:	051b      	lsls	r3, r3, #20
 800968c:	429d      	cmp	r5, r3
 800968e:	d1bb      	bne.n	8009608 <_strtod_l+0x9f0>
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 fb08 	bl	8000ca8 <__aeabi_d2lz>
 8009698:	f7f6 ff90 	bl	80005bc <__aeabi_l2d>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fe00 	bl	80002a8 <__aeabi_dsub>
 80096a8:	460b      	mov	r3, r1
 80096aa:	4602      	mov	r2, r0
 80096ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80096b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80096b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096b6:	ea46 060a 	orr.w	r6, r6, sl
 80096ba:	431e      	orrs	r6, r3
 80096bc:	d06f      	beq.n	800979e <_strtod_l+0xb86>
 80096be:	a30e      	add	r3, pc, #56	@ (adr r3, 80096f8 <_strtod_l+0xae0>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f7 fa1a 	bl	8000afc <__aeabi_dcmplt>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f47f accf 	bne.w	800906c <_strtod_l+0x454>
 80096ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8009700 <_strtod_l+0xae8>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096d8:	f7f7 fa2e 	bl	8000b38 <__aeabi_dcmpgt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d093      	beq.n	8009608 <_strtod_l+0x9f0>
 80096e0:	e4c4      	b.n	800906c <_strtod_l+0x454>
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	00000000 	.word	0x00000000
 80096ec:	bff00000 	.word	0xbff00000
 80096f0:	00000000 	.word	0x00000000
 80096f4:	3ff00000 	.word	0x3ff00000
 80096f8:	94a03595 	.word	0x94a03595
 80096fc:	3fdfffff 	.word	0x3fdfffff
 8009700:	35afe535 	.word	0x35afe535
 8009704:	3fe00000 	.word	0x3fe00000
 8009708:	000fffff 	.word	0x000fffff
 800970c:	7ff00000 	.word	0x7ff00000
 8009710:	7fefffff 	.word	0x7fefffff
 8009714:	3ff00000 	.word	0x3ff00000
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	7fe00000 	.word	0x7fe00000
 8009720:	7c9fffff 	.word	0x7c9fffff
 8009724:	9b08      	ldr	r3, [sp, #32]
 8009726:	b323      	cbz	r3, 8009772 <_strtod_l+0xb5a>
 8009728:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800972c:	d821      	bhi.n	8009772 <_strtod_l+0xb5a>
 800972e:	a328      	add	r3, pc, #160	@ (adr r3, 80097d0 <_strtod_l+0xbb8>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f7 f9ea 	bl	8000b10 <__aeabi_dcmple>
 800973c:	b1a0      	cbz	r0, 8009768 <_strtod_l+0xb50>
 800973e:	4639      	mov	r1, r7
 8009740:	4630      	mov	r0, r6
 8009742:	f7f7 fa41 	bl	8000bc8 <__aeabi_d2uiz>
 8009746:	2801      	cmp	r0, #1
 8009748:	bf38      	it	cc
 800974a:	2001      	movcc	r0, #1
 800974c:	f7f6 feea 	bl	8000524 <__aeabi_ui2d>
 8009750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	b9fb      	cbnz	r3, 8009798 <_strtod_l+0xb80>
 8009758:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800975c:	9014      	str	r0, [sp, #80]	@ 0x50
 800975e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009760:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009764:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009768:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800976a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800976e:	1b5b      	subs	r3, r3, r5
 8009770:	9311      	str	r3, [sp, #68]	@ 0x44
 8009772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009776:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800977a:	f003 fd03 	bl	800d184 <__ulp>
 800977e:	4650      	mov	r0, sl
 8009780:	ec53 2b10 	vmov	r2, r3, d0
 8009784:	4659      	mov	r1, fp
 8009786:	f7f6 ff47 	bl	8000618 <__aeabi_dmul>
 800978a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800978e:	f7f6 fd8d 	bl	80002ac <__adddf3>
 8009792:	4682      	mov	sl, r0
 8009794:	468b      	mov	fp, r1
 8009796:	e770      	b.n	800967a <_strtod_l+0xa62>
 8009798:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800979c:	e7e0      	b.n	8009760 <_strtod_l+0xb48>
 800979e:	a30e      	add	r3, pc, #56	@ (adr r3, 80097d8 <_strtod_l+0xbc0>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f7 f9aa 	bl	8000afc <__aeabi_dcmplt>
 80097a8:	e798      	b.n	80096dc <_strtod_l+0xac4>
 80097aa:	2300      	movs	r3, #0
 80097ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80097b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	f7ff ba6d 	b.w	8008c92 <_strtod_l+0x7a>
 80097b8:	2a65      	cmp	r2, #101	@ 0x65
 80097ba:	f43f ab66 	beq.w	8008e8a <_strtod_l+0x272>
 80097be:	2a45      	cmp	r2, #69	@ 0x45
 80097c0:	f43f ab63 	beq.w	8008e8a <_strtod_l+0x272>
 80097c4:	2301      	movs	r3, #1
 80097c6:	f7ff bb9e 	b.w	8008f06 <_strtod_l+0x2ee>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	ffc00000 	.word	0xffc00000
 80097d4:	41dfffff 	.word	0x41dfffff
 80097d8:	94a03595 	.word	0x94a03595
 80097dc:	3fcfffff 	.word	0x3fcfffff

080097e0 <_strtod_r>:
 80097e0:	4b01      	ldr	r3, [pc, #4]	@ (80097e8 <_strtod_r+0x8>)
 80097e2:	f7ff ba19 	b.w	8008c18 <_strtod_l>
 80097e6:	bf00      	nop
 80097e8:	20000030 	.word	0x20000030

080097ec <_strtol_l.constprop.0>:
 80097ec:	2b24      	cmp	r3, #36	@ 0x24
 80097ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f2:	4686      	mov	lr, r0
 80097f4:	4690      	mov	r8, r2
 80097f6:	d801      	bhi.n	80097fc <_strtol_l.constprop.0+0x10>
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d106      	bne.n	800980a <_strtol_l.constprop.0+0x1e>
 80097fc:	f001 fec8 	bl	800b590 <__errno>
 8009800:	2316      	movs	r3, #22
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980a:	4834      	ldr	r0, [pc, #208]	@ (80098dc <_strtol_l.constprop.0+0xf0>)
 800980c:	460d      	mov	r5, r1
 800980e:	462a      	mov	r2, r5
 8009810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009814:	5d06      	ldrb	r6, [r0, r4]
 8009816:	f016 0608 	ands.w	r6, r6, #8
 800981a:	d1f8      	bne.n	800980e <_strtol_l.constprop.0+0x22>
 800981c:	2c2d      	cmp	r4, #45	@ 0x2d
 800981e:	d12d      	bne.n	800987c <_strtol_l.constprop.0+0x90>
 8009820:	782c      	ldrb	r4, [r5, #0]
 8009822:	2601      	movs	r6, #1
 8009824:	1c95      	adds	r5, r2, #2
 8009826:	f033 0210 	bics.w	r2, r3, #16
 800982a:	d109      	bne.n	8009840 <_strtol_l.constprop.0+0x54>
 800982c:	2c30      	cmp	r4, #48	@ 0x30
 800982e:	d12a      	bne.n	8009886 <_strtol_l.constprop.0+0x9a>
 8009830:	782a      	ldrb	r2, [r5, #0]
 8009832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009836:	2a58      	cmp	r2, #88	@ 0x58
 8009838:	d125      	bne.n	8009886 <_strtol_l.constprop.0+0x9a>
 800983a:	786c      	ldrb	r4, [r5, #1]
 800983c:	2310      	movs	r3, #16
 800983e:	3502      	adds	r5, #2
 8009840:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009844:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009848:	2200      	movs	r2, #0
 800984a:	fbbc f9f3 	udiv	r9, ip, r3
 800984e:	4610      	mov	r0, r2
 8009850:	fb03 ca19 	mls	sl, r3, r9, ip
 8009854:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009858:	2f09      	cmp	r7, #9
 800985a:	d81b      	bhi.n	8009894 <_strtol_l.constprop.0+0xa8>
 800985c:	463c      	mov	r4, r7
 800985e:	42a3      	cmp	r3, r4
 8009860:	dd27      	ble.n	80098b2 <_strtol_l.constprop.0+0xc6>
 8009862:	1c57      	adds	r7, r2, #1
 8009864:	d007      	beq.n	8009876 <_strtol_l.constprop.0+0x8a>
 8009866:	4581      	cmp	r9, r0
 8009868:	d320      	bcc.n	80098ac <_strtol_l.constprop.0+0xc0>
 800986a:	d101      	bne.n	8009870 <_strtol_l.constprop.0+0x84>
 800986c:	45a2      	cmp	sl, r4
 800986e:	db1d      	blt.n	80098ac <_strtol_l.constprop.0+0xc0>
 8009870:	fb00 4003 	mla	r0, r0, r3, r4
 8009874:	2201      	movs	r2, #1
 8009876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800987a:	e7eb      	b.n	8009854 <_strtol_l.constprop.0+0x68>
 800987c:	2c2b      	cmp	r4, #43	@ 0x2b
 800987e:	bf04      	itt	eq
 8009880:	782c      	ldrbeq	r4, [r5, #0]
 8009882:	1c95      	addeq	r5, r2, #2
 8009884:	e7cf      	b.n	8009826 <_strtol_l.constprop.0+0x3a>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1da      	bne.n	8009840 <_strtol_l.constprop.0+0x54>
 800988a:	2c30      	cmp	r4, #48	@ 0x30
 800988c:	bf0c      	ite	eq
 800988e:	2308      	moveq	r3, #8
 8009890:	230a      	movne	r3, #10
 8009892:	e7d5      	b.n	8009840 <_strtol_l.constprop.0+0x54>
 8009894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009898:	2f19      	cmp	r7, #25
 800989a:	d801      	bhi.n	80098a0 <_strtol_l.constprop.0+0xb4>
 800989c:	3c37      	subs	r4, #55	@ 0x37
 800989e:	e7de      	b.n	800985e <_strtol_l.constprop.0+0x72>
 80098a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80098a4:	2f19      	cmp	r7, #25
 80098a6:	d804      	bhi.n	80098b2 <_strtol_l.constprop.0+0xc6>
 80098a8:	3c57      	subs	r4, #87	@ 0x57
 80098aa:	e7d8      	b.n	800985e <_strtol_l.constprop.0+0x72>
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295
 80098b0:	e7e1      	b.n	8009876 <_strtol_l.constprop.0+0x8a>
 80098b2:	1c53      	adds	r3, r2, #1
 80098b4:	d108      	bne.n	80098c8 <_strtol_l.constprop.0+0xdc>
 80098b6:	2322      	movs	r3, #34	@ 0x22
 80098b8:	f8ce 3000 	str.w	r3, [lr]
 80098bc:	4660      	mov	r0, ip
 80098be:	f1b8 0f00 	cmp.w	r8, #0
 80098c2:	d0a0      	beq.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098c4:	1e69      	subs	r1, r5, #1
 80098c6:	e006      	b.n	80098d6 <_strtol_l.constprop.0+0xea>
 80098c8:	b106      	cbz	r6, 80098cc <_strtol_l.constprop.0+0xe0>
 80098ca:	4240      	negs	r0, r0
 80098cc:	f1b8 0f00 	cmp.w	r8, #0
 80098d0:	d099      	beq.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098d2:	2a00      	cmp	r2, #0
 80098d4:	d1f6      	bne.n	80098c4 <_strtol_l.constprop.0+0xd8>
 80098d6:	f8c8 1000 	str.w	r1, [r8]
 80098da:	e794      	b.n	8009806 <_strtol_l.constprop.0+0x1a>
 80098dc:	0800fbc9 	.word	0x0800fbc9

080098e0 <_strtol_r>:
 80098e0:	f7ff bf84 	b.w	80097ec <_strtol_l.constprop.0>

080098e4 <strtol>:
 80098e4:	4613      	mov	r3, r2
 80098e6:	460a      	mov	r2, r1
 80098e8:	4601      	mov	r1, r0
 80098ea:	4802      	ldr	r0, [pc, #8]	@ (80098f4 <strtol+0x10>)
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f7ff bf7d 	b.w	80097ec <_strtol_l.constprop.0>
 80098f2:	bf00      	nop
 80098f4:	2000019c 	.word	0x2000019c

080098f8 <__cvt>:
 80098f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	ec57 6b10 	vmov	r6, r7, d0
 8009900:	2f00      	cmp	r7, #0
 8009902:	460c      	mov	r4, r1
 8009904:	4619      	mov	r1, r3
 8009906:	463b      	mov	r3, r7
 8009908:	bfbb      	ittet	lt
 800990a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800990e:	461f      	movlt	r7, r3
 8009910:	2300      	movge	r3, #0
 8009912:	232d      	movlt	r3, #45	@ 0x2d
 8009914:	700b      	strb	r3, [r1, #0]
 8009916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800991c:	4691      	mov	r9, r2
 800991e:	f023 0820 	bic.w	r8, r3, #32
 8009922:	bfbc      	itt	lt
 8009924:	4632      	movlt	r2, r6
 8009926:	4616      	movlt	r6, r2
 8009928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800992c:	d005      	beq.n	800993a <__cvt+0x42>
 800992e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009932:	d100      	bne.n	8009936 <__cvt+0x3e>
 8009934:	3401      	adds	r4, #1
 8009936:	2102      	movs	r1, #2
 8009938:	e000      	b.n	800993c <__cvt+0x44>
 800993a:	2103      	movs	r1, #3
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	ab02      	add	r3, sp, #8
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	ec47 6b10 	vmov	d0, r6, r7
 8009948:	4653      	mov	r3, sl
 800994a:	4622      	mov	r2, r4
 800994c:	f001 ff08 	bl	800b760 <_dtoa_r>
 8009950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009954:	4605      	mov	r5, r0
 8009956:	d119      	bne.n	800998c <__cvt+0x94>
 8009958:	f019 0f01 	tst.w	r9, #1
 800995c:	d00e      	beq.n	800997c <__cvt+0x84>
 800995e:	eb00 0904 	add.w	r9, r0, r4
 8009962:	2200      	movs	r2, #0
 8009964:	2300      	movs	r3, #0
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f7 f8bd 	bl	8000ae8 <__aeabi_dcmpeq>
 800996e:	b108      	cbz	r0, 8009974 <__cvt+0x7c>
 8009970:	f8cd 900c 	str.w	r9, [sp, #12]
 8009974:	2230      	movs	r2, #48	@ 0x30
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	454b      	cmp	r3, r9
 800997a:	d31e      	bcc.n	80099ba <__cvt+0xc2>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009980:	1b5b      	subs	r3, r3, r5
 8009982:	4628      	mov	r0, r5
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	b004      	add	sp, #16
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009990:	eb00 0904 	add.w	r9, r0, r4
 8009994:	d1e5      	bne.n	8009962 <__cvt+0x6a>
 8009996:	7803      	ldrb	r3, [r0, #0]
 8009998:	2b30      	cmp	r3, #48	@ 0x30
 800999a:	d10a      	bne.n	80099b2 <__cvt+0xba>
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f7 f8a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80099a8:	b918      	cbnz	r0, 80099b2 <__cvt+0xba>
 80099aa:	f1c4 0401 	rsb	r4, r4, #1
 80099ae:	f8ca 4000 	str.w	r4, [sl]
 80099b2:	f8da 3000 	ldr.w	r3, [sl]
 80099b6:	4499      	add	r9, r3
 80099b8:	e7d3      	b.n	8009962 <__cvt+0x6a>
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	9103      	str	r1, [sp, #12]
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e7d9      	b.n	8009976 <__cvt+0x7e>

080099c2 <__exponent>:
 80099c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c4:	2900      	cmp	r1, #0
 80099c6:	bfba      	itte	lt
 80099c8:	4249      	neglt	r1, r1
 80099ca:	232d      	movlt	r3, #45	@ 0x2d
 80099cc:	232b      	movge	r3, #43	@ 0x2b
 80099ce:	2909      	cmp	r1, #9
 80099d0:	7002      	strb	r2, [r0, #0]
 80099d2:	7043      	strb	r3, [r0, #1]
 80099d4:	dd29      	ble.n	8009a2a <__exponent+0x68>
 80099d6:	f10d 0307 	add.w	r3, sp, #7
 80099da:	461d      	mov	r5, r3
 80099dc:	270a      	movs	r7, #10
 80099de:	461a      	mov	r2, r3
 80099e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80099e4:	fb07 1416 	mls	r4, r7, r6, r1
 80099e8:	3430      	adds	r4, #48	@ 0x30
 80099ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099ee:	460c      	mov	r4, r1
 80099f0:	2c63      	cmp	r4, #99	@ 0x63
 80099f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80099f6:	4631      	mov	r1, r6
 80099f8:	dcf1      	bgt.n	80099de <__exponent+0x1c>
 80099fa:	3130      	adds	r1, #48	@ 0x30
 80099fc:	1e94      	subs	r4, r2, #2
 80099fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a02:	1c41      	adds	r1, r0, #1
 8009a04:	4623      	mov	r3, r4
 8009a06:	42ab      	cmp	r3, r5
 8009a08:	d30a      	bcc.n	8009a20 <__exponent+0x5e>
 8009a0a:	f10d 0309 	add.w	r3, sp, #9
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	42ac      	cmp	r4, r5
 8009a12:	bf88      	it	hi
 8009a14:	2300      	movhi	r3, #0
 8009a16:	3302      	adds	r3, #2
 8009a18:	4403      	add	r3, r0
 8009a1a:	1a18      	subs	r0, r3, r0
 8009a1c:	b003      	add	sp, #12
 8009a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a28:	e7ed      	b.n	8009a06 <__exponent+0x44>
 8009a2a:	2330      	movs	r3, #48	@ 0x30
 8009a2c:	3130      	adds	r1, #48	@ 0x30
 8009a2e:	7083      	strb	r3, [r0, #2]
 8009a30:	70c1      	strb	r1, [r0, #3]
 8009a32:	1d03      	adds	r3, r0, #4
 8009a34:	e7f1      	b.n	8009a1a <__exponent+0x58>
	...

08009a38 <_printf_float>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	b08d      	sub	sp, #52	@ 0x34
 8009a3e:	460c      	mov	r4, r1
 8009a40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a44:	4616      	mov	r6, r2
 8009a46:	461f      	mov	r7, r3
 8009a48:	4605      	mov	r5, r0
 8009a4a:	f001 fd47 	bl	800b4dc <_localeconv_r>
 8009a4e:	6803      	ldr	r3, [r0, #0]
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f6 fc1c 	bl	8000290 <strlen>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a60:	9005      	str	r0, [sp, #20]
 8009a62:	3307      	adds	r3, #7
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	f103 0208 	add.w	r2, r3, #8
 8009a6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a70:	f8d4 b000 	ldr.w	fp, [r4]
 8009a74:	f8c8 2000 	str.w	r2, [r8]
 8009a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8009d00 <_printf_float+0x2c8>)
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	f7f7 f85a 	bl	8000b4c <__aeabi_dcmpun>
 8009a98:	bb70      	cbnz	r0, 8009af8 <_printf_float+0xc0>
 8009a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a9e:	4b98      	ldr	r3, [pc, #608]	@ (8009d00 <_printf_float+0x2c8>)
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	f7f7 f834 	bl	8000b10 <__aeabi_dcmple>
 8009aa8:	bb30      	cbnz	r0, 8009af8 <_printf_float+0xc0>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f823 	bl	8000afc <__aeabi_dcmplt>
 8009ab6:	b110      	cbz	r0, 8009abe <_printf_float+0x86>
 8009ab8:	232d      	movs	r3, #45	@ 0x2d
 8009aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009abe:	4a91      	ldr	r2, [pc, #580]	@ (8009d04 <_printf_float+0x2cc>)
 8009ac0:	4b91      	ldr	r3, [pc, #580]	@ (8009d08 <_printf_float+0x2d0>)
 8009ac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ac6:	bf94      	ite	ls
 8009ac8:	4690      	movls	r8, r2
 8009aca:	4698      	movhi	r8, r3
 8009acc:	2303      	movs	r3, #3
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	f02b 0304 	bic.w	r3, fp, #4
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	f04f 0900 	mov.w	r9, #0
 8009ada:	9700      	str	r7, [sp, #0]
 8009adc:	4633      	mov	r3, r6
 8009ade:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f9d2 	bl	8009e8c <_printf_common>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	f040 808d 	bne.w	8009c08 <_printf_float+0x1d0>
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	b00d      	add	sp, #52	@ 0x34
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f7 f824 	bl	8000b4c <__aeabi_dcmpun>
 8009b04:	b140      	cbz	r0, 8009b18 <_printf_float+0xe0>
 8009b06:	464b      	mov	r3, r9
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bfbc      	itt	lt
 8009b0c:	232d      	movlt	r3, #45	@ 0x2d
 8009b0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b12:	4a7e      	ldr	r2, [pc, #504]	@ (8009d0c <_printf_float+0x2d4>)
 8009b14:	4b7e      	ldr	r3, [pc, #504]	@ (8009d10 <_printf_float+0x2d8>)
 8009b16:	e7d4      	b.n	8009ac2 <_printf_float+0x8a>
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b1e:	9206      	str	r2, [sp, #24]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	d13b      	bne.n	8009b9c <_printf_float+0x164>
 8009b24:	2306      	movs	r3, #6
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	6022      	str	r2, [r4, #0]
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b38:	ab09      	add	r3, sp, #36	@ 0x24
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	6861      	ldr	r1, [r4, #4]
 8009b3e:	ec49 8b10 	vmov	d0, r8, r9
 8009b42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fed6 	bl	80098f8 <__cvt>
 8009b4c:	9b06      	ldr	r3, [sp, #24]
 8009b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b50:	2b47      	cmp	r3, #71	@ 0x47
 8009b52:	4680      	mov	r8, r0
 8009b54:	d129      	bne.n	8009baa <_printf_float+0x172>
 8009b56:	1cc8      	adds	r0, r1, #3
 8009b58:	db02      	blt.n	8009b60 <_printf_float+0x128>
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	dd41      	ble.n	8009be4 <_printf_float+0x1ac>
 8009b60:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b64:	fa5f fa8a 	uxtb.w	sl, sl
 8009b68:	3901      	subs	r1, #1
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b70:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b72:	f7ff ff26 	bl	80099c2 <__exponent>
 8009b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b78:	1813      	adds	r3, r2, r0
 8009b7a:	2a01      	cmp	r2, #1
 8009b7c:	4681      	mov	r9, r0
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	dc02      	bgt.n	8009b88 <_printf_float+0x150>
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	07d2      	lsls	r2, r2, #31
 8009b86:	d501      	bpl.n	8009b8c <_printf_float+0x154>
 8009b88:	3301      	adds	r3, #1
 8009b8a:	6123      	str	r3, [r4, #16]
 8009b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0a2      	beq.n	8009ada <_printf_float+0xa2>
 8009b94:	232d      	movs	r3, #45	@ 0x2d
 8009b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9a:	e79e      	b.n	8009ada <_printf_float+0xa2>
 8009b9c:	9a06      	ldr	r2, [sp, #24]
 8009b9e:	2a47      	cmp	r2, #71	@ 0x47
 8009ba0:	d1c2      	bne.n	8009b28 <_printf_float+0xf0>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1c0      	bne.n	8009b28 <_printf_float+0xf0>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7bd      	b.n	8009b26 <_printf_float+0xee>
 8009baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bae:	d9db      	bls.n	8009b68 <_printf_float+0x130>
 8009bb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bb4:	d118      	bne.n	8009be8 <_printf_float+0x1b0>
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	dd0b      	ble.n	8009bd4 <_printf_float+0x19c>
 8009bbc:	6121      	str	r1, [r4, #16]
 8009bbe:	b913      	cbnz	r3, 8009bc6 <_printf_float+0x18e>
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	07d0      	lsls	r0, r2, #31
 8009bc4:	d502      	bpl.n	8009bcc <_printf_float+0x194>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	440b      	add	r3, r1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bce:	f04f 0900 	mov.w	r9, #0
 8009bd2:	e7db      	b.n	8009b8c <_printf_float+0x154>
 8009bd4:	b913      	cbnz	r3, 8009bdc <_printf_float+0x1a4>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	07d2      	lsls	r2, r2, #31
 8009bda:	d501      	bpl.n	8009be0 <_printf_float+0x1a8>
 8009bdc:	3302      	adds	r3, #2
 8009bde:	e7f4      	b.n	8009bca <_printf_float+0x192>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7f2      	b.n	8009bca <_printf_float+0x192>
 8009be4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bea:	4299      	cmp	r1, r3
 8009bec:	db05      	blt.n	8009bfa <_printf_float+0x1c2>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6121      	str	r1, [r4, #16]
 8009bf2:	07d8      	lsls	r0, r3, #31
 8009bf4:	d5ea      	bpl.n	8009bcc <_printf_float+0x194>
 8009bf6:	1c4b      	adds	r3, r1, #1
 8009bf8:	e7e7      	b.n	8009bca <_printf_float+0x192>
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	bfd4      	ite	le
 8009bfe:	f1c1 0202 	rsble	r2, r1, #2
 8009c02:	2201      	movgt	r2, #1
 8009c04:	4413      	add	r3, r2
 8009c06:	e7e0      	b.n	8009bca <_printf_float+0x192>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	055a      	lsls	r2, r3, #21
 8009c0c:	d407      	bmi.n	8009c1e <_printf_float+0x1e6>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	4642      	mov	r2, r8
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d12b      	bne.n	8009c74 <_printf_float+0x23c>
 8009c1c:	e767      	b.n	8009aee <_printf_float+0xb6>
 8009c1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c22:	f240 80dd 	bls.w	8009de0 <_printf_float+0x3a8>
 8009c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f7f6 ff5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d033      	beq.n	8009c9e <_printf_float+0x266>
 8009c36:	4a37      	ldr	r2, [pc, #220]	@ (8009d14 <_printf_float+0x2dc>)
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f af54 	beq.w	8009aee <_printf_float+0xb6>
 8009c46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c4a:	4543      	cmp	r3, r8
 8009c4c:	db02      	blt.n	8009c54 <_printf_float+0x21c>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	07d8      	lsls	r0, r3, #31
 8009c52:	d50f      	bpl.n	8009c74 <_printf_float+0x23c>
 8009c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af45 	beq.w	8009aee <_printf_float+0xb6>
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c6c:	f104 0a1a 	add.w	sl, r4, #26
 8009c70:	45c8      	cmp	r8, r9
 8009c72:	dc09      	bgt.n	8009c88 <_printf_float+0x250>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	079b      	lsls	r3, r3, #30
 8009c78:	f100 8103 	bmi.w	8009e82 <_printf_float+0x44a>
 8009c7c:	68e0      	ldr	r0, [r4, #12]
 8009c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c80:	4298      	cmp	r0, r3
 8009c82:	bfb8      	it	lt
 8009c84:	4618      	movlt	r0, r3
 8009c86:	e734      	b.n	8009af2 <_printf_float+0xba>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f af2b 	beq.w	8009aee <_printf_float+0xb6>
 8009c98:	f109 0901 	add.w	r9, r9, #1
 8009c9c:	e7e8      	b.n	8009c70 <_printf_float+0x238>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dc39      	bgt.n	8009d18 <_printf_float+0x2e0>
 8009ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d14 <_printf_float+0x2dc>)
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4628      	mov	r0, r5
 8009cac:	47b8      	blx	r7
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f43f af1d 	beq.w	8009aee <_printf_float+0xb6>
 8009cb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cb8:	ea59 0303 	orrs.w	r3, r9, r3
 8009cbc:	d102      	bne.n	8009cc4 <_printf_float+0x28c>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	07d9      	lsls	r1, r3, #31
 8009cc2:	d5d7      	bpl.n	8009c74 <_printf_float+0x23c>
 8009cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af0d 	beq.w	8009aee <_printf_float+0xb6>
 8009cd4:	f04f 0a00 	mov.w	sl, #0
 8009cd8:	f104 0b1a 	add.w	fp, r4, #26
 8009cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cde:	425b      	negs	r3, r3
 8009ce0:	4553      	cmp	r3, sl
 8009ce2:	dc01      	bgt.n	8009ce8 <_printf_float+0x2b0>
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	e793      	b.n	8009c10 <_printf_float+0x1d8>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	465a      	mov	r2, fp
 8009cec:	4631      	mov	r1, r6
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b8      	blx	r7
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	f43f aefb 	beq.w	8009aee <_printf_float+0xb6>
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	e7ee      	b.n	8009cdc <_printf_float+0x2a4>
 8009cfe:	bf00      	nop
 8009d00:	7fefffff 	.word	0x7fefffff
 8009d04:	0800fcc9 	.word	0x0800fcc9
 8009d08:	0800fccd 	.word	0x0800fccd
 8009d0c:	0800fcd1 	.word	0x0800fcd1
 8009d10:	0800fcd5 	.word	0x0800fcd5
 8009d14:	0801001f 	.word	0x0801001f
 8009d18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d1e:	4553      	cmp	r3, sl
 8009d20:	bfa8      	it	ge
 8009d22:	4653      	movge	r3, sl
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	4699      	mov	r9, r3
 8009d28:	dc36      	bgt.n	8009d98 <_printf_float+0x360>
 8009d2a:	f04f 0b00 	mov.w	fp, #0
 8009d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d32:	f104 021a 	add.w	r2, r4, #26
 8009d36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d38:	9306      	str	r3, [sp, #24]
 8009d3a:	eba3 0309 	sub.w	r3, r3, r9
 8009d3e:	455b      	cmp	r3, fp
 8009d40:	dc31      	bgt.n	8009da6 <_printf_float+0x36e>
 8009d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d44:	459a      	cmp	sl, r3
 8009d46:	dc3a      	bgt.n	8009dbe <_printf_float+0x386>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	07da      	lsls	r2, r3, #31
 8009d4c:	d437      	bmi.n	8009dbe <_printf_float+0x386>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	ebaa 0903 	sub.w	r9, sl, r3
 8009d54:	9b06      	ldr	r3, [sp, #24]
 8009d56:	ebaa 0303 	sub.w	r3, sl, r3
 8009d5a:	4599      	cmp	r9, r3
 8009d5c:	bfa8      	it	ge
 8009d5e:	4699      	movge	r9, r3
 8009d60:	f1b9 0f00 	cmp.w	r9, #0
 8009d64:	dc33      	bgt.n	8009dce <_printf_float+0x396>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d6e:	f104 0b1a 	add.w	fp, r4, #26
 8009d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d74:	ebaa 0303 	sub.w	r3, sl, r3
 8009d78:	eba3 0309 	sub.w	r3, r3, r9
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	f77f af79 	ble.w	8009c74 <_printf_float+0x23c>
 8009d82:	2301      	movs	r3, #1
 8009d84:	465a      	mov	r2, fp
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f43f aeae 	beq.w	8009aee <_printf_float+0xb6>
 8009d92:	f108 0801 	add.w	r8, r8, #1
 8009d96:	e7ec      	b.n	8009d72 <_printf_float+0x33a>
 8009d98:	4642      	mov	r2, r8
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	d1c2      	bne.n	8009d2a <_printf_float+0x2f2>
 8009da4:	e6a3      	b.n	8009aee <_printf_float+0xb6>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	9206      	str	r2, [sp, #24]
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f ae9c 	beq.w	8009aee <_printf_float+0xb6>
 8009db6:	9a06      	ldr	r2, [sp, #24]
 8009db8:	f10b 0b01 	add.w	fp, fp, #1
 8009dbc:	e7bb      	b.n	8009d36 <_printf_float+0x2fe>
 8009dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d1c0      	bne.n	8009d4e <_printf_float+0x316>
 8009dcc:	e68f      	b.n	8009aee <_printf_float+0xb6>
 8009dce:	9a06      	ldr	r2, [sp, #24]
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	4442      	add	r2, r8
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d1c3      	bne.n	8009d66 <_printf_float+0x32e>
 8009dde:	e686      	b.n	8009aee <_printf_float+0xb6>
 8009de0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009de4:	f1ba 0f01 	cmp.w	sl, #1
 8009de8:	dc01      	bgt.n	8009dee <_printf_float+0x3b6>
 8009dea:	07db      	lsls	r3, r3, #31
 8009dec:	d536      	bpl.n	8009e5c <_printf_float+0x424>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4642      	mov	r2, r8
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f ae78 	beq.w	8009aee <_printf_float+0xb6>
 8009dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f43f ae70 	beq.w	8009aee <_printf_float+0xb6>
 8009e0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e12:	2200      	movs	r2, #0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1a:	f7f6 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e1e:	b9c0      	cbnz	r0, 8009e52 <_printf_float+0x41a>
 8009e20:	4653      	mov	r3, sl
 8009e22:	f108 0201 	add.w	r2, r8, #1
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d10c      	bne.n	8009e4a <_printf_float+0x412>
 8009e30:	e65d      	b.n	8009aee <_printf_float+0xb6>
 8009e32:	2301      	movs	r3, #1
 8009e34:	465a      	mov	r2, fp
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f43f ae56 	beq.w	8009aee <_printf_float+0xb6>
 8009e42:	f108 0801 	add.w	r8, r8, #1
 8009e46:	45d0      	cmp	r8, sl
 8009e48:	dbf3      	blt.n	8009e32 <_printf_float+0x3fa>
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e50:	e6df      	b.n	8009c12 <_printf_float+0x1da>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	f104 0b1a 	add.w	fp, r4, #26
 8009e5a:	e7f4      	b.n	8009e46 <_printf_float+0x40e>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4642      	mov	r2, r8
 8009e60:	e7e1      	b.n	8009e26 <_printf_float+0x3ee>
 8009e62:	2301      	movs	r3, #1
 8009e64:	464a      	mov	r2, r9
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f ae3e 	beq.w	8009aee <_printf_float+0xb6>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	4543      	cmp	r3, r8
 8009e7e:	dcf0      	bgt.n	8009e62 <_printf_float+0x42a>
 8009e80:	e6fc      	b.n	8009c7c <_printf_float+0x244>
 8009e82:	f04f 0800 	mov.w	r8, #0
 8009e86:	f104 0919 	add.w	r9, r4, #25
 8009e8a:	e7f4      	b.n	8009e76 <_printf_float+0x43e>

08009e8c <_printf_common>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	4616      	mov	r6, r2
 8009e92:	4698      	mov	r8, r3
 8009e94:	688a      	ldr	r2, [r1, #8]
 8009e96:	690b      	ldr	r3, [r1, #16]
 8009e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfb8      	it	lt
 8009ea0:	4613      	movlt	r3, r2
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	b10a      	cbz	r2, 8009eb2 <_printf_common+0x26>
 8009eae:	3301      	adds	r3, #1
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	0699      	lsls	r1, r3, #26
 8009eb6:	bf42      	ittt	mi
 8009eb8:	6833      	ldrmi	r3, [r6, #0]
 8009eba:	3302      	addmi	r3, #2
 8009ebc:	6033      	strmi	r3, [r6, #0]
 8009ebe:	6825      	ldr	r5, [r4, #0]
 8009ec0:	f015 0506 	ands.w	r5, r5, #6
 8009ec4:	d106      	bne.n	8009ed4 <_printf_common+0x48>
 8009ec6:	f104 0a19 	add.w	sl, r4, #25
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	6832      	ldr	r2, [r6, #0]
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dc26      	bgt.n	8009f22 <_printf_common+0x96>
 8009ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	3b00      	subs	r3, #0
 8009edc:	bf18      	it	ne
 8009ede:	2301      	movne	r3, #1
 8009ee0:	0692      	lsls	r2, r2, #26
 8009ee2:	d42b      	bmi.n	8009f3c <_printf_common+0xb0>
 8009ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ee8:	4641      	mov	r1, r8
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c8      	blx	r9
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d01e      	beq.n	8009f30 <_printf_common+0xa4>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	6922      	ldr	r2, [r4, #16]
 8009ef6:	f003 0306 	and.w	r3, r3, #6
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	bf02      	ittt	eq
 8009efe:	68e5      	ldreq	r5, [r4, #12]
 8009f00:	6833      	ldreq	r3, [r6, #0]
 8009f02:	1aed      	subeq	r5, r5, r3
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	bf0c      	ite	eq
 8009f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f0c:	2500      	movne	r5, #0
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	bfc4      	itt	gt
 8009f12:	1a9b      	subgt	r3, r3, r2
 8009f14:	18ed      	addgt	r5, r5, r3
 8009f16:	2600      	movs	r6, #0
 8009f18:	341a      	adds	r4, #26
 8009f1a:	42b5      	cmp	r5, r6
 8009f1c:	d11a      	bne.n	8009f54 <_printf_common+0xc8>
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e008      	b.n	8009f34 <_printf_common+0xa8>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4652      	mov	r2, sl
 8009f26:	4641      	mov	r1, r8
 8009f28:	4638      	mov	r0, r7
 8009f2a:	47c8      	blx	r9
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d103      	bne.n	8009f38 <_printf_common+0xac>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	3501      	adds	r5, #1
 8009f3a:	e7c6      	b.n	8009eca <_printf_common+0x3e>
 8009f3c:	18e1      	adds	r1, r4, r3
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	2030      	movs	r0, #48	@ 0x30
 8009f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f46:	4422      	add	r2, r4
 8009f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f50:	3302      	adds	r3, #2
 8009f52:	e7c7      	b.n	8009ee4 <_printf_common+0x58>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4622      	mov	r2, r4
 8009f58:	4641      	mov	r1, r8
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	47c8      	blx	r9
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d0e6      	beq.n	8009f30 <_printf_common+0xa4>
 8009f62:	3601      	adds	r6, #1
 8009f64:	e7d9      	b.n	8009f1a <_printf_common+0x8e>
	...

08009f68 <_printf_i>:
 8009f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	7e0f      	ldrb	r7, [r1, #24]
 8009f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f70:	2f78      	cmp	r7, #120	@ 0x78
 8009f72:	4691      	mov	r9, r2
 8009f74:	4680      	mov	r8, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	469a      	mov	sl, r3
 8009f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f7e:	d807      	bhi.n	8009f90 <_printf_i+0x28>
 8009f80:	2f62      	cmp	r7, #98	@ 0x62
 8009f82:	d80a      	bhi.n	8009f9a <_printf_i+0x32>
 8009f84:	2f00      	cmp	r7, #0
 8009f86:	f000 80d2 	beq.w	800a12e <_printf_i+0x1c6>
 8009f8a:	2f58      	cmp	r7, #88	@ 0x58
 8009f8c:	f000 80b9 	beq.w	800a102 <_printf_i+0x19a>
 8009f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f98:	e03a      	b.n	800a010 <_printf_i+0xa8>
 8009f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f9e:	2b15      	cmp	r3, #21
 8009fa0:	d8f6      	bhi.n	8009f90 <_printf_i+0x28>
 8009fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fa8 <_printf_i+0x40>)
 8009fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa8:	0800a001 	.word	0x0800a001
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	08009f91 	.word	0x08009f91
 8009fb4:	08009f91 	.word	0x08009f91
 8009fb8:	08009f91 	.word	0x08009f91
 8009fbc:	08009f91 	.word	0x08009f91
 8009fc0:	0800a015 	.word	0x0800a015
 8009fc4:	08009f91 	.word	0x08009f91
 8009fc8:	08009f91 	.word	0x08009f91
 8009fcc:	08009f91 	.word	0x08009f91
 8009fd0:	08009f91 	.word	0x08009f91
 8009fd4:	0800a115 	.word	0x0800a115
 8009fd8:	0800a03f 	.word	0x0800a03f
 8009fdc:	0800a0cf 	.word	0x0800a0cf
 8009fe0:	08009f91 	.word	0x08009f91
 8009fe4:	08009f91 	.word	0x08009f91
 8009fe8:	0800a137 	.word	0x0800a137
 8009fec:	08009f91 	.word	0x08009f91
 8009ff0:	0800a03f 	.word	0x0800a03f
 8009ff4:	08009f91 	.word	0x08009f91
 8009ff8:	08009f91 	.word	0x08009f91
 8009ffc:	0800a0d7 	.word	0x0800a0d7
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6032      	str	r2, [r6, #0]
 800a008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a010:	2301      	movs	r3, #1
 800a012:	e09d      	b.n	800a150 <_printf_i+0x1e8>
 800a014:	6833      	ldr	r3, [r6, #0]
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	1d19      	adds	r1, r3, #4
 800a01a:	6031      	str	r1, [r6, #0]
 800a01c:	0606      	lsls	r6, r0, #24
 800a01e:	d501      	bpl.n	800a024 <_printf_i+0xbc>
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	e003      	b.n	800a02c <_printf_i+0xc4>
 800a024:	0645      	lsls	r5, r0, #25
 800a026:	d5fb      	bpl.n	800a020 <_printf_i+0xb8>
 800a028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a02c:	2d00      	cmp	r5, #0
 800a02e:	da03      	bge.n	800a038 <_printf_i+0xd0>
 800a030:	232d      	movs	r3, #45	@ 0x2d
 800a032:	426d      	negs	r5, r5
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a038:	4859      	ldr	r0, [pc, #356]	@ (800a1a0 <_printf_i+0x238>)
 800a03a:	230a      	movs	r3, #10
 800a03c:	e011      	b.n	800a062 <_printf_i+0xfa>
 800a03e:	6821      	ldr	r1, [r4, #0]
 800a040:	6833      	ldr	r3, [r6, #0]
 800a042:	0608      	lsls	r0, r1, #24
 800a044:	f853 5b04 	ldr.w	r5, [r3], #4
 800a048:	d402      	bmi.n	800a050 <_printf_i+0xe8>
 800a04a:	0649      	lsls	r1, r1, #25
 800a04c:	bf48      	it	mi
 800a04e:	b2ad      	uxthmi	r5, r5
 800a050:	2f6f      	cmp	r7, #111	@ 0x6f
 800a052:	4853      	ldr	r0, [pc, #332]	@ (800a1a0 <_printf_i+0x238>)
 800a054:	6033      	str	r3, [r6, #0]
 800a056:	bf14      	ite	ne
 800a058:	230a      	movne	r3, #10
 800a05a:	2308      	moveq	r3, #8
 800a05c:	2100      	movs	r1, #0
 800a05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a062:	6866      	ldr	r6, [r4, #4]
 800a064:	60a6      	str	r6, [r4, #8]
 800a066:	2e00      	cmp	r6, #0
 800a068:	bfa2      	ittt	ge
 800a06a:	6821      	ldrge	r1, [r4, #0]
 800a06c:	f021 0104 	bicge.w	r1, r1, #4
 800a070:	6021      	strge	r1, [r4, #0]
 800a072:	b90d      	cbnz	r5, 800a078 <_printf_i+0x110>
 800a074:	2e00      	cmp	r6, #0
 800a076:	d04b      	beq.n	800a110 <_printf_i+0x1a8>
 800a078:	4616      	mov	r6, r2
 800a07a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a07e:	fb03 5711 	mls	r7, r3, r1, r5
 800a082:	5dc7      	ldrb	r7, [r0, r7]
 800a084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a088:	462f      	mov	r7, r5
 800a08a:	42bb      	cmp	r3, r7
 800a08c:	460d      	mov	r5, r1
 800a08e:	d9f4      	bls.n	800a07a <_printf_i+0x112>
 800a090:	2b08      	cmp	r3, #8
 800a092:	d10b      	bne.n	800a0ac <_printf_i+0x144>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	07df      	lsls	r7, r3, #31
 800a098:	d508      	bpl.n	800a0ac <_printf_i+0x144>
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	6861      	ldr	r1, [r4, #4]
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	bfde      	ittt	le
 800a0a2:	2330      	movle	r3, #48	@ 0x30
 800a0a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ac:	1b92      	subs	r2, r2, r6
 800a0ae:	6122      	str	r2, [r4, #16]
 800a0b0:	f8cd a000 	str.w	sl, [sp]
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	aa03      	add	r2, sp, #12
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fee6 	bl	8009e8c <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d14a      	bne.n	800a15a <_printf_i+0x1f2>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b004      	add	sp, #16
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	f043 0320 	orr.w	r3, r3, #32
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	4833      	ldr	r0, [pc, #204]	@ (800a1a4 <_printf_i+0x23c>)
 800a0d8:	2778      	movs	r7, #120	@ 0x78
 800a0da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	6831      	ldr	r1, [r6, #0]
 800a0e2:	061f      	lsls	r7, r3, #24
 800a0e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0e8:	d402      	bmi.n	800a0f0 <_printf_i+0x188>
 800a0ea:	065f      	lsls	r7, r3, #25
 800a0ec:	bf48      	it	mi
 800a0ee:	b2ad      	uxthmi	r5, r5
 800a0f0:	6031      	str	r1, [r6, #0]
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	bf44      	itt	mi
 800a0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fa:	6023      	strmi	r3, [r4, #0]
 800a0fc:	b11d      	cbz	r5, 800a106 <_printf_i+0x19e>
 800a0fe:	2310      	movs	r3, #16
 800a100:	e7ac      	b.n	800a05c <_printf_i+0xf4>
 800a102:	4827      	ldr	r0, [pc, #156]	@ (800a1a0 <_printf_i+0x238>)
 800a104:	e7e9      	b.n	800a0da <_printf_i+0x172>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	f023 0320 	bic.w	r3, r3, #32
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	e7f6      	b.n	800a0fe <_printf_i+0x196>
 800a110:	4616      	mov	r6, r2
 800a112:	e7bd      	b.n	800a090 <_printf_i+0x128>
 800a114:	6833      	ldr	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	6961      	ldr	r1, [r4, #20]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6030      	str	r0, [r6, #0]
 800a11e:	062e      	lsls	r6, r5, #24
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	d501      	bpl.n	800a128 <_printf_i+0x1c0>
 800a124:	6019      	str	r1, [r3, #0]
 800a126:	e002      	b.n	800a12e <_printf_i+0x1c6>
 800a128:	0668      	lsls	r0, r5, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0x1bc>
 800a12c:	8019      	strh	r1, [r3, #0]
 800a12e:	2300      	movs	r3, #0
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	4616      	mov	r6, r2
 800a134:	e7bc      	b.n	800a0b0 <_printf_i+0x148>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	1d1a      	adds	r2, r3, #4
 800a13a:	6032      	str	r2, [r6, #0]
 800a13c:	681e      	ldr	r6, [r3, #0]
 800a13e:	6862      	ldr	r2, [r4, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 f854 	bl	80001f0 <memchr>
 800a148:	b108      	cbz	r0, 800a14e <_printf_i+0x1e6>
 800a14a:	1b80      	subs	r0, r0, r6
 800a14c:	6060      	str	r0, [r4, #4]
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	2300      	movs	r3, #0
 800a154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a158:	e7aa      	b.n	800a0b0 <_printf_i+0x148>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	4632      	mov	r2, r6
 800a15e:	4649      	mov	r1, r9
 800a160:	4640      	mov	r0, r8
 800a162:	47d0      	blx	sl
 800a164:	3001      	adds	r0, #1
 800a166:	d0ad      	beq.n	800a0c4 <_printf_i+0x15c>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	079b      	lsls	r3, r3, #30
 800a16c:	d413      	bmi.n	800a196 <_printf_i+0x22e>
 800a16e:	68e0      	ldr	r0, [r4, #12]
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	4298      	cmp	r0, r3
 800a174:	bfb8      	it	lt
 800a176:	4618      	movlt	r0, r3
 800a178:	e7a6      	b.n	800a0c8 <_printf_i+0x160>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d09d      	beq.n	800a0c4 <_printf_i+0x15c>
 800a188:	3501      	adds	r5, #1
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	9903      	ldr	r1, [sp, #12]
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	42ab      	cmp	r3, r5
 800a192:	dcf2      	bgt.n	800a17a <_printf_i+0x212>
 800a194:	e7eb      	b.n	800a16e <_printf_i+0x206>
 800a196:	2500      	movs	r5, #0
 800a198:	f104 0619 	add.w	r6, r4, #25
 800a19c:	e7f5      	b.n	800a18a <_printf_i+0x222>
 800a19e:	bf00      	nop
 800a1a0:	0800fcd9 	.word	0x0800fcd9
 800a1a4:	0800fcea 	.word	0x0800fcea

0800a1a8 <_scanf_float>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	b087      	sub	sp, #28
 800a1ae:	4617      	mov	r7, r2
 800a1b0:	9303      	str	r3, [sp, #12]
 800a1b2:	688b      	ldr	r3, [r1, #8]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a1ba:	bf81      	itttt	hi
 800a1bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a1c0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a1c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a1c8:	608b      	strhi	r3, [r1, #8]
 800a1ca:	680b      	ldr	r3, [r1, #0]
 800a1cc:	460a      	mov	r2, r1
 800a1ce:	f04f 0500 	mov.w	r5, #0
 800a1d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a1d6:	f842 3b1c 	str.w	r3, [r2], #28
 800a1da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a1de:	4680      	mov	r8, r0
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	bf98      	it	ls
 800a1e4:	f04f 0b00 	movls.w	fp, #0
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	4616      	mov	r6, r2
 800a1ec:	46aa      	mov	sl, r5
 800a1ee:	46a9      	mov	r9, r5
 800a1f0:	9502      	str	r5, [sp, #8]
 800a1f2:	68a2      	ldr	r2, [r4, #8]
 800a1f4:	b152      	cbz	r2, 800a20c <_scanf_float+0x64>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b4e      	cmp	r3, #78	@ 0x4e
 800a1fc:	d864      	bhi.n	800a2c8 <_scanf_float+0x120>
 800a1fe:	2b40      	cmp	r3, #64	@ 0x40
 800a200:	d83c      	bhi.n	800a27c <_scanf_float+0xd4>
 800a202:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a206:	b2c8      	uxtb	r0, r1
 800a208:	280e      	cmp	r0, #14
 800a20a:	d93a      	bls.n	800a282 <_scanf_float+0xda>
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	d003      	beq.n	800a21a <_scanf_float+0x72>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a21e:	f1ba 0f01 	cmp.w	sl, #1
 800a222:	f200 8117 	bhi.w	800a454 <_scanf_float+0x2ac>
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	429e      	cmp	r6, r3
 800a22a:	f200 8108 	bhi.w	800a43e <_scanf_float+0x296>
 800a22e:	2001      	movs	r0, #1
 800a230:	b007      	add	sp, #28
 800a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a236:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a23a:	2a0d      	cmp	r2, #13
 800a23c:	d8e6      	bhi.n	800a20c <_scanf_float+0x64>
 800a23e:	a101      	add	r1, pc, #4	@ (adr r1, 800a244 <_scanf_float+0x9c>)
 800a240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a244:	0800a38b 	.word	0x0800a38b
 800a248:	0800a20d 	.word	0x0800a20d
 800a24c:	0800a20d 	.word	0x0800a20d
 800a250:	0800a20d 	.word	0x0800a20d
 800a254:	0800a3eb 	.word	0x0800a3eb
 800a258:	0800a3c3 	.word	0x0800a3c3
 800a25c:	0800a20d 	.word	0x0800a20d
 800a260:	0800a20d 	.word	0x0800a20d
 800a264:	0800a399 	.word	0x0800a399
 800a268:	0800a20d 	.word	0x0800a20d
 800a26c:	0800a20d 	.word	0x0800a20d
 800a270:	0800a20d 	.word	0x0800a20d
 800a274:	0800a20d 	.word	0x0800a20d
 800a278:	0800a351 	.word	0x0800a351
 800a27c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a280:	e7db      	b.n	800a23a <_scanf_float+0x92>
 800a282:	290e      	cmp	r1, #14
 800a284:	d8c2      	bhi.n	800a20c <_scanf_float+0x64>
 800a286:	a001      	add	r0, pc, #4	@ (adr r0, 800a28c <_scanf_float+0xe4>)
 800a288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a28c:	0800a341 	.word	0x0800a341
 800a290:	0800a20d 	.word	0x0800a20d
 800a294:	0800a341 	.word	0x0800a341
 800a298:	0800a3d7 	.word	0x0800a3d7
 800a29c:	0800a20d 	.word	0x0800a20d
 800a2a0:	0800a2e9 	.word	0x0800a2e9
 800a2a4:	0800a327 	.word	0x0800a327
 800a2a8:	0800a327 	.word	0x0800a327
 800a2ac:	0800a327 	.word	0x0800a327
 800a2b0:	0800a327 	.word	0x0800a327
 800a2b4:	0800a327 	.word	0x0800a327
 800a2b8:	0800a327 	.word	0x0800a327
 800a2bc:	0800a327 	.word	0x0800a327
 800a2c0:	0800a327 	.word	0x0800a327
 800a2c4:	0800a327 	.word	0x0800a327
 800a2c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a2ca:	d809      	bhi.n	800a2e0 <_scanf_float+0x138>
 800a2cc:	2b60      	cmp	r3, #96	@ 0x60
 800a2ce:	d8b2      	bhi.n	800a236 <_scanf_float+0x8e>
 800a2d0:	2b54      	cmp	r3, #84	@ 0x54
 800a2d2:	d07b      	beq.n	800a3cc <_scanf_float+0x224>
 800a2d4:	2b59      	cmp	r3, #89	@ 0x59
 800a2d6:	d199      	bne.n	800a20c <_scanf_float+0x64>
 800a2d8:	2d07      	cmp	r5, #7
 800a2da:	d197      	bne.n	800a20c <_scanf_float+0x64>
 800a2dc:	2508      	movs	r5, #8
 800a2de:	e02c      	b.n	800a33a <_scanf_float+0x192>
 800a2e0:	2b74      	cmp	r3, #116	@ 0x74
 800a2e2:	d073      	beq.n	800a3cc <_scanf_float+0x224>
 800a2e4:	2b79      	cmp	r3, #121	@ 0x79
 800a2e6:	e7f6      	b.n	800a2d6 <_scanf_float+0x12e>
 800a2e8:	6821      	ldr	r1, [r4, #0]
 800a2ea:	05c8      	lsls	r0, r1, #23
 800a2ec:	d51b      	bpl.n	800a326 <_scanf_float+0x17e>
 800a2ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a2f2:	6021      	str	r1, [r4, #0]
 800a2f4:	f109 0901 	add.w	r9, r9, #1
 800a2f8:	f1bb 0f00 	cmp.w	fp, #0
 800a2fc:	d003      	beq.n	800a306 <_scanf_float+0x15e>
 800a2fe:	3201      	adds	r2, #1
 800a300:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a304:	60a2      	str	r2, [r4, #8]
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	3b01      	subs	r3, #1
 800a30a:	60a3      	str	r3, [r4, #8]
 800a30c:	6923      	ldr	r3, [r4, #16]
 800a30e:	3301      	adds	r3, #1
 800a310:	6123      	str	r3, [r4, #16]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3b01      	subs	r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	f340 8087 	ble.w	800a42c <_scanf_float+0x284>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	e765      	b.n	800a1f2 <_scanf_float+0x4a>
 800a326:	eb1a 0105 	adds.w	r1, sl, r5
 800a32a:	f47f af6f 	bne.w	800a20c <_scanf_float+0x64>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a334:	6022      	str	r2, [r4, #0]
 800a336:	460d      	mov	r5, r1
 800a338:	468a      	mov	sl, r1
 800a33a:	f806 3b01 	strb.w	r3, [r6], #1
 800a33e:	e7e2      	b.n	800a306 <_scanf_float+0x15e>
 800a340:	6822      	ldr	r2, [r4, #0]
 800a342:	0610      	lsls	r0, r2, #24
 800a344:	f57f af62 	bpl.w	800a20c <_scanf_float+0x64>
 800a348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a34c:	6022      	str	r2, [r4, #0]
 800a34e:	e7f4      	b.n	800a33a <_scanf_float+0x192>
 800a350:	f1ba 0f00 	cmp.w	sl, #0
 800a354:	d10e      	bne.n	800a374 <_scanf_float+0x1cc>
 800a356:	f1b9 0f00 	cmp.w	r9, #0
 800a35a:	d10e      	bne.n	800a37a <_scanf_float+0x1d2>
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a366:	d108      	bne.n	800a37a <_scanf_float+0x1d2>
 800a368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a36c:	6022      	str	r2, [r4, #0]
 800a36e:	f04f 0a01 	mov.w	sl, #1
 800a372:	e7e2      	b.n	800a33a <_scanf_float+0x192>
 800a374:	f1ba 0f02 	cmp.w	sl, #2
 800a378:	d055      	beq.n	800a426 <_scanf_float+0x27e>
 800a37a:	2d01      	cmp	r5, #1
 800a37c:	d002      	beq.n	800a384 <_scanf_float+0x1dc>
 800a37e:	2d04      	cmp	r5, #4
 800a380:	f47f af44 	bne.w	800a20c <_scanf_float+0x64>
 800a384:	3501      	adds	r5, #1
 800a386:	b2ed      	uxtb	r5, r5
 800a388:	e7d7      	b.n	800a33a <_scanf_float+0x192>
 800a38a:	f1ba 0f01 	cmp.w	sl, #1
 800a38e:	f47f af3d 	bne.w	800a20c <_scanf_float+0x64>
 800a392:	f04f 0a02 	mov.w	sl, #2
 800a396:	e7d0      	b.n	800a33a <_scanf_float+0x192>
 800a398:	b97d      	cbnz	r5, 800a3ba <_scanf_float+0x212>
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	f47f af38 	bne.w	800a212 <_scanf_float+0x6a>
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3ac:	f040 8108 	bne.w	800a5c0 <_scanf_float+0x418>
 800a3b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	2501      	movs	r5, #1
 800a3b8:	e7bf      	b.n	800a33a <_scanf_float+0x192>
 800a3ba:	2d03      	cmp	r5, #3
 800a3bc:	d0e2      	beq.n	800a384 <_scanf_float+0x1dc>
 800a3be:	2d05      	cmp	r5, #5
 800a3c0:	e7de      	b.n	800a380 <_scanf_float+0x1d8>
 800a3c2:	2d02      	cmp	r5, #2
 800a3c4:	f47f af22 	bne.w	800a20c <_scanf_float+0x64>
 800a3c8:	2503      	movs	r5, #3
 800a3ca:	e7b6      	b.n	800a33a <_scanf_float+0x192>
 800a3cc:	2d06      	cmp	r5, #6
 800a3ce:	f47f af1d 	bne.w	800a20c <_scanf_float+0x64>
 800a3d2:	2507      	movs	r5, #7
 800a3d4:	e7b1      	b.n	800a33a <_scanf_float+0x192>
 800a3d6:	6822      	ldr	r2, [r4, #0]
 800a3d8:	0591      	lsls	r1, r2, #22
 800a3da:	f57f af17 	bpl.w	800a20c <_scanf_float+0x64>
 800a3de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a3e2:	6022      	str	r2, [r4, #0]
 800a3e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3e8:	e7a7      	b.n	800a33a <_scanf_float+0x192>
 800a3ea:	6822      	ldr	r2, [r4, #0]
 800a3ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a3f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a3f4:	d006      	beq.n	800a404 <_scanf_float+0x25c>
 800a3f6:	0550      	lsls	r0, r2, #21
 800a3f8:	f57f af08 	bpl.w	800a20c <_scanf_float+0x64>
 800a3fc:	f1b9 0f00 	cmp.w	r9, #0
 800a400:	f000 80de 	beq.w	800a5c0 <_scanf_float+0x418>
 800a404:	0591      	lsls	r1, r2, #22
 800a406:	bf58      	it	pl
 800a408:	9902      	ldrpl	r1, [sp, #8]
 800a40a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a40e:	bf58      	it	pl
 800a410:	eba9 0101 	subpl.w	r1, r9, r1
 800a414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a418:	bf58      	it	pl
 800a41a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	f04f 0900 	mov.w	r9, #0
 800a424:	e789      	b.n	800a33a <_scanf_float+0x192>
 800a426:	f04f 0a03 	mov.w	sl, #3
 800a42a:	e786      	b.n	800a33a <_scanf_float+0x192>
 800a42c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a430:	4639      	mov	r1, r7
 800a432:	4640      	mov	r0, r8
 800a434:	4798      	blx	r3
 800a436:	2800      	cmp	r0, #0
 800a438:	f43f aedb 	beq.w	800a1f2 <_scanf_float+0x4a>
 800a43c:	e6e6      	b.n	800a20c <_scanf_float+0x64>
 800a43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a446:	463a      	mov	r2, r7
 800a448:	4640      	mov	r0, r8
 800a44a:	4798      	blx	r3
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	3b01      	subs	r3, #1
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	e6e8      	b.n	800a226 <_scanf_float+0x7e>
 800a454:	1e6b      	subs	r3, r5, #1
 800a456:	2b06      	cmp	r3, #6
 800a458:	d824      	bhi.n	800a4a4 <_scanf_float+0x2fc>
 800a45a:	2d02      	cmp	r5, #2
 800a45c:	d836      	bhi.n	800a4cc <_scanf_float+0x324>
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	429e      	cmp	r6, r3
 800a462:	f67f aee4 	bls.w	800a22e <_scanf_float+0x86>
 800a466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a46e:	463a      	mov	r2, r7
 800a470:	4640      	mov	r0, r8
 800a472:	4798      	blx	r3
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	3b01      	subs	r3, #1
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	e7f0      	b.n	800a45e <_scanf_float+0x2b6>
 800a47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a480:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a484:	463a      	mov	r2, r7
 800a486:	4640      	mov	r0, r8
 800a488:	4798      	blx	r3
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	6123      	str	r3, [r4, #16]
 800a490:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a494:	fa5f fa8a 	uxtb.w	sl, sl
 800a498:	f1ba 0f02 	cmp.w	sl, #2
 800a49c:	d1ee      	bne.n	800a47c <_scanf_float+0x2d4>
 800a49e:	3d03      	subs	r5, #3
 800a4a0:	b2ed      	uxtb	r5, r5
 800a4a2:	1b76      	subs	r6, r6, r5
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	05da      	lsls	r2, r3, #23
 800a4a8:	d530      	bpl.n	800a50c <_scanf_float+0x364>
 800a4aa:	055b      	lsls	r3, r3, #21
 800a4ac:	d511      	bpl.n	800a4d2 <_scanf_float+0x32a>
 800a4ae:	9b01      	ldr	r3, [sp, #4]
 800a4b0:	429e      	cmp	r6, r3
 800a4b2:	f67f aebc 	bls.w	800a22e <_scanf_float+0x86>
 800a4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4be:	463a      	mov	r2, r7
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4798      	blx	r3
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	e7f0      	b.n	800a4ae <_scanf_float+0x306>
 800a4cc:	46aa      	mov	sl, r5
 800a4ce:	46b3      	mov	fp, r6
 800a4d0:	e7de      	b.n	800a490 <_scanf_float+0x2e8>
 800a4d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	2965      	cmp	r1, #101	@ 0x65
 800a4da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4de:	f106 35ff 	add.w	r5, r6, #4294967295
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	d00c      	beq.n	800a500 <_scanf_float+0x358>
 800a4e6:	2945      	cmp	r1, #69	@ 0x45
 800a4e8:	d00a      	beq.n	800a500 <_scanf_float+0x358>
 800a4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4ee:	463a      	mov	r2, r7
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	4798      	blx	r3
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	1eb5      	subs	r5, r6, #2
 800a4fe:	6123      	str	r3, [r4, #16]
 800a500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a504:	463a      	mov	r2, r7
 800a506:	4640      	mov	r0, r8
 800a508:	4798      	blx	r3
 800a50a:	462e      	mov	r6, r5
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	f012 0210 	ands.w	r2, r2, #16
 800a512:	d001      	beq.n	800a518 <_scanf_float+0x370>
 800a514:	2000      	movs	r0, #0
 800a516:	e68b      	b.n	800a230 <_scanf_float+0x88>
 800a518:	7032      	strb	r2, [r6, #0]
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a524:	d11c      	bne.n	800a560 <_scanf_float+0x3b8>
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	454b      	cmp	r3, r9
 800a52a:	eba3 0209 	sub.w	r2, r3, r9
 800a52e:	d123      	bne.n	800a578 <_scanf_float+0x3d0>
 800a530:	9901      	ldr	r1, [sp, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	4640      	mov	r0, r8
 800a536:	f7ff f953 	bl	80097e0 <_strtod_r>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	6821      	ldr	r1, [r4, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f011 0f02 	tst.w	r1, #2
 800a544:	ec57 6b10 	vmov	r6, r7, d0
 800a548:	f103 0204 	add.w	r2, r3, #4
 800a54c:	d01f      	beq.n	800a58e <_scanf_float+0x3e6>
 800a54e:	9903      	ldr	r1, [sp, #12]
 800a550:	600a      	str	r2, [r1, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	e9c3 6700 	strd	r6, r7, [r3]
 800a558:	68e3      	ldr	r3, [r4, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60e3      	str	r3, [r4, #12]
 800a55e:	e7d9      	b.n	800a514 <_scanf_float+0x36c>
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0e4      	beq.n	800a530 <_scanf_float+0x388>
 800a566:	9905      	ldr	r1, [sp, #20]
 800a568:	230a      	movs	r3, #10
 800a56a:	3101      	adds	r1, #1
 800a56c:	4640      	mov	r0, r8
 800a56e:	f7ff f9b7 	bl	80098e0 <_strtol_r>
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	9e05      	ldr	r6, [sp, #20]
 800a576:	1ac2      	subs	r2, r0, r3
 800a578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a57c:	429e      	cmp	r6, r3
 800a57e:	bf28      	it	cs
 800a580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a584:	4910      	ldr	r1, [pc, #64]	@ (800a5c8 <_scanf_float+0x420>)
 800a586:	4630      	mov	r0, r6
 800a588:	f000 f918 	bl	800a7bc <siprintf>
 800a58c:	e7d0      	b.n	800a530 <_scanf_float+0x388>
 800a58e:	f011 0f04 	tst.w	r1, #4
 800a592:	9903      	ldr	r1, [sp, #12]
 800a594:	600a      	str	r2, [r1, #0]
 800a596:	d1dc      	bne.n	800a552 <_scanf_float+0x3aa>
 800a598:	681d      	ldr	r5, [r3, #0]
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	f7f6 fad3 	bl	8000b4c <__aeabi_dcmpun>
 800a5a6:	b128      	cbz	r0, 800a5b4 <_scanf_float+0x40c>
 800a5a8:	4808      	ldr	r0, [pc, #32]	@ (800a5cc <_scanf_float+0x424>)
 800a5aa:	f001 f841 	bl	800b630 <nanf>
 800a5ae:	ed85 0a00 	vstr	s0, [r5]
 800a5b2:	e7d1      	b.n	800a558 <_scanf_float+0x3b0>
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	f7f6 fb26 	bl	8000c08 <__aeabi_d2f>
 800a5bc:	6028      	str	r0, [r5, #0]
 800a5be:	e7cb      	b.n	800a558 <_scanf_float+0x3b0>
 800a5c0:	f04f 0900 	mov.w	r9, #0
 800a5c4:	e629      	b.n	800a21a <_scanf_float+0x72>
 800a5c6:	bf00      	nop
 800a5c8:	0800fcfb 	.word	0x0800fcfb
 800a5cc:	0800f639 	.word	0x0800f639

0800a5d0 <std>:
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5de:	6083      	str	r3, [r0, #8]
 800a5e0:	8181      	strh	r1, [r0, #12]
 800a5e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5e4:	81c2      	strh	r2, [r0, #14]
 800a5e6:	6183      	str	r3, [r0, #24]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	2208      	movs	r2, #8
 800a5ec:	305c      	adds	r0, #92	@ 0x5c
 800a5ee:	f000 f9ad 	bl	800a94c <memset>
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <std+0x58>)
 800a5f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a62c <std+0x5c>)
 800a5f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a630 <std+0x60>)
 800a5fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a634 <std+0x64>)
 800a600:	6323      	str	r3, [r4, #48]	@ 0x30
 800a602:	4b0d      	ldr	r3, [pc, #52]	@ (800a638 <std+0x68>)
 800a604:	6224      	str	r4, [r4, #32]
 800a606:	429c      	cmp	r4, r3
 800a608:	d006      	beq.n	800a618 <std+0x48>
 800a60a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a60e:	4294      	cmp	r4, r2
 800a610:	d002      	beq.n	800a618 <std+0x48>
 800a612:	33d0      	adds	r3, #208	@ 0xd0
 800a614:	429c      	cmp	r4, r3
 800a616:	d105      	bne.n	800a624 <std+0x54>
 800a618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a620:	f000 bfe0 	b.w	800b5e4 <__retarget_lock_init_recursive>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	bf00      	nop
 800a628:	0800a851 	.word	0x0800a851
 800a62c:	0800a877 	.word	0x0800a877
 800a630:	0800a8af 	.word	0x0800a8af
 800a634:	0800a8d3 	.word	0x0800a8d3
 800a638:	20009594 	.word	0x20009594

0800a63c <stdio_exit_handler>:
 800a63c:	4a02      	ldr	r2, [pc, #8]	@ (800a648 <stdio_exit_handler+0xc>)
 800a63e:	4903      	ldr	r1, [pc, #12]	@ (800a64c <stdio_exit_handler+0x10>)
 800a640:	4803      	ldr	r0, [pc, #12]	@ (800a650 <stdio_exit_handler+0x14>)
 800a642:	f000 b869 	b.w	800a718 <_fwalk_sglue>
 800a646:	bf00      	nop
 800a648:	2000001c 	.word	0x2000001c
 800a64c:	0800def9 	.word	0x0800def9
 800a650:	200001a0 	.word	0x200001a0

0800a654 <cleanup_stdio>:
 800a654:	6841      	ldr	r1, [r0, #4]
 800a656:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <cleanup_stdio+0x34>)
 800a658:	4299      	cmp	r1, r3
 800a65a:	b510      	push	{r4, lr}
 800a65c:	4604      	mov	r4, r0
 800a65e:	d001      	beq.n	800a664 <cleanup_stdio+0x10>
 800a660:	f003 fc4a 	bl	800def8 <_fflush_r>
 800a664:	68a1      	ldr	r1, [r4, #8]
 800a666:	4b09      	ldr	r3, [pc, #36]	@ (800a68c <cleanup_stdio+0x38>)
 800a668:	4299      	cmp	r1, r3
 800a66a:	d002      	beq.n	800a672 <cleanup_stdio+0x1e>
 800a66c:	4620      	mov	r0, r4
 800a66e:	f003 fc43 	bl	800def8 <_fflush_r>
 800a672:	68e1      	ldr	r1, [r4, #12]
 800a674:	4b06      	ldr	r3, [pc, #24]	@ (800a690 <cleanup_stdio+0x3c>)
 800a676:	4299      	cmp	r1, r3
 800a678:	d004      	beq.n	800a684 <cleanup_stdio+0x30>
 800a67a:	4620      	mov	r0, r4
 800a67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a680:	f003 bc3a 	b.w	800def8 <_fflush_r>
 800a684:	bd10      	pop	{r4, pc}
 800a686:	bf00      	nop
 800a688:	20009594 	.word	0x20009594
 800a68c:	200095fc 	.word	0x200095fc
 800a690:	20009664 	.word	0x20009664

0800a694 <global_stdio_init.part.0>:
 800a694:	b510      	push	{r4, lr}
 800a696:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <global_stdio_init.part.0+0x30>)
 800a698:	4c0b      	ldr	r4, [pc, #44]	@ (800a6c8 <global_stdio_init.part.0+0x34>)
 800a69a:	4a0c      	ldr	r2, [pc, #48]	@ (800a6cc <global_stdio_init.part.0+0x38>)
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2104      	movs	r1, #4
 800a6a4:	f7ff ff94 	bl	800a5d0 <std>
 800a6a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	2109      	movs	r1, #9
 800a6b0:	f7ff ff8e 	bl	800a5d0 <std>
 800a6b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6be:	2112      	movs	r1, #18
 800a6c0:	f7ff bf86 	b.w	800a5d0 <std>
 800a6c4:	200096cc 	.word	0x200096cc
 800a6c8:	20009594 	.word	0x20009594
 800a6cc:	0800a63d 	.word	0x0800a63d

0800a6d0 <__sfp_lock_acquire>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	@ (800a6d8 <__sfp_lock_acquire+0x8>)
 800a6d2:	f000 bf89 	b.w	800b5e8 <__retarget_lock_acquire_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	200096fb 	.word	0x200096fb

0800a6dc <__sfp_lock_release>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	@ (800a6e4 <__sfp_lock_release+0x8>)
 800a6de:	f000 bf85 	b.w	800b5ec <__retarget_lock_release_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	200096fb 	.word	0x200096fb

0800a6e8 <__sinit>:
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	f7ff fff0 	bl	800a6d0 <__sfp_lock_acquire>
 800a6f0:	6a23      	ldr	r3, [r4, #32]
 800a6f2:	b11b      	cbz	r3, 800a6fc <__sinit+0x14>
 800a6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f8:	f7ff bff0 	b.w	800a6dc <__sfp_lock_release>
 800a6fc:	4b04      	ldr	r3, [pc, #16]	@ (800a710 <__sinit+0x28>)
 800a6fe:	6223      	str	r3, [r4, #32]
 800a700:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <__sinit+0x2c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1f5      	bne.n	800a6f4 <__sinit+0xc>
 800a708:	f7ff ffc4 	bl	800a694 <global_stdio_init.part.0>
 800a70c:	e7f2      	b.n	800a6f4 <__sinit+0xc>
 800a70e:	bf00      	nop
 800a710:	0800a655 	.word	0x0800a655
 800a714:	200096cc 	.word	0x200096cc

0800a718 <_fwalk_sglue>:
 800a718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4607      	mov	r7, r0
 800a71e:	4688      	mov	r8, r1
 800a720:	4614      	mov	r4, r2
 800a722:	2600      	movs	r6, #0
 800a724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a728:	f1b9 0901 	subs.w	r9, r9, #1
 800a72c:	d505      	bpl.n	800a73a <_fwalk_sglue+0x22>
 800a72e:	6824      	ldr	r4, [r4, #0]
 800a730:	2c00      	cmp	r4, #0
 800a732:	d1f7      	bne.n	800a724 <_fwalk_sglue+0xc>
 800a734:	4630      	mov	r0, r6
 800a736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73a:	89ab      	ldrh	r3, [r5, #12]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d907      	bls.n	800a750 <_fwalk_sglue+0x38>
 800a740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a744:	3301      	adds	r3, #1
 800a746:	d003      	beq.n	800a750 <_fwalk_sglue+0x38>
 800a748:	4629      	mov	r1, r5
 800a74a:	4638      	mov	r0, r7
 800a74c:	47c0      	blx	r8
 800a74e:	4306      	orrs	r6, r0
 800a750:	3568      	adds	r5, #104	@ 0x68
 800a752:	e7e9      	b.n	800a728 <_fwalk_sglue+0x10>

0800a754 <sniprintf>:
 800a754:	b40c      	push	{r2, r3}
 800a756:	b530      	push	{r4, r5, lr}
 800a758:	4b17      	ldr	r3, [pc, #92]	@ (800a7b8 <sniprintf+0x64>)
 800a75a:	1e0c      	subs	r4, r1, #0
 800a75c:	681d      	ldr	r5, [r3, #0]
 800a75e:	b09d      	sub	sp, #116	@ 0x74
 800a760:	da08      	bge.n	800a774 <sniprintf+0x20>
 800a762:	238b      	movs	r3, #139	@ 0x8b
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	b01d      	add	sp, #116	@ 0x74
 800a76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a770:	b002      	add	sp, #8
 800a772:	4770      	bx	lr
 800a774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a778:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a77c:	bf14      	ite	ne
 800a77e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a782:	4623      	moveq	r3, r4
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a78c:	9002      	str	r0, [sp, #8]
 800a78e:	9006      	str	r0, [sp, #24]
 800a790:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a794:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a796:	ab21      	add	r3, sp, #132	@ 0x84
 800a798:	a902      	add	r1, sp, #8
 800a79a:	4628      	mov	r0, r5
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	f002 ff11 	bl	800d5c4 <_svfiprintf_r>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	bfbc      	itt	lt
 800a7a6:	238b      	movlt	r3, #139	@ 0x8b
 800a7a8:	602b      	strlt	r3, [r5, #0]
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	d0dd      	beq.n	800a76a <sniprintf+0x16>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	e7d9      	b.n	800a76a <sniprintf+0x16>
 800a7b6:	bf00      	nop
 800a7b8:	2000019c 	.word	0x2000019c

0800a7bc <siprintf>:
 800a7bc:	b40e      	push	{r1, r2, r3}
 800a7be:	b500      	push	{lr}
 800a7c0:	b09c      	sub	sp, #112	@ 0x70
 800a7c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7c4:	9002      	str	r0, [sp, #8]
 800a7c6:	9006      	str	r0, [sp, #24]
 800a7c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7cc:	4809      	ldr	r0, [pc, #36]	@ (800a7f4 <siprintf+0x38>)
 800a7ce:	9107      	str	r1, [sp, #28]
 800a7d0:	9104      	str	r1, [sp, #16]
 800a7d2:	4909      	ldr	r1, [pc, #36]	@ (800a7f8 <siprintf+0x3c>)
 800a7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d8:	9105      	str	r1, [sp, #20]
 800a7da:	6800      	ldr	r0, [r0, #0]
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	a902      	add	r1, sp, #8
 800a7e0:	f002 fef0 	bl	800d5c4 <_svfiprintf_r>
 800a7e4:	9b02      	ldr	r3, [sp, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	b01c      	add	sp, #112	@ 0x70
 800a7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f0:	b003      	add	sp, #12
 800a7f2:	4770      	bx	lr
 800a7f4:	2000019c 	.word	0x2000019c
 800a7f8:	ffff0208 	.word	0xffff0208

0800a7fc <siscanf>:
 800a7fc:	b40e      	push	{r1, r2, r3}
 800a7fe:	b530      	push	{r4, r5, lr}
 800a800:	b09c      	sub	sp, #112	@ 0x70
 800a802:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a804:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a808:	f854 5b04 	ldr.w	r5, [r4], #4
 800a80c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a810:	9002      	str	r0, [sp, #8]
 800a812:	9006      	str	r0, [sp, #24]
 800a814:	f7f5 fd3c 	bl	8000290 <strlen>
 800a818:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <siscanf+0x4c>)
 800a81a:	9003      	str	r0, [sp, #12]
 800a81c:	9007      	str	r0, [sp, #28]
 800a81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a820:	480a      	ldr	r0, [pc, #40]	@ (800a84c <siscanf+0x50>)
 800a822:	9401      	str	r4, [sp, #4]
 800a824:	2300      	movs	r3, #0
 800a826:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a828:	9314      	str	r3, [sp, #80]	@ 0x50
 800a82a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a82e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a832:	462a      	mov	r2, r5
 800a834:	4623      	mov	r3, r4
 800a836:	a902      	add	r1, sp, #8
 800a838:	6800      	ldr	r0, [r0, #0]
 800a83a:	f003 f817 	bl	800d86c <__ssvfiscanf_r>
 800a83e:	b01c      	add	sp, #112	@ 0x70
 800a840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a844:	b003      	add	sp, #12
 800a846:	4770      	bx	lr
 800a848:	0800a873 	.word	0x0800a873
 800a84c:	2000019c 	.word	0x2000019c

0800a850 <__sread>:
 800a850:	b510      	push	{r4, lr}
 800a852:	460c      	mov	r4, r1
 800a854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a858:	f000 fe66 	bl	800b528 <_read_r>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	bfab      	itete	ge
 800a860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a862:	89a3      	ldrhlt	r3, [r4, #12]
 800a864:	181b      	addge	r3, r3, r0
 800a866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a86a:	bfac      	ite	ge
 800a86c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a86e:	81a3      	strhlt	r3, [r4, #12]
 800a870:	bd10      	pop	{r4, pc}

0800a872 <__seofread>:
 800a872:	2000      	movs	r0, #0
 800a874:	4770      	bx	lr

0800a876 <__swrite>:
 800a876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87a:	461f      	mov	r7, r3
 800a87c:	898b      	ldrh	r3, [r1, #12]
 800a87e:	05db      	lsls	r3, r3, #23
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	4616      	mov	r6, r2
 800a886:	d505      	bpl.n	800a894 <__swrite+0x1e>
 800a888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88c:	2302      	movs	r3, #2
 800a88e:	2200      	movs	r2, #0
 800a890:	f000 fe38 	bl	800b504 <_lseek_r>
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a89a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8aa:	f000 be5f 	b.w	800b56c <_write_r>

0800a8ae <__sseek>:
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b6:	f000 fe25 	bl	800b504 <_lseek_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	bf15      	itete	ne
 800a8c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8ca:	81a3      	strheq	r3, [r4, #12]
 800a8cc:	bf18      	it	ne
 800a8ce:	81a3      	strhne	r3, [r4, #12]
 800a8d0:	bd10      	pop	{r4, pc}

0800a8d2 <__sclose>:
 800a8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d6:	f000 be05 	b.w	800b4e4 <_close_r>

0800a8da <_vsniprintf_r>:
 800a8da:	b530      	push	{r4, r5, lr}
 800a8dc:	4614      	mov	r4, r2
 800a8de:	2c00      	cmp	r4, #0
 800a8e0:	b09b      	sub	sp, #108	@ 0x6c
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	da05      	bge.n	800a8f4 <_vsniprintf_r+0x1a>
 800a8e8:	238b      	movs	r3, #139	@ 0x8b
 800a8ea:	6003      	str	r3, [r0, #0]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	b01b      	add	sp, #108	@ 0x6c
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a8fc:	bf14      	ite	ne
 800a8fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a902:	4623      	moveq	r3, r4
 800a904:	9302      	str	r3, [sp, #8]
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a90c:	9100      	str	r1, [sp, #0]
 800a90e:	9104      	str	r1, [sp, #16]
 800a910:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a914:	4669      	mov	r1, sp
 800a916:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a918:	f002 fe54 	bl	800d5c4 <_svfiprintf_r>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	bfbc      	itt	lt
 800a920:	238b      	movlt	r3, #139	@ 0x8b
 800a922:	602b      	strlt	r3, [r5, #0]
 800a924:	2c00      	cmp	r4, #0
 800a926:	d0e3      	beq.n	800a8f0 <_vsniprintf_r+0x16>
 800a928:	9b00      	ldr	r3, [sp, #0]
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e7df      	b.n	800a8f0 <_vsniprintf_r+0x16>

0800a930 <vsniprintf>:
 800a930:	b507      	push	{r0, r1, r2, lr}
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	4613      	mov	r3, r2
 800a936:	460a      	mov	r2, r1
 800a938:	4601      	mov	r1, r0
 800a93a:	4803      	ldr	r0, [pc, #12]	@ (800a948 <vsniprintf+0x18>)
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f7ff ffcc 	bl	800a8da <_vsniprintf_r>
 800a942:	b003      	add	sp, #12
 800a944:	f85d fb04 	ldr.w	pc, [sp], #4
 800a948:	2000019c 	.word	0x2000019c

0800a94c <memset>:
 800a94c:	4402      	add	r2, r0
 800a94e:	4603      	mov	r3, r0
 800a950:	4293      	cmp	r3, r2
 800a952:	d100      	bne.n	800a956 <memset+0xa>
 800a954:	4770      	bx	lr
 800a956:	f803 1b01 	strb.w	r1, [r3], #1
 800a95a:	e7f9      	b.n	800a950 <memset+0x4>

0800a95c <strchr>:
 800a95c:	b2c9      	uxtb	r1, r1
 800a95e:	4603      	mov	r3, r0
 800a960:	4618      	mov	r0, r3
 800a962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a966:	b112      	cbz	r2, 800a96e <strchr+0x12>
 800a968:	428a      	cmp	r2, r1
 800a96a:	d1f9      	bne.n	800a960 <strchr+0x4>
 800a96c:	4770      	bx	lr
 800a96e:	2900      	cmp	r1, #0
 800a970:	bf18      	it	ne
 800a972:	2000      	movne	r0, #0
 800a974:	4770      	bx	lr

0800a976 <strncmp>:
 800a976:	b510      	push	{r4, lr}
 800a978:	b16a      	cbz	r2, 800a996 <strncmp+0x20>
 800a97a:	3901      	subs	r1, #1
 800a97c:	1884      	adds	r4, r0, r2
 800a97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a982:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a986:	429a      	cmp	r2, r3
 800a988:	d103      	bne.n	800a992 <strncmp+0x1c>
 800a98a:	42a0      	cmp	r0, r4
 800a98c:	d001      	beq.n	800a992 <strncmp+0x1c>
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d1f5      	bne.n	800a97e <strncmp+0x8>
 800a992:	1ad0      	subs	r0, r2, r3
 800a994:	bd10      	pop	{r4, pc}
 800a996:	4610      	mov	r0, r2
 800a998:	e7fc      	b.n	800a994 <strncmp+0x1e>

0800a99a <strncpy>:
 800a99a:	b510      	push	{r4, lr}
 800a99c:	3901      	subs	r1, #1
 800a99e:	4603      	mov	r3, r0
 800a9a0:	b132      	cbz	r2, 800a9b0 <strncpy+0x16>
 800a9a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9a6:	f803 4b01 	strb.w	r4, [r3], #1
 800a9aa:	3a01      	subs	r2, #1
 800a9ac:	2c00      	cmp	r4, #0
 800a9ae:	d1f7      	bne.n	800a9a0 <strncpy+0x6>
 800a9b0:	441a      	add	r2, r3
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d100      	bne.n	800a9ba <strncpy+0x20>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a9be:	e7f9      	b.n	800a9b4 <strncpy+0x1a>

0800a9c0 <strrchr>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	d10e      	bne.n	800a9e8 <strrchr+0x28>
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d0:	f7ff bfc4 	b.w	800a95c <strchr>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff ffbe 	bl	800a95c <strchr>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1f7      	bne.n	800a9d4 <strrchr+0x14>
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	e7f5      	b.n	800a9d8 <strrchr+0x18>

0800a9ec <strstr>:
 800a9ec:	780a      	ldrb	r2, [r1, #0]
 800a9ee:	b570      	push	{r4, r5, r6, lr}
 800a9f0:	b96a      	cbnz	r2, 800aa0e <strstr+0x22>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d109      	bne.n	800aa0c <strstr+0x20>
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0f6      	beq.n	800a9f2 <strstr+0x6>
 800aa04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800aa08:	429e      	cmp	r6, r3
 800aa0a:	d0f7      	beq.n	800a9fc <strstr+0x10>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	7803      	ldrb	r3, [r0, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d1ef      	bne.n	800a9f4 <strstr+0x8>
 800aa14:	4618      	mov	r0, r3
 800aa16:	e7ec      	b.n	800a9f2 <strstr+0x6>

0800aa18 <validate_structure>:
 800aa18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa1a:	6801      	ldr	r1, [r0, #0]
 800aa1c:	293b      	cmp	r1, #59	@ 0x3b
 800aa1e:	4604      	mov	r4, r0
 800aa20:	d911      	bls.n	800aa46 <validate_structure+0x2e>
 800aa22:	223c      	movs	r2, #60	@ 0x3c
 800aa24:	4668      	mov	r0, sp
 800aa26:	f000 fe09 	bl	800b63c <div>
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	9900      	ldr	r1, [sp, #0]
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	440b      	add	r3, r1
 800aa34:	6063      	str	r3, [r4, #4]
 800aa36:	bfbb      	ittet	lt
 800aa38:	323c      	addlt	r2, #60	@ 0x3c
 800aa3a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa3e:	6022      	strge	r2, [r4, #0]
 800aa40:	6022      	strlt	r2, [r4, #0]
 800aa42:	bfb8      	it	lt
 800aa44:	6063      	strlt	r3, [r4, #4]
 800aa46:	6861      	ldr	r1, [r4, #4]
 800aa48:	293b      	cmp	r1, #59	@ 0x3b
 800aa4a:	d911      	bls.n	800aa70 <validate_structure+0x58>
 800aa4c:	223c      	movs	r2, #60	@ 0x3c
 800aa4e:	4668      	mov	r0, sp
 800aa50:	f000 fdf4 	bl	800b63c <div>
 800aa54:	9a01      	ldr	r2, [sp, #4]
 800aa56:	68a3      	ldr	r3, [r4, #8]
 800aa58:	9900      	ldr	r1, [sp, #0]
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	440b      	add	r3, r1
 800aa5e:	60a3      	str	r3, [r4, #8]
 800aa60:	bfbb      	ittet	lt
 800aa62:	323c      	addlt	r2, #60	@ 0x3c
 800aa64:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa68:	6062      	strge	r2, [r4, #4]
 800aa6a:	6062      	strlt	r2, [r4, #4]
 800aa6c:	bfb8      	it	lt
 800aa6e:	60a3      	strlt	r3, [r4, #8]
 800aa70:	68a1      	ldr	r1, [r4, #8]
 800aa72:	2917      	cmp	r1, #23
 800aa74:	d911      	bls.n	800aa9a <validate_structure+0x82>
 800aa76:	2218      	movs	r2, #24
 800aa78:	4668      	mov	r0, sp
 800aa7a:	f000 fddf 	bl	800b63c <div>
 800aa7e:	9a01      	ldr	r2, [sp, #4]
 800aa80:	68e3      	ldr	r3, [r4, #12]
 800aa82:	9900      	ldr	r1, [sp, #0]
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	440b      	add	r3, r1
 800aa88:	60e3      	str	r3, [r4, #12]
 800aa8a:	bfbb      	ittet	lt
 800aa8c:	3218      	addlt	r2, #24
 800aa8e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa92:	60a2      	strge	r2, [r4, #8]
 800aa94:	60a2      	strlt	r2, [r4, #8]
 800aa96:	bfb8      	it	lt
 800aa98:	60e3      	strlt	r3, [r4, #12]
 800aa9a:	6921      	ldr	r1, [r4, #16]
 800aa9c:	290b      	cmp	r1, #11
 800aa9e:	d911      	bls.n	800aac4 <validate_structure+0xac>
 800aaa0:	220c      	movs	r2, #12
 800aaa2:	4668      	mov	r0, sp
 800aaa4:	f000 fdca 	bl	800b63c <div>
 800aaa8:	9a01      	ldr	r2, [sp, #4]
 800aaaa:	6963      	ldr	r3, [r4, #20]
 800aaac:	9900      	ldr	r1, [sp, #0]
 800aaae:	2a00      	cmp	r2, #0
 800aab0:	440b      	add	r3, r1
 800aab2:	6163      	str	r3, [r4, #20]
 800aab4:	bfbb      	ittet	lt
 800aab6:	320c      	addlt	r2, #12
 800aab8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aabc:	6122      	strge	r2, [r4, #16]
 800aabe:	6122      	strlt	r2, [r4, #16]
 800aac0:	bfb8      	it	lt
 800aac2:	6163      	strlt	r3, [r4, #20]
 800aac4:	6963      	ldr	r3, [r4, #20]
 800aac6:	079a      	lsls	r2, r3, #30
 800aac8:	d11c      	bne.n	800ab04 <validate_structure+0xec>
 800aaca:	2164      	movs	r1, #100	@ 0x64
 800aacc:	fb93 f2f1 	sdiv	r2, r3, r1
 800aad0:	fb01 3212 	mls	r2, r1, r2, r3
 800aad4:	b9c2      	cbnz	r2, 800ab08 <validate_structure+0xf0>
 800aad6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800aada:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aade:	fb93 f1f2 	sdiv	r1, r3, r2
 800aae2:	fb02 3311 	mls	r3, r2, r1, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bf14      	ite	ne
 800aaea:	231c      	movne	r3, #28
 800aaec:	231d      	moveq	r3, #29
 800aaee:	68e2      	ldr	r2, [r4, #12]
 800aaf0:	2a00      	cmp	r2, #0
 800aaf2:	dc0b      	bgt.n	800ab0c <validate_structure+0xf4>
 800aaf4:	4d31      	ldr	r5, [pc, #196]	@ (800abbc <validate_structure+0x1a4>)
 800aaf6:	200b      	movs	r0, #11
 800aaf8:	2164      	movs	r1, #100	@ 0x64
 800aafa:	68e6      	ldr	r6, [r4, #12]
 800aafc:	2e00      	cmp	r6, #0
 800aafe:	dd30      	ble.n	800ab62 <validate_structure+0x14a>
 800ab00:	b003      	add	sp, #12
 800ab02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab04:	231c      	movs	r3, #28
 800ab06:	e7f2      	b.n	800aaee <validate_structure+0xd6>
 800ab08:	231d      	movs	r3, #29
 800ab0a:	e7f0      	b.n	800aaee <validate_structure+0xd6>
 800ab0c:	4d2b      	ldr	r5, [pc, #172]	@ (800abbc <validate_structure+0x1a4>)
 800ab0e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800ab12:	2a01      	cmp	r2, #1
 800ab14:	bf14      	ite	ne
 800ab16:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800ab1a:	4618      	moveq	r0, r3
 800ab1c:	4281      	cmp	r1, r0
 800ab1e:	ddef      	ble.n	800ab00 <validate_structure+0xe8>
 800ab20:	3201      	adds	r2, #1
 800ab22:	1a09      	subs	r1, r1, r0
 800ab24:	2a0c      	cmp	r2, #12
 800ab26:	60e1      	str	r1, [r4, #12]
 800ab28:	6122      	str	r2, [r4, #16]
 800ab2a:	d1f0      	bne.n	800ab0e <validate_structure+0xf6>
 800ab2c:	6963      	ldr	r3, [r4, #20]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	6121      	str	r1, [r4, #16]
 800ab34:	0791      	lsls	r1, r2, #30
 800ab36:	6162      	str	r2, [r4, #20]
 800ab38:	d13c      	bne.n	800abb4 <validate_structure+0x19c>
 800ab3a:	2164      	movs	r1, #100	@ 0x64
 800ab3c:	fb92 f0f1 	sdiv	r0, r2, r1
 800ab40:	fb01 2210 	mls	r2, r1, r0, r2
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d137      	bne.n	800abb8 <validate_structure+0x1a0>
 800ab48:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800ab4c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ab50:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab54:	fb02 3311 	mls	r3, r2, r1, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf14      	ite	ne
 800ab5c:	231c      	movne	r3, #28
 800ab5e:	231d      	moveq	r3, #29
 800ab60:	e7d5      	b.n	800ab0e <validate_structure+0xf6>
 800ab62:	6922      	ldr	r2, [r4, #16]
 800ab64:	3a01      	subs	r2, #1
 800ab66:	6122      	str	r2, [r4, #16]
 800ab68:	3201      	adds	r2, #1
 800ab6a:	d116      	bne.n	800ab9a <validate_structure+0x182>
 800ab6c:	6963      	ldr	r3, [r4, #20]
 800ab6e:	1e5a      	subs	r2, r3, #1
 800ab70:	0797      	lsls	r7, r2, #30
 800ab72:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800ab76:	d119      	bne.n	800abac <validate_structure+0x194>
 800ab78:	fb92 f7f1 	sdiv	r7, r2, r1
 800ab7c:	fb01 2217 	mls	r2, r1, r7, r2
 800ab80:	b9b2      	cbnz	r2, 800abb0 <validate_structure+0x198>
 800ab82:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800ab86:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ab8a:	fb93 f7f2 	sdiv	r7, r3, r2
 800ab8e:	fb02 3317 	mls	r3, r2, r7, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bf14      	ite	ne
 800ab96:	231c      	movne	r3, #28
 800ab98:	231d      	moveq	r3, #29
 800ab9a:	6922      	ldr	r2, [r4, #16]
 800ab9c:	2a01      	cmp	r2, #1
 800ab9e:	bf14      	ite	ne
 800aba0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800aba4:	461a      	moveq	r2, r3
 800aba6:	4432      	add	r2, r6
 800aba8:	60e2      	str	r2, [r4, #12]
 800abaa:	e7a6      	b.n	800aafa <validate_structure+0xe2>
 800abac:	231c      	movs	r3, #28
 800abae:	e7f4      	b.n	800ab9a <validate_structure+0x182>
 800abb0:	231d      	movs	r3, #29
 800abb2:	e7f2      	b.n	800ab9a <validate_structure+0x182>
 800abb4:	231c      	movs	r3, #28
 800abb6:	e7aa      	b.n	800ab0e <validate_structure+0xf6>
 800abb8:	231d      	movs	r3, #29
 800abba:	e7a8      	b.n	800ab0e <validate_structure+0xf6>
 800abbc:	0800fd30 	.word	0x0800fd30

0800abc0 <mktime>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	b085      	sub	sp, #20
 800abc6:	4607      	mov	r7, r0
 800abc8:	f003 fa4c 	bl	800e064 <__gettzinfo>
 800abcc:	4681      	mov	r9, r0
 800abce:	4638      	mov	r0, r7
 800abd0:	f7ff ff22 	bl	800aa18 <validate_structure>
 800abd4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800abd8:	223c      	movs	r2, #60	@ 0x3c
 800abda:	fb02 4403 	mla	r4, r2, r3, r4
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	697d      	ldr	r5, [r7, #20]
 800abe2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800abe6:	fb02 4403 	mla	r4, r2, r3, r4
 800abea:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800abee:	4ac1      	ldr	r2, [pc, #772]	@ (800aef4 <mktime+0x334>)
 800abf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abf4:	3e01      	subs	r6, #1
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	4416      	add	r6, r2
 800abfa:	dd11      	ble.n	800ac20 <mktime+0x60>
 800abfc:	07a9      	lsls	r1, r5, #30
 800abfe:	d10f      	bne.n	800ac20 <mktime+0x60>
 800ac00:	2264      	movs	r2, #100	@ 0x64
 800ac02:	fb95 f3f2 	sdiv	r3, r5, r2
 800ac06:	fb02 5313 	mls	r3, r2, r3, r5
 800ac0a:	b943      	cbnz	r3, 800ac1e <mktime+0x5e>
 800ac0c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ac10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ac14:	fb93 f1f2 	sdiv	r1, r3, r2
 800ac18:	fb02 3311 	mls	r3, r2, r1, r3
 800ac1c:	b903      	cbnz	r3, 800ac20 <mktime+0x60>
 800ac1e:	3601      	adds	r6, #1
 800ac20:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800ac24:	3310      	adds	r3, #16
 800ac26:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	61fe      	str	r6, [r7, #28]
 800ac2e:	f200 8167 	bhi.w	800af00 <mktime+0x340>
 800ac32:	2d46      	cmp	r5, #70	@ 0x46
 800ac34:	f340 808e 	ble.w	800ad54 <mktime+0x194>
 800ac38:	2346      	movs	r3, #70	@ 0x46
 800ac3a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ac3e:	2164      	movs	r1, #100	@ 0x64
 800ac40:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ac44:	079a      	lsls	r2, r3, #30
 800ac46:	d17f      	bne.n	800ad48 <mktime+0x188>
 800ac48:	fb93 f2f1 	sdiv	r2, r3, r1
 800ac4c:	fb01 3212 	mls	r2, r1, r2, r3
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d17c      	bne.n	800ad4e <mktime+0x18e>
 800ac54:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ac58:	fb92 fef0 	sdiv	lr, r2, r0
 800ac5c:	fb00 221e 	mls	r2, r0, lr, r2
 800ac60:	2a00      	cmp	r2, #0
 800ac62:	bf14      	ite	ne
 800ac64:	4662      	movne	r2, ip
 800ac66:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	4416      	add	r6, r2
 800ac70:	d1e8      	bne.n	800ac44 <mktime+0x84>
 800ac72:	4ba1      	ldr	r3, [pc, #644]	@ (800aef8 <mktime+0x338>)
 800ac74:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800ac78:	fbc6 4803 	smlal	r4, r8, r6, r3
 800ac7c:	f000 f9fa 	bl	800b074 <__tz_lock>
 800ac80:	f000 fa04 	bl	800b08c <_tzset_unlocked>
 800ac84:	4b9d      	ldr	r3, [pc, #628]	@ (800aefc <mktime+0x33c>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f000 8140 	beq.w	800af0e <mktime+0x34e>
 800ac8e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800ac92:	6978      	ldr	r0, [r7, #20]
 800ac94:	4653      	mov	r3, sl
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	bfa8      	it	ge
 800ac9a:	2301      	movge	r3, #1
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aca2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800aca6:	4283      	cmp	r3, r0
 800aca8:	f040 8096 	bne.w	800add8 <mktime+0x218>
 800acac:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800acb0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800acb4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800acb8:	1a13      	subs	r3, r2, r0
 800acba:	9303      	str	r3, [sp, #12]
 800acbc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800acc0:	9302      	str	r3, [sp, #8]
 800acc2:	9a02      	ldr	r2, [sp, #8]
 800acc4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800acc8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800accc:	ebb2 0e03 	subs.w	lr, r2, r3
 800acd0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800acd4:	4574      	cmp	r4, lr
 800acd6:	eb78 0201 	sbcs.w	r2, r8, r1
 800acda:	f280 8085 	bge.w	800ade8 <mktime+0x228>
 800acde:	f8d9 2000 	ldr.w	r2, [r9]
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	f000 808d 	beq.w	800ae02 <mktime+0x242>
 800ace8:	9a03      	ldr	r2, [sp, #12]
 800acea:	4294      	cmp	r4, r2
 800acec:	eb78 020b 	sbcs.w	r2, r8, fp
 800acf0:	f2c0 810a 	blt.w	800af08 <mktime+0x348>
 800acf4:	4574      	cmp	r4, lr
 800acf6:	eb78 0101 	sbcs.w	r1, r8, r1
 800acfa:	bfb4      	ite	lt
 800acfc:	f04f 0b01 	movlt.w	fp, #1
 800ad00:	f04f 0b00 	movge.w	fp, #0
 800ad04:	f1ba 0f00 	cmp.w	sl, #0
 800ad08:	f280 8087 	bge.w	800ae1a <mktime+0x25a>
 800ad0c:	f1bb 0f01 	cmp.w	fp, #1
 800ad10:	f040 80ff 	bne.w	800af12 <mktime+0x352>
 800ad14:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ad18:	191c      	adds	r4, r3, r4
 800ad1a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ad1e:	f04f 0b01 	mov.w	fp, #1
 800ad22:	f000 f9ad 	bl	800b080 <__tz_unlock>
 800ad26:	3604      	adds	r6, #4
 800ad28:	2307      	movs	r3, #7
 800ad2a:	fb96 f3f3 	sdiv	r3, r6, r3
 800ad2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad32:	1af6      	subs	r6, r6, r3
 800ad34:	f100 80db 	bmi.w	800aeee <mktime+0x32e>
 800ad38:	f8c7 b020 	str.w	fp, [r7, #32]
 800ad3c:	61be      	str	r6, [r7, #24]
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4641      	mov	r1, r8
 800ad42:	b005      	add	sp, #20
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad48:	f240 126d 	movw	r2, #365	@ 0x16d
 800ad4c:	e78d      	b.n	800ac6a <mktime+0xaa>
 800ad4e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ad52:	e78a      	b.n	800ac6a <mktime+0xaa>
 800ad54:	d08d      	beq.n	800ac72 <mktime+0xb2>
 800ad56:	2345      	movs	r3, #69	@ 0x45
 800ad58:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ad5c:	2164      	movs	r1, #100	@ 0x64
 800ad5e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800ad62:	e012      	b.n	800ad8a <mktime+0x1ca>
 800ad64:	bb62      	cbnz	r2, 800adc0 <mktime+0x200>
 800ad66:	fb93 f2f1 	sdiv	r2, r3, r1
 800ad6a:	fb01 3212 	mls	r2, r1, r2, r3
 800ad6e:	bb52      	cbnz	r2, 800adc6 <mktime+0x206>
 800ad70:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800ad74:	fb92 fef0 	sdiv	lr, r2, r0
 800ad78:	fb00 221e 	mls	r2, r0, lr, r2
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	bf14      	ite	ne
 800ad80:	4662      	movne	r2, ip
 800ad82:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800ad86:	1ab6      	subs	r6, r6, r2
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	429d      	cmp	r5, r3
 800ad8c:	f003 0203 	and.w	r2, r3, #3
 800ad90:	dbe8      	blt.n	800ad64 <mktime+0x1a4>
 800ad92:	b9da      	cbnz	r2, 800adcc <mktime+0x20c>
 800ad94:	2264      	movs	r2, #100	@ 0x64
 800ad96:	fb95 f3f2 	sdiv	r3, r5, r2
 800ad9a:	fb02 5313 	mls	r3, r2, r3, r5
 800ad9e:	b9c3      	cbnz	r3, 800add2 <mktime+0x212>
 800ada0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800ada4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800ada8:	fb93 f1f2 	sdiv	r1, r3, r2
 800adac:	fb02 3311 	mls	r3, r2, r1, r3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f240 136d 	movw	r3, #365	@ 0x16d
 800adb6:	bf08      	it	eq
 800adb8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800adbc:	1af6      	subs	r6, r6, r3
 800adbe:	e758      	b.n	800ac72 <mktime+0xb2>
 800adc0:	f240 126d 	movw	r2, #365	@ 0x16d
 800adc4:	e7df      	b.n	800ad86 <mktime+0x1c6>
 800adc6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800adca:	e7dc      	b.n	800ad86 <mktime+0x1c6>
 800adcc:	f240 136d 	movw	r3, #365	@ 0x16d
 800add0:	e7f4      	b.n	800adbc <mktime+0x1fc>
 800add2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800add6:	e7f1      	b.n	800adbc <mktime+0x1fc>
 800add8:	f000 f8a2 	bl	800af20 <__tzcalc_limits>
 800addc:	2800      	cmp	r0, #0
 800adde:	f47f af65 	bne.w	800acac <mktime+0xec>
 800ade2:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ade6:	e791      	b.n	800ad0c <mktime+0x14c>
 800ade8:	9a02      	ldr	r2, [sp, #8]
 800adea:	1a12      	subs	r2, r2, r0
 800adec:	9202      	str	r2, [sp, #8]
 800adee:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800adf2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800adf6:	9a02      	ldr	r2, [sp, #8]
 800adf8:	4294      	cmp	r4, r2
 800adfa:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800adfe:	dbf0      	blt.n	800ade2 <mktime+0x222>
 800ae00:	e76d      	b.n	800acde <mktime+0x11e>
 800ae02:	9a03      	ldr	r2, [sp, #12]
 800ae04:	4294      	cmp	r4, r2
 800ae06:	eb78 020b 	sbcs.w	r2, r8, fp
 800ae0a:	f6ff af73 	blt.w	800acf4 <mktime+0x134>
 800ae0e:	f1ba 0f00 	cmp.w	sl, #0
 800ae12:	f6ff af7f 	blt.w	800ad14 <mktime+0x154>
 800ae16:	f04f 0b01 	mov.w	fp, #1
 800ae1a:	9a01      	ldr	r2, [sp, #4]
 800ae1c:	ea82 020b 	eor.w	r2, r2, fp
 800ae20:	2a01      	cmp	r2, #1
 800ae22:	f47f af73 	bne.w	800ad0c <mktime+0x14c>
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	d035      	beq.n	800ae98 <mktime+0x2d8>
 800ae2c:	1a1b      	subs	r3, r3, r0
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800ae34:	441a      	add	r2, r3
 800ae36:	191c      	adds	r4, r3, r4
 800ae38:	603a      	str	r2, [r7, #0]
 800ae3a:	4638      	mov	r0, r7
 800ae3c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ae40:	f7ff fdea 	bl	800aa18 <validate_structure>
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	ebb2 020a 	subs.w	r2, r2, sl
 800ae4a:	f43f af5f 	beq.w	800ad0c <mktime+0x14c>
 800ae4e:	2a01      	cmp	r2, #1
 800ae50:	dc24      	bgt.n	800ae9c <mktime+0x2dc>
 800ae52:	1c93      	adds	r3, r2, #2
 800ae54:	bfd8      	it	le
 800ae56:	2201      	movle	r2, #1
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	18d3      	adds	r3, r2, r3
 800ae5c:	d527      	bpl.n	800aeae <mktime+0x2ee>
 800ae5e:	1e6b      	subs	r3, r5, #1
 800ae60:	0798      	lsls	r0, r3, #30
 800ae62:	d11e      	bne.n	800aea2 <mktime+0x2e2>
 800ae64:	2164      	movs	r1, #100	@ 0x64
 800ae66:	fb93 f0f1 	sdiv	r0, r3, r1
 800ae6a:	fb01 3310 	mls	r3, r1, r0, r3
 800ae6e:	b9db      	cbnz	r3, 800aea8 <mktime+0x2e8>
 800ae70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ae74:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800ae78:	fb95 f1f3 	sdiv	r1, r5, r3
 800ae7c:	fb03 5511 	mls	r5, r3, r1, r5
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	f240 136d 	movw	r3, #365	@ 0x16d
 800ae86:	bf18      	it	ne
 800ae88:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	4416      	add	r6, r2
 800ae90:	e73c      	b.n	800ad0c <mktime+0x14c>
 800ae92:	f04f 0b00 	mov.w	fp, #0
 800ae96:	e7c0      	b.n	800ae1a <mktime+0x25a>
 800ae98:	1ac3      	subs	r3, r0, r3
 800ae9a:	e7c8      	b.n	800ae2e <mktime+0x26e>
 800ae9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aea0:	e7da      	b.n	800ae58 <mktime+0x298>
 800aea2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800aea6:	e7f1      	b.n	800ae8c <mktime+0x2cc>
 800aea8:	f240 136d 	movw	r3, #365	@ 0x16d
 800aeac:	e7ee      	b.n	800ae8c <mktime+0x2cc>
 800aeae:	07a9      	lsls	r1, r5, #30
 800aeb0:	d117      	bne.n	800aee2 <mktime+0x322>
 800aeb2:	2064      	movs	r0, #100	@ 0x64
 800aeb4:	fb95 f1f0 	sdiv	r1, r5, r0
 800aeb8:	fb00 5111 	mls	r1, r0, r1, r5
 800aebc:	b9a1      	cbnz	r1, 800aee8 <mktime+0x328>
 800aebe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800aec2:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800aec6:	fb95 f0f1 	sdiv	r0, r5, r1
 800aeca:	fb01 5510 	mls	r5, r1, r0, r5
 800aece:	2d00      	cmp	r5, #0
 800aed0:	f240 116d 	movw	r1, #365	@ 0x16d
 800aed4:	bf08      	it	eq
 800aed6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800aeda:	428b      	cmp	r3, r1
 800aedc:	bfa8      	it	ge
 800aede:	1a5b      	subge	r3, r3, r1
 800aee0:	e7d4      	b.n	800ae8c <mktime+0x2cc>
 800aee2:	f240 116d 	movw	r1, #365	@ 0x16d
 800aee6:	e7f8      	b.n	800aeda <mktime+0x31a>
 800aee8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800aeec:	e7f5      	b.n	800aeda <mktime+0x31a>
 800aeee:	3607      	adds	r6, #7
 800aef0:	e722      	b.n	800ad38 <mktime+0x178>
 800aef2:	bf00      	nop
 800aef4:	0800fd00 	.word	0x0800fd00
 800aef8:	00015180 	.word	0x00015180
 800aefc:	200096f0 	.word	0x200096f0
 800af00:	f04f 34ff 	mov.w	r4, #4294967295
 800af04:	46a0      	mov	r8, r4
 800af06:	e71a      	b.n	800ad3e <mktime+0x17e>
 800af08:	f1ba 0f00 	cmp.w	sl, #0
 800af0c:	dac1      	bge.n	800ae92 <mktime+0x2d2>
 800af0e:	f04f 0b00 	mov.w	fp, #0
 800af12:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800af16:	191c      	adds	r4, r3, r4
 800af18:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800af1c:	e701      	b.n	800ad22 <mktime+0x162>
 800af1e:	bf00      	nop

0800af20 <__tzcalc_limits>:
 800af20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	4604      	mov	r4, r0
 800af26:	f003 f89d 	bl	800e064 <__gettzinfo>
 800af2a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800af2e:	429c      	cmp	r4, r3
 800af30:	f340 8099 	ble.w	800b066 <__tzcalc_limits+0x146>
 800af34:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800af38:	19e5      	adds	r5, r4, r7
 800af3a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800af3e:	f240 126d 	movw	r2, #365	@ 0x16d
 800af42:	10ad      	asrs	r5, r5, #2
 800af44:	fb02 5503 	mla	r5, r2, r3, r5
 800af48:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800af4c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800af50:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800af54:	4f45      	ldr	r7, [pc, #276]	@ (800b06c <__tzcalc_limits+0x14c>)
 800af56:	fb93 f3f2 	sdiv	r3, r3, r2
 800af5a:	441d      	add	r5, r3
 800af5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800af60:	eb04 030c 	add.w	r3, r4, ip
 800af64:	6044      	str	r4, [r0, #4]
 800af66:	fbb3 f3f2 	udiv	r3, r3, r2
 800af6a:	4601      	mov	r1, r0
 800af6c:	441d      	add	r5, r3
 800af6e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800af72:	7a0b      	ldrb	r3, [r1, #8]
 800af74:	694a      	ldr	r2, [r1, #20]
 800af76:	2b4a      	cmp	r3, #74	@ 0x4a
 800af78:	d133      	bne.n	800afe2 <__tzcalc_limits+0xc2>
 800af7a:	07a6      	lsls	r6, r4, #30
 800af7c:	eb05 0302 	add.w	r3, r5, r2
 800af80:	d106      	bne.n	800af90 <__tzcalc_limits+0x70>
 800af82:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800af86:	fb94 f6fe 	sdiv	r6, r4, lr
 800af8a:	fb0e 4616 	mls	r6, lr, r6, r4
 800af8e:	b936      	cbnz	r6, 800af9e <__tzcalc_limits+0x7e>
 800af90:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800af94:	fb94 f6fe 	sdiv	r6, r4, lr
 800af98:	fb0e 4616 	mls	r6, lr, r6, r4
 800af9c:	b9fe      	cbnz	r6, 800afde <__tzcalc_limits+0xbe>
 800af9e:	2a3b      	cmp	r2, #59	@ 0x3b
 800afa0:	bfd4      	ite	le
 800afa2:	2200      	movle	r2, #0
 800afa4:	2201      	movgt	r2, #1
 800afa6:	4413      	add	r3, r2
 800afa8:	3b01      	subs	r3, #1
 800afaa:	698a      	ldr	r2, [r1, #24]
 800afac:	17d6      	asrs	r6, r2, #31
 800afae:	fbc3 2607 	smlal	r2, r6, r3, r7
 800afb2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800afb4:	18d2      	adds	r2, r2, r3
 800afb6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800afba:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800afbe:	3128      	adds	r1, #40	@ 0x28
 800afc0:	458c      	cmp	ip, r1
 800afc2:	d1d6      	bne.n	800af72 <__tzcalc_limits+0x52>
 800afc4:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800afc8:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800afcc:	428c      	cmp	r4, r1
 800afce:	4193      	sbcs	r3, r2
 800afd0:	bfb4      	ite	lt
 800afd2:	2301      	movlt	r3, #1
 800afd4:	2300      	movge	r3, #0
 800afd6:	6003      	str	r3, [r0, #0]
 800afd8:	2001      	movs	r0, #1
 800afda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afde:	2200      	movs	r2, #0
 800afe0:	e7e1      	b.n	800afa6 <__tzcalc_limits+0x86>
 800afe2:	2b44      	cmp	r3, #68	@ 0x44
 800afe4:	d101      	bne.n	800afea <__tzcalc_limits+0xca>
 800afe6:	18ab      	adds	r3, r5, r2
 800afe8:	e7df      	b.n	800afaa <__tzcalc_limits+0x8a>
 800afea:	07a3      	lsls	r3, r4, #30
 800afec:	d105      	bne.n	800affa <__tzcalc_limits+0xda>
 800afee:	2664      	movs	r6, #100	@ 0x64
 800aff0:	fb94 f3f6 	sdiv	r3, r4, r6
 800aff4:	fb06 4313 	mls	r3, r6, r3, r4
 800aff8:	bb7b      	cbnz	r3, 800b05a <__tzcalc_limits+0x13a>
 800affa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800affe:	fb94 f6f3 	sdiv	r6, r4, r3
 800b002:	fb03 4616 	mls	r6, r3, r6, r4
 800b006:	fab6 f686 	clz	r6, r6
 800b00a:	0976      	lsrs	r6, r6, #5
 800b00c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800b070 <__tzcalc_limits+0x150>
 800b010:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b014:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800b018:	462b      	mov	r3, r5
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	fb0a e606 	mla	r6, sl, r6, lr
 800b022:	f108 0801 	add.w	r8, r8, #1
 800b026:	45c1      	cmp	r9, r8
 800b028:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800b02c:	dc17      	bgt.n	800b05e <__tzcalc_limits+0x13e>
 800b02e:	f103 0804 	add.w	r8, r3, #4
 800b032:	2607      	movs	r6, #7
 800b034:	fb98 f6f6 	sdiv	r6, r8, r6
 800b038:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b03c:	eba8 0606 	sub.w	r6, r8, r6
 800b040:	1b92      	subs	r2, r2, r6
 800b042:	690e      	ldr	r6, [r1, #16]
 800b044:	f106 36ff 	add.w	r6, r6, #4294967295
 800b048:	bf48      	it	mi
 800b04a:	3207      	addmi	r2, #7
 800b04c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b050:	4432      	add	r2, r6
 800b052:	4572      	cmp	r2, lr
 800b054:	da05      	bge.n	800b062 <__tzcalc_limits+0x142>
 800b056:	4413      	add	r3, r2
 800b058:	e7a7      	b.n	800afaa <__tzcalc_limits+0x8a>
 800b05a:	2601      	movs	r6, #1
 800b05c:	e7d6      	b.n	800b00c <__tzcalc_limits+0xec>
 800b05e:	4473      	add	r3, lr
 800b060:	e7df      	b.n	800b022 <__tzcalc_limits+0x102>
 800b062:	3a07      	subs	r2, #7
 800b064:	e7f5      	b.n	800b052 <__tzcalc_limits+0x132>
 800b066:	2000      	movs	r0, #0
 800b068:	e7b7      	b.n	800afda <__tzcalc_limits+0xba>
 800b06a:	bf00      	nop
 800b06c:	00015180 	.word	0x00015180
 800b070:	08010020 	.word	0x08010020

0800b074 <__tz_lock>:
 800b074:	4801      	ldr	r0, [pc, #4]	@ (800b07c <__tz_lock+0x8>)
 800b076:	f000 bab6 	b.w	800b5e6 <__retarget_lock_acquire>
 800b07a:	bf00      	nop
 800b07c:	200096f8 	.word	0x200096f8

0800b080 <__tz_unlock>:
 800b080:	4801      	ldr	r0, [pc, #4]	@ (800b088 <__tz_unlock+0x8>)
 800b082:	f000 bab2 	b.w	800b5ea <__retarget_lock_release>
 800b086:	bf00      	nop
 800b088:	200096f8 	.word	0x200096f8

0800b08c <_tzset_unlocked>:
 800b08c:	4b01      	ldr	r3, [pc, #4]	@ (800b094 <_tzset_unlocked+0x8>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	f000 b802 	b.w	800b098 <_tzset_unlocked_r>
 800b094:	2000019c 	.word	0x2000019c

0800b098 <_tzset_unlocked_r>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	b08d      	sub	sp, #52	@ 0x34
 800b09e:	4607      	mov	r7, r0
 800b0a0:	f002 ffe0 	bl	800e064 <__gettzinfo>
 800b0a4:	49bc      	ldr	r1, [pc, #752]	@ (800b398 <_tzset_unlocked_r+0x300>)
 800b0a6:	4dbd      	ldr	r5, [pc, #756]	@ (800b39c <_tzset_unlocked_r+0x304>)
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f001 fcdc 	bl	800ca68 <_getenv_r>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	bb10      	cbnz	r0, 800b0fa <_tzset_unlocked_r+0x62>
 800b0b4:	4bba      	ldr	r3, [pc, #744]	@ (800b3a0 <_tzset_unlocked_r+0x308>)
 800b0b6:	4abb      	ldr	r2, [pc, #748]	@ (800b3a4 <_tzset_unlocked_r+0x30c>)
 800b0b8:	6018      	str	r0, [r3, #0]
 800b0ba:	4bbb      	ldr	r3, [pc, #748]	@ (800b3a8 <_tzset_unlocked_r+0x310>)
 800b0bc:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b0be:	6018      	str	r0, [r3, #0]
 800b0c0:	4bba      	ldr	r3, [pc, #744]	@ (800b3ac <_tzset_unlocked_r+0x314>)
 800b0c2:	6520      	str	r0, [r4, #80]	@ 0x50
 800b0c4:	e9c3 2200 	strd	r2, r2, [r3]
 800b0c8:	214a      	movs	r1, #74	@ 0x4a
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b0d2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b0d6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b0da:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b0de:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b0e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b0e6:	6828      	ldr	r0, [r5, #0]
 800b0e8:	7221      	strb	r1, [r4, #8]
 800b0ea:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b0ee:	f7fd fcbd 	bl	8008a6c <free>
 800b0f2:	602e      	str	r6, [r5, #0]
 800b0f4:	b00d      	add	sp, #52	@ 0x34
 800b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fa:	6829      	ldr	r1, [r5, #0]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	f040 808e 	bne.w	800b21e <_tzset_unlocked_r+0x186>
 800b102:	6828      	ldr	r0, [r5, #0]
 800b104:	f7fd fcb2 	bl	8008a6c <free>
 800b108:	4630      	mov	r0, r6
 800b10a:	f7f5 f8c1 	bl	8000290 <strlen>
 800b10e:	1c41      	adds	r1, r0, #1
 800b110:	4638      	mov	r0, r7
 800b112:	f7fd fcd5 	bl	8008ac0 <_malloc_r>
 800b116:	6028      	str	r0, [r5, #0]
 800b118:	2800      	cmp	r0, #0
 800b11a:	f040 8086 	bne.w	800b22a <_tzset_unlocked_r+0x192>
 800b11e:	4aa2      	ldr	r2, [pc, #648]	@ (800b3a8 <_tzset_unlocked_r+0x310>)
 800b120:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800b3ac <_tzset_unlocked_r+0x314>
 800b124:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800b3a0 <_tzset_unlocked_r+0x308>
 800b128:	2300      	movs	r3, #0
 800b12a:	6013      	str	r3, [r2, #0]
 800b12c:	4aa0      	ldr	r2, [pc, #640]	@ (800b3b0 <_tzset_unlocked_r+0x318>)
 800b12e:	f8ca 3000 	str.w	r3, [sl]
 800b132:	2000      	movs	r0, #0
 800b134:	2100      	movs	r1, #0
 800b136:	e9c8 2200 	strd	r2, r2, [r8]
 800b13a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b13e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b142:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b14a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b14e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b152:	224a      	movs	r2, #74	@ 0x4a
 800b154:	7222      	strb	r2, [r4, #8]
 800b156:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b158:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b15c:	6523      	str	r3, [r4, #80]	@ 0x50
 800b15e:	7833      	ldrb	r3, [r6, #0]
 800b160:	2b3a      	cmp	r3, #58	@ 0x3a
 800b162:	bf08      	it	eq
 800b164:	3601      	addeq	r6, #1
 800b166:	7833      	ldrb	r3, [r6, #0]
 800b168:	2b3c      	cmp	r3, #60	@ 0x3c
 800b16a:	d162      	bne.n	800b232 <_tzset_unlocked_r+0x19a>
 800b16c:	1c75      	adds	r5, r6, #1
 800b16e:	4a91      	ldr	r2, [pc, #580]	@ (800b3b4 <_tzset_unlocked_r+0x31c>)
 800b170:	4991      	ldr	r1, [pc, #580]	@ (800b3b8 <_tzset_unlocked_r+0x320>)
 800b172:	ab0a      	add	r3, sp, #40	@ 0x28
 800b174:	4628      	mov	r0, r5
 800b176:	f7ff fb41 	bl	800a7fc <siscanf>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	ddba      	ble.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b180:	1eda      	subs	r2, r3, #3
 800b182:	2a07      	cmp	r2, #7
 800b184:	d8b6      	bhi.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b186:	5ceb      	ldrb	r3, [r5, r3]
 800b188:	2b3e      	cmp	r3, #62	@ 0x3e
 800b18a:	d1b3      	bne.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b18c:	3602      	adds	r6, #2
 800b18e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b190:	18f5      	adds	r5, r6, r3
 800b192:	5cf3      	ldrb	r3, [r6, r3]
 800b194:	2b2d      	cmp	r3, #45	@ 0x2d
 800b196:	d15a      	bne.n	800b24e <_tzset_unlocked_r+0x1b6>
 800b198:	3501      	adds	r5, #1
 800b19a:	f04f 39ff 	mov.w	r9, #4294967295
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b1a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b1a8:	af08      	add	r7, sp, #32
 800b1aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	f10d 031e 	add.w	r3, sp, #30
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4980      	ldr	r1, [pc, #512]	@ (800b3bc <_tzset_unlocked_r+0x324>)
 800b1ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1bc:	aa07      	add	r2, sp, #28
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f7ff fb1c 	bl	800a7fc <siscanf>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	dd95      	ble.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b1c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b1cc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b1d0:	223c      	movs	r2, #60	@ 0x3c
 800b1d2:	fb02 6603 	mla	r6, r2, r3, r6
 800b1d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b1da:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b1de:	fb02 6603 	mla	r6, r2, r3, r6
 800b1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1e4:	fb09 f606 	mul.w	r6, r9, r6
 800b1e8:	eb05 0903 	add.w	r9, r5, r3
 800b1ec:	5ceb      	ldrb	r3, [r5, r3]
 800b1ee:	2b3c      	cmp	r3, #60	@ 0x3c
 800b1f0:	f040 80ee 	bne.w	800b3d0 <_tzset_unlocked_r+0x338>
 800b1f4:	f109 0501 	add.w	r5, r9, #1
 800b1f8:	4a71      	ldr	r2, [pc, #452]	@ (800b3c0 <_tzset_unlocked_r+0x328>)
 800b1fa:	496f      	ldr	r1, [pc, #444]	@ (800b3b8 <_tzset_unlocked_r+0x320>)
 800b1fc:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1fe:	4628      	mov	r0, r5
 800b200:	f7ff fafc 	bl	800a7fc <siscanf>
 800b204:	2800      	cmp	r0, #0
 800b206:	dc28      	bgt.n	800b25a <_tzset_unlocked_r+0x1c2>
 800b208:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b20c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b20e:	d124      	bne.n	800b25a <_tzset_unlocked_r+0x1c2>
 800b210:	4b68      	ldr	r3, [pc, #416]	@ (800b3b4 <_tzset_unlocked_r+0x31c>)
 800b212:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b214:	e9c8 3300 	strd	r3, r3, [r8]
 800b218:	f8ca 6000 	str.w	r6, [sl]
 800b21c:	e76a      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b21e:	f7f4 ffd7 	bl	80001d0 <strcmp>
 800b222:	2800      	cmp	r0, #0
 800b224:	f47f af6d 	bne.w	800b102 <_tzset_unlocked_r+0x6a>
 800b228:	e764      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b22a:	4631      	mov	r1, r6
 800b22c:	f000 f9df 	bl	800b5ee <strcpy>
 800b230:	e775      	b.n	800b11e <_tzset_unlocked_r+0x86>
 800b232:	4a60      	ldr	r2, [pc, #384]	@ (800b3b4 <_tzset_unlocked_r+0x31c>)
 800b234:	4963      	ldr	r1, [pc, #396]	@ (800b3c4 <_tzset_unlocked_r+0x32c>)
 800b236:	ab0a      	add	r3, sp, #40	@ 0x28
 800b238:	4630      	mov	r0, r6
 800b23a:	f7ff fadf 	bl	800a7fc <siscanf>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f77f af58 	ble.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b246:	3b03      	subs	r3, #3
 800b248:	2b07      	cmp	r3, #7
 800b24a:	d9a0      	bls.n	800b18e <_tzset_unlocked_r+0xf6>
 800b24c:	e752      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b24e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b250:	bf08      	it	eq
 800b252:	3501      	addeq	r5, #1
 800b254:	f04f 0901 	mov.w	r9, #1
 800b258:	e7a1      	b.n	800b19e <_tzset_unlocked_r+0x106>
 800b25a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b25c:	1eda      	subs	r2, r3, #3
 800b25e:	2a07      	cmp	r2, #7
 800b260:	f63f af48 	bhi.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b264:	5ceb      	ldrb	r3, [r5, r3]
 800b266:	2b3e      	cmp	r3, #62	@ 0x3e
 800b268:	f47f af44 	bne.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b26c:	f109 0902 	add.w	r9, r9, #2
 800b270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b272:	eb09 0503 	add.w	r5, r9, r3
 800b276:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b27a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b27c:	f040 80b7 	bne.w	800b3ee <_tzset_unlocked_r+0x356>
 800b280:	3501      	adds	r5, #1
 800b282:	f04f 39ff 	mov.w	r9, #4294967295
 800b286:	2300      	movs	r3, #0
 800b288:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b28c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b290:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b294:	930a      	str	r3, [sp, #40]	@ 0x28
 800b296:	ab0a      	add	r3, sp, #40	@ 0x28
 800b298:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	f10d 031e 	add.w	r3, sp, #30
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	4945      	ldr	r1, [pc, #276]	@ (800b3bc <_tzset_unlocked_r+0x324>)
 800b2a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2a8:	aa07      	add	r2, sp, #28
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f7ff faa6 	bl	800a7fc <siscanf>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f300 80a2 	bgt.w	800b3fa <_tzset_unlocked_r+0x362>
 800b2b6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2be:	4627      	mov	r7, r4
 800b2c0:	441d      	add	r5, r3
 800b2c2:	f04f 0b00 	mov.w	fp, #0
 800b2c6:	782b      	ldrb	r3, [r5, #0]
 800b2c8:	2b2c      	cmp	r3, #44	@ 0x2c
 800b2ca:	bf08      	it	eq
 800b2cc:	3501      	addeq	r5, #1
 800b2ce:	f895 9000 	ldrb.w	r9, [r5]
 800b2d2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b2d6:	f040 80a3 	bne.w	800b420 <_tzset_unlocked_r+0x388>
 800b2da:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2dc:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b2e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2e4:	aa09      	add	r2, sp, #36	@ 0x24
 800b2e6:	9200      	str	r2, [sp, #0]
 800b2e8:	4937      	ldr	r1, [pc, #220]	@ (800b3c8 <_tzset_unlocked_r+0x330>)
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f7ff fa83 	bl	800a7fc <siscanf>
 800b2f6:	2803      	cmp	r0, #3
 800b2f8:	f47f aefc 	bne.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b2fc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b300:	1e4b      	subs	r3, r1, #1
 800b302:	2b0b      	cmp	r3, #11
 800b304:	f63f aef6 	bhi.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b308:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b30c:	1e53      	subs	r3, r2, #1
 800b30e:	2b04      	cmp	r3, #4
 800b310:	f63f aef0 	bhi.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b314:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b318:	2b06      	cmp	r3, #6
 800b31a:	f63f aeeb 	bhi.w	800b0f4 <_tzset_unlocked_r+0x5c>
 800b31e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b322:	f887 9008 	strb.w	r9, [r7, #8]
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32a:	eb05 0903 	add.w	r9, r5, r3
 800b32e:	2500      	movs	r5, #0
 800b330:	f04f 0302 	mov.w	r3, #2
 800b334:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b338:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b33c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b340:	950a      	str	r5, [sp, #40]	@ 0x28
 800b342:	f899 3000 	ldrb.w	r3, [r9]
 800b346:	2b2f      	cmp	r3, #47	@ 0x2f
 800b348:	f040 8096 	bne.w	800b478 <_tzset_unlocked_r+0x3e0>
 800b34c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b34e:	aa08      	add	r2, sp, #32
 800b350:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b354:	f10d 021e 	add.w	r2, sp, #30
 800b358:	9200      	str	r2, [sp, #0]
 800b35a:	491c      	ldr	r1, [pc, #112]	@ (800b3cc <_tzset_unlocked_r+0x334>)
 800b35c:	9303      	str	r3, [sp, #12]
 800b35e:	aa07      	add	r2, sp, #28
 800b360:	4648      	mov	r0, r9
 800b362:	f7ff fa4b 	bl	800a7fc <siscanf>
 800b366:	42a8      	cmp	r0, r5
 800b368:	f300 8086 	bgt.w	800b478 <_tzset_unlocked_r+0x3e0>
 800b36c:	214a      	movs	r1, #74	@ 0x4a
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b376:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b37a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b37e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b382:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b386:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b38a:	7221      	strb	r1, [r4, #8]
 800b38c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b38e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b392:	6525      	str	r5, [r4, #80]	@ 0x50
 800b394:	e6ae      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b396:	bf00      	nop
 800b398:	0800fd60 	.word	0x0800fd60
 800b39c:	200096d0 	.word	0x200096d0
 800b3a0:	200096ec 	.word	0x200096ec
 800b3a4:	0800fd63 	.word	0x0800fd63
 800b3a8:	200096f0 	.word	0x200096f0
 800b3ac:	20000028 	.word	0x20000028
 800b3b0:	0800f639 	.word	0x0800f639
 800b3b4:	200096e0 	.word	0x200096e0
 800b3b8:	0800fd67 	.word	0x0800fd67
 800b3bc:	0800fd9c 	.word	0x0800fd9c
 800b3c0:	200096d4 	.word	0x200096d4
 800b3c4:	0800fd7a 	.word	0x0800fd7a
 800b3c8:	0800fd88 	.word	0x0800fd88
 800b3cc:	0800fd9b 	.word	0x0800fd9b
 800b3d0:	4a3e      	ldr	r2, [pc, #248]	@ (800b4cc <_tzset_unlocked_r+0x434>)
 800b3d2:	493f      	ldr	r1, [pc, #252]	@ (800b4d0 <_tzset_unlocked_r+0x438>)
 800b3d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b3d6:	4648      	mov	r0, r9
 800b3d8:	f7ff fa10 	bl	800a7fc <siscanf>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f77f af17 	ble.w	800b210 <_tzset_unlocked_r+0x178>
 800b3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3e4:	3b03      	subs	r3, #3
 800b3e6:	2b07      	cmp	r3, #7
 800b3e8:	f67f af42 	bls.w	800b270 <_tzset_unlocked_r+0x1d8>
 800b3ec:	e682      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b3ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3f0:	bf08      	it	eq
 800b3f2:	3501      	addeq	r5, #1
 800b3f4:	f04f 0901 	mov.w	r9, #1
 800b3f8:	e745      	b.n	800b286 <_tzset_unlocked_r+0x1ee>
 800b3fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b3fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b402:	213c      	movs	r1, #60	@ 0x3c
 800b404:	fb01 3302 	mla	r3, r1, r2, r3
 800b408:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b40c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b410:	fb01 3302 	mla	r3, r1, r2, r3
 800b414:	fb09 f303 	mul.w	r3, r9, r3
 800b418:	e74f      	b.n	800b2ba <_tzset_unlocked_r+0x222>
 800b41a:	f04f 0b01 	mov.w	fp, #1
 800b41e:	e752      	b.n	800b2c6 <_tzset_unlocked_r+0x22e>
 800b420:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b424:	bf06      	itte	eq
 800b426:	3501      	addeq	r5, #1
 800b428:	464b      	moveq	r3, r9
 800b42a:	2344      	movne	r3, #68	@ 0x44
 800b42c:	220a      	movs	r2, #10
 800b42e:	a90b      	add	r1, sp, #44	@ 0x2c
 800b430:	4628      	mov	r0, r5
 800b432:	9305      	str	r3, [sp, #20]
 800b434:	f002 f854 	bl	800d4e0 <strtoul>
 800b438:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b43c:	9b05      	ldr	r3, [sp, #20]
 800b43e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b442:	45a9      	cmp	r9, r5
 800b444:	d114      	bne.n	800b470 <_tzset_unlocked_r+0x3d8>
 800b446:	234d      	movs	r3, #77	@ 0x4d
 800b448:	f1bb 0f00 	cmp.w	fp, #0
 800b44c:	d107      	bne.n	800b45e <_tzset_unlocked_r+0x3c6>
 800b44e:	7223      	strb	r3, [r4, #8]
 800b450:	2103      	movs	r1, #3
 800b452:	2302      	movs	r3, #2
 800b454:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b458:	f8c4 b014 	str.w	fp, [r4, #20]
 800b45c:	e767      	b.n	800b32e <_tzset_unlocked_r+0x296>
 800b45e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b462:	220b      	movs	r2, #11
 800b464:	2301      	movs	r3, #1
 800b466:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b46a:	2300      	movs	r3, #0
 800b46c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b46e:	e75e      	b.n	800b32e <_tzset_unlocked_r+0x296>
 800b470:	b280      	uxth	r0, r0
 800b472:	723b      	strb	r3, [r7, #8]
 800b474:	6178      	str	r0, [r7, #20]
 800b476:	e75a      	b.n	800b32e <_tzset_unlocked_r+0x296>
 800b478:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b47c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b480:	213c      	movs	r1, #60	@ 0x3c
 800b482:	fb01 3302 	mla	r3, r1, r2, r3
 800b486:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b48a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b48e:	fb01 3302 	mla	r3, r1, r2, r3
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b496:	3728      	adds	r7, #40	@ 0x28
 800b498:	444d      	add	r5, r9
 800b49a:	f1bb 0f00 	cmp.w	fp, #0
 800b49e:	d0bc      	beq.n	800b41a <_tzset_unlocked_r+0x382>
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	6523      	str	r3, [r4, #80]	@ 0x50
 800b4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d4 <_tzset_unlocked_r+0x43c>)
 800b4a6:	f8c8 3000 	str.w	r3, [r8]
 800b4aa:	6860      	ldr	r0, [r4, #4]
 800b4ac:	4b07      	ldr	r3, [pc, #28]	@ (800b4cc <_tzset_unlocked_r+0x434>)
 800b4ae:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b4b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800b4b4:	f7ff fd34 	bl	800af20 <__tzcalc_limits>
 800b4b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b4ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b4bc:	f8ca 2000 	str.w	r2, [sl]
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	4a05      	ldr	r2, [pc, #20]	@ (800b4d8 <_tzset_unlocked_r+0x440>)
 800b4c4:	bf18      	it	ne
 800b4c6:	2301      	movne	r3, #1
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	e613      	b.n	800b0f4 <_tzset_unlocked_r+0x5c>
 800b4cc:	200096d4 	.word	0x200096d4
 800b4d0:	0800fd7a 	.word	0x0800fd7a
 800b4d4:	200096e0 	.word	0x200096e0
 800b4d8:	200096f0 	.word	0x200096f0

0800b4dc <_localeconv_r>:
 800b4dc:	4800      	ldr	r0, [pc, #0]	@ (800b4e0 <_localeconv_r+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	20000120 	.word	0x20000120

0800b4e4 <_close_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d06      	ldr	r5, [pc, #24]	@ (800b500 <_close_r+0x1c>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	f7f8 fe30 	bl	8004154 <_close>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_close_r+0x1a>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_close_r+0x1a>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	200096f4 	.word	0x200096f4

0800b504 <_lseek_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d07      	ldr	r5, [pc, #28]	@ (800b524 <_lseek_r+0x20>)
 800b508:	4604      	mov	r4, r0
 800b50a:	4608      	mov	r0, r1
 800b50c:	4611      	mov	r1, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	602a      	str	r2, [r5, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	f7f8 fe28 	bl	8004168 <_lseek>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_lseek_r+0x1e>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_lseek_r+0x1e>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	200096f4 	.word	0x200096f4

0800b528 <_read_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	@ (800b548 <_read_r+0x20>)
 800b52c:	4604      	mov	r4, r0
 800b52e:	4608      	mov	r0, r1
 800b530:	4611      	mov	r1, r2
 800b532:	2200      	movs	r2, #0
 800b534:	602a      	str	r2, [r5, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f7f8 fdf0 	bl	800411c <_read>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_read_r+0x1e>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_read_r+0x1e>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	200096f4 	.word	0x200096f4

0800b54c <_sbrk_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d06      	ldr	r5, [pc, #24]	@ (800b568 <_sbrk_r+0x1c>)
 800b550:	2300      	movs	r3, #0
 800b552:	4604      	mov	r4, r0
 800b554:	4608      	mov	r0, r1
 800b556:	602b      	str	r3, [r5, #0]
 800b558:	f7f8 fe08 	bl	800416c <_sbrk>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_sbrk_r+0x1a>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_sbrk_r+0x1a>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	200096f4 	.word	0x200096f4

0800b56c <_write_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4d07      	ldr	r5, [pc, #28]	@ (800b58c <_write_r+0x20>)
 800b570:	4604      	mov	r4, r0
 800b572:	4608      	mov	r0, r1
 800b574:	4611      	mov	r1, r2
 800b576:	2200      	movs	r2, #0
 800b578:	602a      	str	r2, [r5, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f7f8 fddc 	bl	8004138 <_write>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	d102      	bne.n	800b58a <_write_r+0x1e>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	b103      	cbz	r3, 800b58a <_write_r+0x1e>
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	200096f4 	.word	0x200096f4

0800b590 <__errno>:
 800b590:	4b01      	ldr	r3, [pc, #4]	@ (800b598 <__errno+0x8>)
 800b592:	6818      	ldr	r0, [r3, #0]
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	2000019c 	.word	0x2000019c

0800b59c <__libc_init_array>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4d0d      	ldr	r5, [pc, #52]	@ (800b5d4 <__libc_init_array+0x38>)
 800b5a0:	4c0d      	ldr	r4, [pc, #52]	@ (800b5d8 <__libc_init_array+0x3c>)
 800b5a2:	1b64      	subs	r4, r4, r5
 800b5a4:	10a4      	asrs	r4, r4, #2
 800b5a6:	2600      	movs	r6, #0
 800b5a8:	42a6      	cmp	r6, r4
 800b5aa:	d109      	bne.n	800b5c0 <__libc_init_array+0x24>
 800b5ac:	4d0b      	ldr	r5, [pc, #44]	@ (800b5dc <__libc_init_array+0x40>)
 800b5ae:	4c0c      	ldr	r4, [pc, #48]	@ (800b5e0 <__libc_init_array+0x44>)
 800b5b0:	f003 f8cc 	bl	800e74c <_init>
 800b5b4:	1b64      	subs	r4, r4, r5
 800b5b6:	10a4      	asrs	r4, r4, #2
 800b5b8:	2600      	movs	r6, #0
 800b5ba:	42a6      	cmp	r6, r4
 800b5bc:	d105      	bne.n	800b5ca <__libc_init_array+0x2e>
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c4:	4798      	blx	r3
 800b5c6:	3601      	adds	r6, #1
 800b5c8:	e7ee      	b.n	800b5a8 <__libc_init_array+0xc>
 800b5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ce:	4798      	blx	r3
 800b5d0:	3601      	adds	r6, #1
 800b5d2:	e7f2      	b.n	800b5ba <__libc_init_array+0x1e>
 800b5d4:	080100c8 	.word	0x080100c8
 800b5d8:	080100c8 	.word	0x080100c8
 800b5dc:	080100c8 	.word	0x080100c8
 800b5e0:	080100cc 	.word	0x080100cc

0800b5e4 <__retarget_lock_init_recursive>:
 800b5e4:	4770      	bx	lr

0800b5e6 <__retarget_lock_acquire>:
 800b5e6:	4770      	bx	lr

0800b5e8 <__retarget_lock_acquire_recursive>:
 800b5e8:	4770      	bx	lr

0800b5ea <__retarget_lock_release>:
 800b5ea:	4770      	bx	lr

0800b5ec <__retarget_lock_release_recursive>:
 800b5ec:	4770      	bx	lr

0800b5ee <strcpy>:
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f4:	f803 2b01 	strb.w	r2, [r3], #1
 800b5f8:	2a00      	cmp	r2, #0
 800b5fa:	d1f9      	bne.n	800b5f0 <strcpy+0x2>
 800b5fc:	4770      	bx	lr

0800b5fe <memcpy>:
 800b5fe:	440a      	add	r2, r1
 800b600:	4291      	cmp	r1, r2
 800b602:	f100 33ff 	add.w	r3, r0, #4294967295
 800b606:	d100      	bne.n	800b60a <memcpy+0xc>
 800b608:	4770      	bx	lr
 800b60a:	b510      	push	{r4, lr}
 800b60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b610:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b614:	4291      	cmp	r1, r2
 800b616:	d1f9      	bne.n	800b60c <memcpy+0xe>
 800b618:	bd10      	pop	{r4, pc}
 800b61a:	0000      	movs	r0, r0
 800b61c:	0000      	movs	r0, r0
	...

0800b620 <nan>:
 800b620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b628 <nan+0x8>
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	00000000 	.word	0x00000000
 800b62c:	7ff80000 	.word	0x7ff80000

0800b630 <nanf>:
 800b630:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b638 <nanf+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	7fc00000 	.word	0x7fc00000

0800b63c <div>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	fb91 f4f2 	sdiv	r4, r1, r2
 800b642:	fb02 1114 	mls	r1, r2, r4, r1
 800b646:	6004      	str	r4, [r0, #0]
 800b648:	6041      	str	r1, [r0, #4]
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <quorem>:
 800b64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	6903      	ldr	r3, [r0, #16]
 800b652:	690c      	ldr	r4, [r1, #16]
 800b654:	42a3      	cmp	r3, r4
 800b656:	4607      	mov	r7, r0
 800b658:	db7e      	blt.n	800b758 <quorem+0x10c>
 800b65a:	3c01      	subs	r4, #1
 800b65c:	f101 0814 	add.w	r8, r1, #20
 800b660:	00a3      	lsls	r3, r4, #2
 800b662:	f100 0514 	add.w	r5, r0, #20
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b676:	3301      	adds	r3, #1
 800b678:	429a      	cmp	r2, r3
 800b67a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b67e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b682:	d32e      	bcc.n	800b6e2 <quorem+0x96>
 800b684:	f04f 0a00 	mov.w	sl, #0
 800b688:	46c4      	mov	ip, r8
 800b68a:	46ae      	mov	lr, r5
 800b68c:	46d3      	mov	fp, sl
 800b68e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b692:	b298      	uxth	r0, r3
 800b694:	fb06 a000 	mla	r0, r6, r0, sl
 800b698:	0c02      	lsrs	r2, r0, #16
 800b69a:	0c1b      	lsrs	r3, r3, #16
 800b69c:	fb06 2303 	mla	r3, r6, r3, r2
 800b6a0:	f8de 2000 	ldr.w	r2, [lr]
 800b6a4:	b280      	uxth	r0, r0
 800b6a6:	b292      	uxth	r2, r2
 800b6a8:	1a12      	subs	r2, r2, r0
 800b6aa:	445a      	add	r2, fp
 800b6ac:	f8de 0000 	ldr.w	r0, [lr]
 800b6b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b6ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b6be:	b292      	uxth	r2, r2
 800b6c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b6c4:	45e1      	cmp	r9, ip
 800b6c6:	f84e 2b04 	str.w	r2, [lr], #4
 800b6ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b6ce:	d2de      	bcs.n	800b68e <quorem+0x42>
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	58eb      	ldr	r3, [r5, r3]
 800b6d4:	b92b      	cbnz	r3, 800b6e2 <quorem+0x96>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	3b04      	subs	r3, #4
 800b6da:	429d      	cmp	r5, r3
 800b6dc:	461a      	mov	r2, r3
 800b6de:	d32f      	bcc.n	800b740 <quorem+0xf4>
 800b6e0:	613c      	str	r4, [r7, #16]
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f001 fc9e 	bl	800d024 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	db25      	blt.n	800b738 <quorem+0xec>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6f4:	f8d1 c000 	ldr.w	ip, [r1]
 800b6f8:	fa1f fe82 	uxth.w	lr, r2
 800b6fc:	fa1f f38c 	uxth.w	r3, ip
 800b700:	eba3 030e 	sub.w	r3, r3, lr
 800b704:	4403      	add	r3, r0
 800b706:	0c12      	lsrs	r2, r2, #16
 800b708:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b70c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b710:	b29b      	uxth	r3, r3
 800b712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b716:	45c1      	cmp	r9, r8
 800b718:	f841 3b04 	str.w	r3, [r1], #4
 800b71c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b720:	d2e6      	bcs.n	800b6f0 <quorem+0xa4>
 800b722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72a:	b922      	cbnz	r2, 800b736 <quorem+0xea>
 800b72c:	3b04      	subs	r3, #4
 800b72e:	429d      	cmp	r5, r3
 800b730:	461a      	mov	r2, r3
 800b732:	d30b      	bcc.n	800b74c <quorem+0x100>
 800b734:	613c      	str	r4, [r7, #16]
 800b736:	3601      	adds	r6, #1
 800b738:	4630      	mov	r0, r6
 800b73a:	b003      	add	sp, #12
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	3b04      	subs	r3, #4
 800b744:	2a00      	cmp	r2, #0
 800b746:	d1cb      	bne.n	800b6e0 <quorem+0x94>
 800b748:	3c01      	subs	r4, #1
 800b74a:	e7c6      	b.n	800b6da <quorem+0x8e>
 800b74c:	6812      	ldr	r2, [r2, #0]
 800b74e:	3b04      	subs	r3, #4
 800b750:	2a00      	cmp	r2, #0
 800b752:	d1ef      	bne.n	800b734 <quorem+0xe8>
 800b754:	3c01      	subs	r4, #1
 800b756:	e7ea      	b.n	800b72e <quorem+0xe2>
 800b758:	2000      	movs	r0, #0
 800b75a:	e7ee      	b.n	800b73a <quorem+0xee>
 800b75c:	0000      	movs	r0, r0
	...

0800b760 <_dtoa_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	69c7      	ldr	r7, [r0, #28]
 800b766:	b099      	sub	sp, #100	@ 0x64
 800b768:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b76c:	ec55 4b10 	vmov	r4, r5, d0
 800b770:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b772:	9109      	str	r1, [sp, #36]	@ 0x24
 800b774:	4683      	mov	fp, r0
 800b776:	920e      	str	r2, [sp, #56]	@ 0x38
 800b778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b77a:	b97f      	cbnz	r7, 800b79c <_dtoa_r+0x3c>
 800b77c:	2010      	movs	r0, #16
 800b77e:	f7fd f96d 	bl	8008a5c <malloc>
 800b782:	4602      	mov	r2, r0
 800b784:	f8cb 001c 	str.w	r0, [fp, #28]
 800b788:	b920      	cbnz	r0, 800b794 <_dtoa_r+0x34>
 800b78a:	4ba7      	ldr	r3, [pc, #668]	@ (800ba28 <_dtoa_r+0x2c8>)
 800b78c:	21ef      	movs	r1, #239	@ 0xef
 800b78e:	48a7      	ldr	r0, [pc, #668]	@ (800ba2c <_dtoa_r+0x2cc>)
 800b790:	f002 fc6c 	bl	800e06c <__assert_func>
 800b794:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b798:	6007      	str	r7, [r0, #0]
 800b79a:	60c7      	str	r7, [r0, #12]
 800b79c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7a0:	6819      	ldr	r1, [r3, #0]
 800b7a2:	b159      	cbz	r1, 800b7bc <_dtoa_r+0x5c>
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	604a      	str	r2, [r1, #4]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	4093      	lsls	r3, r2
 800b7ac:	608b      	str	r3, [r1, #8]
 800b7ae:	4658      	mov	r0, fp
 800b7b0:	f001 f9b4 	bl	800cb1c <_Bfree>
 800b7b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	1e2b      	subs	r3, r5, #0
 800b7be:	bfb9      	ittee	lt
 800b7c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b7c4:	9303      	strlt	r3, [sp, #12]
 800b7c6:	2300      	movge	r3, #0
 800b7c8:	6033      	strge	r3, [r6, #0]
 800b7ca:	9f03      	ldr	r7, [sp, #12]
 800b7cc:	4b98      	ldr	r3, [pc, #608]	@ (800ba30 <_dtoa_r+0x2d0>)
 800b7ce:	bfbc      	itt	lt
 800b7d0:	2201      	movlt	r2, #1
 800b7d2:	6032      	strlt	r2, [r6, #0]
 800b7d4:	43bb      	bics	r3, r7
 800b7d6:	d112      	bne.n	800b7fe <_dtoa_r+0x9e>
 800b7d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b7de:	6013      	str	r3, [r2, #0]
 800b7e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7e4:	4323      	orrs	r3, r4
 800b7e6:	f000 854d 	beq.w	800c284 <_dtoa_r+0xb24>
 800b7ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ba44 <_dtoa_r+0x2e4>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 854f 	beq.w	800c294 <_dtoa_r+0xb34>
 800b7f6:	f10a 0303 	add.w	r3, sl, #3
 800b7fa:	f000 bd49 	b.w	800c290 <_dtoa_r+0xb30>
 800b7fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	ec51 0b17 	vmov	r0, r1, d7
 800b808:	2300      	movs	r3, #0
 800b80a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b80e:	f7f5 f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b812:	4680      	mov	r8, r0
 800b814:	b158      	cbz	r0, 800b82e <_dtoa_r+0xce>
 800b816:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b818:	2301      	movs	r3, #1
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b81e:	b113      	cbz	r3, 800b826 <_dtoa_r+0xc6>
 800b820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b822:	4b84      	ldr	r3, [pc, #528]	@ (800ba34 <_dtoa_r+0x2d4>)
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba48 <_dtoa_r+0x2e8>
 800b82a:	f000 bd33 	b.w	800c294 <_dtoa_r+0xb34>
 800b82e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b832:	aa16      	add	r2, sp, #88	@ 0x58
 800b834:	a917      	add	r1, sp, #92	@ 0x5c
 800b836:	4658      	mov	r0, fp
 800b838:	f001 fd14 	bl	800d264 <__d2b>
 800b83c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b840:	4681      	mov	r9, r0
 800b842:	2e00      	cmp	r6, #0
 800b844:	d077      	beq.n	800b936 <_dtoa_r+0x1d6>
 800b846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b848:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b854:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b858:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b85c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b860:	4619      	mov	r1, r3
 800b862:	2200      	movs	r2, #0
 800b864:	4b74      	ldr	r3, [pc, #464]	@ (800ba38 <_dtoa_r+0x2d8>)
 800b866:	f7f4 fd1f 	bl	80002a8 <__aeabi_dsub>
 800b86a:	a369      	add	r3, pc, #420	@ (adr r3, 800ba10 <_dtoa_r+0x2b0>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fed2 	bl	8000618 <__aeabi_dmul>
 800b874:	a368      	add	r3, pc, #416	@ (adr r3, 800ba18 <_dtoa_r+0x2b8>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 fd17 	bl	80002ac <__adddf3>
 800b87e:	4604      	mov	r4, r0
 800b880:	4630      	mov	r0, r6
 800b882:	460d      	mov	r5, r1
 800b884:	f7f4 fe5e 	bl	8000544 <__aeabi_i2d>
 800b888:	a365      	add	r3, pc, #404	@ (adr r3, 800ba20 <_dtoa_r+0x2c0>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f7f4 fec3 	bl	8000618 <__aeabi_dmul>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f4 fd07 	bl	80002ac <__adddf3>
 800b89e:	4604      	mov	r4, r0
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	f7f5 f969 	bl	8000b78 <__aeabi_d2iz>
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4607      	mov	r7, r0
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f5 f924 	bl	8000afc <__aeabi_dcmplt>
 800b8b4:	b140      	cbz	r0, 800b8c8 <_dtoa_r+0x168>
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f7f4 fe44 	bl	8000544 <__aeabi_i2d>
 800b8bc:	4622      	mov	r2, r4
 800b8be:	462b      	mov	r3, r5
 800b8c0:	f7f5 f912 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8c4:	b900      	cbnz	r0, 800b8c8 <_dtoa_r+0x168>
 800b8c6:	3f01      	subs	r7, #1
 800b8c8:	2f16      	cmp	r7, #22
 800b8ca:	d851      	bhi.n	800b970 <_dtoa_r+0x210>
 800b8cc:	4b5b      	ldr	r3, [pc, #364]	@ (800ba3c <_dtoa_r+0x2dc>)
 800b8ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8da:	f7f5 f90f 	bl	8000afc <__aeabi_dcmplt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d048      	beq.n	800b974 <_dtoa_r+0x214>
 800b8e2:	3f01      	subs	r7, #1
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8ea:	1b9b      	subs	r3, r3, r6
 800b8ec:	1e5a      	subs	r2, r3, #1
 800b8ee:	bf44      	itt	mi
 800b8f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8f4:	2300      	movmi	r3, #0
 800b8f6:	9208      	str	r2, [sp, #32]
 800b8f8:	bf54      	ite	pl
 800b8fa:	f04f 0800 	movpl.w	r8, #0
 800b8fe:	9308      	strmi	r3, [sp, #32]
 800b900:	2f00      	cmp	r7, #0
 800b902:	db39      	blt.n	800b978 <_dtoa_r+0x218>
 800b904:	9b08      	ldr	r3, [sp, #32]
 800b906:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b908:	443b      	add	r3, r7
 800b90a:	9308      	str	r3, [sp, #32]
 800b90c:	2300      	movs	r3, #0
 800b90e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b912:	2b09      	cmp	r3, #9
 800b914:	d864      	bhi.n	800b9e0 <_dtoa_r+0x280>
 800b916:	2b05      	cmp	r3, #5
 800b918:	bfc4      	itt	gt
 800b91a:	3b04      	subgt	r3, #4
 800b91c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b920:	f1a3 0302 	sub.w	r3, r3, #2
 800b924:	bfcc      	ite	gt
 800b926:	2400      	movgt	r4, #0
 800b928:	2401      	movle	r4, #1
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d863      	bhi.n	800b9f6 <_dtoa_r+0x296>
 800b92e:	e8df f003 	tbb	[pc, r3]
 800b932:	372a      	.short	0x372a
 800b934:	5535      	.short	0x5535
 800b936:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b93a:	441e      	add	r6, r3
 800b93c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b940:	2b20      	cmp	r3, #32
 800b942:	bfc1      	itttt	gt
 800b944:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b948:	409f      	lslgt	r7, r3
 800b94a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b94e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b952:	bfd6      	itet	le
 800b954:	f1c3 0320 	rsble	r3, r3, #32
 800b958:	ea47 0003 	orrgt.w	r0, r7, r3
 800b95c:	fa04 f003 	lslle.w	r0, r4, r3
 800b960:	f7f4 fde0 	bl	8000524 <__aeabi_ui2d>
 800b964:	2201      	movs	r2, #1
 800b966:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b96a:	3e01      	subs	r6, #1
 800b96c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b96e:	e777      	b.n	800b860 <_dtoa_r+0x100>
 800b970:	2301      	movs	r3, #1
 800b972:	e7b8      	b.n	800b8e6 <_dtoa_r+0x186>
 800b974:	9012      	str	r0, [sp, #72]	@ 0x48
 800b976:	e7b7      	b.n	800b8e8 <_dtoa_r+0x188>
 800b978:	427b      	negs	r3, r7
 800b97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b97c:	2300      	movs	r3, #0
 800b97e:	eba8 0807 	sub.w	r8, r8, r7
 800b982:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b984:	e7c4      	b.n	800b910 <_dtoa_r+0x1b0>
 800b986:	2300      	movs	r3, #0
 800b988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b98a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dc35      	bgt.n	800b9fc <_dtoa_r+0x29c>
 800b990:	2301      	movs	r3, #1
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	9307      	str	r3, [sp, #28]
 800b996:	461a      	mov	r2, r3
 800b998:	920e      	str	r2, [sp, #56]	@ 0x38
 800b99a:	e00b      	b.n	800b9b4 <_dtoa_r+0x254>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e7f3      	b.n	800b988 <_dtoa_r+0x228>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9a6:	18fb      	adds	r3, r7, r3
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	bfb8      	it	lt
 800b9b2:	2301      	movlt	r3, #1
 800b9b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	2204      	movs	r2, #4
 800b9bc:	f102 0514 	add.w	r5, r2, #20
 800b9c0:	429d      	cmp	r5, r3
 800b9c2:	d91f      	bls.n	800ba04 <_dtoa_r+0x2a4>
 800b9c4:	6041      	str	r1, [r0, #4]
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	f001 f868 	bl	800ca9c <_Balloc>
 800b9cc:	4682      	mov	sl, r0
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d13c      	bne.n	800ba4c <_dtoa_r+0x2ec>
 800b9d2:	4b1b      	ldr	r3, [pc, #108]	@ (800ba40 <_dtoa_r+0x2e0>)
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b9da:	e6d8      	b.n	800b78e <_dtoa_r+0x2e>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e7e0      	b.n	800b9a2 <_dtoa_r+0x242>
 800b9e0:	2401      	movs	r4, #1
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2312      	movs	r3, #18
 800b9f4:	e7d0      	b.n	800b998 <_dtoa_r+0x238>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9fa:	e7f5      	b.n	800b9e8 <_dtoa_r+0x288>
 800b9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	e7d7      	b.n	800b9b4 <_dtoa_r+0x254>
 800ba04:	3101      	adds	r1, #1
 800ba06:	0052      	lsls	r2, r2, #1
 800ba08:	e7d8      	b.n	800b9bc <_dtoa_r+0x25c>
 800ba0a:	bf00      	nop
 800ba0c:	f3af 8000 	nop.w
 800ba10:	636f4361 	.word	0x636f4361
 800ba14:	3fd287a7 	.word	0x3fd287a7
 800ba18:	8b60c8b3 	.word	0x8b60c8b3
 800ba1c:	3fc68a28 	.word	0x3fc68a28
 800ba20:	509f79fb 	.word	0x509f79fb
 800ba24:	3fd34413 	.word	0x3fd34413
 800ba28:	0800fdc1 	.word	0x0800fdc1
 800ba2c:	0800fdd8 	.word	0x0800fdd8
 800ba30:	7ff00000 	.word	0x7ff00000
 800ba34:	08010020 	.word	0x08010020
 800ba38:	3ff80000 	.word	0x3ff80000
 800ba3c:	0800ff30 	.word	0x0800ff30
 800ba40:	0800fe30 	.word	0x0800fe30
 800ba44:	0800fdbd 	.word	0x0800fdbd
 800ba48:	0801001f 	.word	0x0801001f
 800ba4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba50:	6018      	str	r0, [r3, #0]
 800ba52:	9b07      	ldr	r3, [sp, #28]
 800ba54:	2b0e      	cmp	r3, #14
 800ba56:	f200 80a4 	bhi.w	800bba2 <_dtoa_r+0x442>
 800ba5a:	2c00      	cmp	r4, #0
 800ba5c:	f000 80a1 	beq.w	800bba2 <_dtoa_r+0x442>
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	dd33      	ble.n	800bacc <_dtoa_r+0x36c>
 800ba64:	4bad      	ldr	r3, [pc, #692]	@ (800bd1c <_dtoa_r+0x5bc>)
 800ba66:	f007 020f 	and.w	r2, r7, #15
 800ba6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba6e:	ed93 7b00 	vldr	d7, [r3]
 800ba72:	05f8      	lsls	r0, r7, #23
 800ba74:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba78:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba7c:	d516      	bpl.n	800baac <_dtoa_r+0x34c>
 800ba7e:	4ba8      	ldr	r3, [pc, #672]	@ (800bd20 <_dtoa_r+0x5c0>)
 800ba80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba88:	f7f4 fef0 	bl	800086c <__aeabi_ddiv>
 800ba8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba90:	f004 040f 	and.w	r4, r4, #15
 800ba94:	2603      	movs	r6, #3
 800ba96:	4da2      	ldr	r5, [pc, #648]	@ (800bd20 <_dtoa_r+0x5c0>)
 800ba98:	b954      	cbnz	r4, 800bab0 <_dtoa_r+0x350>
 800ba9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baa2:	f7f4 fee3 	bl	800086c <__aeabi_ddiv>
 800baa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baaa:	e028      	b.n	800bafe <_dtoa_r+0x39e>
 800baac:	2602      	movs	r6, #2
 800baae:	e7f2      	b.n	800ba96 <_dtoa_r+0x336>
 800bab0:	07e1      	lsls	r1, r4, #31
 800bab2:	d508      	bpl.n	800bac6 <_dtoa_r+0x366>
 800bab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800babc:	f7f4 fdac 	bl	8000618 <__aeabi_dmul>
 800bac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bac4:	3601      	adds	r6, #1
 800bac6:	1064      	asrs	r4, r4, #1
 800bac8:	3508      	adds	r5, #8
 800baca:	e7e5      	b.n	800ba98 <_dtoa_r+0x338>
 800bacc:	f000 80d2 	beq.w	800bc74 <_dtoa_r+0x514>
 800bad0:	427c      	negs	r4, r7
 800bad2:	4b92      	ldr	r3, [pc, #584]	@ (800bd1c <_dtoa_r+0x5bc>)
 800bad4:	4d92      	ldr	r5, [pc, #584]	@ (800bd20 <_dtoa_r+0x5c0>)
 800bad6:	f004 020f 	and.w	r2, r4, #15
 800bada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bae6:	f7f4 fd97 	bl	8000618 <__aeabi_dmul>
 800baea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baee:	1124      	asrs	r4, r4, #4
 800baf0:	2300      	movs	r3, #0
 800baf2:	2602      	movs	r6, #2
 800baf4:	2c00      	cmp	r4, #0
 800baf6:	f040 80b2 	bne.w	800bc5e <_dtoa_r+0x4fe>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1d3      	bne.n	800baa6 <_dtoa_r+0x346>
 800bafe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 80b7 	beq.w	800bc78 <_dtoa_r+0x518>
 800bb0a:	4b86      	ldr	r3, [pc, #536]	@ (800bd24 <_dtoa_r+0x5c4>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4620      	mov	r0, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	f7f4 fff3 	bl	8000afc <__aeabi_dcmplt>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	f000 80ae 	beq.w	800bc78 <_dtoa_r+0x518>
 800bb1c:	9b07      	ldr	r3, [sp, #28]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f000 80aa 	beq.w	800bc78 <_dtoa_r+0x518>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	dd37      	ble.n	800bb9a <_dtoa_r+0x43a>
 800bb2a:	1e7b      	subs	r3, r7, #1
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4b7d      	ldr	r3, [pc, #500]	@ (800bd28 <_dtoa_r+0x5c8>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	4629      	mov	r1, r5
 800bb36:	f7f4 fd6f 	bl	8000618 <__aeabi_dmul>
 800bb3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb3e:	9c00      	ldr	r4, [sp, #0]
 800bb40:	3601      	adds	r6, #1
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7f4 fcfe 	bl	8000544 <__aeabi_i2d>
 800bb48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb4c:	f7f4 fd64 	bl	8000618 <__aeabi_dmul>
 800bb50:	4b76      	ldr	r3, [pc, #472]	@ (800bd2c <_dtoa_r+0x5cc>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	f7f4 fbaa 	bl	80002ac <__adddf3>
 800bb58:	4605      	mov	r5, r0
 800bb5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb5e:	2c00      	cmp	r4, #0
 800bb60:	f040 808d 	bne.w	800bc7e <_dtoa_r+0x51e>
 800bb64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb68:	4b71      	ldr	r3, [pc, #452]	@ (800bd30 <_dtoa_r+0x5d0>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fb9c 	bl	80002a8 <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb78:	462a      	mov	r2, r5
 800bb7a:	4633      	mov	r3, r6
 800bb7c:	f7f4 ffdc 	bl	8000b38 <__aeabi_dcmpgt>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	f040 828b 	bne.w	800c09c <_dtoa_r+0x93c>
 800bb86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb8a:	462a      	mov	r2, r5
 800bb8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb90:	f7f4 ffb4 	bl	8000afc <__aeabi_dcmplt>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f040 8128 	bne.w	800bdea <_dtoa_r+0x68a>
 800bb9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f2c0 815a 	blt.w	800be5e <_dtoa_r+0x6fe>
 800bbaa:	2f0e      	cmp	r7, #14
 800bbac:	f300 8157 	bgt.w	800be5e <_dtoa_r+0x6fe>
 800bbb0:	4b5a      	ldr	r3, [pc, #360]	@ (800bd1c <_dtoa_r+0x5bc>)
 800bbb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbb6:	ed93 7b00 	vldr	d7, [r3]
 800bbba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	ed8d 7b00 	vstr	d7, [sp]
 800bbc2:	da03      	bge.n	800bbcc <_dtoa_r+0x46c>
 800bbc4:	9b07      	ldr	r3, [sp, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f340 8101 	ble.w	800bdce <_dtoa_r+0x66e>
 800bbcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbd0:	4656      	mov	r6, sl
 800bbd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 fe47 	bl	800086c <__aeabi_ddiv>
 800bbde:	f7f4 ffcb 	bl	8000b78 <__aeabi_d2iz>
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	f7f4 fcae 	bl	8000544 <__aeabi_i2d>
 800bbe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbec:	f7f4 fd14 	bl	8000618 <__aeabi_dmul>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bbfc:	f7f4 fb54 	bl	80002a8 <__aeabi_dsub>
 800bc00:	f806 4b01 	strb.w	r4, [r6], #1
 800bc04:	9d07      	ldr	r5, [sp, #28]
 800bc06:	eba6 040a 	sub.w	r4, r6, sl
 800bc0a:	42a5      	cmp	r5, r4
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	f040 8117 	bne.w	800be42 <_dtoa_r+0x6e2>
 800bc14:	f7f4 fb4a 	bl	80002ac <__adddf3>
 800bc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	f7f4 ff8a 	bl	8000b38 <__aeabi_dcmpgt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f040 80f9 	bne.w	800be1c <_dtoa_r+0x6bc>
 800bc2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	f7f4 ff59 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc36:	b118      	cbz	r0, 800bc40 <_dtoa_r+0x4e0>
 800bc38:	f018 0f01 	tst.w	r8, #1
 800bc3c:	f040 80ee 	bne.w	800be1c <_dtoa_r+0x6bc>
 800bc40:	4649      	mov	r1, r9
 800bc42:	4658      	mov	r0, fp
 800bc44:	f000 ff6a 	bl	800cb1c <_Bfree>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	7033      	strb	r3, [r6, #0]
 800bc4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc4e:	3701      	adds	r7, #1
 800bc50:	601f      	str	r7, [r3, #0]
 800bc52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 831d 	beq.w	800c294 <_dtoa_r+0xb34>
 800bc5a:	601e      	str	r6, [r3, #0]
 800bc5c:	e31a      	b.n	800c294 <_dtoa_r+0xb34>
 800bc5e:	07e2      	lsls	r2, r4, #31
 800bc60:	d505      	bpl.n	800bc6e <_dtoa_r+0x50e>
 800bc62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc66:	f7f4 fcd7 	bl	8000618 <__aeabi_dmul>
 800bc6a:	3601      	adds	r6, #1
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	1064      	asrs	r4, r4, #1
 800bc70:	3508      	adds	r5, #8
 800bc72:	e73f      	b.n	800baf4 <_dtoa_r+0x394>
 800bc74:	2602      	movs	r6, #2
 800bc76:	e742      	b.n	800bafe <_dtoa_r+0x39e>
 800bc78:	9c07      	ldr	r4, [sp, #28]
 800bc7a:	9704      	str	r7, [sp, #16]
 800bc7c:	e761      	b.n	800bb42 <_dtoa_r+0x3e2>
 800bc7e:	4b27      	ldr	r3, [pc, #156]	@ (800bd1c <_dtoa_r+0x5bc>)
 800bc80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc8a:	4454      	add	r4, sl
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	d053      	beq.n	800bd38 <_dtoa_r+0x5d8>
 800bc90:	4928      	ldr	r1, [pc, #160]	@ (800bd34 <_dtoa_r+0x5d4>)
 800bc92:	2000      	movs	r0, #0
 800bc94:	f7f4 fdea 	bl	800086c <__aeabi_ddiv>
 800bc98:	4633      	mov	r3, r6
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	f7f4 fb04 	bl	80002a8 <__aeabi_dsub>
 800bca0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bca4:	4656      	mov	r6, sl
 800bca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcaa:	f7f4 ff65 	bl	8000b78 <__aeabi_d2iz>
 800bcae:	4605      	mov	r5, r0
 800bcb0:	f7f4 fc48 	bl	8000544 <__aeabi_i2d>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcbc:	f7f4 faf4 	bl	80002a8 <__aeabi_dsub>
 800bcc0:	3530      	adds	r5, #48	@ 0x30
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcca:	f806 5b01 	strb.w	r5, [r6], #1
 800bcce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcd2:	f7f4 ff13 	bl	8000afc <__aeabi_dcmplt>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d171      	bne.n	800bdbe <_dtoa_r+0x65e>
 800bcda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcde:	4911      	ldr	r1, [pc, #68]	@ (800bd24 <_dtoa_r+0x5c4>)
 800bce0:	2000      	movs	r0, #0
 800bce2:	f7f4 fae1 	bl	80002a8 <__aeabi_dsub>
 800bce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcea:	f7f4 ff07 	bl	8000afc <__aeabi_dcmplt>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f040 8095 	bne.w	800be1e <_dtoa_r+0x6be>
 800bcf4:	42a6      	cmp	r6, r4
 800bcf6:	f43f af50 	beq.w	800bb9a <_dtoa_r+0x43a>
 800bcfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcfe:	4b0a      	ldr	r3, [pc, #40]	@ (800bd28 <_dtoa_r+0x5c8>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	f7f4 fc89 	bl	8000618 <__aeabi_dmul>
 800bd06:	4b08      	ldr	r3, [pc, #32]	@ (800bd28 <_dtoa_r+0x5c8>)
 800bd08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd12:	f7f4 fc81 	bl	8000618 <__aeabi_dmul>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e7c4      	b.n	800bca6 <_dtoa_r+0x546>
 800bd1c:	0800ff30 	.word	0x0800ff30
 800bd20:	0800ff08 	.word	0x0800ff08
 800bd24:	3ff00000 	.word	0x3ff00000
 800bd28:	40240000 	.word	0x40240000
 800bd2c:	401c0000 	.word	0x401c0000
 800bd30:	40140000 	.word	0x40140000
 800bd34:	3fe00000 	.word	0x3fe00000
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7f4 fc6c 	bl	8000618 <__aeabi_dmul>
 800bd40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd44:	9415      	str	r4, [sp, #84]	@ 0x54
 800bd46:	4656      	mov	r6, sl
 800bd48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd4c:	f7f4 ff14 	bl	8000b78 <__aeabi_d2iz>
 800bd50:	4605      	mov	r5, r0
 800bd52:	f7f4 fbf7 	bl	8000544 <__aeabi_i2d>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5e:	f7f4 faa3 	bl	80002a8 <__aeabi_dsub>
 800bd62:	3530      	adds	r5, #48	@ 0x30
 800bd64:	f806 5b01 	strb.w	r5, [r6], #1
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	42a6      	cmp	r6, r4
 800bd6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd72:	f04f 0200 	mov.w	r2, #0
 800bd76:	d124      	bne.n	800bdc2 <_dtoa_r+0x662>
 800bd78:	4bac      	ldr	r3, [pc, #688]	@ (800c02c <_dtoa_r+0x8cc>)
 800bd7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd7e:	f7f4 fa95 	bl	80002ac <__adddf3>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd8a:	f7f4 fed5 	bl	8000b38 <__aeabi_dcmpgt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d145      	bne.n	800be1e <_dtoa_r+0x6be>
 800bd92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd96:	49a5      	ldr	r1, [pc, #660]	@ (800c02c <_dtoa_r+0x8cc>)
 800bd98:	2000      	movs	r0, #0
 800bd9a:	f7f4 fa85 	bl	80002a8 <__aeabi_dsub>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda6:	f7f4 fea9 	bl	8000afc <__aeabi_dcmplt>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	f43f aef5 	beq.w	800bb9a <_dtoa_r+0x43a>
 800bdb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bdb2:	1e73      	subs	r3, r6, #1
 800bdb4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bdba:	2b30      	cmp	r3, #48	@ 0x30
 800bdbc:	d0f8      	beq.n	800bdb0 <_dtoa_r+0x650>
 800bdbe:	9f04      	ldr	r7, [sp, #16]
 800bdc0:	e73e      	b.n	800bc40 <_dtoa_r+0x4e0>
 800bdc2:	4b9b      	ldr	r3, [pc, #620]	@ (800c030 <_dtoa_r+0x8d0>)
 800bdc4:	f7f4 fc28 	bl	8000618 <__aeabi_dmul>
 800bdc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdcc:	e7bc      	b.n	800bd48 <_dtoa_r+0x5e8>
 800bdce:	d10c      	bne.n	800bdea <_dtoa_r+0x68a>
 800bdd0:	4b98      	ldr	r3, [pc, #608]	@ (800c034 <_dtoa_r+0x8d4>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd8:	f7f4 fc1e 	bl	8000618 <__aeabi_dmul>
 800bddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bde0:	f7f4 fea0 	bl	8000b24 <__aeabi_dcmpge>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f000 8157 	beq.w	800c098 <_dtoa_r+0x938>
 800bdea:	2400      	movs	r4, #0
 800bdec:	4625      	mov	r5, r4
 800bdee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdf0:	43db      	mvns	r3, r3
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	4656      	mov	r6, sl
 800bdf6:	2700      	movs	r7, #0
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4658      	mov	r0, fp
 800bdfc:	f000 fe8e 	bl	800cb1c <_Bfree>
 800be00:	2d00      	cmp	r5, #0
 800be02:	d0dc      	beq.n	800bdbe <_dtoa_r+0x65e>
 800be04:	b12f      	cbz	r7, 800be12 <_dtoa_r+0x6b2>
 800be06:	42af      	cmp	r7, r5
 800be08:	d003      	beq.n	800be12 <_dtoa_r+0x6b2>
 800be0a:	4639      	mov	r1, r7
 800be0c:	4658      	mov	r0, fp
 800be0e:	f000 fe85 	bl	800cb1c <_Bfree>
 800be12:	4629      	mov	r1, r5
 800be14:	4658      	mov	r0, fp
 800be16:	f000 fe81 	bl	800cb1c <_Bfree>
 800be1a:	e7d0      	b.n	800bdbe <_dtoa_r+0x65e>
 800be1c:	9704      	str	r7, [sp, #16]
 800be1e:	4633      	mov	r3, r6
 800be20:	461e      	mov	r6, r3
 800be22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be26:	2a39      	cmp	r2, #57	@ 0x39
 800be28:	d107      	bne.n	800be3a <_dtoa_r+0x6da>
 800be2a:	459a      	cmp	sl, r3
 800be2c:	d1f8      	bne.n	800be20 <_dtoa_r+0x6c0>
 800be2e:	9a04      	ldr	r2, [sp, #16]
 800be30:	3201      	adds	r2, #1
 800be32:	9204      	str	r2, [sp, #16]
 800be34:	2230      	movs	r2, #48	@ 0x30
 800be36:	f88a 2000 	strb.w	r2, [sl]
 800be3a:	781a      	ldrb	r2, [r3, #0]
 800be3c:	3201      	adds	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
 800be40:	e7bd      	b.n	800bdbe <_dtoa_r+0x65e>
 800be42:	4b7b      	ldr	r3, [pc, #492]	@ (800c030 <_dtoa_r+0x8d0>)
 800be44:	2200      	movs	r2, #0
 800be46:	f7f4 fbe7 	bl	8000618 <__aeabi_dmul>
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	460d      	mov	r5, r1
 800be52:	f7f4 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 800be56:	2800      	cmp	r0, #0
 800be58:	f43f aebb 	beq.w	800bbd2 <_dtoa_r+0x472>
 800be5c:	e6f0      	b.n	800bc40 <_dtoa_r+0x4e0>
 800be5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be60:	2a00      	cmp	r2, #0
 800be62:	f000 80db 	beq.w	800c01c <_dtoa_r+0x8bc>
 800be66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be68:	2a01      	cmp	r2, #1
 800be6a:	f300 80bf 	bgt.w	800bfec <_dtoa_r+0x88c>
 800be6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be70:	2a00      	cmp	r2, #0
 800be72:	f000 80b7 	beq.w	800bfe4 <_dtoa_r+0x884>
 800be76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be7c:	4646      	mov	r6, r8
 800be7e:	9a08      	ldr	r2, [sp, #32]
 800be80:	2101      	movs	r1, #1
 800be82:	441a      	add	r2, r3
 800be84:	4658      	mov	r0, fp
 800be86:	4498      	add	r8, r3
 800be88:	9208      	str	r2, [sp, #32]
 800be8a:	f000 ff45 	bl	800cd18 <__i2b>
 800be8e:	4605      	mov	r5, r0
 800be90:	b15e      	cbz	r6, 800beaa <_dtoa_r+0x74a>
 800be92:	9b08      	ldr	r3, [sp, #32]
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd08      	ble.n	800beaa <_dtoa_r+0x74a>
 800be98:	42b3      	cmp	r3, r6
 800be9a:	9a08      	ldr	r2, [sp, #32]
 800be9c:	bfa8      	it	ge
 800be9e:	4633      	movge	r3, r6
 800bea0:	eba8 0803 	sub.w	r8, r8, r3
 800bea4:	1af6      	subs	r6, r6, r3
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	9308      	str	r3, [sp, #32]
 800beaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beac:	b1f3      	cbz	r3, 800beec <_dtoa_r+0x78c>
 800beae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 80b7 	beq.w	800c024 <_dtoa_r+0x8c4>
 800beb6:	b18c      	cbz	r4, 800bedc <_dtoa_r+0x77c>
 800beb8:	4629      	mov	r1, r5
 800beba:	4622      	mov	r2, r4
 800bebc:	4658      	mov	r0, fp
 800bebe:	f000 ffeb 	bl	800ce98 <__pow5mult>
 800bec2:	464a      	mov	r2, r9
 800bec4:	4601      	mov	r1, r0
 800bec6:	4605      	mov	r5, r0
 800bec8:	4658      	mov	r0, fp
 800beca:	f000 ff3b 	bl	800cd44 <__multiply>
 800bece:	4649      	mov	r1, r9
 800bed0:	9004      	str	r0, [sp, #16]
 800bed2:	4658      	mov	r0, fp
 800bed4:	f000 fe22 	bl	800cb1c <_Bfree>
 800bed8:	9b04      	ldr	r3, [sp, #16]
 800beda:	4699      	mov	r9, r3
 800bedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bede:	1b1a      	subs	r2, r3, r4
 800bee0:	d004      	beq.n	800beec <_dtoa_r+0x78c>
 800bee2:	4649      	mov	r1, r9
 800bee4:	4658      	mov	r0, fp
 800bee6:	f000 ffd7 	bl	800ce98 <__pow5mult>
 800beea:	4681      	mov	r9, r0
 800beec:	2101      	movs	r1, #1
 800beee:	4658      	mov	r0, fp
 800bef0:	f000 ff12 	bl	800cd18 <__i2b>
 800bef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bef6:	4604      	mov	r4, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 81cf 	beq.w	800c29c <_dtoa_r+0xb3c>
 800befe:	461a      	mov	r2, r3
 800bf00:	4601      	mov	r1, r0
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 ffc8 	bl	800ce98 <__pow5mult>
 800bf08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	f300 8095 	bgt.w	800c03c <_dtoa_r+0x8dc>
 800bf12:	9b02      	ldr	r3, [sp, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f040 8087 	bne.w	800c028 <_dtoa_r+0x8c8>
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 8089 	bne.w	800c038 <_dtoa_r+0x8d8>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf2c:	0d1b      	lsrs	r3, r3, #20
 800bf2e:	051b      	lsls	r3, r3, #20
 800bf30:	b12b      	cbz	r3, 800bf3e <_dtoa_r+0x7de>
 800bf32:	9b08      	ldr	r3, [sp, #32]
 800bf34:	3301      	adds	r3, #1
 800bf36:	9308      	str	r3, [sp, #32]
 800bf38:	f108 0801 	add.w	r8, r8, #1
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 81b0 	beq.w	800c2a8 <_dtoa_r+0xb48>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf4e:	6918      	ldr	r0, [r3, #16]
 800bf50:	f000 fe96 	bl	800cc80 <__hi0bits>
 800bf54:	f1c0 0020 	rsb	r0, r0, #32
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	4418      	add	r0, r3
 800bf5c:	f010 001f 	ands.w	r0, r0, #31
 800bf60:	d077      	beq.n	800c052 <_dtoa_r+0x8f2>
 800bf62:	f1c0 0320 	rsb	r3, r0, #32
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	dd6b      	ble.n	800c042 <_dtoa_r+0x8e2>
 800bf6a:	9b08      	ldr	r3, [sp, #32]
 800bf6c:	f1c0 001c 	rsb	r0, r0, #28
 800bf70:	4403      	add	r3, r0
 800bf72:	4480      	add	r8, r0
 800bf74:	4406      	add	r6, r0
 800bf76:	9308      	str	r3, [sp, #32]
 800bf78:	f1b8 0f00 	cmp.w	r8, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x82a>
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4642      	mov	r2, r8
 800bf82:	4658      	mov	r0, fp
 800bf84:	f000 ffe2 	bl	800cf4c <__lshift>
 800bf88:	4681      	mov	r9, r0
 800bf8a:	9b08      	ldr	r3, [sp, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dd05      	ble.n	800bf9c <_dtoa_r+0x83c>
 800bf90:	4621      	mov	r1, r4
 800bf92:	461a      	mov	r2, r3
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 ffd9 	bl	800cf4c <__lshift>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d059      	beq.n	800c056 <_dtoa_r+0x8f6>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4648      	mov	r0, r9
 800bfa6:	f001 f83d 	bl	800d024 <__mcmp>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	da53      	bge.n	800c056 <_dtoa_r+0x8f6>
 800bfae:	1e7b      	subs	r3, r7, #1
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	220a      	movs	r2, #10
 800bfb8:	4658      	mov	r0, fp
 800bfba:	f000 fdd1 	bl	800cb60 <__multadd>
 800bfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfc0:	4681      	mov	r9, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 8172 	beq.w	800c2ac <_dtoa_r+0xb4c>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4629      	mov	r1, r5
 800bfcc:	220a      	movs	r2, #10
 800bfce:	4658      	mov	r0, fp
 800bfd0:	f000 fdc6 	bl	800cb60 <__multadd>
 800bfd4:	9b00      	ldr	r3, [sp, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	4605      	mov	r5, r0
 800bfda:	dc67      	bgt.n	800c0ac <_dtoa_r+0x94c>
 800bfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	dc41      	bgt.n	800c066 <_dtoa_r+0x906>
 800bfe2:	e063      	b.n	800c0ac <_dtoa_r+0x94c>
 800bfe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfe6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfea:	e746      	b.n	800be7a <_dtoa_r+0x71a>
 800bfec:	9b07      	ldr	r3, [sp, #28]
 800bfee:	1e5c      	subs	r4, r3, #1
 800bff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff2:	42a3      	cmp	r3, r4
 800bff4:	bfbf      	itttt	lt
 800bff6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bff8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bffa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bffc:	1ae3      	sublt	r3, r4, r3
 800bffe:	bfb4      	ite	lt
 800c000:	18d2      	addlt	r2, r2, r3
 800c002:	1b1c      	subge	r4, r3, r4
 800c004:	9b07      	ldr	r3, [sp, #28]
 800c006:	bfbc      	itt	lt
 800c008:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c00a:	2400      	movlt	r4, #0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bfb5      	itete	lt
 800c010:	eba8 0603 	sublt.w	r6, r8, r3
 800c014:	9b07      	ldrge	r3, [sp, #28]
 800c016:	2300      	movlt	r3, #0
 800c018:	4646      	movge	r6, r8
 800c01a:	e730      	b.n	800be7e <_dtoa_r+0x71e>
 800c01c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c01e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c020:	4646      	mov	r6, r8
 800c022:	e735      	b.n	800be90 <_dtoa_r+0x730>
 800c024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c026:	e75c      	b.n	800bee2 <_dtoa_r+0x782>
 800c028:	2300      	movs	r3, #0
 800c02a:	e788      	b.n	800bf3e <_dtoa_r+0x7de>
 800c02c:	3fe00000 	.word	0x3fe00000
 800c030:	40240000 	.word	0x40240000
 800c034:	40140000 	.word	0x40140000
 800c038:	9b02      	ldr	r3, [sp, #8]
 800c03a:	e780      	b.n	800bf3e <_dtoa_r+0x7de>
 800c03c:	2300      	movs	r3, #0
 800c03e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c040:	e782      	b.n	800bf48 <_dtoa_r+0x7e8>
 800c042:	d099      	beq.n	800bf78 <_dtoa_r+0x818>
 800c044:	9a08      	ldr	r2, [sp, #32]
 800c046:	331c      	adds	r3, #28
 800c048:	441a      	add	r2, r3
 800c04a:	4498      	add	r8, r3
 800c04c:	441e      	add	r6, r3
 800c04e:	9208      	str	r2, [sp, #32]
 800c050:	e792      	b.n	800bf78 <_dtoa_r+0x818>
 800c052:	4603      	mov	r3, r0
 800c054:	e7f6      	b.n	800c044 <_dtoa_r+0x8e4>
 800c056:	9b07      	ldr	r3, [sp, #28]
 800c058:	9704      	str	r7, [sp, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	dc20      	bgt.n	800c0a0 <_dtoa_r+0x940>
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c062:	2b02      	cmp	r3, #2
 800c064:	dd1e      	ble.n	800c0a4 <_dtoa_r+0x944>
 800c066:	9b00      	ldr	r3, [sp, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f47f aec0 	bne.w	800bdee <_dtoa_r+0x68e>
 800c06e:	4621      	mov	r1, r4
 800c070:	2205      	movs	r2, #5
 800c072:	4658      	mov	r0, fp
 800c074:	f000 fd74 	bl	800cb60 <__multadd>
 800c078:	4601      	mov	r1, r0
 800c07a:	4604      	mov	r4, r0
 800c07c:	4648      	mov	r0, r9
 800c07e:	f000 ffd1 	bl	800d024 <__mcmp>
 800c082:	2800      	cmp	r0, #0
 800c084:	f77f aeb3 	ble.w	800bdee <_dtoa_r+0x68e>
 800c088:	4656      	mov	r6, sl
 800c08a:	2331      	movs	r3, #49	@ 0x31
 800c08c:	f806 3b01 	strb.w	r3, [r6], #1
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	3301      	adds	r3, #1
 800c094:	9304      	str	r3, [sp, #16]
 800c096:	e6ae      	b.n	800bdf6 <_dtoa_r+0x696>
 800c098:	9c07      	ldr	r4, [sp, #28]
 800c09a:	9704      	str	r7, [sp, #16]
 800c09c:	4625      	mov	r5, r4
 800c09e:	e7f3      	b.n	800c088 <_dtoa_r+0x928>
 800c0a0:	9b07      	ldr	r3, [sp, #28]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 8104 	beq.w	800c2b4 <_dtoa_r+0xb54>
 800c0ac:	2e00      	cmp	r6, #0
 800c0ae:	dd05      	ble.n	800c0bc <_dtoa_r+0x95c>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	4658      	mov	r0, fp
 800c0b6:	f000 ff49 	bl	800cf4c <__lshift>
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d05a      	beq.n	800c178 <_dtoa_r+0xa18>
 800c0c2:	6869      	ldr	r1, [r5, #4]
 800c0c4:	4658      	mov	r0, fp
 800c0c6:	f000 fce9 	bl	800ca9c <_Balloc>
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	b928      	cbnz	r0, 800c0da <_dtoa_r+0x97a>
 800c0ce:	4b84      	ldr	r3, [pc, #528]	@ (800c2e0 <_dtoa_r+0xb80>)
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c0d6:	f7ff bb5a 	b.w	800b78e <_dtoa_r+0x2e>
 800c0da:	692a      	ldr	r2, [r5, #16]
 800c0dc:	3202      	adds	r2, #2
 800c0de:	0092      	lsls	r2, r2, #2
 800c0e0:	f105 010c 	add.w	r1, r5, #12
 800c0e4:	300c      	adds	r0, #12
 800c0e6:	f7ff fa8a 	bl	800b5fe <memcpy>
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	4658      	mov	r0, fp
 800c0f0:	f000 ff2c 	bl	800cf4c <__lshift>
 800c0f4:	f10a 0301 	add.w	r3, sl, #1
 800c0f8:	9307      	str	r3, [sp, #28]
 800c0fa:	9b00      	ldr	r3, [sp, #0]
 800c0fc:	4453      	add	r3, sl
 800c0fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c100:	9b02      	ldr	r3, [sp, #8]
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	462f      	mov	r7, r5
 800c108:	930a      	str	r3, [sp, #40]	@ 0x28
 800c10a:	4605      	mov	r5, r0
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	4621      	mov	r1, r4
 800c110:	3b01      	subs	r3, #1
 800c112:	4648      	mov	r0, r9
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	f7ff fa99 	bl	800b64c <quorem>
 800c11a:	4639      	mov	r1, r7
 800c11c:	9002      	str	r0, [sp, #8]
 800c11e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c122:	4648      	mov	r0, r9
 800c124:	f000 ff7e 	bl	800d024 <__mcmp>
 800c128:	462a      	mov	r2, r5
 800c12a:	9008      	str	r0, [sp, #32]
 800c12c:	4621      	mov	r1, r4
 800c12e:	4658      	mov	r0, fp
 800c130:	f000 ff94 	bl	800d05c <__mdiff>
 800c134:	68c2      	ldr	r2, [r0, #12]
 800c136:	4606      	mov	r6, r0
 800c138:	bb02      	cbnz	r2, 800c17c <_dtoa_r+0xa1c>
 800c13a:	4601      	mov	r1, r0
 800c13c:	4648      	mov	r0, r9
 800c13e:	f000 ff71 	bl	800d024 <__mcmp>
 800c142:	4602      	mov	r2, r0
 800c144:	4631      	mov	r1, r6
 800c146:	4658      	mov	r0, fp
 800c148:	920e      	str	r2, [sp, #56]	@ 0x38
 800c14a:	f000 fce7 	bl	800cb1c <_Bfree>
 800c14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c152:	9e07      	ldr	r6, [sp, #28]
 800c154:	ea43 0102 	orr.w	r1, r3, r2
 800c158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c15a:	4319      	orrs	r1, r3
 800c15c:	d110      	bne.n	800c180 <_dtoa_r+0xa20>
 800c15e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c162:	d029      	beq.n	800c1b8 <_dtoa_r+0xa58>
 800c164:	9b08      	ldr	r3, [sp, #32]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dd02      	ble.n	800c170 <_dtoa_r+0xa10>
 800c16a:	9b02      	ldr	r3, [sp, #8]
 800c16c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c170:	9b00      	ldr	r3, [sp, #0]
 800c172:	f883 8000 	strb.w	r8, [r3]
 800c176:	e63f      	b.n	800bdf8 <_dtoa_r+0x698>
 800c178:	4628      	mov	r0, r5
 800c17a:	e7bb      	b.n	800c0f4 <_dtoa_r+0x994>
 800c17c:	2201      	movs	r2, #1
 800c17e:	e7e1      	b.n	800c144 <_dtoa_r+0x9e4>
 800c180:	9b08      	ldr	r3, [sp, #32]
 800c182:	2b00      	cmp	r3, #0
 800c184:	db04      	blt.n	800c190 <_dtoa_r+0xa30>
 800c186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c188:	430b      	orrs	r3, r1
 800c18a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c18c:	430b      	orrs	r3, r1
 800c18e:	d120      	bne.n	800c1d2 <_dtoa_r+0xa72>
 800c190:	2a00      	cmp	r2, #0
 800c192:	dded      	ble.n	800c170 <_dtoa_r+0xa10>
 800c194:	4649      	mov	r1, r9
 800c196:	2201      	movs	r2, #1
 800c198:	4658      	mov	r0, fp
 800c19a:	f000 fed7 	bl	800cf4c <__lshift>
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	f000 ff3f 	bl	800d024 <__mcmp>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	dc03      	bgt.n	800c1b2 <_dtoa_r+0xa52>
 800c1aa:	d1e1      	bne.n	800c170 <_dtoa_r+0xa10>
 800c1ac:	f018 0f01 	tst.w	r8, #1
 800c1b0:	d0de      	beq.n	800c170 <_dtoa_r+0xa10>
 800c1b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1b6:	d1d8      	bne.n	800c16a <_dtoa_r+0xa0a>
 800c1b8:	9a00      	ldr	r2, [sp, #0]
 800c1ba:	2339      	movs	r3, #57	@ 0x39
 800c1bc:	7013      	strb	r3, [r2, #0]
 800c1be:	4633      	mov	r3, r6
 800c1c0:	461e      	mov	r6, r3
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c1c8:	2a39      	cmp	r2, #57	@ 0x39
 800c1ca:	d052      	beq.n	800c272 <_dtoa_r+0xb12>
 800c1cc:	3201      	adds	r2, #1
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	e612      	b.n	800bdf8 <_dtoa_r+0x698>
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	dd07      	ble.n	800c1e6 <_dtoa_r+0xa86>
 800c1d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1da:	d0ed      	beq.n	800c1b8 <_dtoa_r+0xa58>
 800c1dc:	9a00      	ldr	r2, [sp, #0]
 800c1de:	f108 0301 	add.w	r3, r8, #1
 800c1e2:	7013      	strb	r3, [r2, #0]
 800c1e4:	e608      	b.n	800bdf8 <_dtoa_r+0x698>
 800c1e6:	9b07      	ldr	r3, [sp, #28]
 800c1e8:	9a07      	ldr	r2, [sp, #28]
 800c1ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d028      	beq.n	800c246 <_dtoa_r+0xae6>
 800c1f4:	4649      	mov	r1, r9
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	4658      	mov	r0, fp
 800c1fc:	f000 fcb0 	bl	800cb60 <__multadd>
 800c200:	42af      	cmp	r7, r5
 800c202:	4681      	mov	r9, r0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	f04f 020a 	mov.w	r2, #10
 800c20c:	4639      	mov	r1, r7
 800c20e:	4658      	mov	r0, fp
 800c210:	d107      	bne.n	800c222 <_dtoa_r+0xac2>
 800c212:	f000 fca5 	bl	800cb60 <__multadd>
 800c216:	4607      	mov	r7, r0
 800c218:	4605      	mov	r5, r0
 800c21a:	9b07      	ldr	r3, [sp, #28]
 800c21c:	3301      	adds	r3, #1
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	e774      	b.n	800c10c <_dtoa_r+0x9ac>
 800c222:	f000 fc9d 	bl	800cb60 <__multadd>
 800c226:	4629      	mov	r1, r5
 800c228:	4607      	mov	r7, r0
 800c22a:	2300      	movs	r3, #0
 800c22c:	220a      	movs	r2, #10
 800c22e:	4658      	mov	r0, fp
 800c230:	f000 fc96 	bl	800cb60 <__multadd>
 800c234:	4605      	mov	r5, r0
 800c236:	e7f0      	b.n	800c21a <_dtoa_r+0xaba>
 800c238:	9b00      	ldr	r3, [sp, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bfcc      	ite	gt
 800c23e:	461e      	movgt	r6, r3
 800c240:	2601      	movle	r6, #1
 800c242:	4456      	add	r6, sl
 800c244:	2700      	movs	r7, #0
 800c246:	4649      	mov	r1, r9
 800c248:	2201      	movs	r2, #1
 800c24a:	4658      	mov	r0, fp
 800c24c:	f000 fe7e 	bl	800cf4c <__lshift>
 800c250:	4621      	mov	r1, r4
 800c252:	4681      	mov	r9, r0
 800c254:	f000 fee6 	bl	800d024 <__mcmp>
 800c258:	2800      	cmp	r0, #0
 800c25a:	dcb0      	bgt.n	800c1be <_dtoa_r+0xa5e>
 800c25c:	d102      	bne.n	800c264 <_dtoa_r+0xb04>
 800c25e:	f018 0f01 	tst.w	r8, #1
 800c262:	d1ac      	bne.n	800c1be <_dtoa_r+0xa5e>
 800c264:	4633      	mov	r3, r6
 800c266:	461e      	mov	r6, r3
 800c268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c26c:	2a30      	cmp	r2, #48	@ 0x30
 800c26e:	d0fa      	beq.n	800c266 <_dtoa_r+0xb06>
 800c270:	e5c2      	b.n	800bdf8 <_dtoa_r+0x698>
 800c272:	459a      	cmp	sl, r3
 800c274:	d1a4      	bne.n	800c1c0 <_dtoa_r+0xa60>
 800c276:	9b04      	ldr	r3, [sp, #16]
 800c278:	3301      	adds	r3, #1
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	2331      	movs	r3, #49	@ 0x31
 800c27e:	f88a 3000 	strb.w	r3, [sl]
 800c282:	e5b9      	b.n	800bdf8 <_dtoa_r+0x698>
 800c284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c286:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c2e4 <_dtoa_r+0xb84>
 800c28a:	b11b      	cbz	r3, 800c294 <_dtoa_r+0xb34>
 800c28c:	f10a 0308 	add.w	r3, sl, #8
 800c290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	4650      	mov	r0, sl
 800c296:	b019      	add	sp, #100	@ 0x64
 800c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	f77f ae37 	ble.w	800bf12 <_dtoa_r+0x7b2>
 800c2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	e655      	b.n	800bf58 <_dtoa_r+0x7f8>
 800c2ac:	9b00      	ldr	r3, [sp, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f77f aed6 	ble.w	800c060 <_dtoa_r+0x900>
 800c2b4:	4656      	mov	r6, sl
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	f7ff f9c7 	bl	800b64c <quorem>
 800c2be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c2c2:	f806 8b01 	strb.w	r8, [r6], #1
 800c2c6:	9b00      	ldr	r3, [sp, #0]
 800c2c8:	eba6 020a 	sub.w	r2, r6, sl
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	ddb3      	ble.n	800c238 <_dtoa_r+0xad8>
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fc42 	bl	800cb60 <__multadd>
 800c2dc:	4681      	mov	r9, r0
 800c2de:	e7ea      	b.n	800c2b6 <_dtoa_r+0xb56>
 800c2e0:	0800fe30 	.word	0x0800fe30
 800c2e4:	0800fdb4 	.word	0x0800fdb4

0800c2e8 <_free_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	2900      	cmp	r1, #0
 800c2ee:	d041      	beq.n	800c374 <_free_r+0x8c>
 800c2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f4:	1f0c      	subs	r4, r1, #4
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bfb8      	it	lt
 800c2fa:	18e4      	addlt	r4, r4, r3
 800c2fc:	f7fc fc60 	bl	8008bc0 <__malloc_lock>
 800c300:	4a1d      	ldr	r2, [pc, #116]	@ (800c378 <_free_r+0x90>)
 800c302:	6813      	ldr	r3, [r2, #0]
 800c304:	b933      	cbnz	r3, 800c314 <_free_r+0x2c>
 800c306:	6063      	str	r3, [r4, #4]
 800c308:	6014      	str	r4, [r2, #0]
 800c30a:	4628      	mov	r0, r5
 800c30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c310:	f7fc bc5c 	b.w	8008bcc <__malloc_unlock>
 800c314:	42a3      	cmp	r3, r4
 800c316:	d908      	bls.n	800c32a <_free_r+0x42>
 800c318:	6820      	ldr	r0, [r4, #0]
 800c31a:	1821      	adds	r1, r4, r0
 800c31c:	428b      	cmp	r3, r1
 800c31e:	bf01      	itttt	eq
 800c320:	6819      	ldreq	r1, [r3, #0]
 800c322:	685b      	ldreq	r3, [r3, #4]
 800c324:	1809      	addeq	r1, r1, r0
 800c326:	6021      	streq	r1, [r4, #0]
 800c328:	e7ed      	b.n	800c306 <_free_r+0x1e>
 800c32a:	461a      	mov	r2, r3
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	b10b      	cbz	r3, 800c334 <_free_r+0x4c>
 800c330:	42a3      	cmp	r3, r4
 800c332:	d9fa      	bls.n	800c32a <_free_r+0x42>
 800c334:	6811      	ldr	r1, [r2, #0]
 800c336:	1850      	adds	r0, r2, r1
 800c338:	42a0      	cmp	r0, r4
 800c33a:	d10b      	bne.n	800c354 <_free_r+0x6c>
 800c33c:	6820      	ldr	r0, [r4, #0]
 800c33e:	4401      	add	r1, r0
 800c340:	1850      	adds	r0, r2, r1
 800c342:	4283      	cmp	r3, r0
 800c344:	6011      	str	r1, [r2, #0]
 800c346:	d1e0      	bne.n	800c30a <_free_r+0x22>
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	6053      	str	r3, [r2, #4]
 800c34e:	4408      	add	r0, r1
 800c350:	6010      	str	r0, [r2, #0]
 800c352:	e7da      	b.n	800c30a <_free_r+0x22>
 800c354:	d902      	bls.n	800c35c <_free_r+0x74>
 800c356:	230c      	movs	r3, #12
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	e7d6      	b.n	800c30a <_free_r+0x22>
 800c35c:	6820      	ldr	r0, [r4, #0]
 800c35e:	1821      	adds	r1, r4, r0
 800c360:	428b      	cmp	r3, r1
 800c362:	bf04      	itt	eq
 800c364:	6819      	ldreq	r1, [r3, #0]
 800c366:	685b      	ldreq	r3, [r3, #4]
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	bf04      	itt	eq
 800c36c:	1809      	addeq	r1, r1, r0
 800c36e:	6021      	streq	r1, [r4, #0]
 800c370:	6054      	str	r4, [r2, #4]
 800c372:	e7ca      	b.n	800c30a <_free_r+0x22>
 800c374:	bd38      	pop	{r3, r4, r5, pc}
 800c376:	bf00      	nop
 800c378:	20009590 	.word	0x20009590

0800c37c <rshift>:
 800c37c:	6903      	ldr	r3, [r0, #16]
 800c37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c38a:	f100 0414 	add.w	r4, r0, #20
 800c38e:	dd45      	ble.n	800c41c <rshift+0xa0>
 800c390:	f011 011f 	ands.w	r1, r1, #31
 800c394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c39c:	d10c      	bne.n	800c3b8 <rshift+0x3c>
 800c39e:	f100 0710 	add.w	r7, r0, #16
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	42b1      	cmp	r1, r6
 800c3a6:	d334      	bcc.n	800c412 <rshift+0x96>
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	1eea      	subs	r2, r5, #3
 800c3ae:	4296      	cmp	r6, r2
 800c3b0:	bf38      	it	cc
 800c3b2:	2300      	movcc	r3, #0
 800c3b4:	4423      	add	r3, r4
 800c3b6:	e015      	b.n	800c3e4 <rshift+0x68>
 800c3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3bc:	f1c1 0820 	rsb	r8, r1, #32
 800c3c0:	40cf      	lsrs	r7, r1
 800c3c2:	f105 0e04 	add.w	lr, r5, #4
 800c3c6:	46a1      	mov	r9, r4
 800c3c8:	4576      	cmp	r6, lr
 800c3ca:	46f4      	mov	ip, lr
 800c3cc:	d815      	bhi.n	800c3fa <rshift+0x7e>
 800c3ce:	1a9a      	subs	r2, r3, r2
 800c3d0:	0092      	lsls	r2, r2, #2
 800c3d2:	3a04      	subs	r2, #4
 800c3d4:	3501      	adds	r5, #1
 800c3d6:	42ae      	cmp	r6, r5
 800c3d8:	bf38      	it	cc
 800c3da:	2200      	movcc	r2, #0
 800c3dc:	18a3      	adds	r3, r4, r2
 800c3de:	50a7      	str	r7, [r4, r2]
 800c3e0:	b107      	cbz	r7, 800c3e4 <rshift+0x68>
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	1b1a      	subs	r2, r3, r4
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3ec:	bf08      	it	eq
 800c3ee:	2300      	moveq	r3, #0
 800c3f0:	6102      	str	r2, [r0, #16]
 800c3f2:	bf08      	it	eq
 800c3f4:	6143      	streq	r3, [r0, #20]
 800c3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3fa:	f8dc c000 	ldr.w	ip, [ip]
 800c3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800c402:	ea4c 0707 	orr.w	r7, ip, r7
 800c406:	f849 7b04 	str.w	r7, [r9], #4
 800c40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c40e:	40cf      	lsrs	r7, r1
 800c410:	e7da      	b.n	800c3c8 <rshift+0x4c>
 800c412:	f851 cb04 	ldr.w	ip, [r1], #4
 800c416:	f847 cf04 	str.w	ip, [r7, #4]!
 800c41a:	e7c3      	b.n	800c3a4 <rshift+0x28>
 800c41c:	4623      	mov	r3, r4
 800c41e:	e7e1      	b.n	800c3e4 <rshift+0x68>

0800c420 <__hexdig_fun>:
 800c420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c424:	2b09      	cmp	r3, #9
 800c426:	d802      	bhi.n	800c42e <__hexdig_fun+0xe>
 800c428:	3820      	subs	r0, #32
 800c42a:	b2c0      	uxtb	r0, r0
 800c42c:	4770      	bx	lr
 800c42e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c432:	2b05      	cmp	r3, #5
 800c434:	d801      	bhi.n	800c43a <__hexdig_fun+0x1a>
 800c436:	3847      	subs	r0, #71	@ 0x47
 800c438:	e7f7      	b.n	800c42a <__hexdig_fun+0xa>
 800c43a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c43e:	2b05      	cmp	r3, #5
 800c440:	d801      	bhi.n	800c446 <__hexdig_fun+0x26>
 800c442:	3827      	subs	r0, #39	@ 0x27
 800c444:	e7f1      	b.n	800c42a <__hexdig_fun+0xa>
 800c446:	2000      	movs	r0, #0
 800c448:	4770      	bx	lr
	...

0800c44c <__gethex>:
 800c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	b085      	sub	sp, #20
 800c452:	468a      	mov	sl, r1
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	680b      	ldr	r3, [r1, #0]
 800c458:	9001      	str	r0, [sp, #4]
 800c45a:	4690      	mov	r8, r2
 800c45c:	1c9c      	adds	r4, r3, #2
 800c45e:	46a1      	mov	r9, r4
 800c460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c464:	2830      	cmp	r0, #48	@ 0x30
 800c466:	d0fa      	beq.n	800c45e <__gethex+0x12>
 800c468:	eba9 0303 	sub.w	r3, r9, r3
 800c46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c470:	f7ff ffd6 	bl	800c420 <__hexdig_fun>
 800c474:	4605      	mov	r5, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d168      	bne.n	800c54c <__gethex+0x100>
 800c47a:	49a0      	ldr	r1, [pc, #640]	@ (800c6fc <__gethex+0x2b0>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	4648      	mov	r0, r9
 800c480:	f7fe fa79 	bl	800a976 <strncmp>
 800c484:	4607      	mov	r7, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	d167      	bne.n	800c55a <__gethex+0x10e>
 800c48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c48e:	4626      	mov	r6, r4
 800c490:	f7ff ffc6 	bl	800c420 <__hexdig_fun>
 800c494:	2800      	cmp	r0, #0
 800c496:	d062      	beq.n	800c55e <__gethex+0x112>
 800c498:	4623      	mov	r3, r4
 800c49a:	7818      	ldrb	r0, [r3, #0]
 800c49c:	2830      	cmp	r0, #48	@ 0x30
 800c49e:	4699      	mov	r9, r3
 800c4a0:	f103 0301 	add.w	r3, r3, #1
 800c4a4:	d0f9      	beq.n	800c49a <__gethex+0x4e>
 800c4a6:	f7ff ffbb 	bl	800c420 <__hexdig_fun>
 800c4aa:	fab0 f580 	clz	r5, r0
 800c4ae:	096d      	lsrs	r5, r5, #5
 800c4b0:	f04f 0b01 	mov.w	fp, #1
 800c4b4:	464a      	mov	r2, r9
 800c4b6:	4616      	mov	r6, r2
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	7830      	ldrb	r0, [r6, #0]
 800c4bc:	f7ff ffb0 	bl	800c420 <__hexdig_fun>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d1f8      	bne.n	800c4b6 <__gethex+0x6a>
 800c4c4:	498d      	ldr	r1, [pc, #564]	@ (800c6fc <__gethex+0x2b0>)
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f7fe fa54 	bl	800a976 <strncmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d13f      	bne.n	800c552 <__gethex+0x106>
 800c4d2:	b944      	cbnz	r4, 800c4e6 <__gethex+0x9a>
 800c4d4:	1c74      	adds	r4, r6, #1
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	4616      	mov	r6, r2
 800c4da:	3201      	adds	r2, #1
 800c4dc:	7830      	ldrb	r0, [r6, #0]
 800c4de:	f7ff ff9f 	bl	800c420 <__hexdig_fun>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d1f8      	bne.n	800c4d8 <__gethex+0x8c>
 800c4e6:	1ba4      	subs	r4, r4, r6
 800c4e8:	00a7      	lsls	r7, r4, #2
 800c4ea:	7833      	ldrb	r3, [r6, #0]
 800c4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c4f0:	2b50      	cmp	r3, #80	@ 0x50
 800c4f2:	d13e      	bne.n	800c572 <__gethex+0x126>
 800c4f4:	7873      	ldrb	r3, [r6, #1]
 800c4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c4f8:	d033      	beq.n	800c562 <__gethex+0x116>
 800c4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4fc:	d034      	beq.n	800c568 <__gethex+0x11c>
 800c4fe:	1c71      	adds	r1, r6, #1
 800c500:	2400      	movs	r4, #0
 800c502:	7808      	ldrb	r0, [r1, #0]
 800c504:	f7ff ff8c 	bl	800c420 <__hexdig_fun>
 800c508:	1e43      	subs	r3, r0, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b18      	cmp	r3, #24
 800c50e:	d830      	bhi.n	800c572 <__gethex+0x126>
 800c510:	f1a0 0210 	sub.w	r2, r0, #16
 800c514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c518:	f7ff ff82 	bl	800c420 <__hexdig_fun>
 800c51c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c520:	fa5f fc8c 	uxtb.w	ip, ip
 800c524:	f1bc 0f18 	cmp.w	ip, #24
 800c528:	f04f 030a 	mov.w	r3, #10
 800c52c:	d91e      	bls.n	800c56c <__gethex+0x120>
 800c52e:	b104      	cbz	r4, 800c532 <__gethex+0xe6>
 800c530:	4252      	negs	r2, r2
 800c532:	4417      	add	r7, r2
 800c534:	f8ca 1000 	str.w	r1, [sl]
 800c538:	b1ed      	cbz	r5, 800c576 <__gethex+0x12a>
 800c53a:	f1bb 0f00 	cmp.w	fp, #0
 800c53e:	bf0c      	ite	eq
 800c540:	2506      	moveq	r5, #6
 800c542:	2500      	movne	r5, #0
 800c544:	4628      	mov	r0, r5
 800c546:	b005      	add	sp, #20
 800c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54c:	2500      	movs	r5, #0
 800c54e:	462c      	mov	r4, r5
 800c550:	e7b0      	b.n	800c4b4 <__gethex+0x68>
 800c552:	2c00      	cmp	r4, #0
 800c554:	d1c7      	bne.n	800c4e6 <__gethex+0x9a>
 800c556:	4627      	mov	r7, r4
 800c558:	e7c7      	b.n	800c4ea <__gethex+0x9e>
 800c55a:	464e      	mov	r6, r9
 800c55c:	462f      	mov	r7, r5
 800c55e:	2501      	movs	r5, #1
 800c560:	e7c3      	b.n	800c4ea <__gethex+0x9e>
 800c562:	2400      	movs	r4, #0
 800c564:	1cb1      	adds	r1, r6, #2
 800c566:	e7cc      	b.n	800c502 <__gethex+0xb6>
 800c568:	2401      	movs	r4, #1
 800c56a:	e7fb      	b.n	800c564 <__gethex+0x118>
 800c56c:	fb03 0002 	mla	r0, r3, r2, r0
 800c570:	e7ce      	b.n	800c510 <__gethex+0xc4>
 800c572:	4631      	mov	r1, r6
 800c574:	e7de      	b.n	800c534 <__gethex+0xe8>
 800c576:	eba6 0309 	sub.w	r3, r6, r9
 800c57a:	3b01      	subs	r3, #1
 800c57c:	4629      	mov	r1, r5
 800c57e:	2b07      	cmp	r3, #7
 800c580:	dc0a      	bgt.n	800c598 <__gethex+0x14c>
 800c582:	9801      	ldr	r0, [sp, #4]
 800c584:	f000 fa8a 	bl	800ca9c <_Balloc>
 800c588:	4604      	mov	r4, r0
 800c58a:	b940      	cbnz	r0, 800c59e <__gethex+0x152>
 800c58c:	4b5c      	ldr	r3, [pc, #368]	@ (800c700 <__gethex+0x2b4>)
 800c58e:	4602      	mov	r2, r0
 800c590:	21e4      	movs	r1, #228	@ 0xe4
 800c592:	485c      	ldr	r0, [pc, #368]	@ (800c704 <__gethex+0x2b8>)
 800c594:	f001 fd6a 	bl	800e06c <__assert_func>
 800c598:	3101      	adds	r1, #1
 800c59a:	105b      	asrs	r3, r3, #1
 800c59c:	e7ef      	b.n	800c57e <__gethex+0x132>
 800c59e:	f100 0a14 	add.w	sl, r0, #20
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	4655      	mov	r5, sl
 800c5a6:	469b      	mov	fp, r3
 800c5a8:	45b1      	cmp	r9, r6
 800c5aa:	d337      	bcc.n	800c61c <__gethex+0x1d0>
 800c5ac:	f845 bb04 	str.w	fp, [r5], #4
 800c5b0:	eba5 050a 	sub.w	r5, r5, sl
 800c5b4:	10ad      	asrs	r5, r5, #2
 800c5b6:	6125      	str	r5, [r4, #16]
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f000 fb61 	bl	800cc80 <__hi0bits>
 800c5be:	016d      	lsls	r5, r5, #5
 800c5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800c5c4:	1a2d      	subs	r5, r5, r0
 800c5c6:	42b5      	cmp	r5, r6
 800c5c8:	dd54      	ble.n	800c674 <__gethex+0x228>
 800c5ca:	1bad      	subs	r5, r5, r6
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fef5 	bl	800d3be <__any_on>
 800c5d4:	4681      	mov	r9, r0
 800c5d6:	b178      	cbz	r0, 800c5f8 <__gethex+0x1ac>
 800c5d8:	1e6b      	subs	r3, r5, #1
 800c5da:	1159      	asrs	r1, r3, #5
 800c5dc:	f003 021f 	and.w	r2, r3, #31
 800c5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5e4:	f04f 0901 	mov.w	r9, #1
 800c5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800c5ec:	420a      	tst	r2, r1
 800c5ee:	d003      	beq.n	800c5f8 <__gethex+0x1ac>
 800c5f0:	454b      	cmp	r3, r9
 800c5f2:	dc36      	bgt.n	800c662 <__gethex+0x216>
 800c5f4:	f04f 0902 	mov.w	r9, #2
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff febe 	bl	800c37c <rshift>
 800c600:	442f      	add	r7, r5
 800c602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c606:	42bb      	cmp	r3, r7
 800c608:	da42      	bge.n	800c690 <__gethex+0x244>
 800c60a:	9801      	ldr	r0, [sp, #4]
 800c60c:	4621      	mov	r1, r4
 800c60e:	f000 fa85 	bl	800cb1c <_Bfree>
 800c612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c614:	2300      	movs	r3, #0
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	25a3      	movs	r5, #163	@ 0xa3
 800c61a:	e793      	b.n	800c544 <__gethex+0xf8>
 800c61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c620:	2a2e      	cmp	r2, #46	@ 0x2e
 800c622:	d012      	beq.n	800c64a <__gethex+0x1fe>
 800c624:	2b20      	cmp	r3, #32
 800c626:	d104      	bne.n	800c632 <__gethex+0x1e6>
 800c628:	f845 bb04 	str.w	fp, [r5], #4
 800c62c:	f04f 0b00 	mov.w	fp, #0
 800c630:	465b      	mov	r3, fp
 800c632:	7830      	ldrb	r0, [r6, #0]
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	f7ff fef3 	bl	800c420 <__hexdig_fun>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	f000 000f 	and.w	r0, r0, #15
 800c640:	4098      	lsls	r0, r3
 800c642:	ea4b 0b00 	orr.w	fp, fp, r0
 800c646:	3304      	adds	r3, #4
 800c648:	e7ae      	b.n	800c5a8 <__gethex+0x15c>
 800c64a:	45b1      	cmp	r9, r6
 800c64c:	d8ea      	bhi.n	800c624 <__gethex+0x1d8>
 800c64e:	492b      	ldr	r1, [pc, #172]	@ (800c6fc <__gethex+0x2b0>)
 800c650:	9303      	str	r3, [sp, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	4630      	mov	r0, r6
 800c656:	f7fe f98e 	bl	800a976 <strncmp>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1e1      	bne.n	800c624 <__gethex+0x1d8>
 800c660:	e7a2      	b.n	800c5a8 <__gethex+0x15c>
 800c662:	1ea9      	subs	r1, r5, #2
 800c664:	4620      	mov	r0, r4
 800c666:	f000 feaa 	bl	800d3be <__any_on>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d0c2      	beq.n	800c5f4 <__gethex+0x1a8>
 800c66e:	f04f 0903 	mov.w	r9, #3
 800c672:	e7c1      	b.n	800c5f8 <__gethex+0x1ac>
 800c674:	da09      	bge.n	800c68a <__gethex+0x23e>
 800c676:	1b75      	subs	r5, r6, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	9801      	ldr	r0, [sp, #4]
 800c67c:	462a      	mov	r2, r5
 800c67e:	f000 fc65 	bl	800cf4c <__lshift>
 800c682:	1b7f      	subs	r7, r7, r5
 800c684:	4604      	mov	r4, r0
 800c686:	f100 0a14 	add.w	sl, r0, #20
 800c68a:	f04f 0900 	mov.w	r9, #0
 800c68e:	e7b8      	b.n	800c602 <__gethex+0x1b6>
 800c690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c694:	42bd      	cmp	r5, r7
 800c696:	dd6f      	ble.n	800c778 <__gethex+0x32c>
 800c698:	1bed      	subs	r5, r5, r7
 800c69a:	42ae      	cmp	r6, r5
 800c69c:	dc34      	bgt.n	800c708 <__gethex+0x2bc>
 800c69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d022      	beq.n	800c6ec <__gethex+0x2a0>
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d024      	beq.n	800c6f4 <__gethex+0x2a8>
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d115      	bne.n	800c6da <__gethex+0x28e>
 800c6ae:	42ae      	cmp	r6, r5
 800c6b0:	d113      	bne.n	800c6da <__gethex+0x28e>
 800c6b2:	2e01      	cmp	r6, #1
 800c6b4:	d10b      	bne.n	800c6ce <__gethex+0x282>
 800c6b6:	9a02      	ldr	r2, [sp, #8]
 800c6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	2301      	movs	r3, #1
 800c6c0:	6123      	str	r3, [r4, #16]
 800c6c2:	f8ca 3000 	str.w	r3, [sl]
 800c6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6c8:	2562      	movs	r5, #98	@ 0x62
 800c6ca:	601c      	str	r4, [r3, #0]
 800c6cc:	e73a      	b.n	800c544 <__gethex+0xf8>
 800c6ce:	1e71      	subs	r1, r6, #1
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fe74 	bl	800d3be <__any_on>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d1ed      	bne.n	800c6b6 <__gethex+0x26a>
 800c6da:	9801      	ldr	r0, [sp, #4]
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f000 fa1d 	bl	800cb1c <_Bfree>
 800c6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	2550      	movs	r5, #80	@ 0x50
 800c6ea:	e72b      	b.n	800c544 <__gethex+0xf8>
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f3      	bne.n	800c6da <__gethex+0x28e>
 800c6f2:	e7e0      	b.n	800c6b6 <__gethex+0x26a>
 800c6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1dd      	bne.n	800c6b6 <__gethex+0x26a>
 800c6fa:	e7ee      	b.n	800c6da <__gethex+0x28e>
 800c6fc:	0800fb71 	.word	0x0800fb71
 800c700:	0800fe30 	.word	0x0800fe30
 800c704:	0800fe41 	.word	0x0800fe41
 800c708:	1e6f      	subs	r7, r5, #1
 800c70a:	f1b9 0f00 	cmp.w	r9, #0
 800c70e:	d130      	bne.n	800c772 <__gethex+0x326>
 800c710:	b127      	cbz	r7, 800c71c <__gethex+0x2d0>
 800c712:	4639      	mov	r1, r7
 800c714:	4620      	mov	r0, r4
 800c716:	f000 fe52 	bl	800d3be <__any_on>
 800c71a:	4681      	mov	r9, r0
 800c71c:	117a      	asrs	r2, r7, #5
 800c71e:	2301      	movs	r3, #1
 800c720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c724:	f007 071f 	and.w	r7, r7, #31
 800c728:	40bb      	lsls	r3, r7
 800c72a:	4213      	tst	r3, r2
 800c72c:	4629      	mov	r1, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	bf18      	it	ne
 800c732:	f049 0902 	orrne.w	r9, r9, #2
 800c736:	f7ff fe21 	bl	800c37c <rshift>
 800c73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c73e:	1b76      	subs	r6, r6, r5
 800c740:	2502      	movs	r5, #2
 800c742:	f1b9 0f00 	cmp.w	r9, #0
 800c746:	d047      	beq.n	800c7d8 <__gethex+0x38c>
 800c748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d015      	beq.n	800c77c <__gethex+0x330>
 800c750:	2b03      	cmp	r3, #3
 800c752:	d017      	beq.n	800c784 <__gethex+0x338>
 800c754:	2b01      	cmp	r3, #1
 800c756:	d109      	bne.n	800c76c <__gethex+0x320>
 800c758:	f019 0f02 	tst.w	r9, #2
 800c75c:	d006      	beq.n	800c76c <__gethex+0x320>
 800c75e:	f8da 3000 	ldr.w	r3, [sl]
 800c762:	ea49 0903 	orr.w	r9, r9, r3
 800c766:	f019 0f01 	tst.w	r9, #1
 800c76a:	d10e      	bne.n	800c78a <__gethex+0x33e>
 800c76c:	f045 0510 	orr.w	r5, r5, #16
 800c770:	e032      	b.n	800c7d8 <__gethex+0x38c>
 800c772:	f04f 0901 	mov.w	r9, #1
 800c776:	e7d1      	b.n	800c71c <__gethex+0x2d0>
 800c778:	2501      	movs	r5, #1
 800c77a:	e7e2      	b.n	800c742 <__gethex+0x2f6>
 800c77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c77e:	f1c3 0301 	rsb	r3, r3, #1
 800c782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f0      	beq.n	800c76c <__gethex+0x320>
 800c78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c78e:	f104 0314 	add.w	r3, r4, #20
 800c792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7a8:	d01b      	beq.n	800c7e2 <__gethex+0x396>
 800c7aa:	3201      	adds	r2, #1
 800c7ac:	6002      	str	r2, [r0, #0]
 800c7ae:	2d02      	cmp	r5, #2
 800c7b0:	f104 0314 	add.w	r3, r4, #20
 800c7b4:	d13c      	bne.n	800c830 <__gethex+0x3e4>
 800c7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800c7ba:	3a01      	subs	r2, #1
 800c7bc:	42b2      	cmp	r2, r6
 800c7be:	d109      	bne.n	800c7d4 <__gethex+0x388>
 800c7c0:	1171      	asrs	r1, r6, #5
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7c8:	f006 061f 	and.w	r6, r6, #31
 800c7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800c7d0:	421e      	tst	r6, r3
 800c7d2:	d13a      	bne.n	800c84a <__gethex+0x3fe>
 800c7d4:	f045 0520 	orr.w	r5, r5, #32
 800c7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7da:	601c      	str	r4, [r3, #0]
 800c7dc:	9b02      	ldr	r3, [sp, #8]
 800c7de:	601f      	str	r7, [r3, #0]
 800c7e0:	e6b0      	b.n	800c544 <__gethex+0xf8>
 800c7e2:	4299      	cmp	r1, r3
 800c7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7e8:	d8d9      	bhi.n	800c79e <__gethex+0x352>
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	459b      	cmp	fp, r3
 800c7ee:	db17      	blt.n	800c820 <__gethex+0x3d4>
 800c7f0:	6861      	ldr	r1, [r4, #4]
 800c7f2:	9801      	ldr	r0, [sp, #4]
 800c7f4:	3101      	adds	r1, #1
 800c7f6:	f000 f951 	bl	800ca9c <_Balloc>
 800c7fa:	4681      	mov	r9, r0
 800c7fc:	b918      	cbnz	r0, 800c806 <__gethex+0x3ba>
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c868 <__gethex+0x41c>)
 800c800:	4602      	mov	r2, r0
 800c802:	2184      	movs	r1, #132	@ 0x84
 800c804:	e6c5      	b.n	800c592 <__gethex+0x146>
 800c806:	6922      	ldr	r2, [r4, #16]
 800c808:	3202      	adds	r2, #2
 800c80a:	f104 010c 	add.w	r1, r4, #12
 800c80e:	0092      	lsls	r2, r2, #2
 800c810:	300c      	adds	r0, #12
 800c812:	f7fe fef4 	bl	800b5fe <memcpy>
 800c816:	4621      	mov	r1, r4
 800c818:	9801      	ldr	r0, [sp, #4]
 800c81a:	f000 f97f 	bl	800cb1c <_Bfree>
 800c81e:	464c      	mov	r4, r9
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c828:	6122      	str	r2, [r4, #16]
 800c82a:	2201      	movs	r2, #1
 800c82c:	615a      	str	r2, [r3, #20]
 800c82e:	e7be      	b.n	800c7ae <__gethex+0x362>
 800c830:	6922      	ldr	r2, [r4, #16]
 800c832:	455a      	cmp	r2, fp
 800c834:	dd0b      	ble.n	800c84e <__gethex+0x402>
 800c836:	2101      	movs	r1, #1
 800c838:	4620      	mov	r0, r4
 800c83a:	f7ff fd9f 	bl	800c37c <rshift>
 800c83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c842:	3701      	adds	r7, #1
 800c844:	42bb      	cmp	r3, r7
 800c846:	f6ff aee0 	blt.w	800c60a <__gethex+0x1be>
 800c84a:	2501      	movs	r5, #1
 800c84c:	e7c2      	b.n	800c7d4 <__gethex+0x388>
 800c84e:	f016 061f 	ands.w	r6, r6, #31
 800c852:	d0fa      	beq.n	800c84a <__gethex+0x3fe>
 800c854:	4453      	add	r3, sl
 800c856:	f1c6 0620 	rsb	r6, r6, #32
 800c85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c85e:	f000 fa0f 	bl	800cc80 <__hi0bits>
 800c862:	42b0      	cmp	r0, r6
 800c864:	dbe7      	blt.n	800c836 <__gethex+0x3ea>
 800c866:	e7f0      	b.n	800c84a <__gethex+0x3fe>
 800c868:	0800fe30 	.word	0x0800fe30

0800c86c <L_shift>:
 800c86c:	f1c2 0208 	rsb	r2, r2, #8
 800c870:	0092      	lsls	r2, r2, #2
 800c872:	b570      	push	{r4, r5, r6, lr}
 800c874:	f1c2 0620 	rsb	r6, r2, #32
 800c878:	6843      	ldr	r3, [r0, #4]
 800c87a:	6804      	ldr	r4, [r0, #0]
 800c87c:	fa03 f506 	lsl.w	r5, r3, r6
 800c880:	432c      	orrs	r4, r5
 800c882:	40d3      	lsrs	r3, r2
 800c884:	6004      	str	r4, [r0, #0]
 800c886:	f840 3f04 	str.w	r3, [r0, #4]!
 800c88a:	4288      	cmp	r0, r1
 800c88c:	d3f4      	bcc.n	800c878 <L_shift+0xc>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}

0800c890 <__match>:
 800c890:	b530      	push	{r4, r5, lr}
 800c892:	6803      	ldr	r3, [r0, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c89a:	b914      	cbnz	r4, 800c8a2 <__match+0x12>
 800c89c:	6003      	str	r3, [r0, #0]
 800c89e:	2001      	movs	r0, #1
 800c8a0:	bd30      	pop	{r4, r5, pc}
 800c8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c8aa:	2d19      	cmp	r5, #25
 800c8ac:	bf98      	it	ls
 800c8ae:	3220      	addls	r2, #32
 800c8b0:	42a2      	cmp	r2, r4
 800c8b2:	d0f0      	beq.n	800c896 <__match+0x6>
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e7f3      	b.n	800c8a0 <__match+0x10>

0800c8b8 <__hexnan>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	680b      	ldr	r3, [r1, #0]
 800c8be:	6801      	ldr	r1, [r0, #0]
 800c8c0:	115e      	asrs	r6, r3, #5
 800c8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8c6:	f013 031f 	ands.w	r3, r3, #31
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	bf18      	it	ne
 800c8ce:	3604      	addne	r6, #4
 800c8d0:	2500      	movs	r5, #0
 800c8d2:	1f37      	subs	r7, r6, #4
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	4690      	mov	r8, r2
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8de:	46b9      	mov	r9, r7
 800c8e0:	463c      	mov	r4, r7
 800c8e2:	9502      	str	r5, [sp, #8]
 800c8e4:	46ab      	mov	fp, r5
 800c8e6:	784a      	ldrb	r2, [r1, #1]
 800c8e8:	1c4b      	adds	r3, r1, #1
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	b342      	cbz	r2, 800c940 <__hexnan+0x88>
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	9105      	str	r1, [sp, #20]
 800c8f2:	9204      	str	r2, [sp, #16]
 800c8f4:	f7ff fd94 	bl	800c420 <__hexdig_fun>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d151      	bne.n	800c9a0 <__hexnan+0xe8>
 800c8fc:	9a04      	ldr	r2, [sp, #16]
 800c8fe:	9905      	ldr	r1, [sp, #20]
 800c900:	2a20      	cmp	r2, #32
 800c902:	d818      	bhi.n	800c936 <__hexnan+0x7e>
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	459b      	cmp	fp, r3
 800c908:	dd13      	ble.n	800c932 <__hexnan+0x7a>
 800c90a:	454c      	cmp	r4, r9
 800c90c:	d206      	bcs.n	800c91c <__hexnan+0x64>
 800c90e:	2d07      	cmp	r5, #7
 800c910:	dc04      	bgt.n	800c91c <__hexnan+0x64>
 800c912:	462a      	mov	r2, r5
 800c914:	4649      	mov	r1, r9
 800c916:	4620      	mov	r0, r4
 800c918:	f7ff ffa8 	bl	800c86c <L_shift>
 800c91c:	4544      	cmp	r4, r8
 800c91e:	d952      	bls.n	800c9c6 <__hexnan+0x10e>
 800c920:	2300      	movs	r3, #0
 800c922:	f1a4 0904 	sub.w	r9, r4, #4
 800c926:	f844 3c04 	str.w	r3, [r4, #-4]
 800c92a:	f8cd b008 	str.w	fp, [sp, #8]
 800c92e:	464c      	mov	r4, r9
 800c930:	461d      	mov	r5, r3
 800c932:	9903      	ldr	r1, [sp, #12]
 800c934:	e7d7      	b.n	800c8e6 <__hexnan+0x2e>
 800c936:	2a29      	cmp	r2, #41	@ 0x29
 800c938:	d157      	bne.n	800c9ea <__hexnan+0x132>
 800c93a:	3102      	adds	r1, #2
 800c93c:	f8ca 1000 	str.w	r1, [sl]
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d051      	beq.n	800c9ea <__hexnan+0x132>
 800c946:	454c      	cmp	r4, r9
 800c948:	d206      	bcs.n	800c958 <__hexnan+0xa0>
 800c94a:	2d07      	cmp	r5, #7
 800c94c:	dc04      	bgt.n	800c958 <__hexnan+0xa0>
 800c94e:	462a      	mov	r2, r5
 800c950:	4649      	mov	r1, r9
 800c952:	4620      	mov	r0, r4
 800c954:	f7ff ff8a 	bl	800c86c <L_shift>
 800c958:	4544      	cmp	r4, r8
 800c95a:	d936      	bls.n	800c9ca <__hexnan+0x112>
 800c95c:	f1a8 0204 	sub.w	r2, r8, #4
 800c960:	4623      	mov	r3, r4
 800c962:	f853 1b04 	ldr.w	r1, [r3], #4
 800c966:	f842 1f04 	str.w	r1, [r2, #4]!
 800c96a:	429f      	cmp	r7, r3
 800c96c:	d2f9      	bcs.n	800c962 <__hexnan+0xaa>
 800c96e:	1b3b      	subs	r3, r7, r4
 800c970:	f023 0303 	bic.w	r3, r3, #3
 800c974:	3304      	adds	r3, #4
 800c976:	3401      	adds	r4, #1
 800c978:	3e03      	subs	r6, #3
 800c97a:	42b4      	cmp	r4, r6
 800c97c:	bf88      	it	hi
 800c97e:	2304      	movhi	r3, #4
 800c980:	4443      	add	r3, r8
 800c982:	2200      	movs	r2, #0
 800c984:	f843 2b04 	str.w	r2, [r3], #4
 800c988:	429f      	cmp	r7, r3
 800c98a:	d2fb      	bcs.n	800c984 <__hexnan+0xcc>
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	b91b      	cbnz	r3, 800c998 <__hexnan+0xe0>
 800c990:	4547      	cmp	r7, r8
 800c992:	d128      	bne.n	800c9e6 <__hexnan+0x12e>
 800c994:	2301      	movs	r3, #1
 800c996:	603b      	str	r3, [r7, #0]
 800c998:	2005      	movs	r0, #5
 800c99a:	b007      	add	sp, #28
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	3501      	adds	r5, #1
 800c9a2:	2d08      	cmp	r5, #8
 800c9a4:	f10b 0b01 	add.w	fp, fp, #1
 800c9a8:	dd06      	ble.n	800c9b8 <__hexnan+0x100>
 800c9aa:	4544      	cmp	r4, r8
 800c9ac:	d9c1      	bls.n	800c932 <__hexnan+0x7a>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9b4:	2501      	movs	r5, #1
 800c9b6:	3c04      	subs	r4, #4
 800c9b8:	6822      	ldr	r2, [r4, #0]
 800c9ba:	f000 000f 	and.w	r0, r0, #15
 800c9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9c2:	6020      	str	r0, [r4, #0]
 800c9c4:	e7b5      	b.n	800c932 <__hexnan+0x7a>
 800c9c6:	2508      	movs	r5, #8
 800c9c8:	e7b3      	b.n	800c932 <__hexnan+0x7a>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0dd      	beq.n	800c98c <__hexnan+0xd4>
 800c9d0:	f1c3 0320 	rsb	r3, r3, #32
 800c9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d8:	40da      	lsrs	r2, r3
 800c9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9de:	4013      	ands	r3, r2
 800c9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c9e4:	e7d2      	b.n	800c98c <__hexnan+0xd4>
 800c9e6:	3f04      	subs	r7, #4
 800c9e8:	e7d0      	b.n	800c98c <__hexnan+0xd4>
 800c9ea:	2004      	movs	r0, #4
 800c9ec:	e7d5      	b.n	800c99a <__hexnan+0xe2>
	...

0800c9f0 <_findenv_r>:
 800c9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800ca64 <_findenv_r+0x74>
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	4689      	mov	r9, r1
 800c9fc:	4617      	mov	r7, r2
 800c9fe:	f001 fb67 	bl	800e0d0 <__env_lock>
 800ca02:	f8da 4000 	ldr.w	r4, [sl]
 800ca06:	b134      	cbz	r4, 800ca16 <_findenv_r+0x26>
 800ca08:	464b      	mov	r3, r9
 800ca0a:	4698      	mov	r8, r3
 800ca0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca10:	b13a      	cbz	r2, 800ca22 <_findenv_r+0x32>
 800ca12:	2a3d      	cmp	r2, #61	@ 0x3d
 800ca14:	d1f9      	bne.n	800ca0a <_findenv_r+0x1a>
 800ca16:	4630      	mov	r0, r6
 800ca18:	f001 fb60 	bl	800e0dc <__env_unlock>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca22:	eba8 0809 	sub.w	r8, r8, r9
 800ca26:	46a3      	mov	fp, r4
 800ca28:	f854 0b04 	ldr.w	r0, [r4], #4
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0f2      	beq.n	800ca16 <_findenv_r+0x26>
 800ca30:	4642      	mov	r2, r8
 800ca32:	4649      	mov	r1, r9
 800ca34:	f7fd ff9f 	bl	800a976 <strncmp>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1f4      	bne.n	800ca26 <_findenv_r+0x36>
 800ca3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ca40:	eb03 0508 	add.w	r5, r3, r8
 800ca44:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ca48:	2b3d      	cmp	r3, #61	@ 0x3d
 800ca4a:	d1ec      	bne.n	800ca26 <_findenv_r+0x36>
 800ca4c:	f8da 3000 	ldr.w	r3, [sl]
 800ca50:	ebab 0303 	sub.w	r3, fp, r3
 800ca54:	109b      	asrs	r3, r3, #2
 800ca56:	4630      	mov	r0, r6
 800ca58:	603b      	str	r3, [r7, #0]
 800ca5a:	f001 fb3f 	bl	800e0dc <__env_unlock>
 800ca5e:	1c68      	adds	r0, r5, #1
 800ca60:	e7dd      	b.n	800ca1e <_findenv_r+0x2e>
 800ca62:	bf00      	nop
 800ca64:	20000008 	.word	0x20000008

0800ca68 <_getenv_r>:
 800ca68:	b507      	push	{r0, r1, r2, lr}
 800ca6a:	aa01      	add	r2, sp, #4
 800ca6c:	f7ff ffc0 	bl	800c9f0 <_findenv_r>
 800ca70:	b003      	add	sp, #12
 800ca72:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca76 <__ascii_mbtowc>:
 800ca76:	b082      	sub	sp, #8
 800ca78:	b901      	cbnz	r1, 800ca7c <__ascii_mbtowc+0x6>
 800ca7a:	a901      	add	r1, sp, #4
 800ca7c:	b142      	cbz	r2, 800ca90 <__ascii_mbtowc+0x1a>
 800ca7e:	b14b      	cbz	r3, 800ca94 <__ascii_mbtowc+0x1e>
 800ca80:	7813      	ldrb	r3, [r2, #0]
 800ca82:	600b      	str	r3, [r1, #0]
 800ca84:	7812      	ldrb	r2, [r2, #0]
 800ca86:	1e10      	subs	r0, r2, #0
 800ca88:	bf18      	it	ne
 800ca8a:	2001      	movne	r0, #1
 800ca8c:	b002      	add	sp, #8
 800ca8e:	4770      	bx	lr
 800ca90:	4610      	mov	r0, r2
 800ca92:	e7fb      	b.n	800ca8c <__ascii_mbtowc+0x16>
 800ca94:	f06f 0001 	mvn.w	r0, #1
 800ca98:	e7f8      	b.n	800ca8c <__ascii_mbtowc+0x16>
	...

0800ca9c <_Balloc>:
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	69c6      	ldr	r6, [r0, #28]
 800caa0:	4604      	mov	r4, r0
 800caa2:	460d      	mov	r5, r1
 800caa4:	b976      	cbnz	r6, 800cac4 <_Balloc+0x28>
 800caa6:	2010      	movs	r0, #16
 800caa8:	f7fb ffd8 	bl	8008a5c <malloc>
 800caac:	4602      	mov	r2, r0
 800caae:	61e0      	str	r0, [r4, #28]
 800cab0:	b920      	cbnz	r0, 800cabc <_Balloc+0x20>
 800cab2:	4b18      	ldr	r3, [pc, #96]	@ (800cb14 <_Balloc+0x78>)
 800cab4:	4818      	ldr	r0, [pc, #96]	@ (800cb18 <_Balloc+0x7c>)
 800cab6:	216b      	movs	r1, #107	@ 0x6b
 800cab8:	f001 fad8 	bl	800e06c <__assert_func>
 800cabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cac0:	6006      	str	r6, [r0, #0]
 800cac2:	60c6      	str	r6, [r0, #12]
 800cac4:	69e6      	ldr	r6, [r4, #28]
 800cac6:	68f3      	ldr	r3, [r6, #12]
 800cac8:	b183      	cbz	r3, 800caec <_Balloc+0x50>
 800caca:	69e3      	ldr	r3, [r4, #28]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cad2:	b9b8      	cbnz	r0, 800cb04 <_Balloc+0x68>
 800cad4:	2101      	movs	r1, #1
 800cad6:	fa01 f605 	lsl.w	r6, r1, r5
 800cada:	1d72      	adds	r2, r6, #5
 800cadc:	0092      	lsls	r2, r2, #2
 800cade:	4620      	mov	r0, r4
 800cae0:	f001 fae2 	bl	800e0a8 <_calloc_r>
 800cae4:	b160      	cbz	r0, 800cb00 <_Balloc+0x64>
 800cae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caea:	e00e      	b.n	800cb0a <_Balloc+0x6e>
 800caec:	2221      	movs	r2, #33	@ 0x21
 800caee:	2104      	movs	r1, #4
 800caf0:	4620      	mov	r0, r4
 800caf2:	f001 fad9 	bl	800e0a8 <_calloc_r>
 800caf6:	69e3      	ldr	r3, [r4, #28]
 800caf8:	60f0      	str	r0, [r6, #12]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e4      	bne.n	800caca <_Balloc+0x2e>
 800cb00:	2000      	movs	r0, #0
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	6802      	ldr	r2, [r0, #0]
 800cb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb10:	e7f7      	b.n	800cb02 <_Balloc+0x66>
 800cb12:	bf00      	nop
 800cb14:	0800fdc1 	.word	0x0800fdc1
 800cb18:	0800fea1 	.word	0x0800fea1

0800cb1c <_Bfree>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	69c6      	ldr	r6, [r0, #28]
 800cb20:	4605      	mov	r5, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	b976      	cbnz	r6, 800cb44 <_Bfree+0x28>
 800cb26:	2010      	movs	r0, #16
 800cb28:	f7fb ff98 	bl	8008a5c <malloc>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	61e8      	str	r0, [r5, #28]
 800cb30:	b920      	cbnz	r0, 800cb3c <_Bfree+0x20>
 800cb32:	4b09      	ldr	r3, [pc, #36]	@ (800cb58 <_Bfree+0x3c>)
 800cb34:	4809      	ldr	r0, [pc, #36]	@ (800cb5c <_Bfree+0x40>)
 800cb36:	218f      	movs	r1, #143	@ 0x8f
 800cb38:	f001 fa98 	bl	800e06c <__assert_func>
 800cb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb40:	6006      	str	r6, [r0, #0]
 800cb42:	60c6      	str	r6, [r0, #12]
 800cb44:	b13c      	cbz	r4, 800cb56 <_Bfree+0x3a>
 800cb46:	69eb      	ldr	r3, [r5, #28]
 800cb48:	6862      	ldr	r2, [r4, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb50:	6021      	str	r1, [r4, #0]
 800cb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	0800fdc1 	.word	0x0800fdc1
 800cb5c:	0800fea1 	.word	0x0800fea1

0800cb60 <__multadd>:
 800cb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	690d      	ldr	r5, [r1, #16]
 800cb66:	4607      	mov	r7, r0
 800cb68:	460c      	mov	r4, r1
 800cb6a:	461e      	mov	r6, r3
 800cb6c:	f101 0c14 	add.w	ip, r1, #20
 800cb70:	2000      	movs	r0, #0
 800cb72:	f8dc 3000 	ldr.w	r3, [ip]
 800cb76:	b299      	uxth	r1, r3
 800cb78:	fb02 6101 	mla	r1, r2, r1, r6
 800cb7c:	0c1e      	lsrs	r6, r3, #16
 800cb7e:	0c0b      	lsrs	r3, r1, #16
 800cb80:	fb02 3306 	mla	r3, r2, r6, r3
 800cb84:	b289      	uxth	r1, r1
 800cb86:	3001      	adds	r0, #1
 800cb88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb8c:	4285      	cmp	r5, r0
 800cb8e:	f84c 1b04 	str.w	r1, [ip], #4
 800cb92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb96:	dcec      	bgt.n	800cb72 <__multadd+0x12>
 800cb98:	b30e      	cbz	r6, 800cbde <__multadd+0x7e>
 800cb9a:	68a3      	ldr	r3, [r4, #8]
 800cb9c:	42ab      	cmp	r3, r5
 800cb9e:	dc19      	bgt.n	800cbd4 <__multadd+0x74>
 800cba0:	6861      	ldr	r1, [r4, #4]
 800cba2:	4638      	mov	r0, r7
 800cba4:	3101      	adds	r1, #1
 800cba6:	f7ff ff79 	bl	800ca9c <_Balloc>
 800cbaa:	4680      	mov	r8, r0
 800cbac:	b928      	cbnz	r0, 800cbba <__multadd+0x5a>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe4 <__multadd+0x84>)
 800cbb2:	480d      	ldr	r0, [pc, #52]	@ (800cbe8 <__multadd+0x88>)
 800cbb4:	21ba      	movs	r1, #186	@ 0xba
 800cbb6:	f001 fa59 	bl	800e06c <__assert_func>
 800cbba:	6922      	ldr	r2, [r4, #16]
 800cbbc:	3202      	adds	r2, #2
 800cbbe:	f104 010c 	add.w	r1, r4, #12
 800cbc2:	0092      	lsls	r2, r2, #2
 800cbc4:	300c      	adds	r0, #12
 800cbc6:	f7fe fd1a 	bl	800b5fe <memcpy>
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7ff ffa5 	bl	800cb1c <_Bfree>
 800cbd2:	4644      	mov	r4, r8
 800cbd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbd8:	3501      	adds	r5, #1
 800cbda:	615e      	str	r6, [r3, #20]
 800cbdc:	6125      	str	r5, [r4, #16]
 800cbde:	4620      	mov	r0, r4
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	0800fe30 	.word	0x0800fe30
 800cbe8:	0800fea1 	.word	0x0800fea1

0800cbec <__s2b>:
 800cbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	4615      	mov	r5, r2
 800cbf4:	461f      	mov	r7, r3
 800cbf6:	2209      	movs	r2, #9
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc00:	2100      	movs	r1, #0
 800cc02:	2201      	movs	r2, #1
 800cc04:	429a      	cmp	r2, r3
 800cc06:	db09      	blt.n	800cc1c <__s2b+0x30>
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7ff ff47 	bl	800ca9c <_Balloc>
 800cc0e:	b940      	cbnz	r0, 800cc22 <__s2b+0x36>
 800cc10:	4602      	mov	r2, r0
 800cc12:	4b19      	ldr	r3, [pc, #100]	@ (800cc78 <__s2b+0x8c>)
 800cc14:	4819      	ldr	r0, [pc, #100]	@ (800cc7c <__s2b+0x90>)
 800cc16:	21d3      	movs	r1, #211	@ 0xd3
 800cc18:	f001 fa28 	bl	800e06c <__assert_func>
 800cc1c:	0052      	lsls	r2, r2, #1
 800cc1e:	3101      	adds	r1, #1
 800cc20:	e7f0      	b.n	800cc04 <__s2b+0x18>
 800cc22:	9b08      	ldr	r3, [sp, #32]
 800cc24:	6143      	str	r3, [r0, #20]
 800cc26:	2d09      	cmp	r5, #9
 800cc28:	f04f 0301 	mov.w	r3, #1
 800cc2c:	6103      	str	r3, [r0, #16]
 800cc2e:	dd16      	ble.n	800cc5e <__s2b+0x72>
 800cc30:	f104 0909 	add.w	r9, r4, #9
 800cc34:	46c8      	mov	r8, r9
 800cc36:	442c      	add	r4, r5
 800cc38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	3b30      	subs	r3, #48	@ 0x30
 800cc40:	220a      	movs	r2, #10
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7ff ff8c 	bl	800cb60 <__multadd>
 800cc48:	45a0      	cmp	r8, r4
 800cc4a:	d1f5      	bne.n	800cc38 <__s2b+0x4c>
 800cc4c:	f1a5 0408 	sub.w	r4, r5, #8
 800cc50:	444c      	add	r4, r9
 800cc52:	1b2d      	subs	r5, r5, r4
 800cc54:	1963      	adds	r3, r4, r5
 800cc56:	42bb      	cmp	r3, r7
 800cc58:	db04      	blt.n	800cc64 <__s2b+0x78>
 800cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc5e:	340a      	adds	r4, #10
 800cc60:	2509      	movs	r5, #9
 800cc62:	e7f6      	b.n	800cc52 <__s2b+0x66>
 800cc64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc68:	4601      	mov	r1, r0
 800cc6a:	3b30      	subs	r3, #48	@ 0x30
 800cc6c:	220a      	movs	r2, #10
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ff76 	bl	800cb60 <__multadd>
 800cc74:	e7ee      	b.n	800cc54 <__s2b+0x68>
 800cc76:	bf00      	nop
 800cc78:	0800fe30 	.word	0x0800fe30
 800cc7c:	0800fea1 	.word	0x0800fea1

0800cc80 <__hi0bits>:
 800cc80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc84:	4603      	mov	r3, r0
 800cc86:	bf36      	itet	cc
 800cc88:	0403      	lslcc	r3, r0, #16
 800cc8a:	2000      	movcs	r0, #0
 800cc8c:	2010      	movcc	r0, #16
 800cc8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc92:	bf3c      	itt	cc
 800cc94:	021b      	lslcc	r3, r3, #8
 800cc96:	3008      	addcc	r0, #8
 800cc98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc9c:	bf3c      	itt	cc
 800cc9e:	011b      	lslcc	r3, r3, #4
 800cca0:	3004      	addcc	r0, #4
 800cca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cca6:	bf3c      	itt	cc
 800cca8:	009b      	lslcc	r3, r3, #2
 800ccaa:	3002      	addcc	r0, #2
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	db05      	blt.n	800ccbc <__hi0bits+0x3c>
 800ccb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccb4:	f100 0001 	add.w	r0, r0, #1
 800ccb8:	bf08      	it	eq
 800ccba:	2020      	moveq	r0, #32
 800ccbc:	4770      	bx	lr

0800ccbe <__lo0bits>:
 800ccbe:	6803      	ldr	r3, [r0, #0]
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	f013 0007 	ands.w	r0, r3, #7
 800ccc6:	d00b      	beq.n	800cce0 <__lo0bits+0x22>
 800ccc8:	07d9      	lsls	r1, r3, #31
 800ccca:	d421      	bmi.n	800cd10 <__lo0bits+0x52>
 800cccc:	0798      	lsls	r0, r3, #30
 800ccce:	bf49      	itett	mi
 800ccd0:	085b      	lsrmi	r3, r3, #1
 800ccd2:	089b      	lsrpl	r3, r3, #2
 800ccd4:	2001      	movmi	r0, #1
 800ccd6:	6013      	strmi	r3, [r2, #0]
 800ccd8:	bf5c      	itt	pl
 800ccda:	6013      	strpl	r3, [r2, #0]
 800ccdc:	2002      	movpl	r0, #2
 800ccde:	4770      	bx	lr
 800cce0:	b299      	uxth	r1, r3
 800cce2:	b909      	cbnz	r1, 800cce8 <__lo0bits+0x2a>
 800cce4:	0c1b      	lsrs	r3, r3, #16
 800cce6:	2010      	movs	r0, #16
 800cce8:	b2d9      	uxtb	r1, r3
 800ccea:	b909      	cbnz	r1, 800ccf0 <__lo0bits+0x32>
 800ccec:	3008      	adds	r0, #8
 800ccee:	0a1b      	lsrs	r3, r3, #8
 800ccf0:	0719      	lsls	r1, r3, #28
 800ccf2:	bf04      	itt	eq
 800ccf4:	091b      	lsreq	r3, r3, #4
 800ccf6:	3004      	addeq	r0, #4
 800ccf8:	0799      	lsls	r1, r3, #30
 800ccfa:	bf04      	itt	eq
 800ccfc:	089b      	lsreq	r3, r3, #2
 800ccfe:	3002      	addeq	r0, #2
 800cd00:	07d9      	lsls	r1, r3, #31
 800cd02:	d403      	bmi.n	800cd0c <__lo0bits+0x4e>
 800cd04:	085b      	lsrs	r3, r3, #1
 800cd06:	f100 0001 	add.w	r0, r0, #1
 800cd0a:	d003      	beq.n	800cd14 <__lo0bits+0x56>
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	4770      	bx	lr
 800cd10:	2000      	movs	r0, #0
 800cd12:	4770      	bx	lr
 800cd14:	2020      	movs	r0, #32
 800cd16:	4770      	bx	lr

0800cd18 <__i2b>:
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	f7ff febd 	bl	800ca9c <_Balloc>
 800cd22:	4602      	mov	r2, r0
 800cd24:	b928      	cbnz	r0, 800cd32 <__i2b+0x1a>
 800cd26:	4b05      	ldr	r3, [pc, #20]	@ (800cd3c <__i2b+0x24>)
 800cd28:	4805      	ldr	r0, [pc, #20]	@ (800cd40 <__i2b+0x28>)
 800cd2a:	f240 1145 	movw	r1, #325	@ 0x145
 800cd2e:	f001 f99d 	bl	800e06c <__assert_func>
 800cd32:	2301      	movs	r3, #1
 800cd34:	6144      	str	r4, [r0, #20]
 800cd36:	6103      	str	r3, [r0, #16]
 800cd38:	bd10      	pop	{r4, pc}
 800cd3a:	bf00      	nop
 800cd3c:	0800fe30 	.word	0x0800fe30
 800cd40:	0800fea1 	.word	0x0800fea1

0800cd44 <__multiply>:
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	4614      	mov	r4, r2
 800cd4a:	690a      	ldr	r2, [r1, #16]
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	bfa8      	it	ge
 800cd52:	4623      	movge	r3, r4
 800cd54:	460f      	mov	r7, r1
 800cd56:	bfa4      	itt	ge
 800cd58:	460c      	movge	r4, r1
 800cd5a:	461f      	movge	r7, r3
 800cd5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd64:	68a3      	ldr	r3, [r4, #8]
 800cd66:	6861      	ldr	r1, [r4, #4]
 800cd68:	eb0a 0609 	add.w	r6, sl, r9
 800cd6c:	42b3      	cmp	r3, r6
 800cd6e:	b085      	sub	sp, #20
 800cd70:	bfb8      	it	lt
 800cd72:	3101      	addlt	r1, #1
 800cd74:	f7ff fe92 	bl	800ca9c <_Balloc>
 800cd78:	b930      	cbnz	r0, 800cd88 <__multiply+0x44>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4b44      	ldr	r3, [pc, #272]	@ (800ce90 <__multiply+0x14c>)
 800cd7e:	4845      	ldr	r0, [pc, #276]	@ (800ce94 <__multiply+0x150>)
 800cd80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd84:	f001 f972 	bl	800e06c <__assert_func>
 800cd88:	f100 0514 	add.w	r5, r0, #20
 800cd8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd90:	462b      	mov	r3, r5
 800cd92:	2200      	movs	r2, #0
 800cd94:	4543      	cmp	r3, r8
 800cd96:	d321      	bcc.n	800cddc <__multiply+0x98>
 800cd98:	f107 0114 	add.w	r1, r7, #20
 800cd9c:	f104 0214 	add.w	r2, r4, #20
 800cda0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cda4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cda8:	9302      	str	r3, [sp, #8]
 800cdaa:	1b13      	subs	r3, r2, r4
 800cdac:	3b15      	subs	r3, #21
 800cdae:	f023 0303 	bic.w	r3, r3, #3
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	f104 0715 	add.w	r7, r4, #21
 800cdb8:	42ba      	cmp	r2, r7
 800cdba:	bf38      	it	cc
 800cdbc:	2304      	movcc	r3, #4
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	9103      	str	r1, [sp, #12]
 800cdc4:	428b      	cmp	r3, r1
 800cdc6:	d80c      	bhi.n	800cde2 <__multiply+0x9e>
 800cdc8:	2e00      	cmp	r6, #0
 800cdca:	dd03      	ble.n	800cdd4 <__multiply+0x90>
 800cdcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d05b      	beq.n	800ce8c <__multiply+0x148>
 800cdd4:	6106      	str	r6, [r0, #16]
 800cdd6:	b005      	add	sp, #20
 800cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cddc:	f843 2b04 	str.w	r2, [r3], #4
 800cde0:	e7d8      	b.n	800cd94 <__multiply+0x50>
 800cde2:	f8b1 a000 	ldrh.w	sl, [r1]
 800cde6:	f1ba 0f00 	cmp.w	sl, #0
 800cdea:	d024      	beq.n	800ce36 <__multiply+0xf2>
 800cdec:	f104 0e14 	add.w	lr, r4, #20
 800cdf0:	46a9      	mov	r9, r5
 800cdf2:	f04f 0c00 	mov.w	ip, #0
 800cdf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdfa:	f8d9 3000 	ldr.w	r3, [r9]
 800cdfe:	fa1f fb87 	uxth.w	fp, r7
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce0c:	f8d9 7000 	ldr.w	r7, [r9]
 800ce10:	4463      	add	r3, ip
 800ce12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce16:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce24:	4572      	cmp	r2, lr
 800ce26:	f849 3b04 	str.w	r3, [r9], #4
 800ce2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce2e:	d8e2      	bhi.n	800cdf6 <__multiply+0xb2>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	f845 c003 	str.w	ip, [r5, r3]
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce3c:	3104      	adds	r1, #4
 800ce3e:	f1b9 0f00 	cmp.w	r9, #0
 800ce42:	d021      	beq.n	800ce88 <__multiply+0x144>
 800ce44:	682b      	ldr	r3, [r5, #0]
 800ce46:	f104 0c14 	add.w	ip, r4, #20
 800ce4a:	46ae      	mov	lr, r5
 800ce4c:	f04f 0a00 	mov.w	sl, #0
 800ce50:	f8bc b000 	ldrh.w	fp, [ip]
 800ce54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce58:	fb09 770b 	mla	r7, r9, fp, r7
 800ce5c:	4457      	add	r7, sl
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce64:	f84e 3b04 	str.w	r3, [lr], #4
 800ce68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce70:	f8be 3000 	ldrh.w	r3, [lr]
 800ce74:	fb09 330a 	mla	r3, r9, sl, r3
 800ce78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce7c:	4562      	cmp	r2, ip
 800ce7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce82:	d8e5      	bhi.n	800ce50 <__multiply+0x10c>
 800ce84:	9f01      	ldr	r7, [sp, #4]
 800ce86:	51eb      	str	r3, [r5, r7]
 800ce88:	3504      	adds	r5, #4
 800ce8a:	e799      	b.n	800cdc0 <__multiply+0x7c>
 800ce8c:	3e01      	subs	r6, #1
 800ce8e:	e79b      	b.n	800cdc8 <__multiply+0x84>
 800ce90:	0800fe30 	.word	0x0800fe30
 800ce94:	0800fea1 	.word	0x0800fea1

0800ce98 <__pow5mult>:
 800ce98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce9c:	4615      	mov	r5, r2
 800ce9e:	f012 0203 	ands.w	r2, r2, #3
 800cea2:	4607      	mov	r7, r0
 800cea4:	460e      	mov	r6, r1
 800cea6:	d007      	beq.n	800ceb8 <__pow5mult+0x20>
 800cea8:	4c25      	ldr	r4, [pc, #148]	@ (800cf40 <__pow5mult+0xa8>)
 800ceaa:	3a01      	subs	r2, #1
 800ceac:	2300      	movs	r3, #0
 800ceae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceb2:	f7ff fe55 	bl	800cb60 <__multadd>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	10ad      	asrs	r5, r5, #2
 800ceba:	d03d      	beq.n	800cf38 <__pow5mult+0xa0>
 800cebc:	69fc      	ldr	r4, [r7, #28]
 800cebe:	b97c      	cbnz	r4, 800cee0 <__pow5mult+0x48>
 800cec0:	2010      	movs	r0, #16
 800cec2:	f7fb fdcb 	bl	8008a5c <malloc>
 800cec6:	4602      	mov	r2, r0
 800cec8:	61f8      	str	r0, [r7, #28]
 800ceca:	b928      	cbnz	r0, 800ced8 <__pow5mult+0x40>
 800cecc:	4b1d      	ldr	r3, [pc, #116]	@ (800cf44 <__pow5mult+0xac>)
 800cece:	481e      	ldr	r0, [pc, #120]	@ (800cf48 <__pow5mult+0xb0>)
 800ced0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ced4:	f001 f8ca 	bl	800e06c <__assert_func>
 800ced8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cedc:	6004      	str	r4, [r0, #0]
 800cede:	60c4      	str	r4, [r0, #12]
 800cee0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cee8:	b94c      	cbnz	r4, 800cefe <__pow5mult+0x66>
 800ceea:	f240 2171 	movw	r1, #625	@ 0x271
 800ceee:	4638      	mov	r0, r7
 800cef0:	f7ff ff12 	bl	800cd18 <__i2b>
 800cef4:	2300      	movs	r3, #0
 800cef6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cefa:	4604      	mov	r4, r0
 800cefc:	6003      	str	r3, [r0, #0]
 800cefe:	f04f 0900 	mov.w	r9, #0
 800cf02:	07eb      	lsls	r3, r5, #31
 800cf04:	d50a      	bpl.n	800cf1c <__pow5mult+0x84>
 800cf06:	4631      	mov	r1, r6
 800cf08:	4622      	mov	r2, r4
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	f7ff ff1a 	bl	800cd44 <__multiply>
 800cf10:	4631      	mov	r1, r6
 800cf12:	4680      	mov	r8, r0
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff fe01 	bl	800cb1c <_Bfree>
 800cf1a:	4646      	mov	r6, r8
 800cf1c:	106d      	asrs	r5, r5, #1
 800cf1e:	d00b      	beq.n	800cf38 <__pow5mult+0xa0>
 800cf20:	6820      	ldr	r0, [r4, #0]
 800cf22:	b938      	cbnz	r0, 800cf34 <__pow5mult+0x9c>
 800cf24:	4622      	mov	r2, r4
 800cf26:	4621      	mov	r1, r4
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff0b 	bl	800cd44 <__multiply>
 800cf2e:	6020      	str	r0, [r4, #0]
 800cf30:	f8c0 9000 	str.w	r9, [r0]
 800cf34:	4604      	mov	r4, r0
 800cf36:	e7e4      	b.n	800cf02 <__pow5mult+0x6a>
 800cf38:	4630      	mov	r0, r6
 800cf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf3e:	bf00      	nop
 800cf40:	0800fefc 	.word	0x0800fefc
 800cf44:	0800fdc1 	.word	0x0800fdc1
 800cf48:	0800fea1 	.word	0x0800fea1

0800cf4c <__lshift>:
 800cf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf50:	460c      	mov	r4, r1
 800cf52:	6849      	ldr	r1, [r1, #4]
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	4607      	mov	r7, r0
 800cf5e:	4691      	mov	r9, r2
 800cf60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf64:	f108 0601 	add.w	r6, r8, #1
 800cf68:	42b3      	cmp	r3, r6
 800cf6a:	db0b      	blt.n	800cf84 <__lshift+0x38>
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f7ff fd95 	bl	800ca9c <_Balloc>
 800cf72:	4605      	mov	r5, r0
 800cf74:	b948      	cbnz	r0, 800cf8a <__lshift+0x3e>
 800cf76:	4602      	mov	r2, r0
 800cf78:	4b28      	ldr	r3, [pc, #160]	@ (800d01c <__lshift+0xd0>)
 800cf7a:	4829      	ldr	r0, [pc, #164]	@ (800d020 <__lshift+0xd4>)
 800cf7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf80:	f001 f874 	bl	800e06c <__assert_func>
 800cf84:	3101      	adds	r1, #1
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	e7ee      	b.n	800cf68 <__lshift+0x1c>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	f100 0114 	add.w	r1, r0, #20
 800cf90:	f100 0210 	add.w	r2, r0, #16
 800cf94:	4618      	mov	r0, r3
 800cf96:	4553      	cmp	r3, sl
 800cf98:	db33      	blt.n	800d002 <__lshift+0xb6>
 800cf9a:	6920      	ldr	r0, [r4, #16]
 800cf9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfa0:	f104 0314 	add.w	r3, r4, #20
 800cfa4:	f019 091f 	ands.w	r9, r9, #31
 800cfa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfb0:	d02b      	beq.n	800d00a <__lshift+0xbe>
 800cfb2:	f1c9 0e20 	rsb	lr, r9, #32
 800cfb6:	468a      	mov	sl, r1
 800cfb8:	2200      	movs	r2, #0
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	fa00 f009 	lsl.w	r0, r0, r9
 800cfc0:	4310      	orrs	r0, r2
 800cfc2:	f84a 0b04 	str.w	r0, [sl], #4
 800cfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfca:	459c      	cmp	ip, r3
 800cfcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfd0:	d8f3      	bhi.n	800cfba <__lshift+0x6e>
 800cfd2:	ebac 0304 	sub.w	r3, ip, r4
 800cfd6:	3b15      	subs	r3, #21
 800cfd8:	f023 0303 	bic.w	r3, r3, #3
 800cfdc:	3304      	adds	r3, #4
 800cfde:	f104 0015 	add.w	r0, r4, #21
 800cfe2:	4584      	cmp	ip, r0
 800cfe4:	bf38      	it	cc
 800cfe6:	2304      	movcc	r3, #4
 800cfe8:	50ca      	str	r2, [r1, r3]
 800cfea:	b10a      	cbz	r2, 800cff0 <__lshift+0xa4>
 800cfec:	f108 0602 	add.w	r6, r8, #2
 800cff0:	3e01      	subs	r6, #1
 800cff2:	4638      	mov	r0, r7
 800cff4:	612e      	str	r6, [r5, #16]
 800cff6:	4621      	mov	r1, r4
 800cff8:	f7ff fd90 	bl	800cb1c <_Bfree>
 800cffc:	4628      	mov	r0, r5
 800cffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d002:	f842 0f04 	str.w	r0, [r2, #4]!
 800d006:	3301      	adds	r3, #1
 800d008:	e7c5      	b.n	800cf96 <__lshift+0x4a>
 800d00a:	3904      	subs	r1, #4
 800d00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d010:	f841 2f04 	str.w	r2, [r1, #4]!
 800d014:	459c      	cmp	ip, r3
 800d016:	d8f9      	bhi.n	800d00c <__lshift+0xc0>
 800d018:	e7ea      	b.n	800cff0 <__lshift+0xa4>
 800d01a:	bf00      	nop
 800d01c:	0800fe30 	.word	0x0800fe30
 800d020:	0800fea1 	.word	0x0800fea1

0800d024 <__mcmp>:
 800d024:	690a      	ldr	r2, [r1, #16]
 800d026:	4603      	mov	r3, r0
 800d028:	6900      	ldr	r0, [r0, #16]
 800d02a:	1a80      	subs	r0, r0, r2
 800d02c:	b530      	push	{r4, r5, lr}
 800d02e:	d10e      	bne.n	800d04e <__mcmp+0x2a>
 800d030:	3314      	adds	r3, #20
 800d032:	3114      	adds	r1, #20
 800d034:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d038:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d03c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d044:	4295      	cmp	r5, r2
 800d046:	d003      	beq.n	800d050 <__mcmp+0x2c>
 800d048:	d205      	bcs.n	800d056 <__mcmp+0x32>
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295
 800d04e:	bd30      	pop	{r4, r5, pc}
 800d050:	42a3      	cmp	r3, r4
 800d052:	d3f3      	bcc.n	800d03c <__mcmp+0x18>
 800d054:	e7fb      	b.n	800d04e <__mcmp+0x2a>
 800d056:	2001      	movs	r0, #1
 800d058:	e7f9      	b.n	800d04e <__mcmp+0x2a>
	...

0800d05c <__mdiff>:
 800d05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	4689      	mov	r9, r1
 800d062:	4606      	mov	r6, r0
 800d064:	4611      	mov	r1, r2
 800d066:	4648      	mov	r0, r9
 800d068:	4614      	mov	r4, r2
 800d06a:	f7ff ffdb 	bl	800d024 <__mcmp>
 800d06e:	1e05      	subs	r5, r0, #0
 800d070:	d112      	bne.n	800d098 <__mdiff+0x3c>
 800d072:	4629      	mov	r1, r5
 800d074:	4630      	mov	r0, r6
 800d076:	f7ff fd11 	bl	800ca9c <_Balloc>
 800d07a:	4602      	mov	r2, r0
 800d07c:	b928      	cbnz	r0, 800d08a <__mdiff+0x2e>
 800d07e:	4b3f      	ldr	r3, [pc, #252]	@ (800d17c <__mdiff+0x120>)
 800d080:	f240 2137 	movw	r1, #567	@ 0x237
 800d084:	483e      	ldr	r0, [pc, #248]	@ (800d180 <__mdiff+0x124>)
 800d086:	f000 fff1 	bl	800e06c <__assert_func>
 800d08a:	2301      	movs	r3, #1
 800d08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d090:	4610      	mov	r0, r2
 800d092:	b003      	add	sp, #12
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	bfbc      	itt	lt
 800d09a:	464b      	movlt	r3, r9
 800d09c:	46a1      	movlt	r9, r4
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0a4:	bfba      	itte	lt
 800d0a6:	461c      	movlt	r4, r3
 800d0a8:	2501      	movlt	r5, #1
 800d0aa:	2500      	movge	r5, #0
 800d0ac:	f7ff fcf6 	bl	800ca9c <_Balloc>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	b918      	cbnz	r0, 800d0bc <__mdiff+0x60>
 800d0b4:	4b31      	ldr	r3, [pc, #196]	@ (800d17c <__mdiff+0x120>)
 800d0b6:	f240 2145 	movw	r1, #581	@ 0x245
 800d0ba:	e7e3      	b.n	800d084 <__mdiff+0x28>
 800d0bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0c0:	6926      	ldr	r6, [r4, #16]
 800d0c2:	60c5      	str	r5, [r0, #12]
 800d0c4:	f109 0310 	add.w	r3, r9, #16
 800d0c8:	f109 0514 	add.w	r5, r9, #20
 800d0cc:	f104 0e14 	add.w	lr, r4, #20
 800d0d0:	f100 0b14 	add.w	fp, r0, #20
 800d0d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	46d9      	mov	r9, fp
 800d0e0:	f04f 0c00 	mov.w	ip, #0
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	fa1f f38a 	uxth.w	r3, sl
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	b283      	uxth	r3, r0
 800d0f8:	1acb      	subs	r3, r1, r3
 800d0fa:	0c00      	lsrs	r0, r0, #16
 800d0fc:	4463      	add	r3, ip
 800d0fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d102:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d106:	b29b      	uxth	r3, r3
 800d108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d10c:	4576      	cmp	r6, lr
 800d10e:	f849 3b04 	str.w	r3, [r9], #4
 800d112:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d116:	d8e5      	bhi.n	800d0e4 <__mdiff+0x88>
 800d118:	1b33      	subs	r3, r6, r4
 800d11a:	3b15      	subs	r3, #21
 800d11c:	f023 0303 	bic.w	r3, r3, #3
 800d120:	3415      	adds	r4, #21
 800d122:	3304      	adds	r3, #4
 800d124:	42a6      	cmp	r6, r4
 800d126:	bf38      	it	cc
 800d128:	2304      	movcc	r3, #4
 800d12a:	441d      	add	r5, r3
 800d12c:	445b      	add	r3, fp
 800d12e:	461e      	mov	r6, r3
 800d130:	462c      	mov	r4, r5
 800d132:	4544      	cmp	r4, r8
 800d134:	d30e      	bcc.n	800d154 <__mdiff+0xf8>
 800d136:	f108 0103 	add.w	r1, r8, #3
 800d13a:	1b49      	subs	r1, r1, r5
 800d13c:	f021 0103 	bic.w	r1, r1, #3
 800d140:	3d03      	subs	r5, #3
 800d142:	45a8      	cmp	r8, r5
 800d144:	bf38      	it	cc
 800d146:	2100      	movcc	r1, #0
 800d148:	440b      	add	r3, r1
 800d14a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d14e:	b191      	cbz	r1, 800d176 <__mdiff+0x11a>
 800d150:	6117      	str	r7, [r2, #16]
 800d152:	e79d      	b.n	800d090 <__mdiff+0x34>
 800d154:	f854 1b04 	ldr.w	r1, [r4], #4
 800d158:	46e6      	mov	lr, ip
 800d15a:	0c08      	lsrs	r0, r1, #16
 800d15c:	fa1c fc81 	uxtah	ip, ip, r1
 800d160:	4471      	add	r1, lr
 800d162:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d166:	b289      	uxth	r1, r1
 800d168:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d16c:	f846 1b04 	str.w	r1, [r6], #4
 800d170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d174:	e7dd      	b.n	800d132 <__mdiff+0xd6>
 800d176:	3f01      	subs	r7, #1
 800d178:	e7e7      	b.n	800d14a <__mdiff+0xee>
 800d17a:	bf00      	nop
 800d17c:	0800fe30 	.word	0x0800fe30
 800d180:	0800fea1 	.word	0x0800fea1

0800d184 <__ulp>:
 800d184:	b082      	sub	sp, #8
 800d186:	ed8d 0b00 	vstr	d0, [sp]
 800d18a:	9a01      	ldr	r2, [sp, #4]
 800d18c:	4b0f      	ldr	r3, [pc, #60]	@ (800d1cc <__ulp+0x48>)
 800d18e:	4013      	ands	r3, r2
 800d190:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d194:	2b00      	cmp	r3, #0
 800d196:	dc08      	bgt.n	800d1aa <__ulp+0x26>
 800d198:	425b      	negs	r3, r3
 800d19a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d19e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1a2:	da04      	bge.n	800d1ae <__ulp+0x2a>
 800d1a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1a8:	4113      	asrs	r3, r2
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	e008      	b.n	800d1c0 <__ulp+0x3c>
 800d1ae:	f1a2 0314 	sub.w	r3, r2, #20
 800d1b2:	2b1e      	cmp	r3, #30
 800d1b4:	bfda      	itte	le
 800d1b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d1ba:	40da      	lsrle	r2, r3
 800d1bc:	2201      	movgt	r2, #1
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4610      	mov	r0, r2
 800d1c4:	ec41 0b10 	vmov	d0, r0, r1
 800d1c8:	b002      	add	sp, #8
 800d1ca:	4770      	bx	lr
 800d1cc:	7ff00000 	.word	0x7ff00000

0800d1d0 <__b2d>:
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	6906      	ldr	r6, [r0, #16]
 800d1d6:	f100 0814 	add.w	r8, r0, #20
 800d1da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d1de:	1f37      	subs	r7, r6, #4
 800d1e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	f7ff fd4b 	bl	800cc80 <__hi0bits>
 800d1ea:	f1c0 0320 	rsb	r3, r0, #32
 800d1ee:	280a      	cmp	r0, #10
 800d1f0:	600b      	str	r3, [r1, #0]
 800d1f2:	491b      	ldr	r1, [pc, #108]	@ (800d260 <__b2d+0x90>)
 800d1f4:	dc15      	bgt.n	800d222 <__b2d+0x52>
 800d1f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800d1fe:	45b8      	cmp	r8, r7
 800d200:	ea43 0501 	orr.w	r5, r3, r1
 800d204:	bf34      	ite	cc
 800d206:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d20a:	2300      	movcs	r3, #0
 800d20c:	3015      	adds	r0, #21
 800d20e:	fa02 f000 	lsl.w	r0, r2, r0
 800d212:	fa23 f30c 	lsr.w	r3, r3, ip
 800d216:	4303      	orrs	r3, r0
 800d218:	461c      	mov	r4, r3
 800d21a:	ec45 4b10 	vmov	d0, r4, r5
 800d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d222:	45b8      	cmp	r8, r7
 800d224:	bf3a      	itte	cc
 800d226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d22a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d22e:	2300      	movcs	r3, #0
 800d230:	380b      	subs	r0, #11
 800d232:	d012      	beq.n	800d25a <__b2d+0x8a>
 800d234:	f1c0 0120 	rsb	r1, r0, #32
 800d238:	fa23 f401 	lsr.w	r4, r3, r1
 800d23c:	4082      	lsls	r2, r0
 800d23e:	4322      	orrs	r2, r4
 800d240:	4547      	cmp	r7, r8
 800d242:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d246:	bf8c      	ite	hi
 800d248:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d24c:	2200      	movls	r2, #0
 800d24e:	4083      	lsls	r3, r0
 800d250:	40ca      	lsrs	r2, r1
 800d252:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d256:	4313      	orrs	r3, r2
 800d258:	e7de      	b.n	800d218 <__b2d+0x48>
 800d25a:	ea42 0501 	orr.w	r5, r2, r1
 800d25e:	e7db      	b.n	800d218 <__b2d+0x48>
 800d260:	3ff00000 	.word	0x3ff00000

0800d264 <__d2b>:
 800d264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d268:	460f      	mov	r7, r1
 800d26a:	2101      	movs	r1, #1
 800d26c:	ec59 8b10 	vmov	r8, r9, d0
 800d270:	4616      	mov	r6, r2
 800d272:	f7ff fc13 	bl	800ca9c <_Balloc>
 800d276:	4604      	mov	r4, r0
 800d278:	b930      	cbnz	r0, 800d288 <__d2b+0x24>
 800d27a:	4602      	mov	r2, r0
 800d27c:	4b23      	ldr	r3, [pc, #140]	@ (800d30c <__d2b+0xa8>)
 800d27e:	4824      	ldr	r0, [pc, #144]	@ (800d310 <__d2b+0xac>)
 800d280:	f240 310f 	movw	r1, #783	@ 0x30f
 800d284:	f000 fef2 	bl	800e06c <__assert_func>
 800d288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d28c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d290:	b10d      	cbz	r5, 800d296 <__d2b+0x32>
 800d292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	f1b8 0300 	subs.w	r3, r8, #0
 800d29c:	d023      	beq.n	800d2e6 <__d2b+0x82>
 800d29e:	4668      	mov	r0, sp
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	f7ff fd0c 	bl	800ccbe <__lo0bits>
 800d2a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2aa:	b1d0      	cbz	r0, 800d2e2 <__d2b+0x7e>
 800d2ac:	f1c0 0320 	rsb	r3, r0, #32
 800d2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	40c2      	lsrs	r2, r0
 800d2b8:	6163      	str	r3, [r4, #20]
 800d2ba:	9201      	str	r2, [sp, #4]
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	61a3      	str	r3, [r4, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	bf0c      	ite	eq
 800d2c4:	2201      	moveq	r2, #1
 800d2c6:	2202      	movne	r2, #2
 800d2c8:	6122      	str	r2, [r4, #16]
 800d2ca:	b1a5      	cbz	r5, 800d2f6 <__d2b+0x92>
 800d2cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2d0:	4405      	add	r5, r0
 800d2d2:	603d      	str	r5, [r7, #0]
 800d2d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2d8:	6030      	str	r0, [r6, #0]
 800d2da:	4620      	mov	r0, r4
 800d2dc:	b003      	add	sp, #12
 800d2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2e2:	6161      	str	r1, [r4, #20]
 800d2e4:	e7ea      	b.n	800d2bc <__d2b+0x58>
 800d2e6:	a801      	add	r0, sp, #4
 800d2e8:	f7ff fce9 	bl	800ccbe <__lo0bits>
 800d2ec:	9b01      	ldr	r3, [sp, #4]
 800d2ee:	6163      	str	r3, [r4, #20]
 800d2f0:	3020      	adds	r0, #32
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	e7e8      	b.n	800d2c8 <__d2b+0x64>
 800d2f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2fe:	6038      	str	r0, [r7, #0]
 800d300:	6918      	ldr	r0, [r3, #16]
 800d302:	f7ff fcbd 	bl	800cc80 <__hi0bits>
 800d306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d30a:	e7e5      	b.n	800d2d8 <__d2b+0x74>
 800d30c:	0800fe30 	.word	0x0800fe30
 800d310:	0800fea1 	.word	0x0800fea1

0800d314 <__ratio>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	b085      	sub	sp, #20
 800d31a:	e9cd 1000 	strd	r1, r0, [sp]
 800d31e:	a902      	add	r1, sp, #8
 800d320:	f7ff ff56 	bl	800d1d0 <__b2d>
 800d324:	9800      	ldr	r0, [sp, #0]
 800d326:	a903      	add	r1, sp, #12
 800d328:	ec55 4b10 	vmov	r4, r5, d0
 800d32c:	f7ff ff50 	bl	800d1d0 <__b2d>
 800d330:	9b01      	ldr	r3, [sp, #4]
 800d332:	6919      	ldr	r1, [r3, #16]
 800d334:	9b00      	ldr	r3, [sp, #0]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	1ac9      	subs	r1, r1, r3
 800d33a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d33e:	1a9b      	subs	r3, r3, r2
 800d340:	ec5b ab10 	vmov	sl, fp, d0
 800d344:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bfce      	itee	gt
 800d34c:	462a      	movgt	r2, r5
 800d34e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d352:	465a      	movle	r2, fp
 800d354:	462f      	mov	r7, r5
 800d356:	46d9      	mov	r9, fp
 800d358:	bfcc      	ite	gt
 800d35a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d35e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d362:	464b      	mov	r3, r9
 800d364:	4652      	mov	r2, sl
 800d366:	4620      	mov	r0, r4
 800d368:	4639      	mov	r1, r7
 800d36a:	f7f3 fa7f 	bl	800086c <__aeabi_ddiv>
 800d36e:	ec41 0b10 	vmov	d0, r0, r1
 800d372:	b005      	add	sp, #20
 800d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d378 <__copybits>:
 800d378:	3901      	subs	r1, #1
 800d37a:	b570      	push	{r4, r5, r6, lr}
 800d37c:	1149      	asrs	r1, r1, #5
 800d37e:	6914      	ldr	r4, [r2, #16]
 800d380:	3101      	adds	r1, #1
 800d382:	f102 0314 	add.w	r3, r2, #20
 800d386:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d38a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d38e:	1f05      	subs	r5, r0, #4
 800d390:	42a3      	cmp	r3, r4
 800d392:	d30c      	bcc.n	800d3ae <__copybits+0x36>
 800d394:	1aa3      	subs	r3, r4, r2
 800d396:	3b11      	subs	r3, #17
 800d398:	f023 0303 	bic.w	r3, r3, #3
 800d39c:	3211      	adds	r2, #17
 800d39e:	42a2      	cmp	r2, r4
 800d3a0:	bf88      	it	hi
 800d3a2:	2300      	movhi	r3, #0
 800d3a4:	4418      	add	r0, r3
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4288      	cmp	r0, r1
 800d3aa:	d305      	bcc.n	800d3b8 <__copybits+0x40>
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3b6:	e7eb      	b.n	800d390 <__copybits+0x18>
 800d3b8:	f840 3b04 	str.w	r3, [r0], #4
 800d3bc:	e7f4      	b.n	800d3a8 <__copybits+0x30>

0800d3be <__any_on>:
 800d3be:	f100 0214 	add.w	r2, r0, #20
 800d3c2:	6900      	ldr	r0, [r0, #16]
 800d3c4:	114b      	asrs	r3, r1, #5
 800d3c6:	4298      	cmp	r0, r3
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	db11      	blt.n	800d3f0 <__any_on+0x32>
 800d3cc:	dd0a      	ble.n	800d3e4 <__any_on+0x26>
 800d3ce:	f011 011f 	ands.w	r1, r1, #31
 800d3d2:	d007      	beq.n	800d3e4 <__any_on+0x26>
 800d3d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3d8:	fa24 f001 	lsr.w	r0, r4, r1
 800d3dc:	fa00 f101 	lsl.w	r1, r0, r1
 800d3e0:	428c      	cmp	r4, r1
 800d3e2:	d10b      	bne.n	800d3fc <__any_on+0x3e>
 800d3e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d803      	bhi.n	800d3f4 <__any_on+0x36>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	bd10      	pop	{r4, pc}
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	e7f7      	b.n	800d3e4 <__any_on+0x26>
 800d3f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	d0f5      	beq.n	800d3e8 <__any_on+0x2a>
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	e7f6      	b.n	800d3ee <__any_on+0x30>

0800d400 <_strtoul_l.constprop.0>:
 800d400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d404:	4e34      	ldr	r6, [pc, #208]	@ (800d4d8 <_strtoul_l.constprop.0+0xd8>)
 800d406:	4686      	mov	lr, r0
 800d408:	460d      	mov	r5, r1
 800d40a:	4628      	mov	r0, r5
 800d40c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d410:	5d37      	ldrb	r7, [r6, r4]
 800d412:	f017 0708 	ands.w	r7, r7, #8
 800d416:	d1f8      	bne.n	800d40a <_strtoul_l.constprop.0+0xa>
 800d418:	2c2d      	cmp	r4, #45	@ 0x2d
 800d41a:	d12f      	bne.n	800d47c <_strtoul_l.constprop.0+0x7c>
 800d41c:	782c      	ldrb	r4, [r5, #0]
 800d41e:	2701      	movs	r7, #1
 800d420:	1c85      	adds	r5, r0, #2
 800d422:	f033 0010 	bics.w	r0, r3, #16
 800d426:	d109      	bne.n	800d43c <_strtoul_l.constprop.0+0x3c>
 800d428:	2c30      	cmp	r4, #48	@ 0x30
 800d42a:	d12c      	bne.n	800d486 <_strtoul_l.constprop.0+0x86>
 800d42c:	7828      	ldrb	r0, [r5, #0]
 800d42e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d432:	2858      	cmp	r0, #88	@ 0x58
 800d434:	d127      	bne.n	800d486 <_strtoul_l.constprop.0+0x86>
 800d436:	786c      	ldrb	r4, [r5, #1]
 800d438:	2310      	movs	r3, #16
 800d43a:	3502      	adds	r5, #2
 800d43c:	f04f 38ff 	mov.w	r8, #4294967295
 800d440:	2600      	movs	r6, #0
 800d442:	fbb8 f8f3 	udiv	r8, r8, r3
 800d446:	fb03 f908 	mul.w	r9, r3, r8
 800d44a:	ea6f 0909 	mvn.w	r9, r9
 800d44e:	4630      	mov	r0, r6
 800d450:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d454:	f1bc 0f09 	cmp.w	ip, #9
 800d458:	d81c      	bhi.n	800d494 <_strtoul_l.constprop.0+0x94>
 800d45a:	4664      	mov	r4, ip
 800d45c:	42a3      	cmp	r3, r4
 800d45e:	dd2a      	ble.n	800d4b6 <_strtoul_l.constprop.0+0xb6>
 800d460:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d464:	d007      	beq.n	800d476 <_strtoul_l.constprop.0+0x76>
 800d466:	4580      	cmp	r8, r0
 800d468:	d322      	bcc.n	800d4b0 <_strtoul_l.constprop.0+0xb0>
 800d46a:	d101      	bne.n	800d470 <_strtoul_l.constprop.0+0x70>
 800d46c:	45a1      	cmp	r9, r4
 800d46e:	db1f      	blt.n	800d4b0 <_strtoul_l.constprop.0+0xb0>
 800d470:	fb00 4003 	mla	r0, r0, r3, r4
 800d474:	2601      	movs	r6, #1
 800d476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d47a:	e7e9      	b.n	800d450 <_strtoul_l.constprop.0+0x50>
 800d47c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d47e:	bf04      	itt	eq
 800d480:	782c      	ldrbeq	r4, [r5, #0]
 800d482:	1c85      	addeq	r5, r0, #2
 800d484:	e7cd      	b.n	800d422 <_strtoul_l.constprop.0+0x22>
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1d8      	bne.n	800d43c <_strtoul_l.constprop.0+0x3c>
 800d48a:	2c30      	cmp	r4, #48	@ 0x30
 800d48c:	bf0c      	ite	eq
 800d48e:	2308      	moveq	r3, #8
 800d490:	230a      	movne	r3, #10
 800d492:	e7d3      	b.n	800d43c <_strtoul_l.constprop.0+0x3c>
 800d494:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d498:	f1bc 0f19 	cmp.w	ip, #25
 800d49c:	d801      	bhi.n	800d4a2 <_strtoul_l.constprop.0+0xa2>
 800d49e:	3c37      	subs	r4, #55	@ 0x37
 800d4a0:	e7dc      	b.n	800d45c <_strtoul_l.constprop.0+0x5c>
 800d4a2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d4a6:	f1bc 0f19 	cmp.w	ip, #25
 800d4aa:	d804      	bhi.n	800d4b6 <_strtoul_l.constprop.0+0xb6>
 800d4ac:	3c57      	subs	r4, #87	@ 0x57
 800d4ae:	e7d5      	b.n	800d45c <_strtoul_l.constprop.0+0x5c>
 800d4b0:	f04f 36ff 	mov.w	r6, #4294967295
 800d4b4:	e7df      	b.n	800d476 <_strtoul_l.constprop.0+0x76>
 800d4b6:	1c73      	adds	r3, r6, #1
 800d4b8:	d106      	bne.n	800d4c8 <_strtoul_l.constprop.0+0xc8>
 800d4ba:	2322      	movs	r3, #34	@ 0x22
 800d4bc:	f8ce 3000 	str.w	r3, [lr]
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	b932      	cbnz	r2, 800d4d2 <_strtoul_l.constprop.0+0xd2>
 800d4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c8:	b107      	cbz	r7, 800d4cc <_strtoul_l.constprop.0+0xcc>
 800d4ca:	4240      	negs	r0, r0
 800d4cc:	2a00      	cmp	r2, #0
 800d4ce:	d0f9      	beq.n	800d4c4 <_strtoul_l.constprop.0+0xc4>
 800d4d0:	b106      	cbz	r6, 800d4d4 <_strtoul_l.constprop.0+0xd4>
 800d4d2:	1e69      	subs	r1, r5, #1
 800d4d4:	6011      	str	r1, [r2, #0]
 800d4d6:	e7f5      	b.n	800d4c4 <_strtoul_l.constprop.0+0xc4>
 800d4d8:	0800fbc9 	.word	0x0800fbc9

0800d4dc <_strtoul_r>:
 800d4dc:	f7ff bf90 	b.w	800d400 <_strtoul_l.constprop.0>

0800d4e0 <strtoul>:
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	460a      	mov	r2, r1
 800d4e4:	4601      	mov	r1, r0
 800d4e6:	4802      	ldr	r0, [pc, #8]	@ (800d4f0 <strtoul+0x10>)
 800d4e8:	6800      	ldr	r0, [r0, #0]
 800d4ea:	f7ff bf89 	b.w	800d400 <_strtoul_l.constprop.0>
 800d4ee:	bf00      	nop
 800d4f0:	2000019c 	.word	0x2000019c

0800d4f4 <__ascii_wctomb>:
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	4608      	mov	r0, r1
 800d4f8:	b141      	cbz	r1, 800d50c <__ascii_wctomb+0x18>
 800d4fa:	2aff      	cmp	r2, #255	@ 0xff
 800d4fc:	d904      	bls.n	800d508 <__ascii_wctomb+0x14>
 800d4fe:	228a      	movs	r2, #138	@ 0x8a
 800d500:	601a      	str	r2, [r3, #0]
 800d502:	f04f 30ff 	mov.w	r0, #4294967295
 800d506:	4770      	bx	lr
 800d508:	700a      	strb	r2, [r1, #0]
 800d50a:	2001      	movs	r0, #1
 800d50c:	4770      	bx	lr

0800d50e <__ssputs_r>:
 800d50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d512:	688e      	ldr	r6, [r1, #8]
 800d514:	461f      	mov	r7, r3
 800d516:	42be      	cmp	r6, r7
 800d518:	680b      	ldr	r3, [r1, #0]
 800d51a:	4682      	mov	sl, r0
 800d51c:	460c      	mov	r4, r1
 800d51e:	4690      	mov	r8, r2
 800d520:	d82d      	bhi.n	800d57e <__ssputs_r+0x70>
 800d522:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d526:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d52a:	d026      	beq.n	800d57a <__ssputs_r+0x6c>
 800d52c:	6965      	ldr	r5, [r4, #20]
 800d52e:	6909      	ldr	r1, [r1, #16]
 800d530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d534:	eba3 0901 	sub.w	r9, r3, r1
 800d538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d53c:	1c7b      	adds	r3, r7, #1
 800d53e:	444b      	add	r3, r9
 800d540:	106d      	asrs	r5, r5, #1
 800d542:	429d      	cmp	r5, r3
 800d544:	bf38      	it	cc
 800d546:	461d      	movcc	r5, r3
 800d548:	0553      	lsls	r3, r2, #21
 800d54a:	d527      	bpl.n	800d59c <__ssputs_r+0x8e>
 800d54c:	4629      	mov	r1, r5
 800d54e:	f7fb fab7 	bl	8008ac0 <_malloc_r>
 800d552:	4606      	mov	r6, r0
 800d554:	b360      	cbz	r0, 800d5b0 <__ssputs_r+0xa2>
 800d556:	6921      	ldr	r1, [r4, #16]
 800d558:	464a      	mov	r2, r9
 800d55a:	f7fe f850 	bl	800b5fe <memcpy>
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	6126      	str	r6, [r4, #16]
 800d56c:	6165      	str	r5, [r4, #20]
 800d56e:	444e      	add	r6, r9
 800d570:	eba5 0509 	sub.w	r5, r5, r9
 800d574:	6026      	str	r6, [r4, #0]
 800d576:	60a5      	str	r5, [r4, #8]
 800d578:	463e      	mov	r6, r7
 800d57a:	42be      	cmp	r6, r7
 800d57c:	d900      	bls.n	800d580 <__ssputs_r+0x72>
 800d57e:	463e      	mov	r6, r7
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	4632      	mov	r2, r6
 800d584:	4641      	mov	r1, r8
 800d586:	f000 fd52 	bl	800e02e <memmove>
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	1b9b      	subs	r3, r3, r6
 800d58e:	60a3      	str	r3, [r4, #8]
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	4433      	add	r3, r6
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	2000      	movs	r0, #0
 800d598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59c:	462a      	mov	r2, r5
 800d59e:	f000 fda3 	bl	800e0e8 <_realloc_r>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d1e0      	bne.n	800d56a <__ssputs_r+0x5c>
 800d5a8:	6921      	ldr	r1, [r4, #16]
 800d5aa:	4650      	mov	r0, sl
 800d5ac:	f7fe fe9c 	bl	800c2e8 <_free_r>
 800d5b0:	230c      	movs	r3, #12
 800d5b2:	f8ca 3000 	str.w	r3, [sl]
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c2:	e7e9      	b.n	800d598 <__ssputs_r+0x8a>

0800d5c4 <_svfiprintf_r>:
 800d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c8:	4698      	mov	r8, r3
 800d5ca:	898b      	ldrh	r3, [r1, #12]
 800d5cc:	061b      	lsls	r3, r3, #24
 800d5ce:	b09d      	sub	sp, #116	@ 0x74
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	d510      	bpl.n	800d5fa <_svfiprintf_r+0x36>
 800d5d8:	690b      	ldr	r3, [r1, #16]
 800d5da:	b973      	cbnz	r3, 800d5fa <_svfiprintf_r+0x36>
 800d5dc:	2140      	movs	r1, #64	@ 0x40
 800d5de:	f7fb fa6f 	bl	8008ac0 <_malloc_r>
 800d5e2:	6028      	str	r0, [r5, #0]
 800d5e4:	6128      	str	r0, [r5, #16]
 800d5e6:	b930      	cbnz	r0, 800d5f6 <_svfiprintf_r+0x32>
 800d5e8:	230c      	movs	r3, #12
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	b01d      	add	sp, #116	@ 0x74
 800d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f6:	2340      	movs	r3, #64	@ 0x40
 800d5f8:	616b      	str	r3, [r5, #20]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fe:	2320      	movs	r3, #32
 800d600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d604:	f8cd 800c 	str.w	r8, [sp, #12]
 800d608:	2330      	movs	r3, #48	@ 0x30
 800d60a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7a8 <_svfiprintf_r+0x1e4>
 800d60e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d612:	f04f 0901 	mov.w	r9, #1
 800d616:	4623      	mov	r3, r4
 800d618:	469a      	mov	sl, r3
 800d61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61e:	b10a      	cbz	r2, 800d624 <_svfiprintf_r+0x60>
 800d620:	2a25      	cmp	r2, #37	@ 0x25
 800d622:	d1f9      	bne.n	800d618 <_svfiprintf_r+0x54>
 800d624:	ebba 0b04 	subs.w	fp, sl, r4
 800d628:	d00b      	beq.n	800d642 <_svfiprintf_r+0x7e>
 800d62a:	465b      	mov	r3, fp
 800d62c:	4622      	mov	r2, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	4638      	mov	r0, r7
 800d632:	f7ff ff6c 	bl	800d50e <__ssputs_r>
 800d636:	3001      	adds	r0, #1
 800d638:	f000 80a7 	beq.w	800d78a <_svfiprintf_r+0x1c6>
 800d63c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d63e:	445a      	add	r2, fp
 800d640:	9209      	str	r2, [sp, #36]	@ 0x24
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 809f 	beq.w	800d78a <_svfiprintf_r+0x1c6>
 800d64c:	2300      	movs	r3, #0
 800d64e:	f04f 32ff 	mov.w	r2, #4294967295
 800d652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d656:	f10a 0a01 	add.w	sl, sl, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9307      	str	r3, [sp, #28]
 800d65e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d662:	931a      	str	r3, [sp, #104]	@ 0x68
 800d664:	4654      	mov	r4, sl
 800d666:	2205      	movs	r2, #5
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	484e      	ldr	r0, [pc, #312]	@ (800d7a8 <_svfiprintf_r+0x1e4>)
 800d66e:	f7f2 fdbf 	bl	80001f0 <memchr>
 800d672:	9a04      	ldr	r2, [sp, #16]
 800d674:	b9d8      	cbnz	r0, 800d6ae <_svfiprintf_r+0xea>
 800d676:	06d0      	lsls	r0, r2, #27
 800d678:	bf44      	itt	mi
 800d67a:	2320      	movmi	r3, #32
 800d67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d680:	0711      	lsls	r1, r2, #28
 800d682:	bf44      	itt	mi
 800d684:	232b      	movmi	r3, #43	@ 0x2b
 800d686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d68a:	f89a 3000 	ldrb.w	r3, [sl]
 800d68e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d690:	d015      	beq.n	800d6be <_svfiprintf_r+0xfa>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	4654      	mov	r4, sl
 800d696:	2000      	movs	r0, #0
 800d698:	f04f 0c0a 	mov.w	ip, #10
 800d69c:	4621      	mov	r1, r4
 800d69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a2:	3b30      	subs	r3, #48	@ 0x30
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d94b      	bls.n	800d740 <_svfiprintf_r+0x17c>
 800d6a8:	b1b0      	cbz	r0, 800d6d8 <_svfiprintf_r+0x114>
 800d6aa:	9207      	str	r2, [sp, #28]
 800d6ac:	e014      	b.n	800d6d8 <_svfiprintf_r+0x114>
 800d6ae:	eba0 0308 	sub.w	r3, r0, r8
 800d6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	46a2      	mov	sl, r4
 800d6bc:	e7d2      	b.n	800d664 <_svfiprintf_r+0xa0>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d19      	adds	r1, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9103      	str	r1, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfbb      	ittet	lt
 800d6ca:	425b      	neglt	r3, r3
 800d6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6d0:	9307      	strge	r3, [sp, #28]
 800d6d2:	9307      	strlt	r3, [sp, #28]
 800d6d4:	bfb8      	it	lt
 800d6d6:	9204      	strlt	r2, [sp, #16]
 800d6d8:	7823      	ldrb	r3, [r4, #0]
 800d6da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6dc:	d10a      	bne.n	800d6f4 <_svfiprintf_r+0x130>
 800d6de:	7863      	ldrb	r3, [r4, #1]
 800d6e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6e2:	d132      	bne.n	800d74a <_svfiprintf_r+0x186>
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	1d1a      	adds	r2, r3, #4
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	9203      	str	r2, [sp, #12]
 800d6ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6f0:	3402      	adds	r4, #2
 800d6f2:	9305      	str	r3, [sp, #20]
 800d6f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7b8 <_svfiprintf_r+0x1f4>
 800d6f8:	7821      	ldrb	r1, [r4, #0]
 800d6fa:	2203      	movs	r2, #3
 800d6fc:	4650      	mov	r0, sl
 800d6fe:	f7f2 fd77 	bl	80001f0 <memchr>
 800d702:	b138      	cbz	r0, 800d714 <_svfiprintf_r+0x150>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	eba0 000a 	sub.w	r0, r0, sl
 800d70a:	2240      	movs	r2, #64	@ 0x40
 800d70c:	4082      	lsls	r2, r0
 800d70e:	4313      	orrs	r3, r2
 800d710:	3401      	adds	r4, #1
 800d712:	9304      	str	r3, [sp, #16]
 800d714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d718:	4824      	ldr	r0, [pc, #144]	@ (800d7ac <_svfiprintf_r+0x1e8>)
 800d71a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d71e:	2206      	movs	r2, #6
 800d720:	f7f2 fd66 	bl	80001f0 <memchr>
 800d724:	2800      	cmp	r0, #0
 800d726:	d036      	beq.n	800d796 <_svfiprintf_r+0x1d2>
 800d728:	4b21      	ldr	r3, [pc, #132]	@ (800d7b0 <_svfiprintf_r+0x1ec>)
 800d72a:	bb1b      	cbnz	r3, 800d774 <_svfiprintf_r+0x1b0>
 800d72c:	9b03      	ldr	r3, [sp, #12]
 800d72e:	3307      	adds	r3, #7
 800d730:	f023 0307 	bic.w	r3, r3, #7
 800d734:	3308      	adds	r3, #8
 800d736:	9303      	str	r3, [sp, #12]
 800d738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d73a:	4433      	add	r3, r6
 800d73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73e:	e76a      	b.n	800d616 <_svfiprintf_r+0x52>
 800d740:	fb0c 3202 	mla	r2, ip, r2, r3
 800d744:	460c      	mov	r4, r1
 800d746:	2001      	movs	r0, #1
 800d748:	e7a8      	b.n	800d69c <_svfiprintf_r+0xd8>
 800d74a:	2300      	movs	r3, #0
 800d74c:	3401      	adds	r4, #1
 800d74e:	9305      	str	r3, [sp, #20]
 800d750:	4619      	mov	r1, r3
 800d752:	f04f 0c0a 	mov.w	ip, #10
 800d756:	4620      	mov	r0, r4
 800d758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d75c:	3a30      	subs	r2, #48	@ 0x30
 800d75e:	2a09      	cmp	r2, #9
 800d760:	d903      	bls.n	800d76a <_svfiprintf_r+0x1a6>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0c6      	beq.n	800d6f4 <_svfiprintf_r+0x130>
 800d766:	9105      	str	r1, [sp, #20]
 800d768:	e7c4      	b.n	800d6f4 <_svfiprintf_r+0x130>
 800d76a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d76e:	4604      	mov	r4, r0
 800d770:	2301      	movs	r3, #1
 800d772:	e7f0      	b.n	800d756 <_svfiprintf_r+0x192>
 800d774:	ab03      	add	r3, sp, #12
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	462a      	mov	r2, r5
 800d77a:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b4 <_svfiprintf_r+0x1f0>)
 800d77c:	a904      	add	r1, sp, #16
 800d77e:	4638      	mov	r0, r7
 800d780:	f7fc f95a 	bl	8009a38 <_printf_float>
 800d784:	1c42      	adds	r2, r0, #1
 800d786:	4606      	mov	r6, r0
 800d788:	d1d6      	bne.n	800d738 <_svfiprintf_r+0x174>
 800d78a:	89ab      	ldrh	r3, [r5, #12]
 800d78c:	065b      	lsls	r3, r3, #25
 800d78e:	f53f af2d 	bmi.w	800d5ec <_svfiprintf_r+0x28>
 800d792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d794:	e72c      	b.n	800d5f0 <_svfiprintf_r+0x2c>
 800d796:	ab03      	add	r3, sp, #12
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	462a      	mov	r2, r5
 800d79c:	4b05      	ldr	r3, [pc, #20]	@ (800d7b4 <_svfiprintf_r+0x1f0>)
 800d79e:	a904      	add	r1, sp, #16
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	f7fc fbe1 	bl	8009f68 <_printf_i>
 800d7a6:	e7ed      	b.n	800d784 <_svfiprintf_r+0x1c0>
 800d7a8:	0800fff8 	.word	0x0800fff8
 800d7ac:	08010002 	.word	0x08010002
 800d7b0:	08009a39 	.word	0x08009a39
 800d7b4:	0800d50f 	.word	0x0800d50f
 800d7b8:	0800fffe 	.word	0x0800fffe

0800d7bc <_sungetc_r>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	1c4b      	adds	r3, r1, #1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	d103      	bne.n	800d7cc <_sungetc_r+0x10>
 800d7c4:	f04f 35ff 	mov.w	r5, #4294967295
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	8993      	ldrh	r3, [r2, #12]
 800d7ce:	f023 0320 	bic.w	r3, r3, #32
 800d7d2:	8193      	strh	r3, [r2, #12]
 800d7d4:	6853      	ldr	r3, [r2, #4]
 800d7d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d7d8:	b2cd      	uxtb	r5, r1
 800d7da:	b18a      	cbz	r2, 800d800 <_sungetc_r+0x44>
 800d7dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	dd08      	ble.n	800d7f4 <_sungetc_r+0x38>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	6022      	str	r2, [r4, #0]
 800d7e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	6063      	str	r3, [r4, #4]
 800d7f2:	e7e9      	b.n	800d7c8 <_sungetc_r+0xc>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f000 fbe0 	bl	800dfba <__submore>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d0f1      	beq.n	800d7e2 <_sungetc_r+0x26>
 800d7fe:	e7e1      	b.n	800d7c4 <_sungetc_r+0x8>
 800d800:	6921      	ldr	r1, [r4, #16]
 800d802:	6822      	ldr	r2, [r4, #0]
 800d804:	b141      	cbz	r1, 800d818 <_sungetc_r+0x5c>
 800d806:	4291      	cmp	r1, r2
 800d808:	d206      	bcs.n	800d818 <_sungetc_r+0x5c>
 800d80a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d80e:	42a9      	cmp	r1, r5
 800d810:	d102      	bne.n	800d818 <_sungetc_r+0x5c>
 800d812:	3a01      	subs	r2, #1
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	e7ea      	b.n	800d7ee <_sungetc_r+0x32>
 800d818:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d81c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d820:	6363      	str	r3, [r4, #52]	@ 0x34
 800d822:	2303      	movs	r3, #3
 800d824:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d826:	4623      	mov	r3, r4
 800d828:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	2301      	movs	r3, #1
 800d830:	e7de      	b.n	800d7f0 <_sungetc_r+0x34>

0800d832 <__ssrefill_r>:
 800d832:	b510      	push	{r4, lr}
 800d834:	460c      	mov	r4, r1
 800d836:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d838:	b169      	cbz	r1, 800d856 <__ssrefill_r+0x24>
 800d83a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d83e:	4299      	cmp	r1, r3
 800d840:	d001      	beq.n	800d846 <__ssrefill_r+0x14>
 800d842:	f7fe fd51 	bl	800c2e8 <_free_r>
 800d846:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d848:	6063      	str	r3, [r4, #4]
 800d84a:	2000      	movs	r0, #0
 800d84c:	6360      	str	r0, [r4, #52]	@ 0x34
 800d84e:	b113      	cbz	r3, 800d856 <__ssrefill_r+0x24>
 800d850:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	bd10      	pop	{r4, pc}
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	6063      	str	r3, [r4, #4]
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	f043 0320 	orr.w	r3, r3, #32
 800d864:	81a3      	strh	r3, [r4, #12]
 800d866:	f04f 30ff 	mov.w	r0, #4294967295
 800d86a:	e7f3      	b.n	800d854 <__ssrefill_r+0x22>

0800d86c <__ssvfiscanf_r>:
 800d86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d870:	460c      	mov	r4, r1
 800d872:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d876:	2100      	movs	r1, #0
 800d878:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d87c:	49a5      	ldr	r1, [pc, #660]	@ (800db14 <__ssvfiscanf_r+0x2a8>)
 800d87e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d880:	f10d 0804 	add.w	r8, sp, #4
 800d884:	49a4      	ldr	r1, [pc, #656]	@ (800db18 <__ssvfiscanf_r+0x2ac>)
 800d886:	4fa5      	ldr	r7, [pc, #660]	@ (800db1c <__ssvfiscanf_r+0x2b0>)
 800d888:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d88c:	4606      	mov	r6, r0
 800d88e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	7813      	ldrb	r3, [r2, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 8158 	beq.w	800db4a <__ssvfiscanf_r+0x2de>
 800d89a:	5cf9      	ldrb	r1, [r7, r3]
 800d89c:	f011 0108 	ands.w	r1, r1, #8
 800d8a0:	f102 0501 	add.w	r5, r2, #1
 800d8a4:	d019      	beq.n	800d8da <__ssvfiscanf_r+0x6e>
 800d8a6:	6863      	ldr	r3, [r4, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dd0f      	ble.n	800d8cc <__ssvfiscanf_r+0x60>
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	781a      	ldrb	r2, [r3, #0]
 800d8b0:	5cba      	ldrb	r2, [r7, r2]
 800d8b2:	0712      	lsls	r2, r2, #28
 800d8b4:	d401      	bmi.n	800d8ba <__ssvfiscanf_r+0x4e>
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	e7eb      	b.n	800d892 <__ssvfiscanf_r+0x26>
 800d8ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d8bc:	3201      	adds	r2, #1
 800d8be:	9245      	str	r2, [sp, #276]	@ 0x114
 800d8c0:	6862      	ldr	r2, [r4, #4]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	3a01      	subs	r2, #1
 800d8c6:	6062      	str	r2, [r4, #4]
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	e7ec      	b.n	800d8a6 <__ssvfiscanf_r+0x3a>
 800d8cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	4798      	blx	r3
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d0e9      	beq.n	800d8ac <__ssvfiscanf_r+0x40>
 800d8d8:	e7ed      	b.n	800d8b6 <__ssvfiscanf_r+0x4a>
 800d8da:	2b25      	cmp	r3, #37	@ 0x25
 800d8dc:	d012      	beq.n	800d904 <__ssvfiscanf_r+0x98>
 800d8de:	4699      	mov	r9, r3
 800d8e0:	6863      	ldr	r3, [r4, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f340 8093 	ble.w	800da0e <__ssvfiscanf_r+0x1a2>
 800d8e8:	6822      	ldr	r2, [r4, #0]
 800d8ea:	7813      	ldrb	r3, [r2, #0]
 800d8ec:	454b      	cmp	r3, r9
 800d8ee:	f040 812c 	bne.w	800db4a <__ssvfiscanf_r+0x2de>
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	6063      	str	r3, [r4, #4]
 800d8f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d8fa:	3201      	adds	r2, #1
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	6022      	str	r2, [r4, #0]
 800d900:	9345      	str	r3, [sp, #276]	@ 0x114
 800d902:	e7d8      	b.n	800d8b6 <__ssvfiscanf_r+0x4a>
 800d904:	9141      	str	r1, [sp, #260]	@ 0x104
 800d906:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d908:	7853      	ldrb	r3, [r2, #1]
 800d90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d90c:	bf02      	ittt	eq
 800d90e:	2310      	moveq	r3, #16
 800d910:	1c95      	addeq	r5, r2, #2
 800d912:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d914:	220a      	movs	r2, #10
 800d916:	46a9      	mov	r9, r5
 800d918:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d91c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d920:	2b09      	cmp	r3, #9
 800d922:	d91e      	bls.n	800d962 <__ssvfiscanf_r+0xf6>
 800d924:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800db20 <__ssvfiscanf_r+0x2b4>
 800d928:	2203      	movs	r2, #3
 800d92a:	4650      	mov	r0, sl
 800d92c:	f7f2 fc60 	bl	80001f0 <memchr>
 800d930:	b138      	cbz	r0, 800d942 <__ssvfiscanf_r+0xd6>
 800d932:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d934:	eba0 000a 	sub.w	r0, r0, sl
 800d938:	2301      	movs	r3, #1
 800d93a:	4083      	lsls	r3, r0
 800d93c:	4313      	orrs	r3, r2
 800d93e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d940:	464d      	mov	r5, r9
 800d942:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d946:	2b78      	cmp	r3, #120	@ 0x78
 800d948:	d806      	bhi.n	800d958 <__ssvfiscanf_r+0xec>
 800d94a:	2b57      	cmp	r3, #87	@ 0x57
 800d94c:	d810      	bhi.n	800d970 <__ssvfiscanf_r+0x104>
 800d94e:	2b25      	cmp	r3, #37	@ 0x25
 800d950:	d0c5      	beq.n	800d8de <__ssvfiscanf_r+0x72>
 800d952:	d857      	bhi.n	800da04 <__ssvfiscanf_r+0x198>
 800d954:	2b00      	cmp	r3, #0
 800d956:	d065      	beq.n	800da24 <__ssvfiscanf_r+0x1b8>
 800d958:	2303      	movs	r3, #3
 800d95a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d95c:	230a      	movs	r3, #10
 800d95e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d960:	e078      	b.n	800da54 <__ssvfiscanf_r+0x1e8>
 800d962:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d964:	fb02 1103 	mla	r1, r2, r3, r1
 800d968:	3930      	subs	r1, #48	@ 0x30
 800d96a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d96c:	464d      	mov	r5, r9
 800d96e:	e7d2      	b.n	800d916 <__ssvfiscanf_r+0xaa>
 800d970:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d974:	2a20      	cmp	r2, #32
 800d976:	d8ef      	bhi.n	800d958 <__ssvfiscanf_r+0xec>
 800d978:	a101      	add	r1, pc, #4	@ (adr r1, 800d980 <__ssvfiscanf_r+0x114>)
 800d97a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d97e:	bf00      	nop
 800d980:	0800da33 	.word	0x0800da33
 800d984:	0800d959 	.word	0x0800d959
 800d988:	0800d959 	.word	0x0800d959
 800d98c:	0800da8d 	.word	0x0800da8d
 800d990:	0800d959 	.word	0x0800d959
 800d994:	0800d959 	.word	0x0800d959
 800d998:	0800d959 	.word	0x0800d959
 800d99c:	0800d959 	.word	0x0800d959
 800d9a0:	0800d959 	.word	0x0800d959
 800d9a4:	0800d959 	.word	0x0800d959
 800d9a8:	0800d959 	.word	0x0800d959
 800d9ac:	0800daa3 	.word	0x0800daa3
 800d9b0:	0800da89 	.word	0x0800da89
 800d9b4:	0800da0b 	.word	0x0800da0b
 800d9b8:	0800da0b 	.word	0x0800da0b
 800d9bc:	0800da0b 	.word	0x0800da0b
 800d9c0:	0800d959 	.word	0x0800d959
 800d9c4:	0800da45 	.word	0x0800da45
 800d9c8:	0800d959 	.word	0x0800d959
 800d9cc:	0800d959 	.word	0x0800d959
 800d9d0:	0800d959 	.word	0x0800d959
 800d9d4:	0800d959 	.word	0x0800d959
 800d9d8:	0800dab3 	.word	0x0800dab3
 800d9dc:	0800da4d 	.word	0x0800da4d
 800d9e0:	0800da2b 	.word	0x0800da2b
 800d9e4:	0800d959 	.word	0x0800d959
 800d9e8:	0800d959 	.word	0x0800d959
 800d9ec:	0800daaf 	.word	0x0800daaf
 800d9f0:	0800d959 	.word	0x0800d959
 800d9f4:	0800da89 	.word	0x0800da89
 800d9f8:	0800d959 	.word	0x0800d959
 800d9fc:	0800d959 	.word	0x0800d959
 800da00:	0800da33 	.word	0x0800da33
 800da04:	3b45      	subs	r3, #69	@ 0x45
 800da06:	2b02      	cmp	r3, #2
 800da08:	d8a6      	bhi.n	800d958 <__ssvfiscanf_r+0xec>
 800da0a:	2305      	movs	r3, #5
 800da0c:	e021      	b.n	800da52 <__ssvfiscanf_r+0x1e6>
 800da0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da10:	4621      	mov	r1, r4
 800da12:	4630      	mov	r0, r6
 800da14:	4798      	blx	r3
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f af66 	beq.w	800d8e8 <__ssvfiscanf_r+0x7c>
 800da1c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800da1e:	2800      	cmp	r0, #0
 800da20:	f040 808b 	bne.w	800db3a <__ssvfiscanf_r+0x2ce>
 800da24:	f04f 30ff 	mov.w	r0, #4294967295
 800da28:	e08b      	b.n	800db42 <__ssvfiscanf_r+0x2d6>
 800da2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da2c:	f042 0220 	orr.w	r2, r2, #32
 800da30:	9241      	str	r2, [sp, #260]	@ 0x104
 800da32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da38:	9241      	str	r2, [sp, #260]	@ 0x104
 800da3a:	2210      	movs	r2, #16
 800da3c:	2b6e      	cmp	r3, #110	@ 0x6e
 800da3e:	9242      	str	r2, [sp, #264]	@ 0x108
 800da40:	d902      	bls.n	800da48 <__ssvfiscanf_r+0x1dc>
 800da42:	e005      	b.n	800da50 <__ssvfiscanf_r+0x1e4>
 800da44:	2300      	movs	r3, #0
 800da46:	9342      	str	r3, [sp, #264]	@ 0x108
 800da48:	2303      	movs	r3, #3
 800da4a:	e002      	b.n	800da52 <__ssvfiscanf_r+0x1e6>
 800da4c:	2308      	movs	r3, #8
 800da4e:	9342      	str	r3, [sp, #264]	@ 0x108
 800da50:	2304      	movs	r3, #4
 800da52:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da54:	6863      	ldr	r3, [r4, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	dd39      	ble.n	800dace <__ssvfiscanf_r+0x262>
 800da5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da5c:	0659      	lsls	r1, r3, #25
 800da5e:	d404      	bmi.n	800da6a <__ssvfiscanf_r+0x1fe>
 800da60:	6823      	ldr	r3, [r4, #0]
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	5cba      	ldrb	r2, [r7, r2]
 800da66:	0712      	lsls	r2, r2, #28
 800da68:	d438      	bmi.n	800dadc <__ssvfiscanf_r+0x270>
 800da6a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	dc47      	bgt.n	800db00 <__ssvfiscanf_r+0x294>
 800da70:	466b      	mov	r3, sp
 800da72:	4622      	mov	r2, r4
 800da74:	a941      	add	r1, sp, #260	@ 0x104
 800da76:	4630      	mov	r0, r6
 800da78:	f000 f86c 	bl	800db54 <_scanf_chars>
 800da7c:	2801      	cmp	r0, #1
 800da7e:	d064      	beq.n	800db4a <__ssvfiscanf_r+0x2de>
 800da80:	2802      	cmp	r0, #2
 800da82:	f47f af18 	bne.w	800d8b6 <__ssvfiscanf_r+0x4a>
 800da86:	e7c9      	b.n	800da1c <__ssvfiscanf_r+0x1b0>
 800da88:	220a      	movs	r2, #10
 800da8a:	e7d7      	b.n	800da3c <__ssvfiscanf_r+0x1d0>
 800da8c:	4629      	mov	r1, r5
 800da8e:	4640      	mov	r0, r8
 800da90:	f000 fa5a 	bl	800df48 <__sccl>
 800da94:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da9a:	9341      	str	r3, [sp, #260]	@ 0x104
 800da9c:	4605      	mov	r5, r0
 800da9e:	2301      	movs	r3, #1
 800daa0:	e7d7      	b.n	800da52 <__ssvfiscanf_r+0x1e6>
 800daa2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800daa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daa8:	9341      	str	r3, [sp, #260]	@ 0x104
 800daaa:	2300      	movs	r3, #0
 800daac:	e7d1      	b.n	800da52 <__ssvfiscanf_r+0x1e6>
 800daae:	2302      	movs	r3, #2
 800dab0:	e7cf      	b.n	800da52 <__ssvfiscanf_r+0x1e6>
 800dab2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800dab4:	06c3      	lsls	r3, r0, #27
 800dab6:	f53f aefe 	bmi.w	800d8b6 <__ssvfiscanf_r+0x4a>
 800daba:	9b00      	ldr	r3, [sp, #0]
 800dabc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dabe:	1d19      	adds	r1, r3, #4
 800dac0:	9100      	str	r1, [sp, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	07c0      	lsls	r0, r0, #31
 800dac6:	bf4c      	ite	mi
 800dac8:	801a      	strhmi	r2, [r3, #0]
 800daca:	601a      	strpl	r2, [r3, #0]
 800dacc:	e6f3      	b.n	800d8b6 <__ssvfiscanf_r+0x4a>
 800dace:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dad0:	4621      	mov	r1, r4
 800dad2:	4630      	mov	r0, r6
 800dad4:	4798      	blx	r3
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d0bf      	beq.n	800da5a <__ssvfiscanf_r+0x1ee>
 800dada:	e79f      	b.n	800da1c <__ssvfiscanf_r+0x1b0>
 800dadc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dade:	3201      	adds	r2, #1
 800dae0:	9245      	str	r2, [sp, #276]	@ 0x114
 800dae2:	6862      	ldr	r2, [r4, #4]
 800dae4:	3a01      	subs	r2, #1
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	6062      	str	r2, [r4, #4]
 800daea:	dd02      	ble.n	800daf2 <__ssvfiscanf_r+0x286>
 800daec:	3301      	adds	r3, #1
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	e7b6      	b.n	800da60 <__ssvfiscanf_r+0x1f4>
 800daf2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800daf4:	4621      	mov	r1, r4
 800daf6:	4630      	mov	r0, r6
 800daf8:	4798      	blx	r3
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0b0      	beq.n	800da60 <__ssvfiscanf_r+0x1f4>
 800dafe:	e78d      	b.n	800da1c <__ssvfiscanf_r+0x1b0>
 800db00:	2b04      	cmp	r3, #4
 800db02:	dc0f      	bgt.n	800db24 <__ssvfiscanf_r+0x2b8>
 800db04:	466b      	mov	r3, sp
 800db06:	4622      	mov	r2, r4
 800db08:	a941      	add	r1, sp, #260	@ 0x104
 800db0a:	4630      	mov	r0, r6
 800db0c:	f000 f87c 	bl	800dc08 <_scanf_i>
 800db10:	e7b4      	b.n	800da7c <__ssvfiscanf_r+0x210>
 800db12:	bf00      	nop
 800db14:	0800d7bd 	.word	0x0800d7bd
 800db18:	0800d833 	.word	0x0800d833
 800db1c:	0800fbc9 	.word	0x0800fbc9
 800db20:	0800fffe 	.word	0x0800fffe
 800db24:	4b0a      	ldr	r3, [pc, #40]	@ (800db50 <__ssvfiscanf_r+0x2e4>)
 800db26:	2b00      	cmp	r3, #0
 800db28:	f43f aec5 	beq.w	800d8b6 <__ssvfiscanf_r+0x4a>
 800db2c:	466b      	mov	r3, sp
 800db2e:	4622      	mov	r2, r4
 800db30:	a941      	add	r1, sp, #260	@ 0x104
 800db32:	4630      	mov	r0, r6
 800db34:	f7fc fb38 	bl	800a1a8 <_scanf_float>
 800db38:	e7a0      	b.n	800da7c <__ssvfiscanf_r+0x210>
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	065b      	lsls	r3, r3, #25
 800db3e:	f53f af71 	bmi.w	800da24 <__ssvfiscanf_r+0x1b8>
 800db42:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800db46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800db4c:	e7f9      	b.n	800db42 <__ssvfiscanf_r+0x2d6>
 800db4e:	bf00      	nop
 800db50:	0800a1a9 	.word	0x0800a1a9

0800db54 <_scanf_chars>:
 800db54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db58:	4615      	mov	r5, r2
 800db5a:	688a      	ldr	r2, [r1, #8]
 800db5c:	4680      	mov	r8, r0
 800db5e:	460c      	mov	r4, r1
 800db60:	b932      	cbnz	r2, 800db70 <_scanf_chars+0x1c>
 800db62:	698a      	ldr	r2, [r1, #24]
 800db64:	2a00      	cmp	r2, #0
 800db66:	bf14      	ite	ne
 800db68:	f04f 32ff 	movne.w	r2, #4294967295
 800db6c:	2201      	moveq	r2, #1
 800db6e:	608a      	str	r2, [r1, #8]
 800db70:	6822      	ldr	r2, [r4, #0]
 800db72:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dc04 <_scanf_chars+0xb0>
 800db76:	06d1      	lsls	r1, r2, #27
 800db78:	bf5f      	itttt	pl
 800db7a:	681a      	ldrpl	r2, [r3, #0]
 800db7c:	1d11      	addpl	r1, r2, #4
 800db7e:	6019      	strpl	r1, [r3, #0]
 800db80:	6816      	ldrpl	r6, [r2, #0]
 800db82:	2700      	movs	r7, #0
 800db84:	69a0      	ldr	r0, [r4, #24]
 800db86:	b188      	cbz	r0, 800dbac <_scanf_chars+0x58>
 800db88:	2801      	cmp	r0, #1
 800db8a:	d107      	bne.n	800db9c <_scanf_chars+0x48>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	6963      	ldr	r3, [r4, #20]
 800db92:	5c9b      	ldrb	r3, [r3, r2]
 800db94:	b953      	cbnz	r3, 800dbac <_scanf_chars+0x58>
 800db96:	2f00      	cmp	r7, #0
 800db98:	d031      	beq.n	800dbfe <_scanf_chars+0xaa>
 800db9a:	e022      	b.n	800dbe2 <_scanf_chars+0x8e>
 800db9c:	2802      	cmp	r0, #2
 800db9e:	d120      	bne.n	800dbe2 <_scanf_chars+0x8e>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dba8:	071b      	lsls	r3, r3, #28
 800dbaa:	d41a      	bmi.n	800dbe2 <_scanf_chars+0x8e>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	06da      	lsls	r2, r3, #27
 800dbb0:	bf5e      	ittt	pl
 800dbb2:	682b      	ldrpl	r3, [r5, #0]
 800dbb4:	781b      	ldrbpl	r3, [r3, #0]
 800dbb6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dbba:	682a      	ldr	r2, [r5, #0]
 800dbbc:	686b      	ldr	r3, [r5, #4]
 800dbbe:	3201      	adds	r2, #1
 800dbc0:	602a      	str	r2, [r5, #0]
 800dbc2:	68a2      	ldr	r2, [r4, #8]
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	3a01      	subs	r2, #1
 800dbc8:	606b      	str	r3, [r5, #4]
 800dbca:	3701      	adds	r7, #1
 800dbcc:	60a2      	str	r2, [r4, #8]
 800dbce:	b142      	cbz	r2, 800dbe2 <_scanf_chars+0x8e>
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	dcd7      	bgt.n	800db84 <_scanf_chars+0x30>
 800dbd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4640      	mov	r0, r8
 800dbdc:	4798      	blx	r3
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d0d0      	beq.n	800db84 <_scanf_chars+0x30>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f013 0310 	ands.w	r3, r3, #16
 800dbe8:	d105      	bne.n	800dbf6 <_scanf_chars+0xa2>
 800dbea:	68e2      	ldr	r2, [r4, #12]
 800dbec:	3201      	adds	r2, #1
 800dbee:	60e2      	str	r2, [r4, #12]
 800dbf0:	69a2      	ldr	r2, [r4, #24]
 800dbf2:	b102      	cbz	r2, 800dbf6 <_scanf_chars+0xa2>
 800dbf4:	7033      	strb	r3, [r6, #0]
 800dbf6:	6923      	ldr	r3, [r4, #16]
 800dbf8:	443b      	add	r3, r7
 800dbfa:	6123      	str	r3, [r4, #16]
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc02:	bf00      	nop
 800dc04:	0800fbc9 	.word	0x0800fbc9

0800dc08 <_scanf_i>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	4698      	mov	r8, r3
 800dc0e:	4b74      	ldr	r3, [pc, #464]	@ (800dde0 <_scanf_i+0x1d8>)
 800dc10:	460c      	mov	r4, r1
 800dc12:	4682      	mov	sl, r0
 800dc14:	4616      	mov	r6, r2
 800dc16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	ab03      	add	r3, sp, #12
 800dc1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dc22:	4b70      	ldr	r3, [pc, #448]	@ (800dde4 <_scanf_i+0x1dc>)
 800dc24:	69a1      	ldr	r1, [r4, #24]
 800dc26:	4a70      	ldr	r2, [pc, #448]	@ (800dde8 <_scanf_i+0x1e0>)
 800dc28:	2903      	cmp	r1, #3
 800dc2a:	bf08      	it	eq
 800dc2c:	461a      	moveq	r2, r3
 800dc2e:	68a3      	ldr	r3, [r4, #8]
 800dc30:	9201      	str	r2, [sp, #4]
 800dc32:	1e5a      	subs	r2, r3, #1
 800dc34:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dc38:	bf88      	it	hi
 800dc3a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dc3e:	4627      	mov	r7, r4
 800dc40:	bf82      	ittt	hi
 800dc42:	eb03 0905 	addhi.w	r9, r3, r5
 800dc46:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dc4a:	60a3      	strhi	r3, [r4, #8]
 800dc4c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dc50:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800dc54:	bf98      	it	ls
 800dc56:	f04f 0900 	movls.w	r9, #0
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	463d      	mov	r5, r7
 800dc5e:	f04f 0b00 	mov.w	fp, #0
 800dc62:	6831      	ldr	r1, [r6, #0]
 800dc64:	ab03      	add	r3, sp, #12
 800dc66:	7809      	ldrb	r1, [r1, #0]
 800dc68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	f7f2 fabf 	bl	80001f0 <memchr>
 800dc72:	b328      	cbz	r0, 800dcc0 <_scanf_i+0xb8>
 800dc74:	f1bb 0f01 	cmp.w	fp, #1
 800dc78:	d159      	bne.n	800dd2e <_scanf_i+0x126>
 800dc7a:	6862      	ldr	r2, [r4, #4]
 800dc7c:	b92a      	cbnz	r2, 800dc8a <_scanf_i+0x82>
 800dc7e:	6822      	ldr	r2, [r4, #0]
 800dc80:	2108      	movs	r1, #8
 800dc82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc86:	6061      	str	r1, [r4, #4]
 800dc88:	6022      	str	r2, [r4, #0]
 800dc8a:	6822      	ldr	r2, [r4, #0]
 800dc8c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800dc90:	6022      	str	r2, [r4, #0]
 800dc92:	68a2      	ldr	r2, [r4, #8]
 800dc94:	1e51      	subs	r1, r2, #1
 800dc96:	60a1      	str	r1, [r4, #8]
 800dc98:	b192      	cbz	r2, 800dcc0 <_scanf_i+0xb8>
 800dc9a:	6832      	ldr	r2, [r6, #0]
 800dc9c:	1c51      	adds	r1, r2, #1
 800dc9e:	6031      	str	r1, [r6, #0]
 800dca0:	7812      	ldrb	r2, [r2, #0]
 800dca2:	f805 2b01 	strb.w	r2, [r5], #1
 800dca6:	6872      	ldr	r2, [r6, #4]
 800dca8:	3a01      	subs	r2, #1
 800dcaa:	2a00      	cmp	r2, #0
 800dcac:	6072      	str	r2, [r6, #4]
 800dcae:	dc07      	bgt.n	800dcc0 <_scanf_i+0xb8>
 800dcb0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	4650      	mov	r0, sl
 800dcb8:	4790      	blx	r2
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	f040 8085 	bne.w	800ddca <_scanf_i+0x1c2>
 800dcc0:	f10b 0b01 	add.w	fp, fp, #1
 800dcc4:	f1bb 0f03 	cmp.w	fp, #3
 800dcc8:	d1cb      	bne.n	800dc62 <_scanf_i+0x5a>
 800dcca:	6863      	ldr	r3, [r4, #4]
 800dccc:	b90b      	cbnz	r3, 800dcd2 <_scanf_i+0xca>
 800dcce:	230a      	movs	r3, #10
 800dcd0:	6063      	str	r3, [r4, #4]
 800dcd2:	6863      	ldr	r3, [r4, #4]
 800dcd4:	4945      	ldr	r1, [pc, #276]	@ (800ddec <_scanf_i+0x1e4>)
 800dcd6:	6960      	ldr	r0, [r4, #20]
 800dcd8:	1ac9      	subs	r1, r1, r3
 800dcda:	f000 f935 	bl	800df48 <__sccl>
 800dcde:	f04f 0b00 	mov.w	fp, #0
 800dce2:	68a3      	ldr	r3, [r4, #8]
 800dce4:	6822      	ldr	r2, [r4, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d03d      	beq.n	800dd66 <_scanf_i+0x15e>
 800dcea:	6831      	ldr	r1, [r6, #0]
 800dcec:	6960      	ldr	r0, [r4, #20]
 800dcee:	f891 c000 	ldrb.w	ip, [r1]
 800dcf2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d035      	beq.n	800dd66 <_scanf_i+0x15e>
 800dcfa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800dcfe:	d124      	bne.n	800dd4a <_scanf_i+0x142>
 800dd00:	0510      	lsls	r0, r2, #20
 800dd02:	d522      	bpl.n	800dd4a <_scanf_i+0x142>
 800dd04:	f10b 0b01 	add.w	fp, fp, #1
 800dd08:	f1b9 0f00 	cmp.w	r9, #0
 800dd0c:	d003      	beq.n	800dd16 <_scanf_i+0x10e>
 800dd0e:	3301      	adds	r3, #1
 800dd10:	f109 39ff 	add.w	r9, r9, #4294967295
 800dd14:	60a3      	str	r3, [r4, #8]
 800dd16:	6873      	ldr	r3, [r6, #4]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	6073      	str	r3, [r6, #4]
 800dd1e:	dd1b      	ble.n	800dd58 <_scanf_i+0x150>
 800dd20:	6833      	ldr	r3, [r6, #0]
 800dd22:	3301      	adds	r3, #1
 800dd24:	6033      	str	r3, [r6, #0]
 800dd26:	68a3      	ldr	r3, [r4, #8]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	60a3      	str	r3, [r4, #8]
 800dd2c:	e7d9      	b.n	800dce2 <_scanf_i+0xda>
 800dd2e:	f1bb 0f02 	cmp.w	fp, #2
 800dd32:	d1ae      	bne.n	800dc92 <_scanf_i+0x8a>
 800dd34:	6822      	ldr	r2, [r4, #0]
 800dd36:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800dd3a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800dd3e:	d1bf      	bne.n	800dcc0 <_scanf_i+0xb8>
 800dd40:	2110      	movs	r1, #16
 800dd42:	6061      	str	r1, [r4, #4]
 800dd44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd48:	e7a2      	b.n	800dc90 <_scanf_i+0x88>
 800dd4a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800dd4e:	6022      	str	r2, [r4, #0]
 800dd50:	780b      	ldrb	r3, [r1, #0]
 800dd52:	f805 3b01 	strb.w	r3, [r5], #1
 800dd56:	e7de      	b.n	800dd16 <_scanf_i+0x10e>
 800dd58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4650      	mov	r0, sl
 800dd60:	4798      	blx	r3
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0df      	beq.n	800dd26 <_scanf_i+0x11e>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	05d9      	lsls	r1, r3, #23
 800dd6a:	d50d      	bpl.n	800dd88 <_scanf_i+0x180>
 800dd6c:	42bd      	cmp	r5, r7
 800dd6e:	d909      	bls.n	800dd84 <_scanf_i+0x17c>
 800dd70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dd74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd78:	4632      	mov	r2, r6
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4798      	blx	r3
 800dd7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd82:	464d      	mov	r5, r9
 800dd84:	42bd      	cmp	r5, r7
 800dd86:	d028      	beq.n	800ddda <_scanf_i+0x1d2>
 800dd88:	6822      	ldr	r2, [r4, #0]
 800dd8a:	f012 0210 	ands.w	r2, r2, #16
 800dd8e:	d113      	bne.n	800ddb8 <_scanf_i+0x1b0>
 800dd90:	702a      	strb	r2, [r5, #0]
 800dd92:	6863      	ldr	r3, [r4, #4]
 800dd94:	9e01      	ldr	r6, [sp, #4]
 800dd96:	4639      	mov	r1, r7
 800dd98:	4650      	mov	r0, sl
 800dd9a:	47b0      	blx	r6
 800dd9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dda0:	6821      	ldr	r1, [r4, #0]
 800dda2:	1d1a      	adds	r2, r3, #4
 800dda4:	f8c8 2000 	str.w	r2, [r8]
 800dda8:	f011 0f20 	tst.w	r1, #32
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	d00f      	beq.n	800ddd0 <_scanf_i+0x1c8>
 800ddb0:	6018      	str	r0, [r3, #0]
 800ddb2:	68e3      	ldr	r3, [r4, #12]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	60e3      	str	r3, [r4, #12]
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	1bed      	subs	r5, r5, r7
 800ddbc:	445d      	add	r5, fp
 800ddbe:	442b      	add	r3, r5
 800ddc0:	6123      	str	r3, [r4, #16]
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	b007      	add	sp, #28
 800ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddca:	f04f 0b00 	mov.w	fp, #0
 800ddce:	e7ca      	b.n	800dd66 <_scanf_i+0x15e>
 800ddd0:	07ca      	lsls	r2, r1, #31
 800ddd2:	bf4c      	ite	mi
 800ddd4:	8018      	strhmi	r0, [r3, #0]
 800ddd6:	6018      	strpl	r0, [r3, #0]
 800ddd8:	e7eb      	b.n	800ddb2 <_scanf_i+0x1aa>
 800ddda:	2001      	movs	r0, #1
 800dddc:	e7f2      	b.n	800ddc4 <_scanf_i+0x1bc>
 800ddde:	bf00      	nop
 800dde0:	0800e88c 	.word	0x0800e88c
 800dde4:	080098e1 	.word	0x080098e1
 800dde8:	0800d4dd 	.word	0x0800d4dd
 800ddec:	08010019 	.word	0x08010019

0800ddf0 <__sflush_r>:
 800ddf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf8:	0716      	lsls	r6, r2, #28
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	460c      	mov	r4, r1
 800ddfe:	d454      	bmi.n	800deaa <__sflush_r+0xba>
 800de00:	684b      	ldr	r3, [r1, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	dc02      	bgt.n	800de0c <__sflush_r+0x1c>
 800de06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dd48      	ble.n	800de9e <__sflush_r+0xae>
 800de0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de0e:	2e00      	cmp	r6, #0
 800de10:	d045      	beq.n	800de9e <__sflush_r+0xae>
 800de12:	2300      	movs	r3, #0
 800de14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de18:	682f      	ldr	r7, [r5, #0]
 800de1a:	6a21      	ldr	r1, [r4, #32]
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	d030      	beq.n	800de82 <__sflush_r+0x92>
 800de20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	0759      	lsls	r1, r3, #29
 800de26:	d505      	bpl.n	800de34 <__sflush_r+0x44>
 800de28:	6863      	ldr	r3, [r4, #4]
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de2e:	b10b      	cbz	r3, 800de34 <__sflush_r+0x44>
 800de30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de32:	1ad2      	subs	r2, r2, r3
 800de34:	2300      	movs	r3, #0
 800de36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de38:	6a21      	ldr	r1, [r4, #32]
 800de3a:	4628      	mov	r0, r5
 800de3c:	47b0      	blx	r6
 800de3e:	1c43      	adds	r3, r0, #1
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	d106      	bne.n	800de52 <__sflush_r+0x62>
 800de44:	6829      	ldr	r1, [r5, #0]
 800de46:	291d      	cmp	r1, #29
 800de48:	d82b      	bhi.n	800dea2 <__sflush_r+0xb2>
 800de4a:	4a2a      	ldr	r2, [pc, #168]	@ (800def4 <__sflush_r+0x104>)
 800de4c:	410a      	asrs	r2, r1
 800de4e:	07d6      	lsls	r6, r2, #31
 800de50:	d427      	bmi.n	800dea2 <__sflush_r+0xb2>
 800de52:	2200      	movs	r2, #0
 800de54:	6062      	str	r2, [r4, #4]
 800de56:	04d9      	lsls	r1, r3, #19
 800de58:	6922      	ldr	r2, [r4, #16]
 800de5a:	6022      	str	r2, [r4, #0]
 800de5c:	d504      	bpl.n	800de68 <__sflush_r+0x78>
 800de5e:	1c42      	adds	r2, r0, #1
 800de60:	d101      	bne.n	800de66 <__sflush_r+0x76>
 800de62:	682b      	ldr	r3, [r5, #0]
 800de64:	b903      	cbnz	r3, 800de68 <__sflush_r+0x78>
 800de66:	6560      	str	r0, [r4, #84]	@ 0x54
 800de68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de6a:	602f      	str	r7, [r5, #0]
 800de6c:	b1b9      	cbz	r1, 800de9e <__sflush_r+0xae>
 800de6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de72:	4299      	cmp	r1, r3
 800de74:	d002      	beq.n	800de7c <__sflush_r+0x8c>
 800de76:	4628      	mov	r0, r5
 800de78:	f7fe fa36 	bl	800c2e8 <_free_r>
 800de7c:	2300      	movs	r3, #0
 800de7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800de80:	e00d      	b.n	800de9e <__sflush_r+0xae>
 800de82:	2301      	movs	r3, #1
 800de84:	4628      	mov	r0, r5
 800de86:	47b0      	blx	r6
 800de88:	4602      	mov	r2, r0
 800de8a:	1c50      	adds	r0, r2, #1
 800de8c:	d1c9      	bne.n	800de22 <__sflush_r+0x32>
 800de8e:	682b      	ldr	r3, [r5, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d0c6      	beq.n	800de22 <__sflush_r+0x32>
 800de94:	2b1d      	cmp	r3, #29
 800de96:	d001      	beq.n	800de9c <__sflush_r+0xac>
 800de98:	2b16      	cmp	r3, #22
 800de9a:	d11e      	bne.n	800deda <__sflush_r+0xea>
 800de9c:	602f      	str	r7, [r5, #0]
 800de9e:	2000      	movs	r0, #0
 800dea0:	e022      	b.n	800dee8 <__sflush_r+0xf8>
 800dea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dea6:	b21b      	sxth	r3, r3
 800dea8:	e01b      	b.n	800dee2 <__sflush_r+0xf2>
 800deaa:	690f      	ldr	r7, [r1, #16]
 800deac:	2f00      	cmp	r7, #0
 800deae:	d0f6      	beq.n	800de9e <__sflush_r+0xae>
 800deb0:	0793      	lsls	r3, r2, #30
 800deb2:	680e      	ldr	r6, [r1, #0]
 800deb4:	bf08      	it	eq
 800deb6:	694b      	ldreq	r3, [r1, #20]
 800deb8:	600f      	str	r7, [r1, #0]
 800deba:	bf18      	it	ne
 800debc:	2300      	movne	r3, #0
 800debe:	eba6 0807 	sub.w	r8, r6, r7
 800dec2:	608b      	str	r3, [r1, #8]
 800dec4:	f1b8 0f00 	cmp.w	r8, #0
 800dec8:	dde9      	ble.n	800de9e <__sflush_r+0xae>
 800deca:	6a21      	ldr	r1, [r4, #32]
 800decc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dece:	4643      	mov	r3, r8
 800ded0:	463a      	mov	r2, r7
 800ded2:	4628      	mov	r0, r5
 800ded4:	47b0      	blx	r6
 800ded6:	2800      	cmp	r0, #0
 800ded8:	dc08      	bgt.n	800deec <__sflush_r+0xfc>
 800deda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deec:	4407      	add	r7, r0
 800deee:	eba8 0800 	sub.w	r8, r8, r0
 800def2:	e7e7      	b.n	800dec4 <__sflush_r+0xd4>
 800def4:	dfbffffe 	.word	0xdfbffffe

0800def8 <_fflush_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	690b      	ldr	r3, [r1, #16]
 800defc:	4605      	mov	r5, r0
 800defe:	460c      	mov	r4, r1
 800df00:	b913      	cbnz	r3, 800df08 <_fflush_r+0x10>
 800df02:	2500      	movs	r5, #0
 800df04:	4628      	mov	r0, r5
 800df06:	bd38      	pop	{r3, r4, r5, pc}
 800df08:	b118      	cbz	r0, 800df12 <_fflush_r+0x1a>
 800df0a:	6a03      	ldr	r3, [r0, #32]
 800df0c:	b90b      	cbnz	r3, 800df12 <_fflush_r+0x1a>
 800df0e:	f7fc fbeb 	bl	800a6e8 <__sinit>
 800df12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0f3      	beq.n	800df02 <_fflush_r+0xa>
 800df1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df1c:	07d0      	lsls	r0, r2, #31
 800df1e:	d404      	bmi.n	800df2a <_fflush_r+0x32>
 800df20:	0599      	lsls	r1, r3, #22
 800df22:	d402      	bmi.n	800df2a <_fflush_r+0x32>
 800df24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df26:	f7fd fb5f 	bl	800b5e8 <__retarget_lock_acquire_recursive>
 800df2a:	4628      	mov	r0, r5
 800df2c:	4621      	mov	r1, r4
 800df2e:	f7ff ff5f 	bl	800ddf0 <__sflush_r>
 800df32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df34:	07da      	lsls	r2, r3, #31
 800df36:	4605      	mov	r5, r0
 800df38:	d4e4      	bmi.n	800df04 <_fflush_r+0xc>
 800df3a:	89a3      	ldrh	r3, [r4, #12]
 800df3c:	059b      	lsls	r3, r3, #22
 800df3e:	d4e1      	bmi.n	800df04 <_fflush_r+0xc>
 800df40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df42:	f7fd fb53 	bl	800b5ec <__retarget_lock_release_recursive>
 800df46:	e7dd      	b.n	800df04 <_fflush_r+0xc>

0800df48 <__sccl>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	780b      	ldrb	r3, [r1, #0]
 800df4c:	4604      	mov	r4, r0
 800df4e:	2b5e      	cmp	r3, #94	@ 0x5e
 800df50:	bf0b      	itete	eq
 800df52:	784b      	ldrbeq	r3, [r1, #1]
 800df54:	1c4a      	addne	r2, r1, #1
 800df56:	1c8a      	addeq	r2, r1, #2
 800df58:	2100      	movne	r1, #0
 800df5a:	bf08      	it	eq
 800df5c:	2101      	moveq	r1, #1
 800df5e:	3801      	subs	r0, #1
 800df60:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800df64:	f800 1f01 	strb.w	r1, [r0, #1]!
 800df68:	42a8      	cmp	r0, r5
 800df6a:	d1fb      	bne.n	800df64 <__sccl+0x1c>
 800df6c:	b90b      	cbnz	r3, 800df72 <__sccl+0x2a>
 800df6e:	1e50      	subs	r0, r2, #1
 800df70:	bd70      	pop	{r4, r5, r6, pc}
 800df72:	f081 0101 	eor.w	r1, r1, #1
 800df76:	54e1      	strb	r1, [r4, r3]
 800df78:	4610      	mov	r0, r2
 800df7a:	4602      	mov	r2, r0
 800df7c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df80:	2d2d      	cmp	r5, #45	@ 0x2d
 800df82:	d005      	beq.n	800df90 <__sccl+0x48>
 800df84:	2d5d      	cmp	r5, #93	@ 0x5d
 800df86:	d016      	beq.n	800dfb6 <__sccl+0x6e>
 800df88:	2d00      	cmp	r5, #0
 800df8a:	d0f1      	beq.n	800df70 <__sccl+0x28>
 800df8c:	462b      	mov	r3, r5
 800df8e:	e7f2      	b.n	800df76 <__sccl+0x2e>
 800df90:	7846      	ldrb	r6, [r0, #1]
 800df92:	2e5d      	cmp	r6, #93	@ 0x5d
 800df94:	d0fa      	beq.n	800df8c <__sccl+0x44>
 800df96:	42b3      	cmp	r3, r6
 800df98:	dcf8      	bgt.n	800df8c <__sccl+0x44>
 800df9a:	3002      	adds	r0, #2
 800df9c:	461a      	mov	r2, r3
 800df9e:	3201      	adds	r2, #1
 800dfa0:	4296      	cmp	r6, r2
 800dfa2:	54a1      	strb	r1, [r4, r2]
 800dfa4:	dcfb      	bgt.n	800df9e <__sccl+0x56>
 800dfa6:	1af2      	subs	r2, r6, r3
 800dfa8:	3a01      	subs	r2, #1
 800dfaa:	1c5d      	adds	r5, r3, #1
 800dfac:	42b3      	cmp	r3, r6
 800dfae:	bfa8      	it	ge
 800dfb0:	2200      	movge	r2, #0
 800dfb2:	18ab      	adds	r3, r5, r2
 800dfb4:	e7e1      	b.n	800df7a <__sccl+0x32>
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	e7da      	b.n	800df70 <__sccl+0x28>

0800dfba <__submore>:
 800dfba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dfc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfc6:	4299      	cmp	r1, r3
 800dfc8:	d11d      	bne.n	800e006 <__submore+0x4c>
 800dfca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dfce:	f7fa fd77 	bl	8008ac0 <_malloc_r>
 800dfd2:	b918      	cbnz	r0, 800dfdc <__submore+0x22>
 800dfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfe0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dfe2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800dfe6:	6360      	str	r0, [r4, #52]	@ 0x34
 800dfe8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800dfec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dff0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800dff4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dff8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800dffc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e000:	6020      	str	r0, [r4, #0]
 800e002:	2000      	movs	r0, #0
 800e004:	e7e8      	b.n	800dfd8 <__submore+0x1e>
 800e006:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e008:	0077      	lsls	r7, r6, #1
 800e00a:	463a      	mov	r2, r7
 800e00c:	f000 f86c 	bl	800e0e8 <_realloc_r>
 800e010:	4605      	mov	r5, r0
 800e012:	2800      	cmp	r0, #0
 800e014:	d0de      	beq.n	800dfd4 <__submore+0x1a>
 800e016:	eb00 0806 	add.w	r8, r0, r6
 800e01a:	4601      	mov	r1, r0
 800e01c:	4632      	mov	r2, r6
 800e01e:	4640      	mov	r0, r8
 800e020:	f7fd faed 	bl	800b5fe <memcpy>
 800e024:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e028:	f8c4 8000 	str.w	r8, [r4]
 800e02c:	e7e9      	b.n	800e002 <__submore+0x48>

0800e02e <memmove>:
 800e02e:	4288      	cmp	r0, r1
 800e030:	b510      	push	{r4, lr}
 800e032:	eb01 0402 	add.w	r4, r1, r2
 800e036:	d902      	bls.n	800e03e <memmove+0x10>
 800e038:	4284      	cmp	r4, r0
 800e03a:	4623      	mov	r3, r4
 800e03c:	d807      	bhi.n	800e04e <memmove+0x20>
 800e03e:	1e43      	subs	r3, r0, #1
 800e040:	42a1      	cmp	r1, r4
 800e042:	d008      	beq.n	800e056 <memmove+0x28>
 800e044:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e048:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e04c:	e7f8      	b.n	800e040 <memmove+0x12>
 800e04e:	4402      	add	r2, r0
 800e050:	4601      	mov	r1, r0
 800e052:	428a      	cmp	r2, r1
 800e054:	d100      	bne.n	800e058 <memmove+0x2a>
 800e056:	bd10      	pop	{r4, pc}
 800e058:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e05c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e060:	e7f7      	b.n	800e052 <memmove+0x24>
	...

0800e064 <__gettzinfo>:
 800e064:	4800      	ldr	r0, [pc, #0]	@ (800e068 <__gettzinfo+0x4>)
 800e066:	4770      	bx	lr
 800e068:	200001f0 	.word	0x200001f0

0800e06c <__assert_func>:
 800e06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e06e:	4614      	mov	r4, r2
 800e070:	461a      	mov	r2, r3
 800e072:	4b09      	ldr	r3, [pc, #36]	@ (800e098 <__assert_func+0x2c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4605      	mov	r5, r0
 800e078:	68d8      	ldr	r0, [r3, #12]
 800e07a:	b954      	cbnz	r4, 800e092 <__assert_func+0x26>
 800e07c:	4b07      	ldr	r3, [pc, #28]	@ (800e09c <__assert_func+0x30>)
 800e07e:	461c      	mov	r4, r3
 800e080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e084:	9100      	str	r1, [sp, #0]
 800e086:	462b      	mov	r3, r5
 800e088:	4905      	ldr	r1, [pc, #20]	@ (800e0a0 <__assert_func+0x34>)
 800e08a:	f000 f85b 	bl	800e144 <fiprintf>
 800e08e:	f000 f86b 	bl	800e168 <abort>
 800e092:	4b04      	ldr	r3, [pc, #16]	@ (800e0a4 <__assert_func+0x38>)
 800e094:	e7f4      	b.n	800e080 <__assert_func+0x14>
 800e096:	bf00      	nop
 800e098:	2000019c 	.word	0x2000019c
 800e09c:	0800f639 	.word	0x0800f639
 800e0a0:	08010091 	.word	0x08010091
 800e0a4:	08010084 	.word	0x08010084

0800e0a8 <_calloc_r>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	fba1 5402 	umull	r5, r4, r1, r2
 800e0ae:	b93c      	cbnz	r4, 800e0c0 <_calloc_r+0x18>
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f7fa fd05 	bl	8008ac0 <_malloc_r>
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	b928      	cbnz	r0, 800e0c6 <_calloc_r+0x1e>
 800e0ba:	2600      	movs	r6, #0
 800e0bc:	4630      	mov	r0, r6
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	220c      	movs	r2, #12
 800e0c2:	6002      	str	r2, [r0, #0]
 800e0c4:	e7f9      	b.n	800e0ba <_calloc_r+0x12>
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	f7fc fc3f 	bl	800a94c <memset>
 800e0ce:	e7f5      	b.n	800e0bc <_calloc_r+0x14>

0800e0d0 <__env_lock>:
 800e0d0:	4801      	ldr	r0, [pc, #4]	@ (800e0d8 <__env_lock+0x8>)
 800e0d2:	f7fd ba89 	b.w	800b5e8 <__retarget_lock_acquire_recursive>
 800e0d6:	bf00      	nop
 800e0d8:	200096f9 	.word	0x200096f9

0800e0dc <__env_unlock>:
 800e0dc:	4801      	ldr	r0, [pc, #4]	@ (800e0e4 <__env_unlock+0x8>)
 800e0de:	f7fd ba85 	b.w	800b5ec <__retarget_lock_release_recursive>
 800e0e2:	bf00      	nop
 800e0e4:	200096f9 	.word	0x200096f9

0800e0e8 <_realloc_r>:
 800e0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ec:	4680      	mov	r8, r0
 800e0ee:	4615      	mov	r5, r2
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	b921      	cbnz	r1, 800e0fe <_realloc_r+0x16>
 800e0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	f7fa bce1 	b.w	8008ac0 <_malloc_r>
 800e0fe:	b92a      	cbnz	r2, 800e10c <_realloc_r+0x24>
 800e100:	f7fe f8f2 	bl	800c2e8 <_free_r>
 800e104:	2400      	movs	r4, #0
 800e106:	4620      	mov	r0, r4
 800e108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e10c:	f000 f833 	bl	800e176 <_malloc_usable_size_r>
 800e110:	4285      	cmp	r5, r0
 800e112:	4606      	mov	r6, r0
 800e114:	d802      	bhi.n	800e11c <_realloc_r+0x34>
 800e116:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e11a:	d8f4      	bhi.n	800e106 <_realloc_r+0x1e>
 800e11c:	4629      	mov	r1, r5
 800e11e:	4640      	mov	r0, r8
 800e120:	f7fa fcce 	bl	8008ac0 <_malloc_r>
 800e124:	4607      	mov	r7, r0
 800e126:	2800      	cmp	r0, #0
 800e128:	d0ec      	beq.n	800e104 <_realloc_r+0x1c>
 800e12a:	42b5      	cmp	r5, r6
 800e12c:	462a      	mov	r2, r5
 800e12e:	4621      	mov	r1, r4
 800e130:	bf28      	it	cs
 800e132:	4632      	movcs	r2, r6
 800e134:	f7fd fa63 	bl	800b5fe <memcpy>
 800e138:	4621      	mov	r1, r4
 800e13a:	4640      	mov	r0, r8
 800e13c:	f7fe f8d4 	bl	800c2e8 <_free_r>
 800e140:	463c      	mov	r4, r7
 800e142:	e7e0      	b.n	800e106 <_realloc_r+0x1e>

0800e144 <fiprintf>:
 800e144:	b40e      	push	{r1, r2, r3}
 800e146:	b503      	push	{r0, r1, lr}
 800e148:	4601      	mov	r1, r0
 800e14a:	ab03      	add	r3, sp, #12
 800e14c:	4805      	ldr	r0, [pc, #20]	@ (800e164 <fiprintf+0x20>)
 800e14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e152:	6800      	ldr	r0, [r0, #0]
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	f000 f83f 	bl	800e1d8 <_vfiprintf_r>
 800e15a:	b002      	add	sp, #8
 800e15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e160:	b003      	add	sp, #12
 800e162:	4770      	bx	lr
 800e164:	2000019c 	.word	0x2000019c

0800e168 <abort>:
 800e168:	b508      	push	{r3, lr}
 800e16a:	2006      	movs	r0, #6
 800e16c:	f000 fa08 	bl	800e580 <raise>
 800e170:	2001      	movs	r0, #1
 800e172:	f7f5 ffcd 	bl	8004110 <_exit>

0800e176 <_malloc_usable_size_r>:
 800e176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17a:	1f18      	subs	r0, r3, #4
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bfbc      	itt	lt
 800e180:	580b      	ldrlt	r3, [r1, r0]
 800e182:	18c0      	addlt	r0, r0, r3
 800e184:	4770      	bx	lr

0800e186 <__sfputc_r>:
 800e186:	6893      	ldr	r3, [r2, #8]
 800e188:	3b01      	subs	r3, #1
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	b410      	push	{r4}
 800e18e:	6093      	str	r3, [r2, #8]
 800e190:	da08      	bge.n	800e1a4 <__sfputc_r+0x1e>
 800e192:	6994      	ldr	r4, [r2, #24]
 800e194:	42a3      	cmp	r3, r4
 800e196:	db01      	blt.n	800e19c <__sfputc_r+0x16>
 800e198:	290a      	cmp	r1, #10
 800e19a:	d103      	bne.n	800e1a4 <__sfputc_r+0x1e>
 800e19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1a0:	f000 b932 	b.w	800e408 <__swbuf_r>
 800e1a4:	6813      	ldr	r3, [r2, #0]
 800e1a6:	1c58      	adds	r0, r3, #1
 800e1a8:	6010      	str	r0, [r2, #0]
 800e1aa:	7019      	strb	r1, [r3, #0]
 800e1ac:	4608      	mov	r0, r1
 800e1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <__sfputs_r>:
 800e1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	460f      	mov	r7, r1
 800e1ba:	4614      	mov	r4, r2
 800e1bc:	18d5      	adds	r5, r2, r3
 800e1be:	42ac      	cmp	r4, r5
 800e1c0:	d101      	bne.n	800e1c6 <__sfputs_r+0x12>
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	e007      	b.n	800e1d6 <__sfputs_r+0x22>
 800e1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ca:	463a      	mov	r2, r7
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff ffda 	bl	800e186 <__sfputc_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d1f3      	bne.n	800e1be <__sfputs_r+0xa>
 800e1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1d8 <_vfiprintf_r>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	460d      	mov	r5, r1
 800e1de:	b09d      	sub	sp, #116	@ 0x74
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	4698      	mov	r8, r3
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	b118      	cbz	r0, 800e1f0 <_vfiprintf_r+0x18>
 800e1e8:	6a03      	ldr	r3, [r0, #32]
 800e1ea:	b90b      	cbnz	r3, 800e1f0 <_vfiprintf_r+0x18>
 800e1ec:	f7fc fa7c 	bl	800a6e8 <__sinit>
 800e1f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1f2:	07d9      	lsls	r1, r3, #31
 800e1f4:	d405      	bmi.n	800e202 <_vfiprintf_r+0x2a>
 800e1f6:	89ab      	ldrh	r3, [r5, #12]
 800e1f8:	059a      	lsls	r2, r3, #22
 800e1fa:	d402      	bmi.n	800e202 <_vfiprintf_r+0x2a>
 800e1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1fe:	f7fd f9f3 	bl	800b5e8 <__retarget_lock_acquire_recursive>
 800e202:	89ab      	ldrh	r3, [r5, #12]
 800e204:	071b      	lsls	r3, r3, #28
 800e206:	d501      	bpl.n	800e20c <_vfiprintf_r+0x34>
 800e208:	692b      	ldr	r3, [r5, #16]
 800e20a:	b99b      	cbnz	r3, 800e234 <_vfiprintf_r+0x5c>
 800e20c:	4629      	mov	r1, r5
 800e20e:	4630      	mov	r0, r6
 800e210:	f000 f938 	bl	800e484 <__swsetup_r>
 800e214:	b170      	cbz	r0, 800e234 <_vfiprintf_r+0x5c>
 800e216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e218:	07dc      	lsls	r4, r3, #31
 800e21a:	d504      	bpl.n	800e226 <_vfiprintf_r+0x4e>
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295
 800e220:	b01d      	add	sp, #116	@ 0x74
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e226:	89ab      	ldrh	r3, [r5, #12]
 800e228:	0598      	lsls	r0, r3, #22
 800e22a:	d4f7      	bmi.n	800e21c <_vfiprintf_r+0x44>
 800e22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e22e:	f7fd f9dd 	bl	800b5ec <__retarget_lock_release_recursive>
 800e232:	e7f3      	b.n	800e21c <_vfiprintf_r+0x44>
 800e234:	2300      	movs	r3, #0
 800e236:	9309      	str	r3, [sp, #36]	@ 0x24
 800e238:	2320      	movs	r3, #32
 800e23a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e23e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e242:	2330      	movs	r3, #48	@ 0x30
 800e244:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e3f4 <_vfiprintf_r+0x21c>
 800e248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e24c:	f04f 0901 	mov.w	r9, #1
 800e250:	4623      	mov	r3, r4
 800e252:	469a      	mov	sl, r3
 800e254:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e258:	b10a      	cbz	r2, 800e25e <_vfiprintf_r+0x86>
 800e25a:	2a25      	cmp	r2, #37	@ 0x25
 800e25c:	d1f9      	bne.n	800e252 <_vfiprintf_r+0x7a>
 800e25e:	ebba 0b04 	subs.w	fp, sl, r4
 800e262:	d00b      	beq.n	800e27c <_vfiprintf_r+0xa4>
 800e264:	465b      	mov	r3, fp
 800e266:	4622      	mov	r2, r4
 800e268:	4629      	mov	r1, r5
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7ff ffa2 	bl	800e1b4 <__sfputs_r>
 800e270:	3001      	adds	r0, #1
 800e272:	f000 80a7 	beq.w	800e3c4 <_vfiprintf_r+0x1ec>
 800e276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e278:	445a      	add	r2, fp
 800e27a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e27c:	f89a 3000 	ldrb.w	r3, [sl]
 800e280:	2b00      	cmp	r3, #0
 800e282:	f000 809f 	beq.w	800e3c4 <_vfiprintf_r+0x1ec>
 800e286:	2300      	movs	r3, #0
 800e288:	f04f 32ff 	mov.w	r2, #4294967295
 800e28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e290:	f10a 0a01 	add.w	sl, sl, #1
 800e294:	9304      	str	r3, [sp, #16]
 800e296:	9307      	str	r3, [sp, #28]
 800e298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e29c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e29e:	4654      	mov	r4, sl
 800e2a0:	2205      	movs	r2, #5
 800e2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a6:	4853      	ldr	r0, [pc, #332]	@ (800e3f4 <_vfiprintf_r+0x21c>)
 800e2a8:	f7f1 ffa2 	bl	80001f0 <memchr>
 800e2ac:	9a04      	ldr	r2, [sp, #16]
 800e2ae:	b9d8      	cbnz	r0, 800e2e8 <_vfiprintf_r+0x110>
 800e2b0:	06d1      	lsls	r1, r2, #27
 800e2b2:	bf44      	itt	mi
 800e2b4:	2320      	movmi	r3, #32
 800e2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2ba:	0713      	lsls	r3, r2, #28
 800e2bc:	bf44      	itt	mi
 800e2be:	232b      	movmi	r3, #43	@ 0x2b
 800e2c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2ca:	d015      	beq.n	800e2f8 <_vfiprintf_r+0x120>
 800e2cc:	9a07      	ldr	r2, [sp, #28]
 800e2ce:	4654      	mov	r4, sl
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	f04f 0c0a 	mov.w	ip, #10
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2dc:	3b30      	subs	r3, #48	@ 0x30
 800e2de:	2b09      	cmp	r3, #9
 800e2e0:	d94b      	bls.n	800e37a <_vfiprintf_r+0x1a2>
 800e2e2:	b1b0      	cbz	r0, 800e312 <_vfiprintf_r+0x13a>
 800e2e4:	9207      	str	r2, [sp, #28]
 800e2e6:	e014      	b.n	800e312 <_vfiprintf_r+0x13a>
 800e2e8:	eba0 0308 	sub.w	r3, r0, r8
 800e2ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	9304      	str	r3, [sp, #16]
 800e2f4:	46a2      	mov	sl, r4
 800e2f6:	e7d2      	b.n	800e29e <_vfiprintf_r+0xc6>
 800e2f8:	9b03      	ldr	r3, [sp, #12]
 800e2fa:	1d19      	adds	r1, r3, #4
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	9103      	str	r1, [sp, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	bfbb      	ittet	lt
 800e304:	425b      	neglt	r3, r3
 800e306:	f042 0202 	orrlt.w	r2, r2, #2
 800e30a:	9307      	strge	r3, [sp, #28]
 800e30c:	9307      	strlt	r3, [sp, #28]
 800e30e:	bfb8      	it	lt
 800e310:	9204      	strlt	r2, [sp, #16]
 800e312:	7823      	ldrb	r3, [r4, #0]
 800e314:	2b2e      	cmp	r3, #46	@ 0x2e
 800e316:	d10a      	bne.n	800e32e <_vfiprintf_r+0x156>
 800e318:	7863      	ldrb	r3, [r4, #1]
 800e31a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e31c:	d132      	bne.n	800e384 <_vfiprintf_r+0x1ac>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	1d1a      	adds	r2, r3, #4
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	9203      	str	r2, [sp, #12]
 800e326:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e32a:	3402      	adds	r4, #2
 800e32c:	9305      	str	r3, [sp, #20]
 800e32e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e404 <_vfiprintf_r+0x22c>
 800e332:	7821      	ldrb	r1, [r4, #0]
 800e334:	2203      	movs	r2, #3
 800e336:	4650      	mov	r0, sl
 800e338:	f7f1 ff5a 	bl	80001f0 <memchr>
 800e33c:	b138      	cbz	r0, 800e34e <_vfiprintf_r+0x176>
 800e33e:	9b04      	ldr	r3, [sp, #16]
 800e340:	eba0 000a 	sub.w	r0, r0, sl
 800e344:	2240      	movs	r2, #64	@ 0x40
 800e346:	4082      	lsls	r2, r0
 800e348:	4313      	orrs	r3, r2
 800e34a:	3401      	adds	r4, #1
 800e34c:	9304      	str	r3, [sp, #16]
 800e34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e352:	4829      	ldr	r0, [pc, #164]	@ (800e3f8 <_vfiprintf_r+0x220>)
 800e354:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e358:	2206      	movs	r2, #6
 800e35a:	f7f1 ff49 	bl	80001f0 <memchr>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d03f      	beq.n	800e3e2 <_vfiprintf_r+0x20a>
 800e362:	4b26      	ldr	r3, [pc, #152]	@ (800e3fc <_vfiprintf_r+0x224>)
 800e364:	bb1b      	cbnz	r3, 800e3ae <_vfiprintf_r+0x1d6>
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	3307      	adds	r3, #7
 800e36a:	f023 0307 	bic.w	r3, r3, #7
 800e36e:	3308      	adds	r3, #8
 800e370:	9303      	str	r3, [sp, #12]
 800e372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e374:	443b      	add	r3, r7
 800e376:	9309      	str	r3, [sp, #36]	@ 0x24
 800e378:	e76a      	b.n	800e250 <_vfiprintf_r+0x78>
 800e37a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e37e:	460c      	mov	r4, r1
 800e380:	2001      	movs	r0, #1
 800e382:	e7a8      	b.n	800e2d6 <_vfiprintf_r+0xfe>
 800e384:	2300      	movs	r3, #0
 800e386:	3401      	adds	r4, #1
 800e388:	9305      	str	r3, [sp, #20]
 800e38a:	4619      	mov	r1, r3
 800e38c:	f04f 0c0a 	mov.w	ip, #10
 800e390:	4620      	mov	r0, r4
 800e392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e396:	3a30      	subs	r2, #48	@ 0x30
 800e398:	2a09      	cmp	r2, #9
 800e39a:	d903      	bls.n	800e3a4 <_vfiprintf_r+0x1cc>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d0c6      	beq.n	800e32e <_vfiprintf_r+0x156>
 800e3a0:	9105      	str	r1, [sp, #20]
 800e3a2:	e7c4      	b.n	800e32e <_vfiprintf_r+0x156>
 800e3a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e7f0      	b.n	800e390 <_vfiprintf_r+0x1b8>
 800e3ae:	ab03      	add	r3, sp, #12
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	462a      	mov	r2, r5
 800e3b4:	4b12      	ldr	r3, [pc, #72]	@ (800e400 <_vfiprintf_r+0x228>)
 800e3b6:	a904      	add	r1, sp, #16
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7fb fb3d 	bl	8009a38 <_printf_float>
 800e3be:	4607      	mov	r7, r0
 800e3c0:	1c78      	adds	r0, r7, #1
 800e3c2:	d1d6      	bne.n	800e372 <_vfiprintf_r+0x19a>
 800e3c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3c6:	07d9      	lsls	r1, r3, #31
 800e3c8:	d405      	bmi.n	800e3d6 <_vfiprintf_r+0x1fe>
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	059a      	lsls	r2, r3, #22
 800e3ce:	d402      	bmi.n	800e3d6 <_vfiprintf_r+0x1fe>
 800e3d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3d2:	f7fd f90b 	bl	800b5ec <__retarget_lock_release_recursive>
 800e3d6:	89ab      	ldrh	r3, [r5, #12]
 800e3d8:	065b      	lsls	r3, r3, #25
 800e3da:	f53f af1f 	bmi.w	800e21c <_vfiprintf_r+0x44>
 800e3de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3e0:	e71e      	b.n	800e220 <_vfiprintf_r+0x48>
 800e3e2:	ab03      	add	r3, sp, #12
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	462a      	mov	r2, r5
 800e3e8:	4b05      	ldr	r3, [pc, #20]	@ (800e400 <_vfiprintf_r+0x228>)
 800e3ea:	a904      	add	r1, sp, #16
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7fb fdbb 	bl	8009f68 <_printf_i>
 800e3f2:	e7e4      	b.n	800e3be <_vfiprintf_r+0x1e6>
 800e3f4:	0800fff8 	.word	0x0800fff8
 800e3f8:	08010002 	.word	0x08010002
 800e3fc:	08009a39 	.word	0x08009a39
 800e400:	0800e1b5 	.word	0x0800e1b5
 800e404:	0800fffe 	.word	0x0800fffe

0800e408 <__swbuf_r>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	460e      	mov	r6, r1
 800e40c:	4614      	mov	r4, r2
 800e40e:	4605      	mov	r5, r0
 800e410:	b118      	cbz	r0, 800e41a <__swbuf_r+0x12>
 800e412:	6a03      	ldr	r3, [r0, #32]
 800e414:	b90b      	cbnz	r3, 800e41a <__swbuf_r+0x12>
 800e416:	f7fc f967 	bl	800a6e8 <__sinit>
 800e41a:	69a3      	ldr	r3, [r4, #24]
 800e41c:	60a3      	str	r3, [r4, #8]
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	071a      	lsls	r2, r3, #28
 800e422:	d501      	bpl.n	800e428 <__swbuf_r+0x20>
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	b943      	cbnz	r3, 800e43a <__swbuf_r+0x32>
 800e428:	4621      	mov	r1, r4
 800e42a:	4628      	mov	r0, r5
 800e42c:	f000 f82a 	bl	800e484 <__swsetup_r>
 800e430:	b118      	cbz	r0, 800e43a <__swbuf_r+0x32>
 800e432:	f04f 37ff 	mov.w	r7, #4294967295
 800e436:	4638      	mov	r0, r7
 800e438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	6922      	ldr	r2, [r4, #16]
 800e43e:	1a98      	subs	r0, r3, r2
 800e440:	6963      	ldr	r3, [r4, #20]
 800e442:	b2f6      	uxtb	r6, r6
 800e444:	4283      	cmp	r3, r0
 800e446:	4637      	mov	r7, r6
 800e448:	dc05      	bgt.n	800e456 <__swbuf_r+0x4e>
 800e44a:	4621      	mov	r1, r4
 800e44c:	4628      	mov	r0, r5
 800e44e:	f7ff fd53 	bl	800def8 <_fflush_r>
 800e452:	2800      	cmp	r0, #0
 800e454:	d1ed      	bne.n	800e432 <__swbuf_r+0x2a>
 800e456:	68a3      	ldr	r3, [r4, #8]
 800e458:	3b01      	subs	r3, #1
 800e45a:	60a3      	str	r3, [r4, #8]
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	6022      	str	r2, [r4, #0]
 800e462:	701e      	strb	r6, [r3, #0]
 800e464:	6962      	ldr	r2, [r4, #20]
 800e466:	1c43      	adds	r3, r0, #1
 800e468:	429a      	cmp	r2, r3
 800e46a:	d004      	beq.n	800e476 <__swbuf_r+0x6e>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	07db      	lsls	r3, r3, #31
 800e470:	d5e1      	bpl.n	800e436 <__swbuf_r+0x2e>
 800e472:	2e0a      	cmp	r6, #10
 800e474:	d1df      	bne.n	800e436 <__swbuf_r+0x2e>
 800e476:	4621      	mov	r1, r4
 800e478:	4628      	mov	r0, r5
 800e47a:	f7ff fd3d 	bl	800def8 <_fflush_r>
 800e47e:	2800      	cmp	r0, #0
 800e480:	d0d9      	beq.n	800e436 <__swbuf_r+0x2e>
 800e482:	e7d6      	b.n	800e432 <__swbuf_r+0x2a>

0800e484 <__swsetup_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4b29      	ldr	r3, [pc, #164]	@ (800e52c <__swsetup_r+0xa8>)
 800e488:	4605      	mov	r5, r0
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	460c      	mov	r4, r1
 800e48e:	b118      	cbz	r0, 800e498 <__swsetup_r+0x14>
 800e490:	6a03      	ldr	r3, [r0, #32]
 800e492:	b90b      	cbnz	r3, 800e498 <__swsetup_r+0x14>
 800e494:	f7fc f928 	bl	800a6e8 <__sinit>
 800e498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e49c:	0719      	lsls	r1, r3, #28
 800e49e:	d422      	bmi.n	800e4e6 <__swsetup_r+0x62>
 800e4a0:	06da      	lsls	r2, r3, #27
 800e4a2:	d407      	bmi.n	800e4b4 <__swsetup_r+0x30>
 800e4a4:	2209      	movs	r2, #9
 800e4a6:	602a      	str	r2, [r5, #0]
 800e4a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ac:	81a3      	strh	r3, [r4, #12]
 800e4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b2:	e033      	b.n	800e51c <__swsetup_r+0x98>
 800e4b4:	0758      	lsls	r0, r3, #29
 800e4b6:	d512      	bpl.n	800e4de <__swsetup_r+0x5a>
 800e4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ba:	b141      	cbz	r1, 800e4ce <__swsetup_r+0x4a>
 800e4bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4c0:	4299      	cmp	r1, r3
 800e4c2:	d002      	beq.n	800e4ca <__swsetup_r+0x46>
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f7fd ff0f 	bl	800c2e8 <_free_r>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e4d4:	81a3      	strh	r3, [r4, #12]
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	6063      	str	r3, [r4, #4]
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	f043 0308 	orr.w	r3, r3, #8
 800e4e4:	81a3      	strh	r3, [r4, #12]
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	b94b      	cbnz	r3, 800e4fe <__swsetup_r+0x7a>
 800e4ea:	89a3      	ldrh	r3, [r4, #12]
 800e4ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e4f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4f4:	d003      	beq.n	800e4fe <__swsetup_r+0x7a>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 f883 	bl	800e604 <__smakebuf_r>
 800e4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e502:	f013 0201 	ands.w	r2, r3, #1
 800e506:	d00a      	beq.n	800e51e <__swsetup_r+0x9a>
 800e508:	2200      	movs	r2, #0
 800e50a:	60a2      	str	r2, [r4, #8]
 800e50c:	6962      	ldr	r2, [r4, #20]
 800e50e:	4252      	negs	r2, r2
 800e510:	61a2      	str	r2, [r4, #24]
 800e512:	6922      	ldr	r2, [r4, #16]
 800e514:	b942      	cbnz	r2, 800e528 <__swsetup_r+0xa4>
 800e516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e51a:	d1c5      	bne.n	800e4a8 <__swsetup_r+0x24>
 800e51c:	bd38      	pop	{r3, r4, r5, pc}
 800e51e:	0799      	lsls	r1, r3, #30
 800e520:	bf58      	it	pl
 800e522:	6962      	ldrpl	r2, [r4, #20]
 800e524:	60a2      	str	r2, [r4, #8]
 800e526:	e7f4      	b.n	800e512 <__swsetup_r+0x8e>
 800e528:	2000      	movs	r0, #0
 800e52a:	e7f7      	b.n	800e51c <__swsetup_r+0x98>
 800e52c:	2000019c 	.word	0x2000019c

0800e530 <_raise_r>:
 800e530:	291f      	cmp	r1, #31
 800e532:	b538      	push	{r3, r4, r5, lr}
 800e534:	4605      	mov	r5, r0
 800e536:	460c      	mov	r4, r1
 800e538:	d904      	bls.n	800e544 <_raise_r+0x14>
 800e53a:	2316      	movs	r3, #22
 800e53c:	6003      	str	r3, [r0, #0]
 800e53e:	f04f 30ff 	mov.w	r0, #4294967295
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e546:	b112      	cbz	r2, 800e54e <_raise_r+0x1e>
 800e548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e54c:	b94b      	cbnz	r3, 800e562 <_raise_r+0x32>
 800e54e:	4628      	mov	r0, r5
 800e550:	f000 f830 	bl	800e5b4 <_getpid_r>
 800e554:	4622      	mov	r2, r4
 800e556:	4601      	mov	r1, r0
 800e558:	4628      	mov	r0, r5
 800e55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55e:	f000 b817 	b.w	800e590 <_kill_r>
 800e562:	2b01      	cmp	r3, #1
 800e564:	d00a      	beq.n	800e57c <_raise_r+0x4c>
 800e566:	1c59      	adds	r1, r3, #1
 800e568:	d103      	bne.n	800e572 <_raise_r+0x42>
 800e56a:	2316      	movs	r3, #22
 800e56c:	6003      	str	r3, [r0, #0]
 800e56e:	2001      	movs	r0, #1
 800e570:	e7e7      	b.n	800e542 <_raise_r+0x12>
 800e572:	2100      	movs	r1, #0
 800e574:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e578:	4620      	mov	r0, r4
 800e57a:	4798      	blx	r3
 800e57c:	2000      	movs	r0, #0
 800e57e:	e7e0      	b.n	800e542 <_raise_r+0x12>

0800e580 <raise>:
 800e580:	4b02      	ldr	r3, [pc, #8]	@ (800e58c <raise+0xc>)
 800e582:	4601      	mov	r1, r0
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f7ff bfd3 	b.w	800e530 <_raise_r>
 800e58a:	bf00      	nop
 800e58c:	2000019c 	.word	0x2000019c

0800e590 <_kill_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	4d07      	ldr	r5, [pc, #28]	@ (800e5b0 <_kill_r+0x20>)
 800e594:	2300      	movs	r3, #0
 800e596:	4604      	mov	r4, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	4611      	mov	r1, r2
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	f7f5 fdaf 	bl	8004100 <_kill>
 800e5a2:	1c43      	adds	r3, r0, #1
 800e5a4:	d102      	bne.n	800e5ac <_kill_r+0x1c>
 800e5a6:	682b      	ldr	r3, [r5, #0]
 800e5a8:	b103      	cbz	r3, 800e5ac <_kill_r+0x1c>
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	bd38      	pop	{r3, r4, r5, pc}
 800e5ae:	bf00      	nop
 800e5b0:	200096f4 	.word	0x200096f4

0800e5b4 <_getpid_r>:
 800e5b4:	f7f5 bda2 	b.w	80040fc <_getpid>

0800e5b8 <__swhatbuf_r>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c0:	2900      	cmp	r1, #0
 800e5c2:	b096      	sub	sp, #88	@ 0x58
 800e5c4:	4615      	mov	r5, r2
 800e5c6:	461e      	mov	r6, r3
 800e5c8:	da0d      	bge.n	800e5e6 <__swhatbuf_r+0x2e>
 800e5ca:	89a3      	ldrh	r3, [r4, #12]
 800e5cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5d0:	f04f 0100 	mov.w	r1, #0
 800e5d4:	bf14      	ite	ne
 800e5d6:	2340      	movne	r3, #64	@ 0x40
 800e5d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5dc:	2000      	movs	r0, #0
 800e5de:	6031      	str	r1, [r6, #0]
 800e5e0:	602b      	str	r3, [r5, #0]
 800e5e2:	b016      	add	sp, #88	@ 0x58
 800e5e4:	bd70      	pop	{r4, r5, r6, pc}
 800e5e6:	466a      	mov	r2, sp
 800e5e8:	f000 f848 	bl	800e67c <_fstat_r>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	dbec      	blt.n	800e5ca <__swhatbuf_r+0x12>
 800e5f0:	9901      	ldr	r1, [sp, #4]
 800e5f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5fa:	4259      	negs	r1, r3
 800e5fc:	4159      	adcs	r1, r3
 800e5fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e602:	e7eb      	b.n	800e5dc <__swhatbuf_r+0x24>

0800e604 <__smakebuf_r>:
 800e604:	898b      	ldrh	r3, [r1, #12]
 800e606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e608:	079d      	lsls	r5, r3, #30
 800e60a:	4606      	mov	r6, r0
 800e60c:	460c      	mov	r4, r1
 800e60e:	d507      	bpl.n	800e620 <__smakebuf_r+0x1c>
 800e610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	6123      	str	r3, [r4, #16]
 800e618:	2301      	movs	r3, #1
 800e61a:	6163      	str	r3, [r4, #20]
 800e61c:	b003      	add	sp, #12
 800e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e620:	ab01      	add	r3, sp, #4
 800e622:	466a      	mov	r2, sp
 800e624:	f7ff ffc8 	bl	800e5b8 <__swhatbuf_r>
 800e628:	9f00      	ldr	r7, [sp, #0]
 800e62a:	4605      	mov	r5, r0
 800e62c:	4639      	mov	r1, r7
 800e62e:	4630      	mov	r0, r6
 800e630:	f7fa fa46 	bl	8008ac0 <_malloc_r>
 800e634:	b948      	cbnz	r0, 800e64a <__smakebuf_r+0x46>
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	059a      	lsls	r2, r3, #22
 800e63c:	d4ee      	bmi.n	800e61c <__smakebuf_r+0x18>
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	f043 0302 	orr.w	r3, r3, #2
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	e7e2      	b.n	800e610 <__smakebuf_r+0xc>
 800e64a:	89a3      	ldrh	r3, [r4, #12]
 800e64c:	6020      	str	r0, [r4, #0]
 800e64e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e652:	81a3      	strh	r3, [r4, #12]
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e65a:	b15b      	cbz	r3, 800e674 <__smakebuf_r+0x70>
 800e65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e660:	4630      	mov	r0, r6
 800e662:	f000 f81d 	bl	800e6a0 <_isatty_r>
 800e666:	b128      	cbz	r0, 800e674 <__smakebuf_r+0x70>
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	f023 0303 	bic.w	r3, r3, #3
 800e66e:	f043 0301 	orr.w	r3, r3, #1
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	431d      	orrs	r5, r3
 800e678:	81a5      	strh	r5, [r4, #12]
 800e67a:	e7cf      	b.n	800e61c <__smakebuf_r+0x18>

0800e67c <_fstat_r>:
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4d07      	ldr	r5, [pc, #28]	@ (800e69c <_fstat_r+0x20>)
 800e680:	2300      	movs	r3, #0
 800e682:	4604      	mov	r4, r0
 800e684:	4608      	mov	r0, r1
 800e686:	4611      	mov	r1, r2
 800e688:	602b      	str	r3, [r5, #0]
 800e68a:	f7f5 fd66 	bl	800415a <_fstat>
 800e68e:	1c43      	adds	r3, r0, #1
 800e690:	d102      	bne.n	800e698 <_fstat_r+0x1c>
 800e692:	682b      	ldr	r3, [r5, #0]
 800e694:	b103      	cbz	r3, 800e698 <_fstat_r+0x1c>
 800e696:	6023      	str	r3, [r4, #0]
 800e698:	bd38      	pop	{r3, r4, r5, pc}
 800e69a:	bf00      	nop
 800e69c:	200096f4 	.word	0x200096f4

0800e6a0 <_isatty_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4d06      	ldr	r5, [pc, #24]	@ (800e6bc <_isatty_r+0x1c>)
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	4608      	mov	r0, r1
 800e6aa:	602b      	str	r3, [r5, #0]
 800e6ac:	f7f5 fd5a 	bl	8004164 <_isatty>
 800e6b0:	1c43      	adds	r3, r0, #1
 800e6b2:	d102      	bne.n	800e6ba <_isatty_r+0x1a>
 800e6b4:	682b      	ldr	r3, [r5, #0]
 800e6b6:	b103      	cbz	r3, 800e6ba <_isatty_r+0x1a>
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	bd38      	pop	{r3, r4, r5, pc}
 800e6bc:	200096f4 	.word	0x200096f4

0800e6c0 <round>:
 800e6c0:	ec51 0b10 	vmov	r0, r1, d0
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e6ca:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800e6ce:	2a13      	cmp	r2, #19
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	dc1b      	bgt.n	800e70e <round+0x4e>
 800e6d6:	2a00      	cmp	r2, #0
 800e6d8:	da0b      	bge.n	800e6f2 <round+0x32>
 800e6da:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e6de:	3201      	adds	r2, #1
 800e6e0:	bf04      	itt	eq
 800e6e2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6e6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	e015      	b.n	800e71e <round+0x5e>
 800e6f2:	4c15      	ldr	r4, [pc, #84]	@ (800e748 <round+0x88>)
 800e6f4:	4114      	asrs	r4, r2
 800e6f6:	ea04 0601 	and.w	r6, r4, r1
 800e6fa:	4306      	orrs	r6, r0
 800e6fc:	d00f      	beq.n	800e71e <round+0x5e>
 800e6fe:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e702:	fa41 f202 	asr.w	r2, r1, r2
 800e706:	4413      	add	r3, r2
 800e708:	ea23 0304 	bic.w	r3, r3, r4
 800e70c:	e7ed      	b.n	800e6ea <round+0x2a>
 800e70e:	2a33      	cmp	r2, #51	@ 0x33
 800e710:	dd08      	ble.n	800e724 <round+0x64>
 800e712:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800e716:	d102      	bne.n	800e71e <round+0x5e>
 800e718:	4602      	mov	r2, r0
 800e71a:	f7f1 fdc7 	bl	80002ac <__adddf3>
 800e71e:	ec41 0b10 	vmov	d0, r0, r1
 800e722:	bd70      	pop	{r4, r5, r6, pc}
 800e724:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800e728:	f04f 34ff 	mov.w	r4, #4294967295
 800e72c:	40f4      	lsrs	r4, r6
 800e72e:	4204      	tst	r4, r0
 800e730:	d0f5      	beq.n	800e71e <round+0x5e>
 800e732:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800e736:	2201      	movs	r2, #1
 800e738:	408a      	lsls	r2, r1
 800e73a:	1952      	adds	r2, r2, r5
 800e73c:	bf28      	it	cs
 800e73e:	3301      	addcs	r3, #1
 800e740:	ea22 0204 	bic.w	r2, r2, r4
 800e744:	e7d2      	b.n	800e6ec <round+0x2c>
 800e746:	bf00      	nop
 800e748:	000fffff 	.word	0x000fffff

0800e74c <_init>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr

0800e758 <_fini>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	bf00      	nop
 800e75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e75e:	bc08      	pop	{r3}
 800e760:	469e      	mov	lr, r3
 800e762:	4770      	bx	lr
