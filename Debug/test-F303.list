
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000107c  0800bcd8  0800bcd8  0000ccd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd54  0800cd54  0000e240  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd54  0800cd54  0000dd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd5c  0800cd5c  0000e240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd5c  0800cd5c  0000dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd60  0800cd60  0000dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800cd64  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e240  2**0
                  CONTENTS
 10 .bss          00004b44  20000240  20000240  0000e240  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004d84  20004d84  0000e240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e25a  00000000  00000000  0000e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006061  00000000  00000000  0003c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f133  00000000  00000000  0004252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b98  00000000  00000000  00051660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ad4  00000000  00000000  000531f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006f10  00000000  00000000  00054ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002dd47  00000000  00000000  0005bbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4b2d  00000000  00000000  00089923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015e450  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062ac  00000000  00000000  0015e494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000048  00000000  00000000  00164740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcc0 	.word	0x0800bcc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800bcc0 	.word	0x0800bcc0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000bc8:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000bca:	4e0d      	ldr	r6, [pc, #52]	@ (8000c00 <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000bcc:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <sendRMCDataToFlash+0x3c>)
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000bd4:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <sendRMCDataToFlash+0x40>)
 8000bd8:	f005 fa44 	bl	8006064 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000bdc:	6830      	ldr	r0, [r6, #0]
 8000bde:	f04f 31ff 	mov.w	r1, #4294967295
 8000be2:	f005 fc59 	bl	8006498 <osMailAlloc>
 8000be6:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000be8:	b148      	cbz	r0, 8000bfe <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000bea:	4629      	mov	r1, r5
 8000bec:	2258      	movs	r2, #88	@ 0x58
 8000bee:	f008 fbc0 	bl	8009372 <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000bf2:	6830      	ldr	r0, [r6, #0]
 8000bf4:	4621      	mov	r1, r4
    }
}
 8000bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000bfa:	f005 bc52 	b.w	80064a2 <osMailPut>
}
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	200002c0 	.word	0x200002c0
 8000c04:	0800bdb8 	.word	0x0800bdb8
 8000c08:	2000118c 	.word	0x2000118c

08000c0c <getRMC>:


void getRMC(){
 8000c0c:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000c0e:	4c3d      	ldr	r4, [pc, #244]	@ (8000d04 <getRMC+0xf8>)
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000c16:	4b3c      	ldr	r3, [pc, #240]	@ (8000d08 <getRMC+0xfc>)
void getRMC(){
 8000c18:	b0a0      	sub	sp, #128	@ 0x80
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000c1e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000c22:	2924      	cmp	r1, #36	@ 0x24
 8000c24:	4615      	mov	r5, r2
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	d166      	bne.n	8000cfa <getRMC+0xee>
 8000c2c:	7819      	ldrb	r1, [r3, #0]
 8000c2e:	2947      	cmp	r1, #71	@ 0x47
 8000c30:	d163      	bne.n	8000cfa <getRMC+0xee>
 8000c32:	7859      	ldrb	r1, [r3, #1]
 8000c34:	294e      	cmp	r1, #78	@ 0x4e
 8000c36:	d160      	bne.n	8000cfa <getRMC+0xee>
 8000c38:	7899      	ldrb	r1, [r3, #2]
 8000c3a:	2952      	cmp	r1, #82	@ 0x52
 8000c3c:	d15d      	bne.n	8000cfa <getRMC+0xee>
 8000c3e:	78d9      	ldrb	r1, [r3, #3]
 8000c40:	294d      	cmp	r1, #77	@ 0x4d
 8000c42:	d15a      	bne.n	8000cfa <getRMC+0xee>
 8000c44:	7919      	ldrb	r1, [r3, #4]
 8000c46:	2943      	cmp	r1, #67	@ 0x43
 8000c48:	d157      	bne.n	8000cfa <getRMC+0xee>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000c4a:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000c4e:	3101      	adds	r1, #1
 8000c50:	29c8      	cmp	r1, #200	@ 0xc8
 8000c52:	d952      	bls.n	8000cfa <getRMC+0xee>
			isRMCExist = 1;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <getRMC+0x100>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000c56:	492e      	ldr	r1, [pc, #184]	@ (8000d10 <getRMC+0x104>)
 8000c58:	482e      	ldr	r0, [pc, #184]	@ (8000d14 <getRMC+0x108>)
			isRMCExist = 1;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	220c      	movs	r2, #12
 8000c64:	f005 f9fe 	bl	8006064 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000c68:	4a2b      	ldr	r2, [pc, #172]	@ (8000d18 <getRMC+0x10c>)
 8000c6a:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000c6c:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000c6e:	7859      	ldrb	r1, [r3, #1]
 8000c70:	290a      	cmp	r1, #10
 8000c72:	461d      	mov	r5, r3
 8000c74:	d13b      	bne.n	8000cee <getRMC+0xe2>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <getRMC+0x10c>)
	}
	if(isRMCExist == 1){
 8000c78:	4d24      	ldr	r5, [pc, #144]	@ (8000d0c <getRMC+0x100>)
		rmc_str[i] = 0;
 8000c7a:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4418      	add	r0, r3
 8000c82:	f007 fd52 	bl	800872a <memset>
	if(isRMCExist == 1){
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d109      	bne.n	8000ca0 <getRMC+0x94>
		//parse_rmc(rmc_str);
		//display_rmc_data(&huart1);
		if(rmc.isValid == 1){
 8000c8c:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <getRMC+0x110>)
 8000c8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d103      	bne.n	8000c9c <getRMC+0x90>
			sendRMCDataToFlash(&rmc);
 8000c94:	f7ff ff98 	bl	8000bc8 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
			getRMC_time = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	602b      	str	r3, [r5, #0]
	}
	if(getRMC_time >= 500){
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ca6:	db0f      	blt.n	8000cc8 <getRMC+0xbc>
		GPS_DISABLE();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2104      	movs	r1, #4
 8000cac:	481c      	ldr	r0, [pc, #112]	@ (8000d20 <getRMC+0x114>)
 8000cae:	f003 faa1 	bl	80041f4 <HAL_GPIO_WritePin>
		osDelay(500);
 8000cb2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb6:	f005 fb45 	bl	8006344 <osDelay>
		GPS_ENABLE();
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <getRMC+0x114>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	f003 fa98 	bl	80041f4 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6023      	str	r3, [r4, #0]
	}
	char output_elapsed[128];
	snprintf(output_elapsed, 128, "Elapsed Time blabla: %d\n", getRMC_time);
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <getRMC+0x118>)
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	4668      	mov	r0, sp
 8000cd0:	f007 fc68 	bl	80085a4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8000cd4:	4669      	mov	r1, sp
 8000cd6:	480f      	ldr	r0, [pc, #60]	@ (8000d14 <getRMC+0x108>)
 8000cd8:	f002 fad6 	bl	8003288 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000cdc:	490e      	ldr	r1, [pc, #56]	@ (8000d18 <getRMC+0x10c>)
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <getRMC+0x108>)
 8000ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	f005 f9bd 	bl	8006064 <HAL_UART_Transmit>
	
}
 8000cea:	b020      	add	sp, #128	@ 0x80
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
				rmc_str[idx] = gpsSentence[i];
 8000cee:	7829      	ldrb	r1, [r5, #0]
 8000cf0:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	3001      	adds	r0, #1
				i++;
 8000cf8:	e7b9      	b.n	8000c6e <getRMC+0x62>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000cfa:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000cfe:	d18e      	bne.n	8000c1e <getRMC+0x12>
	int length = 0;
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7b8      	b.n	8000c76 <getRMC+0x6a>
 8000d04:	2000025c 	.word	0x2000025c
 8000d08:	200002c4 	.word	0x200002c4
 8000d0c:	20000260 	.word	0x20000260
 8000d10:	0800bdce 	.word	0x0800bdce
 8000d14:	2000118c 	.word	0x2000118c
 8000d18:	20000ad4 	.word	0x20000ad4
 8000d1c:	20000268 	.word	0x20000268
 8000d20:	48000800 	.word	0x48000800
 8000d24:	0800bddb 	.word	0x0800bddb

08000d28 <StartGPS>:
void StartGPS(void const * argument)
{
 8000d28:	b530      	push	{r4, r5, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000d2a:	4939      	ldr	r1, [pc, #228]	@ (8000e10 <StartGPS+0xe8>)
 8000d2c:	4839      	ldr	r0, [pc, #228]	@ (8000e14 <StartGPS+0xec>)
{
 8000d2e:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000d30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d34:	220c      	movs	r2, #12
 8000d36:	f005 f995 	bl	8006064 <HAL_UART_Transmit>
	/* USER CODE BEGIN StartGPS */
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000d3a:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <StartGPS+0xf0>)
 8000d3c:	4937      	ldr	r1, [pc, #220]	@ (8000e1c <StartGPS+0xf4>)
 8000d3e:	4838      	ldr	r0, [pc, #224]	@ (8000e20 <StartGPS+0xf8>)
 8000d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d44:	f001 f9b0 	bl	80020a8 <RingBufferDmaU8_initUSARTRx>
	/* Infinite loop */
	rmc.tim.hour = 10;
 8000d48:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <StartGPS+0xfc>)
	rmc.lcation.EW = 'E';
	rmc.isValid = 1;
	rmc.date.Day = 9;
	rmc.date.Mon = 11;
	rmc.date.Yr = 2024;
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000d4a:	f8cd d00c 	str.w	sp, [sp, #12]
	rmc.tim.min = 12;
 8000d4e:	210a      	movs	r1, #10
 8000d50:	220c      	movs	r2, #12
 8000d52:	e9c3 1200 	strd	r1, r2, [r3]
	rmc.lcation.latitude = 20.998022;
 8000d56:	a12a      	add	r1, pc, #168	@ (adr r1, 8000e00 <StartGPS+0xd8>)
 8000d58:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.speed = 22.4;
 8000d5c:	4a32      	ldr	r2, [pc, #200]	@ (8000e28 <StartGPS+0x100>)
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.course = 30.5;
 8000d60:	4a32      	ldr	r2, [pc, #200]	@ (8000e2c <StartGPS+0x104>)
 8000d62:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000d64:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000d68:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000d6a:	a127      	add	r1, pc, #156	@ (adr r1, 8000e08 <StartGPS+0xe0>)
 8000d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000d74:	2245      	movs	r2, #69	@ 0x45
 8000d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
 8000d7a:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000d7c:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.sec = 0;
 8000d80:	2400      	movs	r4, #0
	rmc.isValid = 1;
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Mon = 11;
 8000d84:	2509      	movs	r5, #9
 8000d86:	220b      	movs	r2, #11
	rmc.date.Yr = 2024;
 8000d88:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
	rmc.date.Mon = 11;
 8000d8c:	e9c3 5204 	strd	r5, r2, [r3, #16]
	rmc.tim.sec = 0;
 8000d90:	609c      	str	r4, [r3, #8]
	rmc.date.Yr = 2024;
 8000d92:	6199      	str	r1, [r3, #24]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000d94:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000d96:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000d98:	4621      	mov	r1, r4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	9302      	str	r3, [sp, #8]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000d9e:	f005 fb50 	bl	8006442 <osMailCreate>
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <StartGPS+0x108>)
	int countSent = 0;
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000da4:	4d23      	ldr	r5, [pc, #140]	@ (8000e34 <StartGPS+0x10c>)
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000da6:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000da8:	4621      	mov	r1, r4
 8000daa:	481b      	ldr	r0, [pc, #108]	@ (8000e18 <StartGPS+0xf0>)
		HAL_Delay(1000);
		getRMC();
//		rmc.tim.sec += 2;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000dac:	4c19      	ldr	r4, [pc, #100]	@ (8000e14 <StartGPS+0xec>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000dae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000db2:	f007 fcba 	bl	800872a <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f003 fa19 	bl	80041f4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dc6:	f002 fac7 	bl	8003358 <HAL_Delay>
		getRMC();
 8000dca:	f7ff ff1f 	bl	8000c0c <getRMC>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	4919      	ldr	r1, [pc, #100]	@ (8000e38 <StartGPS+0x110>)
 8000dd4:	220d      	movs	r2, #13
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f005 f944 	bl	8006064 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4628      	mov	r0, r5
 8000de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de4:	f003 fa06 	bl	80041f4 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8000de8:	4620      	mov	r0, r4
 8000dea:	4914      	ldr	r1, [pc, #80]	@ (8000e3c <StartGPS+0x114>)
 8000dec:	f002 fa4c 	bl	8003288 <uart_transmit_string>
		HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df4:	f002 fab0 	bl	8003358 <HAL_Delay>
	while(1)
 8000df8:	e7dd      	b.n	8000db6 <StartGPS+0x8e>
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	5eaab042 	.word	0x5eaab042
 8000e04:	4034ff7e 	.word	0x4034ff7e
 8000e08:	48451330 	.word	0x48451330
 8000e0c:	405a72dd 	.word	0x405a72dd
 8000e10:	0800bdf4 	.word	0x0800bdf4
 8000e14:	2000118c 	.word	0x2000118c
 8000e18:	200002c4 	.word	0x200002c4
 8000e1c:	20001104 	.word	0x20001104
 8000e20:	20000ac4 	.word	0x20000ac4
 8000e24:	20000268 	.word	0x20000268
 8000e28:	41b33333 	.word	0x41b33333
 8000e2c:	41f40000 	.word	0x41f40000
 8000e30:	200002c0 	.word	0x200002c0
 8000e34:	48000800 	.word	0x48000800
 8000e38:	0800be01 	.word	0x0800be01
 8000e3c:	0800be0f 	.word	0x0800be0f

08000e40 <create_location_info_report>:
int is_set_time = 0;
int received_RMC = 0;
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};

JT808_LocationInfoReport create_location_info_report() {
 8000e40:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000e42:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000e44:	b093      	sub	sp, #76	@ 0x4c
 8000e46:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000e48:	462a      	mov	r2, r5
 8000e4a:	4906      	ldr	r1, [pc, #24]	@ (8000e64 <create_location_info_report+0x24>)
 8000e4c:	a801      	add	r0, sp, #4
 8000e4e:	f008 fa90 	bl	8009372 <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000e52:	462a      	mov	r2, r5
 8000e54:	a901      	add	r1, sp, #4
 8000e56:	4620      	mov	r0, r4
 8000e58:	f008 fa8b 	bl	8009372 <memcpy>
}
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	b013      	add	sp, #76	@ 0x4c
 8000e60:	bd30      	pop	{r4, r5, pc}
 8000e62:	bf00      	nop
 8000e64:	0800bcd8 	.word	0x0800bcd8

08000e68 <create_terminal_registration>:

JT808_TerminalRegistration create_terminal_registration(){
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000e6c:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000e6e:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000e70:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000e72:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000e76:	4622      	mov	r2, r4
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	4626      	mov	r6, r4
 8000e7e:	c603      	stmia	r6!, {r0, r1}
 8000e80:	3308      	adds	r3, #8
 8000e82:	42bb      	cmp	r3, r7
 8000e84:	4634      	mov	r4, r6
 8000e86:	d1f7      	bne.n	8000e78 <create_terminal_registration+0x10>
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x02, 0xD4, 0xC1, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000e90:	462a      	mov	r2, r5
 8000e92:	461c      	mov	r4, r3
 8000e94:	cc03      	ldmia	r4!, {r0, r1}
 8000e96:	42b4      	cmp	r4, r6
 8000e98:	6010      	str	r0, [r2, #0]
 8000e9a:	6051      	str	r1, [r2, #4]
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	f102 0208 	add.w	r2, r2, #8
 8000ea2:	d1f6      	bne.n	8000e92 <create_terminal_registration+0x2a>
 8000ea4:	6820      	ldr	r0, [r4, #0]
 8000ea6:	6010      	str	r0, [r2, #0]
}
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	b011      	add	sp, #68	@ 0x44
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	0800bd19 	.word	0x0800bd19

08000eb4 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000eb6:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000eb8:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000ebc:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ec4:	f043 0304 	orrne.w	r3, r3, #4
 8000ec8:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000eca:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000ece:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ed6:	f043 0308 	orrne.w	r3, r3, #8
 8000eda:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000b60 	.word	0x20000b60

08000ee4 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, size_t length) {
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4602      	mov	r2, r0
    uint8_t checksum = 0;
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8000ee8:	2301      	movs	r3, #1
    uint8_t checksum = 0;
 8000eea:	2000      	movs	r0, #0
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8000eec:	3902      	subs	r1, #2
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d800      	bhi.n	8000ef4 <calculate_checksum+0x10>
        checksum ^= data[i];
    }
    return checksum;
}
 8000ef2:	bd10      	pop	{r4, pc}
        checksum ^= data[i];
 8000ef4:	5cd4      	ldrb	r4, [r2, r3]
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8000ef6:	3301      	adds	r3, #1
        checksum ^= data[i];
 8000ef8:	4060      	eors	r0, r4
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8000efa:	e7f8      	b.n	8000eee <calculate_checksum+0xa>

08000efc <create_message_array>:

// Function to create and return the message array
uint8_t* create_message_array(JT808_TerminalRegistration *reg_msg, size_t *array_length) {
 8000efc:	b570      	push	{r4, r5, r6, lr}
    // Calculate the size of the array
    *array_length = sizeof(JT808_TerminalRegistration);
 8000efe:	263c      	movs	r6, #60	@ 0x3c
uint8_t* create_message_array(JT808_TerminalRegistration *reg_msg, size_t *array_length) {
 8000f00:	4604      	mov	r4, r0
    *array_length = sizeof(JT808_TerminalRegistration);
 8000f02:	600e      	str	r6, [r1, #0]
    
    // Allocate memory for the message array
    uint8_t *message_array = (uint8_t *)malloc(*array_length);
 8000f04:	4630      	mov	r0, r6
 8000f06:	f006 fd75 	bl	80079f4 <malloc>
    if (message_array == NULL) {
 8000f0a:	4605      	mov	r5, r0
 8000f0c:	b198      	cbz	r0, 8000f36 <create_message_array+0x3a>
        return NULL; // Return NULL if allocation fails
    }

    // Calculate checksum and assign it to the struct
    reg_msg->check_sum = calculate_checksum((uint8_t *)reg_msg, sizeof(JT808_TerminalRegistration));
 8000f0e:	4631      	mov	r1, r6
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff ffe7 	bl	8000ee4 <calculate_checksum>

    // Copy struct contents into the message array
    memcpy(message_array, reg_msg, *array_length);
 8000f16:	f104 0638 	add.w	r6, r4, #56	@ 0x38
    reg_msg->check_sum = calculate_checksum((uint8_t *)reg_msg, sizeof(JT808_TerminalRegistration));
 8000f1a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
    memcpy(message_array, reg_msg, *array_length);
 8000f1e:	4623      	mov	r3, r4
 8000f20:	462a      	mov	r2, r5
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	6859      	ldr	r1, [r3, #4]
 8000f26:	4614      	mov	r4, r2
 8000f28:	c403      	stmia	r4!, {r0, r1}
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	42b3      	cmp	r3, r6
 8000f2e:	4622      	mov	r2, r4
 8000f30:	d1f7      	bne.n	8000f22 <create_message_array+0x26>
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	6020      	str	r0, [r4, #0]

    return message_array;
}
 8000f36:	4628      	mov	r0, r5
 8000f38:	bd70      	pop	{r4, r5, r6, pc}

08000f3a <convert_location_info_to_array>:

uint8_t *convert_location_info_to_array(JT808_LocationInfoReport *location_info, size_t *array_length) {
 8000f3a:	b570      	push	{r4, r5, r6, lr}
    *array_length = sizeof(JT808_LocationInfoReport);
 8000f3c:	2641      	movs	r6, #65	@ 0x41
uint8_t *convert_location_info_to_array(JT808_LocationInfoReport *location_info, size_t *array_length) {
 8000f3e:	4605      	mov	r5, r0
    *array_length = sizeof(JT808_LocationInfoReport);
 8000f40:	600e      	str	r6, [r1, #0]
    uint8_t *message_array = malloc(*array_length);
 8000f42:	4630      	mov	r0, r6
 8000f44:	f006 fd56 	bl	80079f4 <malloc>
 8000f48:	4604      	mov	r4, r0

    if (message_array == NULL) {
 8000f4a:	b118      	cbz	r0, 8000f54 <convert_location_info_to_array+0x1a>
        return NULL;  // Allocation failed
    }

    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	4629      	mov	r1, r5
 8000f50:	f008 fa0f 	bl	8009372 <memcpy>

    return message_array;
}
 8000f54:	4620      	mov	r0, r4
 8000f56:	bd70      	pop	{r4, r5, r6, pc}

08000f58 <send_AT_command>:

void send_AT_command(const char *command) {
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000f5c:	f7ff f998 	bl	8000290 <strlen>
 8000f60:	4621      	mov	r1, r4
 8000f62:	b282      	uxth	r2, r0
}
 8000f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <send_AT_command+0x1c>)
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	f005 b879 	b.w	8006064 <HAL_UART_Transmit>
 8000f72:	bf00      	nop
 8000f74:	2000107c 	.word	0x2000107c

08000f78 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8000f78:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8000f7a:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <SIM_UART_ReInitializeRxDMA+0x28>)
 8000f7c:	f004 fe05 	bl	8005b8a <HAL_UART_Abort>
	if(ret != HAL_OK)
 8000f80:	b108      	cbz	r0, 8000f86 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 8000f82:	f001 fb48 	bl	8002616 <Error_Handler>
	}		
	HAL_Delay(50);	//	50 is OK
 8000f86:	2032      	movs	r0, #50	@ 0x32
 8000f88:	f002 f9e6 	bl	8003358 <HAL_Delay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8000f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <SIM_UART_ReInitializeRxDMA+0x2c>)
 8000f92:	4903      	ldr	r1, [pc, #12]	@ (8000fa0 <SIM_UART_ReInitializeRxDMA+0x28>)
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <SIM_UART_ReInitializeRxDMA+0x30>)
 8000f96:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f9a:	f001 b885 	b.w	80020a8 <RingBufferDmaU8_initUSARTRx>
 8000f9e:	bf00      	nop
 8000fa0:	2000107c 	.word	0x2000107c
 8000fa4:	20000bd0 	.word	0x20000bd0
 8000fa8:	20000bc0 	.word	0x20000bc0

08000fac <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8000fac:	f7ff b970 	b.w	8000290 <strlen>

08000fb0 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 8000fb0:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 8000fb2:	4c10      	ldr	r4, [pc, #64]	@ (8000ff4 <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000fb4:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000fb6:	4d11      	ldr	r5, [pc, #68]	@ (8000ffc <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 8000fb8:	b0a1      	sub	sp, #132	@ 0x84
 8000fba:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000fbc:	2180      	movs	r1, #128	@ 0x80
 8000fbe:	4668      	mov	r0, sp
 8000fc0:	f007 faf0 	bl	80085a4 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8000fc4:	4669      	mov	r1, sp
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f002 f95e 	bl	8003288 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f7ff ffed 	bl	8000fac <find_length>
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	b282      	uxth	r2, r0
 8000fd8:	4629      	mov	r1, r5
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f005 f842 	bl	8006064 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 8000fe0:	4907      	ldr	r1, [pc, #28]	@ (8001000 <receive_response+0x50>)
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f002 f950 	bl	8003288 <uart_transmit_string>
	osDelay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fec:	f005 f9aa 	bl	8006344 <osDelay>
}
 8000ff0:	b021      	add	sp, #132	@ 0x84
 8000ff2:	bd30      	pop	{r4, r5, pc}
 8000ff4:	2000118c 	.word	0x2000118c
 8000ff8:	0800be12 	.word	0x0800be12
 8000ffc:	20000bd0 	.word	0x20000bd0
 8001000:	0800be10 	.word	0x0800be10

08001004 <init_SIM_module>:

void init_SIM_module() {
 8001004:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 8001006:	4c0b      	ldr	r4, [pc, #44]	@ (8001034 <init_SIM_module+0x30>)
 8001008:	2201      	movs	r2, #1
 800100a:	4611      	mov	r1, r2
 800100c:	4620      	mov	r0, r4
 800100e:	f003 f8f1 	bl	80041f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4620      	mov	r0, r4
 8001018:	f003 f8ec 	bl	80041f4 <HAL_GPIO_WritePin>
	osDelay(1000);
 800101c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001020:	f005 f990 	bl	8006344 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001024:	4620      	mov	r0, r4
 8001026:	2201      	movs	r2, #1
}
 8001028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800102c:	2102      	movs	r1, #2
 800102e:	f003 b8e1 	b.w	80041f4 <HAL_GPIO_WritePin>
 8001032:	bf00      	nop
 8001034:	48000800 	.word	0x48000800

08001038 <reboot_SIM_module>:

void reboot_SIM_module(){
 8001038:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800103a:	4c11      	ldr	r4, [pc, #68]	@ (8001080 <reboot_SIM_module+0x48>)
 800103c:	2200      	movs	r2, #0
 800103e:	2102      	movs	r1, #2
 8001040:	4620      	mov	r0, r4
 8001042:	f003 f8d7 	bl	80041f4 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001046:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800104a:	f005 f97b 	bl	8006344 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	4620      	mov	r0, r4
 8001054:	f003 f8ce 	bl	80041f4 <HAL_GPIO_WritePin>
	osDelay(2000);
 8001058:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105c:	f005 f972 	bl	8006344 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2102      	movs	r1, #2
 8001064:	4620      	mov	r0, r4
 8001066:	f003 f8c5 	bl	80041f4 <HAL_GPIO_WritePin>
	osDelay(1500);
 800106a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800106e:	f005 f969 	bl	8006344 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001072:	4620      	mov	r0, r4
 8001074:	2201      	movs	r2, #1
}
 8001076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800107a:	2102      	movs	r1, #2
 800107c:	f003 b8ba 	b.w	80041f4 <HAL_GPIO_WritePin>
 8001080:	48000800 	.word	0x48000800

08001084 <first_check_SIM>:

//AT
int first_check_SIM()
{
 8001084:	b508      	push	{r3, lr}
	const char *substring = "READY";
	int receive_OK = 0;
	if(strstr((char *) response, substring) != NULL)
 8001086:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <first_check_SIM+0x34>)
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <first_check_SIM+0x38>)
 800108a:	f007 fb68 	bl	800875e <strstr>
 800108e:	b188      	cbz	r0, 80010b4 <first_check_SIM+0x30>
	{
		send_AT_command(FIRST_CHECK);
 8001090:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <first_check_SIM+0x3c>)
 8001092:	f7ff ff61 	bl	8000f58 <send_AT_command>
		receive_response("First check SIM MODULE\n");
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <first_check_SIM+0x40>)
 8001098:	f7ff ff8a 	bl	8000fb0 <receive_response>
		osDelay(100);
 800109c:	2064      	movs	r0, #100	@ 0x64
 800109e:	f005 f951 	bl	8006344 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80010a2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010a6:	2100      	movs	r1, #0
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <first_check_SIM+0x38>)
 80010aa:	f007 fb3e 	bl	800872a <memset>
		SIM_UART_ReInitializeRxDMA();
 80010ae:	f7ff ff63 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
 80010b2:	2001      	movs	r0, #1
		receive_OK = 1;
	}
	return receive_OK;
}
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop
 80010b8:	0800be2b 	.word	0x0800be2b
 80010bc:	20000bd0 	.word	0x20000bd0
 80010c0:	0800be31 	.word	0x0800be31
 80010c4:	0800be36 	.word	0x0800be36

080010c8 <set_time>:

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	4606      	mov	r6, r0
 80010ce:	460d      	mov	r5, r1
 80010d0:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 80010d2:	2100      	movs	r1, #0
 80010d4:	2211      	movs	r2, #17
 80010d6:	f10d 0007 	add.w	r0, sp, #7
 80010da:	f007 fb26 	bl	800872a <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010de:	4808      	ldr	r0, [pc, #32]	@ (8001100 <set_time+0x38>)
	sTime.Hours = hr;
 80010e0:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010e4:	2200      	movs	r2, #0
 80010e6:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 80010e8:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 80010ec:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010f0:	f003 fdae 	bl	8004c50 <HAL_RTC_SetTime>
 80010f4:	b108      	cbz	r0, 80010fa <set_time+0x32>
	{
		Error_Handler();
 80010f6:	f001 fa8e 	bl	8002616 <Error_Handler>
	}
}
 80010fa:	b006      	add	sp, #24
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
 80010fe:	bf00      	nop
 8001100:	20001328 	.word	0x20001328

08001104 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8001104:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8001106:	2300      	movs	r3, #0
	sDate.Month = month;
 8001108:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 800110c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8001110:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001114:	461a      	mov	r2, r3
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <set_date+0x38>)
	RTC_DateTypeDef sDate = {0};
 8001118:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800111c:	a901      	add	r1, sp, #4
 800111e:	f003 fdf1 	bl	8004d04 <HAL_RTC_SetDate>
 8001122:	b108      	cbz	r0, 8001128 <set_date+0x24>
	{
		Error_Handler();
 8001124:	f001 fa77 	bl	8002616 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <set_date+0x38>)
 800112a:	f242 3245 	movw	r2, #9029	@ 0x2345
 800112e:	2101      	movs	r1, #1
 8001130:	f003 fe78 	bl	8004e24 <HAL_RTCEx_BKUPWrite>
}
 8001134:	b003      	add	sp, #12
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop
 800113c:	20001328 	.word	0x20001328

08001140 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001140:	220a      	movs	r2, #10
 8001142:	fb90 f3f2 	sdiv	r3, r0, r2
 8001146:	fb02 0013 	mls	r0, r2, r3, r0
}
 800114a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800114e:	4770      	bx	lr

08001150 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001150:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001152:	4d43      	ldr	r5, [pc, #268]	@ (8001260 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001154:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001156:	69a8      	ldr	r0, [r5, #24]
 8001158:	f7ff fff2 	bl	8001140 <convert_dec_to_hex_value>
 800115c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001160:	6968      	ldr	r0, [r5, #20]
 8001162:	f7ff ffed 	bl	8001140 <convert_dec_to_hex_value>
 8001166:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800116a:	6928      	ldr	r0, [r5, #16]
 800116c:	f7ff ffe8 	bl	8001140 <convert_dec_to_hex_value>
 8001170:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001174:	6828      	ldr	r0, [r5, #0]
 8001176:	f7ff ffe3 	bl	8001140 <convert_dec_to_hex_value>
 800117a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800117e:	6868      	ldr	r0, [r5, #4]
 8001180:	f7ff ffde 	bl	8001140 <convert_dec_to_hex_value>
 8001184:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001188:	68a8      	ldr	r0, [r5, #8]
 800118a:	f7ff ffd9 	bl	8001140 <convert_dec_to_hex_value>
 800118e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001192:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001196:	a32e      	add	r3, pc, #184	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa3c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011a0:	ec41 0b10 	vmov	d0, r0, r1
 80011a4:	f00a fd46 	bl	800bc34 <round>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f7ff fce4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b0:	a327      	add	r3, pc, #156	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011b6:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011c0:	ec41 0b10 	vmov	d0, r0, r1
 80011c4:	f00a fd36 	bl	800bc34 <round>
 80011c8:	ec51 0b10 	vmov	r0, r1, d0
 80011cc:	f7ff fcd4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011d0:	0e33      	lsrs	r3, r6, #24
 80011d2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011d4:	1433      	asrs	r3, r6, #16
 80011d6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011d8:	1233      	asrs	r3, r6, #8
 80011da:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011dc:	0e03      	lsrs	r3, r0, #24
 80011de:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011e0:	1403      	asrs	r3, r0, #16
 80011e2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011e4:	1203      	asrs	r3, r0, #8
 80011e6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011e8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011ea:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011ec:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011f0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9b4 	bl	8000568 <__aeabi_f2d>
 8001200:	a315      	add	r3, pc, #84	@ (adr r3, 8001258 <save_rmc_to_location_info+0x108>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa07 	bl	8000618 <__aeabi_dmul>
 800120a:	ec41 0b10 	vmov	d0, r0, r1
 800120e:	f00a fd11 	bl	800bc34 <round>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	f7ff fcaf 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800121a:	1203      	asrs	r3, r0, #8
 800121c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800121e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001222:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	ec41 0b10 	vmov	d0, r0, r1
 800122c:	f00a fd02 	bl	800bc34 <round>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	f7ff fca0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001238:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800123a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800123e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(&(location_info->status));
 8001242:	f104 0011 	add.w	r0, r4, #17
}
 8001246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(&(location_info->status));
 800124a:	f7ff be33 	b.w	8000eb4 <set_status_bit>
 800124e:	bf00      	nop
 8001250:	00000000 	.word	0x00000000
 8001254:	412e8480 	.word	0x412e8480
 8001258:	c083126f 	.word	0xc083126f
 800125c:	3ffda1ca 	.word	0x3ffda1ca
 8001260:	20000b60 	.word	0x20000b60

08001264 <get_RTC_time_date>:

void get_RTC_time_date()
{
 8001264:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001266:	4c29      	ldr	r4, [pc, #164]	@ (800130c <get_RTC_time_date+0xa8>)
{
 8001268:	b0b3      	sub	sp, #204	@ 0xcc
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800126a:	a90d      	add	r1, sp, #52	@ 0x34
 800126c:	2200      	movs	r2, #0
 800126e:	4620      	mov	r0, r4
 8001270:	f003 fd98 	bl	8004da4 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001274:	a906      	add	r1, sp, #24
 8001276:	2200      	movs	r2, #0
 8001278:	4620      	mov	r0, r4
 800127a:	f003 fdb6 	bl	8004dea <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800127e:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8001282:	4c23      	ldr	r4, [pc, #140]	@ (8001310 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <get_RTC_time_date+0xb0>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	210a      	movs	r1, #10
 8001290:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8001294:	a807      	add	r0, sp, #28
 8001296:	f007 f985 	bl	80085a4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 800129a:	a907      	add	r1, sp, #28
 800129c:	4620      	mov	r0, r4
 800129e:	f001 fff3 	bl	8003288 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 80012a2:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <get_RTC_time_date+0xb4>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	210c      	movs	r1, #12
 80012b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80012b6:	a80a      	add	r0, sp, #40	@ 0x28
 80012b8:	f007 f974 	bl	80085a4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80012bc:	a90a      	add	r1, sp, #40	@ 0x28
 80012be:	4620      	mov	r0, r4
 80012c0:	f001 ffe2 	bl	8003288 <uart_transmit_string>
	
	rmc_jt.date.Yr = gDate.Year;
 80012c4:	4a15      	ldr	r2, [pc, #84]	@ (800131c <get_RTC_time_date+0xb8>)
	rmc_jt.date.Mon = gDate.Month;
	rmc_jt.date.Day = gDate.Date;
 80012c6:	f89d 001a 	ldrb.w	r0, [sp, #26]
	rmc_jt.tim.hour = gTime.Hours;
 80012ca:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
	rmc_jt.tim.min = gTime.Minutes;
 80012ce:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc_jt.tim.sec = gTime.Seconds;
 80012d2:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc_jt.date.Mon = gDate.Month;
 80012d6:	f89d 1019 	ldrb.w	r1, [sp, #25]
	rmc_jt.date.Yr = gDate.Year;
 80012da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80012de:	6193      	str	r3, [r2, #24]
	rmc_jt.date.Mon = gDate.Month;
 80012e0:	6151      	str	r1, [r2, #20]
	rmc_jt.date.Day = gDate.Date;
 80012e2:	6110      	str	r0, [r2, #16]
	rmc_jt.tim.hour = gTime.Hours;
 80012e4:	6015      	str	r5, [r2, #0]
	rmc_jt.tim.min = gTime.Minutes;
 80012e6:	6056      	str	r6, [r2, #4]
	rmc_jt.tim.sec = gTime.Seconds;
 80012e8:	6097      	str	r7, [r2, #8]
	
	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80012ea:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80012ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <get_RTC_time_date+0xbc>)
 80012f0:	9100      	str	r1, [sp, #0]
 80012f2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	a812      	add	r0, sp, #72	@ 0x48
 80012fa:	f007 f953 	bl	80085a4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 80012fe:	a912      	add	r1, sp, #72	@ 0x48
 8001300:	4620      	mov	r0, r4
 8001302:	f001 ffc1 	bl	8003288 <uart_transmit_string>
}
 8001306:	b033      	add	sp, #204	@ 0xcc
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	20001328 	.word	0x20001328
 8001310:	2000118c 	.word	0x2000118c
 8001314:	0800bef1 	.word	0x0800bef1
 8001318:	0800be4e 	.word	0x0800be4e
 800131c:	20000b60 	.word	0x20000b60
 8001320:	0800be60 	.word	0x0800be60

08001324 <extract_time>:


void extract_time(uint8_t *message){
 8001324:	b570      	push	{r4, r5, r6, lr}
    int year, month, day, hour, minute, second;
    uint8_t output_buffer[128];
    // Search for the +CTZE line and extract date and time
    char *tz_line = strstr((char*) message, "+CTZE");
 8001326:	492f      	ldr	r1, [pc, #188]	@ (80013e4 <extract_time+0xc0>)
void extract_time(uint8_t *message){
 8001328:	b0ac      	sub	sp, #176	@ 0xb0
    char *tz_line = strstr((char*) message, "+CTZE");
 800132a:	f007 fa18 	bl	800875e <strstr>
    if (tz_line){
 800132e:	2800      	cmp	r0, #0
 8001330:	d052      	beq.n	80013d8 <extract_time+0xb4>
        sscanf(tz_line, "+CTZE: \"+28\",0,\"%d/%d/%d,%d:%d:%d\"", &year, &month, &day, &hour, &minute, &second);
 8001332:	ab0b      	add	r3, sp, #44	@ 0x2c
 8001334:	9303      	str	r3, [sp, #12]
 8001336:	ab0a      	add	r3, sp, #40	@ 0x28
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	ab09      	add	r3, sp, #36	@ 0x24
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	ab08      	add	r3, sp, #32
 8001340:	4929      	ldr	r1, [pc, #164]	@ (80013e8 <extract_time+0xc4>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	aa06      	add	r2, sp, #24
 8001346:	ab07      	add	r3, sp, #28
 8001348:	f007 f980 	bl	800864c <siscanf>
        
        // Adjust for GMT+8 (originally in UTC+8, so add 1 hour)
        hour += 8;
 800134c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        
		rmc_jt.date.Yr = year-2000;
		rmc_jt.date.Mon = month;
		rmc_jt.date.Day = day;
		rmc_jt.tim.hour = hour;
		rmc_jt.tim.min = minute;
 800134e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_jt.tim.sec = second;
 8001350:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
		rmc_jt.date.Mon = month;
 8001352:	9907      	ldr	r1, [sp, #28]
        hour += 8;
 8001354:	f103 0208 	add.w	r2, r3, #8
        if (hour >= 24) {
 8001358:	2a17      	cmp	r2, #23
            hour -= 24;
 800135a:	bfc3      	ittte	gt
 800135c:	3b10      	subgt	r3, #16
 800135e:	9309      	strgt	r3, [sp, #36]	@ 0x24
            day += 1;
 8001360:	9b08      	ldrgt	r3, [sp, #32]
        hour += 8;
 8001362:	9209      	strle	r2, [sp, #36]	@ 0x24
            day += 1;
 8001364:	bfc4      	itt	gt
 8001366:	3301      	addgt	r3, #1
 8001368:	9308      	strgt	r3, [sp, #32]
		rmc_jt.date.Yr = year-2000;
 800136a:	9b06      	ldr	r3, [sp, #24]
 800136c:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <extract_time+0xc8>)
		rmc_jt.date.Day = day;
 800136e:	9808      	ldr	r0, [sp, #32]
		rmc_jt.tim.hour = hour;
 8001370:	9c09      	ldr	r4, [sp, #36]	@ 0x24
		rmc_jt.date.Mon = month;
 8001372:	6151      	str	r1, [r2, #20]
		rmc_jt.date.Yr = year-2000;
 8001374:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001378:	6193      	str	r3, [r2, #24]
		rmc_jt.date.Day = day;
 800137a:	6110      	str	r0, [r2, #16]
		rmc_jt.tim.hour = hour;
 800137c:	6014      	str	r4, [r2, #0]
		rmc_jt.tim.min = minute;
 800137e:	6055      	str	r5, [r2, #4]
		rmc_jt.tim.sec = second;
 8001380:	6096      	str	r6, [r2, #8]
        snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8001382:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <extract_time+0xcc>)
 8001384:	9100      	str	r1, [sp, #0]
 8001386:	e9cd 0401 	strd	r0, r4, [sp, #4]
 800138a:	2180      	movs	r1, #128	@ 0x80
 800138c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8001390:	a80c      	add	r0, sp, #48	@ 0x30
 8001392:	f007 f907 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 8001396:	4917      	ldr	r1, [pc, #92]	@ (80013f4 <extract_time+0xd0>)
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <extract_time+0xd4>)
 800139a:	f001 ff75 	bl	8003288 <uart_transmit_string>
		set_time(hour, minute, second);
 800139e:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80013a2:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 80013a6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80013aa:	f7ff fe8d 	bl	80010c8 <set_time>
		set_date(year-2000, month, day);
 80013ae:	9806      	ldr	r0, [sp, #24]
 80013b0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80013b4:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80013b8:	3030      	adds	r0, #48	@ 0x30
 80013ba:	b2c0      	uxtb	r0, r0
 80013bc:	f7ff fea2 	bl	8001104 <set_date>
		uart_transmit_string(&huart1, (uint8_t*) "\n");
 80013c0:	490e      	ldr	r1, [pc, #56]	@ (80013fc <extract_time+0xd8>)
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <extract_time+0xd4>)
 80013c4:	f001 ff60 	bl	8003288 <uart_transmit_string>
		get_RTC_time_date();
 80013c8:	f7ff ff4c 	bl	8001264 <get_RTC_time_date>
		uart_transmit_string(&huart1, output_buffer);
	} else {
		snprintf((char*)output_buffer, 128, "Time information not found");
		uart_transmit_string(&huart1, output_buffer);
 80013cc:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <extract_time+0xd4>)
 80013ce:	a90c      	add	r1, sp, #48	@ 0x30
 80013d0:	f001 ff5a 	bl	8003288 <uart_transmit_string>
	}
}
 80013d4:	b02c      	add	sp, #176	@ 0xb0
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
		snprintf((char*)output_buffer, 128, "Time information not found");
 80013d8:	4909      	ldr	r1, [pc, #36]	@ (8001400 <extract_time+0xdc>)
 80013da:	a80c      	add	r0, sp, #48	@ 0x30
 80013dc:	f007 ffc1 	bl	8009362 <strcpy>
 80013e0:	e7f4      	b.n	80013cc <extract_time+0xa8>
 80013e2:	bf00      	nop
 80013e4:	0800be9e 	.word	0x0800be9e
 80013e8:	0800bea4 	.word	0x0800bea4
 80013ec:	20000b60 	.word	0x20000b60
 80013f0:	0800bec7 	.word	0x0800bec7
 80013f4:	0800bf01 	.word	0x0800bf01
 80013f8:	2000118c 	.word	0x2000118c
 80013fc:	0800be10 	.word	0x0800be10
 8001400:	0800bf0c 	.word	0x0800bf0c

08001404 <extract_last_12_digits_bcd>:

void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 8001404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001406:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001408:	4604      	mov	r4, r0
 800140a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800140e:	b1cb      	cbz	r3, 8001444 <extract_last_12_digits_bcd+0x40>
 8001410:	2b41      	cmp	r3, #65	@ 0x41
 8001412:	d1f9      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
 8001414:	7803      	ldrb	r3, [r0, #0]
 8001416:	2b54      	cmp	r3, #84	@ 0x54
 8001418:	d1f6      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
 800141a:	7843      	ldrb	r3, [r0, #1]
 800141c:	2b2b      	cmp	r3, #43	@ 0x2b
 800141e:	d1f3      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
 8001420:	7883      	ldrb	r3, [r0, #2]
 8001422:	2b43      	cmp	r3, #67	@ 0x43
 8001424:	d1f0      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 8001426:	78c3      	ldrb	r3, [r0, #3]
 8001428:	2b47      	cmp	r3, #71	@ 0x47
 800142a:	d1ed      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
 800142c:	7903      	ldrb	r3, [r0, #4]
 800142e:	2b53      	cmp	r3, #83	@ 0x53
 8001430:	d1ea      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
 8001432:	7943      	ldrb	r3, [r0, #5]
 8001434:	2b4e      	cmp	r3, #78	@ 0x4e
 8001436:	d1e7      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001438:	7983      	ldrb	r3, [r0, #6]
 800143a:	2b3d      	cmp	r3, #61	@ 0x3d
 800143c:	d1e4      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 800143e:	79c3      	ldrb	r3, [r0, #7]
 8001440:	2b31      	cmp	r3, #49	@ 0x31
 8001442:	d1e1      	bne.n	8001408 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 8001444:	4922      	ldr	r1, [pc, #136]	@ (80014d0 <extract_last_12_digits_bcd+0xcc>)
 8001446:	4823      	ldr	r0, [pc, #140]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 8001448:	f001 ff1e 	bl	8003288 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 800144c:	4821      	ldr	r0, [pc, #132]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 800144e:	4621      	mov	r1, r4
 8001450:	f001 ff1a 	bl	8003288 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 8001454:	7823      	ldrb	r3, [r4, #0]
 8001456:	b96b      	cbnz	r3, 8001474 <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 8001458:	491f      	ldr	r1, [pc, #124]	@ (80014d8 <extract_last_12_digits_bcd+0xd4>)
 800145a:	481e      	ldr	r0, [pc, #120]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 800145c:	f001 ff14 	bl	8003288 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 8001460:	4629      	mov	r1, r5
 8001462:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 8001464:	f001 ff10 	bl	8003288 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001468:	491c      	ldr	r1, [pc, #112]	@ (80014dc <extract_last_12_digits_bcd+0xd8>)
 800146a:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 800146c:	f001 ff0c 	bl	8003288 <uart_transmit_string>
}
 8001470:	b004      	add	sp, #16
 8001472:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 8001474:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 8001476:	7821      	ldrb	r1, [r4, #0]
 8001478:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800147c:	4623      	mov	r3, r4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	3401      	adds	r4, #1
 8001482:	b109      	cbz	r1, 8001488 <extract_last_12_digits_bcd+0x84>
 8001484:	2a09      	cmp	r2, #9
 8001486:	d8f6      	bhi.n	8001476 <extract_last_12_digits_bcd+0x72>
 8001488:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 800148a:	4616      	mov	r6, r2
 800148c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001490:	3930      	subs	r1, #48	@ 0x30
 8001492:	2909      	cmp	r1, #9
 8001494:	d9f9      	bls.n	800148a <extract_last_12_digits_bcd+0x86>
 8001496:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 8001498:	4911      	ldr	r1, [pc, #68]	@ (80014e0 <extract_last_12_digits_bcd+0xdc>)
 800149a:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <extract_last_12_digits_bcd+0xd0>)
 800149c:	f001 fef4 	bl	8003288 <uart_transmit_string>
		snprintf(output_buffer, 10, "%d", digit_count);
 80014a0:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <extract_last_12_digits_bcd+0xe0>)
 80014a2:	4623      	mov	r3, r4
 80014a4:	210a      	movs	r1, #10
 80014a6:	a801      	add	r0, sp, #4
 80014a8:	f007 f87c 	bl	80085a4 <sniprintf>
		if (digit_count >= 12) {
 80014ac:	2c0b      	cmp	r4, #11
 80014ae:	d9d3      	bls.n	8001458 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80014b0:	f1a6 030c 	sub.w	r3, r6, #12
 80014b4:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80014b6:	7819      	ldrb	r1, [r3, #0]
 80014b8:	785a      	ldrb	r2, [r3, #1]
 80014ba:	3930      	subs	r1, #48	@ 0x30
 80014bc:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80014be:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80014c0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80014c4:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80014c6:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 80014ca:	d1f4      	bne.n	80014b6 <extract_last_12_digits_bcd+0xb2>
 80014cc:	e7c4      	b.n	8001458 <extract_last_12_digits_bcd+0x54>
 80014ce:	bf00      	nop
 80014d0:	0800bf27 	.word	0x0800bf27
 80014d4:	2000118c 	.word	0x2000118c
 80014d8:	0800bf49 	.word	0x0800bf49
 80014dc:	0800c73d 	.word	0x0800c73d
 80014e0:	0800bf64 	.word	0x0800bf64
 80014e4:	0800bf8c 	.word	0x0800bf8c

080014e8 <check_SIM_ready>:
int check_SIM_ready(){
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 20;
	int count_check_sim = 0;
 // Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
 80014ea:	4884      	ldr	r0, [pc, #528]	@ (80016fc <check_SIM_ready+0x214>)
	osDelay(100);
	while(strstr((char *) response, "PB DONE") == NULL){
 80014ec:	4e84      	ldr	r6, [pc, #528]	@ (8001700 <check_SIM_ready+0x218>)
 80014ee:	4d85      	ldr	r5, [pc, #532]	@ (8001704 <check_SIM_ready+0x21c>)
		if(!is_set_time){
 80014f0:	4f85      	ldr	r7, [pc, #532]	@ (8001708 <check_SIM_ready+0x220>)
	send_AT_command(CHECK_SIM_READY);
 80014f2:	f7ff fd31 	bl	8000f58 <send_AT_command>
	osDelay(100);
 80014f6:	2064      	movs	r0, #100	@ 0x64
 80014f8:	f004 ff24 	bl	8006344 <osDelay>
	while(strstr((char *) response, "PB DONE") == NULL){
 80014fc:	2414      	movs	r4, #20
 80014fe:	4631      	mov	r1, r6
 8001500:	4628      	mov	r0, r5
 8001502:	f007 f92c 	bl	800875e <strstr>
 8001506:	2800      	cmp	r0, #0
 8001508:	f000 80db 	beq.w	80016c2 <check_SIM_ready+0x1da>
		count_check_sim++;
		if (count_check_sim >= TIME_LIMIT){
			return 0;
		}
	}
	receive_response("Check SIM\n");
 800150c:	487f      	ldr	r0, [pc, #508]	@ (800170c <check_SIM_ready+0x224>)
	SIM_UART_ReInitializeRxDMA();
	osDelay(100);

	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 800150e:	4d80      	ldr	r5, [pc, #512]	@ (8001710 <check_SIM_ready+0x228>)
 8001510:	4c7c      	ldr	r4, [pc, #496]	@ (8001704 <check_SIM_ready+0x21c>)
		receive_response("Check SIM CCID\n");
 8001512:	4e80      	ldr	r6, [pc, #512]	@ (8001714 <check_SIM_ready+0x22c>)
	receive_response("Check SIM\n");
 8001514:	f7ff fd4c 	bl	8000fb0 <receive_response>
	osDelay(100);
 8001518:	2064      	movs	r0, #100	@ 0x64
 800151a:	f004 ff13 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800151e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001522:	2100      	movs	r1, #0
 8001524:	4877      	ldr	r0, [pc, #476]	@ (8001704 <check_SIM_ready+0x21c>)
 8001526:	f007 f900 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 800152a:	f7ff fd25 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 800152e:	2064      	movs	r0, #100	@ 0x64
 8001530:	f004 ff08 	bl	8006344 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001534:	4878      	ldr	r0, [pc, #480]	@ (8001718 <check_SIM_ready+0x230>)
 8001536:	f7ff fd0f 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800153a:	4629      	mov	r1, r5
 800153c:	4620      	mov	r0, r4
 800153e:	f007 f90e 	bl	800875e <strstr>
 8001542:	2800      	cmp	r0, #0
 8001544:	f000 80ca 	beq.w	80016dc <check_SIM_ready+0x1f4>
	}
	osDelay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f004 fefb 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800154e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001552:	2100      	movs	r1, #0
 8001554:	486b      	ldr	r0, [pc, #428]	@ (8001704 <check_SIM_ready+0x21c>)
	SIM_UART_ReInitializeRxDMA();

	//GET IMEI
	send_AT_command(GET_IMEI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001556:	4d71      	ldr	r5, [pc, #452]	@ (800171c <check_SIM_ready+0x234>)
 8001558:	4c6a      	ldr	r4, [pc, #424]	@ (8001704 <check_SIM_ready+0x21c>)
		receive_response("Check IMEI-0\n");
 800155a:	4e71      	ldr	r6, [pc, #452]	@ (8001720 <check_SIM_ready+0x238>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800155c:	f007 f8e5 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001560:	f7ff fd0a 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_IMEI);
 8001564:	486f      	ldr	r0, [pc, #444]	@ (8001724 <check_SIM_ready+0x23c>)
 8001566:	f7ff fcf7 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800156a:	4629      	mov	r1, r5
 800156c:	4620      	mov	r0, r4
 800156e:	f007 f8f6 	bl	800875e <strstr>
 8001572:	2800      	cmp	r0, #0
 8001574:	f000 80b6 	beq.w	80016e4 <check_SIM_ready+0x1fc>
	}
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001578:	496b      	ldr	r1, [pc, #428]	@ (8001728 <check_SIM_ready+0x240>)
 800157a:	4862      	ldr	r0, [pc, #392]	@ (8001704 <check_SIM_ready+0x21c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800157c:	4d67      	ldr	r5, [pc, #412]	@ (800171c <check_SIM_ready+0x234>)
 800157e:	4c61      	ldr	r4, [pc, #388]	@ (8001704 <check_SIM_ready+0x21c>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001580:	4e6a      	ldr	r6, [pc, #424]	@ (800172c <check_SIM_ready+0x244>)
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001582:	f7ff ff3f 	bl	8001404 <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001586:	496a      	ldr	r1, [pc, #424]	@ (8001730 <check_SIM_ready+0x248>)
 8001588:	486a      	ldr	r0, [pc, #424]	@ (8001734 <check_SIM_ready+0x24c>)
 800158a:	f001 fe7d 	bl	8003288 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 800158e:	4966      	ldr	r1, [pc, #408]	@ (8001728 <check_SIM_ready+0x240>)
 8001590:	4868      	ldr	r0, [pc, #416]	@ (8001734 <check_SIM_ready+0x24c>)
 8001592:	f001 fe79 	bl	8003288 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001596:	4968      	ldr	r1, [pc, #416]	@ (8001738 <check_SIM_ready+0x250>)
 8001598:	4866      	ldr	r0, [pc, #408]	@ (8001734 <check_SIM_ready+0x24c>)
 800159a:	f001 fe75 	bl	8003288 <uart_transmit_string>
	osDelay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f004 fed0 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015a8:	2100      	movs	r1, #0
 80015aa:	4856      	ldr	r0, [pc, #344]	@ (8001704 <check_SIM_ready+0x21c>)
 80015ac:	f007 f8bd 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 80015b0:	f7ff fce2 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 80015b4:	4861      	ldr	r0, [pc, #388]	@ (800173c <check_SIM_ready+0x254>)
 80015b6:	f7ff fccf 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015ba:	4629      	mov	r1, r5
 80015bc:	4620      	mov	r0, r4
 80015be:	f007 f8ce 	bl	800875e <strstr>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	f000 8092 	beq.w	80016ec <check_SIM_ready+0x204>
	}
	osDelay(100);
 80015c8:	2064      	movs	r0, #100	@ 0x64
 80015ca:	f004 febb 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015ce:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015d2:	2100      	movs	r1, #0
 80015d4:	484b      	ldr	r0, [pc, #300]	@ (8001704 <check_SIM_ready+0x21c>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 80015d6:	4d5a      	ldr	r5, [pc, #360]	@ (8001740 <check_SIM_ready+0x258>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 80015d8:	4e5a      	ldr	r6, [pc, #360]	@ (8001744 <check_SIM_ready+0x25c>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015da:	4c50      	ldr	r4, [pc, #320]	@ (800171c <check_SIM_ready+0x234>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015dc:	f007 f8a5 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 80015e0:	f7ff fcca 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 80015e4:	4858      	ldr	r0, [pc, #352]	@ (8001748 <check_SIM_ready+0x260>)
 80015e6:	f7ff fcb7 	bl	8000f58 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 80015ea:	4858      	ldr	r0, [pc, #352]	@ (800174c <check_SIM_ready+0x264>)
 80015ec:	f7ff fce0 	bl	8000fb0 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 80015f0:	4628      	mov	r0, r5
 80015f2:	f7ff fcb1 	bl	8000f58 <send_AT_command>
		osDelay(150);
 80015f6:	2096      	movs	r0, #150	@ 0x96
 80015f8:	f004 fea4 	bl	8006344 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 80015fc:	4630      	mov	r0, r6
 80015fe:	f7ff fcd7 	bl	8000fb0 <receive_response>
		osDelay(300);
 8001602:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001606:	f004 fe9d 	bl	8006344 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800160a:	483e      	ldr	r0, [pc, #248]	@ (8001704 <check_SIM_ready+0x21c>)
 800160c:	4621      	mov	r1, r4
 800160e:	f007 f8a6 	bl	800875e <strstr>
		if(first_pointer != NULL){
 8001612:	2800      	cmp	r0, #0
 8001614:	d0ec      	beq.n	80015f0 <check_SIM_ready+0x108>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001616:	4621      	mov	r1, r4
 8001618:	3001      	adds	r0, #1
 800161a:	f007 f8a0 	bl	800875e <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800161e:	2800      	cmp	r0, #0
 8001620:	d0e6      	beq.n	80015f0 <check_SIM_ready+0x108>
		}
	}
	osDelay(100);
 8001622:	2064      	movs	r0, #100	@ 0x64
 8001624:	f004 fe8e 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001628:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800162c:	2100      	movs	r1, #0
 800162e:	4835      	ldr	r0, [pc, #212]	@ (8001704 <check_SIM_ready+0x21c>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 8001630:	4d47      	ldr	r5, [pc, #284]	@ (8001750 <check_SIM_ready+0x268>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 8001632:	4e48      	ldr	r6, [pc, #288]	@ (8001754 <check_SIM_ready+0x26c>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001634:	4c39      	ldr	r4, [pc, #228]	@ (800171c <check_SIM_ready+0x234>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001636:	f007 f878 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 800163a:	f7ff fc9d 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 800163e:	4846      	ldr	r0, [pc, #280]	@ (8001758 <check_SIM_ready+0x270>)
 8001640:	f7ff fc8a 	bl	8000f58 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001644:	4845      	ldr	r0, [pc, #276]	@ (800175c <check_SIM_ready+0x274>)
 8001646:	f7ff fcb3 	bl	8000fb0 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 800164a:	4628      	mov	r0, r5
 800164c:	f7ff fc84 	bl	8000f58 <send_AT_command>
		osDelay(150);
 8001650:	2096      	movs	r0, #150	@ 0x96
 8001652:	f004 fe77 	bl	8006344 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001656:	4630      	mov	r0, r6
 8001658:	f7ff fcaa 	bl	8000fb0 <receive_response>
		osDelay(300);
 800165c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001660:	f004 fe70 	bl	8006344 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001664:	4827      	ldr	r0, [pc, #156]	@ (8001704 <check_SIM_ready+0x21c>)
 8001666:	4621      	mov	r1, r4
 8001668:	f007 f879 	bl	800875e <strstr>
		if(first_pointer != NULL){
 800166c:	2800      	cmp	r0, #0
 800166e:	d0ec      	beq.n	800164a <check_SIM_ready+0x162>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001670:	4621      	mov	r1, r4
 8001672:	3001      	adds	r0, #1
 8001674:	f007 f873 	bl	800875e <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001678:	2800      	cmp	r0, #0
 800167a:	d0e6      	beq.n	800164a <check_SIM_ready+0x162>
		}
	}
	osDelay(100);
 800167c:	2064      	movs	r0, #100	@ 0x64
 800167e:	f004 fe61 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001682:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001686:	2100      	movs	r1, #0
 8001688:	481e      	ldr	r0, [pc, #120]	@ (8001704 <check_SIM_ready+0x21c>)
	SIM_UART_ReInitializeRxDMA();

	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800168a:	4d24      	ldr	r5, [pc, #144]	@ (800171c <check_SIM_ready+0x234>)
 800168c:	4c1d      	ldr	r4, [pc, #116]	@ (8001704 <check_SIM_ready+0x21c>)
		receive_response("Check Signal Quality Report\n");
 800168e:	4e34      	ldr	r6, [pc, #208]	@ (8001760 <check_SIM_ready+0x278>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001690:	f007 f84b 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001694:	f7ff fc70 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001698:	4832      	ldr	r0, [pc, #200]	@ (8001764 <check_SIM_ready+0x27c>)
 800169a:	f7ff fc5d 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800169e:	4629      	mov	r1, r5
 80016a0:	4620      	mov	r0, r4
 80016a2:	f007 f85c 	bl	800875e <strstr>
 80016a6:	b328      	cbz	r0, 80016f4 <check_SIM_ready+0x20c>
	}
	osDelay(100);
 80016a8:	2064      	movs	r0, #100	@ 0x64
 80016aa:	f004 fe4b 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016b2:	2100      	movs	r1, #0
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <check_SIM_ready+0x21c>)
 80016b6:	f007 f838 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 80016ba:	f7ff fc5d 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
 80016be:	2001      	movs	r0, #1
	
	return 1;
}
 80016c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!is_set_time){
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b913      	cbnz	r3, 80016cc <check_SIM_ready+0x1e4>
			extract_time(response);
 80016c6:	4628      	mov	r0, r5
 80016c8:	f7ff fe2c 	bl	8001324 <extract_time>
		receive_response("Check SIM\n");
 80016cc:	480f      	ldr	r0, [pc, #60]	@ (800170c <check_SIM_ready+0x224>)
 80016ce:	f7ff fc6f 	bl	8000fb0 <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 80016d2:	3c01      	subs	r4, #1
 80016d4:	f47f af13 	bne.w	80014fe <check_SIM_ready+0x16>
			return 0;
 80016d8:	4620      	mov	r0, r4
 80016da:	e7f1      	b.n	80016c0 <check_SIM_ready+0x1d8>
		receive_response("Check SIM CCID\n");
 80016dc:	4630      	mov	r0, r6
 80016de:	f7ff fc67 	bl	8000fb0 <receive_response>
 80016e2:	e72a      	b.n	800153a <check_SIM_ready+0x52>
		receive_response("Check IMEI-0\n");
 80016e4:	4630      	mov	r0, r6
 80016e6:	f7ff fc63 	bl	8000fb0 <receive_response>
 80016ea:	e73e      	b.n	800156a <check_SIM_ready+0x82>
		receive_response("Check MODEL IDENTIFICATION\n");
 80016ec:	4630      	mov	r0, r6
 80016ee:	f7ff fc5f 	bl	8000fb0 <receive_response>
 80016f2:	e762      	b.n	80015ba <check_SIM_ready+0xd2>
		receive_response("Check Signal Quality Report\n");
 80016f4:	4630      	mov	r0, r6
 80016f6:	f7ff fc5b 	bl	8000fb0 <receive_response>
 80016fa:	e7d0      	b.n	800169e <check_SIM_ready+0x1b6>
 80016fc:	0800bf8f 	.word	0x0800bf8f
 8001700:	0800bfa5 	.word	0x0800bfa5
 8001704:	20000bd0 	.word	0x20000bd0
 8001708:	20000bbc 	.word	0x20000bbc
 800170c:	0800bf9a 	.word	0x0800bf9a
 8001710:	0800bfc8 	.word	0x0800bfc8
 8001714:	0800bfb8 	.word	0x0800bfb8
 8001718:	0800bfad 	.word	0x0800bfad
 800171c:	0800bfea 	.word	0x0800bfea
 8001720:	0800bfdc 	.word	0x0800bfdc
 8001724:	0800bfd0 	.word	0x0800bfd0
 8001728:	20000b54 	.word	0x20000b54
 800172c:	0800c010 	.word	0x0800c010
 8001730:	0800bfed 	.word	0x0800bfed
 8001734:	2000118c 	.word	0x2000118c
 8001738:	0800c73d 	.word	0x0800c73d
 800173c:	0800c006 	.word	0x0800c006
 8001740:	0800c06d 	.word	0x0800c06d
 8001744:	0800c078 	.word	0x0800c078
 8001748:	0800c02c 	.word	0x0800c02c
 800174c:	0800c038 	.word	0x0800c038
 8001750:	0800c0ea 	.word	0x0800c0ea
 8001754:	0800c0f6 	.word	0x0800c0f6
 8001758:	0800c0a8 	.word	0x0800c0a8
 800175c:	0800c0b5 	.word	0x0800c0b5
 8001760:	0800c12f 	.word	0x0800c12f
 8001764:	0800c126 	.word	0x0800c126

08001768 <check_configure_APN>:

void check_configure_APN(){
 8001768:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <check_configure_APN+0x18>)
 800176c:	f7ff fbf4 	bl	8000f58 <send_AT_command>
	osDelay(150);
 8001770:	2096      	movs	r0, #150	@ 0x96
 8001772:	f004 fde7 	bl	8006344 <osDelay>
	receive_response("Check Configuring APN\n");
}
 8001776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 800177a:	4802      	ldr	r0, [pc, #8]	@ (8001784 <check_configure_APN+0x1c>)
 800177c:	f7ff bc18 	b.w	8000fb0 <receive_response>
 8001780:	0800c14c 	.word	0x0800c14c
 8001784:	0800c15a 	.word	0x0800c15a

08001788 <configure_APN>:

int configure_APN(int context_id){
 8001788:	b530      	push	{r4, r5, lr}
 800178a:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800178c:	2200      	movs	r2, #0
 800178e:	9204      	str	r2, [sp, #16]
 8001790:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001792:	4c17      	ldr	r4, [pc, #92]	@ (80017f0 <configure_APN+0x68>)
 8001794:	4d17      	ldr	r5, [pc, #92]	@ (80017f4 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001796:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800179a:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <configure_APN+0x70>)
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	2201      	movs	r2, #1
int configure_APN(int context_id){
 80017a0:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80017a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017a6:	9200      	str	r2, [sp, #0]
 80017a8:	a806      	add	r0, sp, #24
 80017aa:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <configure_APN+0x74>)
 80017ac:	f006 fefa 	bl	80085a4 <sniprintf>
	send_AT_command((char*)command);
 80017b0:	a806      	add	r0, sp, #24
 80017b2:	f7ff fbd1 	bl	8000f58 <send_AT_command>
	osDelay(150);
 80017b6:	2096      	movs	r0, #150	@ 0x96
 80017b8:	f004 fdc4 	bl	8006344 <osDelay>
	receive_response("CONFIGURE APN\n");
 80017bc:	4810      	ldr	r0, [pc, #64]	@ (8001800 <configure_APN+0x78>)
 80017be:	f7ff fbf7 	bl	8000fb0 <receive_response>
		check_configure_APN();
 80017c2:	f7ff ffd1 	bl	8001768 <check_configure_APN>
		osDelay(300);
 80017c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017ca:	f004 fdbb 	bl	8006344 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <configure_APN+0x68>)
 80017d0:	4628      	mov	r0, r5
 80017d2:	f006 ffc4 	bl	800875e <strstr>
		if(first_pointer != NULL){
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d0f3      	beq.n	80017c2 <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80017da:	4621      	mov	r1, r4
 80017dc:	3001      	adds	r0, #1
 80017de:	f006 ffbe 	bl	800875e <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d0ed      	beq.n	80017c2 <configure_APN+0x3a>
		}
	}
	return 1;
}
 80017e6:	2001      	movs	r0, #1
 80017e8:	b047      	add	sp, #284	@ 0x11c
 80017ea:	bd30      	pop	{r4, r5, pc}
 80017ec:	0800be11 	.word	0x0800be11
 80017f0:	0800bfea 	.word	0x0800bfea
 80017f4:	20000bd0 	.word	0x20000bd0
 80017f8:	0800c197 	.word	0x0800c197
 80017fc:	0800c171 	.word	0x0800c171
 8001800:	0800c1a1 	.word	0x0800c1a1

08001804 <check_activate_context>:

void check_activate_context(){
 8001804:	b500      	push	{lr}
 8001806:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001808:	4906      	ldr	r1, [pc, #24]	@ (8001824 <check_activate_context+0x20>)
 800180a:	4668      	mov	r0, sp
 800180c:	f007 fda9 	bl	8009362 <strcpy>
	send_AT_command((char*)command);
 8001810:	4668      	mov	r0, sp
 8001812:	f7ff fba1 	bl	8000f58 <send_AT_command>
	receive_response("CHECK Activate CONTEXT");
 8001816:	4804      	ldr	r0, [pc, #16]	@ (8001828 <check_activate_context+0x24>)
 8001818:	f7ff fbca 	bl	8000fb0 <receive_response>
}
 800181c:	b021      	add	sp, #132	@ 0x84
 800181e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001822:	bf00      	nop
 8001824:	0800c1b0 	.word	0x0800c1b0
 8001828:	0800c1bc 	.word	0x0800c1bc

0800182c <activate_context>:

void activate_context(int context_id){
 800182c:	b570      	push	{r4, r5, r6, lr}
 800182e:	b0a0      	sub	sp, #128	@ 0x80
 8001830:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <activate_context+0x58>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_activate_context();
		osDelay(300);
		receive_response("Check Activate Context\r\n");
 8001834:	4d14      	ldr	r5, [pc, #80]	@ (8001888 <activate_context+0x5c>)
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001836:	4c15      	ldr	r4, [pc, #84]	@ (800188c <activate_context+0x60>)
 8001838:	4e15      	ldr	r6, [pc, #84]	@ (8001890 <activate_context+0x64>)
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	4668      	mov	r0, sp
 800183e:	f006 feb1 	bl	80085a4 <sniprintf>
	send_AT_command((char*)command);
 8001842:	4668      	mov	r0, sp
 8001844:	f7ff fb88 	bl	8000f58 <send_AT_command>
	osDelay(150);
 8001848:	2096      	movs	r0, #150	@ 0x96
 800184a:	f004 fd7b 	bl	8006344 <osDelay>
	receive_response("Activate Context\r\n");
 800184e:	4811      	ldr	r0, [pc, #68]	@ (8001894 <activate_context+0x68>)
 8001850:	f7ff fbae 	bl	8000fb0 <receive_response>
		check_activate_context();
 8001854:	f7ff ffd6 	bl	8001804 <check_activate_context>
		osDelay(300);
 8001858:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800185c:	f004 fd72 	bl	8006344 <osDelay>
		receive_response("Check Activate Context\r\n");
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff fba5 	bl	8000fb0 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001866:	4909      	ldr	r1, [pc, #36]	@ (800188c <activate_context+0x60>)
 8001868:	4630      	mov	r0, r6
 800186a:	f006 ff78 	bl	800875e <strstr>
		if(first_pointer != NULL){
 800186e:	2800      	cmp	r0, #0
 8001870:	d0f0      	beq.n	8001854 <activate_context+0x28>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001872:	4621      	mov	r1, r4
 8001874:	3001      	adds	r0, #1
 8001876:	f006 ff72 	bl	800875e <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800187a:	2800      	cmp	r0, #0
 800187c:	d0ea      	beq.n	8001854 <activate_context+0x28>
		}
	}
}
 800187e:	b020      	add	sp, #128	@ 0x80
 8001880:	bd70      	pop	{r4, r5, r6, pc}
 8001882:	bf00      	nop
 8001884:	0800c1d3 	.word	0x0800c1d3
 8001888:	0800c1e1 	.word	0x0800c1e1
 800188c:	0800bfea 	.word	0x0800bfea
 8001890:	20000bd0 	.word	0x20000bd0
 8001894:	0800c1e7 	.word	0x0800c1e7

08001898 <deactivate_context>:

int deactivate_context(int context_id){
 8001898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189c:	4607      	mov	r7, r0
 800189e:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_error = 0;
	osDelay(100);
 80018a0:	2064      	movs	r0, #100	@ 0x64
 80018a2:	f004 fd4f 	bl	8006344 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018a6:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001950 <deactivate_context+0xb8>
 80018aa:	4d24      	ldr	r5, [pc, #144]	@ (800193c <deactivate_context+0xa4>)
		snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 80018ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8001954 <deactivate_context+0xbc>
	int count_error = 0;
 80018b0:	2600      	movs	r6, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018b2:	4641      	mov	r1, r8
 80018b4:	4628      	mov	r0, r5
 80018b6:	f006 ff52 	bl	800875e <strstr>
 80018ba:	4604      	mov	r4, r0
 80018bc:	b178      	cbz	r0, 80018de <deactivate_context+0x46>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	count_error = 0;
	receive_response("DEACTIVATE CONTEXT");
 80018be:	4820      	ldr	r0, [pc, #128]	@ (8001940 <deactivate_context+0xa8>)
 80018c0:	f7ff fb76 	bl	8000fb0 <receive_response>
	osDelay(100);
 80018c4:	2064      	movs	r0, #100	@ 0x64
 80018c6:	f004 fd3d 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018ce:	2100      	movs	r1, #0
 80018d0:	481a      	ldr	r0, [pc, #104]	@ (800193c <deactivate_context+0xa4>)
 80018d2:	f006 ff2a 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 80018d6:	f7ff fb4f 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80018da:	2001      	movs	r0, #1
 80018dc:	e02b      	b.n	8001936 <deactivate_context+0x9e>
		snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	463b      	mov	r3, r7
 80018e2:	464a      	mov	r2, r9
 80018e4:	4668      	mov	r0, sp
 80018e6:	f006 fe5d 	bl	80085a4 <sniprintf>
		send_AT_command((char*)command);
 80018ea:	4668      	mov	r0, sp
 80018ec:	f7ff fb34 	bl	8000f58 <send_AT_command>
		receive_response("DEACTIVATE CONTEXT");
 80018f0:	4813      	ldr	r0, [pc, #76]	@ (8001940 <deactivate_context+0xa8>)
 80018f2:	f7ff fb5d 	bl	8000fb0 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80018f6:	4913      	ldr	r1, [pc, #76]	@ (8001944 <deactivate_context+0xac>)
 80018f8:	4628      	mov	r0, r5
 80018fa:	f006 ff30 	bl	800875e <strstr>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d0d7      	beq.n	80018b2 <deactivate_context+0x1a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001902:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001906:	4621      	mov	r1, r4
			count_error++;
 8001908:	3601      	adds	r6, #1
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800190a:	4628      	mov	r0, r5
 800190c:	f006 ff0d 	bl	800872a <memset>
			SIM_UART_ReInitializeRxDMA();
 8001910:	f7ff fb32 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
		if (count_error >= 5){
 8001914:	2e05      	cmp	r6, #5
 8001916:	d1cc      	bne.n	80018b2 <deactivate_context+0x1a>
			uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8001918:	490b      	ldr	r1, [pc, #44]	@ (8001948 <deactivate_context+0xb0>)
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <deactivate_context+0xb4>)
 800191c:	f001 fcb4 	bl	8003288 <uart_transmit_string>
			reboot_SIM_module();
 8001920:	f7ff fb8a 	bl	8001038 <reboot_SIM_module>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001924:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001928:	4621      	mov	r1, r4
 800192a:	4804      	ldr	r0, [pc, #16]	@ (800193c <deactivate_context+0xa4>)
 800192c:	f006 fefd 	bl	800872a <memset>
			SIM_UART_ReInitializeRxDMA();
 8001930:	f7ff fb22 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001934:	4620      	mov	r0, r4
}
 8001936:	b021      	add	sp, #132	@ 0x84
 8001938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800193c:	20000bd0 	.word	0x20000bd0
 8001940:	0800c20a 	.word	0x0800c20a
 8001944:	0800c21d 	.word	0x0800c21d
 8001948:	0800c223 	.word	0x0800c223
 800194c:	2000118c 	.word	0x2000118c
 8001950:	0800bfea 	.word	0x0800bfea
 8001954:	0800c1fa 	.word	0x0800c1fa

08001958 <open_socket_service>:
	snprintf((char *)command, sizeof(command), "AT+QIOPEN?\r\n");
	send_AT_command((char*)command);
	receive_response("CHECK Activate CONTEXT");
}

int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800195c:	b0e7      	sub	sp, #412	@ 0x19c
	const int timeout_seconds = 150; // Receive response each second 
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 800195e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001962:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001966:	9303      	str	r3, [sp, #12]
 8001968:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <open_socket_service+0xdc>)
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <open_socket_service+0xe0>)
 800196e:	4a33      	ldr	r2, [pc, #204]	@ (8001a3c <open_socket_service+0xe4>)
	char *first_pointer = NULL;
	//time_t start = time(NULL);
	uart_transmit_string(&huart1, (uint8_t *) "Ini start TIME");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001970:	4f33      	ldr	r7, [pc, #204]	@ (8001a40 <open_socket_service+0xe8>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001972:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8001a60 <open_socket_service+0x108>
 8001976:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8001a50 <open_socket_service+0xf8>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 800197a:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 800197e:	460d      	mov	r5, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001980:	4603      	mov	r3, r0
 8001982:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001986:	a826      	add	r0, sp, #152	@ 0x98
 8001988:	f006 fe0c 	bl	80085a4 <sniprintf>
	send_AT_command((char *) command);
 800198c:	a826      	add	r0, sp, #152	@ 0x98
 800198e:	f7ff fae3 	bl	8000f58 <send_AT_command>
	osDelay(100);
 8001992:	2064      	movs	r0, #100	@ 0x64
 8001994:	f004 fcd6 	bl	8006344 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Ini start TIME");
 8001998:	492a      	ldr	r1, [pc, #168]	@ (8001a44 <open_socket_service+0xec>)
 800199a:	482b      	ldr	r0, [pc, #172]	@ (8001a48 <open_socket_service+0xf0>)
 800199c:	f001 fc74 	bl	8003288 <uart_transmit_string>
	int elapsed_time_ms = 0;
 80019a0:	2600      	movs	r6, #0
		receive_response("Check OPEN socket service: \r\n");
 80019a2:	4638      	mov	r0, r7
 80019a4:	f7ff fb04 	bl	8000fb0 <receive_response>
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019a8:	4641      	mov	r1, r8
 80019aa:	4648      	mov	r0, r9
 80019ac:	f006 fed7 	bl	800875e <strstr>
		elapsed_time_ms++;
 80019b0:	3601      	adds	r6, #1
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019b2:	4604      	mov	r4, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	4a25      	ldr	r2, [pc, #148]	@ (8001a4c <open_socket_service+0xf4>)
 80019b8:	4633      	mov	r3, r6
 80019ba:	a806      	add	r0, sp, #24
 80019bc:	f006 fdf2 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80019c0:	4821      	ldr	r0, [pc, #132]	@ (8001a48 <open_socket_service+0xf0>)
 80019c2:	a906      	add	r1, sp, #24
 80019c4:	f001 fc60 	bl	8003288 <uart_transmit_string>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 80019c8:	b90c      	cbnz	r4, 80019ce <open_socket_service+0x76>
 80019ca:	2e96      	cmp	r6, #150	@ 0x96
 80019cc:	d1e9      	bne.n	80019a2 <open_socket_service+0x4a>
	}
	receive_response("Check OPEN socket service: \r\n");
 80019ce:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <open_socket_service+0xe8>)
 80019d0:	f7ff faee 	bl	8000fb0 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019d8:	2100      	movs	r1, #0
 80019da:	481d      	ldr	r0, [pc, #116]	@ (8001a50 <open_socket_service+0xf8>)
 80019dc:	f006 fea5 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 80019e0:	f7ff faca 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	
	if(first_pointer != NULL)
 80019e4:	b324      	cbz	r4, 8001a30 <open_socket_service+0xd8>
	{
		//AT+QISTATE=<query_type>,<connectID>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019e6:	462b      	mov	r3, r5
 80019e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <open_socket_service+0xfc>)
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019ea:	4d1b      	ldr	r5, [pc, #108]	@ (8001a58 <open_socket_service+0x100>)
 80019ec:	4c18      	ldr	r4, [pc, #96]	@ (8001a50 <open_socket_service+0xf8>)
			receive_response("Check SOCKET CONNECTION\n");
 80019ee:	4e1b      	ldr	r6, [pc, #108]	@ (8001a5c <open_socket_service+0x104>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f4:	a826      	add	r0, sp, #152	@ 0x98
 80019f6:	f006 fdd5 	bl	80085a4 <sniprintf>
		send_AT_command((char*) command);
 80019fa:	a826      	add	r0, sp, #152	@ 0x98
 80019fc:	f7ff faac 	bl	8000f58 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a00:	4629      	mov	r1, r5
 8001a02:	4620      	mov	r0, r4
 8001a04:	f006 feab 	bl	800875e <strstr>
 8001a08:	b170      	cbz	r0, 8001a28 <open_socket_service+0xd0>
		}
		osDelay(100);
 8001a0a:	2064      	movs	r0, #100	@ 0x64
 8001a0c:	f004 fc9a 	bl	8006344 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a10:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a14:	2100      	movs	r1, #0
 8001a16:	480e      	ldr	r0, [pc, #56]	@ (8001a50 <open_socket_service+0xf8>)
 8001a18:	f006 fe87 	bl	800872a <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a1c:	f7ff faac 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a20:	2001      	movs	r0, #1
	}
	else return 0;
}
 8001a22:	b067      	add	sp, #412	@ 0x19c
 8001a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			receive_response("Check SOCKET CONNECTION\n");
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f7ff fac1 	bl	8000fb0 <receive_response>
 8001a2e:	e7e7      	b.n	8001a00 <open_socket_service+0xa8>
	else return 0;
 8001a30:	4620      	mov	r0, r4
 8001a32:	e7f6      	b.n	8001a22 <open_socket_service+0xca>
 8001a34:	0800c25d 	.word	0x0800c25d
 8001a38:	0800c26a 	.word	0x0800c26a
 8001a3c:	0800c238 	.word	0x0800c238
 8001a40:	0800c27d 	.word	0x0800c27d
 8001a44:	0800c26e 	.word	0x0800c26e
 8001a48:	2000118c 	.word	0x2000118c
 8001a4c:	0800c2a4 	.word	0x0800c2a4
 8001a50:	20000bd0 	.word	0x20000bd0
 8001a54:	0800c2b6 	.word	0x0800c2b6
 8001a58:	0800bfea 	.word	0x0800bfea
 8001a5c:	0800c2c8 	.word	0x0800c2c8
 8001a60:	0800c29b 	.word	0x0800c29b

08001a64 <send_data_to_server>:
	osDelay(100);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
}

void send_data_to_server(int connect_id, uint8_t* message, int message_length){
 8001a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a68:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8001a6c:	ad42      	add	r5, sp, #264	@ 0x108
	uint8_t command[256];
	int count_check = 0;
	char message_hex[512];  // Each byte takes 2 hex chars

	for (int i = 0; i < message_length; i++) {
		snprintf(&message_hex[i * 2], 3, "%02X", message[i]);
 8001a6e:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8001af8 <send_data_to_server+0x94>
void send_data_to_server(int connect_id, uint8_t* message, int message_length){
 8001a72:	4606      	mov	r6, r0
 8001a74:	4688      	mov	r8, r1
 8001a76:	4617      	mov	r7, r2
	for (int i = 0; i < message_length; i++) {
 8001a78:	2400      	movs	r4, #0
 8001a7a:	46a9      	mov	r9, r5
 8001a7c:	42bc      	cmp	r4, r7
 8001a7e:	db25      	blt.n	8001acc <send_data_to_server+0x68>
	}

	snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message_hex);
 8001a80:	4633      	mov	r3, r6
 8001a82:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <send_data_to_server+0x84>)
 8001a84:	f8cd 9000 	str.w	r9, [sp]
 8001a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a8c:	a802      	add	r0, sp, #8
 8001a8e:	f006 fd89 	bl	80085a4 <sniprintf>

	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001a92:	a802      	add	r0, sp, #8
 8001a94:	f7ff fa60 	bl	8000f58 <send_AT_command>
	
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a98:	4d14      	ldr	r5, [pc, #80]	@ (8001aec <send_data_to_server+0x88>)
 8001a9a:	4c15      	ldr	r4, [pc, #84]	@ (8001af0 <send_data_to_server+0x8c>)
		receive_response("Check sending to server\n");
 8001a9c:	4e15      	ldr	r6, [pc, #84]	@ (8001af4 <send_data_to_server+0x90>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f006 fe5c 	bl	800875e <strstr>
 8001aa6:	b1d8      	cbz	r0, 8001ae0 <send_data_to_server+0x7c>
	}
	receive_response("Check sending to server\n");
 8001aa8:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <send_data_to_server+0x90>)
 8001aaa:	f7ff fa81 	bl	8000fb0 <receive_response>
	osDelay(100);
 8001aae:	2064      	movs	r0, #100	@ 0x64
 8001ab0:	f004 fc48 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ab4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ab8:	2100      	movs	r1, #0
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <send_data_to_server+0x8c>)
 8001abc:	f006 fe35 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001ac0:	f7ff fa5a 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
}
 8001ac4:	f50d 7d42 	add.w	sp, sp, #776	@ 0x308
 8001ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		snprintf(&message_hex[i * 2], 3, "%02X", message[i]);
 8001acc:	f818 3004 	ldrb.w	r3, [r8, r4]
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	4652      	mov	r2, sl
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	f006 fd65 	bl	80085a4 <sniprintf>
	for (int i = 0; i < message_length; i++) {
 8001ada:	3401      	adds	r4, #1
 8001adc:	3502      	adds	r5, #2
 8001ade:	e7cd      	b.n	8001a7c <send_data_to_server+0x18>
		receive_response("Check sending to server\n");
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	f7ff fa65 	bl	8000fb0 <receive_response>
 8001ae6:	e7da      	b.n	8001a9e <send_data_to_server+0x3a>
 8001ae8:	0800c2e1 	.word	0x0800c2e1
 8001aec:	0800bfea 	.word	0x0800bfea
 8001af0:	20000bd0 	.word	0x20000bd0
 8001af4:	0800c2f7 	.word	0x0800c2f7
 8001af8:	0800c70f 	.word	0x0800c70f

08001afc <check_data_sent_to_server>:

void check_data_sent_to_server(int connect_id){
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b00:	b0e0      	sub	sp, #384	@ 0x180
	uint8_t command[256];
	int count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a2d      	ldr	r2, [pc, #180]	@ (8001bbc <check_data_sent_to_server+0xc0>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b06:	4f2e      	ldr	r7, [pc, #184]	@ (8001bc0 <check_data_sent_to_server+0xc4>)
 8001b08:	4e2e      	ldr	r6, [pc, #184]	@ (8001bc4 <check_data_sent_to_server+0xc8>)
		if(count_check >= 3){
			count_check = 0;
			break;
		}
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001be0 <check_data_sent_to_server+0xe4>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
void check_data_sent_to_server(int connect_id){
 8001b12:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001b14:	a820      	add	r0, sp, #128	@ 0x80
 8001b16:	f006 fd45 	bl	80085a4 <sniprintf>
	send_AT_command((char*)command);
 8001b1a:	a820      	add	r0, sp, #128	@ 0x80
 8001b1c:	f7ff fa1c 	bl	8000f58 <send_AT_command>
	int count_check = 0;
 8001b20:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b22:	4639      	mov	r1, r7
 8001b24:	4630      	mov	r0, r6
 8001b26:	f006 fe1a 	bl	800875e <strstr>
 8001b2a:	b388      	cbz	r0, 8001b90 <check_data_sent_to_server+0x94>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 8001b2c:	4826      	ldr	r0, [pc, #152]	@ (8001bc8 <check_data_sent_to_server+0xcc>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001b2e:	4d27      	ldr	r5, [pc, #156]	@ (8001bcc <check_data_sent_to_server+0xd0>)
		receive_response("Check received data from server\n");
 8001b30:	4e27      	ldr	r6, [pc, #156]	@ (8001bd0 <check_data_sent_to_server+0xd4>)
	receive_response("Check sending to server\n");
 8001b32:	f7ff fa3d 	bl	8000fb0 <receive_response>
	osDelay(100);
 8001b36:	2064      	movs	r0, #100	@ 0x64
 8001b38:	f004 fc04 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b3c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b40:	2100      	movs	r1, #0
 8001b42:	4820      	ldr	r0, [pc, #128]	@ (8001bc4 <check_data_sent_to_server+0xc8>)
 8001b44:	f006 fdf1 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b48:	f7ff fa16 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <check_data_sent_to_server+0xd8>)
	while(strstr((char *) response, "+QIRD") == NULL){
 8001b50:	4c1c      	ldr	r4, [pc, #112]	@ (8001bc4 <check_data_sent_to_server+0xc8>)
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b56:	a820      	add	r0, sp, #128	@ 0x80
 8001b58:	f006 fd24 	bl	80085a4 <sniprintf>
	send_AT_command((char*)command);
 8001b5c:	a820      	add	r0, sp, #128	@ 0x80
 8001b5e:	f7ff f9fb 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001b62:	4629      	mov	r1, r5
 8001b64:	4620      	mov	r0, r4
 8001b66:	f006 fdfa 	bl	800875e <strstr>
 8001b6a:	b310      	cbz	r0, 8001bb2 <check_data_sent_to_server+0xb6>
	}
	osDelay(100);
 8001b6c:	2064      	movs	r0, #100	@ 0x64
 8001b6e:	f004 fbe9 	bl	8006344 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server");
 8001b72:	4919      	ldr	r1, [pc, #100]	@ (8001bd8 <check_data_sent_to_server+0xdc>)
 8001b74:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <check_data_sent_to_server+0xe0>)
 8001b76:	f001 fb87 	bl	8003288 <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4810      	ldr	r0, [pc, #64]	@ (8001bc4 <check_data_sent_to_server+0xc8>)
 8001b82:	f006 fdd2 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b86:	f7ff f9f7 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
	
}
 8001b8a:	b060      	add	sp, #384	@ 0x180
 8001b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 3){
 8001b90:	2d03      	cmp	r5, #3
 8001b92:	d0cb      	beq.n	8001b2c <check_data_sent_to_server+0x30>
		count_check++;
 8001b94:	3501      	adds	r5, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001b96:	462b      	mov	r3, r5
 8001b98:	4642      	mov	r2, r8
 8001b9a:	2180      	movs	r1, #128	@ 0x80
 8001b9c:	4668      	mov	r0, sp
 8001b9e:	f006 fd01 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001ba2:	480e      	ldr	r0, [pc, #56]	@ (8001bdc <check_data_sent_to_server+0xe0>)
 8001ba4:	4669      	mov	r1, sp
 8001ba6:	f001 fb6f 	bl	8003288 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001baa:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <check_data_sent_to_server+0xcc>)
 8001bac:	f7ff fa00 	bl	8000fb0 <receive_response>
 8001bb0:	e7b7      	b.n	8001b22 <check_data_sent_to_server+0x26>
		receive_response("Check received data from server\n");
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f7ff f9fc 	bl	8000fb0 <receive_response>
 8001bb8:	e7d3      	b.n	8001b62 <check_data_sent_to_server+0x66>
 8001bba:	bf00      	nop
 8001bbc:	0800c310 	.word	0x0800c310
 8001bc0:	0800bfea 	.word	0x0800bfea
 8001bc4:	20000bd0 	.word	0x20000bd0
 8001bc8:	0800c2f7 	.word	0x0800c2f7
 8001bcc:	0800c354 	.word	0x0800c354
 8001bd0:	0800c333 	.word	0x0800c333
 8001bd4:	0800c321 	.word	0x0800c321
 8001bd8:	0800c35a 	.word	0x0800c35a
 8001bdc:	2000118c 	.word	0x2000118c
 8001be0:	0800c2a4 	.word	0x0800c2a4

08001be4 <close_connection>:
void close_connection(int connect_id){
 8001be4:	b530      	push	{r4, r5, lr}
 8001be6:	b0c1      	sub	sp, #260	@ 0x104
 8001be8:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001bea:	4a12      	ldr	r2, [pc, #72]	@ (8001c34 <close_connection+0x50>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001bec:	4c12      	ldr	r4, [pc, #72]	@ (8001c38 <close_connection+0x54>)
		receive_response("Check CLOSING to server\n");
 8001bee:	4d13      	ldr	r5, [pc, #76]	@ (8001c3c <close_connection+0x58>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001bf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bf4:	4668      	mov	r0, sp
 8001bf6:	f006 fcd5 	bl	80085a4 <sniprintf>
	send_AT_command((char*)command);
 8001bfa:	4668      	mov	r0, sp
 8001bfc:	f7ff f9ac 	bl	8000f58 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001c00:	480f      	ldr	r0, [pc, #60]	@ (8001c40 <close_connection+0x5c>)
 8001c02:	4621      	mov	r1, r4
 8001c04:	f006 fdab 	bl	800875e <strstr>
 8001c08:	b178      	cbz	r0, 8001c2a <close_connection+0x46>
	}
	receive_response("Check CLOSING to server\n");
 8001c0a:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <close_connection+0x58>)
 8001c0c:	f7ff f9d0 	bl	8000fb0 <receive_response>
	osDelay(100);
 8001c10:	2064      	movs	r0, #100	@ 0x64
 8001c12:	f004 fb97 	bl	8006344 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c16:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4808      	ldr	r0, [pc, #32]	@ (8001c40 <close_connection+0x5c>)
 8001c1e:	f006 fd84 	bl	800872a <memset>
	SIM_UART_ReInitializeRxDMA();
 8001c22:	f7ff f9a9 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
}
 8001c26:	b041      	add	sp, #260	@ 0x104
 8001c28:	bd30      	pop	{r4, r5, pc}
		receive_response("Check CLOSING to server\n");
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	f7ff f9c0 	bl	8000fb0 <receive_response>
 8001c30:	e7e6      	b.n	8001c00 <close_connection+0x1c>
 8001c32:	bf00      	nop
 8001c34:	0800c37a 	.word	0x0800c37a
 8001c38:	0800bfea 	.word	0x0800bfea
 8001c3c:	0800c38a 	.word	0x0800c38a
 8001c40:	20000bd0 	.word	0x20000bd0

08001c44 <receiveRMCDataGSM>:

void receiveRMCDataGSM(void) {
 8001c44:	b570      	push	{r4, r5, r6, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
	osEvent evt = osMailGet(RMC_MailQGSMId, 90000); // Wait for mail
 8001c46:	4e56      	ldr	r6, [pc, #344]	@ (8001da0 <receiveRMCDataGSM+0x15c>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
 8001c48:	4956      	ldr	r1, [pc, #344]	@ (8001da4 <receiveRMCDataGSM+0x160>)
 8001c4a:	4857      	ldr	r0, [pc, #348]	@ (8001da8 <receiveRMCDataGSM+0x164>)
void receiveRMCDataGSM(void) {
 8001c4c:	b09e      	sub	sp, #120	@ 0x78
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
 8001c4e:	f001 fb1b 	bl	8003288 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQGSMId, 90000); // Wait for mail
 8001c52:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <receiveRMCDataGSM+0x168>)
 8001c54:	6831      	ldr	r1, [r6, #0]
 8001c56:	a809      	add	r0, sp, #36	@ 0x24
 8001c58:	f004 fc4e 	bl	80064f8 <osMailGet>
	
	if(evt.status == osEventMail){
 8001c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	f040 809b 	bne.w	8001d9a <receiveRMCDataGSM+0x156>
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data GSM\n");
 8001c64:	4952      	ldr	r1, [pc, #328]	@ (8001db0 <receiveRMCDataGSM+0x16c>)
 8001c66:	4850      	ldr	r0, [pc, #320]	@ (8001da8 <receiveRMCDataGSM+0x164>)
		uart_transmit_string(&huart1, output_buffer);

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
		uart_transmit_string(&huart1, output_buffer);

		rmc_jt.lcation.latitude = receivedData->lcation.latitude;
 8001c68:	4d52      	ldr	r5, [pc, #328]	@ (8001db4 <receiveRMCDataGSM+0x170>)
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data GSM\n");
 8001c6a:	f001 fb0d 	bl	8003288 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8001c6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		snprintf((char *)output_buffer, sizeof(output_buffer), "Time Received GSM: %d:%d:%d\n", receivedData->tim.hour, receivedData->tim.min, receivedData->tim.sec);
 8001c70:	4a51      	ldr	r2, [pc, #324]	@ (8001db8 <receiveRMCDataGSM+0x174>)
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	2146      	movs	r1, #70	@ 0x46
 8001c7e:	a80c      	add	r0, sp, #48	@ 0x30
 8001c80:	f006 fc90 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001c84:	4848      	ldr	r0, [pc, #288]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001c86:	a90c      	add	r1, sp, #48	@ 0x30
 8001c88:	f001 fafe 	bl	8003288 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received GSM : %d/%d/%d\n", receivedData->date.Day, receivedData->date.Mon, receivedData->date.Yr);
 8001c8c:	69a3      	ldr	r3, [r4, #24]
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	6963      	ldr	r3, [r4, #20]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	6923      	ldr	r3, [r4, #16]
 8001c96:	4a49      	ldr	r2, [pc, #292]	@ (8001dbc <receiveRMCDataGSM+0x178>)
 8001c98:	2146      	movs	r1, #70	@ 0x46
 8001c9a:	a80c      	add	r0, sp, #48	@ 0x30
 8001c9c:	f006 fc82 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001ca0:	4841      	ldr	r0, [pc, #260]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001ca2:	a90c      	add	r1, sp, #48	@ 0x30
 8001ca4:	f001 faf0 	bl	8003288 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received GSM: %.6f %c, %.6f %c\n", receivedData->lcation.latitude, receivedData->lcation.NS, receivedData->lcation.longitude, receivedData->lcation.EW);
 8001ca8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001cac:	9306      	str	r3, [sp, #24]
 8001cae:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8001cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cb6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001cc0:	2146      	movs	r1, #70	@ 0x46
 8001cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8001cc6:	a80c      	add	r0, sp, #48	@ 0x30
 8001cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc0 <receiveRMCDataGSM+0x17c>)
 8001cca:	f006 fc6b 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001cce:	4836      	ldr	r0, [pc, #216]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001cd0:	a90c      	add	r1, sp, #48	@ 0x30
 8001cd2:	f001 fad9 	bl	8003288 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
 8001cd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cd8:	9304      	str	r3, [sp, #16]
 8001cda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001cdc:	f7fe fc44 	bl	8000568 <__aeabi_f2d>
 8001ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ce4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001ce6:	f7fe fc3f 	bl	8000568 <__aeabi_f2d>
 8001cea:	4a36      	ldr	r2, [pc, #216]	@ (8001dc4 <receiveRMCDataGSM+0x180>)
 8001cec:	e9cd 0100 	strd	r0, r1, [sp]
 8001cf0:	2146      	movs	r1, #70	@ 0x46
 8001cf2:	a80c      	add	r0, sp, #48	@ 0x30
 8001cf4:	f006 fc56 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001cf8:	482b      	ldr	r0, [pc, #172]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001cfa:	a90c      	add	r1, sp, #48	@ 0x30
 8001cfc:	f001 fac4 	bl	8003288 <uart_transmit_string>
		rmc_jt.lcation.latitude = receivedData->lcation.latitude;
 8001d00:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001d04:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
		rmc_jt.lcation.longitude = receivedData->lcation.longitude;
 8001d08:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8001d0c:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
		rmc_jt.speed = receivedData->speed;
 8001d10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d12:	62ab      	str	r3, [r5, #40]	@ 0x28
		rmc_jt.course = receivedData->course;
 8001d14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d16:	62eb      	str	r3, [r5, #44]	@ 0x2c
		rmc_jt.lcation.NS = receivedData->lcation.NS;
 8001d18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001d1c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
		rmc_jt.lcation.EW = receivedData->lcation.EW;
 8001d20:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001d24:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
		rmc_jt.isValid = receivedData->isValid;
 8001d28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
			
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8001d2a:	4927      	ldr	r1, [pc, #156]	@ (8001dc8 <receiveRMCDataGSM+0x184>)
 8001d2c:	481e      	ldr	r0, [pc, #120]	@ (8001da8 <receiveRMCDataGSM+0x164>)
		rmc_jt.isValid = receivedData->isValid;
 8001d2e:	632b      	str	r3, [r5, #48]	@ 0x30
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8001d30:	f001 faaa 	bl	8003288 <uart_transmit_string>
		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FLASH: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, rmc_jt.lcation.EW);
 8001d34:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8001d38:	9306      	str	r3, [sp, #24]
 8001d3a:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8001d3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d42:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8001d4c:	2146      	movs	r1, #70	@ 0x46
 8001d4e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d52:	a80c      	add	r0, sp, #48	@ 0x30
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <receiveRMCDataGSM+0x188>)
 8001d56:	f006 fc25 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001d5a:	4813      	ldr	r0, [pc, #76]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001d5c:	a90c      	add	r1, sp, #48	@ 0x30
 8001d5e:	f001 fa93 	bl	8003288 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 8001d62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001d64:	9304      	str	r3, [sp, #16]
 8001d66:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001d68:	f7fe fbfe 	bl	8000568 <__aeabi_f2d>
 8001d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d70:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8001d72:	f7fe fbf9 	bl	8000568 <__aeabi_f2d>
 8001d76:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <receiveRMCDataGSM+0x18c>)
 8001d78:	e9cd 0100 	strd	r0, r1, [sp]
 8001d7c:	2146      	movs	r1, #70	@ 0x46
 8001d7e:	a80c      	add	r0, sp, #48	@ 0x30
 8001d80:	f006 fc10 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001d84:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <receiveRMCDataGSM+0x164>)
 8001d86:	a90c      	add	r1, sp, #48	@ 0x30
 8001d88:	f001 fa7e 	bl	8003288 <uart_transmit_string>

		received_RMC = 1;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <receiveRMCDataGSM+0x190>)
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 8001d8e:	6830      	ldr	r0, [r6, #0]
		received_RMC = 1;
 8001d90:	2201      	movs	r2, #1
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 8001d92:	4621      	mov	r1, r4
		received_RMC = 1;
 8001d94:	601a      	str	r2, [r3, #0]
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 8001d96:	f004 fbe8 	bl	800656a <osMailFree>
   }
}
 8001d9a:	b01e      	add	sp, #120	@ 0x78
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	bf00      	nop
 8001da0:	20001550 	.word	0x20001550
 8001da4:	0800c3a3 	.word	0x0800c3a3
 8001da8:	2000118c 	.word	0x2000118c
 8001dac:	00015f90 	.word	0x00015f90
 8001db0:	0800c3c2 	.word	0x0800c3c2
 8001db4:	20000b60 	.word	0x20000b60
 8001db8:	0800c3da 	.word	0x0800c3da
 8001dbc:	0800c3f7 	.word	0x0800c3f7
 8001dc0:	0800c415 	.word	0x0800c415
 8001dc4:	0800c43e 	.word	0x0800c43e
 8001dc8:	0800c468 	.word	0x0800c468
 8001dcc:	0800c47d 	.word	0x0800c47d
 8001dd0:	0800c4a8 	.word	0x0800c4a8
 8001dd4:	20000bb8 	.word	0x20000bb8

08001dd8 <StartGSM>:

void StartGSM(void const * argument)
{
 8001dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 8001ddc:	4998      	ldr	r1, [pc, #608]	@ (8002040 <StartGSM+0x268>)
 8001dde:	4899      	ldr	r0, [pc, #612]	@ (8002044 <StartGSM+0x26c>)
	int process = 0;
	int countSendingDelay = 0;
//HAL_UART_Receive_DMA(&huart1, rx_buffer, 128);
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001de0:	4f99      	ldr	r7, [pc, #612]	@ (8002048 <StartGSM+0x270>)
					osDelay(500);
				}
				process++;
				break;
			case 8:
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8001de2:	f8df 82bc 	ldr.w	r8, [pc, #700]	@ 80020a0 <StartGSM+0x2c8>
 8001de6:	4d97      	ldr	r5, [pc, #604]	@ (8002044 <StartGSM+0x26c>)
{
 8001de8:	b0c2      	sub	sp, #264	@ 0x108
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 8001dea:	f001 fa4d 	bl	8003288 <uart_transmit_string>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8001dee:	4a97      	ldr	r2, [pc, #604]	@ (800204c <StartGSM+0x274>)
 8001df0:	4997      	ldr	r1, [pc, #604]	@ (8002050 <StartGSM+0x278>)
 8001df2:	4898      	ldr	r0, [pc, #608]	@ (8002054 <StartGSM+0x27c>)
 8001df4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001df8:	f000 f956 	bl	80020a8 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 8001dfc:	a802      	add	r0, sp, #8
 8001dfe:	f7ff f833 	bl	8000e68 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8001e02:	a811      	add	r0, sp, #68	@ 0x44
 8001e04:	f7ff f81c 	bl	8000e40 <create_location_info_report>
	init_SIM_module();
 8001e08:	f7ff f8fc 	bl	8001004 <init_SIM_module>
	int process = 0;
 8001e0c:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001e0e:	4638      	mov	r0, r7
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e16:	f002 f9ed 	bl	80041f4 <HAL_GPIO_WritePin>
		osDelay(500);
 8001e1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e1e:	f004 fa91 	bl	8006344 <osDelay>
		switch(process){
 8001e22:	2c09      	cmp	r4, #9
 8001e24:	d847      	bhi.n	8001eb6 <StartGSM+0xde>
 8001e26:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001e2a:	000a      	.short	0x000a
 8001e2c:	005c0014 	.word	0x005c0014
 8001e30:	00890075 	.word	0x00890075
 8001e34:	00b000a2 	.word	0x00b000a2
 8001e38:	00f900bc 	.word	0x00f900bc
 8001e3c:	0105      	.short	0x0105
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8001e3e:	4986      	ldr	r1, [pc, #536]	@ (8002058 <StartGSM+0x280>)
 8001e40:	4628      	mov	r0, r5
 8001e42:	f001 fa21 	bl	8003288 <uart_transmit_string>
				isReady = first_check_SIM();
 8001e46:	f7ff f91d 	bl	8001084 <first_check_SIM>
					if (receive_deactivate) process = 1;
 8001e4a:	1e04      	subs	r4, r0, #0
 8001e4c:	bf18      	it	ne
 8001e4e:	2401      	movne	r4, #1
 8001e50:	e031      	b.n	8001eb6 <StartGSM+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8001e52:	4982      	ldr	r1, [pc, #520]	@ (800205c <StartGSM+0x284>)
 8001e54:	4628      	mov	r0, r5
 8001e56:	f001 fa17 	bl	8003288 <uart_transmit_string>
				osDelay(100);
 8001e5a:	2064      	movs	r0, #100	@ 0x64
 8001e5c:	f004 fa72 	bl	8006344 <osDelay>
				int check_SIM = check_SIM_ready();
 8001e60:	f7ff fb42 	bl	80014e8 <check_SIM_ready>
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8001e64:	4b7e      	ldr	r3, [pc, #504]	@ (8002060 <StartGSM+0x288>)
				int check_SIM = check_SIM_ready();
 8001e66:	4604      	mov	r4, r0
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	f8cd 200d 	str.w	r2, [sp, #13]
				message_array = create_message_array(&reg_msg, &message_length);
 8001e70:	4669      	mov	r1, sp
 8001e72:	a802      	add	r0, sp, #8
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8001e74:	f8ad 3011 	strh.w	r3, [sp, #17]
				memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8001e78:	f8cd 2049 	str.w	r2, [sp, #73]	@ 0x49
 8001e7c:	f8ad 304d 	strh.w	r3, [sp, #77]	@ 0x4d
				message_array = create_message_array(&reg_msg, &message_length);
 8001e80:	f7ff f83c 	bl	8000efc <create_message_array>
				location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 8001e84:	a901      	add	r1, sp, #4
				message_array = create_message_array(&reg_msg, &message_length);
 8001e86:	4606      	mov	r6, r0
				location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 8001e88:	a811      	add	r0, sp, #68	@ 0x44
 8001e8a:	f7ff f856 	bl	8000f3a <convert_location_info_to_array>
				osDelay(150);
 8001e8e:	2096      	movs	r0, #150	@ 0x96
 8001e90:	f004 fa58 	bl	8006344 <osDelay>
				if (check_SIM == 0){
 8001e94:	2c00      	cmp	r4, #0
 8001e96:	f040 80d1 	bne.w	800203c <StartGSM+0x264>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e9a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	486a      	ldr	r0, [pc, #424]	@ (800204c <StartGSM+0x274>)
 8001ea2:	f006 fc42 	bl	800872a <memset>
					SIM_UART_ReInitializeRxDMA();
 8001ea6:	f7ff f867 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8001eaa:	496e      	ldr	r1, [pc, #440]	@ (8002064 <StartGSM+0x28c>)
 8001eac:	4628      	mov	r0, r5
 8001eae:	f001 f9eb 	bl	8003288 <uart_transmit_string>
					reboot_SIM_module();
 8001eb2:	f7ff f8c1 	bl	8001038 <reboot_SIM_module>
				close_connection(0);
				process = 4;
				break;
					
		}
		HAL_UART_Transmit(&huart1, (uint8_t*) "Hello from GSM\n", strlen("Hello from GSM\n"), 1000);
 8001eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eba:	496b      	ldr	r1, [pc, #428]	@ (8002068 <StartGSM+0x290>)
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f004 f8d0 	bl	8006064 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ecc:	f002 f992 	bl	80041f4 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	4966      	ldr	r1, [pc, #408]	@ (800206c <StartGSM+0x294>)
 8001ed4:	f001 f9d8 	bl	8003288 <uart_transmit_string>
		osDelay(500);
 8001ed8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001edc:	f004 fa32 	bl	8006344 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001ee0:	e795      	b.n	8001e0e <StartGSM+0x36>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 8001ee2:	4963      	ldr	r1, [pc, #396]	@ (8002070 <StartGSM+0x298>)
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f001 f9cf 	bl	8003288 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001eea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4856      	ldr	r0, [pc, #344]	@ (800204c <StartGSM+0x274>)
 8001ef2:	f006 fc1a 	bl	800872a <memset>
				SIM_UART_ReInitializeRxDMA();
 8001ef6:	f7ff f83f 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff fc44 	bl	8001788 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f00:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f04:	2100      	movs	r1, #0
 8001f06:	4851      	ldr	r0, [pc, #324]	@ (800204c <StartGSM+0x274>)
 8001f08:	f006 fc0f 	bl	800872a <memset>
				process++;
 8001f0c:	2403      	movs	r4, #3
				SIM_UART_ReInitializeRxDMA();
 8001f0e:	f7ff f833 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
				break;
 8001f12:	e7d0      	b.n	8001eb6 <StartGSM+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8001f14:	4957      	ldr	r1, [pc, #348]	@ (8002074 <StartGSM+0x29c>)
 8001f16:	4628      	mov	r0, r5
 8001f18:	f001 f9b6 	bl	8003288 <uart_transmit_string>
				activate_context(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff fc85 	bl	800182c <activate_context>
				osDelay(200);
 8001f22:	20c8      	movs	r0, #200	@ 0xc8
 8001f24:	f004 fa0e 	bl	8006344 <osDelay>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f28:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4847      	ldr	r0, [pc, #284]	@ (800204c <StartGSM+0x274>)
 8001f30:	f006 fbfb 	bl	800872a <memset>
				SIM_UART_ReInitializeRxDMA();
 8001f34:	f7ff f820 	bl	8000f78 <SIM_UART_ReInitializeRxDMA>
				process = 4;
 8001f38:	2404      	movs	r4, #4
				break;
 8001f3a:	e7bc      	b.n	8001eb6 <StartGSM+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8001f3c:	494e      	ldr	r1, [pc, #312]	@ (8002078 <StartGSM+0x2a0>)
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f001 f9a2 	bl	8003288 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8001f44:	2300      	movs	r3, #0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fd04 	bl	8001958 <open_socket_service>
				if(received_res){
 8001f50:	b128      	cbz	r0, 8001f5e <StartGSM+0x186>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 8001f52:	494a      	ldr	r1, [pc, #296]	@ (800207c <StartGSM+0x2a4>)
 8001f54:	4628      	mov	r0, r5
 8001f56:	f001 f997 	bl	8003288 <uart_transmit_string>
					process++;
 8001f5a:	2405      	movs	r4, #5
 8001f5c:	e7ab      	b.n	8001eb6 <StartGSM+0xde>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8001f5e:	4628      	mov	r0, r5
 8001f60:	4947      	ldr	r1, [pc, #284]	@ (8002080 <StartGSM+0x2a8>)
 8001f62:	f001 f991 	bl	8003288 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff fc96 	bl	8001898 <deactivate_context>
 8001f6c:	e76d      	b.n	8001e4a <StartGSM+0x72>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8001f6e:	4945      	ldr	r1, [pc, #276]	@ (8002084 <StartGSM+0x2ac>)
 8001f70:	4628      	mov	r0, r5
 8001f72:	f001 f989 	bl	8003288 <uart_transmit_string>
				send_data_to_server(0,message_array, message_length);
 8001f76:	9a00      	ldr	r2, [sp, #0]
 8001f78:	4631      	mov	r1, r6
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fd72 	bl	8001a64 <send_data_to_server>
				free(message_array);
 8001f80:	4630      	mov	r0, r6
 8001f82:	f005 fd3f 	bl	8007a04 <free>
				process++;
 8001f86:	2406      	movs	r4, #6
				break;
 8001f88:	e795      	b.n	8001eb6 <StartGSM+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 8001f8a:	493f      	ldr	r1, [pc, #252]	@ (8002088 <StartGSM+0x2b0>)
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f001 f97b 	bl	8003288 <uart_transmit_string>
				check_data_sent_to_server(0);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fdb2 	bl	8001afc <check_data_sent_to_server>
				receive_response("Check terminal register\n");
 8001f98:	483c      	ldr	r0, [pc, #240]	@ (800208c <StartGSM+0x2b4>)
 8001f9a:	f7ff f809 	bl	8000fb0 <receive_response>
				process++;
 8001f9e:	2407      	movs	r4, #7
				break;
 8001fa0:	e789      	b.n	8001eb6 <StartGSM+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8001fa2:	493b      	ldr	r1, [pc, #236]	@ (8002090 <StartGSM+0x2b8>)
 8001fa4:	4827      	ldr	r0, [pc, #156]	@ (8002044 <StartGSM+0x26c>)
					if(received_RMC == 1){
 8001fa6:	4d3b      	ldr	r5, [pc, #236]	@ (8002094 <StartGSM+0x2bc>)
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8001fa8:	4e3b      	ldr	r6, [pc, #236]	@ (8002098 <StartGSM+0x2c0>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8001faa:	f001 f96d 	bl	8003288 <uart_transmit_string>
 8001fae:	2400      	movs	r4, #0
					receiveRMCDataGSM();
 8001fb0:	f7ff fe48 	bl	8001c44 <receiveRMCDataGSM>
						get_RTC_time_date();
 8001fb4:	f7ff f956 	bl	8001264 <get_RTC_time_date>
					if(received_RMC == 1){
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d129      	bne.n	8002012 <StartGSM+0x23a>
						countSendingDelay++;
 8001fbe:	3401      	adds	r4, #1
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8001fc0:	4820      	ldr	r0, [pc, #128]	@ (8002044 <StartGSM+0x26c>)
 8001fc2:	4631      	mov	r1, r6
 8001fc4:	f001 f960 	bl	8003288 <uart_transmit_string>
						snprintf(output_elapsed, 128, "Sending Delay GSM GSM GSM: %d\n", countSendingDelay);
 8001fc8:	4a34      	ldr	r2, [pc, #208]	@ (800209c <StartGSM+0x2c4>)
 8001fca:	4623      	mov	r3, r4
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	a822      	add	r0, sp, #136	@ 0x88
 8001fd0:	f006 fae8 	bl	80085a4 <sniprintf>
						uart_transmit_string(&huart1, (uint8_t *)countSendingDelay);
 8001fd4:	481b      	ldr	r0, [pc, #108]	@ (8002044 <StartGSM+0x26c>)
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	f001 f956 	bl	8003288 <uart_transmit_string>
						if(countSendingDelay >= 9){
 8001fdc:	2c09      	cmp	r4, #9
 8001fde:	d116      	bne.n	800200e <StartGSM+0x236>
							save_rmc_to_location_info(&location_info);
 8001fe0:	a811      	add	r0, sp, #68	@ 0x44
 8001fe2:	f7ff f8b5 	bl	8001150 <save_rmc_to_location_info>
							location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 8001fe6:	a901      	add	r1, sp, #4
 8001fe8:	a811      	add	r0, sp, #68	@ 0x44
 8001fea:	f7fe ffa6 	bl	8000f3a <convert_location_info_to_array>
							send_data_to_server(0, location_report_message_array ,location_report_message_length);
 8001fee:	9a01      	ldr	r2, [sp, #4]
							location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 8001ff0:	4601      	mov	r1, r0
							send_data_to_server(0, location_report_message_array ,location_report_message_length);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff fd36 	bl	8001a64 <send_data_to_server>
							uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8001ff8:	4929      	ldr	r1, [pc, #164]	@ (80020a0 <StartGSM+0x2c8>)
 8001ffa:	4812      	ldr	r0, [pc, #72]	@ (8002044 <StartGSM+0x26c>)
 8001ffc:	f001 f944 	bl	8003288 <uart_transmit_string>
							check_data_sent_to_server(0);
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fd7b 	bl	8001afc <check_data_sent_to_server>
							receive_response("Check location report\n");
 8002006:	4827      	ldr	r0, [pc, #156]	@ (80020a4 <StartGSM+0x2cc>)
 8002008:	f7fe ffd2 	bl	8000fb0 <receive_response>
							countSendingDelay = 0;
 800200c:	2400      	movs	r4, #0
						received_RMC = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	602b      	str	r3, [r5, #0]
					osDelay(500);
 8002012:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002016:	f004 f995 	bl	8006344 <osDelay>
				while(countSendingDelay < 9){
 800201a:	e7c9      	b.n	8001fb0 <StartGSM+0x1d8>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 800201c:	4641      	mov	r1, r8
 800201e:	4628      	mov	r0, r5
 8002020:	f001 f932 	bl	8003288 <uart_transmit_string>
				check_data_sent_to_server(0);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fd69 	bl	8001afc <check_data_sent_to_server>
				receive_response("Check location report\n");
 800202a:	481e      	ldr	r0, [pc, #120]	@ (80020a4 <StartGSM+0x2cc>)
 800202c:	f7fe ffc0 	bl	8000fb0 <receive_response>
				process++;
 8002030:	2409      	movs	r4, #9
				break;
 8002032:	e740      	b.n	8001eb6 <StartGSM+0xde>
				close_connection(0);
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff fdd5 	bl	8001be4 <close_connection>
 800203a:	e77d      	b.n	8001f38 <StartGSM+0x160>
				else process++;
 800203c:	2402      	movs	r4, #2
 800203e:	e73a      	b.n	8001eb6 <StartGSM+0xde>
 8002040:	0800c4d4 	.word	0x0800c4d4
 8002044:	2000118c 	.word	0x2000118c
 8002048:	48000800 	.word	0x48000800
 800204c:	20000bd0 	.word	0x20000bd0
 8002050:	2000107c 	.word	0x2000107c
 8002054:	20000bc0 	.word	0x20000bc0
 8002058:	0800c4f9 	.word	0x0800c4f9
 800205c:	0800c507 	.word	0x0800c507
 8002060:	20000b54 	.word	0x20000b54
 8002064:	0800c223 	.word	0x0800c223
 8002068:	0800c6e6 	.word	0x0800c6e6
 800206c:	0800be0f 	.word	0x0800be0f
 8002070:	0800c520 	.word	0x0800c520
 8002074:	0800c548 	.word	0x0800c548
 8002078:	0800c56f 	.word	0x0800c56f
 800207c:	0800c595 	.word	0x0800c595
 8002080:	0800c5b5 	.word	0x0800c5b5
 8002084:	0800c5cf 	.word	0x0800c5cf
 8002088:	0800c5ff 	.word	0x0800c5ff
 800208c:	0800c626 	.word	0x0800c626
 8002090:	0800c63f 	.word	0x0800c63f
 8002094:	20000bb8 	.word	0x20000bb8
 8002098:	0800c65f 	.word	0x0800c65f
 800209c:	0800c680 	.word	0x0800c680
 80020a0:	0800c69f 	.word	0x0800c69f
 80020a4:	0800c6cf 	.word	0x0800c6cf

080020a8 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 80020a8:	b410      	push	{r4}
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 80020ae:	80a3      	strh	r3, [r4, #4]
{
 80020b0:	4611      	mov	r1, r2
 80020b2:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 80020b4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 80020b6:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 80020b8:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 80020ba:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 80020bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 80020c0:	f004 b8f6 	b.w	80062b0 <HAL_UART_Receive_DMA>

080020c4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <vApplicationGetIdleTaskMemory+0x10>)
 80020c6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <vApplicationGetIdleTaskMemory+0x14>)
 80020ca:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000f50 	.word	0x20000f50
 80020d8:	20000d50 	.word	0x20000d50

080020dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b500      	push	{lr}
 80020de:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e0:	2228      	movs	r2, #40	@ 0x28
 80020e2:	2100      	movs	r1, #0
 80020e4:	a805      	add	r0, sp, #20
 80020e6:	f006 fb20 	bl	800872a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ea:	2214      	movs	r2, #20
 80020ec:	2100      	movs	r1, #0
 80020ee:	4668      	mov	r0, sp
 80020f0:	f006 fb1b 	bl	800872a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f4:	223c      	movs	r2, #60	@ 0x3c
 80020f6:	2100      	movs	r1, #0
 80020f8:	eb0d 0002 	add.w	r0, sp, r2
 80020fc:	f006 fb15 	bl	800872a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002100:	f002 f88a 	bl	8004218 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <SystemClock_Config+0xa0>)
 8002106:	6a13      	ldr	r3, [r2, #32]
 8002108:	f023 0318 	bic.w	r3, r3, #24
 800210c:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800210e:	2306      	movs	r3, #6
 8002110:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002112:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002114:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002118:	2310      	movs	r3, #16
 800211a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800211c:	2002      	movs	r0, #2
 800211e:	2300      	movs	r3, #0
 8002120:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002124:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002128:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800212a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f002 f87c 	bl	8004228 <HAL_RCC_OscConfig>
 8002130:	4601      	mov	r1, r0
 8002132:	b108      	cbz	r0, 8002138 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002136:	e7fe      	b.n	8002136 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002138:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800213a:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800213e:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002142:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002144:	4668      	mov	r0, sp
 8002146:	f002 faef 	bl	8004728 <HAL_RCC_ClockConfig>
 800214a:	b108      	cbz	r0, 8002150 <SystemClock_Config+0x74>
 800214c:	b672      	cpsid	i
  while (1)
 800214e:	e7fe      	b.n	800214e <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <SystemClock_Config+0xa4>)
 8002152:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002154:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002158:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800215c:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800215e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002162:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002164:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002168:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216a:	f002 fbd3 	bl	8004914 <HAL_RCCEx_PeriphCLKConfig>
 800216e:	b108      	cbz	r0, 8002174 <SystemClock_Config+0x98>
 8002170:	b672      	cpsid	i
  while (1)
 8002172:	e7fe      	b.n	8002172 <SystemClock_Config+0x96>
}
 8002174:	b01f      	add	sp, #124	@ 0x7c
 8002176:	f85d fb04 	ldr.w	pc, [sp], #4
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	00010187 	.word	0x00010187

08002184 <main>:
{
 8002184:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	4dae      	ldr	r5, [pc, #696]	@ (8002440 <main+0x2bc>)
{
 8002188:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218a:	f04f 0814 	mov.w	r8, #20
  HAL_Init();
 800218e:	f001 f8bf 	bl	8003310 <HAL_Init>
  SystemClock_Config();
 8002192:	f7ff ffa3 	bl	80020dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002196:	4642      	mov	r2, r8
 8002198:	2100      	movs	r1, #0
 800219a:	a813      	add	r0, sp, #76	@ 0x4c
 800219c:	f006 fac5 	bl	800872a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80021a2:	48a8      	ldr	r0, [pc, #672]	@ (8002444 <main+0x2c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021a8:	616b      	str	r3, [r5, #20]
 80021aa:	696b      	ldr	r3, [r5, #20]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	696b      	ldr	r3, [r5, #20]
 80021b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ba:	616b      	str	r3, [r5, #20]
 80021bc:	696b      	ldr	r3, [r5, #20]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	9303      	str	r3, [sp, #12]
 80021c4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	696b      	ldr	r3, [r5, #20]
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021cc:	616b      	str	r3, [r5, #20]
 80021ce:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80021d0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80021d6:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	9304      	str	r3, [sp, #16]
 80021da:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80021dc:	f002 f80a 	bl	80041f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80021e0:	4898      	ldr	r0, [pc, #608]	@ (8002444 <main+0x2c0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	f240 2116 	movw	r1, #534	@ 0x216
 80021e8:	f002 f804 	bl	80041f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80021ec:	4896      	ldr	r0, [pc, #600]	@ (8002448 <main+0x2c4>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021f4:	f001 fffe 	bl	80041f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002204:	f001 fff6 	bl	80041f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2701      	movs	r7, #1
 800220a:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	488d      	ldr	r0, [pc, #564]	@ (8002444 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002210:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f001 ff27 	bl	800406c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221e:	4889      	ldr	r0, [pc, #548]	@ (8002444 <main+0x2c0>)
 8002220:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	e9cd 8713 	strd	r8, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f001 ff1f 	bl	800406c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800222e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	4885      	ldr	r0, [pc, #532]	@ (8002448 <main+0x2c4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002236:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223a:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f001 ff15 	bl	800406c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002242:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	4880      	ldr	r0, [pc, #512]	@ (8002448 <main+0x2c4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002248:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	e9cd 6713 	strd	r6, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002250:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f001 ff0a 	bl	800406c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002258:	2240      	movs	r2, #64	@ 0x40
 800225a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225e:	4879      	ldr	r0, [pc, #484]	@ (8002444 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002260:	9715      	str	r7, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002264:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f001 ff00 	bl	800406c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800226c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	a913      	add	r1, sp, #76	@ 0x4c
 8002272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	e9cd 3713 	strd	r3, r7, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227a:	e9cd 7915 	strd	r7, r9, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f001 fef5 	bl	800406c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002282:	4622      	mov	r2, r4
 8002284:	2105      	movs	r1, #5
 8002286:	2017      	movs	r0, #23
 8002288:	f001 fdcc 	bl	8003e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800228c:	2017      	movs	r0, #23
 800228e:	f001 fdfb 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002292:	696b      	ldr	r3, [r5, #20]
 8002294:	433b      	orrs	r3, r7
 8002296:	616b      	str	r3, [r5, #20]
 8002298:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 800229a:	4d6c      	ldr	r5, [pc, #432]	@ (800244c <main+0x2c8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800229c:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800229e:	4622      	mov	r2, r4
 80022a0:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80022a4:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80022a8:	f001 fdbc 	bl	8003e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80022ac:	200d      	movs	r0, #13
 80022ae:	f001 fdeb 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80022b2:	4622      	mov	r2, r4
 80022b4:	2105      	movs	r1, #5
 80022b6:	200f      	movs	r0, #15
 80022b8:	f001 fdb4 	bl	8003e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022bc:	200f      	movs	r0, #15
 80022be:	f001 fde3 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80022c2:	4622      	mov	r2, r4
 80022c4:	2105      	movs	r1, #5
 80022c6:	2010      	movs	r0, #16
 80022c8:	f001 fdac 	bl	8003e24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80022cc:	2010      	movs	r0, #16
 80022ce:	f001 fddb 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 80022d2:	4621      	mov	r1, r4
 80022d4:	4642      	mov	r2, r8
 80022d6:	a813      	add	r0, sp, #76	@ 0x4c
 80022d8:	f006 fa27 	bl	800872a <memset>
  hrtc.Instance = RTC;
 80022dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002450 <main+0x2cc>)
  RTC_DateTypeDef sDate = {0};
 80022de:	940c      	str	r4, [sp, #48]	@ 0x30
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e0:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 80022e4:	217f      	movs	r1, #127	@ 0x7f
 80022e6:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022e8:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80022ea:	e9c5 1302 	strd	r1, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022ee:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80022f2:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80022f4:	f002 fc59 	bl	8004baa <HAL_RTC_Init>
 80022f8:	b108      	cbz	r0, 80022fe <main+0x17a>
 80022fa:	b672      	cpsid	i
  while (1)
 80022fc:	e7fe      	b.n	80022fc <main+0x178>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022fe:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sTime.Hours = 0x0;
 8002302:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sTime.Seconds = 0x0;
 8002306:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800230a:	463a      	mov	r2, r7
 800230c:	a913      	add	r1, sp, #76	@ 0x4c
 800230e:	4628      	mov	r0, r5
 8002310:	f002 fc9e 	bl	8004c50 <HAL_RTC_SetTime>
 8002314:	b108      	cbz	r0, 800231a <main+0x196>
 8002316:	b672      	cpsid	i
  while (1)
 8002318:	e7fe      	b.n	8002318 <main+0x194>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <main+0x2d0>)
 800231c:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800231e:	463a      	mov	r2, r7
 8002320:	a90c      	add	r1, sp, #48	@ 0x30
 8002322:	4628      	mov	r0, r5
 8002324:	f002 fcee 	bl	8004d04 <HAL_RTC_SetDate>
 8002328:	4603      	mov	r3, r0
 800232a:	b108      	cbz	r0, 8002330 <main+0x1ac>
 800232c:	b672      	cpsid	i
  while (1)
 800232e:	e7fe      	b.n	800232e <main+0x1aa>
  hspi1.Instance = SPI1;
 8002330:	4849      	ldr	r0, [pc, #292]	@ (8002458 <main+0x2d4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002332:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8002478 <main+0x2f4>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002336:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002338:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800233c:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002340:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002344:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002348:	2510      	movs	r5, #16
 800234a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234e:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8002352:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002354:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002358:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800235c:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800235e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002360:	2308      	movs	r3, #8
 8002362:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002364:	f002 fe73 	bl	800504e <HAL_SPI_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	b108      	cbz	r0, 8002370 <main+0x1ec>
 800236c:	b672      	cpsid	i
  while (1)
 800236e:	e7fe      	b.n	800236e <main+0x1ea>
  huart1.Instance = USART1;
 8002370:	483a      	ldr	r0, [pc, #232]	@ (800245c <main+0x2d8>)
  huart1.Init.BaudRate = 115200;
 8002372:	4a3b      	ldr	r2, [pc, #236]	@ (8002460 <main+0x2dc>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8002374:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8002376:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800237a:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800237c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002380:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002384:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002388:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 800238a:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800238e:	f003 ff13 	bl	80061b8 <HAL_UART_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	b108      	cbz	r0, 800239a <main+0x216>
 8002396:	b672      	cpsid	i
  while (1)
 8002398:	e7fe      	b.n	8002398 <main+0x214>
  huart2.Instance = USART2;
 800239a:	4832      	ldr	r0, [pc, #200]	@ (8002464 <main+0x2e0>)
  huart2.Init.BaudRate = 9600;
 800239c:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 800247c <main+0x2f8>
 80023a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023a8:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 80023b4:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b8:	f003 fefe 	bl	80061b8 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	b108      	cbz	r0, 80023c4 <main+0x240>
 80023c0:	b672      	cpsid	i
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <main+0x23e>
  huart3.Instance = USART3;
 80023c4:	4828      	ldr	r0, [pc, #160]	@ (8002468 <main+0x2e4>)
 80023c6:	4a29      	ldr	r2, [pc, #164]	@ (800246c <main+0x2e8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80023cc:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d0:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023d8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023dc:	f003 feec 	bl	80061b8 <HAL_UART_Init>
 80023e0:	4604      	mov	r4, r0
 80023e2:	b108      	cbz	r0, 80023e8 <main+0x264>
 80023e4:	b672      	cpsid	i
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <main+0x262>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e8:	462a      	mov	r2, r5
 80023ea:	4601      	mov	r1, r0
 80023ec:	a813      	add	r0, sp, #76	@ 0x4c
 80023ee:	f006 f99c 	bl	800872a <memset>
  htim3.Instance = TIM3;
 80023f2:	4d1f      	ldr	r5, [pc, #124]	@ (8002470 <main+0x2ec>)
  htim3.Init.Prescaler = 8000;
 80023f4:	481f      	ldr	r0, [pc, #124]	@ (8002474 <main+0x2f0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f6:	940e      	str	r4, [sp, #56]	@ 0x38
  htim3.Init.Prescaler = 8000;
 80023f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80023fc:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8002400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002404:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002406:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002412:	f003 fa79 	bl	8005908 <HAL_TIM_Base_Init>
 8002416:	b108      	cbz	r0, 800241c <main+0x298>
 8002418:	b672      	cpsid	i
  while (1)
 800241a:	e7fe      	b.n	800241a <main+0x296>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800241c:	a913      	add	r1, sp, #76	@ 0x4c
 800241e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002420:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002422:	f003 faab 	bl	800597c <HAL_TIM_ConfigClockSource>
 8002426:	b108      	cbz	r0, 800242c <main+0x2a8>
 8002428:	b672      	cpsid	i
  while (1)
 800242a:	e7fe      	b.n	800242a <main+0x2a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	900c      	str	r0, [sp, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002430:	a90c      	add	r1, sp, #48	@ 0x30
 8002432:	4628      	mov	r0, r5
 8002434:	f003 fb3c 	bl	8005ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002438:	b310      	cbz	r0, 8002480 <main+0x2fc>
 800243a:	b672      	cpsid	i
  while (1)
 800243c:	e7fe      	b.n	800243c <main+0x2b8>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	48000800 	.word	0x48000800
 8002448:	48000400 	.word	0x48000400
 800244c:	20001328 	.word	0x20001328
 8002450:	40002800 	.word	0x40002800
 8002454:	00010101 	.word	0x00010101
 8002458:	200012c4 	.word	0x200012c4
 800245c:	2000118c 	.word	0x2000118c
 8002460:	40013800 	.word	0x40013800
 8002464:	20001104 	.word	0x20001104
 8002468:	2000107c 	.word	0x2000107c
 800246c:	40004800 	.word	0x40004800
 8002470:	20001214 	.word	0x20001214
 8002474:	40000400 	.word	0x40000400
 8002478:	40013000 	.word	0x40013000
 800247c:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002480:	4c57      	ldr	r4, [pc, #348]	@ (80025e0 <main+0x45c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002482:	2218      	movs	r2, #24
 8002484:	2100      	movs	r1, #0
 8002486:	a813      	add	r0, sp, #76	@ 0x4c
 8002488:	f006 f94f 	bl	800872a <memset>
  hadc2.Instance = ADC2;
 800248c:	4a55      	ldr	r2, [pc, #340]	@ (80025e4 <main+0x460>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800248e:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002490:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002492:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002494:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002496:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800249a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800249e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a4:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 80024a6:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80024a8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024ac:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ae:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80024b0:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80024b2:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80024b4:	f000 ff9a 	bl	80033ec <HAL_ADC_Init>
 80024b8:	b108      	cbz	r0, 80024be <main+0x33a>
 80024ba:	b672      	cpsid	i
  while (1)
 80024bc:	e7fe      	b.n	80024bc <main+0x338>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024be:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfig.Offset = 0;
 80024c2:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Channel = ADC_CHANNEL_2;
 80024c6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024c8:	a913      	add	r1, sp, #76	@ 0x4c
 80024ca:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024cc:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80024d0:	f001 fa8e 	bl	80039f0 <HAL_ADC_ConfigChannel>
 80024d4:	4605      	mov	r5, r0
 80024d6:	b108      	cbz	r0, 80024dc <main+0x358>
 80024d8:	b672      	cpsid	i
  while (1)
 80024da:	e7fe      	b.n	80024da <main+0x356>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024dc:	4c42      	ldr	r4, [pc, #264]	@ (80025e8 <main+0x464>)
  ADC_MultiModeTypeDef multimode = {0};
 80024de:	900e      	str	r0, [sp, #56]	@ 0x38
 80024e0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80024e4:	4601      	mov	r1, r0
 80024e6:	2218      	movs	r2, #24
 80024e8:	a813      	add	r0, sp, #76	@ 0x4c
 80024ea:	f006 f91e 	bl	800872a <memset>
  hadc3.Instance = ADC3;
 80024ee:	4b3f      	ldr	r3, [pc, #252]	@ (80025ec <main+0x468>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024f0:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80024f4:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024f6:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024fa:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024fe:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002502:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8002506:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002508:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800250c:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800250e:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002510:	f000 ff6c 	bl	80033ec <HAL_ADC_Init>
 8002514:	b108      	cbz	r0, 800251a <main+0x396>
 8002516:	b672      	cpsid	i
  while (1)
 8002518:	e7fe      	b.n	8002518 <main+0x394>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800251a:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800251c:	a90c      	add	r1, sp, #48	@ 0x30
 800251e:	4620      	mov	r0, r4
 8002520:	f001 fbea 	bl	8003cf8 <HAL_ADCEx_MultiModeConfigChannel>
 8002524:	b108      	cbz	r0, 800252a <main+0x3a6>
 8002526:	b672      	cpsid	i
  while (1)
 8002528:	e7fe      	b.n	8002528 <main+0x3a4>
  sConfig.Channel = ADC_CHANNEL_12;
 800252a:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800252c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sConfig.Offset = 0;
 8002530:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002534:	a913      	add	r1, sp, #76	@ 0x4c
 8002536:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002538:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800253c:	f001 fa58 	bl	80039f0 <HAL_ADC_ConfigChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	b108      	cbz	r0, 8002548 <main+0x3c4>
 8002544:	b672      	cpsid	i
  while (1)
 8002546:	e7fe      	b.n	8002546 <main+0x3c2>
  hspi2.Instance = SPI2;
 8002548:	4829      	ldr	r0, [pc, #164]	@ (80025f0 <main+0x46c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800254a:	492a      	ldr	r1, [pc, #168]	@ (80025f4 <main+0x470>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800254c:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800254e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002552:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002556:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800255a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800255e:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002562:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8002566:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002568:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800256c:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002570:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002572:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002574:	2308      	movs	r3, #8
 8002576:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002578:	f002 fd69 	bl	800504e <HAL_SPI_Init>
 800257c:	4607      	mov	r7, r0
 800257e:	b108      	cbz	r0, 8002584 <main+0x400>
 8002580:	b672      	cpsid	i
  while (1)
 8002582:	e7fe      	b.n	8002582 <main+0x3fe>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 8002584:	4c1c      	ldr	r4, [pc, #112]	@ (80025f8 <main+0x474>)
 8002586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002588:	ad05      	add	r5, sp, #20
 800258a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800258c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002590:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8002594:	4639      	mov	r1, r7
 8002596:	a805      	add	r0, sp, #20
 8002598:	f003 feac 	bl	80062f4 <osThreadCreate>
 800259c:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <main+0x478>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 800259e:	f104 060c 	add.w	r6, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80025a2:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 80025a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025a6:	ad0c      	add	r5, sp, #48	@ 0x30
 80025a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025aa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80025ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80025b2:	4639      	mov	r1, r7
 80025b4:	a80c      	add	r0, sp, #48	@ 0x30
 80025b6:	f003 fe9d 	bl	80062f4 <osThreadCreate>
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <main+0x47c>)
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 768);
 80025bc:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80025be:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 768);
 80025c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c2:	ad13      	add	r5, sp, #76	@ 0x4c
 80025c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80025ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 80025ce:	4639      	mov	r1, r7
 80025d0:	a813      	add	r0, sp, #76	@ 0x4c
 80025d2:	f003 fe8f 	bl	80062f4 <osThreadCreate>
 80025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <main+0x480>)
 80025d8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80025da:	f003 fe86 	bl	80062ea <osKernelStart>
  while (1)
 80025de:	e7fe      	b.n	80025de <main+0x45a>
 80025e0:	20001398 	.word	0x20001398
 80025e4:	50000100 	.word	0x50000100
 80025e8:	20001348 	.word	0x20001348
 80025ec:	50000400 	.word	0x50000400
 80025f0:	20001260 	.word	0x20001260
 80025f4:	40003800 	.word	0x40003800
 80025f8:	0800bd58 	.word	0x0800bd58
 80025fc:	20000fac 	.word	0x20000fac
 8002600:	20000fa8 	.word	0x20000fa8
 8002604:	20000fa4 	.word	0x20000fa4

08002608 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d101      	bne.n	8002614 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002610:	f000 be90 	b.w	8003334 <HAL_IncTick>
}
 8002614:	4770      	bx	lr

08002616 <Error_Handler>:
 8002616:	b672      	cpsid	i
  while (1)
 8002618:	e7fe      	b.n	8002618 <Error_Handler+0x2>
	...

0800261c <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 800261c:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800261e:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800262a:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800262e:	f001 fde1 	bl	80041f4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8002632:	4810      	ldr	r0, [pc, #64]	@ (8002674 <W25_ReadStatusReg1+0x58>)
 8002634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002638:	2201      	movs	r2, #1
 800263a:	f10d 0106 	add.w	r1, sp, #6
 800263e:	f002 fd74 	bl	800512a <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8002642:	4604      	mov	r4, r0
 8002644:	b940      	cbnz	r0, 8002658 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8002646:	480b      	ldr	r0, [pc, #44]	@ (8002674 <W25_ReadStatusReg1+0x58>)
 8002648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264c:	2201      	movs	r2, #1
 800264e:	f10d 0107 	add.w	r1, sp, #7
 8002652:	f002 ff64 	bl	800551e <HAL_SPI_Receive>
 8002656:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800265e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002662:	f001 fdc7 	bl	80041f4 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8002666:	b91c      	cbnz	r4, 8002670 <W25_ReadStatusReg1+0x54>
 8002668:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 800266c:	b002      	add	sp, #8
 800266e:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8002670:	20ff      	movs	r0, #255	@ 0xff
 8002672:	e7fb      	b.n	800266c <W25_ReadStatusReg1+0x50>
 8002674:	200012c4 	.word	0x200012c4

08002678 <W25_Busy>:

int W25_Busy(void)
{
 8002678:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 800267a:	f7ff ffcf 	bl	800261c <W25_ReadStatusReg1>
}
 800267e:	f000 0001 	and.w	r0, r0, #1
 8002682:	bd08      	pop	{r3, pc}

08002684 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8002688:	f000 fe60 	bl	800334c <HAL_GetTick>
 800268c:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 800268e:	f7ff fff3 	bl	8002678 <W25_Busy>
 8002692:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8002694:	f000 fe5a 	bl	800334c <HAL_GetTick>
 8002698:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 800269a:	b114      	cbz	r4, 80026a2 <W25_DelayWhileBusy+0x1e>
 800269c:	42ab      	cmp	r3, r5
 800269e:	d3f6      	bcc.n	800268e <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 80026a0:	2403      	movs	r4, #3
	return retval;
}
 80026a2:	4620      	mov	r0, r4
 80026a4:	bd70      	pop	{r4, r5, r6, pc}

080026a6 <W25_Reset>:
void W25_Reset(){
 80026a6:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b2:	f001 fd9f 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c0:	f001 fd98 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ce:	f001 fd91 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026dc:	f001 fd8a 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ea:	f001 fd83 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 80026ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 80026f2:	2201      	movs	r2, #1
 80026f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fc:	f001 bd7a 	b.w	80041f4 <HAL_GPIO_WritePin>

08002700 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8002704:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002706:	2200      	movs	r2, #0
 8002708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800270c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8002710:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002714:	f001 fd6e 	bl	80041f4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8002718:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	aa03      	add	r2, sp, #12
 8002720:	2304      	movs	r3, #4
 8002722:	f10d 010b 	add.w	r1, sp, #11
 8002726:	4820      	ldr	r0, [pc, #128]	@ (80027a8 <W25_ReadJedecID+0xa8>)
 8002728:	f002 fdc9 	bl	80052be <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 800272c:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 800272e:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8002730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002738:	f001 fd5c 	bl	80041f4 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <W25_ReadJedecID+0xac>)
 800273e:	aa07      	add	r2, sp, #28
 8002740:	f103 0710 	add.w	r7, r3, #16
 8002744:	4616      	mov	r6, r2
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	4614      	mov	r4, r2
 800274c:	c403      	stmia	r4!, {r0, r1}
 800274e:	3308      	adds	r3, #8
 8002750:	42bb      	cmp	r3, r7
 8002752:	4622      	mov	r2, r4
 8002754:	d1f7      	bne.n	8002746 <W25_ReadJedecID+0x46>
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 800275a:	4630      	mov	r0, r6
 800275c:	f7fd fd98 	bl	8000290 <strlen>
 8002760:	4631      	mov	r1, r6
 8002762:	b282      	uxth	r2, r0
 8002764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002768:	4811      	ldr	r0, [pc, #68]	@ (80027b0 <W25_ReadJedecID+0xb0>)
 800276a:	f003 fc7b 	bl	8006064 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 800276e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002772:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <W25_ReadJedecID+0xb4>)
 800277a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800277e:	a804      	add	r0, sp, #16
 8002780:	f005 ff44 	bl	800860c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8002784:	a904      	add	r1, sp, #16
 8002786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278a:	220b      	movs	r2, #11
 800278c:	4808      	ldr	r0, [pc, #32]	@ (80027b0 <W25_ReadJedecID+0xb0>)
 800278e:	f003 fc69 	bl	8006064 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 8002792:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <W25_ReadJedecID+0xb8>)
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <W25_ReadJedecID+0xb0>)
 8002796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800279a:	2201      	movs	r2, #1
 800279c:	f003 fc62 	bl	8006064 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 80027a0:	4628      	mov	r0, r5
 80027a2:	b00d      	add	sp, #52	@ 0x34
 80027a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200012c4 	.word	0x200012c4
 80027ac:	0800c716 	.word	0x0800c716
 80027b0:	2000118c 	.word	0x2000118c
 80027b4:	0800c703 	.word	0x0800c703
 80027b8:	0800c714 	.word	0x0800c714

080027bc <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 80027bc:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80027be:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80027ca:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80027ce:	f001 fd11 	bl	80041f4 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80027d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027d6:	f10d 0107 	add.w	r1, sp, #7
 80027da:	2201      	movs	r2, #1
 80027dc:	4806      	ldr	r0, [pc, #24]	@ (80027f8 <W25_WriteEnable+0x3c>)
 80027de:	f002 fca4 	bl	800512a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80027e2:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80027e4:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80027e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ee:	f001 fd01 	bl	80041f4 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 80027f2:	4620      	mov	r0, r4
 80027f4:	b002      	add	sp, #8
 80027f6:	bd10      	pop	{r4, pc}
 80027f8:	200012c4 	.word	0x200012c4

080027fc <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 80027fc:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 80027fe:	2320      	movs	r3, #32
 8002800:	f88d 3004 	strb.w	r3, [sp, #4]
 8002804:	0c03      	lsrs	r3, r0, #16
 8002806:	ba40      	rev16	r0, r0
 8002808:	f88d 3005 	strb.w	r3, [sp, #5]
 800280c:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8002810:	f7ff ffd4 	bl	80027bc <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800281a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281e:	f001 fce9 	bl	80041f4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8002822:	2204      	movs	r2, #4
 8002824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002828:	eb0d 0102 	add.w	r1, sp, r2
 800282c:	4808      	ldr	r0, [pc, #32]	@ (8002850 <W25_SectorErase+0x54>)
 800282e:	f002 fc7c 	bl	800512a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8002832:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8002834:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8002836:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800283a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800283e:	f001 fcd9 	bl	80041f4 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8002842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002846:	f7ff ff1d 	bl	8002684 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 800284a:	4620      	mov	r0, r4
 800284c:	b002      	add	sp, #8
 800284e:	bd10      	pop	{r4, pc}
 8002850:	200012c4 	.word	0x200012c4

08002854 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8002854:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002858:	4606      	mov	r6, r0
 800285a:	4688      	mov	r8, r1
 800285c:	4617      	mov	r7, r2
	int retval;
	W25_WriteEnable(); // Make sure we can write...
 800285e:	f7ff ffad 	bl	80027bc <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8002862:	f8df a080 	ldr.w	sl, [pc, #128]	@ 80028e4 <W25_PageProgram+0x90>
	while(count) {
 8002866:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002868:	f04f 0902 	mov.w	r9, #2
	while(count) {
 800286c:	b91f      	cbnz	r7, 8002876 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 800286e:	4620      	mov	r0, r4
 8002870:	b002      	add	sp, #8
 8002872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8002876:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002878:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 800287a:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 800287e:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002880:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002884:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002888:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800288a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800288e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002892:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8002896:	bf28      	it	cs
 8002898:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800289a:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800289e:	f001 fca9 	bl	80041f4 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80028a2:	2204      	movs	r2, #4
 80028a4:	480f      	ldr	r0, [pc, #60]	@ (80028e4 <W25_PageProgram+0x90>)
 80028a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028aa:	eb0d 0102 	add.w	r1, sp, r2
 80028ae:	f002 fc3c 	bl	800512a <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 80028b2:	4604      	mov	r4, r0
 80028b4:	b938      	cbnz	r0, 80028c6 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 80028b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ba:	b2aa      	uxth	r2, r5
 80028bc:	4641      	mov	r1, r8
 80028be:	4650      	mov	r0, sl
 80028c0:	f002 fc33 	bl	800512a <HAL_SPI_Transmit>
 80028c4:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 80028c6:	2201      	movs	r2, #1
 80028c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d0:	f001 fc90 	bl	80041f4 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80028d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 80028d8:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 80028da:	442e      	add	r6, r5
		buf += count_this_pass;
 80028dc:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 80028de:	f7ff fed1 	bl	8002684 <W25_DelayWhileBusy>
 80028e2:	e7c3      	b.n	800286c <W25_PageProgram+0x18>
 80028e4:	200012c4 	.word	0x200012c4

080028e8 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 80028e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 80028ea:	2303      	movs	r3, #3
 80028ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80028f0:	0c03      	lsrs	r3, r0, #16
 80028f2:	ba40      	rev16	r0, r0
 80028f4:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 80028f8:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80028fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8002902:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002904:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8002906:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800290a:	f001 fc73 	bl	80041f4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 800290e:	2204      	movs	r2, #4
 8002910:	480d      	ldr	r0, [pc, #52]	@ (8002948 <W25_ReadData+0x60>)
 8002912:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002916:	eb0d 0102 	add.w	r1, sp, r2
 800291a:	f002 fc06 	bl	800512a <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800291e:	4604      	mov	r4, r0
 8002920:	b978      	cbnz	r0, 8002942 <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8002922:	4809      	ldr	r0, [pc, #36]	@ (8002948 <W25_ReadData+0x60>)
 8002924:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002928:	b2b2      	uxth	r2, r6
 800292a:	4629      	mov	r1, r5
 800292c:	f002 fdf7 	bl	800551e <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8002930:	4604      	mov	r4, r0
 8002932:	b130      	cbz	r0, 8002942 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8002934:	2201      	movs	r2, #1
 8002936:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800293a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800293e:	f001 fc59 	bl	80041f4 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8002942:	4620      	mov	r0, r4
 8002944:	b002      	add	sp, #8
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	200012c4 	.word	0x200012c4

0800294c <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 800294c:	b570      	push	{r4, r5, r6, lr}
	uart_transmit_string(&huart1, (uint8_t*) "Calculate Epoch data");
 800294e:	4e15      	ldr	r6, [pc, #84]	@ (80029a4 <calculate_epoch_time_utc+0x58>)
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8002950:	4605      	mov	r5, r0
 8002952:	b0aa      	sub	sp, #168	@ 0xa8
 8002954:	460c      	mov	r4, r1
	uart_transmit_string(&huart1, (uint8_t*) "Calculate Epoch data");
 8002956:	4630      	mov	r0, r6
 8002958:	4913      	ldr	r1, [pc, #76]	@ (80029a8 <calculate_epoch_time_utc+0x5c>)
 800295a:	f000 fc95 	bl	8003288 <uart_transmit_string>
    struct tm timeinfo;
		uint8_t output_buffer[128];
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 800295e:	68ab      	ldr	r3, [r5, #8]
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 8002960:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <calculate_epoch_time_utc+0x60>)
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8002962:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	a80a      	add	r0, sp, #40	@ 0x28
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 800296a:	9306      	str	r3, [sp, #24]
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 800296c:	f005 fe1a 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002970:	a90a      	add	r1, sp, #40	@ 0x28
 8002972:	4630      	mov	r0, r6
 8002974:	f000 fc88 	bl	8003288 <uart_transmit_string>
		
    timeinfo.tm_mon = date->Mon - 1;
 8002978:	686b      	ldr	r3, [r5, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 800297e:	682b      	ldr	r3, [r5, #0]
 8002980:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8002986:	6863      	ldr	r3, [r4, #4]
 8002988:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 800298a:	68a3      	ldr	r3, [r4, #8]
 800298c:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 800298e:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8002996:	f005 ffcd 	bl	8008934 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 800299a:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 800299e:	3070      	adds	r0, #112	@ 0x70
 80029a0:	b02a      	add	sp, #168	@ 0xa8
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	2000118c 	.word	0x2000118c
 80029a8:	0800c762 	.word	0x0800c762
 80029ac:	0800c777 	.word	0x0800c777

080029b0 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 80029b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b4:	ed2d 8b04 	vpush	{d8-d9}
 80029b8:	b09b      	sub	sp, #108	@ 0x6c
 80029ba:	4604      	mov	r4, r0
 80029bc:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
 80029c0:	4825      	ldr	r0, [pc, #148]	@ (8002a58 <format_rmc_data+0xa8>)
 80029c2:	4926      	ldr	r1, [pc, #152]	@ (8002a5c <format_rmc_data+0xac>)
 80029c4:	f000 fc60 	bl	8003288 <uart_transmit_string>
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 80029c8:	4621      	mov	r1, r4
 80029ca:	f104 0010 	add.w	r0, r4, #16
 80029ce:	f7ff ffbd 	bl	800294c <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.4f;%c;%.4f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Day, rmc_data->date.Mon, rmc_data->date.Yr, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 80029d2:	6923      	ldr	r3, [r4, #16]
 80029d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80029d6:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 80029da:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.4f;%c;%.4f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Day, rmc_data->date.Mon, rmc_data->date.Yr, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 80029dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80029de:	9315      	str	r3, [sp, #84]	@ 0x54
 80029e0:	f7fd fdc2 	bl	8000568 <__aeabi_f2d>
 80029e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 80029e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80029ea:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80029ee:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 80029f2:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 80029f6:	f7fd fdb7 	bl	8000568 <__aeabi_f2d>
 80029fa:	e9d4 9a00 	ldrd	r9, sl, [r4]
 80029fe:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8002a02:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8002a06:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8002a0a:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002a0c:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4812      	ldr	r0, [pc, #72]	@ (8002a60 <format_rmc_data+0xb0>)
 8002a16:	4913      	ldr	r1, [pc, #76]	@ (8002a64 <format_rmc_data+0xb4>)
 8002a18:	9608      	str	r6, [sp, #32]
 8002a1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002a1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002a20:	4a11      	ldr	r2, [pc, #68]	@ (8002a68 <format_rmc_data+0xb8>)
 8002a22:	f8cd 9008 	str.w	r9, [sp, #8]
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	bf08      	it	eq
 8002a2a:	4601      	moveq	r1, r0
 8002a2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002a30:	e9cd 5300 	strd	r5, r3, [sp]
 8002a34:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8002a38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002a3a:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8002a3e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002a42:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002a46:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8002a4a:	f005 fdab 	bl	80085a4 <sniprintf>
}
 8002a4e:	b01b      	add	sp, #108	@ 0x6c
 8002a50:	ecbd 8b04 	vpop	{d8-d9}
 8002a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a58:	2000118c 	.word	0x2000118c
 8002a5c:	0800c79c 	.word	0x0800c79c
 8002a60:	0800c794 	.word	0x0800c794
 8002a64:	0800c78e 	.word	0x0800c78e
 8002a68:	0800c7ac 	.word	0x0800c7ac

08002a6c <saveRMC>:


void saveRMC(){
 8002a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8002a6e:	4c35      	ldr	r4, [pc, #212]	@ (8002b44 <saveRMC+0xd8>)
	W25_Reset();
 8002a70:	f7ff fe19 	bl	80026a6 <W25_Reset>
	if (is_erased_rmc == 0){
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	b92b      	cbnz	r3, 8002a84 <saveRMC+0x18>
		W25_SectorErase(address_rmc);
 8002a78:	4b33      	ldr	r3, [pc, #204]	@ (8002b48 <saveRMC+0xdc>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f7ff febe 	bl	80027fc <W25_SectorErase>
		is_erased_rmc = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8002a84:	4a31      	ldr	r2, [pc, #196]	@ (8002b4c <saveRMC+0xe0>)
 8002a86:	2300      	movs	r3, #0
 8002a88:	4616      	mov	r6, r2
			if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8002a8a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002a8e:	461c      	mov	r4, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	b109      	cbz	r1, 8002a98 <saveRMC+0x2c>
 8002a94:	7811      	ldrb	r1, [r2, #0]
 8002a96:	b111      	cbz	r1, 8002a9e <saveRMC+0x32>
	for(size_t i = 0; i < 128; i++){
 8002a98:	2b80      	cmp	r3, #128	@ 0x80
 8002a9a:	d1f6      	bne.n	8002a8a <saveRMC+0x1e>
	int k = 0;
 8002a9c:	2400      	movs	r4, #0
				k = i;
				break;
			}
	}
	char addr_out[10];
	sprintf(addr_out, "%08x", address_rmc);
 8002a9e:	4d2a      	ldr	r5, [pc, #168]	@ (8002b48 <saveRMC+0xdc>)
 8002aa0:	492b      	ldr	r1, [pc, #172]	@ (8002b50 <saveRMC+0xe4>)
 8002aa2:	682a      	ldr	r2, [r5, #0]
 8002aa4:	a801      	add	r0, sp, #4
 8002aa6:	f005 fdb1 	bl	800860c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	2208      	movs	r2, #8
 8002ab0:	a901      	add	r1, sp, #4
 8002ab2:	4828      	ldr	r0, [pc, #160]	@ (8002b54 <saveRMC+0xe8>)
 8002ab4:	f003 fad6 	bl	8006064 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002ab8:	4927      	ldr	r1, [pc, #156]	@ (8002b58 <saveRMC+0xec>)
 8002aba:	4826      	ldr	r0, [pc, #152]	@ (8002b54 <saveRMC+0xe8>)
 8002abc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f003 facf 	bl	8006064 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8002ac6:	1933      	adds	r3, r6, r4
 8002ac8:	223b      	movs	r2, #59	@ 0x3b
 8002aca:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8002acc:	1ca3      	adds	r3, r4, #2
 8002ace:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8002ad2:	50f1      	str	r1, [r6, r3]
 8002ad4:	18f2      	adds	r2, r6, r3
 8002ad6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8002ada:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8002adc:	f104 0008 	add.w	r0, r4, #8
 8002ae0:	f1c4 0266 	rsb	r2, r4, #102	@ 0x66
 8002ae4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4430      	add	r0, r6
 8002aec:	f005 fe1d 	bl	800872a <memset>
	}
	W25_Reset();
 8002af0:	f7ff fdd9 	bl	80026a6 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	4915      	ldr	r1, [pc, #84]	@ (8002b4c <saveRMC+0xe0>)
 8002af8:	6828      	ldr	r0, [r5, #0]
 8002afa:	f7ff feab 	bl	8002854 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8002afe:	4917      	ldr	r1, [pc, #92]	@ (8002b5c <saveRMC+0xf0>)
 8002b00:	4814      	ldr	r0, [pc, #80]	@ (8002b54 <saveRMC+0xe8>)
 8002b02:	f000 fbc1 	bl	8003288 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8002b06:	4911      	ldr	r1, [pc, #68]	@ (8002b4c <saveRMC+0xe0>)
 8002b08:	4812      	ldr	r0, [pc, #72]	@ (8002b54 <saveRMC+0xe8>)
 8002b0a:	f000 fbbd 	bl	8003288 <uart_transmit_string>
	current_addr = address_rmc;
 8002b0e:	682b      	ldr	r3, [r5, #0]
 8002b10:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <saveRMC+0xf4>)
	address_rmc+=128;
	if(current_addr == 0x3E80){
 8002b12:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
	current_addr = address_rmc;
 8002b16:	6013      	str	r3, [r2, #0]
	address_rmc+=128;
 8002b18:	f103 0280 	add.w	r2, r3, #128	@ 0x80
	if(current_addr == 0x3E80){
 8002b1c:	d00c      	beq.n	8002b38 <saveRMC+0xcc>
	address_rmc+=128;
 8002b1e:	602a      	str	r2, [r5, #0]
		address_rmc = 0x3000;
		W25_SectorErase(address_rmc);
	}
	HAL_Delay(1000);
 8002b20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b24:	f000 fc18 	bl	8003358 <HAL_Delay>
	memset(flashBufferRMCReceived, 0x00,128);
 8002b28:	480e      	ldr	r0, [pc, #56]	@ (8002b64 <saveRMC+0xf8>)
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	2100      	movs	r1, #0
}
 8002b2e:	b004      	add	sp, #16
 8002b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8002b34:	f005 bdf9 	b.w	800872a <memset>
		address_rmc = 0x3000;
 8002b38:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8002b3c:	6028      	str	r0, [r5, #0]
		W25_SectorErase(address_rmc);
 8002b3e:	f7ff fe5d 	bl	80027fc <W25_SectorErase>
 8002b42:	e7ed      	b.n	8002b20 <saveRMC+0xb4>
 8002b44:	20001548 	.word	0x20001548
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20001448 	.word	0x20001448
 8002b50:	0800c740 	.word	0x0800c740
 8002b54:	2000118c 	.word	0x2000118c
 8002b58:	0800c298 	.word	0x0800c298
 8002b5c:	0800c7de 	.word	0x0800c7de
 8002b60:	2000154c 	.word	0x2000154c
 8002b64:	200014c8 	.word	0x200014c8

08002b68 <receiveRMCDataFromGPS>:

void receiveRMCDataFromGPS(void) {
 8002b68:	b570      	push	{r4, r5, r6, lr}
	static int countRMCReceived = 0;
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8002b6a:	4e38      	ldr	r6, [pc, #224]	@ (8002c4c <receiveRMCDataFromGPS+0xe4>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8002b6c:	4938      	ldr	r1, [pc, #224]	@ (8002c50 <receiveRMCDataFromGPS+0xe8>)
 8002b6e:	4839      	ldr	r0, [pc, #228]	@ (8002c54 <receiveRMCDataFromGPS+0xec>)
void receiveRMCDataFromGPS(void) {
 8002b70:	b09e      	sub	sp, #120	@ 0x78
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8002b72:	f000 fb89 	bl	8003288 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	a809      	add	r0, sp, #36	@ 0x24
 8002b7e:	f003 fcbb 	bl	80064f8 <osMailGet>
	if(evt.status == osEventMail){
 8002b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d15f      	bne.n	8002c48 <receiveRMCDataFromGPS+0xe0>
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data SPI FLASH\n");
 8002b88:	4933      	ldr	r1, [pc, #204]	@ (8002c58 <receiveRMCDataFromGPS+0xf0>)
 8002b8a:	4832      	ldr	r0, [pc, #200]	@ (8002c54 <receiveRMCDataFromGPS+0xec>)
//		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
//		uart_transmit_string(&huart1, output_buffer);


		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8002b8c:	4c33      	ldr	r4, [pc, #204]	@ (8002c5c <receiveRMCDataFromGPS+0xf4>)
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data SPI FLASH\n");
 8002b8e:	f000 fb7b 	bl	8003288 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8002b92:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
		rmc_flash.lcation.NS = receivedData->lcation.NS;
		rmc_flash.lcation.EW = receivedData->lcation.EW;
		rmc_flash.isValid = receivedData->isValid;

		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002b94:	4932      	ldr	r1, [pc, #200]	@ (8002c60 <receiveRMCDataFromGPS+0xf8>)
 8002b96:	482f      	ldr	r0, [pc, #188]	@ (8002c54 <receiveRMCDataFromGPS+0xec>)
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8002b98:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8002b9c:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8002ba0:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8002ba4:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8002ba8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002baa:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8002bac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002bae:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8002bb0:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002bb4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8002bb8:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002bbc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8002bc0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002bc2:	6323      	str	r3, [r4, #48]	@ 0x30
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002bc4:	f000 fb60 	bl	8003288 <uart_transmit_string>
		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8002bc8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002bcc:	9306      	str	r3, [sp, #24]
 8002bce:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bd6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002be0:	2146      	movs	r1, #70	@ 0x46
 8002be2:	e9cd 2300 	strd	r2, r3, [sp]
 8002be6:	a80c      	add	r0, sp, #48	@ 0x30
 8002be8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c64 <receiveRMCDataFromGPS+0xfc>)
 8002bea:	f005 fcdb 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002bee:	4819      	ldr	r0, [pc, #100]	@ (8002c54 <receiveRMCDataFromGPS+0xec>)
 8002bf0:	a90c      	add	r1, sp, #48	@ 0x30
 8002bf2:	f000 fb49 	bl	8003288 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8002bf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002bf8:	9304      	str	r3, [sp, #16]
 8002bfa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002bfc:	f7fd fcb4 	bl	8000568 <__aeabi_f2d>
 8002c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c04:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
		uart_transmit_string(&huart1, output_buffer);

		format_rmc_data(receivedData,(char*) rmcBufferDemo, 128);
		if(countRMCReceived == 5){
 8002c06:	4c18      	ldr	r4, [pc, #96]	@ (8002c68 <receiveRMCDataFromGPS+0x100>)
		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8002c08:	f7fd fcae 	bl	8000568 <__aeabi_f2d>
 8002c0c:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <receiveRMCDataFromGPS+0x104>)
 8002c0e:	e9cd 0100 	strd	r0, r1, [sp]
 8002c12:	2146      	movs	r1, #70	@ 0x46
 8002c14:	a80c      	add	r0, sp, #48	@ 0x30
 8002c16:	f005 fcc5 	bl	80085a4 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002c1a:	480e      	ldr	r0, [pc, #56]	@ (8002c54 <receiveRMCDataFromGPS+0xec>)
 8002c1c:	a90c      	add	r1, sp, #48	@ 0x30
 8002c1e:	f000 fb33 	bl	8003288 <uart_transmit_string>
		format_rmc_data(receivedData,(char*) rmcBufferDemo, 128);
 8002c22:	4913      	ldr	r1, [pc, #76]	@ (8002c70 <receiveRMCDataFromGPS+0x108>)
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	4628      	mov	r0, r5
 8002c28:	f7ff fec2 	bl	80029b0 <format_rmc_data>
		if(countRMCReceived == 5){
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d103      	bne.n	8002c3a <receiveRMCDataFromGPS+0xd2>
			saveRMC();
 8002c32:	f7ff ff1b 	bl	8002a6c <saveRMC>
			countRMCReceived = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	6023      	str	r3, [r4, #0]
		}
		osMailFree(RMC_MailQFLASHId, receivedData); // Free memory after use
 8002c3a:	6830      	ldr	r0, [r6, #0]
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	f003 fc94 	bl	800656a <osMailFree>
		countRMCReceived++;
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	6023      	str	r3, [r4, #0]
	}
}
 8002c48:	b01e      	add	sp, #120	@ 0x78
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	200002c0 	.word	0x200002c0
 8002c50:	0800c7fe 	.word	0x0800c7fe
 8002c54:	2000118c 	.word	0x2000118c
 8002c58:	0800c823 	.word	0x0800c823
 8002c5c:	200013f0 	.word	0x200013f0
 8002c60:	0800c468 	.word	0x0800c468
 8002c64:	0800c47d 	.word	0x0800c47d
 8002c68:	200013e8 	.word	0x200013e8
 8002c6c:	0800c4a8 	.word	0x0800c4a8
 8002c70:	20001448 	.word	0x20001448

08002c74 <sendRMCDataToGSM>:

void sendRMCDataToGSM(RMCSTRUCT *rmcData) {
 8002c74:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8002c76:	4e0d      	ldr	r6, [pc, #52]	@ (8002cac <sendRMCDataToGSM+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
 8002c78:	490d      	ldr	r1, [pc, #52]	@ (8002cb0 <sendRMCDataToGSM+0x3c>)
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	2213      	movs	r2, #19
void sendRMCDataToGSM(RMCSTRUCT *rmcData) {
 8002c80:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
 8002c82:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <sendRMCDataToGSM+0x40>)
 8002c84:	f003 f9ee 	bl	8006064 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8002c88:	6830      	ldr	r0, [r6, #0]
 8002c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8e:	f003 fc03 	bl	8006498 <osMailAlloc>
 8002c92:	4604      	mov	r4, r0
    if (mail != NULL) {
 8002c94:	b148      	cbz	r0, 8002caa <sendRMCDataToGSM+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8002c96:	4629      	mov	r1, r5
 8002c98:	2258      	movs	r2, #88	@ 0x58
 8002c9a:	f006 fb6a 	bl	8009372 <memcpy>
        osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8002c9e:	6830      	ldr	r0, [r6, #0]
 8002ca0:	4621      	mov	r1, r4
    }
}
 8002ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8002ca6:	f003 bbfc 	b.w	80064a2 <osMailPut>
}
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	20001550 	.word	0x20001550
 8002cb0:	0800c841 	.word	0x0800c841
 8002cb4:	2000118c 	.word	0x2000118c

08002cb8 <StartSpiFlash>:

void StartSpiFlash(void const * argument)
{
 8002cb8:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8002cba:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <StartSpiFlash+0xb4>)
 8002cbc:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8002d8c <StartSpiFlash+0xd4>
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c8 3000 	str.w	r3, [r8]
{
 8002cc6:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8002cc8:	2358      	movs	r3, #88	@ 0x58
 8002cca:	220b      	movs	r2, #11
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8002cd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002cd4:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002cd8:	f003 fbb3 	bl	8006442 <osMailCreate>
 8002cdc:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <StartSpiFlash+0xb8>)
	for(;;){
		osDelay(1000);
		uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
 8002cde:	4c25      	ldr	r4, [pc, #148]	@ (8002d74 <StartSpiFlash+0xbc>)
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002ce0:	4e25      	ldr	r6, [pc, #148]	@ (8002d78 <StartSpiFlash+0xc0>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002ce2:	6018      	str	r0, [r3, #0]
		osDelay(1000);
 8002ce4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ce8:	f003 fb2c 	bl	8006344 <osDelay>
		uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
 8002cec:	4923      	ldr	r1, [pc, #140]	@ (8002d7c <StartSpiFlash+0xc4>)
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f000 faca 	bl	8003288 <uart_transmit_string>
		W25_Reset();
 8002cf4:	f7ff fcd7 	bl	80026a6 <W25_Reset>
		W25_ReadJedecID();
 8002cf8:	f7ff fd02 	bl	8002700 <W25_ReadJedecID>
		W25_Reset();
 8002cfc:	f7ff fcd3 	bl	80026a6 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	f8d8 0000 	ldr.w	r0, [r8]
 8002d06:	4631      	mov	r1, r6
 8002d08:	f7ff fdee 	bl	80028e8 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <StartSpiFlash+0xc8>)
 8002d0e:	aa04      	add	r2, sp, #16
 8002d10:	f103 0c10 	add.w	ip, r3, #16
 8002d14:	4617      	mov	r7, r2
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	4615      	mov	r5, r2
 8002d1c:	c503      	stmia	r5!, {r0, r1}
 8002d1e:	3308      	adds	r3, #8
 8002d20:	4563      	cmp	r3, ip
 8002d22:	462a      	mov	r2, r5
 8002d24:	d1f7      	bne.n	8002d16 <StartSpiFlash+0x5e>
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	889b      	ldrh	r3, [r3, #4]
 8002d2a:	6028      	str	r0, [r5, #0]
 8002d2c:	80ab      	strh	r3, [r5, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002d2e:	4638      	mov	r0, r7
 8002d30:	f7fd faae 	bl	8000290 <strlen>
 8002d34:	4639      	mov	r1, r7
 8002d36:	b282      	uxth	r2, r0
 8002d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f003 f991 	bl	8006064 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8002d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d46:	2280      	movs	r2, #128	@ 0x80
 8002d48:	4631      	mov	r1, r6
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f003 f98a 	bl	8006064 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8002d50:	f7ff ff0a 	bl	8002b68 <receiveRMCDataFromGPS>

		sendRMCDataToGSM(&rmc_flash);
 8002d54:	480b      	ldr	r0, [pc, #44]	@ (8002d84 <StartSpiFlash+0xcc>)
 8002d56:	f7ff ff8d 	bl	8002c74 <sendRMCDataToGSM>

		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	490a      	ldr	r1, [pc, #40]	@ (8002d88 <StartSpiFlash+0xd0>)
 8002d5e:	f000 fa93 	bl	8003288 <uart_transmit_string>
		osDelay(1000);
 8002d62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d66:	f003 faed 	bl	8006344 <osDelay>
	for(;;){
 8002d6a:	e7bb      	b.n	8002ce4 <StartSpiFlash+0x2c>
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20001550 	.word	0x20001550
 8002d74:	2000118c 	.word	0x2000118c
 8002d78:	200014c8 	.word	0x200014c8
 8002d7c:	0800c855 	.word	0x0800c855
 8002d80:	0800c867 	.word	0x0800c867
 8002d84:	200013f0 	.word	0x200013f0
 8002d88:	0800be0f 	.word	0x0800be0f
 8002d8c:	2000154c 	.word	0x2000154c

08002d90 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d90:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_MspInit+0x38>)
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	699a      	ldr	r2, [r3, #24]
{
 8002d9c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	f002 0201 	and.w	r2, r2, #1
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dc2:	f001 b82f 	b.w	8003e24 <HAL_NVIC_SetPriority>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000

08002dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dce:	2214      	movs	r2, #20
{
 8002dd0:	b08a      	sub	sp, #40	@ 0x28
 8002dd2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	eb0d 0002 	add.w	r0, sp, r2
 8002dda:	f005 fca6 	bl	800872a <memset>
  if(hadc->Instance==ADC2)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	4a26      	ldr	r2, [pc, #152]	@ (8002e7c <HAL_ADC_MspInit+0xb0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d125      	bne.n	8002e32 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_ADC_MspInit+0xb4>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8002df6:	9201      	str	r2, [sp, #4]
 8002df8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002e00:	615a      	str	r2, [r3, #20]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	9b02      	ldr	r3, [sp, #8]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e18:	a905      	add	r1, sp, #20
 8002e1a:	f001 f927 	bl	800406c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002e1e:	2012      	movs	r0, #18
 8002e20:	2200      	movs	r2, #0
 8002e22:	2105      	movs	r1, #5
 8002e24:	f000 fffe 	bl	8003e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002e28:	2012      	movs	r0, #18
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002e2a:	f001 f82d 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e2e:	b00a      	add	sp, #40	@ 0x28
 8002e30:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC3)
 8002e32:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <HAL_ADC_MspInit+0xb8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d1fa      	bne.n	8002e2e <HAL_ADC_MspInit+0x62>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	4813      	ldr	r0, [pc, #76]	@ (8002e88 <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002e4a:	9203      	str	r2, [sp, #12]
 8002e4c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e54:	615a      	str	r2, [r3, #20]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e60:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e62:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f001 f8ff 	bl	800406c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002e6e:	202f      	movs	r0, #47	@ 0x2f
 8002e70:	2200      	movs	r2, #0
 8002e72:	2105      	movs	r1, #5
 8002e74:	f000 ffd6 	bl	8003e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002e78:	202f      	movs	r0, #47	@ 0x2f
 8002e7a:	e7d6      	b.n	8002e2a <HAL_ADC_MspInit+0x5e>
 8002e7c:	50000100 	.word	0x50000100
 8002e80:	40021000 	.word	0x40021000
 8002e84:	50000400 	.word	0x50000400
 8002e88:	48000400 	.word	0x48000400

08002e8c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002e8c:	6802      	ldr	r2, [r0, #0]
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <HAL_RTC_MspInit+0x20>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10a      	bne.n	8002eaa <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e98:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <HAL_RTC_MspInit+0x24>)
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002eaa:	4770      	bx	lr
 8002eac:	40002800 	.word	0x40002800
 8002eb0:	10908100 	.word	0x10908100

08002eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb6:	2214      	movs	r2, #20
{
 8002eb8:	b08a      	sub	sp, #40	@ 0x28
 8002eba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	eb0d 0002 	add.w	r0, sp, r2
 8002ec2:	f005 fc32 	bl	800872a <memset>
  if(hspi->Instance==SPI1)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <HAL_SPI_MspInit+0x90>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d120      	bne.n	8002f10 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <HAL_SPI_MspInit+0x94>)
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ed6:	619a      	str	r2, [r3, #24]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ef4:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ef6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002efa:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002efe:	2305      	movs	r3, #5
 8002f00:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f04:	4811      	ldr	r0, [pc, #68]	@ (8002f4c <HAL_SPI_MspInit+0x98>)
 8002f06:	a905      	add	r1, sp, #20
 8002f08:	f001 f8b0 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f0c:	b00a      	add	sp, #40	@ 0x28
 8002f0e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8002f10:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_SPI_MspInit+0x9c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d1fa      	bne.n	8002f0c <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f16:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_SPI_MspInit+0x94>)
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f1e:	61da      	str	r2, [r3, #28]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002f26:	9203      	str	r2, [sp, #12]
 8002f28:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002f30:	615a      	str	r2, [r3, #20]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f38:	9304      	str	r3, [sp, #16]
 8002f3a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f3c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002f40:	e7d9      	b.n	8002ef6 <HAL_SPI_MspInit+0x42>
 8002f42:	bf00      	nop
 8002f44:	40013000 	.word	0x40013000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	40003800 	.word	0x40003800

08002f54 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8002f54:	6802      	ldr	r2, [r0, #0]
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <HAL_TIM_Base_MspInit+0x24>)
 8002f58:	429a      	cmp	r2, r3
{
 8002f5a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8002f5c:	d10a      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f5e:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	f042 0202 	orr.w	r2, r2, #2
 8002f68:	61da      	str	r2, [r3, #28]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002f74:	b002      	add	sp, #8
 8002f76:	4770      	bx	lr
 8002f78:	40000400 	.word	0x40000400

08002f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b530      	push	{r4, r5, lr}
 8002f7e:	4605      	mov	r5, r0
 8002f80:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f82:	2214      	movs	r2, #20
 8002f84:	2100      	movs	r1, #0
 8002f86:	a807      	add	r0, sp, #28
 8002f88:	f005 fbcf 	bl	800872a <memset>
  if(huart->Instance==USART1)
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <HAL_UART_MspInit+0x13c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d137      	bne.n	8003004 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f94:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f96:	4c4a      	ldr	r4, [pc, #296]	@ (80030c0 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f9e:	619a      	str	r2, [r3, #24]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002fa6:	9201      	str	r2, [sp, #4]
 8002fa8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002fb0:	615a      	str	r2, [r3, #20]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	a907      	add	r1, sp, #28
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	f001 f84a 	bl	800406c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002fda:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fdc:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fe8:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fea:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fec:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002fee:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 ff77 	bl	8003ee4 <HAL_DMA_Init>
 8002ff6:	b108      	cbz	r0, 8002ffc <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002ff8:	f7ff fb0d 	bl	8002616 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ffc:	676c      	str	r4, [r5, #116]	@ 0x74
 8002ffe:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003000:	b00d      	add	sp, #52	@ 0x34
 8003002:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8003004:	4a30      	ldr	r2, [pc, #192]	@ (80030c8 <HAL_UART_MspInit+0x14c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d123      	bne.n	8003052 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <HAL_UART_MspInit+0x140>)
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003012:	61da      	str	r2, [r3, #28]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800301a:	9203      	str	r2, [sp, #12]
 800301c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003024:	615a      	str	r2, [r3, #20]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	240c      	movs	r4, #12
 8003032:	2302      	movs	r3, #2
 8003034:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003038:	f04f 0c03 	mov.w	ip, #3
 800303c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	a907      	add	r1, sp, #28
 8003040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003044:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003048:	4c20      	ldr	r4, [pc, #128]	@ (80030cc <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f001 f80f 	bl	800406c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_UART_MspInit+0x154>)
 8003050:	e7c3      	b.n	8002fda <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 8003052:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_UART_MspInit+0x158>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d1d3      	bne.n	8003000 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003058:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	481f      	ldr	r0, [pc, #124]	@ (80030d8 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800305c:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800305e:	4c1f      	ldr	r4, [pc, #124]	@ (80030dc <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003060:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800306c:	9205      	str	r2, [sp, #20]
 800306e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003076:	615a      	str	r2, [r3, #20]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003084:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800308c:	2103      	movs	r1, #3
 800308e:	2307      	movs	r3, #7
 8003090:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	a907      	add	r1, sp, #28
 8003096:	f000 ffe9 	bl	800406c <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4811      	ldr	r0, [pc, #68]	@ (80030e0 <HAL_UART_MspInit+0x164>)
 800309c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a0:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a8:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030aa:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80030ac:	2320      	movs	r3, #32
 80030ae:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b4:	e79b      	b.n	8002fee <HAL_UART_MspInit+0x72>
 80030b6:	bf00      	nop
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	20001038 	.word	0x20001038
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40004400 	.word	0x40004400
 80030cc:	20000ff4 	.word	0x20000ff4
 80030d0:	4002006c 	.word	0x4002006c
 80030d4:	40004800 	.word	0x40004800
 80030d8:	48000400 	.word	0x48000400
 80030dc:	20000fb0 	.word	0x20000fb0
 80030e0:	40020030 	.word	0x40020030

080030e4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_InitTick+0x88>)
{
 80030e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	61da      	str	r2, [r3, #28]
 80030f0:	69db      	ldr	r3, [r3, #28]
{
 80030f2:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	9302      	str	r3, [sp, #8]
{
 80030fa:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030fc:	a901      	add	r1, sp, #4
 80030fe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003100:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003102:	f001 fbe9 	bl	80048d8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003106:	9b06      	ldr	r3, [sp, #24]
 8003108:	bb53      	cbnz	r3, 8003160 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800310a:	f001 fbb5 	bl	8004878 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800310e:	4e18      	ldr	r6, [pc, #96]	@ (8003170 <HAL_InitTick+0x8c>)
 8003110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003114:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003116:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800311a:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800311c:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_InitTick+0x90>)
 800311e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003122:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003124:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8003126:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8003130:	f002 fbea 	bl	8005908 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003134:	4604      	mov	r4, r0
 8003136:	b980      	cbnz	r0, 800315a <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003138:	4630      	mov	r0, r6
 800313a:	f002 faa7 	bl	800568c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800313e:	4604      	mov	r4, r0
 8003140:	b958      	cbnz	r0, 800315a <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003142:	201c      	movs	r0, #28
 8003144:	f000 fea0 	bl	8003e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003148:	2d0f      	cmp	r5, #15
 800314a:	d80d      	bhi.n	8003168 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800314c:	4622      	mov	r2, r4
 800314e:	4629      	mov	r1, r5
 8003150:	201c      	movs	r0, #28
 8003152:	f000 fe67 	bl	8003e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <HAL_InitTick+0x94>)
 8003158:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800315a:	4620      	mov	r0, r4
 800315c:	b008      	add	sp, #32
 800315e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003160:	f001 fb8a 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8003164:	0040      	lsls	r0, r0, #1
 8003166:	e7d2      	b.n	800310e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8003168:	2401      	movs	r4, #1
 800316a:	e7f6      	b.n	800315a <HAL_InitTick+0x76>
 800316c:	40021000 	.word	0x40021000
 8003170:	20001554 	.word	0x20001554
 8003174:	000f4240 	.word	0x000f4240
 8003178:	20000010 	.word	0x20000010

0800317c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800317c:	e7fe      	b.n	800317c <NMI_Handler>

0800317e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317e:	e7fe      	b.n	800317e <HardFault_Handler>

08003180 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler>

08003182 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003182:	e7fe      	b.n	8003182 <BusFault_Handler>

08003184 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003184:	e7fe      	b.n	8003184 <UsageFault_Handler>

08003186 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003186:	4770      	bx	lr

08003188 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003188:	4801      	ldr	r0, [pc, #4]	@ (8003190 <DMA1_Channel3_IRQHandler+0x8>)
 800318a:	f000 bf27 	b.w	8003fdc <HAL_DMA_IRQHandler>
 800318e:	bf00      	nop
 8003190:	20000fb0 	.word	0x20000fb0

08003194 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003194:	4801      	ldr	r0, [pc, #4]	@ (800319c <DMA1_Channel5_IRQHandler+0x8>)
 8003196:	f000 bf21 	b.w	8003fdc <HAL_DMA_IRQHandler>
 800319a:	bf00      	nop
 800319c:	20001038 	.word	0x20001038

080031a0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031a0:	4801      	ldr	r0, [pc, #4]	@ (80031a8 <DMA1_Channel6_IRQHandler+0x8>)
 80031a2:	f000 bf1b 	b.w	8003fdc <HAL_DMA_IRQHandler>
 80031a6:	bf00      	nop
 80031a8:	20000ff4 	.word	0x20000ff4

080031ac <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <ADC1_2_IRQHandler+0x8>)
 80031ae:	f000 ba3d 	b.w	800362c <HAL_ADC_IRQHandler>
 80031b2:	bf00      	nop
 80031b4:	20001398 	.word	0x20001398

080031b8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031b8:	2040      	movs	r0, #64	@ 0x40
 80031ba:	f001 b821 	b.w	8004200 <HAL_GPIO_EXTI_IRQHandler>
	...

080031c0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <TIM2_IRQHandler+0x8>)
 80031c2:	f002 ba9d 	b.w	8005700 <HAL_TIM_IRQHandler>
 80031c6:	bf00      	nop
 80031c8:	20001554 	.word	0x20001554

080031cc <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80031cc:	4801      	ldr	r0, [pc, #4]	@ (80031d4 <ADC3_IRQHandler+0x8>)
 80031ce:	f000 ba2d 	b.w	800362c <HAL_ADC_IRQHandler>
 80031d2:	bf00      	nop
 80031d4:	20001348 	.word	0x20001348

080031d8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80031d8:	2001      	movs	r0, #1
 80031da:	4770      	bx	lr

080031dc <_kill>:

int _kill(int pid, int sig)
{
 80031dc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031de:	f006 f891 	bl	8009304 <__errno>
 80031e2:	2316      	movs	r3, #22
 80031e4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80031e6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ea:	bd08      	pop	{r3, pc}

080031ec <_exit>:

void _exit (int status)
{
 80031ec:	b508      	push	{r3, lr}
  errno = EINVAL;
 80031ee:	f006 f889 	bl	8009304 <__errno>
 80031f2:	2316      	movs	r3, #22
 80031f4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80031f6:	e7fe      	b.n	80031f6 <_exit+0xa>

080031f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	460d      	mov	r5, r1
 80031fc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fe:	460e      	mov	r6, r1
 8003200:	1b73      	subs	r3, r6, r5
 8003202:	429c      	cmp	r4, r3
 8003204:	dc01      	bgt.n	800320a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003206:	4620      	mov	r0, r4
 8003208:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800320a:	f3af 8000 	nop.w
 800320e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003212:	e7f5      	b.n	8003200 <_read+0x8>

08003214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	460d      	mov	r5, r1
 8003218:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321a:	460e      	mov	r6, r1
 800321c:	1b73      	subs	r3, r6, r5
 800321e:	429c      	cmp	r4, r3
 8003220:	dc01      	bgt.n	8003226 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003222:	4620      	mov	r0, r4
 8003224:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003226:	f816 0b01 	ldrb.w	r0, [r6], #1
 800322a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322e:	e7f5      	b.n	800321c <_write+0x8>

08003230 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800323a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800323c:	2000      	movs	r0, #0
 800323e:	4770      	bx	lr

08003240 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003240:	2001      	movs	r0, #1
 8003242:	4770      	bx	lr

08003244 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003244:	2000      	movs	r0, #0
 8003246:	4770      	bx	lr

08003248 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003248:	4a0b      	ldr	r2, [pc, #44]	@ (8003278 <_sbrk+0x30>)
 800324a:	6811      	ldr	r1, [r2, #0]
{
 800324c:	b510      	push	{r4, lr}
 800324e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003250:	b909      	cbnz	r1, 8003256 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003252:	490a      	ldr	r1, [pc, #40]	@ (800327c <_sbrk+0x34>)
 8003254:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003256:	6810      	ldr	r0, [r2, #0]
 8003258:	4909      	ldr	r1, [pc, #36]	@ (8003280 <_sbrk+0x38>)
 800325a:	4c0a      	ldr	r4, [pc, #40]	@ (8003284 <_sbrk+0x3c>)
 800325c:	4403      	add	r3, r0
 800325e:	1b09      	subs	r1, r1, r4
 8003260:	428b      	cmp	r3, r1
 8003262:	d906      	bls.n	8003272 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003264:	f006 f84e 	bl	8009304 <__errno>
 8003268:	230c      	movs	r3, #12
 800326a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800326c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003270:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003272:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003274:	e7fc      	b.n	8003270 <_sbrk+0x28>
 8003276:	bf00      	nop
 8003278:	200015a4 	.word	0x200015a4
 800327c:	20004d88 	.word	0x20004d88
 8003280:	2000a000 	.word	0x2000a000
 8003284:	00000400 	.word	0x00000400

08003288 <uart_transmit_string>:
#include "system_management.h"
#include "string.h"

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800328c:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800328e:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8003290:	f7fc fffe 	bl	8000290 <strlen>
 8003294:	4621      	mov	r1, r4
 8003296:	b282      	uxth	r2, r0
 8003298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329c:	4628      	mov	r0, r5
 800329e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80032a2:	f002 bedf 	b.w	8006064 <HAL_UART_Transmit>
	...

080032a8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a8:	4a03      	ldr	r2, [pc, #12]	@ (80032b8 <SystemInit+0x10>)
 80032aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032ae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80032c0:	f7ff fff2 	bl	80032a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c6:	490d      	ldr	r1, [pc, #52]	@ (80032fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <LoopForever+0xe>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003308 <LoopForever+0x16>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ea:	f006 f811 	bl	8009310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ee:	f7fe ff49 	bl	8002184 <main>

080032f2 <LoopForever>:

LoopForever:
    b LoopForever
 80032f2:	e7fe      	b.n	80032f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80032f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032fc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003300:	0800cd64 	.word	0x0800cd64
  ldr r2, =_sbss
 8003304:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003308:	20004d84 	.word	0x20004d84

0800330c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC4_IRQHandler>
	...

08003310 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4a07      	ldr	r2, [pc, #28]	@ (8003330 <HAL_Init+0x20>)
{
 8003312:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003314:	6813      	ldr	r3, [r2, #0]
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 fd6f 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	200f      	movs	r0, #15
 8003324:	f7ff fede 	bl	80030e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7ff fd32 	bl	8002d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd08      	pop	{r3, pc}
 8003330:	40022000 	.word	0x40022000

08003334 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003334:	4a03      	ldr	r2, [pc, #12]	@ (8003344 <HAL_IncTick+0x10>)
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <HAL_IncTick+0x14>)
 8003338:	6811      	ldr	r1, [r2, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	440b      	add	r3, r1
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	200015a8 	.word	0x200015a8
 8003348:	2000000c 	.word	0x2000000c

0800334c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800334c:	4b01      	ldr	r3, [pc, #4]	@ (8003354 <HAL_GetTick+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200015a8 	.word	0x200015a8

08003358 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7ff fff6 	bl	800334c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003360:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003362:	bf1c      	itt	ne
 8003364:	4b05      	ldrne	r3, [pc, #20]	@ (800337c <HAL_Delay+0x24>)
 8003366:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003368:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800336a:	bf18      	it	ne
 800336c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800336e:	f7ff ffed 	bl	800334c <HAL_GetTick>
 8003372:	1b43      	subs	r3, r0, r5
 8003374:	42a3      	cmp	r3, r4
 8003376:	d3fa      	bcc.n	800336e <HAL_Delay+0x16>
  {
  }
}
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	2000000c 	.word	0x2000000c

08003380 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8003380:	4770      	bx	lr

08003382 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8003382:	4770      	bx	lr

08003384 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003384:	4770      	bx	lr

08003386 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003386:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	f002 0203 	and.w	r2, r2, #3
 8003390:	2a01      	cmp	r2, #1
{
 8003392:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003394:	d001      	beq.n	800339a <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003396:	2000      	movs	r0, #0
}
 8003398:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	07d1      	lsls	r1, r2, #31
 800339e:	d5fa      	bpl.n	8003396 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	f002 020d 	and.w	r2, r2, #13
 80033a6:	2a01      	cmp	r2, #1
 80033a8:	d115      	bne.n	80033d6 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f042 0202 	orr.w	r2, r2, #2
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	2203      	movs	r2, #3
 80033b4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80033b6:	f7ff ffc9 	bl	800334c <HAL_GetTick>
 80033ba:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	07db      	lsls	r3, r3, #31
 80033c2:	d5e8      	bpl.n	8003396 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033c4:	f7ff ffc2 	bl	800334c <HAL_GetTick>
 80033c8:	1b40      	subs	r0, r0, r5
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9f6      	bls.n	80033bc <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	07da      	lsls	r2, r3, #31
 80033d4:	d5f2      	bpl.n	80033bc <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033d8:	f043 0310 	orr.w	r3, r3, #16
 80033dc:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
 80033e8:	e7d6      	b.n	8003398 <ADC_Disable+0x12>
	...

080033ec <HAL_ADC_Init>:
{
 80033ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80033f2:	4604      	mov	r4, r0
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f000 8103 	beq.w	8003600 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033fc:	06d5      	lsls	r5, r2, #27
 80033fe:	d46a      	bmi.n	80034d6 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003400:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d035      	beq.n	8003472 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003406:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	00d2      	lsls	r2, r2, #3
 800340e:	d502      	bpl.n	8003416 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003410:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003412:	009d      	lsls	r5, r3, #2
 8003414:	d50a      	bpl.n	800342c <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8003416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003418:	f023 0312 	bic.w	r3, r3, #18
 800341c:	f043 0310 	orr.w	r3, r3, #16
 8003420:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800342a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800342c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800342e:	06d9      	lsls	r1, r3, #27
 8003430:	f100 80e0 	bmi.w	80035f4 <HAL_ADC_Init+0x208>
 8003434:	2800      	cmp	r0, #0
 8003436:	f040 80dd 	bne.w	80035f4 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800343e:	0752      	lsls	r2, r2, #29
 8003440:	f100 80d8 	bmi.w	80035f4 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8003444:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003446:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800344a:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003454:	4a6b      	ldr	r2, [pc, #428]	@ (8003604 <HAL_ADC_Init+0x218>)
 8003456:	d042      	beq.n	80034de <HAL_ADC_Init+0xf2>
 8003458:	4293      	cmp	r3, r2
 800345a:	d03e      	beq.n	80034da <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800345c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8003460:	4293      	cmp	r3, r2
 8003462:	4969      	ldr	r1, [pc, #420]	@ (8003608 <HAL_ADC_Init+0x21c>)
 8003464:	f000 80b3 	beq.w	80035ce <HAL_ADC_Init+0x1e2>
 8003468:	428b      	cmp	r3, r1
 800346a:	bf18      	it	ne
 800346c:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800346e:	4967      	ldr	r1, [pc, #412]	@ (800360c <HAL_ADC_Init+0x220>)
 8003470:	e036      	b.n	80034e0 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8003472:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8003476:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8003478:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 800347c:	f7ff fca6 	bl	8002dcc <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	00d8      	lsls	r0, r3, #3
 8003486:	d4be      	bmi.n	8003406 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8003488:	4620      	mov	r0, r4
 800348a:	f7ff ff7c 	bl	8003386 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800348e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003490:	06d1      	lsls	r1, r2, #27
 8003492:	d4b9      	bmi.n	8003408 <HAL_ADC_Init+0x1c>
 8003494:	2800      	cmp	r0, #0
 8003496:	d1b7      	bne.n	8003408 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8003498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800349a:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800349c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034a0:	f023 0302 	bic.w	r3, r3, #2
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80034aa:	6893      	ldr	r3, [r2, #8]
 80034ac:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80034b0:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80034b2:	6893      	ldr	r3, [r2, #8]
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ba:	4b55      	ldr	r3, [pc, #340]	@ (8003610 <HAL_ADC_Init+0x224>)
 80034bc:	4a55      	ldr	r2, [pc, #340]	@ (8003614 <HAL_ADC_Init+0x228>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c4:	220a      	movs	r2, #10
 80034c6:	4353      	muls	r3, r2
            wait_loop_index--;
 80034c8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80034ca:	9b01      	ldr	r3, [sp, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d09a      	beq.n	8003406 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80034d0:	9b01      	ldr	r3, [sp, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	e7f8      	b.n	80034c8 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d6:	4618      	mov	r0, r3
 80034d8:	e7a8      	b.n	800342c <HAL_ADC_Init+0x40>
 80034da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034de:	494e      	ldr	r1, [pc, #312]	@ (8003618 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80034e0:	689d      	ldr	r5, [r3, #8]
 80034e2:	f005 0503 	and.w	r5, r5, #3
 80034e6:	2d01      	cmp	r5, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_ADC_Init+0x104>
 80034ea:	681d      	ldr	r5, [r3, #0]
 80034ec:	07ed      	lsls	r5, r5, #31
 80034ee:	d40e      	bmi.n	800350e <HAL_ADC_Init+0x122>
 80034f0:	b13a      	cbz	r2, 8003502 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034f2:	6895      	ldr	r5, [r2, #8]
 80034f4:	f005 0503 	and.w	r5, r5, #3
 80034f8:	2d01      	cmp	r5, #1
 80034fa:	d102      	bne.n	8003502 <HAL_ADC_Init+0x116>
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	07d2      	lsls	r2, r2, #31
 8003500:	d405      	bmi.n	800350e <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003502:	688a      	ldr	r2, [r1, #8]
 8003504:	6865      	ldr	r5, [r4, #4]
 8003506:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800350a:	432a      	orrs	r2, r5
 800350c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800350e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003512:	430a      	orrs	r2, r1
 8003514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003516:	7e65      	ldrb	r5, [r4, #25]
 8003518:	3901      	subs	r1, #1
 800351a:	bf18      	it	ne
 800351c:	2101      	movne	r1, #1
 800351e:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8003522:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003526:	f894 1020 	ldrb.w	r1, [r4, #32]
 800352a:	2901      	cmp	r1, #1
 800352c:	d107      	bne.n	800353e <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800352e:	2d00      	cmp	r5, #0
 8003530:	d14f      	bne.n	80035d2 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003532:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003534:	3901      	subs	r1, #1
 8003536:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 800353a:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003540:	2901      	cmp	r1, #1
 8003542:	d015      	beq.n	8003570 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003544:	4d35      	ldr	r5, [pc, #212]	@ (800361c <HAL_ADC_Init+0x230>)
 8003546:	42ab      	cmp	r3, r5
 8003548:	d003      	beq.n	8003552 <HAL_ADC_Init+0x166>
 800354a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800354e:	42ab      	cmp	r3, r5
 8003550:	d10a      	bne.n	8003568 <HAL_ADC_Init+0x17c>
 8003552:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8003556:	d047      	beq.n	80035e8 <HAL_ADC_Init+0x1fc>
 8003558:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800355c:	d047      	beq.n	80035ee <HAL_ADC_Init+0x202>
 800355e:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8003562:	bf08      	it	eq
 8003564:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8003568:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800356a:	4315      	orrs	r5, r2
 800356c:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	f011 0f0c 	tst.w	r1, #12
 8003576:	d10c      	bne.n	8003592 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003578:	68d9      	ldr	r1, [r3, #12]
 800357a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800357e:	f021 0102 	bic.w	r1, r1, #2
 8003582:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003584:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8003588:	7e25      	ldrb	r5, [r4, #24]
 800358a:	0049      	lsls	r1, r1, #1
 800358c:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8003590:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8003592:	68dd      	ldr	r5, [r3, #12]
 8003594:	4922      	ldr	r1, [pc, #136]	@ (8003620 <HAL_ADC_Init+0x234>)
 8003596:	4029      	ands	r1, r5
 8003598:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800359a:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800359c:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800359e:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80035a0:	bf05      	ittet	eq
 80035a2:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 80035a4:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035a6:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80035a8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80035ac:	bf06      	itte	eq
 80035ae:	f021 010f 	biceq.w	r1, r1, #15
 80035b2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035b4:	f022 020f 	bicne.w	r2, r2, #15
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80035ba:	2300      	movs	r3, #0
 80035bc:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80035be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035c0:	f023 0303 	bic.w	r3, r3, #3
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80035ca:	b003      	add	sp, #12
 80035cc:	bd30      	pop	{r4, r5, pc}
 80035ce:	460a      	mov	r2, r1
 80035d0:	e74d      	b.n	800346e <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 80035d2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80035d4:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 80035d8:	f041 0120 	orr.w	r1, r1, #32
 80035dc:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035de:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80035e0:	f041 0101 	orr.w	r1, r1, #1
 80035e4:	6461      	str	r1, [r4, #68]	@ 0x44
 80035e6:	e7aa      	b.n	800353e <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80035e8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80035ec:	e7bc      	b.n	8003568 <HAL_ADC_Init+0x17c>
 80035ee:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80035f2:	e7b9      	b.n	8003568 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035f6:	f023 0312 	bic.w	r3, r3, #18
 80035fa:	f043 0310 	orr.w	r3, r3, #16
 80035fe:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
 8003602:	e7e2      	b.n	80035ca <HAL_ADC_Init+0x1de>
 8003604:	50000100 	.word	0x50000100
 8003608:	50000500 	.word	0x50000500
 800360c:	50000700 	.word	0x50000700
 8003610:	20000008 	.word	0x20000008
 8003614:	000f4240 	.word	0x000f4240
 8003618:	50000300 	.word	0x50000300
 800361c:	50000400 	.word	0x50000400
 8003620:	fff0c007 	.word	0xfff0c007

08003624 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8003624:	4770      	bx	lr

08003626 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8003626:	4770      	bx	lr

08003628 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8003628:	4770      	bx	lr

0800362a <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 800362a:	4770      	bx	lr

0800362c <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 800362c:	6803      	ldr	r3, [r0, #0]
{
 800362e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003630:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003632:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003634:	076a      	lsls	r2, r5, #29
{
 8003636:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003638:	d501      	bpl.n	800363e <HAL_ADC_IRQHandler+0x12>
 800363a:	0770      	lsls	r0, r6, #29
 800363c:	d403      	bmi.n	8003646 <HAL_ADC_IRQHandler+0x1a>
 800363e:	0729      	lsls	r1, r5, #28
 8003640:	d543      	bpl.n	80036ca <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003642:	0732      	lsls	r2, r6, #28
 8003644:	d541      	bpl.n	80036ca <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003646:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003648:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800364a:	bf5e      	ittt	pl
 800364c:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 800364e:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8003652:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003658:	d003      	beq.n	8003662 <HAL_ADC_IRQHandler+0x36>
 800365a:	4a90      	ldr	r2, [pc, #576]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 800365c:	4293      	cmp	r3, r2
 800365e:	f040 8105 	bne.w	800386c <HAL_ADC_IRQHandler+0x240>
 8003662:	4a8f      	ldr	r2, [pc, #572]	@ (80038a0 <HAL_ADC_IRQHandler+0x274>)
 8003664:	6891      	ldr	r1, [r2, #8]
 8003666:	06c9      	lsls	r1, r1, #27
 8003668:	d00c      	beq.n	8003684 <HAL_ADC_IRQHandler+0x58>
 800366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800366e:	d003      	beq.n	8003678 <HAL_ADC_IRQHandler+0x4c>
 8003670:	498a      	ldr	r1, [pc, #552]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 8003672:	428b      	cmp	r3, r1
 8003674:	f040 80ff 	bne.w	8003876 <HAL_ADC_IRQHandler+0x24a>
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	f002 021f 	and.w	r2, r2, #31
 800367e:	2a05      	cmp	r2, #5
 8003680:	f040 8114 	bne.w	80038ac <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003684:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003686:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003688:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800368c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8003690:	4311      	orrs	r1, r2
 8003692:	d114      	bne.n	80036be <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003694:	0729      	lsls	r1, r5, #28
 8003696:	d512      	bpl.n	80036be <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	0752      	lsls	r2, r2, #29
 800369c:	f100 8122 	bmi.w	80038e4 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	f022 020c 	bic.w	r2, r2, #12
 80036a6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ae:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036b2:	04d8      	lsls	r0, r3, #19
 80036b4:	d403      	bmi.n	80036be <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff fe5e 	bl	8003380 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036ca:	06a9      	lsls	r1, r5, #26
 80036cc:	d501      	bpl.n	80036d2 <HAL_ADC_IRQHandler+0xa6>
 80036ce:	06b2      	lsls	r2, r6, #26
 80036d0:	d403      	bmi.n	80036da <HAL_ADC_IRQHandler+0xae>
 80036d2:	066b      	lsls	r3, r5, #25
 80036d4:	d562      	bpl.n	800379c <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80036d6:	0670      	lsls	r0, r6, #25
 80036d8:	d560      	bpl.n	800379c <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036e0:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e8:	d003      	beq.n	80036f2 <HAL_ADC_IRQHandler+0xc6>
 80036ea:	4a6c      	ldr	r2, [pc, #432]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	f040 8102 	bne.w	80038f6 <HAL_ADC_IRQHandler+0x2ca>
 80036f2:	4a6b      	ldr	r2, [pc, #428]	@ (80038a0 <HAL_ADC_IRQHandler+0x274>)
 80036f4:	6891      	ldr	r1, [r2, #8]
 80036f6:	06c9      	lsls	r1, r1, #27
 80036f8:	d00c      	beq.n	8003714 <HAL_ADC_IRQHandler+0xe8>
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036fe:	d003      	beq.n	8003708 <HAL_ADC_IRQHandler+0xdc>
 8003700:	4966      	ldr	r1, [pc, #408]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 8003702:	428b      	cmp	r3, r1
 8003704:	f040 80fc 	bne.w	8003900 <HAL_ADC_IRQHandler+0x2d4>
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	f002 021f 	and.w	r2, r2, #31
 800370e:	2a05      	cmp	r2, #5
 8003710:	f040 8108 	bne.w	8003924 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003714:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003716:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003718:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 800371c:	d138      	bne.n	8003790 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800371e:	0191      	lsls	r1, r2, #6
 8003720:	d506      	bpl.n	8003730 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003722:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003724:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003728:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800372c:	4311      	orrs	r1, r2
 800372e:	d12f      	bne.n	8003790 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003730:	0668      	lsls	r0, r5, #25
 8003732:	d52d      	bpl.n	8003790 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003738:	d003      	beq.n	8003742 <HAL_ADC_IRQHandler+0x116>
 800373a:	4a58      	ldr	r2, [pc, #352]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 800373c:	4293      	cmp	r3, r2
 800373e:	f040 810d 	bne.w	800395c <HAL_ADC_IRQHandler+0x330>
 8003742:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_ADC_IRQHandler+0x274>)
 8003744:	6891      	ldr	r1, [r2, #8]
 8003746:	06c9      	lsls	r1, r1, #27
 8003748:	d00c      	beq.n	8003764 <HAL_ADC_IRQHandler+0x138>
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800374e:	d003      	beq.n	8003758 <HAL_ADC_IRQHandler+0x12c>
 8003750:	4952      	ldr	r1, [pc, #328]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 8003752:	428b      	cmp	r3, r1
 8003754:	f040 8107 	bne.w	8003966 <HAL_ADC_IRQHandler+0x33a>
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2a06      	cmp	r2, #6
 8003760:	f040 8113 	bne.w	800398a <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003764:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003766:	0291      	lsls	r1, r2, #10
 8003768:	d412      	bmi.n	8003790 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	0712      	lsls	r2, r2, #28
 800376e:	f100 8128 	bmi.w	80039c2 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003778:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800377a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800377c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003780:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003784:	05d8      	lsls	r0, r3, #23
 8003786:	d403      	bmi.n	8003790 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ff47 	bl	8003624 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	2260      	movs	r2, #96	@ 0x60
 800379a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800379c:	0629      	lsls	r1, r5, #24
 800379e:	d50b      	bpl.n	80037b8 <HAL_ADC_IRQHandler+0x18c>
 80037a0:	0632      	lsls	r2, r6, #24
 80037a2:	d509      	bpl.n	80037b8 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037aa:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fde8 	bl	8003382 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	2280      	movs	r2, #128	@ 0x80
 80037b6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037b8:	05eb      	lsls	r3, r5, #23
 80037ba:	d50c      	bpl.n	80037d6 <HAL_ADC_IRQHandler+0x1aa>
 80037bc:	05f0      	lsls	r0, r6, #23
 80037be:	d50a      	bpl.n	80037d6 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c6:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ff2d 	bl	8003628 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037d4:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037d6:	05a9      	lsls	r1, r5, #22
 80037d8:	d50c      	bpl.n	80037f4 <HAL_ADC_IRQHandler+0x1c8>
 80037da:	05b2      	lsls	r2, r6, #22
 80037dc:	d50a      	bpl.n	80037f4 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037e4:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff ff1f 	bl	800362a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037f4:	06eb      	lsls	r3, r5, #27
 80037f6:	d525      	bpl.n	8003844 <HAL_ADC_IRQHandler+0x218>
 80037f8:	06f0      	lsls	r0, r6, #27
 80037fa:	d523      	bpl.n	8003844 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d012      	beq.n	8003828 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003808:	f000 80e4 	beq.w	80039d4 <HAL_ADC_IRQHandler+0x3a8>
 800380c:	4823      	ldr	r0, [pc, #140]	@ (800389c <HAL_ADC_IRQHandler+0x270>)
 800380e:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_ADC_IRQHandler+0x278>)
 8003810:	4923      	ldr	r1, [pc, #140]	@ (80038a0 <HAL_ADC_IRQHandler+0x274>)
 8003812:	4282      	cmp	r2, r0
 8003814:	bf08      	it	eq
 8003816:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	06c9      	lsls	r1, r1, #27
 800381c:	f040 80dc 	bne.w	80039d8 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003820:	68d3      	ldr	r3, [r2, #12]
 8003822:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003826:	d00a      	beq.n	800383e <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800382a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800382e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003830:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003832:	f043 0302 	orr.w	r3, r3, #2
 8003836:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff fda3 	bl	8003384 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	2210      	movs	r2, #16
 8003842:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003844:	056a      	lsls	r2, r5, #21
 8003846:	d510      	bpl.n	800386a <HAL_ADC_IRQHandler+0x23e>
 8003848:	0573      	lsls	r3, r6, #21
 800384a:	d50e      	bpl.n	800386a <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800384c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800384e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003852:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003854:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003856:	f043 0308 	orr.w	r3, r3, #8
 800385a:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003862:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff fede 	bl	8003626 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 800386a:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_ADC_IRQHandler+0x278>)
 800386e:	6892      	ldr	r2, [r2, #8]
 8003870:	06d0      	lsls	r0, r2, #27
 8003872:	f43f af07 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
 8003876:	4a0b      	ldr	r2, [pc, #44]	@ (80038a4 <HAL_ADC_IRQHandler+0x278>)
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	f002 021f 	and.w	r2, r2, #31
 800387e:	2a05      	cmp	r2, #5
 8003880:	f43f af00 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
 8003884:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_ADC_IRQHandler+0x278>)
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	f002 021f 	and.w	r2, r2, #31
 800388c:	2a09      	cmp	r2, #9
 800388e:	f43f aef9 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
 8003892:	4a05      	ldr	r2, [pc, #20]	@ (80038a8 <HAL_ADC_IRQHandler+0x27c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d123      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x2b4>
 8003898:	e6f4      	b.n	8003684 <HAL_ADC_IRQHandler+0x58>
 800389a:	bf00      	nop
 800389c:	50000100 	.word	0x50000100
 80038a0:	50000300 	.word	0x50000300
 80038a4:	50000700 	.word	0x50000700
 80038a8:	50000400 	.word	0x50000400
 80038ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b0:	d002      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x28c>
 80038b2:	4a4b      	ldr	r2, [pc, #300]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d1e5      	bne.n	8003884 <HAL_ADC_IRQHandler+0x258>
 80038b8:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <HAL_ADC_IRQHandler+0x3b8>)
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	f002 021f 	and.w	r2, r2, #31
 80038c0:	2a09      	cmp	r2, #9
 80038c2:	f43f aedf 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
 80038c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ca:	f43f aedb 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
 80038ce:	4a46      	ldr	r2, [pc, #280]	@ (80039e8 <HAL_ADC_IRQHandler+0x3bc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	f43f aed7 	beq.w	8003684 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80038d6:	4942      	ldr	r1, [pc, #264]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf08      	it	eq
 80038dc:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	e6d0      	b.n	8003686 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038e6:	f043 0310 	orr.w	r3, r3, #16
 80038ea:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6463      	str	r3, [r4, #68]	@ 0x44
 80038f4:	e6e3      	b.n	80036be <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80038f6:	4a3d      	ldr	r2, [pc, #244]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	06d0      	lsls	r0, r2, #27
 80038fc:	f43f af0a 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
 8003900:	4a3a      	ldr	r2, [pc, #232]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 8003902:	6892      	ldr	r2, [r2, #8]
 8003904:	f002 021f 	and.w	r2, r2, #31
 8003908:	2a05      	cmp	r2, #5
 800390a:	f43f af03 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
 800390e:	4a37      	ldr	r2, [pc, #220]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	f002 021f 	and.w	r2, r2, #31
 8003916:	2a09      	cmp	r2, #9
 8003918:	f43f aefc 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
 800391c:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <HAL_ADC_IRQHandler+0x3bc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d11a      	bne.n	8003958 <HAL_ADC_IRQHandler+0x32c>
 8003922:	e6f7      	b.n	8003714 <HAL_ADC_IRQHandler+0xe8>
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003928:	d002      	beq.n	8003930 <HAL_ADC_IRQHandler+0x304>
 800392a:	4a2d      	ldr	r2, [pc, #180]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d1ee      	bne.n	800390e <HAL_ADC_IRQHandler+0x2e2>
 8003930:	4a2c      	ldr	r2, [pc, #176]	@ (80039e4 <HAL_ADC_IRQHandler+0x3b8>)
 8003932:	6892      	ldr	r2, [r2, #8]
 8003934:	f002 021f 	and.w	r2, r2, #31
 8003938:	2a09      	cmp	r2, #9
 800393a:	f43f aeeb 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
 800393e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003942:	f43f aee7 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
 8003946:	4a28      	ldr	r2, [pc, #160]	@ (80039e8 <HAL_ADC_IRQHandler+0x3bc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	f43f aee3 	beq.w	8003714 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800394e:	4924      	ldr	r1, [pc, #144]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 8003950:	428b      	cmp	r3, r1
 8003952:	bf08      	it	eq
 8003954:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	e6dc      	b.n	8003716 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800395c:	4a23      	ldr	r2, [pc, #140]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	06d0      	lsls	r0, r2, #27
 8003962:	f43f aeff 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	f002 021f 	and.w	r2, r2, #31
 800396e:	2a06      	cmp	r2, #6
 8003970:	f43f aef8 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_ADC_IRQHandler+0x3c0>)
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	f002 021f 	and.w	r2, r2, #31
 800397c:	2a07      	cmp	r2, #7
 800397e:	f43f aef1 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
 8003982:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_ADC_IRQHandler+0x3bc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d11a      	bne.n	80039be <HAL_ADC_IRQHandler+0x392>
 8003988:	e6ec      	b.n	8003764 <HAL_ADC_IRQHandler+0x138>
 800398a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800398e:	d002      	beq.n	8003996 <HAL_ADC_IRQHandler+0x36a>
 8003990:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d1ee      	bne.n	8003974 <HAL_ADC_IRQHandler+0x348>
 8003996:	4a13      	ldr	r2, [pc, #76]	@ (80039e4 <HAL_ADC_IRQHandler+0x3b8>)
 8003998:	6892      	ldr	r2, [r2, #8]
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2a07      	cmp	r2, #7
 80039a0:	f43f aee0 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a8:	f43f aedc 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
 80039ac:	4a0e      	ldr	r2, [pc, #56]	@ (80039e8 <HAL_ADC_IRQHandler+0x3bc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	f43f aed8 	beq.w	8003764 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80039b4:	490a      	ldr	r1, [pc, #40]	@ (80039e0 <HAL_ADC_IRQHandler+0x3b4>)
 80039b6:	428b      	cmp	r3, r1
 80039b8:	bf08      	it	eq
 80039ba:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80039be:	68d2      	ldr	r2, [r2, #12]
 80039c0:	e6d1      	b.n	8003766 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6463      	str	r3, [r4, #68]	@ 0x44
 80039d2:	e6dd      	b.n	8003790 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <HAL_ADC_IRQHandler+0x3b8>)
 80039d6:	e71f      	b.n	8003818 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 80039de:	e722      	b.n	8003826 <HAL_ADC_IRQHandler+0x1fa>
 80039e0:	50000100 	.word	0x50000100
 80039e4:	50000300 	.word	0x50000300
 80039e8:	50000400 	.word	0x50000400
 80039ec:	50000700 	.word	0x50000700

080039f0 <HAL_ADC_ConfigChannel>:
{
 80039f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039f2:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80039f8:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039fc:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	f000 816a 	beq.w	8003cd8 <HAL_ADC_ConfigChannel+0x2e8>
 8003a04:	2301      	movs	r3, #1
 8003a06:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a0a:	682b      	ldr	r3, [r5, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	0757      	lsls	r7, r2, #29
 8003a10:	f100 815c 	bmi.w	8003ccc <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8003a14:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8003a16:	680c      	ldr	r4, [r1, #0]
 8003a18:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8003a1a:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8003a1c:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8003a20:	d82c      	bhi.n	8003a7c <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8003a22:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003a24:	271f      	movs	r7, #31
 8003a26:	4097      	lsls	r7, r2
 8003a28:	ea26 0607 	bic.w	r6, r6, r7
 8003a2c:	fa04 f202 	lsl.w	r2, r4, r2
 8003a30:	4332      	orrs	r2, r6
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	f012 0f0c 	tst.w	r2, #12
 8003a3a:	d158      	bne.n	8003aee <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a3c:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a3e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8003a42:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003a46:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a4a:	d93c      	bls.n	8003ac6 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a4c:	699f      	ldr	r7, [r3, #24]
 8003a4e:	3a1e      	subs	r2, #30
 8003a50:	4096      	lsls	r6, r2
 8003a52:	ea27 0606 	bic.w	r6, r7, r6
 8003a56:	fa0c f202 	lsl.w	r2, ip, r2
 8003a5a:	4332      	orrs	r2, r6
 8003a5c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	694e      	ldr	r6, [r1, #20]
 8003a62:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003a66:	0052      	lsls	r2, r2, #1
 8003a68:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8003a6a:	690a      	ldr	r2, [r1, #16]
 8003a6c:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003a6e:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8003a70:	2a03      	cmp	r2, #3
 8003a72:	d86b      	bhi.n	8003b4c <HAL_ADC_ConfigChannel+0x15c>
 8003a74:	e8df f002 	tbb	[pc, r2]
 8003a78:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8003a7c:	2e09      	cmp	r6, #9
 8003a7e:	d80a      	bhi.n	8003a96 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8003a80:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8003a82:	3a1e      	subs	r2, #30
 8003a84:	271f      	movs	r7, #31
 8003a86:	4097      	lsls	r7, r2
 8003a88:	ea26 0607 	bic.w	r6, r6, r7
 8003a8c:	fa04 f202 	lsl.w	r2, r4, r2
 8003a90:	4332      	orrs	r2, r6
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a94:	e7ce      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8003a96:	2e0e      	cmp	r6, #14
 8003a98:	f04f 061f 	mov.w	r6, #31
 8003a9c:	d809      	bhi.n	8003ab2 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a9e:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8003aa0:	3a3c      	subs	r2, #60	@ 0x3c
 8003aa2:	4096      	lsls	r6, r2
 8003aa4:	ea27 0606 	bic.w	r6, r7, r6
 8003aa8:	fa04 f202 	lsl.w	r2, r4, r2
 8003aac:	4332      	orrs	r2, r6
 8003aae:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ab0:	e7c0      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003ab2:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8003ab4:	3a5a      	subs	r2, #90	@ 0x5a
 8003ab6:	4096      	lsls	r6, r2
 8003ab8:	ea27 0606 	bic.w	r6, r7, r6
 8003abc:	fa04 f202 	lsl.w	r2, r4, r2
 8003ac0:	4332      	orrs	r2, r6
 8003ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ac4:	e7b6      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ac6:	695f      	ldr	r7, [r3, #20]
 8003ac8:	4096      	lsls	r6, r2
 8003aca:	ea27 0606 	bic.w	r6, r7, r6
 8003ace:	fa0c fc02 	lsl.w	ip, ip, r2
 8003ad2:	ea46 060c 	orr.w	r6, r6, ip
 8003ad6:	615e      	str	r6, [r3, #20]
 8003ad8:	e7c1      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003ada:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8003ade:	4a7f      	ldr	r2, [pc, #508]	@ (8003cdc <HAL_ADC_ConfigChannel+0x2ec>)
 8003ae0:	ea0c 0202 	and.w	r2, ip, r2
 8003ae4:	433a      	orrs	r2, r7
 8003ae6:	4332      	orrs	r2, r6
 8003ae8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003aec:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	f002 0203 	and.w	r2, r2, #3
 8003af4:	2a01      	cmp	r2, #1
 8003af6:	d14d      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1a4>
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	07d6      	lsls	r6, r2, #31
 8003afc:	d54a      	bpl.n	8003b94 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003b00:	2300      	movs	r3, #0
 8003b02:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8003b06:	b003      	add	sp, #12
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003b0a:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8003b0e:	4a73      	ldr	r2, [pc, #460]	@ (8003cdc <HAL_ADC_ConfigChannel+0x2ec>)
 8003b10:	ea0c 0202 	and.w	r2, ip, r2
 8003b14:	433a      	orrs	r2, r7
 8003b16:	4332      	orrs	r2, r6
 8003b18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b1c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8003b1e:	e7e6      	b.n	8003aee <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003b20:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8003b24:	4a6d      	ldr	r2, [pc, #436]	@ (8003cdc <HAL_ADC_ConfigChannel+0x2ec>)
 8003b26:	ea0c 0202 	and.w	r2, ip, r2
 8003b2a:	433a      	orrs	r2, r7
 8003b2c:	4332      	orrs	r2, r6
 8003b2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b32:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8003b34:	e7db      	b.n	8003aee <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003b36:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8003b3a:	4a68      	ldr	r2, [pc, #416]	@ (8003cdc <HAL_ADC_ConfigChannel+0x2ec>)
 8003b3c:	ea0c 0202 	and.w	r2, ip, r2
 8003b40:	433a      	orrs	r2, r7
 8003b42:	4332      	orrs	r2, r6
 8003b44:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003b4a:	e7d0      	b.n	8003aee <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b4e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003b52:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003b54:	bf02      	ittt	eq
 8003b56:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8003b58:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8003b5c:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b5e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b60:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003b64:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003b66:	bf02      	ittt	eq
 8003b68:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8003b6a:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8003b6e:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003b72:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003b76:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003b78:	bf02      	ittt	eq
 8003b7a:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8003b7c:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8003b80:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b84:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003b88:	42ba      	cmp	r2, r7
 8003b8a:	d1b0      	bne.n	8003aee <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b8c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b92:	e7d9      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b94:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b96:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b98:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b9c:	d047      	beq.n	8003c2e <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b9e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003ba2:	ea21 0202 	bic.w	r2, r1, r2
 8003ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bae:	d164      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x28a>
 8003bb0:	494b      	ldr	r1, [pc, #300]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bb2:	2c10      	cmp	r4, #16
 8003bb4:	d166      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003bb6:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bb8:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003bbc:	d19f      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc2:	4a48      	ldr	r2, [pc, #288]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003bc4:	d009      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x1ea>
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d069      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x2ae>
 8003bca:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	4845      	ldr	r0, [pc, #276]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x2f8>)
 8003bd2:	d067      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x2b4>
 8003bd4:	4283      	cmp	r3, r0
 8003bd6:	bf18      	it	ne
 8003bd8:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003bda:	6898      	ldr	r0, [r3, #8]
 8003bdc:	f000 0003 	and.w	r0, r0, #3
 8003be0:	2801      	cmp	r0, #1
 8003be2:	d102      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x1fa>
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	07c0      	lsls	r0, r0, #31
 8003be8:	d470      	bmi.n	8003ccc <HAL_ADC_ConfigChannel+0x2dc>
 8003bea:	b13a      	cbz	r2, 8003bfc <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003bec:	6890      	ldr	r0, [r2, #8]
 8003bee:	f000 0003 	and.w	r0, r0, #3
 8003bf2:	2801      	cmp	r0, #1
 8003bf4:	d102      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x20c>
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	07d2      	lsls	r2, r2, #31
 8003bfa:	d467      	bmi.n	8003ccc <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bfc:	2c10      	cmp	r4, #16
 8003bfe:	d153      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x2b8>
 8003c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c04:	f47f af7b 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003c08:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c0a:	4a38      	ldr	r2, [pc, #224]	@ (8003cec <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003c0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c10:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x300>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c1a:	220a      	movs	r2, #10
 8003c1c:	4353      	muls	r3, r2
            wait_loop_index--;
 8003c1e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003c20:	9b01      	ldr	r3, [sp, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f43f af6b 	beq.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8003c28:	9b01      	ldr	r3, [sp, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	e7f7      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c2e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c32:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c34:	ea42 0200 	orr.w	r2, r2, r0
 8003c38:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c3c:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c3e:	d90c      	bls.n	8003c5a <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003c40:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	3a1b      	subs	r2, #27
 8003c48:	2607      	movs	r6, #7
 8003c4a:	4096      	lsls	r6, r2
 8003c4c:	ea21 0106 	bic.w	r1, r1, r6
 8003c50:	fa00 f202 	lsl.w	r2, r0, r2
 8003c54:	430a      	orrs	r2, r1
 8003c56:	619a      	str	r2, [r3, #24]
 8003c58:	e7a7      	b.n	8003baa <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c5a:	1c61      	adds	r1, r4, #1
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003c62:	2607      	movs	r6, #7
 8003c64:	408e      	lsls	r6, r1
 8003c66:	ea22 0206 	bic.w	r2, r2, r6
 8003c6a:	fa00 f101 	lsl.w	r1, r0, r1
 8003c6e:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c74:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c76:	f43f af42 	beq.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x2f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d097      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x1c0>
 8003c80:	491c      	ldr	r1, [pc, #112]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x304>)
 8003c82:	e796      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c84:	2c11      	cmp	r4, #17
 8003c86:	d103      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c88:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c8a:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8003c8e:	e795      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c90:	2c12      	cmp	r4, #18
 8003c92:	f47f af34 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c96:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c98:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8003c9c:	e78e      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x1cc>
 8003c9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003ca2:	e79a      	b.n	8003bda <HAL_ADC_ConfigChannel+0x1ea>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	e798      	b.n	8003bda <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ca8:	2c11      	cmp	r4, #17
 8003caa:	d108      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x2ce>
 8003cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cb0:	f47f af25 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003cb4:	688b      	ldr	r3, [r1, #8]
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003cba:	608b      	str	r3, [r1, #8]
 8003cbc:	e71f      	b.n	8003afe <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cbe:	2c12      	cmp	r4, #18
 8003cc0:	f47f af1d 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003cc4:	688b      	ldr	r3, [r1, #8]
 8003cc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cca:	e7f6      	b.n	8003cba <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ccc:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	e713      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	e714      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x116>
 8003cdc:	83fff000 	.word	0x83fff000
 8003ce0:	50000300 	.word	0x50000300
 8003ce4:	50000100 	.word	0x50000100
 8003ce8:	50000500 	.word	0x50000500
 8003cec:	000f4240 	.word	0x000f4240
 8003cf0:	20000008 	.word	0x20000008
 8003cf4:	50000700 	.word	0x50000700

08003cf8 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003cfa:	6804      	ldr	r4, [r0, #0]
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8003cfe:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8003d02:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d04:	d009      	beq.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d047      	beq.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8003d0a:	4a3a      	ldr	r2, [pc, #232]	@ (8003df4 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8003d0c:	4294      	cmp	r4, r2
 8003d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d12:	d002      	beq.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003d14:	429c      	cmp	r4, r3
 8003d16:	d166      	bne.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003d18:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8003d1a:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8003d1e:	2a01      	cmp	r2, #1
 8003d20:	d063      	beq.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003d22:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d24:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8003d26:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003d2a:	68a2      	ldr	r2, [r4, #8]
 8003d2c:	0752      	lsls	r2, r2, #29
 8003d2e:	d454      	bmi.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	0757      	lsls	r7, r2, #29
 8003d34:	d451      	bmi.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d36:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8003d3a:	d031      	beq.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d3c:	4f2c      	ldr	r7, [pc, #176]	@ (8003df0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8003d40:	4e2e      	ldr	r6, [pc, #184]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003d42:	42bc      	cmp	r4, r7
 8003d44:	bf08      	it	eq
 8003d46:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d48:	b360      	cbz	r0, 8003da4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003d4a:	6897      	ldr	r7, [r2, #8]
 8003d4c:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8003d50:	684e      	ldr	r6, [r1, #4]
 8003d52:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8003d56:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8003d5a:	433e      	orrs	r6, r7
 8003d5c:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003d5e:	68a6      	ldr	r6, [r4, #8]
 8003d60:	f006 0603 	and.w	r6, r6, #3
 8003d64:	2e01      	cmp	r6, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003d68:	6824      	ldr	r4, [r4, #0]
 8003d6a:	07e6      	lsls	r6, r4, #31
 8003d6c:	d410      	bmi.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003d6e:	689c      	ldr	r4, [r3, #8]
 8003d70:	f004 0403 	and.w	r4, r4, #3
 8003d74:	2c01      	cmp	r4, #1
 8003d76:	d102      	bne.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	07dc      	lsls	r4, r3, #31
 8003d7c:	d408      	bmi.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003d7e:	6893      	ldr	r3, [r2, #8]
 8003d80:	6889      	ldr	r1, [r1, #8]
 8003d82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d86:	4308      	orrs	r0, r1
 8003d88:	f023 030f 	bic.w	r3, r3, #15
 8003d8c:	4318      	orrs	r0, r3
 8003d8e:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d90:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003d92:	2300      	movs	r3, #0
 8003d94:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d9e:	e7bc      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da0:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003da2:	e7d1      	b.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003da4:	6891      	ldr	r1, [r2, #8]
 8003da6:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003daa:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003dac:	68a1      	ldr	r1, [r4, #8]
 8003dae:	f001 0103 	and.w	r1, r1, #3
 8003db2:	2901      	cmp	r1, #1
 8003db4:	d102      	bne.n	8003dbc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8003db6:	6821      	ldr	r1, [r4, #0]
 8003db8:	07c9      	lsls	r1, r1, #31
 8003dba:	d4e9      	bmi.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	f001 0103 	and.w	r1, r1, #3
 8003dc2:	2901      	cmp	r1, #1
 8003dc4:	d102      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	07db      	lsls	r3, r3, #31
 8003dca:	d4e1      	bmi.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003dcc:	6893      	ldr	r3, [r2, #8]
 8003dce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	e7da      	b.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dda:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003de2:	2001      	movs	r0, #1
 8003de4:	e7d5      	b.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8003de6:	2001      	movs	r0, #1
 8003de8:	e7d6      	b.n	8003d98 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003dea:	2002      	movs	r0, #2
 8003dec:	e7d4      	b.n	8003d98 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003dee:	bf00      	nop
 8003df0:	50000100 	.word	0x50000100
 8003df4:	50000400 	.word	0x50000400
 8003df8:	50000700 	.word	0x50000700
 8003dfc:	50000300 	.word	0x50000300

08003e00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003e02:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e0a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e10:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003e1c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e24:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e26:	b530      	push	{r4, r5, lr}
 8003e28:	68dc      	ldr	r4, [r3, #12]
 8003e2a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e2e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	bf28      	it	cs
 8003e38:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e40:	bf8c      	ite	hi
 8003e42:	3c03      	subhi	r4, #3
 8003e44:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e46:	fa05 f303 	lsl.w	r3, r5, r3
 8003e4a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4e:	40a5      	lsls	r5, r4
 8003e50:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003e56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	bfac      	ite	ge
 8003e5e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e62:	4a08      	ldrlt	r2, [pc, #32]	@ (8003e84 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e64:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e68:	bfb8      	it	lt
 8003e6a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	bfaa      	itet	ge
 8003e72:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e7c:	bd30      	pop	{r4, r5, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000ed00 	.word	0xe000ed00
 8003e84:	e000ed14 	.word	0xe000ed14

08003e88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	db07      	blt.n	8003e9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8c:	0941      	lsrs	r1, r0, #5
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <HAL_NVIC_EnableIRQ+0x18>)
 8003e90:	f000 001f 	and.w	r0, r0, #31
 8003e94:	2301      	movs	r3, #1
 8003e96:	4083      	lsls	r3, r0
 8003e98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ea4:	6802      	ldr	r2, [r0, #0]
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <DMA_CalcBaseAndBitshift+0x2c>)
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f04f 0114 	mov.w	r1, #20
 8003eae:	d808      	bhi.n	8003ec2 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eb0:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <DMA_CalcBaseAndBitshift+0x30>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <DMA_CalcBaseAndBitshift+0x34>)
 8003eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003ebc:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ec0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <DMA_CalcBaseAndBitshift+0x38>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a06      	ldr	r2, [pc, #24]	@ (8003ee0 <DMA_CalcBaseAndBitshift+0x3c>)
 8003ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ecc:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8003ece:	e7f5      	b.n	8003ebc <DMA_CalcBaseAndBitshift+0x18>
 8003ed0:	40020407 	.word	0x40020407
 8003ed4:	bffdfff8 	.word	0xbffdfff8
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	bffdfbf8 	.word	0xbffdfbf8
 8003ee0:	40020400 	.word	0x40020400

08003ee4 <HAL_DMA_Init>:
{
 8003ee4:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	b1e0      	cbz	r0, 8003f24 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8003eea:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8003eee:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef0:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003ef2:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef4:	432b      	orrs	r3, r5
 8003ef6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003ef8:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efc:	6945      	ldr	r5, [r0, #20]
 8003efe:	432b      	orrs	r3, r5
 8003f00:	6985      	ldr	r5, [r0, #24]
 8003f02:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f04:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f06:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8003f0a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f0e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003f10:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003f12:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003f14:	f7ff ffc6 	bl	8003ea4 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f18:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8003f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003f20:	8423      	strh	r3, [r4, #32]
}
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f24:	2001      	movs	r0, #1
 8003f26:	e7fc      	b.n	8003f22 <HAL_DMA_Init+0x3e>

08003f28 <HAL_DMA_Start_IT>:
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003f2a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003f2e:	2c01      	cmp	r4, #1
 8003f30:	d033      	beq.n	8003f9a <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f32:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8003f36:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f38:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003f3a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f3e:	f04f 0400 	mov.w	r4, #0
 8003f42:	d128      	bne.n	8003f96 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f44:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f46:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f48:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f4a:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f4e:	6826      	ldr	r6, [r4, #0]
 8003f50:	f026 0601 	bic.w	r6, r6, #1
 8003f54:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f56:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8003f5a:	40bd      	lsls	r5, r7
 8003f5c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003f5e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f60:	6843      	ldr	r3, [r0, #4]
 8003f62:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003f64:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003f66:	bf0b      	itete	eq
 8003f68:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003f6a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003f6c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003f6e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003f70:	b14b      	cbz	r3, 8003f86 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f78:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2000      	movs	r0, #0
}
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f043 030a 	orr.w	r3, r3, #10
 8003f8c:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	e7f0      	b.n	8003f78 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003f96:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	e7f2      	b.n	8003f84 <HAL_DMA_Start_IT+0x5c>

08003f9e <HAL_DMA_Abort>:
  if(NULL == hdma)
 8003f9e:	b140      	cbz	r0, 8003fb2 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fa0:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d006      	beq.n	8003fb6 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa8:	2304      	movs	r3, #4
 8003faa:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8003fac:	2300      	movs	r3, #0
 8003fae:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f022 020e 	bic.w	r2, r2, #14
 8003fbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fc8:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8003fcc:	2301      	movs	r3, #1
 8003fce:	408b      	lsls	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8003fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fd6:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8003fd8:	2000      	movs	r0, #0
}
 8003fda:	4770      	bx	lr

08003fdc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fdc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fde:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003fe0:	6803      	ldr	r3, [r0, #0]
{
 8003fe2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003fe6:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fe8:	2404      	movs	r4, #4
 8003fea:	4094      	lsls	r4, r2
 8003fec:	4234      	tst	r4, r6
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x32>
 8003ff0:	f015 0f04 	tst.w	r5, #4
 8003ff4:	d00b      	beq.n	800400e <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ffa:	bf5e      	ittt	pl
 8003ffc:	681a      	ldrpl	r2, [r3, #0]
 8003ffe:	f022 0204 	bicpl.w	r2, r2, #4
 8004002:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004004:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004006:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8004008:	b363      	cbz	r3, 8004064 <HAL_DMA_IRQHandler+0x88>
}
 800400a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800400c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800400e:	2402      	movs	r4, #2
 8004010:	4094      	lsls	r4, r2
 8004012:	4234      	tst	r4, r6
 8004014:	d012      	beq.n	800403c <HAL_DMA_IRQHandler+0x60>
 8004016:	f015 0f02 	tst.w	r5, #2
 800401a:	d00f      	beq.n	800403c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	0695      	lsls	r5, r2, #26
 8004020:	d406      	bmi.n	8004030 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f022 020a 	bic.w	r2, r2, #10
 8004028:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800402a:	2301      	movs	r3, #1
 800402c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8004030:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004032:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004034:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004038:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800403a:	e7e5      	b.n	8004008 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800403c:	2408      	movs	r4, #8
 800403e:	4094      	lsls	r4, r2
 8004040:	4234      	tst	r4, r6
 8004042:	d00f      	beq.n	8004064 <HAL_DMA_IRQHandler+0x88>
 8004044:	072c      	lsls	r4, r5, #28
 8004046:	d50d      	bpl.n	8004064 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004048:	681c      	ldr	r4, [r3, #0]
 800404a:	f024 040e 	bic.w	r4, r4, #14
 800404e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004050:	2301      	movs	r3, #1
 8004052:	fa03 f202 	lsl.w	r2, r3, r2
 8004056:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004058:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800405a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800405e:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8004060:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004062:	e7d1      	b.n	8004008 <HAL_DMA_IRQHandler+0x2c>
}
 8004064:	bc70      	pop	{r4, r5, r6}
 8004066:	4770      	bx	lr

08004068 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004068:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 800406a:	4770      	bx	lr

0800406c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800406c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004070:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80041f0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004074:	4c5c      	ldr	r4, [pc, #368]	@ (80041e8 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8004076:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004078:	680a      	ldr	r2, [r1, #0]
 800407a:	fa32 f503 	lsrs.w	r5, r2, r3
 800407e:	d102      	bne.n	8004086 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8004080:	b003      	add	sp, #12
 8004082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004086:	2501      	movs	r5, #1
 8004088:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 800408c:	ea18 0202 	ands.w	r2, r8, r2
 8004090:	f000 80a0 	beq.w	80041d4 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004094:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004096:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004098:	f006 0503 	and.w	r5, r6, #3
 800409c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040a0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a4:	1e6f      	subs	r7, r5, #1
 80040a6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040a8:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ac:	d834      	bhi.n	8004118 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80040ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040b0:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040b4:	68cf      	ldr	r7, [r1, #12]
 80040b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80040ba:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80040be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80040c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c6:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80040ca:	409f      	lsls	r7, r3
 80040cc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80040d0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80040d2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040d4:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040d8:	688f      	ldr	r7, [r1, #8]
 80040da:	fa07 f70e 	lsl.w	r7, r7, lr
 80040de:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80040e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e6:	d119      	bne.n	800411c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80040e8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80040ec:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040f0:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80040f4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80040fc:	f04f 0b0f 	mov.w	fp, #15
 8004100:	fa0b fb0a 	lsl.w	fp, fp, sl
 8004104:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004108:	690f      	ldr	r7, [r1, #16]
 800410a:	fa07 f70a 	lsl.w	r7, r7, sl
 800410e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8004112:	f8c8 7020 	str.w	r7, [r8, #32]
 8004116:	e001      	b.n	800411c <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004118:	2d03      	cmp	r5, #3
 800411a:	d1da      	bne.n	80040d2 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 800411c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800411e:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004122:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004126:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004128:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800412c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800412e:	d051      	beq.n	80041d4 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004130:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8004134:	f045 0501 	orr.w	r5, r5, #1
 8004138:	f8c9 5018 	str.w	r5, [r9, #24]
 800413c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8004140:	f023 0703 	bic.w	r7, r3, #3
 8004144:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004148:	f005 0501 	and.w	r5, r5, #1
 800414c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8004150:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004152:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004158:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800415a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800415e:	f04f 0e0f 	mov.w	lr, #15
 8004162:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004166:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800416a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800416e:	d033      	beq.n	80041d8 <HAL_GPIO_Init+0x16c>
 8004170:	4d1e      	ldr	r5, [pc, #120]	@ (80041ec <HAL_GPIO_Init+0x180>)
 8004172:	42a8      	cmp	r0, r5
 8004174:	d032      	beq.n	80041dc <HAL_GPIO_Init+0x170>
 8004176:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800417a:	42a8      	cmp	r0, r5
 800417c:	d030      	beq.n	80041e0 <HAL_GPIO_Init+0x174>
 800417e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004182:	42a8      	cmp	r0, r5
 8004184:	d02e      	beq.n	80041e4 <HAL_GPIO_Init+0x178>
 8004186:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800418a:	42a8      	cmp	r0, r5
 800418c:	bf14      	ite	ne
 800418e:	2505      	movne	r5, #5
 8004190:	2504      	moveq	r5, #4
 8004192:	fa05 f50c 	lsl.w	r5, r5, ip
 8004196:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800419a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 800419c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800419e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041a0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80041a4:	bf0c      	ite	eq
 80041a6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80041a8:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80041aa:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80041ac:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ae:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80041b2:	bf0c      	ite	eq
 80041b4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80041b6:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80041b8:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80041ba:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041bc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80041c0:	bf0c      	ite	eq
 80041c2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80041c4:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80041c6:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80041c8:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041ca:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80041cc:	bf54      	ite	pl
 80041ce:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80041d0:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 80041d2:	6025      	str	r5, [r4, #0]
    position++;
 80041d4:	3301      	adds	r3, #1
 80041d6:	e74f      	b.n	8004078 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041d8:	2500      	movs	r5, #0
 80041da:	e7da      	b.n	8004192 <HAL_GPIO_Init+0x126>
 80041dc:	2501      	movs	r5, #1
 80041de:	e7d8      	b.n	8004192 <HAL_GPIO_Init+0x126>
 80041e0:	2502      	movs	r5, #2
 80041e2:	e7d6      	b.n	8004192 <HAL_GPIO_Init+0x126>
 80041e4:	2503      	movs	r5, #3
 80041e6:	e7d4      	b.n	8004192 <HAL_GPIO_Init+0x126>
 80041e8:	40010400 	.word	0x40010400
 80041ec:	48000400 	.word	0x48000400
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	b10a      	cbz	r2, 80041fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f6:	6181      	str	r1, [r0, #24]
 80041f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80041fc:	4770      	bx	lr

080041fe <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041fe:	4770      	bx	lr

08004200 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004200:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004202:	6951      	ldr	r1, [r2, #20]
 8004204:	4201      	tst	r1, r0
{
 8004206:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004208:	d002      	beq.n	8004210 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800420c:	f7ff fff7 	bl	80041fe <HAL_GPIO_EXTI_Callback>
}
 8004210:	bd08      	pop	{r3, pc}
 8004212:	bf00      	nop
 8004214:	40010400 	.word	0x40010400

08004218 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8004218:	4a02      	ldr	r2, [pc, #8]	@ (8004224 <HAL_PWR_EnableBkUpAccess+0xc>)
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004220:	6013      	str	r3, [r2, #0]
}
 8004222:	4770      	bx	lr
 8004224:	40007000 	.word	0x40007000

08004228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004228:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800422c:	4605      	mov	r5, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d033      	beq.n	800429a <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	07da      	lsls	r2, r3, #31
 8004236:	d411      	bmi.n	800425c <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	079b      	lsls	r3, r3, #30
 800423c:	f100 8081 	bmi.w	8004342 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	071c      	lsls	r4, r3, #28
 8004244:	f100 80eb 	bmi.w	800441e <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	0758      	lsls	r0, r3, #29
 800424c:	f100 8130 	bmi.w	80044b0 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004250:	69eb      	ldr	r3, [r5, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 81b5 	bne.w	80045c2 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8004258:	2000      	movs	r0, #0
 800425a:	e047      	b.n	80042ec <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800425c:	4cb0      	ldr	r4, [pc, #704]	@ (8004520 <HAL_RCC_OscConfig+0x2f8>)
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b04      	cmp	r3, #4
 8004266:	d007      	beq.n	8004278 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d115      	bne.n	800429e <HAL_RCC_OscConfig+0x76>
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	03df      	lsls	r7, r3, #15
 8004276:	d512      	bpl.n	800429e <HAL_RCC_OscConfig+0x76>
 8004278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800427c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	2201      	movs	r2, #1
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	420b      	tst	r3, r1
 8004292:	d0d1      	beq.n	8004238 <HAL_RCC_OscConfig+0x10>
 8004294:	686b      	ldr	r3, [r5, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ce      	bne.n	8004238 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800429a:	2001      	movs	r0, #1
 800429c:	e026      	b.n	80042ec <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	686a      	ldr	r2, [r5, #4]
 80042a0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80042a4:	d125      	bne.n	80042f2 <HAL_RCC_OscConfig+0xca>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ac:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80042b0:	68a9      	ldr	r1, [r5, #8]
 80042b2:	f023 030f 	bic.w	r3, r3, #15
 80042b6:	430b      	orrs	r3, r1
 80042b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ba:	b352      	cbz	r2, 8004312 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80042bc:	f7ff f846 	bl	800334c <HAL_GetTick>
 80042c0:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80042c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	f04f 0801 	mov.w	r8, #1
 80042ca:	fa97 f3a7 	rbit	r3, r7
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	fa97 f3a7 	rbit	r3, r7
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	fa08 f303 	lsl.w	r3, r8, r3
 80042dc:	4213      	tst	r3, r2
 80042de:	d1ab      	bne.n	8004238 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e0:	f7ff f834 	bl	800334c <HAL_GetTick>
 80042e4:	1b80      	subs	r0, r0, r6
 80042e6:	2864      	cmp	r0, #100	@ 0x64
 80042e8:	d9ef      	bls.n	80042ca <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80042ea:	2003      	movs	r0, #3
}
 80042ec:	b002      	add	sp, #8
 80042ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	b932      	cbnz	r2, 8004304 <HAL_RCC_OscConfig+0xdc>
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004302:	e7d3      	b.n	80042ac <HAL_RCC_OscConfig+0x84>
 8004304:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8004308:	d1f5      	bne.n	80042f6 <HAL_RCC_OscConfig+0xce>
 800430a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	e7c9      	b.n	80042a6 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8004312:	f7ff f81b 	bl	800334c <HAL_GetTick>
 8004316:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800431a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431c:	f04f 0801 	mov.w	r8, #1
 8004320:	fa97 f3a7 	rbit	r3, r7
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	fa97 f3a7 	rbit	r3, r7
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	fa08 f303 	lsl.w	r3, r8, r3
 8004332:	4213      	tst	r3, r2
 8004334:	d080      	beq.n	8004238 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004336:	f7ff f809 	bl	800334c <HAL_GetTick>
 800433a:	1b80      	subs	r0, r0, r6
 800433c:	2864      	cmp	r0, #100	@ 0x64
 800433e:	d9ef      	bls.n	8004320 <HAL_RCC_OscConfig+0xf8>
 8004340:	e7d3      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004342:	4c77      	ldr	r4, [pc, #476]	@ (8004520 <HAL_RCC_OscConfig+0x2f8>)
 8004344:	6863      	ldr	r3, [r4, #4]
 8004346:	f013 0f0c 	tst.w	r3, #12
 800434a:	d007      	beq.n	800435c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d11f      	bne.n	8004396 <HAL_RCC_OscConfig+0x16e>
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	03de      	lsls	r6, r3, #15
 800435a:	d41c      	bmi.n	8004396 <HAL_RCC_OscConfig+0x16e>
 800435c:	2302      	movs	r3, #2
 800435e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	2201      	movs	r2, #1
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	420b      	tst	r3, r1
 8004374:	d002      	beq.n	800437c <HAL_RCC_OscConfig+0x154>
 8004376:	692b      	ldr	r3, [r5, #16]
 8004378:	4293      	cmp	r3, r2
 800437a:	d18e      	bne.n	800429a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	6821      	ldr	r1, [r4, #0]
 800437e:	22f8      	movs	r2, #248	@ 0xf8
 8004380:	fa92 f2a2 	rbit	r2, r2
 8004384:	696b      	ldr	r3, [r5, #20]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	4093      	lsls	r3, r2
 800438c:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8004390:	4313      	orrs	r3, r2
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	e754      	b.n	8004240 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004396:	692a      	ldr	r2, [r5, #16]
 8004398:	2601      	movs	r6, #1
 800439a:	b1fa      	cbz	r2, 80043dc <HAL_RCC_OscConfig+0x1b4>
 800439c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	f04f 0802 	mov.w	r8, #2
 80043b2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80043b4:	f7fe ffca 	bl	800334c <HAL_GetTick>
 80043b8:	4607      	mov	r7, r0
 80043ba:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	fa98 f3a8 	rbit	r3, r8
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	fa06 f303 	lsl.w	r3, r6, r3
 80043cc:	4213      	tst	r3, r2
 80043ce:	d1d5      	bne.n	800437c <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fe ffbc 	bl	800334c <HAL_GetTick>
 80043d4:	1bc0      	subs	r0, r0, r7
 80043d6:	2802      	cmp	r0, #2
 80043d8:	d9ef      	bls.n	80043ba <HAL_RCC_OscConfig+0x192>
 80043da:	e786      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
 80043dc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	f04f 0802 	mov.w	r8, #2
 80043f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043f4:	f7fe ffaa 	bl	800334c <HAL_GetTick>
 80043f8:	4607      	mov	r7, r0
 80043fa:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	fa98 f3a8 	rbit	r3, r8
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	fa06 f303 	lsl.w	r3, r6, r3
 800440c:	4213      	tst	r3, r2
 800440e:	f43f af17 	beq.w	8004240 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe ff9b 	bl	800334c <HAL_GetTick>
 8004416:	1bc0      	subs	r0, r0, r7
 8004418:	2802      	cmp	r0, #2
 800441a:	d9ee      	bls.n	80043fa <HAL_RCC_OscConfig+0x1d2>
 800441c:	e765      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441e:	69aa      	ldr	r2, [r5, #24]
 8004420:	4e3f      	ldr	r6, [pc, #252]	@ (8004520 <HAL_RCC_OscConfig+0x2f8>)
 8004422:	4940      	ldr	r1, [pc, #256]	@ (8004524 <HAL_RCC_OscConfig+0x2fc>)
 8004424:	2401      	movs	r4, #1
 8004426:	b30a      	cbz	r2, 800446c <HAL_RCC_OscConfig+0x244>
 8004428:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	440b      	add	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	2702      	movs	r7, #2
 8004436:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8004438:	f7fe ff88 	bl	800334c <HAL_GetTick>
 800443c:	4680      	mov	r8, r0
 800443e:	fa97 f3a7 	rbit	r3, r7
 8004442:	fa97 f3a7 	rbit	r3, r7
 8004446:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800444c:	fa97 f3a7 	rbit	r3, r7
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	fa04 f303 	lsl.w	r3, r4, r3
 8004458:	4213      	tst	r3, r2
 800445a:	f47f aef5 	bne.w	8004248 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe ff75 	bl	800334c <HAL_GetTick>
 8004462:	eba0 0008 	sub.w	r0, r0, r8
 8004466:	2802      	cmp	r0, #2
 8004468:	d9e9      	bls.n	800443e <HAL_RCC_OscConfig+0x216>
 800446a:	e73e      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
 800446c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	440b      	add	r3, r1
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	2702      	movs	r7, #2
 800447a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800447c:	f7fe ff66 	bl	800334c <HAL_GetTick>
 8004480:	4680      	mov	r8, r0
 8004482:	fa97 f3a7 	rbit	r3, r7
 8004486:	fa97 f3a7 	rbit	r3, r7
 800448a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004490:	fa97 f3a7 	rbit	r3, r7
 8004494:	fab3 f383 	clz	r3, r3
 8004498:	fa04 f303 	lsl.w	r3, r4, r3
 800449c:	4213      	tst	r3, r2
 800449e:	f43f aed3 	beq.w	8004248 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fe ff53 	bl	800334c <HAL_GetTick>
 80044a6:	eba0 0008 	sub.w	r0, r0, r8
 80044aa:	2802      	cmp	r0, #2
 80044ac:	d9e9      	bls.n	8004482 <HAL_RCC_OscConfig+0x25a>
 80044ae:	e71c      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b0:	4c1b      	ldr	r4, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x2f8>)
 80044b2:	69e3      	ldr	r3, [r4, #28]
 80044b4:	00d9      	lsls	r1, r3, #3
 80044b6:	d431      	bmi.n	800451c <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	69e3      	ldr	r3, [r4, #28]
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044be:	61e3      	str	r3, [r4, #28]
 80044c0:	69e3      	ldr	r3, [r4, #28]
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80044ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4f16      	ldr	r7, [pc, #88]	@ (8004528 <HAL_RCC_OscConfig+0x300>)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	05da      	lsls	r2, r3, #23
 80044d2:	d52b      	bpl.n	800452c <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d4:	68eb      	ldr	r3, [r5, #12]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d139      	bne.n	800454e <HAL_RCC_OscConfig+0x326>
 80044da:	6a23      	ldr	r3, [r4, #32]
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80044e2:	f7fe ff33 	bl	800334c <HAL_GetTick>
 80044e6:	2702      	movs	r7, #2
 80044e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80044f2:	fa97 f3a7 	rbit	r3, r7
 80044f6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fa:	6a22      	ldr	r2, [r4, #32]
 80044fc:	fa97 f3a7 	rbit	r3, r7
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	fa09 f303 	lsl.w	r3, r9, r3
 8004508:	4213      	tst	r3, r2
 800450a:	d053      	beq.n	80045b4 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 800450c:	2e00      	cmp	r6, #0
 800450e:	f43f ae9f 	beq.w	8004250 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	69e3      	ldr	r3, [r4, #28]
 8004514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004518:	61e3      	str	r3, [r4, #28]
 800451a:	e699      	b.n	8004250 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800451c:	2600      	movs	r6, #0
 800451e:	e7d5      	b.n	80044cc <HAL_RCC_OscConfig+0x2a4>
 8004520:	40021000 	.word	0x40021000
 8004524:	10908120 	.word	0x10908120
 8004528:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004532:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004534:	f7fe ff0a 	bl	800334c <HAL_GetTick>
 8004538:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	d4c9      	bmi.n	80044d4 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004540:	f7fe ff04 	bl	800334c <HAL_GetTick>
 8004544:	eba0 0008 	sub.w	r0, r0, r8
 8004548:	2864      	cmp	r0, #100	@ 0x64
 800454a:	d9f6      	bls.n	800453a <HAL_RCC_OscConfig+0x312>
 800454c:	e6cd      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454e:	bb1b      	cbnz	r3, 8004598 <HAL_RCC_OscConfig+0x370>
 8004550:	6a23      	ldr	r3, [r4, #32]
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	6223      	str	r3, [r4, #32]
 8004558:	6a23      	ldr	r3, [r4, #32]
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004560:	f7fe fef4 	bl	800334c <HAL_GetTick>
 8004564:	2702      	movs	r7, #2
 8004566:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004570:	fa97 f3a7 	rbit	r3, r7
 8004574:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	6a22      	ldr	r2, [r4, #32]
 800457a:	fa97 f3a7 	rbit	r3, r7
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	fa09 f303 	lsl.w	r3, r9, r3
 8004586:	4213      	tst	r3, r2
 8004588:	d0c0      	beq.n	800450c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fe fedf 	bl	800334c <HAL_GetTick>
 800458e:	eba0 0008 	sub.w	r0, r0, r8
 8004592:	4550      	cmp	r0, sl
 8004594:	d9ec      	bls.n	8004570 <HAL_RCC_OscConfig+0x348>
 8004596:	e6a8      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	2b05      	cmp	r3, #5
 800459a:	6a23      	ldr	r3, [r4, #32]
 800459c:	d103      	bne.n	80045a6 <HAL_RCC_OscConfig+0x37e>
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	6223      	str	r3, [r4, #32]
 80045a4:	e799      	b.n	80044da <HAL_RCC_OscConfig+0x2b2>
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	6223      	str	r3, [r4, #32]
 80045ac:	6a23      	ldr	r3, [r4, #32]
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	e795      	b.n	80044e0 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fe feca 	bl	800334c <HAL_GetTick>
 80045b8:	eba0 0008 	sub.w	r0, r0, r8
 80045bc:	4550      	cmp	r0, sl
 80045be:	d998      	bls.n	80044f2 <HAL_RCC_OscConfig+0x2ca>
 80045c0:	e693      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c2:	4c46      	ldr	r4, [pc, #280]	@ (80046dc <HAL_RCC_OscConfig+0x4b4>)
 80045c4:	6862      	ldr	r2, [r4, #4]
 80045c6:	f002 020c 	and.w	r2, r2, #12
 80045ca:	2a08      	cmp	r2, #8
 80045cc:	d074      	beq.n	80046b8 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045d4:	d14d      	bne.n	8004672 <HAL_RCC_OscConfig+0x44a>
 80045d6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80045e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045ec:	f7fe feae 	bl	800334c <HAL_GetTick>
 80045f0:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 80045f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f6:	2601      	movs	r6, #1
 80045f8:	fa98 f3a8 	rbit	r3, r8
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	fa98 f3a8 	rbit	r3, r8
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	fa06 f303 	lsl.w	r3, r6, r3
 800460a:	4213      	tst	r3, r2
 800460c:	d12b      	bne.n	8004666 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	430b      	orrs	r3, r1
 8004616:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800461a:	4313      	orrs	r3, r2
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004622:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800462e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004632:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004634:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8004636:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8004638:	f7fe fe88 	bl	800334c <HAL_GetTick>
 800463c:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004640:	4605      	mov	r5, r0
 8004642:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	fa96 f3a6 	rbit	r3, r6
 800464c:	fab3 f383 	clz	r3, r3
 8004650:	fa07 f303 	lsl.w	r3, r7, r3
 8004654:	4213      	tst	r3, r2
 8004656:	f47f adff 	bne.w	8004258 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465a:	f7fe fe77 	bl	800334c <HAL_GetTick>
 800465e:	1b40      	subs	r0, r0, r5
 8004660:	2802      	cmp	r0, #2
 8004662:	d9ee      	bls.n	8004642 <HAL_RCC_OscConfig+0x41a>
 8004664:	e641      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fe fe71 	bl	800334c <HAL_GetTick>
 800466a:	1bc0      	subs	r0, r0, r7
 800466c:	2802      	cmp	r0, #2
 800466e:	d9c3      	bls.n	80045f8 <HAL_RCC_OscConfig+0x3d0>
 8004670:	e63b      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
 8004672:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800467e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004688:	f7fe fe60 	bl	800334c <HAL_GetTick>
 800468c:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004690:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004692:	2701      	movs	r7, #1
 8004694:	fa96 f3a6 	rbit	r3, r6
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	fa96 f3a6 	rbit	r3, r6
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	fa07 f303 	lsl.w	r3, r7, r3
 80046a6:	4213      	tst	r3, r2
 80046a8:	f43f add6 	beq.w	8004258 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe fe4e 	bl	800334c <HAL_GetTick>
 80046b0:	1b40      	subs	r0, r0, r5
 80046b2:	2802      	cmp	r0, #2
 80046b4:	d9ee      	bls.n	8004694 <HAL_RCC_OscConfig+0x46c>
 80046b6:	e618      	b.n	80042ea <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f43f adee 	beq.w	800429a <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80046be:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046c0:	6a2b      	ldr	r3, [r5, #32]
 80046c2:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f47f ade7 	bne.w	800429a <HAL_RCC_OscConfig+0x72>
 80046cc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046ce:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046d2:	1ac0      	subs	r0, r0, r3
 80046d4:	bf18      	it	ne
 80046d6:	2001      	movne	r0, #1
 80046d8:	e608      	b.n	80042ec <HAL_RCC_OscConfig+0xc4>
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000

080046e0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x34>)
 80046e2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046e4:	f002 010c 	and.w	r1, r2, #12
 80046e8:	2908      	cmp	r1, #8
 80046ea:	d111      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046ee:	480a      	ldr	r0, [pc, #40]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x38>)
 80046f0:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046f4:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80046f6:	bf44      	itt	mi
 80046f8:	f003 030f 	andmi.w	r3, r3, #15
 80046fc:	4a07      	ldrmi	r2, [pc, #28]	@ (800471c <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046fe:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004700:	bf49      	itett	mi
 8004702:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004704:	4b06      	ldrpl	r3, [pc, #24]	@ (8004720 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004706:	4b07      	ldrmi	r3, [pc, #28]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x44>)
 8004708:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800470c:	4358      	muls	r0, r3
 800470e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004710:	4804      	ldr	r0, [pc, #16]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004712:	4770      	bx	lr
 8004714:	40021000 	.word	0x40021000
 8004718:	0800c8a5 	.word	0x0800c8a5
 800471c:	0800c895 	.word	0x0800c895
 8004720:	003d0900 	.word	0x003d0900
 8004724:	007a1200 	.word	0x007a1200

08004728 <HAL_RCC_ClockConfig>:
{
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800472e:	4604      	mov	r4, r0
 8004730:	b910      	cbnz	r0, 8004738 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004732:	2001      	movs	r0, #1
}
 8004734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4a4a      	ldr	r2, [pc, #296]	@ (8004864 <HAL_RCC_ClockConfig+0x13c>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	428b      	cmp	r3, r1
 8004742:	d32e      	bcc.n	80047a2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	0791      	lsls	r1, r2, #30
 8004748:	d436      	bmi.n	80047b8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800474a:	07d2      	lsls	r2, r2, #31
 800474c:	d43c      	bmi.n	80047c8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474e:	4a45      	ldr	r2, [pc, #276]	@ (8004864 <HAL_RCC_ClockConfig+0x13c>)
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	42ab      	cmp	r3, r5
 8004758:	d870      	bhi.n	800483c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	4d42      	ldr	r5, [pc, #264]	@ (8004868 <HAL_RCC_ClockConfig+0x140>)
 800475e:	f012 0f04 	tst.w	r2, #4
 8004762:	d177      	bne.n	8004854 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	0713      	lsls	r3, r2, #28
 8004766:	d506      	bpl.n	8004776 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004768:	686b      	ldr	r3, [r5, #4]
 800476a:	6922      	ldr	r2, [r4, #16]
 800476c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004770:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004774:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004776:	f7ff ffb3 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 800477a:	686b      	ldr	r3, [r5, #4]
 800477c:	22f0      	movs	r2, #240	@ 0xf0
 800477e:	fa92 f2a2 	rbit	r2, r2
 8004782:	fab2 f282 	clz	r2, r2
 8004786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800478a:	40d3      	lsrs	r3, r2
 800478c:	4a37      	ldr	r2, [pc, #220]	@ (800486c <HAL_RCC_ClockConfig+0x144>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	40d8      	lsrs	r0, r3
 8004792:	4b37      	ldr	r3, [pc, #220]	@ (8004870 <HAL_RCC_ClockConfig+0x148>)
 8004794:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004796:	4b37      	ldr	r3, [pc, #220]	@ (8004874 <HAL_RCC_ClockConfig+0x14c>)
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	f7fe fca3 	bl	80030e4 <HAL_InitTick>
  return HAL_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e7c8      	b.n	8004734 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	428b      	cmp	r3, r1
 80047b4:	d1bd      	bne.n	8004732 <HAL_RCC_ClockConfig+0xa>
 80047b6:	e7c5      	b.n	8004744 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	492b      	ldr	r1, [pc, #172]	@ (8004868 <HAL_RCC_ClockConfig+0x140>)
 80047ba:	68a0      	ldr	r0, [r4, #8]
 80047bc:	684b      	ldr	r3, [r1, #4]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c2:	4303      	orrs	r3, r0
 80047c4:	604b      	str	r3, [r1, #4]
 80047c6:	e7c0      	b.n	800474a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c8:	6862      	ldr	r2, [r4, #4]
 80047ca:	4e27      	ldr	r6, [pc, #156]	@ (8004868 <HAL_RCC_ClockConfig+0x140>)
 80047cc:	2a01      	cmp	r2, #1
 80047ce:	d124      	bne.n	800481a <HAL_RCC_ClockConfig+0xf2>
 80047d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047d4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d8:	6831      	ldr	r1, [r6, #0]
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	fab3 f383 	clz	r3, r3
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	d0a3      	beq.n	8004732 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	6873      	ldr	r3, [r6, #4]
 80047ec:	f023 0303 	bic.w	r3, r3, #3
 80047f0:	4313      	orrs	r3, r2
 80047f2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80047f4:	f7fe fdaa 	bl	800334c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80047fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	6873      	ldr	r3, [r6, #4]
 8004800:	6862      	ldr	r2, [r4, #4]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800480a:	d0a0      	beq.n	800474e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fe fd9e 	bl	800334c <HAL_GetTick>
 8004810:	1bc0      	subs	r0, r0, r7
 8004812:	4540      	cmp	r0, r8
 8004814:	d9f3      	bls.n	80047fe <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8004816:	2003      	movs	r0, #3
 8004818:	e78c      	b.n	8004734 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481a:	2a02      	cmp	r2, #2
 800481c:	bf0c      	ite	eq
 800481e:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8004822:	2302      	movne	r3, #2
 8004824:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	6830      	ldr	r0, [r6, #0]
 800482a:	fa93 f3a3 	rbit	r3, r3
 800482e:	2101      	movs	r1, #1
 8004830:	fab3 f383 	clz	r3, r3
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4203      	tst	r3, r0
 800483a:	e7d5      	b.n	80047e8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	f023 0307 	bic.w	r3, r3, #7
 8004842:	432b      	orrs	r3, r5
 8004844:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	42ab      	cmp	r3, r5
 800484e:	f47f af70 	bne.w	8004732 <HAL_RCC_ClockConfig+0xa>
 8004852:	e782      	b.n	800475a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	686b      	ldr	r3, [r5, #4]
 8004856:	68e1      	ldr	r1, [r4, #12]
 8004858:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800485c:	430b      	orrs	r3, r1
 800485e:	606b      	str	r3, [r5, #4]
 8004860:	e780      	b.n	8004764 <HAL_RCC_ClockConfig+0x3c>
 8004862:	bf00      	nop
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
 800486c:	0800c885 	.word	0x0800c885
 8004870:	20000008 	.word	0x20000008
 8004874:	20000010 	.word	0x20000010

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004878:	4b08      	ldr	r3, [pc, #32]	@ (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	fa92 f2a2 	rbit	r2, r2
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800488c:	40d3      	lsrs	r3, r2
 800488e:	4a04      	ldr	r2, [pc, #16]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004890:	5cd3      	ldrb	r3, [r2, r3]
 8004892:	4a04      	ldr	r2, [pc, #16]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004894:	6810      	ldr	r0, [r2, #0]
}    
 8004896:	40d8      	lsrs	r0, r3
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	0800c87d 	.word	0x0800c87d
 80048a4:	20000008 	.word	0x20000008

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048aa:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	fa92 f2a2 	rbit	r2, r2
 80048b4:	fab2 f282 	clz	r2, r2
 80048b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80048bc:	40d3      	lsrs	r3, r2
 80048be:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80048c4:	6810      	ldr	r0, [r2, #0]
} 
 80048c6:	40d8      	lsrs	r0, r3
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800c87d 	.word	0x0800c87d
 80048d4:	20000008 	.word	0x20000008

080048d8 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048d8:	230f      	movs	r3, #15
 80048da:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_RCC_GetClockConfig+0x34>)
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	f002 0203 	and.w	r2, r2, #3
 80048e4:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80048ec:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80048f4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048fe:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004900:	4b03      	ldr	r3, [pc, #12]	@ (8004910 <HAL_RCC_GetClockConfig+0x38>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	600b      	str	r3, [r1, #0]
}
 800490a:	4770      	bx	lr
 800490c:	40021000 	.word	0x40021000
 8004910:	40022000 	.word	0x40022000

08004914 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004914:	6803      	ldr	r3, [r0, #0]
{
 8004916:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800491a:	03dd      	lsls	r5, r3, #15
{
 800491c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800491e:	d524      	bpl.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004920:	4d78      	ldr	r5, [pc, #480]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004922:	69eb      	ldr	r3, [r5, #28]
 8004924:	00d8      	lsls	r0, r3, #3
 8004926:	f100 8091 	bmi.w	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	69eb      	ldr	r3, [r5, #28]
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004930:	61eb      	str	r3, [r5, #28]
 8004932:	69eb      	ldr	r3, [r5, #28]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800493c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4f72      	ldr	r7, [pc, #456]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	05d9      	lsls	r1, r3, #23
 8004944:	f140 8084 	bpl.w	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004948:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800494a:	6862      	ldr	r2, [r4, #4]
 800494c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004950:	f040 8093 	bne.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004954:	6a2b      	ldr	r3, [r5, #32]
 8004956:	6862      	ldr	r2, [r4, #4]
 8004958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495c:	4313      	orrs	r3, r2
 800495e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004960:	b11e      	cbz	r6, 800496a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004962:	69eb      	ldr	r3, [r5, #28]
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004968:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	07df      	lsls	r7, r3, #31
 800496e:	d506      	bpl.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004970:	4964      	ldr	r1, [pc, #400]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004972:	68a0      	ldr	r0, [r4, #8]
 8004974:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004976:	f022 0203 	bic.w	r2, r2, #3
 800497a:	4302      	orrs	r2, r0
 800497c:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800497e:	079e      	lsls	r6, r3, #30
 8004980:	d506      	bpl.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004982:	4960      	ldr	r1, [pc, #384]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004984:	68e0      	ldr	r0, [r4, #12]
 8004986:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004988:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800498c:	4302      	orrs	r2, r0
 800498e:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004990:	075d      	lsls	r5, r3, #29
 8004992:	d506      	bpl.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004994:	495b      	ldr	r1, [pc, #364]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004996:	6920      	ldr	r0, [r4, #16]
 8004998:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800499a:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800499e:	4302      	orrs	r2, r0
 80049a0:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049a2:	0698      	lsls	r0, r3, #26
 80049a4:	d506      	bpl.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a6:	4957      	ldr	r1, [pc, #348]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049a8:	69e0      	ldr	r0, [r4, #28]
 80049aa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80049ac:	f022 0210 	bic.w	r2, r2, #16
 80049b0:	4302      	orrs	r2, r0
 80049b2:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049b4:	0399      	lsls	r1, r3, #14
 80049b6:	d506      	bpl.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80049b8:	4952      	ldr	r1, [pc, #328]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80049bc:	684a      	ldr	r2, [r1, #4]
 80049be:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80049c2:	4302      	orrs	r2, r0
 80049c4:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c6:	065a      	lsls	r2, r3, #25
 80049c8:	d506      	bpl.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ca:	494e      	ldr	r1, [pc, #312]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049cc:	6a20      	ldr	r0, [r4, #32]
 80049ce:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80049d0:	f022 0220 	bic.w	r2, r2, #32
 80049d4:	4302      	orrs	r2, r0
 80049d6:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d8:	071f      	lsls	r7, r3, #28
 80049da:	d506      	bpl.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049dc:	4949      	ldr	r1, [pc, #292]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049de:	6960      	ldr	r0, [r4, #20]
 80049e0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80049e2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80049e6:	4302      	orrs	r2, r0
 80049e8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ea:	06de      	lsls	r6, r3, #27
 80049ec:	d506      	bpl.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ee:	4945      	ldr	r1, [pc, #276]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80049f0:	69a0      	ldr	r0, [r4, #24]
 80049f2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80049f4:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80049f8:	4302      	orrs	r2, r0
 80049fa:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049fc:	059d      	lsls	r5, r3, #22
 80049fe:	d506      	bpl.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a00:	4940      	ldr	r1, [pc, #256]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004a02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004a04:	684a      	ldr	r2, [r1, #4]
 8004a06:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8004a0a:	4302      	orrs	r2, r0
 8004a0c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a0e:	0618      	lsls	r0, r3, #24
 8004a10:	d506      	bpl.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a12:	493c      	ldr	r1, [pc, #240]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004a14:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004a16:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004a18:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004a1c:	4302      	orrs	r2, r0
 8004a1e:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a20:	05d9      	lsls	r1, r3, #23
 8004a22:	d506      	bpl.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a24:	4937      	ldr	r1, [pc, #220]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004a26:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004a28:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004a2a:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8004a2e:	4302      	orrs	r2, r0
 8004a30:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a32:	04da      	lsls	r2, r3, #19
 8004a34:	d506      	bpl.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a36:	4933      	ldr	r1, [pc, #204]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004a38:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004a3a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a40:	4302      	orrs	r2, r0
 8004a42:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a44:	049b      	lsls	r3, r3, #18
 8004a46:	d454      	bmi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e013      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	e776      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a56:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004a58:	f7fe fc78 	bl	800334c <HAL_GetTick>
 8004a5c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	05da      	lsls	r2, r3, #23
 8004a62:	f53f af71 	bmi.w	8004948 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fe fc71 	bl	800334c <HAL_GetTick>
 8004a6a:	eba0 0008 	sub.w	r0, r0, r8
 8004a6e:	2864      	cmp	r0, #100	@ 0x64
 8004a70:	d9f5      	bls.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8004a72:	2003      	movs	r0, #3
}
 8004a74:	b002      	add	sp, #8
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a7a:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f43f af68 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a84:	6a29      	ldr	r1, [r5, #32]
 8004a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a8a:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004a8e:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a92:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a96:	fab2 f282 	clz	r2, r2
 8004a9a:	4462      	add	r2, ip
 8004a9c:	0092      	lsls	r2, r2, #2
 8004a9e:	2701      	movs	r7, #1
 8004aa0:	6017      	str	r7, [r2, #0]
 8004aa2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	4463      	add	r3, ip
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ab2:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8004ab4:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ab6:	f57f af4d 	bpl.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8004aba:	f7fe fc47 	bl	800334c <HAL_GetTick>
 8004abe:	f04f 0802 	mov.w	r8, #2
 8004ac2:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004ac8:	fa98 f3a8 	rbit	r3, r8
 8004acc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	6a2a      	ldr	r2, [r5, #32]
 8004ad2:	fa98 f3a8 	rbit	r3, r8
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	fa07 f303 	lsl.w	r3, r7, r3
 8004ade:	4213      	tst	r3, r2
 8004ae0:	f47f af38 	bne.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fc32 	bl	800334c <HAL_GetTick>
 8004ae8:	eba0 0009 	sub.w	r0, r0, r9
 8004aec:	4550      	cmp	r0, sl
 8004aee:	d9eb      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004af0:	e7bf      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004af2:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004af6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b00:	e7a2      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	10908100 	.word	0x10908100

08004b10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b10:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b12:	6803      	ldr	r3, [r0, #0]
 8004b14:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <HAL_RTC_WaitForSynchro+0x2c>)
 8004b16:	60da      	str	r2, [r3, #12]
{
 8004b18:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b1a:	f7fe fc17 	bl	800334c <HAL_GetTick>
 8004b1e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	069b      	lsls	r3, r3, #26
 8004b26:	d501      	bpl.n	8004b2c <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004b28:	2000      	movs	r0, #0
}
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b2c:	f7fe fc0e 	bl	800334c <HAL_GetTick>
 8004b30:	1b40      	subs	r0, r0, r5
 8004b32:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004b36:	d9f3      	bls.n	8004b20 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8004b38:	2003      	movs	r0, #3
 8004b3a:	e7f6      	b.n	8004b2a <HAL_RTC_WaitForSynchro+0x1a>
 8004b3c:	0001ff5f 	.word	0x0001ff5f

08004b40 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b40:	6803      	ldr	r3, [r0, #0]
{
 8004b42:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b44:	68dc      	ldr	r4, [r3, #12]
 8004b46:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8004b4a:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b4c:	d117      	bne.n	8004b7e <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b56:	f7fe fbf9 	bl	800334c <HAL_GetTick>
 8004b5a:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	065b      	lsls	r3, r3, #25
 8004b62:	d400      	bmi.n	8004b66 <RTC_EnterInitMode+0x26>
 8004b64:	b10c      	cbz	r4, 8004b6a <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8004b66:	4620      	mov	r0, r4
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b6a:	f7fe fbef 	bl	800334c <HAL_GetTick>
 8004b6e:	1b80      	subs	r0, r0, r6
 8004b70:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b74:	bf82      	ittt	hi
 8004b76:	2304      	movhi	r3, #4
 8004b78:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8004b7a:	2401      	movhi	r4, #1
 8004b7c:	e7ee      	b.n	8004b5c <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2400      	movs	r4, #0
 8004b80:	e7f1      	b.n	8004b66 <RTC_EnterInitMode+0x26>

08004b82 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b82:	6803      	ldr	r3, [r0, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8004b8a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	069b      	lsls	r3, r3, #26
{
 8004b92:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b94:	d501      	bpl.n	8004b9a <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004b98:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b9a:	f7ff ffb9 	bl	8004b10 <HAL_RTC_WaitForSynchro>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d0f9      	beq.n	8004b96 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8004ba6:	2001      	movs	r0, #1
 8004ba8:	e7f6      	b.n	8004b98 <RTC_ExitInitMode+0x16>

08004baa <HAL_RTC_Init>:
{
 8004baa:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004bac:	4604      	mov	r4, r0
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d041      	beq.n	8004c36 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004bb2:	7f43      	ldrb	r3, [r0, #29]
 8004bb4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004bb8:	b913      	cbnz	r3, 8004bc0 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8004bba:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004bbc:	f7fe f966 	bl	8002e8c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	06d2      	lsls	r2, r2, #27
 8004bca:	d503      	bpl.n	8004bd4 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	7763      	strb	r3, [r4, #29]
 8004bd0:	2000      	movs	r0, #0
}
 8004bd2:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd4:	22ca      	movs	r2, #202	@ 0xca
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004bd8:	2253      	movs	r2, #83	@ 0x53
 8004bda:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff ffaf 	bl	8004b40 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8004be2:	bb10      	cbnz	r0, 8004c2a <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004be4:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004be6:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8004bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf2:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bf4:	6862      	ldr	r2, [r4, #4]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	4302      	orrs	r2, r0
 8004bfa:	6960      	ldr	r0, [r4, #20]
 8004bfc:	4302      	orrs	r2, r0
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c02:	68e2      	ldr	r2, [r4, #12]
 8004c04:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	68a1      	ldr	r1, [r4, #8]
 8004c0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c0e:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff ffb6 	bl	8004b82 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8004c16:	b940      	cbnz	r0, 8004c2a <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c18:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c1a:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c1e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c26:	430a      	orrs	r2, r1
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	22ff      	movs	r2, #255	@ 0xff
 8004c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d0cb      	beq.n	8004bcc <HAL_RTC_Init+0x22>
 8004c34:	e7cd      	b.n	8004bd2 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8004c36:	2001      	movs	r0, #1
 8004c38:	e7cb      	b.n	8004bd2 <HAL_RTC_Init+0x28>

08004c3a <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8004c3a:	2300      	movs	r3, #0

  while (number >= 10U)
 8004c3c:	2809      	cmp	r0, #9
 8004c3e:	d803      	bhi.n	8004c48 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c40:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004c44:	b2c0      	uxtb	r0, r0
 8004c46:	4770      	bx	lr
    number -= 10U;
 8004c48:	380a      	subs	r0, #10
    bcdhigh++;
 8004c4a:	3301      	adds	r3, #1
    number -= 10U;
 8004c4c:	b2c0      	uxtb	r0, r0
 8004c4e:	e7f5      	b.n	8004c3c <RTC_ByteToBcd2+0x2>

08004c50 <HAL_RTC_SetTime>:
{
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8004c54:	7f03      	ldrb	r3, [r0, #28]
 8004c56:	2b01      	cmp	r3, #1
{
 8004c58:	4606      	mov	r6, r0
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004c60:	d041      	beq.n	8004ce6 <HAL_RTC_SetTime+0x96>
 8004c62:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c64:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8004c66:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c68:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8004c6a:	7838      	ldrb	r0, [r7, #0]
 8004c6c:	787d      	ldrb	r5, [r7, #1]
 8004c6e:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c70:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d139      	bne.n	8004cea <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c76:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8004c7a:	bf08      	it	eq
 8004c7c:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c7e:	f7ff ffdc 	bl	8004c3a <RTC_ByteToBcd2>
 8004c82:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c84:	4628      	mov	r0, r5
 8004c86:	f7ff ffd8 	bl	8004c3a <RTC_ByteToBcd2>
 8004c8a:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff ffd4 	bl	8004c3a <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004c92:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c94:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8004c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004c9c:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca0:	23ca      	movs	r3, #202	@ 0xca
 8004ca2:	624b      	str	r3, [r1, #36]	@ 0x24
 8004ca4:	2353      	movs	r3, #83	@ 0x53
 8004ca6:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004ca8:	4630      	mov	r0, r6
 8004caa:	f7ff ff49 	bl	8004b40 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004cae:	b9a8      	cbnz	r0, 8004cdc <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cb0:	6832      	ldr	r2, [r6, #0]
 8004cb2:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8004cb6:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8004cba:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004cbc:	6893      	ldr	r3, [r2, #8]
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cc4:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8004cc8:	6891      	ldr	r1, [r2, #8]
 8004cca:	4303      	orrs	r3, r0
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff ff56 	bl	8004b82 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004cd6:	b908      	cbnz	r0, 8004cdc <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	7733      	strb	r3, [r6, #28]
}
 8004ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cea:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8004cee:	bf08      	it	eq
 8004cf0:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cf2:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cf6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cfa:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cfe:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8004d02:	e7cd      	b.n	8004ca0 <HAL_RTC_SetTime+0x50>

08004d04 <HAL_RTC_SetDate>:
{
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004d06:	7f03      	ldrb	r3, [r0, #28]
 8004d08:	2b01      	cmp	r3, #1
{
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004d10:	d027      	beq.n	8004d62 <HAL_RTC_SetDate+0x5e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d16:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d18:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d1a:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004d1c:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8004d1e:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004d20:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d22:	b1fa      	cbz	r2, 8004d64 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d24:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8004d28:	433b      	orrs	r3, r7
 8004d2a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d2e:	682b      	ldr	r3, [r5, #0]
 8004d30:	22ca      	movs	r2, #202	@ 0xca
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d34:	2253      	movs	r2, #83	@ 0x53
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff ff01 	bl	8004b40 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004d3e:	b958      	cbnz	r0, 8004d58 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d40:	682a      	ldr	r2, [r5, #0]
 8004d42:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8004d46:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8004d4a:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f7ff ff18 	bl	8004b82 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004d52:	b908      	cbnz	r0, 8004d58 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8004d54:	2301      	movs	r3, #1
 8004d56:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	22ff      	movs	r2, #255	@ 0xff
 8004d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	772b      	strb	r3, [r5, #28]
}
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d64:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d66:	bf42      	ittt	mi
 8004d68:	f024 0410 	bicmi.w	r4, r4, #16
 8004d6c:	340a      	addmi	r4, #10
 8004d6e:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d70:	f7ff ff63 	bl	8004c3a <RTC_ByteToBcd2>
 8004d74:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004d76:	7848      	ldrb	r0, [r1, #1]
 8004d78:	f7ff ff5f 	bl	8004c3a <RTC_ByteToBcd2>
 8004d7c:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7ff ff5b 	bl	8004c3a <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004d84:	ea40 0306 	orr.w	r3, r0, r6
 8004d88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d8c:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8004d90:	e7cd      	b.n	8004d2e <HAL_RTC_SetDate+0x2a>

08004d92 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004d92:	0903      	lsrs	r3, r0, #4
 8004d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004d98:	f000 000f 	and.w	r0, r0, #15
 8004d9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004da0:	b2c0      	uxtb	r0, r0
 8004da2:	4770      	bx	lr

08004da4 <HAL_RTC_GetTime>:
{
 8004da4:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004daa:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dac:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004dae:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004db0:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004db4:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004db8:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004dbc:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004dbe:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004dc2:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004dc6:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004dc8:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004dca:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004dcc:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004dce:	b952      	cbnz	r2, 8004de6 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dd0:	f7ff ffdf 	bl	8004d92 <RTC_Bcd2ToByte>
 8004dd4:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7ff ffdb 	bl	8004d92 <RTC_Bcd2ToByte>
 8004ddc:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff ffd7 	bl	8004d92 <RTC_Bcd2ToByte>
 8004de4:	7088      	strb	r0, [r1, #2]
}
 8004de6:	2000      	movs	r0, #0
 8004de8:	bd38      	pop	{r3, r4, r5, pc}

08004dea <HAL_RTC_GetDate>:
{
 8004dea:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004dec:	6803      	ldr	r3, [r0, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004df0:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004df4:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004df8:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004dfc:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e00:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004e02:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e04:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004e06:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004e08:	b952      	cbnz	r2, 8004e20 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e0a:	f7ff ffc2 	bl	8004d92 <RTC_Bcd2ToByte>
 8004e0e:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7ff ffbe 	bl	8004d92 <RTC_Bcd2ToByte>
 8004e16:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f7ff ffba 	bl	8004d92 <RTC_Bcd2ToByte>
 8004e1e:	7088      	strb	r0, [r1, #2]
}
 8004e20:	2000      	movs	r0, #0
 8004e22:	bd38      	pop	{r3, r4, r5, pc}

08004e24 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004e28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004e2c:	4770      	bx	lr
	...

08004e30 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e32:	460e      	mov	r6, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e38:	f7fe fa88 	bl	800334c <HAL_GetTick>
 8004e3c:	4434      	add	r4, r6
 8004e3e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004e40:	f7fe fa84 	bl	800334c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e44:	4b22      	ldr	r3, [pc, #136]	@ (8004ed0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004e4c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004e4e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e50:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e52:	682a      	ldr	r2, [r5, #0]
 8004e54:	6890      	ldr	r0, [r2, #8]
 8004e56:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8004e5a:	d02d      	beq.n	8004eb8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	1c73      	adds	r3, r6, #1
 8004e5e:	d0f9      	beq.n	8004e54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e60:	f7fe fa74 	bl	800334c <HAL_GetTick>
 8004e64:	1bc0      	subs	r0, r0, r7
 8004e66:	42a0      	cmp	r0, r4
 8004e68:	d328      	bcc.n	8004ebc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e74:	686a      	ldr	r2, [r5, #4]
 8004e76:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004e7a:	d10a      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8004e7c:	68aa      	ldr	r2, [r5, #8]
 8004e7e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004e82:	d002      	beq.n	8004e8a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e84:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004e88:	d103      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e92:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004e94:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004e98:	d107      	bne.n	8004eaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004eb6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004eb8:	b003      	add	sp, #12
 8004eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004ebc:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004ebe:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004ec0:	2a00      	cmp	r2, #0
      count--;
 8004ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	bf08      	it	eq
 8004eca:	4614      	moveq	r4, r2
 8004ecc:	e7c1      	b.n	8004e52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004ece:	bf00      	nop
 8004ed0:	20000008 	.word	0x20000008

08004ed4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004eda:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004edc:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004ede:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ee6:	f7fe fa31 	bl	800334c <HAL_GetTick>
 8004eea:	443c      	add	r4, r7
 8004eec:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004eee:	f7fe fa2d 	bl	800334c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ef2:	4b29      	ldr	r3, [pc, #164]	@ (8004f98 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ef4:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2223      	movs	r2, #35	@ 0x23
 8004efc:	4353      	muls	r3, r2
 8004efe:	0d1b      	lsrs	r3, r3, #20
 8004f00:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004f02:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f04:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f06:	682a      	ldr	r2, [r5, #0]
 8004f08:	6890      	ldr	r0, [r2, #8]
 8004f0a:	4030      	ands	r0, r6
 8004f0c:	d038      	beq.n	8004f80 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f0e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f12:	bf01      	itttt	eq
 8004f14:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8004f18:	b2db      	uxtbeq	r3, r3
 8004f1a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f1e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f22:	1c7b      	adds	r3, r7, #1
 8004f24:	d0f0      	beq.n	8004f08 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f26:	f7fe fa11 	bl	800334c <HAL_GetTick>
 8004f2a:	eba0 0008 	sub.w	r0, r0, r8
 8004f2e:	42a0      	cmp	r0, r4
 8004f30:	d329      	bcc.n	8004f86 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3c:	686a      	ldr	r2, [r5, #4]
 8004f3e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004f42:	d10a      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8004f44:	68aa      	ldr	r2, [r5, #8]
 8004f46:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004f4a:	d002      	beq.n	8004f52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004f50:	d103      	bne.n	8004f5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004f5c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004f60:	d107      	bne.n	8004f72 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f7e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004f80:	b003      	add	sp, #12
 8004f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8004f86:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004f88:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004f8a:	2a00      	cmp	r2, #0
      count--;
 8004f8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	bf08      	it	eq
 8004f94:	4614      	moveq	r4, r2
 8004f96:	e7b6      	b.n	8004f06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8004f98:	20000008 	.word	0x20000008

08004f9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9e:	6843      	ldr	r3, [r0, #4]
 8004fa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460e      	mov	r6, r1
 8004fa8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004faa:	d10b      	bne.n	8004fc4 <SPI_EndRxTransaction+0x28>
 8004fac:	6883      	ldr	r3, [r0, #8]
 8004fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb2:	d002      	beq.n	8004fba <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb8:	d104      	bne.n	8004fc4 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fba:	6822      	ldr	r2, [r4, #0]
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc2:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	463a      	mov	r2, r7
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff ff31 	bl	8004e30 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004fce:	4605      	mov	r5, r0
 8004fd0:	b128      	cbz	r0, 8004fde <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004fd4:	f043 0320 	orr.w	r3, r3, #32
 8004fd8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004fda:	2503      	movs	r5, #3
 8004fdc:	e013      	b.n	8005006 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe4:	d10f      	bne.n	8005006 <SPI_EndRxTransaction+0x6a>
 8004fe6:	68a3      	ldr	r3, [r4, #8]
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fec:	d002      	beq.n	8004ff4 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff2:	d108      	bne.n	8005006 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7ff ff69 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005002:	2800      	cmp	r0, #0
 8005004:	d1e5      	bne.n	8004fd2 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8005006:	4628      	mov	r0, r5
 8005008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800500a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800500a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800500c:	4613      	mov	r3, r2
{
 800500e:	460d      	mov	r5, r1
 8005010:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005012:	460a      	mov	r2, r1
 8005014:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8005018:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800501a:	f7ff ff5b 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800501e:	b128      	cbz	r0, 800502c <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005020:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005022:	f043 0320 	orr.w	r3, r3, #32
 8005026:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005028:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800502a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	4632      	mov	r2, r6
 800502e:	4629      	mov	r1, r5
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff fefd 	bl	8004e30 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005036:	2800      	cmp	r0, #0
 8005038:	d1f2      	bne.n	8005020 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800503a:	4633      	mov	r3, r6
 800503c:	462a      	mov	r2, r5
 800503e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005042:	4620      	mov	r0, r4
 8005044:	f7ff ff46 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005048:	2800      	cmp	r0, #0
 800504a:	d0ee      	beq.n	800502a <SPI_EndRxTxTransaction+0x20>
 800504c:	e7e8      	b.n	8005020 <SPI_EndRxTxTransaction+0x16>

0800504e <HAL_SPI_Init>:
{
 800504e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8005050:	4604      	mov	r4, r0
 8005052:	2800      	cmp	r0, #0
 8005054:	d067      	beq.n	8005126 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005056:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d15d      	bne.n	8005118 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505c:	6842      	ldr	r2, [r0, #4]
 800505e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005062:	d000      	beq.n	8005066 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005064:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800506a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800506e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005072:	b923      	cbnz	r3, 800507e <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8005074:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005078:	4620      	mov	r0, r4
 800507a:	f7fd ff1b 	bl	8002eb4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800507e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005080:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005082:	2302      	movs	r3, #2
 8005084:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005088:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508a:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800508e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005092:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	d942      	bls.n	8005120 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800509a:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800509c:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a0:	bf18      	it	ne
 80050a2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a4:	68a6      	ldr	r6, [r4, #8]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	69a1      	ldr	r1, [r4, #24]
 80050aa:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80050ae:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80050b2:	4333      	orrs	r3, r6
 80050b4:	6926      	ldr	r6, [r4, #16]
 80050b6:	f006 0602 	and.w	r6, r6, #2
 80050ba:	4333      	orrs	r3, r6
 80050bc:	6966      	ldr	r6, [r4, #20]
 80050be:	f006 0601 	and.w	r6, r6, #1
 80050c2:	4333      	orrs	r3, r6
 80050c4:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80050c8:	4333      	orrs	r3, r6
 80050ca:	69e6      	ldr	r6, [r4, #28]
 80050cc:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80050d0:	4333      	orrs	r3, r6
 80050d2:	6a26      	ldr	r6, [r4, #32]
 80050d4:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 80050d8:	4333      	orrs	r3, r6
 80050da:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050dc:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 80050e0:	4333      	orrs	r3, r6
 80050e2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050e4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80050e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050e8:	f006 0608 	and.w	r6, r6, #8
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 80050f4:	4333      	orrs	r3, r6
 80050f6:	0c09      	lsrs	r1, r1, #16
 80050f8:	4303      	orrs	r3, r0
 80050fa:	f001 0104 	and.w	r1, r1, #4
 80050fe:	430b      	orrs	r3, r1
 8005100:	432b      	orrs	r3, r5
 8005102:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005104:	69d3      	ldr	r3, [r2, #28]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800510a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800510e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005110:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005112:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005116:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800511e:	e7a2      	b.n	8005066 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005120:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005124:	e7bc      	b.n	80050a0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8005126:	2001      	movs	r0, #1
 8005128:	e7f5      	b.n	8005116 <HAL_SPI_Init+0xc8>

0800512a <HAL_SPI_Transmit>:
{
 800512a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800512e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8005130:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8005134:	2b01      	cmp	r3, #1
{
 8005136:	4604      	mov	r4, r0
 8005138:	460d      	mov	r5, r1
 800513a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800513c:	f000 80bc 	beq.w	80052b8 <HAL_SPI_Transmit+0x18e>
 8005140:	2301      	movs	r3, #1
 8005142:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8005146:	f7fe f901 	bl	800334c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800514a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800514e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005150:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005152:	fa5f f983 	uxtb.w	r9, r3
 8005156:	f040 80ac 	bne.w	80052b2 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800515a:	2d00      	cmp	r5, #0
 800515c:	d069      	beq.n	8005232 <HAL_SPI_Transmit+0x108>
 800515e:	f1b8 0f00 	cmp.w	r8, #0
 8005162:	d066      	beq.n	8005232 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005164:	2303      	movs	r3, #3
 8005166:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	2300      	movs	r3, #0
 800516c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800516e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8005172:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005176:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005178:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800517c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005180:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005182:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005184:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800518a:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518e:	d107      	bne.n	80051a0 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8005190:	6833      	ldr	r3, [r6, #0]
 8005192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005196:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005198:	6833      	ldr	r3, [r6, #0]
 800519a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800519e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a0:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051a2:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80051a6:	bf5e      	ittt	pl
 80051a8:	6833      	ldrpl	r3, [r6, #0]
 80051aa:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80051ae:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051b0:	68e3      	ldr	r3, [r4, #12]
 80051b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051b6:	d943      	bls.n	8005240 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b8:	b112      	cbz	r2, 80051c0 <HAL_SPI_Transmit+0x96>
 80051ba:	f1b8 0f01 	cmp.w	r8, #1
 80051be:	d107      	bne.n	80051d0 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80051c4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c6:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80051c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80051d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	b9b3      	cbnz	r3, 8005204 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d6:	4652      	mov	r2, sl
 80051d8:	4639      	mov	r1, r7
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff ff15 	bl	800500a <SPI_EndRxTxTransaction>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d163      	bne.n	80052ac <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051e4:	68a3      	ldr	r3, [r4, #8]
 80051e6:	b933      	cbnz	r3, 80051f6 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	9201      	str	r2, [sp, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80051f8:	b9db      	cbnz	r3, 8005232 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 80051fa:	2201      	movs	r2, #1
 80051fc:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005200:	4699      	mov	r9, r3
 8005202:	e016      	b.n	8005232 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	079d      	lsls	r5, r3, #30
 800520a:	d505      	bpl.n	8005218 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800520e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005212:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005214:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005216:	e7d7      	b.n	80051c8 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005218:	f7fe f898 	bl	800334c <HAL_GetTick>
 800521c:	eba0 000a 	sub.w	r0, r0, sl
 8005220:	42b8      	cmp	r0, r7
 8005222:	d3d5      	bcc.n	80051d0 <HAL_SPI_Transmit+0xa6>
 8005224:	1c78      	adds	r0, r7, #1
 8005226:	d0d3      	beq.n	80051d0 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8005228:	2301      	movs	r3, #1
 800522a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800522e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8005232:	2300      	movs	r3, #0
 8005234:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8005238:	4648      	mov	r0, r9
 800523a:	b002      	add	sp, #8
 800523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005240:	b112      	cbz	r2, 8005248 <HAL_SPI_Transmit+0x11e>
 8005242:	f1b8 0f01 	cmp.w	r8, #1
 8005246:	d113      	bne.n	8005270 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8005248:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d906      	bls.n	800525e <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005250:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005254:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005256:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005258:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800525a:	3b02      	subs	r3, #2
 800525c:	e006      	b.n	800526c <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800525e:	782b      	ldrb	r3, [r5, #0]
 8005260:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8005262:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005264:	3301      	adds	r3, #1
 8005266:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005268:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800526a:	3b01      	subs	r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8005270:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ae      	beq.n	80051d6 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	6893      	ldr	r3, [r2, #8]
 800527c:	0799      	lsls	r1, r3, #30
 800527e:	d50c      	bpl.n	800529a <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8005280:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005282:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005284:	b289      	uxth	r1, r1
 8005286:	2901      	cmp	r1, #1
 8005288:	d904      	bls.n	8005294 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800528e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005290:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005292:	e7e1      	b.n	8005258 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005298:	e7e3      	b.n	8005262 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529a:	f7fe f857 	bl	800334c <HAL_GetTick>
 800529e:	eba0 000a 	sub.w	r0, r0, sl
 80052a2:	42b8      	cmp	r0, r7
 80052a4:	d3e4      	bcc.n	8005270 <HAL_SPI_Transmit+0x146>
 80052a6:	1c7b      	adds	r3, r7, #1
 80052a8:	d0e2      	beq.n	8005270 <HAL_SPI_Transmit+0x146>
 80052aa:	e7bd      	b.n	8005228 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ac:	2320      	movs	r3, #32
 80052ae:	6623      	str	r3, [r4, #96]	@ 0x60
 80052b0:	e798      	b.n	80051e4 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80052b2:	f04f 0902 	mov.w	r9, #2
 80052b6:	e7bc      	b.n	8005232 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80052b8:	f04f 0902 	mov.w	r9, #2
 80052bc:	e7bc      	b.n	8005238 <HAL_SPI_Transmit+0x10e>

080052be <HAL_SPI_TransmitReceive>:
{
 80052be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80052c4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 80052c8:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80052ca:	2b01      	cmp	r3, #1
{
 80052cc:	4604      	mov	r4, r0
 80052ce:	460d      	mov	r5, r1
 80052d0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80052d2:	f000 8122 	beq.w	800551a <HAL_SPI_TransmitReceive+0x25c>
 80052d6:	2301      	movs	r3, #1
 80052d8:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80052dc:	f7fe f836 	bl	800334c <HAL_GetTick>
  tmp_state           = hspi->State;
 80052e0:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80052e4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052e6:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 80052e8:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80052ea:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052ec:	d00a      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x46>
 80052ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052f2:	f040 8110 	bne.w	8005516 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052f6:	68a2      	ldr	r2, [r4, #8]
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	f040 810c 	bne.w	8005516 <HAL_SPI_TransmitReceive+0x258>
 80052fe:	2904      	cmp	r1, #4
 8005300:	f040 8109 	bne.w	8005516 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005304:	b92d      	cbnz	r5, 8005312 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8005306:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005308:	2300      	movs	r3, #0
 800530a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800530e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	d0f6      	beq.n	8005306 <HAL_SPI_TransmitReceive+0x48>
 8005318:	2e00      	cmp	r6, #0
 800531a:	d0f4      	beq.n	8005306 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800531c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005320:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005322:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005324:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005328:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800532a:	bf1c      	itt	ne
 800532c:	2205      	movne	r2, #5
 800532e:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005332:	2200      	movs	r2, #0
 8005334:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005336:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800533a:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800533e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005340:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8005344:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005348:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800534a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800534c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800534e:	d801      	bhi.n	8005354 <HAL_SPI_TransmitReceive+0x96>
 8005350:	2e01      	cmp	r6, #1
 8005352:	d02e      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005354:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005358:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535a:	680a      	ldr	r2, [r1, #0]
 800535c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800535e:	bf5e      	ittt	pl
 8005360:	680a      	ldrpl	r2, [r1, #0]
 8005362:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8005366:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005368:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 800536c:	d957      	bls.n	800541e <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536e:	b10b      	cbz	r3, 8005374 <HAL_SPI_TransmitReceive+0xb6>
 8005370:	2e01      	cmp	r6, #1
 8005372:	d107      	bne.n	8005384 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005374:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005378:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800537a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800537e:	3b01      	subs	r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005384:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005386:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	b9ab      	cbnz	r3, 80053b8 <HAL_SPI_TransmitReceive+0xfa>
 800538c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005390:	b29b      	uxth	r3, r3
 8005392:	b98b      	cbnz	r3, 80053b8 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005394:	4642      	mov	r2, r8
 8005396:	4639      	mov	r1, r7
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff fe36 	bl	800500a <SPI_EndRxTxTransaction>
 800539e:	2800      	cmp	r0, #0
 80053a0:	f040 80b5 	bne.w	800550e <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ad      	bne.n	8005306 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80053b0:	e7aa      	b.n	8005308 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053b6:	e7cf      	b.n	8005358 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053b8:	6821      	ldr	r1, [r4, #0]
 80053ba:	688b      	ldr	r3, [r1, #8]
 80053bc:	079e      	lsls	r6, r3, #30
 80053be:	d50d      	bpl.n	80053dc <HAL_SPI_TransmitReceive+0x11e>
 80053c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	b153      	cbz	r3, 80053dc <HAL_SPI_TransmitReceive+0x11e>
 80053c6:	b145      	cbz	r5, 80053da <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80053ca:	f833 2b02 	ldrh.w	r2, [r3], #2
 80053ce:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80053d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80053da:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053dc:	688a      	ldr	r2, [r1, #8]
 80053de:	f012 0201 	ands.w	r2, r2, #1
 80053e2:	d00f      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x146>
 80053e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	b15b      	cbz	r3, 8005404 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ee:	68c9      	ldr	r1, [r1, #12]
 80053f0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053f4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80053f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005402:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005404:	f7fd ffa2 	bl	800334c <HAL_GetTick>
 8005408:	eba0 0008 	sub.w	r0, r0, r8
 800540c:	42b8      	cmp	r0, r7
 800540e:	d3ba      	bcc.n	8005386 <HAL_SPI_TransmitReceive+0xc8>
 8005410:	1c78      	adds	r0, r7, #1
 8005412:	d0b8      	beq.n	8005386 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8005414:	2301      	movs	r3, #1
 8005416:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800541a:	2003      	movs	r0, #3
 800541c:	e774      	b.n	8005308 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800541e:	b10b      	cbz	r3, 8005424 <HAL_SPI_TransmitReceive+0x166>
 8005420:	2e01      	cmp	r6, #1
 8005422:	d10b      	bne.n	800543c <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8005424:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d909      	bls.n	8005440 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800542c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005430:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8005432:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005434:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005436:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005438:	b29b      	uxth	r3, r3
 800543a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800543c:	2501      	movs	r5, #1
 800543e:	e048      	b.n	80054d2 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005440:	782b      	ldrb	r3, [r5, #0]
 8005442:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8005444:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005446:	3301      	adds	r3, #1
 8005448:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800544a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800544c:	3b01      	subs	r3, #1
 800544e:	e7f3      	b.n	8005438 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	6893      	ldr	r3, [r2, #8]
 8005454:	0799      	lsls	r1, r3, #30
 8005456:	d511      	bpl.n	800547c <HAL_SPI_TransmitReceive+0x1be>
 8005458:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	b173      	cbz	r3, 800547c <HAL_SPI_TransmitReceive+0x1be>
 800545e:	b165      	cbz	r5, 800547a <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8005460:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005462:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005464:	b289      	uxth	r1, r1
 8005466:	2901      	cmp	r1, #1
 8005468:	d93d      	bls.n	80054e6 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800546a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800546e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005470:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005472:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005474:	3b02      	subs	r3, #2
 8005476:	b29b      	uxth	r3, r3
 8005478:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800547a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	6891      	ldr	r1, [r2, #8]
 8005480:	f011 0101 	ands.w	r1, r1, #1
 8005484:	d01d      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x204>
 8005486:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800548a:	b29b      	uxth	r3, r3
 800548c:	b1cb      	cbz	r3, 80054c2 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 800548e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005492:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005494:	b280      	uxth	r0, r0
 8005496:	2801      	cmp	r0, #1
 8005498:	d92d      	bls.n	80054f6 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549a:	68d0      	ldr	r0, [r2, #12]
 800549c:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a0:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80054a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80054a6:	3b02      	subs	r3, #2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80054ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054b6:	bf9e      	ittt	ls
 80054b8:	6853      	ldrls	r3, [r2, #4]
 80054ba:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80054be:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80054c0:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c2:	f7fd ff43 	bl	800334c <HAL_GetTick>
 80054c6:	eba0 0008 	sub.w	r0, r0, r8
 80054ca:	42b8      	cmp	r0, r7
 80054cc:	d301      	bcc.n	80054d2 <HAL_SPI_TransmitReceive+0x214>
 80054ce:	1c7b      	adds	r3, r7, #1
 80054d0:	d1a0      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ba      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x192>
 80054da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1b5      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x192>
 80054e4:	e756      	b.n	8005394 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80054ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80054ec:	3301      	adds	r3, #1
 80054ee:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80054f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80054f2:	3b01      	subs	r3, #1
 80054f4:	e7bf      	b.n	8005476 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054f6:	7b12      	ldrb	r2, [r2, #12]
 80054f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054fc:	3301      	adds	r3, #1
 80054fe:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005500:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005504:	3b01      	subs	r3, #1
 8005506:	b29b      	uxth	r3, r3
 8005508:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800550c:	e7d8      	b.n	80054c0 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800550e:	2320      	movs	r3, #32
 8005510:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005512:	2001      	movs	r0, #1
 8005514:	e746      	b.n	80053a4 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8005516:	2002      	movs	r0, #2
 8005518:	e6f6      	b.n	8005308 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 800551a:	2002      	movs	r0, #2
 800551c:	e6f7      	b.n	800530e <HAL_SPI_TransmitReceive+0x50>

0800551e <HAL_SPI_Receive>:
{
 800551e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005522:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8005524:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8005528:	2b01      	cmp	r3, #1
{
 800552a:	4604      	mov	r4, r0
 800552c:	468a      	mov	sl, r1
 800552e:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8005530:	b2de      	uxtb	r6, r3
 8005532:	f040 80a7 	bne.w	8005684 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005536:	6843      	ldr	r3, [r0, #4]
 8005538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800553c:	d10e      	bne.n	800555c <HAL_SPI_Receive+0x3e>
 800553e:	6883      	ldr	r3, [r0, #8]
 8005540:	b963      	cbnz	r3, 800555c <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005542:	2304      	movs	r3, #4
 8005544:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005548:	4613      	mov	r3, r2
 800554a:	9700      	str	r7, [sp, #0]
 800554c:	460a      	mov	r2, r1
 800554e:	f7ff feb6 	bl	80052be <HAL_SPI_TransmitReceive>
 8005552:	4606      	mov	r6, r0
}
 8005554:	4630      	mov	r0, r6
 8005556:	b002      	add	sp, #8
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 800555c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005560:	2b01      	cmp	r3, #1
 8005562:	f000 8091 	beq.w	8005688 <HAL_SPI_Receive+0x16a>
 8005566:	2301      	movs	r3, #1
 8005568:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800556c:	f7fd feee 	bl	800334c <HAL_GetTick>
 8005570:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8005572:	f1ba 0f00 	cmp.w	sl, #0
 8005576:	d075      	beq.n	8005664 <HAL_SPI_Receive+0x146>
 8005578:	f1b8 0f00 	cmp.w	r8, #0
 800557c:	d072      	beq.n	8005664 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800557e:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005580:	2304      	movs	r3, #4
 8005582:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8005586:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558a:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800558c:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800558e:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8005592:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005594:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005596:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005598:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800559a:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800559c:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a0:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a4:	bf8c      	ite	hi
 80055a6:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055aa:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80055ae:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b2:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ba:	d107      	bne.n	80055cc <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c2:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ca:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80055d0:	bf5e      	ittt	pl
 80055d2:	682b      	ldrpl	r3, [r5, #0]
 80055d4:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80055d8:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055da:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80055de:	d923      	bls.n	8005628 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 80055e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	b323      	cbz	r3, 8005632 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	07d2      	lsls	r2, r2, #31
 80055ee:	d53d      	bpl.n	800566c <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055f4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055f8:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80055fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005606:	e7eb      	b.n	80055e0 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	07d0      	lsls	r0, r2, #31
 800560e:	d51d      	bpl.n	800564c <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005610:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005612:	7b1b      	ldrb	r3, [r3, #12]
 8005614:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005616:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005618:	3301      	adds	r3, #1
 800561a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800561c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005620:	3b01      	subs	r3, #1
 8005622:	b29b      	uxth	r3, r3
 8005624:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8005628:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ea      	bne.n	8005608 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005632:	464a      	mov	r2, r9
 8005634:	4639      	mov	r1, r7
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fcb0 	bl	8004f9c <SPI_EndRxTransaction>
 800563c:	b9f8      	cbnz	r0, 800567e <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800563e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005640:	b983      	cbnz	r3, 8005664 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8005642:	2201      	movs	r2, #1
 8005644:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005648:	461e      	mov	r6, r3
 800564a:	e00b      	b.n	8005664 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564c:	f7fd fe7e 	bl	800334c <HAL_GetTick>
 8005650:	eba0 0009 	sub.w	r0, r0, r9
 8005654:	42b8      	cmp	r0, r7
 8005656:	d3e7      	bcc.n	8005628 <HAL_SPI_Receive+0x10a>
 8005658:	1c79      	adds	r1, r7, #1
 800565a:	d0e5      	beq.n	8005628 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 800565c:	2301      	movs	r3, #1
 800565e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8005662:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8005664:	2300      	movs	r3, #0
 8005666:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 800566a:	e773      	b.n	8005554 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566c:	f7fd fe6e 	bl	800334c <HAL_GetTick>
 8005670:	eba0 0009 	sub.w	r0, r0, r9
 8005674:	42b8      	cmp	r0, r7
 8005676:	d3b3      	bcc.n	80055e0 <HAL_SPI_Receive+0xc2>
 8005678:	1c7b      	adds	r3, r7, #1
 800567a:	d0b1      	beq.n	80055e0 <HAL_SPI_Receive+0xc2>
 800567c:	e7ee      	b.n	800565c <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800567e:	2320      	movs	r3, #32
 8005680:	6623      	str	r3, [r4, #96]	@ 0x60
 8005682:	e7dc      	b.n	800563e <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8005684:	2602      	movs	r6, #2
 8005686:	e7ed      	b.n	8005664 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8005688:	2602      	movs	r6, #2
 800568a:	e763      	b.n	8005554 <HAL_SPI_Receive+0x36>

0800568c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800568c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005690:	2b01      	cmp	r3, #1
 8005692:	d12b      	bne.n	80056ec <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	2302      	movs	r3, #2
 8005696:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800569a:	6803      	ldr	r3, [r0, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <HAL_TIM_Base_Start_IT+0x64>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d012      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x44>
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x44>
 80056b0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x44>
 80056b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x44>
 80056c0:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <HAL_TIM_Base_Start_IT+0x44>
 80056c8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d107      	bne.n	80056e0 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d0:	6899      	ldr	r1, [r3, #8]
 80056d2:	4a08      	ldr	r2, [pc, #32]	@ (80056f4 <HAL_TIM_Base_Start_IT+0x68>)
 80056d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	2a06      	cmp	r2, #6
 80056d8:	d006      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x5c>
 80056da:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80056de:	d003      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80056e8:	2000      	movs	r0, #0
 80056ea:	4770      	bx	lr
    return HAL_ERROR;
 80056ec:	2001      	movs	r0, #1
}
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8005700:	6803      	ldr	r3, [r0, #0]
{
 8005702:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005704:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005706:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005708:	07b2      	lsls	r2, r6, #30
{
 800570a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800570c:	d50d      	bpl.n	800572a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800570e:	07a9      	lsls	r1, r5, #30
 8005710:	d50b      	bpl.n	800572a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005712:	f06f 0202 	mvn.w	r2, #2
 8005716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005718:	2201      	movs	r2, #1
 800571a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	079a      	lsls	r2, r3, #30
 8005720:	d074      	beq.n	800580c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005722:	f7ff ffea 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	2300      	movs	r3, #0
 8005728:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800572a:	0773      	lsls	r3, r6, #29
 800572c:	d510      	bpl.n	8005750 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800572e:	0768      	lsls	r0, r5, #29
 8005730:	d50e      	bpl.n	8005750 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f06f 0204 	mvn.w	r2, #4
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573a:	2202      	movs	r2, #2
 800573c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005744:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005746:	d067      	beq.n	8005818 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005748:	f7ff ffd7 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574c:	2300      	movs	r3, #0
 800574e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005750:	0731      	lsls	r1, r6, #28
 8005752:	d50f      	bpl.n	8005774 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005754:	072a      	lsls	r2, r5, #28
 8005756:	d50d      	bpl.n	8005774 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f06f 0208 	mvn.w	r2, #8
 800575e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005760:	2204      	movs	r2, #4
 8005762:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005768:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800576a:	d05b      	beq.n	8005824 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800576c:	f7ff ffc5 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005770:	2300      	movs	r3, #0
 8005772:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005774:	06f0      	lsls	r0, r6, #27
 8005776:	d510      	bpl.n	800579a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005778:	06e9      	lsls	r1, r5, #27
 800577a:	d50e      	bpl.n	800579a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f06f 0210 	mvn.w	r2, #16
 8005782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005784:	2208      	movs	r2, #8
 8005786:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800578e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	d04e      	beq.n	8005830 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	f7ff ffb2 	bl	80056fa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	2300      	movs	r3, #0
 8005798:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800579a:	07f2      	lsls	r2, r6, #31
 800579c:	d508      	bpl.n	80057b0 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800579e:	07eb      	lsls	r3, r5, #31
 80057a0:	d506      	bpl.n	80057b0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	f06f 0201 	mvn.w	r2, #1
 80057a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7fc ff2c 	bl	8002608 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80057b0:	0630      	lsls	r0, r6, #24
 80057b2:	d508      	bpl.n	80057c6 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057b4:	0629      	lsls	r1, r5, #24
 80057b6:	d506      	bpl.n	80057c6 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057be:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f9b8 	bl	8005b36 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057c6:	05f2      	lsls	r2, r6, #23
 80057c8:	d508      	bpl.n	80057dc <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ca:	062b      	lsls	r3, r5, #24
 80057cc:	d506      	bpl.n	80057dc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 f9ae 	bl	8005b38 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057dc:	0670      	lsls	r0, r6, #25
 80057de:	d508      	bpl.n	80057f2 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057e0:	0669      	lsls	r1, r5, #25
 80057e2:	d506      	bpl.n	80057f2 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff ff86 	bl	80056fe <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057f2:	06b2      	lsls	r2, r6, #26
 80057f4:	d522      	bpl.n	800583c <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057f6:	06ab      	lsls	r3, r5, #26
 80057f8:	d520      	bpl.n	800583c <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005800:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005802:	611a      	str	r2, [r3, #16]
}
 8005804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005808:	f000 b994 	b.w	8005b34 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580c:	f7ff ff74 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff ff73 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
 8005816:	e786      	b.n	8005726 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005818:	f7ff ff6e 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff ff6d 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
 8005822:	e793      	b.n	800574c <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005824:	f7ff ff68 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005828:	4620      	mov	r0, r4
 800582a:	f7ff ff67 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
 800582e:	e79f      	b.n	8005770 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005830:	f7ff ff62 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	4620      	mov	r0, r4
 8005836:	f7ff ff61 	bl	80056fc <HAL_TIM_PWM_PulseFinishedCallback>
 800583a:	e7ac      	b.n	8005796 <HAL_TIM_IRQHandler+0x96>
}
 800583c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005840 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	4a2f      	ldr	r2, [pc, #188]	@ (8005900 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8005842:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	4290      	cmp	r0, r2
 8005846:	d00e      	beq.n	8005866 <TIM_Base_SetConfig+0x26>
 8005848:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800584c:	d00b      	beq.n	8005866 <TIM_Base_SetConfig+0x26>
 800584e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005852:	4290      	cmp	r0, r2
 8005854:	d007      	beq.n	8005866 <TIM_Base_SetConfig+0x26>
 8005856:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800585a:	4290      	cmp	r0, r2
 800585c:	d003      	beq.n	8005866 <TIM_Base_SetConfig+0x26>
 800585e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005862:	4290      	cmp	r0, r2
 8005864:	d115      	bne.n	8005892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005866:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800586c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586e:	4a24      	ldr	r2, [pc, #144]	@ (8005900 <TIM_Base_SetConfig+0xc0>)
 8005870:	4290      	cmp	r0, r2
 8005872:	d019      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 8005874:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005878:	d016      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 800587a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800587e:	4290      	cmp	r0, r2
 8005880:	d012      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 8005882:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005886:	4290      	cmp	r0, r2
 8005888:	d00e      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 800588a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800588e:	4290      	cmp	r0, r2
 8005890:	d00a      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 8005892:	4a1c      	ldr	r2, [pc, #112]	@ (8005904 <TIM_Base_SetConfig+0xc4>)
 8005894:	4290      	cmp	r0, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 8005898:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800589c:	4290      	cmp	r0, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x68>
 80058a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058a4:	4290      	cmp	r0, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80058aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b0:	694a      	ldr	r2, [r1, #20]
 80058b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058b6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80058b8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ba:	688b      	ldr	r3, [r1, #8]
 80058bc:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058be:	680b      	ldr	r3, [r1, #0]
 80058c0:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <TIM_Base_SetConfig+0xc0>)
 80058c4:	4298      	cmp	r0, r3
 80058c6:	d00f      	beq.n	80058e8 <TIM_Base_SetConfig+0xa8>
 80058c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058cc:	4298      	cmp	r0, r3
 80058ce:	d00b      	beq.n	80058e8 <TIM_Base_SetConfig+0xa8>
 80058d0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80058d4:	4298      	cmp	r0, r3
 80058d6:	d007      	beq.n	80058e8 <TIM_Base_SetConfig+0xa8>
 80058d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058dc:	4298      	cmp	r0, r3
 80058de:	d003      	beq.n	80058e8 <TIM_Base_SetConfig+0xa8>
 80058e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e4:	4298      	cmp	r0, r3
 80058e6:	d101      	bne.n	80058ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e8:	690b      	ldr	r3, [r1, #16]
 80058ea:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ec:	2301      	movs	r3, #1
 80058ee:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058f0:	6903      	ldr	r3, [r0, #16]
 80058f2:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058f4:	bf42      	ittt	mi
 80058f6:	6903      	ldrmi	r3, [r0, #16]
 80058f8:	f023 0301 	bicmi.w	r3, r3, #1
 80058fc:	6103      	strmi	r3, [r0, #16]
  }
}
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40014000 	.word	0x40014000

08005908 <HAL_TIM_Base_Init>:
{
 8005908:	b510      	push	{r4, lr}
  if (htim == NULL)
 800590a:	4604      	mov	r4, r0
 800590c:	b350      	cbz	r0, 8005964 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005912:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005916:	b91b      	cbnz	r3, 8005920 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005918:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800591c:	f7fd fb1a 	bl	8002f54 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005922:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005928:	1d21      	adds	r1, r4, #4
 800592a:	f7ff ff89 	bl	8005840 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592e:	2301      	movs	r3, #1
 8005930:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8005934:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800593a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800593e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005942:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005946:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800594a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005952:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005956:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800595a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800595e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005962:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005964:	2001      	movs	r0, #1
 8005966:	e7fc      	b.n	8005962 <HAL_TIM_Base_Init+0x5a>

08005968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005968:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800596c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005972:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005976:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005978:	6082      	str	r2, [r0, #8]
}
 800597a:	bd10      	pop	{r4, pc}

0800597c <HAL_TIM_ConfigClockSource>:
{
 800597c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800597e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005982:	2b01      	cmp	r3, #1
{
 8005984:	4604      	mov	r4, r0
 8005986:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800598a:	f000 808c 	beq.w	8005aa6 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 800598e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005992:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8005994:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005996:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800599a:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	4b43      	ldr	r3, [pc, #268]	@ (8005aac <HAL_TIM_ConfigClockSource+0x130>)
 800599e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80059a0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80059a2:	680b      	ldr	r3, [r1, #0]
 80059a4:	2b60      	cmp	r3, #96	@ 0x60
 80059a6:	d04f      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0xcc>
 80059a8:	d832      	bhi.n	8005a10 <HAL_TIM_ConfigClockSource+0x94>
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d064      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0xfc>
 80059ae:	d816      	bhi.n	80059de <HAL_TIM_ConfigClockSource+0x62>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d00d      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0x54>
 80059b4:	d80a      	bhi.n	80059cc <HAL_TIM_ConfigClockSource+0x50>
 80059b6:	f033 0110 	bics.w	r1, r3, #16
 80059ba:	d009      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	2301      	movs	r3, #1
 80059be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80059c2:	2300      	movs	r3, #0
 80059c4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80059c8:	4610      	mov	r0, r2
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80059cc:	2b30      	cmp	r3, #48	@ 0x30
 80059ce:	d1f5      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80059d0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80059d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80059dc:	e028      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80059de:	2b50      	cmp	r3, #80	@ 0x50
 80059e0:	d1ec      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80059e2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80059e4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80059e6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e8:	6a03      	ldr	r3, [r0, #32]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80059fe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005a00:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a02:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005a04:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a0a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005a0e:	e00f      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	d00d      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xb6>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a1a:	d00c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xba>
 8005a1c:	2b70      	cmp	r3, #112	@ 0x70
 8005a1e:	d1cd      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005a20:	68cb      	ldr	r3, [r1, #12]
 8005a22:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005a26:	f7ff ff9f 	bl	8005968 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a2a:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005a30:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2200      	movs	r2, #0
 8005a34:	e7c2      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005a36:	68cb      	ldr	r3, [r1, #12]
 8005a38:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005a3c:	f7ff ff94 	bl	8005968 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a40:	6883      	ldr	r3, [r0, #8]
 8005a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a46:	e7f3      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8005a48:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4a:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005a4c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005a4e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	f022 0210 	bic.w	r2, r2, #16
 8005a54:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a56:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a64:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005a68:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a6a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005a6c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a72:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005a76:	e7db      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8005a78:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005a7a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005a7c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7e:	6a03      	ldr	r3, [r0, #32]
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a88:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005a94:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005a96:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005a98:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005a9a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa0:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005aa4:	e7c4      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	e78e      	b.n	80059c8 <HAL_TIM_ConfigClockSource+0x4c>
 8005aaa:	bf00      	nop
 8005aac:	fffe0088 	.word	0xfffe0088

08005ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005ab6:	2b01      	cmp	r3, #1
{
 8005ab8:	4604      	mov	r4, r0
 8005aba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005abe:	d032      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac0:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ac2:	4d19      	ldr	r5, [pc, #100]	@ (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ac8:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005aca:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ace:	d002      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8005ad0:	4e16      	ldr	r6, [pc, #88]	@ (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005ad2:	42b3      	cmp	r3, r6
 8005ad4:	d103      	bne.n	8005ade <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ad6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ad8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005adc:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ade:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005ae8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aea:	d011      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af0:	d00e      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005af2:	4a0f      	ldr	r2, [pc, #60]	@ (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005af8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005b00:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005b08:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b10:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b12:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b16:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005b1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005b22:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40013400 	.word	0x40013400
 8005b30:	40000400 	.word	0x40000400

08005b34 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005b34:	4770      	bx	lr

08005b36 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005b38:	4770      	bx	lr

08005b3a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	e852 3f00 	ldrex	r3, [r2]
 8005b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005b48:	6802      	ldr	r2, [r0, #0]
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d1f5      	bne.n	8005b3a <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	f102 0308 	add.w	r3, r2, #8
 8005b52:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	f102 0c08 	add.w	ip, r2, #8
 8005b5e:	e84c 3100 	strex	r1, r3, [ip]
 8005b62:	2900      	cmp	r1, #0
 8005b64:	d1f3      	bne.n	8005b4e <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b66:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	e842 3100 	strex	r1, r3, [r2]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d1f7      	bne.n	8005b6c <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	2300      	movs	r3, #0
 8005b84:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b86:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005b88:	4770      	bx	lr

08005b8a <HAL_UART_Abort>:
{
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	e852 3f00 	ldrex	r3, [r2]
 8005b94:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d1f5      	bne.n	8005b8e <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	f103 0008 	add.w	r0, r3, #8
 8005bb2:	e840 2100 	strex	r1, r2, [r0]
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	d1f3      	bne.n	8005ba2 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bba:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005bbc:	2a01      	cmp	r2, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005bc4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	e843 2100 	strex	r1, r2, [r3]
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d1f7      	bne.n	8005bc0 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	0612      	lsls	r2, r2, #24
 8005bd4:	d51b      	bpl.n	8005c0e <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	f103 0208 	add.w	r2, r3, #8
 8005bda:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	f103 0008 	add.w	r0, r3, #8
 8005be6:	e840 2100 	strex	r1, r2, [r0]
 8005bea:	2900      	cmp	r1, #0
 8005bec:	d1f3      	bne.n	8005bd6 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8005bee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005bf0:	b168      	cbz	r0, 8005c0e <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8005bf2:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005bf4:	f7fe f9d3 	bl	8003f9e <HAL_DMA_Abort>
 8005bf8:	b148      	cbz	r0, 8005c0e <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005bfa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005bfc:	f7fe fa34 	bl	8004068 <HAL_DMA_GetError>
 8005c00:	2820      	cmp	r0, #32
 8005c02:	d104      	bne.n	8005c0e <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c04:	2310      	movs	r3, #16
 8005c06:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8005c0a:	2003      	movs	r0, #3
}
 8005c0c:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	6893      	ldr	r3, [r2, #8]
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	d516      	bpl.n	8005c44 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	f102 0308 	add.w	r3, r2, #8
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	f102 0008 	add.w	r0, r2, #8
 8005c26:	e840 3100 	strex	r1, r3, [r0]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d1f3      	bne.n	8005c16 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8005c2e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005c30:	b140      	cbz	r0, 8005c44 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8005c32:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c34:	f7fe f9b3 	bl	8003f9e <HAL_DMA_Abort>
 8005c38:	b120      	cbz	r0, 8005c44 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005c3a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005c3c:	f7fe fa14 	bl	8004068 <HAL_DMA_GetError>
 8005c40:	2820      	cmp	r0, #32
 8005c42:	d0df      	beq.n	8005c04 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c44:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8005c46:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c48:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8005c4a:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8005c4e:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005c52:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c64:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8005c6a:	e7cf      	b.n	8005c0c <HAL_UART_Abort+0x82>

08005c6c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005c6c:	4770      	bx	lr

08005c6e <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005c6e:	4770      	bx	lr

08005c70 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005c70:	4770      	bx	lr

08005c72 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c72:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c74:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c76:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c78:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8005c7c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c7e:	689c      	ldr	r4, [r3, #8]
 8005c80:	0624      	lsls	r4, r4, #24
 8005c82:	d50e      	bpl.n	8005ca2 <UART_DMAError+0x30>
 8005c84:	2a21      	cmp	r2, #33	@ 0x21
 8005c86:	d10c      	bne.n	8005ca2 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c92:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	e843 2400 	strex	r4, r2, [r3]
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d1f7      	bne.n	8005c8e <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	065b      	lsls	r3, r3, #25
 8005ca6:	d506      	bpl.n	8005cb6 <UART_DMAError+0x44>
 8005ca8:	2922      	cmp	r1, #34	@ 0x22
 8005caa:	d104      	bne.n	8005cb6 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005cb2:	f7ff ff42 	bl	8005b3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cb6:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8005cba:	f043 0310 	orr.w	r3, r3, #16
 8005cbe:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cc2:	f7ff ffd5 	bl	8005c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <HAL_UARTEx_RxEventCallback>:
}
 8005cc8:	4770      	bx	lr

08005cca <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cca:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8005ccc:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d105      	bne.n	8005ce4 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cd8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005cdc:	0849      	lsrs	r1, r1, #1
 8005cde:	f7ff fff3 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
}
 8005ce2:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8005ce4:	f7ff ffc3 	bl	8005c6e <HAL_UART_RxHalfCpltCallback>
}
 8005ce8:	e7fb      	b.n	8005ce2 <UART_DMARxHalfCplt+0x18>

08005cea <UART_DMAReceiveCplt>:
{
 8005cea:	b508      	push	{r3, lr}
 8005cec:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cee:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d032      	beq.n	8005d5c <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	e852 3f00 	ldrex	r3, [r2]
 8005d02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005d0a:	6803      	ldr	r3, [r0, #0]
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d1f5      	bne.n	8005cfc <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	f103 0208 	add.w	r2, r3, #8
 8005d14:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	f103 0c08 	add.w	ip, r3, #8
 8005d20:	e84c 2100 	strex	r1, r2, [ip]
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d1f3      	bne.n	8005d10 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	f103 0208 	add.w	r2, r3, #8
 8005d2c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	f103 0c08 	add.w	ip, r3, #8
 8005d38:	e84c 2100 	strex	r1, r2, [ip]
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d1f3      	bne.n	8005d28 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d46:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005d48:	2a01      	cmp	r2, #1
 8005d4a:	d107      	bne.n	8005d5c <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	e843 2100 	strex	r1, r2, [r3]
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	d1f7      	bne.n	8005d4c <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d60:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d104      	bne.n	8005d70 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d66:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005d6a:	f7ff ffad 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
}
 8005d6e:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005d70:	f7ff ff7c 	bl	8005c6c <HAL_UART_RxCpltCallback>
}
 8005d74:	e7fb      	b.n	8005d6e <UART_DMAReceiveCplt+0x84>
	...

08005d78 <UART_SetConfig>:
{
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d7c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d7e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d80:	6925      	ldr	r5, [r4, #16]
 8005d82:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d84:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d86:	432a      	orrs	r2, r5
 8005d88:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d8a:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d8e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d90:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d94:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d96:	430a      	orrs	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005d9e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da8:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005daa:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dac:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005db0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db6:	4a56      	ldr	r2, [pc, #344]	@ (8005f10 <UART_SetConfig+0x198>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d112      	bne.n	8005de2 <UART_SetConfig+0x6a>
 8005dbc:	4b55      	ldr	r3, [pc, #340]	@ (8005f14 <UART_SetConfig+0x19c>)
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f000 8091 	beq.w	8005eec <UART_SetConfig+0x174>
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d022      	beq.n	8005e14 <UART_SetConfig+0x9c>
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	f040 8092 	bne.w	8005ef8 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005dd8:	f040 8085 	bne.w	8005ee6 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ddc:	f7fe fc80 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
        break;
 8005de0:	e06b      	b.n	8005eba <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de2:	4a4d      	ldr	r2, [pc, #308]	@ (8005f18 <UART_SetConfig+0x1a0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d12e      	bne.n	8005e46 <UART_SetConfig+0xce>
 8005de8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f14 <UART_SetConfig+0x19c>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005df0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df4:	d07a      	beq.n	8005eec <UART_SetConfig+0x174>
 8005df6:	d80a      	bhi.n	8005e0e <UART_SetConfig+0x96>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8083 	beq.w	8005f04 <UART_SetConfig+0x18c>
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e02:	d0e7      	beq.n	8005dd4 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8005e04:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005e06:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005e08:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e12:	d1f7      	bne.n	8005e04 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e14:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005e18:	4840      	ldr	r0, [pc, #256]	@ (8005f1c <UART_SetConfig+0x1a4>)
 8005e1a:	d156      	bne.n	8005eca <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e1c:	6862      	ldr	r2, [r4, #4]
 8005e1e:	0853      	lsrs	r3, r2, #1
 8005e20:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005e24:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e28:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005e2c:	f1a3 0110 	sub.w	r1, r3, #16
 8005e30:	4291      	cmp	r1, r2
 8005e32:	d8e7      	bhi.n	8005e04 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e34:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005e38:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e3a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e3c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60cb      	str	r3, [r1, #12]
 8005e44:	e03b      	b.n	8005ebe <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e46:	4a36      	ldr	r2, [pc, #216]	@ (8005f20 <UART_SetConfig+0x1a8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10f      	bne.n	8005e6c <UART_SetConfig+0xf4>
 8005e4c:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <UART_SetConfig+0x19c>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005e54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e58:	d048      	beq.n	8005eec <UART_SetConfig+0x174>
 8005e5a:	d804      	bhi.n	8005e66 <UART_SetConfig+0xee>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d051      	beq.n	8005f04 <UART_SetConfig+0x18c>
 8005e60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e64:	e7cd      	b.n	8005e02 <UART_SetConfig+0x8a>
 8005e66:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e6a:	e7d2      	b.n	8005e12 <UART_SetConfig+0x9a>
 8005e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f24 <UART_SetConfig+0x1ac>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10f      	bne.n	8005e92 <UART_SetConfig+0x11a>
 8005e72:	4b28      	ldr	r3, [pc, #160]	@ (8005f14 <UART_SetConfig+0x19c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e7e:	d035      	beq.n	8005eec <UART_SetConfig+0x174>
 8005e80:	d804      	bhi.n	8005e8c <UART_SetConfig+0x114>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d03e      	beq.n	8005f04 <UART_SetConfig+0x18c>
 8005e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e8a:	e7ba      	b.n	8005e02 <UART_SetConfig+0x8a>
 8005e8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e90:	e7bf      	b.n	8005e12 <UART_SetConfig+0x9a>
 8005e92:	4a25      	ldr	r2, [pc, #148]	@ (8005f28 <UART_SetConfig+0x1b0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d1b5      	bne.n	8005e04 <UART_SetConfig+0x8c>
 8005e98:	4b1e      	ldr	r3, [pc, #120]	@ (8005f14 <UART_SetConfig+0x19c>)
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea4:	d022      	beq.n	8005eec <UART_SetConfig+0x174>
 8005ea6:	d803      	bhi.n	8005eb0 <UART_SetConfig+0x138>
 8005ea8:	b363      	cbz	r3, 8005f04 <UART_SetConfig+0x18c>
 8005eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eae:	e7a8      	b.n	8005e02 <UART_SetConfig+0x8a>
 8005eb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005eb4:	e7ad      	b.n	8005e12 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb6:	f7fe fcf7 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1ae      	bne.n	8005e1c <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e7a1      	b.n	8005e06 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fe fcd9 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d0f9      	beq.n	8005ebe <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ed0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005ed8:	f1a3 0110 	sub.w	r1, r3, #16
 8005edc:	4291      	cmp	r1, r2
 8005ede:	d891      	bhi.n	8005e04 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee0:	6822      	ldr	r2, [r4, #0]
 8005ee2:	60d3      	str	r3, [r2, #12]
 8005ee4:	e7eb      	b.n	8005ebe <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fe fbfb 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
        break;
 8005eea:	e7ec      	b.n	8005ec6 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005ef0:	d094      	beq.n	8005e1c <UART_SetConfig+0xa4>
 8005ef2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005ef6:	e7e8      	b.n	8005eca <UART_SetConfig+0x152>
 8005ef8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005efc:	d0db      	beq.n	8005eb6 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efe:	f7fe fcd3 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005f02:	e7e0      	b.n	8005ec6 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f04:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f08:	d1db      	bne.n	8005ec2 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0a:	f7fe fcb5 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
        break;
 8005f0e:	e7d4      	b.n	8005eba <UART_SetConfig+0x142>
 8005f10:	40013800 	.word	0x40013800
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40004400 	.word	0x40004400
 8005f1c:	007a1200 	.word	0x007a1200
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	40005000 	.word	0x40005000

08005f2c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005f2e:	071a      	lsls	r2, r3, #28
{
 8005f30:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f32:	d506      	bpl.n	8005f42 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f34:	6801      	ldr	r1, [r0, #0]
 8005f36:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005f38:	684a      	ldr	r2, [r1, #4]
 8005f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f3e:	4322      	orrs	r2, r4
 8005f40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f42:	07dc      	lsls	r4, r3, #31
 8005f44:	d506      	bpl.n	8005f54 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f46:	6801      	ldr	r1, [r0, #0]
 8005f48:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005f4a:	684a      	ldr	r2, [r1, #4]
 8005f4c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005f50:	4322      	orrs	r2, r4
 8005f52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f54:	0799      	lsls	r1, r3, #30
 8005f56:	d506      	bpl.n	8005f66 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f58:	6801      	ldr	r1, [r0, #0]
 8005f5a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005f5c:	684a      	ldr	r2, [r1, #4]
 8005f5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f62:	4322      	orrs	r2, r4
 8005f64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f66:	075a      	lsls	r2, r3, #29
 8005f68:	d506      	bpl.n	8005f78 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6a:	6801      	ldr	r1, [r0, #0]
 8005f6c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005f6e:	684a      	ldr	r2, [r1, #4]
 8005f70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f74:	4322      	orrs	r2, r4
 8005f76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f78:	06dc      	lsls	r4, r3, #27
 8005f7a:	d506      	bpl.n	8005f8a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f7c:	6801      	ldr	r1, [r0, #0]
 8005f7e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005f80:	688a      	ldr	r2, [r1, #8]
 8005f82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f86:	4322      	orrs	r2, r4
 8005f88:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8a:	0699      	lsls	r1, r3, #26
 8005f8c:	d506      	bpl.n	8005f9c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f8e:	6801      	ldr	r1, [r0, #0]
 8005f90:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005f92:	688a      	ldr	r2, [r1, #8]
 8005f94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f98:	4322      	orrs	r2, r4
 8005f9a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f9c:	065a      	lsls	r2, r3, #25
 8005f9e:	d50f      	bpl.n	8005fc0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa0:	6801      	ldr	r1, [r0, #0]
 8005fa2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005fa4:	684a      	ldr	r2, [r1, #4]
 8005fa6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005faa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fb2:	d105      	bne.n	8005fc0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fb4:	684a      	ldr	r2, [r1, #4]
 8005fb6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005fb8:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005fbc:	4322      	orrs	r2, r4
 8005fbe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fc0:	061b      	lsls	r3, r3, #24
 8005fc2:	d506      	bpl.n	8005fd2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc4:	6802      	ldr	r2, [r0, #0]
 8005fc6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005fc8:	6853      	ldr	r3, [r2, #4]
 8005fca:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	6053      	str	r3, [r2, #4]
}
 8005fd2:	bd10      	pop	{r4, pc}

08005fd4 <UART_WaitOnFlagUntilTimeout>:
{
 8005fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fdc:	4604      	mov	r4, r0
 8005fde:	460d      	mov	r5, r1
 8005fe0:	4617      	mov	r7, r2
 8005fe2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	69d3      	ldr	r3, [r2, #28]
 8005fe8:	ea35 0303 	bics.w	r3, r5, r3
 8005fec:	bf0c      	ite	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	42bb      	cmp	r3, r7
 8005ff4:	d001      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	e022      	b.n	8006040 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005ffe:	d0f2      	beq.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006000:	f7fd f9a4 	bl	800334c <HAL_GetTick>
 8006004:	eba0 0008 	sub.w	r0, r0, r8
 8006008:	4548      	cmp	r0, r9
 800600a:	d829      	bhi.n	8006060 <UART_WaitOnFlagUntilTimeout+0x8c>
 800600c:	f1b9 0f00 	cmp.w	r9, #0
 8006010:	d026      	beq.n	8006060 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006012:	6821      	ldr	r1, [r4, #0]
 8006014:	680b      	ldr	r3, [r1, #0]
 8006016:	075a      	lsls	r2, r3, #29
 8006018:	d5e4      	bpl.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x10>
 800601a:	2d80      	cmp	r5, #128	@ 0x80
 800601c:	d0e2      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x10>
 800601e:	2d40      	cmp	r5, #64	@ 0x40
 8006020:	d0e0      	beq.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006022:	69ce      	ldr	r6, [r1, #28]
 8006024:	f016 0608 	ands.w	r6, r6, #8
 8006028:	d00c      	beq.n	8006044 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800602c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8006030:	f7ff fd83 	bl	8005b3a <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8006034:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006036:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800603a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 800603e:	2001      	movs	r0, #1
}
 8006040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006044:	69cb      	ldr	r3, [r1, #28]
 8006046:	051b      	lsls	r3, r3, #20
 8006048:	d5cc      	bpl.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800604a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800604e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8006050:	4620      	mov	r0, r4
 8006052:	f7ff fd72 	bl	8005b3a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006056:	2320      	movs	r3, #32
 8006058:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800605c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8006060:	2003      	movs	r0, #3
 8006062:	e7ed      	b.n	8006040 <UART_WaitOnFlagUntilTimeout+0x6c>

08006064 <HAL_UART_Transmit>:
{
 8006064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006068:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800606a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800606c:	2b20      	cmp	r3, #32
{
 800606e:	4604      	mov	r4, r0
 8006070:	460e      	mov	r6, r1
 8006072:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006074:	d143      	bne.n	80060fe <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8006076:	2900      	cmp	r1, #0
 8006078:	d043      	beq.n	8006102 <HAL_UART_Transmit+0x9e>
 800607a:	2a00      	cmp	r2, #0
 800607c:	d041      	beq.n	8006102 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006080:	2500      	movs	r5, #0
 8006082:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006086:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8006088:	f7fd f960 	bl	800334c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800608e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8006096:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8006098:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609c:	d103      	bne.n	80060a6 <HAL_UART_Transmit+0x42>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	b90b      	cbnz	r3, 80060a6 <HAL_UART_Transmit+0x42>
 80060a2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80060a4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80060a6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060aa:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80060ae:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060b0:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 80060b2:	b93a      	cbnz	r2, 80060c4 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060b4:	2140      	movs	r1, #64	@ 0x40
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff ff8c 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 80060bc:	2320      	movs	r3, #32
 80060be:	b940      	cbnz	r0, 80060d2 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80060c0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80060c2:	e008      	b.n	80060d6 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	@ 0x80
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff ff83 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 80060ce:	b128      	cbz	r0, 80060dc <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 80060d0:	2320      	movs	r3, #32
 80060d2:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80060d4:	2003      	movs	r0, #3
}
 80060d6:	b003      	add	sp, #12
 80060d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060dc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80060de:	b95e      	cbnz	r6, 80060f8 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e8:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80060ea:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80060ee:	3a01      	subs	r2, #1
 80060f0:	b292      	uxth	r2, r2
 80060f2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80060f6:	e7d6      	b.n	80060a6 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060f8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80060fc:	e7f4      	b.n	80060e8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80060fe:	2002      	movs	r0, #2
 8006100:	e7e9      	b.n	80060d6 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8006102:	2001      	movs	r0, #1
 8006104:	e7e7      	b.n	80060d6 <HAL_UART_Transmit+0x72>

08006106 <UART_CheckIdleState>:
{
 8006106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006108:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610a:	2600      	movs	r6, #0
 800610c:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006110:	f7fd f91c 	bl	800334c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800611a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611c:	d51b      	bpl.n	8006156 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	4632      	mov	r2, r6
 8006126:	4603      	mov	r3, r0
 8006128:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800612c:	4620      	mov	r0, r4
 800612e:	f7ff ff51 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 8006132:	b180      	cbz	r0, 8006156 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006134:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	e852 3f00 	ldrex	r3, [r2]
 800613a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	e842 3100 	strex	r1, r3, [r2]
 8006142:	2900      	cmp	r1, #0
 8006144:	d1f6      	bne.n	8006134 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8006146:	2320      	movs	r3, #32
 8006148:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800614a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800614c:	2300      	movs	r3, #0
 800614e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8006152:	b002      	add	sp, #8
 8006154:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	075b      	lsls	r3, r3, #29
 800615c:	d524      	bpl.n	80061a8 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800615e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2200      	movs	r2, #0
 8006166:	462b      	mov	r3, r5
 8006168:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800616c:	4620      	mov	r0, r4
 800616e:	f7ff ff31 	bl	8005fd4 <UART_WaitOnFlagUntilTimeout>
 8006172:	b1c8      	cbz	r0, 80061a8 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006174:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	e852 3f00 	ldrex	r3, [r2]
 800617a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	2900      	cmp	r1, #0
 8006186:	d1f5      	bne.n	8006174 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	f102 0308 	add.w	r3, r2, #8
 800618c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006190:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	f102 0008 	add.w	r0, r2, #8
 8006198:	e840 3100 	strex	r1, r3, [r0]
 800619c:	2900      	cmp	r1, #0
 800619e:	d1f3      	bne.n	8006188 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 80061a0:	2320      	movs	r3, #32
 80061a2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80061a6:	e7d0      	b.n	800614a <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 80061a8:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061aa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80061ac:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061ae:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b4:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80061b6:	e7c9      	b.n	800614c <UART_CheckIdleState+0x46>

080061b8 <HAL_UART_Init>:
{
 80061b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80061ba:	4604      	mov	r4, r0
 80061bc:	b340      	cbz	r0, 8006210 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80061be:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80061c0:	b91b      	cbnz	r3, 80061ca <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80061c2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80061c6:	f7fc fed9 	bl	8002f7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80061ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061cc:	2324      	movs	r3, #36	@ 0x24
 80061ce:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80061d0:	6813      	ldr	r3, [r2, #0]
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061da:	b113      	cbz	r3, 80061e2 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80061dc:	4620      	mov	r0, r4
 80061de:	f7ff fea5 	bl	8005f2c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff fdc8 	bl	8005d78 <UART_SetConfig>
 80061e8:	2801      	cmp	r0, #1
 80061ea:	d011      	beq.n	8006210 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006204:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006206:	601a      	str	r2, [r3, #0]
}
 8006208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800620c:	f7ff bf7b 	b.w	8006106 <UART_CheckIdleState>
}
 8006210:	2001      	movs	r0, #1
 8006212:	bd10      	pop	{r4, pc}

08006214 <UART_Start_Receive_DMA>:
{
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4613      	mov	r3, r2
 8006218:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 800621a:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621e:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8006220:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006222:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006226:	2022      	movs	r0, #34	@ 0x22
 8006228:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 800622c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800622e:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8006230:	b1a0      	cbz	r0, 800625c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006232:	4e1c      	ldr	r6, [pc, #112]	@ (80062a4 <UART_Start_Receive_DMA+0x90>)
 8006234:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006236:	4e1c      	ldr	r6, [pc, #112]	@ (80062a8 <UART_Start_Receive_DMA+0x94>)
 8006238:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800623a:	4e1c      	ldr	r6, [pc, #112]	@ (80062ac <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 800623c:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006240:	460a      	mov	r2, r1
 8006242:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8006246:	f7fd fe6f 	bl	8003f28 <HAL_DMA_Start_IT>
 800624a:	b138      	cbz	r0, 800625c <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800624c:	2310      	movs	r3, #16
 800624e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8006252:	2320      	movs	r3, #32
 8006254:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8006258:	2001      	movs	r0, #1
}
 800625a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800625c:	6922      	ldr	r2, [r4, #16]
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	b13a      	cbz	r2, 8006272 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	e843 2100 	strex	r1, r2, [r3]
 800626e:	2900      	cmp	r1, #0
 8006270:	d1f7      	bne.n	8006262 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	f103 0208 	add.w	r2, r3, #8
 8006276:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f103 0008 	add.w	r0, r3, #8
 8006282:	e840 2100 	strex	r1, r2, [r0]
 8006286:	2900      	cmp	r1, #0
 8006288:	d1f3      	bne.n	8006272 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	f103 0208 	add.w	r2, r3, #8
 800628e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	f103 0108 	add.w	r1, r3, #8
 800629a:	e841 2000 	strex	r0, r2, [r1]
 800629e:	2800      	cmp	r0, #0
 80062a0:	d1f3      	bne.n	800628a <UART_Start_Receive_DMA+0x76>
 80062a2:	e7da      	b.n	800625a <UART_Start_Receive_DMA+0x46>
 80062a4:	08005ceb 	.word	0x08005ceb
 80062a8:	08005ccb 	.word	0x08005ccb
 80062ac:	08005c73 	.word	0x08005c73

080062b0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80062b0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80062b4:	2b20      	cmp	r3, #32
{
 80062b6:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80062b8:	d112      	bne.n	80062e0 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 80062ba:	b1a1      	cbz	r1, 80062e6 <HAL_UART_Receive_DMA+0x36>
 80062bc:	b19a      	cbz	r2, 80062e6 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062c0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	d507      	bpl.n	80062da <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	e844 3500 	strex	r5, r3, [r4]
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d1f7      	bne.n	80062ca <HAL_UART_Receive_DMA+0x1a>
}
 80062da:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80062dc:	f7ff bf9a 	b.w	8006214 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80062e0:	2002      	movs	r0, #2
}
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	4770      	bx	lr
      return HAL_ERROR;
 80062e6:	2001      	movs	r0, #1
 80062e8:	e7fb      	b.n	80062e2 <HAL_UART_Receive_DMA+0x32>

080062ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062ea:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80062ec:	f000 fe32 	bl	8006f54 <vTaskStartScheduler>
  
  return osOK;
}
 80062f0:	2000      	movs	r0, #0
 80062f2:	bd08      	pop	{r3, pc}

080062f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062f8:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062fa:	692a      	ldr	r2, [r5, #16]
 80062fc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8006300:	460b      	mov	r3, r1
 8006302:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006304:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006308:	b176      	cbz	r6, 8006328 <osThreadCreate+0x34>
 800630a:	69ad      	ldr	r5, [r5, #24]
 800630c:	b165      	cbz	r5, 8006328 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800630e:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8006310:	bf14      	ite	ne
 8006312:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006314:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006316:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800631a:	9400      	str	r4, [sp, #0]
 800631c:	f000 fdb5 	bl	8006e8a <xTaskCreateStatic>
 8006320:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006322:	9805      	ldr	r0, [sp, #20]
}
 8006324:	b006      	add	sp, #24
 8006326:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8006328:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800632a:	bf14      	ite	ne
 800632c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800632e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006330:	ad05      	add	r5, sp, #20
 8006332:	e9cd 4500 	strd	r4, r5, [sp]
 8006336:	b292      	uxth	r2, r2
 8006338:	f000 fdde 	bl	8006ef8 <xTaskCreate>
 800633c:	2801      	cmp	r0, #1
 800633e:	d0f0      	beq.n	8006322 <osThreadCreate+0x2e>
      return NULL;
 8006340:	2000      	movs	r0, #0
 8006342:	e7ef      	b.n	8006324 <osThreadCreate+0x30>

08006344 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006344:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006346:	2801      	cmp	r0, #1
 8006348:	bf38      	it	cc
 800634a:	2001      	movcc	r0, #1
 800634c:	f000 ff50 	bl	80071f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006350:	2000      	movs	r0, #0
 8006352:	bd08      	pop	{r3, pc}

08006354 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006356:	6847      	ldr	r7, [r0, #4]
{
 8006358:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800635a:	2014      	movs	r0, #20
 800635c:	f001 fa80 	bl	8007860 <pvPortMalloc>

  
  if (thePool) {
 8006360:	4604      	mov	r4, r0
 8006362:	b1b8      	cbz	r0, 8006394 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8006364:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006366:	3703      	adds	r7, #3
 8006368:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 800636c:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 800636e:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8006372:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006374:	f001 fa74 	bl	8007860 <pvPortMalloc>
 8006378:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 800637a:	b140      	cbz	r0, 800638e <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800637c:	6830      	ldr	r0, [r6, #0]
 800637e:	4378      	muls	r0, r7
 8006380:	f001 fa6e 	bl	8007860 <pvPortMalloc>
 8006384:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8006386:	b978      	cbnz	r0, 80063a8 <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8006388:	6860      	ldr	r0, [r4, #4]
 800638a:	f001 fafb 	bl	8007984 <vPortFree>
        vPortFree(thePool);
 800638e:	4620      	mov	r0, r4
 8006390:	f001 faf8 	bl	8007984 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006394:	2400      	movs	r4, #0
 8006396:	e005      	b.n	80063a4 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8006398:	6862      	ldr	r2, [r4, #4]
 800639a:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800639c:	3301      	adds	r3, #1
 800639e:	6832      	ldr	r2, [r6, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d8f9      	bhi.n	8006398 <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 80063a4:	4620      	mov	r0, r4
 80063a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 80063a8:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 80063aa:	4629      	mov	r1, r5
 80063ac:	e7f7      	b.n	800639e <osPoolCreate+0x4a>

080063ae <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80063ae:	b570      	push	{r4, r5, r6, lr}
 80063b0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b2:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80063b6:	b186      	cbz	r6, 80063da <osPoolAlloc+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063b8:	f3ef 8511 	mrs	r5, BASEPRI
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80063cc:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80063ce:	68a1      	ldr	r1, [r4, #8]
 80063d0:	2200      	movs	r2, #0
 80063d2:	4291      	cmp	r1, r2
 80063d4:	d104      	bne.n	80063e0 <osPoolAlloc+0x32>
  void *p = NULL;
 80063d6:	2500      	movs	r5, #0
 80063d8:	e012      	b.n	8006400 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80063da:	f001 f8db 	bl	8007594 <vPortEnterCritical>
 80063de:	e7f6      	b.n	80063ce <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	fbb3 f0f1 	udiv	r0, r3, r1
 80063e8:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80063ec:	6860      	ldr	r0, [r4, #4]
 80063ee:	5cc5      	ldrb	r5, [r0, r3]
 80063f0:	b96d      	cbnz	r5, 800640e <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 80063f2:	2201      	movs	r2, #1
 80063f4:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80063f6:	68e2      	ldr	r2, [r4, #12]
 80063f8:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 80063fa:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80063fc:	fb02 5503 	mla	r5, r2, r3, r5
 8006400:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8006404:	b12b      	cbz	r3, 8006412 <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006406:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 800640a:	4628      	mov	r0, r5
 800640c:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 800640e:	3201      	adds	r2, #1
 8006410:	e7df      	b.n	80063d2 <osPoolAlloc+0x24>
    vPortExitCritical();
 8006412:	f001 f8df 	bl	80075d4 <vPortExitCritical>
  return p;
 8006416:	e7f8      	b.n	800640a <osPoolAlloc+0x5c>

08006418 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8006418:	4603      	mov	r3, r0
 800641a:	b180      	cbz	r0, 800643e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 800641c:	b179      	cbz	r1, 800643e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 800641e:	6802      	ldr	r2, [r0, #0]
 8006420:	428a      	cmp	r2, r1
 8006422:	d80c      	bhi.n	800643e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8006424:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8006426:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8006428:	fbb1 f2f0 	udiv	r2, r1, r0
 800642c:	fb00 1012 	mls	r0, r0, r2, r1
 8006430:	b928      	cbnz	r0, 800643e <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8006432:	6899      	ldr	r1, [r3, #8]
 8006434:	4291      	cmp	r1, r2
 8006436:	d902      	bls.n	800643e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 800643c:	4770      	bx	lr
    return osErrorParameter;
 800643e:	2080      	movs	r0, #128	@ 0x80
}
 8006440:	4770      	bx	lr

08006442 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006442:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006444:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006446:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006448:	9301      	str	r3, [sp, #4]
{
 800644a:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800644c:	6843      	ldr	r3, [r0, #4]
 800644e:	9302      	str	r3, [sp, #8]
 8006450:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006452:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006454:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006456:	f001 fa03 	bl	8007860 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 800645a:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800645c:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 800645e:	681d      	ldr	r5, [r3, #0]
 8006460:	b16d      	cbz	r5, 800647e <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006462:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	4632      	mov	r2, r6
 8006468:	2104      	movs	r1, #4
 800646a:	f000 f98f 	bl	800678c <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 800646e:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006470:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8006472:	681d      	ldr	r5, [r3, #0]
 8006474:	686b      	ldr	r3, [r5, #4]
 8006476:	b92b      	cbnz	r3, 8006484 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8006478:	4628      	mov	r0, r5
 800647a:	f001 fa83 	bl	8007984 <vPortFree>
    return NULL;
 800647e:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8006480:	b004      	add	sp, #16
 8006482:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006484:	a801      	add	r0, sp, #4
 8006486:	f7ff ff65 	bl	8006354 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800648a:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800648c:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	6883      	ldr	r3, [r0, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f4      	bne.n	8006480 <osMailCreate+0x3e>
 8006496:	e7f0      	b.n	800647a <osMailCreate+0x38>

08006498 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006498:	b110      	cbz	r0, 80064a0 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 800649a:	6880      	ldr	r0, [r0, #8]
 800649c:	f7ff bf87 	b.w	80063ae <osPoolAlloc>
  
  return p;
}
 80064a0:	4770      	bx	lr

080064a2 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80064a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80064a6:	b328      	cbz	r0, 80064f4 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 80064a8:	2200      	movs	r2, #0
 80064aa:	9203      	str	r2, [sp, #12]
 80064ac:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80064b0:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 80064b2:	b1c3      	cbz	r3, 80064e6 <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80064b4:	4613      	mov	r3, r2
 80064b6:	a901      	add	r1, sp, #4
 80064b8:	aa03      	add	r2, sp, #12
 80064ba:	f000 fa3d 	bl	8006938 <xQueueGenericSendFromISR>
 80064be:	2801      	cmp	r0, #1
 80064c0:	d003      	beq.n	80064ca <osMailPut+0x28>
      return osErrorOS;
 80064c2:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80064c4:	b005      	add	sp, #20
 80064c6:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	b14b      	cbz	r3, 80064e2 <osMailPut+0x40>
 80064ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
  return osOK;
 80064e2:	2000      	movs	r0, #0
 80064e4:	e7ee      	b.n	80064c4 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80064e6:	461a      	mov	r2, r3
 80064e8:	a901      	add	r1, sp, #4
 80064ea:	f000 f973 	bl	80067d4 <xQueueGenericSend>
 80064ee:	2801      	cmp	r0, #1
 80064f0:	d0f7      	beq.n	80064e2 <osMailPut+0x40>
 80064f2:	e7e6      	b.n	80064c2 <osMailPut+0x20>
    return osErrorParameter;
 80064f4:	2080      	movs	r0, #128	@ 0x80
 80064f6:	e7e5      	b.n	80064c4 <osMailPut+0x22>

080064f8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80064f8:	b530      	push	{r4, r5, lr}
 80064fa:	b085      	sub	sp, #20
 80064fc:	4605      	mov	r5, r0
 80064fe:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006500:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8006502:	b911      	cbnz	r1, 800650a <osMailGet+0x12>
    event.status = osErrorParameter;
 8006504:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	e01a      	b.n	8006540 <osMailGet+0x48>
  taskWoken = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006512:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8006514:	b1e3      	cbz	r3, 8006550 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006516:	466a      	mov	r2, sp
 8006518:	a902      	add	r1, sp, #8
 800651a:	f000 fb07 	bl	8006b2c <xQueueReceiveFromISR>
 800651e:	1e43      	subs	r3, r0, #1
 8006520:	4258      	negs	r0, r3
 8006522:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8006524:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006526:	0140      	lsls	r0, r0, #5
 8006528:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800652a:	b14b      	cbz	r3, 8006540 <osMailGet+0x48>
 800652c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006534:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
    return event;
 8006540:	ab04      	add	r3, sp, #16
 8006542:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006546:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 800654a:	4628      	mov	r0, r5
 800654c:	b005      	add	sp, #20
 800654e:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006550:	a902      	add	r1, sp, #8
 8006552:	f000 fa4d 	bl	80069f0 <xQueueReceive>
 8006556:	2801      	cmp	r0, #1
 8006558:	d101      	bne.n	800655e <osMailGet+0x66>
      event.status = osEventMail;
 800655a:	2320      	movs	r3, #32
 800655c:	e7d3      	b.n	8006506 <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800655e:	3c00      	subs	r4, #0
 8006560:	bf18      	it	ne
 8006562:	2401      	movne	r4, #1
 8006564:	01a4      	lsls	r4, r4, #6
 8006566:	9401      	str	r4, [sp, #4]
  return event;
 8006568:	e7ea      	b.n	8006540 <osMailGet+0x48>

0800656a <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 800656a:	b110      	cbz	r0, 8006572 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 800656c:	6880      	ldr	r0, [r0, #8]
 800656e:	f7ff bf53 	b.w	8006418 <osPoolFree>
}
 8006572:	2080      	movs	r0, #128	@ 0x80
 8006574:	4770      	bx	lr

08006576 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006576:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800657a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800657e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006582:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006584:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800658a:	4770      	bx	lr

0800658c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006590:	4770      	bx	lr

08006592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006592:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006594:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800659a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800659c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800659e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065a0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80065a2:	3301      	adds	r3, #1
 80065a4:	6003      	str	r3, [r0, #0]
}
 80065a6:	4770      	bx	lr

080065a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065a8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065aa:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065ac:	1c63      	adds	r3, r4, #1
 80065ae:	d10a      	bne.n	80065c6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065b0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065b6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065b8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ba:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80065bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80065c0:	3301      	adds	r3, #1
 80065c2:	6003      	str	r3, [r0, #0]
}
 80065c4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c6:	f100 0208 	add.w	r2, r0, #8
 80065ca:	4613      	mov	r3, r2
 80065cc:	6852      	ldr	r2, [r2, #4]
 80065ce:	6815      	ldr	r5, [r2, #0]
 80065d0:	42a5      	cmp	r5, r4
 80065d2:	d9fa      	bls.n	80065ca <vListInsert+0x22>
 80065d4:	e7ed      	b.n	80065b2 <vListInsert+0xa>

080065d6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065d6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80065da:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065dc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065e0:	6859      	ldr	r1, [r3, #4]
 80065e2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065e4:	bf08      	it	eq
 80065e6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80065e8:	2200      	movs	r2, #0
 80065ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	3a01      	subs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065f2:	6818      	ldr	r0, [r3, #0]
}
 80065f4:	4770      	bx	lr

080065f6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065f6:	b510      	push	{r4, lr}
 80065f8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065fa:	f000 ffcb 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065fe:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006600:	f000 ffe8 	bl	80075d4 <vPortExitCritical>

	return xReturn;
}
 8006604:	fab4 f084 	clz	r0, r4
 8006608:	0940      	lsrs	r0, r0, #5
 800660a:	bd10      	pop	{r4, pc}

0800660c <prvCopyDataToQueue>:
{
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006610:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006612:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006614:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006616:	b942      	cbnz	r2, 800662a <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006618:	6806      	ldr	r6, [r0, #0]
 800661a:	b99e      	cbnz	r6, 8006644 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800661c:	6840      	ldr	r0, [r0, #4]
 800661e:	f000 feff 	bl	8007420 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006622:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006624:	3501      	adds	r5, #1
 8006626:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006628:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800662a:	b96e      	cbnz	r6, 8006648 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800662c:	6880      	ldr	r0, [r0, #8]
 800662e:	f002 fea0 	bl	8009372 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006636:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006638:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800663a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800663c:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800663e:	bf24      	itt	cs
 8006640:	6823      	ldrcs	r3, [r4, #0]
 8006642:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006644:	2000      	movs	r0, #0
 8006646:	e7ed      	b.n	8006624 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006648:	68c0      	ldr	r0, [r0, #12]
 800664a:	f002 fe92 	bl	8009372 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800664e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006650:	68e3      	ldr	r3, [r4, #12]
 8006652:	4251      	negs	r1, r2
 8006654:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006656:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006658:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800665a:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800665c:	bf3e      	ittt	cc
 800665e:	6863      	ldrcc	r3, [r4, #4]
 8006660:	185b      	addcc	r3, r3, r1
 8006662:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006664:	2e02      	cmp	r6, #2
 8006666:	d1ed      	bne.n	8006644 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006668:	b10d      	cbz	r5, 800666e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800666a:	3d01      	subs	r5, #1
 800666c:	e7ea      	b.n	8006644 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800666e:	4628      	mov	r0, r5
 8006670:	e7d8      	b.n	8006624 <prvCopyDataToQueue+0x18>

08006672 <prvCopyDataFromQueue>:
{
 8006672:	4603      	mov	r3, r0
 8006674:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006678:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800667a:	b16a      	cbz	r2, 8006698 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800667c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800667e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006680:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006682:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006684:	bf28      	it	cs
 8006686:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006688:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800668a:	bf28      	it	cs
 800668c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800668e:	68d9      	ldr	r1, [r3, #12]
}
 8006690:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006694:	f002 be6d 	b.w	8009372 <memcpy>
}
 8006698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800669c:	4770      	bx	lr

0800669e <prvUnlockQueue>:
{
 800669e:	b570      	push	{r4, r5, r6, lr}
 80066a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80066a2:	f000 ff77 	bl	8007594 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80066a6:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066aa:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80066ae:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	dc14      	bgt.n	80066de <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80066b4:	23ff      	movs	r3, #255	@ 0xff
 80066b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80066ba:	f000 ff8b 	bl	80075d4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80066be:	f000 ff69 	bl	8007594 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80066c2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c6:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80066ca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066cc:	2d00      	cmp	r5, #0
 80066ce:	dc12      	bgt.n	80066f6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80066d0:	23ff      	movs	r3, #255	@ 0xff
 80066d2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80066d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80066da:	f000 bf7b 	b.w	80075d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0e7      	beq.n	80066b4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 fdfb 	bl	80072e0 <xTaskRemoveFromEventList>
 80066ea:	b108      	cbz	r0, 80066f0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80066ec:	f000 fe82 	bl	80073f4 <vTaskMissedYield>
			--cTxLock;
 80066f0:	3d01      	subs	r5, #1
 80066f2:	b26d      	sxtb	r5, r5
 80066f4:	e7dc      	b.n	80066b0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0e9      	beq.n	80066d0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 fdef 	bl	80072e0 <xTaskRemoveFromEventList>
 8006702:	b108      	cbz	r0, 8006708 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006704:	f000 fe76 	bl	80073f4 <vTaskMissedYield>
				--cRxLock;
 8006708:	3d01      	subs	r5, #1
 800670a:	b26d      	sxtb	r5, r5
 800670c:	e7de      	b.n	80066cc <prvUnlockQueue+0x2e>

0800670e <xQueueGenericReset>:
{
 800670e:	b538      	push	{r3, r4, r5, lr}
 8006710:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006712:	4604      	mov	r4, r0
 8006714:	b940      	cbnz	r0, 8006728 <xQueueGenericReset+0x1a>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	e7fe      	b.n	8006726 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006728:	f000 ff34 	bl	8007594 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800672c:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8006730:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006732:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006734:	434b      	muls	r3, r1
 8006736:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006738:	1a5b      	subs	r3, r3, r1
 800673a:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800673c:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800673e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006740:	2000      	movs	r0, #0
 8006742:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006744:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006746:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800674a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800674e:	b9a5      	cbnz	r5, 800677a <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	b173      	cbz	r3, 8006772 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006754:	f104 0010 	add.w	r0, r4, #16
 8006758:	f000 fdc2 	bl	80072e0 <xTaskRemoveFromEventList>
 800675c:	b148      	cbz	r0, 8006772 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800675e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006766:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006772:	f000 ff2f 	bl	80075d4 <vPortExitCritical>
}
 8006776:	2001      	movs	r0, #1
 8006778:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800677a:	f104 0010 	add.w	r0, r4, #16
 800677e:	f7ff fefa 	bl	8006576 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006782:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006786:	f7ff fef6 	bl	8006576 <vListInitialise>
 800678a:	e7f2      	b.n	8006772 <xQueueGenericReset+0x64>

0800678c <xQueueGenericCreate>:
	{
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006790:	4606      	mov	r6, r0
 8006792:	b940      	cbnz	r0, 80067a6 <xQueueGenericCreate+0x1a>
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80067a8:	3048      	adds	r0, #72	@ 0x48
 80067aa:	f001 f859 	bl	8007860 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80067ae:	4604      	mov	r4, r0
 80067b0:	b160      	cbz	r0, 80067cc <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b8:	b155      	cbz	r5, 80067d0 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80067ba:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 80067be:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80067c2:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067c4:	2101      	movs	r1, #1
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff ffa1 	bl	800670e <xQueueGenericReset>
	}
 80067cc:	4620      	mov	r0, r4
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067d0:	4603      	mov	r3, r0
 80067d2:	e7f4      	b.n	80067be <xQueueGenericCreate+0x32>

080067d4 <xQueueGenericSend>:
{
 80067d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80067d8:	460f      	mov	r7, r1
 80067da:	9201      	str	r2, [sp, #4]
 80067dc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80067de:	4604      	mov	r4, r0
 80067e0:	b940      	cbnz	r0, 80067f4 <xQueueGenericSend+0x20>
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	e7fe      	b.n	80067f2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067f4:	b951      	cbnz	r1, 800680c <xQueueGenericSend+0x38>
 80067f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80067f8:	b143      	cbz	r3, 800680c <xQueueGenericSend+0x38>
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	e7fe      	b.n	800680a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800680c:	2e02      	cmp	r6, #2
 800680e:	d10b      	bne.n	8006828 <xQueueGenericSend+0x54>
 8006810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d008      	beq.n	8006828 <xQueueGenericSend+0x54>
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	e7fe      	b.n	8006826 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006828:	f000 fdea 	bl	8007400 <xTaskGetSchedulerState>
 800682c:	4605      	mov	r5, r0
 800682e:	b330      	cbz	r0, 800687e <xQueueGenericSend+0xaa>
 8006830:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006832:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006836:	f000 fead 	bl	8007594 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800683a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800683c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800683e:	429a      	cmp	r2, r3
 8006840:	d301      	bcc.n	8006846 <xQueueGenericSend+0x72>
 8006842:	2e02      	cmp	r6, #2
 8006844:	d127      	bne.n	8006896 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006846:	4632      	mov	r2, r6
 8006848:	4639      	mov	r1, r7
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff fede 	bl	800660c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006850:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006852:	b11b      	cbz	r3, 800685c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006854:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006858:	f000 fd42 	bl	80072e0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800685c:	b148      	cbz	r0, 8006872 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800685e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006866:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006872:	f000 feaf 	bl	80075d4 <vPortExitCritical>
				return pdPASS;
 8006876:	2001      	movs	r0, #1
}
 8006878:	b004      	add	sp, #16
 800687a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0d6      	beq.n	8006832 <xQueueGenericSend+0x5e>
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	e7fe      	b.n	8006894 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	b91b      	cbnz	r3, 80068a2 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800689a:	f000 fe9b 	bl	80075d4 <vPortExitCritical>
					return errQUEUE_FULL;
 800689e:	2000      	movs	r0, #0
 80068a0:	e7ea      	b.n	8006878 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80068a2:	b915      	cbnz	r5, 80068aa <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a4:	a802      	add	r0, sp, #8
 80068a6:	f000 fd5d 	bl	8007364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80068aa:	f000 fe93 	bl	80075d4 <vPortExitCritical>
		vTaskSuspendAll();
 80068ae:	f000 fb89 	bl	8006fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068b2:	f000 fe6f 	bl	8007594 <vPortEnterCritical>
 80068b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80068ba:	2bff      	cmp	r3, #255	@ 0xff
 80068bc:	bf08      	it	eq
 80068be:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80068c2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80068c6:	2bff      	cmp	r3, #255	@ 0xff
 80068c8:	bf08      	it	eq
 80068ca:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80068ce:	f000 fe81 	bl	80075d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068d2:	a901      	add	r1, sp, #4
 80068d4:	a802      	add	r0, sp, #8
 80068d6:	f000 fd51 	bl	800737c <xTaskCheckForTimeOut>
 80068da:	bb38      	cbnz	r0, 800692c <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068dc:	f000 fe5a 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80068e2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d10e      	bne.n	8006906 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80068e8:	f000 fe74 	bl	80075d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ec:	9901      	ldr	r1, [sp, #4]
 80068ee:	f104 0010 	add.w	r0, r4, #16
 80068f2:	f000 fcdb 	bl	80072ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff fed1 	bl	800669e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068fc:	f000 fc02 	bl	8007104 <xTaskResumeAll>
 8006900:	b148      	cbz	r0, 8006916 <xQueueGenericSend+0x142>
 8006902:	2501      	movs	r5, #1
 8006904:	e797      	b.n	8006836 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8006906:	f000 fe65 	bl	80075d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff fec7 	bl	800669e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006910:	f000 fbf8 	bl	8007104 <xTaskResumeAll>
 8006914:	e7f5      	b.n	8006902 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006916:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800691a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800691e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	e7ea      	b.n	8006902 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800692c:	4620      	mov	r0, r4
 800692e:	f7ff feb6 	bl	800669e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fbe7 	bl	8007104 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006936:	e7b2      	b.n	800689e <xQueueGenericSend+0xca>

08006938 <xQueueGenericSendFromISR>:
{
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4689      	mov	r9, r1
 800693e:	4617      	mov	r7, r2
 8006940:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006942:	4604      	mov	r4, r0
 8006944:	b940      	cbnz	r0, 8006958 <xQueueGenericSendFromISR+0x20>
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	e7fe      	b.n	8006956 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006958:	b951      	cbnz	r1, 8006970 <xQueueGenericSendFromISR+0x38>
 800695a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800695c:	b143      	cbz	r3, 8006970 <xQueueGenericSendFromISR+0x38>
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	e7fe      	b.n	800696e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006970:	2e02      	cmp	r6, #2
 8006972:	d10b      	bne.n	800698c <xQueueGenericSendFromISR+0x54>
 8006974:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d008      	beq.n	800698c <xQueueGenericSendFromISR+0x54>
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	e7fe      	b.n	800698a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800698c:	f000 ff14 	bl	80077b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006990:	f3ef 8811 	mrs	r8, BASEPRI
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80069a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d301      	bcc.n	80069b0 <xQueueGenericSendFromISR+0x78>
 80069ac:	2e02      	cmp	r6, #2
 80069ae:	d11d      	bne.n	80069ec <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80069b0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b4:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80069b6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b8:	4649      	mov	r1, r9
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff fe26 	bl	800660c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80069c0:	1c6b      	adds	r3, r5, #1
 80069c2:	d10e      	bne.n	80069e2 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069c6:	b13b      	cbz	r3, 80069d8 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80069cc:	f000 fc88 	bl	80072e0 <xTaskRemoveFromEventList>
 80069d0:	b110      	cbz	r0, 80069d8 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80069d2:	b10f      	cbz	r7, 80069d8 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80069d8:	2001      	movs	r0, #1
	__asm volatile
 80069da:	f388 8811 	msr	BASEPRI, r8
}
 80069de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069e2:	3501      	adds	r5, #1
 80069e4:	b26d      	sxtb	r5, r5
 80069e6:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80069ea:	e7f5      	b.n	80069d8 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80069ec:	2000      	movs	r0, #0
 80069ee:	e7f4      	b.n	80069da <xQueueGenericSendFromISR+0xa2>

080069f0 <xQueueReceive>:
{
 80069f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80069f4:	460e      	mov	r6, r1
 80069f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80069f8:	4604      	mov	r4, r0
 80069fa:	b940      	cbnz	r0, 8006a0e <xQueueReceive+0x1e>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	e7fe      	b.n	8006a0c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	b951      	cbnz	r1, 8006a26 <xQueueReceive+0x36>
 8006a10:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006a12:	b143      	cbz	r3, 8006a26 <xQueueReceive+0x36>
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	e7fe      	b.n	8006a24 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a26:	f000 fceb 	bl	8007400 <xTaskGetSchedulerState>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	b318      	cbz	r0, 8006a76 <xQueueReceive+0x86>
 8006a2e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006a30:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006a34:	f000 fdae 	bl	8007594 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a38:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a3a:	b347      	cbz	r7, 8006a8e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a40:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a42:	f7ff fe16 	bl	8006672 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a46:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	b173      	cbz	r3, 8006a6a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4c:	f104 0010 	add.w	r0, r4, #16
 8006a50:	f000 fc46 	bl	80072e0 <xTaskRemoveFromEventList>
 8006a54:	b148      	cbz	r0, 8006a6a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8006a56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006a6a:	f000 fdb3 	bl	80075d4 <vPortExitCritical>
				return pdPASS;
 8006a6e:	2001      	movs	r0, #1
}
 8006a70:	b004      	add	sp, #16
 8006a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a76:	9b01      	ldr	r3, [sp, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0d9      	beq.n	8006a30 <xQueueReceive+0x40>
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	e7fe      	b.n	8006a8c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	b91b      	cbnz	r3, 8006a9a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8006a92:	f000 fd9f 	bl	80075d4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a96:	2000      	movs	r0, #0
 8006a98:	e7ea      	b.n	8006a70 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8006a9a:	b915      	cbnz	r5, 8006aa2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a9c:	a802      	add	r0, sp, #8
 8006a9e:	f000 fc61 	bl	8007364 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006aa2:	f000 fd97 	bl	80075d4 <vPortExitCritical>
		vTaskSuspendAll();
 8006aa6:	f000 fa8d 	bl	8006fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aaa:	f000 fd73 	bl	8007594 <vPortEnterCritical>
 8006aae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006ab2:	2bff      	cmp	r3, #255	@ 0xff
 8006ab4:	bf08      	it	eq
 8006ab6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006aba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006abe:	2bff      	cmp	r3, #255	@ 0xff
 8006ac0:	bf08      	it	eq
 8006ac2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006ac6:	f000 fd85 	bl	80075d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aca:	a901      	add	r1, sp, #4
 8006acc:	a802      	add	r0, sp, #8
 8006ace:	f000 fc55 	bl	800737c <xTaskCheckForTimeOut>
 8006ad2:	bb00      	cbnz	r0, 8006b16 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7ff fd8e 	bl	80065f6 <prvIsQueueEmpty>
 8006ada:	b1b0      	cbz	r0, 8006b0a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006adc:	9901      	ldr	r1, [sp, #4]
 8006ade:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006ae2:	f000 fbe3 	bl	80072ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff fdd9 	bl	800669e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aec:	f000 fb0a 	bl	8007104 <xTaskResumeAll>
 8006af0:	b948      	cbnz	r0, 8006b06 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8006af2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	2501      	movs	r5, #1
 8006b08:	e794      	b.n	8006a34 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f7ff fdc7 	bl	800669e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b10:	f000 faf8 	bl	8007104 <xTaskResumeAll>
 8006b14:	e7f7      	b.n	8006b06 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff fdc1 	bl	800669e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b1c:	f000 faf2 	bl	8007104 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b20:	4620      	mov	r0, r4
 8006b22:	f7ff fd68 	bl	80065f6 <prvIsQueueEmpty>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d0ed      	beq.n	8006b06 <xQueueReceive+0x116>
 8006b2a:	e7b4      	b.n	8006a96 <xQueueReceive+0xa6>

08006b2c <xQueueReceiveFromISR>:
{
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	4689      	mov	r9, r1
 8006b32:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006b34:	4604      	mov	r4, r0
 8006b36:	b940      	cbnz	r0, 8006b4a <xQueueReceiveFromISR+0x1e>
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	e7fe      	b.n	8006b48 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b4a:	b951      	cbnz	r1, 8006b62 <xQueueReceiveFromISR+0x36>
 8006b4c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006b4e:	b143      	cbz	r3, 8006b62 <xQueueReceiveFromISR+0x36>
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	e7fe      	b.n	8006b60 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b62:	f000 fe29 	bl	80077b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b66:	f3ef 8711 	mrs	r7, BASEPRI
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b7a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b7c:	b30d      	cbz	r5, 8006bc2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b7e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b82:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b84:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fd73 	bl	8006672 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b8c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8006b8e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b90:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8006b92:	d111      	bne.n	8006bb8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	b153      	cbz	r3, 8006bae <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b98:	f104 0010 	add.w	r0, r4, #16
 8006b9c:	f000 fba0 	bl	80072e0 <xTaskRemoveFromEventList>
 8006ba0:	b128      	cbz	r0, 8006bae <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	d002      	beq.n	8006bae <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8006bae:	2001      	movs	r0, #1
	__asm volatile
 8006bb0:	f387 8811 	msr	BASEPRI, r7
}
 8006bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006bb8:	3601      	adds	r6, #1
 8006bba:	b276      	sxtb	r6, r6
 8006bbc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8006bc0:	e7f5      	b.n	8006bae <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	e7f4      	b.n	8006bb0 <xQueueReceiveFromISR+0x84>
	...

08006bc8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bce:	f000 fce1 	bl	8007594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c90 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8006bd4:	4e2f      	ldr	r6, [pc, #188]	@ (8006c94 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4f2f      	ldr	r7, [pc, #188]	@ (8006c98 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	3201      	adds	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006bde:	6835      	ldr	r5, [r6, #0]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	d14a      	bne.n	8006c7a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006be4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d11f      	bne.n	8006c2c <prvAddNewTaskToReadyList+0x64>
 8006bec:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bee:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bf0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bf2:	f7ff fcc0 	bl	8006576 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bf6:	2d07      	cmp	r5, #7
 8006bf8:	f108 0814 	add.w	r8, r8, #20
 8006bfc:	d1f7      	bne.n	8006bee <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bfe:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8006cc0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8006c02:	4d26      	ldr	r5, [pc, #152]	@ (8006c9c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8006c04:	4640      	mov	r0, r8
 8006c06:	f7ff fcb6 	bl	8006576 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f7ff fcb3 	bl	8006576 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c10:	4823      	ldr	r0, [pc, #140]	@ (8006ca0 <prvAddNewTaskToReadyList+0xd8>)
 8006c12:	f7ff fcb0 	bl	8006576 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c16:	4823      	ldr	r0, [pc, #140]	@ (8006ca4 <prvAddNewTaskToReadyList+0xdc>)
 8006c18:	f7ff fcad 	bl	8006576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c1c:	4822      	ldr	r0, [pc, #136]	@ (8006ca8 <prvAddNewTaskToReadyList+0xe0>)
 8006c1e:	f7ff fcaa 	bl	8006576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c22:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <prvAddNewTaskToReadyList+0xe4>)
 8006c24:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c28:	4b21      	ldr	r3, [pc, #132]	@ (8006cb0 <prvAddNewTaskToReadyList+0xe8>)
 8006c2a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006c2c:	4a21      	ldr	r2, [pc, #132]	@ (8006cb4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8006c2e:	4922      	ldr	r1, [pc, #136]	@ (8006cb8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006c30:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006c32:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8006c34:	3301      	adds	r3, #1
 8006c36:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006c38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4093      	lsls	r3, r2
 8006c3e:	4303      	orrs	r3, r0
 8006c40:	2014      	movs	r0, #20
 8006c42:	600b      	str	r3, [r1, #0]
 8006c44:	fb00 7002 	mla	r0, r0, r2, r7
 8006c48:	1d21      	adds	r1, r4, #4
 8006c4a:	f7ff fca2 	bl	8006592 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006c4e:	f000 fcc1 	bl	80075d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006c52:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <prvAddNewTaskToReadyList+0xf4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	b173      	cbz	r3, 8006c76 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c58:	6833      	ldr	r3, [r6, #0]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d209      	bcs.n	8006c76 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8006c62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
}
 8006c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006c7a:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <prvAddNewTaskToReadyList+0xf4>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006c80:	2a00      	cmp	r2, #0
 8006c82:	d1d3      	bne.n	8006c2c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c84:	6832      	ldr	r2, [r6, #0]
 8006c86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c88:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006c8a:	bf98      	it	ls
 8006c8c:	6034      	strls	r4, [r6, #0]
 8006c8e:	e7cd      	b.n	8006c2c <prvAddNewTaskToReadyList+0x64>
 8006c90:	200015d0 	.word	0x200015d0
 8006c94:	200016d0 	.word	0x200016d0
 8006c98:	20001644 	.word	0x20001644
 8006c9c:	2000161c 	.word	0x2000161c
 8006ca0:	20001600 	.word	0x20001600
 8006ca4:	200015ec 	.word	0x200015ec
 8006ca8:	200015d4 	.word	0x200015d4
 8006cac:	20001618 	.word	0x20001618
 8006cb0:	20001614 	.word	0x20001614
 8006cb4:	200015b4 	.word	0x200015b4
 8006cb8:	200015c8 	.word	0x200015c8
 8006cbc:	200015c4 	.word	0x200015c4
 8006cc0:	20001630 	.word	0x20001630

08006cc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cc8:	4d1a      	ldr	r5, [pc, #104]	@ (8006d34 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8006cca:	681c      	ldr	r4, [r3, #0]
{
 8006ccc:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cce:	6828      	ldr	r0, [r5, #0]
 8006cd0:	3004      	adds	r0, #4
{
 8006cd2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd4:	f7ff fc7f 	bl	80065d6 <uxListRemove>
 8006cd8:	b940      	cbnz	r0, 8006cec <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006cda:	682a      	ldr	r2, [r5, #0]
 8006cdc:	4916      	ldr	r1, [pc, #88]	@ (8006d38 <prvAddCurrentTaskToDelayedList+0x74>)
 8006cde:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006ce0:	680b      	ldr	r3, [r1, #0]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4082      	lsls	r2, r0
 8006ce6:	ea23 0302 	bic.w	r3, r3, r2
 8006cea:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cec:	1c73      	adds	r3, r6, #1
 8006cee:	d107      	bne.n	8006d00 <prvAddCurrentTaskToDelayedList+0x3c>
 8006cf0:	b137      	cbz	r7, 8006d00 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf2:	6829      	ldr	r1, [r5, #0]
 8006cf4:	4811      	ldr	r0, [pc, #68]	@ (8006d3c <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfa:	3104      	adds	r1, #4
 8006cfc:	f7ff bc49 	b.w	8006592 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	19a4      	adds	r4, r4, r6
 8006d04:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d06:	d307      	bcc.n	8006d18 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d08:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	6829      	ldr	r1, [r5, #0]
}
 8006d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d12:	3104      	adds	r1, #4
 8006d14:	f7ff bc48 	b.w	80065a8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d18:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <prvAddCurrentTaskToDelayedList+0x80>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	6829      	ldr	r1, [r5, #0]
 8006d1e:	3104      	adds	r1, #4
 8006d20:	f7ff fc42 	bl	80065a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d24:	4b08      	ldr	r3, [pc, #32]	@ (8006d48 <prvAddCurrentTaskToDelayedList+0x84>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006d2a:	bf88      	it	hi
 8006d2c:	601c      	strhi	r4, [r3, #0]
}
 8006d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d30:	200015cc 	.word	0x200015cc
 8006d34:	200016d0 	.word	0x200016d0
 8006d38:	200015c8 	.word	0x200015c8
 8006d3c:	200015d4 	.word	0x200015d4
 8006d40:	20001614 	.word	0x20001614
 8006d44:	20001618 	.word	0x20001618
 8006d48:	200015b0 	.word	0x200015b0

08006d4c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4c:	4a06      	ldr	r2, [pc, #24]	@ (8006d68 <prvResetNextTaskUnblockTime+0x1c>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <prvResetNextTaskUnblockTime+0x20>)
 8006d54:	b919      	cbnz	r1, 8006d5e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d5a:	601a      	str	r2, [r3, #0]
}
 8006d5c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d62:	68d2      	ldr	r2, [r2, #12]
 8006d64:	6852      	ldr	r2, [r2, #4]
 8006d66:	e7f8      	b.n	8006d5a <prvResetNextTaskUnblockTime+0xe>
 8006d68:	20001618 	.word	0x20001618
 8006d6c:	200015b0 	.word	0x200015b0

08006d70 <prvDeleteTCB>:
	{
 8006d70:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d72:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8006d76:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d78:	b93b      	cbnz	r3, 8006d8a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8006d7a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006d7c:	f000 fe02 	bl	8007984 <vPortFree>
				vPortFree( pxTCB );
 8006d80:	4620      	mov	r0, r4
	}
 8006d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006d86:	f000 bdfd 	b.w	8007984 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d0f9      	beq.n	8006d82 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d008      	beq.n	8006da4 <prvDeleteTCB+0x34>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	e7fe      	b.n	8006da2 <prvDeleteTCB+0x32>
	}
 8006da4:	bd10      	pop	{r4, pc}
	...

08006da8 <prvIdleTask>:
{
 8006da8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006daa:	4c13      	ldr	r4, [pc, #76]	@ (8006df8 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006dac:	4f13      	ldr	r7, [pc, #76]	@ (8006dfc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006dae:	4d14      	ldr	r5, [pc, #80]	@ (8006e00 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	b973      	cbnz	r3, 8006dd2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006db4:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <prvIdleTask+0x5c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d9f8      	bls.n	8006dae <prvIdleTask+0x6>
				taskYIELD();
 8006dbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	e7ed      	b.n	8006dae <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8006dd2:	f000 fbdf 	bl	8007594 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dda:	1d30      	adds	r0, r6, #4
 8006ddc:	f7ff fbfb 	bl	80065d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006dec:	f000 fbf2 	bl	80075d4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ffbd 	bl	8006d70 <prvDeleteTCB>
 8006df6:	e7db      	b.n	8006db0 <prvIdleTask+0x8>
 8006df8:	200015e8 	.word	0x200015e8
 8006dfc:	200015ec 	.word	0x200015ec
 8006e00:	200015d0 	.word	0x200015d0
 8006e04:	20001644 	.word	0x20001644

08006e08 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006e10:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006e14:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8006e16:	3a01      	subs	r2, #1
 8006e18:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006e1c:	4699      	mov	r9, r3
 8006e1e:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006e20:	1e4b      	subs	r3, r1, #1
 8006e22:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e26:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8006e2a:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e2c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006e30:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8006e34:	b108      	cbz	r0, 8006e3a <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e36:	428b      	cmp	r3, r1
 8006e38:	d1f8      	bne.n	8006e2c <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e3a:	9d08      	ldr	r5, [sp, #32]
 8006e3c:	2d06      	cmp	r5, #6
 8006e3e:	bf28      	it	cs
 8006e40:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e42:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8006e46:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8006e4a:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e4c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e4e:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e52:	f7ff fb9b 	bl	800658c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e56:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e5a:	f104 0018 	add.w	r0, r4, #24
 8006e5e:	f7ff fb95 	bl	800658c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006e62:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e66:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e68:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e6a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e6c:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e70:	464a      	mov	r2, r9
 8006e72:	4639      	mov	r1, r7
 8006e74:	4630      	mov	r0, r6
 8006e76:	f000 fb61 	bl	800753c <pxPortInitialiseStack>
 8006e7a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006e7c:	f1b8 0f00 	cmp.w	r8, #0
 8006e80:	d001      	beq.n	8006e86 <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e82:	f8c8 4000 	str.w	r4, [r8]
}
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e8a <xTaskCreateStatic>:
	{
 8006e8a:	b570      	push	{r4, r5, r6, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006e92:	b945      	cbnz	r5, 8006ea6 <xTaskCreateStatic+0x1c>
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006ea6:	b944      	cbnz	r4, 8006eba <xTaskCreateStatic+0x30>
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	e7fe      	b.n	8006eb8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eba:	2654      	movs	r6, #84	@ 0x54
 8006ebc:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ebe:	9e05      	ldr	r6, [sp, #20]
 8006ec0:	2e54      	cmp	r6, #84	@ 0x54
 8006ec2:	d008      	beq.n	8006ed6 <xTaskCreateStatic+0x4c>
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	e7fe      	b.n	8006ed4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ed6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ed8:	2502      	movs	r5, #2
 8006eda:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ede:	ad04      	add	r5, sp, #16
 8006ee0:	9501      	str	r5, [sp, #4]
 8006ee2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006ee4:	9402      	str	r4, [sp, #8]
 8006ee6:	9500      	str	r5, [sp, #0]
 8006ee8:	f7ff ff8e 	bl	8006e08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7ff fe6b 	bl	8006bc8 <prvAddNewTaskToReadyList>
	}
 8006ef2:	9804      	ldr	r0, [sp, #16]
 8006ef4:	b006      	add	sp, #24
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <xTaskCreate>:
	{
 8006ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006efc:	4607      	mov	r7, r0
 8006efe:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f00:	0090      	lsls	r0, r2, #2
	{
 8006f02:	4688      	mov	r8, r1
 8006f04:	4616      	mov	r6, r2
 8006f06:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f08:	f000 fcaa 	bl	8007860 <pvPortMalloc>
			if( pxStack != NULL )
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	b920      	cbnz	r0, 8006f1a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f14:	b005      	add	sp, #20
 8006f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f1a:	2054      	movs	r0, #84	@ 0x54
 8006f1c:	f000 fca0 	bl	8007860 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f20:	4604      	mov	r4, r0
 8006f22:	b198      	cbz	r0, 8006f4c <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f24:	2300      	movs	r3, #0
 8006f26:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8006f2c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f32:	9002      	str	r0, [sp, #8]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	4632      	mov	r2, r6
 8006f38:	464b      	mov	r3, r9
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f7ff ff63 	bl	8006e08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff fe40 	bl	8006bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f48:	2001      	movs	r0, #1
 8006f4a:	e7e3      	b.n	8006f14 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fd19 	bl	8007984 <vPortFree>
		if( pxNewTCB != NULL )
 8006f52:	e7dd      	b.n	8006f10 <xTaskCreate+0x18>

08006f54 <vTaskStartScheduler>:
{
 8006f54:	b510      	push	{r4, lr}
 8006f56:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f58:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f5a:	aa07      	add	r2, sp, #28
 8006f5c:	a906      	add	r1, sp, #24
 8006f5e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f60:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f64:	f7fb f8ae 	bl	80020c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	9302      	str	r3, [sp, #8]
 8006f6c:	9b06      	ldr	r3, [sp, #24]
 8006f6e:	9a07      	ldr	r2, [sp, #28]
 8006f70:	490f      	ldr	r1, [pc, #60]	@ (8006fb0 <vTaskStartScheduler+0x5c>)
 8006f72:	4810      	ldr	r0, [pc, #64]	@ (8006fb4 <vTaskStartScheduler+0x60>)
 8006f74:	e9cd 4300 	strd	r4, r3, [sp]
 8006f78:	4623      	mov	r3, r4
 8006f7a:	f7ff ff86 	bl	8006e8a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006f7e:	b1a8      	cbz	r0, 8006fac <vTaskStartScheduler+0x58>
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f90:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <vTaskStartScheduler+0x64>)
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f98:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <vTaskStartScheduler+0x68>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f9e:	4b08      	ldr	r3, [pc, #32]	@ (8006fc0 <vTaskStartScheduler+0x6c>)
 8006fa0:	601c      	str	r4, [r3, #0]
}
 8006fa2:	b008      	add	sp, #32
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006fa8:	f000 bb84 	b.w	80076b4 <xPortStartScheduler>
}
 8006fac:	b008      	add	sp, #32
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	0800c8b5 	.word	0x0800c8b5
 8006fb4:	08006da9 	.word	0x08006da9
 8006fb8:	200015b0 	.word	0x200015b0
 8006fbc:	200015c4 	.word	0x200015c4
 8006fc0:	200015cc 	.word	0x200015cc

08006fc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006fc4:	4a02      	ldr	r2, [pc, #8]	@ (8006fd0 <vTaskSuspendAll+0xc>)
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	6013      	str	r3, [r2, #0]
}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200015ac 	.word	0x200015ac

08006fd4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd4:	4b40      	ldr	r3, [pc, #256]	@ (80070d8 <xTaskIncrementTick+0x104>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
{
 8006fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d174      	bne.n	80070ca <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80070dc <xTaskIncrementTick+0x108>)
 8006fe2:	681c      	ldr	r4, [r3, #0]
 8006fe4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006fe6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fe8:	b9bc      	cbnz	r4, 800701a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006fea:	4b3d      	ldr	r3, [pc, #244]	@ (80070e0 <xTaskIncrementTick+0x10c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	b142      	cbz	r2, 8007004 <xTaskIncrementTick+0x30>
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	e7fe      	b.n	8007002 <xTaskIncrementTick+0x2e>
 8007004:	4a37      	ldr	r2, [pc, #220]	@ (80070e4 <xTaskIncrementTick+0x110>)
 8007006:	6819      	ldr	r1, [r3, #0]
 8007008:	6810      	ldr	r0, [r2, #0]
 800700a:	6018      	str	r0, [r3, #0]
 800700c:	6011      	str	r1, [r2, #0]
 800700e:	4a36      	ldr	r2, [pc, #216]	@ (80070e8 <xTaskIncrementTick+0x114>)
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	f7ff fe99 	bl	8006d4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800701a:	4d34      	ldr	r5, [pc, #208]	@ (80070ec <xTaskIncrementTick+0x118>)
 800701c:	4e34      	ldr	r6, [pc, #208]	@ (80070f0 <xTaskIncrementTick+0x11c>)
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	4f34      	ldr	r7, [pc, #208]	@ (80070f4 <xTaskIncrementTick+0x120>)
 8007022:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8007024:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007028:	d911      	bls.n	800704e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800702e:	2114      	movs	r1, #20
 8007030:	434a      	muls	r2, r1
 8007032:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8007034:	2a02      	cmp	r2, #2
 8007036:	bf28      	it	cs
 8007038:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800703c:	4a2e      	ldr	r2, [pc, #184]	@ (80070f8 <xTaskIncrementTick+0x124>)
 800703e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8007040:	2a00      	cmp	r2, #0
}
 8007042:	bf0c      	ite	eq
 8007044:	4658      	moveq	r0, fp
 8007046:	2001      	movne	r0, #1
 8007048:	b003      	add	sp, #12
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704e:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80070e0 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8007052:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8007100 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007056:	f8da 2000 	ldr.w	r2, [sl]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	b91a      	cbnz	r2, 8007066 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705e:	f04f 32ff 	mov.w	r2, #4294967295
 8007062:	602a      	str	r2, [r5, #0]
					break;
 8007064:	e7e1      	b.n	800702a <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007066:	f8da 2000 	ldr.w	r2, [sl]
 800706a:	68d2      	ldr	r2, [r2, #12]
 800706c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007070:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8007074:	428c      	cmp	r4, r1
 8007076:	d201      	bcs.n	800707c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8007078:	6029      	str	r1, [r5, #0]
						break;
 800707a:	e7d6      	b.n	800702a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800707c:	f108 0304 	add.w	r3, r8, #4
 8007080:	4618      	mov	r0, r3
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	f7ff faa7 	bl	80065d6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007088:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800708c:	b119      	cbz	r1, 8007096 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708e:	f108 0018 	add.w	r0, r8, #24
 8007092:	f7ff faa0 	bl	80065d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007096:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800709a:	f8d9 3000 	ldr.w	r3, [r9]
 800709e:	2201      	movs	r2, #1
 80070a0:	fa02 f100 	lsl.w	r1, r2, r0
 80070a4:	4319      	orrs	r1, r3
 80070a6:	f04f 0c14 	mov.w	ip, #20
 80070aa:	f8c9 1000 	str.w	r1, [r9]
 80070ae:	fb0c 6000 	mla	r0, ip, r0, r6
 80070b2:	9901      	ldr	r1, [sp, #4]
 80070b4:	f7ff fa6d 	bl	8006592 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070b8:	6838      	ldr	r0, [r7, #0]
 80070ba:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80070be:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80070c0:	4291      	cmp	r1, r2
 80070c2:	bf28      	it	cs
 80070c4:	f04f 0b01 	movcs.w	fp, #1
 80070c8:	e7c5      	b.n	8007056 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 80070ca:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <xTaskIncrementTick+0x128>)
 80070cc:	6813      	ldr	r3, [r2, #0]
 80070ce:	3301      	adds	r3, #1
 80070d0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80070d2:	f04f 0b00 	mov.w	fp, #0
 80070d6:	e7b1      	b.n	800703c <xTaskIncrementTick+0x68>
 80070d8:	200015ac 	.word	0x200015ac
 80070dc:	200015cc 	.word	0x200015cc
 80070e0:	20001618 	.word	0x20001618
 80070e4:	20001614 	.word	0x20001614
 80070e8:	200015b8 	.word	0x200015b8
 80070ec:	200015b0 	.word	0x200015b0
 80070f0:	20001644 	.word	0x20001644
 80070f4:	200016d0 	.word	0x200016d0
 80070f8:	200015bc 	.word	0x200015bc
 80070fc:	200015c0 	.word	0x200015c0
 8007100:	200015c8 	.word	0x200015c8

08007104 <xTaskResumeAll>:
{
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8007108:	4c31      	ldr	r4, [pc, #196]	@ (80071d0 <xTaskResumeAll+0xcc>)
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	b943      	cbnz	r3, 8007120 <xTaskResumeAll+0x1c>
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	e7fe      	b.n	800711e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8007120:	f000 fa38 	bl	8007594 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712a:	6824      	ldr	r4, [r4, #0]
 800712c:	b12c      	cbz	r4, 800713a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800712e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007130:	f000 fa50 	bl	80075d4 <vPortExitCritical>
}
 8007134:	4620      	mov	r0, r4
 8007136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800713a:	4b26      	ldr	r3, [pc, #152]	@ (80071d4 <xTaskResumeAll+0xd0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f5      	beq.n	800712e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007142:	4d25      	ldr	r5, [pc, #148]	@ (80071d8 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8007144:	4e25      	ldr	r6, [pc, #148]	@ (80071dc <xTaskResumeAll+0xd8>)
 8007146:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80071ec <xTaskResumeAll+0xe8>
 800714a:	e01f      	b.n	800718c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800714c:	68eb      	ldr	r3, [r5, #12]
 800714e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007150:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007154:	f104 0018 	add.w	r0, r4, #24
 8007158:	f7ff fa3d 	bl	80065d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800715c:	4648      	mov	r0, r9
 800715e:	f7ff fa3a 	bl	80065d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007162:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007164:	6831      	ldr	r1, [r6, #0]
 8007166:	2701      	movs	r7, #1
 8007168:	fa07 f302 	lsl.w	r3, r7, r2
 800716c:	2014      	movs	r0, #20
 800716e:	430b      	orrs	r3, r1
 8007170:	fb00 8002 	mla	r0, r0, r2, r8
 8007174:	4649      	mov	r1, r9
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	f7ff fa0b 	bl	8006592 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800717c:	4b18      	ldr	r3, [pc, #96]	@ (80071e0 <xTaskResumeAll+0xdc>)
 800717e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	429a      	cmp	r2, r3
 8007186:	d301      	bcc.n	800718c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8007188:	4b16      	ldr	r3, [pc, #88]	@ (80071e4 <xTaskResumeAll+0xe0>)
 800718a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1dc      	bne.n	800714c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007192:	b10c      	cbz	r4, 8007198 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007194:	f7ff fdda 	bl	8006d4c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007198:	4d13      	ldr	r5, [pc, #76]	@ (80071e8 <xTaskResumeAll+0xe4>)
 800719a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800719c:	b144      	cbz	r4, 80071b0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800719e:	4e11      	ldr	r6, [pc, #68]	@ (80071e4 <xTaskResumeAll+0xe0>)
 80071a0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80071a2:	f7ff ff17 	bl	8006fd4 <xTaskIncrementTick>
 80071a6:	b100      	cbz	r0, 80071aa <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80071a8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071aa:	3c01      	subs	r4, #1
 80071ac:	d1f9      	bne.n	80071a2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80071ae:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80071b0:	4b0c      	ldr	r3, [pc, #48]	@ (80071e4 <xTaskResumeAll+0xe0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ba      	beq.n	800712e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80071b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80071cc:	2401      	movs	r4, #1
 80071ce:	e7af      	b.n	8007130 <xTaskResumeAll+0x2c>
 80071d0:	200015ac 	.word	0x200015ac
 80071d4:	200015d0 	.word	0x200015d0
 80071d8:	20001600 	.word	0x20001600
 80071dc:	200015c8 	.word	0x200015c8
 80071e0:	200016d0 	.word	0x200016d0
 80071e4:	200015bc 	.word	0x200015bc
 80071e8:	200015c0 	.word	0x200015c0
 80071ec:	20001644 	.word	0x20001644

080071f0 <vTaskDelay>:
	{
 80071f0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071f2:	b950      	cbnz	r0, 800720a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80071f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
	}
 8007208:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <vTaskDelay+0x44>)
 800720c:	6819      	ldr	r1, [r3, #0]
 800720e:	b141      	cbz	r1, 8007222 <vTaskDelay+0x32>
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	e7fe      	b.n	8007220 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007222:	f7ff fecf 	bl	8006fc4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007226:	f7ff fd4d 	bl	8006cc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800722a:	f7ff ff6b 	bl	8007104 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800722e:	2800      	cmp	r0, #0
 8007230:	d0e0      	beq.n	80071f4 <vTaskDelay+0x4>
 8007232:	e7e9      	b.n	8007208 <vTaskDelay+0x18>
 8007234:	200015ac 	.word	0x200015ac

08007238 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007238:	4b17      	ldr	r3, [pc, #92]	@ (8007298 <vTaskSwitchContext+0x60>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b17      	ldr	r3, [pc, #92]	@ (800729c <vTaskSwitchContext+0x64>)
{
 800723e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007240:	b112      	cbz	r2, 8007248 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007242:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8007248:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800724a:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <vTaskSwitchContext+0x68>)
 800724c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800724e:	fab2 f282 	clz	r2, r2
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	f1c2 021f 	rsb	r2, r2, #31
 8007258:	2314      	movs	r3, #20
 800725a:	4912      	ldr	r1, [pc, #72]	@ (80072a4 <vTaskSwitchContext+0x6c>)
 800725c:	4353      	muls	r3, r2
 800725e:	18c8      	adds	r0, r1, r3
 8007260:	58cc      	ldr	r4, [r1, r3]
 8007262:	b944      	cbnz	r4, 8007276 <vTaskSwitchContext+0x3e>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	e7fe      	b.n	8007274 <vTaskSwitchContext+0x3c>
 8007276:	6844      	ldr	r4, [r0, #4]
 8007278:	3308      	adds	r3, #8
 800727a:	6864      	ldr	r4, [r4, #4]
 800727c:	6044      	str	r4, [r0, #4]
 800727e:	440b      	add	r3, r1
 8007280:	429c      	cmp	r4, r3
 8007282:	bf04      	itt	eq
 8007284:	6863      	ldreq	r3, [r4, #4]
 8007286:	6043      	streq	r3, [r0, #4]
 8007288:	2314      	movs	r3, #20
 800728a:	fb03 1102 	mla	r1, r3, r2, r1
 800728e:	684b      	ldr	r3, [r1, #4]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <vTaskSwitchContext+0x70>)
 8007294:	e7d6      	b.n	8007244 <vTaskSwitchContext+0xc>
 8007296:	bf00      	nop
 8007298:	200015ac 	.word	0x200015ac
 800729c:	200015bc 	.word	0x200015bc
 80072a0:	200015c8 	.word	0x200015c8
 80072a4:	20001644 	.word	0x20001644
 80072a8:	200016d0 	.word	0x200016d0

080072ac <vTaskPlaceOnEventList>:
{
 80072ac:	b510      	push	{r4, lr}
 80072ae:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80072b0:	b940      	cbnz	r0, 80072c4 <vTaskPlaceOnEventList+0x18>
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	e7fe      	b.n	80072c2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <vTaskPlaceOnEventList+0x30>)
 80072c6:	6819      	ldr	r1, [r3, #0]
 80072c8:	3118      	adds	r1, #24
 80072ca:	f7ff f96d 	bl	80065a8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072ce:	4620      	mov	r0, r4
 80072d0:	2101      	movs	r1, #1
}
 80072d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072d6:	f7ff bcf5 	b.w	8006cc4 <prvAddCurrentTaskToDelayedList>
 80072da:	bf00      	nop
 80072dc:	200016d0 	.word	0x200016d0

080072e0 <xTaskRemoveFromEventList>:
{
 80072e0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80072e2:	68c3      	ldr	r3, [r0, #12]
 80072e4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80072e6:	b944      	cbnz	r4, 80072fa <xTaskRemoveFromEventList+0x1a>
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	e7fe      	b.n	80072f8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072fa:	f104 0518 	add.w	r5, r4, #24
 80072fe:	4628      	mov	r0, r5
 8007300:	f7ff f969 	bl	80065d6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007304:	4b11      	ldr	r3, [pc, #68]	@ (800734c <xTaskRemoveFromEventList+0x6c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	b9e3      	cbnz	r3, 8007344 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800730a:	1d25      	adds	r5, r4, #4
 800730c:	4628      	mov	r0, r5
 800730e:	f7ff f962 	bl	80065d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007312:	490f      	ldr	r1, [pc, #60]	@ (8007350 <xTaskRemoveFromEventList+0x70>)
 8007314:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007316:	6808      	ldr	r0, [r1, #0]
 8007318:	2301      	movs	r3, #1
 800731a:	4093      	lsls	r3, r2
 800731c:	4303      	orrs	r3, r0
 800731e:	600b      	str	r3, [r1, #0]
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <xTaskRemoveFromEventList+0x74>)
 8007322:	2014      	movs	r0, #20
 8007324:	4629      	mov	r1, r5
 8007326:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800732a:	f7ff f932 	bl	8006592 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800732e:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <xTaskRemoveFromEventList+0x78>)
 8007330:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007338:	bf83      	ittte	hi
 800733a:	4b08      	ldrhi	r3, [pc, #32]	@ (800735c <xTaskRemoveFromEventList+0x7c>)
 800733c:	2001      	movhi	r0, #1
 800733e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007340:	2000      	movls	r0, #0
}
 8007342:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007344:	4806      	ldr	r0, [pc, #24]	@ (8007360 <xTaskRemoveFromEventList+0x80>)
 8007346:	4629      	mov	r1, r5
 8007348:	e7ef      	b.n	800732a <xTaskRemoveFromEventList+0x4a>
 800734a:	bf00      	nop
 800734c:	200015ac 	.word	0x200015ac
 8007350:	200015c8 	.word	0x200015c8
 8007354:	20001644 	.word	0x20001644
 8007358:	200016d0 	.word	0x200016d0
 800735c:	200015bc 	.word	0x200015bc
 8007360:	20001600 	.word	0x20001600

08007364 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007364:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <vTaskInternalSetTimeOutState+0x10>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800736a:	4b03      	ldr	r3, [pc, #12]	@ (8007378 <vTaskInternalSetTimeOutState+0x14>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6043      	str	r3, [r0, #4]
}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	200015b8 	.word	0x200015b8
 8007378:	200015cc 	.word	0x200015cc

0800737c <xTaskCheckForTimeOut>:
{
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007380:	4605      	mov	r5, r0
 8007382:	b940      	cbnz	r0, 8007396 <xTaskCheckForTimeOut+0x1a>
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	e7fe      	b.n	8007394 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007396:	b941      	cbnz	r1, 80073aa <xTaskCheckForTimeOut+0x2e>
 8007398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	e7fe      	b.n	80073a8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80073aa:	f000 f8f3 	bl	8007594 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80073ae:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <xTaskCheckForTimeOut+0x70>)
 80073b0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	d010      	beq.n	80073da <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073b8:	480d      	ldr	r0, [pc, #52]	@ (80073f0 <xTaskCheckForTimeOut+0x74>)
 80073ba:	682e      	ldr	r6, [r5, #0]
 80073bc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073be:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073c0:	4286      	cmp	r6, r0
 80073c2:	d001      	beq.n	80073c8 <xTaskCheckForTimeOut+0x4c>
 80073c4:	428a      	cmp	r2, r1
 80073c6:	d90f      	bls.n	80073e8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073c8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073ca:	4283      	cmp	r3, r0
 80073cc:	d90a      	bls.n	80073e4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80073ce:	1a5b      	subs	r3, r3, r1
 80073d0:	4413      	add	r3, r2
 80073d2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff ffc5 	bl	8007364 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80073da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80073dc:	f000 f8fa 	bl	80075d4 <vPortExitCritical>
}
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80073e8:	2401      	movs	r4, #1
 80073ea:	e7f7      	b.n	80073dc <xTaskCheckForTimeOut+0x60>
 80073ec:	200015cc 	.word	0x200015cc
 80073f0:	200015b8 	.word	0x200015b8

080073f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80073f4:	4b01      	ldr	r3, [pc, #4]	@ (80073fc <vTaskMissedYield+0x8>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	4770      	bx	lr
 80073fc:	200015bc 	.word	0x200015bc

08007400 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007400:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <xTaskGetSchedulerState+0x18>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b133      	cbz	r3, 8007414 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007406:	4b05      	ldr	r3, [pc, #20]	@ (800741c <xTaskGetSchedulerState+0x1c>)
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	fab0 f080 	clz	r0, r0
 800740e:	0940      	lsrs	r0, r0, #5
 8007410:	0040      	lsls	r0, r0, #1
 8007412:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007414:	2001      	movs	r0, #1
	}
 8007416:	4770      	bx	lr
 8007418:	200015c4 	.word	0x200015c4
 800741c:	200015ac 	.word	0x200015ac

08007420 <xTaskPriorityDisinherit>:
	{
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007422:	4604      	mov	r4, r0
 8007424:	b908      	cbnz	r0, 800742a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8007426:	2000      	movs	r0, #0
	}
 8007428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800742a:	4b22      	ldr	r3, [pc, #136]	@ (80074b4 <xTaskPriorityDisinherit+0x94>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4283      	cmp	r3, r0
 8007430:	d008      	beq.n	8007444 <xTaskPriorityDisinherit+0x24>
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	e7fe      	b.n	8007442 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007446:	b943      	cbnz	r3, 800745a <xTaskPriorityDisinherit+0x3a>
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	e7fe      	b.n	8007458 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800745a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800745c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800745e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007460:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007462:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007464:	d0df      	beq.n	8007426 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1dd      	bne.n	8007426 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800746a:	1d06      	adds	r6, r0, #4
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff f8b2 	bl	80065d6 <uxListRemove>
 8007472:	4f11      	ldr	r7, [pc, #68]	@ (80074b8 <xTaskPriorityDisinherit+0x98>)
 8007474:	4a11      	ldr	r2, [pc, #68]	@ (80074bc <xTaskPriorityDisinherit+0x9c>)
 8007476:	b950      	cbnz	r0, 800748e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007478:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800747a:	2314      	movs	r3, #20
 800747c:	434b      	muls	r3, r1
 800747e:	58fb      	ldr	r3, [r7, r3]
 8007480:	b92b      	cbnz	r3, 800748e <xTaskPriorityDisinherit+0x6e>
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	2501      	movs	r5, #1
 8007486:	408d      	lsls	r5, r1
 8007488:	ea23 0305 	bic.w	r3, r3, r5
 800748c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800748e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007490:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007492:	f1c3 0107 	rsb	r1, r3, #7
 8007496:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007498:	6811      	ldr	r1, [r2, #0]
 800749a:	2401      	movs	r4, #1
 800749c:	fa04 f503 	lsl.w	r5, r4, r3
 80074a0:	2014      	movs	r0, #20
 80074a2:	430d      	orrs	r5, r1
 80074a4:	fb00 7003 	mla	r0, r0, r3, r7
 80074a8:	4631      	mov	r1, r6
 80074aa:	6015      	str	r5, [r2, #0]
 80074ac:	f7ff f871 	bl	8006592 <vListInsertEnd>
					xReturn = pdTRUE;
 80074b0:	4620      	mov	r0, r4
		return xReturn;
 80074b2:	e7b9      	b.n	8007428 <xTaskPriorityDisinherit+0x8>
 80074b4:	200016d0 	.word	0x200016d0
 80074b8:	20001644 	.word	0x20001644
 80074bc:	200015c8 	.word	0x200015c8

080074c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074c0:	4808      	ldr	r0, [pc, #32]	@ (80074e4 <prvPortStartFirstTask+0x24>)
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	6800      	ldr	r0, [r0, #0]
 80074c6:	f380 8808 	msr	MSP, r0
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f380 8814 	msr	CONTROL, r0
 80074d2:	b662      	cpsie	i
 80074d4:	b661      	cpsie	f
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	df00      	svc	0
 80074e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074e2:	0000      	.short	0x0000
 80074e4:	e000ed08 	.word	0xe000ed08

080074e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80074f8 <vPortEnableVFP+0x10>
 80074ec:	6801      	ldr	r1, [r0, #0]
 80074ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80074f2:	6001      	str	r1, [r0, #0]
 80074f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074f6:	0000      	.short	0x0000
 80074f8:	e000ed88 	.word	0xe000ed88

080074fc <prvTaskExitError>:
{
 80074fc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007502:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <prvTaskExitError+0x3c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	d008      	beq.n	800751c <prvTaskExitError+0x20>
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	e7fe      	b.n	800751a <prvTaskExitError+0x1e>
 800751c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800752c:	9b01      	ldr	r3, [sp, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0fc      	beq.n	800752c <prvTaskExitError+0x30>
}
 8007532:	b002      	add	sp, #8
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000014 	.word	0x20000014

0800753c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800753c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007540:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007544:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <pxPortInitialiseStack+0x28>)
 8007546:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800754a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800754e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007552:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007556:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800755a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800755e:	3844      	subs	r0, #68	@ 0x44
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	080074fd 	.word	0x080074fd
	...

08007570 <SVC_Handler>:
	__asm volatile (
 8007570:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <pxCurrentTCBConst2>)
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	6808      	ldr	r0, [r1, #0]
 8007576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757a:	f380 8809 	msr	PSP, r0
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8811 	msr	BASEPRI, r0
 800758a:	4770      	bx	lr
 800758c:	f3af 8000 	nop.w

08007590 <pxCurrentTCBConst2>:
 8007590:	200016d0 	.word	0x200016d0

08007594 <vPortEnterCritical>:
 8007594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80075a4:	4a0a      	ldr	r2, [pc, #40]	@ (80075d0 <vPortEnterCritical+0x3c>)
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80075aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80075ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80075ae:	d10e      	bne.n	80075ce <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	b143      	cbz	r3, 80075ce <vPortEnterCritical+0x3a>
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	e7fe      	b.n	80075cc <vPortEnterCritical+0x38>
}
 80075ce:	4770      	bx	lr
 80075d0:	20000014 	.word	0x20000014

080075d4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80075d4:	4a08      	ldr	r2, [pc, #32]	@ (80075f8 <vPortExitCritical+0x24>)
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	b943      	cbnz	r3, 80075ec <vPortExitCritical+0x18>
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	e7fe      	b.n	80075ea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80075ec:	3b01      	subs	r3, #1
 80075ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075f0:	b90b      	cbnz	r3, 80075f6 <vPortExitCritical+0x22>
	__asm volatile
 80075f2:	f383 8811 	msr	BASEPRI, r3
}
 80075f6:	4770      	bx	lr
 80075f8:	20000014 	.word	0x20000014
 80075fc:	00000000 	.word	0x00000000

08007600 <PendSV_Handler>:
	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b15      	ldr	r3, [pc, #84]	@ (8007660 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f01e 0f10 	tst.w	lr, #16
 8007610:	bf08      	it	eq
 8007612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	6010      	str	r0, [r2, #0]
 800761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007624:	f380 8811 	msr	BASEPRI, r0
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f7ff fe02 	bl	8007238 <vTaskSwitchContext>
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f380 8811 	msr	BASEPRI, r0
 800763c:	bc09      	pop	{r0, r3}
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	6808      	ldr	r0, [r1, #0]
 8007642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007646:	f01e 0f10 	tst.w	lr, #16
 800764a:	bf08      	it	eq
 800764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007650:	f380 8809 	msr	PSP, r0
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w

08007660 <pxCurrentTCBConst>:
 8007660:	200016d0 	.word	0x200016d0

08007664 <SysTick_Handler>:
{
 8007664:	b508      	push	{r3, lr}
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007676:	f7ff fcad 	bl	8006fd4 <xTaskIncrementTick>
 800767a:	b128      	cbz	r0, 8007688 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007684:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007688:	2300      	movs	r3, #0
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bd08      	pop	{r3, pc}

08007690 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007690:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007694:	2300      	movs	r3, #0
 8007696:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007698:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800769a:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <vPortSetupTimerInterrupt+0x20>)
 800769c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076a6:	3b01      	subs	r3, #1
 80076a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076aa:	2307      	movs	r3, #7
 80076ac:	6113      	str	r3, [r2, #16]
}
 80076ae:	4770      	bx	lr
 80076b0:	20000008 	.word	0x20000008

080076b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80076b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076ba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80076be:	4a38      	ldr	r2, [pc, #224]	@ (80077a0 <xPortStartScheduler+0xec>)
 80076c0:	4291      	cmp	r1, r2
 80076c2:	d108      	bne.n	80076d6 <xPortStartScheduler+0x22>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	e7fe      	b.n	80076d4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80076da:	4b32      	ldr	r3, [pc, #200]	@ (80077a4 <xPortStartScheduler+0xf0>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d108      	bne.n	80076f2 <xPortStartScheduler+0x3e>
 80076e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	e7fe      	b.n	80076f0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076f2:	4b2d      	ldr	r3, [pc, #180]	@ (80077a8 <xPortStartScheduler+0xf4>)
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076fa:	22ff      	movs	r2, #255	@ 0xff
 80076fc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076fe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007700:	4a2a      	ldr	r2, [pc, #168]	@ (80077ac <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007708:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800770c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007710:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007712:	4a27      	ldr	r2, [pc, #156]	@ (80077b0 <xPortStartScheduler+0xfc>)
 8007714:	2307      	movs	r3, #7
 8007716:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007718:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800771c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800771e:	0609      	lsls	r1, r1, #24
 8007720:	d40a      	bmi.n	8007738 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007722:	2b03      	cmp	r3, #3
 8007724:	d011      	beq.n	800774a <xPortStartScheduler+0x96>
 8007726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	e7fe      	b.n	8007736 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007738:	3b01      	subs	r3, #1
 800773a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800773c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f88d 3003 	strb.w	r3, [sp, #3]
 8007748:	e7e6      	b.n	8007718 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800774a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800774e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007754:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007758:	b2db      	uxtb	r3, r3
 800775a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800775c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007764:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007768:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800776c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007770:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007774:	f7ff ff8c 	bl	8007690 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007778:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <xPortStartScheduler+0x100>)
 800777a:	2500      	movs	r5, #0
 800777c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800777e:	f7ff feb3 	bl	80074e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007782:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007786:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800778a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800778e:	f7ff fe97 	bl	80074c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007792:	f7ff fd51 	bl	8007238 <vTaskSwitchContext>
	prvTaskExitError();
 8007796:	f7ff feb1 	bl	80074fc <prvTaskExitError>
}
 800779a:	4628      	mov	r0, r5
 800779c:	b003      	add	sp, #12
 800779e:	bd30      	pop	{r4, r5, pc}
 80077a0:	410fc271 	.word	0x410fc271
 80077a4:	410fc270 	.word	0x410fc270
 80077a8:	e000e400 	.word	0xe000e400
 80077ac:	200016d8 	.word	0x200016d8
 80077b0:	200016d4 	.word	0x200016d4
 80077b4:	20000014 	.word	0x20000014

080077b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077bc:	2b0f      	cmp	r3, #15
 80077be:	d90e      	bls.n	80077de <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077c0:	4a11      	ldr	r2, [pc, #68]	@ (8007808 <vPortValidateInterruptPriority+0x50>)
 80077c2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077c4:	4a11      	ldr	r2, [pc, #68]	@ (800780c <vPortValidateInterruptPriority+0x54>)
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d908      	bls.n	80077de <vPortValidateInterruptPriority+0x26>
 80077cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	e7fe      	b.n	80077dc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80077e2:	4a0b      	ldr	r2, [pc, #44]	@ (8007810 <vPortValidateInterruptPriority+0x58>)
 80077e4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d908      	bls.n	8007804 <vPortValidateInterruptPriority+0x4c>
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	e7fe      	b.n	8007802 <vPortValidateInterruptPriority+0x4a>
	}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	e000e3f0 	.word	0xe000e3f0
 800780c:	200016d8 	.word	0x200016d8
 8007810:	200016d4 	.word	0x200016d4

08007814 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007814:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007816:	4b10      	ldr	r3, [pc, #64]	@ (8007858 <prvInsertBlockIntoFreeList+0x44>)
 8007818:	461a      	mov	r2, r3
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4283      	cmp	r3, r0
 800781e:	d3fb      	bcc.n	8007818 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007820:	6854      	ldr	r4, [r2, #4]
 8007822:	1911      	adds	r1, r2, r4
 8007824:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007826:	bf01      	itttt	eq
 8007828:	6841      	ldreq	r1, [r0, #4]
 800782a:	4610      	moveq	r0, r2
 800782c:	1909      	addeq	r1, r1, r4
 800782e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007830:	6844      	ldr	r4, [r0, #4]
 8007832:	1901      	adds	r1, r0, r4
 8007834:	428b      	cmp	r3, r1
 8007836:	d10c      	bne.n	8007852 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007838:	4908      	ldr	r1, [pc, #32]	@ (800785c <prvInsertBlockIntoFreeList+0x48>)
 800783a:	6809      	ldr	r1, [r1, #0]
 800783c:	428b      	cmp	r3, r1
 800783e:	d003      	beq.n	8007848 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	4421      	add	r1, r4
 8007844:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007846:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007848:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800784a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800784c:	bf18      	it	ne
 800784e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007850:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007852:	4619      	mov	r1, r3
 8007854:	e7f8      	b.n	8007848 <prvInsertBlockIntoFreeList+0x34>
 8007856:	bf00      	nop
 8007858:	200016ec 	.word	0x200016ec
 800785c:	200016e8 	.word	0x200016e8

08007860 <pvPortMalloc>:
{
 8007860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007866:	f7ff fbad 	bl	8006fc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800786a:	493f      	ldr	r1, [pc, #252]	@ (8007968 <pvPortMalloc+0x108>)
 800786c:	4d3f      	ldr	r5, [pc, #252]	@ (800796c <pvPortMalloc+0x10c>)
 800786e:	680b      	ldr	r3, [r1, #0]
 8007870:	b9fb      	cbnz	r3, 80078b2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8007872:	4a3f      	ldr	r2, [pc, #252]	@ (8007970 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007874:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007876:	bf1c      	itt	ne
 8007878:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800787a:	4b3e      	ldrne	r3, [pc, #248]	@ (8007974 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800787c:	4e3e      	ldr	r6, [pc, #248]	@ (8007978 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800787e:	bf1a      	itte	ne
 8007880:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007884:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007886:	f243 5320 	movweq	r3, #13600	@ 0x3520
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800788a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800788c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007892:	2000      	movs	r0, #0
 8007894:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007896:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007898:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800789c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800789e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80078a2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078a4:	4b35      	ldr	r3, [pc, #212]	@ (800797c <pvPortMalloc+0x11c>)
 80078a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078a8:	4b35      	ldr	r3, [pc, #212]	@ (8007980 <pvPortMalloc+0x120>)
 80078aa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078b0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b2:	682e      	ldr	r6, [r5, #0]
 80078b4:	4226      	tst	r6, r4
 80078b6:	d152      	bne.n	800795e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 80078b8:	2c00      	cmp	r4, #0
 80078ba:	d043      	beq.n	8007944 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80078bc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078c2:	bf1c      	itt	ne
 80078c4:	f023 0307 	bicne.w	r3, r3, #7
 80078c8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d047      	beq.n	800795e <pvPortMalloc+0xfe>
 80078ce:	4f2c      	ldr	r7, [pc, #176]	@ (8007980 <pvPortMalloc+0x120>)
 80078d0:	683c      	ldr	r4, [r7, #0]
 80078d2:	429c      	cmp	r4, r3
 80078d4:	d343      	bcc.n	800795e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 80078d6:	4a28      	ldr	r2, [pc, #160]	@ (8007978 <pvPortMalloc+0x118>)
 80078d8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078da:	6868      	ldr	r0, [r5, #4]
 80078dc:	4298      	cmp	r0, r3
 80078de:	d204      	bcs.n	80078ea <pvPortMalloc+0x8a>
 80078e0:	f8d5 c000 	ldr.w	ip, [r5]
 80078e4:	f1bc 0f00 	cmp.w	ip, #0
 80078e8:	d115      	bne.n	8007916 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 80078ea:	6809      	ldr	r1, [r1, #0]
 80078ec:	42a9      	cmp	r1, r5
 80078ee:	d036      	beq.n	800795e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078f2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078f8:	1ac2      	subs	r2, r0, r3
 80078fa:	2a10      	cmp	r2, #16
 80078fc:	d912      	bls.n	8007924 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007900:	0741      	lsls	r1, r0, #29
 8007902:	d00b      	beq.n	800791c <pvPortMalloc+0xbc>
 8007904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	e7fe      	b.n	8007914 <pvPortMalloc+0xb4>
 8007916:	462a      	mov	r2, r5
 8007918:	4665      	mov	r5, ip
 800791a:	e7de      	b.n	80078da <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800791c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800791e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007920:	f7ff ff78 	bl	8007814 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007924:	4915      	ldr	r1, [pc, #84]	@ (800797c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007926:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007928:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800792a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800792c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800792e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8007932:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007936:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007938:	bf38      	it	cc
 800793a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800793c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800793e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8007942:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007944:	f7ff fbde 	bl	8007104 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007948:	0763      	lsls	r3, r4, #29
 800794a:	d00a      	beq.n	8007962 <pvPortMalloc+0x102>
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	e7fe      	b.n	800795c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 800795e:	2400      	movs	r4, #0
 8007960:	e7f0      	b.n	8007944 <pvPortMalloc+0xe4>
}
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	200016e8 	.word	0x200016e8
 800796c:	200016dc 	.word	0x200016dc
 8007970:	200016f4 	.word	0x200016f4
 8007974:	20004c14 	.word	0x20004c14
 8007978:	200016ec 	.word	0x200016ec
 800797c:	200016e0 	.word	0x200016e0
 8007980:	200016e4 	.word	0x200016e4

08007984 <vPortFree>:
{
 8007984:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007986:	4604      	mov	r4, r0
 8007988:	b370      	cbz	r0, 80079e8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <vPortFree+0x68>)
 800798c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	4213      	tst	r3, r2
 8007994:	d108      	bne.n	80079a8 <vPortFree+0x24>
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	e7fe      	b.n	80079a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80079ac:	b141      	cbz	r1, 80079c0 <vPortFree+0x3c>
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	e7fe      	b.n	80079be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c0:	ea23 0302 	bic.w	r3, r3, r2
 80079c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80079c8:	f7ff fafc 	bl	8006fc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079cc:	4a08      	ldr	r2, [pc, #32]	@ (80079f0 <vPortFree+0x6c>)
 80079ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80079d2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079d4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079d8:	440b      	add	r3, r1
 80079da:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079dc:	f7ff ff1a 	bl	8007814 <prvInsertBlockIntoFreeList>
}
 80079e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80079e4:	f7ff bb8e 	b.w	8007104 <xTaskResumeAll>
}
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	200016dc 	.word	0x200016dc
 80079f0:	200016e4 	.word	0x200016e4

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	@ (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 b82d 	b.w	8007a58 <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	20000198 	.word	0x20000198

08007a04 <free>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	@ (8007a10 <free+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f002 bb15 	b.w	800a038 <_free_r>
 8007a0e:	bf00      	nop
 8007a10:	20000198 	.word	0x20000198

08007a14 <sbrk_aligned>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0f      	ldr	r6, [pc, #60]	@ (8007a54 <sbrk_aligned+0x40>)
 8007a18:	460c      	mov	r4, r1
 8007a1a:	6831      	ldr	r1, [r6, #0]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	b911      	cbnz	r1, 8007a26 <sbrk_aligned+0x12>
 8007a20:	f001 fc4e 	bl	80092c0 <_sbrk_r>
 8007a24:	6030      	str	r0, [r6, #0]
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f001 fc49 	bl	80092c0 <_sbrk_r>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	d103      	bne.n	8007a3a <sbrk_aligned+0x26>
 8007a32:	f04f 34ff 	mov.w	r4, #4294967295
 8007a36:	4620      	mov	r0, r4
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	1cc4      	adds	r4, r0, #3
 8007a3c:	f024 0403 	bic.w	r4, r4, #3
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	d0f8      	beq.n	8007a36 <sbrk_aligned+0x22>
 8007a44:	1a21      	subs	r1, r4, r0
 8007a46:	4628      	mov	r0, r5
 8007a48:	f001 fc3a 	bl	80092c0 <_sbrk_r>
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1f2      	bne.n	8007a36 <sbrk_aligned+0x22>
 8007a50:	e7ef      	b.n	8007a32 <sbrk_aligned+0x1e>
 8007a52:	bf00      	nop
 8007a54:	20004c14 	.word	0x20004c14

08007a58 <_malloc_r>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	1ccd      	adds	r5, r1, #3
 8007a5e:	f025 0503 	bic.w	r5, r5, #3
 8007a62:	3508      	adds	r5, #8
 8007a64:	2d0c      	cmp	r5, #12
 8007a66:	bf38      	it	cc
 8007a68:	250c      	movcc	r5, #12
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	db01      	blt.n	8007a74 <_malloc_r+0x1c>
 8007a70:	42a9      	cmp	r1, r5
 8007a72:	d904      	bls.n	8007a7e <_malloc_r+0x26>
 8007a74:	230c      	movs	r3, #12
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b54 <_malloc_r+0xfc>
 8007a82:	f000 f869 	bl	8007b58 <__malloc_lock>
 8007a86:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	bb44      	cbnz	r4, 8007ae0 <_malloc_r+0x88>
 8007a8e:	4629      	mov	r1, r5
 8007a90:	4630      	mov	r0, r6
 8007a92:	f7ff ffbf 	bl	8007a14 <sbrk_aligned>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d158      	bne.n	8007b4e <_malloc_r+0xf6>
 8007a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007aa0:	4627      	mov	r7, r4
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	d143      	bne.n	8007b2e <_malloc_r+0xd6>
 8007aa6:	2c00      	cmp	r4, #0
 8007aa8:	d04b      	beq.n	8007b42 <_malloc_r+0xea>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	eb04 0903 	add.w	r9, r4, r3
 8007ab4:	f001 fc04 	bl	80092c0 <_sbrk_r>
 8007ab8:	4581      	cmp	r9, r0
 8007aba:	d142      	bne.n	8007b42 <_malloc_r+0xea>
 8007abc:	6821      	ldr	r1, [r4, #0]
 8007abe:	1a6d      	subs	r5, r5, r1
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ffa6 	bl	8007a14 <sbrk_aligned>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d03a      	beq.n	8007b42 <_malloc_r+0xea>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	442b      	add	r3, r5
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	bb62      	cbnz	r2, 8007b34 <_malloc_r+0xdc>
 8007ada:	f8c8 7000 	str.w	r7, [r8]
 8007ade:	e00f      	b.n	8007b00 <_malloc_r+0xa8>
 8007ae0:	6822      	ldr	r2, [r4, #0]
 8007ae2:	1b52      	subs	r2, r2, r5
 8007ae4:	d420      	bmi.n	8007b28 <_malloc_r+0xd0>
 8007ae6:	2a0b      	cmp	r2, #11
 8007ae8:	d917      	bls.n	8007b1a <_malloc_r+0xc2>
 8007aea:	1961      	adds	r1, r4, r5
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	6025      	str	r5, [r4, #0]
 8007af0:	bf18      	it	ne
 8007af2:	6059      	strne	r1, [r3, #4]
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	bf08      	it	eq
 8007af8:	f8c8 1000 	streq.w	r1, [r8]
 8007afc:	5162      	str	r2, [r4, r5]
 8007afe:	604b      	str	r3, [r1, #4]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f82f 	bl	8007b64 <__malloc_unlock>
 8007b06:	f104 000b 	add.w	r0, r4, #11
 8007b0a:	1d23      	adds	r3, r4, #4
 8007b0c:	f020 0007 	bic.w	r0, r0, #7
 8007b10:	1ac2      	subs	r2, r0, r3
 8007b12:	bf1c      	itt	ne
 8007b14:	1a1b      	subne	r3, r3, r0
 8007b16:	50a3      	strne	r3, [r4, r2]
 8007b18:	e7af      	b.n	8007a7a <_malloc_r+0x22>
 8007b1a:	6862      	ldr	r2, [r4, #4]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	bf0c      	ite	eq
 8007b20:	f8c8 2000 	streq.w	r2, [r8]
 8007b24:	605a      	strne	r2, [r3, #4]
 8007b26:	e7eb      	b.n	8007b00 <_malloc_r+0xa8>
 8007b28:	4623      	mov	r3, r4
 8007b2a:	6864      	ldr	r4, [r4, #4]
 8007b2c:	e7ae      	b.n	8007a8c <_malloc_r+0x34>
 8007b2e:	463c      	mov	r4, r7
 8007b30:	687f      	ldr	r7, [r7, #4]
 8007b32:	e7b6      	b.n	8007aa2 <_malloc_r+0x4a>
 8007b34:	461a      	mov	r2, r3
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d1fb      	bne.n	8007b34 <_malloc_r+0xdc>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6053      	str	r3, [r2, #4]
 8007b40:	e7de      	b.n	8007b00 <_malloc_r+0xa8>
 8007b42:	230c      	movs	r3, #12
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 f80c 	bl	8007b64 <__malloc_unlock>
 8007b4c:	e794      	b.n	8007a78 <_malloc_r+0x20>
 8007b4e:	6005      	str	r5, [r0, #0]
 8007b50:	e7d6      	b.n	8007b00 <_malloc_r+0xa8>
 8007b52:	bf00      	nop
 8007b54:	20004c18 	.word	0x20004c18

08007b58 <__malloc_lock>:
 8007b58:	4801      	ldr	r0, [pc, #4]	@ (8007b60 <__malloc_lock+0x8>)
 8007b5a:	f001 bbff 	b.w	800935c <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20004d82 	.word	0x20004d82

08007b64 <__malloc_unlock>:
 8007b64:	4801      	ldr	r0, [pc, #4]	@ (8007b6c <__malloc_unlock+0x8>)
 8007b66:	f001 bbfb 	b.w	8009360 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	20004d82 	.word	0x20004d82

08007b70 <__cvt>:
 8007b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	ec57 6b10 	vmov	r6, r7, d0
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	463b      	mov	r3, r7
 8007b80:	bfbb      	ittet	lt
 8007b82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b86:	461f      	movlt	r7, r3
 8007b88:	2300      	movge	r3, #0
 8007b8a:	232d      	movlt	r3, #45	@ 0x2d
 8007b8c:	700b      	strb	r3, [r1, #0]
 8007b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b94:	4691      	mov	r9, r2
 8007b96:	f023 0820 	bic.w	r8, r3, #32
 8007b9a:	bfbc      	itt	lt
 8007b9c:	4632      	movlt	r2, r6
 8007b9e:	4616      	movlt	r6, r2
 8007ba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ba4:	d005      	beq.n	8007bb2 <__cvt+0x42>
 8007ba6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007baa:	d100      	bne.n	8007bae <__cvt+0x3e>
 8007bac:	3401      	adds	r4, #1
 8007bae:	2102      	movs	r1, #2
 8007bb0:	e000      	b.n	8007bb4 <__cvt+0x44>
 8007bb2:	2103      	movs	r1, #3
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	ab02      	add	r3, sp, #8
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	ec47 6b10 	vmov	d0, r6, r7
 8007bc0:	4653      	mov	r3, sl
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	f001 fc74 	bl	80094b0 <_dtoa_r>
 8007bc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bcc:	4605      	mov	r5, r0
 8007bce:	d119      	bne.n	8007c04 <__cvt+0x94>
 8007bd0:	f019 0f01 	tst.w	r9, #1
 8007bd4:	d00e      	beq.n	8007bf4 <__cvt+0x84>
 8007bd6:	eb00 0904 	add.w	r9, r0, r4
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f8 ff81 	bl	8000ae8 <__aeabi_dcmpeq>
 8007be6:	b108      	cbz	r0, 8007bec <__cvt+0x7c>
 8007be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bec:	2230      	movs	r2, #48	@ 0x30
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	454b      	cmp	r3, r9
 8007bf2:	d31e      	bcc.n	8007c32 <__cvt+0xc2>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bf8:	1b5b      	subs	r3, r3, r5
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	b004      	add	sp, #16
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c08:	eb00 0904 	add.w	r9, r0, r4
 8007c0c:	d1e5      	bne.n	8007bda <__cvt+0x6a>
 8007c0e:	7803      	ldrb	r3, [r0, #0]
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d10a      	bne.n	8007c2a <__cvt+0xba>
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7f8 ff64 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c20:	b918      	cbnz	r0, 8007c2a <__cvt+0xba>
 8007c22:	f1c4 0401 	rsb	r4, r4, #1
 8007c26:	f8ca 4000 	str.w	r4, [sl]
 8007c2a:	f8da 3000 	ldr.w	r3, [sl]
 8007c2e:	4499      	add	r9, r3
 8007c30:	e7d3      	b.n	8007bda <__cvt+0x6a>
 8007c32:	1c59      	adds	r1, r3, #1
 8007c34:	9103      	str	r1, [sp, #12]
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e7d9      	b.n	8007bee <__cvt+0x7e>

08007c3a <__exponent>:
 8007c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	bfba      	itte	lt
 8007c40:	4249      	neglt	r1, r1
 8007c42:	232d      	movlt	r3, #45	@ 0x2d
 8007c44:	232b      	movge	r3, #43	@ 0x2b
 8007c46:	2909      	cmp	r1, #9
 8007c48:	7002      	strb	r2, [r0, #0]
 8007c4a:	7043      	strb	r3, [r0, #1]
 8007c4c:	dd29      	ble.n	8007ca2 <__exponent+0x68>
 8007c4e:	f10d 0307 	add.w	r3, sp, #7
 8007c52:	461d      	mov	r5, r3
 8007c54:	270a      	movs	r7, #10
 8007c56:	461a      	mov	r2, r3
 8007c58:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c5c:	fb07 1416 	mls	r4, r7, r6, r1
 8007c60:	3430      	adds	r4, #48	@ 0x30
 8007c62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c66:	460c      	mov	r4, r1
 8007c68:	2c63      	cmp	r4, #99	@ 0x63
 8007c6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c6e:	4631      	mov	r1, r6
 8007c70:	dcf1      	bgt.n	8007c56 <__exponent+0x1c>
 8007c72:	3130      	adds	r1, #48	@ 0x30
 8007c74:	1e94      	subs	r4, r2, #2
 8007c76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c7a:	1c41      	adds	r1, r0, #1
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	42ab      	cmp	r3, r5
 8007c80:	d30a      	bcc.n	8007c98 <__exponent+0x5e>
 8007c82:	f10d 0309 	add.w	r3, sp, #9
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	42ac      	cmp	r4, r5
 8007c8a:	bf88      	it	hi
 8007c8c:	2300      	movhi	r3, #0
 8007c8e:	3302      	adds	r3, #2
 8007c90:	4403      	add	r3, r0
 8007c92:	1a18      	subs	r0, r3, r0
 8007c94:	b003      	add	sp, #12
 8007c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ca0:	e7ed      	b.n	8007c7e <__exponent+0x44>
 8007ca2:	2330      	movs	r3, #48	@ 0x30
 8007ca4:	3130      	adds	r1, #48	@ 0x30
 8007ca6:	7083      	strb	r3, [r0, #2]
 8007ca8:	70c1      	strb	r1, [r0, #3]
 8007caa:	1d03      	adds	r3, r0, #4
 8007cac:	e7f1      	b.n	8007c92 <__exponent+0x58>
	...

08007cb0 <_printf_float>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b08d      	sub	sp, #52	@ 0x34
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f001 fac5 	bl	8009250 <_localeconv_r>
 8007cc6:	6803      	ldr	r3, [r0, #0]
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7f8 fae0 	bl	8000290 <strlen>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	9005      	str	r0, [sp, #20]
 8007cda:	3307      	adds	r3, #7
 8007cdc:	f023 0307 	bic.w	r3, r3, #7
 8007ce0:	f103 0208 	add.w	r2, r3, #8
 8007ce4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ce8:	f8d4 b000 	ldr.w	fp, [r4]
 8007cec:	f8c8 2000 	str.w	r2, [r8]
 8007cf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d06:	4b9c      	ldr	r3, [pc, #624]	@ (8007f78 <_printf_float+0x2c8>)
 8007d08:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0c:	f7f8 ff1e 	bl	8000b4c <__aeabi_dcmpun>
 8007d10:	bb70      	cbnz	r0, 8007d70 <_printf_float+0xc0>
 8007d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d16:	4b98      	ldr	r3, [pc, #608]	@ (8007f78 <_printf_float+0x2c8>)
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	f7f8 fef8 	bl	8000b10 <__aeabi_dcmple>
 8007d20:	bb30      	cbnz	r0, 8007d70 <_printf_float+0xc0>
 8007d22:	2200      	movs	r2, #0
 8007d24:	2300      	movs	r3, #0
 8007d26:	4640      	mov	r0, r8
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f7f8 fee7 	bl	8000afc <__aeabi_dcmplt>
 8007d2e:	b110      	cbz	r0, 8007d36 <_printf_float+0x86>
 8007d30:	232d      	movs	r3, #45	@ 0x2d
 8007d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d36:	4a91      	ldr	r2, [pc, #580]	@ (8007f7c <_printf_float+0x2cc>)
 8007d38:	4b91      	ldr	r3, [pc, #580]	@ (8007f80 <_printf_float+0x2d0>)
 8007d3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d3e:	bf94      	ite	ls
 8007d40:	4690      	movls	r8, r2
 8007d42:	4698      	movhi	r8, r3
 8007d44:	2303      	movs	r3, #3
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	f02b 0304 	bic.w	r3, fp, #4
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	9700      	str	r7, [sp, #0]
 8007d54:	4633      	mov	r3, r6
 8007d56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f9d2 	bl	8008104 <_printf_common>
 8007d60:	3001      	adds	r0, #1
 8007d62:	f040 808d 	bne.w	8007e80 <_printf_float+0x1d0>
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	b00d      	add	sp, #52	@ 0x34
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	4642      	mov	r2, r8
 8007d72:	464b      	mov	r3, r9
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 fee8 	bl	8000b4c <__aeabi_dcmpun>
 8007d7c:	b140      	cbz	r0, 8007d90 <_printf_float+0xe0>
 8007d7e:	464b      	mov	r3, r9
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfbc      	itt	lt
 8007d84:	232d      	movlt	r3, #45	@ 0x2d
 8007d86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f84 <_printf_float+0x2d4>)
 8007d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f88 <_printf_float+0x2d8>)
 8007d8e:	e7d4      	b.n	8007d3a <_printf_float+0x8a>
 8007d90:	6863      	ldr	r3, [r4, #4]
 8007d92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d96:	9206      	str	r2, [sp, #24]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	d13b      	bne.n	8007e14 <_printf_float+0x164>
 8007d9c:	2306      	movs	r3, #6
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007da4:	2300      	movs	r3, #0
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007db0:	ab09      	add	r3, sp, #36	@ 0x24
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	6861      	ldr	r1, [r4, #4]
 8007db6:	ec49 8b10 	vmov	d0, r8, r9
 8007dba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f7ff fed6 	bl	8007b70 <__cvt>
 8007dc4:	9b06      	ldr	r3, [sp, #24]
 8007dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dc8:	2b47      	cmp	r3, #71	@ 0x47
 8007dca:	4680      	mov	r8, r0
 8007dcc:	d129      	bne.n	8007e22 <_printf_float+0x172>
 8007dce:	1cc8      	adds	r0, r1, #3
 8007dd0:	db02      	blt.n	8007dd8 <_printf_float+0x128>
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	dd41      	ble.n	8007e5c <_printf_float+0x1ac>
 8007dd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ddc:	fa5f fa8a 	uxtb.w	sl, sl
 8007de0:	3901      	subs	r1, #1
 8007de2:	4652      	mov	r2, sl
 8007de4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007de8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dea:	f7ff ff26 	bl	8007c3a <__exponent>
 8007dee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007df0:	1813      	adds	r3, r2, r0
 8007df2:	2a01      	cmp	r2, #1
 8007df4:	4681      	mov	r9, r0
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	dc02      	bgt.n	8007e00 <_printf_float+0x150>
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	07d2      	lsls	r2, r2, #31
 8007dfe:	d501      	bpl.n	8007e04 <_printf_float+0x154>
 8007e00:	3301      	adds	r3, #1
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0a2      	beq.n	8007d52 <_printf_float+0xa2>
 8007e0c:	232d      	movs	r3, #45	@ 0x2d
 8007e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e12:	e79e      	b.n	8007d52 <_printf_float+0xa2>
 8007e14:	9a06      	ldr	r2, [sp, #24]
 8007e16:	2a47      	cmp	r2, #71	@ 0x47
 8007e18:	d1c2      	bne.n	8007da0 <_printf_float+0xf0>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1c0      	bne.n	8007da0 <_printf_float+0xf0>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e7bd      	b.n	8007d9e <_printf_float+0xee>
 8007e22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e26:	d9db      	bls.n	8007de0 <_printf_float+0x130>
 8007e28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e2c:	d118      	bne.n	8007e60 <_printf_float+0x1b0>
 8007e2e:	2900      	cmp	r1, #0
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	dd0b      	ble.n	8007e4c <_printf_float+0x19c>
 8007e34:	6121      	str	r1, [r4, #16]
 8007e36:	b913      	cbnz	r3, 8007e3e <_printf_float+0x18e>
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	07d0      	lsls	r0, r2, #31
 8007e3c:	d502      	bpl.n	8007e44 <_printf_float+0x194>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	440b      	add	r3, r1
 8007e42:	6123      	str	r3, [r4, #16]
 8007e44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	e7db      	b.n	8007e04 <_printf_float+0x154>
 8007e4c:	b913      	cbnz	r3, 8007e54 <_printf_float+0x1a4>
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	07d2      	lsls	r2, r2, #31
 8007e52:	d501      	bpl.n	8007e58 <_printf_float+0x1a8>
 8007e54:	3302      	adds	r3, #2
 8007e56:	e7f4      	b.n	8007e42 <_printf_float+0x192>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e7f2      	b.n	8007e42 <_printf_float+0x192>
 8007e5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e62:	4299      	cmp	r1, r3
 8007e64:	db05      	blt.n	8007e72 <_printf_float+0x1c2>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	6121      	str	r1, [r4, #16]
 8007e6a:	07d8      	lsls	r0, r3, #31
 8007e6c:	d5ea      	bpl.n	8007e44 <_printf_float+0x194>
 8007e6e:	1c4b      	adds	r3, r1, #1
 8007e70:	e7e7      	b.n	8007e42 <_printf_float+0x192>
 8007e72:	2900      	cmp	r1, #0
 8007e74:	bfd4      	ite	le
 8007e76:	f1c1 0202 	rsble	r2, r1, #2
 8007e7a:	2201      	movgt	r2, #1
 8007e7c:	4413      	add	r3, r2
 8007e7e:	e7e0      	b.n	8007e42 <_printf_float+0x192>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	055a      	lsls	r2, r3, #21
 8007e84:	d407      	bmi.n	8007e96 <_printf_float+0x1e6>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	4642      	mov	r2, r8
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	d12b      	bne.n	8007eec <_printf_float+0x23c>
 8007e94:	e767      	b.n	8007d66 <_printf_float+0xb6>
 8007e96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e9a:	f240 80dd 	bls.w	8008058 <_printf_float+0x3a8>
 8007e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f7f8 fe1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d033      	beq.n	8007f16 <_printf_float+0x266>
 8007eae:	4a37      	ldr	r2, [pc, #220]	@ (8007f8c <_printf_float+0x2dc>)
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f43f af54 	beq.w	8007d66 <_printf_float+0xb6>
 8007ebe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ec2:	4543      	cmp	r3, r8
 8007ec4:	db02      	blt.n	8007ecc <_printf_float+0x21c>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	07d8      	lsls	r0, r3, #31
 8007eca:	d50f      	bpl.n	8007eec <_printf_float+0x23c>
 8007ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f af45 	beq.w	8007d66 <_printf_float+0xb6>
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ee4:	f104 0a1a 	add.w	sl, r4, #26
 8007ee8:	45c8      	cmp	r8, r9
 8007eea:	dc09      	bgt.n	8007f00 <_printf_float+0x250>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	079b      	lsls	r3, r3, #30
 8007ef0:	f100 8103 	bmi.w	80080fa <_printf_float+0x44a>
 8007ef4:	68e0      	ldr	r0, [r4, #12]
 8007ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ef8:	4298      	cmp	r0, r3
 8007efa:	bfb8      	it	lt
 8007efc:	4618      	movlt	r0, r3
 8007efe:	e734      	b.n	8007d6a <_printf_float+0xba>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4652      	mov	r2, sl
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af2b 	beq.w	8007d66 <_printf_float+0xb6>
 8007f10:	f109 0901 	add.w	r9, r9, #1
 8007f14:	e7e8      	b.n	8007ee8 <_printf_float+0x238>
 8007f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc39      	bgt.n	8007f90 <_printf_float+0x2e0>
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f8c <_printf_float+0x2dc>)
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f af1d 	beq.w	8007d66 <_printf_float+0xb6>
 8007f2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f30:	ea59 0303 	orrs.w	r3, r9, r3
 8007f34:	d102      	bne.n	8007f3c <_printf_float+0x28c>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	07d9      	lsls	r1, r3, #31
 8007f3a:	d5d7      	bpl.n	8007eec <_printf_float+0x23c>
 8007f3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f af0d 	beq.w	8007d66 <_printf_float+0xb6>
 8007f4c:	f04f 0a00 	mov.w	sl, #0
 8007f50:	f104 0b1a 	add.w	fp, r4, #26
 8007f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f56:	425b      	negs	r3, r3
 8007f58:	4553      	cmp	r3, sl
 8007f5a:	dc01      	bgt.n	8007f60 <_printf_float+0x2b0>
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	e793      	b.n	8007e88 <_printf_float+0x1d8>
 8007f60:	2301      	movs	r3, #1
 8007f62:	465a      	mov	r2, fp
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f aefb 	beq.w	8007d66 <_printf_float+0xb6>
 8007f70:	f10a 0a01 	add.w	sl, sl, #1
 8007f74:	e7ee      	b.n	8007f54 <_printf_float+0x2a4>
 8007f76:	bf00      	nop
 8007f78:	7fefffff 	.word	0x7fefffff
 8007f7c:	0800c8ba 	.word	0x0800c8ba
 8007f80:	0800c8be 	.word	0x0800c8be
 8007f84:	0800c8c2 	.word	0x0800c8c2
 8007f88:	0800c8c6 	.word	0x0800c8c6
 8007f8c:	0800ccb0 	.word	0x0800ccb0
 8007f90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f96:	4553      	cmp	r3, sl
 8007f98:	bfa8      	it	ge
 8007f9a:	4653      	movge	r3, sl
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	4699      	mov	r9, r3
 8007fa0:	dc36      	bgt.n	8008010 <_printf_float+0x360>
 8007fa2:	f04f 0b00 	mov.w	fp, #0
 8007fa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007faa:	f104 021a 	add.w	r2, r4, #26
 8007fae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fb0:	9306      	str	r3, [sp, #24]
 8007fb2:	eba3 0309 	sub.w	r3, r3, r9
 8007fb6:	455b      	cmp	r3, fp
 8007fb8:	dc31      	bgt.n	800801e <_printf_float+0x36e>
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	459a      	cmp	sl, r3
 8007fbe:	dc3a      	bgt.n	8008036 <_printf_float+0x386>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07da      	lsls	r2, r3, #31
 8007fc4:	d437      	bmi.n	8008036 <_printf_float+0x386>
 8007fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc8:	ebaa 0903 	sub.w	r9, sl, r3
 8007fcc:	9b06      	ldr	r3, [sp, #24]
 8007fce:	ebaa 0303 	sub.w	r3, sl, r3
 8007fd2:	4599      	cmp	r9, r3
 8007fd4:	bfa8      	it	ge
 8007fd6:	4699      	movge	r9, r3
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	dc33      	bgt.n	8008046 <_printf_float+0x396>
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fe6:	f104 0b1a 	add.w	fp, r4, #26
 8007fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fec:	ebaa 0303 	sub.w	r3, sl, r3
 8007ff0:	eba3 0309 	sub.w	r3, r3, r9
 8007ff4:	4543      	cmp	r3, r8
 8007ff6:	f77f af79 	ble.w	8007eec <_printf_float+0x23c>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	465a      	mov	r2, fp
 8007ffe:	4631      	mov	r1, r6
 8008000:	4628      	mov	r0, r5
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f aeae 	beq.w	8007d66 <_printf_float+0xb6>
 800800a:	f108 0801 	add.w	r8, r8, #1
 800800e:	e7ec      	b.n	8007fea <_printf_float+0x33a>
 8008010:	4642      	mov	r2, r8
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	d1c2      	bne.n	8007fa2 <_printf_float+0x2f2>
 800801c:	e6a3      	b.n	8007d66 <_printf_float+0xb6>
 800801e:	2301      	movs	r3, #1
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	9206      	str	r2, [sp, #24]
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f ae9c 	beq.w	8007d66 <_printf_float+0xb6>
 800802e:	9a06      	ldr	r2, [sp, #24]
 8008030:	f10b 0b01 	add.w	fp, fp, #1
 8008034:	e7bb      	b.n	8007fae <_printf_float+0x2fe>
 8008036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	d1c0      	bne.n	8007fc6 <_printf_float+0x316>
 8008044:	e68f      	b.n	8007d66 <_printf_float+0xb6>
 8008046:	9a06      	ldr	r2, [sp, #24]
 8008048:	464b      	mov	r3, r9
 800804a:	4442      	add	r2, r8
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	d1c3      	bne.n	8007fde <_printf_float+0x32e>
 8008056:	e686      	b.n	8007d66 <_printf_float+0xb6>
 8008058:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800805c:	f1ba 0f01 	cmp.w	sl, #1
 8008060:	dc01      	bgt.n	8008066 <_printf_float+0x3b6>
 8008062:	07db      	lsls	r3, r3, #31
 8008064:	d536      	bpl.n	80080d4 <_printf_float+0x424>
 8008066:	2301      	movs	r3, #1
 8008068:	4642      	mov	r2, r8
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f ae78 	beq.w	8007d66 <_printf_float+0xb6>
 8008076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f ae70 	beq.w	8007d66 <_printf_float+0xb6>
 8008086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800808a:	2200      	movs	r2, #0
 800808c:	2300      	movs	r3, #0
 800808e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008092:	f7f8 fd29 	bl	8000ae8 <__aeabi_dcmpeq>
 8008096:	b9c0      	cbnz	r0, 80080ca <_printf_float+0x41a>
 8008098:	4653      	mov	r3, sl
 800809a:	f108 0201 	add.w	r2, r8, #1
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	d10c      	bne.n	80080c2 <_printf_float+0x412>
 80080a8:	e65d      	b.n	8007d66 <_printf_float+0xb6>
 80080aa:	2301      	movs	r3, #1
 80080ac:	465a      	mov	r2, fp
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae56 	beq.w	8007d66 <_printf_float+0xb6>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	45d0      	cmp	r8, sl
 80080c0:	dbf3      	blt.n	80080aa <_printf_float+0x3fa>
 80080c2:	464b      	mov	r3, r9
 80080c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080c8:	e6df      	b.n	8007e8a <_printf_float+0x1da>
 80080ca:	f04f 0800 	mov.w	r8, #0
 80080ce:	f104 0b1a 	add.w	fp, r4, #26
 80080d2:	e7f4      	b.n	80080be <_printf_float+0x40e>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4642      	mov	r2, r8
 80080d8:	e7e1      	b.n	800809e <_printf_float+0x3ee>
 80080da:	2301      	movs	r3, #1
 80080dc:	464a      	mov	r2, r9
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f ae3e 	beq.w	8007d66 <_printf_float+0xb6>
 80080ea:	f108 0801 	add.w	r8, r8, #1
 80080ee:	68e3      	ldr	r3, [r4, #12]
 80080f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080f2:	1a5b      	subs	r3, r3, r1
 80080f4:	4543      	cmp	r3, r8
 80080f6:	dcf0      	bgt.n	80080da <_printf_float+0x42a>
 80080f8:	e6fc      	b.n	8007ef4 <_printf_float+0x244>
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	f104 0919 	add.w	r9, r4, #25
 8008102:	e7f4      	b.n	80080ee <_printf_float+0x43e>

08008104 <_printf_common>:
 8008104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	4616      	mov	r6, r2
 800810a:	4698      	mov	r8, r3
 800810c:	688a      	ldr	r2, [r1, #8]
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008114:	4293      	cmp	r3, r2
 8008116:	bfb8      	it	lt
 8008118:	4613      	movlt	r3, r2
 800811a:	6033      	str	r3, [r6, #0]
 800811c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008120:	4607      	mov	r7, r0
 8008122:	460c      	mov	r4, r1
 8008124:	b10a      	cbz	r2, 800812a <_printf_common+0x26>
 8008126:	3301      	adds	r3, #1
 8008128:	6033      	str	r3, [r6, #0]
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	0699      	lsls	r1, r3, #26
 800812e:	bf42      	ittt	mi
 8008130:	6833      	ldrmi	r3, [r6, #0]
 8008132:	3302      	addmi	r3, #2
 8008134:	6033      	strmi	r3, [r6, #0]
 8008136:	6825      	ldr	r5, [r4, #0]
 8008138:	f015 0506 	ands.w	r5, r5, #6
 800813c:	d106      	bne.n	800814c <_printf_common+0x48>
 800813e:	f104 0a19 	add.w	sl, r4, #25
 8008142:	68e3      	ldr	r3, [r4, #12]
 8008144:	6832      	ldr	r2, [r6, #0]
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	42ab      	cmp	r3, r5
 800814a:	dc26      	bgt.n	800819a <_printf_common+0x96>
 800814c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	3b00      	subs	r3, #0
 8008154:	bf18      	it	ne
 8008156:	2301      	movne	r3, #1
 8008158:	0692      	lsls	r2, r2, #26
 800815a:	d42b      	bmi.n	80081b4 <_printf_common+0xb0>
 800815c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008160:	4641      	mov	r1, r8
 8008162:	4638      	mov	r0, r7
 8008164:	47c8      	blx	r9
 8008166:	3001      	adds	r0, #1
 8008168:	d01e      	beq.n	80081a8 <_printf_common+0xa4>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	6922      	ldr	r2, [r4, #16]
 800816e:	f003 0306 	and.w	r3, r3, #6
 8008172:	2b04      	cmp	r3, #4
 8008174:	bf02      	ittt	eq
 8008176:	68e5      	ldreq	r5, [r4, #12]
 8008178:	6833      	ldreq	r3, [r6, #0]
 800817a:	1aed      	subeq	r5, r5, r3
 800817c:	68a3      	ldr	r3, [r4, #8]
 800817e:	bf0c      	ite	eq
 8008180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008184:	2500      	movne	r5, #0
 8008186:	4293      	cmp	r3, r2
 8008188:	bfc4      	itt	gt
 800818a:	1a9b      	subgt	r3, r3, r2
 800818c:	18ed      	addgt	r5, r5, r3
 800818e:	2600      	movs	r6, #0
 8008190:	341a      	adds	r4, #26
 8008192:	42b5      	cmp	r5, r6
 8008194:	d11a      	bne.n	80081cc <_printf_common+0xc8>
 8008196:	2000      	movs	r0, #0
 8008198:	e008      	b.n	80081ac <_printf_common+0xa8>
 800819a:	2301      	movs	r3, #1
 800819c:	4652      	mov	r2, sl
 800819e:	4641      	mov	r1, r8
 80081a0:	4638      	mov	r0, r7
 80081a2:	47c8      	blx	r9
 80081a4:	3001      	adds	r0, #1
 80081a6:	d103      	bne.n	80081b0 <_printf_common+0xac>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b0:	3501      	adds	r5, #1
 80081b2:	e7c6      	b.n	8008142 <_printf_common+0x3e>
 80081b4:	18e1      	adds	r1, r4, r3
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	2030      	movs	r0, #48	@ 0x30
 80081ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081be:	4422      	add	r2, r4
 80081c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081c8:	3302      	adds	r3, #2
 80081ca:	e7c7      	b.n	800815c <_printf_common+0x58>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4622      	mov	r2, r4
 80081d0:	4641      	mov	r1, r8
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c8      	blx	r9
 80081d6:	3001      	adds	r0, #1
 80081d8:	d0e6      	beq.n	80081a8 <_printf_common+0xa4>
 80081da:	3601      	adds	r6, #1
 80081dc:	e7d9      	b.n	8008192 <_printf_common+0x8e>
	...

080081e0 <_printf_i>:
 80081e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	7e0f      	ldrb	r7, [r1, #24]
 80081e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081e8:	2f78      	cmp	r7, #120	@ 0x78
 80081ea:	4691      	mov	r9, r2
 80081ec:	4680      	mov	r8, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	469a      	mov	sl, r3
 80081f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081f6:	d807      	bhi.n	8008208 <_printf_i+0x28>
 80081f8:	2f62      	cmp	r7, #98	@ 0x62
 80081fa:	d80a      	bhi.n	8008212 <_printf_i+0x32>
 80081fc:	2f00      	cmp	r7, #0
 80081fe:	f000 80d2 	beq.w	80083a6 <_printf_i+0x1c6>
 8008202:	2f58      	cmp	r7, #88	@ 0x58
 8008204:	f000 80b9 	beq.w	800837a <_printf_i+0x19a>
 8008208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800820c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008210:	e03a      	b.n	8008288 <_printf_i+0xa8>
 8008212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008216:	2b15      	cmp	r3, #21
 8008218:	d8f6      	bhi.n	8008208 <_printf_i+0x28>
 800821a:	a101      	add	r1, pc, #4	@ (adr r1, 8008220 <_printf_i+0x40>)
 800821c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008220:	08008279 	.word	0x08008279
 8008224:	0800828d 	.word	0x0800828d
 8008228:	08008209 	.word	0x08008209
 800822c:	08008209 	.word	0x08008209
 8008230:	08008209 	.word	0x08008209
 8008234:	08008209 	.word	0x08008209
 8008238:	0800828d 	.word	0x0800828d
 800823c:	08008209 	.word	0x08008209
 8008240:	08008209 	.word	0x08008209
 8008244:	08008209 	.word	0x08008209
 8008248:	08008209 	.word	0x08008209
 800824c:	0800838d 	.word	0x0800838d
 8008250:	080082b7 	.word	0x080082b7
 8008254:	08008347 	.word	0x08008347
 8008258:	08008209 	.word	0x08008209
 800825c:	08008209 	.word	0x08008209
 8008260:	080083af 	.word	0x080083af
 8008264:	08008209 	.word	0x08008209
 8008268:	080082b7 	.word	0x080082b7
 800826c:	08008209 	.word	0x08008209
 8008270:	08008209 	.word	0x08008209
 8008274:	0800834f 	.word	0x0800834f
 8008278:	6833      	ldr	r3, [r6, #0]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6032      	str	r2, [r6, #0]
 8008280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008288:	2301      	movs	r3, #1
 800828a:	e09d      	b.n	80083c8 <_printf_i+0x1e8>
 800828c:	6833      	ldr	r3, [r6, #0]
 800828e:	6820      	ldr	r0, [r4, #0]
 8008290:	1d19      	adds	r1, r3, #4
 8008292:	6031      	str	r1, [r6, #0]
 8008294:	0606      	lsls	r6, r0, #24
 8008296:	d501      	bpl.n	800829c <_printf_i+0xbc>
 8008298:	681d      	ldr	r5, [r3, #0]
 800829a:	e003      	b.n	80082a4 <_printf_i+0xc4>
 800829c:	0645      	lsls	r5, r0, #25
 800829e:	d5fb      	bpl.n	8008298 <_printf_i+0xb8>
 80082a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	da03      	bge.n	80082b0 <_printf_i+0xd0>
 80082a8:	232d      	movs	r3, #45	@ 0x2d
 80082aa:	426d      	negs	r5, r5
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082b0:	4859      	ldr	r0, [pc, #356]	@ (8008418 <_printf_i+0x238>)
 80082b2:	230a      	movs	r3, #10
 80082b4:	e011      	b.n	80082da <_printf_i+0xfa>
 80082b6:	6821      	ldr	r1, [r4, #0]
 80082b8:	6833      	ldr	r3, [r6, #0]
 80082ba:	0608      	lsls	r0, r1, #24
 80082bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80082c0:	d402      	bmi.n	80082c8 <_printf_i+0xe8>
 80082c2:	0649      	lsls	r1, r1, #25
 80082c4:	bf48      	it	mi
 80082c6:	b2ad      	uxthmi	r5, r5
 80082c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80082ca:	4853      	ldr	r0, [pc, #332]	@ (8008418 <_printf_i+0x238>)
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	bf14      	ite	ne
 80082d0:	230a      	movne	r3, #10
 80082d2:	2308      	moveq	r3, #8
 80082d4:	2100      	movs	r1, #0
 80082d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082da:	6866      	ldr	r6, [r4, #4]
 80082dc:	60a6      	str	r6, [r4, #8]
 80082de:	2e00      	cmp	r6, #0
 80082e0:	bfa2      	ittt	ge
 80082e2:	6821      	ldrge	r1, [r4, #0]
 80082e4:	f021 0104 	bicge.w	r1, r1, #4
 80082e8:	6021      	strge	r1, [r4, #0]
 80082ea:	b90d      	cbnz	r5, 80082f0 <_printf_i+0x110>
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	d04b      	beq.n	8008388 <_printf_i+0x1a8>
 80082f0:	4616      	mov	r6, r2
 80082f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f6:	fb03 5711 	mls	r7, r3, r1, r5
 80082fa:	5dc7      	ldrb	r7, [r0, r7]
 80082fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008300:	462f      	mov	r7, r5
 8008302:	42bb      	cmp	r3, r7
 8008304:	460d      	mov	r5, r1
 8008306:	d9f4      	bls.n	80082f2 <_printf_i+0x112>
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10b      	bne.n	8008324 <_printf_i+0x144>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	07df      	lsls	r7, r3, #31
 8008310:	d508      	bpl.n	8008324 <_printf_i+0x144>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6861      	ldr	r1, [r4, #4]
 8008316:	4299      	cmp	r1, r3
 8008318:	bfde      	ittt	le
 800831a:	2330      	movle	r3, #48	@ 0x30
 800831c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008324:	1b92      	subs	r2, r2, r6
 8008326:	6122      	str	r2, [r4, #16]
 8008328:	f8cd a000 	str.w	sl, [sp]
 800832c:	464b      	mov	r3, r9
 800832e:	aa03      	add	r2, sp, #12
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fee6 	bl	8008104 <_printf_common>
 8008338:	3001      	adds	r0, #1
 800833a:	d14a      	bne.n	80083d2 <_printf_i+0x1f2>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b004      	add	sp, #16
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	f043 0320 	orr.w	r3, r3, #32
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	4833      	ldr	r0, [pc, #204]	@ (800841c <_printf_i+0x23c>)
 8008350:	2778      	movs	r7, #120	@ 0x78
 8008352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	6831      	ldr	r1, [r6, #0]
 800835a:	061f      	lsls	r7, r3, #24
 800835c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008360:	d402      	bmi.n	8008368 <_printf_i+0x188>
 8008362:	065f      	lsls	r7, r3, #25
 8008364:	bf48      	it	mi
 8008366:	b2ad      	uxthmi	r5, r5
 8008368:	6031      	str	r1, [r6, #0]
 800836a:	07d9      	lsls	r1, r3, #31
 800836c:	bf44      	itt	mi
 800836e:	f043 0320 	orrmi.w	r3, r3, #32
 8008372:	6023      	strmi	r3, [r4, #0]
 8008374:	b11d      	cbz	r5, 800837e <_printf_i+0x19e>
 8008376:	2310      	movs	r3, #16
 8008378:	e7ac      	b.n	80082d4 <_printf_i+0xf4>
 800837a:	4827      	ldr	r0, [pc, #156]	@ (8008418 <_printf_i+0x238>)
 800837c:	e7e9      	b.n	8008352 <_printf_i+0x172>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f023 0320 	bic.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	e7f6      	b.n	8008376 <_printf_i+0x196>
 8008388:	4616      	mov	r6, r2
 800838a:	e7bd      	b.n	8008308 <_printf_i+0x128>
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	6961      	ldr	r1, [r4, #20]
 8008392:	1d18      	adds	r0, r3, #4
 8008394:	6030      	str	r0, [r6, #0]
 8008396:	062e      	lsls	r6, r5, #24
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0x1c0>
 800839c:	6019      	str	r1, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0x1c6>
 80083a0:	0668      	lsls	r0, r5, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0x1bc>
 80083a4:	8019      	strh	r1, [r3, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	4616      	mov	r6, r2
 80083ac:	e7bc      	b.n	8008328 <_printf_i+0x148>
 80083ae:	6833      	ldr	r3, [r6, #0]
 80083b0:	1d1a      	adds	r2, r3, #4
 80083b2:	6032      	str	r2, [r6, #0]
 80083b4:	681e      	ldr	r6, [r3, #0]
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7f7 ff18 	bl	80001f0 <memchr>
 80083c0:	b108      	cbz	r0, 80083c6 <_printf_i+0x1e6>
 80083c2:	1b80      	subs	r0, r0, r6
 80083c4:	6060      	str	r0, [r4, #4]
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2300      	movs	r3, #0
 80083cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083d0:	e7aa      	b.n	8008328 <_printf_i+0x148>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4649      	mov	r1, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	47d0      	blx	sl
 80083dc:	3001      	adds	r0, #1
 80083de:	d0ad      	beq.n	800833c <_printf_i+0x15c>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	079b      	lsls	r3, r3, #30
 80083e4:	d413      	bmi.n	800840e <_printf_i+0x22e>
 80083e6:	68e0      	ldr	r0, [r4, #12]
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	4298      	cmp	r0, r3
 80083ec:	bfb8      	it	lt
 80083ee:	4618      	movlt	r0, r3
 80083f0:	e7a6      	b.n	8008340 <_printf_i+0x160>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4632      	mov	r2, r6
 80083f6:	4649      	mov	r1, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	47d0      	blx	sl
 80083fc:	3001      	adds	r0, #1
 80083fe:	d09d      	beq.n	800833c <_printf_i+0x15c>
 8008400:	3501      	adds	r5, #1
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	42ab      	cmp	r3, r5
 800840a:	dcf2      	bgt.n	80083f2 <_printf_i+0x212>
 800840c:	e7eb      	b.n	80083e6 <_printf_i+0x206>
 800840e:	2500      	movs	r5, #0
 8008410:	f104 0619 	add.w	r6, r4, #25
 8008414:	e7f5      	b.n	8008402 <_printf_i+0x222>
 8008416:	bf00      	nop
 8008418:	0800c8ca 	.word	0x0800c8ca
 800841c:	0800c8db 	.word	0x0800c8db

08008420 <std>:
 8008420:	2300      	movs	r3, #0
 8008422:	b510      	push	{r4, lr}
 8008424:	4604      	mov	r4, r0
 8008426:	e9c0 3300 	strd	r3, r3, [r0]
 800842a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800842e:	6083      	str	r3, [r0, #8]
 8008430:	8181      	strh	r1, [r0, #12]
 8008432:	6643      	str	r3, [r0, #100]	@ 0x64
 8008434:	81c2      	strh	r2, [r0, #14]
 8008436:	6183      	str	r3, [r0, #24]
 8008438:	4619      	mov	r1, r3
 800843a:	2208      	movs	r2, #8
 800843c:	305c      	adds	r0, #92	@ 0x5c
 800843e:	f000 f974 	bl	800872a <memset>
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <std+0x58>)
 8008444:	6263      	str	r3, [r4, #36]	@ 0x24
 8008446:	4b0d      	ldr	r3, [pc, #52]	@ (800847c <std+0x5c>)
 8008448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800844a:	4b0d      	ldr	r3, [pc, #52]	@ (8008480 <std+0x60>)
 800844c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800844e:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <std+0x64>)
 8008450:	6323      	str	r3, [r4, #48]	@ 0x30
 8008452:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <std+0x68>)
 8008454:	6224      	str	r4, [r4, #32]
 8008456:	429c      	cmp	r4, r3
 8008458:	d006      	beq.n	8008468 <std+0x48>
 800845a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800845e:	4294      	cmp	r4, r2
 8008460:	d002      	beq.n	8008468 <std+0x48>
 8008462:	33d0      	adds	r3, #208	@ 0xd0
 8008464:	429c      	cmp	r4, r3
 8008466:	d105      	bne.n	8008474 <std+0x54>
 8008468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008470:	f000 bf72 	b.w	8009358 <__retarget_lock_init_recursive>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	bf00      	nop
 8008478:	080086a1 	.word	0x080086a1
 800847c:	080086c7 	.word	0x080086c7
 8008480:	080086ff 	.word	0x080086ff
 8008484:	08008723 	.word	0x08008723
 8008488:	20004c1c 	.word	0x20004c1c

0800848c <stdio_exit_handler>:
 800848c:	4a02      	ldr	r2, [pc, #8]	@ (8008498 <stdio_exit_handler+0xc>)
 800848e:	4903      	ldr	r1, [pc, #12]	@ (800849c <stdio_exit_handler+0x10>)
 8008490:	4803      	ldr	r0, [pc, #12]	@ (80084a0 <stdio_exit_handler+0x14>)
 8008492:	f000 b869 	b.w	8008568 <_fwalk_sglue>
 8008496:	bf00      	nop
 8008498:	20000018 	.word	0x20000018
 800849c:	0800b375 	.word	0x0800b375
 80084a0:	2000019c 	.word	0x2000019c

080084a4 <cleanup_stdio>:
 80084a4:	6841      	ldr	r1, [r0, #4]
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <cleanup_stdio+0x34>)
 80084a8:	4299      	cmp	r1, r3
 80084aa:	b510      	push	{r4, lr}
 80084ac:	4604      	mov	r4, r0
 80084ae:	d001      	beq.n	80084b4 <cleanup_stdio+0x10>
 80084b0:	f002 ff60 	bl	800b374 <_fflush_r>
 80084b4:	68a1      	ldr	r1, [r4, #8]
 80084b6:	4b09      	ldr	r3, [pc, #36]	@ (80084dc <cleanup_stdio+0x38>)
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d002      	beq.n	80084c2 <cleanup_stdio+0x1e>
 80084bc:	4620      	mov	r0, r4
 80084be:	f002 ff59 	bl	800b374 <_fflush_r>
 80084c2:	68e1      	ldr	r1, [r4, #12]
 80084c4:	4b06      	ldr	r3, [pc, #24]	@ (80084e0 <cleanup_stdio+0x3c>)
 80084c6:	4299      	cmp	r1, r3
 80084c8:	d004      	beq.n	80084d4 <cleanup_stdio+0x30>
 80084ca:	4620      	mov	r0, r4
 80084cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d0:	f002 bf50 	b.w	800b374 <_fflush_r>
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	bf00      	nop
 80084d8:	20004c1c 	.word	0x20004c1c
 80084dc:	20004c84 	.word	0x20004c84
 80084e0:	20004cec 	.word	0x20004cec

080084e4 <global_stdio_init.part.0>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <global_stdio_init.part.0+0x30>)
 80084e8:	4c0b      	ldr	r4, [pc, #44]	@ (8008518 <global_stdio_init.part.0+0x34>)
 80084ea:	4a0c      	ldr	r2, [pc, #48]	@ (800851c <global_stdio_init.part.0+0x38>)
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	4620      	mov	r0, r4
 80084f0:	2200      	movs	r2, #0
 80084f2:	2104      	movs	r1, #4
 80084f4:	f7ff ff94 	bl	8008420 <std>
 80084f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084fc:	2201      	movs	r2, #1
 80084fe:	2109      	movs	r1, #9
 8008500:	f7ff ff8e 	bl	8008420 <std>
 8008504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008508:	2202      	movs	r2, #2
 800850a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850e:	2112      	movs	r1, #18
 8008510:	f7ff bf86 	b.w	8008420 <std>
 8008514:	20004d54 	.word	0x20004d54
 8008518:	20004c1c 	.word	0x20004c1c
 800851c:	0800848d 	.word	0x0800848d

08008520 <__sfp_lock_acquire>:
 8008520:	4801      	ldr	r0, [pc, #4]	@ (8008528 <__sfp_lock_acquire+0x8>)
 8008522:	f000 bf1b 	b.w	800935c <__retarget_lock_acquire_recursive>
 8008526:	bf00      	nop
 8008528:	20004d83 	.word	0x20004d83

0800852c <__sfp_lock_release>:
 800852c:	4801      	ldr	r0, [pc, #4]	@ (8008534 <__sfp_lock_release+0x8>)
 800852e:	f000 bf17 	b.w	8009360 <__retarget_lock_release_recursive>
 8008532:	bf00      	nop
 8008534:	20004d83 	.word	0x20004d83

08008538 <__sinit>:
 8008538:	b510      	push	{r4, lr}
 800853a:	4604      	mov	r4, r0
 800853c:	f7ff fff0 	bl	8008520 <__sfp_lock_acquire>
 8008540:	6a23      	ldr	r3, [r4, #32]
 8008542:	b11b      	cbz	r3, 800854c <__sinit+0x14>
 8008544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008548:	f7ff bff0 	b.w	800852c <__sfp_lock_release>
 800854c:	4b04      	ldr	r3, [pc, #16]	@ (8008560 <__sinit+0x28>)
 800854e:	6223      	str	r3, [r4, #32]
 8008550:	4b04      	ldr	r3, [pc, #16]	@ (8008564 <__sinit+0x2c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1f5      	bne.n	8008544 <__sinit+0xc>
 8008558:	f7ff ffc4 	bl	80084e4 <global_stdio_init.part.0>
 800855c:	e7f2      	b.n	8008544 <__sinit+0xc>
 800855e:	bf00      	nop
 8008560:	080084a5 	.word	0x080084a5
 8008564:	20004d54 	.word	0x20004d54

08008568 <_fwalk_sglue>:
 8008568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800856c:	4607      	mov	r7, r0
 800856e:	4688      	mov	r8, r1
 8008570:	4614      	mov	r4, r2
 8008572:	2600      	movs	r6, #0
 8008574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008578:	f1b9 0901 	subs.w	r9, r9, #1
 800857c:	d505      	bpl.n	800858a <_fwalk_sglue+0x22>
 800857e:	6824      	ldr	r4, [r4, #0]
 8008580:	2c00      	cmp	r4, #0
 8008582:	d1f7      	bne.n	8008574 <_fwalk_sglue+0xc>
 8008584:	4630      	mov	r0, r6
 8008586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d907      	bls.n	80085a0 <_fwalk_sglue+0x38>
 8008590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008594:	3301      	adds	r3, #1
 8008596:	d003      	beq.n	80085a0 <_fwalk_sglue+0x38>
 8008598:	4629      	mov	r1, r5
 800859a:	4638      	mov	r0, r7
 800859c:	47c0      	blx	r8
 800859e:	4306      	orrs	r6, r0
 80085a0:	3568      	adds	r5, #104	@ 0x68
 80085a2:	e7e9      	b.n	8008578 <_fwalk_sglue+0x10>

080085a4 <sniprintf>:
 80085a4:	b40c      	push	{r2, r3}
 80085a6:	b530      	push	{r4, r5, lr}
 80085a8:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <sniprintf+0x64>)
 80085aa:	1e0c      	subs	r4, r1, #0
 80085ac:	681d      	ldr	r5, [r3, #0]
 80085ae:	b09d      	sub	sp, #116	@ 0x74
 80085b0:	da08      	bge.n	80085c4 <sniprintf+0x20>
 80085b2:	238b      	movs	r3, #139	@ 0x8b
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	b01d      	add	sp, #116	@ 0x74
 80085bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c0:	b002      	add	sp, #8
 80085c2:	4770      	bx	lr
 80085c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085cc:	bf14      	ite	ne
 80085ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80085d2:	4623      	moveq	r3, r4
 80085d4:	9304      	str	r3, [sp, #16]
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085dc:	9002      	str	r0, [sp, #8]
 80085de:	9006      	str	r0, [sp, #24]
 80085e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085e6:	ab21      	add	r3, sp, #132	@ 0x84
 80085e8:	a902      	add	r1, sp, #8
 80085ea:	4628      	mov	r0, r5
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	f002 fa27 	bl	800aa40 <_svfiprintf_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	bfbc      	itt	lt
 80085f6:	238b      	movlt	r3, #139	@ 0x8b
 80085f8:	602b      	strlt	r3, [r5, #0]
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	d0dd      	beq.n	80085ba <sniprintf+0x16>
 80085fe:	9b02      	ldr	r3, [sp, #8]
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e7d9      	b.n	80085ba <sniprintf+0x16>
 8008606:	bf00      	nop
 8008608:	20000198 	.word	0x20000198

0800860c <siprintf>:
 800860c:	b40e      	push	{r1, r2, r3}
 800860e:	b500      	push	{lr}
 8008610:	b09c      	sub	sp, #112	@ 0x70
 8008612:	ab1d      	add	r3, sp, #116	@ 0x74
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	9006      	str	r0, [sp, #24]
 8008618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800861c:	4809      	ldr	r0, [pc, #36]	@ (8008644 <siprintf+0x38>)
 800861e:	9107      	str	r1, [sp, #28]
 8008620:	9104      	str	r1, [sp, #16]
 8008622:	4909      	ldr	r1, [pc, #36]	@ (8008648 <siprintf+0x3c>)
 8008624:	f853 2b04 	ldr.w	r2, [r3], #4
 8008628:	9105      	str	r1, [sp, #20]
 800862a:	6800      	ldr	r0, [r0, #0]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	a902      	add	r1, sp, #8
 8008630:	f002 fa06 	bl	800aa40 <_svfiprintf_r>
 8008634:	9b02      	ldr	r3, [sp, #8]
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	b01c      	add	sp, #112	@ 0x70
 800863c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008640:	b003      	add	sp, #12
 8008642:	4770      	bx	lr
 8008644:	20000198 	.word	0x20000198
 8008648:	ffff0208 	.word	0xffff0208

0800864c <siscanf>:
 800864c:	b40e      	push	{r1, r2, r3}
 800864e:	b530      	push	{r4, r5, lr}
 8008650:	b09c      	sub	sp, #112	@ 0x70
 8008652:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008654:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008658:	f854 5b04 	ldr.w	r5, [r4], #4
 800865c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008660:	9002      	str	r0, [sp, #8]
 8008662:	9006      	str	r0, [sp, #24]
 8008664:	f7f7 fe14 	bl	8000290 <strlen>
 8008668:	4b0b      	ldr	r3, [pc, #44]	@ (8008698 <siscanf+0x4c>)
 800866a:	9003      	str	r0, [sp, #12]
 800866c:	9007      	str	r0, [sp, #28]
 800866e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008670:	480a      	ldr	r0, [pc, #40]	@ (800869c <siscanf+0x50>)
 8008672:	9401      	str	r4, [sp, #4]
 8008674:	2300      	movs	r3, #0
 8008676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008678:	9314      	str	r3, [sp, #80]	@ 0x50
 800867a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800867e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008682:	462a      	mov	r2, r5
 8008684:	4623      	mov	r3, r4
 8008686:	a902      	add	r1, sp, #8
 8008688:	6800      	ldr	r0, [r0, #0]
 800868a:	f002 fb2d 	bl	800ace8 <__ssvfiscanf_r>
 800868e:	b01c      	add	sp, #112	@ 0x70
 8008690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008694:	b003      	add	sp, #12
 8008696:	4770      	bx	lr
 8008698:	080086c3 	.word	0x080086c3
 800869c:	20000198 	.word	0x20000198

080086a0 <__sread>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	f000 fdf8 	bl	800929c <_read_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	bfab      	itete	ge
 80086b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086b2:	89a3      	ldrhlt	r3, [r4, #12]
 80086b4:	181b      	addge	r3, r3, r0
 80086b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ba:	bfac      	ite	ge
 80086bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086be:	81a3      	strhlt	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__seofread>:
 80086c2:	2000      	movs	r0, #0
 80086c4:	4770      	bx	lr

080086c6 <__swrite>:
 80086c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	461f      	mov	r7, r3
 80086cc:	898b      	ldrh	r3, [r1, #12]
 80086ce:	05db      	lsls	r3, r3, #23
 80086d0:	4605      	mov	r5, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	4616      	mov	r6, r2
 80086d6:	d505      	bpl.n	80086e4 <__swrite+0x1e>
 80086d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086dc:	2302      	movs	r3, #2
 80086de:	2200      	movs	r2, #0
 80086e0:	f000 fdca 	bl	8009278 <_lseek_r>
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	4632      	mov	r2, r6
 80086f2:	463b      	mov	r3, r7
 80086f4:	4628      	mov	r0, r5
 80086f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086fa:	f000 bdf1 	b.w	80092e0 <_write_r>

080086fe <__sseek>:
 80086fe:	b510      	push	{r4, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008706:	f000 fdb7 	bl	8009278 <_lseek_r>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	bf15      	itete	ne
 8008710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800871a:	81a3      	strheq	r3, [r4, #12]
 800871c:	bf18      	it	ne
 800871e:	81a3      	strhne	r3, [r4, #12]
 8008720:	bd10      	pop	{r4, pc}

08008722 <__sclose>:
 8008722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008726:	f000 bd97 	b.w	8009258 <_close_r>

0800872a <memset>:
 800872a:	4402      	add	r2, r0
 800872c:	4603      	mov	r3, r0
 800872e:	4293      	cmp	r3, r2
 8008730:	d100      	bne.n	8008734 <memset+0xa>
 8008732:	4770      	bx	lr
 8008734:	f803 1b01 	strb.w	r1, [r3], #1
 8008738:	e7f9      	b.n	800872e <memset+0x4>

0800873a <strncmp>:
 800873a:	b510      	push	{r4, lr}
 800873c:	b16a      	cbz	r2, 800875a <strncmp+0x20>
 800873e:	3901      	subs	r1, #1
 8008740:	1884      	adds	r4, r0, r2
 8008742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008746:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800874a:	429a      	cmp	r2, r3
 800874c:	d103      	bne.n	8008756 <strncmp+0x1c>
 800874e:	42a0      	cmp	r0, r4
 8008750:	d001      	beq.n	8008756 <strncmp+0x1c>
 8008752:	2a00      	cmp	r2, #0
 8008754:	d1f5      	bne.n	8008742 <strncmp+0x8>
 8008756:	1ad0      	subs	r0, r2, r3
 8008758:	bd10      	pop	{r4, pc}
 800875a:	4610      	mov	r0, r2
 800875c:	e7fc      	b.n	8008758 <strncmp+0x1e>

0800875e <strstr>:
 800875e:	780a      	ldrb	r2, [r1, #0]
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	b96a      	cbnz	r2, 8008780 <strstr+0x22>
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	429a      	cmp	r2, r3
 8008768:	d109      	bne.n	800877e <strstr+0x20>
 800876a:	460c      	mov	r4, r1
 800876c:	4605      	mov	r5, r0
 800876e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f6      	beq.n	8008764 <strstr+0x6>
 8008776:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800877a:	429e      	cmp	r6, r3
 800877c:	d0f7      	beq.n	800876e <strstr+0x10>
 800877e:	3001      	adds	r0, #1
 8008780:	7803      	ldrb	r3, [r0, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1ef      	bne.n	8008766 <strstr+0x8>
 8008786:	4618      	mov	r0, r3
 8008788:	e7ec      	b.n	8008764 <strstr+0x6>
	...

0800878c <validate_structure>:
 800878c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800878e:	6801      	ldr	r1, [r0, #0]
 8008790:	293b      	cmp	r1, #59	@ 0x3b
 8008792:	4604      	mov	r4, r0
 8008794:	d911      	bls.n	80087ba <validate_structure+0x2e>
 8008796:	223c      	movs	r2, #60	@ 0x3c
 8008798:	4668      	mov	r0, sp
 800879a:	f000 fdf8 	bl	800938e <div>
 800879e:	9a01      	ldr	r2, [sp, #4]
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	9900      	ldr	r1, [sp, #0]
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	440b      	add	r3, r1
 80087a8:	6063      	str	r3, [r4, #4]
 80087aa:	bfbb      	ittet	lt
 80087ac:	323c      	addlt	r2, #60	@ 0x3c
 80087ae:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80087b2:	6022      	strge	r2, [r4, #0]
 80087b4:	6022      	strlt	r2, [r4, #0]
 80087b6:	bfb8      	it	lt
 80087b8:	6063      	strlt	r3, [r4, #4]
 80087ba:	6861      	ldr	r1, [r4, #4]
 80087bc:	293b      	cmp	r1, #59	@ 0x3b
 80087be:	d911      	bls.n	80087e4 <validate_structure+0x58>
 80087c0:	223c      	movs	r2, #60	@ 0x3c
 80087c2:	4668      	mov	r0, sp
 80087c4:	f000 fde3 	bl	800938e <div>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	9900      	ldr	r1, [sp, #0]
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	440b      	add	r3, r1
 80087d2:	60a3      	str	r3, [r4, #8]
 80087d4:	bfbb      	ittet	lt
 80087d6:	323c      	addlt	r2, #60	@ 0x3c
 80087d8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80087dc:	6062      	strge	r2, [r4, #4]
 80087de:	6062      	strlt	r2, [r4, #4]
 80087e0:	bfb8      	it	lt
 80087e2:	60a3      	strlt	r3, [r4, #8]
 80087e4:	68a1      	ldr	r1, [r4, #8]
 80087e6:	2917      	cmp	r1, #23
 80087e8:	d911      	bls.n	800880e <validate_structure+0x82>
 80087ea:	2218      	movs	r2, #24
 80087ec:	4668      	mov	r0, sp
 80087ee:	f000 fdce 	bl	800938e <div>
 80087f2:	9a01      	ldr	r2, [sp, #4]
 80087f4:	68e3      	ldr	r3, [r4, #12]
 80087f6:	9900      	ldr	r1, [sp, #0]
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	440b      	add	r3, r1
 80087fc:	60e3      	str	r3, [r4, #12]
 80087fe:	bfbb      	ittet	lt
 8008800:	3218      	addlt	r2, #24
 8008802:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008806:	60a2      	strge	r2, [r4, #8]
 8008808:	60a2      	strlt	r2, [r4, #8]
 800880a:	bfb8      	it	lt
 800880c:	60e3      	strlt	r3, [r4, #12]
 800880e:	6921      	ldr	r1, [r4, #16]
 8008810:	290b      	cmp	r1, #11
 8008812:	d911      	bls.n	8008838 <validate_structure+0xac>
 8008814:	220c      	movs	r2, #12
 8008816:	4668      	mov	r0, sp
 8008818:	f000 fdb9 	bl	800938e <div>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	9900      	ldr	r1, [sp, #0]
 8008822:	2a00      	cmp	r2, #0
 8008824:	440b      	add	r3, r1
 8008826:	6163      	str	r3, [r4, #20]
 8008828:	bfbb      	ittet	lt
 800882a:	320c      	addlt	r2, #12
 800882c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008830:	6122      	strge	r2, [r4, #16]
 8008832:	6122      	strlt	r2, [r4, #16]
 8008834:	bfb8      	it	lt
 8008836:	6163      	strlt	r3, [r4, #20]
 8008838:	6963      	ldr	r3, [r4, #20]
 800883a:	079a      	lsls	r2, r3, #30
 800883c:	d11c      	bne.n	8008878 <validate_structure+0xec>
 800883e:	2164      	movs	r1, #100	@ 0x64
 8008840:	fb93 f2f1 	sdiv	r2, r3, r1
 8008844:	fb01 3212 	mls	r2, r1, r2, r3
 8008848:	b9c2      	cbnz	r2, 800887c <validate_structure+0xf0>
 800884a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800884e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008852:	fb93 f1f2 	sdiv	r1, r3, r2
 8008856:	fb02 3311 	mls	r3, r2, r1, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf14      	ite	ne
 800885e:	231c      	movne	r3, #28
 8008860:	231d      	moveq	r3, #29
 8008862:	68e2      	ldr	r2, [r4, #12]
 8008864:	2a00      	cmp	r2, #0
 8008866:	dc0b      	bgt.n	8008880 <validate_structure+0xf4>
 8008868:	4d31      	ldr	r5, [pc, #196]	@ (8008930 <validate_structure+0x1a4>)
 800886a:	200b      	movs	r0, #11
 800886c:	2164      	movs	r1, #100	@ 0x64
 800886e:	68e6      	ldr	r6, [r4, #12]
 8008870:	2e00      	cmp	r6, #0
 8008872:	dd30      	ble.n	80088d6 <validate_structure+0x14a>
 8008874:	b003      	add	sp, #12
 8008876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008878:	231c      	movs	r3, #28
 800887a:	e7f2      	b.n	8008862 <validate_structure+0xd6>
 800887c:	231d      	movs	r3, #29
 800887e:	e7f0      	b.n	8008862 <validate_structure+0xd6>
 8008880:	4d2b      	ldr	r5, [pc, #172]	@ (8008930 <validate_structure+0x1a4>)
 8008882:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008886:	2a01      	cmp	r2, #1
 8008888:	bf14      	ite	ne
 800888a:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800888e:	4618      	moveq	r0, r3
 8008890:	4281      	cmp	r1, r0
 8008892:	ddef      	ble.n	8008874 <validate_structure+0xe8>
 8008894:	3201      	adds	r2, #1
 8008896:	1a09      	subs	r1, r1, r0
 8008898:	2a0c      	cmp	r2, #12
 800889a:	60e1      	str	r1, [r4, #12]
 800889c:	6122      	str	r2, [r4, #16]
 800889e:	d1f0      	bne.n	8008882 <validate_structure+0xf6>
 80088a0:	6963      	ldr	r3, [r4, #20]
 80088a2:	2100      	movs	r1, #0
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	6121      	str	r1, [r4, #16]
 80088a8:	0791      	lsls	r1, r2, #30
 80088aa:	6162      	str	r2, [r4, #20]
 80088ac:	d13c      	bne.n	8008928 <validate_structure+0x19c>
 80088ae:	2164      	movs	r1, #100	@ 0x64
 80088b0:	fb92 f0f1 	sdiv	r0, r2, r1
 80088b4:	fb01 2210 	mls	r2, r1, r0, r2
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	d137      	bne.n	800892c <validate_structure+0x1a0>
 80088bc:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80088c0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80088c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80088c8:	fb02 3311 	mls	r3, r2, r1, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bf14      	ite	ne
 80088d0:	231c      	movne	r3, #28
 80088d2:	231d      	moveq	r3, #29
 80088d4:	e7d5      	b.n	8008882 <validate_structure+0xf6>
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	3a01      	subs	r2, #1
 80088da:	6122      	str	r2, [r4, #16]
 80088dc:	3201      	adds	r2, #1
 80088de:	d116      	bne.n	800890e <validate_structure+0x182>
 80088e0:	6963      	ldr	r3, [r4, #20]
 80088e2:	1e5a      	subs	r2, r3, #1
 80088e4:	0797      	lsls	r7, r2, #30
 80088e6:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80088ea:	d119      	bne.n	8008920 <validate_structure+0x194>
 80088ec:	fb92 f7f1 	sdiv	r7, r2, r1
 80088f0:	fb01 2217 	mls	r2, r1, r7, r2
 80088f4:	b9b2      	cbnz	r2, 8008924 <validate_structure+0x198>
 80088f6:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80088fa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80088fe:	fb93 f7f2 	sdiv	r7, r3, r2
 8008902:	fb02 3317 	mls	r3, r2, r7, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	231c      	movne	r3, #28
 800890c:	231d      	moveq	r3, #29
 800890e:	6922      	ldr	r2, [r4, #16]
 8008910:	2a01      	cmp	r2, #1
 8008912:	bf14      	ite	ne
 8008914:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8008918:	461a      	moveq	r2, r3
 800891a:	4432      	add	r2, r6
 800891c:	60e2      	str	r2, [r4, #12]
 800891e:	e7a6      	b.n	800886e <validate_structure+0xe2>
 8008920:	231c      	movs	r3, #28
 8008922:	e7f4      	b.n	800890e <validate_structure+0x182>
 8008924:	231d      	movs	r3, #29
 8008926:	e7f2      	b.n	800890e <validate_structure+0x182>
 8008928:	231c      	movs	r3, #28
 800892a:	e7aa      	b.n	8008882 <validate_structure+0xf6>
 800892c:	231d      	movs	r3, #29
 800892e:	e7a8      	b.n	8008882 <validate_structure+0xf6>
 8008930:	0800c91c 	.word	0x0800c91c

08008934 <mktime>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	b085      	sub	sp, #20
 800893a:	4607      	mov	r7, r0
 800893c:	f002 fdd0 	bl	800b4e0 <__gettzinfo>
 8008940:	4681      	mov	r9, r0
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ff22 	bl	800878c <validate_structure>
 8008948:	e9d7 4300 	ldrd	r4, r3, [r7]
 800894c:	223c      	movs	r2, #60	@ 0x3c
 800894e:	fb02 4403 	mla	r4, r2, r3, r4
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	697d      	ldr	r5, [r7, #20]
 8008956:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800895a:	fb02 4403 	mla	r4, r2, r3, r4
 800895e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008962:	4ac1      	ldr	r2, [pc, #772]	@ (8008c68 <mktime+0x334>)
 8008964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008968:	3e01      	subs	r6, #1
 800896a:	2b01      	cmp	r3, #1
 800896c:	4416      	add	r6, r2
 800896e:	dd11      	ble.n	8008994 <mktime+0x60>
 8008970:	07a9      	lsls	r1, r5, #30
 8008972:	d10f      	bne.n	8008994 <mktime+0x60>
 8008974:	2264      	movs	r2, #100	@ 0x64
 8008976:	fb95 f3f2 	sdiv	r3, r5, r2
 800897a:	fb02 5313 	mls	r3, r2, r3, r5
 800897e:	b943      	cbnz	r3, 8008992 <mktime+0x5e>
 8008980:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008984:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008988:	fb93 f1f2 	sdiv	r1, r3, r2
 800898c:	fb02 3311 	mls	r3, r2, r1, r3
 8008990:	b903      	cbnz	r3, 8008994 <mktime+0x60>
 8008992:	3601      	adds	r6, #1
 8008994:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008998:	3310      	adds	r3, #16
 800899a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800899e:	4293      	cmp	r3, r2
 80089a0:	61fe      	str	r6, [r7, #28]
 80089a2:	f200 8167 	bhi.w	8008c74 <mktime+0x340>
 80089a6:	2d46      	cmp	r5, #70	@ 0x46
 80089a8:	f340 808e 	ble.w	8008ac8 <mktime+0x194>
 80089ac:	2346      	movs	r3, #70	@ 0x46
 80089ae:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80089b2:	2164      	movs	r1, #100	@ 0x64
 80089b4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80089b8:	079a      	lsls	r2, r3, #30
 80089ba:	d17f      	bne.n	8008abc <mktime+0x188>
 80089bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80089c0:	fb01 3212 	mls	r2, r1, r2, r3
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d17c      	bne.n	8008ac2 <mktime+0x18e>
 80089c8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80089cc:	fb92 fef0 	sdiv	lr, r2, r0
 80089d0:	fb00 221e 	mls	r2, r0, lr, r2
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	bf14      	ite	ne
 80089d8:	4662      	movne	r2, ip
 80089da:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80089de:	3301      	adds	r3, #1
 80089e0:	429d      	cmp	r5, r3
 80089e2:	4416      	add	r6, r2
 80089e4:	d1e8      	bne.n	80089b8 <mktime+0x84>
 80089e6:	4ba1      	ldr	r3, [pc, #644]	@ (8008c6c <mktime+0x338>)
 80089e8:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80089ec:	fbc6 4803 	smlal	r4, r8, r6, r3
 80089f0:	f000 f9fa 	bl	8008de8 <__tz_lock>
 80089f4:	f000 fa04 	bl	8008e00 <_tzset_unlocked>
 80089f8:	4b9d      	ldr	r3, [pc, #628]	@ (8008c70 <mktime+0x33c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 8140 	beq.w	8008c82 <mktime+0x34e>
 8008a02:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	4653      	mov	r3, sl
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	bfa8      	it	ge
 8008a0e:	2301      	movge	r3, #1
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008a16:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8008a1a:	4283      	cmp	r3, r0
 8008a1c:	f040 8096 	bne.w	8008b4c <mktime+0x218>
 8008a20:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008a24:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8008a28:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008a2c:	1a13      	subs	r3, r2, r0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	9a02      	ldr	r2, [sp, #8]
 8008a38:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008a3c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8008a40:	ebb2 0e03 	subs.w	lr, r2, r3
 8008a44:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8008a48:	4574      	cmp	r4, lr
 8008a4a:	eb78 0201 	sbcs.w	r2, r8, r1
 8008a4e:	f280 8085 	bge.w	8008b5c <mktime+0x228>
 8008a52:	f8d9 2000 	ldr.w	r2, [r9]
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	f000 808d 	beq.w	8008b76 <mktime+0x242>
 8008a5c:	9a03      	ldr	r2, [sp, #12]
 8008a5e:	4294      	cmp	r4, r2
 8008a60:	eb78 020b 	sbcs.w	r2, r8, fp
 8008a64:	f2c0 810a 	blt.w	8008c7c <mktime+0x348>
 8008a68:	4574      	cmp	r4, lr
 8008a6a:	eb78 0101 	sbcs.w	r1, r8, r1
 8008a6e:	bfb4      	ite	lt
 8008a70:	f04f 0b01 	movlt.w	fp, #1
 8008a74:	f04f 0b00 	movge.w	fp, #0
 8008a78:	f1ba 0f00 	cmp.w	sl, #0
 8008a7c:	f280 8087 	bge.w	8008b8e <mktime+0x25a>
 8008a80:	f1bb 0f01 	cmp.w	fp, #1
 8008a84:	f040 80ff 	bne.w	8008c86 <mktime+0x352>
 8008a88:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008a8c:	191c      	adds	r4, r3, r4
 8008a8e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008a92:	f04f 0b01 	mov.w	fp, #1
 8008a96:	f000 f9ad 	bl	8008df4 <__tz_unlock>
 8008a9a:	3604      	adds	r6, #4
 8008a9c:	2307      	movs	r3, #7
 8008a9e:	fb96 f3f3 	sdiv	r3, r6, r3
 8008aa2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008aa6:	1af6      	subs	r6, r6, r3
 8008aa8:	f100 80db 	bmi.w	8008c62 <mktime+0x32e>
 8008aac:	f8c7 b020 	str.w	fp, [r7, #32]
 8008ab0:	61be      	str	r6, [r7, #24]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	4641      	mov	r1, r8
 8008ab6:	b005      	add	sp, #20
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	f240 126d 	movw	r2, #365	@ 0x16d
 8008ac0:	e78d      	b.n	80089de <mktime+0xaa>
 8008ac2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008ac6:	e78a      	b.n	80089de <mktime+0xaa>
 8008ac8:	d08d      	beq.n	80089e6 <mktime+0xb2>
 8008aca:	2345      	movs	r3, #69	@ 0x45
 8008acc:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008ad0:	2164      	movs	r1, #100	@ 0x64
 8008ad2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008ad6:	e012      	b.n	8008afe <mktime+0x1ca>
 8008ad8:	bb62      	cbnz	r2, 8008b34 <mktime+0x200>
 8008ada:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ade:	fb01 3212 	mls	r2, r1, r2, r3
 8008ae2:	bb52      	cbnz	r2, 8008b3a <mktime+0x206>
 8008ae4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008ae8:	fb92 fef0 	sdiv	lr, r2, r0
 8008aec:	fb00 221e 	mls	r2, r0, lr, r2
 8008af0:	2a00      	cmp	r2, #0
 8008af2:	bf14      	ite	ne
 8008af4:	4662      	movne	r2, ip
 8008af6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008afa:	1ab6      	subs	r6, r6, r2
 8008afc:	3b01      	subs	r3, #1
 8008afe:	429d      	cmp	r5, r3
 8008b00:	f003 0203 	and.w	r2, r3, #3
 8008b04:	dbe8      	blt.n	8008ad8 <mktime+0x1a4>
 8008b06:	b9da      	cbnz	r2, 8008b40 <mktime+0x20c>
 8008b08:	2264      	movs	r2, #100	@ 0x64
 8008b0a:	fb95 f3f2 	sdiv	r3, r5, r2
 8008b0e:	fb02 5313 	mls	r3, r2, r3, r5
 8008b12:	b9c3      	cbnz	r3, 8008b46 <mktime+0x212>
 8008b14:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008b18:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008b1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008b20:	fb02 3311 	mls	r3, r2, r1, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f240 136d 	movw	r3, #365	@ 0x16d
 8008b2a:	bf08      	it	eq
 8008b2c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008b30:	1af6      	subs	r6, r6, r3
 8008b32:	e758      	b.n	80089e6 <mktime+0xb2>
 8008b34:	f240 126d 	movw	r2, #365	@ 0x16d
 8008b38:	e7df      	b.n	8008afa <mktime+0x1c6>
 8008b3a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008b3e:	e7dc      	b.n	8008afa <mktime+0x1c6>
 8008b40:	f240 136d 	movw	r3, #365	@ 0x16d
 8008b44:	e7f4      	b.n	8008b30 <mktime+0x1fc>
 8008b46:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8008b4a:	e7f1      	b.n	8008b30 <mktime+0x1fc>
 8008b4c:	f000 f8a2 	bl	8008c94 <__tzcalc_limits>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f47f af65 	bne.w	8008a20 <mktime+0xec>
 8008b56:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008b5a:	e791      	b.n	8008a80 <mktime+0x14c>
 8008b5c:	9a02      	ldr	r2, [sp, #8]
 8008b5e:	1a12      	subs	r2, r2, r0
 8008b60:	9202      	str	r2, [sp, #8]
 8008b62:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8008b66:	eb6c 0c02 	sbc.w	ip, ip, r2
 8008b6a:	9a02      	ldr	r2, [sp, #8]
 8008b6c:	4294      	cmp	r4, r2
 8008b6e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008b72:	dbf0      	blt.n	8008b56 <mktime+0x222>
 8008b74:	e76d      	b.n	8008a52 <mktime+0x11e>
 8008b76:	9a03      	ldr	r2, [sp, #12]
 8008b78:	4294      	cmp	r4, r2
 8008b7a:	eb78 020b 	sbcs.w	r2, r8, fp
 8008b7e:	f6ff af73 	blt.w	8008a68 <mktime+0x134>
 8008b82:	f1ba 0f00 	cmp.w	sl, #0
 8008b86:	f6ff af7f 	blt.w	8008a88 <mktime+0x154>
 8008b8a:	f04f 0b01 	mov.w	fp, #1
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	ea82 020b 	eor.w	r2, r2, fp
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	f47f af73 	bne.w	8008a80 <mktime+0x14c>
 8008b9a:	f1bb 0f00 	cmp.w	fp, #0
 8008b9e:	d035      	beq.n	8008c0c <mktime+0x2d8>
 8008ba0:	1a1b      	subs	r3, r3, r0
 8008ba2:	683a      	ldr	r2, [r7, #0]
 8008ba4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008ba8:	441a      	add	r2, r3
 8008baa:	191c      	adds	r4, r3, r4
 8008bac:	603a      	str	r2, [r7, #0]
 8008bae:	4638      	mov	r0, r7
 8008bb0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008bb4:	f7ff fdea 	bl	800878c <validate_structure>
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	ebb2 020a 	subs.w	r2, r2, sl
 8008bbe:	f43f af5f 	beq.w	8008a80 <mktime+0x14c>
 8008bc2:	2a01      	cmp	r2, #1
 8008bc4:	dc24      	bgt.n	8008c10 <mktime+0x2dc>
 8008bc6:	1c93      	adds	r3, r2, #2
 8008bc8:	bfd8      	it	le
 8008bca:	2201      	movle	r2, #1
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	18d3      	adds	r3, r2, r3
 8008bd0:	d527      	bpl.n	8008c22 <mktime+0x2ee>
 8008bd2:	1e6b      	subs	r3, r5, #1
 8008bd4:	0798      	lsls	r0, r3, #30
 8008bd6:	d11e      	bne.n	8008c16 <mktime+0x2e2>
 8008bd8:	2164      	movs	r1, #100	@ 0x64
 8008bda:	fb93 f0f1 	sdiv	r0, r3, r1
 8008bde:	fb01 3310 	mls	r3, r1, r0, r3
 8008be2:	b9db      	cbnz	r3, 8008c1c <mktime+0x2e8>
 8008be4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008be8:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008bec:	fb95 f1f3 	sdiv	r1, r5, r3
 8008bf0:	fb03 5511 	mls	r5, r3, r1, r5
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	f240 136d 	movw	r3, #365	@ 0x16d
 8008bfa:	bf18      	it	ne
 8008bfc:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	4416      	add	r6, r2
 8008c04:	e73c      	b.n	8008a80 <mktime+0x14c>
 8008c06:	f04f 0b00 	mov.w	fp, #0
 8008c0a:	e7c0      	b.n	8008b8e <mktime+0x25a>
 8008c0c:	1ac3      	subs	r3, r0, r3
 8008c0e:	e7c8      	b.n	8008ba2 <mktime+0x26e>
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	e7da      	b.n	8008bcc <mktime+0x298>
 8008c16:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8008c1a:	e7f1      	b.n	8008c00 <mktime+0x2cc>
 8008c1c:	f240 136d 	movw	r3, #365	@ 0x16d
 8008c20:	e7ee      	b.n	8008c00 <mktime+0x2cc>
 8008c22:	07a9      	lsls	r1, r5, #30
 8008c24:	d117      	bne.n	8008c56 <mktime+0x322>
 8008c26:	2064      	movs	r0, #100	@ 0x64
 8008c28:	fb95 f1f0 	sdiv	r1, r5, r0
 8008c2c:	fb00 5111 	mls	r1, r0, r1, r5
 8008c30:	b9a1      	cbnz	r1, 8008c5c <mktime+0x328>
 8008c32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008c36:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8008c3a:	fb95 f0f1 	sdiv	r0, r5, r1
 8008c3e:	fb01 5510 	mls	r5, r1, r0, r5
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	f240 116d 	movw	r1, #365	@ 0x16d
 8008c48:	bf08      	it	eq
 8008c4a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8008c4e:	428b      	cmp	r3, r1
 8008c50:	bfa8      	it	ge
 8008c52:	1a5b      	subge	r3, r3, r1
 8008c54:	e7d4      	b.n	8008c00 <mktime+0x2cc>
 8008c56:	f240 116d 	movw	r1, #365	@ 0x16d
 8008c5a:	e7f8      	b.n	8008c4e <mktime+0x31a>
 8008c5c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8008c60:	e7f5      	b.n	8008c4e <mktime+0x31a>
 8008c62:	3607      	adds	r6, #7
 8008c64:	e722      	b.n	8008aac <mktime+0x178>
 8008c66:	bf00      	nop
 8008c68:	0800c8ec 	.word	0x0800c8ec
 8008c6c:	00015180 	.word	0x00015180
 8008c70:	20004d78 	.word	0x20004d78
 8008c74:	f04f 34ff 	mov.w	r4, #4294967295
 8008c78:	46a0      	mov	r8, r4
 8008c7a:	e71a      	b.n	8008ab2 <mktime+0x17e>
 8008c7c:	f1ba 0f00 	cmp.w	sl, #0
 8008c80:	dac1      	bge.n	8008c06 <mktime+0x2d2>
 8008c82:	f04f 0b00 	mov.w	fp, #0
 8008c86:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008c8a:	191c      	adds	r4, r3, r4
 8008c8c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008c90:	e701      	b.n	8008a96 <mktime+0x162>
 8008c92:	bf00      	nop

08008c94 <__tzcalc_limits>:
 8008c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c98:	4604      	mov	r4, r0
 8008c9a:	f002 fc21 	bl	800b4e0 <__gettzinfo>
 8008c9e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	f340 8099 	ble.w	8008dda <__tzcalc_limits+0x146>
 8008ca8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8008cac:	19e5      	adds	r5, r4, r7
 8008cae:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8008cb2:	f240 126d 	movw	r2, #365	@ 0x16d
 8008cb6:	10ad      	asrs	r5, r5, #2
 8008cb8:	fb02 5503 	mla	r5, r2, r3, r5
 8008cbc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8008cc0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008cc4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008cc8:	4f45      	ldr	r7, [pc, #276]	@ (8008de0 <__tzcalc_limits+0x14c>)
 8008cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cce:	441d      	add	r5, r3
 8008cd0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008cd4:	eb04 030c 	add.w	r3, r4, ip
 8008cd8:	6044      	str	r4, [r0, #4]
 8008cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cde:	4601      	mov	r1, r0
 8008ce0:	441d      	add	r5, r3
 8008ce2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8008ce6:	7a0b      	ldrb	r3, [r1, #8]
 8008ce8:	694a      	ldr	r2, [r1, #20]
 8008cea:	2b4a      	cmp	r3, #74	@ 0x4a
 8008cec:	d133      	bne.n	8008d56 <__tzcalc_limits+0xc2>
 8008cee:	07a6      	lsls	r6, r4, #30
 8008cf0:	eb05 0302 	add.w	r3, r5, r2
 8008cf4:	d106      	bne.n	8008d04 <__tzcalc_limits+0x70>
 8008cf6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8008cfa:	fb94 f6fe 	sdiv	r6, r4, lr
 8008cfe:	fb0e 4616 	mls	r6, lr, r6, r4
 8008d02:	b936      	cbnz	r6, 8008d12 <__tzcalc_limits+0x7e>
 8008d04:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8008d08:	fb94 f6fe 	sdiv	r6, r4, lr
 8008d0c:	fb0e 4616 	mls	r6, lr, r6, r4
 8008d10:	b9fe      	cbnz	r6, 8008d52 <__tzcalc_limits+0xbe>
 8008d12:	2a3b      	cmp	r2, #59	@ 0x3b
 8008d14:	bfd4      	ite	le
 8008d16:	2200      	movle	r2, #0
 8008d18:	2201      	movgt	r2, #1
 8008d1a:	4413      	add	r3, r2
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	698a      	ldr	r2, [r1, #24]
 8008d20:	17d6      	asrs	r6, r2, #31
 8008d22:	fbc3 2607 	smlal	r2, r6, r3, r7
 8008d26:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008d28:	18d2      	adds	r2, r2, r3
 8008d2a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8008d2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008d32:	3128      	adds	r1, #40	@ 0x28
 8008d34:	458c      	cmp	ip, r1
 8008d36:	d1d6      	bne.n	8008ce6 <__tzcalc_limits+0x52>
 8008d38:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8008d3c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8008d40:	428c      	cmp	r4, r1
 8008d42:	4193      	sbcs	r3, r2
 8008d44:	bfb4      	ite	lt
 8008d46:	2301      	movlt	r3, #1
 8008d48:	2300      	movge	r3, #0
 8008d4a:	6003      	str	r3, [r0, #0]
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	2200      	movs	r2, #0
 8008d54:	e7e1      	b.n	8008d1a <__tzcalc_limits+0x86>
 8008d56:	2b44      	cmp	r3, #68	@ 0x44
 8008d58:	d101      	bne.n	8008d5e <__tzcalc_limits+0xca>
 8008d5a:	18ab      	adds	r3, r5, r2
 8008d5c:	e7df      	b.n	8008d1e <__tzcalc_limits+0x8a>
 8008d5e:	07a3      	lsls	r3, r4, #30
 8008d60:	d105      	bne.n	8008d6e <__tzcalc_limits+0xda>
 8008d62:	2664      	movs	r6, #100	@ 0x64
 8008d64:	fb94 f3f6 	sdiv	r3, r4, r6
 8008d68:	fb06 4313 	mls	r3, r6, r3, r4
 8008d6c:	bb7b      	cbnz	r3, 8008dce <__tzcalc_limits+0x13a>
 8008d6e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008d72:	fb94 f6f3 	sdiv	r6, r4, r3
 8008d76:	fb03 4616 	mls	r6, r3, r6, r4
 8008d7a:	fab6 f686 	clz	r6, r6
 8008d7e:	0976      	lsrs	r6, r6, #5
 8008d80:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8008de4 <__tzcalc_limits+0x150>
 8008d84:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008d88:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f04f 0800 	mov.w	r8, #0
 8008d92:	fb0a e606 	mla	r6, sl, r6, lr
 8008d96:	f108 0801 	add.w	r8, r8, #1
 8008d9a:	45c1      	cmp	r9, r8
 8008d9c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8008da0:	dc17      	bgt.n	8008dd2 <__tzcalc_limits+0x13e>
 8008da2:	f103 0804 	add.w	r8, r3, #4
 8008da6:	2607      	movs	r6, #7
 8008da8:	fb98 f6f6 	sdiv	r6, r8, r6
 8008dac:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008db0:	eba8 0606 	sub.w	r6, r8, r6
 8008db4:	1b92      	subs	r2, r2, r6
 8008db6:	690e      	ldr	r6, [r1, #16]
 8008db8:	f106 36ff 	add.w	r6, r6, #4294967295
 8008dbc:	bf48      	it	mi
 8008dbe:	3207      	addmi	r2, #7
 8008dc0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008dc4:	4432      	add	r2, r6
 8008dc6:	4572      	cmp	r2, lr
 8008dc8:	da05      	bge.n	8008dd6 <__tzcalc_limits+0x142>
 8008dca:	4413      	add	r3, r2
 8008dcc:	e7a7      	b.n	8008d1e <__tzcalc_limits+0x8a>
 8008dce:	2601      	movs	r6, #1
 8008dd0:	e7d6      	b.n	8008d80 <__tzcalc_limits+0xec>
 8008dd2:	4473      	add	r3, lr
 8008dd4:	e7df      	b.n	8008d96 <__tzcalc_limits+0x102>
 8008dd6:	3a07      	subs	r2, #7
 8008dd8:	e7f5      	b.n	8008dc6 <__tzcalc_limits+0x132>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e7b7      	b.n	8008d4e <__tzcalc_limits+0xba>
 8008dde:	bf00      	nop
 8008de0:	00015180 	.word	0x00015180
 8008de4:	0800ccb4 	.word	0x0800ccb4

08008de8 <__tz_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	@ (8008df0 <__tz_lock+0x8>)
 8008dea:	f000 bab6 	b.w	800935a <__retarget_lock_acquire>
 8008dee:	bf00      	nop
 8008df0:	20004d80 	.word	0x20004d80

08008df4 <__tz_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	@ (8008dfc <__tz_unlock+0x8>)
 8008df6:	f000 bab2 	b.w	800935e <__retarget_lock_release>
 8008dfa:	bf00      	nop
 8008dfc:	20004d80 	.word	0x20004d80

08008e00 <_tzset_unlocked>:
 8008e00:	4b01      	ldr	r3, [pc, #4]	@ (8008e08 <_tzset_unlocked+0x8>)
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	f000 b802 	b.w	8008e0c <_tzset_unlocked_r>
 8008e08:	20000198 	.word	0x20000198

08008e0c <_tzset_unlocked_r>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	b08d      	sub	sp, #52	@ 0x34
 8008e12:	4607      	mov	r7, r0
 8008e14:	f002 fb64 	bl	800b4e0 <__gettzinfo>
 8008e18:	49bc      	ldr	r1, [pc, #752]	@ (800910c <_tzset_unlocked_r+0x300>)
 8008e1a:	4dbd      	ldr	r5, [pc, #756]	@ (8009110 <_tzset_unlocked_r+0x304>)
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f001 f990 	bl	800a144 <_getenv_r>
 8008e24:	4606      	mov	r6, r0
 8008e26:	bb10      	cbnz	r0, 8008e6e <_tzset_unlocked_r+0x62>
 8008e28:	4bba      	ldr	r3, [pc, #744]	@ (8009114 <_tzset_unlocked_r+0x308>)
 8008e2a:	4abb      	ldr	r2, [pc, #748]	@ (8009118 <_tzset_unlocked_r+0x30c>)
 8008e2c:	6018      	str	r0, [r3, #0]
 8008e2e:	4bbb      	ldr	r3, [pc, #748]	@ (800911c <_tzset_unlocked_r+0x310>)
 8008e30:	62a0      	str	r0, [r4, #40]	@ 0x28
 8008e32:	6018      	str	r0, [r3, #0]
 8008e34:	4bba      	ldr	r3, [pc, #744]	@ (8009120 <_tzset_unlocked_r+0x314>)
 8008e36:	6520      	str	r0, [r4, #80]	@ 0x50
 8008e38:	e9c3 2200 	strd	r2, r2, [r3]
 8008e3c:	214a      	movs	r1, #74	@ 0x4a
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2300      	movs	r3, #0
 8008e42:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008e46:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8008e4a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8008e4e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8008e52:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008e5a:	6828      	ldr	r0, [r5, #0]
 8008e5c:	7221      	strb	r1, [r4, #8]
 8008e5e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008e62:	f7fe fdcf 	bl	8007a04 <free>
 8008e66:	602e      	str	r6, [r5, #0]
 8008e68:	b00d      	add	sp, #52	@ 0x34
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	6829      	ldr	r1, [r5, #0]
 8008e70:	2900      	cmp	r1, #0
 8008e72:	f040 808e 	bne.w	8008f92 <_tzset_unlocked_r+0x186>
 8008e76:	6828      	ldr	r0, [r5, #0]
 8008e78:	f7fe fdc4 	bl	8007a04 <free>
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7f7 fa07 	bl	8000290 <strlen>
 8008e82:	1c41      	adds	r1, r0, #1
 8008e84:	4638      	mov	r0, r7
 8008e86:	f7fe fde7 	bl	8007a58 <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f040 8086 	bne.w	8008f9e <_tzset_unlocked_r+0x192>
 8008e92:	4aa2      	ldr	r2, [pc, #648]	@ (800911c <_tzset_unlocked_r+0x310>)
 8008e94:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009120 <_tzset_unlocked_r+0x314>
 8008e98:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009114 <_tzset_unlocked_r+0x308>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	4aa0      	ldr	r2, [pc, #640]	@ (8009124 <_tzset_unlocked_r+0x318>)
 8008ea2:	f8ca 3000 	str.w	r3, [sl]
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	e9c8 2200 	strd	r2, r2, [r8]
 8008eae:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008eb2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008eb6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8008eba:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8008ebe:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008ec2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008ec6:	224a      	movs	r2, #74	@ 0x4a
 8008ec8:	7222      	strb	r2, [r4, #8]
 8008eca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ecc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008ed0:	6523      	str	r3, [r4, #80]	@ 0x50
 8008ed2:	7833      	ldrb	r3, [r6, #0]
 8008ed4:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ed6:	bf08      	it	eq
 8008ed8:	3601      	addeq	r6, #1
 8008eda:	7833      	ldrb	r3, [r6, #0]
 8008edc:	2b3c      	cmp	r3, #60	@ 0x3c
 8008ede:	d162      	bne.n	8008fa6 <_tzset_unlocked_r+0x19a>
 8008ee0:	1c75      	adds	r5, r6, #1
 8008ee2:	4a91      	ldr	r2, [pc, #580]	@ (8009128 <_tzset_unlocked_r+0x31c>)
 8008ee4:	4991      	ldr	r1, [pc, #580]	@ (800912c <_tzset_unlocked_r+0x320>)
 8008ee6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f7ff fbaf 	bl	800864c <siscanf>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	ddba      	ble.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ef4:	1eda      	subs	r2, r3, #3
 8008ef6:	2a07      	cmp	r2, #7
 8008ef8:	d8b6      	bhi.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008efa:	5ceb      	ldrb	r3, [r5, r3]
 8008efc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008efe:	d1b3      	bne.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008f00:	3602      	adds	r6, #2
 8008f02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f04:	18f5      	adds	r5, r6, r3
 8008f06:	5cf3      	ldrb	r3, [r6, r3]
 8008f08:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f0a:	d15a      	bne.n	8008fc2 <_tzset_unlocked_r+0x1b6>
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	f04f 39ff 	mov.w	r9, #4294967295
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008f18:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008f1c:	af08      	add	r7, sp, #32
 8008f1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f20:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8008f24:	9303      	str	r3, [sp, #12]
 8008f26:	f10d 031e 	add.w	r3, sp, #30
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	4980      	ldr	r1, [pc, #512]	@ (8009130 <_tzset_unlocked_r+0x324>)
 8008f2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f30:	aa07      	add	r2, sp, #28
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7ff fb8a 	bl	800864c <siscanf>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	dd95      	ble.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008f3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008f40:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8008f44:	223c      	movs	r2, #60	@ 0x3c
 8008f46:	fb02 6603 	mla	r6, r2, r3, r6
 8008f4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008f4e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008f52:	fb02 6603 	mla	r6, r2, r3, r6
 8008f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f58:	fb09 f606 	mul.w	r6, r9, r6
 8008f5c:	eb05 0903 	add.w	r9, r5, r3
 8008f60:	5ceb      	ldrb	r3, [r5, r3]
 8008f62:	2b3c      	cmp	r3, #60	@ 0x3c
 8008f64:	f040 80ee 	bne.w	8009144 <_tzset_unlocked_r+0x338>
 8008f68:	f109 0501 	add.w	r5, r9, #1
 8008f6c:	4a71      	ldr	r2, [pc, #452]	@ (8009134 <_tzset_unlocked_r+0x328>)
 8008f6e:	496f      	ldr	r1, [pc, #444]	@ (800912c <_tzset_unlocked_r+0x320>)
 8008f70:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f72:	4628      	mov	r0, r5
 8008f74:	f7ff fb6a 	bl	800864c <siscanf>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	dc28      	bgt.n	8008fce <_tzset_unlocked_r+0x1c2>
 8008f7c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008f80:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f82:	d124      	bne.n	8008fce <_tzset_unlocked_r+0x1c2>
 8008f84:	4b68      	ldr	r3, [pc, #416]	@ (8009128 <_tzset_unlocked_r+0x31c>)
 8008f86:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008f88:	e9c8 3300 	strd	r3, r3, [r8]
 8008f8c:	f8ca 6000 	str.w	r6, [sl]
 8008f90:	e76a      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008f92:	f7f7 f91d 	bl	80001d0 <strcmp>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	f47f af6d 	bne.w	8008e76 <_tzset_unlocked_r+0x6a>
 8008f9c:	e764      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	f000 f9df 	bl	8009362 <strcpy>
 8008fa4:	e775      	b.n	8008e92 <_tzset_unlocked_r+0x86>
 8008fa6:	4a60      	ldr	r2, [pc, #384]	@ (8009128 <_tzset_unlocked_r+0x31c>)
 8008fa8:	4963      	ldr	r1, [pc, #396]	@ (8009138 <_tzset_unlocked_r+0x32c>)
 8008faa:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff fb4d 	bl	800864c <siscanf>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f77f af58 	ble.w	8008e68 <_tzset_unlocked_r+0x5c>
 8008fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fba:	3b03      	subs	r3, #3
 8008fbc:	2b07      	cmp	r3, #7
 8008fbe:	d9a0      	bls.n	8008f02 <_tzset_unlocked_r+0xf6>
 8008fc0:	e752      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 8008fc2:	2b2b      	cmp	r3, #43	@ 0x2b
 8008fc4:	bf08      	it	eq
 8008fc6:	3501      	addeq	r5, #1
 8008fc8:	f04f 0901 	mov.w	r9, #1
 8008fcc:	e7a1      	b.n	8008f12 <_tzset_unlocked_r+0x106>
 8008fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd0:	1eda      	subs	r2, r3, #3
 8008fd2:	2a07      	cmp	r2, #7
 8008fd4:	f63f af48 	bhi.w	8008e68 <_tzset_unlocked_r+0x5c>
 8008fd8:	5ceb      	ldrb	r3, [r5, r3]
 8008fda:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fdc:	f47f af44 	bne.w	8008e68 <_tzset_unlocked_r+0x5c>
 8008fe0:	f109 0902 	add.w	r9, r9, #2
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe6:	eb09 0503 	add.w	r5, r9, r3
 8008fea:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008fee:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ff0:	f040 80b7 	bne.w	8009162 <_tzset_unlocked_r+0x356>
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	f04f 39ff 	mov.w	r9, #4294967295
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009000:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009004:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009008:	930a      	str	r3, [sp, #40]	@ 0x28
 800900a:	ab0a      	add	r3, sp, #40	@ 0x28
 800900c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	f10d 031e 	add.w	r3, sp, #30
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	4945      	ldr	r1, [pc, #276]	@ (8009130 <_tzset_unlocked_r+0x324>)
 800901a:	ab0a      	add	r3, sp, #40	@ 0x28
 800901c:	aa07      	add	r2, sp, #28
 800901e:	4628      	mov	r0, r5
 8009020:	f7ff fb14 	bl	800864c <siscanf>
 8009024:	2800      	cmp	r0, #0
 8009026:	f300 80a2 	bgt.w	800916e <_tzset_unlocked_r+0x362>
 800902a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009032:	4627      	mov	r7, r4
 8009034:	441d      	add	r5, r3
 8009036:	f04f 0b00 	mov.w	fp, #0
 800903a:	782b      	ldrb	r3, [r5, #0]
 800903c:	2b2c      	cmp	r3, #44	@ 0x2c
 800903e:	bf08      	it	eq
 8009040:	3501      	addeq	r5, #1
 8009042:	f895 9000 	ldrb.w	r9, [r5]
 8009046:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800904a:	f040 80a3 	bne.w	8009194 <_tzset_unlocked_r+0x388>
 800904e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009050:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8009054:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009058:	aa09      	add	r2, sp, #36	@ 0x24
 800905a:	9200      	str	r2, [sp, #0]
 800905c:	4937      	ldr	r1, [pc, #220]	@ (800913c <_tzset_unlocked_r+0x330>)
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8009064:	4628      	mov	r0, r5
 8009066:	f7ff faf1 	bl	800864c <siscanf>
 800906a:	2803      	cmp	r0, #3
 800906c:	f47f aefc 	bne.w	8008e68 <_tzset_unlocked_r+0x5c>
 8009070:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8009074:	1e4b      	subs	r3, r1, #1
 8009076:	2b0b      	cmp	r3, #11
 8009078:	f63f aef6 	bhi.w	8008e68 <_tzset_unlocked_r+0x5c>
 800907c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8009080:	1e53      	subs	r3, r2, #1
 8009082:	2b04      	cmp	r3, #4
 8009084:	f63f aef0 	bhi.w	8008e68 <_tzset_unlocked_r+0x5c>
 8009088:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800908c:	2b06      	cmp	r3, #6
 800908e:	f63f aeeb 	bhi.w	8008e68 <_tzset_unlocked_r+0x5c>
 8009092:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009096:	f887 9008 	strb.w	r9, [r7, #8]
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800909e:	eb05 0903 	add.w	r9, r5, r3
 80090a2:	2500      	movs	r5, #0
 80090a4:	f04f 0302 	mov.w	r3, #2
 80090a8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80090ac:	f8ad 501e 	strh.w	r5, [sp, #30]
 80090b0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80090b4:	950a      	str	r5, [sp, #40]	@ 0x28
 80090b6:	f899 3000 	ldrb.w	r3, [r9]
 80090ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80090bc:	f040 8096 	bne.w	80091ec <_tzset_unlocked_r+0x3e0>
 80090c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80090c2:	aa08      	add	r2, sp, #32
 80090c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80090c8:	f10d 021e 	add.w	r2, sp, #30
 80090cc:	9200      	str	r2, [sp, #0]
 80090ce:	491c      	ldr	r1, [pc, #112]	@ (8009140 <_tzset_unlocked_r+0x334>)
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	aa07      	add	r2, sp, #28
 80090d4:	4648      	mov	r0, r9
 80090d6:	f7ff fab9 	bl	800864c <siscanf>
 80090da:	42a8      	cmp	r0, r5
 80090dc:	f300 8086 	bgt.w	80091ec <_tzset_unlocked_r+0x3e0>
 80090e0:	214a      	movs	r1, #74	@ 0x4a
 80090e2:	2200      	movs	r2, #0
 80090e4:	2300      	movs	r3, #0
 80090e6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80090ea:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80090ee:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80090f2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80090f6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80090fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80090fe:	7221      	strb	r1, [r4, #8]
 8009100:	62a5      	str	r5, [r4, #40]	@ 0x28
 8009102:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009106:	6525      	str	r5, [r4, #80]	@ 0x50
 8009108:	e6ae      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 800910a:	bf00      	nop
 800910c:	0800c94c 	.word	0x0800c94c
 8009110:	20004d58 	.word	0x20004d58
 8009114:	20004d74 	.word	0x20004d74
 8009118:	0800c94f 	.word	0x0800c94f
 800911c:	20004d78 	.word	0x20004d78
 8009120:	20000024 	.word	0x20000024
 8009124:	0800be11 	.word	0x0800be11
 8009128:	20004d68 	.word	0x20004d68
 800912c:	0800c953 	.word	0x0800c953
 8009130:	0800c988 	.word	0x0800c988
 8009134:	20004d5c 	.word	0x20004d5c
 8009138:	0800c966 	.word	0x0800c966
 800913c:	0800c974 	.word	0x0800c974
 8009140:	0800c987 	.word	0x0800c987
 8009144:	4a3e      	ldr	r2, [pc, #248]	@ (8009240 <_tzset_unlocked_r+0x434>)
 8009146:	493f      	ldr	r1, [pc, #252]	@ (8009244 <_tzset_unlocked_r+0x438>)
 8009148:	ab0a      	add	r3, sp, #40	@ 0x28
 800914a:	4648      	mov	r0, r9
 800914c:	f7ff fa7e 	bl	800864c <siscanf>
 8009150:	2800      	cmp	r0, #0
 8009152:	f77f af17 	ble.w	8008f84 <_tzset_unlocked_r+0x178>
 8009156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009158:	3b03      	subs	r3, #3
 800915a:	2b07      	cmp	r3, #7
 800915c:	f67f af42 	bls.w	8008fe4 <_tzset_unlocked_r+0x1d8>
 8009160:	e682      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 8009162:	2b2b      	cmp	r3, #43	@ 0x2b
 8009164:	bf08      	it	eq
 8009166:	3501      	addeq	r5, #1
 8009168:	f04f 0901 	mov.w	r9, #1
 800916c:	e745      	b.n	8008ffa <_tzset_unlocked_r+0x1ee>
 800916e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009172:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009176:	213c      	movs	r1, #60	@ 0x3c
 8009178:	fb01 3302 	mla	r3, r1, r2, r3
 800917c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009180:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009184:	fb01 3302 	mla	r3, r1, r2, r3
 8009188:	fb09 f303 	mul.w	r3, r9, r3
 800918c:	e74f      	b.n	800902e <_tzset_unlocked_r+0x222>
 800918e:	f04f 0b01 	mov.w	fp, #1
 8009192:	e752      	b.n	800903a <_tzset_unlocked_r+0x22e>
 8009194:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8009198:	bf06      	itte	eq
 800919a:	3501      	addeq	r5, #1
 800919c:	464b      	moveq	r3, r9
 800919e:	2344      	movne	r3, #68	@ 0x44
 80091a0:	220a      	movs	r2, #10
 80091a2:	a90b      	add	r1, sp, #44	@ 0x2c
 80091a4:	4628      	mov	r0, r5
 80091a6:	9305      	str	r3, [sp, #20]
 80091a8:	f001 fbd8 	bl	800a95c <strtoul>
 80091ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80091b0:	9b05      	ldr	r3, [sp, #20]
 80091b2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80091b6:	45a9      	cmp	r9, r5
 80091b8:	d114      	bne.n	80091e4 <_tzset_unlocked_r+0x3d8>
 80091ba:	234d      	movs	r3, #77	@ 0x4d
 80091bc:	f1bb 0f00 	cmp.w	fp, #0
 80091c0:	d107      	bne.n	80091d2 <_tzset_unlocked_r+0x3c6>
 80091c2:	7223      	strb	r3, [r4, #8]
 80091c4:	2103      	movs	r1, #3
 80091c6:	2302      	movs	r3, #2
 80091c8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80091cc:	f8c4 b014 	str.w	fp, [r4, #20]
 80091d0:	e767      	b.n	80090a2 <_tzset_unlocked_r+0x296>
 80091d2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80091d6:	220b      	movs	r2, #11
 80091d8:	2301      	movs	r3, #1
 80091da:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80091de:	2300      	movs	r3, #0
 80091e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80091e2:	e75e      	b.n	80090a2 <_tzset_unlocked_r+0x296>
 80091e4:	b280      	uxth	r0, r0
 80091e6:	723b      	strb	r3, [r7, #8]
 80091e8:	6178      	str	r0, [r7, #20]
 80091ea:	e75a      	b.n	80090a2 <_tzset_unlocked_r+0x296>
 80091ec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80091f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80091f4:	213c      	movs	r1, #60	@ 0x3c
 80091f6:	fb01 3302 	mla	r3, r1, r2, r3
 80091fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80091fe:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009202:	fb01 3302 	mla	r3, r1, r2, r3
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800920a:	3728      	adds	r7, #40	@ 0x28
 800920c:	444d      	add	r5, r9
 800920e:	f1bb 0f00 	cmp.w	fp, #0
 8009212:	d0bc      	beq.n	800918e <_tzset_unlocked_r+0x382>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	6523      	str	r3, [r4, #80]	@ 0x50
 8009218:	4b0b      	ldr	r3, [pc, #44]	@ (8009248 <_tzset_unlocked_r+0x43c>)
 800921a:	f8c8 3000 	str.w	r3, [r8]
 800921e:	6860      	ldr	r0, [r4, #4]
 8009220:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <_tzset_unlocked_r+0x434>)
 8009222:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009224:	f8c8 3004 	str.w	r3, [r8, #4]
 8009228:	f7ff fd34 	bl	8008c94 <__tzcalc_limits>
 800922c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800922e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009230:	f8ca 2000 	str.w	r2, [sl]
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	4a05      	ldr	r2, [pc, #20]	@ (800924c <_tzset_unlocked_r+0x440>)
 8009238:	bf18      	it	ne
 800923a:	2301      	movne	r3, #1
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	e613      	b.n	8008e68 <_tzset_unlocked_r+0x5c>
 8009240:	20004d5c 	.word	0x20004d5c
 8009244:	0800c966 	.word	0x0800c966
 8009248:	20004d68 	.word	0x20004d68
 800924c:	20004d78 	.word	0x20004d78

08009250 <_localeconv_r>:
 8009250:	4800      	ldr	r0, [pc, #0]	@ (8009254 <_localeconv_r+0x4>)
 8009252:	4770      	bx	lr
 8009254:	2000011c 	.word	0x2000011c

08009258 <_close_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d06      	ldr	r5, [pc, #24]	@ (8009274 <_close_r+0x1c>)
 800925c:	2300      	movs	r3, #0
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	f7f9 ffe4 	bl	8003230 <_close>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_close_r+0x1a>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_close_r+0x1a>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	20004d7c 	.word	0x20004d7c

08009278 <_lseek_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4d07      	ldr	r5, [pc, #28]	@ (8009298 <_lseek_r+0x20>)
 800927c:	4604      	mov	r4, r0
 800927e:	4608      	mov	r0, r1
 8009280:	4611      	mov	r1, r2
 8009282:	2200      	movs	r2, #0
 8009284:	602a      	str	r2, [r5, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f7f9 ffdc 	bl	8003244 <_lseek>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_lseek_r+0x1e>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_lseek_r+0x1e>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20004d7c 	.word	0x20004d7c

0800929c <_read_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	@ (80092bc <_read_r+0x20>)
 80092a0:	4604      	mov	r4, r0
 80092a2:	4608      	mov	r0, r1
 80092a4:	4611      	mov	r1, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	602a      	str	r2, [r5, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f7f9 ffa4 	bl	80031f8 <_read>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_read_r+0x1e>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_read_r+0x1e>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20004d7c 	.word	0x20004d7c

080092c0 <_sbrk_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	@ (80092dc <_sbrk_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f9 ffbc 	bl	8003248 <_sbrk>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_sbrk_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_sbrk_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20004d7c 	.word	0x20004d7c

080092e0 <_write_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d07      	ldr	r5, [pc, #28]	@ (8009300 <_write_r+0x20>)
 80092e4:	4604      	mov	r4, r0
 80092e6:	4608      	mov	r0, r1
 80092e8:	4611      	mov	r1, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	602a      	str	r2, [r5, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f7f9 ff90 	bl	8003214 <_write>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	d102      	bne.n	80092fe <_write_r+0x1e>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	b103      	cbz	r3, 80092fe <_write_r+0x1e>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	20004d7c 	.word	0x20004d7c

08009304 <__errno>:
 8009304:	4b01      	ldr	r3, [pc, #4]	@ (800930c <__errno+0x8>)
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20000198 	.word	0x20000198

08009310 <__libc_init_array>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4d0d      	ldr	r5, [pc, #52]	@ (8009348 <__libc_init_array+0x38>)
 8009314:	4c0d      	ldr	r4, [pc, #52]	@ (800934c <__libc_init_array+0x3c>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	2600      	movs	r6, #0
 800931c:	42a6      	cmp	r6, r4
 800931e:	d109      	bne.n	8009334 <__libc_init_array+0x24>
 8009320:	4d0b      	ldr	r5, [pc, #44]	@ (8009350 <__libc_init_array+0x40>)
 8009322:	4c0c      	ldr	r4, [pc, #48]	@ (8009354 <__libc_init_array+0x44>)
 8009324:	f002 fccc 	bl	800bcc0 <_init>
 8009328:	1b64      	subs	r4, r4, r5
 800932a:	10a4      	asrs	r4, r4, #2
 800932c:	2600      	movs	r6, #0
 800932e:	42a6      	cmp	r6, r4
 8009330:	d105      	bne.n	800933e <__libc_init_array+0x2e>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	f855 3b04 	ldr.w	r3, [r5], #4
 8009338:	4798      	blx	r3
 800933a:	3601      	adds	r6, #1
 800933c:	e7ee      	b.n	800931c <__libc_init_array+0xc>
 800933e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009342:	4798      	blx	r3
 8009344:	3601      	adds	r6, #1
 8009346:	e7f2      	b.n	800932e <__libc_init_array+0x1e>
 8009348:	0800cd5c 	.word	0x0800cd5c
 800934c:	0800cd5c 	.word	0x0800cd5c
 8009350:	0800cd5c 	.word	0x0800cd5c
 8009354:	0800cd60 	.word	0x0800cd60

08009358 <__retarget_lock_init_recursive>:
 8009358:	4770      	bx	lr

0800935a <__retarget_lock_acquire>:
 800935a:	4770      	bx	lr

0800935c <__retarget_lock_acquire_recursive>:
 800935c:	4770      	bx	lr

0800935e <__retarget_lock_release>:
 800935e:	4770      	bx	lr

08009360 <__retarget_lock_release_recursive>:
 8009360:	4770      	bx	lr

08009362 <strcpy>:
 8009362:	4603      	mov	r3, r0
 8009364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009368:	f803 2b01 	strb.w	r2, [r3], #1
 800936c:	2a00      	cmp	r2, #0
 800936e:	d1f9      	bne.n	8009364 <strcpy+0x2>
 8009370:	4770      	bx	lr

08009372 <memcpy>:
 8009372:	440a      	add	r2, r1
 8009374:	4291      	cmp	r1, r2
 8009376:	f100 33ff 	add.w	r3, r0, #4294967295
 800937a:	d100      	bne.n	800937e <memcpy+0xc>
 800937c:	4770      	bx	lr
 800937e:	b510      	push	{r4, lr}
 8009380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009388:	4291      	cmp	r1, r2
 800938a:	d1f9      	bne.n	8009380 <memcpy+0xe>
 800938c:	bd10      	pop	{r4, pc}

0800938e <div>:
 800938e:	b510      	push	{r4, lr}
 8009390:	fb91 f4f2 	sdiv	r4, r1, r2
 8009394:	fb02 1114 	mls	r1, r2, r4, r1
 8009398:	6004      	str	r4, [r0, #0]
 800939a:	6041      	str	r1, [r0, #4]
 800939c:	bd10      	pop	{r4, pc}

0800939e <quorem>:
 800939e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a2:	6903      	ldr	r3, [r0, #16]
 80093a4:	690c      	ldr	r4, [r1, #16]
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	4607      	mov	r7, r0
 80093aa:	db7e      	blt.n	80094aa <quorem+0x10c>
 80093ac:	3c01      	subs	r4, #1
 80093ae:	f101 0814 	add.w	r8, r1, #20
 80093b2:	00a3      	lsls	r3, r4, #2
 80093b4:	f100 0514 	add.w	r5, r0, #20
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093c8:	3301      	adds	r3, #1
 80093ca:	429a      	cmp	r2, r3
 80093cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80093d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80093d4:	d32e      	bcc.n	8009434 <quorem+0x96>
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	46c4      	mov	ip, r8
 80093dc:	46ae      	mov	lr, r5
 80093de:	46d3      	mov	fp, sl
 80093e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093e4:	b298      	uxth	r0, r3
 80093e6:	fb06 a000 	mla	r0, r6, r0, sl
 80093ea:	0c02      	lsrs	r2, r0, #16
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	fb06 2303 	mla	r3, r6, r3, r2
 80093f2:	f8de 2000 	ldr.w	r2, [lr]
 80093f6:	b280      	uxth	r0, r0
 80093f8:	b292      	uxth	r2, r2
 80093fa:	1a12      	subs	r2, r2, r0
 80093fc:	445a      	add	r2, fp
 80093fe:	f8de 0000 	ldr.w	r0, [lr]
 8009402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009406:	b29b      	uxth	r3, r3
 8009408:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800940c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009410:	b292      	uxth	r2, r2
 8009412:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009416:	45e1      	cmp	r9, ip
 8009418:	f84e 2b04 	str.w	r2, [lr], #4
 800941c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009420:	d2de      	bcs.n	80093e0 <quorem+0x42>
 8009422:	9b00      	ldr	r3, [sp, #0]
 8009424:	58eb      	ldr	r3, [r5, r3]
 8009426:	b92b      	cbnz	r3, 8009434 <quorem+0x96>
 8009428:	9b01      	ldr	r3, [sp, #4]
 800942a:	3b04      	subs	r3, #4
 800942c:	429d      	cmp	r5, r3
 800942e:	461a      	mov	r2, r3
 8009430:	d32f      	bcc.n	8009492 <quorem+0xf4>
 8009432:	613c      	str	r4, [r7, #16]
 8009434:	4638      	mov	r0, r7
 8009436:	f001 f919 	bl	800a66c <__mcmp>
 800943a:	2800      	cmp	r0, #0
 800943c:	db25      	blt.n	800948a <quorem+0xec>
 800943e:	4629      	mov	r1, r5
 8009440:	2000      	movs	r0, #0
 8009442:	f858 2b04 	ldr.w	r2, [r8], #4
 8009446:	f8d1 c000 	ldr.w	ip, [r1]
 800944a:	fa1f fe82 	uxth.w	lr, r2
 800944e:	fa1f f38c 	uxth.w	r3, ip
 8009452:	eba3 030e 	sub.w	r3, r3, lr
 8009456:	4403      	add	r3, r0
 8009458:	0c12      	lsrs	r2, r2, #16
 800945a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800945e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009462:	b29b      	uxth	r3, r3
 8009464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009468:	45c1      	cmp	r9, r8
 800946a:	f841 3b04 	str.w	r3, [r1], #4
 800946e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009472:	d2e6      	bcs.n	8009442 <quorem+0xa4>
 8009474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800947c:	b922      	cbnz	r2, 8009488 <quorem+0xea>
 800947e:	3b04      	subs	r3, #4
 8009480:	429d      	cmp	r5, r3
 8009482:	461a      	mov	r2, r3
 8009484:	d30b      	bcc.n	800949e <quorem+0x100>
 8009486:	613c      	str	r4, [r7, #16]
 8009488:	3601      	adds	r6, #1
 800948a:	4630      	mov	r0, r6
 800948c:	b003      	add	sp, #12
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	3b04      	subs	r3, #4
 8009496:	2a00      	cmp	r2, #0
 8009498:	d1cb      	bne.n	8009432 <quorem+0x94>
 800949a:	3c01      	subs	r4, #1
 800949c:	e7c6      	b.n	800942c <quorem+0x8e>
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	2a00      	cmp	r2, #0
 80094a4:	d1ef      	bne.n	8009486 <quorem+0xe8>
 80094a6:	3c01      	subs	r4, #1
 80094a8:	e7ea      	b.n	8009480 <quorem+0xe2>
 80094aa:	2000      	movs	r0, #0
 80094ac:	e7ee      	b.n	800948c <quorem+0xee>
	...

080094b0 <_dtoa_r>:
 80094b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	69c7      	ldr	r7, [r0, #28]
 80094b6:	b099      	sub	sp, #100	@ 0x64
 80094b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094bc:	ec55 4b10 	vmov	r4, r5, d0
 80094c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80094c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80094c4:	4683      	mov	fp, r0
 80094c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80094c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094ca:	b97f      	cbnz	r7, 80094ec <_dtoa_r+0x3c>
 80094cc:	2010      	movs	r0, #16
 80094ce:	f7fe fa91 	bl	80079f4 <malloc>
 80094d2:	4602      	mov	r2, r0
 80094d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80094d8:	b920      	cbnz	r0, 80094e4 <_dtoa_r+0x34>
 80094da:	4ba7      	ldr	r3, [pc, #668]	@ (8009778 <_dtoa_r+0x2c8>)
 80094dc:	21ef      	movs	r1, #239	@ 0xef
 80094de:	48a7      	ldr	r0, [pc, #668]	@ (800977c <_dtoa_r+0x2cc>)
 80094e0:	f002 f802 	bl	800b4e8 <__assert_func>
 80094e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80094e8:	6007      	str	r7, [r0, #0]
 80094ea:	60c7      	str	r7, [r0, #12]
 80094ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094f0:	6819      	ldr	r1, [r3, #0]
 80094f2:	b159      	cbz	r1, 800950c <_dtoa_r+0x5c>
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	604a      	str	r2, [r1, #4]
 80094f8:	2301      	movs	r3, #1
 80094fa:	4093      	lsls	r3, r2
 80094fc:	608b      	str	r3, [r1, #8]
 80094fe:	4658      	mov	r0, fp
 8009500:	f000 fe7a 	bl	800a1f8 <_Bfree>
 8009504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	1e2b      	subs	r3, r5, #0
 800950e:	bfb9      	ittee	lt
 8009510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009514:	9303      	strlt	r3, [sp, #12]
 8009516:	2300      	movge	r3, #0
 8009518:	6033      	strge	r3, [r6, #0]
 800951a:	9f03      	ldr	r7, [sp, #12]
 800951c:	4b98      	ldr	r3, [pc, #608]	@ (8009780 <_dtoa_r+0x2d0>)
 800951e:	bfbc      	itt	lt
 8009520:	2201      	movlt	r2, #1
 8009522:	6032      	strlt	r2, [r6, #0]
 8009524:	43bb      	bics	r3, r7
 8009526:	d112      	bne.n	800954e <_dtoa_r+0x9e>
 8009528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800952a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009534:	4323      	orrs	r3, r4
 8009536:	f000 854d 	beq.w	8009fd4 <_dtoa_r+0xb24>
 800953a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800953c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009794 <_dtoa_r+0x2e4>
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 854f 	beq.w	8009fe4 <_dtoa_r+0xb34>
 8009546:	f10a 0303 	add.w	r3, sl, #3
 800954a:	f000 bd49 	b.w	8009fe0 <_dtoa_r+0xb30>
 800954e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009552:	2200      	movs	r2, #0
 8009554:	ec51 0b17 	vmov	r0, r1, d7
 8009558:	2300      	movs	r3, #0
 800955a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800955e:	f7f7 fac3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009562:	4680      	mov	r8, r0
 8009564:	b158      	cbz	r0, 800957e <_dtoa_r+0xce>
 8009566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009568:	2301      	movs	r3, #1
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800956e:	b113      	cbz	r3, 8009576 <_dtoa_r+0xc6>
 8009570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009572:	4b84      	ldr	r3, [pc, #528]	@ (8009784 <_dtoa_r+0x2d4>)
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009798 <_dtoa_r+0x2e8>
 800957a:	f000 bd33 	b.w	8009fe4 <_dtoa_r+0xb34>
 800957e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009582:	aa16      	add	r2, sp, #88	@ 0x58
 8009584:	a917      	add	r1, sp, #92	@ 0x5c
 8009586:	4658      	mov	r0, fp
 8009588:	f001 f920 	bl	800a7cc <__d2b>
 800958c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009590:	4681      	mov	r9, r0
 8009592:	2e00      	cmp	r6, #0
 8009594:	d077      	beq.n	8009686 <_dtoa_r+0x1d6>
 8009596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800959c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095b0:	4619      	mov	r1, r3
 80095b2:	2200      	movs	r2, #0
 80095b4:	4b74      	ldr	r3, [pc, #464]	@ (8009788 <_dtoa_r+0x2d8>)
 80095b6:	f7f6 fe77 	bl	80002a8 <__aeabi_dsub>
 80095ba:	a369      	add	r3, pc, #420	@ (adr r3, 8009760 <_dtoa_r+0x2b0>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7f7 f82a 	bl	8000618 <__aeabi_dmul>
 80095c4:	a368      	add	r3, pc, #416	@ (adr r3, 8009768 <_dtoa_r+0x2b8>)
 80095c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ca:	f7f6 fe6f 	bl	80002ac <__adddf3>
 80095ce:	4604      	mov	r4, r0
 80095d0:	4630      	mov	r0, r6
 80095d2:	460d      	mov	r5, r1
 80095d4:	f7f6 ffb6 	bl	8000544 <__aeabi_i2d>
 80095d8:	a365      	add	r3, pc, #404	@ (adr r3, 8009770 <_dtoa_r+0x2c0>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f7f7 f81b 	bl	8000618 <__aeabi_dmul>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f6 fe5f 	bl	80002ac <__adddf3>
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	f7f7 fac1 	bl	8000b78 <__aeabi_d2iz>
 80095f6:	2200      	movs	r2, #0
 80095f8:	4607      	mov	r7, r0
 80095fa:	2300      	movs	r3, #0
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f7 fa7c 	bl	8000afc <__aeabi_dcmplt>
 8009604:	b140      	cbz	r0, 8009618 <_dtoa_r+0x168>
 8009606:	4638      	mov	r0, r7
 8009608:	f7f6 ff9c 	bl	8000544 <__aeabi_i2d>
 800960c:	4622      	mov	r2, r4
 800960e:	462b      	mov	r3, r5
 8009610:	f7f7 fa6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009614:	b900      	cbnz	r0, 8009618 <_dtoa_r+0x168>
 8009616:	3f01      	subs	r7, #1
 8009618:	2f16      	cmp	r7, #22
 800961a:	d851      	bhi.n	80096c0 <_dtoa_r+0x210>
 800961c:	4b5b      	ldr	r3, [pc, #364]	@ (800978c <_dtoa_r+0x2dc>)
 800961e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800962a:	f7f7 fa67 	bl	8000afc <__aeabi_dcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	d048      	beq.n	80096c4 <_dtoa_r+0x214>
 8009632:	3f01      	subs	r7, #1
 8009634:	2300      	movs	r3, #0
 8009636:	9312      	str	r3, [sp, #72]	@ 0x48
 8009638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800963a:	1b9b      	subs	r3, r3, r6
 800963c:	1e5a      	subs	r2, r3, #1
 800963e:	bf44      	itt	mi
 8009640:	f1c3 0801 	rsbmi	r8, r3, #1
 8009644:	2300      	movmi	r3, #0
 8009646:	9208      	str	r2, [sp, #32]
 8009648:	bf54      	ite	pl
 800964a:	f04f 0800 	movpl.w	r8, #0
 800964e:	9308      	strmi	r3, [sp, #32]
 8009650:	2f00      	cmp	r7, #0
 8009652:	db39      	blt.n	80096c8 <_dtoa_r+0x218>
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009658:	443b      	add	r3, r7
 800965a:	9308      	str	r3, [sp, #32]
 800965c:	2300      	movs	r3, #0
 800965e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009662:	2b09      	cmp	r3, #9
 8009664:	d864      	bhi.n	8009730 <_dtoa_r+0x280>
 8009666:	2b05      	cmp	r3, #5
 8009668:	bfc4      	itt	gt
 800966a:	3b04      	subgt	r3, #4
 800966c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800966e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009670:	f1a3 0302 	sub.w	r3, r3, #2
 8009674:	bfcc      	ite	gt
 8009676:	2400      	movgt	r4, #0
 8009678:	2401      	movle	r4, #1
 800967a:	2b03      	cmp	r3, #3
 800967c:	d863      	bhi.n	8009746 <_dtoa_r+0x296>
 800967e:	e8df f003 	tbb	[pc, r3]
 8009682:	372a      	.short	0x372a
 8009684:	5535      	.short	0x5535
 8009686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800968a:	441e      	add	r6, r3
 800968c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009690:	2b20      	cmp	r3, #32
 8009692:	bfc1      	itttt	gt
 8009694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009698:	409f      	lslgt	r7, r3
 800969a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800969e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096a2:	bfd6      	itet	le
 80096a4:	f1c3 0320 	rsble	r3, r3, #32
 80096a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80096ac:	fa04 f003 	lslle.w	r0, r4, r3
 80096b0:	f7f6 ff38 	bl	8000524 <__aeabi_ui2d>
 80096b4:	2201      	movs	r2, #1
 80096b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096ba:	3e01      	subs	r6, #1
 80096bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80096be:	e777      	b.n	80095b0 <_dtoa_r+0x100>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e7b8      	b.n	8009636 <_dtoa_r+0x186>
 80096c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80096c6:	e7b7      	b.n	8009638 <_dtoa_r+0x188>
 80096c8:	427b      	negs	r3, r7
 80096ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80096cc:	2300      	movs	r3, #0
 80096ce:	eba8 0807 	sub.w	r8, r8, r7
 80096d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096d4:	e7c4      	b.n	8009660 <_dtoa_r+0x1b0>
 80096d6:	2300      	movs	r3, #0
 80096d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dc35      	bgt.n	800974c <_dtoa_r+0x29c>
 80096e0:	2301      	movs	r3, #1
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	9307      	str	r3, [sp, #28]
 80096e6:	461a      	mov	r2, r3
 80096e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096ea:	e00b      	b.n	8009704 <_dtoa_r+0x254>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e7f3      	b.n	80096d8 <_dtoa_r+0x228>
 80096f0:	2300      	movs	r3, #0
 80096f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	3301      	adds	r3, #1
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	9307      	str	r3, [sp, #28]
 8009700:	bfb8      	it	lt
 8009702:	2301      	movlt	r3, #1
 8009704:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009708:	2100      	movs	r1, #0
 800970a:	2204      	movs	r2, #4
 800970c:	f102 0514 	add.w	r5, r2, #20
 8009710:	429d      	cmp	r5, r3
 8009712:	d91f      	bls.n	8009754 <_dtoa_r+0x2a4>
 8009714:	6041      	str	r1, [r0, #4]
 8009716:	4658      	mov	r0, fp
 8009718:	f000 fd2e 	bl	800a178 <_Balloc>
 800971c:	4682      	mov	sl, r0
 800971e:	2800      	cmp	r0, #0
 8009720:	d13c      	bne.n	800979c <_dtoa_r+0x2ec>
 8009722:	4b1b      	ldr	r3, [pc, #108]	@ (8009790 <_dtoa_r+0x2e0>)
 8009724:	4602      	mov	r2, r0
 8009726:	f240 11af 	movw	r1, #431	@ 0x1af
 800972a:	e6d8      	b.n	80094de <_dtoa_r+0x2e>
 800972c:	2301      	movs	r3, #1
 800972e:	e7e0      	b.n	80096f2 <_dtoa_r+0x242>
 8009730:	2401      	movs	r4, #1
 8009732:	2300      	movs	r3, #0
 8009734:	9309      	str	r3, [sp, #36]	@ 0x24
 8009736:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009738:	f04f 33ff 	mov.w	r3, #4294967295
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	2200      	movs	r2, #0
 8009742:	2312      	movs	r3, #18
 8009744:	e7d0      	b.n	80096e8 <_dtoa_r+0x238>
 8009746:	2301      	movs	r3, #1
 8009748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800974a:	e7f5      	b.n	8009738 <_dtoa_r+0x288>
 800974c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	9307      	str	r3, [sp, #28]
 8009752:	e7d7      	b.n	8009704 <_dtoa_r+0x254>
 8009754:	3101      	adds	r1, #1
 8009756:	0052      	lsls	r2, r2, #1
 8009758:	e7d8      	b.n	800970c <_dtoa_r+0x25c>
 800975a:	bf00      	nop
 800975c:	f3af 8000 	nop.w
 8009760:	636f4361 	.word	0x636f4361
 8009764:	3fd287a7 	.word	0x3fd287a7
 8009768:	8b60c8b3 	.word	0x8b60c8b3
 800976c:	3fc68a28 	.word	0x3fc68a28
 8009770:	509f79fb 	.word	0x509f79fb
 8009774:	3fd34413 	.word	0x3fd34413
 8009778:	0800c9b1 	.word	0x0800c9b1
 800977c:	0800c9c8 	.word	0x0800c9c8
 8009780:	7ff00000 	.word	0x7ff00000
 8009784:	0800ccb1 	.word	0x0800ccb1
 8009788:	3ff80000 	.word	0x3ff80000
 800978c:	0800cac0 	.word	0x0800cac0
 8009790:	0800ca20 	.word	0x0800ca20
 8009794:	0800c9ad 	.word	0x0800c9ad
 8009798:	0800ccb0 	.word	0x0800ccb0
 800979c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097a0:	6018      	str	r0, [r3, #0]
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	2b0e      	cmp	r3, #14
 80097a6:	f200 80a4 	bhi.w	80098f2 <_dtoa_r+0x442>
 80097aa:	2c00      	cmp	r4, #0
 80097ac:	f000 80a1 	beq.w	80098f2 <_dtoa_r+0x442>
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	dd33      	ble.n	800981c <_dtoa_r+0x36c>
 80097b4:	4bad      	ldr	r3, [pc, #692]	@ (8009a6c <_dtoa_r+0x5bc>)
 80097b6:	f007 020f 	and.w	r2, r7, #15
 80097ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097be:	ed93 7b00 	vldr	d7, [r3]
 80097c2:	05f8      	lsls	r0, r7, #23
 80097c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80097c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097cc:	d516      	bpl.n	80097fc <_dtoa_r+0x34c>
 80097ce:	4ba8      	ldr	r3, [pc, #672]	@ (8009a70 <_dtoa_r+0x5c0>)
 80097d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097d8:	f7f7 f848 	bl	800086c <__aeabi_ddiv>
 80097dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097e0:	f004 040f 	and.w	r4, r4, #15
 80097e4:	2603      	movs	r6, #3
 80097e6:	4da2      	ldr	r5, [pc, #648]	@ (8009a70 <_dtoa_r+0x5c0>)
 80097e8:	b954      	cbnz	r4, 8009800 <_dtoa_r+0x350>
 80097ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f2:	f7f7 f83b 	bl	800086c <__aeabi_ddiv>
 80097f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097fa:	e028      	b.n	800984e <_dtoa_r+0x39e>
 80097fc:	2602      	movs	r6, #2
 80097fe:	e7f2      	b.n	80097e6 <_dtoa_r+0x336>
 8009800:	07e1      	lsls	r1, r4, #31
 8009802:	d508      	bpl.n	8009816 <_dtoa_r+0x366>
 8009804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800980c:	f7f6 ff04 	bl	8000618 <__aeabi_dmul>
 8009810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009814:	3601      	adds	r6, #1
 8009816:	1064      	asrs	r4, r4, #1
 8009818:	3508      	adds	r5, #8
 800981a:	e7e5      	b.n	80097e8 <_dtoa_r+0x338>
 800981c:	f000 80d2 	beq.w	80099c4 <_dtoa_r+0x514>
 8009820:	427c      	negs	r4, r7
 8009822:	4b92      	ldr	r3, [pc, #584]	@ (8009a6c <_dtoa_r+0x5bc>)
 8009824:	4d92      	ldr	r5, [pc, #584]	@ (8009a70 <_dtoa_r+0x5c0>)
 8009826:	f004 020f 	and.w	r2, r4, #15
 800982a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009836:	f7f6 feef 	bl	8000618 <__aeabi_dmul>
 800983a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800983e:	1124      	asrs	r4, r4, #4
 8009840:	2300      	movs	r3, #0
 8009842:	2602      	movs	r6, #2
 8009844:	2c00      	cmp	r4, #0
 8009846:	f040 80b2 	bne.w	80099ae <_dtoa_r+0x4fe>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1d3      	bne.n	80097f6 <_dtoa_r+0x346>
 800984e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 80b7 	beq.w	80099c8 <_dtoa_r+0x518>
 800985a:	4b86      	ldr	r3, [pc, #536]	@ (8009a74 <_dtoa_r+0x5c4>)
 800985c:	2200      	movs	r2, #0
 800985e:	4620      	mov	r0, r4
 8009860:	4629      	mov	r1, r5
 8009862:	f7f7 f94b 	bl	8000afc <__aeabi_dcmplt>
 8009866:	2800      	cmp	r0, #0
 8009868:	f000 80ae 	beq.w	80099c8 <_dtoa_r+0x518>
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80aa 	beq.w	80099c8 <_dtoa_r+0x518>
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dd37      	ble.n	80098ea <_dtoa_r+0x43a>
 800987a:	1e7b      	subs	r3, r7, #1
 800987c:	9304      	str	r3, [sp, #16]
 800987e:	4620      	mov	r0, r4
 8009880:	4b7d      	ldr	r3, [pc, #500]	@ (8009a78 <_dtoa_r+0x5c8>)
 8009882:	2200      	movs	r2, #0
 8009884:	4629      	mov	r1, r5
 8009886:	f7f6 fec7 	bl	8000618 <__aeabi_dmul>
 800988a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988e:	9c00      	ldr	r4, [sp, #0]
 8009890:	3601      	adds	r6, #1
 8009892:	4630      	mov	r0, r6
 8009894:	f7f6 fe56 	bl	8000544 <__aeabi_i2d>
 8009898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800989c:	f7f6 febc 	bl	8000618 <__aeabi_dmul>
 80098a0:	4b76      	ldr	r3, [pc, #472]	@ (8009a7c <_dtoa_r+0x5cc>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	f7f6 fd02 	bl	80002ac <__adddf3>
 80098a8:	4605      	mov	r5, r0
 80098aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098ae:	2c00      	cmp	r4, #0
 80098b0:	f040 808d 	bne.w	80099ce <_dtoa_r+0x51e>
 80098b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098b8:	4b71      	ldr	r3, [pc, #452]	@ (8009a80 <_dtoa_r+0x5d0>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f6 fcf4 	bl	80002a8 <__aeabi_dsub>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098c8:	462a      	mov	r2, r5
 80098ca:	4633      	mov	r3, r6
 80098cc:	f7f7 f934 	bl	8000b38 <__aeabi_dcmpgt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	f040 828b 	bne.w	8009dec <_dtoa_r+0x93c>
 80098d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098da:	462a      	mov	r2, r5
 80098dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098e0:	f7f7 f90c 	bl	8000afc <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f040 8128 	bne.w	8009b3a <_dtoa_r+0x68a>
 80098ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f2c0 815a 	blt.w	8009bae <_dtoa_r+0x6fe>
 80098fa:	2f0e      	cmp	r7, #14
 80098fc:	f300 8157 	bgt.w	8009bae <_dtoa_r+0x6fe>
 8009900:	4b5a      	ldr	r3, [pc, #360]	@ (8009a6c <_dtoa_r+0x5bc>)
 8009902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009906:	ed93 7b00 	vldr	d7, [r3]
 800990a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	ed8d 7b00 	vstr	d7, [sp]
 8009912:	da03      	bge.n	800991c <_dtoa_r+0x46c>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f340 8101 	ble.w	8009b1e <_dtoa_r+0x66e>
 800991c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009920:	4656      	mov	r6, sl
 8009922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009926:	4620      	mov	r0, r4
 8009928:	4629      	mov	r1, r5
 800992a:	f7f6 ff9f 	bl	800086c <__aeabi_ddiv>
 800992e:	f7f7 f923 	bl	8000b78 <__aeabi_d2iz>
 8009932:	4680      	mov	r8, r0
 8009934:	f7f6 fe06 	bl	8000544 <__aeabi_i2d>
 8009938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993c:	f7f6 fe6c 	bl	8000618 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800994c:	f7f6 fcac 	bl	80002a8 <__aeabi_dsub>
 8009950:	f806 4b01 	strb.w	r4, [r6], #1
 8009954:	9d07      	ldr	r5, [sp, #28]
 8009956:	eba6 040a 	sub.w	r4, r6, sl
 800995a:	42a5      	cmp	r5, r4
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	f040 8117 	bne.w	8009b92 <_dtoa_r+0x6e2>
 8009964:	f7f6 fca2 	bl	80002ac <__adddf3>
 8009968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	f7f7 f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f040 80f9 	bne.w	8009b6c <_dtoa_r+0x6bc>
 800997a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009986:	b118      	cbz	r0, 8009990 <_dtoa_r+0x4e0>
 8009988:	f018 0f01 	tst.w	r8, #1
 800998c:	f040 80ee 	bne.w	8009b6c <_dtoa_r+0x6bc>
 8009990:	4649      	mov	r1, r9
 8009992:	4658      	mov	r0, fp
 8009994:	f000 fc30 	bl	800a1f8 <_Bfree>
 8009998:	2300      	movs	r3, #0
 800999a:	7033      	strb	r3, [r6, #0]
 800999c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800999e:	3701      	adds	r7, #1
 80099a0:	601f      	str	r7, [r3, #0]
 80099a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 831d 	beq.w	8009fe4 <_dtoa_r+0xb34>
 80099aa:	601e      	str	r6, [r3, #0]
 80099ac:	e31a      	b.n	8009fe4 <_dtoa_r+0xb34>
 80099ae:	07e2      	lsls	r2, r4, #31
 80099b0:	d505      	bpl.n	80099be <_dtoa_r+0x50e>
 80099b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099b6:	f7f6 fe2f 	bl	8000618 <__aeabi_dmul>
 80099ba:	3601      	adds	r6, #1
 80099bc:	2301      	movs	r3, #1
 80099be:	1064      	asrs	r4, r4, #1
 80099c0:	3508      	adds	r5, #8
 80099c2:	e73f      	b.n	8009844 <_dtoa_r+0x394>
 80099c4:	2602      	movs	r6, #2
 80099c6:	e742      	b.n	800984e <_dtoa_r+0x39e>
 80099c8:	9c07      	ldr	r4, [sp, #28]
 80099ca:	9704      	str	r7, [sp, #16]
 80099cc:	e761      	b.n	8009892 <_dtoa_r+0x3e2>
 80099ce:	4b27      	ldr	r3, [pc, #156]	@ (8009a6c <_dtoa_r+0x5bc>)
 80099d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099da:	4454      	add	r4, sl
 80099dc:	2900      	cmp	r1, #0
 80099de:	d053      	beq.n	8009a88 <_dtoa_r+0x5d8>
 80099e0:	4928      	ldr	r1, [pc, #160]	@ (8009a84 <_dtoa_r+0x5d4>)
 80099e2:	2000      	movs	r0, #0
 80099e4:	f7f6 ff42 	bl	800086c <__aeabi_ddiv>
 80099e8:	4633      	mov	r3, r6
 80099ea:	462a      	mov	r2, r5
 80099ec:	f7f6 fc5c 	bl	80002a8 <__aeabi_dsub>
 80099f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099f4:	4656      	mov	r6, sl
 80099f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fa:	f7f7 f8bd 	bl	8000b78 <__aeabi_d2iz>
 80099fe:	4605      	mov	r5, r0
 8009a00:	f7f6 fda0 	bl	8000544 <__aeabi_i2d>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0c:	f7f6 fc4c 	bl	80002a8 <__aeabi_dsub>
 8009a10:	3530      	adds	r5, #48	@ 0x30
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a1a:	f806 5b01 	strb.w	r5, [r6], #1
 8009a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a22:	f7f7 f86b 	bl	8000afc <__aeabi_dcmplt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d171      	bne.n	8009b0e <_dtoa_r+0x65e>
 8009a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2e:	4911      	ldr	r1, [pc, #68]	@ (8009a74 <_dtoa_r+0x5c4>)
 8009a30:	2000      	movs	r0, #0
 8009a32:	f7f6 fc39 	bl	80002a8 <__aeabi_dsub>
 8009a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a3a:	f7f7 f85f 	bl	8000afc <__aeabi_dcmplt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 8095 	bne.w	8009b6e <_dtoa_r+0x6be>
 8009a44:	42a6      	cmp	r6, r4
 8009a46:	f43f af50 	beq.w	80098ea <_dtoa_r+0x43a>
 8009a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a78 <_dtoa_r+0x5c8>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7f6 fde1 	bl	8000618 <__aeabi_dmul>
 8009a56:	4b08      	ldr	r3, [pc, #32]	@ (8009a78 <_dtoa_r+0x5c8>)
 8009a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a62:	f7f6 fdd9 	bl	8000618 <__aeabi_dmul>
 8009a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6a:	e7c4      	b.n	80099f6 <_dtoa_r+0x546>
 8009a6c:	0800cac0 	.word	0x0800cac0
 8009a70:	0800ca98 	.word	0x0800ca98
 8009a74:	3ff00000 	.word	0x3ff00000
 8009a78:	40240000 	.word	0x40240000
 8009a7c:	401c0000 	.word	0x401c0000
 8009a80:	40140000 	.word	0x40140000
 8009a84:	3fe00000 	.word	0x3fe00000
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f7f6 fdc4 	bl	8000618 <__aeabi_dmul>
 8009a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a94:	9415      	str	r4, [sp, #84]	@ 0x54
 8009a96:	4656      	mov	r6, sl
 8009a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9c:	f7f7 f86c 	bl	8000b78 <__aeabi_d2iz>
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	f7f6 fd4f 	bl	8000544 <__aeabi_i2d>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aae:	f7f6 fbfb 	bl	80002a8 <__aeabi_dsub>
 8009ab2:	3530      	adds	r5, #48	@ 0x30
 8009ab4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	42a6      	cmp	r6, r4
 8009abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	d124      	bne.n	8009b12 <_dtoa_r+0x662>
 8009ac8:	4bac      	ldr	r3, [pc, #688]	@ (8009d7c <_dtoa_r+0x8cc>)
 8009aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ace:	f7f6 fbed 	bl	80002ac <__adddf3>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ada:	f7f7 f82d 	bl	8000b38 <__aeabi_dcmpgt>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d145      	bne.n	8009b6e <_dtoa_r+0x6be>
 8009ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ae6:	49a5      	ldr	r1, [pc, #660]	@ (8009d7c <_dtoa_r+0x8cc>)
 8009ae8:	2000      	movs	r0, #0
 8009aea:	f7f6 fbdd 	bl	80002a8 <__aeabi_dsub>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af6:	f7f7 f801 	bl	8000afc <__aeabi_dcmplt>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f43f aef5 	beq.w	80098ea <_dtoa_r+0x43a>
 8009b00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b02:	1e73      	subs	r3, r6, #1
 8009b04:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b0a:	2b30      	cmp	r3, #48	@ 0x30
 8009b0c:	d0f8      	beq.n	8009b00 <_dtoa_r+0x650>
 8009b0e:	9f04      	ldr	r7, [sp, #16]
 8009b10:	e73e      	b.n	8009990 <_dtoa_r+0x4e0>
 8009b12:	4b9b      	ldr	r3, [pc, #620]	@ (8009d80 <_dtoa_r+0x8d0>)
 8009b14:	f7f6 fd80 	bl	8000618 <__aeabi_dmul>
 8009b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b1c:	e7bc      	b.n	8009a98 <_dtoa_r+0x5e8>
 8009b1e:	d10c      	bne.n	8009b3a <_dtoa_r+0x68a>
 8009b20:	4b98      	ldr	r3, [pc, #608]	@ (8009d84 <_dtoa_r+0x8d4>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b28:	f7f6 fd76 	bl	8000618 <__aeabi_dmul>
 8009b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b30:	f7f6 fff8 	bl	8000b24 <__aeabi_dcmpge>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f000 8157 	beq.w	8009de8 <_dtoa_r+0x938>
 8009b3a:	2400      	movs	r4, #0
 8009b3c:	4625      	mov	r5, r4
 8009b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b40:	43db      	mvns	r3, r3
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	4656      	mov	r6, sl
 8009b46:	2700      	movs	r7, #0
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f000 fb54 	bl	800a1f8 <_Bfree>
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	d0dc      	beq.n	8009b0e <_dtoa_r+0x65e>
 8009b54:	b12f      	cbz	r7, 8009b62 <_dtoa_r+0x6b2>
 8009b56:	42af      	cmp	r7, r5
 8009b58:	d003      	beq.n	8009b62 <_dtoa_r+0x6b2>
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	4658      	mov	r0, fp
 8009b5e:	f000 fb4b 	bl	800a1f8 <_Bfree>
 8009b62:	4629      	mov	r1, r5
 8009b64:	4658      	mov	r0, fp
 8009b66:	f000 fb47 	bl	800a1f8 <_Bfree>
 8009b6a:	e7d0      	b.n	8009b0e <_dtoa_r+0x65e>
 8009b6c:	9704      	str	r7, [sp, #16]
 8009b6e:	4633      	mov	r3, r6
 8009b70:	461e      	mov	r6, r3
 8009b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b76:	2a39      	cmp	r2, #57	@ 0x39
 8009b78:	d107      	bne.n	8009b8a <_dtoa_r+0x6da>
 8009b7a:	459a      	cmp	sl, r3
 8009b7c:	d1f8      	bne.n	8009b70 <_dtoa_r+0x6c0>
 8009b7e:	9a04      	ldr	r2, [sp, #16]
 8009b80:	3201      	adds	r2, #1
 8009b82:	9204      	str	r2, [sp, #16]
 8009b84:	2230      	movs	r2, #48	@ 0x30
 8009b86:	f88a 2000 	strb.w	r2, [sl]
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e7bd      	b.n	8009b0e <_dtoa_r+0x65e>
 8009b92:	4b7b      	ldr	r3, [pc, #492]	@ (8009d80 <_dtoa_r+0x8d0>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	f7f6 fd3f 	bl	8000618 <__aeabi_dmul>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	f7f6 ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f aebb 	beq.w	8009922 <_dtoa_r+0x472>
 8009bac:	e6f0      	b.n	8009990 <_dtoa_r+0x4e0>
 8009bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bb0:	2a00      	cmp	r2, #0
 8009bb2:	f000 80db 	beq.w	8009d6c <_dtoa_r+0x8bc>
 8009bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb8:	2a01      	cmp	r2, #1
 8009bba:	f300 80bf 	bgt.w	8009d3c <_dtoa_r+0x88c>
 8009bbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	f000 80b7 	beq.w	8009d34 <_dtoa_r+0x884>
 8009bc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bcc:	4646      	mov	r6, r8
 8009bce:	9a08      	ldr	r2, [sp, #32]
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	441a      	add	r2, r3
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	4498      	add	r8, r3
 8009bd8:	9208      	str	r2, [sp, #32]
 8009bda:	f000 fbc1 	bl	800a360 <__i2b>
 8009bde:	4605      	mov	r5, r0
 8009be0:	b15e      	cbz	r6, 8009bfa <_dtoa_r+0x74a>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd08      	ble.n	8009bfa <_dtoa_r+0x74a>
 8009be8:	42b3      	cmp	r3, r6
 8009bea:	9a08      	ldr	r2, [sp, #32]
 8009bec:	bfa8      	it	ge
 8009bee:	4633      	movge	r3, r6
 8009bf0:	eba8 0803 	sub.w	r8, r8, r3
 8009bf4:	1af6      	subs	r6, r6, r3
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	9308      	str	r3, [sp, #32]
 8009bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bfc:	b1f3      	cbz	r3, 8009c3c <_dtoa_r+0x78c>
 8009bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 80b7 	beq.w	8009d74 <_dtoa_r+0x8c4>
 8009c06:	b18c      	cbz	r4, 8009c2c <_dtoa_r+0x77c>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	4658      	mov	r0, fp
 8009c0e:	f000 fc67 	bl	800a4e0 <__pow5mult>
 8009c12:	464a      	mov	r2, r9
 8009c14:	4601      	mov	r1, r0
 8009c16:	4605      	mov	r5, r0
 8009c18:	4658      	mov	r0, fp
 8009c1a:	f000 fbb7 	bl	800a38c <__multiply>
 8009c1e:	4649      	mov	r1, r9
 8009c20:	9004      	str	r0, [sp, #16]
 8009c22:	4658      	mov	r0, fp
 8009c24:	f000 fae8 	bl	800a1f8 <_Bfree>
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	4699      	mov	r9, r3
 8009c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2e:	1b1a      	subs	r2, r3, r4
 8009c30:	d004      	beq.n	8009c3c <_dtoa_r+0x78c>
 8009c32:	4649      	mov	r1, r9
 8009c34:	4658      	mov	r0, fp
 8009c36:	f000 fc53 	bl	800a4e0 <__pow5mult>
 8009c3a:	4681      	mov	r9, r0
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	4658      	mov	r0, fp
 8009c40:	f000 fb8e 	bl	800a360 <__i2b>
 8009c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c46:	4604      	mov	r4, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 81cf 	beq.w	8009fec <_dtoa_r+0xb3c>
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4601      	mov	r1, r0
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fc44 	bl	800a4e0 <__pow5mult>
 8009c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	f300 8095 	bgt.w	8009d8c <_dtoa_r+0x8dc>
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 8087 	bne.w	8009d78 <_dtoa_r+0x8c8>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f040 8089 	bne.w	8009d88 <_dtoa_r+0x8d8>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c7c:	0d1b      	lsrs	r3, r3, #20
 8009c7e:	051b      	lsls	r3, r3, #20
 8009c80:	b12b      	cbz	r3, 8009c8e <_dtoa_r+0x7de>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	3301      	adds	r3, #1
 8009c86:	9308      	str	r3, [sp, #32]
 8009c88:	f108 0801 	add.w	r8, r8, #1
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 81b0 	beq.w	8009ff8 <_dtoa_r+0xb48>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c9e:	6918      	ldr	r0, [r3, #16]
 8009ca0:	f000 fb12 	bl	800a2c8 <__hi0bits>
 8009ca4:	f1c0 0020 	rsb	r0, r0, #32
 8009ca8:	9b08      	ldr	r3, [sp, #32]
 8009caa:	4418      	add	r0, r3
 8009cac:	f010 001f 	ands.w	r0, r0, #31
 8009cb0:	d077      	beq.n	8009da2 <_dtoa_r+0x8f2>
 8009cb2:	f1c0 0320 	rsb	r3, r0, #32
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	dd6b      	ble.n	8009d92 <_dtoa_r+0x8e2>
 8009cba:	9b08      	ldr	r3, [sp, #32]
 8009cbc:	f1c0 001c 	rsb	r0, r0, #28
 8009cc0:	4403      	add	r3, r0
 8009cc2:	4480      	add	r8, r0
 8009cc4:	4406      	add	r6, r0
 8009cc6:	9308      	str	r3, [sp, #32]
 8009cc8:	f1b8 0f00 	cmp.w	r8, #0
 8009ccc:	dd05      	ble.n	8009cda <_dtoa_r+0x82a>
 8009cce:	4649      	mov	r1, r9
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	f000 fc5e 	bl	800a594 <__lshift>
 8009cd8:	4681      	mov	r9, r0
 8009cda:	9b08      	ldr	r3, [sp, #32]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dd05      	ble.n	8009cec <_dtoa_r+0x83c>
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	f000 fc55 	bl	800a594 <__lshift>
 8009cea:	4604      	mov	r4, r0
 8009cec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d059      	beq.n	8009da6 <_dtoa_r+0x8f6>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f000 fcb9 	bl	800a66c <__mcmp>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	da53      	bge.n	8009da6 <_dtoa_r+0x8f6>
 8009cfe:	1e7b      	subs	r3, r7, #1
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	4649      	mov	r1, r9
 8009d04:	2300      	movs	r3, #0
 8009d06:	220a      	movs	r2, #10
 8009d08:	4658      	mov	r0, fp
 8009d0a:	f000 fa97 	bl	800a23c <__multadd>
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d10:	4681      	mov	r9, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 8172 	beq.w	8009ffc <_dtoa_r+0xb4c>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	220a      	movs	r2, #10
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f000 fa8c 	bl	800a23c <__multadd>
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	4605      	mov	r5, r0
 8009d2a:	dc67      	bgt.n	8009dfc <_dtoa_r+0x94c>
 8009d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	dc41      	bgt.n	8009db6 <_dtoa_r+0x906>
 8009d32:	e063      	b.n	8009dfc <_dtoa_r+0x94c>
 8009d34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d3a:	e746      	b.n	8009bca <_dtoa_r+0x71a>
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	1e5c      	subs	r4, r3, #1
 8009d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	bfbf      	itttt	lt
 8009d46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009d4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d4c:	1ae3      	sublt	r3, r4, r3
 8009d4e:	bfb4      	ite	lt
 8009d50:	18d2      	addlt	r2, r2, r3
 8009d52:	1b1c      	subge	r4, r3, r4
 8009d54:	9b07      	ldr	r3, [sp, #28]
 8009d56:	bfbc      	itt	lt
 8009d58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009d5a:	2400      	movlt	r4, #0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfb5      	itete	lt
 8009d60:	eba8 0603 	sublt.w	r6, r8, r3
 8009d64:	9b07      	ldrge	r3, [sp, #28]
 8009d66:	2300      	movlt	r3, #0
 8009d68:	4646      	movge	r6, r8
 8009d6a:	e730      	b.n	8009bce <_dtoa_r+0x71e>
 8009d6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d70:	4646      	mov	r6, r8
 8009d72:	e735      	b.n	8009be0 <_dtoa_r+0x730>
 8009d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d76:	e75c      	b.n	8009c32 <_dtoa_r+0x782>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e788      	b.n	8009c8e <_dtoa_r+0x7de>
 8009d7c:	3fe00000 	.word	0x3fe00000
 8009d80:	40240000 	.word	0x40240000
 8009d84:	40140000 	.word	0x40140000
 8009d88:	9b02      	ldr	r3, [sp, #8]
 8009d8a:	e780      	b.n	8009c8e <_dtoa_r+0x7de>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d90:	e782      	b.n	8009c98 <_dtoa_r+0x7e8>
 8009d92:	d099      	beq.n	8009cc8 <_dtoa_r+0x818>
 8009d94:	9a08      	ldr	r2, [sp, #32]
 8009d96:	331c      	adds	r3, #28
 8009d98:	441a      	add	r2, r3
 8009d9a:	4498      	add	r8, r3
 8009d9c:	441e      	add	r6, r3
 8009d9e:	9208      	str	r2, [sp, #32]
 8009da0:	e792      	b.n	8009cc8 <_dtoa_r+0x818>
 8009da2:	4603      	mov	r3, r0
 8009da4:	e7f6      	b.n	8009d94 <_dtoa_r+0x8e4>
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	9704      	str	r7, [sp, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dc20      	bgt.n	8009df0 <_dtoa_r+0x940>
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	dd1e      	ble.n	8009df4 <_dtoa_r+0x944>
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f aec0 	bne.w	8009b3e <_dtoa_r+0x68e>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	4658      	mov	r0, fp
 8009dc4:	f000 fa3a 	bl	800a23c <__multadd>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4648      	mov	r0, r9
 8009dce:	f000 fc4d 	bl	800a66c <__mcmp>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f77f aeb3 	ble.w	8009b3e <_dtoa_r+0x68e>
 8009dd8:	4656      	mov	r6, sl
 8009dda:	2331      	movs	r3, #49	@ 0x31
 8009ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	3301      	adds	r3, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	e6ae      	b.n	8009b46 <_dtoa_r+0x696>
 8009de8:	9c07      	ldr	r4, [sp, #28]
 8009dea:	9704      	str	r7, [sp, #16]
 8009dec:	4625      	mov	r5, r4
 8009dee:	e7f3      	b.n	8009dd8 <_dtoa_r+0x928>
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8104 	beq.w	800a004 <_dtoa_r+0xb54>
 8009dfc:	2e00      	cmp	r6, #0
 8009dfe:	dd05      	ble.n	8009e0c <_dtoa_r+0x95c>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4632      	mov	r2, r6
 8009e04:	4658      	mov	r0, fp
 8009e06:	f000 fbc5 	bl	800a594 <__lshift>
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d05a      	beq.n	8009ec8 <_dtoa_r+0xa18>
 8009e12:	6869      	ldr	r1, [r5, #4]
 8009e14:	4658      	mov	r0, fp
 8009e16:	f000 f9af 	bl	800a178 <_Balloc>
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	b928      	cbnz	r0, 8009e2a <_dtoa_r+0x97a>
 8009e1e:	4b84      	ldr	r3, [pc, #528]	@ (800a030 <_dtoa_r+0xb80>)
 8009e20:	4602      	mov	r2, r0
 8009e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e26:	f7ff bb5a 	b.w	80094de <_dtoa_r+0x2e>
 8009e2a:	692a      	ldr	r2, [r5, #16]
 8009e2c:	3202      	adds	r2, #2
 8009e2e:	0092      	lsls	r2, r2, #2
 8009e30:	f105 010c 	add.w	r1, r5, #12
 8009e34:	300c      	adds	r0, #12
 8009e36:	f7ff fa9c 	bl	8009372 <memcpy>
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4658      	mov	r0, fp
 8009e40:	f000 fba8 	bl	800a594 <__lshift>
 8009e44:	f10a 0301 	add.w	r3, sl, #1
 8009e48:	9307      	str	r3, [sp, #28]
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	4453      	add	r3, sl
 8009e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	462f      	mov	r7, r5
 8009e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	3b01      	subs	r3, #1
 8009e62:	4648      	mov	r0, r9
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	f7ff fa9a 	bl	800939e <quorem>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	9002      	str	r0, [sp, #8]
 8009e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e72:	4648      	mov	r0, r9
 8009e74:	f000 fbfa 	bl	800a66c <__mcmp>
 8009e78:	462a      	mov	r2, r5
 8009e7a:	9008      	str	r0, [sp, #32]
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f000 fc10 	bl	800a6a4 <__mdiff>
 8009e84:	68c2      	ldr	r2, [r0, #12]
 8009e86:	4606      	mov	r6, r0
 8009e88:	bb02      	cbnz	r2, 8009ecc <_dtoa_r+0xa1c>
 8009e8a:	4601      	mov	r1, r0
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	f000 fbed 	bl	800a66c <__mcmp>
 8009e92:	4602      	mov	r2, r0
 8009e94:	4631      	mov	r1, r6
 8009e96:	4658      	mov	r0, fp
 8009e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e9a:	f000 f9ad 	bl	800a1f8 <_Bfree>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ea2:	9e07      	ldr	r6, [sp, #28]
 8009ea4:	ea43 0102 	orr.w	r1, r3, r2
 8009ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eaa:	4319      	orrs	r1, r3
 8009eac:	d110      	bne.n	8009ed0 <_dtoa_r+0xa20>
 8009eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009eb2:	d029      	beq.n	8009f08 <_dtoa_r+0xa58>
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dd02      	ble.n	8009ec0 <_dtoa_r+0xa10>
 8009eba:	9b02      	ldr	r3, [sp, #8]
 8009ebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ec0:	9b00      	ldr	r3, [sp, #0]
 8009ec2:	f883 8000 	strb.w	r8, [r3]
 8009ec6:	e63f      	b.n	8009b48 <_dtoa_r+0x698>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	e7bb      	b.n	8009e44 <_dtoa_r+0x994>
 8009ecc:	2201      	movs	r2, #1
 8009ece:	e7e1      	b.n	8009e94 <_dtoa_r+0x9e4>
 8009ed0:	9b08      	ldr	r3, [sp, #32]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db04      	blt.n	8009ee0 <_dtoa_r+0xa30>
 8009ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009edc:	430b      	orrs	r3, r1
 8009ede:	d120      	bne.n	8009f22 <_dtoa_r+0xa72>
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	dded      	ble.n	8009ec0 <_dtoa_r+0xa10>
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4658      	mov	r0, fp
 8009eea:	f000 fb53 	bl	800a594 <__lshift>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4681      	mov	r9, r0
 8009ef2:	f000 fbbb 	bl	800a66c <__mcmp>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	dc03      	bgt.n	8009f02 <_dtoa_r+0xa52>
 8009efa:	d1e1      	bne.n	8009ec0 <_dtoa_r+0xa10>
 8009efc:	f018 0f01 	tst.w	r8, #1
 8009f00:	d0de      	beq.n	8009ec0 <_dtoa_r+0xa10>
 8009f02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f06:	d1d8      	bne.n	8009eba <_dtoa_r+0xa0a>
 8009f08:	9a00      	ldr	r2, [sp, #0]
 8009f0a:	2339      	movs	r3, #57	@ 0x39
 8009f0c:	7013      	strb	r3, [r2, #0]
 8009f0e:	4633      	mov	r3, r6
 8009f10:	461e      	mov	r6, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f18:	2a39      	cmp	r2, #57	@ 0x39
 8009f1a:	d052      	beq.n	8009fc2 <_dtoa_r+0xb12>
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e612      	b.n	8009b48 <_dtoa_r+0x698>
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	dd07      	ble.n	8009f36 <_dtoa_r+0xa86>
 8009f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f2a:	d0ed      	beq.n	8009f08 <_dtoa_r+0xa58>
 8009f2c:	9a00      	ldr	r2, [sp, #0]
 8009f2e:	f108 0301 	add.w	r3, r8, #1
 8009f32:	7013      	strb	r3, [r2, #0]
 8009f34:	e608      	b.n	8009b48 <_dtoa_r+0x698>
 8009f36:	9b07      	ldr	r3, [sp, #28]
 8009f38:	9a07      	ldr	r2, [sp, #28]
 8009f3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d028      	beq.n	8009f96 <_dtoa_r+0xae6>
 8009f44:	4649      	mov	r1, r9
 8009f46:	2300      	movs	r3, #0
 8009f48:	220a      	movs	r2, #10
 8009f4a:	4658      	mov	r0, fp
 8009f4c:	f000 f976 	bl	800a23c <__multadd>
 8009f50:	42af      	cmp	r7, r5
 8009f52:	4681      	mov	r9, r0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	f04f 020a 	mov.w	r2, #10
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4658      	mov	r0, fp
 8009f60:	d107      	bne.n	8009f72 <_dtoa_r+0xac2>
 8009f62:	f000 f96b 	bl	800a23c <__multadd>
 8009f66:	4607      	mov	r7, r0
 8009f68:	4605      	mov	r5, r0
 8009f6a:	9b07      	ldr	r3, [sp, #28]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	9307      	str	r3, [sp, #28]
 8009f70:	e774      	b.n	8009e5c <_dtoa_r+0x9ac>
 8009f72:	f000 f963 	bl	800a23c <__multadd>
 8009f76:	4629      	mov	r1, r5
 8009f78:	4607      	mov	r7, r0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4658      	mov	r0, fp
 8009f80:	f000 f95c 	bl	800a23c <__multadd>
 8009f84:	4605      	mov	r5, r0
 8009f86:	e7f0      	b.n	8009f6a <_dtoa_r+0xaba>
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfcc      	ite	gt
 8009f8e:	461e      	movgt	r6, r3
 8009f90:	2601      	movle	r6, #1
 8009f92:	4456      	add	r6, sl
 8009f94:	2700      	movs	r7, #0
 8009f96:	4649      	mov	r1, r9
 8009f98:	2201      	movs	r2, #1
 8009f9a:	4658      	mov	r0, fp
 8009f9c:	f000 fafa 	bl	800a594 <__lshift>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	f000 fb62 	bl	800a66c <__mcmp>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	dcb0      	bgt.n	8009f0e <_dtoa_r+0xa5e>
 8009fac:	d102      	bne.n	8009fb4 <_dtoa_r+0xb04>
 8009fae:	f018 0f01 	tst.w	r8, #1
 8009fb2:	d1ac      	bne.n	8009f0e <_dtoa_r+0xa5e>
 8009fb4:	4633      	mov	r3, r6
 8009fb6:	461e      	mov	r6, r3
 8009fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fbc:	2a30      	cmp	r2, #48	@ 0x30
 8009fbe:	d0fa      	beq.n	8009fb6 <_dtoa_r+0xb06>
 8009fc0:	e5c2      	b.n	8009b48 <_dtoa_r+0x698>
 8009fc2:	459a      	cmp	sl, r3
 8009fc4:	d1a4      	bne.n	8009f10 <_dtoa_r+0xa60>
 8009fc6:	9b04      	ldr	r3, [sp, #16]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	2331      	movs	r3, #49	@ 0x31
 8009fce:	f88a 3000 	strb.w	r3, [sl]
 8009fd2:	e5b9      	b.n	8009b48 <_dtoa_r+0x698>
 8009fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a034 <_dtoa_r+0xb84>
 8009fda:	b11b      	cbz	r3, 8009fe4 <_dtoa_r+0xb34>
 8009fdc:	f10a 0308 	add.w	r3, sl, #8
 8009fe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	b019      	add	sp, #100	@ 0x64
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	f77f ae37 	ble.w	8009c62 <_dtoa_r+0x7b2>
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	e655      	b.n	8009ca8 <_dtoa_r+0x7f8>
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f77f aed6 	ble.w	8009db0 <_dtoa_r+0x900>
 800a004:	4656      	mov	r6, sl
 800a006:	4621      	mov	r1, r4
 800a008:	4648      	mov	r0, r9
 800a00a:	f7ff f9c8 	bl	800939e <quorem>
 800a00e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a012:	f806 8b01 	strb.w	r8, [r6], #1
 800a016:	9b00      	ldr	r3, [sp, #0]
 800a018:	eba6 020a 	sub.w	r2, r6, sl
 800a01c:	4293      	cmp	r3, r2
 800a01e:	ddb3      	ble.n	8009f88 <_dtoa_r+0xad8>
 800a020:	4649      	mov	r1, r9
 800a022:	2300      	movs	r3, #0
 800a024:	220a      	movs	r2, #10
 800a026:	4658      	mov	r0, fp
 800a028:	f000 f908 	bl	800a23c <__multadd>
 800a02c:	4681      	mov	r9, r0
 800a02e:	e7ea      	b.n	800a006 <_dtoa_r+0xb56>
 800a030:	0800ca20 	.word	0x0800ca20
 800a034:	0800c9a4 	.word	0x0800c9a4

0800a038 <_free_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4605      	mov	r5, r0
 800a03c:	2900      	cmp	r1, #0
 800a03e:	d041      	beq.n	800a0c4 <_free_r+0x8c>
 800a040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a044:	1f0c      	subs	r4, r1, #4
 800a046:	2b00      	cmp	r3, #0
 800a048:	bfb8      	it	lt
 800a04a:	18e4      	addlt	r4, r4, r3
 800a04c:	f7fd fd84 	bl	8007b58 <__malloc_lock>
 800a050:	4a1d      	ldr	r2, [pc, #116]	@ (800a0c8 <_free_r+0x90>)
 800a052:	6813      	ldr	r3, [r2, #0]
 800a054:	b933      	cbnz	r3, 800a064 <_free_r+0x2c>
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	6014      	str	r4, [r2, #0]
 800a05a:	4628      	mov	r0, r5
 800a05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a060:	f7fd bd80 	b.w	8007b64 <__malloc_unlock>
 800a064:	42a3      	cmp	r3, r4
 800a066:	d908      	bls.n	800a07a <_free_r+0x42>
 800a068:	6820      	ldr	r0, [r4, #0]
 800a06a:	1821      	adds	r1, r4, r0
 800a06c:	428b      	cmp	r3, r1
 800a06e:	bf01      	itttt	eq
 800a070:	6819      	ldreq	r1, [r3, #0]
 800a072:	685b      	ldreq	r3, [r3, #4]
 800a074:	1809      	addeq	r1, r1, r0
 800a076:	6021      	streq	r1, [r4, #0]
 800a078:	e7ed      	b.n	800a056 <_free_r+0x1e>
 800a07a:	461a      	mov	r2, r3
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	b10b      	cbz	r3, 800a084 <_free_r+0x4c>
 800a080:	42a3      	cmp	r3, r4
 800a082:	d9fa      	bls.n	800a07a <_free_r+0x42>
 800a084:	6811      	ldr	r1, [r2, #0]
 800a086:	1850      	adds	r0, r2, r1
 800a088:	42a0      	cmp	r0, r4
 800a08a:	d10b      	bne.n	800a0a4 <_free_r+0x6c>
 800a08c:	6820      	ldr	r0, [r4, #0]
 800a08e:	4401      	add	r1, r0
 800a090:	1850      	adds	r0, r2, r1
 800a092:	4283      	cmp	r3, r0
 800a094:	6011      	str	r1, [r2, #0]
 800a096:	d1e0      	bne.n	800a05a <_free_r+0x22>
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	6053      	str	r3, [r2, #4]
 800a09e:	4408      	add	r0, r1
 800a0a0:	6010      	str	r0, [r2, #0]
 800a0a2:	e7da      	b.n	800a05a <_free_r+0x22>
 800a0a4:	d902      	bls.n	800a0ac <_free_r+0x74>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	e7d6      	b.n	800a05a <_free_r+0x22>
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	1821      	adds	r1, r4, r0
 800a0b0:	428b      	cmp	r3, r1
 800a0b2:	bf04      	itt	eq
 800a0b4:	6819      	ldreq	r1, [r3, #0]
 800a0b6:	685b      	ldreq	r3, [r3, #4]
 800a0b8:	6063      	str	r3, [r4, #4]
 800a0ba:	bf04      	itt	eq
 800a0bc:	1809      	addeq	r1, r1, r0
 800a0be:	6021      	streq	r1, [r4, #0]
 800a0c0:	6054      	str	r4, [r2, #4]
 800a0c2:	e7ca      	b.n	800a05a <_free_r+0x22>
 800a0c4:	bd38      	pop	{r3, r4, r5, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20004c18 	.word	0x20004c18

0800a0cc <_findenv_r>:
 800a0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800a140 <_findenv_r+0x74>
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	4689      	mov	r9, r1
 800a0d8:	4617      	mov	r7, r2
 800a0da:	f001 fa37 	bl	800b54c <__env_lock>
 800a0de:	f8da 4000 	ldr.w	r4, [sl]
 800a0e2:	b134      	cbz	r4, 800a0f2 <_findenv_r+0x26>
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	4698      	mov	r8, r3
 800a0e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ec:	b13a      	cbz	r2, 800a0fe <_findenv_r+0x32>
 800a0ee:	2a3d      	cmp	r2, #61	@ 0x3d
 800a0f0:	d1f9      	bne.n	800a0e6 <_findenv_r+0x1a>
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f001 fa30 	bl	800b558 <__env_unlock>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	eba8 0809 	sub.w	r8, r8, r9
 800a102:	46a3      	mov	fp, r4
 800a104:	f854 0b04 	ldr.w	r0, [r4], #4
 800a108:	2800      	cmp	r0, #0
 800a10a:	d0f2      	beq.n	800a0f2 <_findenv_r+0x26>
 800a10c:	4642      	mov	r2, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7fe fb13 	bl	800873a <strncmp>
 800a114:	2800      	cmp	r0, #0
 800a116:	d1f4      	bne.n	800a102 <_findenv_r+0x36>
 800a118:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a11c:	eb03 0508 	add.w	r5, r3, r8
 800a120:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a124:	2b3d      	cmp	r3, #61	@ 0x3d
 800a126:	d1ec      	bne.n	800a102 <_findenv_r+0x36>
 800a128:	f8da 3000 	ldr.w	r3, [sl]
 800a12c:	ebab 0303 	sub.w	r3, fp, r3
 800a130:	109b      	asrs	r3, r3, #2
 800a132:	4630      	mov	r0, r6
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	f001 fa0f 	bl	800b558 <__env_unlock>
 800a13a:	1c68      	adds	r0, r5, #1
 800a13c:	e7dd      	b.n	800a0fa <_findenv_r+0x2e>
 800a13e:	bf00      	nop
 800a140:	20000004 	.word	0x20000004

0800a144 <_getenv_r>:
 800a144:	b507      	push	{r0, r1, r2, lr}
 800a146:	aa01      	add	r2, sp, #4
 800a148:	f7ff ffc0 	bl	800a0cc <_findenv_r>
 800a14c:	b003      	add	sp, #12
 800a14e:	f85d fb04 	ldr.w	pc, [sp], #4

0800a152 <__ascii_mbtowc>:
 800a152:	b082      	sub	sp, #8
 800a154:	b901      	cbnz	r1, 800a158 <__ascii_mbtowc+0x6>
 800a156:	a901      	add	r1, sp, #4
 800a158:	b142      	cbz	r2, 800a16c <__ascii_mbtowc+0x1a>
 800a15a:	b14b      	cbz	r3, 800a170 <__ascii_mbtowc+0x1e>
 800a15c:	7813      	ldrb	r3, [r2, #0]
 800a15e:	600b      	str	r3, [r1, #0]
 800a160:	7812      	ldrb	r2, [r2, #0]
 800a162:	1e10      	subs	r0, r2, #0
 800a164:	bf18      	it	ne
 800a166:	2001      	movne	r0, #1
 800a168:	b002      	add	sp, #8
 800a16a:	4770      	bx	lr
 800a16c:	4610      	mov	r0, r2
 800a16e:	e7fb      	b.n	800a168 <__ascii_mbtowc+0x16>
 800a170:	f06f 0001 	mvn.w	r0, #1
 800a174:	e7f8      	b.n	800a168 <__ascii_mbtowc+0x16>
	...

0800a178 <_Balloc>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	69c6      	ldr	r6, [r0, #28]
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Balloc+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7fd fc36 	bl	80079f4 <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	61e0      	str	r0, [r4, #28]
 800a18c:	b920      	cbnz	r0, 800a198 <_Balloc+0x20>
 800a18e:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <_Balloc+0x78>)
 800a190:	4818      	ldr	r0, [pc, #96]	@ (800a1f4 <_Balloc+0x7c>)
 800a192:	216b      	movs	r1, #107	@ 0x6b
 800a194:	f001 f9a8 	bl	800b4e8 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	69e6      	ldr	r6, [r4, #28]
 800a1a2:	68f3      	ldr	r3, [r6, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x50>
 800a1a6:	69e3      	ldr	r3, [r4, #28]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x68>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1b6:	1d72      	adds	r2, r6, #5
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f001 f9b2 	bl	800b524 <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x64>
 800a1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x6e>
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f001 f9a9 	bl	800b524 <_calloc_r>
 800a1d2:	69e3      	ldr	r3, [r4, #28]
 800a1d4:	60f0      	str	r0, [r6, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x2e>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x66>
 800a1ee:	bf00      	nop
 800a1f0:	0800c9b1 	.word	0x0800c9b1
 800a1f4:	0800ca31 	.word	0x0800ca31

0800a1f8 <_Bfree>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c6      	ldr	r6, [r0, #28]
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Bfree+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7fd fbf6 	bl	80079f4 <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	61e8      	str	r0, [r5, #28]
 800a20c:	b920      	cbnz	r0, 800a218 <_Bfree+0x20>
 800a20e:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <_Bfree+0x3c>)
 800a210:	4809      	ldr	r0, [pc, #36]	@ (800a238 <_Bfree+0x40>)
 800a212:	218f      	movs	r1, #143	@ 0x8f
 800a214:	f001 f968 	bl	800b4e8 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	b13c      	cbz	r4, 800a232 <_Bfree+0x3a>
 800a222:	69eb      	ldr	r3, [r5, #28]
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a22c:	6021      	str	r1, [r4, #0]
 800a22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0800c9b1 	.word	0x0800c9b1
 800a238:	0800ca31 	.word	0x0800ca31

0800a23c <__multadd>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	690d      	ldr	r5, [r1, #16]
 800a242:	4607      	mov	r7, r0
 800a244:	460c      	mov	r4, r1
 800a246:	461e      	mov	r6, r3
 800a248:	f101 0c14 	add.w	ip, r1, #20
 800a24c:	2000      	movs	r0, #0
 800a24e:	f8dc 3000 	ldr.w	r3, [ip]
 800a252:	b299      	uxth	r1, r3
 800a254:	fb02 6101 	mla	r1, r2, r1, r6
 800a258:	0c1e      	lsrs	r6, r3, #16
 800a25a:	0c0b      	lsrs	r3, r1, #16
 800a25c:	fb02 3306 	mla	r3, r2, r6, r3
 800a260:	b289      	uxth	r1, r1
 800a262:	3001      	adds	r0, #1
 800a264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a268:	4285      	cmp	r5, r0
 800a26a:	f84c 1b04 	str.w	r1, [ip], #4
 800a26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a272:	dcec      	bgt.n	800a24e <__multadd+0x12>
 800a274:	b30e      	cbz	r6, 800a2ba <__multadd+0x7e>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dc19      	bgt.n	800a2b0 <__multadd+0x74>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4638      	mov	r0, r7
 800a280:	3101      	adds	r1, #1
 800a282:	f7ff ff79 	bl	800a178 <_Balloc>
 800a286:	4680      	mov	r8, r0
 800a288:	b928      	cbnz	r0, 800a296 <__multadd+0x5a>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <__multadd+0x84>)
 800a28e:	480d      	ldr	r0, [pc, #52]	@ (800a2c4 <__multadd+0x88>)
 800a290:	21ba      	movs	r1, #186	@ 0xba
 800a292:	f001 f929 	bl	800b4e8 <__assert_func>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7ff f866 	bl	8009372 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ffa5 	bl	800a1f8 <_Bfree>
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	615e      	str	r6, [r3, #20]
 800a2b8:	6125      	str	r5, [r4, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	0800ca20 	.word	0x0800ca20
 800a2c4:	0800ca31 	.word	0x0800ca31

0800a2c8 <__hi0bits>:
 800a2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	bf36      	itet	cc
 800a2d0:	0403      	lslcc	r3, r0, #16
 800a2d2:	2000      	movcs	r0, #0
 800a2d4:	2010      	movcc	r0, #16
 800a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2da:	bf3c      	itt	cc
 800a2dc:	021b      	lslcc	r3, r3, #8
 800a2de:	3008      	addcc	r0, #8
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	bf3c      	itt	cc
 800a2e6:	011b      	lslcc	r3, r3, #4
 800a2e8:	3004      	addcc	r0, #4
 800a2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ee:	bf3c      	itt	cc
 800a2f0:	009b      	lslcc	r3, r3, #2
 800a2f2:	3002      	addcc	r0, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db05      	blt.n	800a304 <__hi0bits+0x3c>
 800a2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2fc:	f100 0001 	add.w	r0, r0, #1
 800a300:	bf08      	it	eq
 800a302:	2020      	moveq	r0, #32
 800a304:	4770      	bx	lr

0800a306 <__lo0bits>:
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	4602      	mov	r2, r0
 800a30a:	f013 0007 	ands.w	r0, r3, #7
 800a30e:	d00b      	beq.n	800a328 <__lo0bits+0x22>
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d421      	bmi.n	800a358 <__lo0bits+0x52>
 800a314:	0798      	lsls	r0, r3, #30
 800a316:	bf49      	itett	mi
 800a318:	085b      	lsrmi	r3, r3, #1
 800a31a:	089b      	lsrpl	r3, r3, #2
 800a31c:	2001      	movmi	r0, #1
 800a31e:	6013      	strmi	r3, [r2, #0]
 800a320:	bf5c      	itt	pl
 800a322:	6013      	strpl	r3, [r2, #0]
 800a324:	2002      	movpl	r0, #2
 800a326:	4770      	bx	lr
 800a328:	b299      	uxth	r1, r3
 800a32a:	b909      	cbnz	r1, 800a330 <__lo0bits+0x2a>
 800a32c:	0c1b      	lsrs	r3, r3, #16
 800a32e:	2010      	movs	r0, #16
 800a330:	b2d9      	uxtb	r1, r3
 800a332:	b909      	cbnz	r1, 800a338 <__lo0bits+0x32>
 800a334:	3008      	adds	r0, #8
 800a336:	0a1b      	lsrs	r3, r3, #8
 800a338:	0719      	lsls	r1, r3, #28
 800a33a:	bf04      	itt	eq
 800a33c:	091b      	lsreq	r3, r3, #4
 800a33e:	3004      	addeq	r0, #4
 800a340:	0799      	lsls	r1, r3, #30
 800a342:	bf04      	itt	eq
 800a344:	089b      	lsreq	r3, r3, #2
 800a346:	3002      	addeq	r0, #2
 800a348:	07d9      	lsls	r1, r3, #31
 800a34a:	d403      	bmi.n	800a354 <__lo0bits+0x4e>
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	f100 0001 	add.w	r0, r0, #1
 800a352:	d003      	beq.n	800a35c <__lo0bits+0x56>
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	4770      	bx	lr
 800a358:	2000      	movs	r0, #0
 800a35a:	4770      	bx	lr
 800a35c:	2020      	movs	r0, #32
 800a35e:	4770      	bx	lr

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff ff07 	bl	800a178 <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <__i2b+0x24>)
 800a370:	4805      	ldr	r0, [pc, #20]	@ (800a388 <__i2b+0x28>)
 800a372:	f240 1145 	movw	r1, #325	@ 0x145
 800a376:	f001 f8b7 	bl	800b4e8 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800ca20 	.word	0x0800ca20
 800a388:	0800ca31 	.word	0x0800ca31

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4614      	mov	r4, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	bfa8      	it	ge
 800a39a:	4623      	movge	r3, r4
 800a39c:	460f      	mov	r7, r1
 800a39e:	bfa4      	itt	ge
 800a3a0:	460c      	movge	r4, r1
 800a3a2:	461f      	movge	r7, r3
 800a3a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3ac:	68a3      	ldr	r3, [r4, #8]
 800a3ae:	6861      	ldr	r1, [r4, #4]
 800a3b0:	eb0a 0609 	add.w	r6, sl, r9
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	bfb8      	it	lt
 800a3ba:	3101      	addlt	r1, #1
 800a3bc:	f7ff fedc 	bl	800a178 <_Balloc>
 800a3c0:	b930      	cbnz	r0, 800a3d0 <__multiply+0x44>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b44      	ldr	r3, [pc, #272]	@ (800a4d8 <__multiply+0x14c>)
 800a3c6:	4845      	ldr	r0, [pc, #276]	@ (800a4dc <__multiply+0x150>)
 800a3c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3cc:	f001 f88c 	bl	800b4e8 <__assert_func>
 800a3d0:	f100 0514 	add.w	r5, r0, #20
 800a3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3d8:	462b      	mov	r3, r5
 800a3da:	2200      	movs	r2, #0
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	d321      	bcc.n	800a424 <__multiply+0x98>
 800a3e0:	f107 0114 	add.w	r1, r7, #20
 800a3e4:	f104 0214 	add.w	r2, r4, #20
 800a3e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	1b13      	subs	r3, r2, r4
 800a3f4:	3b15      	subs	r3, #21
 800a3f6:	f023 0303 	bic.w	r3, r3, #3
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	f104 0715 	add.w	r7, r4, #21
 800a400:	42ba      	cmp	r2, r7
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9e>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x90>
 800a414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d05b      	beq.n	800a4d4 <__multiply+0x148>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d8      	b.n	800a3dc <__multiply+0x50>
 800a42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d024      	beq.n	800a47e <__multiply+0xf2>
 800a434:	f104 0e14 	add.w	lr, r4, #20
 800a438:	46a9      	mov	r9, r5
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a442:	f8d9 3000 	ldr.w	r3, [r9]
 800a446:	fa1f fb87 	uxth.w	fp, r7
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a450:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a454:	f8d9 7000 	ldr.w	r7, [r9]
 800a458:	4463      	add	r3, ip
 800a45a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a45e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a46c:	4572      	cmp	r2, lr
 800a46e:	f849 3b04 	str.w	r3, [r9], #4
 800a472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a476:	d8e2      	bhi.n	800a43e <__multiply+0xb2>
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	f845 c003 	str.w	ip, [r5, r3]
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a484:	3104      	adds	r1, #4
 800a486:	f1b9 0f00 	cmp.w	r9, #0
 800a48a:	d021      	beq.n	800a4d0 <__multiply+0x144>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	f104 0c14 	add.w	ip, r4, #20
 800a492:	46ae      	mov	lr, r5
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	f8bc b000 	ldrh.w	fp, [ip]
 800a49c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a4a4:	4457      	add	r7, sl
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a4b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a4bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a4c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4c4:	4562      	cmp	r2, ip
 800a4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ca:	d8e5      	bhi.n	800a498 <__multiply+0x10c>
 800a4cc:	9f01      	ldr	r7, [sp, #4]
 800a4ce:	51eb      	str	r3, [r5, r7]
 800a4d0:	3504      	adds	r5, #4
 800a4d2:	e799      	b.n	800a408 <__multiply+0x7c>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	e79b      	b.n	800a410 <__multiply+0x84>
 800a4d8:	0800ca20 	.word	0x0800ca20
 800a4dc:	0800ca31 	.word	0x0800ca31

0800a4e0 <__pow5mult>:
 800a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	f012 0203 	ands.w	r2, r2, #3
 800a4ea:	4607      	mov	r7, r0
 800a4ec:	460e      	mov	r6, r1
 800a4ee:	d007      	beq.n	800a500 <__pow5mult+0x20>
 800a4f0:	4c25      	ldr	r4, [pc, #148]	@ (800a588 <__pow5mult+0xa8>)
 800a4f2:	3a01      	subs	r2, #1
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4fa:	f7ff fe9f 	bl	800a23c <__multadd>
 800a4fe:	4606      	mov	r6, r0
 800a500:	10ad      	asrs	r5, r5, #2
 800a502:	d03d      	beq.n	800a580 <__pow5mult+0xa0>
 800a504:	69fc      	ldr	r4, [r7, #28]
 800a506:	b97c      	cbnz	r4, 800a528 <__pow5mult+0x48>
 800a508:	2010      	movs	r0, #16
 800a50a:	f7fd fa73 	bl	80079f4 <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	61f8      	str	r0, [r7, #28]
 800a512:	b928      	cbnz	r0, 800a520 <__pow5mult+0x40>
 800a514:	4b1d      	ldr	r3, [pc, #116]	@ (800a58c <__pow5mult+0xac>)
 800a516:	481e      	ldr	r0, [pc, #120]	@ (800a590 <__pow5mult+0xb0>)
 800a518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a51c:	f000 ffe4 	bl	800b4e8 <__assert_func>
 800a520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a524:	6004      	str	r4, [r0, #0]
 800a526:	60c4      	str	r4, [r0, #12]
 800a528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	b94c      	cbnz	r4, 800a546 <__pow5mult+0x66>
 800a532:	f240 2171 	movw	r1, #625	@ 0x271
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff12 	bl	800a360 <__i2b>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a542:	4604      	mov	r4, r0
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	f04f 0900 	mov.w	r9, #0
 800a54a:	07eb      	lsls	r3, r5, #31
 800a54c:	d50a      	bpl.n	800a564 <__pow5mult+0x84>
 800a54e:	4631      	mov	r1, r6
 800a550:	4622      	mov	r2, r4
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ff1a 	bl	800a38c <__multiply>
 800a558:	4631      	mov	r1, r6
 800a55a:	4680      	mov	r8, r0
 800a55c:	4638      	mov	r0, r7
 800a55e:	f7ff fe4b 	bl	800a1f8 <_Bfree>
 800a562:	4646      	mov	r6, r8
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	d00b      	beq.n	800a580 <__pow5mult+0xa0>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	b938      	cbnz	r0, 800a57c <__pow5mult+0x9c>
 800a56c:	4622      	mov	r2, r4
 800a56e:	4621      	mov	r1, r4
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff ff0b 	bl	800a38c <__multiply>
 800a576:	6020      	str	r0, [r4, #0]
 800a578:	f8c0 9000 	str.w	r9, [r0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	e7e4      	b.n	800a54a <__pow5mult+0x6a>
 800a580:	4630      	mov	r0, r6
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	bf00      	nop
 800a588:	0800ca8c 	.word	0x0800ca8c
 800a58c:	0800c9b1 	.word	0x0800c9b1
 800a590:	0800ca31 	.word	0x0800ca31

0800a594 <__lshift>:
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ac:	f108 0601 	add.w	r6, r8, #1
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	db0b      	blt.n	800a5cc <__lshift+0x38>
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	f7ff fddf 	bl	800a178 <_Balloc>
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b948      	cbnz	r0, 800a5d2 <__lshift+0x3e>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <__lshift+0xd0>)
 800a5c2:	4829      	ldr	r0, [pc, #164]	@ (800a668 <__lshift+0xd4>)
 800a5c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5c8:	f000 ff8e 	bl	800b4e8 <__assert_func>
 800a5cc:	3101      	adds	r1, #1
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__lshift+0x1c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f100 0114 	add.w	r1, r0, #20
 800a5d8:	f100 0210 	add.w	r2, r0, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	4553      	cmp	r3, sl
 800a5e0:	db33      	blt.n	800a64a <__lshift+0xb6>
 800a5e2:	6920      	ldr	r0, [r4, #16]
 800a5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	f019 091f 	ands.w	r9, r9, #31
 800a5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5f8:	d02b      	beq.n	800a652 <__lshift+0xbe>
 800a5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a5fe:	468a      	mov	sl, r1
 800a600:	2200      	movs	r2, #0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	fa00 f009 	lsl.w	r0, r0, r9
 800a608:	4310      	orrs	r0, r2
 800a60a:	f84a 0b04 	str.w	r0, [sl], #4
 800a60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a612:	459c      	cmp	ip, r3
 800a614:	fa22 f20e 	lsr.w	r2, r2, lr
 800a618:	d8f3      	bhi.n	800a602 <__lshift+0x6e>
 800a61a:	ebac 0304 	sub.w	r3, ip, r4
 800a61e:	3b15      	subs	r3, #21
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	f104 0015 	add.w	r0, r4, #21
 800a62a:	4584      	cmp	ip, r0
 800a62c:	bf38      	it	cc
 800a62e:	2304      	movcc	r3, #4
 800a630:	50ca      	str	r2, [r1, r3]
 800a632:	b10a      	cbz	r2, 800a638 <__lshift+0xa4>
 800a634:	f108 0602 	add.w	r6, r8, #2
 800a638:	3e01      	subs	r6, #1
 800a63a:	4638      	mov	r0, r7
 800a63c:	612e      	str	r6, [r5, #16]
 800a63e:	4621      	mov	r1, r4
 800a640:	f7ff fdda 	bl	800a1f8 <_Bfree>
 800a644:	4628      	mov	r0, r5
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a64e:	3301      	adds	r3, #1
 800a650:	e7c5      	b.n	800a5de <__lshift+0x4a>
 800a652:	3904      	subs	r1, #4
 800a654:	f853 2b04 	ldr.w	r2, [r3], #4
 800a658:	f841 2f04 	str.w	r2, [r1, #4]!
 800a65c:	459c      	cmp	ip, r3
 800a65e:	d8f9      	bhi.n	800a654 <__lshift+0xc0>
 800a660:	e7ea      	b.n	800a638 <__lshift+0xa4>
 800a662:	bf00      	nop
 800a664:	0800ca20 	.word	0x0800ca20
 800a668:	0800ca31 	.word	0x0800ca31

0800a66c <__mcmp>:
 800a66c:	690a      	ldr	r2, [r1, #16]
 800a66e:	4603      	mov	r3, r0
 800a670:	6900      	ldr	r0, [r0, #16]
 800a672:	1a80      	subs	r0, r0, r2
 800a674:	b530      	push	{r4, r5, lr}
 800a676:	d10e      	bne.n	800a696 <__mcmp+0x2a>
 800a678:	3314      	adds	r3, #20
 800a67a:	3114      	adds	r1, #20
 800a67c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a68c:	4295      	cmp	r5, r2
 800a68e:	d003      	beq.n	800a698 <__mcmp+0x2c>
 800a690:	d205      	bcs.n	800a69e <__mcmp+0x32>
 800a692:	f04f 30ff 	mov.w	r0, #4294967295
 800a696:	bd30      	pop	{r4, r5, pc}
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d3f3      	bcc.n	800a684 <__mcmp+0x18>
 800a69c:	e7fb      	b.n	800a696 <__mcmp+0x2a>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7f9      	b.n	800a696 <__mcmp+0x2a>
	...

0800a6a4 <__mdiff>:
 800a6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4689      	mov	r9, r1
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	f7ff ffdb 	bl	800a66c <__mcmp>
 800a6b6:	1e05      	subs	r5, r0, #0
 800a6b8:	d112      	bne.n	800a6e0 <__mdiff+0x3c>
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff fd5b 	bl	800a178 <_Balloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__mdiff+0x2e>
 800a6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c4 <__mdiff+0x120>)
 800a6c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6cc:	483e      	ldr	r0, [pc, #248]	@ (800a7c8 <__mdiff+0x124>)
 800a6ce:	f000 ff0b 	bl	800b4e8 <__assert_func>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6d8:	4610      	mov	r0, r2
 800a6da:	b003      	add	sp, #12
 800a6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e0:	bfbc      	itt	lt
 800a6e2:	464b      	movlt	r3, r9
 800a6e4:	46a1      	movlt	r9, r4
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6ec:	bfba      	itte	lt
 800a6ee:	461c      	movlt	r4, r3
 800a6f0:	2501      	movlt	r5, #1
 800a6f2:	2500      	movge	r5, #0
 800a6f4:	f7ff fd40 	bl	800a178 <_Balloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	b918      	cbnz	r0, 800a704 <__mdiff+0x60>
 800a6fc:	4b31      	ldr	r3, [pc, #196]	@ (800a7c4 <__mdiff+0x120>)
 800a6fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a702:	e7e3      	b.n	800a6cc <__mdiff+0x28>
 800a704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a708:	6926      	ldr	r6, [r4, #16]
 800a70a:	60c5      	str	r5, [r0, #12]
 800a70c:	f109 0310 	add.w	r3, r9, #16
 800a710:	f109 0514 	add.w	r5, r9, #20
 800a714:	f104 0e14 	add.w	lr, r4, #20
 800a718:	f100 0b14 	add.w	fp, r0, #20
 800a71c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a724:	9301      	str	r3, [sp, #4]
 800a726:	46d9      	mov	r9, fp
 800a728:	f04f 0c00 	mov.w	ip, #0
 800a72c:	9b01      	ldr	r3, [sp, #4]
 800a72e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a732:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	fa1f f38a 	uxth.w	r3, sl
 800a73c:	4619      	mov	r1, r3
 800a73e:	b283      	uxth	r3, r0
 800a740:	1acb      	subs	r3, r1, r3
 800a742:	0c00      	lsrs	r0, r0, #16
 800a744:	4463      	add	r3, ip
 800a746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a74a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a754:	4576      	cmp	r6, lr
 800a756:	f849 3b04 	str.w	r3, [r9], #4
 800a75a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a75e:	d8e5      	bhi.n	800a72c <__mdiff+0x88>
 800a760:	1b33      	subs	r3, r6, r4
 800a762:	3b15      	subs	r3, #21
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	3415      	adds	r4, #21
 800a76a:	3304      	adds	r3, #4
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	bf38      	it	cc
 800a770:	2304      	movcc	r3, #4
 800a772:	441d      	add	r5, r3
 800a774:	445b      	add	r3, fp
 800a776:	461e      	mov	r6, r3
 800a778:	462c      	mov	r4, r5
 800a77a:	4544      	cmp	r4, r8
 800a77c:	d30e      	bcc.n	800a79c <__mdiff+0xf8>
 800a77e:	f108 0103 	add.w	r1, r8, #3
 800a782:	1b49      	subs	r1, r1, r5
 800a784:	f021 0103 	bic.w	r1, r1, #3
 800a788:	3d03      	subs	r5, #3
 800a78a:	45a8      	cmp	r8, r5
 800a78c:	bf38      	it	cc
 800a78e:	2100      	movcc	r1, #0
 800a790:	440b      	add	r3, r1
 800a792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a796:	b191      	cbz	r1, 800a7be <__mdiff+0x11a>
 800a798:	6117      	str	r7, [r2, #16]
 800a79a:	e79d      	b.n	800a6d8 <__mdiff+0x34>
 800a79c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7a0:	46e6      	mov	lr, ip
 800a7a2:	0c08      	lsrs	r0, r1, #16
 800a7a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7a8:	4471      	add	r1, lr
 800a7aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7b4:	f846 1b04 	str.w	r1, [r6], #4
 800a7b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7bc:	e7dd      	b.n	800a77a <__mdiff+0xd6>
 800a7be:	3f01      	subs	r7, #1
 800a7c0:	e7e7      	b.n	800a792 <__mdiff+0xee>
 800a7c2:	bf00      	nop
 800a7c4:	0800ca20 	.word	0x0800ca20
 800a7c8:	0800ca31 	.word	0x0800ca31

0800a7cc <__d2b>:
 800a7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	ec59 8b10 	vmov	r8, r9, d0
 800a7d8:	4616      	mov	r6, r2
 800a7da:	f7ff fccd 	bl	800a178 <_Balloc>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b930      	cbnz	r0, 800a7f0 <__d2b+0x24>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b23      	ldr	r3, [pc, #140]	@ (800a874 <__d2b+0xa8>)
 800a7e6:	4824      	ldr	r0, [pc, #144]	@ (800a878 <__d2b+0xac>)
 800a7e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7ec:	f000 fe7c 	bl	800b4e8 <__assert_func>
 800a7f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7f8:	b10d      	cbz	r5, 800a7fe <__d2b+0x32>
 800a7fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f1b8 0300 	subs.w	r3, r8, #0
 800a804:	d023      	beq.n	800a84e <__d2b+0x82>
 800a806:	4668      	mov	r0, sp
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	f7ff fd7c 	bl	800a306 <__lo0bits>
 800a80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a812:	b1d0      	cbz	r0, 800a84a <__d2b+0x7e>
 800a814:	f1c0 0320 	rsb	r3, r0, #32
 800a818:	fa02 f303 	lsl.w	r3, r2, r3
 800a81c:	430b      	orrs	r3, r1
 800a81e:	40c2      	lsrs	r2, r0
 800a820:	6163      	str	r3, [r4, #20]
 800a822:	9201      	str	r2, [sp, #4]
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	61a3      	str	r3, [r4, #24]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf0c      	ite	eq
 800a82c:	2201      	moveq	r2, #1
 800a82e:	2202      	movne	r2, #2
 800a830:	6122      	str	r2, [r4, #16]
 800a832:	b1a5      	cbz	r5, 800a85e <__d2b+0x92>
 800a834:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a838:	4405      	add	r5, r0
 800a83a:	603d      	str	r5, [r7, #0]
 800a83c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a840:	6030      	str	r0, [r6, #0]
 800a842:	4620      	mov	r0, r4
 800a844:	b003      	add	sp, #12
 800a846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a84a:	6161      	str	r1, [r4, #20]
 800a84c:	e7ea      	b.n	800a824 <__d2b+0x58>
 800a84e:	a801      	add	r0, sp, #4
 800a850:	f7ff fd59 	bl	800a306 <__lo0bits>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6163      	str	r3, [r4, #20]
 800a858:	3020      	adds	r0, #32
 800a85a:	2201      	movs	r2, #1
 800a85c:	e7e8      	b.n	800a830 <__d2b+0x64>
 800a85e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a866:	6038      	str	r0, [r7, #0]
 800a868:	6918      	ldr	r0, [r3, #16]
 800a86a:	f7ff fd2d 	bl	800a2c8 <__hi0bits>
 800a86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a872:	e7e5      	b.n	800a840 <__d2b+0x74>
 800a874:	0800ca20 	.word	0x0800ca20
 800a878:	0800ca31 	.word	0x0800ca31

0800a87c <_strtoul_l.constprop.0>:
 800a87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a880:	4e34      	ldr	r6, [pc, #208]	@ (800a954 <_strtoul_l.constprop.0+0xd8>)
 800a882:	4686      	mov	lr, r0
 800a884:	460d      	mov	r5, r1
 800a886:	4628      	mov	r0, r5
 800a888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a88c:	5d37      	ldrb	r7, [r6, r4]
 800a88e:	f017 0708 	ands.w	r7, r7, #8
 800a892:	d1f8      	bne.n	800a886 <_strtoul_l.constprop.0+0xa>
 800a894:	2c2d      	cmp	r4, #45	@ 0x2d
 800a896:	d12f      	bne.n	800a8f8 <_strtoul_l.constprop.0+0x7c>
 800a898:	782c      	ldrb	r4, [r5, #0]
 800a89a:	2701      	movs	r7, #1
 800a89c:	1c85      	adds	r5, r0, #2
 800a89e:	f033 0010 	bics.w	r0, r3, #16
 800a8a2:	d109      	bne.n	800a8b8 <_strtoul_l.constprop.0+0x3c>
 800a8a4:	2c30      	cmp	r4, #48	@ 0x30
 800a8a6:	d12c      	bne.n	800a902 <_strtoul_l.constprop.0+0x86>
 800a8a8:	7828      	ldrb	r0, [r5, #0]
 800a8aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a8ae:	2858      	cmp	r0, #88	@ 0x58
 800a8b0:	d127      	bne.n	800a902 <_strtoul_l.constprop.0+0x86>
 800a8b2:	786c      	ldrb	r4, [r5, #1]
 800a8b4:	2310      	movs	r3, #16
 800a8b6:	3502      	adds	r5, #2
 800a8b8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8bc:	2600      	movs	r6, #0
 800a8be:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8c2:	fb03 f908 	mul.w	r9, r3, r8
 800a8c6:	ea6f 0909 	mvn.w	r9, r9
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a8d0:	f1bc 0f09 	cmp.w	ip, #9
 800a8d4:	d81c      	bhi.n	800a910 <_strtoul_l.constprop.0+0x94>
 800a8d6:	4664      	mov	r4, ip
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	dd2a      	ble.n	800a932 <_strtoul_l.constprop.0+0xb6>
 800a8dc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8e0:	d007      	beq.n	800a8f2 <_strtoul_l.constprop.0+0x76>
 800a8e2:	4580      	cmp	r8, r0
 800a8e4:	d322      	bcc.n	800a92c <_strtoul_l.constprop.0+0xb0>
 800a8e6:	d101      	bne.n	800a8ec <_strtoul_l.constprop.0+0x70>
 800a8e8:	45a1      	cmp	r9, r4
 800a8ea:	db1f      	blt.n	800a92c <_strtoul_l.constprop.0+0xb0>
 800a8ec:	fb00 4003 	mla	r0, r0, r3, r4
 800a8f0:	2601      	movs	r6, #1
 800a8f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f6:	e7e9      	b.n	800a8cc <_strtoul_l.constprop.0+0x50>
 800a8f8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8fa:	bf04      	itt	eq
 800a8fc:	782c      	ldrbeq	r4, [r5, #0]
 800a8fe:	1c85      	addeq	r5, r0, #2
 800a900:	e7cd      	b.n	800a89e <_strtoul_l.constprop.0+0x22>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1d8      	bne.n	800a8b8 <_strtoul_l.constprop.0+0x3c>
 800a906:	2c30      	cmp	r4, #48	@ 0x30
 800a908:	bf0c      	ite	eq
 800a90a:	2308      	moveq	r3, #8
 800a90c:	230a      	movne	r3, #10
 800a90e:	e7d3      	b.n	800a8b8 <_strtoul_l.constprop.0+0x3c>
 800a910:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a914:	f1bc 0f19 	cmp.w	ip, #25
 800a918:	d801      	bhi.n	800a91e <_strtoul_l.constprop.0+0xa2>
 800a91a:	3c37      	subs	r4, #55	@ 0x37
 800a91c:	e7dc      	b.n	800a8d8 <_strtoul_l.constprop.0+0x5c>
 800a91e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a922:	f1bc 0f19 	cmp.w	ip, #25
 800a926:	d804      	bhi.n	800a932 <_strtoul_l.constprop.0+0xb6>
 800a928:	3c57      	subs	r4, #87	@ 0x57
 800a92a:	e7d5      	b.n	800a8d8 <_strtoul_l.constprop.0+0x5c>
 800a92c:	f04f 36ff 	mov.w	r6, #4294967295
 800a930:	e7df      	b.n	800a8f2 <_strtoul_l.constprop.0+0x76>
 800a932:	1c73      	adds	r3, r6, #1
 800a934:	d106      	bne.n	800a944 <_strtoul_l.constprop.0+0xc8>
 800a936:	2322      	movs	r3, #34	@ 0x22
 800a938:	f8ce 3000 	str.w	r3, [lr]
 800a93c:	4630      	mov	r0, r6
 800a93e:	b932      	cbnz	r2, 800a94e <_strtoul_l.constprop.0+0xd2>
 800a940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a944:	b107      	cbz	r7, 800a948 <_strtoul_l.constprop.0+0xcc>
 800a946:	4240      	negs	r0, r0
 800a948:	2a00      	cmp	r2, #0
 800a94a:	d0f9      	beq.n	800a940 <_strtoul_l.constprop.0+0xc4>
 800a94c:	b106      	cbz	r6, 800a950 <_strtoul_l.constprop.0+0xd4>
 800a94e:	1e69      	subs	r1, r5, #1
 800a950:	6011      	str	r1, [r2, #0]
 800a952:	e7f5      	b.n	800a940 <_strtoul_l.constprop.0+0xc4>
 800a954:	0800cb89 	.word	0x0800cb89

0800a958 <_strtoul_r>:
 800a958:	f7ff bf90 	b.w	800a87c <_strtoul_l.constprop.0>

0800a95c <strtoul>:
 800a95c:	4613      	mov	r3, r2
 800a95e:	460a      	mov	r2, r1
 800a960:	4601      	mov	r1, r0
 800a962:	4802      	ldr	r0, [pc, #8]	@ (800a96c <strtoul+0x10>)
 800a964:	6800      	ldr	r0, [r0, #0]
 800a966:	f7ff bf89 	b.w	800a87c <_strtoul_l.constprop.0>
 800a96a:	bf00      	nop
 800a96c:	20000198 	.word	0x20000198

0800a970 <__ascii_wctomb>:
 800a970:	4603      	mov	r3, r0
 800a972:	4608      	mov	r0, r1
 800a974:	b141      	cbz	r1, 800a988 <__ascii_wctomb+0x18>
 800a976:	2aff      	cmp	r2, #255	@ 0xff
 800a978:	d904      	bls.n	800a984 <__ascii_wctomb+0x14>
 800a97a:	228a      	movs	r2, #138	@ 0x8a
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	f04f 30ff 	mov.w	r0, #4294967295
 800a982:	4770      	bx	lr
 800a984:	700a      	strb	r2, [r1, #0]
 800a986:	2001      	movs	r0, #1
 800a988:	4770      	bx	lr

0800a98a <__ssputs_r>:
 800a98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98e:	688e      	ldr	r6, [r1, #8]
 800a990:	461f      	mov	r7, r3
 800a992:	42be      	cmp	r6, r7
 800a994:	680b      	ldr	r3, [r1, #0]
 800a996:	4682      	mov	sl, r0
 800a998:	460c      	mov	r4, r1
 800a99a:	4690      	mov	r8, r2
 800a99c:	d82d      	bhi.n	800a9fa <__ssputs_r+0x70>
 800a99e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9a2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9a6:	d026      	beq.n	800a9f6 <__ssputs_r+0x6c>
 800a9a8:	6965      	ldr	r5, [r4, #20]
 800a9aa:	6909      	ldr	r1, [r1, #16]
 800a9ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b0:	eba3 0901 	sub.w	r9, r3, r1
 800a9b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9b8:	1c7b      	adds	r3, r7, #1
 800a9ba:	444b      	add	r3, r9
 800a9bc:	106d      	asrs	r5, r5, #1
 800a9be:	429d      	cmp	r5, r3
 800a9c0:	bf38      	it	cc
 800a9c2:	461d      	movcc	r5, r3
 800a9c4:	0553      	lsls	r3, r2, #21
 800a9c6:	d527      	bpl.n	800aa18 <__ssputs_r+0x8e>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7fd f845 	bl	8007a58 <_malloc_r>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	b360      	cbz	r0, 800aa2c <__ssputs_r+0xa2>
 800a9d2:	6921      	ldr	r1, [r4, #16]
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	f7fe fccc 	bl	8009372 <memcpy>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	6126      	str	r6, [r4, #16]
 800a9e8:	6165      	str	r5, [r4, #20]
 800a9ea:	444e      	add	r6, r9
 800a9ec:	eba5 0509 	sub.w	r5, r5, r9
 800a9f0:	6026      	str	r6, [r4, #0]
 800a9f2:	60a5      	str	r5, [r4, #8]
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	42be      	cmp	r6, r7
 800a9f8:	d900      	bls.n	800a9fc <__ssputs_r+0x72>
 800a9fa:	463e      	mov	r6, r7
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4641      	mov	r1, r8
 800aa02:	f000 fd52 	bl	800b4aa <memmove>
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	1b9b      	subs	r3, r3, r6
 800aa0a:	60a3      	str	r3, [r4, #8]
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	4433      	add	r3, r6
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	2000      	movs	r0, #0
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	462a      	mov	r2, r5
 800aa1a:	f000 fda3 	bl	800b564 <_realloc_r>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d1e0      	bne.n	800a9e6 <__ssputs_r+0x5c>
 800aa24:	6921      	ldr	r1, [r4, #16]
 800aa26:	4650      	mov	r0, sl
 800aa28:	f7ff fb06 	bl	800a038 <_free_r>
 800aa2c:	230c      	movs	r3, #12
 800aa2e:	f8ca 3000 	str.w	r3, [sl]
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	e7e9      	b.n	800aa14 <__ssputs_r+0x8a>

0800aa40 <_svfiprintf_r>:
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	4698      	mov	r8, r3
 800aa46:	898b      	ldrh	r3, [r1, #12]
 800aa48:	061b      	lsls	r3, r3, #24
 800aa4a:	b09d      	sub	sp, #116	@ 0x74
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	4614      	mov	r4, r2
 800aa52:	d510      	bpl.n	800aa76 <_svfiprintf_r+0x36>
 800aa54:	690b      	ldr	r3, [r1, #16]
 800aa56:	b973      	cbnz	r3, 800aa76 <_svfiprintf_r+0x36>
 800aa58:	2140      	movs	r1, #64	@ 0x40
 800aa5a:	f7fc fffd 	bl	8007a58 <_malloc_r>
 800aa5e:	6028      	str	r0, [r5, #0]
 800aa60:	6128      	str	r0, [r5, #16]
 800aa62:	b930      	cbnz	r0, 800aa72 <_svfiprintf_r+0x32>
 800aa64:	230c      	movs	r3, #12
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	b01d      	add	sp, #116	@ 0x74
 800aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa72:	2340      	movs	r3, #64	@ 0x40
 800aa74:	616b      	str	r3, [r5, #20]
 800aa76:	2300      	movs	r3, #0
 800aa78:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7a:	2320      	movs	r3, #32
 800aa7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa80:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa84:	2330      	movs	r3, #48	@ 0x30
 800aa86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac24 <_svfiprintf_r+0x1e4>
 800aa8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa8e:	f04f 0901 	mov.w	r9, #1
 800aa92:	4623      	mov	r3, r4
 800aa94:	469a      	mov	sl, r3
 800aa96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9a:	b10a      	cbz	r2, 800aaa0 <_svfiprintf_r+0x60>
 800aa9c:	2a25      	cmp	r2, #37	@ 0x25
 800aa9e:	d1f9      	bne.n	800aa94 <_svfiprintf_r+0x54>
 800aaa0:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa4:	d00b      	beq.n	800aabe <_svfiprintf_r+0x7e>
 800aaa6:	465b      	mov	r3, fp
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4638      	mov	r0, r7
 800aaae:	f7ff ff6c 	bl	800a98a <__ssputs_r>
 800aab2:	3001      	adds	r0, #1
 800aab4:	f000 80a7 	beq.w	800ac06 <_svfiprintf_r+0x1c6>
 800aab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaba:	445a      	add	r2, fp
 800aabc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aabe:	f89a 3000 	ldrb.w	r3, [sl]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 809f 	beq.w	800ac06 <_svfiprintf_r+0x1c6>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f04f 32ff 	mov.w	r2, #4294967295
 800aace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad2:	f10a 0a01 	add.w	sl, sl, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	9307      	str	r3, [sp, #28]
 800aada:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aade:	931a      	str	r3, [sp, #104]	@ 0x68
 800aae0:	4654      	mov	r4, sl
 800aae2:	2205      	movs	r2, #5
 800aae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae8:	484e      	ldr	r0, [pc, #312]	@ (800ac24 <_svfiprintf_r+0x1e4>)
 800aaea:	f7f5 fb81 	bl	80001f0 <memchr>
 800aaee:	9a04      	ldr	r2, [sp, #16]
 800aaf0:	b9d8      	cbnz	r0, 800ab2a <_svfiprintf_r+0xea>
 800aaf2:	06d0      	lsls	r0, r2, #27
 800aaf4:	bf44      	itt	mi
 800aaf6:	2320      	movmi	r3, #32
 800aaf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aafc:	0711      	lsls	r1, r2, #28
 800aafe:	bf44      	itt	mi
 800ab00:	232b      	movmi	r3, #43	@ 0x2b
 800ab02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab0c:	d015      	beq.n	800ab3a <_svfiprintf_r+0xfa>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	4654      	mov	r4, sl
 800ab12:	2000      	movs	r0, #0
 800ab14:	f04f 0c0a 	mov.w	ip, #10
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab1e:	3b30      	subs	r3, #48	@ 0x30
 800ab20:	2b09      	cmp	r3, #9
 800ab22:	d94b      	bls.n	800abbc <_svfiprintf_r+0x17c>
 800ab24:	b1b0      	cbz	r0, 800ab54 <_svfiprintf_r+0x114>
 800ab26:	9207      	str	r2, [sp, #28]
 800ab28:	e014      	b.n	800ab54 <_svfiprintf_r+0x114>
 800ab2a:	eba0 0308 	sub.w	r3, r0, r8
 800ab2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab32:	4313      	orrs	r3, r2
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	46a2      	mov	sl, r4
 800ab38:	e7d2      	b.n	800aae0 <_svfiprintf_r+0xa0>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	1d19      	adds	r1, r3, #4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	9103      	str	r1, [sp, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	bfbb      	ittet	lt
 800ab46:	425b      	neglt	r3, r3
 800ab48:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4c:	9307      	strge	r3, [sp, #28]
 800ab4e:	9307      	strlt	r3, [sp, #28]
 800ab50:	bfb8      	it	lt
 800ab52:	9204      	strlt	r2, [sp, #16]
 800ab54:	7823      	ldrb	r3, [r4, #0]
 800ab56:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab58:	d10a      	bne.n	800ab70 <_svfiprintf_r+0x130>
 800ab5a:	7863      	ldrb	r3, [r4, #1]
 800ab5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab5e:	d132      	bne.n	800abc6 <_svfiprintf_r+0x186>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	1d1a      	adds	r2, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	9203      	str	r2, [sp, #12]
 800ab68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab6c:	3402      	adds	r4, #2
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac34 <_svfiprintf_r+0x1f4>
 800ab74:	7821      	ldrb	r1, [r4, #0]
 800ab76:	2203      	movs	r2, #3
 800ab78:	4650      	mov	r0, sl
 800ab7a:	f7f5 fb39 	bl	80001f0 <memchr>
 800ab7e:	b138      	cbz	r0, 800ab90 <_svfiprintf_r+0x150>
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	eba0 000a 	sub.w	r0, r0, sl
 800ab86:	2240      	movs	r2, #64	@ 0x40
 800ab88:	4082      	lsls	r2, r0
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	3401      	adds	r4, #1
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab94:	4824      	ldr	r0, [pc, #144]	@ (800ac28 <_svfiprintf_r+0x1e8>)
 800ab96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab9a:	2206      	movs	r2, #6
 800ab9c:	f7f5 fb28 	bl	80001f0 <memchr>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d036      	beq.n	800ac12 <_svfiprintf_r+0x1d2>
 800aba4:	4b21      	ldr	r3, [pc, #132]	@ (800ac2c <_svfiprintf_r+0x1ec>)
 800aba6:	bb1b      	cbnz	r3, 800abf0 <_svfiprintf_r+0x1b0>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	3307      	adds	r3, #7
 800abac:	f023 0307 	bic.w	r3, r3, #7
 800abb0:	3308      	adds	r3, #8
 800abb2:	9303      	str	r3, [sp, #12]
 800abb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb6:	4433      	add	r3, r6
 800abb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abba:	e76a      	b.n	800aa92 <_svfiprintf_r+0x52>
 800abbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800abc0:	460c      	mov	r4, r1
 800abc2:	2001      	movs	r0, #1
 800abc4:	e7a8      	b.n	800ab18 <_svfiprintf_r+0xd8>
 800abc6:	2300      	movs	r3, #0
 800abc8:	3401      	adds	r4, #1
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	4619      	mov	r1, r3
 800abce:	f04f 0c0a 	mov.w	ip, #10
 800abd2:	4620      	mov	r0, r4
 800abd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd8:	3a30      	subs	r2, #48	@ 0x30
 800abda:	2a09      	cmp	r2, #9
 800abdc:	d903      	bls.n	800abe6 <_svfiprintf_r+0x1a6>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0c6      	beq.n	800ab70 <_svfiprintf_r+0x130>
 800abe2:	9105      	str	r1, [sp, #20]
 800abe4:	e7c4      	b.n	800ab70 <_svfiprintf_r+0x130>
 800abe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800abea:	4604      	mov	r4, r0
 800abec:	2301      	movs	r3, #1
 800abee:	e7f0      	b.n	800abd2 <_svfiprintf_r+0x192>
 800abf0:	ab03      	add	r3, sp, #12
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	462a      	mov	r2, r5
 800abf6:	4b0e      	ldr	r3, [pc, #56]	@ (800ac30 <_svfiprintf_r+0x1f0>)
 800abf8:	a904      	add	r1, sp, #16
 800abfa:	4638      	mov	r0, r7
 800abfc:	f7fd f858 	bl	8007cb0 <_printf_float>
 800ac00:	1c42      	adds	r2, r0, #1
 800ac02:	4606      	mov	r6, r0
 800ac04:	d1d6      	bne.n	800abb4 <_svfiprintf_r+0x174>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	065b      	lsls	r3, r3, #25
 800ac0a:	f53f af2d 	bmi.w	800aa68 <_svfiprintf_r+0x28>
 800ac0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac10:	e72c      	b.n	800aa6c <_svfiprintf_r+0x2c>
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	462a      	mov	r2, r5
 800ac18:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <_svfiprintf_r+0x1f0>)
 800ac1a:	a904      	add	r1, sp, #16
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7fd fadf 	bl	80081e0 <_printf_i>
 800ac22:	e7ed      	b.n	800ac00 <_svfiprintf_r+0x1c0>
 800ac24:	0800cc89 	.word	0x0800cc89
 800ac28:	0800cc93 	.word	0x0800cc93
 800ac2c:	08007cb1 	.word	0x08007cb1
 800ac30:	0800a98b 	.word	0x0800a98b
 800ac34:	0800cc8f 	.word	0x0800cc8f

0800ac38 <_sungetc_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	1c4b      	adds	r3, r1, #1
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	d103      	bne.n	800ac48 <_sungetc_r+0x10>
 800ac40:	f04f 35ff 	mov.w	r5, #4294967295
 800ac44:	4628      	mov	r0, r5
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	8993      	ldrh	r3, [r2, #12]
 800ac4a:	f023 0320 	bic.w	r3, r3, #32
 800ac4e:	8193      	strh	r3, [r2, #12]
 800ac50:	6853      	ldr	r3, [r2, #4]
 800ac52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ac54:	b2cd      	uxtb	r5, r1
 800ac56:	b18a      	cbz	r2, 800ac7c <_sungetc_r+0x44>
 800ac58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	dd08      	ble.n	800ac70 <_sungetc_r+0x38>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	1e5a      	subs	r2, r3, #1
 800ac62:	6022      	str	r2, [r4, #0]
 800ac64:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ac68:	6863      	ldr	r3, [r4, #4]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	e7e9      	b.n	800ac44 <_sungetc_r+0xc>
 800ac70:	4621      	mov	r1, r4
 800ac72:	f000 fbe0 	bl	800b436 <__submore>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d0f1      	beq.n	800ac5e <_sungetc_r+0x26>
 800ac7a:	e7e1      	b.n	800ac40 <_sungetc_r+0x8>
 800ac7c:	6921      	ldr	r1, [r4, #16]
 800ac7e:	6822      	ldr	r2, [r4, #0]
 800ac80:	b141      	cbz	r1, 800ac94 <_sungetc_r+0x5c>
 800ac82:	4291      	cmp	r1, r2
 800ac84:	d206      	bcs.n	800ac94 <_sungetc_r+0x5c>
 800ac86:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ac8a:	42a9      	cmp	r1, r5
 800ac8c:	d102      	bne.n	800ac94 <_sungetc_r+0x5c>
 800ac8e:	3a01      	subs	r2, #1
 800ac90:	6022      	str	r2, [r4, #0]
 800ac92:	e7ea      	b.n	800ac6a <_sungetc_r+0x32>
 800ac94:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ac98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac9e:	2303      	movs	r3, #3
 800aca0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aca2:	4623      	mov	r3, r4
 800aca4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	2301      	movs	r3, #1
 800acac:	e7de      	b.n	800ac6c <_sungetc_r+0x34>

0800acae <__ssrefill_r>:
 800acae:	b510      	push	{r4, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800acb4:	b169      	cbz	r1, 800acd2 <__ssrefill_r+0x24>
 800acb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acba:	4299      	cmp	r1, r3
 800acbc:	d001      	beq.n	800acc2 <__ssrefill_r+0x14>
 800acbe:	f7ff f9bb 	bl	800a038 <_free_r>
 800acc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acc4:	6063      	str	r3, [r4, #4]
 800acc6:	2000      	movs	r0, #0
 800acc8:	6360      	str	r0, [r4, #52]	@ 0x34
 800acca:	b113      	cbz	r3, 800acd2 <__ssrefill_r+0x24>
 800accc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	2300      	movs	r3, #0
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f043 0320 	orr.w	r3, r3, #32
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	e7f3      	b.n	800acd0 <__ssrefill_r+0x22>

0800ace8 <__ssvfiscanf_r>:
 800ace8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	460c      	mov	r4, r1
 800acee:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800acf2:	2100      	movs	r1, #0
 800acf4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800acf8:	49a5      	ldr	r1, [pc, #660]	@ (800af90 <__ssvfiscanf_r+0x2a8>)
 800acfa:	91a0      	str	r1, [sp, #640]	@ 0x280
 800acfc:	f10d 0804 	add.w	r8, sp, #4
 800ad00:	49a4      	ldr	r1, [pc, #656]	@ (800af94 <__ssvfiscanf_r+0x2ac>)
 800ad02:	4fa5      	ldr	r7, [pc, #660]	@ (800af98 <__ssvfiscanf_r+0x2b0>)
 800ad04:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ad08:	4606      	mov	r6, r0
 800ad0a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	7813      	ldrb	r3, [r2, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8158 	beq.w	800afc6 <__ssvfiscanf_r+0x2de>
 800ad16:	5cf9      	ldrb	r1, [r7, r3]
 800ad18:	f011 0108 	ands.w	r1, r1, #8
 800ad1c:	f102 0501 	add.w	r5, r2, #1
 800ad20:	d019      	beq.n	800ad56 <__ssvfiscanf_r+0x6e>
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd0f      	ble.n	800ad48 <__ssvfiscanf_r+0x60>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	5cba      	ldrb	r2, [r7, r2]
 800ad2e:	0712      	lsls	r2, r2, #28
 800ad30:	d401      	bmi.n	800ad36 <__ssvfiscanf_r+0x4e>
 800ad32:	462a      	mov	r2, r5
 800ad34:	e7eb      	b.n	800ad0e <__ssvfiscanf_r+0x26>
 800ad36:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ad38:	3201      	adds	r2, #1
 800ad3a:	9245      	str	r2, [sp, #276]	@ 0x114
 800ad3c:	6862      	ldr	r2, [r4, #4]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	3a01      	subs	r2, #1
 800ad42:	6062      	str	r2, [r4, #4]
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	e7ec      	b.n	800ad22 <__ssvfiscanf_r+0x3a>
 800ad48:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4798      	blx	r3
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d0e9      	beq.n	800ad28 <__ssvfiscanf_r+0x40>
 800ad54:	e7ed      	b.n	800ad32 <__ssvfiscanf_r+0x4a>
 800ad56:	2b25      	cmp	r3, #37	@ 0x25
 800ad58:	d012      	beq.n	800ad80 <__ssvfiscanf_r+0x98>
 800ad5a:	4699      	mov	r9, r3
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f340 8093 	ble.w	800ae8a <__ssvfiscanf_r+0x1a2>
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	7813      	ldrb	r3, [r2, #0]
 800ad68:	454b      	cmp	r3, r9
 800ad6a:	f040 812c 	bne.w	800afc6 <__ssvfiscanf_r+0x2de>
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	6063      	str	r3, [r4, #4]
 800ad74:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ad76:	3201      	adds	r2, #1
 800ad78:	3301      	adds	r3, #1
 800ad7a:	6022      	str	r2, [r4, #0]
 800ad7c:	9345      	str	r3, [sp, #276]	@ 0x114
 800ad7e:	e7d8      	b.n	800ad32 <__ssvfiscanf_r+0x4a>
 800ad80:	9141      	str	r1, [sp, #260]	@ 0x104
 800ad82:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ad84:	7853      	ldrb	r3, [r2, #1]
 800ad86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad88:	bf02      	ittt	eq
 800ad8a:	2310      	moveq	r3, #16
 800ad8c:	1c95      	addeq	r5, r2, #2
 800ad8e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ad90:	220a      	movs	r2, #10
 800ad92:	46a9      	mov	r9, r5
 800ad94:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ad98:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d91e      	bls.n	800adde <__ssvfiscanf_r+0xf6>
 800ada0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800af9c <__ssvfiscanf_r+0x2b4>
 800ada4:	2203      	movs	r2, #3
 800ada6:	4650      	mov	r0, sl
 800ada8:	f7f5 fa22 	bl	80001f0 <memchr>
 800adac:	b138      	cbz	r0, 800adbe <__ssvfiscanf_r+0xd6>
 800adae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800adb0:	eba0 000a 	sub.w	r0, r0, sl
 800adb4:	2301      	movs	r3, #1
 800adb6:	4083      	lsls	r3, r0
 800adb8:	4313      	orrs	r3, r2
 800adba:	9341      	str	r3, [sp, #260]	@ 0x104
 800adbc:	464d      	mov	r5, r9
 800adbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adc2:	2b78      	cmp	r3, #120	@ 0x78
 800adc4:	d806      	bhi.n	800add4 <__ssvfiscanf_r+0xec>
 800adc6:	2b57      	cmp	r3, #87	@ 0x57
 800adc8:	d810      	bhi.n	800adec <__ssvfiscanf_r+0x104>
 800adca:	2b25      	cmp	r3, #37	@ 0x25
 800adcc:	d0c5      	beq.n	800ad5a <__ssvfiscanf_r+0x72>
 800adce:	d857      	bhi.n	800ae80 <__ssvfiscanf_r+0x198>
 800add0:	2b00      	cmp	r3, #0
 800add2:	d065      	beq.n	800aea0 <__ssvfiscanf_r+0x1b8>
 800add4:	2303      	movs	r3, #3
 800add6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800add8:	230a      	movs	r3, #10
 800adda:	9342      	str	r3, [sp, #264]	@ 0x108
 800addc:	e078      	b.n	800aed0 <__ssvfiscanf_r+0x1e8>
 800adde:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ade0:	fb02 1103 	mla	r1, r2, r3, r1
 800ade4:	3930      	subs	r1, #48	@ 0x30
 800ade6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ade8:	464d      	mov	r5, r9
 800adea:	e7d2      	b.n	800ad92 <__ssvfiscanf_r+0xaa>
 800adec:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800adf0:	2a20      	cmp	r2, #32
 800adf2:	d8ef      	bhi.n	800add4 <__ssvfiscanf_r+0xec>
 800adf4:	a101      	add	r1, pc, #4	@ (adr r1, 800adfc <__ssvfiscanf_r+0x114>)
 800adf6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adfa:	bf00      	nop
 800adfc:	0800aeaf 	.word	0x0800aeaf
 800ae00:	0800add5 	.word	0x0800add5
 800ae04:	0800add5 	.word	0x0800add5
 800ae08:	0800af09 	.word	0x0800af09
 800ae0c:	0800add5 	.word	0x0800add5
 800ae10:	0800add5 	.word	0x0800add5
 800ae14:	0800add5 	.word	0x0800add5
 800ae18:	0800add5 	.word	0x0800add5
 800ae1c:	0800add5 	.word	0x0800add5
 800ae20:	0800add5 	.word	0x0800add5
 800ae24:	0800add5 	.word	0x0800add5
 800ae28:	0800af1f 	.word	0x0800af1f
 800ae2c:	0800af05 	.word	0x0800af05
 800ae30:	0800ae87 	.word	0x0800ae87
 800ae34:	0800ae87 	.word	0x0800ae87
 800ae38:	0800ae87 	.word	0x0800ae87
 800ae3c:	0800add5 	.word	0x0800add5
 800ae40:	0800aec1 	.word	0x0800aec1
 800ae44:	0800add5 	.word	0x0800add5
 800ae48:	0800add5 	.word	0x0800add5
 800ae4c:	0800add5 	.word	0x0800add5
 800ae50:	0800add5 	.word	0x0800add5
 800ae54:	0800af2f 	.word	0x0800af2f
 800ae58:	0800aec9 	.word	0x0800aec9
 800ae5c:	0800aea7 	.word	0x0800aea7
 800ae60:	0800add5 	.word	0x0800add5
 800ae64:	0800add5 	.word	0x0800add5
 800ae68:	0800af2b 	.word	0x0800af2b
 800ae6c:	0800add5 	.word	0x0800add5
 800ae70:	0800af05 	.word	0x0800af05
 800ae74:	0800add5 	.word	0x0800add5
 800ae78:	0800add5 	.word	0x0800add5
 800ae7c:	0800aeaf 	.word	0x0800aeaf
 800ae80:	3b45      	subs	r3, #69	@ 0x45
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d8a6      	bhi.n	800add4 <__ssvfiscanf_r+0xec>
 800ae86:	2305      	movs	r3, #5
 800ae88:	e021      	b.n	800aece <__ssvfiscanf_r+0x1e6>
 800ae8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4798      	blx	r3
 800ae92:	2800      	cmp	r0, #0
 800ae94:	f43f af66 	beq.w	800ad64 <__ssvfiscanf_r+0x7c>
 800ae98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f040 808b 	bne.w	800afb6 <__ssvfiscanf_r+0x2ce>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	e08b      	b.n	800afbe <__ssvfiscanf_r+0x2d6>
 800aea6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aea8:	f042 0220 	orr.w	r2, r2, #32
 800aeac:	9241      	str	r2, [sp, #260]	@ 0x104
 800aeae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aeb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeb4:	9241      	str	r2, [sp, #260]	@ 0x104
 800aeb6:	2210      	movs	r2, #16
 800aeb8:	2b6e      	cmp	r3, #110	@ 0x6e
 800aeba:	9242      	str	r2, [sp, #264]	@ 0x108
 800aebc:	d902      	bls.n	800aec4 <__ssvfiscanf_r+0x1dc>
 800aebe:	e005      	b.n	800aecc <__ssvfiscanf_r+0x1e4>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9342      	str	r3, [sp, #264]	@ 0x108
 800aec4:	2303      	movs	r3, #3
 800aec6:	e002      	b.n	800aece <__ssvfiscanf_r+0x1e6>
 800aec8:	2308      	movs	r3, #8
 800aeca:	9342      	str	r3, [sp, #264]	@ 0x108
 800aecc:	2304      	movs	r3, #4
 800aece:	9347      	str	r3, [sp, #284]	@ 0x11c
 800aed0:	6863      	ldr	r3, [r4, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd39      	ble.n	800af4a <__ssvfiscanf_r+0x262>
 800aed6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800aed8:	0659      	lsls	r1, r3, #25
 800aeda:	d404      	bmi.n	800aee6 <__ssvfiscanf_r+0x1fe>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	5cba      	ldrb	r2, [r7, r2]
 800aee2:	0712      	lsls	r2, r2, #28
 800aee4:	d438      	bmi.n	800af58 <__ssvfiscanf_r+0x270>
 800aee6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	dc47      	bgt.n	800af7c <__ssvfiscanf_r+0x294>
 800aeec:	466b      	mov	r3, sp
 800aeee:	4622      	mov	r2, r4
 800aef0:	a941      	add	r1, sp, #260	@ 0x104
 800aef2:	4630      	mov	r0, r6
 800aef4:	f000 f86c 	bl	800afd0 <_scanf_chars>
 800aef8:	2801      	cmp	r0, #1
 800aefa:	d064      	beq.n	800afc6 <__ssvfiscanf_r+0x2de>
 800aefc:	2802      	cmp	r0, #2
 800aefe:	f47f af18 	bne.w	800ad32 <__ssvfiscanf_r+0x4a>
 800af02:	e7c9      	b.n	800ae98 <__ssvfiscanf_r+0x1b0>
 800af04:	220a      	movs	r2, #10
 800af06:	e7d7      	b.n	800aeb8 <__ssvfiscanf_r+0x1d0>
 800af08:	4629      	mov	r1, r5
 800af0a:	4640      	mov	r0, r8
 800af0c:	f000 fa5a 	bl	800b3c4 <__sccl>
 800af10:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af16:	9341      	str	r3, [sp, #260]	@ 0x104
 800af18:	4605      	mov	r5, r0
 800af1a:	2301      	movs	r3, #1
 800af1c:	e7d7      	b.n	800aece <__ssvfiscanf_r+0x1e6>
 800af1e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af24:	9341      	str	r3, [sp, #260]	@ 0x104
 800af26:	2300      	movs	r3, #0
 800af28:	e7d1      	b.n	800aece <__ssvfiscanf_r+0x1e6>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e7cf      	b.n	800aece <__ssvfiscanf_r+0x1e6>
 800af2e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800af30:	06c3      	lsls	r3, r0, #27
 800af32:	f53f aefe 	bmi.w	800ad32 <__ssvfiscanf_r+0x4a>
 800af36:	9b00      	ldr	r3, [sp, #0]
 800af38:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800af3a:	1d19      	adds	r1, r3, #4
 800af3c:	9100      	str	r1, [sp, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	07c0      	lsls	r0, r0, #31
 800af42:	bf4c      	ite	mi
 800af44:	801a      	strhmi	r2, [r3, #0]
 800af46:	601a      	strpl	r2, [r3, #0]
 800af48:	e6f3      	b.n	800ad32 <__ssvfiscanf_r+0x4a>
 800af4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800af4c:	4621      	mov	r1, r4
 800af4e:	4630      	mov	r0, r6
 800af50:	4798      	blx	r3
 800af52:	2800      	cmp	r0, #0
 800af54:	d0bf      	beq.n	800aed6 <__ssvfiscanf_r+0x1ee>
 800af56:	e79f      	b.n	800ae98 <__ssvfiscanf_r+0x1b0>
 800af58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800af5a:	3201      	adds	r2, #1
 800af5c:	9245      	str	r2, [sp, #276]	@ 0x114
 800af5e:	6862      	ldr	r2, [r4, #4]
 800af60:	3a01      	subs	r2, #1
 800af62:	2a00      	cmp	r2, #0
 800af64:	6062      	str	r2, [r4, #4]
 800af66:	dd02      	ble.n	800af6e <__ssvfiscanf_r+0x286>
 800af68:	3301      	adds	r3, #1
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	e7b6      	b.n	800aedc <__ssvfiscanf_r+0x1f4>
 800af6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800af70:	4621      	mov	r1, r4
 800af72:	4630      	mov	r0, r6
 800af74:	4798      	blx	r3
 800af76:	2800      	cmp	r0, #0
 800af78:	d0b0      	beq.n	800aedc <__ssvfiscanf_r+0x1f4>
 800af7a:	e78d      	b.n	800ae98 <__ssvfiscanf_r+0x1b0>
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	dc0f      	bgt.n	800afa0 <__ssvfiscanf_r+0x2b8>
 800af80:	466b      	mov	r3, sp
 800af82:	4622      	mov	r2, r4
 800af84:	a941      	add	r1, sp, #260	@ 0x104
 800af86:	4630      	mov	r0, r6
 800af88:	f000 f87c 	bl	800b084 <_scanf_i>
 800af8c:	e7b4      	b.n	800aef8 <__ssvfiscanf_r+0x210>
 800af8e:	bf00      	nop
 800af90:	0800ac39 	.word	0x0800ac39
 800af94:	0800acaf 	.word	0x0800acaf
 800af98:	0800cb89 	.word	0x0800cb89
 800af9c:	0800cc8f 	.word	0x0800cc8f
 800afa0:	4b0a      	ldr	r3, [pc, #40]	@ (800afcc <__ssvfiscanf_r+0x2e4>)
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f43f aec5 	beq.w	800ad32 <__ssvfiscanf_r+0x4a>
 800afa8:	466b      	mov	r3, sp
 800afaa:	4622      	mov	r2, r4
 800afac:	a941      	add	r1, sp, #260	@ 0x104
 800afae:	4630      	mov	r0, r6
 800afb0:	f3af 8000 	nop.w
 800afb4:	e7a0      	b.n	800aef8 <__ssvfiscanf_r+0x210>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	065b      	lsls	r3, r3, #25
 800afba:	f53f af71 	bmi.w	800aea0 <__ssvfiscanf_r+0x1b8>
 800afbe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800afc8:	e7f9      	b.n	800afbe <__ssvfiscanf_r+0x2d6>
 800afca:	bf00      	nop
 800afcc:	00000000 	.word	0x00000000

0800afd0 <_scanf_chars>:
 800afd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	4615      	mov	r5, r2
 800afd6:	688a      	ldr	r2, [r1, #8]
 800afd8:	4680      	mov	r8, r0
 800afda:	460c      	mov	r4, r1
 800afdc:	b932      	cbnz	r2, 800afec <_scanf_chars+0x1c>
 800afde:	698a      	ldr	r2, [r1, #24]
 800afe0:	2a00      	cmp	r2, #0
 800afe2:	bf14      	ite	ne
 800afe4:	f04f 32ff 	movne.w	r2, #4294967295
 800afe8:	2201      	moveq	r2, #1
 800afea:	608a      	str	r2, [r1, #8]
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b080 <_scanf_chars+0xb0>
 800aff2:	06d1      	lsls	r1, r2, #27
 800aff4:	bf5f      	itttt	pl
 800aff6:	681a      	ldrpl	r2, [r3, #0]
 800aff8:	1d11      	addpl	r1, r2, #4
 800affa:	6019      	strpl	r1, [r3, #0]
 800affc:	6816      	ldrpl	r6, [r2, #0]
 800affe:	2700      	movs	r7, #0
 800b000:	69a0      	ldr	r0, [r4, #24]
 800b002:	b188      	cbz	r0, 800b028 <_scanf_chars+0x58>
 800b004:	2801      	cmp	r0, #1
 800b006:	d107      	bne.n	800b018 <_scanf_chars+0x48>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	6963      	ldr	r3, [r4, #20]
 800b00e:	5c9b      	ldrb	r3, [r3, r2]
 800b010:	b953      	cbnz	r3, 800b028 <_scanf_chars+0x58>
 800b012:	2f00      	cmp	r7, #0
 800b014:	d031      	beq.n	800b07a <_scanf_chars+0xaa>
 800b016:	e022      	b.n	800b05e <_scanf_chars+0x8e>
 800b018:	2802      	cmp	r0, #2
 800b01a:	d120      	bne.n	800b05e <_scanf_chars+0x8e>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b024:	071b      	lsls	r3, r3, #28
 800b026:	d41a      	bmi.n	800b05e <_scanf_chars+0x8e>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	06da      	lsls	r2, r3, #27
 800b02c:	bf5e      	ittt	pl
 800b02e:	682b      	ldrpl	r3, [r5, #0]
 800b030:	781b      	ldrbpl	r3, [r3, #0]
 800b032:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b036:	682a      	ldr	r2, [r5, #0]
 800b038:	686b      	ldr	r3, [r5, #4]
 800b03a:	3201      	adds	r2, #1
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	68a2      	ldr	r2, [r4, #8]
 800b040:	3b01      	subs	r3, #1
 800b042:	3a01      	subs	r2, #1
 800b044:	606b      	str	r3, [r5, #4]
 800b046:	3701      	adds	r7, #1
 800b048:	60a2      	str	r2, [r4, #8]
 800b04a:	b142      	cbz	r2, 800b05e <_scanf_chars+0x8e>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dcd7      	bgt.n	800b000 <_scanf_chars+0x30>
 800b050:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b054:	4629      	mov	r1, r5
 800b056:	4640      	mov	r0, r8
 800b058:	4798      	blx	r3
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d0d0      	beq.n	800b000 <_scanf_chars+0x30>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	f013 0310 	ands.w	r3, r3, #16
 800b064:	d105      	bne.n	800b072 <_scanf_chars+0xa2>
 800b066:	68e2      	ldr	r2, [r4, #12]
 800b068:	3201      	adds	r2, #1
 800b06a:	60e2      	str	r2, [r4, #12]
 800b06c:	69a2      	ldr	r2, [r4, #24]
 800b06e:	b102      	cbz	r2, 800b072 <_scanf_chars+0xa2>
 800b070:	7033      	strb	r3, [r6, #0]
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	443b      	add	r3, r7
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	2000      	movs	r0, #0
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	bf00      	nop
 800b080:	0800cb89 	.word	0x0800cb89

0800b084 <_scanf_i>:
 800b084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b088:	4698      	mov	r8, r3
 800b08a:	4b74      	ldr	r3, [pc, #464]	@ (800b25c <_scanf_i+0x1d8>)
 800b08c:	460c      	mov	r4, r1
 800b08e:	4682      	mov	sl, r0
 800b090:	4616      	mov	r6, r2
 800b092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b096:	b087      	sub	sp, #28
 800b098:	ab03      	add	r3, sp, #12
 800b09a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b09e:	4b70      	ldr	r3, [pc, #448]	@ (800b260 <_scanf_i+0x1dc>)
 800b0a0:	69a1      	ldr	r1, [r4, #24]
 800b0a2:	4a70      	ldr	r2, [pc, #448]	@ (800b264 <_scanf_i+0x1e0>)
 800b0a4:	2903      	cmp	r1, #3
 800b0a6:	bf08      	it	eq
 800b0a8:	461a      	moveq	r2, r3
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b0b4:	bf88      	it	hi
 800b0b6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b0ba:	4627      	mov	r7, r4
 800b0bc:	bf82      	ittt	hi
 800b0be:	eb03 0905 	addhi.w	r9, r3, r5
 800b0c2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b0c6:	60a3      	strhi	r3, [r4, #8]
 800b0c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b0cc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b0d0:	bf98      	it	ls
 800b0d2:	f04f 0900 	movls.w	r9, #0
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	463d      	mov	r5, r7
 800b0da:	f04f 0b00 	mov.w	fp, #0
 800b0de:	6831      	ldr	r1, [r6, #0]
 800b0e0:	ab03      	add	r3, sp, #12
 800b0e2:	7809      	ldrb	r1, [r1, #0]
 800b0e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	f7f5 f881 	bl	80001f0 <memchr>
 800b0ee:	b328      	cbz	r0, 800b13c <_scanf_i+0xb8>
 800b0f0:	f1bb 0f01 	cmp.w	fp, #1
 800b0f4:	d159      	bne.n	800b1aa <_scanf_i+0x126>
 800b0f6:	6862      	ldr	r2, [r4, #4]
 800b0f8:	b92a      	cbnz	r2, 800b106 <_scanf_i+0x82>
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	2108      	movs	r1, #8
 800b0fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b102:	6061      	str	r1, [r4, #4]
 800b104:	6022      	str	r2, [r4, #0]
 800b106:	6822      	ldr	r2, [r4, #0]
 800b108:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b10c:	6022      	str	r2, [r4, #0]
 800b10e:	68a2      	ldr	r2, [r4, #8]
 800b110:	1e51      	subs	r1, r2, #1
 800b112:	60a1      	str	r1, [r4, #8]
 800b114:	b192      	cbz	r2, 800b13c <_scanf_i+0xb8>
 800b116:	6832      	ldr	r2, [r6, #0]
 800b118:	1c51      	adds	r1, r2, #1
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	7812      	ldrb	r2, [r2, #0]
 800b11e:	f805 2b01 	strb.w	r2, [r5], #1
 800b122:	6872      	ldr	r2, [r6, #4]
 800b124:	3a01      	subs	r2, #1
 800b126:	2a00      	cmp	r2, #0
 800b128:	6072      	str	r2, [r6, #4]
 800b12a:	dc07      	bgt.n	800b13c <_scanf_i+0xb8>
 800b12c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b130:	4631      	mov	r1, r6
 800b132:	4650      	mov	r0, sl
 800b134:	4790      	blx	r2
 800b136:	2800      	cmp	r0, #0
 800b138:	f040 8085 	bne.w	800b246 <_scanf_i+0x1c2>
 800b13c:	f10b 0b01 	add.w	fp, fp, #1
 800b140:	f1bb 0f03 	cmp.w	fp, #3
 800b144:	d1cb      	bne.n	800b0de <_scanf_i+0x5a>
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	b90b      	cbnz	r3, 800b14e <_scanf_i+0xca>
 800b14a:	230a      	movs	r3, #10
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	4945      	ldr	r1, [pc, #276]	@ (800b268 <_scanf_i+0x1e4>)
 800b152:	6960      	ldr	r0, [r4, #20]
 800b154:	1ac9      	subs	r1, r1, r3
 800b156:	f000 f935 	bl	800b3c4 <__sccl>
 800b15a:	f04f 0b00 	mov.w	fp, #0
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d03d      	beq.n	800b1e2 <_scanf_i+0x15e>
 800b166:	6831      	ldr	r1, [r6, #0]
 800b168:	6960      	ldr	r0, [r4, #20]
 800b16a:	f891 c000 	ldrb.w	ip, [r1]
 800b16e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b172:	2800      	cmp	r0, #0
 800b174:	d035      	beq.n	800b1e2 <_scanf_i+0x15e>
 800b176:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b17a:	d124      	bne.n	800b1c6 <_scanf_i+0x142>
 800b17c:	0510      	lsls	r0, r2, #20
 800b17e:	d522      	bpl.n	800b1c6 <_scanf_i+0x142>
 800b180:	f10b 0b01 	add.w	fp, fp, #1
 800b184:	f1b9 0f00 	cmp.w	r9, #0
 800b188:	d003      	beq.n	800b192 <_scanf_i+0x10e>
 800b18a:	3301      	adds	r3, #1
 800b18c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b190:	60a3      	str	r3, [r4, #8]
 800b192:	6873      	ldr	r3, [r6, #4]
 800b194:	3b01      	subs	r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	6073      	str	r3, [r6, #4]
 800b19a:	dd1b      	ble.n	800b1d4 <_scanf_i+0x150>
 800b19c:	6833      	ldr	r3, [r6, #0]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	6033      	str	r3, [r6, #0]
 800b1a2:	68a3      	ldr	r3, [r4, #8]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	60a3      	str	r3, [r4, #8]
 800b1a8:	e7d9      	b.n	800b15e <_scanf_i+0xda>
 800b1aa:	f1bb 0f02 	cmp.w	fp, #2
 800b1ae:	d1ae      	bne.n	800b10e <_scanf_i+0x8a>
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b1b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b1ba:	d1bf      	bne.n	800b13c <_scanf_i+0xb8>
 800b1bc:	2110      	movs	r1, #16
 800b1be:	6061      	str	r1, [r4, #4]
 800b1c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1c4:	e7a2      	b.n	800b10c <_scanf_i+0x88>
 800b1c6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b1ca:	6022      	str	r2, [r4, #0]
 800b1cc:	780b      	ldrb	r3, [r1, #0]
 800b1ce:	f805 3b01 	strb.w	r3, [r5], #1
 800b1d2:	e7de      	b.n	800b192 <_scanf_i+0x10e>
 800b1d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4798      	blx	r3
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	d0df      	beq.n	800b1a2 <_scanf_i+0x11e>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	05d9      	lsls	r1, r3, #23
 800b1e6:	d50d      	bpl.n	800b204 <_scanf_i+0x180>
 800b1e8:	42bd      	cmp	r5, r7
 800b1ea:	d909      	bls.n	800b200 <_scanf_i+0x17c>
 800b1ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b1f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	4798      	blx	r3
 800b1fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1fe:	464d      	mov	r5, r9
 800b200:	42bd      	cmp	r5, r7
 800b202:	d028      	beq.n	800b256 <_scanf_i+0x1d2>
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	f012 0210 	ands.w	r2, r2, #16
 800b20a:	d113      	bne.n	800b234 <_scanf_i+0x1b0>
 800b20c:	702a      	strb	r2, [r5, #0]
 800b20e:	6863      	ldr	r3, [r4, #4]
 800b210:	9e01      	ldr	r6, [sp, #4]
 800b212:	4639      	mov	r1, r7
 800b214:	4650      	mov	r0, sl
 800b216:	47b0      	blx	r6
 800b218:	f8d8 3000 	ldr.w	r3, [r8]
 800b21c:	6821      	ldr	r1, [r4, #0]
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	f8c8 2000 	str.w	r2, [r8]
 800b224:	f011 0f20 	tst.w	r1, #32
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	d00f      	beq.n	800b24c <_scanf_i+0x1c8>
 800b22c:	6018      	str	r0, [r3, #0]
 800b22e:	68e3      	ldr	r3, [r4, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60e3      	str	r3, [r4, #12]
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	1bed      	subs	r5, r5, r7
 800b238:	445d      	add	r5, fp
 800b23a:	442b      	add	r3, r5
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	2000      	movs	r0, #0
 800b240:	b007      	add	sp, #28
 800b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b246:	f04f 0b00 	mov.w	fp, #0
 800b24a:	e7ca      	b.n	800b1e2 <_scanf_i+0x15e>
 800b24c:	07ca      	lsls	r2, r1, #31
 800b24e:	bf4c      	ite	mi
 800b250:	8018      	strhmi	r0, [r3, #0]
 800b252:	6018      	strpl	r0, [r3, #0]
 800b254:	e7eb      	b.n	800b22e <_scanf_i+0x1aa>
 800b256:	2001      	movs	r0, #1
 800b258:	e7f2      	b.n	800b240 <_scanf_i+0x1bc>
 800b25a:	bf00      	nop
 800b25c:	0800bdac 	.word	0x0800bdac
 800b260:	0800b6b5 	.word	0x0800b6b5
 800b264:	0800a959 	.word	0x0800a959
 800b268:	0800ccaa 	.word	0x0800ccaa

0800b26c <__sflush_r>:
 800b26c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	0716      	lsls	r6, r2, #28
 800b276:	4605      	mov	r5, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	d454      	bmi.n	800b326 <__sflush_r+0xba>
 800b27c:	684b      	ldr	r3, [r1, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	dc02      	bgt.n	800b288 <__sflush_r+0x1c>
 800b282:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b284:	2b00      	cmp	r3, #0
 800b286:	dd48      	ble.n	800b31a <__sflush_r+0xae>
 800b288:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b28a:	2e00      	cmp	r6, #0
 800b28c:	d045      	beq.n	800b31a <__sflush_r+0xae>
 800b28e:	2300      	movs	r3, #0
 800b290:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b294:	682f      	ldr	r7, [r5, #0]
 800b296:	6a21      	ldr	r1, [r4, #32]
 800b298:	602b      	str	r3, [r5, #0]
 800b29a:	d030      	beq.n	800b2fe <__sflush_r+0x92>
 800b29c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	0759      	lsls	r1, r3, #29
 800b2a2:	d505      	bpl.n	800b2b0 <__sflush_r+0x44>
 800b2a4:	6863      	ldr	r3, [r4, #4]
 800b2a6:	1ad2      	subs	r2, r2, r3
 800b2a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2aa:	b10b      	cbz	r3, 800b2b0 <__sflush_r+0x44>
 800b2ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2b4:	6a21      	ldr	r1, [r4, #32]
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	47b0      	blx	r6
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	d106      	bne.n	800b2ce <__sflush_r+0x62>
 800b2c0:	6829      	ldr	r1, [r5, #0]
 800b2c2:	291d      	cmp	r1, #29
 800b2c4:	d82b      	bhi.n	800b31e <__sflush_r+0xb2>
 800b2c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b370 <__sflush_r+0x104>)
 800b2c8:	410a      	asrs	r2, r1
 800b2ca:	07d6      	lsls	r6, r2, #31
 800b2cc:	d427      	bmi.n	800b31e <__sflush_r+0xb2>
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	6062      	str	r2, [r4, #4]
 800b2d2:	04d9      	lsls	r1, r3, #19
 800b2d4:	6922      	ldr	r2, [r4, #16]
 800b2d6:	6022      	str	r2, [r4, #0]
 800b2d8:	d504      	bpl.n	800b2e4 <__sflush_r+0x78>
 800b2da:	1c42      	adds	r2, r0, #1
 800b2dc:	d101      	bne.n	800b2e2 <__sflush_r+0x76>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	b903      	cbnz	r3, 800b2e4 <__sflush_r+0x78>
 800b2e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2e6:	602f      	str	r7, [r5, #0]
 800b2e8:	b1b9      	cbz	r1, 800b31a <__sflush_r+0xae>
 800b2ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2ee:	4299      	cmp	r1, r3
 800b2f0:	d002      	beq.n	800b2f8 <__sflush_r+0x8c>
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f7fe fea0 	bl	800a038 <_free_r>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2fc:	e00d      	b.n	800b31a <__sflush_r+0xae>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4628      	mov	r0, r5
 800b302:	47b0      	blx	r6
 800b304:	4602      	mov	r2, r0
 800b306:	1c50      	adds	r0, r2, #1
 800b308:	d1c9      	bne.n	800b29e <__sflush_r+0x32>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0c6      	beq.n	800b29e <__sflush_r+0x32>
 800b310:	2b1d      	cmp	r3, #29
 800b312:	d001      	beq.n	800b318 <__sflush_r+0xac>
 800b314:	2b16      	cmp	r3, #22
 800b316:	d11e      	bne.n	800b356 <__sflush_r+0xea>
 800b318:	602f      	str	r7, [r5, #0]
 800b31a:	2000      	movs	r0, #0
 800b31c:	e022      	b.n	800b364 <__sflush_r+0xf8>
 800b31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b322:	b21b      	sxth	r3, r3
 800b324:	e01b      	b.n	800b35e <__sflush_r+0xf2>
 800b326:	690f      	ldr	r7, [r1, #16]
 800b328:	2f00      	cmp	r7, #0
 800b32a:	d0f6      	beq.n	800b31a <__sflush_r+0xae>
 800b32c:	0793      	lsls	r3, r2, #30
 800b32e:	680e      	ldr	r6, [r1, #0]
 800b330:	bf08      	it	eq
 800b332:	694b      	ldreq	r3, [r1, #20]
 800b334:	600f      	str	r7, [r1, #0]
 800b336:	bf18      	it	ne
 800b338:	2300      	movne	r3, #0
 800b33a:	eba6 0807 	sub.w	r8, r6, r7
 800b33e:	608b      	str	r3, [r1, #8]
 800b340:	f1b8 0f00 	cmp.w	r8, #0
 800b344:	dde9      	ble.n	800b31a <__sflush_r+0xae>
 800b346:	6a21      	ldr	r1, [r4, #32]
 800b348:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b34a:	4643      	mov	r3, r8
 800b34c:	463a      	mov	r2, r7
 800b34e:	4628      	mov	r0, r5
 800b350:	47b0      	blx	r6
 800b352:	2800      	cmp	r0, #0
 800b354:	dc08      	bgt.n	800b368 <__sflush_r+0xfc>
 800b356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b35e:	81a3      	strh	r3, [r4, #12]
 800b360:	f04f 30ff 	mov.w	r0, #4294967295
 800b364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b368:	4407      	add	r7, r0
 800b36a:	eba8 0800 	sub.w	r8, r8, r0
 800b36e:	e7e7      	b.n	800b340 <__sflush_r+0xd4>
 800b370:	dfbffffe 	.word	0xdfbffffe

0800b374 <_fflush_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	690b      	ldr	r3, [r1, #16]
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	b913      	cbnz	r3, 800b384 <_fflush_r+0x10>
 800b37e:	2500      	movs	r5, #0
 800b380:	4628      	mov	r0, r5
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	b118      	cbz	r0, 800b38e <_fflush_r+0x1a>
 800b386:	6a03      	ldr	r3, [r0, #32]
 800b388:	b90b      	cbnz	r3, 800b38e <_fflush_r+0x1a>
 800b38a:	f7fd f8d5 	bl	8008538 <__sinit>
 800b38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0f3      	beq.n	800b37e <_fflush_r+0xa>
 800b396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b398:	07d0      	lsls	r0, r2, #31
 800b39a:	d404      	bmi.n	800b3a6 <_fflush_r+0x32>
 800b39c:	0599      	lsls	r1, r3, #22
 800b39e:	d402      	bmi.n	800b3a6 <_fflush_r+0x32>
 800b3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3a2:	f7fd ffdb 	bl	800935c <__retarget_lock_acquire_recursive>
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	f7ff ff5f 	bl	800b26c <__sflush_r>
 800b3ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3b0:	07da      	lsls	r2, r3, #31
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	d4e4      	bmi.n	800b380 <_fflush_r+0xc>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	059b      	lsls	r3, r3, #22
 800b3ba:	d4e1      	bmi.n	800b380 <_fflush_r+0xc>
 800b3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3be:	f7fd ffcf 	bl	8009360 <__retarget_lock_release_recursive>
 800b3c2:	e7dd      	b.n	800b380 <_fflush_r+0xc>

0800b3c4 <__sccl>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	780b      	ldrb	r3, [r1, #0]
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800b3cc:	bf0b      	itete	eq
 800b3ce:	784b      	ldrbeq	r3, [r1, #1]
 800b3d0:	1c4a      	addne	r2, r1, #1
 800b3d2:	1c8a      	addeq	r2, r1, #2
 800b3d4:	2100      	movne	r1, #0
 800b3d6:	bf08      	it	eq
 800b3d8:	2101      	moveq	r1, #1
 800b3da:	3801      	subs	r0, #1
 800b3dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b3e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b3e4:	42a8      	cmp	r0, r5
 800b3e6:	d1fb      	bne.n	800b3e0 <__sccl+0x1c>
 800b3e8:	b90b      	cbnz	r3, 800b3ee <__sccl+0x2a>
 800b3ea:	1e50      	subs	r0, r2, #1
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
 800b3ee:	f081 0101 	eor.w	r1, r1, #1
 800b3f2:	54e1      	strb	r1, [r4, r3]
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b3fc:	2d2d      	cmp	r5, #45	@ 0x2d
 800b3fe:	d005      	beq.n	800b40c <__sccl+0x48>
 800b400:	2d5d      	cmp	r5, #93	@ 0x5d
 800b402:	d016      	beq.n	800b432 <__sccl+0x6e>
 800b404:	2d00      	cmp	r5, #0
 800b406:	d0f1      	beq.n	800b3ec <__sccl+0x28>
 800b408:	462b      	mov	r3, r5
 800b40a:	e7f2      	b.n	800b3f2 <__sccl+0x2e>
 800b40c:	7846      	ldrb	r6, [r0, #1]
 800b40e:	2e5d      	cmp	r6, #93	@ 0x5d
 800b410:	d0fa      	beq.n	800b408 <__sccl+0x44>
 800b412:	42b3      	cmp	r3, r6
 800b414:	dcf8      	bgt.n	800b408 <__sccl+0x44>
 800b416:	3002      	adds	r0, #2
 800b418:	461a      	mov	r2, r3
 800b41a:	3201      	adds	r2, #1
 800b41c:	4296      	cmp	r6, r2
 800b41e:	54a1      	strb	r1, [r4, r2]
 800b420:	dcfb      	bgt.n	800b41a <__sccl+0x56>
 800b422:	1af2      	subs	r2, r6, r3
 800b424:	3a01      	subs	r2, #1
 800b426:	1c5d      	adds	r5, r3, #1
 800b428:	42b3      	cmp	r3, r6
 800b42a:	bfa8      	it	ge
 800b42c:	2200      	movge	r2, #0
 800b42e:	18ab      	adds	r3, r5, r2
 800b430:	e7e1      	b.n	800b3f6 <__sccl+0x32>
 800b432:	4610      	mov	r0, r2
 800b434:	e7da      	b.n	800b3ec <__sccl+0x28>

0800b436 <__submore>:
 800b436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	460c      	mov	r4, r1
 800b43c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b43e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b442:	4299      	cmp	r1, r3
 800b444:	d11d      	bne.n	800b482 <__submore+0x4c>
 800b446:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b44a:	f7fc fb05 	bl	8007a58 <_malloc_r>
 800b44e:	b918      	cbnz	r0, 800b458 <__submore+0x22>
 800b450:	f04f 30ff 	mov.w	r0, #4294967295
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b45c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b45e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b462:	6360      	str	r0, [r4, #52]	@ 0x34
 800b464:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b468:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b46c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b470:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b474:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b478:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b47c:	6020      	str	r0, [r4, #0]
 800b47e:	2000      	movs	r0, #0
 800b480:	e7e8      	b.n	800b454 <__submore+0x1e>
 800b482:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b484:	0077      	lsls	r7, r6, #1
 800b486:	463a      	mov	r2, r7
 800b488:	f000 f86c 	bl	800b564 <_realloc_r>
 800b48c:	4605      	mov	r5, r0
 800b48e:	2800      	cmp	r0, #0
 800b490:	d0de      	beq.n	800b450 <__submore+0x1a>
 800b492:	eb00 0806 	add.w	r8, r0, r6
 800b496:	4601      	mov	r1, r0
 800b498:	4632      	mov	r2, r6
 800b49a:	4640      	mov	r0, r8
 800b49c:	f7fd ff69 	bl	8009372 <memcpy>
 800b4a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b4a4:	f8c4 8000 	str.w	r8, [r4]
 800b4a8:	e7e9      	b.n	800b47e <__submore+0x48>

0800b4aa <memmove>:
 800b4aa:	4288      	cmp	r0, r1
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	eb01 0402 	add.w	r4, r1, r2
 800b4b2:	d902      	bls.n	800b4ba <memmove+0x10>
 800b4b4:	4284      	cmp	r4, r0
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	d807      	bhi.n	800b4ca <memmove+0x20>
 800b4ba:	1e43      	subs	r3, r0, #1
 800b4bc:	42a1      	cmp	r1, r4
 800b4be:	d008      	beq.n	800b4d2 <memmove+0x28>
 800b4c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4c8:	e7f8      	b.n	800b4bc <memmove+0x12>
 800b4ca:	4402      	add	r2, r0
 800b4cc:	4601      	mov	r1, r0
 800b4ce:	428a      	cmp	r2, r1
 800b4d0:	d100      	bne.n	800b4d4 <memmove+0x2a>
 800b4d2:	bd10      	pop	{r4, pc}
 800b4d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4dc:	e7f7      	b.n	800b4ce <memmove+0x24>
	...

0800b4e0 <__gettzinfo>:
 800b4e0:	4800      	ldr	r0, [pc, #0]	@ (800b4e4 <__gettzinfo+0x4>)
 800b4e2:	4770      	bx	lr
 800b4e4:	200001e8 	.word	0x200001e8

0800b4e8 <__assert_func>:
 800b4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4ea:	4614      	mov	r4, r2
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	4b09      	ldr	r3, [pc, #36]	@ (800b514 <__assert_func+0x2c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	68d8      	ldr	r0, [r3, #12]
 800b4f6:	b954      	cbnz	r4, 800b50e <__assert_func+0x26>
 800b4f8:	4b07      	ldr	r3, [pc, #28]	@ (800b518 <__assert_func+0x30>)
 800b4fa:	461c      	mov	r4, r3
 800b4fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b500:	9100      	str	r1, [sp, #0]
 800b502:	462b      	mov	r3, r5
 800b504:	4905      	ldr	r1, [pc, #20]	@ (800b51c <__assert_func+0x34>)
 800b506:	f000 f8d7 	bl	800b6b8 <fiprintf>
 800b50a:	f000 f8e7 	bl	800b6dc <abort>
 800b50e:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <__assert_func+0x38>)
 800b510:	e7f4      	b.n	800b4fc <__assert_func+0x14>
 800b512:	bf00      	nop
 800b514:	20000198 	.word	0x20000198
 800b518:	0800be11 	.word	0x0800be11
 800b51c:	0800cd25 	.word	0x0800cd25
 800b520:	0800cd18 	.word	0x0800cd18

0800b524 <_calloc_r>:
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	fba1 5402 	umull	r5, r4, r1, r2
 800b52a:	b93c      	cbnz	r4, 800b53c <_calloc_r+0x18>
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7fc fa93 	bl	8007a58 <_malloc_r>
 800b532:	4606      	mov	r6, r0
 800b534:	b928      	cbnz	r0, 800b542 <_calloc_r+0x1e>
 800b536:	2600      	movs	r6, #0
 800b538:	4630      	mov	r0, r6
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	220c      	movs	r2, #12
 800b53e:	6002      	str	r2, [r0, #0]
 800b540:	e7f9      	b.n	800b536 <_calloc_r+0x12>
 800b542:	462a      	mov	r2, r5
 800b544:	4621      	mov	r1, r4
 800b546:	f7fd f8f0 	bl	800872a <memset>
 800b54a:	e7f5      	b.n	800b538 <_calloc_r+0x14>

0800b54c <__env_lock>:
 800b54c:	4801      	ldr	r0, [pc, #4]	@ (800b554 <__env_lock+0x8>)
 800b54e:	f7fd bf05 	b.w	800935c <__retarget_lock_acquire_recursive>
 800b552:	bf00      	nop
 800b554:	20004d81 	.word	0x20004d81

0800b558 <__env_unlock>:
 800b558:	4801      	ldr	r0, [pc, #4]	@ (800b560 <__env_unlock+0x8>)
 800b55a:	f7fd bf01 	b.w	8009360 <__retarget_lock_release_recursive>
 800b55e:	bf00      	nop
 800b560:	20004d81 	.word	0x20004d81

0800b564 <_realloc_r>:
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	4680      	mov	r8, r0
 800b56a:	4615      	mov	r5, r2
 800b56c:	460c      	mov	r4, r1
 800b56e:	b921      	cbnz	r1, 800b57a <_realloc_r+0x16>
 800b570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b574:	4611      	mov	r1, r2
 800b576:	f7fc ba6f 	b.w	8007a58 <_malloc_r>
 800b57a:	b92a      	cbnz	r2, 800b588 <_realloc_r+0x24>
 800b57c:	f7fe fd5c 	bl	800a038 <_free_r>
 800b580:	2400      	movs	r4, #0
 800b582:	4620      	mov	r0, r4
 800b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b588:	f000 f8af 	bl	800b6ea <_malloc_usable_size_r>
 800b58c:	4285      	cmp	r5, r0
 800b58e:	4606      	mov	r6, r0
 800b590:	d802      	bhi.n	800b598 <_realloc_r+0x34>
 800b592:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b596:	d8f4      	bhi.n	800b582 <_realloc_r+0x1e>
 800b598:	4629      	mov	r1, r5
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7fc fa5c 	bl	8007a58 <_malloc_r>
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d0ec      	beq.n	800b580 <_realloc_r+0x1c>
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	bf28      	it	cs
 800b5ae:	4632      	movcs	r2, r6
 800b5b0:	f7fd fedf 	bl	8009372 <memcpy>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	f7fe fd3e 	bl	800a038 <_free_r>
 800b5bc:	463c      	mov	r4, r7
 800b5be:	e7e0      	b.n	800b582 <_realloc_r+0x1e>

0800b5c0 <_strtol_l.constprop.0>:
 800b5c0:	2b24      	cmp	r3, #36	@ 0x24
 800b5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c6:	4686      	mov	lr, r0
 800b5c8:	4690      	mov	r8, r2
 800b5ca:	d801      	bhi.n	800b5d0 <_strtol_l.constprop.0+0x10>
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d106      	bne.n	800b5de <_strtol_l.constprop.0+0x1e>
 800b5d0:	f7fd fe98 	bl	8009304 <__errno>
 800b5d4:	2316      	movs	r3, #22
 800b5d6:	6003      	str	r3, [r0, #0]
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5de:	4834      	ldr	r0, [pc, #208]	@ (800b6b0 <_strtol_l.constprop.0+0xf0>)
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5e8:	5d06      	ldrb	r6, [r0, r4]
 800b5ea:	f016 0608 	ands.w	r6, r6, #8
 800b5ee:	d1f8      	bne.n	800b5e2 <_strtol_l.constprop.0+0x22>
 800b5f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5f2:	d12d      	bne.n	800b650 <_strtol_l.constprop.0+0x90>
 800b5f4:	782c      	ldrb	r4, [r5, #0]
 800b5f6:	2601      	movs	r6, #1
 800b5f8:	1c95      	adds	r5, r2, #2
 800b5fa:	f033 0210 	bics.w	r2, r3, #16
 800b5fe:	d109      	bne.n	800b614 <_strtol_l.constprop.0+0x54>
 800b600:	2c30      	cmp	r4, #48	@ 0x30
 800b602:	d12a      	bne.n	800b65a <_strtol_l.constprop.0+0x9a>
 800b604:	782a      	ldrb	r2, [r5, #0]
 800b606:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b60a:	2a58      	cmp	r2, #88	@ 0x58
 800b60c:	d125      	bne.n	800b65a <_strtol_l.constprop.0+0x9a>
 800b60e:	786c      	ldrb	r4, [r5, #1]
 800b610:	2310      	movs	r3, #16
 800b612:	3502      	adds	r5, #2
 800b614:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b618:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b61c:	2200      	movs	r2, #0
 800b61e:	fbbc f9f3 	udiv	r9, ip, r3
 800b622:	4610      	mov	r0, r2
 800b624:	fb03 ca19 	mls	sl, r3, r9, ip
 800b628:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b62c:	2f09      	cmp	r7, #9
 800b62e:	d81b      	bhi.n	800b668 <_strtol_l.constprop.0+0xa8>
 800b630:	463c      	mov	r4, r7
 800b632:	42a3      	cmp	r3, r4
 800b634:	dd27      	ble.n	800b686 <_strtol_l.constprop.0+0xc6>
 800b636:	1c57      	adds	r7, r2, #1
 800b638:	d007      	beq.n	800b64a <_strtol_l.constprop.0+0x8a>
 800b63a:	4581      	cmp	r9, r0
 800b63c:	d320      	bcc.n	800b680 <_strtol_l.constprop.0+0xc0>
 800b63e:	d101      	bne.n	800b644 <_strtol_l.constprop.0+0x84>
 800b640:	45a2      	cmp	sl, r4
 800b642:	db1d      	blt.n	800b680 <_strtol_l.constprop.0+0xc0>
 800b644:	fb00 4003 	mla	r0, r0, r3, r4
 800b648:	2201      	movs	r2, #1
 800b64a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b64e:	e7eb      	b.n	800b628 <_strtol_l.constprop.0+0x68>
 800b650:	2c2b      	cmp	r4, #43	@ 0x2b
 800b652:	bf04      	itt	eq
 800b654:	782c      	ldrbeq	r4, [r5, #0]
 800b656:	1c95      	addeq	r5, r2, #2
 800b658:	e7cf      	b.n	800b5fa <_strtol_l.constprop.0+0x3a>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1da      	bne.n	800b614 <_strtol_l.constprop.0+0x54>
 800b65e:	2c30      	cmp	r4, #48	@ 0x30
 800b660:	bf0c      	ite	eq
 800b662:	2308      	moveq	r3, #8
 800b664:	230a      	movne	r3, #10
 800b666:	e7d5      	b.n	800b614 <_strtol_l.constprop.0+0x54>
 800b668:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b66c:	2f19      	cmp	r7, #25
 800b66e:	d801      	bhi.n	800b674 <_strtol_l.constprop.0+0xb4>
 800b670:	3c37      	subs	r4, #55	@ 0x37
 800b672:	e7de      	b.n	800b632 <_strtol_l.constprop.0+0x72>
 800b674:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b678:	2f19      	cmp	r7, #25
 800b67a:	d804      	bhi.n	800b686 <_strtol_l.constprop.0+0xc6>
 800b67c:	3c57      	subs	r4, #87	@ 0x57
 800b67e:	e7d8      	b.n	800b632 <_strtol_l.constprop.0+0x72>
 800b680:	f04f 32ff 	mov.w	r2, #4294967295
 800b684:	e7e1      	b.n	800b64a <_strtol_l.constprop.0+0x8a>
 800b686:	1c53      	adds	r3, r2, #1
 800b688:	d108      	bne.n	800b69c <_strtol_l.constprop.0+0xdc>
 800b68a:	2322      	movs	r3, #34	@ 0x22
 800b68c:	f8ce 3000 	str.w	r3, [lr]
 800b690:	4660      	mov	r0, ip
 800b692:	f1b8 0f00 	cmp.w	r8, #0
 800b696:	d0a0      	beq.n	800b5da <_strtol_l.constprop.0+0x1a>
 800b698:	1e69      	subs	r1, r5, #1
 800b69a:	e006      	b.n	800b6aa <_strtol_l.constprop.0+0xea>
 800b69c:	b106      	cbz	r6, 800b6a0 <_strtol_l.constprop.0+0xe0>
 800b69e:	4240      	negs	r0, r0
 800b6a0:	f1b8 0f00 	cmp.w	r8, #0
 800b6a4:	d099      	beq.n	800b5da <_strtol_l.constprop.0+0x1a>
 800b6a6:	2a00      	cmp	r2, #0
 800b6a8:	d1f6      	bne.n	800b698 <_strtol_l.constprop.0+0xd8>
 800b6aa:	f8c8 1000 	str.w	r1, [r8]
 800b6ae:	e794      	b.n	800b5da <_strtol_l.constprop.0+0x1a>
 800b6b0:	0800cb89 	.word	0x0800cb89

0800b6b4 <_strtol_r>:
 800b6b4:	f7ff bf84 	b.w	800b5c0 <_strtol_l.constprop.0>

0800b6b8 <fiprintf>:
 800b6b8:	b40e      	push	{r1, r2, r3}
 800b6ba:	b503      	push	{r0, r1, lr}
 800b6bc:	4601      	mov	r1, r0
 800b6be:	ab03      	add	r3, sp, #12
 800b6c0:	4805      	ldr	r0, [pc, #20]	@ (800b6d8 <fiprintf+0x20>)
 800b6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c6:	6800      	ldr	r0, [r0, #0]
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	f000 f83f 	bl	800b74c <_vfiprintf_r>
 800b6ce:	b002      	add	sp, #8
 800b6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6d4:	b003      	add	sp, #12
 800b6d6:	4770      	bx	lr
 800b6d8:	20000198 	.word	0x20000198

0800b6dc <abort>:
 800b6dc:	b508      	push	{r3, lr}
 800b6de:	2006      	movs	r0, #6
 800b6e0:	f000 fa08 	bl	800baf4 <raise>
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	f7f7 fd81 	bl	80031ec <_exit>

0800b6ea <_malloc_usable_size_r>:
 800b6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ee:	1f18      	subs	r0, r3, #4
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	bfbc      	itt	lt
 800b6f4:	580b      	ldrlt	r3, [r1, r0]
 800b6f6:	18c0      	addlt	r0, r0, r3
 800b6f8:	4770      	bx	lr

0800b6fa <__sfputc_r>:
 800b6fa:	6893      	ldr	r3, [r2, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	b410      	push	{r4}
 800b702:	6093      	str	r3, [r2, #8]
 800b704:	da08      	bge.n	800b718 <__sfputc_r+0x1e>
 800b706:	6994      	ldr	r4, [r2, #24]
 800b708:	42a3      	cmp	r3, r4
 800b70a:	db01      	blt.n	800b710 <__sfputc_r+0x16>
 800b70c:	290a      	cmp	r1, #10
 800b70e:	d103      	bne.n	800b718 <__sfputc_r+0x1e>
 800b710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b714:	f000 b932 	b.w	800b97c <__swbuf_r>
 800b718:	6813      	ldr	r3, [r2, #0]
 800b71a:	1c58      	adds	r0, r3, #1
 800b71c:	6010      	str	r0, [r2, #0]
 800b71e:	7019      	strb	r1, [r3, #0]
 800b720:	4608      	mov	r0, r1
 800b722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <__sfputs_r>:
 800b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	4614      	mov	r4, r2
 800b730:	18d5      	adds	r5, r2, r3
 800b732:	42ac      	cmp	r4, r5
 800b734:	d101      	bne.n	800b73a <__sfputs_r+0x12>
 800b736:	2000      	movs	r0, #0
 800b738:	e007      	b.n	800b74a <__sfputs_r+0x22>
 800b73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73e:	463a      	mov	r2, r7
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff ffda 	bl	800b6fa <__sfputc_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d1f3      	bne.n	800b732 <__sfputs_r+0xa>
 800b74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b74c <_vfiprintf_r>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	460d      	mov	r5, r1
 800b752:	b09d      	sub	sp, #116	@ 0x74
 800b754:	4614      	mov	r4, r2
 800b756:	4698      	mov	r8, r3
 800b758:	4606      	mov	r6, r0
 800b75a:	b118      	cbz	r0, 800b764 <_vfiprintf_r+0x18>
 800b75c:	6a03      	ldr	r3, [r0, #32]
 800b75e:	b90b      	cbnz	r3, 800b764 <_vfiprintf_r+0x18>
 800b760:	f7fc feea 	bl	8008538 <__sinit>
 800b764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b766:	07d9      	lsls	r1, r3, #31
 800b768:	d405      	bmi.n	800b776 <_vfiprintf_r+0x2a>
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	059a      	lsls	r2, r3, #22
 800b76e:	d402      	bmi.n	800b776 <_vfiprintf_r+0x2a>
 800b770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b772:	f7fd fdf3 	bl	800935c <__retarget_lock_acquire_recursive>
 800b776:	89ab      	ldrh	r3, [r5, #12]
 800b778:	071b      	lsls	r3, r3, #28
 800b77a:	d501      	bpl.n	800b780 <_vfiprintf_r+0x34>
 800b77c:	692b      	ldr	r3, [r5, #16]
 800b77e:	b99b      	cbnz	r3, 800b7a8 <_vfiprintf_r+0x5c>
 800b780:	4629      	mov	r1, r5
 800b782:	4630      	mov	r0, r6
 800b784:	f000 f938 	bl	800b9f8 <__swsetup_r>
 800b788:	b170      	cbz	r0, 800b7a8 <_vfiprintf_r+0x5c>
 800b78a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b78c:	07dc      	lsls	r4, r3, #31
 800b78e:	d504      	bpl.n	800b79a <_vfiprintf_r+0x4e>
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	b01d      	add	sp, #116	@ 0x74
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	0598      	lsls	r0, r3, #22
 800b79e:	d4f7      	bmi.n	800b790 <_vfiprintf_r+0x44>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a2:	f7fd fddd 	bl	8009360 <__retarget_lock_release_recursive>
 800b7a6:	e7f3      	b.n	800b790 <_vfiprintf_r+0x44>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ac:	2320      	movs	r3, #32
 800b7ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7b6:	2330      	movs	r3, #48	@ 0x30
 800b7b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b968 <_vfiprintf_r+0x21c>
 800b7bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7c0:	f04f 0901 	mov.w	r9, #1
 800b7c4:	4623      	mov	r3, r4
 800b7c6:	469a      	mov	sl, r3
 800b7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7cc:	b10a      	cbz	r2, 800b7d2 <_vfiprintf_r+0x86>
 800b7ce:	2a25      	cmp	r2, #37	@ 0x25
 800b7d0:	d1f9      	bne.n	800b7c6 <_vfiprintf_r+0x7a>
 800b7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b7d6:	d00b      	beq.n	800b7f0 <_vfiprintf_r+0xa4>
 800b7d8:	465b      	mov	r3, fp
 800b7da:	4622      	mov	r2, r4
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ffa2 	bl	800b728 <__sfputs_r>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	f000 80a7 	beq.w	800b938 <_vfiprintf_r+0x1ec>
 800b7ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7ec:	445a      	add	r2, fp
 800b7ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 809f 	beq.w	800b938 <_vfiprintf_r+0x1ec>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b804:	f10a 0a01 	add.w	sl, sl, #1
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	9307      	str	r3, [sp, #28]
 800b80c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b810:	931a      	str	r3, [sp, #104]	@ 0x68
 800b812:	4654      	mov	r4, sl
 800b814:	2205      	movs	r2, #5
 800b816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81a:	4853      	ldr	r0, [pc, #332]	@ (800b968 <_vfiprintf_r+0x21c>)
 800b81c:	f7f4 fce8 	bl	80001f0 <memchr>
 800b820:	9a04      	ldr	r2, [sp, #16]
 800b822:	b9d8      	cbnz	r0, 800b85c <_vfiprintf_r+0x110>
 800b824:	06d1      	lsls	r1, r2, #27
 800b826:	bf44      	itt	mi
 800b828:	2320      	movmi	r3, #32
 800b82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b82e:	0713      	lsls	r3, r2, #28
 800b830:	bf44      	itt	mi
 800b832:	232b      	movmi	r3, #43	@ 0x2b
 800b834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b838:	f89a 3000 	ldrb.w	r3, [sl]
 800b83c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b83e:	d015      	beq.n	800b86c <_vfiprintf_r+0x120>
 800b840:	9a07      	ldr	r2, [sp, #28]
 800b842:	4654      	mov	r4, sl
 800b844:	2000      	movs	r0, #0
 800b846:	f04f 0c0a 	mov.w	ip, #10
 800b84a:	4621      	mov	r1, r4
 800b84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b850:	3b30      	subs	r3, #48	@ 0x30
 800b852:	2b09      	cmp	r3, #9
 800b854:	d94b      	bls.n	800b8ee <_vfiprintf_r+0x1a2>
 800b856:	b1b0      	cbz	r0, 800b886 <_vfiprintf_r+0x13a>
 800b858:	9207      	str	r2, [sp, #28]
 800b85a:	e014      	b.n	800b886 <_vfiprintf_r+0x13a>
 800b85c:	eba0 0308 	sub.w	r3, r0, r8
 800b860:	fa09 f303 	lsl.w	r3, r9, r3
 800b864:	4313      	orrs	r3, r2
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	46a2      	mov	sl, r4
 800b86a:	e7d2      	b.n	800b812 <_vfiprintf_r+0xc6>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	1d19      	adds	r1, r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	9103      	str	r1, [sp, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfbb      	ittet	lt
 800b878:	425b      	neglt	r3, r3
 800b87a:	f042 0202 	orrlt.w	r2, r2, #2
 800b87e:	9307      	strge	r3, [sp, #28]
 800b880:	9307      	strlt	r3, [sp, #28]
 800b882:	bfb8      	it	lt
 800b884:	9204      	strlt	r2, [sp, #16]
 800b886:	7823      	ldrb	r3, [r4, #0]
 800b888:	2b2e      	cmp	r3, #46	@ 0x2e
 800b88a:	d10a      	bne.n	800b8a2 <_vfiprintf_r+0x156>
 800b88c:	7863      	ldrb	r3, [r4, #1]
 800b88e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b890:	d132      	bne.n	800b8f8 <_vfiprintf_r+0x1ac>
 800b892:	9b03      	ldr	r3, [sp, #12]
 800b894:	1d1a      	adds	r2, r3, #4
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	9203      	str	r2, [sp, #12]
 800b89a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b89e:	3402      	adds	r4, #2
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b978 <_vfiprintf_r+0x22c>
 800b8a6:	7821      	ldrb	r1, [r4, #0]
 800b8a8:	2203      	movs	r2, #3
 800b8aa:	4650      	mov	r0, sl
 800b8ac:	f7f4 fca0 	bl	80001f0 <memchr>
 800b8b0:	b138      	cbz	r0, 800b8c2 <_vfiprintf_r+0x176>
 800b8b2:	9b04      	ldr	r3, [sp, #16]
 800b8b4:	eba0 000a 	sub.w	r0, r0, sl
 800b8b8:	2240      	movs	r2, #64	@ 0x40
 800b8ba:	4082      	lsls	r2, r0
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	3401      	adds	r4, #1
 800b8c0:	9304      	str	r3, [sp, #16]
 800b8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c6:	4829      	ldr	r0, [pc, #164]	@ (800b96c <_vfiprintf_r+0x220>)
 800b8c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8cc:	2206      	movs	r2, #6
 800b8ce:	f7f4 fc8f 	bl	80001f0 <memchr>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d03f      	beq.n	800b956 <_vfiprintf_r+0x20a>
 800b8d6:	4b26      	ldr	r3, [pc, #152]	@ (800b970 <_vfiprintf_r+0x224>)
 800b8d8:	bb1b      	cbnz	r3, 800b922 <_vfiprintf_r+0x1d6>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	3307      	adds	r3, #7
 800b8de:	f023 0307 	bic.w	r3, r3, #7
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	9303      	str	r3, [sp, #12]
 800b8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e8:	443b      	add	r3, r7
 800b8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ec:	e76a      	b.n	800b7c4 <_vfiprintf_r+0x78>
 800b8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	e7a8      	b.n	800b84a <_vfiprintf_r+0xfe>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	3401      	adds	r4, #1
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f04f 0c0a 	mov.w	ip, #10
 800b904:	4620      	mov	r0, r4
 800b906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b90a:	3a30      	subs	r2, #48	@ 0x30
 800b90c:	2a09      	cmp	r2, #9
 800b90e:	d903      	bls.n	800b918 <_vfiprintf_r+0x1cc>
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0c6      	beq.n	800b8a2 <_vfiprintf_r+0x156>
 800b914:	9105      	str	r1, [sp, #20]
 800b916:	e7c4      	b.n	800b8a2 <_vfiprintf_r+0x156>
 800b918:	fb0c 2101 	mla	r1, ip, r1, r2
 800b91c:	4604      	mov	r4, r0
 800b91e:	2301      	movs	r3, #1
 800b920:	e7f0      	b.n	800b904 <_vfiprintf_r+0x1b8>
 800b922:	ab03      	add	r3, sp, #12
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	462a      	mov	r2, r5
 800b928:	4b12      	ldr	r3, [pc, #72]	@ (800b974 <_vfiprintf_r+0x228>)
 800b92a:	a904      	add	r1, sp, #16
 800b92c:	4630      	mov	r0, r6
 800b92e:	f7fc f9bf 	bl	8007cb0 <_printf_float>
 800b932:	4607      	mov	r7, r0
 800b934:	1c78      	adds	r0, r7, #1
 800b936:	d1d6      	bne.n	800b8e6 <_vfiprintf_r+0x19a>
 800b938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b93a:	07d9      	lsls	r1, r3, #31
 800b93c:	d405      	bmi.n	800b94a <_vfiprintf_r+0x1fe>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	059a      	lsls	r2, r3, #22
 800b942:	d402      	bmi.n	800b94a <_vfiprintf_r+0x1fe>
 800b944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b946:	f7fd fd0b 	bl	8009360 <__retarget_lock_release_recursive>
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	065b      	lsls	r3, r3, #25
 800b94e:	f53f af1f 	bmi.w	800b790 <_vfiprintf_r+0x44>
 800b952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b954:	e71e      	b.n	800b794 <_vfiprintf_r+0x48>
 800b956:	ab03      	add	r3, sp, #12
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	462a      	mov	r2, r5
 800b95c:	4b05      	ldr	r3, [pc, #20]	@ (800b974 <_vfiprintf_r+0x228>)
 800b95e:	a904      	add	r1, sp, #16
 800b960:	4630      	mov	r0, r6
 800b962:	f7fc fc3d 	bl	80081e0 <_printf_i>
 800b966:	e7e4      	b.n	800b932 <_vfiprintf_r+0x1e6>
 800b968:	0800cc89 	.word	0x0800cc89
 800b96c:	0800cc93 	.word	0x0800cc93
 800b970:	08007cb1 	.word	0x08007cb1
 800b974:	0800b729 	.word	0x0800b729
 800b978:	0800cc8f 	.word	0x0800cc8f

0800b97c <__swbuf_r>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	460e      	mov	r6, r1
 800b980:	4614      	mov	r4, r2
 800b982:	4605      	mov	r5, r0
 800b984:	b118      	cbz	r0, 800b98e <__swbuf_r+0x12>
 800b986:	6a03      	ldr	r3, [r0, #32]
 800b988:	b90b      	cbnz	r3, 800b98e <__swbuf_r+0x12>
 800b98a:	f7fc fdd5 	bl	8008538 <__sinit>
 800b98e:	69a3      	ldr	r3, [r4, #24]
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	071a      	lsls	r2, r3, #28
 800b996:	d501      	bpl.n	800b99c <__swbuf_r+0x20>
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	b943      	cbnz	r3, 800b9ae <__swbuf_r+0x32>
 800b99c:	4621      	mov	r1, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f82a 	bl	800b9f8 <__swsetup_r>
 800b9a4:	b118      	cbz	r0, 800b9ae <__swbuf_r+0x32>
 800b9a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	6922      	ldr	r2, [r4, #16]
 800b9b2:	1a98      	subs	r0, r3, r2
 800b9b4:	6963      	ldr	r3, [r4, #20]
 800b9b6:	b2f6      	uxtb	r6, r6
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	4637      	mov	r7, r6
 800b9bc:	dc05      	bgt.n	800b9ca <__swbuf_r+0x4e>
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7ff fcd7 	bl	800b374 <_fflush_r>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d1ed      	bne.n	800b9a6 <__swbuf_r+0x2a>
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	60a3      	str	r3, [r4, #8]
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	6022      	str	r2, [r4, #0]
 800b9d6:	701e      	strb	r6, [r3, #0]
 800b9d8:	6962      	ldr	r2, [r4, #20]
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d004      	beq.n	800b9ea <__swbuf_r+0x6e>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	07db      	lsls	r3, r3, #31
 800b9e4:	d5e1      	bpl.n	800b9aa <__swbuf_r+0x2e>
 800b9e6:	2e0a      	cmp	r6, #10
 800b9e8:	d1df      	bne.n	800b9aa <__swbuf_r+0x2e>
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f7ff fcc1 	bl	800b374 <_fflush_r>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0d9      	beq.n	800b9aa <__swbuf_r+0x2e>
 800b9f6:	e7d6      	b.n	800b9a6 <__swbuf_r+0x2a>

0800b9f8 <__swsetup_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4b29      	ldr	r3, [pc, #164]	@ (800baa0 <__swsetup_r+0xa8>)
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	460c      	mov	r4, r1
 800ba02:	b118      	cbz	r0, 800ba0c <__swsetup_r+0x14>
 800ba04:	6a03      	ldr	r3, [r0, #32]
 800ba06:	b90b      	cbnz	r3, 800ba0c <__swsetup_r+0x14>
 800ba08:	f7fc fd96 	bl	8008538 <__sinit>
 800ba0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba10:	0719      	lsls	r1, r3, #28
 800ba12:	d422      	bmi.n	800ba5a <__swsetup_r+0x62>
 800ba14:	06da      	lsls	r2, r3, #27
 800ba16:	d407      	bmi.n	800ba28 <__swsetup_r+0x30>
 800ba18:	2209      	movs	r2, #9
 800ba1a:	602a      	str	r2, [r5, #0]
 800ba1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295
 800ba26:	e033      	b.n	800ba90 <__swsetup_r+0x98>
 800ba28:	0758      	lsls	r0, r3, #29
 800ba2a:	d512      	bpl.n	800ba52 <__swsetup_r+0x5a>
 800ba2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba2e:	b141      	cbz	r1, 800ba42 <__swsetup_r+0x4a>
 800ba30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba34:	4299      	cmp	r1, r3
 800ba36:	d002      	beq.n	800ba3e <__swsetup_r+0x46>
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f7fe fafd 	bl	800a038 <_free_r>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba42:	89a3      	ldrh	r3, [r4, #12]
 800ba44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba48:	81a3      	strh	r3, [r4, #12]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6063      	str	r3, [r4, #4]
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	f043 0308 	orr.w	r3, r3, #8
 800ba58:	81a3      	strh	r3, [r4, #12]
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	b94b      	cbnz	r3, 800ba72 <__swsetup_r+0x7a>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba68:	d003      	beq.n	800ba72 <__swsetup_r+0x7a>
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f000 f883 	bl	800bb78 <__smakebuf_r>
 800ba72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba76:	f013 0201 	ands.w	r2, r3, #1
 800ba7a:	d00a      	beq.n	800ba92 <__swsetup_r+0x9a>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	60a2      	str	r2, [r4, #8]
 800ba80:	6962      	ldr	r2, [r4, #20]
 800ba82:	4252      	negs	r2, r2
 800ba84:	61a2      	str	r2, [r4, #24]
 800ba86:	6922      	ldr	r2, [r4, #16]
 800ba88:	b942      	cbnz	r2, 800ba9c <__swsetup_r+0xa4>
 800ba8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba8e:	d1c5      	bne.n	800ba1c <__swsetup_r+0x24>
 800ba90:	bd38      	pop	{r3, r4, r5, pc}
 800ba92:	0799      	lsls	r1, r3, #30
 800ba94:	bf58      	it	pl
 800ba96:	6962      	ldrpl	r2, [r4, #20]
 800ba98:	60a2      	str	r2, [r4, #8]
 800ba9a:	e7f4      	b.n	800ba86 <__swsetup_r+0x8e>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e7f7      	b.n	800ba90 <__swsetup_r+0x98>
 800baa0:	20000198 	.word	0x20000198

0800baa4 <_raise_r>:
 800baa4:	291f      	cmp	r1, #31
 800baa6:	b538      	push	{r3, r4, r5, lr}
 800baa8:	4605      	mov	r5, r0
 800baaa:	460c      	mov	r4, r1
 800baac:	d904      	bls.n	800bab8 <_raise_r+0x14>
 800baae:	2316      	movs	r3, #22
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	f04f 30ff 	mov.w	r0, #4294967295
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baba:	b112      	cbz	r2, 800bac2 <_raise_r+0x1e>
 800babc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bac0:	b94b      	cbnz	r3, 800bad6 <_raise_r+0x32>
 800bac2:	4628      	mov	r0, r5
 800bac4:	f000 f830 	bl	800bb28 <_getpid_r>
 800bac8:	4622      	mov	r2, r4
 800baca:	4601      	mov	r1, r0
 800bacc:	4628      	mov	r0, r5
 800bace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad2:	f000 b817 	b.w	800bb04 <_kill_r>
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d00a      	beq.n	800baf0 <_raise_r+0x4c>
 800bada:	1c59      	adds	r1, r3, #1
 800badc:	d103      	bne.n	800bae6 <_raise_r+0x42>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	2001      	movs	r0, #1
 800bae4:	e7e7      	b.n	800bab6 <_raise_r+0x12>
 800bae6:	2100      	movs	r1, #0
 800bae8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800baec:	4620      	mov	r0, r4
 800baee:	4798      	blx	r3
 800baf0:	2000      	movs	r0, #0
 800baf2:	e7e0      	b.n	800bab6 <_raise_r+0x12>

0800baf4 <raise>:
 800baf4:	4b02      	ldr	r3, [pc, #8]	@ (800bb00 <raise+0xc>)
 800baf6:	4601      	mov	r1, r0
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	f7ff bfd3 	b.w	800baa4 <_raise_r>
 800bafe:	bf00      	nop
 800bb00:	20000198 	.word	0x20000198

0800bb04 <_kill_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d07      	ldr	r5, [pc, #28]	@ (800bb24 <_kill_r+0x20>)
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	f7f7 fb63 	bl	80031dc <_kill>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	d102      	bne.n	800bb20 <_kill_r+0x1c>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	b103      	cbz	r3, 800bb20 <_kill_r+0x1c>
 800bb1e:	6023      	str	r3, [r4, #0]
 800bb20:	bd38      	pop	{r3, r4, r5, pc}
 800bb22:	bf00      	nop
 800bb24:	20004d7c 	.word	0x20004d7c

0800bb28 <_getpid_r>:
 800bb28:	f7f7 bb56 	b.w	80031d8 <_getpid>

0800bb2c <__swhatbuf_r>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb34:	2900      	cmp	r1, #0
 800bb36:	b096      	sub	sp, #88	@ 0x58
 800bb38:	4615      	mov	r5, r2
 800bb3a:	461e      	mov	r6, r3
 800bb3c:	da0d      	bge.n	800bb5a <__swhatbuf_r+0x2e>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb44:	f04f 0100 	mov.w	r1, #0
 800bb48:	bf14      	ite	ne
 800bb4a:	2340      	movne	r3, #64	@ 0x40
 800bb4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb50:	2000      	movs	r0, #0
 800bb52:	6031      	str	r1, [r6, #0]
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	b016      	add	sp, #88	@ 0x58
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	466a      	mov	r2, sp
 800bb5c:	f000 f848 	bl	800bbf0 <_fstat_r>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dbec      	blt.n	800bb3e <__swhatbuf_r+0x12>
 800bb64:	9901      	ldr	r1, [sp, #4]
 800bb66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb6e:	4259      	negs	r1, r3
 800bb70:	4159      	adcs	r1, r3
 800bb72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb76:	e7eb      	b.n	800bb50 <__swhatbuf_r+0x24>

0800bb78 <__smakebuf_r>:
 800bb78:	898b      	ldrh	r3, [r1, #12]
 800bb7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb7c:	079d      	lsls	r5, r3, #30
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460c      	mov	r4, r1
 800bb82:	d507      	bpl.n	800bb94 <__smakebuf_r+0x1c>
 800bb84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	6163      	str	r3, [r4, #20]
 800bb90:	b003      	add	sp, #12
 800bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb94:	ab01      	add	r3, sp, #4
 800bb96:	466a      	mov	r2, sp
 800bb98:	f7ff ffc8 	bl	800bb2c <__swhatbuf_r>
 800bb9c:	9f00      	ldr	r7, [sp, #0]
 800bb9e:	4605      	mov	r5, r0
 800bba0:	4639      	mov	r1, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	f7fb ff58 	bl	8007a58 <_malloc_r>
 800bba8:	b948      	cbnz	r0, 800bbbe <__smakebuf_r+0x46>
 800bbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbae:	059a      	lsls	r2, r3, #22
 800bbb0:	d4ee      	bmi.n	800bb90 <__smakebuf_r+0x18>
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	f043 0302 	orr.w	r3, r3, #2
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	e7e2      	b.n	800bb84 <__smakebuf_r+0xc>
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	6020      	str	r0, [r4, #0]
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbc6:	81a3      	strh	r3, [r4, #12]
 800bbc8:	9b01      	ldr	r3, [sp, #4]
 800bbca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbce:	b15b      	cbz	r3, 800bbe8 <__smakebuf_r+0x70>
 800bbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f000 f81d 	bl	800bc14 <_isatty_r>
 800bbda:	b128      	cbz	r0, 800bbe8 <__smakebuf_r+0x70>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f023 0303 	bic.w	r3, r3, #3
 800bbe2:	f043 0301 	orr.w	r3, r3, #1
 800bbe6:	81a3      	strh	r3, [r4, #12]
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	431d      	orrs	r5, r3
 800bbec:	81a5      	strh	r5, [r4, #12]
 800bbee:	e7cf      	b.n	800bb90 <__smakebuf_r+0x18>

0800bbf0 <_fstat_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	@ (800bc10 <_fstat_r+0x20>)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	602b      	str	r3, [r5, #0]
 800bbfe:	f7f7 fb1a 	bl	8003236 <_fstat>
 800bc02:	1c43      	adds	r3, r0, #1
 800bc04:	d102      	bne.n	800bc0c <_fstat_r+0x1c>
 800bc06:	682b      	ldr	r3, [r5, #0]
 800bc08:	b103      	cbz	r3, 800bc0c <_fstat_r+0x1c>
 800bc0a:	6023      	str	r3, [r4, #0]
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	bf00      	nop
 800bc10:	20004d7c 	.word	0x20004d7c

0800bc14 <_isatty_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4d06      	ldr	r5, [pc, #24]	@ (800bc30 <_isatty_r+0x1c>)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	602b      	str	r3, [r5, #0]
 800bc20:	f7f7 fb0e 	bl	8003240 <_isatty>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d102      	bne.n	800bc2e <_isatty_r+0x1a>
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	b103      	cbz	r3, 800bc2e <_isatty_r+0x1a>
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}
 800bc30:	20004d7c 	.word	0x20004d7c

0800bc34 <round>:
 800bc34:	ec51 0b10 	vmov	r0, r1, d0
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800bc3e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800bc42:	2a13      	cmp	r2, #19
 800bc44:	460b      	mov	r3, r1
 800bc46:	4605      	mov	r5, r0
 800bc48:	dc1b      	bgt.n	800bc82 <round+0x4e>
 800bc4a:	2a00      	cmp	r2, #0
 800bc4c:	da0b      	bge.n	800bc66 <round+0x32>
 800bc4e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800bc52:	3201      	adds	r2, #1
 800bc54:	bf04      	itt	eq
 800bc56:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc5a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	e015      	b.n	800bc92 <round+0x5e>
 800bc66:	4c15      	ldr	r4, [pc, #84]	@ (800bcbc <round+0x88>)
 800bc68:	4114      	asrs	r4, r2
 800bc6a:	ea04 0601 	and.w	r6, r4, r1
 800bc6e:	4306      	orrs	r6, r0
 800bc70:	d00f      	beq.n	800bc92 <round+0x5e>
 800bc72:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800bc76:	fa41 f202 	asr.w	r2, r1, r2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	ea23 0304 	bic.w	r3, r3, r4
 800bc80:	e7ed      	b.n	800bc5e <round+0x2a>
 800bc82:	2a33      	cmp	r2, #51	@ 0x33
 800bc84:	dd08      	ble.n	800bc98 <round+0x64>
 800bc86:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800bc8a:	d102      	bne.n	800bc92 <round+0x5e>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	f7f4 fb0d 	bl	80002ac <__adddf3>
 800bc92:	ec41 0b10 	vmov	d0, r0, r1
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800bc9c:	f04f 34ff 	mov.w	r4, #4294967295
 800bca0:	40f4      	lsrs	r4, r6
 800bca2:	4204      	tst	r4, r0
 800bca4:	d0f5      	beq.n	800bc92 <round+0x5e>
 800bca6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800bcaa:	2201      	movs	r2, #1
 800bcac:	408a      	lsls	r2, r1
 800bcae:	1952      	adds	r2, r2, r5
 800bcb0:	bf28      	it	cs
 800bcb2:	3301      	addcs	r3, #1
 800bcb4:	ea22 0204 	bic.w	r2, r2, r4
 800bcb8:	e7d2      	b.n	800bc60 <round+0x2c>
 800bcba:	bf00      	nop
 800bcbc:	000fffff 	.word	0x000fffff

0800bcc0 <_init>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	bf00      	nop
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr

0800bccc <_fini>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	bf00      	nop
 800bcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcd2:	bc08      	pop	{r3}
 800bcd4:	469e      	mov	lr, r3
 800bcd6:	4770      	bx	lr
