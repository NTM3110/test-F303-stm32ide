
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e8  0800e038  0800e038  0000f038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f520  0800f520  00011248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f520  0800f520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f528  0800f528  00011248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f528  0800f528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f52c  0800f52c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800f530  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011248  2**0
                  CONTENTS
 10 .bss          00009394  20000248  20000248  00011248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200095dc  200095dc  00011248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY
 13 .debug_info   000389b3  00000000  00000000  00011278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007034  00000000  00000000  00049c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013339  00000000  00000000  00050c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f38  00000000  00000000  00063f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000222c  00000000  00000000  00065ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000256df  00000000  00000000  000680fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034dda  00000000  00000000  0008d7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d91d6  00000000  00000000  000c25b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019b78b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072ec  00000000  00000000  0019b7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001a2abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e020 	.word	0x0800e020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800e020 	.word	0x0800e020

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <coldStart>:
	osDelay(50);	//	50 is OK
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
 8000d14:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d16:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <coldStart+0x1c>)
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <coldStart+0x20>)
 8000d1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1e:	220d      	movs	r2, #13
 8000d20:	f004 ffac 	bl	8005c7c <HAL_UART_Transmit>
	osDelay(100);
}
 8000d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osDelay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f005 b997 	b.w	800605c <osDelay>
 8000d2e:	bf00      	nop
 8000d30:	0800e044 	.word	0x0800e044
 8000d34:	20002cac 	.word	0x20002cac

08000d38 <validateChecksum>:
	osDelay(1000);

}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4401      	add	r1, r0
 8000d3c:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d101      	bne.n	8000d46 <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d42:	2000      	movs	r0, #0
 8000d44:	e021      	b.n	8000d8a <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d46:	461c      	mov	r4, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d4e:	d1f6      	bne.n	8000d3e <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d50:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d52:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d54:	e002      	b.n	8000d5c <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d5a:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d5c:	4284      	cmp	r4, r0
 8000d5e:	d8fa      	bhi.n	8000d56 <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d60:	1ca3      	adds	r3, r4, #2
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d212      	bcs.n	8000d8c <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	1c60      	adds	r0, r4, #1
 8000d6c:	f008 f926 	bl	8008fbc <strtol>
 8000d70:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
//        snprintf()
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d72:	4629      	mov	r1, r5
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d74:	b2e4      	uxtb	r4, r4
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <validateChecksum+0x60>)
 8000d78:	f009 f858 	bl	8009e2c <iprintf>
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <validateChecksum+0x64>)
 8000d7e:	4621      	mov	r1, r4
 8000d80:	f009 f854 	bl	8009e2c <iprintf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000d84:	1b63      	subs	r3, r4, r5
 8000d86:	4258      	negs	r0, r3
 8000d88:	4158      	adcs	r0, r3
    }
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <validateChecksum+0x68>)
 8000d92:	f009 f84b 	bl	8009e2c <iprintf>
    return 0; // Invalid checksum
 8000d96:	e7d4      	b.n	8000d42 <validateChecksum+0xa>
 8000d98:	0800e052 	.word	0x0800e052
 8000d9c:	0800e06d 	.word	0x0800e06d
 8000da0:	0800e086 	.word	0x0800e086

08000da4 <display_rmc_data>:

void display_rmc_data() {
 8000da4:	b513      	push	{r0, r1, r4, lr}

    printf("Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000da6:	4c1d      	ldr	r4, [pc, #116]	@ (8000e1c <display_rmc_data+0x78>)
 8000da8:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <display_rmc_data+0x7c>)
 8000daa:	6821      	ldr	r1, [r4, #0]
 8000dac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000db0:	f009 f83c 	bl	8009e2c <iprintf>

    printf("Date: %02d/%02d/20%02d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000db4:	6921      	ldr	r1, [r4, #16]
 8000db6:	481b      	ldr	r0, [pc, #108]	@ (8000e24 <display_rmc_data+0x80>)
 8000db8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000dbc:	f009 f836 	bl	8009e2c <iprintf>
	
    printf("Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000dc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000dca:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <display_rmc_data+0x84>)
 8000dcc:	f009 f82e 	bl	8009e2c <iprintf>

    printf("Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000dd0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <display_rmc_data+0x88>)
 8000ddc:	f009 f826 	bl	8009e2c <iprintf>

    printf("Speed: %.1f knots\r\n", rmc.speed);
 8000de0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000de2:	f7ff fbc1 	bl	8000568 <__aeabi_f2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <display_rmc_data+0x8c>)
 8000dec:	f009 f81e 	bl	8009e2c <iprintf>

    printf("Course: %.1f\r\n", rmc.course);
 8000df0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000df2:	f7ff fbb9 	bl	8000568 <__aeabi_f2d>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <display_rmc_data+0x90>)
 8000dfc:	f009 f816 	bl	8009e2c <iprintf>

    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e02:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <display_rmc_data+0x94>)
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <display_rmc_data+0x98>)
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <display_rmc_data+0x9c>)
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	4611      	moveq	r1, r2
 8000e0e:	4619      	movne	r1, r3
}
 8000e10:	b002      	add	sp, #8
 8000e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e16:	f009 b809 	b.w	8009e2c <iprintf>
 8000e1a:	bf00      	nop
 8000e1c:	200003c8 	.word	0x200003c8
 8000e20:	0800e0cb 	.word	0x0800e0cb
 8000e24:	0800e0e2 	.word	0x0800e0e2
 8000e28:	0800e0fb 	.word	0x0800e0fb
 8000e2c:	0800e10f 	.word	0x0800e10f
 8000e30:	0800e124 	.word	0x0800e124
 8000e34:	0800e138 	.word	0x0800e138
 8000e38:	0800e0c3 	.word	0x0800e0c3
 8000e3c:	0800e0bd 	.word	0x0800e0bd
 8000e40:	0800e147 	.word	0x0800e147

08000e44 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
    struct tm timeinfo = {0};

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e48:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000e4a:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000e4e:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e52:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e54:	9301      	str	r3, [sp, #4]
    struct tm timeinfo = {0};
 8000e56:	2400      	movs	r4, #0
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000e5c:	3901      	subs	r1, #1

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000e5e:	a801      	add	r0, sp, #4
    struct tm timeinfo = {0};
 8000e60:	e9cd 4407 	strd	r4, r4, [sp, #28]
    timeinfo.tm_mday = day;         // Day of the month
 8000e64:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e68:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000e6a:	f009 fae9 	bl	800a440 <mktime>

    return epoch;
}
 8000e6e:	b00a      	add	sp, #40	@ 0x28
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e7c:	ed2d 8b02 	vpush	{d8}
 8000e80:	b0a3      	sub	sp, #140	@ 0x8c
    int field = 0;
    uint8_t str_cpy[128];
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e82:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8000e84:	4604      	mov	r4, r0
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e86:	a802      	add	r0, sp, #8
 8000e88:	f00a f842 	bl	800af10 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e8c:	2600      	movs	r6, #0

    printf("\n");
 8000e8e:	200a      	movs	r0, #10
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e90:	f88d 6087 	strb.w	r6, [sp, #135]	@ 0x87
    printf("\n");
 8000e94:	f008 ffdc 	bl	8009e50 <putchar>
    printf((char *)rmc_sentence);
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f008 ffc7 	bl	8009e2c <iprintf>
    printf("\n");
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f008 ffd6 	bl	8009e50 <putchar>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff46 	bl	8000d38 <validateChecksum>
 8000eac:	b1a0      	cbz	r0, 8000ed8 <parse_rmc+0x60>
 8000eae:	ad02      	add	r5, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000eb0:	4637      	mov	r7, r6
    while (*ptr) {
 8000eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000eb6:	b9a3      	cbnz	r3, 8000ee2 <parse_rmc+0x6a>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000eb8:	4c77      	ldr	r4, [pc, #476]	@ (8001098 <parse_rmc+0x220>)
 8000eba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <parse_rmc+0x60>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	69a0      	ldr	r0, [r4, #24]
 8000ed0:	f7ff ffb8 	bl	8000e44 <convertToEpoch>
 8000ed4:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000ed8:	b023      	add	sp, #140	@ 0x8c
 8000eda:	ecbd 8b02 	vpop	{d8}
 8000ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000ee2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ee4:	d001      	beq.n	8000eea <parse_rmc+0x72>
 8000ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ee8:	d1e3      	bne.n	8000eb2 <parse_rmc+0x3a>
            switch (field) {
 8000eea:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 8000eec:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d81d      	bhi.n	8000f30 <parse_rmc+0xb8>
 8000ef4:	e8df f003 	tbb	[pc, r3]
 8000ef8:	5d271f05 	.word	0x5d271f05
 8000efc:	a79d9862 	.word	0xa79d9862
 8000f00:	b1          	.byte	0xb1
 8000f01:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000f02:	7820      	ldrb	r0, [r4, #0]
 8000f04:	7863      	ldrb	r3, [r4, #1]
 8000f06:	4a64      	ldr	r2, [pc, #400]	@ (8001098 <parse_rmc+0x220>)
 8000f08:	210a      	movs	r1, #10
 8000f0a:	3830      	subs	r0, #48	@ 0x30
 8000f0c:	3b30      	subs	r3, #48	@ 0x30
 8000f0e:	fb01 3300 	mla	r3, r1, r0, r3
 8000f12:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000f14:	78a0      	ldrb	r0, [r4, #2]
 8000f16:	78e3      	ldrb	r3, [r4, #3]
 8000f18:	3830      	subs	r0, #48	@ 0x30
 8000f1a:	3b30      	subs	r3, #48	@ 0x30
 8000f1c:	fb01 3300 	mla	r3, r1, r0, r3
 8000f20:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000f22:	7920      	ldrb	r0, [r4, #4]
 8000f24:	7963      	ldrb	r3, [r4, #5]
 8000f26:	3830      	subs	r0, #48	@ 0x30
 8000f28:	3b30      	subs	r3, #48	@ 0x30
 8000f2a:	fb01 3300 	mla	r3, r1, r0, r3
 8000f2e:	6093      	str	r3, [r2, #8]
            field++;
 8000f30:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 8000f32:	462c      	mov	r4, r5
        ptr++;
 8000f34:	e7bd      	b.n	8000eb2 <parse_rmc+0x3a>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000f36:	7823      	ldrb	r3, [r4, #0]
 8000f38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000f3c:	4253      	negs	r3, r2
 8000f3e:	4153      	adcs	r3, r2
 8000f40:	4a55      	ldr	r2, [pc, #340]	@ (8001098 <parse_rmc+0x220>)
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000f44:	e7f4      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000f46:	4620      	mov	r0, r4
 8000f48:	f007 f8e4 	bl	8008114 <atof>
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <parse_rmc+0x224>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	ec51 0b10 	vmov	r0, r1, d0
 8000f54:	f7ff fc8a 	bl	800086c <__aeabi_ddiv>
 8000f58:	4680      	mov	r8, r0
 8000f5a:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000f5c:	ec49 8b10 	vmov	d0, r8, r9
 8000f60:	f00c ffe2 	bl	800df28 <floor>
 8000f64:	ec51 0b10 	vmov	r0, r1, d0
 8000f68:	f7ff fe06 	bl	8000b78 <__aeabi_d2iz>
 8000f6c:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000f70:	f7ff fae8 	bl	8000544 <__aeabi_i2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4640      	mov	r0, r8
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	f7ff f994 	bl	80002a8 <__aeabi_dsub>
 8000f80:	f7ff fe42 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000f84:	f7ff faf0 	bl	8000568 <__aeabi_f2d>
 8000f88:	a341      	add	r3, pc, #260	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc6d 	bl	800086c <__aeabi_ddiv>
 8000f92:	f7ff fe39 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000f96:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000f9a:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000f9e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f7ff fadf 	bl	8000568 <__aeabi_f2d>
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <parse_rmc+0x220>)
 8000fac:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000fb0:	e7be      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.NS = rmc_sentence[0];
 8000fb2:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <parse_rmc+0x220>)
 8000fb4:	7822      	ldrb	r2, [r4, #0]
 8000fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000fba:	e7b9      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f007 f8a9 	bl	8008114 <atof>
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <parse_rmc+0x224>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	ec51 0b10 	vmov	r0, r1, d0
 8000fca:	f7ff fc4f 	bl	800086c <__aeabi_ddiv>
 8000fce:	4680      	mov	r8, r0
 8000fd0:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000fd2:	ec49 8b10 	vmov	d0, r8, r9
 8000fd6:	f00c ffa7 	bl	800df28 <floor>
 8000fda:	ec51 0b10 	vmov	r0, r1, d0
 8000fde:	f7ff fdcb 	bl	8000b78 <__aeabi_d2iz>
 8000fe2:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000fe6:	f7ff faad 	bl	8000544 <__aeabi_i2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4640      	mov	r0, r8
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	f7ff f959 	bl	80002a8 <__aeabi_dsub>
 8000ff6:	f7ff fe07 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8000ffa:	f7ff fab5 	bl	8000568 <__aeabi_f2d>
 8000ffe:	a324      	add	r3, pc, #144	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc32 	bl	800086c <__aeabi_ddiv>
 8001008:	f7ff fdfe 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 800100c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8001010:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8001014:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff faa4 	bl	8000568 <__aeabi_f2d>
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <parse_rmc+0x220>)
 8001022:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8001026:	e783      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.EW = rmc_sentence[0];
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <parse_rmc+0x220>)
 800102a:	7822      	ldrb	r2, [r4, #0]
 800102c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8001030:	e77e      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.speed = atof((char *)rmc_sentence);
 8001032:	4620      	mov	r0, r4
 8001034:	f007 f86e 	bl	8008114 <atof>
 8001038:	ec51 0b10 	vmov	r0, r1, d0
 800103c:	f7ff fde4 	bl	8000c08 <__aeabi_d2f>
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <parse_rmc+0x220>)
 8001042:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8001044:	e774      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.course = atof((char *)rmc_sentence);
 8001046:	4620      	mov	r0, r4
 8001048:	f007 f864 	bl	8008114 <atof>
 800104c:	ec51 0b10 	vmov	r0, r1, d0
 8001050:	f7ff fdda 	bl	8000c08 <__aeabi_d2f>
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <parse_rmc+0x220>)
 8001056:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8001058:	e76a      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 800105a:	7820      	ldrb	r0, [r4, #0]
 800105c:	7863      	ldrb	r3, [r4, #1]
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <parse_rmc+0x220>)
 8001060:	210a      	movs	r1, #10
 8001062:	3830      	subs	r0, #48	@ 0x30
 8001064:	3b30      	subs	r3, #48	@ 0x30
 8001066:	fb01 3300 	mla	r3, r1, r0, r3
 800106a:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 800106c:	78a0      	ldrb	r0, [r4, #2]
 800106e:	78e3      	ldrb	r3, [r4, #3]
 8001070:	3830      	subs	r0, #48	@ 0x30
 8001072:	3b30      	subs	r3, #48	@ 0x30
 8001074:	fb01 3300 	mla	r3, r1, r0, r3
 8001078:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 800107a:	7920      	ldrb	r0, [r4, #4]
 800107c:	7963      	ldrb	r3, [r4, #5]
 800107e:	3830      	subs	r0, #48	@ 0x30
 8001080:	3b30      	subs	r3, #48	@ 0x30
 8001082:	fb01 3300 	mla	r3, r1, r0, r3
 8001086:	6193      	str	r3, [r2, #24]
                    break;
 8001088:	e752      	b.n	8000f30 <parse_rmc+0xb8>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	33333333 	.word	0x33333333
 8001094:	3fe33333 	.word	0x3fe33333
 8001098:	200003c8 	.word	0x200003c8
 800109c:	40590000 	.word	0x40590000

080010a0 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a0:	4601      	mov	r1, r0
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHIdHandle, rmcData, 0, 1000);
 80010a2:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <sendRMCDataToFlash+0x24>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a4:	b508      	push	{r3, lr}
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHIdHandle, rmcData, 0, 1000);
 80010a6:	6800      	ldr	r0, [r0, #0]
 80010a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ac:	2200      	movs	r2, #0
 80010ae:	f005 f8db 	bl	8006268 <osMessageQueuePut>
	if (status != osOK) {
 80010b2:	4601      	mov	r1, r0
 80010b4:	b120      	cbz	r0, 80010c0 <sendRMCDataToFlash+0x20>
	   printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <sendRMCDataToFlash+0x28>)
	}
	else{
		printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);

	}
}
 80010b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 80010bc:	f008 beb6 	b.w	8009e2c <iprintf>
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <sendRMCDataToFlash+0x2c>)
 80010c2:	e7f9      	b.n	80010b8 <sendRMCDataToFlash+0x18>
 80010c4:	20002b08 	.word	0x20002b08
 80010c8:	0800e156 	.word	0x0800e156
 80010cc:	0800e1a7 	.word	0x0800e1a7

080010d0 <handleIncomingChar>:

int handleIncomingChar(char c) {
 80010d0:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010d2:	4c12      	ldr	r4, [pc, #72]	@ (800111c <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 80010d4:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010d6:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 80010d8:	d112      	bne.n	8001100 <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010da:	4d11      	ldr	r5, [pc, #68]	@ (8001120 <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 80010dc:	4911      	ldr	r1, [pc, #68]	@ (8001124 <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010de:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 80010e0:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010e2:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 80010e4:	f009 f8c2 	bl	800a26c <strstr>
 80010e8:	b138      	cbz	r0, 80010fa <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <handleIncomingChar+0x58>)
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	4629      	mov	r1, r5
 80010f0:	f009 f893 	bl	800a21a <strncpy>
            tempIndex = 0;
 80010f4:	8026      	strh	r6, [r4, #0]
 80010f6:	2001      	movs	r0, #1
    } else {
        printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 80010fa:	8020      	strh	r0, [r4, #0]
    return 0;
 80010fc:	2000      	movs	r0, #0
 80010fe:	e7fb      	b.n	80010f8 <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 8001100:	2bfe      	cmp	r3, #254	@ 0xfe
 8001102:	d804      	bhi.n	800110e <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	8022      	strh	r2, [r4, #0]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <handleIncomingChar+0x50>)
 800110a:	54d0      	strb	r0, [r2, r3]
 800110c:	e7f6      	b.n	80010fc <handleIncomingChar+0x2c>
        printf("Warning: Sentence too long, discarding\n");
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <handleIncomingChar+0x5c>)
 8001110:	f008 fefc 	bl	8009f0c <puts>
        tempIndex = 0; // Reset if line too long
 8001114:	2300      	movs	r3, #0
 8001116:	8023      	strh	r3, [r4, #0]
 8001118:	e7f0      	b.n	80010fc <handleIncomingChar+0x2c>
 800111a:	bf00      	nop
 800111c:	20000366 	.word	0x20000366
 8001120:	20000266 	.word	0x20000266
 8001124:	0800e203 	.word	0x0800e203
 8001128:	20001ab0 	.word	0x20001ab0
 800112c:	0800e20a 	.word	0x0800e20a

08001130 <getRMC>:

void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001130:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <getRMC+0xf4>)
 8001132:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 8001134:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001136:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 8001138:	4d3b      	ldr	r5, [pc, #236]	@ (8001228 <getRMC+0xf8>)
        char c = gpsSentence[lastReadIndex];
 800113a:	4e3c      	ldr	r6, [pc, #240]	@ (800122c <getRMC+0xfc>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800113c:	f5c4 54b4 	rsb	r4, r4, #5760	@ 0x1680
 8001140:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 8001142:	882b      	ldrh	r3, [r5, #0]
 8001144:	42a3      	cmp	r3, r4
 8001146:	d14b      	bne.n	80011e0 <getRMC+0xb0>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist){
 8001148:	4e39      	ldr	r6, [pc, #228]	@ (8001230 <getRMC+0x100>)
 800114a:	4c3a      	ldr	r4, [pc, #232]	@ (8001234 <getRMC+0x104>)
 800114c:	6833      	ldr	r3, [r6, #0]
 800114e:	b1fb      	cbz	r3, 8001190 <getRMC+0x60>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
		display_rmc_data();
		get_RTC_time_date(&rmc);
 8001150:	4d39      	ldr	r5, [pc, #228]	@ (8001238 <getRMC+0x108>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 8001152:	483a      	ldr	r0, [pc, #232]	@ (800123c <getRMC+0x10c>)
 8001154:	f7ff fe90 	bl	8000e78 <parse_rmc>
		display_rmc_data();
 8001158:	f7ff fe24 	bl	8000da4 <display_rmc_data>
		get_RTC_time_date(&rmc);
 800115c:	4628      	mov	r0, r5
 800115e:	f000 f97f 	bl	8001460 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 8001162:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001164:	2b00      	cmp	r3, #0
 8001166:	d04c      	beq.n	8001202 <getRMC+0xd2>
			printf("\n\n------------ Sending RMC ------------\n\n");
 8001168:	4835      	ldr	r0, [pc, #212]	@ (8001240 <getRMC+0x110>)
 800116a:	f008 fecf 	bl	8009f0c <puts>
			sendRMCDataToFlash(&rmc);
 800116e:	4628      	mov	r0, r5
 8001170:	f7ff ff96 	bl	80010a0 <sendRMCDataToFlash>
			getRMC_time = 0;
 8001174:	2300      	movs	r3, #0
			rmc_saved = rmc;
 8001176:	4833      	ldr	r0, [pc, #204]	@ (8001244 <getRMC+0x114>)
			getRMC_time = 0;
 8001178:	6023      	str	r3, [r4, #0]
			rmc_saved = rmc;
 800117a:	2258      	movs	r2, #88	@ 0x58
 800117c:	4629      	mov	r1, r5
 800117e:	f009 fecf 	bl	800af20 <memcpy>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
		}


        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 8001182:	482e      	ldr	r0, [pc, #184]	@ (800123c <getRMC+0x10c>)
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	2100      	movs	r1, #0
 8001188:	f009 f820 	bl	800a1cc <memset>
        isRMCExist = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	6033      	str	r3, [r6, #0]
    }

    // GPS timeout logic
    if (getRMC_time >= 150 && getRMC_time % 150 == 0) {
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	2b95      	cmp	r3, #149	@ 0x95
 8001194:	dd0a      	ble.n	80011ac <getRMC+0x7c>
 8001196:	2296      	movs	r2, #150	@ 0x96
 8001198:	fb93 f1f2 	sdiv	r1, r3, r2
 800119c:	fb02 3311 	mls	r3, r2, r1, r3
 80011a0:	b923      	cbnz	r3, 80011ac <getRMC+0x7c>
        printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 80011a2:	4829      	ldr	r0, [pc, #164]	@ (8001248 <getRMC+0x118>)
 80011a4:	f008 feb2 	bl	8009f0c <puts>
        coldStart();
 80011a8:	f7ff fdb4 	bl	8000d14 <coldStart>
    }

    if (getRMC_time >= 500) {
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011b2:	db0f      	blt.n	80011d4 <getRMC+0xa4>
        GPS_DISABLE();
 80011b4:	2201      	movs	r2, #1
 80011b6:	2104      	movs	r1, #4
 80011b8:	4824      	ldr	r0, [pc, #144]	@ (800124c <getRMC+0x11c>)
 80011ba:	f002 fea1 	bl	8003f00 <HAL_GPIO_WritePin>
        osDelay(500);
 80011be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c2:	f004 ff4b 	bl	800605c <osDelay>
        GPS_ENABLE();
 80011c6:	4821      	ldr	r0, [pc, #132]	@ (800124c <getRMC+0x11c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	2104      	movs	r1, #4
 80011cc:	f002 fe98 	bl	8003f00 <HAL_GPIO_WritePin>
        getRMC_time = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	6023      	str	r3, [r4, #0]
    }

    printf("Elapsed Time: %d\n", getRMC_time);
 80011d4:	6821      	ldr	r1, [r4, #0]
 80011d6:	481e      	ldr	r0, [pc, #120]	@ (8001250 <getRMC+0x120>)
}
 80011d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("Elapsed Time: %d\n", getRMC_time);
 80011dc:	f008 be26 	b.w	8009e2c <iprintf>
        if (handleIncomingChar(c)){
 80011e0:	5cf0      	ldrb	r0, [r6, r3]
 80011e2:	f7ff ff75 	bl	80010d0 <handleIncomingChar>
 80011e6:	b110      	cbz	r0, 80011ee <getRMC+0xbe>
            isRMCExist = 1; // `$GNRMC` sentence is ready
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <getRMC+0x100>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 80011ee:	882b      	ldrh	r3, [r5, #0]
 80011f0:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 80011f4:	3301      	adds	r3, #1
 80011f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011fa:	fb02 3311 	mls	r3, r2, r1, r3
 80011fe:	802b      	strh	r3, [r5, #0]
 8001200:	e79f      	b.n	8001142 <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 8001202:	4d10      	ldr	r5, [pc, #64]	@ (8001244 <getRMC+0x114>)
 8001204:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001206:	b14b      	cbz	r3, 800121c <getRMC+0xec>
			printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 8001208:	4812      	ldr	r0, [pc, #72]	@ (8001254 <getRMC+0x124>)
 800120a:	f008 fe7f 	bl	8009f0c <puts>
			get_RTC_time_date(&rmc_saved);
 800120e:	4628      	mov	r0, r5
 8001210:	f000 f926 	bl	8001460 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff ff43 	bl	80010a0 <sendRMCDataToFlash>
 800121a:	e7b2      	b.n	8001182 <getRMC+0x52>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 800121c:	480e      	ldr	r0, [pc, #56]	@ (8001258 <getRMC+0x128>)
 800121e:	f008 fe75 	bl	8009f0c <puts>
 8001222:	e7ae      	b.n	8001182 <getRMC+0x52>
 8001224:	20002b58 	.word	0x20002b58
 8001228:	20000264 	.word	0x20000264
 800122c:	20000420 	.word	0x20000420
 8001230:	2000036c 	.word	0x2000036c
 8001234:	20000368 	.word	0x20000368
 8001238:	200003c8 	.word	0x200003c8
 800123c:	20001ab0 	.word	0x20001ab0
 8001240:	0800e231 	.word	0x0800e231
 8001244:	20000370 	.word	0x20000370
 8001248:	0800e2d6 	.word	0x0800e2d6
 800124c:	48000800 	.word	0x48000800
 8001250:	0800e31c 	.word	0x0800e31c
 8001254:	0800e25a 	.word	0x0800e25a
 8001258:	0800e293 	.word	0x0800e293

0800125c <StartGPS>:

void StartGPS(void const * argument)
{
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 800125e:	481f      	ldr	r0, [pc, #124]	@ (80012dc <StartGPS+0x80>)

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001260:	4f1f      	ldr	r7, [pc, #124]	@ (80012e0 <StartGPS+0x84>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001262:	4d20      	ldr	r5, [pc, #128]	@ (80012e4 <StartGPS+0x88>)
		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001264:	4c20      	ldr	r4, [pc, #128]	@ (80012e8 <StartGPS+0x8c>)
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8001266:	f008 fe51 	bl	8009f0c <puts>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 800126a:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <StartGPS+0x90>)
 800126c:	4920      	ldr	r1, [pc, #128]	@ (80012f0 <StartGPS+0x94>)
 800126e:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <StartGPS+0x98>)
 8001270:	f44f 53b4 	mov.w	r3, #5760	@ 0x1680
 8001274:	f000 f8e6 	bl	8001444 <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001278:	481c      	ldr	r0, [pc, #112]	@ (80012ec <StartGPS+0x90>)
 800127a:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 800127e:	2100      	movs	r1, #0
 8001280:	f008 ffa4 	bl	800a1cc <memset>
		printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001284:	4638      	mov	r0, r7
 8001286:	f008 fe41 	bl	8009f0c <puts>
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 800128a:	6828      	ldr	r0, [r5, #0]
		osDelay(500);
		if(osMutexAcquire(myMutexHandle, osWaitForever) == osOK){
 800128c:	4e1a      	ldr	r6, [pc, #104]	@ (80012f8 <StartGPS+0x9c>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 800128e:	f004 fed1 	bl	8006034 <osThreadGetStackSpace>
		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
 8001292:	6829      	ldr	r1, [r5, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001294:	4602      	mov	r2, r0
		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
 8001296:	4819      	ldr	r0, [pc, #100]	@ (80012fc <StartGPS+0xa0>)
 8001298:	f008 fdc8 	bl	8009e2c <iprintf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800129c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a0:	2201      	movs	r2, #1
 80012a2:	4620      	mov	r0, r4
 80012a4:	f002 fe2c 	bl	8003f00 <HAL_GPIO_WritePin>
		osDelay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ac:	f004 fed6 	bl	800605c <osDelay>
		if(osMutexAcquire(myMutexHandle, osWaitForever) == osOK){
 80012b0:	6830      	ldr	r0, [r6, #0]
 80012b2:	f04f 31ff 	mov.w	r1, #4294967295
 80012b6:	f004 ff2f 	bl	8006118 <osMutexAcquire>
 80012ba:	b920      	cbnz	r0, 80012c6 <StartGPS+0x6a>
//			printf("Hello World!!!!\n");
			getRMC();
 80012bc:	f7ff ff38 	bl	8001130 <getRMC>
			osMutexRelease(myMutexHandle);
 80012c0:	6830      	ldr	r0, [r6, #0]
 80012c2:	f004 ff5b 	bl	800617c <osMutexRelease>
		}
//		printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
//		printf((char*) gpsSentence);

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012c6:	4620      	mov	r0, r4
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ce:	f002 fe17 	bl	8003f00 <HAL_GPIO_WritePin>

		osDelay(500);
 80012d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012d6:	f004 fec1 	bl	800605c <osDelay>
	{
 80012da:	e7d3      	b.n	8001284 <StartGPS+0x28>
 80012dc:	0800e32e 	.word	0x0800e32e
 80012e0:	0800e368 	.word	0x0800e368
 80012e4:	20002b0c 	.word	0x20002b0c
 80012e8:	48000800 	.word	0x48000800
 80012ec:	20000420 	.word	0x20000420
 80012f0:	20002cac 	.word	0x20002cac
 80012f4:	20001aa0 	.word	0x20001aa0
 80012f8:	20001d54 	.word	0x20001d54
 80012fc:	0800e3a7 	.word	0x0800e3a7

08001300 <printQueue_GSM>:
    q->rear = -1;
    q->size = 0;
}

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8001300:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8001302:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8001306:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8001308:	b925      	cbnz	r5, 8001314 <printQueue_GSM+0x14>
        printf("Queue_GSM is empty\n");
 800130a:	4813      	ldr	r0, [pc, #76]	@ (8001358 <printQueue_GSM+0x58>)
 800130c:	f008 fdfe 	bl	8009f0c <puts>
        int idx = (q->front + i) % MAX_SIZE;
        printf("Index %d: %08lx\n", i, q->data[idx]);
    }
    printf("\n");
    return q->size;
}
 8001310:	4628      	mov	r0, r5
 8001312:	bd70      	pop	{r4, r5, r6, pc}
    printf("Queue_GSM contents: \n");
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <printQueue_GSM+0x5c>)
        printf("Index %d: %08lx\n", i, q->data[idx]);
 8001316:	4e12      	ldr	r6, [pc, #72]	@ (8001360 <printQueue_GSM+0x60>)
    printf("Queue_GSM contents: \n");
 8001318:	f008 fdf8 	bl	8009f0c <puts>
    for (int i = 0; i < q->size; i++) {
 800131c:	2500      	movs	r5, #0
 800131e:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8001322:	42ab      	cmp	r3, r5
 8001324:	dc05      	bgt.n	8001332 <printQueue_GSM+0x32>
    printf("\n");
 8001326:	200a      	movs	r0, #10
 8001328:	f008 fd92 	bl	8009e50 <putchar>
    return q->size;
 800132c:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8001330:	e7ee      	b.n	8001310 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8001332:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8001336:	442b      	add	r3, r5
 8001338:	425a      	negs	r2, r3
 800133a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800133e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001342:	bf58      	it	pl
 8001344:	4253      	negpl	r3, r2
        printf("Index %d: %08lx\n", i, q->data[idx]);
 8001346:	4629      	mov	r1, r5
 8001348:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800134c:	4630      	mov	r0, r6
 800134e:	f008 fd6d 	bl	8009e2c <iprintf>
    for (int i = 0; i < q->size; i++) {
 8001352:	3501      	adds	r5, #1
 8001354:	e7e3      	b.n	800131e <printQueue_GSM+0x1e>
 8001356:	bf00      	nop
 8001358:	0800e3e5 	.word	0x0800e3e5
 800135c:	0800e3f8 	.word	0x0800e3f8
 8001360:	0800e40d 	.word	0x0800e40d

08001364 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 8001364:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 8001366:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 800136a:	2200      	movs	r2, #0
 800136c:	4295      	cmp	r5, r2
 800136e:	dc05      	bgt.n	800137c <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8001370:	4601      	mov	r1, r0
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <checkAddrExistInQueue+0x44>)
 8001374:	f008 fd5a 	bl	8009e2c <iprintf>
    return 0;
 8001378:	2000      	movs	r0, #0
 800137a:	e012      	b.n	80013a2 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 800137c:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8001380:	4413      	add	r3, r2
 8001382:	425c      	negs	r4, r3
 8001384:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8001388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800138c:	bf58      	it	pl
 800138e:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8001390:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001394:	4283      	cmp	r3, r0
 8001396:	d105      	bne.n	80013a4 <checkAddrExistInQueue+0x40>
            printf("FOUND ADDRESS: %08lx\n", addr);
 8001398:	4601      	mov	r1, r0
 800139a:	4804      	ldr	r0, [pc, #16]	@ (80013ac <checkAddrExistInQueue+0x48>)
 800139c:	f008 fd46 	bl	8009e2c <iprintf>
            return 1;
 80013a0:	2001      	movs	r0, #1
}
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 80013a4:	3201      	adds	r2, #1
 80013a6:	e7e1      	b.n	800136c <checkAddrExistInQueue+0x8>
 80013a8:	0800e41e 	.word	0x0800e41e
 80013ac:	0800e422 	.word	0x0800e422

080013b0 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 80013b0:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 80013b2:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 80013b6:	b91d      	cbnz	r5, 80013c0 <deleteMiddle_GSM+0x10>
        printf("Queue_GSM is empty. Nothing to delete.\n");
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 80013ba:	bcf0      	pop	{r4, r5, r6, r7}
        printf("Invalid index. Cannot delete.\n");
 80013bc:	f008 bda6 	b.w	8009f0c <puts>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 80013c0:	2900      	cmp	r1, #0
 80013c2:	db01      	blt.n	80013c8 <deleteMiddle_GSM+0x18>
 80013c4:	428d      	cmp	r5, r1
 80013c6:	dc01      	bgt.n	80013cc <deleteMiddle_GSM+0x1c>
        printf("Invalid index. Cannot delete.\n");
 80013c8:	481c      	ldr	r0, [pc, #112]	@ (800143c <deleteMiddle_GSM+0x8c>)
 80013ca:	e7f6      	b.n	80013ba <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 80013cc:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 80013d0:	440b      	add	r3, r1
 80013d2:	425a      	negs	r2, r3
 80013d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 80013dc:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 80013e0:	bf58      	it	pl
 80013e2:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 80013e4:	3d01      	subs	r5, #1
 80013e6:	42b5      	cmp	r5, r6
 80013e8:	dc0f      	bgt.n	800140a <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 80013ea:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80013ee:	337f      	adds	r3, #127	@ 0x7f
 80013f0:	425a      	negs	r2, r3
 80013f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013fa:	bf58      	it	pl
 80013fc:	4253      	negpl	r3, r2
    q->size--;
 80013fe:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8001402:	bcf0      	pop	{r4, r5, r6, r7}
    printf("Element at index %d deleted successfully.\n", indexToDelete);
 8001404:	480e      	ldr	r0, [pc, #56]	@ (8001440 <deleteMiddle_GSM+0x90>)
 8001406:	f008 bd11 	b.w	8009e2c <iprintf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 800140a:	199a      	adds	r2, r3, r6
 800140c:	4254      	negs	r4, r2
 800140e:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8001412:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001416:	bf58      	it	pl
 8001418:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 800141a:	1c54      	adds	r4, r2, #1
 800141c:	4267      	negs	r7, r4
 800141e:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8001422:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8001426:	bf58      	it	pl
 8001428:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 800142a:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 800142c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8001430:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8001434:	e7d7      	b.n	80013e6 <deleteMiddle_GSM+0x36>
 8001436:	bf00      	nop
 8001438:	0800e438 	.word	0x0800e438
 800143c:	0800e45f 	.word	0x0800e45f
 8001440:	0800e47d 	.word	0x0800e47d

08001444 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8001444:	b410      	push	{r4}
 8001446:	4604      	mov	r4, r0
 8001448:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 800144a:	80a3      	strh	r3, [r4, #4]
{
 800144c:	4611      	mov	r1, r2
 800144e:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8001450:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8001452:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8001454:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8001456:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8001458:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 800145c:	f004 bd34 	b.w	8005ec8 <HAL_UART_Receive_DMA>

08001460 <get_RTC_time_date>:
		Error_Handler();
	}
}

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8001460:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001462:	4d19      	ldr	r5, [pc, #100]	@ (80014c8 <get_RTC_time_date+0x68>)
{
 8001464:	b087      	sub	sp, #28
 8001466:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001468:	a901      	add	r1, sp, #4
 800146a:	2200      	movs	r2, #0
 800146c:	4628      	mov	r0, r5
 800146e:	f003 fb13 	bl	8004a98 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001472:	4669      	mov	r1, sp
 8001474:	2200      	movs	r2, #0
 8001476:	4628      	mov	r0, r5
 8001478:	f003 fb31 	bl	8004ade <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	printf("%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800147c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001480:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001484:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001488:	4810      	ldr	r0, [pc, #64]	@ (80014cc <get_RTC_time_date+0x6c>)
 800148a:	f008 fccf 	bl	8009e2c <iprintf>

	/* Format date as "YYYY-MM-DD" */
	printf("20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 800148e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001492:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001496:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <get_RTC_time_date+0x70>)
 800149c:	f008 fcc6 	bl	8009e2c <iprintf>

	rmc->date.Yr = gDate.Year;
 80014a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80014a4:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 80014a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80014aa:	6163      	str	r3, [r4, #20]
	rmc->date.Day = gDate.Date;
 80014ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80014b0:	6123      	str	r3, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 80014b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014b6:	6023      	str	r3, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 80014b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80014bc:	6063      	str	r3, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 80014be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80014c2:	60a3      	str	r3, [r4, #8]

	//save_rmc_to_location_info(location_info);
//	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
//	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
}
 80014c4:	b007      	add	sp, #28
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	20002ed0 	.word	0x20002ed0
 80014cc:	0800eadc 	.word	0x0800eadc
 80014d0:	0800e4a8 	.word	0x0800e4a8

080014d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80014d4:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80014da:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80014dc:	2201      	movs	r2, #1
 80014de:	a901      	add	r1, sp, #4
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <__io_putchar+0x1c>)
 80014e2:	f004 fbcb 	bl	8005c7c <HAL_UART_Transmit>
  return ch;
}
 80014e6:	9801      	ldr	r0, [sp, #4]
 80014e8:	b003      	add	sp, #12
 80014ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ee:	bf00      	nop
 80014f0:	20002d34 	.word	0x20002d34

080014f4 <Initialize_RTC>:


void Initialize_RTC(void) {
    // Enable Power Clock
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b30      	ldr	r3, [pc, #192]	@ (80015b8 <Initialize_RTC+0xc4>)
void Initialize_RTC(void) {
 80014f6:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	69da      	ldr	r2, [r3, #28]

    // Allow access to the backup domain
    hrtc.Instance = RTC;
 80014fa:	4c30      	ldr	r4, [pc, #192]	@ (80015bc <Initialize_RTC+0xc8>)
 80014fc:	4e30      	ldr	r6, [pc, #192]	@ (80015c0 <Initialize_RTC+0xcc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001502:	61da      	str	r2, [r3, #28]
 8001504:	69db      	ldr	r3, [r3, #28]
    hrtc.Instance = RTC;
 8001506:	6026      	str	r6, [r4, #0]
void Initialize_RTC(void) {
 8001508:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 8001512:	f002 fcfb 	bl	8003f0c <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 8001516:	2101      	movs	r1, #1
 8001518:	4620      	mov	r0, r4
 800151a:	f003 fb02 	bl	8004b22 <HAL_RTCEx_BKUPRead>
 800151e:	f243 25f2 	movw	r5, #13042	@ 0x32f2
 8001522:	42a8      	cmp	r0, r5
 8001524:	d038      	beq.n	8001598 <Initialize_RTC+0xa4>
    	printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 8001526:	4827      	ldr	r0, [pc, #156]	@ (80015c4 <Initialize_RTC+0xd0>)
 8001528:	f008 fcf0 	bl	8009f0c <puts>

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800152c:	2214      	movs	r2, #20
 800152e:	2100      	movs	r1, #0
 8001530:	a803      	add	r0, sp, #12
 8001532:	f008 fe4b 	bl	800a1cc <memset>
  RTC_DateTypeDef sDate = {0};
 8001536:	2300      	movs	r3, #0
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8001538:	22ff      	movs	r2, #255	@ 0xff
 800153a:	217f      	movs	r1, #127	@ 0x7f
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800153c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800153e:	e9c4 1202 	strd	r1, r2, [r4, #8]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001542:	e9c4 6300 	strd	r6, r3, [r4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001546:	e9c4 3304 	strd	r3, r3, [r4, #16]
  RTC_DateTypeDef sDate = {0};
 800154a:	9302      	str	r3, [sp, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800154c:	61a3      	str	r3, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800154e:	f003 f9a6 	bl	800489e <HAL_RTC_Init>
 8001552:	4602      	mov	r2, r0
 8001554:	b108      	cbz	r0, 800155a <Initialize_RTC+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001556:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Initialize_RTC+0x64>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800155a:	e9cd 0006 	strd	r0, r0, [sp, #24]
  sTime.Hours = 0;
 800155e:	f8ad 000c 	strh.w	r0, [sp, #12]
  sTime.Seconds = 0;
 8001562:	f88d 000e 	strb.w	r0, [sp, #14]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001566:	a903      	add	r1, sp, #12
 8001568:	4620      	mov	r0, r4
 800156a:	f003 f9eb 	bl	8004944 <HAL_RTC_SetTime>
 800156e:	4602      	mov	r2, r0
 8001570:	b108      	cbz	r0, 8001576 <Initialize_RTC+0x82>
 8001572:	b672      	cpsid	i
  while (1)
 8001574:	e7fe      	b.n	8001574 <Initialize_RTC+0x80>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <Initialize_RTC+0xd4>)
 8001578:	9302      	str	r3, [sp, #8]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800157a:	a902      	add	r1, sp, #8
 800157c:	4620      	mov	r0, r4
 800157e:	f003 fa3b 	bl	80049f8 <HAL_RTC_SetDate>
 8001582:	b108      	cbz	r0, 8001588 <Initialize_RTC+0x94>
 8001584:	b672      	cpsid	i
  while (1)
 8001586:	e7fe      	b.n	8001586 <Initialize_RTC+0x92>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8001588:	462a      	mov	r2, r5
 800158a:	2101      	movs	r1, #1
 800158c:	4620      	mov	r0, r4
}
 800158e:	b008      	add	sp, #32
 8001590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8001594:	f003 bac0 	b.w	8004b18 <HAL_RTCEx_BKUPWrite>
    	printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <Initialize_RTC+0xd8>)
 800159a:	f008 fcb7 	bl	8009f0c <puts>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800159e:	a903      	add	r1, sp, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	4620      	mov	r0, r4
 80015a4:	f003 fa78 	bl	8004a98 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80015a8:	2200      	movs	r2, #0
 80015aa:	a902      	add	r1, sp, #8
 80015ac:	4620      	mov	r0, r4
 80015ae:	f003 fa96 	bl	8004ade <HAL_RTC_GetDate>
}
 80015b2:	b008      	add	sp, #32
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	20002ed0 	.word	0x20002ed0
 80015c0:	40002800 	.word	0x40002800
 80015c4:	0800e4ba 	.word	0x0800e4ba
 80015c8:	00010101 	.word	0x00010101
 80015cc:	0800e536 	.word	0x0800e536

080015d0 <SystemClock_Config>:
{
 80015d0:	b500      	push	{lr}
 80015d2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d4:	2228      	movs	r2, #40	@ 0x28
 80015d6:	2100      	movs	r1, #0
 80015d8:	a805      	add	r0, sp, #20
 80015da:	f008 fdf7 	bl	800a1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015de:	2214      	movs	r2, #20
 80015e0:	2100      	movs	r1, #0
 80015e2:	4668      	mov	r0, sp
 80015e4:	f008 fdf2 	bl	800a1cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	223c      	movs	r2, #60	@ 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	eb0d 0002 	add.w	r0, sp, r2
 80015f0:	f008 fdec 	bl	800a1cc <memset>
  HAL_PWR_EnableBkUpAccess();
 80015f4:	f002 fc8a 	bl	8003f0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <SystemClock_Config+0xa0>)
 80015fa:	6a13      	ldr	r3, [r2, #32]
 80015fc:	f023 0318 	bic.w	r3, r3, #24
 8001600:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001602:	2306      	movs	r3, #6
 8001604:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001606:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001608:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2310      	movs	r3, #16
 800160e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2002      	movs	r0, #2
 8001612:	2300      	movs	r3, #0
 8001614:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001618:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800161e:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f002 fc7c 	bl	8003f1c <HAL_RCC_OscConfig>
 8001624:	4601      	mov	r1, r0
 8001626:	b108      	cbz	r0, 800162c <SystemClock_Config+0x5c>
 8001628:	b672      	cpsid	i
  while (1)
 800162a:	e7fe      	b.n	800162a <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800162e:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001632:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001636:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001638:	4668      	mov	r0, sp
 800163a:	f002 feef 	bl	800441c <HAL_RCC_ClockConfig>
 800163e:	b108      	cbz	r0, 8001644 <SystemClock_Config+0x74>
 8001640:	b672      	cpsid	i
  while (1)
 8001642:	e7fe      	b.n	8001642 <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <SystemClock_Config+0xa4>)
 8001646:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001648:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800164c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001650:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001652:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001658:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800165c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165e:	f002 ffd3 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	b108      	cbz	r0, 8001668 <SystemClock_Config+0x98>
 8001664:	b672      	cpsid	i
  while (1)
 8001666:	e7fe      	b.n	8001666 <SystemClock_Config+0x96>
}
 8001668:	b01f      	add	sp, #124	@ 0x7c
 800166a:	f85d fb04 	ldr.w	pc, [sp], #4
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	00010187 	.word	0x00010187

08001678 <main>:
{
 8001678:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4dbc      	ldr	r5, [pc, #752]	@ (800196c <main+0x2f4>)
{
 800167c:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 800167e:	f001 fd01 	bl	8003084 <HAL_Init>
  SystemClock_Config();
 8001682:	f7ff ffa5 	bl	80015d0 <SystemClock_Config>
  	Initialize_RTC();
 8001686:	f7ff ff35 	bl	80014f4 <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	2214      	movs	r2, #20
 800168c:	2100      	movs	r1, #0
 800168e:	a808      	add	r0, sp, #32
 8001690:	f008 fd9c 	bl	800a1cc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001694:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001696:	48b6      	ldr	r0, [pc, #728]	@ (8001970 <main+0x2f8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800169c:	616b      	str	r3, [r5, #20]
 800169e:	696b      	ldr	r3, [r5, #20]
 80016a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	696b      	ldr	r3, [r5, #20]
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ae:	616b      	str	r3, [r5, #20]
 80016b0:	696b      	ldr	r3, [r5, #20]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	696b      	ldr	r3, [r5, #20]
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c0:	616b      	str	r3, [r5, #20]
 80016c2:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80016ca:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	9304      	str	r3, [sp, #16]
 80016ce:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80016d0:	f002 fc16 	bl	8003f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 80016d4:	48a6      	ldr	r0, [pc, #664]	@ (8001970 <main+0x2f8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f240 3156 	movw	r1, #854	@ 0x356
 80016dc:	f002 fc10 	bl	8003f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80016e0:	48a4      	ldr	r0, [pc, #656]	@ (8001974 <main+0x2fc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	f002 fc0b 	bl	8003f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016ea:	48a2      	ldr	r0, [pc, #648]	@ (8001974 <main+0x2fc>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f2:	f002 fc05 	bl	8003f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001702:	f002 fbfd 	bl	8003f00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2601      	movs	r6, #1
 8001708:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	4898      	ldr	r0, [pc, #608]	@ (8001970 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f002 fb2e 	bl	8003d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 800171c:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	4893      	ldr	r0, [pc, #588]	@ (8001970 <main+0x2f8>)
 8001722:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001728:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f002 fb22 	bl	8003d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	488f      	ldr	r0, [pc, #572]	@ (8001974 <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	e9cd 8408 	strd	r8, r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800173e:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f002 fb1a 	bl	8003d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	488b      	ldr	r0, [pc, #556]	@ (8001974 <main+0x2fc>)
 8001746:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	e9cd 7608 	strd	r7, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001754:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f002 fb0e 	bl	8003d78 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	4885      	ldr	r0, [pc, #532]	@ (8001974 <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	e9cd 9608 	strd	r9, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f002 fb05 	bl	8003d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800176e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	a908      	add	r1, sp, #32
 8001774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	e9cd 6a0a 	strd	r6, sl, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f002 fafa 	bl	8003d78 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001784:	696b      	ldr	r3, [r5, #20]
 8001786:	4333      	orrs	r3, r6
 8001788:	616b      	str	r3, [r5, #20]
 800178a:	696b      	ldr	r3, [r5, #20]
 800178c:	4033      	ands	r3, r6
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001792:	696b      	ldr	r3, [r5, #20]
 8001794:	ea43 0308 	orr.w	r3, r3, r8
 8001798:	616b      	str	r3, [r5, #20]
 800179a:	696b      	ldr	r3, [r5, #20]
 800179c:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80017a0:	4622      	mov	r2, r4
 80017a2:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017a4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80017a6:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80017aa:	f002 f9e1 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017ae:	200d      	movs	r0, #13
 80017b0:	f002 fa10 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80017b4:	4622      	mov	r2, r4
 80017b6:	2105      	movs	r1, #5
 80017b8:	200e      	movs	r0, #14
 80017ba:	f002 f9d9 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017be:	200e      	movs	r0, #14
 80017c0:	f002 fa08 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80017c4:	4622      	mov	r2, r4
 80017c6:	2105      	movs	r1, #5
 80017c8:	200f      	movs	r0, #15
 80017ca:	f002 f9d1 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f002 fa00 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80017d4:	4622      	mov	r2, r4
 80017d6:	2105      	movs	r1, #5
 80017d8:	2010      	movs	r0, #16
 80017da:	f002 f9c9 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017de:	2010      	movs	r0, #16
 80017e0:	f002 f9f8 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80017e4:	4622      	mov	r2, r4
 80017e6:	2105      	movs	r1, #5
 80017e8:	2038      	movs	r0, #56	@ 0x38
 80017ea:	f002 f9c1 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80017ee:	2038      	movs	r0, #56	@ 0x38
 80017f0:	f002 f9f0 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80017f4:	4622      	mov	r2, r4
 80017f6:	2105      	movs	r1, #5
 80017f8:	203c      	movs	r0, #60	@ 0x3c
 80017fa:	f002 f9b9 	bl	8003b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80017fe:	203c      	movs	r0, #60	@ 0x3c
 8001800:	f002 f9e8 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8001804:	485c      	ldr	r0, [pc, #368]	@ (8001978 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	f8df e198 	ldr.w	lr, [pc, #408]	@ 80019a0 <main+0x328>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001810:	e9c0 e300 	strd	lr, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001818:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800181c:	2510      	movs	r5, #16
 800181e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001822:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001826:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001828:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800182c:	2308      	movs	r3, #8
 800182e:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001830:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001834:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001836:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001838:	f003 fa87 	bl	8004d4a <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	b108      	cbz	r0, 8001844 <main+0x1cc>
 8001840:	b672      	cpsid	i
  while (1)
 8001842:	e7fe      	b.n	8001842 <main+0x1ca>
  huart1.Instance = USART1;
 8001844:	484d      	ldr	r0, [pc, #308]	@ (800197c <main+0x304>)
  huart1.Init.BaudRate = 115200;
 8001846:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001848:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 800184a:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184e:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001852:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185e:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8001860:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001864:	f004 fab4 	bl	8005dd0 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	b108      	cbz	r0, 8001870 <main+0x1f8>
 800186c:	b672      	cpsid	i
  while (1)
 800186e:	e7fe      	b.n	800186e <main+0x1f6>
  huart2.Instance = USART2;
 8001870:	4844      	ldr	r0, [pc, #272]	@ (8001984 <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 8001872:	f8df c130 	ldr.w	ip, [pc, #304]	@ 80019a4 <main+0x32c>
 8001876:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800187e:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001882:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001886:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800188a:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800188e:	f004 fa9f 	bl	8005dd0 <HAL_UART_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	b108      	cbz	r0, 800189a <main+0x222>
 8001896:	b672      	cpsid	i
  while (1)
 8001898:	e7fe      	b.n	8001898 <main+0x220>
  huart3.Instance = USART3;
 800189a:	483b      	ldr	r0, [pc, #236]	@ (8001988 <main+0x310>)
 800189c:	4a3b      	ldr	r2, [pc, #236]	@ (800198c <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800189e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80018a2:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a6:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b2:	f004 fa8d 	bl	8005dd0 <HAL_UART_Init>
 80018b6:	4604      	mov	r4, r0
 80018b8:	b108      	cbz	r0, 80018be <main+0x246>
 80018ba:	b672      	cpsid	i
  while (1)
 80018bc:	e7fe      	b.n	80018bc <main+0x244>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	462a      	mov	r2, r5
 80018c0:	4601      	mov	r1, r0
 80018c2:	a808      	add	r0, sp, #32
 80018c4:	f008 fc82 	bl	800a1cc <memset>
  htim3.Instance = TIM3;
 80018c8:	4d31      	ldr	r5, [pc, #196]	@ (8001990 <main+0x318>)
  htim3.Init.Prescaler = 8000;
 80018ca:	4832      	ldr	r0, [pc, #200]	@ (8001994 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 80018ce:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80018d2:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 80018d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018da:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018e8:	f003 fe8c 	bl	8005604 <HAL_TIM_Base_Init>
 80018ec:	b108      	cbz	r0, 80018f2 <main+0x27a>
 80018ee:	b672      	cpsid	i
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <main+0x278>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f2:	a908      	add	r1, sp, #32
 80018f4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018fa:	f003 febd 	bl	8005678 <HAL_TIM_ConfigClockSource>
 80018fe:	b108      	cbz	r0, 8001904 <main+0x28c>
 8001900:	b672      	cpsid	i
  while (1)
 8001902:	e7fe      	b.n	8001902 <main+0x28a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001908:	a905      	add	r1, sp, #20
 800190a:	4628      	mov	r0, r5
 800190c:	f003 ff4e 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	4605      	mov	r5, r0
 8001912:	b108      	cbz	r0, 8001918 <main+0x2a0>
 8001914:	b672      	cpsid	i
  while (1)
 8001916:	e7fe      	b.n	8001916 <main+0x29e>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001918:	4c1f      	ldr	r4, [pc, #124]	@ (8001998 <main+0x320>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	4601      	mov	r1, r0
 800191c:	2218      	movs	r2, #24
 800191e:	a808      	add	r0, sp, #32
 8001920:	f008 fc54 	bl	800a1cc <memset>
  hadc2.Instance = ADC2;
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <main+0x324>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001926:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800192a:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192c:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001930:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001934:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001938:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 800193c:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800193e:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001942:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001944:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001946:	f001 fbf7 	bl	8003138 <HAL_ADC_Init>
 800194a:	b108      	cbz	r0, 8001950 <main+0x2d8>
 800194c:	b672      	cpsid	i
  while (1)
 800194e:	e7fe      	b.n	800194e <main+0x2d6>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001950:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8001954:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001958:	a908      	add	r1, sp, #32
 800195a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195c:	e9cd 8608 	strd	r8, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001960:	f001 feec 	bl	800373c <HAL_ADC_ConfigChannel>
 8001964:	4604      	mov	r4, r0
 8001966:	b1f8      	cbz	r0, 80019a8 <main+0x330>
 8001968:	b672      	cpsid	i
  while (1)
 800196a:	e7fe      	b.n	800196a <main+0x2f2>
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	48000400 	.word	0x48000400
 8001978:	20002e6c 	.word	0x20002e6c
 800197c:	20002d34 	.word	0x20002d34
 8001980:	40013800 	.word	0x40013800
 8001984:	20002cac 	.word	0x20002cac
 8001988:	20002c24 	.word	0x20002c24
 800198c:	40004800 	.word	0x40004800
 8001990:	20002dbc 	.word	0x20002dbc
 8001994:	40000400 	.word	0x40000400
 8001998:	20002fc8 	.word	0x20002fc8
 800199c:	50000100 	.word	0x50000100
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40004400 	.word	0x40004400
  ADC_MultiModeTypeDef multimode = {0};
 80019a8:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80019ac:	9007      	str	r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ae:	4601      	mov	r1, r0
 80019b0:	2218      	movs	r2, #24
 80019b2:	a808      	add	r0, sp, #32
 80019b4:	f008 fc0a 	bl	800a1cc <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019b8:	483c      	ldr	r0, [pc, #240]	@ (8001aac <main+0x434>)
  hadc3.Instance = ADC3;
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <main+0x438>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019bc:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c0:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019c4:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019cc:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 80019d0:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80019d2:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019d6:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019d8:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019da:	f001 fbad 	bl	8003138 <HAL_ADC_Init>
 80019de:	b108      	cbz	r0, 80019e4 <main+0x36c>
 80019e0:	b672      	cpsid	i
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <main+0x36a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019e4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80019e6:	4831      	ldr	r0, [pc, #196]	@ (8001aac <main+0x434>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019e8:	9305      	str	r3, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80019ea:	a905      	add	r1, sp, #20
 80019ec:	f002 f82a 	bl	8003a44 <HAL_ADCEx_MultiModeConfigChannel>
 80019f0:	b108      	cbz	r0, 80019f6 <main+0x37e>
 80019f2:	b672      	cpsid	i
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x37c>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f6:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019f8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 80019fc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a00:	2501      	movs	r5, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a02:	482a      	ldr	r0, [pc, #168]	@ (8001aac <main+0x434>)
 8001a04:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a06:	e9cd 3508 	strd	r3, r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a0a:	f001 fe97 	bl	800373c <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b108      	cbz	r0, 8001a16 <main+0x39e>
 8001a12:	b672      	cpsid	i
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <main+0x39c>
  hspi2.Instance = SPI2;
 8001a16:	4827      	ldr	r0, [pc, #156]	@ (8001ab4 <main+0x43c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a18:	4927      	ldr	r1, [pc, #156]	@ (8001ab8 <main+0x440>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a20:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a24:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a30:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8001a34:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a36:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a3a:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3e:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a42:	2308      	movs	r3, #8
 8001a44:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a46:	f003 f980 	bl	8004d4a <HAL_SPI_Init>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	b108      	cbz	r0, 8001a52 <main+0x3da>
 8001a4e:	b672      	cpsid	i
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <main+0x3d8>
  osKernelInitialize();
 8001a52:	f004 fa57 	bl	8005f04 <osKernelInitialize>
  myMutexHandle = osMutexNew(&myMutex_attributes);
 8001a56:	4819      	ldr	r0, [pc, #100]	@ (8001abc <main+0x444>)
 8001a58:	f004 fb1a 	bl	8006090 <osMutexNew>
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <main+0x448>)
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 8001a5e:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <main+0x44c>)
  myMutexHandle = osMutexNew(&myMutex_attributes);
 8001a60:	6018      	str	r0, [r3, #0]
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 8001a62:	2158      	movs	r1, #88	@ 0x58
 8001a64:	2003      	movs	r0, #3
 8001a66:	f004 fbb7 	bl	80061d8 <osMessageQueueNew>
 8001a6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <main+0x450>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (32, 96, &RMC_MailQGSMId_attributes);
 8001a6c:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <main+0x454>)
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 8001a6e:	6018      	str	r0, [r3, #0]
  RMC_MailQGSMIdHandle = osMessageQueueNew (32, 96, &RMC_MailQGSMId_attributes);
 8001a70:	2160      	movs	r1, #96	@ 0x60
 8001a72:	2020      	movs	r0, #32
 8001a74:	f004 fbb0 	bl	80061d8 <osMessageQueueNew>
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <main+0x458>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8001a7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ad4 <main+0x45c>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (32, 96, &RMC_MailQGSMId_attributes);
 8001a7c:	6018      	str	r0, [r3, #0]
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8001a7e:	2180      	movs	r1, #128	@ 0x80
 8001a80:	4628      	mov	r0, r5
 8001a82:	f004 fba9 	bl	80061d8 <osMessageQueueNew>
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <main+0x460>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8001a88:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <main+0x464>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 8001a8a:	6018      	str	r0, [r3, #0]
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <main+0x468>)
 8001a90:	f004 fa74 	bl	8005f7c <osThreadNew>
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <main+0x46c>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <main+0x470>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8001a98:	6018      	str	r0, [r3, #0]
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4813      	ldr	r0, [pc, #76]	@ (8001aec <main+0x474>)
 8001a9e:	f004 fa6d 	bl	8005f7c <osThreadNew>
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <main+0x478>)
 8001aa4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001aa6:	f004 fa49 	bl	8005f3c <osKernelStart>
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <main+0x432>
 8001aac:	20002f78 	.word	0x20002f78
 8001ab0:	50000400 	.word	0x50000400
 8001ab4:	20002e08 	.word	0x20002e08
 8001ab8:	40003800 	.word	0x40003800
 8001abc:	0800e620 	.word	0x0800e620
 8001ac0:	20001d54 	.word	0x20001d54
 8001ac4:	0800e660 	.word	0x0800e660
 8001ac8:	20002b08 	.word	0x20002b08
 8001acc:	0800e648 	.word	0x0800e648
 8001ad0:	200029ac 	.word	0x200029ac
 8001ad4:	0800e630 	.word	0x0800e630
 8001ad8:	20001d58 	.word	0x20001d58
 8001adc:	0800e69c 	.word	0x0800e69c
 8001ae0:	08002811 	.word	0x08002811
 8001ae4:	20002b10 	.word	0x20002b10
 8001ae8:	0800e678 	.word	0x0800e678
 8001aec:	0800125d 	.word	0x0800125d
 8001af0:	20002b0c 	.word	0x20002b0c

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001af4:	6803      	ldr	r3, [r0, #0]
 8001af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afa:	d101      	bne.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001afc:	f001 bad4 	b.w	80030a8 <HAL_IncTick>
}
 8001b00:	4770      	bx	lr

08001b02 <Error_Handler>:
 8001b02:	b672      	cpsid	i
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x2>
	...

08001b08 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8001b08:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001b0a:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001b16:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001b1a:	f002 f9f1 	bl	8003f00 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8001b1e:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <W25_ReadStatusReg1+0x58>)
 8001b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b24:	2201      	movs	r2, #1
 8001b26:	f10d 0106 	add.w	r1, sp, #6
 8001b2a:	f003 f97c 	bl	8004e26 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8001b2e:	4604      	mov	r4, r0
 8001b30:	b940      	cbnz	r0, 8001b44 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8001b32:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <W25_ReadStatusReg1+0x58>)
 8001b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f10d 0107 	add.w	r1, sp, #7
 8001b3e:	f003 fb6c 	bl	800521a <HAL_SPI_Receive>
 8001b42:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4e:	f002 f9d7 	bl	8003f00 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8001b52:	b91c      	cbnz	r4, 8001b5c <W25_ReadStatusReg1+0x54>
 8001b54:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8001b5c:	20ff      	movs	r0, #255	@ 0xff
 8001b5e:	e7fb      	b.n	8001b58 <W25_ReadStatusReg1+0x50>
 8001b60:	20002e6c 	.word	0x20002e6c

08001b64 <W25_Busy>:

int W25_Busy(void)
{
 8001b64:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8001b66:	f7ff ffcf 	bl	8001b08 <W25_ReadStatusReg1>
}
 8001b6a:	f000 0001 	and.w	r0, r0, #1
 8001b6e:	bd08      	pop	{r3, pc}

08001b70 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8001b74:	f001 faa4 	bl	80030c0 <HAL_GetTick>
 8001b78:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8001b7a:	f7ff fff3 	bl	8001b64 <W25_Busy>
 8001b7e:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8001b80:	f001 fa9e 	bl	80030c0 <HAL_GetTick>
 8001b84:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8001b86:	b114      	cbz	r4, 8001b8e <W25_DelayWhileBusy+0x1e>
 8001b88:	42ab      	cmp	r3, r5
 8001b8a:	d3f6      	bcc.n	8001b7a <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8001b8c:	2403      	movs	r4, #3
	return retval;
}
 8001b8e:	4620      	mov	r0, r4
 8001b90:	bd70      	pop	{r4, r5, r6, pc}

08001b92 <W25_Reset>:
void W25_Reset(){
 8001b92:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b9e:	f002 f9af 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bac:	f002 f9a8 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bba:	f002 f9a1 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc8:	f002 f99a 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd6:	f002 f993 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8001bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be8:	f002 b98a 	b.w	8003f00 <HAL_GPIO_WritePin>

08001bec <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001bf0:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001bfc:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001c00:	f002 f97e 	bl	8003f00 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001c04:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	aa03      	add	r2, sp, #12
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	f10d 010b 	add.w	r1, sp, #11
 8001c12:	4820      	ldr	r0, [pc, #128]	@ (8001c94 <W25_ReadJedecID+0xa8>)
 8001c14:	f003 f9d1 	bl	8004fba <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8001c18:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001c1a:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8001c1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f002 f96c 	bl	8003f00 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <W25_ReadJedecID+0xac>)
 8001c2a:	aa07      	add	r2, sp, #28
 8001c2c:	f103 0710 	add.w	r7, r3, #16
 8001c30:	4616      	mov	r6, r2
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	4614      	mov	r4, r2
 8001c38:	c403      	stmia	r4!, {r0, r1}
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	42bb      	cmp	r3, r7
 8001c3e:	4622      	mov	r2, r4
 8001c40:	d1f7      	bne.n	8001c32 <W25_ReadJedecID+0x46>
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8001c46:	4630      	mov	r0, r6
 8001c48:	f7fe fb22 	bl	8000290 <strlen>
 8001c4c:	4631      	mov	r1, r6
 8001c4e:	b282      	uxth	r2, r0
 8001c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c54:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <W25_ReadJedecID+0xb0>)
 8001c56:	f004 f811 	bl	8005c7c <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8001c5a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	490e      	ldr	r1, [pc, #56]	@ (8001ca0 <W25_ReadJedecID+0xb4>)
 8001c66:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001c6a:	a804      	add	r0, sp, #16
 8001c6c:	f008 f98a 	bl	8009f84 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8001c70:	a904      	add	r1, sp, #16
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	220b      	movs	r2, #11
 8001c78:	4808      	ldr	r0, [pc, #32]	@ (8001c9c <W25_ReadJedecID+0xb0>)
 8001c7a:	f003 ffff 	bl	8005c7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8001c7e:	4909      	ldr	r1, [pc, #36]	@ (8001ca4 <W25_ReadJedecID+0xb8>)
 8001c80:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <W25_ReadJedecID+0xb0>)
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	2201      	movs	r2, #1
 8001c88:	f003 fff8 	bl	8005c7c <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	b00d      	add	sp, #52	@ 0x34
 8001c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20002e6c 	.word	0x20002e6c
 8001c98:	0800e6d1 	.word	0x0800e6d1
 8001c9c:	20002d34 	.word	0x20002d34
 8001ca0:	0800e6c0 	.word	0x0800e6c0
 8001ca4:	0800e91f 	.word	0x0800e91f

08001ca8 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8001ca8:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001caa:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8001cb6:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001cba:	f002 f921 	bl	8003f00 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cc2:	f10d 0107 	add.w	r1, sp, #7
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <W25_WriteEnable+0x3c>)
 8001cca:	f003 f8ac 	bl	8004e26 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001cce:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001cd0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cda:	f002 f911 	bl	8003f00 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8001cde:	4620      	mov	r0, r4
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	20002e6c 	.word	0x20002e6c

08001ce8 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8001ce8:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8001cea:	2320      	movs	r3, #32
 8001cec:	f88d 3004 	strb.w	r3, [sp, #4]
 8001cf0:	0c03      	lsrs	r3, r0, #16
 8001cf2:	ba40      	rev16	r0, r0
 8001cf4:	f88d 3005 	strb.w	r3, [sp, #5]
 8001cf8:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8001cfc:	f7ff ffd4 	bl	8001ca8 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0a:	f002 f8f9 	bl	8003f00 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001d0e:	2204      	movs	r2, #4
 8001d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d14:	eb0d 0102 	add.w	r1, sp, r2
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <W25_SectorErase+0x54>)
 8001d1a:	f003 f884 	bl	8004e26 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001d1e:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001d20:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8001d22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2a:	f002 f8e9 	bl	8003f00 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8001d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d32:	f7ff ff1d 	bl	8001b70 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8001d36:	4620      	mov	r0, r4
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	20002e6c 	.word	0x20002e6c

08001d40 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8001d40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d44:	4606      	mov	r6, r0
 8001d46:	4688      	mov	r8, r1
 8001d48:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8001d4a:	f7ff ffad 	bl	8001ca8 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8001d4e:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8001dd0 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8001d52:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d54:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8001d58:	b91f      	cbnz	r7, 8001d62 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	b002      	add	sp, #8
 8001d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8001d62:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d64:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8001d66:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8001d6a:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d6c:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d70:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d74:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d7e:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8001d82:	bf28      	it	cs
 8001d84:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8001d86:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001d8a:	f002 f8b9 	bl	8003f00 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8001d8e:	2204      	movs	r2, #4
 8001d90:	480f      	ldr	r0, [pc, #60]	@ (8001dd0 <W25_PageProgram+0x90>)
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	eb0d 0102 	add.w	r1, sp, r2
 8001d9a:	f003 f844 	bl	8004e26 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8001d9e:	4604      	mov	r4, r0
 8001da0:	b938      	cbnz	r0, 8001db2 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	b2aa      	uxth	r2, r5
 8001da8:	4641      	mov	r1, r8
 8001daa:	4650      	mov	r0, sl
 8001dac:	f003 f83b 	bl	8004e26 <HAL_SPI_Transmit>
 8001db0:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbc:	f002 f8a0 	bl	8003f00 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001dc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8001dc4:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8001dc6:	442e      	add	r6, r5
		buf += count_this_pass;
 8001dc8:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001dca:	f7ff fed1 	bl	8001b70 <W25_DelayWhileBusy>
 8001dce:	e7c3      	b.n	8001d58 <W25_PageProgram+0x18>
 8001dd0:	20002e6c 	.word	0x20002e6c

08001dd4 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8001dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f88d 3004 	strb.w	r3, [sp, #4]
 8001ddc:	0c03      	lsrs	r3, r0, #16
 8001dde:	ba40      	rev16	r0, r0
 8001de0:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8001de4:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8001dee:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001df0:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8001df2:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001df6:	f002 f883 	bl	8003f00 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <W25_ReadData+0x60>)
 8001dfe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e02:	eb0d 0102 	add.w	r1, sp, r2
 8001e06:	f003 f80e 	bl	8004e26 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	b978      	cbnz	r0, 8001e2e <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8001e0e:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <W25_ReadData+0x60>)
 8001e10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e14:	b2b2      	uxth	r2, r6
 8001e16:	4629      	mov	r1, r5
 8001e18:	f003 f9ff 	bl	800521a <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	b130      	cbz	r0, 8001e2e <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e2a:	f002 f869 	bl	8003f00 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8001e2e:	4620      	mov	r0, r4
 8001e30:	b002      	add	sp, #8
 8001e32:	bd70      	pop	{r4, r5, r6, pc}
 8001e34:	20002e6c 	.word	0x20002e6c

08001e38 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8001e38:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8001e3a:	213b      	movs	r1, #59	@ 0x3b
 8001e3c:	f008 fa00 	bl	800a240 <strrchr>
    if (!last_semicolon) {
 8001e40:	4604      	mov	r4, r0
 8001e42:	b1a0      	cbz	r0, 8001e6e <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8001e44:	3001      	adds	r0, #1
 8001e46:	f7fe fa23 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8001e4a:	2805      	cmp	r0, #5
 8001e4c:	d90f      	bls.n	8001e6e <IsPageValid+0x36>
 8001e4e:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8001e50:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001e54:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8001e58:	2909      	cmp	r1, #9
 8001e5a:	d904      	bls.n	8001e66 <IsPageValid+0x2e>
 8001e5c:	f023 0320 	bic.w	r3, r3, #32
 8001e60:	3b41      	subs	r3, #65	@ 0x41
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d803      	bhi.n	8001e6e <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 8001e66:	4294      	cmp	r4, r2
 8001e68:	d1f2      	bne.n	8001e50 <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8001e6a:	2001      	movs	r0, #1
}
 8001e6c:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8001e6e:	2000      	movs	r0, #0
 8001e70:	e7fc      	b.n	8001e6c <IsPageValid+0x34>

08001e72 <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8001e72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e74:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 8001e76:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8001e78:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 8001e7a:	a901      	add	r1, sp, #4
 8001e7c:	f001 f862 	bl	8002f44 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7fe fa05 	bl	8000290 <strlen>
 8001e86:	3806      	subs	r0, #6
 8001e88:	f8dd 2006 	ldr.w	r2, [sp, #6]
 8001e8c:	5022      	str	r2, [r4, r0]
 8001e8e:	1823      	adds	r3, r4, r0
 8001e90:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8001e94:	809a      	strh	r2, [r3, #4]
}
 8001e96:	b004      	add	sp, #16
 8001e98:	bd10      	pop	{r4, pc}
	...

08001e9c <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8001e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8001ea0:	483f      	ldr	r0, [pc, #252]	@ (8001fa0 <W25_ShiftLeftFlashDataByPage+0x104>)
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001ea2:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8001fb0 <W25_ShiftLeftFlashDataByPage+0x114>
    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8001ea6:	f008 f831 	bl	8009f0c <puts>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8001eaa:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
        W25_Reset();
 8001eae:	f7ff fe70 	bl	8001b92 <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001eb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	4628      	mov	r0, r5
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8001eba:	f505 5780 	add.w	r7, r5, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001ebe:	f7ff ff89 	bl	8001dd4 <W25_ReadData>
 8001ec2:	b118      	cbz	r0, 8001ecc <W25_ShiftLeftFlashDataByPage+0x30>
//        	printf("READING ALL THE SECTOR: ERROR\n");
            return HAL_ERROR; // Exit if read fails
 8001ec4:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (next_sector_start < FLASH_END_ADDRESS) {
 8001ecc:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8001ed0:	d147      	bne.n	8001f62 <W25_ShiftLeftFlashDataByPage+0xc6>
 8001ed2:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8001fb0 <W25_ShiftLeftFlashDataByPage+0x114>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8001ed6:	2600      	movs	r6, #0
 8001ed8:	4644      	mov	r4, r8
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8001eda:	46a2      	mov	sl, r4
 8001edc:	3480      	adds	r4, #128	@ 0x80
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff ffaa 	bl	8001e38 <IsPageValid>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8001ee4:	2280      	movs	r2, #128	@ 0x80
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d046      	beq.n	8001f78 <W25_ShiftLeftFlashDataByPage+0xdc>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8001eea:	4621      	mov	r1, r4
 8001eec:	4650      	mov	r0, sl
 8001eee:	f009 f817 	bl	800af20 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8001ef2:	1971      	adds	r1, r6, r5
 8001ef4:	4650      	mov	r0, sl
 8001ef6:	f7ff ffbc 	bl	8001e72 <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8001efa:	3680      	adds	r6, #128	@ 0x80
 8001efc:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8001f00:	d1eb      	bne.n	8001eda <W25_ShiftLeftFlashDataByPage+0x3e>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8001f02:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8001f06:	d03c      	beq.n	8001f82 <W25_ShiftLeftFlashDataByPage+0xe6>
 8001f08:	4826      	ldr	r0, [pc, #152]	@ (8001fa4 <W25_ShiftLeftFlashDataByPage+0x108>)
 8001f0a:	f7ff ff95 	bl	8001e38 <IsPageValid>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d037      	beq.n	8001f82 <W25_ShiftLeftFlashDataByPage+0xe6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8001f12:	4924      	ldr	r1, [pc, #144]	@ (8001fa4 <W25_ShiftLeftFlashDataByPage+0x108>)
 8001f14:	4824      	ldr	r0, [pc, #144]	@ (8001fa8 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	f009 f802 	bl	800af20 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8001f1c:	4822      	ldr	r0, [pc, #136]	@ (8001fa8 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001f1e:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8001f22:	f7ff ffa6 	bl	8001e72 <UpdatePageAddress>
        W25_Reset();
 8001f26:	f7ff fe34 	bl	8001b92 <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f7ff fedc 	bl	8001ce8 <W25_SectorErase>
 8001f30:	4604      	mov	r4, r0
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1c6      	bne.n	8001ec4 <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8001f36:	4606      	mov	r6, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8001f38:	eb08 0a06 	add.w	sl, r8, r6
        	W25_Reset();
 8001f3c:	f7ff fe29 	bl	8001b92 <W25_Reset>
        	if (IsPageValid(page_data)) {
 8001f40:	4650      	mov	r0, sl
 8001f42:	f7ff ff79 	bl	8001e38 <IsPageValid>
 8001f46:	bb10      	cbnz	r0, 8001f8e <W25_ShiftLeftFlashDataByPage+0xf2>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8001f48:	3680      	adds	r6, #128	@ 0x80
 8001f4a:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8001f4e:	d1f3      	bne.n	8001f38 <W25_ShiftLeftFlashDataByPage+0x9c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8001f50:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8001f54:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8001f58:	d1a9      	bne.n	8001eae <W25_ShiftLeftFlashDataByPage+0x12>
    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8001f5a:	4814      	ldr	r0, [pc, #80]	@ (8001fac <W25_ShiftLeftFlashDataByPage+0x110>)
 8001f5c:	f007 ffd6 	bl	8009f0c <puts>
    return HAL_OK;
 8001f60:	e7b1      	b.n	8001ec6 <W25_ShiftLeftFlashDataByPage+0x2a>
        	W25_Reset();
 8001f62:	f7ff fe16 	bl	8001b92 <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 8001f66:	490f      	ldr	r1, [pc, #60]	@ (8001fa4 <W25_ShiftLeftFlashDataByPage+0x108>)
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f6e:	f7ff ff31 	bl	8001dd4 <W25_ReadData>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d0ad      	beq.n	8001ed2 <W25_ShiftLeftFlashDataByPage+0x36>
 8001f76:	e7a5      	b.n	8001ec4 <W25_ShiftLeftFlashDataByPage+0x28>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8001f78:	21ff      	movs	r1, #255	@ 0xff
 8001f7a:	4650      	mov	r0, sl
 8001f7c:	f008 f926 	bl	800a1cc <memset>
 8001f80:	e7bb      	b.n	8001efa <W25_ShiftLeftFlashDataByPage+0x5e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8001f82:	2280      	movs	r2, #128	@ 0x80
 8001f84:	21ff      	movs	r1, #255	@ 0xff
 8001f86:	4808      	ldr	r0, [pc, #32]	@ (8001fa8 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8001f88:	f008 f920 	bl	800a1cc <memset>
 8001f8c:	e7cb      	b.n	8001f26 <W25_ShiftLeftFlashDataByPage+0x8a>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	4651      	mov	r1, sl
 8001f92:	19a8      	adds	r0, r5, r6
 8001f94:	f7ff fed4 	bl	8001d40 <W25_PageProgram>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d0d5      	beq.n	8001f48 <W25_ShiftLeftFlashDataByPage+0xac>
 8001f9c:	e792      	b.n	8001ec4 <W25_ShiftLeftFlashDataByPage+0x28>
 8001f9e:	bf00      	nop
 8001fa0:	0800e6e5 	.word	0x0800e6e5
 8001fa4:	20003138 	.word	0x20003138
 8001fa8:	20004138 	.word	0x20004138
 8001fac:	0800e734 	.word	0x0800e734
 8001fb0:	200031b8 	.word	0x200031b8

08001fb4 <calculate_epoch_time_utc>:
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001fb4:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001fb6:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001fb8:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001fba:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001fbe:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8001fc0:	6843      	ldr	r3, [r0, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8001fca:	680b      	ldr	r3, [r1, #0]
 8001fcc:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8001fce:	684b      	ldr	r3, [r1, #4]
 8001fd0:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8001fd2:	688b      	ldr	r3, [r1, #8]
 8001fd4:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8001fd6:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fdc:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8001fde:	f008 fa2f 	bl	800a440 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8001fe2:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8001fe6:	3070      	adds	r0, #112	@ 0x70
 8001fe8:	b00b      	add	sp, #44	@ 0x2c
 8001fea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001ff0 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	ed2d 8b04 	vpush	{d8-d9}
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	b09b      	sub	sp, #108	@ 0x6c
 8001ffc:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8002000:	4601      	mov	r1, r0
 8002002:	3010      	adds	r0, #16
 8002004:	f7ff ffd6 	bl	8001fb4 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8002008:	69a3      	ldr	r3, [r4, #24]
 800200a:	9314      	str	r3, [sp, #80]	@ 0x50
 800200c:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8002010:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8002012:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002014:	9315      	str	r3, [sp, #84]	@ 0x54
 8002016:	f7fe faa7 	bl	8000568 <__aeabi_f2d>
 800201a:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800201e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002020:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002024:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8002028:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 800202c:	f7fe fa9c 	bl	8000568 <__aeabi_f2d>
 8002030:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8002034:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8002038:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 800203c:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8002040:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002042:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4811      	ldr	r0, [pc, #68]	@ (8002090 <format_rmc_data+0xa0>)
 800204c:	4911      	ldr	r1, [pc, #68]	@ (8002094 <format_rmc_data+0xa4>)
 800204e:	9608      	str	r6, [sp, #32]
 8002050:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002054:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002056:	4a10      	ldr	r2, [pc, #64]	@ (8002098 <format_rmc_data+0xa8>)
 8002058:	f8cd 9008 	str.w	r9, [sp, #8]
 800205c:	2c00      	cmp	r4, #0
 800205e:	bf08      	it	eq
 8002060:	4601      	moveq	r1, r0
 8002062:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002066:	e9cd 5300 	strd	r5, r3, [sp]
 800206a:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 800206e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002070:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8002074:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002078:	e9cd ab03 	strd	sl, fp, [sp, #12]
 800207c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8002080:	f007 ff4c 	bl	8009f1c <sniprintf>
}
 8002084:	b01b      	add	sp, #108	@ 0x6c
 8002086:	ecbd 8b04 	vpop	{d8-d9}
 800208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	0800e0c3 	.word	0x0800e0c3
 8002094:	0800e0bd 	.word	0x0800e0bd
 8002098:	0800e7b0 	.word	0x0800e7b0

0800209c <saveRMC>:


void saveRMC(){
 800209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 80020a0:	4cb8      	ldr	r4, [pc, #736]	@ (8002384 <saveRMC+0x2e8>)
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80020a2:	48b9      	ldr	r0, [pc, #740]	@ (8002388 <saveRMC+0x2ec>)
void saveRMC(){
 80020a4:	b093      	sub	sp, #76	@ 0x4c
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80020a6:	f007 ff31 	bl	8009f0c <puts>
	W25_Reset();
 80020aa:	f7ff fd72 	bl	8001b92 <W25_Reset>
	if (is_erased_rmc == 0){
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	b92b      	cbnz	r3, 80020be <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 80020b2:	4bb6      	ldr	r3, [pc, #728]	@ (800238c <saveRMC+0x2f0>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	f7ff fe17 	bl	8001ce8 <W25_SectorErase>
		is_erased_rmc = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 80020be:	4ab4      	ldr	r2, [pc, #720]	@ (8002390 <saveRMC+0x2f4>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 80020c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80020c8:	461d      	mov	r5, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	b109      	cbz	r1, 80020d2 <saveRMC+0x36>
 80020ce:	7811      	ldrb	r1, [r2, #0]
 80020d0:	b111      	cbz	r1, 80020d8 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 80020d2:	2b80      	cmp	r3, #128	@ 0x80
 80020d4:	d1f6      	bne.n	80020c4 <saveRMC+0x28>
	int k = 0;
 80020d6:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 80020d8:	4fae      	ldr	r7, [pc, #696]	@ (8002394 <saveRMC+0x2f8>)
 80020da:	4cac      	ldr	r4, [pc, #688]	@ (800238c <saveRMC+0x2f0>)
 80020dc:	2208      	movs	r2, #8
 80020de:	6820      	ldr	r0, [r4, #0]
 80020e0:	4639      	mov	r1, r7
 80020e2:	f000 ff2f 	bl	8002f44 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	2208      	movs	r2, #8
 80020ec:	4639      	mov	r1, r7
 80020ee:	48aa      	ldr	r0, [pc, #680]	@ (8002398 <saveRMC+0x2fc>)
 80020f0:	f003 fdc4 	bl	8005c7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 80020f4:	49a9      	ldr	r1, [pc, #676]	@ (800239c <saveRMC+0x300>)
 80020f6:	48a8      	ldr	r0, [pc, #672]	@ (8002398 <saveRMC+0x2fc>)
 80020f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fc:	2201      	movs	r2, #1
 80020fe:	f003 fdbd 	bl	8005c7c <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 8002102:	1973      	adds	r3, r6, r5
 8002104:	223b      	movs	r2, #59	@ 0x3b
 8002106:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 8002108:	1cab      	adds	r3, r5, #2
 800210a:	f8d7 1002 	ldr.w	r1, [r7, #2]
 800210e:	50f1      	str	r1, [r6, r3]
 8002110:	18f2      	adds	r2, r6, r3
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8002116:	f105 0008 	add.w	r0, r5, #8
 800211a:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 800211e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002122:	2100      	movs	r1, #0
 8002124:	4430      	add	r0, r6
 8002126:	f008 f851 	bl	800a1cc <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 800212a:	6820      	ldr	r0, [r4, #0]
 800212c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002130:	b90b      	cbnz	r3, 8002136 <saveRMC+0x9a>
//		printf("\n\nErasing SECTOR IN ADVANCE\n");
		W25_SectorErase(address_rmc);
 8002132:	f7ff fdd9 	bl	8001ce8 <W25_SectorErase>
	}

	W25_Reset();
 8002136:	f7ff fd2c 	bl	8001b92 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
//	printf("Buffer before saving to FLASH: ");
//	printf((char*)rmcBufferDemo);
//	printf("\n");

	current_addr = address_rmc;
 800213a:	4d99      	ldr	r5, [pc, #612]	@ (80023a0 <saveRMC+0x304>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 800213c:	4994      	ldr	r1, [pc, #592]	@ (8002390 <saveRMC+0x2f4>)
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	f7ff fdfd 	bl	8001d40 <W25_PageProgram>
	current_addr = address_rmc;
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	602b      	str	r3, [r5, #0]
//	printf("Buffer after saving to FLASH: ");
	W25_Reset();
 800214a:	f7ff fd22 	bl	8001b92 <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	4994      	ldr	r1, [pc, #592]	@ (80023a4 <saveRMC+0x308>)
 8002152:	6828      	ldr	r0, [r5, #0]
 8002154:	f7ff fe3e 	bl	8001dd4 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8002158:	4b93      	ldr	r3, [pc, #588]	@ (80023a8 <saveRMC+0x30c>)
 800215a:	aa01      	add	r2, sp, #4
 800215c:	f103 0c10 	add.w	ip, r3, #16
 8002160:	4617      	mov	r7, r2
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	4616      	mov	r6, r2
 8002168:	c603      	stmia	r6!, {r0, r1}
 800216a:	3308      	adds	r3, #8
 800216c:	4563      	cmp	r3, ip
 800216e:	4632      	mov	r2, r6
 8002170:	d1f7      	bne.n	8002162 <saveRMC+0xc6>
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	889b      	ldrh	r3, [r3, #4]
 8002176:	6030      	str	r0, [r6, #0]
 8002178:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800217a:	4638      	mov	r0, r7
 800217c:	f7fe f888 	bl	8000290 <strlen>
 8002180:	4639      	mov	r1, r7
 8002182:	b282      	uxth	r2, r0
 8002184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002188:	4883      	ldr	r0, [pc, #524]	@ (8002398 <saveRMC+0x2fc>)
 800218a:	f003 fd77 	bl	8005c7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800218e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002192:	4984      	ldr	r1, [pc, #528]	@ (80023a4 <saveRMC+0x308>)
 8002194:	4880      	ldr	r0, [pc, #512]	@ (8002398 <saveRMC+0x2fc>)
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	f003 fd70 	bl	8005c7c <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 800219c:	2280      	movs	r2, #128	@ 0x80
 800219e:	2100      	movs	r1, #0
 80021a0:	4880      	ldr	r0, [pc, #512]	@ (80023a4 <saveRMC+0x308>)
 80021a2:	f008 f813 	bl	800a1cc <memset>


	printf("\n-------------------------- Updating the latest location info----------------\n");
 80021a6:	4881      	ldr	r0, [pc, #516]	@ (80023ac <saveRMC+0x310>)
 80021a8:	f007 feb0 	bl	8009f0c <puts>
	W25_Reset();
 80021ac:	f7ff fcf1 	bl	8001b92 <W25_Reset>
	W25_SectorErase(0x9000);
 80021b0:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80021b4:	f7ff fd98 	bl	8001ce8 <W25_SectorErase>
	W25_Reset();
 80021b8:	f7ff fceb 	bl	8001b92 <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 80021bc:	4974      	ldr	r1, [pc, #464]	@ (8002390 <saveRMC+0x2f4>)
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80021c4:	f7ff fdbc 	bl	8001d40 <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 80021c8:	2280      	movs	r2, #128	@ 0x80
 80021ca:	4976      	ldr	r1, [pc, #472]	@ (80023a4 <saveRMC+0x308>)
 80021cc:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80021d0:	f7ff fe00 	bl	8001dd4 <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 80021d4:	4b76      	ldr	r3, [pc, #472]	@ (80023b0 <saveRMC+0x314>)
 80021d6:	aa07      	add	r2, sp, #28
 80021d8:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 80021dc:	4617      	mov	r7, r2
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	4616      	mov	r6, r2
 80021e4:	c603      	stmia	r6!, {r0, r1}
 80021e6:	3308      	adds	r3, #8
 80021e8:	4563      	cmp	r3, ip
 80021ea:	4632      	mov	r2, r6
 80021ec:	d1f7      	bne.n	80021de <saveRMC+0x142>
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7fe f84c 	bl	8000290 <strlen>
 80021f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fc:	b282      	uxth	r2, r0
 80021fe:	4639      	mov	r1, r7
 8002200:	4865      	ldr	r0, [pc, #404]	@ (8002398 <saveRMC+0x2fc>)
 8002202:	f003 fd3b 	bl	8005c7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8002206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220a:	4966      	ldr	r1, [pc, #408]	@ (80023a4 <saveRMC+0x308>)
 800220c:	4862      	ldr	r0, [pc, #392]	@ (8002398 <saveRMC+0x2fc>)
 800220e:	2280      	movs	r2, #128	@ 0x80
 8002210:	f003 fd34 	bl	8005c7c <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 8002214:	4863      	ldr	r0, [pc, #396]	@ (80023a4 <saveRMC+0x308>)
 8002216:	2280      	movs	r2, #128	@ 0x80
 8002218:	2100      	movs	r1, #0
 800221a:	f007 ffd7 	bl	800a1cc <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 8002224:	4b63      	ldr	r3, [pc, #396]	@ (80023b4 <saveRMC+0x318>)
 8002226:	f040 80aa 	bne.w	800237e <saveRMC+0x2e2>
		is_flash_overflow = 1;
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
//		printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
		W25_Reset();
 800222e:	f7ff fcb0 	bl	8001b92 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8002232:	495c      	ldr	r1, [pc, #368]	@ (80023a4 <saveRMC+0x308>)
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	4f60      	ldr	r7, [pc, #384]	@ (80023b8 <saveRMC+0x31c>)
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	f7ff fdcb 	bl	8001dd4 <W25_ReadData>
		printf((char*) flashBufferRMCReceived);
 800223e:	4859      	ldr	r0, [pc, #356]	@ (80023a4 <saveRMC+0x308>)
 8002240:	f007 fdf4 	bl	8009e2c <iprintf>

		W25_ShiftLeftFlashDataByPage();
 8002244:	f7ff fe2a 	bl	8001e9c <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	3b80      	subs	r3, #128	@ 0x80
 800224c:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 800224e:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <saveRMC+0x320>)
 8002250:	f8d3 8000 	ldr.w	r8, [r3]
 8002254:	f1b8 0f00 	cmp.w	r8, #0
 8002258:	f040 808c 	bne.w	8002374 <saveRMC+0x2d8>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 800225c:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 800225e:	4e58      	ldr	r6, [pc, #352]	@ (80023c0 <saveRMC+0x324>)
			printf("\n-----------------BEFORE update the result address data --------------\n");
 8002260:	4858      	ldr	r0, [pc, #352]	@ (80023c4 <saveRMC+0x328>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8002262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8002266:	bf82      	ittt	hi
 8002268:	683b      	ldrhi	r3, [r7, #0]
 800226a:	3b80      	subhi	r3, #128	@ 0x80
 800226c:	603b      	strhi	r3, [r7, #0]
			printf("\n-----------------BEFORE update the result address data --------------\n");
 800226e:	f007 fe4d 	bl	8009f0c <puts>
			printQueue_GSM(&result_addr_queue);
 8002272:	4630      	mov	r0, r6
 8002274:	f7ff f844 	bl	8001300 <printQueue_GSM>
			printf("\n---------------Update the result address data--------------\n");
 8002278:	4853      	ldr	r0, [pc, #332]	@ (80023c8 <saveRMC+0x32c>)
 800227a:	f007 fe47 	bl	8009f0c <puts>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800227e:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002282:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002286:	2200      	movs	r2, #0
 8002288:	4290      	cmp	r0, r2
 800228a:	dc4b      	bgt.n	8002324 <saveRMC+0x288>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 800228c:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80023c0 <saveRMC+0x324>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002290:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 8002294:	4543      	cmp	r3, r8
 8002296:	dc58      	bgt.n	800234a <saveRMC+0x2ae>
			}
			printQueue_GSM(&result_addr_queue);
 8002298:	4849      	ldr	r0, [pc, #292]	@ (80023c0 <saveRMC+0x324>)
 800229a:	f7ff f831 	bl	8001300 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 800229e:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <saveRMC+0x330>)
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	4291      	cmp	r1, r2
 80022a6:	d902      	bls.n	80022ae <saveRMC+0x212>
				end_addr_disconnect -= 128;
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	3a80      	subs	r2, #128	@ 0x80
 80022ac:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 80022ae:	2208      	movs	r2, #8
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	4938      	ldr	r1, [pc, #224]	@ (8002394 <saveRMC+0x2f8>)
 80022b4:	f000 fe46 	bl	8002f44 <Uint32ToHex>
		printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 80022b8:	4936      	ldr	r1, [pc, #216]	@ (8002394 <saveRMC+0x2f8>)
 80022ba:	4845      	ldr	r0, [pc, #276]	@ (80023d0 <saveRMC+0x334>)
 80022bc:	f007 fdb6 	bl	8009e2c <iprintf>
		printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 80022c0:	4b44      	ldr	r3, [pc, #272]	@ (80023d4 <saveRMC+0x338>)
 80022c2:	4845      	ldr	r0, [pc, #276]	@ (80023d8 <saveRMC+0x33c>)
 80022c4:	7819      	ldrb	r1, [r3, #0]
 80022c6:	f007 fdb1 	bl	8009e2c <iprintf>
		current_addr -= 128;
 80022ca:	682b      	ldr	r3, [r5, #0]
	    printf("\n");
 80022cc:	200a      	movs	r0, #10
		current_addr -= 128;
 80022ce:	3b80      	subs	r3, #128	@ 0x80
 80022d0:	602b      	str	r3, [r5, #0]
	    printf("\n");
 80022d2:	f007 fdbd 	bl	8009e50 <putchar>
		printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 80022d6:	4841      	ldr	r0, [pc, #260]	@ (80023dc <saveRMC+0x340>)
 80022d8:	f007 fda8 	bl	8009e2c <iprintf>
		W25_Reset();
 80022dc:	f7ff fc59 	bl	8001b92 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80022e0:	4930      	ldr	r1, [pc, #192]	@ (80023a4 <saveRMC+0x308>)
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	f7ff fd75 	bl	8001dd4 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80022ea:	492e      	ldr	r1, [pc, #184]	@ (80023a4 <saveRMC+0x308>)
 80022ec:	482a      	ldr	r0, [pc, #168]	@ (8002398 <saveRMC+0x2fc>)
 80022ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	f003 fcc2 	bl	8005c7c <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 80022fe:	bf38      	it	cc
 8002300:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 8002302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8002306:	bf38      	it	cc
 8002308:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 800230a:	f003 fea7 	bl	800605c <osDelay>
	printf("\n");
 800230e:	200a      	movs	r0, #10
 8002310:	f007 fd9e 	bl	8009e50 <putchar>
	memset(flashBufferRMCReceived, 0x00,128);
 8002314:	4823      	ldr	r0, [pc, #140]	@ (80023a4 <saveRMC+0x308>)
 8002316:	2280      	movs	r2, #128	@ 0x80
 8002318:	2100      	movs	r1, #0
}
 800231a:	b013      	add	sp, #76	@ 0x4c
 800231c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8002320:	f007 bf54 	b.w	800a1cc <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002324:	eb02 030c 	add.w	r3, r2, ip
 8002328:	4259      	negs	r1, r3
 800232a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800232e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002332:	bf58      	it	pl
 8002334:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002336:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 8002338:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800233c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 8002340:	bf24      	itt	cs
 8002342:	3980      	subcs	r1, #128	@ 0x80
 8002344:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8002348:	e79e      	b.n	8002288 <saveRMC+0x1ec>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800234a:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 800234e:	4441      	add	r1, r8
 8002350:	424b      	negs	r3, r1
 8002352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002356:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800235a:	bf58      	it	pl
 800235c:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 800235e:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 8002362:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002366:	d202      	bcs.n	800236e <saveRMC+0x2d2>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8002368:	4648      	mov	r0, r9
 800236a:	f7ff f821 	bl	80013b0 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800236e:	f108 0801 	add.w	r8, r8, #1
 8002372:	e78d      	b.n	8002290 <saveRMC+0x1f4>
			count_shiftleft++;
 8002374:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <saveRMC+0x338>)
 8002376:	7813      	ldrb	r3, [r2, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	7013      	strb	r3, [r2, #0]
 800237c:	e797      	b.n	80022ae <saveRMC+0x212>
		is_flash_overflow = 0;
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e7b9      	b.n	80022f8 <saveRMC+0x25c>
 8002384:	200042b8 	.word	0x200042b8
 8002388:	0800e7e3 	.word	0x0800e7e3
 800238c:	20000008 	.word	0x20000008
 8002390:	200041b8 	.word	0x200041b8
 8002394:	2000301c 	.word	0x2000301c
 8002398:	20002d34 	.word	0x20002d34
 800239c:	0800e04f 	.word	0x0800e04f
 80023a0:	20000004 	.word	0x20000004
 80023a4:	20004238 	.word	0x20004238
 80023a8:	0800e97e 	.word	0x0800e97e
 80023ac:	0800e803 	.word	0x0800e803
 80023b0:	0800e994 	.word	0x0800e994
 80023b4:	200042c0 	.word	0x200042c0
 80023b8:	20001b34 	.word	0x20001b34
 80023bc:	20001d4c 	.word	0x20001d4c
 80023c0:	20001b38 	.word	0x20001b38
 80023c4:	0800e851 	.word	0x0800e851
 80023c8:	0800e898 	.word	0x0800e898
 80023cc:	20001b30 	.word	0x20001b30
 80023d0:	0800e8d5 	.word	0x0800e8d5
 80023d4:	20001d44 	.word	0x20001d44
 80023d8:	0800e921 	.word	0x0800e921
 80023dc:	0800e953 	.word	0x0800e953

080023e0 <parseRMCString>:
		printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
		osMessageQueuePut(RMC_MailQGSMIdHandle, mail_data, 0, 1000);
	}
}

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 80023e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e4:	b0d4      	sub	sp, #336	@ 0x150
 80023e6:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 80023e8:	22ff      	movs	r2, #255	@ 0xff
 80023ea:	4601      	mov	r1, r0
 80023ec:	a814      	add	r0, sp, #80	@ 0x50
 80023ee:	f007 ff14 	bl	800a21a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80023f2:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80023f4:	213b      	movs	r1, #59	@ 0x3b
 80023f6:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80023f8:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80023fc:	f007 ff20 	bl	800a240 <strrchr>
    if (lastSemicolon) {
 8002400:	b100      	cbz	r0, 8002404 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 8002402:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8002404:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8002408:	9309      	str	r3, [sp, #36]	@ 0x24
 800240a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800240e:	9308      	str	r3, [sp, #32]
 8002410:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 8002414:	9307      	str	r3, [sp, #28]
 8002416:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800241a:	9306      	str	r3, [sp, #24]
 800241c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8002420:	9305      	str	r3, [sp, #20]
 8002422:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8002426:	9304      	str	r3, [sp, #16]
 8002428:	f104 0308 	add.w	r3, r4, #8
 800242c:	9303      	str	r3, [sp, #12]
 800242e:	1d23      	adds	r3, r4, #4
 8002430:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002434:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8002438:	f104 0310 	add.w	r3, r4, #16
 800243c:	ad10      	add	r5, sp, #64	@ 0x40
 800243e:	ae0f      	add	r6, sp, #60	@ 0x3c
 8002440:	af0e      	add	r7, sp, #56	@ 0x38
 8002442:	f104 0218 	add.w	r2, r4, #24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4911      	ldr	r1, [pc, #68]	@ (8002490 <parseRMCString+0xb0>)
 800244a:	950d      	str	r5, [sp, #52]	@ 0x34
 800244c:	f104 0314 	add.w	r3, r4, #20
 8002450:	960c      	str	r6, [sp, #48]	@ 0x30
 8002452:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002454:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002458:	a814      	add	r0, sp, #80	@ 0x50
 800245a:	f007 fdb3 	bl	8009fc4 <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800245e:	490d      	ldr	r1, [pc, #52]	@ (8002494 <parseRMCString+0xb4>)
 8002460:	4640      	mov	r0, r8
 8002462:	f7fd feb5 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8002466:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800246a:	17d1      	asrs	r1, r2, #31
 800246c:	0409      	lsls	r1, r1, #16
 800246e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002472:	430b      	orrs	r3, r1
 8002474:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002476:	fab0 f080 	clz	r0, r0
 800247a:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800247c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002480:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8002484:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002488:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800248a:	b054      	add	sp, #336	@ 0x150
 800248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002490:	0800e9bd 	.word	0x0800e9bd
 8002494:	0800e0bd 	.word	0x0800e0bd

08002498 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8002498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249a:	460d      	mov	r5, r1
 800249c:	b0a7      	sub	sp, #156	@ 0x9c
	Uint32ToHex(addr, addr_out_flash, 8);
 800249e:	2208      	movs	r2, #8
 80024a0:	4942      	ldr	r1, [pc, #264]	@ (80025ac <readFlash+0x114>)
RMCSTRUCT readFlash(uint32_t addr){
 80024a2:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 80024a4:	4628      	mov	r0, r5
 80024a6:	f000 fd4d 	bl	8002f44 <Uint32ToHex>
	printf("Address received from FLASH: %s \n", addr_out_flash);
 80024aa:	4940      	ldr	r1, [pc, #256]	@ (80025ac <readFlash+0x114>)
 80024ac:	4840      	ldr	r0, [pc, #256]	@ (80025b0 <readFlash+0x118>)
 80024ae:	f007 fcbd 	bl	8009e2c <iprintf>
	W25_Reset();
 80024b2:	f7ff fb6e 	bl	8001b92 <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	493e      	ldr	r1, [pc, #248]	@ (80025b4 <readFlash+0x11c>)
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7ff fc8a 	bl	8001dd4 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 80024c0:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <readFlash+0x120>)
 80024c2:	aa07      	add	r2, sp, #28
 80024c4:	f103 0720 	add.w	r7, r3, #32
 80024c8:	4616      	mov	r6, r2
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	4615      	mov	r5, r2
 80024d0:	c503      	stmia	r5!, {r0, r1}
 80024d2:	3308      	adds	r3, #8
 80024d4:	42bb      	cmp	r3, r7
 80024d6:	462a      	mov	r2, r5
 80024d8:	d1f7      	bne.n	80024ca <readFlash+0x32>
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80024de:	4630      	mov	r0, r6
 80024e0:	f7fd fed6 	bl	8000290 <strlen>
 80024e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e8:	b282      	uxth	r2, r0
 80024ea:	4631      	mov	r1, r6
 80024ec:	4833      	ldr	r0, [pc, #204]	@ (80025bc <readFlash+0x124>)
 80024ee:	f003 fbc5 	bl	8005c7c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	492f      	ldr	r1, [pc, #188]	@ (80025b4 <readFlash+0x11c>)
 80024f8:	4830      	ldr	r0, [pc, #192]	@ (80025bc <readFlash+0x124>)
 80024fa:	2280      	movs	r2, #128	@ 0x80
 80024fc:	f003 fbbe 	bl	8005c7c <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 8002500:	2258      	movs	r2, #88	@ 0x58
 8002502:	2100      	movs	r1, #0
 8002504:	a810      	add	r0, sp, #64	@ 0x40
 8002506:	f007 fe61 	bl	800a1cc <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 800250a:	482a      	ldr	r0, [pc, #168]	@ (80025b4 <readFlash+0x11c>)
 800250c:	a910      	add	r1, sp, #64	@ 0x40
 800250e:	f7ff ff67 	bl	80023e0 <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 8002512:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <readFlash+0x11c>)
 8002514:	f7ff fc90 	bl	8001e38 <IsPageValid>
 8002518:	4a29      	ldr	r2, [pc, #164]	@ (80025c0 <readFlash+0x128>)
 800251a:	2800      	cmp	r0, #0
 800251c:	d141      	bne.n	80025a2 <readFlash+0x10a>
		is_read_flash_valid = 0;
 800251e:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 8002520:	901c      	str	r0, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 8002522:	4828      	ldr	r0, [pc, #160]	@ (80025c4 <readFlash+0x12c>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8002524:	f007 fcf2 	bl	8009f0c <puts>
	}

	printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8002528:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 800252c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800252e:	4826      	ldr	r0, [pc, #152]	@ (80025c8 <readFlash+0x130>)
 8002530:	f007 fc7c 	bl	8009e2c <iprintf>

	printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8002534:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	@ 0x44
 8002538:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800253a:	4824      	ldr	r0, [pc, #144]	@ (80025cc <readFlash+0x134>)
 800253c:	f007 fc76 	bl	8009e2c <iprintf>

	printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 8002540:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 8002544:	9304      	str	r3, [sp, #16]
 8002546:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 800254a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800254e:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	481e      	ldr	r0, [pc, #120]	@ (80025d0 <readFlash+0x138>)
 8002556:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 800255a:	f007 fc67 	bl	8009e2c <iprintf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	printf("Speed: %.2f\n", rmc.speed);
 800255e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8002560:	f7fe f802 	bl	8000568 <__aeabi_f2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	481a      	ldr	r0, [pc, #104]	@ (80025d4 <readFlash+0x13c>)
 800256a:	f007 fc5f 	bl	8009e2c <iprintf>

	printf("Course: %.2f\n", rmc.course);
 800256e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8002570:	f7fd fffa 	bl	8000568 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4817      	ldr	r0, [pc, #92]	@ (80025d8 <readFlash+0x140>)
 800257a:	f007 fc57 	bl	8009e2c <iprintf>

	printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 800257e:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <readFlash+0x144>)
 8002580:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <readFlash+0x148>)
 8002584:	4817      	ldr	r0, [pc, #92]	@ (80025e4 <readFlash+0x14c>)
 8002586:	2900      	cmp	r1, #0
 8002588:	bf0c      	ite	eq
 800258a:	4611      	moveq	r1, r2
 800258c:	4619      	movne	r1, r3
 800258e:	f007 fc4d 	bl	8009e2c <iprintf>

	return rmc;
 8002592:	2258      	movs	r2, #88	@ 0x58
 8002594:	a910      	add	r1, sp, #64	@ 0x40
 8002596:	4620      	mov	r0, r4
 8002598:	f008 fcc2 	bl	800af20 <memcpy>
}
 800259c:	4620      	mov	r0, r4
 800259e:	b027      	add	sp, #156	@ 0x9c
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 80025a2:	2301      	movs	r3, #1
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80025a4:	4810      	ldr	r0, [pc, #64]	@ (80025e8 <readFlash+0x150>)
		is_read_flash_valid = 1;
 80025a6:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 80025a8:	931c      	str	r3, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80025aa:	e7bb      	b.n	8002524 <readFlash+0x8c>
 80025ac:	2000301c 	.word	0x2000301c
 80025b0:	0800e9f7 	.word	0x0800e9f7
 80025b4:	20004238 	.word	0x20004238
 80025b8:	0800eb31 	.word	0x0800eb31
 80025bc:	20002d34 	.word	0x20002d34
 80025c0:	20000000 	.word	0x20000000
 80025c4:	0800ea19 	.word	0x0800ea19
 80025c8:	0800eac0 	.word	0x0800eac0
 80025cc:	0800ead6 	.word	0x0800ead6
 80025d0:	0800eaec 	.word	0x0800eaec
 80025d4:	0800eb08 	.word	0x0800eb08
 80025d8:	0800eb15 	.word	0x0800eb15
 80025dc:	0800e0bd 	.word	0x0800e0bd
 80025e0:	0800e0c3 	.word	0x0800e0c3
 80025e4:	0800eb23 	.word	0x0800eb23
 80025e8:	0800ea69 	.word	0x0800ea69

080025ec <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 80025ec:	b570      	push	{r4, r5, r6, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue

	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 80025ee:	486e      	ldr	r0, [pc, #440]	@ (80027a8 <receiveRMCDataFromGPS+0x1bc>)
 80025f0:	4d6e      	ldr	r5, [pc, #440]	@ (80027ac <receiveRMCDataFromGPS+0x1c0>)
 80025f2:	6800      	ldr	r0, [r0, #0]
 80025f4:	4629      	mov	r1, r5
void receiveRMCDataFromGPS(void) {
 80025f6:	b096      	sub	sp, #88	@ 0x58
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 80025f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025fc:	2200      	movs	r2, #0
 80025fe:	f003 fe77 	bl	80062f0 <osMessageQueueGet>
	if(status == osOK){
 8002602:	4601      	mov	r1, r0
 8002604:	2800      	cmp	r0, #0
 8002606:	f040 80c9 	bne.w	800279c <receiveRMCDataFromGPS+0x1b0>
		if(osMutexAcquire(myMutexHandle, osWaitForever) == osOK) {
 800260a:	4e69      	ldr	r6, [pc, #420]	@ (80027b0 <receiveRMCDataFromGPS+0x1c4>)
 800260c:	4c69      	ldr	r4, [pc, #420]	@ (80027b4 <receiveRMCDataFromGPS+0x1c8>)
 800260e:	6830      	ldr	r0, [r6, #0]
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	f003 fd80 	bl	8006118 <osMutexAcquire>
 8002618:	2800      	cmp	r0, #0
 800261a:	d127      	bne.n	800266c <receiveRMCDataFromGPS+0x80>
			printf("\nReceived  RMC Data SPI FLASH: \n");
 800261c:	4866      	ldr	r0, [pc, #408]	@ (80027b8 <receiveRMCDataFromGPS+0x1cc>)
 800261e:	f007 fc75 	bl	8009f0c <puts>
		//Sending DATA to GSM
			rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8002622:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8002626:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_flash.lcation.longitude = receivedDataRMCFLASH.lcation.longitude;
 800262a:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 800262e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_flash.speed = receivedDataRMCFLASH.speed;
 8002632:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002634:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_flash.course = receivedDataRMCFLASH.course;
 8002636:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002638:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_flash.lcation.NS = receivedDataRMCFLASH.lcation.NS;
 800263a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800263e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_flash.lcation.EW = receivedDataRMCFLASH.lcation.EW;
 8002642:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002646:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_flash.isValid = receivedDataRMCFLASH.isValid;
 800264a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800264c:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_flash.tim.hour = receivedDataRMCFLASH.tim.hour;
 800264e:	682b      	ldr	r3, [r5, #0]
 8002650:	6023      	str	r3, [r4, #0]
			rmc_flash.tim.min = receivedDataRMCFLASH.tim.min;
 8002652:	686b      	ldr	r3, [r5, #4]
 8002654:	6063      	str	r3, [r4, #4]
			rmc_flash.tim.sec = receivedDataRMCFLASH.tim.sec;
 8002656:	68ab      	ldr	r3, [r5, #8]
 8002658:	60a3      	str	r3, [r4, #8]
			rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 800265a:	69ab      	ldr	r3, [r5, #24]
 800265c:	61a3      	str	r3, [r4, #24]
			rmc_flash.date.Mon = receivedDataRMCFLASH.date.Mon;
 800265e:	696b      	ldr	r3, [r5, #20]
 8002660:	6163      	str	r3, [r4, #20]
			rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
			osMutexRelease(myMutexHandle);
 8002662:	6830      	ldr	r0, [r6, #0]
			rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 8002664:	692b      	ldr	r3, [r5, #16]
 8002666:	6123      	str	r3, [r4, #16]
			osMutexRelease(myMutexHandle);
 8002668:	f003 fd88 	bl	800617c <osMutexRelease>
		}
		if(rmc_flash.date.Yr >= 24){
 800266c:	69a3      	ldr	r3, [r4, #24]
 800266e:	2b17      	cmp	r3, #23
 8002670:	dd44      	ble.n	80026fc <receiveRMCDataFromGPS+0x110>
			countRMCReceived++;
 8002672:	4d52      	ldr	r5, [pc, #328]	@ (80027bc <receiveRMCDataFromGPS+0x1d0>)
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8002674:	4852      	ldr	r0, [pc, #328]	@ (80027c0 <receiveRMCDataFromGPS+0x1d4>)
			countRMCReceived++;
 8002676:	6829      	ldr	r1, [r5, #0]
 8002678:	3101      	adds	r1, #1
 800267a:	6029      	str	r1, [r5, #0]
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 800267c:	f007 fbd6 	bl	8009e2c <iprintf>


			printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8002680:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002684:	6821      	ldr	r1, [r4, #0]
 8002686:	484f      	ldr	r0, [pc, #316]	@ (80027c4 <receiveRMCDataFromGPS+0x1d8>)
 8002688:	f007 fbd0 	bl	8009e2c <iprintf>
//
//		printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 800268c:	494e      	ldr	r1, [pc, #312]	@ (80027c8 <receiveRMCDataFromGPS+0x1dc>)
 800268e:	4849      	ldr	r0, [pc, #292]	@ (80027b4 <receiveRMCDataFromGPS+0x1c8>)
 8002690:	2280      	movs	r2, #128	@ 0x80
 8002692:	f7ff fcad 	bl	8001ff0 <format_rmc_data>

			if(countRMCReceived == 28){
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	2b1c      	cmp	r3, #28
 800269a:	d131      	bne.n	8002700 <receiveRMCDataFromGPS+0x114>

				saveRMC();
 800269c:	f7ff fcfe 	bl	800209c <saveRMC>
				printf("---------------------Sending the current data----------------");
 80026a0:	484a      	ldr	r0, [pc, #296]	@ (80027cc <receiveRMCDataFromGPS+0x1e0>)
 80026a2:	f007 fbc3 	bl	8009e2c <iprintf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80026a6:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <receiveRMCDataFromGPS+0x1e4>)
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
				mail_gsm.rmc.speed = rmc_flash.speed;
 80026a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 80026ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 80026b0:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 80026b8:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 80026c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	601a      	str	r2, [r3, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 80026c8:	6862      	ldr	r2, [r4, #4]
 80026ca:	605a      	str	r2, [r3, #4]
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80026cc:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 80026d0:	68a2      	ldr	r2, [r4, #8]
 80026d2:	609a      	str	r2, [r3, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 80026d4:	69a2      	ldr	r2, [r4, #24]
 80026d6:	619a      	str	r2, [r3, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 80026d8:	6962      	ldr	r2, [r4, #20]
 80026da:	615a      	str	r2, [r3, #20]
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80026dc:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 80026e0:	6922      	ldr	r2, [r4, #16]
 80026e2:	611a      	str	r2, [r3, #16]
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 80026e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
				mail_gsm.address = current_addr;
 80026e8:	4a3a      	ldr	r2, [pc, #232]	@ (80027d4 <receiveRMCDataFromGPS+0x1e8>)
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 80026ea:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
				mail_gsm.address = current_addr;
 80026ee:	6811      	ldr	r1, [r2, #0]

				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 80026f0:	4839      	ldr	r0, [pc, #228]	@ (80027d8 <receiveRMCDataFromGPS+0x1ec>)
				mail_gsm.address = current_addr;
 80026f2:	6599      	str	r1, [r3, #88]	@ 0x58
				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 80026f4:	f007 fb9a 	bl	8009e2c <iprintf>
//				sendRMCDataWithAddrToGSM(&mail_gsm);
				countRMCReceived = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	602b      	str	r3, [r5, #0]
		}
	}
	else{
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
	}
}
 80026fc:	b016      	add	sp, #88	@ 0x58
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
				printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 8002700:	4836      	ldr	r0, [pc, #216]	@ (80027dc <receiveRMCDataFromGPS+0x1f0>)
 8002702:	f007 fc03 	bl	8009f0c <puts>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8002706:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <receiveRMCDataFromGPS+0x1f4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1f6      	bne.n	80026fc <receiveRMCDataFromGPS+0x110>
 800270e:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <receiveRMCDataFromGPS+0x1f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <receiveRMCDataFromGPS+0x110>
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <receiveRMCDataFromGPS+0x1fc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d1ee      	bne.n	80026fc <receiveRMCDataFromGPS+0x110>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 800271e:	4c33      	ldr	r4, [pc, #204]	@ (80027ec <receiveRMCDataFromGPS+0x200>)
 8002720:	4933      	ldr	r1, [pc, #204]	@ (80027f0 <receiveRMCDataFromGPS+0x204>)
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	f7fe fe1e 	bl	8001364 <checkAddrExistInQueue>
 8002728:	b1b0      	cbz	r0, 8002758 <receiveRMCDataFromGPS+0x16c>
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002730:	d812      	bhi.n	8002758 <receiveRMCDataFromGPS+0x16c>
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8002732:	2208      	movs	r2, #8
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	492f      	ldr	r1, [pc, #188]	@ (80027f4 <receiveRMCDataFromGPS+0x208>)
 8002738:	f000 fc04 	bl	8002f44 <Uint32ToHex>
						printf("\n-------SKIPPING address cause it was sent already: %s--------\n", addr_out_flash);
 800273c:	492d      	ldr	r1, [pc, #180]	@ (80027f4 <receiveRMCDataFromGPS+0x208>)
 800273e:	482e      	ldr	r0, [pc, #184]	@ (80027f8 <receiveRMCDataFromGPS+0x20c>)
 8002740:	f007 fb74 	bl	8009e2c <iprintf>
						if(start_addr_disconnect <= (current_addr - 128)) start_addr_disconnect +=128;
 8002744:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <receiveRMCDataFromGPS+0x1e8>)
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3b80      	subs	r3, #128	@ 0x80
 800274c:	4293      	cmp	r3, r2
 800274e:	d3d5      	bcc.n	80026fc <receiveRMCDataFromGPS+0x110>
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	3380      	adds	r3, #128	@ 0x80
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	e7d1      	b.n	80026fc <receiveRMCDataFromGPS+0x110>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8002758:	4a28      	ldr	r2, [pc, #160]	@ (80027fc <receiveRMCDataFromGPS+0x210>)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4e28      	ldr	r6, [pc, #160]	@ (8002800 <receiveRMCDataFromGPS+0x214>)
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	4924      	ldr	r1, [pc, #144]	@ (80027f4 <receiveRMCDataFromGPS+0x208>)
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8002764:	4d1a      	ldr	r5, [pc, #104]	@ (80027d0 <receiveRMCDataFromGPS+0x1e4>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8002766:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 800276a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800276e:	bf38      	it	cc
 8002770:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8002774:	2208      	movs	r2, #8
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8002776:	6033      	str	r3, [r6, #0]
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8002778:	f000 fbe4 	bl	8002f44 <Uint32ToHex>
						printf("\n---------------- Sending data in disconnected phase to GSM: %s -------------------\n", addr_out_flash);
 800277c:	491d      	ldr	r1, [pc, #116]	@ (80027f4 <receiveRMCDataFromGPS+0x208>)
 800277e:	4821      	ldr	r0, [pc, #132]	@ (8002804 <receiveRMCDataFromGPS+0x218>)
 8002780:	f007 fb54 	bl	8009e2c <iprintf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8002784:	6831      	ldr	r1, [r6, #0]
 8002786:	4668      	mov	r0, sp
 8002788:	f7ff fe86 	bl	8002498 <readFlash>
 800278c:	2258      	movs	r2, #88	@ 0x58
 800278e:	4669      	mov	r1, sp
 8002790:	4628      	mov	r0, r5
 8002792:	f008 fbc5 	bl	800af20 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	65ab      	str	r3, [r5, #88]	@ 0x58
 800279a:	e7af      	b.n	80026fc <receiveRMCDataFromGPS+0x110>
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 800279c:	481a      	ldr	r0, [pc, #104]	@ (8002808 <receiveRMCDataFromGPS+0x21c>)
}
 800279e:	b016      	add	sp, #88	@ 0x58
 80027a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 80027a4:	f007 bb42 	b.w	8009e2c <iprintf>
 80027a8:	20002b08 	.word	0x20002b08
 80027ac:	20003028 	.word	0x20003028
 80027b0:	20001d54 	.word	0x20001d54
 80027b4:	200030e0 	.word	0x200030e0
 80027b8:	0800eb55 	.word	0x0800eb55
 80027bc:	20003018 	.word	0x20003018
 80027c0:	0800eb75 	.word	0x0800eb75
 80027c4:	0800ebdd 	.word	0x0800ebdd
 80027c8:	200041b8 	.word	0x200041b8
 80027cc:	0800ec0c 	.word	0x0800ec0c
 80027d0:	20003080 	.word	0x20003080
 80027d4:	20000004 	.word	0x20000004
 80027d8:	0800ec4a 	.word	0x0800ec4a
 80027dc:	0800ec94 	.word	0x0800ec94
 80027e0:	20001d4c 	.word	0x20001d4c
 80027e4:	20001d50 	.word	0x20001d50
 80027e8:	20001d48 	.word	0x20001d48
 80027ec:	20001b34 	.word	0x20001b34
 80027f0:	20001b38 	.word	0x20001b38
 80027f4:	2000301c 	.word	0x2000301c
 80027f8:	0800ecef 	.word	0x0800ecef
 80027fc:	20001d44 	.word	0x20001d44
 8002800:	200042bc 	.word	0x200042bc
 8002804:	0800ed2f 	.word	0x0800ed2f
 8002808:	0800ed84 	.word	0x0800ed84
 800280c:	00000000 	.word	0x00000000

08002810 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8002814:	4844      	ldr	r0, [pc, #272]	@ (8002928 <StartSpiFlash+0x118>)
//	myMutex = osMutexNew(NULL);  // NULL means default attributes
//	if (myMutex == NULL) {
//		printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
//	}
//	printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
	rmc_saved = readFlash(0x9000);
 8002816:	4c45      	ldr	r4, [pc, #276]	@ (800292c <StartSpiFlash+0x11c>)
	current_addr = address_rmc;
 8002818:	4e45      	ldr	r6, [pc, #276]	@ (8002930 <StartSpiFlash+0x120>)
{
 800281a:	b09c      	sub	sp, #112	@ 0x70
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800281c:	f007 fb76 	bl	8009f0c <puts>
	current_addr = address_rmc;
 8002820:	4b44      	ldr	r3, [pc, #272]	@ (8002934 <StartSpiFlash+0x124>)
	rmc_saved = readFlash(0x9000);
 8002822:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
	current_addr = address_rmc;
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6033      	str	r3, [r6, #0]
	rmc_saved = readFlash(0x9000);
 800282a:	4668      	mov	r0, sp
 800282c:	f7ff fe34 	bl	8002498 <readFlash>
 8002830:	2258      	movs	r2, #88	@ 0x58
 8002832:	4669      	mov	r1, sp
 8002834:	4620      	mov	r0, r4
 8002836:	f008 fb73 	bl	800af20 <memcpy>
	printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 800283a:	483f      	ldr	r0, [pc, #252]	@ (8002938 <StartSpiFlash+0x128>)
 800283c:	f007 fb66 	bl	8009f0c <puts>
	if(rmc_saved.isValid == 0){
 8002840:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8002842:	b9f5      	cbnz	r5, 8002882 <StartSpiFlash+0x72>
		printf("There is not back up GPS from FLASH");
 8002844:	483d      	ldr	r0, [pc, #244]	@ (800293c <StartSpiFlash+0x12c>)
 8002846:	f007 faf1 	bl	8009e2c <iprintf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 800284a:	a333      	add	r3, pc, #204	@ (adr r3, 8002918 <StartSpiFlash+0x108>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 8002854:	a332      	add	r3, pc, #200	@ (adr r3, 8002920 <StartSpiFlash+0x110>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 800285e:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <StartSpiFlash+0x130>)
 8002860:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <StartSpiFlash+0x134>)
 8002864:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 8002866:	234e      	movs	r3, #78	@ 0x4e
 8002868:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 800286c:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 8002870:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 8002872:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 8002876:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 800287a:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 800287c:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 800287e:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 8002880:	61a5      	str	r5, [r4, #24]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002882:	4f31      	ldr	r7, [pc, #196]	@ (8002948 <StartSpiFlash+0x138>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002884:	4d31      	ldr	r5, [pc, #196]	@ (800294c <StartSpiFlash+0x13c>)
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8002886:	4c32      	ldr	r4, [pc, #200]	@ (8002950 <StartSpiFlash+0x140>)
		osDelay(250);
 8002888:	20fa      	movs	r0, #250	@ 0xfa
 800288a:	f003 fbe7 	bl	800605c <osDelay>
		printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 800288e:	4831      	ldr	r0, [pc, #196]	@ (8002954 <StartSpiFlash+0x144>)
 8002890:	f007 fb3c 	bl	8009f0c <puts>
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f003 fbcd 	bl	8006034 <osThreadGetStackSpace>
		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 800289a:	6821      	ldr	r1, [r4, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 800289c:	4602      	mov	r2, r0
		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 800289e:	482e      	ldr	r0, [pc, #184]	@ (8002958 <StartSpiFlash+0x148>)
 80028a0:	f007 fac4 	bl	8009e2c <iprintf>
		W25_Reset();
 80028a4:	f7ff f975 	bl	8001b92 <W25_Reset>
		W25_ReadJedecID();
 80028a8:	f7ff f9a0 	bl	8001bec <W25_ReadJedecID>
		W25_Reset();
 80028ac:	f7ff f971 	bl	8001b92 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80028b0:	2280      	movs	r2, #128	@ 0x80
 80028b2:	6830      	ldr	r0, [r6, #0]
 80028b4:	4639      	mov	r1, r7
 80028b6:	f7ff fa8d 	bl	8001dd4 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 80028ba:	4b28      	ldr	r3, [pc, #160]	@ (800295c <StartSpiFlash+0x14c>)
 80028bc:	aa16      	add	r2, sp, #88	@ 0x58
 80028be:	f103 0c10 	add.w	ip, r3, #16
 80028c2:	4690      	mov	r8, r2
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	4614      	mov	r4, r2
 80028ca:	c403      	stmia	r4!, {r0, r1}
 80028cc:	3308      	adds	r3, #8
 80028ce:	4563      	cmp	r3, ip
 80028d0:	4622      	mov	r2, r4
 80028d2:	d1f7      	bne.n	80028c4 <StartSpiFlash+0xb4>
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	6020      	str	r0, [r4, #0]
 80028da:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80028dc:	4640      	mov	r0, r8
 80028de:	f7fd fcd7 	bl	8000290 <strlen>
 80028e2:	4641      	mov	r1, r8
 80028e4:	b282      	uxth	r2, r0
 80028e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ea:	4628      	mov	r0, r5
 80028ec:	f003 f9c6 	bl	8005c7c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80028f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	4639      	mov	r1, r7
 80028f8:	4628      	mov	r0, r5
 80028fa:	f003 f9bf 	bl	8005c7c <HAL_UART_Transmit>
		printf("\n------------- Current address FLASH: %08lx -------------\n", current_addr);
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	4817      	ldr	r0, [pc, #92]	@ (8002960 <StartSpiFlash+0x150>)
 8002902:	f007 fa93 	bl	8009e2c <iprintf>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8002906:	f7ff fe71 	bl	80025ec <receiveRMCDataFromGPS>
		printf("\n\n");
 800290a:	4816      	ldr	r0, [pc, #88]	@ (8002964 <StartSpiFlash+0x154>)
 800290c:	f007 fafe 	bl	8009f0c <puts>
		osDelay(250);
 8002910:	20fa      	movs	r0, #250	@ 0xfa
 8002912:	f003 fba3 	bl	800605c <osDelay>
	for(;;){
 8002916:	e7b6      	b.n	8002886 <StartSpiFlash+0x76>
 8002918:	5eaab042 	.word	0x5eaab042
 800291c:	4034ff7e 	.word	0x4034ff7e
 8002920:	48451330 	.word	0x48451330
 8002924:	405a72dd 	.word	0x405a72dd
 8002928:	0800edeb 	.word	0x0800edeb
 800292c:	20000370 	.word	0x20000370
 8002930:	20000004 	.word	0x20000004
 8002934:	20000008 	.word	0x20000008
 8002938:	0800ee42 	.word	0x0800ee42
 800293c:	0800ee8e 	.word	0x0800ee8e
 8002940:	41b33333 	.word	0x41b33333
 8002944:	41f40000 	.word	0x41f40000
 8002948:	20004238 	.word	0x20004238
 800294c:	20002d34 	.word	0x20002d34
 8002950:	20002b10 	.word	0x20002b10
 8002954:	0800eeb2 	.word	0x0800eeb2
 8002958:	0800ef03 	.word	0x0800ef03
 800295c:	0800e97e 	.word	0x0800e97e
 8002960:	0800ef51 	.word	0x0800ef51
 8002964:	0800e91f 	.word	0x0800e91f

08002968 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_MspInit+0x38>)
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	699a      	ldr	r2, [r3, #24]
{
 8002974:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	f002 0201 	and.w	r2, r2, #1
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002984:	61da      	str	r2, [r3, #28]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	210f      	movs	r1, #15
 8002994:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002998:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800299a:	f001 b8e9 	b.w	8003b70 <HAL_NVIC_SetPriority>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	2214      	movs	r2, #20
{
 80029a8:	b08a      	sub	sp, #40	@ 0x28
 80029aa:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	2100      	movs	r1, #0
 80029ae:	eb0d 0002 	add.w	r0, sp, r2
 80029b2:	f007 fc0b 	bl	800a1cc <memset>
  if(hadc->Instance==ADC2)
 80029b6:	682b      	ldr	r3, [r5, #0]
 80029b8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ab0 <HAL_ADC_MspInit+0x10c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d137      	bne.n	8002a2e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029be:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab4 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80029c0:	4c3d      	ldr	r4, [pc, #244]	@ (8002ab8 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029c8:	615a      	str	r2, [r3, #20]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80029d0:	9201      	str	r2, [sp, #4]
 80029d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e6:	2620      	movs	r6, #32
 80029e8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ee:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f0:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f001 f9c0 	bl	8003d78 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fc:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8002acc <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a00:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a04:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a06:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002a0a:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a10:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002a14:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a18:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002a1a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002a1c:	f001 f908 	bl	8003c30 <HAL_DMA_Init>
 8002a20:	b108      	cbz	r0, 8002a26 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8002a22:	f7ff f86e 	bl	8001b02 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002a26:	63ac      	str	r4, [r5, #56]	@ 0x38
 8002a28:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a2a:	b00a      	add	sp, #40	@ 0x28
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8002a2e:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <HAL_ADC_MspInit+0x118>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d1fa      	bne.n	8002a2a <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002a34:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8002a36:	4c22      	ldr	r4, [pc, #136]	@ (8002ac0 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002a38:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	4822      	ldr	r0, [pc, #136]	@ (8002ac4 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002a3c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002a40:	615a      	str	r2, [r3, #20]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002a48:	9203      	str	r2, [sp, #12]
 8002a4a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f001 f986 	bl	8003d78 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a6c:	2080      	movs	r0, #128	@ 0x80
 8002a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4915      	ldr	r1, [pc, #84]	@ (8002ac8 <HAL_ADC_MspInit+0x124>)
 8002a74:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a76:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a7a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8002a7e:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a80:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a82:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a86:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8a:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002a8c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002a8e:	f001 f8cf 	bl	8003c30 <HAL_DMA_Init>
 8002a92:	b108      	cbz	r0, 8002a98 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8002a94:	f7ff f835 	bl	8001b02 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002a98:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002aa0:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002aa2:	f001 f865 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002aa6:	202f      	movs	r0, #47	@ 0x2f
 8002aa8:	f001 f894 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
}
 8002aac:	e7bd      	b.n	8002a2a <HAL_ADC_MspInit+0x86>
 8002aae:	bf00      	nop
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	20002f34 	.word	0x20002f34
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	20002ef0 	.word	0x20002ef0
 8002ac4:	48000400 	.word	0x48000400
 8002ac8:	40020458 	.word	0x40020458
 8002acc:	40020408 	.word	0x40020408

08002ad0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8002ad0:	6802      	ldr	r2, [r0, #0]
 8002ad2:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <HAL_RTC_MspInit+0x20>)
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d10a      	bne.n	8002aee <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002adc:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <HAL_RTC_MspInit+0x24>)
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002aee:	4770      	bx	lr
 8002af0:	40002800 	.word	0x40002800
 8002af4:	10908100 	.word	0x10908100

08002af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	2214      	movs	r2, #20
{
 8002afc:	b08a      	sub	sp, #40	@ 0x28
 8002afe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	2100      	movs	r1, #0
 8002b02:	eb0d 0002 	add.w	r0, sp, r2
 8002b06:	f007 fb61 	bl	800a1cc <memset>
  if(hspi->Instance==SPI1)
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_SPI_MspInit+0x90>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d120      	bne.n	8002b54 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b12:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <HAL_SPI_MspInit+0x94>)
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b22:	9201      	str	r2, [sp, #4]
 8002b24:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002b2c:	615a      	str	r2, [r3, #20]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b38:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b3a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b3e:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b42:	2305      	movs	r3, #5
 8002b44:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b48:	4811      	ldr	r0, [pc, #68]	@ (8002b90 <HAL_SPI_MspInit+0x98>)
 8002b4a:	a905      	add	r1, sp, #20
 8002b4c:	f001 f914 	bl	8003d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b50:	b00a      	add	sp, #40	@ 0x28
 8002b52:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8002b54:	4a0f      	ldr	r2, [pc, #60]	@ (8002b94 <HAL_SPI_MspInit+0x9c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d1fa      	bne.n	8002b50 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <HAL_SPI_MspInit+0x94>)
 8002b5c:	69da      	ldr	r2, [r3, #28]
 8002b5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002b6a:	9203      	str	r2, [sp, #12]
 8002b6c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002b74:	615a      	str	r2, [r3, #20]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b80:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002b84:	e7d9      	b.n	8002b3a <HAL_SPI_MspInit+0x42>
 8002b86:	bf00      	nop
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	48000400 	.word	0x48000400
 8002b94:	40003800 	.word	0x40003800

08002b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b98:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x3c>)
 8002b9c:	6802      	ldr	r2, [r0, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d115      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba2:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ba6:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	f042 0202 	orr.w	r2, r2, #2
 8002bae:	61da      	str	r2, [r3, #28]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bbc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002bbe:	f000 ffd7 	bl	8003b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bc2:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002bc4:	b003      	add	sp, #12
 8002bc6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bca:	f001 b803 	b.w	8003bd4 <HAL_NVIC_EnableIRQ>
}
 8002bce:	b003      	add	sp, #12
 8002bd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd8:	b530      	push	{r4, r5, lr}
 8002bda:	4605      	mov	r5, r0
 8002bdc:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bde:	2214      	movs	r2, #20
 8002be0:	2100      	movs	r1, #0
 8002be2:	a807      	add	r0, sp, #28
 8002be4:	f007 faf2 	bl	800a1cc <memset>
  if(huart->Instance==USART1)
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	4a59      	ldr	r2, [pc, #356]	@ (8002d50 <HAL_UART_MspInit+0x178>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d14d      	bne.n	8002c8c <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf0:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002bf2:	4c59      	ldr	r4, [pc, #356]	@ (8002d58 <HAL_UART_MspInit+0x180>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bfa:	619a      	str	r2, [r3, #24]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002c02:	9201      	str	r2, [sp, #4]
 8002c04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c14:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c22:	2103      	movs	r1, #3
 8002c24:	2307      	movs	r3, #7
 8002c26:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2e:	a907      	add	r1, sp, #28
 8002c30:	f001 f8a2 	bl	8003d78 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	4849      	ldr	r0, [pc, #292]	@ (8002d5c <HAL_UART_MspInit+0x184>)
 8002c36:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c38:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c3e:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c42:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c44:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c46:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4c:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c4e:	f000 ffef 	bl	8003c30 <HAL_DMA_Init>
 8002c52:	b108      	cbz	r0, 8002c58 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002c54:	f7fe ff55 	bl	8001b02 <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c58:	f8df e124 	ldr.w	lr, [pc, #292]	@ 8002d80 <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c5c:	676c      	str	r4, [r5, #116]	@ 0x74
 8002c5e:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c60:	4c3f      	ldr	r4, [pc, #252]	@ (8002d60 <HAL_UART_MspInit+0x188>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c62:	2310      	movs	r3, #16
 8002c64:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c68:	2280      	movs	r2, #128	@ 0x80
 8002c6a:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c6c:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c72:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c76:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c7a:	f000 ffd9 	bl	8003c30 <HAL_DMA_Init>
 8002c7e:	b108      	cbz	r0, 8002c84 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8002c80:	f7fe ff3f 	bl	8001b02 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002c84:	672c      	str	r4, [r5, #112]	@ 0x70
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c86:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c88:	b00d      	add	sp, #52	@ 0x34
 8002c8a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8002c8c:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_UART_MspInit+0x18c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d137      	bne.n	8002d02 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c92:	4b30      	ldr	r3, [pc, #192]	@ (8002d54 <HAL_UART_MspInit+0x17c>)
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002ca2:	9203      	str	r2, [sp, #12]
 8002ca4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002cac:	615a      	str	r2, [r3, #20]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	240c      	movs	r4, #12
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cc0:	f04f 0c03 	mov.w	ip, #3
 8002cc4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	a907      	add	r1, sp, #28
 8002cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ccc:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002cd0:	4c25      	ldr	r4, [pc, #148]	@ (8002d68 <HAL_UART_MspInit+0x190>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f001 f851 	bl	8003d78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002cd6:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_UART_MspInit+0x194>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002cd8:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cdc:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cde:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce2:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce6:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cee:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f000 ff9c 	bl	8003c30 <HAL_DMA_Init>
 8002cf8:	b108      	cbz	r0, 8002cfe <HAL_UART_MspInit+0x126>
      Error_Handler();
 8002cfa:	f7fe ff02 	bl	8001b02 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002cfe:	676c      	str	r4, [r5, #116]	@ 0x74
 8002d00:	e7c1      	b.n	8002c86 <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8002d02:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <HAL_UART_MspInit+0x198>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d1bf      	bne.n	8002c88 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_UART_MspInit+0x17c>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002d0a:	4c1a      	ldr	r4, [pc, #104]	@ (8002d74 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d12:	61da      	str	r2, [r3, #28]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002d1a:	9205      	str	r2, [sp, #20]
 8002d1c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d24:	615a      	str	r2, [r3, #20]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2c:	9306      	str	r3, [sp, #24]
 8002d2e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002d34:	2302      	movs	r3, #2
 8002d36:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	a907      	add	r1, sp, #28
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <HAL_UART_MspInit+0x1a0>)
 8002d46:	f001 f817 	bl	8003d78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_UART_MspInit+0x1a4>)
 8002d4c:	e7c4      	b.n	8002cd8 <HAL_UART_MspInit+0x100>
 8002d4e:	bf00      	nop
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	20002be0 	.word	0x20002be0
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	20002b9c 	.word	0x20002b9c
 8002d64:	40004400 	.word	0x40004400
 8002d68:	20002b58 	.word	0x20002b58
 8002d6c:	4002006c 	.word	0x4002006c
 8002d70:	40004800 	.word	0x40004800
 8002d74:	20002b14 	.word	0x20002b14
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	40020030 	.word	0x40020030
 8002d80:	40020044 	.word	0x40020044

08002d84 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_InitTick+0x88>)
{
 8002d86:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	61da      	str	r2, [r3, #28]
 8002d90:	69db      	ldr	r3, [r3, #28]
{
 8002d92:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	9302      	str	r3, [sp, #8]
{
 8002d9a:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d9c:	a901      	add	r1, sp, #4
 8002d9e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002da0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002da2:	f001 fc13 	bl	80045cc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002da6:	9b06      	ldr	r3, [sp, #24]
 8002da8:	bb53      	cbnz	r3, 8002e00 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002daa:	f001 fbdf 	bl	800456c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002dae:	4e18      	ldr	r6, [pc, #96]	@ (8002e10 <HAL_InitTick+0x8c>)
 8002db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002db4:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002db6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002dba:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_InitTick+0x90>)
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002dc4:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8002dc6:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dcc:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8002dd0:	f002 fc18 	bl	8005604 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	b980      	cbnz	r0, 8002dfa <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f002 fad5 	bl	8005388 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002dde:	4604      	mov	r4, r0
 8002de0:	b958      	cbnz	r0, 8002dfa <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002de2:	201c      	movs	r0, #28
 8002de4:	f000 fef6 	bl	8003bd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de8:	2d0f      	cmp	r5, #15
 8002dea:	d80d      	bhi.n	8002e08 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002dec:	4622      	mov	r2, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	201c      	movs	r0, #28
 8002df2:	f000 febd 	bl	8003b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_InitTick+0x94>)
 8002df8:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	b008      	add	sp, #32
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e00:	f001 fbb4 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8002e04:	0040      	lsls	r0, r0, #1
 8002e06:	e7d2      	b.n	8002dae <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002e08:	2401      	movs	r4, #1
 8002e0a:	e7f6      	b.n	8002dfa <HAL_InitTick+0x76>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	200042c4 	.word	0x200042c4
 8002e14:	000f4240 	.word	0x000f4240
 8002e18:	20000018 	.word	0x20000018

08002e1c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e1c:	e7fe      	b.n	8002e1c <NMI_Handler>

08002e1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler>

08002e20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <MemManage_Handler>

08002e22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <BusFault_Handler>

08002e24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler>

08002e26 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e26:	4770      	bx	lr

08002e28 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e28:	4801      	ldr	r0, [pc, #4]	@ (8002e30 <DMA1_Channel3_IRQHandler+0x8>)
 8002e2a:	f000 bf5e 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e2e:	bf00      	nop
 8002e30:	20002b14 	.word	0x20002b14

08002e34 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e34:	4801      	ldr	r0, [pc, #4]	@ (8002e3c <DMA1_Channel4_IRQHandler+0x8>)
 8002e36:	f000 bf58 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e3a:	bf00      	nop
 8002e3c:	20002b9c 	.word	0x20002b9c

08002e40 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e40:	4801      	ldr	r0, [pc, #4]	@ (8002e48 <DMA1_Channel5_IRQHandler+0x8>)
 8002e42:	f000 bf52 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e46:	bf00      	nop
 8002e48:	20002be0 	.word	0x20002be0

08002e4c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e4c:	4801      	ldr	r0, [pc, #4]	@ (8002e54 <DMA1_Channel6_IRQHandler+0x8>)
 8002e4e:	f000 bf4c 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e52:	bf00      	nop
 8002e54:	20002b58 	.word	0x20002b58

08002e58 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e58:	4801      	ldr	r0, [pc, #4]	@ (8002e60 <TIM2_IRQHandler+0x8>)
 8002e5a:	f002 bacf 	b.w	80053fc <HAL_TIM_IRQHandler>
 8002e5e:	bf00      	nop
 8002e60:	200042c4 	.word	0x200042c4

08002e64 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e64:	4801      	ldr	r0, [pc, #4]	@ (8002e6c <TIM3_IRQHandler+0x8>)
 8002e66:	f002 bac9 	b.w	80053fc <HAL_TIM_IRQHandler>
 8002e6a:	bf00      	nop
 8002e6c:	20002dbc 	.word	0x20002dbc

08002e70 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002e70:	4801      	ldr	r0, [pc, #4]	@ (8002e78 <ADC3_IRQHandler+0x8>)
 8002e72:	f000 ba81 	b.w	8003378 <HAL_ADC_IRQHandler>
 8002e76:	bf00      	nop
 8002e78:	20002f78 	.word	0x20002f78

08002e7c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e7c:	4801      	ldr	r0, [pc, #4]	@ (8002e84 <DMA2_Channel1_IRQHandler+0x8>)
 8002e7e:	f000 bf34 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e82:	bf00      	nop
 8002e84:	20002f34 	.word	0x20002f34

08002e88 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002e88:	4801      	ldr	r0, [pc, #4]	@ (8002e90 <DMA2_Channel5_IRQHandler+0x8>)
 8002e8a:	f000 bf2e 	b.w	8003cea <HAL_DMA_IRQHandler>
 8002e8e:	bf00      	nop
 8002e90:	20002ef0 	.word	0x20002ef0

08002e94 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002e94:	2001      	movs	r0, #1
 8002e96:	4770      	bx	lr

08002e98 <_kill>:

int _kill(int pid, int sig)
{
 8002e98:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9a:	f008 f80f 	bl	800aebc <__errno>
 8002e9e:	2316      	movs	r3, #22
 8002ea0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea6:	bd08      	pop	{r3, pc}

08002ea8 <_exit>:

void _exit (int status)
{
 8002ea8:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002eaa:	f008 f807 	bl	800aebc <__errno>
 8002eae:	2316      	movs	r3, #22
 8002eb0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002eb2:	e7fe      	b.n	8002eb2 <_exit+0xa>

08002eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	460d      	mov	r5, r1
 8002eb8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	460e      	mov	r6, r1
 8002ebc:	1b73      	subs	r3, r6, r5
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	dc01      	bgt.n	8002ec6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002ec6:	f3af 8000 	nop.w
 8002eca:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	e7f5      	b.n	8002ebc <_read+0x8>

08002ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	460d      	mov	r5, r1
 8002ed4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	460e      	mov	r6, r1
 8002ed8:	1b73      	subs	r3, r6, r5
 8002eda:	429c      	cmp	r4, r3
 8002edc:	dc01      	bgt.n	8002ee2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002ede:	4620      	mov	r0, r4
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002ee2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002ee6:	f7fe faf5 	bl	80014d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	e7f5      	b.n	8002ed8 <_write+0x8>

08002eec <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	4770      	bx	lr

08002ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002ef8:	2000      	movs	r0, #0
 8002efa:	4770      	bx	lr

08002efc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002efc:	2001      	movs	r0, #1
 8002efe:	4770      	bx	lr

08002f00 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002f00:	2000      	movs	r0, #0
 8002f02:	4770      	bx	lr

08002f04 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f04:	4a0b      	ldr	r2, [pc, #44]	@ (8002f34 <_sbrk+0x30>)
 8002f06:	6811      	ldr	r1, [r2, #0]
{
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002f0c:	b909      	cbnz	r1, 8002f12 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002f0e:	490a      	ldr	r1, [pc, #40]	@ (8002f38 <_sbrk+0x34>)
 8002f10:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f12:	6810      	ldr	r0, [r2, #0]
 8002f14:	4909      	ldr	r1, [pc, #36]	@ (8002f3c <_sbrk+0x38>)
 8002f16:	4c0a      	ldr	r4, [pc, #40]	@ (8002f40 <_sbrk+0x3c>)
 8002f18:	4403      	add	r3, r0
 8002f1a:	1b09      	subs	r1, r1, r4
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d906      	bls.n	8002f2e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002f20:	f007 ffcc 	bl	800aebc <__errno>
 8002f24:	230c      	movs	r3, #12
 8002f26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002f2c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002f2e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002f30:	e7fc      	b.n	8002f2c <_sbrk+0x28>
 8002f32:	bf00      	nop
 8002f34:	20004314 	.word	0x20004314
 8002f38:	200095e0 	.word	0x200095e0
 8002f3c:	2000a000 	.word	0x2000a000
 8002f40:	00000400 	.word	0x00000400

08002f44 <Uint32ToHex>:

uint32_t current_addr_debug = DEBUG_START_ADDRESS;
uint8_t output_debug_buffer[512] = {0};


void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 8002f44:	b530      	push	{r4, r5, lr}
 8002f46:	1e54      	subs	r4, r2, #1
 8002f48:	1e4d      	subs	r5, r1, #1
 8002f4a:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 8002f4c:	1d23      	adds	r3, r4, #4
 8002f4e:	d102      	bne.n	8002f56 <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 8002f50:	2300      	movs	r3, #0
 8002f52:	548b      	strb	r3, [r1, r2]
}
 8002f54:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 8002f56:	fa20 f304 	lsr.w	r3, r0, r4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	bf94      	ite	ls
 8002f62:	3330      	addls	r3, #48	@ 0x30
 8002f64:	3337      	addhi	r3, #55	@ 0x37
 8002f66:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 8002f6a:	3c04      	subs	r4, #4
 8002f6c:	e7ee      	b.n	8002f4c <Uint32ToHex+0x8>
	...

08002f70 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f70:	4a03      	ldr	r2, [pc, #12]	@ (8002f80 <SystemInit+0x10>)
 8002f72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fbc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f88:	f7ff fff2 	bl	8002f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f8c:	480c      	ldr	r0, [pc, #48]	@ (8002fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f8e:	490d      	ldr	r1, [pc, #52]	@ (8002fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f90:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc8 <LoopForever+0xe>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd0 <LoopForever+0x16>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fb2:	f007 ff89 	bl	800aec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fb6:	f7fe fb5f 	bl	8001678 <main>

08002fba <LoopForever>:

LoopForever:
    b LoopForever
 8002fba:	e7fe      	b.n	8002fba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002fc8:	0800f530 	.word	0x0800f530
  ldr r2, =_sbss
 8002fcc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002fd0:	200095dc 	.word	0x200095dc

08002fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <ADC1_2_IRQHandler>

08002fd6 <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8002fd6:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd8:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fda:	f7fe fd92 	bl	8001b02 <Error_Handler>
 8002fde:	e7fe      	b.n	8002fde <__cxa_guard_abort.part.0+0x8>

08002fe0 <stm32_lock_acquire>:
{
 8002fe0:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002fe2:	7a03      	ldrb	r3, [r0, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d903      	bls.n	8002ff0 <stm32_lock_acquire+0x10>
 8002fe8:	b672      	cpsid	i
 8002fea:	f7fe fd8a 	bl	8001b02 <Error_Handler>
 8002fee:	e7fe      	b.n	8002fee <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ff8:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8002ffc:	f381 8811 	msr	BASEPRI, r1
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800300c:	bd08      	pop	{r3, pc}

0800300e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800300e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8003010:	7a03      	ldrb	r3, [r0, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003016:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8003018:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800301a:	d903      	bls.n	8003024 <stm32_lock_release+0x16>
 800301c:	b672      	cpsid	i
 800301e:	f7fe fd70 	bl	8001b02 <Error_Handler>
 8003022:	e7fe      	b.n	8003022 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003024:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003028:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 800302c:	bd08      	pop	{r3, pc}

0800302e <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800302e:	b510      	push	{r4, lr}
  if (lock == NULL)
 8003030:	4604      	mov	r4, r0
 8003032:	b920      	cbnz	r0, 800303e <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8003034:	f007 ff42 	bl	800aebc <__errno>
 8003038:	2316      	movs	r3, #22
 800303a:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 800303c:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800303e:	200c      	movs	r0, #12
 8003040:	f005 f86c 	bl	800811c <malloc>
 8003044:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8003046:	b120      	cbz	r0, 8003052 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 800304e:	7203      	strb	r3, [r0, #8]
}
 8003050:	e7f4      	b.n	800303c <__retarget_lock_init_recursive+0xe>
 8003052:	f7ff ffc0 	bl	8002fd6 <__cxa_guard_abort.part.0>

08003056 <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8003056:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003058:	b908      	cbnz	r0, 800305e <__retarget_lock_acquire+0x8>
 800305a:	f7ff ffbc 	bl	8002fd6 <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 800305e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003062:	f7ff bfbd 	b.w	8002fe0 <stm32_lock_acquire>

08003066 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8003066:	f7ff bff6 	b.w	8003056 <__retarget_lock_acquire>

0800306a <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 800306a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800306c:	b918      	cbnz	r0, 8003076 <__retarget_lock_release+0xc>
 800306e:	b672      	cpsid	i
 8003070:	f7fe fd47 	bl	8001b02 <Error_Handler>
 8003074:	e7fe      	b.n	8003074 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8003076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800307a:	f7ff bfc8 	b.w	800300e <stm32_lock_release>

0800307e <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 800307e:	f7ff bff4 	b.w	800306a <__retarget_lock_release>
	...

08003084 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <HAL_Init+0x20>)
{
 8003086:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 fd5b 	bl	8003b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	200f      	movs	r0, #15
 8003098:	f7ff fe74 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7ff fc64 	bl	8002968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80030a0:	2000      	movs	r0, #0
 80030a2:	bd08      	pop	{r3, pc}
 80030a4:	40022000 	.word	0x40022000

080030a8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030a8:	4a03      	ldr	r2, [pc, #12]	@ (80030b8 <HAL_IncTick+0x10>)
 80030aa:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <HAL_IncTick+0x14>)
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	440b      	add	r3, r1
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20004348 	.word	0x20004348
 80030bc:	20000014 	.word	0x20000014

080030c0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80030c0:	4b01      	ldr	r3, [pc, #4]	@ (80030c8 <HAL_GetTick+0x8>)
 80030c2:	6818      	ldr	r0, [r3, #0]
}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20004348 	.word	0x20004348

080030cc <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80030cc:	4770      	bx	lr

080030ce <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80030d0:	4770      	bx	lr

080030d2 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030d2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030d4:	6803      	ldr	r3, [r0, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f002 0203 	and.w	r2, r2, #3
 80030dc:	2a01      	cmp	r2, #1
{
 80030de:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030e0:	d001      	beq.n	80030e6 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030e2:	2000      	movs	r0, #0
}
 80030e4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	07d1      	lsls	r1, r2, #31
 80030ea:	d5fa      	bpl.n	80030e2 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	f002 020d 	and.w	r2, r2, #13
 80030f2:	2a01      	cmp	r2, #1
 80030f4:	d115      	bne.n	8003122 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f042 0202 	orr.w	r2, r2, #2
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	2203      	movs	r2, #3
 8003100:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003102:	f7ff ffdd 	bl	80030c0 <HAL_GetTick>
 8003106:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	07db      	lsls	r3, r3, #31
 800310e:	d5e8      	bpl.n	80030e2 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003110:	f7ff ffd6 	bl	80030c0 <HAL_GetTick>
 8003114:	1b40      	subs	r0, r0, r5
 8003116:	2802      	cmp	r0, #2
 8003118:	d9f6      	bls.n	8003108 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	07da      	lsls	r2, r3, #31
 8003120:	d5f2      	bpl.n	8003108 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003124:	f043 0310 	orr.w	r3, r3, #16
 8003128:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
 8003134:	e7d6      	b.n	80030e4 <ADC_Disable+0x12>
	...

08003138 <HAL_ADC_Init>:
{
 8003138:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800313e:	4604      	mov	r4, r0
 8003140:	2800      	cmp	r0, #0
 8003142:	f000 8103 	beq.w	800334c <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003146:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003148:	06d5      	lsls	r5, r2, #27
 800314a:	d46a      	bmi.n	8003222 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800314c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d035      	beq.n	80031be <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003152:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	00d2      	lsls	r2, r2, #3
 800315a:	d502      	bpl.n	8003162 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800315c:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800315e:	009d      	lsls	r5, r3, #2
 8003160:	d50a      	bpl.n	8003178 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8003162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003164:	f023 0312 	bic.w	r3, r3, #18
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8003176:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800317a:	06d9      	lsls	r1, r3, #27
 800317c:	f100 80e0 	bmi.w	8003340 <HAL_ADC_Init+0x208>
 8003180:	2800      	cmp	r0, #0
 8003182:	f040 80dd 	bne.w	8003340 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800318a:	0752      	lsls	r2, r2, #29
 800318c:	f100 80d8 	bmi.w	8003340 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003192:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8003196:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800319a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003350 <HAL_ADC_Init+0x218>)
 80031a2:	d042      	beq.n	800322a <HAL_ADC_Init+0xf2>
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d03e      	beq.n	8003226 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031a8:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80031ac:	4293      	cmp	r3, r2
 80031ae:	4969      	ldr	r1, [pc, #420]	@ (8003354 <HAL_ADC_Init+0x21c>)
 80031b0:	f000 80b3 	beq.w	800331a <HAL_ADC_Init+0x1e2>
 80031b4:	428b      	cmp	r3, r1
 80031b6:	bf18      	it	ne
 80031b8:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ba:	4967      	ldr	r1, [pc, #412]	@ (8003358 <HAL_ADC_Init+0x220>)
 80031bc:	e036      	b.n	800322c <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80031be:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80031c2:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80031c4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80031c8:	f7ff fbec 	bl	80029a4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	00d8      	lsls	r0, r3, #3
 80031d2:	d4be      	bmi.n	8003152 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff7c 	bl	80030d2 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031da:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80031dc:	06d1      	lsls	r1, r2, #27
 80031de:	d4b9      	bmi.n	8003154 <HAL_ADC_Init+0x1c>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d1b7      	bne.n	8003154 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80031e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80031e6:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80031e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031ec:	f023 0302 	bic.w	r3, r3, #2
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80031f6:	6893      	ldr	r3, [r2, #8]
 80031f8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80031fc:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80031fe:	6893      	ldr	r3, [r2, #8]
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003204:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003206:	4b55      	ldr	r3, [pc, #340]	@ (800335c <HAL_ADC_Init+0x224>)
 8003208:	4a55      	ldr	r2, [pc, #340]	@ (8003360 <HAL_ADC_Init+0x228>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003210:	220a      	movs	r2, #10
 8003212:	4353      	muls	r3, r2
            wait_loop_index--;
 8003214:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d09a      	beq.n	8003152 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 800321c:	9b01      	ldr	r3, [sp, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	e7f8      	b.n	8003214 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	4618      	mov	r0, r3
 8003224:	e7a8      	b.n	8003178 <HAL_ADC_Init+0x40>
 8003226:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322a:	494e      	ldr	r1, [pc, #312]	@ (8003364 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800322c:	689d      	ldr	r5, [r3, #8]
 800322e:	f005 0503 	and.w	r5, r5, #3
 8003232:	2d01      	cmp	r5, #1
 8003234:	d102      	bne.n	800323c <HAL_ADC_Init+0x104>
 8003236:	681d      	ldr	r5, [r3, #0]
 8003238:	07ed      	lsls	r5, r5, #31
 800323a:	d40e      	bmi.n	800325a <HAL_ADC_Init+0x122>
 800323c:	b13a      	cbz	r2, 800324e <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800323e:	6895      	ldr	r5, [r2, #8]
 8003240:	f005 0503 	and.w	r5, r5, #3
 8003244:	2d01      	cmp	r5, #1
 8003246:	d102      	bne.n	800324e <HAL_ADC_Init+0x116>
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	07d2      	lsls	r2, r2, #31
 800324c:	d405      	bmi.n	800325a <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800324e:	688a      	ldr	r2, [r1, #8]
 8003250:	6865      	ldr	r5, [r4, #4]
 8003252:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003256:	432a      	orrs	r2, r5
 8003258:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800325a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800325e:	430a      	orrs	r2, r1
 8003260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003262:	7e65      	ldrb	r5, [r4, #25]
 8003264:	3901      	subs	r1, #1
 8003266:	bf18      	it	ne
 8003268:	2101      	movne	r1, #1
 800326a:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 800326e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003272:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003276:	2901      	cmp	r1, #1
 8003278:	d107      	bne.n	800328a <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800327a:	2d00      	cmp	r5, #0
 800327c:	d14f      	bne.n	800331e <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800327e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003280:	3901      	subs	r1, #1
 8003282:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8003286:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800328c:	2901      	cmp	r1, #1
 800328e:	d015      	beq.n	80032bc <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003290:	4d35      	ldr	r5, [pc, #212]	@ (8003368 <HAL_ADC_Init+0x230>)
 8003292:	42ab      	cmp	r3, r5
 8003294:	d003      	beq.n	800329e <HAL_ADC_Init+0x166>
 8003296:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800329a:	42ab      	cmp	r3, r5
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_Init+0x17c>
 800329e:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80032a2:	d047      	beq.n	8003334 <HAL_ADC_Init+0x1fc>
 80032a4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80032a8:	d047      	beq.n	800333a <HAL_ADC_Init+0x202>
 80032aa:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80032ae:	bf08      	it	eq
 80032b0:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80032b4:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80032b6:	4315      	orrs	r5, r2
 80032b8:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	f011 0f0c 	tst.w	r1, #12
 80032c2:	d10c      	bne.n	80032de <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80032ca:	f021 0102 	bic.w	r1, r1, #2
 80032ce:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032d0:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80032d4:	7e25      	ldrb	r5, [r4, #24]
 80032d6:	0049      	lsls	r1, r1, #1
 80032d8:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80032dc:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80032de:	68dd      	ldr	r5, [r3, #12]
 80032e0:	4922      	ldr	r1, [pc, #136]	@ (800336c <HAL_ADC_Init+0x234>)
 80032e2:	4029      	ands	r1, r5
 80032e4:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e6:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80032e8:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ea:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80032ec:	bf05      	ittet	eq
 80032ee:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 80032f0:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f2:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80032f4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80032f8:	bf06      	itte	eq
 80032fa:	f021 010f 	biceq.w	r1, r1, #15
 80032fe:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003300:	f022 020f 	bicne.w	r2, r2, #15
 8003304:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8003306:	2300      	movs	r3, #0
 8003308:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800330a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800330c:	f023 0303 	bic.w	r3, r3, #3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8003316:	b003      	add	sp, #12
 8003318:	bd30      	pop	{r4, r5, pc}
 800331a:	460a      	mov	r2, r1
 800331c:	e74d      	b.n	80031ba <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 800331e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003320:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8003324:	f041 0120 	orr.w	r1, r1, #32
 8003328:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800332c:	f041 0101 	orr.w	r1, r1, #1
 8003330:	6461      	str	r1, [r4, #68]	@ 0x44
 8003332:	e7aa      	b.n	800328a <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003334:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8003338:	e7bc      	b.n	80032b4 <HAL_ADC_Init+0x17c>
 800333a:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800333e:	e7b9      	b.n	80032b4 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8003340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003342:	f023 0312 	bic.w	r3, r3, #18
 8003346:	f043 0310 	orr.w	r3, r3, #16
 800334a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800334c:	2001      	movs	r0, #1
 800334e:	e7e2      	b.n	8003316 <HAL_ADC_Init+0x1de>
 8003350:	50000100 	.word	0x50000100
 8003354:	50000500 	.word	0x50000500
 8003358:	50000700 	.word	0x50000700
 800335c:	20000010 	.word	0x20000010
 8003360:	000f4240 	.word	0x000f4240
 8003364:	50000300 	.word	0x50000300
 8003368:	50000400 	.word	0x50000400
 800336c:	fff0c007 	.word	0xfff0c007

08003370 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8003370:	4770      	bx	lr

08003372 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8003372:	4770      	bx	lr

08003374 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8003374:	4770      	bx	lr

08003376 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003378:	6803      	ldr	r3, [r0, #0]
{
 800337a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800337c:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800337e:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003380:	076a      	lsls	r2, r5, #29
{
 8003382:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003384:	d501      	bpl.n	800338a <HAL_ADC_IRQHandler+0x12>
 8003386:	0770      	lsls	r0, r6, #29
 8003388:	d403      	bmi.n	8003392 <HAL_ADC_IRQHandler+0x1a>
 800338a:	0729      	lsls	r1, r5, #28
 800338c:	d543      	bpl.n	8003416 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800338e:	0732      	lsls	r2, r6, #28
 8003390:	d541      	bpl.n	8003416 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003392:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003394:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003396:	bf5e      	ittt	pl
 8003398:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 800339a:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 800339e:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80033a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033a4:	d003      	beq.n	80033ae <HAL_ADC_IRQHandler+0x36>
 80033a6:	4a90      	ldr	r2, [pc, #576]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	f040 8105 	bne.w	80035b8 <HAL_ADC_IRQHandler+0x240>
 80033ae:	4a8f      	ldr	r2, [pc, #572]	@ (80035ec <HAL_ADC_IRQHandler+0x274>)
 80033b0:	6891      	ldr	r1, [r2, #8]
 80033b2:	06c9      	lsls	r1, r1, #27
 80033b4:	d00c      	beq.n	80033d0 <HAL_ADC_IRQHandler+0x58>
 80033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ba:	d003      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x4c>
 80033bc:	498a      	ldr	r1, [pc, #552]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 80033be:	428b      	cmp	r3, r1
 80033c0:	f040 80ff 	bne.w	80035c2 <HAL_ADC_IRQHandler+0x24a>
 80033c4:	6892      	ldr	r2, [r2, #8]
 80033c6:	f002 021f 	and.w	r2, r2, #31
 80033ca:	2a05      	cmp	r2, #5
 80033cc:	f040 8114 	bne.w	80035f8 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80033d0:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033d2:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80033d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80033d8:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80033dc:	4311      	orrs	r1, r2
 80033de:	d114      	bne.n	800340a <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80033e0:	0729      	lsls	r1, r5, #28
 80033e2:	d512      	bpl.n	800340a <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	0752      	lsls	r2, r2, #29
 80033e8:	f100 8122 	bmi.w	8003630 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	f022 020c 	bic.w	r2, r2, #12
 80033f2:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fa:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033fe:	04d8      	lsls	r0, r3, #19
 8003400:	d403      	bmi.n	800340a <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003402:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff fe5e 	bl	80030cc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	220c      	movs	r2, #12
 8003414:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003416:	06a9      	lsls	r1, r5, #26
 8003418:	d501      	bpl.n	800341e <HAL_ADC_IRQHandler+0xa6>
 800341a:	06b2      	lsls	r2, r6, #26
 800341c:	d403      	bmi.n	8003426 <HAL_ADC_IRQHandler+0xae>
 800341e:	066b      	lsls	r3, r5, #25
 8003420:	d562      	bpl.n	80034e8 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003422:	0670      	lsls	r0, r6, #25
 8003424:	d560      	bpl.n	80034e8 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800342c:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003434:	d003      	beq.n	800343e <HAL_ADC_IRQHandler+0xc6>
 8003436:	4a6c      	ldr	r2, [pc, #432]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 8003438:	4293      	cmp	r3, r2
 800343a:	f040 8102 	bne.w	8003642 <HAL_ADC_IRQHandler+0x2ca>
 800343e:	4a6b      	ldr	r2, [pc, #428]	@ (80035ec <HAL_ADC_IRQHandler+0x274>)
 8003440:	6891      	ldr	r1, [r2, #8]
 8003442:	06c9      	lsls	r1, r1, #27
 8003444:	d00c      	beq.n	8003460 <HAL_ADC_IRQHandler+0xe8>
 8003446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344a:	d003      	beq.n	8003454 <HAL_ADC_IRQHandler+0xdc>
 800344c:	4966      	ldr	r1, [pc, #408]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 800344e:	428b      	cmp	r3, r1
 8003450:	f040 80fc 	bne.w	800364c <HAL_ADC_IRQHandler+0x2d4>
 8003454:	6892      	ldr	r2, [r2, #8]
 8003456:	f002 021f 	and.w	r2, r2, #31
 800345a:	2a05      	cmp	r2, #5
 800345c:	f040 8108 	bne.w	8003670 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003460:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003462:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003464:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8003468:	d138      	bne.n	80034dc <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800346a:	0191      	lsls	r1, r2, #6
 800346c:	d506      	bpl.n	800347c <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800346e:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003470:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003474:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8003478:	4311      	orrs	r1, r2
 800347a:	d12f      	bne.n	80034dc <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800347c:	0668      	lsls	r0, r5, #25
 800347e:	d52d      	bpl.n	80034dc <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003480:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003484:	d003      	beq.n	800348e <HAL_ADC_IRQHandler+0x116>
 8003486:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 8003488:	4293      	cmp	r3, r2
 800348a:	f040 810d 	bne.w	80036a8 <HAL_ADC_IRQHandler+0x330>
 800348e:	4a57      	ldr	r2, [pc, #348]	@ (80035ec <HAL_ADC_IRQHandler+0x274>)
 8003490:	6891      	ldr	r1, [r2, #8]
 8003492:	06c9      	lsls	r1, r1, #27
 8003494:	d00c      	beq.n	80034b0 <HAL_ADC_IRQHandler+0x138>
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d003      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x12c>
 800349c:	4952      	ldr	r1, [pc, #328]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 800349e:	428b      	cmp	r3, r1
 80034a0:	f040 8107 	bne.w	80036b2 <HAL_ADC_IRQHandler+0x33a>
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	f002 021f 	and.w	r2, r2, #31
 80034aa:	2a06      	cmp	r2, #6
 80034ac:	f040 8113 	bne.w	80036d6 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80034b0:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80034b2:	0291      	lsls	r1, r2, #10
 80034b4:	d412      	bmi.n	80034dc <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	0712      	lsls	r2, r2, #28
 80034ba:	f100 8128 	bmi.w	800370e <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034c4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034cc:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034d0:	05d8      	lsls	r0, r3, #23
 80034d2:	d403      	bmi.n	80034dc <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff ff47 	bl	8003370 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	2260      	movs	r2, #96	@ 0x60
 80034e6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034e8:	0629      	lsls	r1, r5, #24
 80034ea:	d50b      	bpl.n	8003504 <HAL_ADC_IRQHandler+0x18c>
 80034ec:	0632      	lsls	r2, r6, #24
 80034ee:	d509      	bpl.n	8003504 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f6:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff fde8 	bl	80030ce <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	2280      	movs	r2, #128	@ 0x80
 8003502:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003504:	05eb      	lsls	r3, r5, #23
 8003506:	d50c      	bpl.n	8003522 <HAL_ADC_IRQHandler+0x1aa>
 8003508:	05f0      	lsls	r0, r6, #23
 800350a:	d50a      	bpl.n	8003522 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800350c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003512:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003514:	4620      	mov	r0, r4
 8003516:	f7ff ff2d 	bl	8003374 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003520:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003522:	05a9      	lsls	r1, r5, #22
 8003524:	d50c      	bpl.n	8003540 <HAL_ADC_IRQHandler+0x1c8>
 8003526:	05b2      	lsls	r2, r6, #22
 8003528:	d50a      	bpl.n	8003540 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800352a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800352c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003530:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003532:	4620      	mov	r0, r4
 8003534:	f7ff ff1f 	bl	8003376 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003540:	06eb      	lsls	r3, r5, #27
 8003542:	d525      	bpl.n	8003590 <HAL_ADC_IRQHandler+0x218>
 8003544:	06f0      	lsls	r0, r6, #27
 8003546:	d523      	bpl.n	8003590 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800354a:	2b01      	cmp	r3, #1
 800354c:	d012      	beq.n	8003574 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003554:	f000 80e4 	beq.w	8003720 <HAL_ADC_IRQHandler+0x3a8>
 8003558:	4823      	ldr	r0, [pc, #140]	@ (80035e8 <HAL_ADC_IRQHandler+0x270>)
 800355a:	4b25      	ldr	r3, [pc, #148]	@ (80035f0 <HAL_ADC_IRQHandler+0x278>)
 800355c:	4923      	ldr	r1, [pc, #140]	@ (80035ec <HAL_ADC_IRQHandler+0x274>)
 800355e:	4282      	cmp	r2, r0
 8003560:	bf08      	it	eq
 8003562:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	06c9      	lsls	r1, r1, #27
 8003568:	f040 80dc 	bne.w	8003724 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800356c:	68d3      	ldr	r3, [r2, #12]
 800356e:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003572:	d00a      	beq.n	800358a <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800357a:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800357c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8003584:	4620      	mov	r0, r4
 8003586:	f7ff fda3 	bl	80030d0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	2210      	movs	r2, #16
 800358e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003590:	056a      	lsls	r2, r5, #21
 8003592:	d510      	bpl.n	80035b6 <HAL_ADC_IRQHandler+0x23e>
 8003594:	0573      	lsls	r3, r6, #21
 8003596:	d50e      	bpl.n	80035b6 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800359a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80035a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ae:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fede 	bl	8003372 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_ADC_IRQHandler+0x278>)
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	06d0      	lsls	r0, r2, #27
 80035be:	f43f af07 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
 80035c2:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <HAL_ADC_IRQHandler+0x278>)
 80035c4:	6892      	ldr	r2, [r2, #8]
 80035c6:	f002 021f 	and.w	r2, r2, #31
 80035ca:	2a05      	cmp	r2, #5
 80035cc:	f43f af00 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_ADC_IRQHandler+0x278>)
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	f002 021f 	and.w	r2, r2, #31
 80035d8:	2a09      	cmp	r2, #9
 80035da:	f43f aef9 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
 80035de:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <HAL_ADC_IRQHandler+0x27c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d123      	bne.n	800362c <HAL_ADC_IRQHandler+0x2b4>
 80035e4:	e6f4      	b.n	80033d0 <HAL_ADC_IRQHandler+0x58>
 80035e6:	bf00      	nop
 80035e8:	50000100 	.word	0x50000100
 80035ec:	50000300 	.word	0x50000300
 80035f0:	50000700 	.word	0x50000700
 80035f4:	50000400 	.word	0x50000400
 80035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035fc:	d002      	beq.n	8003604 <HAL_ADC_IRQHandler+0x28c>
 80035fe:	4a4b      	ldr	r2, [pc, #300]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d1e5      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x258>
 8003604:	4a4a      	ldr	r2, [pc, #296]	@ (8003730 <HAL_ADC_IRQHandler+0x3b8>)
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	f002 021f 	and.w	r2, r2, #31
 800360c:	2a09      	cmp	r2, #9
 800360e:	f43f aedf 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003616:	f43f aedb 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
 800361a:	4a46      	ldr	r2, [pc, #280]	@ (8003734 <HAL_ADC_IRQHandler+0x3bc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	f43f aed7 	beq.w	80033d0 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003622:	4942      	ldr	r1, [pc, #264]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 8003624:	428b      	cmp	r3, r1
 8003626:	bf08      	it	eq
 8003628:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 800362c:	68d2      	ldr	r2, [r2, #12]
 800362e:	e6d0      	b.n	80033d2 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003632:	f043 0310 	orr.w	r3, r3, #16
 8003636:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003638:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6463      	str	r3, [r4, #68]	@ 0x44
 8003640:	e6e3      	b.n	800340a <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003642:	4a3d      	ldr	r2, [pc, #244]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	06d0      	lsls	r0, r2, #27
 8003648:	f43f af0a 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
 800364c:	4a3a      	ldr	r2, [pc, #232]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	f002 021f 	and.w	r2, r2, #31
 8003654:	2a05      	cmp	r2, #5
 8003656:	f43f af03 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
 800365a:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2a09      	cmp	r2, #9
 8003664:	f43f aefc 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
 8003668:	4a32      	ldr	r2, [pc, #200]	@ (8003734 <HAL_ADC_IRQHandler+0x3bc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d11a      	bne.n	80036a4 <HAL_ADC_IRQHandler+0x32c>
 800366e:	e6f7      	b.n	8003460 <HAL_ADC_IRQHandler+0xe8>
 8003670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003674:	d002      	beq.n	800367c <HAL_ADC_IRQHandler+0x304>
 8003676:	4a2d      	ldr	r2, [pc, #180]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d1ee      	bne.n	800365a <HAL_ADC_IRQHandler+0x2e2>
 800367c:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <HAL_ADC_IRQHandler+0x3b8>)
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	f002 021f 	and.w	r2, r2, #31
 8003684:	2a09      	cmp	r2, #9
 8003686:	f43f aeeb 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
 800368a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800368e:	f43f aee7 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
 8003692:	4a28      	ldr	r2, [pc, #160]	@ (8003734 <HAL_ADC_IRQHandler+0x3bc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f43f aee3 	beq.w	8003460 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800369a:	4924      	ldr	r1, [pc, #144]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 800369c:	428b      	cmp	r3, r1
 800369e:	bf08      	it	eq
 80036a0:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	e6dc      	b.n	8003462 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80036a8:	4a23      	ldr	r2, [pc, #140]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 80036aa:	6892      	ldr	r2, [r2, #8]
 80036ac:	06d0      	lsls	r0, r2, #27
 80036ae:	f43f aeff 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2a06      	cmp	r2, #6
 80036bc:	f43f aef8 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <HAL_ADC_IRQHandler+0x3c0>)
 80036c2:	6892      	ldr	r2, [r2, #8]
 80036c4:	f002 021f 	and.w	r2, r2, #31
 80036c8:	2a07      	cmp	r2, #7
 80036ca:	f43f aef1 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036ce:	4a19      	ldr	r2, [pc, #100]	@ (8003734 <HAL_ADC_IRQHandler+0x3bc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d11a      	bne.n	800370a <HAL_ADC_IRQHandler+0x392>
 80036d4:	e6ec      	b.n	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036da:	d002      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x36a>
 80036dc:	4a13      	ldr	r2, [pc, #76]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d1ee      	bne.n	80036c0 <HAL_ADC_IRQHandler+0x348>
 80036e2:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <HAL_ADC_IRQHandler+0x3b8>)
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2a07      	cmp	r2, #7
 80036ec:	f43f aee0 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f4:	f43f aedc 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
 80036f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003734 <HAL_ADC_IRQHandler+0x3bc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f43f aed8 	beq.w	80034b0 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003700:	490a      	ldr	r1, [pc, #40]	@ (800372c <HAL_ADC_IRQHandler+0x3b4>)
 8003702:	428b      	cmp	r3, r1
 8003704:	bf08      	it	eq
 8003706:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 800370a:	68d2      	ldr	r2, [r2, #12]
 800370c:	e6d1      	b.n	80034b2 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003710:	f043 0310 	orr.w	r3, r3, #16
 8003714:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6463      	str	r3, [r4, #68]	@ 0x44
 800371e:	e6dd      	b.n	80034dc <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <HAL_ADC_IRQHandler+0x3b8>)
 8003722:	e71f      	b.n	8003564 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800372a:	e722      	b.n	8003572 <HAL_ADC_IRQHandler+0x1fa>
 800372c:	50000100 	.word	0x50000100
 8003730:	50000300 	.word	0x50000300
 8003734:	50000400 	.word	0x50000400
 8003738:	50000700 	.word	0x50000700

0800373c <HAL_ADC_ConfigChannel>:
{
 800373c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800373e:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003744:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003748:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 800374a:	2b01      	cmp	r3, #1
 800374c:	f000 816a 	beq.w	8003a24 <HAL_ADC_ConfigChannel+0x2e8>
 8003750:	2301      	movs	r3, #1
 8003752:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003756:	682b      	ldr	r3, [r5, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	0757      	lsls	r7, r2, #29
 800375c:	f100 815c 	bmi.w	8003a18 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8003760:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8003762:	680c      	ldr	r4, [r1, #0]
 8003764:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8003766:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8003768:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 800376c:	d82c      	bhi.n	80037c8 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 800376e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003770:	271f      	movs	r7, #31
 8003772:	4097      	lsls	r7, r2
 8003774:	ea26 0607 	bic.w	r6, r6, r7
 8003778:	fa04 f202 	lsl.w	r2, r4, r2
 800377c:	4332      	orrs	r2, r6
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	f012 0f0c 	tst.w	r2, #12
 8003786:	d158      	bne.n	800383a <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003788:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800378a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800378e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003792:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003796:	d93c      	bls.n	8003812 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003798:	699f      	ldr	r7, [r3, #24]
 800379a:	3a1e      	subs	r2, #30
 800379c:	4096      	lsls	r6, r2
 800379e:	ea27 0606 	bic.w	r6, r7, r6
 80037a2:	fa0c f202 	lsl.w	r2, ip, r2
 80037a6:	4332      	orrs	r2, r6
 80037a8:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	694e      	ldr	r6, [r1, #20]
 80037ae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80037b2:	0052      	lsls	r2, r2, #1
 80037b4:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80037b6:	690a      	ldr	r2, [r1, #16]
 80037b8:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80037ba:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80037bc:	2a03      	cmp	r2, #3
 80037be:	d86b      	bhi.n	8003898 <HAL_ADC_ConfigChannel+0x15c>
 80037c0:	e8df f002 	tbb	[pc, r2]
 80037c4:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80037c8:	2e09      	cmp	r6, #9
 80037ca:	d80a      	bhi.n	80037e2 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80037cc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80037ce:	3a1e      	subs	r2, #30
 80037d0:	271f      	movs	r7, #31
 80037d2:	4097      	lsls	r7, r2
 80037d4:	ea26 0607 	bic.w	r6, r6, r7
 80037d8:	fa04 f202 	lsl.w	r2, r4, r2
 80037dc:	4332      	orrs	r2, r6
 80037de:	635a      	str	r2, [r3, #52]	@ 0x34
 80037e0:	e7ce      	b.n	8003780 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80037e2:	2e0e      	cmp	r6, #14
 80037e4:	f04f 061f 	mov.w	r6, #31
 80037e8:	d809      	bhi.n	80037fe <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80037ea:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80037ec:	3a3c      	subs	r2, #60	@ 0x3c
 80037ee:	4096      	lsls	r6, r2
 80037f0:	ea27 0606 	bic.w	r6, r7, r6
 80037f4:	fa04 f202 	lsl.w	r2, r4, r2
 80037f8:	4332      	orrs	r2, r6
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80037fc:	e7c0      	b.n	8003780 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80037fe:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8003800:	3a5a      	subs	r2, #90	@ 0x5a
 8003802:	4096      	lsls	r6, r2
 8003804:	ea27 0606 	bic.w	r6, r7, r6
 8003808:	fa04 f202 	lsl.w	r2, r4, r2
 800380c:	4332      	orrs	r2, r6
 800380e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003810:	e7b6      	b.n	8003780 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003812:	695f      	ldr	r7, [r3, #20]
 8003814:	4096      	lsls	r6, r2
 8003816:	ea27 0606 	bic.w	r6, r7, r6
 800381a:	fa0c fc02 	lsl.w	ip, ip, r2
 800381e:	ea46 060c 	orr.w	r6, r6, ip
 8003822:	615e      	str	r6, [r3, #20]
 8003824:	e7c1      	b.n	80037aa <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003826:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 800382a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a28 <HAL_ADC_ConfigChannel+0x2ec>)
 800382c:	ea0c 0202 	and.w	r2, ip, r2
 8003830:	433a      	orrs	r2, r7
 8003832:	4332      	orrs	r2, r6
 8003834:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003838:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	f002 0203 	and.w	r2, r2, #3
 8003840:	2a01      	cmp	r2, #1
 8003842:	d14d      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1a4>
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	07d6      	lsls	r6, r2, #31
 8003848:	d54a      	bpl.n	80038e0 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800384c:	2300      	movs	r3, #0
 800384e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8003852:	b003      	add	sp, #12
 8003854:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003856:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 800385a:	4a73      	ldr	r2, [pc, #460]	@ (8003a28 <HAL_ADC_ConfigChannel+0x2ec>)
 800385c:	ea0c 0202 	and.w	r2, ip, r2
 8003860:	433a      	orrs	r2, r7
 8003862:	4332      	orrs	r2, r6
 8003864:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003868:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800386a:	e7e6      	b.n	800383a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800386c:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8003870:	4a6d      	ldr	r2, [pc, #436]	@ (8003a28 <HAL_ADC_ConfigChannel+0x2ec>)
 8003872:	ea0c 0202 	and.w	r2, ip, r2
 8003876:	433a      	orrs	r2, r7
 8003878:	4332      	orrs	r2, r6
 800387a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800387e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8003880:	e7db      	b.n	800383a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003882:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8003886:	4a68      	ldr	r2, [pc, #416]	@ (8003a28 <HAL_ADC_ConfigChannel+0x2ec>)
 8003888:	ea0c 0202 	and.w	r2, ip, r2
 800388c:	433a      	orrs	r2, r7
 800388e:	4332      	orrs	r2, r6
 8003890:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003894:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003896:	e7d0      	b.n	800383a <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003898:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800389a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800389e:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80038a0:	bf02      	ittt	eq
 80038a2:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 80038a4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80038a8:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038ac:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80038b0:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80038b2:	bf02      	ittt	eq
 80038b4:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80038b6:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80038ba:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038be:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80038c2:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80038c4:	bf02      	ittt	eq
 80038c6:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80038c8:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80038cc:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038d0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80038d4:	42ba      	cmp	r2, r7
 80038d6:	d1b0      	bne.n	800383a <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80038d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038de:	e7d9      	b.n	8003894 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038e0:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038e2:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038e4:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038e8:	d047      	beq.n	800397a <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80038ee:	ea21 0202 	bic.w	r2, r1, r2
 80038f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038fa:	d164      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x28a>
 80038fc:	494b      	ldr	r1, [pc, #300]	@ (8003a2c <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038fe:	2c10      	cmp	r4, #16
 8003900:	d166      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003902:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003904:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003908:	d19f      	bne.n	800384a <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800390e:	4a48      	ldr	r2, [pc, #288]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2f4>)
 8003910:	d009      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x1ea>
 8003912:	4293      	cmp	r3, r2
 8003914:	d069      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x2ae>
 8003916:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800391a:	4293      	cmp	r3, r2
 800391c:	4845      	ldr	r0, [pc, #276]	@ (8003a34 <HAL_ADC_ConfigChannel+0x2f8>)
 800391e:	d067      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x2b4>
 8003920:	4283      	cmp	r3, r0
 8003922:	bf18      	it	ne
 8003924:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003926:	6898      	ldr	r0, [r3, #8]
 8003928:	f000 0003 	and.w	r0, r0, #3
 800392c:	2801      	cmp	r0, #1
 800392e:	d102      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1fa>
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	07c0      	lsls	r0, r0, #31
 8003934:	d470      	bmi.n	8003a18 <HAL_ADC_ConfigChannel+0x2dc>
 8003936:	b13a      	cbz	r2, 8003948 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003938:	6890      	ldr	r0, [r2, #8]
 800393a:	f000 0003 	and.w	r0, r0, #3
 800393e:	2801      	cmp	r0, #1
 8003940:	d102      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x20c>
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	07d2      	lsls	r2, r2, #31
 8003946:	d467      	bmi.n	8003a18 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003948:	2c10      	cmp	r4, #16
 800394a:	d153      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2b8>
 800394c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003950:	f47f af7b 	bne.w	800384a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003954:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003956:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800395c:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800395e:	4b37      	ldr	r3, [pc, #220]	@ (8003a3c <HAL_ADC_ConfigChannel+0x300>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fbb3 f3f2 	udiv	r3, r3, r2
 8003966:	220a      	movs	r2, #10
 8003968:	4353      	muls	r3, r2
            wait_loop_index--;
 800396a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800396c:	9b01      	ldr	r3, [sp, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f43f af6b 	beq.w	800384a <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8003974:	9b01      	ldr	r3, [sp, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	e7f7      	b.n	800396a <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800397a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800397e:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003980:	ea42 0200 	orr.w	r2, r2, r0
 8003984:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003988:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800398a:	d90c      	bls.n	80039a6 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 800398c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	3a1b      	subs	r2, #27
 8003994:	2607      	movs	r6, #7
 8003996:	4096      	lsls	r6, r2
 8003998:	ea21 0106 	bic.w	r1, r1, r6
 800399c:	fa00 f202 	lsl.w	r2, r0, r2
 80039a0:	430a      	orrs	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]
 80039a4:	e7a7      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 80039a6:	1c61      	adds	r1, r4, #1
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80039ae:	2607      	movs	r6, #7
 80039b0:	408e      	lsls	r6, r1
 80039b2:	ea22 0206 	bic.w	r2, r2, r6
 80039b6:	fa00 f101 	lsl.w	r1, r0, r1
 80039ba:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80039c0:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c2:	f43f af42 	beq.w	800384a <HAL_ADC_ConfigChannel+0x10e>
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <HAL_ADC_ConfigChannel+0x2f4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d097      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x1c0>
 80039cc:	491c      	ldr	r1, [pc, #112]	@ (8003a40 <HAL_ADC_ConfigChannel+0x304>)
 80039ce:	e796      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039d0:	2c11      	cmp	r4, #17
 80039d2:	d103      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039d4:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039d6:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80039da:	e795      	b.n	8003908 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039dc:	2c12      	cmp	r4, #18
 80039de:	f47f af34 	bne.w	800384a <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039e2:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039e4:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80039e8:	e78e      	b.n	8003908 <HAL_ADC_ConfigChannel+0x1cc>
 80039ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80039ee:	e79a      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ea>
 80039f0:	4602      	mov	r2, r0
 80039f2:	e798      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80039f4:	2c11      	cmp	r4, #17
 80039f6:	d108      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x2ce>
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039fc:	f47f af25 	bne.w	800384a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003a00:	688b      	ldr	r3, [r1, #8]
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a06:	608b      	str	r3, [r1, #8]
 8003a08:	e71f      	b.n	800384a <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a0a:	2c12      	cmp	r4, #18
 8003a0c:	f47f af1d 	bne.w	800384a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a10:	688b      	ldr	r3, [r1, #8]
 8003a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a16:	e7f6      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a18:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003a1a:	f043 0320 	orr.w	r3, r3, #32
 8003a1e:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
 8003a22:	e713      	b.n	800384c <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8003a24:	2002      	movs	r0, #2
 8003a26:	e714      	b.n	8003852 <HAL_ADC_ConfigChannel+0x116>
 8003a28:	83fff000 	.word	0x83fff000
 8003a2c:	50000300 	.word	0x50000300
 8003a30:	50000100 	.word	0x50000100
 8003a34:	50000500 	.word	0x50000500
 8003a38:	000f4240 	.word	0x000f4240
 8003a3c:	20000010 	.word	0x20000010
 8003a40:	50000700 	.word	0x50000700

08003a44 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a46:	6804      	ldr	r4, [r0, #0]
 8003a48:	4b3c      	ldr	r3, [pc, #240]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8003a4a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8003a4e:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a50:	d009      	beq.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003a52:	429c      	cmp	r4, r3
 8003a54:	d047      	beq.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8003a56:	4a3a      	ldr	r2, [pc, #232]	@ (8003b40 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8003a58:	4294      	cmp	r4, r2
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a5e:	d002      	beq.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8003a60:	429c      	cmp	r4, r3
 8003a62:	d166      	bne.n	8003b32 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003a64:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8003a66:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8003a6a:	2a01      	cmp	r2, #1
 8003a6c:	d063      	beq.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003a6e:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a70:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8003a72:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003a76:	68a2      	ldr	r2, [r4, #8]
 8003a78:	0752      	lsls	r2, r2, #29
 8003a7a:	d454      	bmi.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	0757      	lsls	r7, r2, #29
 8003a80:	d451      	bmi.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a82:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8003a86:	d031      	beq.n	8003aec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a88:	4f2c      	ldr	r7, [pc, #176]	@ (8003b3c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8003a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8003a8c:	4e2e      	ldr	r6, [pc, #184]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003a8e:	42bc      	cmp	r4, r7
 8003a90:	bf08      	it	eq
 8003a92:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a94:	b360      	cbz	r0, 8003af0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a96:	6897      	ldr	r7, [r2, #8]
 8003a98:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8003a9c:	684e      	ldr	r6, [r1, #4]
 8003a9e:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8003aa2:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8003aa6:	433e      	orrs	r6, r7
 8003aa8:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003aaa:	68a6      	ldr	r6, [r4, #8]
 8003aac:	f006 0603 	and.w	r6, r6, #3
 8003ab0:	2e01      	cmp	r6, #1
 8003ab2:	d102      	bne.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8003ab4:	6824      	ldr	r4, [r4, #0]
 8003ab6:	07e6      	lsls	r6, r4, #31
 8003ab8:	d410      	bmi.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003aba:	689c      	ldr	r4, [r3, #8]
 8003abc:	f004 0403 	and.w	r4, r4, #3
 8003ac0:	2c01      	cmp	r4, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	07dc      	lsls	r4, r3, #31
 8003ac8:	d408      	bmi.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003aca:	6893      	ldr	r3, [r2, #8]
 8003acc:	6889      	ldr	r1, [r1, #8]
 8003ace:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ad2:	4308      	orrs	r0, r1
 8003ad4:	f023 030f 	bic.w	r3, r3, #15
 8003ad8:	4318      	orrs	r0, r3
 8003ada:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003adc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003aea:	e7bc      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aec:	4a16      	ldr	r2, [pc, #88]	@ (8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8003aee:	e7d1      	b.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003af0:	6891      	ldr	r1, [r2, #8]
 8003af2:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003af6:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003af8:	68a1      	ldr	r1, [r4, #8]
 8003afa:	f001 0103 	and.w	r1, r1, #3
 8003afe:	2901      	cmp	r1, #1
 8003b00:	d102      	bne.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8003b02:	6821      	ldr	r1, [r4, #0]
 8003b04:	07c9      	lsls	r1, r1, #31
 8003b06:	d4e9      	bmi.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b08:	6899      	ldr	r1, [r3, #8]
 8003b0a:	f001 0103 	and.w	r1, r1, #3
 8003b0e:	2901      	cmp	r1, #1
 8003b10:	d102      	bne.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d4e1      	bmi.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003b18:	6893      	ldr	r3, [r2, #8]
 8003b1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b1e:	f023 030f 	bic.w	r3, r3, #15
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	e7da      	b.n	8003adc <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b26:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
 8003b30:	e7d5      	b.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8003b32:	2001      	movs	r0, #1
 8003b34:	e7d6      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003b36:	2002      	movs	r0, #2
 8003b38:	e7d4      	b.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003b3a:	bf00      	nop
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000400 	.word	0x50000400
 8003b44:	50000700 	.word	0x50000700
 8003b48:	50000300 	.word	0x50000300

08003b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b4c:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b4e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b56:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003b68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b72:	b530      	push	{r4, r5, lr}
 8003b74:	68dc      	ldr	r4, [r3, #12]
 8003b76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	bf28      	it	cs
 8003b84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b88:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8c:	bf8c      	ite	hi
 8003b8e:	3c03      	subhi	r4, #3
 8003b90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b92:	fa05 f303 	lsl.w	r3, r5, r3
 8003b96:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b9a:	40a5      	lsls	r5, r4
 8003b9c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	bfac      	ite	ge
 8003baa:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	4a08      	ldrlt	r2, [pc, #32]	@ (8003bd0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	bfb8      	it	lt
 8003bb6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	bfaa      	itet	ge
 8003bbe:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003bc8:	bd30      	pop	{r4, r5, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000ed00 	.word	0xe000ed00
 8003bd0:	e000ed14 	.word	0xe000ed14

08003bd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	db07      	blt.n	8003be8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd8:	0941      	lsrs	r1, r0, #5
 8003bda:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <HAL_NVIC_EnableIRQ+0x18>)
 8003bdc:	f000 001f 	and.w	r0, r0, #31
 8003be0:	2301      	movs	r3, #1
 8003be2:	4083      	lsls	r3, r0
 8003be4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bf0:	6802      	ldr	r2, [r0, #0]
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <DMA_CalcBaseAndBitshift+0x2c>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	f04f 0114 	mov.w	r1, #20
 8003bfa:	d808      	bhi.n	8003c0e <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <DMA_CalcBaseAndBitshift+0x30>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a08      	ldr	r2, [pc, #32]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x34>)
 8003c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c06:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003c08:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003c0c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <DMA_CalcBaseAndBitshift+0x38>)
 8003c10:	4413      	add	r3, r2
 8003c12:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <DMA_CalcBaseAndBitshift+0x3c>)
 8003c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c18:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8003c1a:	e7f5      	b.n	8003c08 <DMA_CalcBaseAndBitshift+0x18>
 8003c1c:	40020407 	.word	0x40020407
 8003c20:	bffdfff8 	.word	0xbffdfff8
 8003c24:	40020000 	.word	0x40020000
 8003c28:	bffdfbf8 	.word	0xbffdfbf8
 8003c2c:	40020400 	.word	0x40020400

08003c30 <HAL_DMA_Init>:
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8003c32:	4604      	mov	r4, r0
 8003c34:	b1e0      	cbz	r0, 8003c70 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8003c36:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8003c3a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003c3e:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c40:	432b      	orrs	r3, r5
 8003c42:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003c44:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c46:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	6945      	ldr	r5, [r0, #20]
 8003c4a:	432b      	orrs	r3, r5
 8003c4c:	6985      	ldr	r5, [r0, #24]
 8003c4e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c50:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c52:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8003c56:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003c5c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8003c5e:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8003c60:	f7ff ffc6 	bl	8003bf0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c64:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8003c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003c6c:	8423      	strh	r3, [r4, #32]
}
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c70:	2001      	movs	r0, #1
 8003c72:	e7fc      	b.n	8003c6e <HAL_DMA_Init+0x3e>

08003c74 <HAL_DMA_Start_IT>:
{
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003c76:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003c7a:	2c01      	cmp	r4, #1
 8003c7c:	d033      	beq.n	8003ce6 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7e:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8003c82:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c84:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003c86:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c8a:	f04f 0400 	mov.w	r4, #0
 8003c8e:	d128      	bne.n	8003ce2 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c90:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c92:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c94:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c96:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c9a:	6826      	ldr	r6, [r4, #0]
 8003c9c:	f026 0601 	bic.w	r6, r6, #1
 8003ca0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003ca2:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8003ca6:	40bd      	lsls	r5, r7
 8003ca8:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003caa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cac:	6843      	ldr	r3, [r0, #4]
 8003cae:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003cb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003cb2:	bf0b      	itete	eq
 8003cb4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003cb6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003cb8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003cba:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003cbc:	b14b      	cbz	r3, 8003cd2 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003cc4:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2000      	movs	r0, #0
}
 8003cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	f043 030a 	orr.w	r3, r3, #10
 8003cd8:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	e7f0      	b.n	8003cc4 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003ce2:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8003ce6:	2002      	movs	r0, #2
 8003ce8:	e7f2      	b.n	8003cd0 <HAL_DMA_Start_IT+0x5c>

08003cea <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cea:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003cec:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003cee:	6803      	ldr	r3, [r0, #0]
{
 8003cf0:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cf2:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003cf4:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003cf6:	2404      	movs	r4, #4
 8003cf8:	4094      	lsls	r4, r2
 8003cfa:	4234      	tst	r4, r6
 8003cfc:	d00e      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x32>
 8003cfe:	f015 0f04 	tst.w	r5, #4
 8003d02:	d00b      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d08:	bf5e      	ittt	pl
 8003d0a:	681a      	ldrpl	r2, [r3, #0]
 8003d0c:	f022 0204 	bicpl.w	r2, r2, #4
 8003d10:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003d12:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d14:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8003d16:	b363      	cbz	r3, 8003d72 <HAL_DMA_IRQHandler+0x88>
}
 8003d18:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003d1a:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d1c:	2402      	movs	r4, #2
 8003d1e:	4094      	lsls	r4, r2
 8003d20:	4234      	tst	r4, r6
 8003d22:	d012      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x60>
 8003d24:	f015 0f02 	tst.w	r5, #2
 8003d28:	d00f      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	0695      	lsls	r5, r2, #26
 8003d2e:	d406      	bmi.n	8003d3e <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f022 020a 	bic.w	r2, r2, #10
 8003d36:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003d3e:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003d40:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003d42:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003d46:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003d48:	e7e5      	b.n	8003d16 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d4a:	2408      	movs	r4, #8
 8003d4c:	4094      	lsls	r4, r2
 8003d4e:	4234      	tst	r4, r6
 8003d50:	d00f      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x88>
 8003d52:	072c      	lsls	r4, r5, #28
 8003d54:	d50d      	bpl.n	8003d72 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d56:	681c      	ldr	r4, [r3, #0]
 8003d58:	f024 040e 	bic.w	r4, r4, #14
 8003d5c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	fa03 f202 	lsl.w	r2, r3, r2
 8003d64:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d66:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8003d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d6c:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8003d6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003d70:	e7d1      	b.n	8003d16 <HAL_DMA_IRQHandler+0x2c>
}
 8003d72:	bc70      	pop	{r4, r5, r6}
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7c:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8003efc <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d80:	4c5c      	ldr	r4, [pc, #368]	@ (8003ef4 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8003d82:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d84:	680a      	ldr	r2, [r1, #0]
 8003d86:	fa32 f503 	lsrs.w	r5, r2, r3
 8003d8a:	d102      	bne.n	8003d92 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003d8c:	b003      	add	sp, #12
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d92:	2501      	movs	r5, #1
 8003d94:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003d98:	ea18 0202 	ands.w	r2, r8, r2
 8003d9c:	f000 80a0 	beq.w	8003ee0 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003da0:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003da2:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003da4:	f006 0503 	and.w	r5, r6, #3
 8003da8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dac:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db0:	1e6f      	subs	r7, r5, #1
 8003db2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003db4:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db8:	d834      	bhi.n	8003e24 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003dba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dbc:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc0:	68cf      	ldr	r7, [r1, #12]
 8003dc2:	fa07 f70e 	lsl.w	r7, r7, lr
 8003dc6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003dca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003dcc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dce:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd2:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003dd6:	409f      	lsls	r7, r3
 8003dd8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003ddc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003dde:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003de0:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003de4:	688f      	ldr	r7, [r1, #8]
 8003de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8003dea:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003df0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	d119      	bne.n	8003e28 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003df4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003df8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dfc:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003e00:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e04:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003e08:	f04f 0b0f 	mov.w	fp, #15
 8003e0c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003e10:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e14:	690f      	ldr	r7, [r1, #16]
 8003e16:	fa07 f70a 	lsl.w	r7, r7, sl
 8003e1a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003e1e:	f8c8 7020 	str.w	r7, [r8, #32]
 8003e22:	e001      	b.n	8003e28 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e24:	2d03      	cmp	r5, #3
 8003e26:	d1da      	bne.n	8003dde <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003e28:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e2a:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e2e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e32:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e34:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003e38:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e3a:	d051      	beq.n	8003ee0 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003e40:	f045 0501 	orr.w	r5, r5, #1
 8003e44:	f8c9 5018 	str.w	r5, [r9, #24]
 8003e48:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003e4c:	f023 0703 	bic.w	r7, r3, #3
 8003e50:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003e54:	f005 0501 	and.w	r5, r5, #1
 8003e58:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003e5c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e5e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e62:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e64:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e66:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003e6a:	f04f 0e0f 	mov.w	lr, #15
 8003e6e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e72:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e76:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e7a:	d033      	beq.n	8003ee4 <HAL_GPIO_Init+0x16c>
 8003e7c:	4d1e      	ldr	r5, [pc, #120]	@ (8003ef8 <HAL_GPIO_Init+0x180>)
 8003e7e:	42a8      	cmp	r0, r5
 8003e80:	d032      	beq.n	8003ee8 <HAL_GPIO_Init+0x170>
 8003e82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e86:	42a8      	cmp	r0, r5
 8003e88:	d030      	beq.n	8003eec <HAL_GPIO_Init+0x174>
 8003e8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e8e:	42a8      	cmp	r0, r5
 8003e90:	d02e      	beq.n	8003ef0 <HAL_GPIO_Init+0x178>
 8003e92:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e96:	42a8      	cmp	r0, r5
 8003e98:	bf14      	ite	ne
 8003e9a:	2505      	movne	r5, #5
 8003e9c:	2504      	moveq	r5, #4
 8003e9e:	fa05 f50c 	lsl.w	r5, r5, ip
 8003ea2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ea6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8003ea8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003eaa:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eac:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8003eb0:	bf0c      	ite	eq
 8003eb2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003eb4:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8003eb6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8003eb8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eba:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8003ebe:	bf0c      	ite	eq
 8003ec0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003ec2:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8003ec4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8003ec6:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8003ecc:	bf0c      	ite	eq
 8003ece:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003ed0:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8003ed2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8003ed4:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ed6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003ed8:	bf54      	ite	pl
 8003eda:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003edc:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8003ede:	6025      	str	r5, [r4, #0]
    position++;
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e74f      	b.n	8003d84 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	e7da      	b.n	8003e9e <HAL_GPIO_Init+0x126>
 8003ee8:	2501      	movs	r5, #1
 8003eea:	e7d8      	b.n	8003e9e <HAL_GPIO_Init+0x126>
 8003eec:	2502      	movs	r5, #2
 8003eee:	e7d6      	b.n	8003e9e <HAL_GPIO_Init+0x126>
 8003ef0:	2503      	movs	r5, #3
 8003ef2:	e7d4      	b.n	8003e9e <HAL_GPIO_Init+0x126>
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	48000400 	.word	0x48000400
 8003efc:	40021000 	.word	0x40021000

08003f00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f00:	b10a      	cbz	r2, 8003f06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f02:	6181      	str	r1, [r0, #24]
 8003f04:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f06:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003f0c:	4a02      	ldr	r2, [pc, #8]	@ (8003f18 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]
}
 8003f16:	4770      	bx	lr
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f20:	4605      	mov	r5, r0
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d033      	beq.n	8003f8e <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	6803      	ldr	r3, [r0, #0]
 8003f28:	07da      	lsls	r2, r3, #31
 8003f2a:	d411      	bmi.n	8003f50 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	079b      	lsls	r3, r3, #30
 8003f30:	f100 8081 	bmi.w	8004036 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	071c      	lsls	r4, r3, #28
 8003f38:	f100 80eb 	bmi.w	8004112 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	0758      	lsls	r0, r3, #29
 8003f40:	f100 8130 	bmi.w	80041a4 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f44:	69eb      	ldr	r3, [r5, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 81b5 	bne.w	80042b6 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e047      	b.n	8003fe0 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f50:	4cb0      	ldr	r4, [pc, #704]	@ (8004214 <HAL_RCC_OscConfig+0x2f8>)
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d115      	bne.n	8003f92 <HAL_RCC_OscConfig+0x76>
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	03df      	lsls	r7, r3, #15
 8003f6a:	d512      	bpl.n	8003f92 <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f70:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	6821      	ldr	r1, [r4, #0]
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	420b      	tst	r3, r1
 8003f86:	d0d1      	beq.n	8003f2c <HAL_RCC_OscConfig+0x10>
 8003f88:	686b      	ldr	r3, [r5, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ce      	bne.n	8003f2c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003f8e:	2001      	movs	r0, #1
 8003f90:	e026      	b.n	8003fe0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	686a      	ldr	r2, [r5, #4]
 8003f94:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003f98:	d125      	bne.n	8003fe6 <HAL_RCC_OscConfig+0xca>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fa2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003fa4:	68a9      	ldr	r1, [r5, #8]
 8003fa6:	f023 030f 	bic.w	r3, r3, #15
 8003faa:	430b      	orrs	r3, r1
 8003fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fae:	b352      	cbz	r2, 8004006 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8003fb0:	f7ff f886 	bl	80030c0 <HAL_GetTick>
 8003fb4:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003fb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	f04f 0801 	mov.w	r8, #1
 8003fbe:	fa97 f3a7 	rbit	r3, r7
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	fa97 f3a7 	rbit	r3, r7
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	fa08 f303 	lsl.w	r3, r8, r3
 8003fd0:	4213      	tst	r3, r2
 8003fd2:	d1ab      	bne.n	8003f2c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7ff f874 	bl	80030c0 <HAL_GetTick>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	2864      	cmp	r0, #100	@ 0x64
 8003fdc:	d9ef      	bls.n	8003fbe <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8003fde:	2003      	movs	r0, #3
}
 8003fe0:	b002      	add	sp, #8
 8003fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	b932      	cbnz	r2, 8003ff8 <HAL_RCC_OscConfig+0xdc>
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ff6:	e7d3      	b.n	8003fa0 <HAL_RCC_OscConfig+0x84>
 8003ff8:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8003ffc:	d1f5      	bne.n	8003fea <HAL_RCC_OscConfig+0xce>
 8003ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	e7c9      	b.n	8003f9a <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8004006:	f7ff f85b 	bl	80030c0 <HAL_GetTick>
 800400a:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800400e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004010:	f04f 0801 	mov.w	r8, #1
 8004014:	fa97 f3a7 	rbit	r3, r7
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	fa97 f3a7 	rbit	r3, r7
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	fa08 f303 	lsl.w	r3, r8, r3
 8004026:	4213      	tst	r3, r2
 8004028:	d080      	beq.n	8003f2c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402a:	f7ff f849 	bl	80030c0 <HAL_GetTick>
 800402e:	1b80      	subs	r0, r0, r6
 8004030:	2864      	cmp	r0, #100	@ 0x64
 8004032:	d9ef      	bls.n	8004014 <HAL_RCC_OscConfig+0xf8>
 8004034:	e7d3      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004036:	4c77      	ldr	r4, [pc, #476]	@ (8004214 <HAL_RCC_OscConfig+0x2f8>)
 8004038:	6863      	ldr	r3, [r4, #4]
 800403a:	f013 0f0c 	tst.w	r3, #12
 800403e:	d007      	beq.n	8004050 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11f      	bne.n	800408a <HAL_RCC_OscConfig+0x16e>
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	03de      	lsls	r6, r3, #15
 800404e:	d41c      	bmi.n	800408a <HAL_RCC_OscConfig+0x16e>
 8004050:	2302      	movs	r3, #2
 8004052:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	6821      	ldr	r1, [r4, #0]
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	2201      	movs	r2, #1
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	420b      	tst	r3, r1
 8004068:	d002      	beq.n	8004070 <HAL_RCC_OscConfig+0x154>
 800406a:	692b      	ldr	r3, [r5, #16]
 800406c:	4293      	cmp	r3, r2
 800406e:	d18e      	bne.n	8003f8e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	6821      	ldr	r1, [r4, #0]
 8004072:	22f8      	movs	r2, #248	@ 0xf8
 8004074:	fa92 f2a2 	rbit	r2, r2
 8004078:	696b      	ldr	r3, [r5, #20]
 800407a:	fab2 f282 	clz	r2, r2
 800407e:	4093      	lsls	r3, r2
 8004080:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8004084:	4313      	orrs	r3, r2
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	e754      	b.n	8003f34 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800408a:	692a      	ldr	r2, [r5, #16]
 800408c:	2601      	movs	r6, #1
 800408e:	b1fa      	cbz	r2, 80040d0 <HAL_RCC_OscConfig+0x1b4>
 8004090:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800409c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f04f 0802 	mov.w	r8, #2
 80040a6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80040a8:	f7ff f80a 	bl	80030c0 <HAL_GetTick>
 80040ac:	4607      	mov	r7, r0
 80040ae:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	fa98 f3a8 	rbit	r3, r8
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	fa06 f303 	lsl.w	r3, r6, r3
 80040c0:	4213      	tst	r3, r2
 80040c2:	d1d5      	bne.n	8004070 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c4:	f7fe fffc 	bl	80030c0 <HAL_GetTick>
 80040c8:	1bc0      	subs	r0, r0, r7
 80040ca:	2802      	cmp	r0, #2
 80040cc:	d9ef      	bls.n	80040ae <HAL_RCC_OscConfig+0x192>
 80040ce:	e786      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
 80040d0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	f04f 0802 	mov.w	r8, #2
 80040e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040e8:	f7fe ffea 	bl	80030c0 <HAL_GetTick>
 80040ec:	4607      	mov	r7, r0
 80040ee:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	fa98 f3a8 	rbit	r3, r8
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	fa06 f303 	lsl.w	r3, r6, r3
 8004100:	4213      	tst	r3, r2
 8004102:	f43f af17 	beq.w	8003f34 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004106:	f7fe ffdb 	bl	80030c0 <HAL_GetTick>
 800410a:	1bc0      	subs	r0, r0, r7
 800410c:	2802      	cmp	r0, #2
 800410e:	d9ee      	bls.n	80040ee <HAL_RCC_OscConfig+0x1d2>
 8004110:	e765      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004112:	69aa      	ldr	r2, [r5, #24]
 8004114:	4e3f      	ldr	r6, [pc, #252]	@ (8004214 <HAL_RCC_OscConfig+0x2f8>)
 8004116:	4940      	ldr	r1, [pc, #256]	@ (8004218 <HAL_RCC_OscConfig+0x2fc>)
 8004118:	2401      	movs	r4, #1
 800411a:	b30a      	cbz	r2, 8004160 <HAL_RCC_OscConfig+0x244>
 800411c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	440b      	add	r3, r1
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	2702      	movs	r7, #2
 800412a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800412c:	f7fe ffc8 	bl	80030c0 <HAL_GetTick>
 8004130:	4680      	mov	r8, r0
 8004132:	fa97 f3a7 	rbit	r3, r7
 8004136:	fa97 f3a7 	rbit	r3, r7
 800413a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004140:	fa97 f3a7 	rbit	r3, r7
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	fa04 f303 	lsl.w	r3, r4, r3
 800414c:	4213      	tst	r3, r2
 800414e:	f47f aef5 	bne.w	8003f3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004152:	f7fe ffb5 	bl	80030c0 <HAL_GetTick>
 8004156:	eba0 0008 	sub.w	r0, r0, r8
 800415a:	2802      	cmp	r0, #2
 800415c:	d9e9      	bls.n	8004132 <HAL_RCC_OscConfig+0x216>
 800415e:	e73e      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
 8004160:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	440b      	add	r3, r1
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	2702      	movs	r7, #2
 800416e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004170:	f7fe ffa6 	bl	80030c0 <HAL_GetTick>
 8004174:	4680      	mov	r8, r0
 8004176:	fa97 f3a7 	rbit	r3, r7
 800417a:	fa97 f3a7 	rbit	r3, r7
 800417e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004182:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8004184:	fa97 f3a7 	rbit	r3, r7
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	fa04 f303 	lsl.w	r3, r4, r3
 8004190:	4213      	tst	r3, r2
 8004192:	f43f aed3 	beq.w	8003f3c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe ff93 	bl	80030c0 <HAL_GetTick>
 800419a:	eba0 0008 	sub.w	r0, r0, r8
 800419e:	2802      	cmp	r0, #2
 80041a0:	d9e9      	bls.n	8004176 <HAL_RCC_OscConfig+0x25a>
 80041a2:	e71c      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a4:	4c1b      	ldr	r4, [pc, #108]	@ (8004214 <HAL_RCC_OscConfig+0x2f8>)
 80041a6:	69e3      	ldr	r3, [r4, #28]
 80041a8:	00d9      	lsls	r1, r3, #3
 80041aa:	d431      	bmi.n	8004210 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ac:	69e3      	ldr	r3, [r4, #28]
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	61e3      	str	r3, [r4, #28]
 80041b4:	69e3      	ldr	r3, [r4, #28]
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80041be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	4f16      	ldr	r7, [pc, #88]	@ (800421c <HAL_RCC_OscConfig+0x300>)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	05da      	lsls	r2, r3, #23
 80041c6:	d52b      	bpl.n	8004220 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	68eb      	ldr	r3, [r5, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d139      	bne.n	8004242 <HAL_RCC_OscConfig+0x326>
 80041ce:	6a23      	ldr	r3, [r4, #32]
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80041d6:	f7fe ff73 	bl	80030c0 <HAL_GetTick>
 80041da:	2702      	movs	r7, #2
 80041dc:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041de:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80041e6:	fa97 f3a7 	rbit	r3, r7
 80041ea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	6a22      	ldr	r2, [r4, #32]
 80041f0:	fa97 f3a7 	rbit	r3, r7
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	fa09 f303 	lsl.w	r3, r9, r3
 80041fc:	4213      	tst	r3, r2
 80041fe:	d053      	beq.n	80042a8 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8004200:	2e00      	cmp	r6, #0
 8004202:	f43f ae9f 	beq.w	8003f44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004206:	69e3      	ldr	r3, [r4, #28]
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	61e3      	str	r3, [r4, #28]
 800420e:	e699      	b.n	8003f44 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8004210:	2600      	movs	r6, #0
 8004212:	e7d5      	b.n	80041c0 <HAL_RCC_OscConfig+0x2a4>
 8004214:	40021000 	.word	0x40021000
 8004218:	10908120 	.word	0x10908120
 800421c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004226:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004228:	f7fe ff4a 	bl	80030c0 <HAL_GetTick>
 800422c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	05db      	lsls	r3, r3, #23
 8004232:	d4c9      	bmi.n	80041c8 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fe ff44 	bl	80030c0 <HAL_GetTick>
 8004238:	eba0 0008 	sub.w	r0, r0, r8
 800423c:	2864      	cmp	r0, #100	@ 0x64
 800423e:	d9f6      	bls.n	800422e <HAL_RCC_OscConfig+0x312>
 8004240:	e6cd      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004242:	bb1b      	cbnz	r3, 800428c <HAL_RCC_OscConfig+0x370>
 8004244:	6a23      	ldr	r3, [r4, #32]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6223      	str	r3, [r4, #32]
 800424c:	6a23      	ldr	r3, [r4, #32]
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004254:	f7fe ff34 	bl	80030c0 <HAL_GetTick>
 8004258:	2702      	movs	r7, #2
 800425a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425c:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004264:	fa97 f3a7 	rbit	r3, r7
 8004268:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	6a22      	ldr	r2, [r4, #32]
 800426e:	fa97 f3a7 	rbit	r3, r7
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	fa09 f303 	lsl.w	r3, r9, r3
 800427a:	4213      	tst	r3, r2
 800427c:	d0c0      	beq.n	8004200 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fe ff1f 	bl	80030c0 <HAL_GetTick>
 8004282:	eba0 0008 	sub.w	r0, r0, r8
 8004286:	4550      	cmp	r0, sl
 8004288:	d9ec      	bls.n	8004264 <HAL_RCC_OscConfig+0x348>
 800428a:	e6a8      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	2b05      	cmp	r3, #5
 800428e:	6a23      	ldr	r3, [r4, #32]
 8004290:	d103      	bne.n	800429a <HAL_RCC_OscConfig+0x37e>
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6223      	str	r3, [r4, #32]
 8004298:	e799      	b.n	80041ce <HAL_RCC_OscConfig+0x2b2>
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	6223      	str	r3, [r4, #32]
 80042a0:	6a23      	ldr	r3, [r4, #32]
 80042a2:	f023 0304 	bic.w	r3, r3, #4
 80042a6:	e795      	b.n	80041d4 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe ff0a 	bl	80030c0 <HAL_GetTick>
 80042ac:	eba0 0008 	sub.w	r0, r0, r8
 80042b0:	4550      	cmp	r0, sl
 80042b2:	d998      	bls.n	80041e6 <HAL_RCC_OscConfig+0x2ca>
 80042b4:	e693      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b6:	4c46      	ldr	r4, [pc, #280]	@ (80043d0 <HAL_RCC_OscConfig+0x4b4>)
 80042b8:	6862      	ldr	r2, [r4, #4]
 80042ba:	f002 020c 	and.w	r2, r2, #12
 80042be:	2a08      	cmp	r2, #8
 80042c0:	d074      	beq.n	80043ac <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042c8:	d14d      	bne.n	8004366 <HAL_RCC_OscConfig+0x44a>
 80042ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042e0:	f7fe feee 	bl	80030c0 <HAL_GetTick>
 80042e4:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 80042e8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ea:	2601      	movs	r6, #1
 80042ec:	fa98 f3a8 	rbit	r3, r8
 80042f0:	6822      	ldr	r2, [r4, #0]
 80042f2:	fa98 f3a8 	rbit	r3, r8
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	fa06 f303 	lsl.w	r3, r6, r3
 80042fe:	4213      	tst	r3, r2
 8004300:	d12b      	bne.n	800435a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004302:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8004306:	6862      	ldr	r2, [r4, #4]
 8004308:	430b      	orrs	r3, r1
 800430a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800430e:	4313      	orrs	r3, r2
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004316:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004322:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004326:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004328:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800432a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800432c:	f7fe fec8 	bl	80030c0 <HAL_GetTick>
 8004330:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004334:	4605      	mov	r5, r0
 8004336:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	fa96 f3a6 	rbit	r3, r6
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	fa07 f303 	lsl.w	r3, r7, r3
 8004348:	4213      	tst	r3, r2
 800434a:	f47f adff 	bne.w	8003f4c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fe feb7 	bl	80030c0 <HAL_GetTick>
 8004352:	1b40      	subs	r0, r0, r5
 8004354:	2802      	cmp	r0, #2
 8004356:	d9ee      	bls.n	8004336 <HAL_RCC_OscConfig+0x41a>
 8004358:	e641      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435a:	f7fe feb1 	bl	80030c0 <HAL_GetTick>
 800435e:	1bc0      	subs	r0, r0, r7
 8004360:	2802      	cmp	r0, #2
 8004362:	d9c3      	bls.n	80042ec <HAL_RCC_OscConfig+0x3d0>
 8004364:	e63b      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
 8004366:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004372:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800437c:	f7fe fea0 	bl	80030c0 <HAL_GetTick>
 8004380:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8004384:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004386:	2701      	movs	r7, #1
 8004388:	fa96 f3a6 	rbit	r3, r6
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	fa96 f3a6 	rbit	r3, r6
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	fa07 f303 	lsl.w	r3, r7, r3
 800439a:	4213      	tst	r3, r2
 800439c:	f43f add6 	beq.w	8003f4c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fe8e 	bl	80030c0 <HAL_GetTick>
 80043a4:	1b40      	subs	r0, r0, r5
 80043a6:	2802      	cmp	r0, #2
 80043a8:	d9ee      	bls.n	8004388 <HAL_RCC_OscConfig+0x46c>
 80043aa:	e618      	b.n	8003fde <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f43f adee 	beq.w	8003f8e <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80043b2:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043b4:	6a2b      	ldr	r3, [r5, #32]
 80043b6:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80043ba:	429a      	cmp	r2, r3
 80043bc:	f47f ade7 	bne.w	8003f8e <HAL_RCC_OscConfig+0x72>
 80043c0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043c2:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043c6:	1ac0      	subs	r0, r0, r3
 80043c8:	bf18      	it	ne
 80043ca:	2001      	movne	r0, #1
 80043cc:	e608      	b.n	8003fe0 <HAL_RCC_OscConfig+0xc4>
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x34>)
 80043d6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d8:	f002 010c 	and.w	r1, r2, #12
 80043dc:	2908      	cmp	r1, #8
 80043de:	d111      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043e2:	480a      	ldr	r0, [pc, #40]	@ (800440c <HAL_RCC_GetSysClockFreq+0x38>)
 80043e4:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043e8:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043ea:	bf44      	itt	mi
 80043ec:	f003 030f 	andmi.w	r3, r3, #15
 80043f0:	4a07      	ldrmi	r2, [pc, #28]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043f2:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80043f4:	bf49      	itett	mi
 80043f6:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043f8:	4b06      	ldrpl	r3, [pc, #24]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043fa:	4b07      	ldrmi	r3, [pc, #28]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x44>)
 80043fc:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004400:	4358      	muls	r0, r3
 8004402:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004404:	4804      	ldr	r0, [pc, #16]	@ (8004418 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004406:	4770      	bx	lr
 8004408:	40021000 	.word	0x40021000
 800440c:	0800efb4 	.word	0x0800efb4
 8004410:	0800efa4 	.word	0x0800efa4
 8004414:	003d0900 	.word	0x003d0900
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_ClockConfig>:
{
 800441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004422:	4604      	mov	r4, r0
 8004424:	b910      	cbnz	r0, 800442c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004426:	2001      	movs	r0, #1
}
 8004428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4a4a      	ldr	r2, [pc, #296]	@ (8004558 <HAL_RCC_ClockConfig+0x13c>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	428b      	cmp	r3, r1
 8004436:	d32e      	bcc.n	8004496 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	0791      	lsls	r1, r2, #30
 800443c:	d436      	bmi.n	80044ac <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	07d2      	lsls	r2, r2, #31
 8004440:	d43c      	bmi.n	80044bc <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004442:	4a45      	ldr	r2, [pc, #276]	@ (8004558 <HAL_RCC_ClockConfig+0x13c>)
 8004444:	6813      	ldr	r3, [r2, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	42ab      	cmp	r3, r5
 800444c:	d870      	bhi.n	8004530 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444e:	6822      	ldr	r2, [r4, #0]
 8004450:	4d42      	ldr	r5, [pc, #264]	@ (800455c <HAL_RCC_ClockConfig+0x140>)
 8004452:	f012 0f04 	tst.w	r2, #4
 8004456:	d177      	bne.n	8004548 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	0713      	lsls	r3, r2, #28
 800445a:	d506      	bpl.n	800446a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445c:	686b      	ldr	r3, [r5, #4]
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004464:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004468:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800446a:	f7ff ffb3 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 800446e:	686b      	ldr	r3, [r5, #4]
 8004470:	22f0      	movs	r2, #240	@ 0xf0
 8004472:	fa92 f2a2 	rbit	r2, r2
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800447e:	40d3      	lsrs	r3, r2
 8004480:	4a37      	ldr	r2, [pc, #220]	@ (8004560 <HAL_RCC_ClockConfig+0x144>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	40d8      	lsrs	r0, r3
 8004486:	4b37      	ldr	r3, [pc, #220]	@ (8004564 <HAL_RCC_ClockConfig+0x148>)
 8004488:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800448a:	4b37      	ldr	r3, [pc, #220]	@ (8004568 <HAL_RCC_ClockConfig+0x14c>)
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f7fe fc79 	bl	8002d84 <HAL_InitTick>
  return HAL_OK;
 8004492:	2000      	movs	r0, #0
 8004494:	e7c8      	b.n	8004428 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	f023 0307 	bic.w	r3, r3, #7
 800449c:	430b      	orrs	r3, r1
 800449e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	428b      	cmp	r3, r1
 80044a8:	d1bd      	bne.n	8004426 <HAL_RCC_ClockConfig+0xa>
 80044aa:	e7c5      	b.n	8004438 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	492b      	ldr	r1, [pc, #172]	@ (800455c <HAL_RCC_ClockConfig+0x140>)
 80044ae:	68a0      	ldr	r0, [r4, #8]
 80044b0:	684b      	ldr	r3, [r1, #4]
 80044b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044b6:	4303      	orrs	r3, r0
 80044b8:	604b      	str	r3, [r1, #4]
 80044ba:	e7c0      	b.n	800443e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	4e27      	ldr	r6, [pc, #156]	@ (800455c <HAL_RCC_ClockConfig+0x140>)
 80044c0:	2a01      	cmp	r2, #1
 80044c2:	d124      	bne.n	800450e <HAL_RCC_ClockConfig+0xf2>
 80044c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044c8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044cc:	6831      	ldr	r1, [r6, #0]
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	d0a3      	beq.n	8004426 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	6873      	ldr	r3, [r6, #4]
 80044e0:	f023 0303 	bic.w	r3, r3, #3
 80044e4:	4313      	orrs	r3, r2
 80044e6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80044e8:	f7fe fdea 	bl	80030c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80044f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	6873      	ldr	r3, [r6, #4]
 80044f4:	6862      	ldr	r2, [r4, #4]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044fe:	d0a0      	beq.n	8004442 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fe fdde 	bl	80030c0 <HAL_GetTick>
 8004504:	1bc0      	subs	r0, r0, r7
 8004506:	4540      	cmp	r0, r8
 8004508:	d9f3      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800450a:	2003      	movs	r0, #3
 800450c:	e78c      	b.n	8004428 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450e:	2a02      	cmp	r2, #2
 8004510:	bf0c      	ite	eq
 8004512:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8004516:	2302      	movne	r3, #2
 8004518:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	6830      	ldr	r0, [r6, #0]
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	2101      	movs	r1, #1
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	4203      	tst	r3, r0
 800452e:	e7d5      	b.n	80044dc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	432b      	orrs	r3, r5
 8004538:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	42ab      	cmp	r3, r5
 8004542:	f47f af70 	bne.w	8004426 <HAL_RCC_ClockConfig+0xa>
 8004546:	e782      	b.n	800444e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	686b      	ldr	r3, [r5, #4]
 800454a:	68e1      	ldr	r1, [r4, #12]
 800454c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004550:	430b      	orrs	r3, r1
 8004552:	606b      	str	r3, [r5, #4]
 8004554:	e780      	b.n	8004458 <HAL_RCC_ClockConfig+0x3c>
 8004556:	bf00      	nop
 8004558:	40022000 	.word	0x40022000
 800455c:	40021000 	.word	0x40021000
 8004560:	0800ef94 	.word	0x0800ef94
 8004564:	20000010 	.word	0x20000010
 8004568:	20000018 	.word	0x20000018

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	fa92 f2a2 	rbit	r2, r2
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004580:	40d3      	lsrs	r3, r2
 8004582:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004588:	6810      	ldr	r0, [r2, #0]
}    
 800458a:	40d8      	lsrs	r0, r3
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	0800ef8c 	.word	0x0800ef8c
 8004598:	20000010 	.word	0x20000010

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800459c:	4b08      	ldr	r3, [pc, #32]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	fa92 f2a2 	rbit	r2, r2
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80045b0:	40d3      	lsrs	r3, r2
 80045b2:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045b4:	5cd3      	ldrb	r3, [r2, r3]
 80045b6:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80045b8:	6810      	ldr	r0, [r2, #0]
} 
 80045ba:	40d8      	lsrs	r0, r3
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800ef8c 	.word	0x0800ef8c
 80045c8:	20000010 	.word	0x20000010

080045cc <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045cc:	230f      	movs	r3, #15
 80045ce:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <HAL_RCC_GetClockConfig+0x34>)
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80045e0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80045e8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045f2:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80045f4:	4b03      	ldr	r3, [pc, #12]	@ (8004604 <HAL_RCC_GetClockConfig+0x38>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	600b      	str	r3, [r1, #0]
}
 80045fe:	4770      	bx	lr
 8004600:	40021000 	.word	0x40021000
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004608:	6803      	ldr	r3, [r0, #0]
{
 800460a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800460e:	03dd      	lsls	r5, r3, #15
{
 8004610:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004612:	d524      	bpl.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004614:	4d78      	ldr	r5, [pc, #480]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004616:	69eb      	ldr	r3, [r5, #28]
 8004618:	00d8      	lsls	r0, r3, #3
 800461a:	f100 8091 	bmi.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	69eb      	ldr	r3, [r5, #28]
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004624:	61eb      	str	r3, [r5, #28]
 8004626:	69eb      	ldr	r3, [r5, #28]
 8004628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004630:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004632:	4f72      	ldr	r7, [pc, #456]	@ (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	05d9      	lsls	r1, r3, #23
 8004638:	f140 8084 	bpl.w	8004744 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463e:	6862      	ldr	r2, [r4, #4]
 8004640:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004644:	f040 8093 	bne.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004648:	6a2b      	ldr	r3, [r5, #32]
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004650:	4313      	orrs	r3, r2
 8004652:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004654:	b11e      	cbz	r6, 800465e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	69eb      	ldr	r3, [r5, #28]
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465c:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	07df      	lsls	r7, r3, #31
 8004662:	d506      	bpl.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004664:	4964      	ldr	r1, [pc, #400]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004666:	68a0      	ldr	r0, [r4, #8]
 8004668:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800466a:	f022 0203 	bic.w	r2, r2, #3
 800466e:	4302      	orrs	r2, r0
 8004670:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004672:	079e      	lsls	r6, r3, #30
 8004674:	d506      	bpl.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004676:	4960      	ldr	r1, [pc, #384]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004678:	68e0      	ldr	r0, [r4, #12]
 800467a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800467c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004680:	4302      	orrs	r2, r0
 8004682:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004684:	075d      	lsls	r5, r3, #29
 8004686:	d506      	bpl.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004688:	495b      	ldr	r1, [pc, #364]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800468a:	6920      	ldr	r0, [r4, #16]
 800468c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800468e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004692:	4302      	orrs	r2, r0
 8004694:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004696:	0698      	lsls	r0, r3, #26
 8004698:	d506      	bpl.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469a:	4957      	ldr	r1, [pc, #348]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800469c:	69e0      	ldr	r0, [r4, #28]
 800469e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80046a0:	f022 0210 	bic.w	r2, r2, #16
 80046a4:	4302      	orrs	r2, r0
 80046a6:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046a8:	0399      	lsls	r1, r3, #14
 80046aa:	d506      	bpl.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046ac:	4952      	ldr	r1, [pc, #328]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80046b0:	684a      	ldr	r2, [r1, #4]
 80046b2:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80046b6:	4302      	orrs	r2, r0
 80046b8:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ba:	065a      	lsls	r2, r3, #25
 80046bc:	d506      	bpl.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046be:	494e      	ldr	r1, [pc, #312]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046c0:	6a20      	ldr	r0, [r4, #32]
 80046c2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80046c4:	f022 0220 	bic.w	r2, r2, #32
 80046c8:	4302      	orrs	r2, r0
 80046ca:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046cc:	071f      	lsls	r7, r3, #28
 80046ce:	d506      	bpl.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d0:	4949      	ldr	r1, [pc, #292]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046d2:	6960      	ldr	r0, [r4, #20]
 80046d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80046d6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80046da:	4302      	orrs	r2, r0
 80046dc:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046de:	06de      	lsls	r6, r3, #27
 80046e0:	d506      	bpl.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e2:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046e4:	69a0      	ldr	r0, [r4, #24]
 80046e6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80046e8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80046ec:	4302      	orrs	r2, r0
 80046ee:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046f0:	059d      	lsls	r5, r3, #22
 80046f2:	d506      	bpl.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f4:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80046f6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80046f8:	684a      	ldr	r2, [r1, #4]
 80046fa:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80046fe:	4302      	orrs	r2, r0
 8004700:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004702:	0618      	lsls	r0, r3, #24
 8004704:	d506      	bpl.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004706:	493c      	ldr	r1, [pc, #240]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004708:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800470a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800470c:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8004710:	4302      	orrs	r2, r0
 8004712:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004714:	05d9      	lsls	r1, r3, #23
 8004716:	d506      	bpl.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004718:	4937      	ldr	r1, [pc, #220]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800471a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800471c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800471e:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8004722:	4302      	orrs	r2, r0
 8004724:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004726:	04da      	lsls	r2, r3, #19
 8004728:	d506      	bpl.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800472a:	4933      	ldr	r1, [pc, #204]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800472c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800472e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004734:	4302      	orrs	r2, r0
 8004736:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004738:	049b      	lsls	r3, r3, #18
 800473a:	d454      	bmi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800473c:	2000      	movs	r0, #0
 800473e:	e013      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8004740:	2600      	movs	r6, #0
 8004742:	e776      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800474c:	f7fe fcb8 	bl	80030c0 <HAL_GetTick>
 8004750:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	05da      	lsls	r2, r3, #23
 8004756:	f53f af71 	bmi.w	800463c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fe fcb1 	bl	80030c0 <HAL_GetTick>
 800475e:	eba0 0008 	sub.w	r0, r0, r8
 8004762:	2864      	cmp	r0, #100	@ 0x64
 8004764:	d9f5      	bls.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8004766:	2003      	movs	r0, #3
}
 8004768:	b002      	add	sp, #8
 800476a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800476e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004772:	429a      	cmp	r2, r3
 8004774:	f43f af68 	beq.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004778:	6a29      	ldr	r1, [r5, #32]
 800477a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800477e:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004782:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004786:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8004800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800478a:	fab2 f282 	clz	r2, r2
 800478e:	4462      	add	r2, ip
 8004790:	0092      	lsls	r2, r2, #2
 8004792:	2701      	movs	r7, #1
 8004794:	6017      	str	r7, [r2, #0]
 8004796:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	4463      	add	r3, ip
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047a6:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80047a8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047aa:	f57f af4d 	bpl.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80047ae:	f7fe fc87 	bl	80030c0 <HAL_GetTick>
 80047b2:	f04f 0802 	mov.w	r8, #2
 80047b6:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80047bc:	fa98 f3a8 	rbit	r3, r8
 80047c0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	6a2a      	ldr	r2, [r5, #32]
 80047c6:	fa98 f3a8 	rbit	r3, r8
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	fa07 f303 	lsl.w	r3, r7, r3
 80047d2:	4213      	tst	r3, r2
 80047d4:	f47f af38 	bne.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fe fc72 	bl	80030c0 <HAL_GetTick>
 80047dc:	eba0 0009 	sub.w	r0, r0, r9
 80047e0:	4550      	cmp	r0, sl
 80047e2:	d9eb      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80047e4:	e7bf      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047e6:	4a04      	ldr	r2, [pc, #16]	@ (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80047e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ea:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80047ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f4:	e7a2      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x134>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40007000 	.word	0x40007000
 8004800:	10908100 	.word	0x10908100

08004804 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004804:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <HAL_RTC_WaitForSynchro+0x2c>)
 800480a:	60da      	str	r2, [r3, #12]
{
 800480c:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 800480e:	f7fe fc57 	bl	80030c0 <HAL_GetTick>
 8004812:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	069b      	lsls	r3, r3, #26
 800481a:	d501      	bpl.n	8004820 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800481c:	2000      	movs	r0, #0
}
 800481e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004820:	f7fe fc4e 	bl	80030c0 <HAL_GetTick>
 8004824:	1b40      	subs	r0, r0, r5
 8004826:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800482a:	d9f3      	bls.n	8004814 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 800482c:	2003      	movs	r0, #3
 800482e:	e7f6      	b.n	800481e <HAL_RTC_WaitForSynchro+0x1a>
 8004830:	0001ff5f 	.word	0x0001ff5f

08004834 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004834:	6803      	ldr	r3, [r0, #0]
{
 8004836:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004838:	68dc      	ldr	r4, [r3, #12]
 800483a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 800483e:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004840:	d117      	bne.n	8004872 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004848:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800484a:	f7fe fc39 	bl	80030c0 <HAL_GetTick>
 800484e:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	065b      	lsls	r3, r3, #25
 8004856:	d400      	bmi.n	800485a <RTC_EnterInitMode+0x26>
 8004858:	b10c      	cbz	r4, 800485e <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 800485a:	4620      	mov	r0, r4
 800485c:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800485e:	f7fe fc2f 	bl	80030c0 <HAL_GetTick>
 8004862:	1b80      	subs	r0, r0, r6
 8004864:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004868:	bf82      	ittt	hi
 800486a:	2304      	movhi	r3, #4
 800486c:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 800486e:	2401      	movhi	r4, #1
 8004870:	e7ee      	b.n	8004850 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2400      	movs	r4, #0
 8004874:	e7f1      	b.n	800485a <RTC_EnterInitMode+0x26>

08004876 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004876:	6803      	ldr	r3, [r0, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 800487e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004880:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	069b      	lsls	r3, r3, #26
{
 8004886:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004888:	d501      	bpl.n	800488e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800488c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800488e:	f7ff ffb9 	bl	8004804 <HAL_RTC_WaitForSynchro>
 8004892:	2800      	cmp	r0, #0
 8004894:	d0f9      	beq.n	800488a <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004896:	2304      	movs	r3, #4
 8004898:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800489a:	2001      	movs	r0, #1
 800489c:	e7f6      	b.n	800488c <RTC_ExitInitMode+0x16>

0800489e <HAL_RTC_Init>:
{
 800489e:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80048a0:	4604      	mov	r4, r0
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d041      	beq.n	800492a <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048a6:	7f43      	ldrb	r3, [r0, #29]
 80048a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80048ac:	b913      	cbnz	r3, 80048b4 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80048ae:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80048b0:	f7fe f90e 	bl	8002ad0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b4:	2302      	movs	r3, #2
 80048b6:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	06d2      	lsls	r2, r2, #27
 80048be:	d503      	bpl.n	80048c8 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	7763      	strb	r3, [r4, #29]
 80048c4:	2000      	movs	r0, #0
}
 80048c6:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048c8:	22ca      	movs	r2, #202	@ 0xca
 80048ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80048cc:	2253      	movs	r2, #83	@ 0x53
 80048ce:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80048d0:	4620      	mov	r0, r4
 80048d2:	f7ff ffaf 	bl	8004834 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80048d6:	bb10      	cbnz	r0, 800491e <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048d8:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048da:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80048e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048e6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048e8:	6862      	ldr	r2, [r4, #4]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	4302      	orrs	r2, r0
 80048ee:	6960      	ldr	r0, [r4, #20]
 80048f0:	4302      	orrs	r2, r0
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048f6:	68e2      	ldr	r2, [r4, #12]
 80048f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68a1      	ldr	r1, [r4, #8]
 80048fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004902:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ffb6 	bl	8004876 <RTC_ExitInitMode>
    if (status == HAL_OK)
 800490a:	b940      	cbnz	r0, 800491e <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800490c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800490e:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004912:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800491a:	430a      	orrs	r2, r1
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	22ff      	movs	r2, #255	@ 0xff
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8004924:	2800      	cmp	r0, #0
 8004926:	d0cb      	beq.n	80048c0 <HAL_RTC_Init+0x22>
 8004928:	e7cd      	b.n	80048c6 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 800492a:	2001      	movs	r0, #1
 800492c:	e7cb      	b.n	80048c6 <HAL_RTC_Init+0x28>

0800492e <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 800492e:	2300      	movs	r3, #0

  while (number >= 10U)
 8004930:	2809      	cmp	r0, #9
 8004932:	d803      	bhi.n	800493c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004934:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8004938:	b2c0      	uxtb	r0, r0
 800493a:	4770      	bx	lr
    number -= 10U;
 800493c:	380a      	subs	r0, #10
    bcdhigh++;
 800493e:	3301      	adds	r3, #1
    number -= 10U;
 8004940:	b2c0      	uxtb	r0, r0
 8004942:	e7f5      	b.n	8004930 <RTC_ByteToBcd2+0x2>

08004944 <HAL_RTC_SetTime>:
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8004948:	7f03      	ldrb	r3, [r0, #28]
 800494a:	2b01      	cmp	r3, #1
{
 800494c:	4606      	mov	r6, r0
 800494e:	460f      	mov	r7, r1
 8004950:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004954:	d041      	beq.n	80049da <HAL_RTC_SetTime+0x96>
 8004956:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004958:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 800495a:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800495c:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 800495e:	7838      	ldrb	r0, [r7, #0]
 8004960:	787d      	ldrb	r5, [r7, #1]
 8004962:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004964:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8004966:	2a00      	cmp	r2, #0
 8004968:	d139      	bne.n	80049de <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800496a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 800496e:	bf08      	it	eq
 8004970:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004972:	f7ff ffdc 	bl	800492e <RTC_ByteToBcd2>
 8004976:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004978:	4628      	mov	r0, r5
 800497a:	f7ff ffd8 	bl	800492e <RTC_ByteToBcd2>
 800497e:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff ffd4 	bl	800492e <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004986:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004988:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 800498c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004990:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004994:	23ca      	movs	r3, #202	@ 0xca
 8004996:	624b      	str	r3, [r1, #36]	@ 0x24
 8004998:	2353      	movs	r3, #83	@ 0x53
 800499a:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff ff49 	bl	8004834 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80049a2:	b9a8      	cbnz	r0, 80049d0 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049a4:	6832      	ldr	r2, [r6, #0]
 80049a6:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 80049aa:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80049ae:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80049b0:	6893      	ldr	r3, [r2, #8]
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049b8:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 80049bc:	6891      	ldr	r1, [r2, #8]
 80049be:	4303      	orrs	r3, r0
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff ff56 	bl	8004876 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80049ca:	b908      	cbnz	r0, 80049d0 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d0:	6833      	ldr	r3, [r6, #0]
 80049d2:	22ff      	movs	r2, #255	@ 0xff
 80049d4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80049d6:	2300      	movs	r3, #0
 80049d8:	7733      	strb	r3, [r6, #28]
}
 80049da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049de:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80049e2:	bf08      	it	eq
 80049e4:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80049e6:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80049e8:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049ea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80049ee:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049f2:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80049f6:	e7cd      	b.n	8004994 <HAL_RTC_SetTime+0x50>

080049f8 <HAL_RTC_SetDate>:
{
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80049fa:	7f03      	ldrb	r3, [r0, #28]
 80049fc:	2b01      	cmp	r3, #1
{
 80049fe:	4605      	mov	r5, r0
 8004a00:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004a04:	d027      	beq.n	8004a56 <HAL_RTC_SetDate+0x5e>
 8004a06:	2301      	movs	r3, #1
 8004a08:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a0a:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a0c:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a0e:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004a10:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8004a12:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004a14:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a16:	b1fa      	cbz	r2, 8004a58 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004a18:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8004a1c:	433b      	orrs	r3, r7
 8004a1e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	22ca      	movs	r2, #202	@ 0xca
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a28:	2253      	movs	r2, #83	@ 0x53
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff ff01 	bl	8004834 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004a32:	b958      	cbnz	r0, 8004a4c <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a34:	682a      	ldr	r2, [r5, #0]
 8004a36:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8004a3a:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8004a3e:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8004a40:	4628      	mov	r0, r5
 8004a42:	f7ff ff18 	bl	8004876 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004a46:	b908      	cbnz	r0, 8004a4c <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	22ff      	movs	r2, #255	@ 0xff
 8004a50:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8004a52:	2300      	movs	r3, #0
 8004a54:	772b      	strb	r3, [r5, #28]
}
 8004a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a58:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a5a:	bf42      	ittt	mi
 8004a5c:	f024 0410 	bicmi.w	r4, r4, #16
 8004a60:	340a      	addmi	r4, #10
 8004a62:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a64:	f7ff ff63 	bl	800492e <RTC_ByteToBcd2>
 8004a68:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a6a:	7848      	ldrb	r0, [r1, #1]
 8004a6c:	f7ff ff5f 	bl	800492e <RTC_ByteToBcd2>
 8004a70:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a72:	4638      	mov	r0, r7
 8004a74:	f7ff ff5b 	bl	800492e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a78:	ea40 0306 	orr.w	r3, r0, r6
 8004a7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a80:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8004a84:	e7cd      	b.n	8004a22 <HAL_RTC_SetDate+0x2a>

08004a86 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004a86:	0903      	lsrs	r3, r0, #4
 8004a88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004a8c:	f000 000f 	and.w	r0, r0, #15
 8004a90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004a94:	b2c0      	uxtb	r0, r0
 8004a96:	4770      	bx	lr

08004a98 <HAL_RTC_GetTime>:
{
 8004a98:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a9a:	6803      	ldr	r3, [r0, #0]
 8004a9c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004a9e:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004aa0:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004aa2:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004aa4:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004aa8:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004aac:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ab0:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004ab2:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ab6:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004aba:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004abc:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004abe:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ac0:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004ac2:	b952      	cbnz	r2, 8004ada <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ac4:	f7ff ffdf 	bl	8004a86 <RTC_Bcd2ToByte>
 8004ac8:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004aca:	4628      	mov	r0, r5
 8004acc:	f7ff ffdb 	bl	8004a86 <RTC_Bcd2ToByte>
 8004ad0:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff ffd7 	bl	8004a86 <RTC_Bcd2ToByte>
 8004ad8:	7088      	strb	r0, [r1, #2]
}
 8004ada:	2000      	movs	r0, #0
 8004adc:	bd38      	pop	{r3, r4, r5, pc}

08004ade <HAL_RTC_GetDate>:
{
 8004ade:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004ae0:	6803      	ldr	r3, [r0, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004ae4:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ae8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004aec:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004af0:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004af4:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004af6:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004af8:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004afa:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8004afc:	b952      	cbnz	r2, 8004b14 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004afe:	f7ff ffc2 	bl	8004a86 <RTC_Bcd2ToByte>
 8004b02:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b04:	4628      	mov	r0, r5
 8004b06:	f7ff ffbe 	bl	8004a86 <RTC_Bcd2ToByte>
 8004b0a:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ffba 	bl	8004a86 <RTC_Bcd2ToByte>
 8004b12:	7088      	strb	r0, [r1, #2]
}
 8004b14:	2000      	movs	r0, #0
 8004b16:	bd38      	pop	{r3, r4, r5, pc}

08004b18 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8004b18:	6803      	ldr	r3, [r0, #0]
 8004b1a:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004b1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004b20:	4770      	bx	lr

08004b22 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8004b22:	6803      	ldr	r3, [r0, #0]
 8004b24:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004b26:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8004b2a:	4770      	bx	lr

08004b2c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2e:	460e      	mov	r6, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b34:	f7fe fac4 	bl	80030c0 <HAL_GetTick>
 8004b38:	4434      	add	r4, r6
 8004b3a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004b3c:	f7fe fac0 	bl	80030c0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b40:	4b22      	ldr	r3, [pc, #136]	@ (8004bcc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004b48:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004b4a:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b4c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	682a      	ldr	r2, [r5, #0]
 8004b50:	6890      	ldr	r0, [r2, #8]
 8004b52:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8004b56:	d02d      	beq.n	8004bb4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	1c73      	adds	r3, r6, #1
 8004b5a:	d0f9      	beq.n	8004b50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b5c:	f7fe fab0 	bl	80030c0 <HAL_GetTick>
 8004b60:	1bc0      	subs	r0, r0, r7
 8004b62:	42a0      	cmp	r0, r4
 8004b64:	d328      	bcc.n	8004bb8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	686a      	ldr	r2, [r5, #4]
 8004b72:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004b76:	d10a      	bne.n	8004b8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8004b78:	68aa      	ldr	r2, [r5, #8]
 8004b7a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004b7e:	d002      	beq.n	8004b86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004b84:	d103      	bne.n	8004b8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b8e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004b90:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004b94:	d107      	bne.n	8004ba6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bac:	2300      	movs	r3, #0
 8004bae:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004bb4:	b003      	add	sp, #12
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004bb8:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004bba:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004bbc:	2a00      	cmp	r2, #0
      count--;
 8004bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	bf08      	it	eq
 8004bc6:	4614      	moveq	r4, r2
 8004bc8:	e7c1      	b.n	8004b4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004bca:	bf00      	nop
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004bd6:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004bd8:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004bda:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004bde:	4605      	mov	r5, r0
 8004be0:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004be2:	f7fe fa6d 	bl	80030c0 <HAL_GetTick>
 8004be6:	443c      	add	r4, r7
 8004be8:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004bea:	f7fe fa69 	bl	80030c0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004bf0:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2223      	movs	r2, #35	@ 0x23
 8004bf8:	4353      	muls	r3, r2
 8004bfa:	0d1b      	lsrs	r3, r3, #20
 8004bfc:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004bfe:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c00:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c02:	682a      	ldr	r2, [r5, #0]
 8004c04:	6890      	ldr	r0, [r2, #8]
 8004c06:	4030      	ands	r0, r6
 8004c08:	d038      	beq.n	8004c7c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c0a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c0e:	bf01      	itttt	eq
 8004c10:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8004c14:	b2db      	uxtbeq	r3, r3
 8004c16:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c1a:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	1c7b      	adds	r3, r7, #1
 8004c20:	d0f0      	beq.n	8004c04 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c22:	f7fe fa4d 	bl	80030c0 <HAL_GetTick>
 8004c26:	eba0 0008 	sub.w	r0, r0, r8
 8004c2a:	42a0      	cmp	r0, r4
 8004c2c:	d329      	bcc.n	8004c82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c38:	686a      	ldr	r2, [r5, #4]
 8004c3a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004c3e:	d10a      	bne.n	8004c56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8004c40:	68aa      	ldr	r2, [r5, #8]
 8004c42:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004c46:	d002      	beq.n	8004c4e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c48:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004c4c:	d103      	bne.n	8004c56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c56:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004c58:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004c5c:	d107      	bne.n	8004c6e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c74:	2300      	movs	r3, #0
 8004c76:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c7a:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004c7c:	b003      	add	sp, #12
 8004c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8004c82:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004c84:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004c86:	2a00      	cmp	r2, #0
      count--;
 8004c88:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	bf08      	it	eq
 8004c90:	4614      	moveq	r4, r2
 8004c92:	e7b6      	b.n	8004c02 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8004c94:	20000010 	.word	0x20000010

08004c98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9a:	6843      	ldr	r3, [r0, #4]
 8004c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca6:	d10b      	bne.n	8004cc0 <SPI_EndRxTransaction+0x28>
 8004ca8:	6883      	ldr	r3, [r0, #8]
 8004caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cae:	d002      	beq.n	8004cb6 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d104      	bne.n	8004cc0 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	6813      	ldr	r3, [r2, #0]
 8004cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cbe:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc0:	463a      	mov	r2, r7
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff ff31 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004cca:	4605      	mov	r5, r0
 8004ccc:	b128      	cbz	r0, 8004cda <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cd6:	2503      	movs	r5, #3
 8004cd8:	e013      	b.n	8004d02 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce0:	d10f      	bne.n	8004d02 <SPI_EndRxTransaction+0x6a>
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce8:	d002      	beq.n	8004cf0 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cee:	d108      	bne.n	8004d02 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7ff ff69 	bl	8004bd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d1e5      	bne.n	8004cce <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004d02:	4628      	mov	r0, r5
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d06 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d06:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d08:	4613      	mov	r3, r2
{
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d0e:	460a      	mov	r2, r1
 8004d10:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8004d14:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d16:	f7ff ff5b 	bl	8004bd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004d1a:	b128      	cbz	r0, 8004d28 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d1c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004d1e:	f043 0320 	orr.w	r3, r3, #32
 8004d22:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d24:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff fefd 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1f2      	bne.n	8004d1c <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d36:	4633      	mov	r3, r6
 8004d38:	462a      	mov	r2, r5
 8004d3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff ff46 	bl	8004bd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d0ee      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x20>
 8004d48:	e7e8      	b.n	8004d1c <SPI_EndRxTxTransaction+0x16>

08004d4a <HAL_SPI_Init>:
{
 8004d4a:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d067      	beq.n	8004e22 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d52:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d15d      	bne.n	8004e14 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d58:	6842      	ldr	r2, [r0, #4]
 8004d5a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004d5e:	d000      	beq.n	8004d62 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d60:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d66:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004d6a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d6e:	b923      	cbnz	r3, 8004d7a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8004d70:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004d74:	4620      	mov	r0, r4
 8004d76:	f7fd febf 	bl	8002af8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004d7a:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d7c:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d84:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d86:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	d942      	bls.n	8004e1c <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d96:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d98:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d9c:	bf18      	it	ne
 8004d9e:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004da0:	68a6      	ldr	r6, [r4, #8]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	69a1      	ldr	r1, [r4, #24]
 8004da6:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8004daa:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004dae:	4333      	orrs	r3, r6
 8004db0:	6926      	ldr	r6, [r4, #16]
 8004db2:	f006 0602 	and.w	r6, r6, #2
 8004db6:	4333      	orrs	r3, r6
 8004db8:	6966      	ldr	r6, [r4, #20]
 8004dba:	f006 0601 	and.w	r6, r6, #1
 8004dbe:	4333      	orrs	r3, r6
 8004dc0:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8004dc4:	4333      	orrs	r3, r6
 8004dc6:	69e6      	ldr	r6, [r4, #28]
 8004dc8:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004dcc:	4333      	orrs	r3, r6
 8004dce:	6a26      	ldr	r6, [r4, #32]
 8004dd0:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8004dd4:	4333      	orrs	r3, r6
 8004dd6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004dd8:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8004ddc:	4333      	orrs	r3, r6
 8004dde:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004de0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8004de2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004de4:	f006 0608 	and.w	r6, r6, #8
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8004df0:	4333      	orrs	r3, r6
 8004df2:	0c09      	lsrs	r1, r1, #16
 8004df4:	4303      	orrs	r3, r0
 8004df6:	f001 0104 	and.w	r1, r1, #4
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	432b      	orrs	r3, r5
 8004dfe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e00:	69d3      	ldr	r3, [r2, #28]
 8004e02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e06:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e08:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e0e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e14:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e1a:	e7a2      	b.n	8004d62 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e1c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004e20:	e7bc      	b.n	8004d9c <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8004e22:	2001      	movs	r0, #1
 8004e24:	e7f5      	b.n	8004e12 <HAL_SPI_Init+0xc8>

08004e26 <HAL_SPI_Transmit>:
{
 8004e26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8004e2c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8004e30:	2b01      	cmp	r3, #1
{
 8004e32:	4604      	mov	r4, r0
 8004e34:	460d      	mov	r5, r1
 8004e36:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004e38:	f000 80bc 	beq.w	8004fb4 <HAL_SPI_Transmit+0x18e>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004e42:	f7fe f93d 	bl	80030c0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e46:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004e4a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004e4c:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4e:	fa5f f983 	uxtb.w	r9, r3
 8004e52:	f040 80ac 	bne.w	8004fae <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	d069      	beq.n	8004f2e <HAL_SPI_Transmit+0x108>
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	d066      	beq.n	8004f2e <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e60:	2303      	movs	r3, #3
 8004e62:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8004e6a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8004e6e:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e72:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004e74:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004e78:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7c:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004e7e:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e80:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8004e86:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8a:	d107      	bne.n	8004e9c <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e92:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004e94:	6833      	ldr	r3, [r6, #0]
 8004e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e9a:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9c:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ea0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004ea2:	bf5e      	ittt	pl
 8004ea4:	6833      	ldrpl	r3, [r6, #0]
 8004ea6:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004eaa:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eac:	68e3      	ldr	r3, [r4, #12]
 8004eae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004eb2:	d943      	bls.n	8004f3c <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb4:	b112      	cbz	r2, 8004ebc <HAL_SPI_Transmit+0x96>
 8004eb6:	f1b8 0f01 	cmp.w	r8, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ebc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ec0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ec4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004ecc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	b9b3      	cbnz	r3, 8004f00 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff ff15 	bl	8004d06 <SPI_EndRxTxTransaction>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d163      	bne.n	8004fa8 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	b933      	cbnz	r3, 8004ef2 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	9201      	str	r2, [sp, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004ef4:	b9db      	cbnz	r3, 8004f2e <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004efc:	4699      	mov	r9, r3
 8004efe:	e016      	b.n	8004f2e <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	6893      	ldr	r3, [r2, #8]
 8004f04:	079d      	lsls	r5, r3, #30
 8004f06:	d505      	bpl.n	8004f14 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f0a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004f0e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f10:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f12:	e7d7      	b.n	8004ec4 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f14:	f7fe f8d4 	bl	80030c0 <HAL_GetTick>
 8004f18:	eba0 000a 	sub.w	r0, r0, sl
 8004f1c:	42b8      	cmp	r0, r7
 8004f1e:	d3d5      	bcc.n	8004ecc <HAL_SPI_Transmit+0xa6>
 8004f20:	1c78      	adds	r0, r7, #1
 8004f22:	d0d3      	beq.n	8004ecc <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8004f2a:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004f34:	4648      	mov	r0, r9
 8004f36:	b002      	add	sp, #8
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3c:	b112      	cbz	r2, 8004f44 <HAL_SPI_Transmit+0x11e>
 8004f3e:	f1b8 0f01 	cmp.w	r8, #1
 8004f42:	d113      	bne.n	8004f6c <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8004f44:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d906      	bls.n	8004f5a <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004f50:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f52:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f54:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f56:	3b02      	subs	r3, #2
 8004f58:	e006      	b.n	8004f68 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f5a:	782b      	ldrb	r3, [r5, #0]
 8004f5c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8004f5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f60:	3301      	adds	r3, #1
 8004f62:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f64:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004f6c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ae      	beq.n	8004ed2 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	6893      	ldr	r3, [r2, #8]
 8004f78:	0799      	lsls	r1, r3, #30
 8004f7a:	d50c      	bpl.n	8004f96 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8004f7c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004f80:	b289      	uxth	r1, r1
 8004f82:	2901      	cmp	r1, #1
 8004f84:	d904      	bls.n	8004f90 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f86:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004f8a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f8e:	e7e1      	b.n	8004f54 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004f94:	e7e3      	b.n	8004f5e <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f96:	f7fe f893 	bl	80030c0 <HAL_GetTick>
 8004f9a:	eba0 000a 	sub.w	r0, r0, sl
 8004f9e:	42b8      	cmp	r0, r7
 8004fa0:	d3e4      	bcc.n	8004f6c <HAL_SPI_Transmit+0x146>
 8004fa2:	1c7b      	adds	r3, r7, #1
 8004fa4:	d0e2      	beq.n	8004f6c <HAL_SPI_Transmit+0x146>
 8004fa6:	e7bd      	b.n	8004f24 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	6623      	str	r3, [r4, #96]	@ 0x60
 8004fac:	e798      	b.n	8004ee0 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8004fae:	f04f 0902 	mov.w	r9, #2
 8004fb2:	e7bc      	b.n	8004f2e <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8004fb4:	f04f 0902 	mov.w	r9, #2
 8004fb8:	e7bc      	b.n	8004f34 <HAL_SPI_Transmit+0x10e>

08004fba <HAL_SPI_TransmitReceive>:
{
 8004fba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fbe:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004fc0:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8004fc4:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004fc6:	2b01      	cmp	r3, #1
{
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004fce:	f000 8122 	beq.w	8005216 <HAL_SPI_TransmitReceive+0x25c>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004fd8:	f7fe f872 	bl	80030c0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004fdc:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004fe0:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fe2:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004fe4:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004fe6:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fe8:	d00a      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x46>
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fee:	f040 8110 	bne.w	8005212 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ff2:	68a2      	ldr	r2, [r4, #8]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	f040 810c 	bne.w	8005212 <HAL_SPI_TransmitReceive+0x258>
 8004ffa:	2904      	cmp	r1, #4
 8004ffc:	f040 8109 	bne.w	8005212 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005000:	b92d      	cbnz	r5, 800500e <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8005002:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005004:	2300      	movs	r3, #0
 8005006:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800500e:	f1b9 0f00 	cmp.w	r9, #0
 8005012:	d0f6      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x48>
 8005014:	2e00      	cmp	r6, #0
 8005016:	d0f4      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005018:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800501c:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800501e:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005020:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005024:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005026:	bf1c      	itt	ne
 8005028:	2205      	movne	r2, #5
 800502a:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502e:	2200      	movs	r2, #0
 8005030:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005032:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8005036:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800503a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800503c:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8005040:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005044:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005046:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005048:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800504a:	d801      	bhi.n	8005050 <HAL_SPI_TransmitReceive+0x96>
 800504c:	2e01      	cmp	r6, #1
 800504e:	d02e      	beq.n	80050ae <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005050:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005054:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005056:	680a      	ldr	r2, [r1, #0]
 8005058:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800505a:	bf5e      	ittt	pl
 800505c:	680a      	ldrpl	r2, [r1, #0]
 800505e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8005062:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005064:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8005068:	d957      	bls.n	800511a <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	b10b      	cbz	r3, 8005070 <HAL_SPI_TransmitReceive+0xb6>
 800506c:	2e01      	cmp	r6, #1
 800506e:	d107      	bne.n	8005080 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005070:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005074:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8005076:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005078:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800507a:	3b01      	subs	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005080:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005082:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005084:	b29b      	uxth	r3, r3
 8005086:	b9ab      	cbnz	r3, 80050b4 <HAL_SPI_TransmitReceive+0xfa>
 8005088:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800508c:	b29b      	uxth	r3, r3
 800508e:	b98b      	cbnz	r3, 80050b4 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005090:	4642      	mov	r2, r8
 8005092:	4639      	mov	r1, r7
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fe36 	bl	8004d06 <SPI_EndRxTxTransaction>
 800509a:	2800      	cmp	r0, #0
 800509c:	f040 80b5 	bne.w	800520a <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ad      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80050ac:	e7aa      	b.n	8005004 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050b2:	e7cf      	b.n	8005054 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b4:	6821      	ldr	r1, [r4, #0]
 80050b6:	688b      	ldr	r3, [r1, #8]
 80050b8:	079e      	lsls	r6, r3, #30
 80050ba:	d50d      	bpl.n	80050d8 <HAL_SPI_TransmitReceive+0x11e>
 80050bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	b153      	cbz	r3, 80050d8 <HAL_SPI_TransmitReceive+0x11e>
 80050c2:	b145      	cbz	r5, 80050d6 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050c6:	f833 2b02 	ldrh.w	r2, [r3], #2
 80050ca:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050cc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80050ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80050d6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050d8:	688a      	ldr	r2, [r1, #8]
 80050da:	f012 0201 	ands.w	r2, r2, #1
 80050de:	d00f      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x146>
 80050e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	b15b      	cbz	r3, 8005100 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ea:	68c9      	ldr	r1, [r1, #12]
 80050ec:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80050f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80050fe:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005100:	f7fd ffde 	bl	80030c0 <HAL_GetTick>
 8005104:	eba0 0008 	sub.w	r0, r0, r8
 8005108:	42b8      	cmp	r0, r7
 800510a:	d3ba      	bcc.n	8005082 <HAL_SPI_TransmitReceive+0xc8>
 800510c:	1c78      	adds	r0, r7, #1
 800510e:	d0b8      	beq.n	8005082 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8005110:	2301      	movs	r3, #1
 8005112:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8005116:	2003      	movs	r0, #3
 8005118:	e774      	b.n	8005004 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800511a:	b10b      	cbz	r3, 8005120 <HAL_SPI_TransmitReceive+0x166>
 800511c:	2e01      	cmp	r6, #1
 800511e:	d10b      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8005120:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d909      	bls.n	800513c <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005128:	f835 3b02 	ldrh.w	r3, [r5], #2
 800512c:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 800512e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005130:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005132:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8005134:	b29b      	uxth	r3, r3
 8005136:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005138:	2501      	movs	r5, #1
 800513a:	e048      	b.n	80051ce <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800513c:	782b      	ldrb	r3, [r5, #0]
 800513e:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8005140:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005142:	3301      	adds	r3, #1
 8005144:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005146:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005148:	3b01      	subs	r3, #1
 800514a:	e7f3      	b.n	8005134 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	6893      	ldr	r3, [r2, #8]
 8005150:	0799      	lsls	r1, r3, #30
 8005152:	d511      	bpl.n	8005178 <HAL_SPI_TransmitReceive+0x1be>
 8005154:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	b173      	cbz	r3, 8005178 <HAL_SPI_TransmitReceive+0x1be>
 800515a:	b165      	cbz	r5, 8005176 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 800515c:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005160:	b289      	uxth	r1, r1
 8005162:	2901      	cmp	r1, #1
 8005164:	d93d      	bls.n	80051e2 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005166:	f833 1b02 	ldrh.w	r1, [r3], #2
 800516a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800516e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005170:	3b02      	subs	r3, #2
 8005172:	b29b      	uxth	r3, r3
 8005174:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005176:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	6891      	ldr	r1, [r2, #8]
 800517c:	f011 0101 	ands.w	r1, r1, #1
 8005180:	d01d      	beq.n	80051be <HAL_SPI_TransmitReceive+0x204>
 8005182:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005186:	b29b      	uxth	r3, r3
 8005188:	b1cb      	cbz	r3, 80051be <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 800518a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800518e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005190:	b280      	uxth	r0, r0
 8005192:	2801      	cmp	r0, #1
 8005194:	d92d      	bls.n	80051f2 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005196:	68d0      	ldr	r0, [r2, #12]
 8005198:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800519c:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800519e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80051a2:	3b02      	subs	r3, #2
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80051aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b2:	bf9e      	ittt	ls
 80051b4:	6853      	ldrls	r3, [r2, #4]
 80051b6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80051ba:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80051bc:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051be:	f7fd ff7f 	bl	80030c0 <HAL_GetTick>
 80051c2:	eba0 0008 	sub.w	r0, r0, r8
 80051c6:	42b8      	cmp	r0, r7
 80051c8:	d301      	bcc.n	80051ce <HAL_SPI_TransmitReceive+0x214>
 80051ca:	1c7b      	adds	r3, r7, #1
 80051cc:	d1a0      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1ba      	bne.n	800514c <HAL_SPI_TransmitReceive+0x192>
 80051d6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1b5      	bne.n	800514c <HAL_SPI_TransmitReceive+0x192>
 80051e0:	e756      	b.n	8005090 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80051e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80051e8:	3301      	adds	r3, #1
 80051ea:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80051ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80051ee:	3b01      	subs	r3, #1
 80051f0:	e7bf      	b.n	8005172 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051f2:	7b12      	ldrb	r2, [r2, #12]
 80051f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80051f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f8:	3301      	adds	r3, #1
 80051fa:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80051fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005200:	3b01      	subs	r3, #1
 8005202:	b29b      	uxth	r3, r3
 8005204:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005208:	e7d8      	b.n	80051bc <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800520a:	2320      	movs	r3, #32
 800520c:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800520e:	2001      	movs	r0, #1
 8005210:	e746      	b.n	80050a0 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8005212:	2002      	movs	r0, #2
 8005214:	e6f6      	b.n	8005004 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8005216:	2002      	movs	r0, #2
 8005218:	e6f7      	b.n	800500a <HAL_SPI_TransmitReceive+0x50>

0800521a <HAL_SPI_Receive>:
{
 800521a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800521e:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8005220:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8005224:	2b01      	cmp	r3, #1
{
 8005226:	4604      	mov	r4, r0
 8005228:	468a      	mov	sl, r1
 800522a:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 800522c:	b2de      	uxtb	r6, r3
 800522e:	f040 80a7 	bne.w	8005380 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005232:	6843      	ldr	r3, [r0, #4]
 8005234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005238:	d10e      	bne.n	8005258 <HAL_SPI_Receive+0x3e>
 800523a:	6883      	ldr	r3, [r0, #8]
 800523c:	b963      	cbnz	r3, 8005258 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800523e:	2304      	movs	r3, #4
 8005240:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005244:	4613      	mov	r3, r2
 8005246:	9700      	str	r7, [sp, #0]
 8005248:	460a      	mov	r2, r1
 800524a:	f7ff feb6 	bl	8004fba <HAL_SPI_TransmitReceive>
 800524e:	4606      	mov	r6, r0
}
 8005250:	4630      	mov	r0, r6
 8005252:	b002      	add	sp, #8
 8005254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8005258:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800525c:	2b01      	cmp	r3, #1
 800525e:	f000 8091 	beq.w	8005384 <HAL_SPI_Receive+0x16a>
 8005262:	2301      	movs	r3, #1
 8005264:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8005268:	f7fd ff2a 	bl	80030c0 <HAL_GetTick>
 800526c:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 800526e:	f1ba 0f00 	cmp.w	sl, #0
 8005272:	d075      	beq.n	8005360 <HAL_SPI_Receive+0x146>
 8005274:	f1b8 0f00 	cmp.w	r8, #0
 8005278:	d072      	beq.n	8005360 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527a:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800527c:	2304      	movs	r3, #4
 800527e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8005282:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005286:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005288:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800528a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 800528e:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005290:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005292:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005294:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005296:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005298:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800529c:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a0:	bf8c      	ite	hi
 80052a2:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a6:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80052aa:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ae:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b6:	d107      	bne.n	80052c8 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052be:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052c6:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80052cc:	bf5e      	ittt	pl
 80052ce:	682b      	ldrpl	r3, [r5, #0]
 80052d0:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80052d4:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052d6:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80052da:	d923      	bls.n	8005324 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 80052dc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	b323      	cbz	r3, 800532e <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	07d2      	lsls	r2, r2, #31
 80052ea:	d53d      	bpl.n	8005368 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052f0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052f4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80052f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8005302:	e7eb      	b.n	80052dc <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	07d0      	lsls	r0, r2, #31
 800530a:	d51d      	bpl.n	8005348 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800530c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800530e:	7b1b      	ldrb	r3, [r3, #12]
 8005310:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005312:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005314:	3301      	adds	r3, #1
 8005316:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005318:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800531c:	3b01      	subs	r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8005324:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ea      	bne.n	8005304 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800532e:	464a      	mov	r2, r9
 8005330:	4639      	mov	r1, r7
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff fcb0 	bl	8004c98 <SPI_EndRxTransaction>
 8005338:	b9f8      	cbnz	r0, 800537a <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800533a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800533c:	b983      	cbnz	r3, 8005360 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 800533e:	2201      	movs	r2, #1
 8005340:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005344:	461e      	mov	r6, r3
 8005346:	e00b      	b.n	8005360 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005348:	f7fd feba 	bl	80030c0 <HAL_GetTick>
 800534c:	eba0 0009 	sub.w	r0, r0, r9
 8005350:	42b8      	cmp	r0, r7
 8005352:	d3e7      	bcc.n	8005324 <HAL_SPI_Receive+0x10a>
 8005354:	1c79      	adds	r1, r7, #1
 8005356:	d0e5      	beq.n	8005324 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8005358:	2301      	movs	r3, #1
 800535a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800535e:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8005360:	2300      	movs	r3, #0
 8005362:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8005366:	e773      	b.n	8005250 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005368:	f7fd feaa 	bl	80030c0 <HAL_GetTick>
 800536c:	eba0 0009 	sub.w	r0, r0, r9
 8005370:	42b8      	cmp	r0, r7
 8005372:	d3b3      	bcc.n	80052dc <HAL_SPI_Receive+0xc2>
 8005374:	1c7b      	adds	r3, r7, #1
 8005376:	d0b1      	beq.n	80052dc <HAL_SPI_Receive+0xc2>
 8005378:	e7ee      	b.n	8005358 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537a:	2320      	movs	r3, #32
 800537c:	6623      	str	r3, [r4, #96]	@ 0x60
 800537e:	e7dc      	b.n	800533a <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8005380:	2602      	movs	r6, #2
 8005382:	e7ed      	b.n	8005360 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8005384:	2602      	movs	r6, #2
 8005386:	e763      	b.n	8005250 <HAL_SPI_Receive+0x36>

08005388 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005388:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800538c:	2b01      	cmp	r3, #1
 800538e:	d12b      	bne.n	80053e8 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	2302      	movs	r3, #2
 8005392:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a0:	4a12      	ldr	r2, [pc, #72]	@ (80053ec <HAL_TIM_Base_Start_IT+0x64>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d012      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x44>
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d00f      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x44>
 80053ac:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x44>
 80053b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x44>
 80053bc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x44>
 80053c4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	4a08      	ldr	r2, [pc, #32]	@ (80053f0 <HAL_TIM_Base_Start_IT+0x68>)
 80053d0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	2a06      	cmp	r2, #6
 80053d4:	d006      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x5c>
 80053d6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80053da:	d003      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80053e4:	2000      	movs	r0, #0
 80053e6:	4770      	bx	lr
    return HAL_ERROR;
 80053e8:	2001      	movs	r0, #1
}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80053fc:	6803      	ldr	r3, [r0, #0]
{
 80053fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005400:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005402:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005404:	07b2      	lsls	r2, r6, #30
{
 8005406:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005408:	d50d      	bpl.n	8005426 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800540a:	07a9      	lsls	r1, r5, #30
 800540c:	d50b      	bpl.n	8005426 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800540e:	f06f 0202 	mvn.w	r2, #2
 8005412:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005414:	2201      	movs	r2, #1
 8005416:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	079a      	lsls	r2, r3, #30
 800541c:	d074      	beq.n	8005508 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	f7ff ffea 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	2300      	movs	r3, #0
 8005424:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005426:	0773      	lsls	r3, r6, #29
 8005428:	d510      	bpl.n	800544c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800542a:	0768      	lsls	r0, r5, #29
 800542c:	d50e      	bpl.n	800544c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f06f 0204 	mvn.w	r2, #4
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005436:	2202      	movs	r2, #2
 8005438:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005440:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005442:	d067      	beq.n	8005514 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005444:	f7ff ffd7 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005448:	2300      	movs	r3, #0
 800544a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800544c:	0731      	lsls	r1, r6, #28
 800544e:	d50f      	bpl.n	8005470 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005450:	072a      	lsls	r2, r5, #28
 8005452:	d50d      	bpl.n	8005470 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f06f 0208 	mvn.w	r2, #8
 800545a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545c:	2204      	movs	r2, #4
 800545e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005466:	d05b      	beq.n	8005520 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8005468:	f7ff ffc5 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546c:	2300      	movs	r3, #0
 800546e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005470:	06f0      	lsls	r0, r6, #27
 8005472:	d510      	bpl.n	8005496 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005474:	06e9      	lsls	r1, r5, #27
 8005476:	d50e      	bpl.n	8005496 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f06f 0210 	mvn.w	r2, #16
 800547e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005480:	2208      	movs	r2, #8
 8005482:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800548c:	d04e      	beq.n	800552c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	f7ff ffb2 	bl	80053f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	2300      	movs	r3, #0
 8005494:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005496:	07f2      	lsls	r2, r6, #31
 8005498:	d508      	bpl.n	80054ac <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800549a:	07eb      	lsls	r3, r5, #31
 800549c:	d506      	bpl.n	80054ac <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	f06f 0201 	mvn.w	r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7fc fb24 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054ac:	0630      	lsls	r0, r6, #24
 80054ae:	d508      	bpl.n	80054c2 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054b0:	0629      	lsls	r1, r5, #24
 80054b2:	d506      	bpl.n	80054c2 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f9b8 	bl	8005832 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054c2:	05f2      	lsls	r2, r6, #23
 80054c4:	d508      	bpl.n	80054d8 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054c6:	062b      	lsls	r3, r5, #24
 80054c8:	d506      	bpl.n	80054d8 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 f9ae 	bl	8005834 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054d8:	0670      	lsls	r0, r6, #25
 80054da:	d508      	bpl.n	80054ee <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054dc:	0669      	lsls	r1, r5, #25
 80054de:	d506      	bpl.n	80054ee <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7ff ff86 	bl	80053fa <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054ee:	06b2      	lsls	r2, r6, #26
 80054f0:	d522      	bpl.n	8005538 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054f2:	06ab      	lsls	r3, r5, #26
 80054f4:	d520      	bpl.n	8005538 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80054fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054fe:	611a      	str	r2, [r3, #16]
}
 8005500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005504:	f000 b994 	b.w	8005830 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005508:	f7ff ff74 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	4620      	mov	r0, r4
 800550e:	f7ff ff73 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005512:	e786      	b.n	8005422 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005514:	f7ff ff6e 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	4620      	mov	r0, r4
 800551a:	f7ff ff6d 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800551e:	e793      	b.n	8005448 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005520:	f7ff ff68 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff ff67 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
 800552a:	e79f      	b.n	800546c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552c:	f7ff ff62 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	4620      	mov	r0, r4
 8005532:	f7ff ff61 	bl	80053f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005536:	e7ac      	b.n	8005492 <HAL_TIM_IRQHandler+0x96>
}
 8005538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800553c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800553c:	4a2f      	ldr	r2, [pc, #188]	@ (80055fc <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 800553e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005540:	4290      	cmp	r0, r2
 8005542:	d00e      	beq.n	8005562 <TIM_Base_SetConfig+0x26>
 8005544:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0x26>
 800554a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800554e:	4290      	cmp	r0, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0x26>
 8005552:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005556:	4290      	cmp	r0, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0x26>
 800555a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800555e:	4290      	cmp	r0, r2
 8005560:	d115      	bne.n	800558e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005562:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005568:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	4a24      	ldr	r2, [pc, #144]	@ (80055fc <TIM_Base_SetConfig+0xc0>)
 800556c:	4290      	cmp	r0, r2
 800556e:	d019      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 8005570:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005574:	d016      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 8005576:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800557a:	4290      	cmp	r0, r2
 800557c:	d012      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 800557e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005582:	4290      	cmp	r0, r2
 8005584:	d00e      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 8005586:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800558a:	4290      	cmp	r0, r2
 800558c:	d00a      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 800558e:	4a1c      	ldr	r2, [pc, #112]	@ (8005600 <TIM_Base_SetConfig+0xc4>)
 8005590:	4290      	cmp	r0, r2
 8005592:	d007      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 8005594:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005598:	4290      	cmp	r0, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0x68>
 800559c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055a0:	4290      	cmp	r0, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055aa:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	694a      	ldr	r2, [r1, #20]
 80055ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055b2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80055b4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b6:	688b      	ldr	r3, [r1, #8]
 80055b8:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ba:	680b      	ldr	r3, [r1, #0]
 80055bc:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055be:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <TIM_Base_SetConfig+0xc0>)
 80055c0:	4298      	cmp	r0, r3
 80055c2:	d00f      	beq.n	80055e4 <TIM_Base_SetConfig+0xa8>
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	4298      	cmp	r0, r3
 80055ca:	d00b      	beq.n	80055e4 <TIM_Base_SetConfig+0xa8>
 80055cc:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80055d0:	4298      	cmp	r0, r3
 80055d2:	d007      	beq.n	80055e4 <TIM_Base_SetConfig+0xa8>
 80055d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055d8:	4298      	cmp	r0, r3
 80055da:	d003      	beq.n	80055e4 <TIM_Base_SetConfig+0xa8>
 80055dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055e0:	4298      	cmp	r0, r3
 80055e2:	d101      	bne.n	80055e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e4:	690b      	ldr	r3, [r1, #16]
 80055e6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e8:	2301      	movs	r3, #1
 80055ea:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ec:	6903      	ldr	r3, [r0, #16]
 80055ee:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055f0:	bf42      	ittt	mi
 80055f2:	6903      	ldrmi	r3, [r0, #16]
 80055f4:	f023 0301 	bicmi.w	r3, r3, #1
 80055f8:	6103      	strmi	r3, [r0, #16]
  }
}
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000

08005604 <HAL_TIM_Base_Init>:
{
 8005604:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005606:	4604      	mov	r4, r0
 8005608:	b350      	cbz	r0, 8005660 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800560e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005612:	b91b      	cbnz	r3, 800561c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005614:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005618:	f7fd fabe 	bl	8002b98 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005624:	1d21      	adds	r1, r4, #4
 8005626:	f7ff ff89 	bl	800553c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562a:	2301      	movs	r3, #1
 800562c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8005630:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005632:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005636:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800563a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800563e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005642:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800564e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005652:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005656:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800565a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800565e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005660:	2001      	movs	r0, #1
 8005662:	e7fc      	b.n	800565e <HAL_TIM_Base_Init+0x5a>

08005664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005664:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005666:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005668:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800566a:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005672:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005674:	6082      	str	r2, [r0, #8]
}
 8005676:	bd10      	pop	{r4, pc}

08005678 <HAL_TIM_ConfigClockSource>:
{
 8005678:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800567a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800567e:	2b01      	cmp	r3, #1
{
 8005680:	4604      	mov	r4, r0
 8005682:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005686:	f000 808c 	beq.w	80057a2 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 800568a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800568e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8005690:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005692:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005696:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	4b43      	ldr	r3, [pc, #268]	@ (80057a8 <HAL_TIM_ConfigClockSource+0x130>)
 800569a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800569c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	2b60      	cmp	r3, #96	@ 0x60
 80056a2:	d04f      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xcc>
 80056a4:	d832      	bhi.n	800570c <HAL_TIM_ConfigClockSource+0x94>
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d064      	beq.n	8005774 <HAL_TIM_ConfigClockSource+0xfc>
 80056aa:	d816      	bhi.n	80056da <HAL_TIM_ConfigClockSource+0x62>
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d00d      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0x54>
 80056b0:	d80a      	bhi.n	80056c8 <HAL_TIM_ConfigClockSource+0x50>
 80056b2:	f033 0110 	bics.w	r1, r3, #16
 80056b6:	d009      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80056be:	2300      	movs	r3, #0
 80056c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80056c4:	4610      	mov	r0, r2
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80056c8:	2b30      	cmp	r3, #48	@ 0x30
 80056ca:	d1f5      	bne.n	80056b8 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80056cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80056d8:	e028      	b.n	800572c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80056da:	2b50      	cmp	r3, #80	@ 0x50
 80056dc:	d1ec      	bne.n	80056b8 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80056de:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80056e0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80056e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e4:	6a03      	ldr	r3, [r0, #32]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ec:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ee:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80056fa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80056fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80056fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005700:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005706:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800570a:	e00f      	b.n	800572c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005710:	d00d      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xb6>
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005716:	d00c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0xba>
 8005718:	2b70      	cmp	r3, #112	@ 0x70
 800571a:	d1cd      	bne.n	80056b8 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	68cb      	ldr	r3, [r1, #12]
 800571e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005722:	f7ff ff9f 	bl	8005664 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005726:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800572c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2200      	movs	r2, #0
 8005730:	e7c2      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8005732:	68cb      	ldr	r3, [r1, #12]
 8005734:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005738:	f7ff ff94 	bl	8005664 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800573c:	6883      	ldr	r3, [r0, #8]
 800573e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005742:	e7f3      	b.n	800572c <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8005744:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005746:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005748:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800574a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574c:	f022 0210 	bic.w	r2, r2, #16
 8005750:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005754:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005758:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800575c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005760:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005764:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005766:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005768:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800576e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005772:	e7db      	b.n	800572c <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8005774:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005776:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005778:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577a:	6a03      	ldr	r3, [r0, #32]
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005784:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800578c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005790:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005792:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005794:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005796:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80057a0:	e7c4      	b.n	800572c <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 80057a2:	4602      	mov	r2, r0
 80057a4:	e78e      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x4c>
 80057a6:	bf00      	nop
 80057a8:	fffe0088 	.word	0xfffe0088

080057ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057ac:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ae:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80057b2:	2b01      	cmp	r3, #1
{
 80057b4:	4604      	mov	r4, r0
 80057b6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80057ba:	d032      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057bc:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057be:	4d19      	ldr	r5, [pc, #100]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057c4:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80057c6:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057ca:	d002      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80057cc:	4e16      	ldr	r6, [pc, #88]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80057ce:	42b3      	cmp	r3, r6
 80057d0:	d103      	bne.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057d2:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057d8:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057da:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80057dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057e0:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e2:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80057e4:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e6:	d011      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d00e      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80057ee:	4a0f      	ldr	r2, [pc, #60]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80057f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80057fc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005804:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005808:	4293      	cmp	r3, r2
 800580a:	d104      	bne.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005812:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005816:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005818:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800581a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800581e:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40000400 	.word	0x40000400

08005830 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005830:	4770      	bx	lr

08005832 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005834:	4770      	bx	lr

08005836 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005836:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	e852 3f00 	ldrex	r3, [r2]
 800583c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005844:	6802      	ldr	r2, [r0, #0]
 8005846:	2900      	cmp	r1, #0
 8005848:	d1f5      	bne.n	8005836 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	f102 0308 	add.w	r3, r2, #8
 800584e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005852:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	f102 0c08 	add.w	ip, r2, #8
 800585a:	e84c 3100 	strex	r1, r3, [ip]
 800585e:	2900      	cmp	r1, #0
 8005860:	d1f3      	bne.n	800584a <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005862:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	e842 3100 	strex	r1, r3, [r2]
 8005874:	2900      	cmp	r1, #0
 8005876:	d1f7      	bne.n	8005868 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005878:	2320      	movs	r3, #32
 800587a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	2300      	movs	r3, #0
 8005880:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005882:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005884:	4770      	bx	lr

08005886 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8005886:	4770      	bx	lr

08005888 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8005888:	4770      	bx	lr

0800588a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800588a:	4770      	bx	lr

0800588c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800588c:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800588e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005890:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005892:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8005896:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005898:	689c      	ldr	r4, [r3, #8]
 800589a:	0624      	lsls	r4, r4, #24
 800589c:	d50e      	bpl.n	80058bc <UART_DMAError+0x30>
 800589e:	2a21      	cmp	r2, #33	@ 0x21
 80058a0:	d10c      	bne.n	80058bc <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058ac:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	e843 2400 	strex	r4, r2, [r3]
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	d1f7      	bne.n	80058a8 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	2220      	movs	r2, #32
 80058ba:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	065b      	lsls	r3, r3, #25
 80058c0:	d506      	bpl.n	80058d0 <UART_DMAError+0x44>
 80058c2:	2922      	cmp	r1, #34	@ 0x22
 80058c4:	d104      	bne.n	80058d0 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80058cc:	f7ff ffb3 	bl	8005836 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058d0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80058d4:	f043 0310 	orr.w	r3, r3, #16
 80058d8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058dc:	f7ff ffd5 	bl	800588a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <HAL_UARTEx_RxEventCallback>:
}
 80058e2:	4770      	bx	lr

080058e4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80058e6:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058e8:	2301      	movs	r3, #1
 80058ea:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d105      	bne.n	80058fe <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058f2:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80058f6:	0849      	lsrs	r1, r1, #1
 80058f8:	f7ff fff3 	bl	80058e2 <HAL_UARTEx_RxEventCallback>
}
 80058fc:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80058fe:	f7ff ffc3 	bl	8005888 <HAL_UART_RxHalfCpltCallback>
}
 8005902:	e7fb      	b.n	80058fc <UART_DMARxHalfCplt+0x18>

08005904 <UART_DMAReceiveCplt>:
{
 8005904:	b508      	push	{r3, lr}
 8005906:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005908:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	2b20      	cmp	r3, #32
 800590e:	d032      	beq.n	8005976 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005916:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	e852 3f00 	ldrex	r3, [r2]
 800591c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005924:	6803      	ldr	r3, [r0, #0]
 8005926:	2900      	cmp	r1, #0
 8005928:	d1f5      	bne.n	8005916 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	f103 0208 	add.w	r2, r3, #8
 800592e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	f103 0c08 	add.w	ip, r3, #8
 800593a:	e84c 2100 	strex	r1, r2, [ip]
 800593e:	2900      	cmp	r1, #0
 8005940:	d1f3      	bne.n	800592a <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	f103 0208 	add.w	r2, r3, #8
 8005946:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f103 0c08 	add.w	ip, r3, #8
 8005952:	e84c 2100 	strex	r1, r2, [ip]
 8005956:	2900      	cmp	r1, #0
 8005958:	d1f3      	bne.n	8005942 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800595a:	2220      	movs	r2, #32
 800595c:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005962:	2a01      	cmp	r2, #1
 8005964:	d107      	bne.n	8005976 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	e843 2100 	strex	r1, r2, [r3]
 8005972:	2900      	cmp	r1, #0
 8005974:	d1f7      	bne.n	8005966 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005976:	2300      	movs	r3, #0
 8005978:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800597c:	2b01      	cmp	r3, #1
 800597e:	d104      	bne.n	800598a <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005980:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005984:	f7ff ffad 	bl	80058e2 <HAL_UARTEx_RxEventCallback>
}
 8005988:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800598a:	f7ff ff7c 	bl	8005886 <HAL_UART_RxCpltCallback>
}
 800598e:	e7fb      	b.n	8005988 <UART_DMAReceiveCplt+0x84>

08005990 <UART_SetConfig>:
{
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005994:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005996:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005998:	6925      	ldr	r5, [r4, #16]
 800599a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800599c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800599e:	432a      	orrs	r2, r5
 80059a0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a2:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059a8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059ac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80059b6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80059c8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059ca:	430a      	orrs	r2, r1
 80059cc:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ce:	4a56      	ldr	r2, [pc, #344]	@ (8005b28 <UART_SetConfig+0x198>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d112      	bne.n	80059fa <UART_SetConfig+0x6a>
 80059d4:	4b55      	ldr	r3, [pc, #340]	@ (8005b2c <UART_SetConfig+0x19c>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f000 8091 	beq.w	8005b04 <UART_SetConfig+0x174>
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d022      	beq.n	8005a2c <UART_SetConfig+0x9c>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	f040 8092 	bne.w	8005b10 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80059f0:	f040 8085 	bne.w	8005afe <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 80059f4:	f7fe fcee 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
        break;
 80059f8:	e06b      	b.n	8005ad2 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005b30 <UART_SetConfig+0x1a0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d12e      	bne.n	8005a5e <UART_SetConfig+0xce>
 8005a00:	4b4a      	ldr	r3, [pc, #296]	@ (8005b2c <UART_SetConfig+0x19c>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a0c:	d07a      	beq.n	8005b04 <UART_SetConfig+0x174>
 8005a0e:	d80a      	bhi.n	8005a26 <UART_SetConfig+0x96>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8083 	beq.w	8005b1c <UART_SetConfig+0x18c>
 8005a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a1a:	d0e7      	beq.n	80059ec <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8005a1c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005a1e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005a20:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8005a24:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a2a:	d1f7      	bne.n	8005a1c <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005a30:	4840      	ldr	r0, [pc, #256]	@ (8005b34 <UART_SetConfig+0x1a4>)
 8005a32:	d156      	bne.n	8005ae2 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	0853      	lsrs	r3, r2, #1
 8005a38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005a3c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a40:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005a44:	f1a3 0110 	sub.w	r1, r3, #16
 8005a48:	4291      	cmp	r1, r2
 8005a4a:	d8e7      	bhi.n	8005a1c <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a4c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005a50:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a52:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a54:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60cb      	str	r3, [r1, #12]
 8005a5c:	e03b      	b.n	8005ad6 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5e:	4a36      	ldr	r2, [pc, #216]	@ (8005b38 <UART_SetConfig+0x1a8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10f      	bne.n	8005a84 <UART_SetConfig+0xf4>
 8005a64:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <UART_SetConfig+0x19c>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a70:	d048      	beq.n	8005b04 <UART_SetConfig+0x174>
 8005a72:	d804      	bhi.n	8005a7e <UART_SetConfig+0xee>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d051      	beq.n	8005b1c <UART_SetConfig+0x18c>
 8005a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a7c:	e7cd      	b.n	8005a1a <UART_SetConfig+0x8a>
 8005a7e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a82:	e7d2      	b.n	8005a2a <UART_SetConfig+0x9a>
 8005a84:	4a2d      	ldr	r2, [pc, #180]	@ (8005b3c <UART_SetConfig+0x1ac>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10f      	bne.n	8005aaa <UART_SetConfig+0x11a>
 8005a8a:	4b28      	ldr	r3, [pc, #160]	@ (8005b2c <UART_SetConfig+0x19c>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a96:	d035      	beq.n	8005b04 <UART_SetConfig+0x174>
 8005a98:	d804      	bhi.n	8005aa4 <UART_SetConfig+0x114>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d03e      	beq.n	8005b1c <UART_SetConfig+0x18c>
 8005a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aa2:	e7ba      	b.n	8005a1a <UART_SetConfig+0x8a>
 8005aa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aa8:	e7bf      	b.n	8005a2a <UART_SetConfig+0x9a>
 8005aaa:	4a25      	ldr	r2, [pc, #148]	@ (8005b40 <UART_SetConfig+0x1b0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d1b5      	bne.n	8005a1c <UART_SetConfig+0x8c>
 8005ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b2c <UART_SetConfig+0x19c>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005abc:	d022      	beq.n	8005b04 <UART_SetConfig+0x174>
 8005abe:	d803      	bhi.n	8005ac8 <UART_SetConfig+0x138>
 8005ac0:	b363      	cbz	r3, 8005b1c <UART_SetConfig+0x18c>
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ac6:	e7a8      	b.n	8005a1a <UART_SetConfig+0x8a>
 8005ac8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005acc:	e7ad      	b.n	8005a2a <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ace:	f7fe fd65 	bl	800459c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d1ae      	bne.n	8005a34 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e7a1      	b.n	8005a1e <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ada:	f7fe fd47 	bl	800456c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d0f9      	beq.n	8005ad6 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ae2:	6862      	ldr	r2, [r4, #4]
 8005ae4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ae8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aec:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005af0:	f1a3 0110 	sub.w	r1, r3, #16
 8005af4:	4291      	cmp	r1, r2
 8005af6:	d891      	bhi.n	8005a1c <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af8:	6822      	ldr	r2, [r4, #0]
 8005afa:	60d3      	str	r3, [r2, #12]
 8005afc:	e7eb      	b.n	8005ad6 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe fc69 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
        break;
 8005b02:	e7ec      	b.n	8005ade <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b04:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005b08:	d094      	beq.n	8005a34 <UART_SetConfig+0xa4>
 8005b0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005b0e:	e7e8      	b.n	8005ae2 <UART_SetConfig+0x152>
 8005b10:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005b14:	d0db      	beq.n	8005ace <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b16:	f7fe fd41 	bl	800459c <HAL_RCC_GetPCLK2Freq>
        break;
 8005b1a:	e7e0      	b.n	8005ade <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005b20:	d1db      	bne.n	8005ada <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b22:	f7fe fd23 	bl	800456c <HAL_RCC_GetPCLK1Freq>
        break;
 8005b26:	e7d4      	b.n	8005ad2 <UART_SetConfig+0x142>
 8005b28:	40013800 	.word	0x40013800
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40004400 	.word	0x40004400
 8005b34:	007a1200 	.word	0x007a1200
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	40004c00 	.word	0x40004c00
 8005b40:	40005000 	.word	0x40005000

08005b44 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005b46:	071a      	lsls	r2, r3, #28
{
 8005b48:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b4a:	d506      	bpl.n	8005b5a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b4c:	6801      	ldr	r1, [r0, #0]
 8005b4e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005b50:	684a      	ldr	r2, [r1, #4]
 8005b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b56:	4322      	orrs	r2, r4
 8005b58:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b5a:	07dc      	lsls	r4, r3, #31
 8005b5c:	d506      	bpl.n	8005b6c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5e:	6801      	ldr	r1, [r0, #0]
 8005b60:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005b62:	684a      	ldr	r2, [r1, #4]
 8005b64:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b68:	4322      	orrs	r2, r4
 8005b6a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b6c:	0799      	lsls	r1, r3, #30
 8005b6e:	d506      	bpl.n	8005b7e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b70:	6801      	ldr	r1, [r0, #0]
 8005b72:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005b74:	684a      	ldr	r2, [r1, #4]
 8005b76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b7a:	4322      	orrs	r2, r4
 8005b7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b7e:	075a      	lsls	r2, r3, #29
 8005b80:	d506      	bpl.n	8005b90 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b82:	6801      	ldr	r1, [r0, #0]
 8005b84:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005b86:	684a      	ldr	r2, [r1, #4]
 8005b88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b8c:	4322      	orrs	r2, r4
 8005b8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b90:	06dc      	lsls	r4, r3, #27
 8005b92:	d506      	bpl.n	8005ba2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	6801      	ldr	r1, [r0, #0]
 8005b96:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005b98:	688a      	ldr	r2, [r1, #8]
 8005b9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b9e:	4322      	orrs	r2, r4
 8005ba0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba2:	0699      	lsls	r1, r3, #26
 8005ba4:	d506      	bpl.n	8005bb4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba6:	6801      	ldr	r1, [r0, #0]
 8005ba8:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005baa:	688a      	ldr	r2, [r1, #8]
 8005bac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bb0:	4322      	orrs	r2, r4
 8005bb2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bb4:	065a      	lsls	r2, r3, #25
 8005bb6:	d50f      	bpl.n	8005bd8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005bbc:	684a      	ldr	r2, [r1, #4]
 8005bbe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005bc2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bc4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bca:	d105      	bne.n	8005bd8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bcc:	684a      	ldr	r2, [r1, #4]
 8005bce:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005bd0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8005bd4:	4322      	orrs	r2, r4
 8005bd6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	d506      	bpl.n	8005bea <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bdc:	6802      	ldr	r2, [r0, #0]
 8005bde:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005be0:	6853      	ldr	r3, [r2, #4]
 8005be2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005be6:	430b      	orrs	r3, r1
 8005be8:	6053      	str	r3, [r2, #4]
}
 8005bea:	bd10      	pop	{r4, pc}

08005bec <UART_WaitOnFlagUntilTimeout>:
{
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	460d      	mov	r5, r1
 8005bf8:	4617      	mov	r7, r2
 8005bfa:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	69d3      	ldr	r3, [r2, #28]
 8005c00:	ea35 0303 	bics.w	r3, r5, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	42bb      	cmp	r3, r7
 8005c0c:	d001      	beq.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e022      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8005c12:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005c16:	d0f2      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7fd fa52 	bl	80030c0 <HAL_GetTick>
 8005c1c:	eba0 0008 	sub.w	r0, r0, r8
 8005c20:	4548      	cmp	r0, r9
 8005c22:	d829      	bhi.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x8c>
 8005c24:	f1b9 0f00 	cmp.w	r9, #0
 8005c28:	d026      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	075a      	lsls	r2, r3, #29
 8005c30:	d5e4      	bpl.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x10>
 8005c32:	2d80      	cmp	r5, #128	@ 0x80
 8005c34:	d0e2      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x10>
 8005c36:	2d40      	cmp	r5, #64	@ 0x40
 8005c38:	d0e0      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c3a:	69ce      	ldr	r6, [r1, #28]
 8005c3c:	f016 0608 	ands.w	r6, r6, #8
 8005c40:	d00c      	beq.n	8005c5c <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c42:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8005c44:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c46:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005c48:	f7ff fdf5 	bl	8005836 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005c4c:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c4e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8005c52:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8005c56:	2001      	movs	r0, #1
}
 8005c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c5c:	69cb      	ldr	r3, [r1, #28]
 8005c5e:	051b      	lsls	r3, r3, #20
 8005c60:	d5cc      	bpl.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c66:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff fde4 	bl	8005836 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8005c74:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8005c78:	2003      	movs	r0, #3
 8005c7a:	e7ed      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x6c>

08005c7c <HAL_UART_Transmit>:
{
 8005c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005c82:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005c84:	2b20      	cmp	r3, #32
{
 8005c86:	4604      	mov	r4, r0
 8005c88:	460e      	mov	r6, r1
 8005c8a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005c8c:	d143      	bne.n	8005d16 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d043      	beq.n	8005d1a <HAL_UART_Transmit+0x9e>
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d041      	beq.n	8005d1a <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c96:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	2500      	movs	r5, #0
 8005c9a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c9e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005ca0:	f7fd fa0e 	bl	80030c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005ca6:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8005cae:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8005cb0:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb4:	d103      	bne.n	8005cbe <HAL_UART_Transmit+0x42>
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	b90b      	cbnz	r3, 8005cbe <HAL_UART_Transmit+0x42>
 8005cba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005cbc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005cbe:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005cc6:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc8:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005cca:	b93a      	cbnz	r2, 8005cdc <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ccc:	2140      	movs	r1, #64	@ 0x40
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff ff8c 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	b940      	cbnz	r0, 8005cea <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005cd8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005cda:	e008      	b.n	8005cee <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	@ 0x80
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7ff ff83 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005ce6:	b128      	cbz	r0, 8005cf4 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8005ce8:	2320      	movs	r3, #32
 8005cea:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005cec:	2003      	movs	r0, #3
}
 8005cee:	b003      	add	sp, #12
 8005cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005cf6:	b95e      	cbnz	r6, 8005d10 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cf8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d00:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8005d02:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8005d06:	3a01      	subs	r2, #1
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8005d0e:	e7d6      	b.n	8005cbe <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d10:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005d14:	e7f4      	b.n	8005d00 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005d16:	2002      	movs	r0, #2
 8005d18:	e7e9      	b.n	8005cee <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	e7e7      	b.n	8005cee <HAL_UART_Transmit+0x72>

08005d1e <UART_CheckIdleState>:
{
 8005d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	2600      	movs	r6, #0
 8005d24:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8005d28:	f7fd f9ca 	bl	80030c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005d32:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d34:	d51b      	bpl.n	8005d6e <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff ff51 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005d4a:	b180      	cbz	r0, 8005d6e <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	e852 3f00 	ldrex	r3, [r2]
 8005d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	e842 3100 	strex	r1, r3, [r2]
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d1f6      	bne.n	8005d4c <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005d5e:	2320      	movs	r3, #32
 8005d60:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8005d62:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005d6a:	b002      	add	sp, #8
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	075b      	lsls	r3, r3, #29
 8005d74:	d524      	bpl.n	8005dc0 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	462b      	mov	r3, r5
 8005d80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ff31 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005d8a:	b1c8      	cbz	r0, 8005dc0 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	e852 3f00 	ldrex	r3, [r2]
 8005d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d1f5      	bne.n	8005d8c <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	f102 0308 	add.w	r3, r2, #8
 8005da4:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	f102 0008 	add.w	r0, r2, #8
 8005db0:	e840 3100 	strex	r1, r3, [r0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d1f3      	bne.n	8005da0 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8005db8:	2320      	movs	r3, #32
 8005dba:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005dbe:	e7d0      	b.n	8005d62 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8005dc0:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dcc:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005dce:	e7c9      	b.n	8005d64 <UART_CheckIdleState+0x46>

08005dd0 <HAL_UART_Init>:
{
 8005dd0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	b340      	cbz	r0, 8005e28 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005dd8:	b91b      	cbnz	r3, 8005de2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005dda:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005dde:	f7fc fefb 	bl	8002bd8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005de2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005de4:	2324      	movs	r3, #36	@ 0x24
 8005de6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005df0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005df2:	b113      	cbz	r3, 8005dfa <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff fea5 	bl	8005b44 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f7ff fdc8 	bl	8005990 <UART_SetConfig>
 8005e00:	2801      	cmp	r0, #1
 8005e02:	d011      	beq.n	8005e28 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e14:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005e1c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005e1e:	601a      	str	r2, [r3, #0]
}
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005e24:	f7ff bf7b 	b.w	8005d1e <UART_CheckIdleState>
}
 8005e28:	2001      	movs	r0, #1
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <UART_Start_Receive_DMA>:
{
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4613      	mov	r3, r2
 8005e30:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8005e32:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e36:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8005e38:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e3e:	2022      	movs	r0, #34	@ 0x22
 8005e40:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8005e44:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e46:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8005e48:	b1a0      	cbz	r0, 8005e74 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e4a:	4e1c      	ldr	r6, [pc, #112]	@ (8005ebc <UART_Start_Receive_DMA+0x90>)
 8005e4c:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e4e:	4e1c      	ldr	r6, [pc, #112]	@ (8005ec0 <UART_Start_Receive_DMA+0x94>)
 8005e50:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e52:	4e1c      	ldr	r6, [pc, #112]	@ (8005ec4 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005e54:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e58:	460a      	mov	r2, r1
 8005e5a:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8005e5e:	f7fd ff09 	bl	8003c74 <HAL_DMA_Start_IT>
 8005e62:	b138      	cbz	r0, 8005e74 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e64:	2310      	movs	r3, #16
 8005e66:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8005e70:	2001      	movs	r0, #1
}
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	b13a      	cbz	r2, 8005e8a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	e843 2100 	strex	r1, r2, [r3]
 8005e86:	2900      	cmp	r1, #0
 8005e88:	d1f7      	bne.n	8005e7a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	f103 0008 	add.w	r0, r3, #8
 8005e9a:	e840 2100 	strex	r1, r2, [r0]
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	d1f3      	bne.n	8005e8a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	f103 0208 	add.w	r2, r3, #8
 8005ea6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	f103 0108 	add.w	r1, r3, #8
 8005eb2:	e841 2000 	strex	r0, r2, [r1]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1f3      	bne.n	8005ea2 <UART_Start_Receive_DMA+0x76>
 8005eba:	e7da      	b.n	8005e72 <UART_Start_Receive_DMA+0x46>
 8005ebc:	08005905 	.word	0x08005905
 8005ec0:	080058e5 	.word	0x080058e5
 8005ec4:	0800588d 	.word	0x0800588d

08005ec8 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ec8:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005ecc:	2b20      	cmp	r3, #32
{
 8005ece:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed0:	d112      	bne.n	8005ef8 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8005ed2:	b1a1      	cbz	r1, 8005efe <HAL_UART_Receive_DMA+0x36>
 8005ed4:	b19a      	cbz	r2, 8005efe <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ed8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	d507      	bpl.n	8005ef2 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ee6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	e844 3500 	strex	r5, r3, [r4]
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	d1f7      	bne.n	8005ee2 <HAL_UART_Receive_DMA+0x1a>
}
 8005ef2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ef4:	f7ff bf9a 	b.w	8005e2c <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8005ef8:	2002      	movs	r0, #2
}
 8005efa:	bc30      	pop	{r4, r5}
 8005efc:	4770      	bx	lr
      return HAL_ERROR;
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7fb      	b.n	8005efa <HAL_UART_Receive_DMA+0x32>
	...

08005f04 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f04:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f08:	b113      	cbz	r3, 8005f10 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8005f0a:	f06f 0005 	mvn.w	r0, #5
 8005f0e:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f10:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f8      	bne.n	8005f0a <osKernelInitialize+0x6>
 8005f18:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <osKernelInitialize+0x34>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	2802      	cmp	r0, #2
 8005f1e:	d106      	bne.n	8005f2e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f20:	f3ef 8311 	mrs	r3, BASEPRI
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f0      	bne.n	8005f0a <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005f2c:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d1fa      	bne.n	8005f28 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f36:	4770      	bx	lr
 8005f38:	2000479c 	.word	0x2000479c

08005f3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f3c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f42:	b113      	cbz	r3, 8005f4a <osKernelStart+0xe>
    stat = osErrorISR;
 8005f44:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8005f48:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8005f4e:	2c00      	cmp	r4, #0
 8005f50:	d1f8      	bne.n	8005f44 <osKernelStart+0x8>
 8005f52:	4b09      	ldr	r3, [pc, #36]	@ (8005f78 <osKernelStart+0x3c>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2a02      	cmp	r2, #2
 8005f58:	d106      	bne.n	8005f68 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <osKernelStart+0x8>
      stat = osError;
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005f66:	e7ef      	b.n	8005f48 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8005f68:	2a01      	cmp	r2, #1
 8005f6a:	d1fa      	bne.n	8005f62 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005f70:	f001 f8c8 	bl	8007104 <vTaskStartScheduler>
      stat = osOK;
 8005f74:	4620      	mov	r0, r4
 8005f76:	e7e7      	b.n	8005f48 <osKernelStart+0xc>
 8005f78:	2000479c 	.word	0x2000479c

08005f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f82:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f84:	460b      	mov	r3, r1
  hTask = NULL;
 8005f86:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f88:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005f8c:	bb52      	cbnz	r2, 8005fe4 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8210 	mrs	r2, PRIMASK
 8005f92:	bb3a      	cbnz	r2, 8005fe4 <osThreadNew+0x68>
 8005f94:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <osThreadNew+0xb4>)
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	2a02      	cmp	r2, #2
 8005f9a:	d102      	bne.n	8005fa2 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005fa0:	bb02      	cbnz	r2, 8005fe4 <osThreadNew+0x68>
 8005fa2:	b1f8      	cbz	r0, 8005fe4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d030      	beq.n	8006010 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	b909      	cbnz	r1, 8005fb6 <osThreadNew+0x3a>
    name  = &empty;
 8005fb2:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005fb6:	69a5      	ldr	r5, [r4, #24]
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	bf08      	it	eq
 8005fbc:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fbe:	1e6a      	subs	r2, r5, #1
 8005fc0:	2a37      	cmp	r2, #55	@ 0x37
 8005fc2:	46ac      	mov	ip, r5
 8005fc4:	d82a      	bhi.n	800601c <osThreadNew+0xa0>
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	07d2      	lsls	r2, r2, #31
 8005fca:	d427      	bmi.n	800601c <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005fcc:	6966      	ldr	r6, [r4, #20]
 8005fce:	b166      	cbz	r6, 8005fea <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fd0:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fd2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8005fd6:	b157      	cbz	r7, 8005fee <osThreadNew+0x72>
 8005fd8:	f1be 0fa7 	cmp.w	lr, #167	@ 0xa7
 8005fdc:	d902      	bls.n	8005fe4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fde:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fe0:	b104      	cbz	r4, 8005fe4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005fe2:	b9ee      	cbnz	r6, 8006020 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fe4:	9805      	ldr	r0, [sp, #20]
}
 8005fe6:	b007      	add	sp, #28
 8005fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005fea:	2240      	movs	r2, #64	@ 0x40
 8005fec:	e7f1      	b.n	8005fd2 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fee:	f1be 0f00 	cmp.w	lr, #0
 8005ff2:	d1f7      	bne.n	8005fe4 <osThreadNew+0x68>
      if (mem == 0) {
 8005ff4:	6924      	ldr	r4, [r4, #16]
 8005ff6:	2c00      	cmp	r4, #0
 8005ff8:	d1f4      	bne.n	8005fe4 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ffa:	ac05      	add	r4, sp, #20
 8005ffc:	e9cd c400 	strd	ip, r4, [sp]
 8006000:	b292      	uxth	r2, r2
 8006002:	f001 f850 	bl	80070a6 <xTaskCreate>
 8006006:	2801      	cmp	r0, #1
          hTask = NULL;
 8006008:	bf1c      	itt	ne
 800600a:	2300      	movne	r3, #0
 800600c:	9305      	strne	r3, [sp, #20]
 800600e:	e7e9      	b.n	8005fe4 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8006010:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006014:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 8006016:	f10d 0113 	add.w	r1, sp, #19
 800601a:	e7ee      	b.n	8005ffa <osThreadNew+0x7e>
        return (NULL);
 800601c:	2000      	movs	r0, #0
 800601e:	e7e2      	b.n	8005fe6 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006020:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006024:	9500      	str	r5, [sp, #0]
 8006026:	f001 f807 	bl	8007038 <xTaskCreateStatic>
 800602a:	9005      	str	r0, [sp, #20]
 800602c:	e7da      	b.n	8005fe4 <osThreadNew+0x68>
 800602e:	bf00      	nop
 8006030:	2000479c 	.word	0x2000479c

08006034 <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006034:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8006038:	b963      	cbnz	r3, 8006054 <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800603a:	f3ef 8310 	mrs	r3, PRIMASK
 800603e:	b94b      	cbnz	r3, 8006054 <osThreadGetStackSpace+0x20>
 8006040:	4b05      	ldr	r3, [pc, #20]	@ (8006058 <osThreadGetStackSpace+0x24>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d102      	bne.n	800604e <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006048:	f3ef 8311 	mrs	r3, BASEPRI
 800604c:	b913      	cbnz	r3, 8006054 <osThreadGetStackSpace+0x20>
 800604e:	b108      	cbz	r0, 8006054 <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8006050:	f001 baea 	b.w	8007628 <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 8006054:	2000      	movs	r0, #0
 8006056:	4770      	bx	lr
 8006058:	2000479c 	.word	0x2000479c

0800605c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800605c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006062:	b113      	cbz	r3, 800606a <osDelay+0xe>
    stat = osErrorISR;
 8006064:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006068:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800606a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f8      	bne.n	8006064 <osDelay+0x8>
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <osDelay+0x30>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d103      	bne.n	8006082 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800607a:	f3ef 8311 	mrs	r3, BASEPRI
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <osDelay+0x8>
    if (ticks != 0U) {
 8006082:	b108      	cbz	r0, 8006088 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006084:	f001 f9a6 	bl	80073d4 <vTaskDelay>
    stat = osOK;
 8006088:	2000      	movs	r0, #0
  return (stat);
 800608a:	e7ed      	b.n	8006068 <osDelay+0xc>
 800608c:	2000479c 	.word	0x2000479c

08006090 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006094:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006098:	b113      	cbz	r3, 80060a0 <osMutexNew+0x10>
  hMutex = NULL;
 800609a:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800609c:	4620      	mov	r0, r4
 800609e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f8      	bne.n	800609a <osMutexNew+0xa>
 80060a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006114 <osMutexNew+0x84>)
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	2a02      	cmp	r2, #2
 80060ae:	d103      	bne.n	80060b8 <osMutexNew+0x28>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b0:	f3ef 8211 	mrs	r2, BASEPRI
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d1f0      	bne.n	800609a <osMutexNew+0xa>
    if (attr != NULL) {
 80060b8:	b115      	cbz	r5, 80060c0 <osMutexNew+0x30>
      type = attr->attr_bits;
 80060ba:	686b      	ldr	r3, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80060bc:	071a      	lsls	r2, r3, #28
 80060be:	d4ec      	bmi.n	800609a <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80060c0:	f003 0601 	and.w	r6, r3, #1
      if (attr != NULL) {
 80060c4:	b17d      	cbz	r5, 80060e6 <osMutexNew+0x56>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060c6:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 80060ca:	b151      	cbz	r1, 80060e2 <osMutexNew+0x52>
 80060cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80060ce:	d9e4      	bls.n	800609a <osMutexNew+0xa>
        if (rmtx != 0U) {
 80060d0:	b1de      	cbz	r6, 800610a <osMutexNew+0x7a>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80060d2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80060d4:	f000 fb97 	bl	8006806 <xQueueCreateMutexStatic>
 80060d8:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0dd      	beq.n	800609a <osMutexNew+0xa>
          name = attr->name;
 80060de:	682d      	ldr	r5, [r5, #0]
 80060e0:	e00a      	b.n	80060f8 <osMutexNew+0x68>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1d9      	bne.n	800609a <osMutexNew+0xa>
          if (rmtx != 0U) {
 80060e6:	b196      	cbz	r6, 800610e <osMutexNew+0x7e>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80060e8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 80060ea:	f000 fbc0 	bl	800686e <xQueueCreateMutex>
 80060ee:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0d2      	beq.n	800609a <osMutexNew+0xa>
        if (attr != NULL) {
 80060f4:	2d00      	cmp	r5, #0
 80060f6:	d1f2      	bne.n	80060de <osMutexNew+0x4e>
        vQueueAddToRegistry (hMutex, name);
 80060f8:	4629      	mov	r1, r5
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fdfa 	bl	8006cf4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006100:	2e00      	cmp	r6, #0
 8006102:	d0cb      	beq.n	800609c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006104:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8006108:	e7c8      	b.n	800609c <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800610a:	2001      	movs	r0, #1
 800610c:	e7e2      	b.n	80060d4 <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 800610e:	2001      	movs	r0, #1
 8006110:	e7eb      	b.n	80060ea <osMutexNew+0x5a>
 8006112:	bf00      	nop
 8006114:	2000479c 	.word	0x2000479c

08006118 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006118:	4603      	mov	r3, r0
 800611a:	b510      	push	{r4, lr}
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800611c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006120:	460c      	mov	r4, r1

  rmtx = (uint32_t)mutex_id & 1U;
 8006122:	f003 0201 	and.w	r2, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006126:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800612a:	b111      	cbz	r1, 8006132 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800612c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006130:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006132:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 8006136:	2900      	cmp	r1, #0
 8006138:	d1f8      	bne.n	800612c <osMutexAcquire+0x14>
 800613a:	490f      	ldr	r1, [pc, #60]	@ (8006178 <osMutexAcquire+0x60>)
 800613c:	6809      	ldr	r1, [r1, #0]
 800613e:	2902      	cmp	r1, #2
 8006140:	d103      	bne.n	800614a <osMutexAcquire+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006142:	f3ef 8111 	mrs	r1, BASEPRI
 8006146:	2900      	cmp	r1, #0
 8006148:	d1f0      	bne.n	800612c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800614a:	2b01      	cmp	r3, #1
 800614c:	d911      	bls.n	8006172 <osMutexAcquire+0x5a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800614e:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006150:	b162      	cbz	r2, 800616c <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006152:	f000 fd60 	bl	8006c16 <xQueueTakeMutexRecursive>
 8006156:	2801      	cmp	r0, #1
 8006158:	d101      	bne.n	800615e <osMutexAcquire+0x46>
  stat = osOK;
 800615a:	2000      	movs	r0, #0
 800615c:	e7e8      	b.n	8006130 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800615e:	2c00      	cmp	r4, #0
 8006160:	bf14      	ite	ne
 8006162:	f06f 0001 	mvnne.w	r0, #1
 8006166:	f06f 0002 	mvneq.w	r0, #2
 800616a:	e7e1      	b.n	8006130 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800616c:	f000 fc96 	bl	8006a9c <xQueueSemaphoreTake>
 8006170:	e7f1      	b.n	8006156 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 8006172:	f06f 0003 	mvn.w	r0, #3
 8006176:	e7db      	b.n	8006130 <osMutexAcquire+0x18>
 8006178:	2000479c 	.word	0x2000479c

0800617c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800617c:	4602      	mov	r2, r0
 800617e:	b508      	push	{r3, lr}
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006180:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006184:	f002 0301 	and.w	r3, r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006188:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800618c:	b111      	cbz	r1, 8006194 <osMutexRelease+0x18>
    stat = osErrorISR;
 800618e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006192:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006194:	f3ef 8110 	mrs	r1, PRIMASK
  if (IS_IRQ()) {
 8006198:	2900      	cmp	r1, #0
 800619a:	d1f8      	bne.n	800618e <osMutexRelease+0x12>
 800619c:	490d      	ldr	r1, [pc, #52]	@ (80061d4 <osMutexRelease+0x58>)
 800619e:	6809      	ldr	r1, [r1, #0]
 80061a0:	2902      	cmp	r1, #2
 80061a2:	d103      	bne.n	80061ac <osMutexRelease+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061a4:	f3ef 8111 	mrs	r1, BASEPRI
 80061a8:	2900      	cmp	r1, #0
 80061aa:	d1f0      	bne.n	800618e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 80061ac:	2a01      	cmp	r2, #1
 80061ae:	d90d      	bls.n	80061cc <osMutexRelease+0x50>
    if (rmtx != 0U) {
 80061b0:	b13b      	cbz	r3, 80061c2 <osMutexRelease+0x46>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061b2:	f000 fb3d 	bl	8006830 <xQueueGiveMutexRecursive>
 80061b6:	2801      	cmp	r0, #1
  stat = osOK;
 80061b8:	bf0c      	ite	eq
 80061ba:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80061bc:	f06f 0002 	mvnne.w	r0, #2
 80061c0:	e7e7      	b.n	8006192 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061c2:	461a      	mov	r2, r3
 80061c4:	4619      	mov	r1, r3
 80061c6:	f000 fa6c 	bl	80066a2 <xQueueGenericSend>
 80061ca:	e7f4      	b.n	80061b6 <osMutexRelease+0x3a>
    stat = osErrorParameter;
 80061cc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80061d0:	e7df      	b.n	8006192 <osMutexRelease+0x16>
 80061d2:	bf00      	nop
 80061d4:	2000479c 	.word	0x2000479c

080061d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061da:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061dc:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061e0:	b11b      	cbz	r3, 80061ea <osMessageQueueNew+0x12>
  hQueue = NULL;
 80061e2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80061e4:	4628      	mov	r0, r5
 80061e6:	b002      	add	sp, #8
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ea:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f7      	bne.n	80061e2 <osMessageQueueNew+0xa>
 80061f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006264 <osMessageQueueNew+0x8c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d103      	bne.n	8006202 <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061fa:	f3ef 8311 	mrs	r3, BASEPRI
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ef      	bne.n	80061e2 <osMessageQueueNew+0xa>
 8006202:	2800      	cmp	r0, #0
 8006204:	d0ed      	beq.n	80061e2 <osMessageQueueNew+0xa>
 8006206:	2900      	cmp	r1, #0
 8006208:	d0eb      	beq.n	80061e2 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800620a:	b1ec      	cbz	r4, 8006248 <osMessageQueueNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800620c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8006210:	b193      	cbz	r3, 8006238 <osMessageQueueNew+0x60>
 8006212:	2a4f      	cmp	r2, #79	@ 0x4f
 8006214:	d9e5      	bls.n	80061e2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006216:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006218:	2a00      	cmp	r2, #0
 800621a:	d0e2      	beq.n	80061e2 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800621c:	6966      	ldr	r6, [r4, #20]
 800621e:	fb01 f500 	mul.w	r5, r1, r0
 8006222:	42ae      	cmp	r6, r5
 8006224:	d3dd      	bcc.n	80061e2 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006226:	2500      	movs	r5, #0
 8006228:	9500      	str	r5, [sp, #0]
 800622a:	f000 f9c6 	bl	80065ba <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800622e:	4605      	mov	r5, r0
 8006230:	2800      	cmp	r0, #0
 8006232:	d0d6      	beq.n	80061e2 <osMessageQueueNew+0xa>
        name = attr->name;
 8006234:	6824      	ldr	r4, [r4, #0]
 8006236:	e00f      	b.n	8006258 <osMessageQueueNew+0x80>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006238:	2a00      	cmp	r2, #0
 800623a:	d1d2      	bne.n	80061e2 <osMessageQueueNew+0xa>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1cf      	bne.n	80061e2 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006242:	6963      	ldr	r3, [r4, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1cc      	bne.n	80061e2 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006248:	2200      	movs	r2, #0
 800624a:	f000 fa03 	bl	8006654 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800624e:	4605      	mov	r5, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	d0c6      	beq.n	80061e2 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8006254:	2c00      	cmp	r4, #0
 8006256:	d1ed      	bne.n	8006234 <osMessageQueueNew+0x5c>
      vQueueAddToRegistry (hQueue, name);
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 fd4a 	bl	8006cf4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006260:	e7c0      	b.n	80061e4 <osMessageQueueNew+0xc>
 8006262:	bf00      	nop
 8006264:	2000479c 	.word	0x2000479c

08006268 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006268:	b513      	push	{r0, r1, r4, lr}
 800626a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006270:	b123      	cbz	r3, 800627c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006272:	b9e8      	cbnz	r0, 80062b0 <osMessageQueuePut+0x48>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8006274:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006278:	b002      	add	sp, #8
 800627a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f6      	bne.n	8006272 <osMessageQueuePut+0xa>
 8006284:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <osMessageQueuePut+0x84>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d103      	bne.n	8006294 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ee      	bne.n	8006272 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006294:	2800      	cmp	r0, #0
 8006296:	d0ed      	beq.n	8006274 <osMessageQueuePut+0xc>
 8006298:	2900      	cmp	r1, #0
 800629a:	d0eb      	beq.n	8006274 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800629c:	2300      	movs	r3, #0
 800629e:	4622      	mov	r2, r4
 80062a0:	f000 f9ff 	bl	80066a2 <xQueueGenericSend>
 80062a4:	2801      	cmp	r0, #1
 80062a6:	d013      	beq.n	80062d0 <osMessageQueuePut+0x68>
        if (timeout != 0U) {
 80062a8:	b16c      	cbz	r4, 80062c6 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 80062aa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80062ae:	e7e3      	b.n	8006278 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062b0:	2900      	cmp	r1, #0
 80062b2:	d0df      	beq.n	8006274 <osMessageQueuePut+0xc>
 80062b4:	2c00      	cmp	r4, #0
 80062b6:	d1dd      	bne.n	8006274 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80062b8:	4623      	mov	r3, r4
 80062ba:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80062bc:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80062be:	f000 faf3 	bl	80068a8 <xQueueGenericSendFromISR>
 80062c2:	2801      	cmp	r0, #1
 80062c4:	d002      	beq.n	80062cc <osMessageQueuePut+0x64>
        stat = osErrorResource;
 80062c6:	f06f 0002 	mvn.w	r0, #2
 80062ca:	e7d5      	b.n	8006278 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	b90b      	cbnz	r3, 80062d4 <osMessageQueuePut+0x6c>
  stat = osOK;
 80062d0:	2000      	movs	r0, #0
 80062d2:	e7d1      	b.n	8006278 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80062d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	e7f2      	b.n	80062d0 <osMessageQueuePut+0x68>
 80062ea:	bf00      	nop
 80062ec:	2000479c 	.word	0x2000479c

080062f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80062f0:	b513      	push	{r0, r1, r4, lr}
 80062f2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80062f8:	b123      	cbz	r3, 8006304 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062fa:	b9e0      	cbnz	r0, 8006336 <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 80062fc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8006300:	b002      	add	sp, #8
 8006302:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006304:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f6      	bne.n	80062fa <osMessageQueueGet+0xa>
 800630c:	4b18      	ldr	r3, [pc, #96]	@ (8006370 <osMessageQueueGet+0x80>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d103      	bne.n	800631c <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ee      	bne.n	80062fa <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800631c:	2800      	cmp	r0, #0
 800631e:	d0ed      	beq.n	80062fc <osMessageQueueGet+0xc>
 8006320:	2900      	cmp	r1, #0
 8006322:	d0eb      	beq.n	80062fc <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006324:	4622      	mov	r2, r4
 8006326:	f000 fb1b 	bl	8006960 <xQueueReceive>
 800632a:	2801      	cmp	r0, #1
 800632c:	d012      	beq.n	8006354 <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 800632e:	b164      	cbz	r4, 800634a <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8006330:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8006334:	e7e4      	b.n	8006300 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006336:	2900      	cmp	r1, #0
 8006338:	d0e0      	beq.n	80062fc <osMessageQueueGet+0xc>
 800633a:	2c00      	cmp	r4, #0
 800633c:	d1de      	bne.n	80062fc <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800633e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006340:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006342:	f000 fc89 	bl	8006c58 <xQueueReceiveFromISR>
 8006346:	2801      	cmp	r0, #1
 8006348:	d002      	beq.n	8006350 <osMessageQueueGet+0x60>
        stat = osErrorResource;
 800634a:	f06f 0002 	mvn.w	r0, #2
 800634e:	e7d7      	b.n	8006300 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	b90b      	cbnz	r3, 8006358 <osMessageQueueGet+0x68>
  stat = osOK;
 8006354:	2000      	movs	r0, #0
 8006356:	e7d3      	b.n	8006300 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8006358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800635c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	e7f2      	b.n	8006354 <osMessageQueueGet+0x64>
 800636e:	bf00      	nop
 8006370:	2000479c 	.word	0x2000479c

08006374 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006374:	4b03      	ldr	r3, [pc, #12]	@ (8006384 <vApplicationGetIdleTaskMemory+0x10>)
 8006376:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006378:	4b03      	ldr	r3, [pc, #12]	@ (8006388 <vApplicationGetIdleTaskMemory+0x14>)
 800637a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800637c:	2340      	movs	r3, #64	@ 0x40
 800637e:	6013      	str	r3, [r2, #0]
}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200046f4 	.word	0x200046f4
 8006388:	200045f4 	.word	0x200045f4

0800638c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800638c:	4b03      	ldr	r3, [pc, #12]	@ (800639c <vApplicationGetTimerTaskMemory+0x10>)
 800638e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <vApplicationGetTimerTaskMemory+0x14>)
 8006392:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006394:	2380      	movs	r3, #128	@ 0x80
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	2000454c 	.word	0x2000454c
 80063a0:	2000434c 	.word	0x2000434c

080063a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063a8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063b8:	4770      	bx	lr

080063ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063be:	4770      	bx	lr

080063c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80063c0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063c8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063ca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80063cc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063ce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80063d0:	3301      	adds	r3, #1
 80063d2:	6003      	str	r3, [r0, #0]
}
 80063d4:	4770      	bx	lr

080063d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063d6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063d8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063da:	1c63      	adds	r3, r4, #1
 80063dc:	d10a      	bne.n	80063f4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063de:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063e4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063e6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80063e8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80063ea:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80063ec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80063ee:	3301      	adds	r3, #1
 80063f0:	6003      	str	r3, [r0, #0]
}
 80063f2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f4:	f100 0208 	add.w	r2, r0, #8
 80063f8:	4613      	mov	r3, r2
 80063fa:	6852      	ldr	r2, [r2, #4]
 80063fc:	6815      	ldr	r5, [r2, #0]
 80063fe:	42a5      	cmp	r5, r4
 8006400:	d9fa      	bls.n	80063f8 <vListInsert+0x22>
 8006402:	e7ed      	b.n	80063e0 <vListInsert+0xa>

08006404 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006404:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006408:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800640a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800640c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800640e:	6859      	ldr	r1, [r3, #4]
 8006410:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006412:	bf08      	it	eq
 8006414:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006416:	2200      	movs	r2, #0
 8006418:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	3a01      	subs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006420:	6818      	ldr	r0, [r3, #0]
}
 8006422:	4770      	bx	lr

08006424 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006424:	b510      	push	{r4, lr}
 8006426:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006428:	f001 fc44 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800642c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800642e:	f001 fc61 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
}
 8006432:	fab4 f084 	clz	r0, r4
 8006436:	0940      	lsrs	r0, r0, #5
 8006438:	bd10      	pop	{r4, pc}

0800643a <prvCopyDataToQueue>:
{
 800643a:	b570      	push	{r4, r5, r6, lr}
 800643c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800643e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006440:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006442:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006444:	b942      	cbnz	r2, 8006458 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006446:	6806      	ldr	r6, [r0, #0]
 8006448:	b99e      	cbnz	r6, 8006472 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800644a:	6840      	ldr	r0, [r0, #4]
 800644c:	f001 f952 	bl	80076f4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006450:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006452:	3501      	adds	r5, #1
 8006454:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006456:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006458:	b96e      	cbnz	r6, 8006476 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800645a:	6880      	ldr	r0, [r0, #8]
 800645c:	f004 fd60 	bl	800af20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006464:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006466:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006468:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800646a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800646c:	bf24      	itt	cs
 800646e:	6823      	ldrcs	r3, [r4, #0]
 8006470:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006472:	2000      	movs	r0, #0
 8006474:	e7ed      	b.n	8006452 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	68c0      	ldr	r0, [r0, #12]
 8006478:	f004 fd52 	bl	800af20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800647c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	4251      	negs	r1, r2
 8006482:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006484:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006486:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006488:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800648a:	bf3e      	ittt	cc
 800648c:	6863      	ldrcc	r3, [r4, #4]
 800648e:	185b      	addcc	r3, r3, r1
 8006490:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006492:	2e02      	cmp	r6, #2
 8006494:	d1ed      	bne.n	8006472 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006496:	b10d      	cbz	r5, 800649c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006498:	3d01      	subs	r5, #1
 800649a:	e7ea      	b.n	8006472 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800649c:	4628      	mov	r0, r5
 800649e:	e7d8      	b.n	8006452 <prvCopyDataToQueue+0x18>

080064a0 <prvCopyDataFromQueue>:
{
 80064a0:	4603      	mov	r3, r0
 80064a2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80064a6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064a8:	b16a      	cbz	r2, 80064c6 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064aa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064ac:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064ae:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064b0:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064b2:	bf28      	it	cs
 80064b4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064b6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064b8:	bf28      	it	cs
 80064ba:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064bc:	68d9      	ldr	r1, [r3, #12]
}
 80064be:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064c2:	f004 bd2d 	b.w	800af20 <memcpy>
}
 80064c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <prvUnlockQueue>:
{
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80064d0:	f001 fbf0 	bl	8007cb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80064d4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80064dc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dc14      	bgt.n	800650c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80064e2:	23ff      	movs	r3, #255	@ 0xff
 80064e4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80064e8:	f001 fc04 	bl	8007cf4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80064ec:	f001 fbe2 	bl	8007cb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80064f0:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f4:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80064f8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	dc12      	bgt.n	8006524 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80064fe:	23ff      	movs	r3, #255	@ 0xff
 8006500:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8006504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006508:	f001 bbf4 	b.w	8007cf4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0e7      	beq.n	80064e2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006512:	4630      	mov	r0, r6
 8006514:	f000 fffa 	bl	800750c <xTaskRemoveFromEventList>
 8006518:	b108      	cbz	r0, 800651e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800651a:	f001 f87f 	bl	800761c <vTaskMissedYield>
			--cTxLock;
 800651e:	3d01      	subs	r5, #1
 8006520:	b26d      	sxtb	r5, r5
 8006522:	e7dc      	b.n	80064de <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0e9      	beq.n	80064fe <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652a:	4630      	mov	r0, r6
 800652c:	f000 ffee 	bl	800750c <xTaskRemoveFromEventList>
 8006530:	b108      	cbz	r0, 8006536 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006532:	f001 f873 	bl	800761c <vTaskMissedYield>
				--cRxLock;
 8006536:	3d01      	subs	r5, #1
 8006538:	b26d      	sxtb	r5, r5
 800653a:	e7de      	b.n	80064fa <prvUnlockQueue+0x2e>

0800653c <xQueueGenericReset>:
{
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006540:	4604      	mov	r4, r0
 8006542:	b940      	cbnz	r0, 8006556 <xQueueGenericReset+0x1a>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	e7fe      	b.n	8006554 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006556:	f001 fbad 	bl	8007cb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800655a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800655e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006560:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006562:	434b      	muls	r3, r1
 8006564:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006566:	1a5b      	subs	r3, r3, r1
 8006568:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800656a:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800656c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800656e:	2000      	movs	r0, #0
 8006570:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006572:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006574:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006578:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800657c:	b9a5      	cbnz	r5, 80065a8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	b173      	cbz	r3, 80065a0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006582:	f104 0010 	add.w	r0, r4, #16
 8006586:	f000 ffc1 	bl	800750c <xTaskRemoveFromEventList>
 800658a:	b148      	cbz	r0, 80065a0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800658c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006594:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80065a0:	f001 fba8 	bl	8007cf4 <vPortExitCritical>
}
 80065a4:	2001      	movs	r0, #1
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065a8:	f104 0010 	add.w	r0, r4, #16
 80065ac:	f7ff fefa 	bl	80063a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80065b4:	f7ff fef6 	bl	80063a4 <vListInitialise>
 80065b8:	e7f2      	b.n	80065a0 <xQueueGenericReset+0x64>

080065ba <xQueueGenericCreateStatic>:
	{
 80065ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065bc:	460d      	mov	r5, r1
 80065be:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065c0:	b940      	cbnz	r0, 80065d4 <xQueueGenericCreateStatic+0x1a>
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	e7fe      	b.n	80065d2 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80065d4:	b943      	cbnz	r3, 80065e8 <xQueueGenericCreateStatic+0x2e>
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	e7fe      	b.n	80065e6 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065e8:	b14a      	cbz	r2, 80065fe <xQueueGenericCreateStatic+0x44>
 80065ea:	b991      	cbnz	r1, 8006612 <xQueueGenericCreateStatic+0x58>
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	e7fe      	b.n	80065fc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065fe:	b141      	cbz	r1, 8006612 <xQueueGenericCreateStatic+0x58>
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006612:	2350      	movs	r3, #80	@ 0x50
 8006614:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	2b50      	cmp	r3, #80	@ 0x50
 800661a:	d008      	beq.n	800662e <xQueueGenericCreateStatic+0x74>
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	e7fe      	b.n	800662c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800662e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006630:	2d00      	cmp	r5, #0
 8006632:	bf08      	it	eq
 8006634:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006636:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800663a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800663e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006640:	4620      	mov	r0, r4
 8006642:	f7ff ff7b 	bl	800653c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006646:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800664a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800664e:	4620      	mov	r0, r4
 8006650:	b003      	add	sp, #12
 8006652:	bd30      	pop	{r4, r5, pc}

08006654 <xQueueGenericCreate>:
	{
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	460d      	mov	r5, r1
 8006658:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800665a:	4606      	mov	r6, r0
 800665c:	b940      	cbnz	r0, 8006670 <xQueueGenericCreate+0x1c>
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	e7fe      	b.n	800666e <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006670:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006672:	3050      	adds	r0, #80	@ 0x50
 8006674:	f001 fc84 	bl	8007f80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006678:	4604      	mov	r4, r0
 800667a:	b170      	cbz	r0, 800669a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006682:	b165      	cbz	r5, 800669e <xQueueGenericCreate+0x4a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006684:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8006688:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800668c:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800668e:	2101      	movs	r1, #1
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff ff53 	bl	800653c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006696:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800669a:	4620      	mov	r0, r4
 800669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800669e:	4603      	mov	r3, r0
 80066a0:	e7f2      	b.n	8006688 <xQueueGenericCreate+0x34>

080066a2 <xQueueGenericSend>:
{
 80066a2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80066a6:	460f      	mov	r7, r1
 80066a8:	9201      	str	r2, [sp, #4]
 80066aa:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80066ac:	4604      	mov	r4, r0
 80066ae:	b940      	cbnz	r0, 80066c2 <xQueueGenericSend+0x20>
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	e7fe      	b.n	80066c0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c2:	b951      	cbnz	r1, 80066da <xQueueGenericSend+0x38>
 80066c4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80066c6:	b143      	cbz	r3, 80066da <xQueueGenericSend+0x38>
 80066c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066da:	2e02      	cmp	r6, #2
 80066dc:	d10b      	bne.n	80066f6 <xQueueGenericSend+0x54>
 80066de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d008      	beq.n	80066f6 <xQueueGenericSend+0x54>
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f000 ffad 	bl	8007654 <xTaskGetSchedulerState>
 80066fa:	4605      	mov	r5, r0
 80066fc:	b330      	cbz	r0, 800674c <xQueueGenericSend+0xaa>
 80066fe:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006700:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006704:	f001 fad6 	bl	8007cb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006708:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800670a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800670c:	429a      	cmp	r2, r3
 800670e:	d301      	bcc.n	8006714 <xQueueGenericSend+0x72>
 8006710:	2e02      	cmp	r6, #2
 8006712:	d127      	bne.n	8006764 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006714:	4632      	mov	r2, r6
 8006716:	4639      	mov	r1, r7
 8006718:	4620      	mov	r0, r4
 800671a:	f7ff fe8e 	bl	800643a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800671e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006720:	b11b      	cbz	r3, 800672a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006722:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006726:	f000 fef1 	bl	800750c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800672a:	b148      	cbz	r0, 8006740 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800672c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006734:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006740:	f001 fad8 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8006744:	2001      	movs	r0, #1
}
 8006746:	b004      	add	sp, #16
 8006748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0d6      	beq.n	8006700 <xQueueGenericSend+0x5e>
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	e7fe      	b.n	8006762 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	b91b      	cbnz	r3, 8006770 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8006768:	f001 fac4 	bl	8007cf4 <vPortExitCritical>
					return errQUEUE_FULL;
 800676c:	2000      	movs	r0, #0
 800676e:	e7ea      	b.n	8006746 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8006770:	b915      	cbnz	r5, 8006778 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006772:	a802      	add	r0, sp, #8
 8006774:	f000 ff0a 	bl	800758c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006778:	f001 fabc 	bl	8007cf4 <vPortExitCritical>
		vTaskSuspendAll();
 800677c:	f000 fd12 	bl	80071a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006780:	f001 fa98 	bl	8007cb4 <vPortEnterCritical>
 8006784:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006788:	2bff      	cmp	r3, #255	@ 0xff
 800678a:	bf08      	it	eq
 800678c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006790:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006794:	2bff      	cmp	r3, #255	@ 0xff
 8006796:	bf08      	it	eq
 8006798:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800679c:	f001 faaa 	bl	8007cf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067a0:	a901      	add	r1, sp, #4
 80067a2:	a802      	add	r0, sp, #8
 80067a4:	f000 fefe 	bl	80075a4 <xTaskCheckForTimeOut>
 80067a8:	bb38      	cbnz	r0, 80067fa <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067aa:	f001 fa83 	bl	8007cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80067b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d10e      	bne.n	80067d4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80067b6:	f001 fa9d 	bl	8007cf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067ba:	9901      	ldr	r1, [sp, #4]
 80067bc:	f104 0010 	add.w	r0, r4, #16
 80067c0:	f000 fe6c 	bl	800749c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff fe81 	bl	80064cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f000 fd8f 	bl	80072ec <xTaskResumeAll>
 80067ce:	b148      	cbz	r0, 80067e4 <xQueueGenericSend+0x142>
 80067d0:	2501      	movs	r5, #1
 80067d2:	e797      	b.n	8006704 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80067d4:	f001 fa8e 	bl	8007cf4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff fe77 	bl	80064cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067de:	f000 fd85 	bl	80072ec <xTaskResumeAll>
 80067e2:	e7f5      	b.n	80067d0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80067e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e7ea      	b.n	80067d0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fe66 	bl	80064cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006800:	f000 fd74 	bl	80072ec <xTaskResumeAll>
			return errQUEUE_FULL;
 8006804:	e7b2      	b.n	800676c <xQueueGenericSend+0xca>

08006806 <xQueueCreateMutexStatic>:
	{
 8006806:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006808:	2200      	movs	r2, #0
	{
 800680a:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800680c:	9000      	str	r0, [sp, #0]
 800680e:	4611      	mov	r1, r2
 8006810:	2001      	movs	r0, #1
 8006812:	f7ff fed2 	bl	80065ba <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8006816:	4604      	mov	r4, r0
 8006818:	b138      	cbz	r0, 800682a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 800681a:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800681c:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006820:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006822:	461a      	mov	r2, r3
 8006824:	4619      	mov	r1, r3
 8006826:	f7ff ff3c 	bl	80066a2 <xQueueGenericSend>
	}
 800682a:	4620      	mov	r0, r4
 800682c:	b002      	add	sp, #8
 800682e:	bd10      	pop	{r4, pc}

08006830 <xQueueGiveMutexRecursive>:
	{
 8006830:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006832:	4604      	mov	r4, r0
 8006834:	b940      	cbnz	r0, 8006848 <xQueueGiveMutexRecursive+0x18>
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	e7fe      	b.n	8006846 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006848:	6845      	ldr	r5, [r0, #4]
 800684a:	f000 fefd 	bl	8007648 <xTaskGetCurrentTaskHandle>
 800684e:	4285      	cmp	r5, r0
 8006850:	d10b      	bne.n	800686a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.uxRecursiveCallCount )--;
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	3b01      	subs	r3, #1
 8006856:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006858:	b10b      	cbz	r3, 800685e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800685a:	2001      	movs	r0, #1
	}
 800685c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800685e:	461a      	mov	r2, r3
 8006860:	4619      	mov	r1, r3
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff ff1d 	bl	80066a2 <xQueueGenericSend>
 8006868:	e7f7      	b.n	800685a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800686a:	2000      	movs	r0, #0
		return xReturn;
 800686c:	e7f6      	b.n	800685c <xQueueGiveMutexRecursive+0x2c>

0800686e <xQueueCreateMutex>:
	{
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006872:	2050      	movs	r0, #80	@ 0x50
 8006874:	f001 fb84 	bl	8007f80 <pvPortMalloc>
 8006878:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800687a:	b198      	cbz	r0, 80068a4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800687c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800687e:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006880:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006884:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006888:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800688a:	f7ff fe57 	bl	800653c <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800688e:	e9c4 5500 	strd	r5, r5, [r4]
		pxNewQueue->ucQueueType = ucQueueType;
 8006892:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006896:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006898:	462b      	mov	r3, r5
 800689a:	462a      	mov	r2, r5
 800689c:	4629      	mov	r1, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff feff 	bl	80066a2 <xQueueGenericSend>
	}
 80068a4:	4620      	mov	r0, r4
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <xQueueGenericSendFromISR>:
{
 80068a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	4689      	mov	r9, r1
 80068ae:	4617      	mov	r7, r2
 80068b0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80068b2:	4604      	mov	r4, r0
 80068b4:	b940      	cbnz	r0, 80068c8 <xQueueGenericSendFromISR+0x20>
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	e7fe      	b.n	80068c6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c8:	b951      	cbnz	r1, 80068e0 <xQueueGenericSendFromISR+0x38>
 80068ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80068cc:	b143      	cbz	r3, 80068e0 <xQueueGenericSendFromISR+0x38>
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	e7fe      	b.n	80068de <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e0:	2e02      	cmp	r6, #2
 80068e2:	d10b      	bne.n	80068fc <xQueueGenericSendFromISR+0x54>
 80068e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d008      	beq.n	80068fc <xQueueGenericSendFromISR+0x54>
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	e7fe      	b.n	80068fa <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068fc:	f001 faec 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8006900:	f3ef 8811 	mrs	r8, BASEPRI
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006914:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006916:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006918:	429a      	cmp	r2, r3
 800691a:	d301      	bcc.n	8006920 <xQueueGenericSendFromISR+0x78>
 800691c:	2e02      	cmp	r6, #2
 800691e:	d11d      	bne.n	800695c <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006920:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006924:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8006926:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006928:	4649      	mov	r1, r9
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fd85 	bl	800643a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006930:	1c6b      	adds	r3, r5, #1
 8006932:	d10e      	bne.n	8006952 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006934:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006936:	b13b      	cbz	r3, 8006948 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006938:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800693c:	f000 fde6 	bl	800750c <xTaskRemoveFromEventList>
 8006940:	b110      	cbz	r0, 8006948 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8006942:	b10f      	cbz	r7, 8006948 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8006948:	2001      	movs	r0, #1
	__asm volatile
 800694a:	f388 8811 	msr	BASEPRI, r8
}
 800694e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006952:	3501      	adds	r5, #1
 8006954:	b26d      	sxtb	r5, r5
 8006956:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800695a:	e7f5      	b.n	8006948 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800695c:	2000      	movs	r0, #0
 800695e:	e7f4      	b.n	800694a <xQueueGenericSendFromISR+0xa2>

08006960 <xQueueReceive>:
{
 8006960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006964:	460e      	mov	r6, r1
 8006966:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006968:	4604      	mov	r4, r0
 800696a:	b940      	cbnz	r0, 800697e <xQueueReceive+0x1e>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	e7fe      	b.n	800697c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800697e:	b951      	cbnz	r1, 8006996 <xQueueReceive+0x36>
 8006980:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006982:	b143      	cbz	r3, 8006996 <xQueueReceive+0x36>
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	e7fe      	b.n	8006994 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006996:	f000 fe5d 	bl	8007654 <xTaskGetSchedulerState>
 800699a:	4605      	mov	r5, r0
 800699c:	b318      	cbz	r0, 80069e6 <xQueueReceive+0x86>
 800699e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80069a0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80069a4:	f001 f986 	bl	8007cb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069a8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069aa:	b347      	cbz	r7, 80069fe <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069ac:	4631      	mov	r1, r6
 80069ae:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069b0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069b2:	f7ff fd75 	bl	80064a0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069b6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	b173      	cbz	r3, 80069da <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069bc:	f104 0010 	add.w	r0, r4, #16
 80069c0:	f000 fda4 	bl	800750c <xTaskRemoveFromEventList>
 80069c4:	b148      	cbz	r0, 80069da <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80069c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80069da:	f001 f98b 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 80069de:	2001      	movs	r0, #1
}
 80069e0:	b004      	add	sp, #16
 80069e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e6:	9b01      	ldr	r3, [sp, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0d9      	beq.n	80069a0 <xQueueReceive+0x40>
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	e7fe      	b.n	80069fc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	b91b      	cbnz	r3, 8006a0a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8006a02:	f001 f977 	bl	8007cf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a06:	2000      	movs	r0, #0
 8006a08:	e7ea      	b.n	80069e0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8006a0a:	b915      	cbnz	r5, 8006a12 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0c:	a802      	add	r0, sp, #8
 8006a0e:	f000 fdbd 	bl	800758c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006a12:	f001 f96f 	bl	8007cf4 <vPortExitCritical>
		vTaskSuspendAll();
 8006a16:	f000 fbc5 	bl	80071a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1a:	f001 f94b 	bl	8007cb4 <vPortEnterCritical>
 8006a1e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006a22:	2bff      	cmp	r3, #255	@ 0xff
 8006a24:	bf08      	it	eq
 8006a26:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006a2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006a2e:	2bff      	cmp	r3, #255	@ 0xff
 8006a30:	bf08      	it	eq
 8006a32:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006a36:	f001 f95d 	bl	8007cf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a3a:	a901      	add	r1, sp, #4
 8006a3c:	a802      	add	r0, sp, #8
 8006a3e:	f000 fdb1 	bl	80075a4 <xTaskCheckForTimeOut>
 8006a42:	bb00      	cbnz	r0, 8006a86 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff fced 	bl	8006424 <prvIsQueueEmpty>
 8006a4a:	b1b0      	cbz	r0, 8006a7a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a4c:	9901      	ldr	r1, [sp, #4]
 8006a4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006a52:	f000 fd23 	bl	800749c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff fd38 	bl	80064cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a5c:	f000 fc46 	bl	80072ec <xTaskResumeAll>
 8006a60:	b948      	cbnz	r0, 8006a76 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8006a62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	2501      	movs	r5, #1
 8006a78:	e794      	b.n	80069a4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff fd26 	bl	80064cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a80:	f000 fc34 	bl	80072ec <xTaskResumeAll>
 8006a84:	e7f7      	b.n	8006a76 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff fd20 	bl	80064cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a8c:	f000 fc2e 	bl	80072ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a90:	4620      	mov	r0, r4
 8006a92:	f7ff fcc7 	bl	8006424 <prvIsQueueEmpty>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d0ed      	beq.n	8006a76 <xQueueReceive+0x116>
 8006a9a:	e7b4      	b.n	8006a06 <xQueueReceive+0xa6>

08006a9c <xQueueSemaphoreTake>:
{
 8006a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8006aa0:	4604      	mov	r4, r0
{
 8006aa2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006aa4:	b940      	cbnz	r0, 8006ab8 <xQueueSemaphoreTake+0x1c>
 8006aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	e7fe      	b.n	8006ab6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ab8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006aba:	b145      	cbz	r5, 8006ace <xQueueSemaphoreTake+0x32>
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	e7fe      	b.n	8006acc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ace:	f000 fdc1 	bl	8007654 <xTaskGetSchedulerState>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	b320      	cbz	r0, 8006b20 <xQueueSemaphoreTake+0x84>
 8006ad6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006ad8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8006ada:	f001 f8eb 	bl	8007cb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ade:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ae0:	b353      	cbz	r3, 8006b38 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	b913      	cbnz	r3, 8006af0 <xQueueSemaphoreTake+0x54>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006aea:	f000 fe93 	bl	8007814 <pvTaskIncrementMutexHeldCount>
 8006aee:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	b173      	cbz	r3, 8006b12 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af4:	f104 0010 	add.w	r0, r4, #16
 8006af8:	f000 fd08 	bl	800750c <xTaskRemoveFromEventList>
 8006afc:	b148      	cbz	r0, 8006b12 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8006afe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006b12:	f001 f8ef 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8006b16:	2001      	movs	r0, #1
}
 8006b18:	b005      	add	sp, #20
 8006b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b1c:	4635      	mov	r5, r6
 8006b1e:	e7db      	b.n	8006ad8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0fa      	beq.n	8006b1c <xQueueSemaphoreTake+0x80>
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	e7fe      	b.n	8006b36 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	b953      	cbnz	r3, 8006b52 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	d066      	beq.n	8006c0e <xQueueSemaphoreTake+0x172>
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	e7fe      	b.n	8006b50 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8006b52:	b916      	cbnz	r6, 8006b5a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b54:	a802      	add	r0, sp, #8
 8006b56:	f000 fd19 	bl	800758c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006b5a:	f001 f8cb 	bl	8007cf4 <vPortExitCritical>
		vTaskSuspendAll();
 8006b5e:	f000 fb21 	bl	80071a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b62:	f001 f8a7 	bl	8007cb4 <vPortEnterCritical>
 8006b66:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006b6a:	2bff      	cmp	r3, #255	@ 0xff
 8006b6c:	bf08      	it	eq
 8006b6e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8006b72:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006b76:	2bff      	cmp	r3, #255	@ 0xff
 8006b78:	bf08      	it	eq
 8006b7a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8006b7e:	f001 f8b9 	bl	8007cf4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b82:	a901      	add	r1, sp, #4
 8006b84:	a802      	add	r0, sp, #8
 8006b86:	f000 fd0d 	bl	80075a4 <xTaskCheckForTimeOut>
 8006b8a:	bb50      	cbnz	r0, 8006be2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fc49 	bl	8006424 <prvIsQueueEmpty>
 8006b92:	b300      	cbz	r0, 8006bd6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	b93b      	cbnz	r3, 8006ba8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8006b98:	f001 f88c 	bl	8007cb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006b9c:	6860      	ldr	r0, [r4, #4]
 8006b9e:	f000 fd69 	bl	8007674 <xTaskPriorityInherit>
 8006ba2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006ba4:	f001 f8a6 	bl	8007cf4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ba8:	9901      	ldr	r1, [sp, #4]
 8006baa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006bae:	f000 fc75 	bl	800749c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff fc8a 	bl	80064cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bb8:	f000 fb98 	bl	80072ec <xTaskResumeAll>
 8006bbc:	b948      	cbnz	r0, 8006bd2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8006bbe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	2601      	movs	r6, #1
 8006bd4:	e781      	b.n	8006ada <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7ff fc78 	bl	80064cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bdc:	f000 fb86 	bl	80072ec <xTaskResumeAll>
 8006be0:	e7f7      	b.n	8006bd2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff fc72 	bl	80064cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006be8:	f000 fb80 	bl	80072ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bec:	4620      	mov	r0, r4
 8006bee:	f7ff fc19 	bl	8006424 <prvIsQueueEmpty>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d0ed      	beq.n	8006bd2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8006bf6:	b165      	cbz	r5, 8006c12 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8006bf8:	f001 f85c 	bl	8007cb4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006bfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006bfe:	b119      	cbz	r1, 8006c08 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006c08:	6860      	ldr	r0, [r4, #4]
 8006c0a:	f000 fdb5 	bl	8007778 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006c0e:	f001 f871 	bl	8007cf4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006c12:	2000      	movs	r0, #0
 8006c14:	e780      	b.n	8006b18 <xQueueSemaphoreTake+0x7c>

08006c16 <xQueueTakeMutexRecursive>:
	{
 8006c16:	b570      	push	{r4, r5, r6, lr}
 8006c18:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	b940      	cbnz	r0, 8006c30 <xQueueTakeMutexRecursive+0x1a>
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	e7fe      	b.n	8006c2e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c30:	6846      	ldr	r6, [r0, #4]
 8006c32:	f000 fd09 	bl	8007648 <xTaskGetCurrentTaskHandle>
 8006c36:	4286      	cmp	r6, r0
 8006c38:	d104      	bne.n	8006c44 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006c3a:	68e3      	ldr	r3, [r4, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8006c40:	2001      	movs	r0, #1
	}
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006c44:	4629      	mov	r1, r5
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff ff28 	bl	8006a9c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d0f8      	beq.n	8006c42 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006c50:	68e3      	ldr	r3, [r4, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60e3      	str	r3, [r4, #12]
 8006c56:	e7f4      	b.n	8006c42 <xQueueTakeMutexRecursive+0x2c>

08006c58 <xQueueReceiveFromISR>:
{
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006c60:	4604      	mov	r4, r0
 8006c62:	b940      	cbnz	r0, 8006c76 <xQueueReceiveFromISR+0x1e>
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	e7fe      	b.n	8006c74 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c76:	b951      	cbnz	r1, 8006c8e <xQueueReceiveFromISR+0x36>
 8006c78:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006c7a:	b143      	cbz	r3, 8006c8e <xQueueReceiveFromISR+0x36>
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	e7fe      	b.n	8006c8c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c8e:	f001 f923 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c92:	f3ef 8711 	mrs	r7, BASEPRI
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca8:	b30d      	cbz	r5, 8006cee <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006caa:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cae:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cb0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7ff fbf4 	bl	80064a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cb8:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8006cba:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cbc:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8006cbe:	d111      	bne.n	8006ce4 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	b153      	cbz	r3, 8006cda <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc4:	f104 0010 	add.w	r0, r4, #16
 8006cc8:	f000 fc20 	bl	800750c <xTaskRemoveFromEventList>
 8006ccc:	b128      	cbz	r0, 8006cda <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8006cce:	f1b8 0f00 	cmp.w	r8, #0
 8006cd2:	d002      	beq.n	8006cda <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8006cda:	2001      	movs	r0, #1
	__asm volatile
 8006cdc:	f387 8811 	msr	BASEPRI, r7
}
 8006ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	b276      	sxtb	r6, r6
 8006ce8:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8006cec:	e7f5      	b.n	8006cda <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8006cee:	4628      	mov	r0, r5
 8006cf0:	e7f4      	b.n	8006cdc <xQueueReceiveFromISR+0x84>
	...

08006cf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cf4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006cf6:	4a07      	ldr	r2, [pc, #28]	@ (8006d14 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cf8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006cfa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8006cfe:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8006d02:	b91d      	cbnz	r5, 8006d0c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d08:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d0a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d1f3      	bne.n	8006cfa <vQueueAddToRegistry+0x6>
 8006d12:	e7fa      	b.n	8006d0a <vQueueAddToRegistry+0x16>
 8006d14:	200047a0 	.word	0x200047a0

08006d18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d20:	f000 ffc8 	bl	8007cb4 <vPortEnterCritical>
 8006d24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006d28:	2bff      	cmp	r3, #255	@ 0xff
 8006d2a:	bf04      	itt	eq
 8006d2c:	2300      	moveq	r3, #0
 8006d2e:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8006d32:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006d36:	2bff      	cmp	r3, #255	@ 0xff
 8006d38:	bf04      	itt	eq
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8006d40:	f000 ffd8 	bl	8007cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d46:	b92b      	cbnz	r3, 8006d54 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006d50:	f000 fbbe 	bl	80074d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d54:	4620      	mov	r0, r4
	}
 8006d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006d5a:	f7ff bbb7 	b.w	80064cc <prvUnlockQueue>
	...

08006d60 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d66:	f000 ffa5 	bl	8007cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d6a:	4b30      	ldr	r3, [pc, #192]	@ (8006e2c <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8006d6c:	4e30      	ldr	r6, [pc, #192]	@ (8006e30 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4f30      	ldr	r7, [pc, #192]	@ (8006e34 <prvAddNewTaskToReadyList+0xd4>)
 8006d72:	3201      	adds	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006d76:	6835      	ldr	r5, [r6, #0]
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	d14b      	bne.n	8006e14 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d7c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d11f      	bne.n	8006dc4 <prvAddNewTaskToReadyList+0x64>
 8006d84:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d86:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d88:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d8a:	f7ff fb0b 	bl	80063a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d8e:	2d38      	cmp	r5, #56	@ 0x38
 8006d90:	f108 0814 	add.w	r8, r8, #20
 8006d94:	d1f7      	bne.n	8006d86 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d96:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8006e5c <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8006d9a:	4d27      	ldr	r5, [pc, #156]	@ (8006e38 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	f7ff fb01 	bl	80063a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7ff fafe 	bl	80063a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006da8:	4824      	ldr	r0, [pc, #144]	@ (8006e3c <prvAddNewTaskToReadyList+0xdc>)
 8006daa:	f7ff fafb 	bl	80063a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dae:	4824      	ldr	r0, [pc, #144]	@ (8006e40 <prvAddNewTaskToReadyList+0xe0>)
 8006db0:	f7ff faf8 	bl	80063a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006db4:	4823      	ldr	r0, [pc, #140]	@ (8006e44 <prvAddNewTaskToReadyList+0xe4>)
 8006db6:	f7ff faf5 	bl	80063a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dba:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <prvAddNewTaskToReadyList+0xe8>)
 8006dbc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dc0:	4b22      	ldr	r3, [pc, #136]	@ (8006e4c <prvAddNewTaskToReadyList+0xec>)
 8006dc2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8006dc4:	4a22      	ldr	r2, [pc, #136]	@ (8006e50 <prvAddNewTaskToReadyList+0xf0>)
 8006dc6:	6813      	ldr	r3, [r2, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006dcc:	4a21      	ldr	r2, [pc, #132]	@ (8006e54 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dce:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006dd0:	6811      	ldr	r1, [r2, #0]
 8006dd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006dd4:	2014      	movs	r0, #20
 8006dd6:	428b      	cmp	r3, r1
 8006dd8:	fb00 7003 	mla	r0, r0, r3, r7
 8006ddc:	f104 0104 	add.w	r1, r4, #4
 8006de0:	bf88      	it	hi
 8006de2:	6013      	strhi	r3, [r2, #0]
 8006de4:	f7ff faec 	bl	80063c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006de8:	f000 ff84 	bl	8007cf4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006dec:	4b1a      	ldr	r3, [pc, #104]	@ (8006e58 <prvAddNewTaskToReadyList+0xf8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	b173      	cbz	r3, 8006e10 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006df2:	6833      	ldr	r3, [r6, #0]
 8006df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d209      	bcs.n	8006e10 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8006dfc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	f3bf 8f6f 	isb	sy
}
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8006e14:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <prvAddNewTaskToReadyList+0xf8>)
 8006e16:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e18:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006e1a:	2a00      	cmp	r2, #0
 8006e1c:	d1d2      	bne.n	8006dc4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e1e:	6832      	ldr	r2, [r6, #0]
 8006e20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e22:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006e24:	bf98      	it	ls
 8006e26:	6034      	strls	r4, [r6, #0]
 8006e28:	e7cc      	b.n	8006dc4 <prvAddNewTaskToReadyList+0x64>
 8006e2a:	bf00      	nop
 8006e2c:	200048c4 	.word	0x200048c4
 8006e30:	20004d98 	.word	0x20004d98
 8006e34:	20004938 	.word	0x20004938
 8006e38:	20004910 	.word	0x20004910
 8006e3c:	200048f4 	.word	0x200048f4
 8006e40:	200048e0 	.word	0x200048e0
 8006e44:	200048c8 	.word	0x200048c8
 8006e48:	2000490c 	.word	0x2000490c
 8006e4c:	20004908 	.word	0x20004908
 8006e50:	200048a8 	.word	0x200048a8
 8006e54:	200048bc 	.word	0x200048bc
 8006e58:	200048b8 	.word	0x200048b8
 8006e5c:	20004924 	.word	0x20004924

08006e60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e62:	4b15      	ldr	r3, [pc, #84]	@ (8006eb8 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e64:	4d15      	ldr	r5, [pc, #84]	@ (8006ebc <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8006e66:	681c      	ldr	r4, [r3, #0]
{
 8006e68:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e6a:	6828      	ldr	r0, [r5, #0]
 8006e6c:	3004      	adds	r0, #4
{
 8006e6e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e70:	f7ff fac8 	bl	8006404 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e74:	1c73      	adds	r3, r6, #1
 8006e76:	d107      	bne.n	8006e88 <prvAddCurrentTaskToDelayedList+0x28>
 8006e78:	b137      	cbz	r7, 8006e88 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e7a:	6829      	ldr	r1, [r5, #0]
 8006e7c:	4810      	ldr	r0, [pc, #64]	@ (8006ec0 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e82:	3104      	adds	r1, #4
 8006e84:	f7ff ba9c 	b.w	80063c0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	19a4      	adds	r4, r4, r6
 8006e8c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e8e:	d307      	bcc.n	8006ea0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <prvAddCurrentTaskToDelayedList+0x64>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	6829      	ldr	r1, [r5, #0]
}
 8006e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e9a:	3104      	adds	r1, #4
 8006e9c:	f7ff ba9b 	b.w	80063d6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea0:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	6829      	ldr	r1, [r5, #0]
 8006ea6:	3104      	adds	r1, #4
 8006ea8:	f7ff fa95 	bl	80063d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eac:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <prvAddCurrentTaskToDelayedList+0x6c>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006eb2:	bf88      	it	hi
 8006eb4:	601c      	strhi	r4, [r3, #0]
}
 8006eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eb8:	200048c0 	.word	0x200048c0
 8006ebc:	20004d98 	.word	0x20004d98
 8006ec0:	200048c8 	.word	0x200048c8
 8006ec4:	20004908 	.word	0x20004908
 8006ec8:	2000490c 	.word	0x2000490c
 8006ecc:	200048a4 	.word	0x200048a4

08006ed0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed0:	4a06      	ldr	r2, [pc, #24]	@ (8006eec <prvResetNextTaskUnblockTime+0x1c>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	6819      	ldr	r1, [r3, #0]
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <prvResetNextTaskUnblockTime+0x20>)
 8006ed8:	b919      	cbnz	r1, 8006ee2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee6:	68d2      	ldr	r2, [r2, #12]
 8006ee8:	6852      	ldr	r2, [r2, #4]
 8006eea:	e7f8      	b.n	8006ede <prvResetNextTaskUnblockTime+0xe>
 8006eec:	2000490c 	.word	0x2000490c
 8006ef0:	200048a4 	.word	0x200048a4

08006ef4 <prvDeleteTCB>:
	{
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ef8:	3054      	adds	r0, #84	@ 0x54
 8006efa:	f003 ff43 	bl	800ad84 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006efe:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8006f02:	b93b      	cbnz	r3, 8006f14 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8006f04:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006f06:	f001 f8cd 	bl	80080a4 <vPortFree>
				vPortFree( pxTCB );
 8006f0a:	4620      	mov	r0, r4
	}
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006f10:	f001 b8c8 	b.w	80080a4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d0f8      	beq.n	8006f0a <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d008      	beq.n	8006f2e <prvDeleteTCB+0x3a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	e7fe      	b.n	8006f2c <prvDeleteTCB+0x38>
	}
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <prvIdleTask>:
{
 8006f30:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f32:	4c13      	ldr	r4, [pc, #76]	@ (8006f80 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f34:	4f13      	ldr	r7, [pc, #76]	@ (8006f84 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006f36:	4d14      	ldr	r5, [pc, #80]	@ (8006f88 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	b973      	cbnz	r3, 8006f5a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <prvIdleTask+0x5c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d9f8      	bls.n	8006f36 <prvIdleTask+0x6>
				taskYIELD();
 8006f44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	e7ed      	b.n	8006f36 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8006f5a:	f000 feab 	bl	8007cb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f62:	1d30      	adds	r0, r6, #4
 8006f64:	f7ff fa4e 	bl	8006404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006f74:	f000 febe 	bl	8007cf4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7ff ffbb 	bl	8006ef4 <prvDeleteTCB>
 8006f7e:	e7db      	b.n	8006f38 <prvIdleTask+0x8>
 8006f80:	200048dc 	.word	0x200048dc
 8006f84:	200048e0 	.word	0x200048e0
 8006f88:	200048c4 	.word	0x200048c4
 8006f8c:	20004938 	.word	0x20004938

08006f90 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f98:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006f9a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f9c:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006f9e:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fa0:	21a5      	movs	r1, #165	@ 0xa5
 8006fa2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006fa4:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006fa6:	f003 f911 	bl	800a1cc <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006faa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006fac:	3e04      	subs	r6, #4
 8006fae:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006fb0:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fb4:	1e6b      	subs	r3, r5, #1
 8006fb6:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8006fba:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fbc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006fc0:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8006fc4:	b109      	cbz	r1, 8006fca <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	d1f8      	bne.n	8006fbc <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fca:	9d08      	ldr	r5, [sp, #32]
 8006fcc:	2d37      	cmp	r5, #55	@ 0x37
 8006fce:	bf28      	it	cs
 8006fd0:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fd2:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8006fd6:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8006fda:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fdc:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fde:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fe2:	f7ff f9ea 	bl	80063ba <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fea:	f104 0018 	add.w	r0, r4, #24
 8006fee:	f7ff f9e4 	bl	80063ba <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006ff2:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ff6:	224c      	movs	r2, #76	@ 0x4c
 8006ff8:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ffa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ffc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ffe:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007000:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007004:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8007008:	f003 f8e0 	bl	800a1cc <memset>
 800700c:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <prvInitialiseNewTask.constprop.0+0xa4>)
 800700e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007010:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007014:	33d0      	adds	r3, #208	@ 0xd0
 8007016:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8007018:	6623      	str	r3, [r4, #96]	@ 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800701a:	4642      	mov	r2, r8
 800701c:	4639      	mov	r1, r7
 800701e:	4630      	mov	r0, r6
 8007020:	f000 fe1e 	bl	8007c60 <pxPortInitialiseStack>
 8007024:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	d001      	beq.n	8007030 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800702c:	f8c9 4000 	str.w	r4, [r9]
}
 8007030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007034:	20009478 	.word	0x20009478

08007038 <xTaskCreateStatic>:
	{
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007040:	b945      	cbnz	r5, 8007054 <xTaskCreateStatic+0x1c>
 8007042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	e7fe      	b.n	8007052 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8007054:	b944      	cbnz	r4, 8007068 <xTaskCreateStatic+0x30>
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	e7fe      	b.n	8007066 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007068:	26a8      	movs	r6, #168	@ 0xa8
 800706a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800706c:	9e05      	ldr	r6, [sp, #20]
 800706e:	2ea8      	cmp	r6, #168	@ 0xa8
 8007070:	d008      	beq.n	8007084 <xTaskCreateStatic+0x4c>
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	e7fe      	b.n	8007082 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007084:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007086:	2502      	movs	r5, #2
 8007088:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800708c:	ad04      	add	r5, sp, #16
 800708e:	9501      	str	r5, [sp, #4]
 8007090:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007092:	9402      	str	r4, [sp, #8]
 8007094:	9500      	str	r5, [sp, #0]
 8007096:	f7ff ff7b 	bl	8006f90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff fe60 	bl	8006d60 <prvAddNewTaskToReadyList>
	}
 80070a0:	9804      	ldr	r0, [sp, #16]
 80070a2:	b006      	add	sp, #24
 80070a4:	bd70      	pop	{r4, r5, r6, pc}

080070a6 <xTaskCreate>:
	{
 80070a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070aa:	4607      	mov	r7, r0
 80070ac:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	0090      	lsls	r0, r2, #2
	{
 80070b0:	4688      	mov	r8, r1
 80070b2:	4616      	mov	r6, r2
 80070b4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070b6:	f000 ff63 	bl	8007f80 <pvPortMalloc>
			if( pxStack != NULL )
 80070ba:	4605      	mov	r5, r0
 80070bc:	b920      	cbnz	r0, 80070c8 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070be:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80070c2:	b005      	add	sp, #20
 80070c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070c8:	20a8      	movs	r0, #168	@ 0xa8
 80070ca:	f000 ff59 	bl	8007f80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80070ce:	4604      	mov	r4, r0
 80070d0:	b198      	cbz	r0, 80070fa <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80070da:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4632      	mov	r2, r6
 80070e6:	464b      	mov	r3, r9
 80070e8:	4641      	mov	r1, r8
 80070ea:	4638      	mov	r0, r7
 80070ec:	f7ff ff50 	bl	8006f90 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070f0:	4620      	mov	r0, r4
 80070f2:	f7ff fe35 	bl	8006d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7e3      	b.n	80070c2 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 ffd2 	bl	80080a4 <vPortFree>
		if( pxNewTCB != NULL )
 8007100:	e7dd      	b.n	80070be <xTaskCreate+0x18>
	...

08007104 <vTaskStartScheduler>:
{
 8007104:	b510      	push	{r4, lr}
 8007106:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007108:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800710a:	aa07      	add	r2, sp, #28
 800710c:	a906      	add	r1, sp, #24
 800710e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007110:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007114:	f7ff f92e 	bl	8006374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007118:	9b05      	ldr	r3, [sp, #20]
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	9b06      	ldr	r3, [sp, #24]
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	4919      	ldr	r1, [pc, #100]	@ (8007188 <vTaskStartScheduler+0x84>)
 8007122:	481a      	ldr	r0, [pc, #104]	@ (800718c <vTaskStartScheduler+0x88>)
 8007124:	e9cd 4300 	strd	r4, r3, [sp]
 8007128:	4623      	mov	r3, r4
 800712a:	f7ff ff85 	bl	8007038 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800712e:	b340      	cbz	r0, 8007182 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8007130:	f000 fbce 	bl	80078d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007134:	2801      	cmp	r0, #1
 8007136:	d119      	bne.n	800716c <vTaskStartScheduler+0x68>
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007148:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <vTaskStartScheduler+0x8c>)
 800714a:	4a12      	ldr	r2, [pc, #72]	@ (8007194 <vTaskStartScheduler+0x90>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3354      	adds	r3, #84	@ 0x54
 8007150:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007152:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <vTaskStartScheduler+0x94>)
 8007154:	f04f 32ff 	mov.w	r2, #4294967295
 8007158:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800715a:	4b10      	ldr	r3, [pc, #64]	@ (800719c <vTaskStartScheduler+0x98>)
 800715c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800715e:	4b10      	ldr	r3, [pc, #64]	@ (80071a0 <vTaskStartScheduler+0x9c>)
 8007160:	601c      	str	r4, [r3, #0]
}
 8007162:	b008      	add	sp, #32
 8007164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007168:	f000 be34 	b.w	8007dd4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800716c:	3001      	adds	r0, #1
 800716e:	d108      	bne.n	8007182 <vTaskStartScheduler+0x7e>
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	e7fe      	b.n	8007180 <vTaskStartScheduler+0x7c>
}
 8007182:	b008      	add	sp, #32
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	0800efc4 	.word	0x0800efc4
 800718c:	08006f31 	.word	0x08006f31
 8007190:	20004d98 	.word	0x20004d98
 8007194:	200001a0 	.word	0x200001a0
 8007198:	200048a4 	.word	0x200048a4
 800719c:	200048b8 	.word	0x200048b8
 80071a0:	200048c0 	.word	0x200048c0

080071a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80071a4:	4a02      	ldr	r2, [pc, #8]	@ (80071b0 <vTaskSuspendAll+0xc>)
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	6013      	str	r3, [r2, #0]
}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	200048a0 	.word	0x200048a0

080071b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80071b4:	4b01      	ldr	r3, [pc, #4]	@ (80071bc <xTaskGetTickCount+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	200048c0 	.word	0x200048c0

080071c0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c0:	4b3f      	ldr	r3, [pc, #252]	@ (80072c0 <xTaskIncrementTick+0x100>)
 80071c2:	681b      	ldr	r3, [r3, #0]
{
 80071c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d171      	bne.n	80072b0 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071cc:	4b3d      	ldr	r3, [pc, #244]	@ (80072c4 <xTaskIncrementTick+0x104>)
 80071ce:	681c      	ldr	r4, [r3, #0]
 80071d0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80071d2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071d4:	b9bc      	cbnz	r4, 8007206 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80071d6:	4b3c      	ldr	r3, [pc, #240]	@ (80072c8 <xTaskIncrementTick+0x108>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	b142      	cbz	r2, 80071f0 <xTaskIncrementTick+0x30>
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	e7fe      	b.n	80071ee <xTaskIncrementTick+0x2e>
 80071f0:	4a36      	ldr	r2, [pc, #216]	@ (80072cc <xTaskIncrementTick+0x10c>)
 80071f2:	6819      	ldr	r1, [r3, #0]
 80071f4:	6810      	ldr	r0, [r2, #0]
 80071f6:	6018      	str	r0, [r3, #0]
 80071f8:	6011      	str	r1, [r2, #0]
 80071fa:	4a35      	ldr	r2, [pc, #212]	@ (80072d0 <xTaskIncrementTick+0x110>)
 80071fc:	6813      	ldr	r3, [r2, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	f7ff fe65 	bl	8006ed0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007206:	4d33      	ldr	r5, [pc, #204]	@ (80072d4 <xTaskIncrementTick+0x114>)
 8007208:	4e33      	ldr	r6, [pc, #204]	@ (80072d8 <xTaskIncrementTick+0x118>)
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	4f33      	ldr	r7, [pc, #204]	@ (80072dc <xTaskIncrementTick+0x11c>)
 800720e:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8007210:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007214:	d911      	bls.n	800723a <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800721a:	2114      	movs	r1, #20
 800721c:	434a      	muls	r2, r1
 800721e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8007220:	2a02      	cmp	r2, #2
 8007222:	bf28      	it	cs
 8007224:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8007228:	4a2d      	ldr	r2, [pc, #180]	@ (80072e0 <xTaskIncrementTick+0x120>)
 800722a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800722c:	2a00      	cmp	r2, #0
}
 800722e:	bf0c      	ite	eq
 8007230:	4658      	moveq	r0, fp
 8007232:	2001      	movne	r0, #1
 8007234:	b003      	add	sp, #12
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800723a:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80072c8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800723e:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 80072e8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007242:	f8d9 2000 	ldr.w	r2, [r9]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	b91a      	cbnz	r2, 8007252 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724a:	f04f 32ff 	mov.w	r2, #4294967295
 800724e:	602a      	str	r2, [r5, #0]
					break;
 8007250:	e7e1      	b.n	8007216 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007252:	f8d9 2000 	ldr.w	r2, [r9]
 8007256:	68d2      	ldr	r2, [r2, #12]
 8007258:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800725c:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8007260:	428c      	cmp	r4, r1
 8007262:	d201      	bcs.n	8007268 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8007264:	6029      	str	r1, [r5, #0]
						break;
 8007266:	e7d6      	b.n	8007216 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007268:	f108 0304 	add.w	r3, r8, #4
 800726c:	4618      	mov	r0, r3
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	f7ff f8c8 	bl	8006404 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007274:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8007278:	b119      	cbz	r1, 8007282 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800727a:	f108 0018 	add.w	r0, r8, #24
 800727e:	f7ff f8c1 	bl	8006404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007282:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8007286:	f8da 1000 	ldr.w	r1, [sl]
 800728a:	2314      	movs	r3, #20
 800728c:	4288      	cmp	r0, r1
 800728e:	bf88      	it	hi
 8007290:	f8ca 0000 	strhi.w	r0, [sl]
 8007294:	9901      	ldr	r1, [sp, #4]
 8007296:	fb03 6000 	mla	r0, r3, r0, r6
 800729a:	f7ff f891 	bl	80063c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800729e:	6838      	ldr	r0, [r7, #0]
 80072a0:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80072a4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80072a6:	4291      	cmp	r1, r2
 80072a8:	bf28      	it	cs
 80072aa:	f04f 0b01 	movcs.w	fp, #1
 80072ae:	e7c8      	b.n	8007242 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 80072b0:	4a0c      	ldr	r2, [pc, #48]	@ (80072e4 <xTaskIncrementTick+0x124>)
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80072b8:	f04f 0b00 	mov.w	fp, #0
 80072bc:	e7b4      	b.n	8007228 <xTaskIncrementTick+0x68>
 80072be:	bf00      	nop
 80072c0:	200048a0 	.word	0x200048a0
 80072c4:	200048c0 	.word	0x200048c0
 80072c8:	2000490c 	.word	0x2000490c
 80072cc:	20004908 	.word	0x20004908
 80072d0:	200048ac 	.word	0x200048ac
 80072d4:	200048a4 	.word	0x200048a4
 80072d8:	20004938 	.word	0x20004938
 80072dc:	20004d98 	.word	0x20004d98
 80072e0:	200048b0 	.word	0x200048b0
 80072e4:	200048b4 	.word	0x200048b4
 80072e8:	200048bc 	.word	0x200048bc

080072ec <xTaskResumeAll>:
{
 80072ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80072f0:	4c30      	ldr	r4, [pc, #192]	@ (80073b4 <xTaskResumeAll+0xc8>)
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	b943      	cbnz	r3, 8007308 <xTaskResumeAll+0x1c>
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	e7fe      	b.n	8007306 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8007308:	f000 fcd4 	bl	8007cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	3b01      	subs	r3, #1
 8007310:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007312:	6824      	ldr	r4, [r4, #0]
 8007314:	b12c      	cbz	r4, 8007322 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007316:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007318:	f000 fcec 	bl	8007cf4 <vPortExitCritical>
}
 800731c:	4620      	mov	r0, r4
 800731e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007322:	4b25      	ldr	r3, [pc, #148]	@ (80073b8 <xTaskResumeAll+0xcc>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f5      	beq.n	8007316 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800732a:	4d24      	ldr	r5, [pc, #144]	@ (80073bc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800732c:	4e24      	ldr	r6, [pc, #144]	@ (80073c0 <xTaskResumeAll+0xd4>)
 800732e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80073d0 <xTaskResumeAll+0xe4>
 8007332:	e01d      	b.n	8007370 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007334:	68eb      	ldr	r3, [r5, #12]
 8007336:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007338:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800733a:	f104 0018 	add.w	r0, r4, #24
 800733e:	f7ff f861 	bl	8006404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007342:	4638      	mov	r0, r7
 8007344:	f7ff f85e 	bl	8006404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007348:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800734a:	6832      	ldr	r2, [r6, #0]
 800734c:	2014      	movs	r0, #20
 800734e:	4293      	cmp	r3, r2
 8007350:	fb00 8003 	mla	r0, r0, r3, r8
 8007354:	4639      	mov	r1, r7
 8007356:	bf88      	it	hi
 8007358:	6033      	strhi	r3, [r6, #0]
 800735a:	f7ff f831 	bl	80063c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800735e:	4b19      	ldr	r3, [pc, #100]	@ (80073c4 <xTaskResumeAll+0xd8>)
 8007360:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800736a:	4b17      	ldr	r3, [pc, #92]	@ (80073c8 <xTaskResumeAll+0xdc>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1de      	bne.n	8007334 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007376:	b10c      	cbz	r4, 800737c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8007378:	f7ff fdaa 	bl	8006ed0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800737c:	4d13      	ldr	r5, [pc, #76]	@ (80073cc <xTaskResumeAll+0xe0>)
 800737e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007380:	b144      	cbz	r4, 8007394 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007382:	4e11      	ldr	r6, [pc, #68]	@ (80073c8 <xTaskResumeAll+0xdc>)
 8007384:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007386:	f7ff ff1b 	bl	80071c0 <xTaskIncrementTick>
 800738a:	b100      	cbz	r0, 800738e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800738c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800738e:	3c01      	subs	r4, #1
 8007390:	d1f9      	bne.n	8007386 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8007392:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007394:	4b0c      	ldr	r3, [pc, #48]	@ (80073c8 <xTaskResumeAll+0xdc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0bc      	beq.n	8007316 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800739c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80073b0:	2401      	movs	r4, #1
 80073b2:	e7b1      	b.n	8007318 <xTaskResumeAll+0x2c>
 80073b4:	200048a0 	.word	0x200048a0
 80073b8:	200048c4 	.word	0x200048c4
 80073bc:	200048f4 	.word	0x200048f4
 80073c0:	200048bc 	.word	0x200048bc
 80073c4:	20004d98 	.word	0x20004d98
 80073c8:	200048b0 	.word	0x200048b0
 80073cc:	200048b4 	.word	0x200048b4
 80073d0:	20004938 	.word	0x20004938

080073d4 <vTaskDelay>:
	{
 80073d4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073d6:	b950      	cbnz	r0, 80073ee <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80073d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
	}
 80073ec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80073ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <vTaskDelay+0x44>)
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	b141      	cbz	r1, 8007406 <vTaskDelay+0x32>
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	e7fe      	b.n	8007404 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007406:	f7ff fecd 	bl	80071a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800740a:	f7ff fd29 	bl	8006e60 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800740e:	f7ff ff6d 	bl	80072ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007412:	2800      	cmp	r0, #0
 8007414:	d0e0      	beq.n	80073d8 <vTaskDelay+0x4>
 8007416:	e7e9      	b.n	80073ec <vTaskDelay+0x18>
 8007418:	200048a0 	.word	0x200048a0

0800741c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800741c:	4b19      	ldr	r3, [pc, #100]	@ (8007484 <vTaskSwitchContext+0x68>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b19      	ldr	r3, [pc, #100]	@ (8007488 <vTaskSwitchContext+0x6c>)
{
 8007422:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007424:	b112      	cbz	r2, 800742c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800742c:	4d17      	ldr	r5, [pc, #92]	@ (800748c <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 800742e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007430:	682a      	ldr	r2, [r5, #0]
 8007432:	4917      	ldr	r1, [pc, #92]	@ (8007490 <vTaskSwitchContext+0x74>)
 8007434:	2614      	movs	r6, #20
 8007436:	fb06 f302 	mul.w	r3, r6, r2
 800743a:	18c8      	adds	r0, r1, r3
 800743c:	58cc      	ldr	r4, [r1, r3]
 800743e:	b1ac      	cbz	r4, 800746c <vTaskSwitchContext+0x50>
 8007440:	6844      	ldr	r4, [r0, #4]
 8007442:	3308      	adds	r3, #8
 8007444:	6864      	ldr	r4, [r4, #4]
 8007446:	6044      	str	r4, [r0, #4]
 8007448:	440b      	add	r3, r1
 800744a:	429c      	cmp	r4, r3
 800744c:	bf04      	itt	eq
 800744e:	6863      	ldreq	r3, [r4, #4]
 8007450:	6043      	streq	r3, [r0, #4]
 8007452:	2314      	movs	r3, #20
 8007454:	fb03 1102 	mla	r1, r3, r2, r1
 8007458:	684b      	ldr	r3, [r1, #4]
 800745a:	68d9      	ldr	r1, [r3, #12]
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <vTaskSwitchContext+0x78>)
 800745e:	6019      	str	r1, [r3, #0]
 8007460:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0c      	ldr	r2, [pc, #48]	@ (8007498 <vTaskSwitchContext+0x7c>)
 8007466:	3354      	adds	r3, #84	@ 0x54
 8007468:	6013      	str	r3, [r2, #0]
}
 800746a:	e7de      	b.n	800742a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800746c:	b942      	cbnz	r2, 8007480 <vTaskSwitchContext+0x64>
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	e7fe      	b.n	800747e <vTaskSwitchContext+0x62>
 8007480:	3a01      	subs	r2, #1
 8007482:	e7d8      	b.n	8007436 <vTaskSwitchContext+0x1a>
 8007484:	200048a0 	.word	0x200048a0
 8007488:	200048b0 	.word	0x200048b0
 800748c:	200048bc 	.word	0x200048bc
 8007490:	20004938 	.word	0x20004938
 8007494:	20004d98 	.word	0x20004d98
 8007498:	200001a0 	.word	0x200001a0

0800749c <vTaskPlaceOnEventList>:
{
 800749c:	b510      	push	{r4, lr}
 800749e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80074a0:	b940      	cbnz	r0, 80074b4 <vTaskPlaceOnEventList+0x18>
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	e7fe      	b.n	80074b2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <vTaskPlaceOnEventList+0x30>)
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	3118      	adds	r1, #24
 80074ba:	f7fe ff8c 	bl	80063d6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074be:	4620      	mov	r0, r4
 80074c0:	2101      	movs	r1, #1
}
 80074c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074c6:	f7ff bccb 	b.w	8006e60 <prvAddCurrentTaskToDelayedList>
 80074ca:	bf00      	nop
 80074cc:	20004d98 	.word	0x20004d98

080074d0 <vTaskPlaceOnEventListRestricted>:
	{
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	460d      	mov	r5, r1
 80074d4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80074d6:	b940      	cbnz	r0, 80074ea <vTaskPlaceOnEventListRestricted+0x1a>
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	e7fe      	b.n	80074e8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ea:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <vTaskPlaceOnEventListRestricted+0x38>)
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	3118      	adds	r1, #24
 80074f0:	f7fe ff66 	bl	80063c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80074f4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074f6:	4621      	mov	r1, r4
 80074f8:	bf0c      	ite	eq
 80074fa:	4628      	moveq	r0, r5
 80074fc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007504:	f7ff bcac 	b.w	8006e60 <prvAddCurrentTaskToDelayedList>
 8007508:	20004d98 	.word	0x20004d98

0800750c <xTaskRemoveFromEventList>:
{
 800750c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800750e:	68c3      	ldr	r3, [r0, #12]
 8007510:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007512:	b944      	cbnz	r4, 8007526 <xTaskRemoveFromEventList+0x1a>
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	e7fe      	b.n	8007524 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007526:	f104 0518 	add.w	r5, r4, #24
 800752a:	4628      	mov	r0, r5
 800752c:	f7fe ff6a 	bl	8006404 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007530:	4b10      	ldr	r3, [pc, #64]	@ (8007574 <xTaskRemoveFromEventList+0x68>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	b9db      	cbnz	r3, 800756e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007536:	1d25      	adds	r5, r4, #4
 8007538:	4628      	mov	r0, r5
 800753a:	f7fe ff63 	bl	8006404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800753e:	4a0e      	ldr	r2, [pc, #56]	@ (8007578 <xTaskRemoveFromEventList+0x6c>)
 8007540:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007542:	6811      	ldr	r1, [r2, #0]
 8007544:	428b      	cmp	r3, r1
 8007546:	bf88      	it	hi
 8007548:	6013      	strhi	r3, [r2, #0]
 800754a:	4a0c      	ldr	r2, [pc, #48]	@ (800757c <xTaskRemoveFromEventList+0x70>)
 800754c:	2014      	movs	r0, #20
 800754e:	4629      	mov	r1, r5
 8007550:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007554:	f7fe ff34 	bl	80063c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007558:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <xTaskRemoveFromEventList+0x74>)
 800755a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007562:	bf83      	ittte	hi
 8007564:	4b07      	ldrhi	r3, [pc, #28]	@ (8007584 <xTaskRemoveFromEventList+0x78>)
 8007566:	2001      	movhi	r0, #1
 8007568:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800756a:	2000      	movls	r0, #0
}
 800756c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800756e:	4806      	ldr	r0, [pc, #24]	@ (8007588 <xTaskRemoveFromEventList+0x7c>)
 8007570:	4629      	mov	r1, r5
 8007572:	e7ef      	b.n	8007554 <xTaskRemoveFromEventList+0x48>
 8007574:	200048a0 	.word	0x200048a0
 8007578:	200048bc 	.word	0x200048bc
 800757c:	20004938 	.word	0x20004938
 8007580:	20004d98 	.word	0x20004d98
 8007584:	200048b0 	.word	0x200048b0
 8007588:	200048f4 	.word	0x200048f4

0800758c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800758c:	4b03      	ldr	r3, [pc, #12]	@ (800759c <vTaskInternalSetTimeOutState+0x10>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007592:	4b03      	ldr	r3, [pc, #12]	@ (80075a0 <vTaskInternalSetTimeOutState+0x14>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6043      	str	r3, [r0, #4]
}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	200048ac 	.word	0x200048ac
 80075a0:	200048c0 	.word	0x200048c0

080075a4 <xTaskCheckForTimeOut>:
{
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80075a8:	4605      	mov	r5, r0
 80075aa:	b940      	cbnz	r0, 80075be <xTaskCheckForTimeOut+0x1a>
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	e7fe      	b.n	80075bc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80075be:	b941      	cbnz	r1, 80075d2 <xTaskCheckForTimeOut+0x2e>
 80075c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	e7fe      	b.n	80075d0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80075d2:	f000 fb6f 	bl	8007cb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80075d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007614 <xTaskCheckForTimeOut+0x70>)
 80075d8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	d010      	beq.n	8007602 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075e0:	480d      	ldr	r0, [pc, #52]	@ (8007618 <xTaskCheckForTimeOut+0x74>)
 80075e2:	682e      	ldr	r6, [r5, #0]
 80075e4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075e6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075e8:	4286      	cmp	r6, r0
 80075ea:	d001      	beq.n	80075f0 <xTaskCheckForTimeOut+0x4c>
 80075ec:	428a      	cmp	r2, r1
 80075ee:	d90f      	bls.n	8007610 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075f0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075f2:	4283      	cmp	r3, r0
 80075f4:	d90a      	bls.n	800760c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80075f6:	1a5b      	subs	r3, r3, r1
 80075f8:	4413      	add	r3, r2
 80075fa:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075fc:	4628      	mov	r0, r5
 80075fe:	f7ff ffc5 	bl	800758c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007602:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007604:	f000 fb76 	bl	8007cf4 <vPortExitCritical>
}
 8007608:	4620      	mov	r0, r4
 800760a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007610:	2401      	movs	r4, #1
 8007612:	e7f7      	b.n	8007604 <xTaskCheckForTimeOut+0x60>
 8007614:	200048c0 	.word	0x200048c0
 8007618:	200048ac 	.word	0x200048ac

0800761c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800761c:	4b01      	ldr	r3, [pc, #4]	@ (8007624 <vTaskMissedYield+0x8>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	4770      	bx	lr
 8007624:	200048b0 	.word	0x200048b0

08007628 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8007628:	b908      	cbnz	r0, 800762e <uxTaskGetStackHighWaterMark+0x6>
 800762a:	4b06      	ldr	r3, [pc, #24]	@ (8007644 <uxTaskGetStackHighWaterMark+0x1c>)
 800762c:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800762e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 8007630:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007632:	5c13      	ldrb	r3, [r2, r0]
 8007634:	2ba5      	cmp	r3, #165	@ 0xa5
 8007636:	d002      	beq.n	800763e <uxTaskGetStackHighWaterMark+0x16>
	}
 8007638:	f3c0 008f 	ubfx	r0, r0, #2, #16
 800763c:	4770      	bx	lr
			ulCount++;
 800763e:	3001      	adds	r0, #1
 8007640:	e7f7      	b.n	8007632 <uxTaskGetStackHighWaterMark+0xa>
 8007642:	bf00      	nop
 8007644:	20004d98 	.word	0x20004d98

08007648 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007648:	4b01      	ldr	r3, [pc, #4]	@ (8007650 <xTaskGetCurrentTaskHandle+0x8>)
 800764a:	6818      	ldr	r0, [r3, #0]
	}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20004d98 	.word	0x20004d98

08007654 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007654:	4b05      	ldr	r3, [pc, #20]	@ (800766c <xTaskGetSchedulerState+0x18>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	b133      	cbz	r3, 8007668 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765a:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <xTaskGetSchedulerState+0x1c>)
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	fab0 f080 	clz	r0, r0
 8007662:	0940      	lsrs	r0, r0, #5
 8007664:	0040      	lsls	r0, r0, #1
 8007666:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007668:	2001      	movs	r0, #1
	}
 800766a:	4770      	bx	lr
 800766c:	200048b8 	.word	0x200048b8
 8007670:	200048a0 	.word	0x200048a0

08007674 <xTaskPriorityInherit>:
	{
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007676:	4604      	mov	r4, r0
 8007678:	b350      	cbz	r0, 80076d0 <xTaskPriorityInherit+0x5c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800767a:	4d1b      	ldr	r5, [pc, #108]	@ (80076e8 <xTaskPriorityInherit+0x74>)
 800767c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800767e:	682a      	ldr	r2, [r5, #0]
 8007680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007682:	4293      	cmp	r3, r2
 8007684:	d227      	bcs.n	80076d6 <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007686:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007688:	4e18      	ldr	r6, [pc, #96]	@ (80076ec <xTaskPriorityInherit+0x78>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800768a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800768c:	bfa1      	itttt	ge
 800768e:	682a      	ldrge	r2, [r5, #0]
 8007690:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8007692:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8007696:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007698:	2214      	movs	r2, #20
 800769a:	fb02 6303 	mla	r3, r2, r3, r6
 800769e:	6942      	ldr	r2, [r0, #20]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d111      	bne.n	80076c8 <xTaskPriorityInherit+0x54>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a4:	1d07      	adds	r7, r0, #4
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7fe feac 	bl	8006404 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ac:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076ae:	4a10      	ldr	r2, [pc, #64]	@ (80076f0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076b2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076b6:	428b      	cmp	r3, r1
 80076b8:	d80b      	bhi.n	80076d2 <xTaskPriorityInherit+0x5e>
 80076ba:	2014      	movs	r0, #20
 80076bc:	4639      	mov	r1, r7
 80076be:	fb00 6003 	mla	r0, r0, r3, r6
 80076c2:	f7fe fe7d 	bl	80063c0 <vListInsertEnd>
 80076c6:	e002      	b.n	80076ce <xTaskPriorityInherit+0x5a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
				xReturn = pdTRUE;
 80076ce:	2001      	movs	r0, #1
	}
 80076d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	e7f1      	b.n	80076ba <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80076da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076dc:	4298      	cmp	r0, r3
 80076de:	bf2c      	ite	cs
 80076e0:	2000      	movcs	r0, #0
 80076e2:	2001      	movcc	r0, #1
 80076e4:	e7f4      	b.n	80076d0 <xTaskPriorityInherit+0x5c>
 80076e6:	bf00      	nop
 80076e8:	20004d98 	.word	0x20004d98
 80076ec:	20004938 	.word	0x20004938
 80076f0:	200048bc 	.word	0x200048bc

080076f4 <xTaskPriorityDisinherit>:
	{
 80076f4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80076f6:	b908      	cbnz	r0, 80076fc <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80076f8:	2000      	movs	r0, #0
	}
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80076fc:	4b1b      	ldr	r3, [pc, #108]	@ (800776c <xTaskPriorityDisinherit+0x78>)
 80076fe:	681c      	ldr	r4, [r3, #0]
 8007700:	4284      	cmp	r4, r0
 8007702:	d008      	beq.n	8007716 <xTaskPriorityDisinherit+0x22>
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	e7fe      	b.n	8007714 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007716:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007718:	b943      	cbnz	r3, 800772c <xTaskPriorityDisinherit+0x38>
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	e7fe      	b.n	800772a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800772c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800772e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007730:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007732:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007734:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007736:	d0df      	beq.n	80076f8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1dd      	bne.n	80076f8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800773c:	1d25      	adds	r5, r4, #4
 800773e:	4628      	mov	r0, r5
 8007740:	f7fe fe60 	bl	8006404 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007744:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007746:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007748:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800774c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800774e:	4a08      	ldr	r2, [pc, #32]	@ (8007770 <xTaskPriorityDisinherit+0x7c>)
 8007750:	6811      	ldr	r1, [r2, #0]
 8007752:	428b      	cmp	r3, r1
 8007754:	bf88      	it	hi
 8007756:	6013      	strhi	r3, [r2, #0]
 8007758:	4a06      	ldr	r2, [pc, #24]	@ (8007774 <xTaskPriorityDisinherit+0x80>)
 800775a:	2014      	movs	r0, #20
 800775c:	fb00 2003 	mla	r0, r0, r3, r2
 8007760:	4629      	mov	r1, r5
 8007762:	f7fe fe2d 	bl	80063c0 <vListInsertEnd>
					xReturn = pdTRUE;
 8007766:	2001      	movs	r0, #1
		return xReturn;
 8007768:	e7c7      	b.n	80076fa <xTaskPriorityDisinherit+0x6>
 800776a:	bf00      	nop
 800776c:	20004d98 	.word	0x20004d98
 8007770:	200048bc 	.word	0x200048bc
 8007774:	20004938 	.word	0x20004938

08007778 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007778:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800777a:	4604      	mov	r4, r0
 800777c:	2800      	cmp	r0, #0
 800777e:	d041      	beq.n	8007804 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8007780:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007782:	b942      	cbnz	r2, 8007796 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	e7fe      	b.n	8007794 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007796:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007798:	4299      	cmp	r1, r3
 800779a:	bf38      	it	cc
 800779c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800779e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80077a0:	428b      	cmp	r3, r1
 80077a2:	d02f      	beq.n	8007804 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077a4:	2a01      	cmp	r2, #1
 80077a6:	d12d      	bne.n	8007804 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 80077a8:	4a17      	ldr	r2, [pc, #92]	@ (8007808 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	4282      	cmp	r2, r0
 80077ae:	d108      	bne.n	80077c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80077b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	e7fe      	b.n	80077c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077c2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077c4:	4d11      	ldr	r5, [pc, #68]	@ (800780c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 80077c6:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077c8:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077ca:	f04f 0214 	mov.w	r2, #20
 80077ce:	fb02 5303 	mla	r3, r2, r3, r5
 80077d2:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d4:	bfa4      	itt	ge
 80077d6:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80077da:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077dc:	429a      	cmp	r2, r3
 80077de:	d111      	bne.n	8007804 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	1d06      	adds	r6, r0, #4
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7fe fe0e 	bl	8006404 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80077e8:	4a09      	ldr	r2, [pc, #36]	@ (8007810 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80077ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	2014      	movs	r0, #20
 80077f0:	428b      	cmp	r3, r1
 80077f2:	fb00 5003 	mla	r0, r0, r3, r5
 80077f6:	4631      	mov	r1, r6
	}
 80077f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80077fc:	bf88      	it	hi
 80077fe:	6013      	strhi	r3, [r2, #0]
 8007800:	f7fe bdde 	b.w	80063c0 <vListInsertEnd>
	}
 8007804:	bd70      	pop	{r4, r5, r6, pc}
 8007806:	bf00      	nop
 8007808:	20004d98 	.word	0x20004d98
 800780c:	20004938 	.word	0x20004938
 8007810:	200048bc 	.word	0x200048bc

08007814 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007814:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <pvTaskIncrementMutexHeldCount+0x14>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	b11a      	cbz	r2, 8007822 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800781a:	6819      	ldr	r1, [r3, #0]
 800781c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800781e:	3201      	adds	r2, #1
 8007820:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8007822:	6818      	ldr	r0, [r3, #0]
	}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20004d98 	.word	0x20004d98

0800782c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800782c:	4291      	cmp	r1, r2
{
 800782e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007830:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007832:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007834:	d80a      	bhi.n	800784c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	6983      	ldr	r3, [r0, #24]
 800783a:	429a      	cmp	r2, r3
 800783c:	d20d      	bcs.n	800785a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800783e:	4b08      	ldr	r3, [pc, #32]	@ (8007860 <prvInsertTimerInActiveList+0x34>)
 8007840:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	f7fe fdc7 	bl	80063d6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007848:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800784a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800784c:	429a      	cmp	r2, r3
 800784e:	d201      	bcs.n	8007854 <prvInsertTimerInActiveList+0x28>
 8007850:	4299      	cmp	r1, r3
 8007852:	d202      	bcs.n	800785a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007854:	4b03      	ldr	r3, [pc, #12]	@ (8007864 <prvInsertTimerInActiveList+0x38>)
 8007856:	1d01      	adds	r1, r0, #4
 8007858:	e7f3      	b.n	8007842 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800785a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800785c:	e7f5      	b.n	800784a <prvInsertTimerInActiveList+0x1e>
 800785e:	bf00      	nop
 8007860:	20004e98 	.word	0x20004e98
 8007864:	20004e9c 	.word	0x20004e9c

08007868 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800786a:	4c11      	ldr	r4, [pc, #68]	@ (80078b0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800786c:	f000 fa22 	bl	8007cb4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007870:	6825      	ldr	r5, [r4, #0]
 8007872:	b9bd      	cbnz	r5, 80078a4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007874:	4f0f      	ldr	r7, [pc, #60]	@ (80078b4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8007876:	4e10      	ldr	r6, [pc, #64]	@ (80078b8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007878:	4638      	mov	r0, r7
 800787a:	f7fe fd93 	bl	80063a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800787e:	4630      	mov	r0, r6
 8007880:	f7fe fd90 	bl	80063a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007884:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007886:	4a0e      	ldr	r2, [pc, #56]	@ (80078c0 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007888:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800788a:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800788c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 800788e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007890:	200a      	movs	r0, #10
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <prvCheckForValidListAndQueue+0x60>)
 8007894:	9500      	str	r5, [sp, #0]
 8007896:	f7fe fe90 	bl	80065ba <xQueueGenericCreateStatic>
 800789a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800789c:	b110      	cbz	r0, 80078a4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800789e:	490b      	ldr	r1, [pc, #44]	@ (80078cc <prvCheckForValidListAndQueue+0x64>)
 80078a0:	f7ff fa28 	bl	8006cf4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80078a4:	b003      	add	sp, #12
 80078a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80078aa:	f000 ba23 	b.w	8007cf4 <vPortExitCritical>
 80078ae:	bf00      	nop
 80078b0:	20004e94 	.word	0x20004e94
 80078b4:	20004eb4 	.word	0x20004eb4
 80078b8:	20004ea0 	.word	0x20004ea0
 80078bc:	20004e9c 	.word	0x20004e9c
 80078c0:	20004dec 	.word	0x20004dec
 80078c4:	20004e98 	.word	0x20004e98
 80078c8:	20004d9c 	.word	0x20004d9c
 80078cc:	0800efc9 	.word	0x0800efc9

080078d0 <xTimerCreateTimerTask>:
{
 80078d0:	b510      	push	{r4, lr}
 80078d2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80078d4:	f7ff ffc8 	bl	8007868 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80078d8:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <xTimerCreateTimerTask+0x54>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	b1b3      	cbz	r3, 800790c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078de:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078e0:	aa07      	add	r2, sp, #28
 80078e2:	a906      	add	r1, sp, #24
 80078e4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078ea:	f7fe fd4f 	bl	800638c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2302      	movs	r3, #2
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	9a07      	ldr	r2, [sp, #28]
 80078fc:	490a      	ldr	r1, [pc, #40]	@ (8007928 <xTimerCreateTimerTask+0x58>)
 80078fe:	480b      	ldr	r0, [pc, #44]	@ (800792c <xTimerCreateTimerTask+0x5c>)
 8007900:	4623      	mov	r3, r4
 8007902:	f7ff fb99 	bl	8007038 <xTaskCreateStatic>
 8007906:	4b0a      	ldr	r3, [pc, #40]	@ (8007930 <xTimerCreateTimerTask+0x60>)
 8007908:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800790a:	b940      	cbnz	r0, 800791e <xTimerCreateTimerTask+0x4e>
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800791c:	e7fe      	b.n	800791c <xTimerCreateTimerTask+0x4c>
}
 800791e:	2001      	movs	r0, #1
 8007920:	b008      	add	sp, #32
 8007922:	bd10      	pop	{r4, pc}
 8007924:	20004e94 	.word	0x20004e94
 8007928:	0800efce 	.word	0x0800efce
 800792c:	08007a2d 	.word	0x08007a2d
 8007930:	20004e90 	.word	0x20004e90

08007934 <xTimerGenericCommand>:
{
 8007934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007936:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8007938:	4604      	mov	r4, r0
{
 800793a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800793c:	b940      	cbnz	r0, 8007950 <xTimerGenericCommand+0x1c>
 800793e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	e7fe      	b.n	800794e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8007950:	4d0d      	ldr	r5, [pc, #52]	@ (8007988 <xTimerGenericCommand+0x54>)
 8007952:	6828      	ldr	r0, [r5, #0]
 8007954:	b180      	cbz	r0, 8007978 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007956:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007958:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800795c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800795e:	dc0d      	bgt.n	800797c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007960:	f7ff fe78 	bl	8007654 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007964:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007966:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007968:	bf08      	it	eq
 800796a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800796c:	6828      	ldr	r0, [r5, #0]
 800796e:	bf18      	it	ne
 8007970:	461a      	movne	r2, r3
 8007972:	4669      	mov	r1, sp
 8007974:	f7fe fe95 	bl	80066a2 <xQueueGenericSend>
}
 8007978:	b004      	add	sp, #16
 800797a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800797c:	2300      	movs	r3, #0
 800797e:	4669      	mov	r1, sp
 8007980:	f7fe ff92 	bl	80068a8 <xQueueGenericSendFromISR>
 8007984:	e7f8      	b.n	8007978 <xTimerGenericCommand+0x44>
 8007986:	bf00      	nop
 8007988:	20004e94 	.word	0x20004e94

0800798c <prvSampleTimeNow>:
{
 800798c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8007990:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8007a28 <prvSampleTimeNow+0x9c>
{
 8007994:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007996:	f7ff fc0d 	bl	80071b4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800799a:	f8d8 3000 	ldr.w	r3, [r8]
 800799e:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80079a0:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80079a2:	d909      	bls.n	80079b8 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079a4:	4f1e      	ldr	r7, [pc, #120]	@ (8007a20 <prvSampleTimeNow+0x94>)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	b96a      	cbnz	r2, 80079c8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80079ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007a24 <prvSampleTimeNow+0x98>)
 80079ae:	6811      	ldr	r1, [r2, #0]
 80079b0:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 80079b2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <prvSampleTimeNow+0x2e>
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80079bc:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80079be:	f8c8 5000 	str.w	r5, [r8]
}
 80079c2:	b002      	add	sp, #8
 80079c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079ca:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079cc:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d0:	f104 0a04 	add.w	sl, r4, #4
 80079d4:	4650      	mov	r0, sl
 80079d6:	f7fe fd15 	bl	8006404 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80079dc:	4620      	mov	r0, r4
 80079de:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079e0:	69e3      	ldr	r3, [r4, #28]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d1df      	bne.n	80079a6 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079e6:	69a3      	ldr	r3, [r4, #24]
 80079e8:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80079ea:	4599      	cmp	r9, r3
 80079ec:	d206      	bcs.n	80079fc <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ee:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079f0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079f2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079f4:	4651      	mov	r1, sl
 80079f6:	f7fe fcee 	bl	80063d6 <vListInsert>
 80079fa:	e7d4      	b.n	80079a6 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	464a      	mov	r2, r9
 8007a02:	4619      	mov	r1, r3
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7ff ff95 	bl	8007934 <xTimerGenericCommand>
				configASSERT( xResult );
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d1cb      	bne.n	80079a6 <prvSampleTimeNow+0x1a>
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	e7fe      	b.n	8007a1e <prvSampleTimeNow+0x92>
 8007a20:	20004e9c 	.word	0x20004e9c
 8007a24:	20004e98 	.word	0x20004e98
 8007a28:	20004e8c 	.word	0x20004e8c

08007a2c <prvTimerTask>:
{
 8007a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a30:	4e69      	ldr	r6, [pc, #420]	@ (8007bd8 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a32:	4f6a      	ldr	r7, [pc, #424]	@ (8007bdc <prvTimerTask+0x1b0>)
{
 8007a34:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a36:	6833      	ldr	r3, [r6, #0]
 8007a38:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	d033      	beq.n	8007aa6 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8007a44:	f7ff fbae 	bl	80071a4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a48:	a804      	add	r0, sp, #16
 8007a4a:	f7ff ff9f 	bl	800798c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007a4e:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a50:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	d175      	bne.n	8007b42 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	d058      	beq.n	8007b0c <prvTimerTask+0xe0>
 8007a5a:	4540      	cmp	r0, r8
 8007a5c:	d35c      	bcc.n	8007b18 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8007a5e:	f7ff fc45 	bl	80072ec <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a62:	6833      	ldr	r3, [r6, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a68:	1d28      	adds	r0, r5, #4
 8007a6a:	f7fe fccb 	bl	8006404 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a6e:	69eb      	ldr	r3, [r5, #28]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d11a      	bne.n	8007aaa <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a74:	69a9      	ldr	r1, [r5, #24]
 8007a76:	4643      	mov	r3, r8
 8007a78:	464a      	mov	r2, r9
 8007a7a:	4441      	add	r1, r8
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f7ff fed5 	bl	800782c <prvInsertTimerInActiveList>
 8007a82:	b190      	cbz	r0, 8007aaa <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a84:	9400      	str	r4, [sp, #0]
 8007a86:	4623      	mov	r3, r4
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7ff ff51 	bl	8007934 <xTimerGenericCommand>
			configASSERT( xResult );
 8007a92:	b950      	cbnz	r0, 8007aaa <prvTimerTask+0x7e>
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	e7fe      	b.n	8007aa4 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8007aa6:	46a8      	mov	r8, r5
 8007aa8:	e7cc      	b.n	8007a44 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8007aac:	4628      	mov	r0, r5
 8007aae:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ab0:	6838      	ldr	r0, [r7, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	a904      	add	r1, sp, #16
 8007ab6:	f7fe ff53 	bl	8006960 <xQueueReceive>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0bb      	beq.n	8007a36 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007abe:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ac0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	db40      	blt.n	8007b48 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ac6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ac8:	6963      	ldr	r3, [r4, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d143      	bne.n	8007b56 <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ace:	a803      	add	r0, sp, #12
 8007ad0:	f7ff ff5c 	bl	800798c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007ad4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ad6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007ad8:	2b09      	cmp	r3, #9
 8007ada:	d8e9      	bhi.n	8007ab0 <prvTimerTask+0x84>
 8007adc:	a101      	add	r1, pc, #4	@ (adr r1, 8007ae4 <prvTimerTask+0xb8>)
 8007ade:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b5f 	.word	0x08007b5f
 8007ae8:	08007b5f 	.word	0x08007b5f
 8007aec:	08007b5f 	.word	0x08007b5f
 8007af0:	08007ab1 	.word	0x08007ab1
 8007af4:	08007ba3 	.word	0x08007ba3
 8007af8:	08007bc7 	.word	0x08007bc7
 8007afc:	08007b5f 	.word	0x08007b5f
 8007b00:	08007b5f 	.word	0x08007b5f
 8007b04:	08007ab1 	.word	0x08007ab1
 8007b08:	08007ba3 	.word	0x08007ba3
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b0c:	4b34      	ldr	r3, [pc, #208]	@ (8007be0 <prvTimerTask+0x1b4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681c      	ldr	r4, [r3, #0]
 8007b12:	fab4 f484 	clz	r4, r4
 8007b16:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b18:	6838      	ldr	r0, [r7, #0]
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	eba8 0109 	sub.w	r1, r8, r9
 8007b20:	f7ff f8fa 	bl	8006d18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b24:	f7ff fbe2 	bl	80072ec <xTaskResumeAll>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d1c1      	bne.n	8007ab0 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8007b2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	e7b6      	b.n	8007ab0 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8007b42:	f7ff fbd3 	bl	80072ec <xTaskResumeAll>
}
 8007b46:	e7b3      	b.n	8007ab0 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	9907      	ldr	r1, [sp, #28]
 8007b4c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dbad      	blt.n	8007ab0 <prvTimerTask+0x84>
 8007b54:	e7b7      	b.n	8007ac6 <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b56:	1d20      	adds	r0, r4, #4
 8007b58:	f7fe fc54 	bl	8006404 <uxListRemove>
 8007b5c:	e7b7      	b.n	8007ace <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b5e:	69a1      	ldr	r1, [r4, #24]
 8007b60:	9b05      	ldr	r3, [sp, #20]
 8007b62:	4620      	mov	r0, r4
 8007b64:	4419      	add	r1, r3
 8007b66:	f7ff fe61 	bl	800782c <prvInsertTimerInActiveList>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d0a0      	beq.n	8007ab0 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007b70:	4620      	mov	r0, r4
 8007b72:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b74:	69e3      	ldr	r3, [r4, #28]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d19a      	bne.n	8007ab0 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b7a:	69a2      	ldr	r2, [r4, #24]
 8007b7c:	9905      	ldr	r1, [sp, #20]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	440a      	add	r2, r1
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff fed4 	bl	8007934 <xTimerGenericCommand>
							configASSERT( xResult );
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d18f      	bne.n	8007ab0 <prvTimerTask+0x84>
 8007b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	e7fe      	b.n	8007ba0 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ba2:	9905      	ldr	r1, [sp, #20]
 8007ba4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ba6:	b941      	cbnz	r1, 8007bba <prvTimerTask+0x18e>
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	e7fe      	b.n	8007bb8 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4401      	add	r1, r0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff fe34 	bl	800782c <prvInsertTimerInActiveList>
					break;
 8007bc4:	e774      	b.n	8007ab0 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bc6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f47f af70 	bne.w	8007ab0 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fa67 	bl	80080a4 <vPortFree>
 8007bd6:	e76b      	b.n	8007ab0 <prvTimerTask+0x84>
 8007bd8:	20004e9c 	.word	0x20004e9c
 8007bdc:	20004e94 	.word	0x20004e94
 8007be0:	20004e98 	.word	0x20004e98

08007be4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007be4:	4808      	ldr	r0, [pc, #32]	@ (8007c08 <prvPortStartFirstTask+0x24>)
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	6800      	ldr	r0, [r0, #0]
 8007bea:	f380 8808 	msr	MSP, r0
 8007bee:	f04f 0000 	mov.w	r0, #0
 8007bf2:	f380 8814 	msr	CONTROL, r0
 8007bf6:	b662      	cpsie	i
 8007bf8:	b661      	cpsie	f
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	df00      	svc	0
 8007c04:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c06:	0000      	.short	0x0000
 8007c08:	e000ed08 	.word	0xe000ed08

08007c0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c0c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007c1c <vPortEnableVFP+0x10>
 8007c10:	6801      	ldr	r1, [r0, #0]
 8007c12:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c16:	6001      	str	r1, [r0, #0]
 8007c18:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c1a:	0000      	.short	0x0000
 8007c1c:	e000ed88 	.word	0xe000ed88

08007c20 <prvTaskExitError>:
{
 8007c20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007c26:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <prvTaskExitError+0x3c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	d008      	beq.n	8007c40 <prvTaskExitError+0x20>
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	e7fe      	b.n	8007c3e <prvTaskExitError+0x1e>
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0fc      	beq.n	8007c50 <prvTaskExitError+0x30>
}
 8007c56:	b002      	add	sp, #8
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	2000001c 	.word	0x2000001c

08007c60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c64:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c68:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <pxPortInitialiseStack+0x28>)
 8007c6a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c6e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c72:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c76:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c7a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c7e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007c82:	3844      	subs	r0, #68	@ 0x44
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	08007c21 	.word	0x08007c21
 8007c8c:	00000000 	.word	0x00000000

08007c90 <SVC_Handler>:
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	20004d98 	.word	0x20004d98

08007cb4 <vPortEnterCritical>:
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf0 <vPortEnterCritical+0x3c>)
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007cca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007ccc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007cce:	d10e      	bne.n	8007cee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cd4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	b143      	cbz	r3, 8007cee <vPortEnterCritical+0x3a>
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	e7fe      	b.n	8007cec <vPortEnterCritical+0x38>
}
 8007cee:	4770      	bx	lr
 8007cf0:	2000001c 	.word	0x2000001c

08007cf4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007cf4:	4a08      	ldr	r2, [pc, #32]	@ (8007d18 <vPortExitCritical+0x24>)
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	b943      	cbnz	r3, 8007d0c <vPortExitCritical+0x18>
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	e7fe      	b.n	8007d0a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d10:	b90b      	cbnz	r3, 8007d16 <vPortExitCritical+0x22>
	__asm volatile
 8007d12:	f383 8811 	msr	BASEPRI, r3
}
 8007d16:	4770      	bx	lr
 8007d18:	2000001c 	.word	0x2000001c
 8007d1c:	00000000 	.word	0x00000000

08007d20 <PendSV_Handler>:
	__asm volatile
 8007d20:	f3ef 8009 	mrs	r0, PSP
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4b15      	ldr	r3, [pc, #84]	@ (8007d80 <pxCurrentTCBConst>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f01e 0f10 	tst.w	lr, #16
 8007d30:	bf08      	it	eq
 8007d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	6010      	str	r0, [r2, #0]
 8007d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d44:	f380 8811 	msr	BASEPRI, r0
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f7ff fb64 	bl	800741c <vTaskSwitchContext>
 8007d54:	f04f 0000 	mov.w	r0, #0
 8007d58:	f380 8811 	msr	BASEPRI, r0
 8007d5c:	bc09      	pop	{r0, r3}
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	6808      	ldr	r0, [r1, #0]
 8007d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d66:	f01e 0f10 	tst.w	lr, #16
 8007d6a:	bf08      	it	eq
 8007d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d70:	f380 8809 	msr	PSP, r0
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	f3af 8000 	nop.w

08007d80 <pxCurrentTCBConst>:
 8007d80:	20004d98 	.word	0x20004d98

08007d84 <SysTick_Handler>:
{
 8007d84:	b508      	push	{r3, lr}
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007d96:	f7ff fa13 	bl	80071c0 <xTaskIncrementTick>
 8007d9a:	b128      	cbz	r0, 8007da8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007da8:	2300      	movs	r3, #0
 8007daa:	f383 8811 	msr	BASEPRI, r3
}
 8007dae:	bd08      	pop	{r3, pc}

08007db0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007db4:	2300      	movs	r3, #0
 8007db6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dba:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <vPortSetupTimerInterrupt+0x20>)
 8007dbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dca:	2307      	movs	r3, #7
 8007dcc:	6113      	str	r3, [r2, #16]
}
 8007dce:	4770      	bx	lr
 8007dd0:	20000010 	.word	0x20000010

08007dd4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dda:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8007dde:	4a38      	ldr	r2, [pc, #224]	@ (8007ec0 <xPortStartScheduler+0xec>)
 8007de0:	4291      	cmp	r1, r2
 8007de2:	d108      	bne.n	8007df6 <xPortStartScheduler+0x22>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	e7fe      	b.n	8007df4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007df6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8007dfa:	4b32      	ldr	r3, [pc, #200]	@ (8007ec4 <xPortStartScheduler+0xf0>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d108      	bne.n	8007e12 <xPortStartScheduler+0x3e>
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	e7fe      	b.n	8007e10 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e12:	4b2d      	ldr	r3, [pc, #180]	@ (8007ec8 <xPortStartScheduler+0xf4>)
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	b2d2      	uxtb	r2, r2
 8007e18:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e1a:	22ff      	movs	r2, #255	@ 0xff
 8007e1c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e1e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e20:	4a2a      	ldr	r2, [pc, #168]	@ (8007ecc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e28:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e30:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e32:	4a27      	ldr	r2, [pc, #156]	@ (8007ed0 <xPortStartScheduler+0xfc>)
 8007e34:	2307      	movs	r3, #7
 8007e36:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e38:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8007e3c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e3e:	0609      	lsls	r1, r1, #24
 8007e40:	d40a      	bmi.n	8007e58 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d011      	beq.n	8007e6a <xPortStartScheduler+0x96>
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	e7fe      	b.n	8007e56 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f88d 3003 	strb.w	r3, [sp, #3]
 8007e68:	e7e6      	b.n	8007e38 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007e6e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	4a15      	ldr	r2, [pc, #84]	@ (8007ec8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e74:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e7c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e84:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e88:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007e8c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e90:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007e94:	f7ff ff8c 	bl	8007db0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <xPortStartScheduler+0x100>)
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007e9e:	f7ff feb5 	bl	8007c0c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ea2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007ea6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007eaa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8007eae:	f7ff fe99 	bl	8007be4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007eb2:	f7ff fab3 	bl	800741c <vTaskSwitchContext>
	prvTaskExitError();
 8007eb6:	f7ff feb3 	bl	8007c20 <prvTaskExitError>
}
 8007eba:	4628      	mov	r0, r5
 8007ebc:	b003      	add	sp, #12
 8007ebe:	bd30      	pop	{r4, r5, pc}
 8007ec0:	410fc271 	.word	0x410fc271
 8007ec4:	410fc270 	.word	0x410fc270
 8007ec8:	e000e400 	.word	0xe000e400
 8007ecc:	20004ecc 	.word	0x20004ecc
 8007ed0:	20004ec8 	.word	0x20004ec8
 8007ed4:	2000001c 	.word	0x2000001c

08007ed8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ed8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007edc:	2b0f      	cmp	r3, #15
 8007ede:	d90e      	bls.n	8007efe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ee0:	4a11      	ldr	r2, [pc, #68]	@ (8007f28 <vPortValidateInterruptPriority+0x50>)
 8007ee2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4a11      	ldr	r2, [pc, #68]	@ (8007f2c <vPortValidateInterruptPriority+0x54>)
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d908      	bls.n	8007efe <vPortValidateInterruptPriority+0x26>
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	e7fe      	b.n	8007efc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007efe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f02:	4a0b      	ldr	r2, [pc, #44]	@ (8007f30 <vPortValidateInterruptPriority+0x58>)
 8007f04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d908      	bls.n	8007f24 <vPortValidateInterruptPriority+0x4c>
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	e7fe      	b.n	8007f22 <vPortValidateInterruptPriority+0x4a>
	}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	e000e3f0 	.word	0xe000e3f0
 8007f2c:	20004ecc 	.word	0x20004ecc
 8007f30:	20004ec8 	.word	0x20004ec8

08007f34 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f34:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f36:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <prvInsertBlockIntoFreeList+0x44>)
 8007f38:	461a      	mov	r2, r3
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	d3fb      	bcc.n	8007f38 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f40:	6854      	ldr	r4, [r2, #4]
 8007f42:	1911      	adds	r1, r2, r4
 8007f44:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f46:	bf01      	itttt	eq
 8007f48:	6841      	ldreq	r1, [r0, #4]
 8007f4a:	4610      	moveq	r0, r2
 8007f4c:	1909      	addeq	r1, r1, r4
 8007f4e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f50:	6844      	ldr	r4, [r0, #4]
 8007f52:	1901      	adds	r1, r0, r4
 8007f54:	428b      	cmp	r3, r1
 8007f56:	d10c      	bne.n	8007f72 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f58:	4908      	ldr	r1, [pc, #32]	@ (8007f7c <prvInsertBlockIntoFreeList+0x48>)
 8007f5a:	6809      	ldr	r1, [r1, #0]
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	d003      	beq.n	8007f68 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	4421      	add	r1, r4
 8007f64:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f66:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f68:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f6a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f6c:	bf18      	it	ne
 8007f6e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f70:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f72:	4619      	mov	r1, r3
 8007f74:	e7f8      	b.n	8007f68 <prvInsertBlockIntoFreeList+0x34>
 8007f76:	bf00      	nop
 8007f78:	20004ee0 	.word	0x20004ee0
 8007f7c:	20004edc 	.word	0x20004edc

08007f80 <pvPortMalloc>:
{
 8007f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f84:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007f86:	f7ff f90d 	bl	80071a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007f8a:	493f      	ldr	r1, [pc, #252]	@ (8008088 <pvPortMalloc+0x108>)
 8007f8c:	4d3f      	ldr	r5, [pc, #252]	@ (800808c <pvPortMalloc+0x10c>)
 8007f8e:	680b      	ldr	r3, [r1, #0]
 8007f90:	b9fb      	cbnz	r3, 8007fd2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8007f92:	4a3f      	ldr	r2, [pc, #252]	@ (8008090 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f94:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f96:	bf1c      	itt	ne
 8007f98:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f9a:	4b3e      	ldrne	r3, [pc, #248]	@ (8008094 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f9c:	4e3e      	ldr	r6, [pc, #248]	@ (8008098 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f9e:	bf1a      	itte	ne
 8007fa0:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fa4:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fa6:	f244 5388 	movweq	r3, #17800	@ 0x4588
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007faa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007fac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fae:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fb6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007fb8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fbc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fbe:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007fc2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc4:	4b35      	ldr	r3, [pc, #212]	@ (800809c <pvPortMalloc+0x11c>)
 8007fc6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fc8:	4b35      	ldr	r3, [pc, #212]	@ (80080a0 <pvPortMalloc+0x120>)
 8007fca:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fd0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fd2:	682e      	ldr	r6, [r5, #0]
 8007fd4:	4226      	tst	r6, r4
 8007fd6:	d152      	bne.n	800807e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8007fd8:	2c00      	cmp	r4, #0
 8007fda:	d043      	beq.n	8008064 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8007fdc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fe2:	bf1c      	itt	ne
 8007fe4:	f023 0307 	bicne.w	r3, r3, #7
 8007fe8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d047      	beq.n	800807e <pvPortMalloc+0xfe>
 8007fee:	4f2c      	ldr	r7, [pc, #176]	@ (80080a0 <pvPortMalloc+0x120>)
 8007ff0:	683c      	ldr	r4, [r7, #0]
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d343      	bcc.n	800807e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8007ff6:	4a28      	ldr	r2, [pc, #160]	@ (8008098 <pvPortMalloc+0x118>)
 8007ff8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ffa:	6868      	ldr	r0, [r5, #4]
 8007ffc:	4298      	cmp	r0, r3
 8007ffe:	d204      	bcs.n	800800a <pvPortMalloc+0x8a>
 8008000:	f8d5 c000 	ldr.w	ip, [r5]
 8008004:	f1bc 0f00 	cmp.w	ip, #0
 8008008:	d115      	bne.n	8008036 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 800800a:	6809      	ldr	r1, [r1, #0]
 800800c:	42a9      	cmp	r1, r5
 800800e:	d036      	beq.n	800807e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008010:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008012:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008016:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008018:	1ac2      	subs	r2, r0, r3
 800801a:	2a10      	cmp	r2, #16
 800801c:	d912      	bls.n	8008044 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800801e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	0741      	lsls	r1, r0, #29
 8008022:	d00b      	beq.n	800803c <pvPortMalloc+0xbc>
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	e7fe      	b.n	8008034 <pvPortMalloc+0xb4>
 8008036:	462a      	mov	r2, r5
 8008038:	4665      	mov	r5, ip
 800803a:	e7de      	b.n	8007ffa <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800803c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800803e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008040:	f7ff ff78 	bl	8007f34 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008044:	4915      	ldr	r1, [pc, #84]	@ (800809c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008046:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008048:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800804a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800804c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800804e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8008052:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008056:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008058:	bf38      	it	cc
 800805a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800805c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800805e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8008062:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008064:	f7ff f942 	bl	80072ec <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008068:	0763      	lsls	r3, r4, #29
 800806a:	d00a      	beq.n	8008082 <pvPortMalloc+0x102>
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	e7fe      	b.n	800807c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 800807e:	2400      	movs	r4, #0
 8008080:	e7f0      	b.n	8008064 <pvPortMalloc+0xe4>
}
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	20004edc 	.word	0x20004edc
 800808c:	20004ed0 	.word	0x20004ed0
 8008090:	20004ee8 	.word	0x20004ee8
 8008094:	20009470 	.word	0x20009470
 8008098:	20004ee0 	.word	0x20004ee0
 800809c:	20004ed4 	.word	0x20004ed4
 80080a0:	20004ed8 	.word	0x20004ed8

080080a4 <vPortFree>:
{
 80080a4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80080a6:	4604      	mov	r4, r0
 80080a8:	b370      	cbz	r0, 8008108 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <vPortFree+0x68>)
 80080ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	4213      	tst	r3, r2
 80080b4:	d108      	bne.n	80080c8 <vPortFree+0x24>
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	e7fe      	b.n	80080c6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80080cc:	b141      	cbz	r1, 80080e0 <vPortFree+0x3c>
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	e7fe      	b.n	80080de <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e0:	ea23 0302 	bic.w	r3, r3, r2
 80080e4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80080e8:	f7ff f85c 	bl	80071a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ec:	4a08      	ldr	r2, [pc, #32]	@ (8008110 <vPortFree+0x6c>)
 80080ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80080f2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080f4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080f8:	440b      	add	r3, r1
 80080fa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080fc:	f7ff ff1a 	bl	8007f34 <prvInsertBlockIntoFreeList>
}
 8008100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008104:	f7ff b8f2 	b.w	80072ec <xTaskResumeAll>
}
 8008108:	bd10      	pop	{r4, pc}
 800810a:	bf00      	nop
 800810c:	20004ed0 	.word	0x20004ed0
 8008110:	20004ed8 	.word	0x20004ed8

08008114 <atof>:
 8008114:	2100      	movs	r1, #0
 8008116:	f000 bec9 	b.w	8008eac <strtod>
	...

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b82d 	b.w	8008180 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	200001a0 	.word	0x200001a0

0800812c <free>:
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <free+0xc>)
 800812e:	4601      	mov	r1, r0
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	f003 bd69 	b.w	800bc08 <_free_r>
 8008136:	bf00      	nop
 8008138:	200001a0 	.word	0x200001a0

0800813c <sbrk_aligned>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	4e0f      	ldr	r6, [pc, #60]	@ (800817c <sbrk_aligned+0x40>)
 8008140:	460c      	mov	r4, r1
 8008142:	6831      	ldr	r1, [r6, #0]
 8008144:	4605      	mov	r5, r0
 8008146:	b911      	cbnz	r1, 800814e <sbrk_aligned+0x12>
 8008148:	f002 fe96 	bl	800ae78 <_sbrk_r>
 800814c:	6030      	str	r0, [r6, #0]
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f002 fe91 	bl	800ae78 <_sbrk_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d103      	bne.n	8008162 <sbrk_aligned+0x26>
 800815a:	f04f 34ff 	mov.w	r4, #4294967295
 800815e:	4620      	mov	r0, r4
 8008160:	bd70      	pop	{r4, r5, r6, pc}
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d0f8      	beq.n	800815e <sbrk_aligned+0x22>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f002 fe82 	bl	800ae78 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d1f2      	bne.n	800815e <sbrk_aligned+0x22>
 8008178:	e7ef      	b.n	800815a <sbrk_aligned+0x1e>
 800817a:	bf00      	nop
 800817c:	20009470 	.word	0x20009470

08008180 <_malloc_r>:
 8008180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008184:	1ccd      	adds	r5, r1, #3
 8008186:	f025 0503 	bic.w	r5, r5, #3
 800818a:	3508      	adds	r5, #8
 800818c:	2d0c      	cmp	r5, #12
 800818e:	bf38      	it	cc
 8008190:	250c      	movcc	r5, #12
 8008192:	2d00      	cmp	r5, #0
 8008194:	4606      	mov	r6, r0
 8008196:	db01      	blt.n	800819c <_malloc_r+0x1c>
 8008198:	42a9      	cmp	r1, r5
 800819a:	d904      	bls.n	80081a6 <_malloc_r+0x26>
 800819c:	230c      	movs	r3, #12
 800819e:	6033      	str	r3, [r6, #0]
 80081a0:	2000      	movs	r0, #0
 80081a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800827c <_malloc_r+0xfc>
 80081aa:	f000 f869 	bl	8008280 <__malloc_lock>
 80081ae:	f8d8 3000 	ldr.w	r3, [r8]
 80081b2:	461c      	mov	r4, r3
 80081b4:	bb44      	cbnz	r4, 8008208 <_malloc_r+0x88>
 80081b6:	4629      	mov	r1, r5
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7ff ffbf 	bl	800813c <sbrk_aligned>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	4604      	mov	r4, r0
 80081c2:	d158      	bne.n	8008276 <_malloc_r+0xf6>
 80081c4:	f8d8 4000 	ldr.w	r4, [r8]
 80081c8:	4627      	mov	r7, r4
 80081ca:	2f00      	cmp	r7, #0
 80081cc:	d143      	bne.n	8008256 <_malloc_r+0xd6>
 80081ce:	2c00      	cmp	r4, #0
 80081d0:	d04b      	beq.n	800826a <_malloc_r+0xea>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	4639      	mov	r1, r7
 80081d6:	4630      	mov	r0, r6
 80081d8:	eb04 0903 	add.w	r9, r4, r3
 80081dc:	f002 fe4c 	bl	800ae78 <_sbrk_r>
 80081e0:	4581      	cmp	r9, r0
 80081e2:	d142      	bne.n	800826a <_malloc_r+0xea>
 80081e4:	6821      	ldr	r1, [r4, #0]
 80081e6:	1a6d      	subs	r5, r5, r1
 80081e8:	4629      	mov	r1, r5
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ffa6 	bl	800813c <sbrk_aligned>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d03a      	beq.n	800826a <_malloc_r+0xea>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	442b      	add	r3, r5
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	f8d8 3000 	ldr.w	r3, [r8]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	bb62      	cbnz	r2, 800825c <_malloc_r+0xdc>
 8008202:	f8c8 7000 	str.w	r7, [r8]
 8008206:	e00f      	b.n	8008228 <_malloc_r+0xa8>
 8008208:	6822      	ldr	r2, [r4, #0]
 800820a:	1b52      	subs	r2, r2, r5
 800820c:	d420      	bmi.n	8008250 <_malloc_r+0xd0>
 800820e:	2a0b      	cmp	r2, #11
 8008210:	d917      	bls.n	8008242 <_malloc_r+0xc2>
 8008212:	1961      	adds	r1, r4, r5
 8008214:	42a3      	cmp	r3, r4
 8008216:	6025      	str	r5, [r4, #0]
 8008218:	bf18      	it	ne
 800821a:	6059      	strne	r1, [r3, #4]
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	bf08      	it	eq
 8008220:	f8c8 1000 	streq.w	r1, [r8]
 8008224:	5162      	str	r2, [r4, r5]
 8008226:	604b      	str	r3, [r1, #4]
 8008228:	4630      	mov	r0, r6
 800822a:	f000 f82f 	bl	800828c <__malloc_unlock>
 800822e:	f104 000b 	add.w	r0, r4, #11
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	f020 0007 	bic.w	r0, r0, #7
 8008238:	1ac2      	subs	r2, r0, r3
 800823a:	bf1c      	itt	ne
 800823c:	1a1b      	subne	r3, r3, r0
 800823e:	50a3      	strne	r3, [r4, r2]
 8008240:	e7af      	b.n	80081a2 <_malloc_r+0x22>
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	42a3      	cmp	r3, r4
 8008246:	bf0c      	ite	eq
 8008248:	f8c8 2000 	streq.w	r2, [r8]
 800824c:	605a      	strne	r2, [r3, #4]
 800824e:	e7eb      	b.n	8008228 <_malloc_r+0xa8>
 8008250:	4623      	mov	r3, r4
 8008252:	6864      	ldr	r4, [r4, #4]
 8008254:	e7ae      	b.n	80081b4 <_malloc_r+0x34>
 8008256:	463c      	mov	r4, r7
 8008258:	687f      	ldr	r7, [r7, #4]
 800825a:	e7b6      	b.n	80081ca <_malloc_r+0x4a>
 800825c:	461a      	mov	r2, r3
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	42a3      	cmp	r3, r4
 8008262:	d1fb      	bne.n	800825c <_malloc_r+0xdc>
 8008264:	2300      	movs	r3, #0
 8008266:	6053      	str	r3, [r2, #4]
 8008268:	e7de      	b.n	8008228 <_malloc_r+0xa8>
 800826a:	230c      	movs	r3, #12
 800826c:	6033      	str	r3, [r6, #0]
 800826e:	4630      	mov	r0, r6
 8008270:	f000 f80c 	bl	800828c <__malloc_unlock>
 8008274:	e794      	b.n	80081a0 <_malloc_r+0x20>
 8008276:	6005      	str	r5, [r0, #0]
 8008278:	e7d6      	b.n	8008228 <_malloc_r+0xa8>
 800827a:	bf00      	nop
 800827c:	20009474 	.word	0x20009474

08008280 <__malloc_lock>:
 8008280:	4801      	ldr	r0, [pc, #4]	@ (8008288 <__malloc_lock+0x8>)
 8008282:	f7fa bef0 	b.w	8003066 <__retarget_lock_acquire_recursive>
 8008286:	bf00      	nop
 8008288:	20004330 	.word	0x20004330

0800828c <__malloc_unlock>:
 800828c:	4801      	ldr	r0, [pc, #4]	@ (8008294 <__malloc_unlock+0x8>)
 800828e:	f7fa bef6 	b.w	800307e <__retarget_lock_release_recursive>
 8008292:	bf00      	nop
 8008294:	20004330 	.word	0x20004330

08008298 <sulp>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	460d      	mov	r5, r1
 800829e:	ec45 4b10 	vmov	d0, r4, r5
 80082a2:	4616      	mov	r6, r2
 80082a4:	f004 fbfe 	bl	800caa4 <__ulp>
 80082a8:	ec51 0b10 	vmov	r0, r1, d0
 80082ac:	b17e      	cbz	r6, 80082ce <sulp+0x36>
 80082ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dd09      	ble.n	80082ce <sulp+0x36>
 80082ba:	051b      	lsls	r3, r3, #20
 80082bc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80082c0:	2400      	movs	r4, #0
 80082c2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80082c6:	4622      	mov	r2, r4
 80082c8:	462b      	mov	r3, r5
 80082ca:	f7f8 f9a5 	bl	8000618 <__aeabi_dmul>
 80082ce:	ec41 0b10 	vmov	d0, r0, r1
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	0000      	movs	r0, r0
	...

080082d8 <_strtod_l>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	b09f      	sub	sp, #124	@ 0x7c
 80082de:	460c      	mov	r4, r1
 80082e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80082e2:	2200      	movs	r2, #0
 80082e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80082e6:	9005      	str	r0, [sp, #20]
 80082e8:	f04f 0a00 	mov.w	sl, #0
 80082ec:	f04f 0b00 	mov.w	fp, #0
 80082f0:	460a      	mov	r2, r1
 80082f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082f4:	7811      	ldrb	r1, [r2, #0]
 80082f6:	292b      	cmp	r1, #43	@ 0x2b
 80082f8:	d04a      	beq.n	8008390 <_strtod_l+0xb8>
 80082fa:	d838      	bhi.n	800836e <_strtod_l+0x96>
 80082fc:	290d      	cmp	r1, #13
 80082fe:	d832      	bhi.n	8008366 <_strtod_l+0x8e>
 8008300:	2908      	cmp	r1, #8
 8008302:	d832      	bhi.n	800836a <_strtod_l+0x92>
 8008304:	2900      	cmp	r1, #0
 8008306:	d03b      	beq.n	8008380 <_strtod_l+0xa8>
 8008308:	2200      	movs	r2, #0
 800830a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800830c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800830e:	782a      	ldrb	r2, [r5, #0]
 8008310:	2a30      	cmp	r2, #48	@ 0x30
 8008312:	f040 80b3 	bne.w	800847c <_strtod_l+0x1a4>
 8008316:	786a      	ldrb	r2, [r5, #1]
 8008318:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800831c:	2a58      	cmp	r2, #88	@ 0x58
 800831e:	d16e      	bne.n	80083fe <_strtod_l+0x126>
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	ab1a      	add	r3, sp, #104	@ 0x68
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	4a8e      	ldr	r2, [pc, #568]	@ (8008564 <_strtod_l+0x28c>)
 800832c:	9805      	ldr	r0, [sp, #20]
 800832e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008330:	a919      	add	r1, sp, #100	@ 0x64
 8008332:	f003 fd1b 	bl	800bd6c <__gethex>
 8008336:	f010 060f 	ands.w	r6, r0, #15
 800833a:	4604      	mov	r4, r0
 800833c:	d005      	beq.n	800834a <_strtod_l+0x72>
 800833e:	2e06      	cmp	r6, #6
 8008340:	d128      	bne.n	8008394 <_strtod_l+0xbc>
 8008342:	3501      	adds	r5, #1
 8008344:	2300      	movs	r3, #0
 8008346:	9519      	str	r5, [sp, #100]	@ 0x64
 8008348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800834a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 858e 	bne.w	8008e6e <_strtod_l+0xb96>
 8008352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008354:	b1cb      	cbz	r3, 800838a <_strtod_l+0xb2>
 8008356:	4652      	mov	r2, sl
 8008358:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800835c:	ec43 2b10 	vmov	d0, r2, r3
 8008360:	b01f      	add	sp, #124	@ 0x7c
 8008362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008366:	2920      	cmp	r1, #32
 8008368:	d1ce      	bne.n	8008308 <_strtod_l+0x30>
 800836a:	3201      	adds	r2, #1
 800836c:	e7c1      	b.n	80082f2 <_strtod_l+0x1a>
 800836e:	292d      	cmp	r1, #45	@ 0x2d
 8008370:	d1ca      	bne.n	8008308 <_strtod_l+0x30>
 8008372:	2101      	movs	r1, #1
 8008374:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008376:	1c51      	adds	r1, r2, #1
 8008378:	9119      	str	r1, [sp, #100]	@ 0x64
 800837a:	7852      	ldrb	r2, [r2, #1]
 800837c:	2a00      	cmp	r2, #0
 800837e:	d1c5      	bne.n	800830c <_strtod_l+0x34>
 8008380:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008382:	9419      	str	r4, [sp, #100]	@ 0x64
 8008384:	2b00      	cmp	r3, #0
 8008386:	f040 8570 	bne.w	8008e6a <_strtod_l+0xb92>
 800838a:	4652      	mov	r2, sl
 800838c:	465b      	mov	r3, fp
 800838e:	e7e5      	b.n	800835c <_strtod_l+0x84>
 8008390:	2100      	movs	r1, #0
 8008392:	e7ef      	b.n	8008374 <_strtod_l+0x9c>
 8008394:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008396:	b13a      	cbz	r2, 80083a8 <_strtod_l+0xd0>
 8008398:	2135      	movs	r1, #53	@ 0x35
 800839a:	a81c      	add	r0, sp, #112	@ 0x70
 800839c:	f004 fc7c 	bl	800cc98 <__copybits>
 80083a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083a2:	9805      	ldr	r0, [sp, #20]
 80083a4:	f004 f84a 	bl	800c43c <_Bfree>
 80083a8:	3e01      	subs	r6, #1
 80083aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80083ac:	2e04      	cmp	r6, #4
 80083ae:	d806      	bhi.n	80083be <_strtod_l+0xe6>
 80083b0:	e8df f006 	tbb	[pc, r6]
 80083b4:	201d0314 	.word	0x201d0314
 80083b8:	14          	.byte	0x14
 80083b9:	00          	.byte	0x00
 80083ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80083be:	05e1      	lsls	r1, r4, #23
 80083c0:	bf48      	it	mi
 80083c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80083c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083ca:	0d1b      	lsrs	r3, r3, #20
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1bb      	bne.n	800834a <_strtod_l+0x72>
 80083d2:	f002 fd73 	bl	800aebc <__errno>
 80083d6:	2322      	movs	r3, #34	@ 0x22
 80083d8:	6003      	str	r3, [r0, #0]
 80083da:	e7b6      	b.n	800834a <_strtod_l+0x72>
 80083dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80083e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80083e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083ec:	e7e7      	b.n	80083be <_strtod_l+0xe6>
 80083ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800856c <_strtod_l+0x294>
 80083f2:	e7e4      	b.n	80083be <_strtod_l+0xe6>
 80083f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80083f8:	f04f 3aff 	mov.w	sl, #4294967295
 80083fc:	e7df      	b.n	80083be <_strtod_l+0xe6>
 80083fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	9219      	str	r2, [sp, #100]	@ 0x64
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b30      	cmp	r3, #48	@ 0x30
 8008408:	d0f9      	beq.n	80083fe <_strtod_l+0x126>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d09d      	beq.n	800834a <_strtod_l+0x72>
 800840e:	2301      	movs	r3, #1
 8008410:	9309      	str	r3, [sp, #36]	@ 0x24
 8008412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008414:	930c      	str	r3, [sp, #48]	@ 0x30
 8008416:	2300      	movs	r3, #0
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	930a      	str	r3, [sp, #40]	@ 0x28
 800841c:	461f      	mov	r7, r3
 800841e:	220a      	movs	r2, #10
 8008420:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008422:	7805      	ldrb	r5, [r0, #0]
 8008424:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008428:	b2d9      	uxtb	r1, r3
 800842a:	2909      	cmp	r1, #9
 800842c:	d928      	bls.n	8008480 <_strtod_l+0x1a8>
 800842e:	494e      	ldr	r1, [pc, #312]	@ (8008568 <_strtod_l+0x290>)
 8008430:	2201      	movs	r2, #1
 8008432:	f001 fee0 	bl	800a1f6 <strncmp>
 8008436:	2800      	cmp	r0, #0
 8008438:	d032      	beq.n	80084a0 <_strtod_l+0x1c8>
 800843a:	2000      	movs	r0, #0
 800843c:	462a      	mov	r2, r5
 800843e:	4681      	mov	r9, r0
 8008440:	463d      	mov	r5, r7
 8008442:	4603      	mov	r3, r0
 8008444:	2a65      	cmp	r2, #101	@ 0x65
 8008446:	d001      	beq.n	800844c <_strtod_l+0x174>
 8008448:	2a45      	cmp	r2, #69	@ 0x45
 800844a:	d114      	bne.n	8008476 <_strtod_l+0x19e>
 800844c:	b91d      	cbnz	r5, 8008456 <_strtod_l+0x17e>
 800844e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008450:	4302      	orrs	r2, r0
 8008452:	d095      	beq.n	8008380 <_strtod_l+0xa8>
 8008454:	2500      	movs	r5, #0
 8008456:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008458:	1c62      	adds	r2, r4, #1
 800845a:	9219      	str	r2, [sp, #100]	@ 0x64
 800845c:	7862      	ldrb	r2, [r4, #1]
 800845e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008460:	d077      	beq.n	8008552 <_strtod_l+0x27a>
 8008462:	2a2d      	cmp	r2, #45	@ 0x2d
 8008464:	d07b      	beq.n	800855e <_strtod_l+0x286>
 8008466:	f04f 0c00 	mov.w	ip, #0
 800846a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800846e:	2909      	cmp	r1, #9
 8008470:	f240 8082 	bls.w	8008578 <_strtod_l+0x2a0>
 8008474:	9419      	str	r4, [sp, #100]	@ 0x64
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	e0a2      	b.n	80085c2 <_strtod_l+0x2ea>
 800847c:	2300      	movs	r3, #0
 800847e:	e7c7      	b.n	8008410 <_strtod_l+0x138>
 8008480:	2f08      	cmp	r7, #8
 8008482:	bfd5      	itete	le
 8008484:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008486:	9908      	ldrgt	r1, [sp, #32]
 8008488:	fb02 3301 	mlale	r3, r2, r1, r3
 800848c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008490:	f100 0001 	add.w	r0, r0, #1
 8008494:	bfd4      	ite	le
 8008496:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008498:	9308      	strgt	r3, [sp, #32]
 800849a:	3701      	adds	r7, #1
 800849c:	9019      	str	r0, [sp, #100]	@ 0x64
 800849e:	e7bf      	b.n	8008420 <_strtod_l+0x148>
 80084a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80084a6:	785a      	ldrb	r2, [r3, #1]
 80084a8:	b37f      	cbz	r7, 800850a <_strtod_l+0x232>
 80084aa:	4681      	mov	r9, r0
 80084ac:	463d      	mov	r5, r7
 80084ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80084b2:	2b09      	cmp	r3, #9
 80084b4:	d912      	bls.n	80084dc <_strtod_l+0x204>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e7c4      	b.n	8008444 <_strtod_l+0x16c>
 80084ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	9219      	str	r2, [sp, #100]	@ 0x64
 80084c0:	785a      	ldrb	r2, [r3, #1]
 80084c2:	3001      	adds	r0, #1
 80084c4:	2a30      	cmp	r2, #48	@ 0x30
 80084c6:	d0f8      	beq.n	80084ba <_strtod_l+0x1e2>
 80084c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	f200 84d3 	bhi.w	8008e78 <_strtod_l+0xba0>
 80084d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084d6:	4681      	mov	r9, r0
 80084d8:	2000      	movs	r0, #0
 80084da:	4605      	mov	r5, r0
 80084dc:	3a30      	subs	r2, #48	@ 0x30
 80084de:	f100 0301 	add.w	r3, r0, #1
 80084e2:	d02a      	beq.n	800853a <_strtod_l+0x262>
 80084e4:	4499      	add	r9, r3
 80084e6:	eb00 0c05 	add.w	ip, r0, r5
 80084ea:	462b      	mov	r3, r5
 80084ec:	210a      	movs	r1, #10
 80084ee:	4563      	cmp	r3, ip
 80084f0:	d10d      	bne.n	800850e <_strtod_l+0x236>
 80084f2:	1c69      	adds	r1, r5, #1
 80084f4:	4401      	add	r1, r0
 80084f6:	4428      	add	r0, r5
 80084f8:	2808      	cmp	r0, #8
 80084fa:	dc16      	bgt.n	800852a <_strtod_l+0x252>
 80084fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084fe:	230a      	movs	r3, #10
 8008500:	fb03 2300 	mla	r3, r3, r0, r2
 8008504:	930a      	str	r3, [sp, #40]	@ 0x28
 8008506:	2300      	movs	r3, #0
 8008508:	e018      	b.n	800853c <_strtod_l+0x264>
 800850a:	4638      	mov	r0, r7
 800850c:	e7da      	b.n	80084c4 <_strtod_l+0x1ec>
 800850e:	2b08      	cmp	r3, #8
 8008510:	f103 0301 	add.w	r3, r3, #1
 8008514:	dc03      	bgt.n	800851e <_strtod_l+0x246>
 8008516:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008518:	434e      	muls	r6, r1
 800851a:	960a      	str	r6, [sp, #40]	@ 0x28
 800851c:	e7e7      	b.n	80084ee <_strtod_l+0x216>
 800851e:	2b10      	cmp	r3, #16
 8008520:	bfde      	ittt	le
 8008522:	9e08      	ldrle	r6, [sp, #32]
 8008524:	434e      	mulle	r6, r1
 8008526:	9608      	strle	r6, [sp, #32]
 8008528:	e7e1      	b.n	80084ee <_strtod_l+0x216>
 800852a:	280f      	cmp	r0, #15
 800852c:	dceb      	bgt.n	8008506 <_strtod_l+0x22e>
 800852e:	9808      	ldr	r0, [sp, #32]
 8008530:	230a      	movs	r3, #10
 8008532:	fb03 2300 	mla	r3, r3, r0, r2
 8008536:	9308      	str	r3, [sp, #32]
 8008538:	e7e5      	b.n	8008506 <_strtod_l+0x22e>
 800853a:	4629      	mov	r1, r5
 800853c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800853e:	1c50      	adds	r0, r2, #1
 8008540:	9019      	str	r0, [sp, #100]	@ 0x64
 8008542:	7852      	ldrb	r2, [r2, #1]
 8008544:	4618      	mov	r0, r3
 8008546:	460d      	mov	r5, r1
 8008548:	e7b1      	b.n	80084ae <_strtod_l+0x1d6>
 800854a:	f04f 0900 	mov.w	r9, #0
 800854e:	2301      	movs	r3, #1
 8008550:	e77d      	b.n	800844e <_strtod_l+0x176>
 8008552:	f04f 0c00 	mov.w	ip, #0
 8008556:	1ca2      	adds	r2, r4, #2
 8008558:	9219      	str	r2, [sp, #100]	@ 0x64
 800855a:	78a2      	ldrb	r2, [r4, #2]
 800855c:	e785      	b.n	800846a <_strtod_l+0x192>
 800855e:	f04f 0c01 	mov.w	ip, #1
 8008562:	e7f8      	b.n	8008556 <_strtod_l+0x27e>
 8008564:	0800efec 	.word	0x0800efec
 8008568:	0800e45d 	.word	0x0800e45d
 800856c:	7ff00000 	.word	0x7ff00000
 8008570:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008572:	1c51      	adds	r1, r2, #1
 8008574:	9119      	str	r1, [sp, #100]	@ 0x64
 8008576:	7852      	ldrb	r2, [r2, #1]
 8008578:	2a30      	cmp	r2, #48	@ 0x30
 800857a:	d0f9      	beq.n	8008570 <_strtod_l+0x298>
 800857c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008580:	2908      	cmp	r1, #8
 8008582:	f63f af78 	bhi.w	8008476 <_strtod_l+0x19e>
 8008586:	3a30      	subs	r2, #48	@ 0x30
 8008588:	920e      	str	r2, [sp, #56]	@ 0x38
 800858a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800858c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800858e:	f04f 080a 	mov.w	r8, #10
 8008592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008594:	1c56      	adds	r6, r2, #1
 8008596:	9619      	str	r6, [sp, #100]	@ 0x64
 8008598:	7852      	ldrb	r2, [r2, #1]
 800859a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800859e:	f1be 0f09 	cmp.w	lr, #9
 80085a2:	d939      	bls.n	8008618 <_strtod_l+0x340>
 80085a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80085a6:	1a76      	subs	r6, r6, r1
 80085a8:	2e08      	cmp	r6, #8
 80085aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80085ae:	dc03      	bgt.n	80085b8 <_strtod_l+0x2e0>
 80085b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085b2:	4588      	cmp	r8, r1
 80085b4:	bfa8      	it	ge
 80085b6:	4688      	movge	r8, r1
 80085b8:	f1bc 0f00 	cmp.w	ip, #0
 80085bc:	d001      	beq.n	80085c2 <_strtod_l+0x2ea>
 80085be:	f1c8 0800 	rsb	r8, r8, #0
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	d14e      	bne.n	8008664 <_strtod_l+0x38c>
 80085c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085c8:	4308      	orrs	r0, r1
 80085ca:	f47f aebe 	bne.w	800834a <_strtod_l+0x72>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f47f aed6 	bne.w	8008380 <_strtod_l+0xa8>
 80085d4:	2a69      	cmp	r2, #105	@ 0x69
 80085d6:	d028      	beq.n	800862a <_strtod_l+0x352>
 80085d8:	dc25      	bgt.n	8008626 <_strtod_l+0x34e>
 80085da:	2a49      	cmp	r2, #73	@ 0x49
 80085dc:	d025      	beq.n	800862a <_strtod_l+0x352>
 80085de:	2a4e      	cmp	r2, #78	@ 0x4e
 80085e0:	f47f aece 	bne.w	8008380 <_strtod_l+0xa8>
 80085e4:	499b      	ldr	r1, [pc, #620]	@ (8008854 <_strtod_l+0x57c>)
 80085e6:	a819      	add	r0, sp, #100	@ 0x64
 80085e8:	f003 fde2 	bl	800c1b0 <__match>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f43f aec7 	beq.w	8008380 <_strtod_l+0xa8>
 80085f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b28      	cmp	r3, #40	@ 0x28
 80085f8:	d12e      	bne.n	8008658 <_strtod_l+0x380>
 80085fa:	4997      	ldr	r1, [pc, #604]	@ (8008858 <_strtod_l+0x580>)
 80085fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80085fe:	a819      	add	r0, sp, #100	@ 0x64
 8008600:	f003 fdea 	bl	800c1d8 <__hexnan>
 8008604:	2805      	cmp	r0, #5
 8008606:	d127      	bne.n	8008658 <_strtod_l+0x380>
 8008608:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800860a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800860e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008612:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008616:	e698      	b.n	800834a <_strtod_l+0x72>
 8008618:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800861a:	fb08 2101 	mla	r1, r8, r1, r2
 800861e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008622:	920e      	str	r2, [sp, #56]	@ 0x38
 8008624:	e7b5      	b.n	8008592 <_strtod_l+0x2ba>
 8008626:	2a6e      	cmp	r2, #110	@ 0x6e
 8008628:	e7da      	b.n	80085e0 <_strtod_l+0x308>
 800862a:	498c      	ldr	r1, [pc, #560]	@ (800885c <_strtod_l+0x584>)
 800862c:	a819      	add	r0, sp, #100	@ 0x64
 800862e:	f003 fdbf 	bl	800c1b0 <__match>
 8008632:	2800      	cmp	r0, #0
 8008634:	f43f aea4 	beq.w	8008380 <_strtod_l+0xa8>
 8008638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800863a:	4989      	ldr	r1, [pc, #548]	@ (8008860 <_strtod_l+0x588>)
 800863c:	3b01      	subs	r3, #1
 800863e:	a819      	add	r0, sp, #100	@ 0x64
 8008640:	9319      	str	r3, [sp, #100]	@ 0x64
 8008642:	f003 fdb5 	bl	800c1b0 <__match>
 8008646:	b910      	cbnz	r0, 800864e <_strtod_l+0x376>
 8008648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800864a:	3301      	adds	r3, #1
 800864c:	9319      	str	r3, [sp, #100]	@ 0x64
 800864e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008870 <_strtod_l+0x598>
 8008652:	f04f 0a00 	mov.w	sl, #0
 8008656:	e678      	b.n	800834a <_strtod_l+0x72>
 8008658:	4882      	ldr	r0, [pc, #520]	@ (8008864 <_strtod_l+0x58c>)
 800865a:	f002 fc71 	bl	800af40 <nan>
 800865e:	ec5b ab10 	vmov	sl, fp, d0
 8008662:	e672      	b.n	800834a <_strtod_l+0x72>
 8008664:	eba8 0309 	sub.w	r3, r8, r9
 8008668:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800866a:	9309      	str	r3, [sp, #36]	@ 0x24
 800866c:	2f00      	cmp	r7, #0
 800866e:	bf08      	it	eq
 8008670:	462f      	moveq	r7, r5
 8008672:	2d10      	cmp	r5, #16
 8008674:	462c      	mov	r4, r5
 8008676:	bfa8      	it	ge
 8008678:	2410      	movge	r4, #16
 800867a:	f7f7 ff53 	bl	8000524 <__aeabi_ui2d>
 800867e:	2d09      	cmp	r5, #9
 8008680:	4682      	mov	sl, r0
 8008682:	468b      	mov	fp, r1
 8008684:	dc13      	bgt.n	80086ae <_strtod_l+0x3d6>
 8008686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	f43f ae5e 	beq.w	800834a <_strtod_l+0x72>
 800868e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008690:	dd78      	ble.n	8008784 <_strtod_l+0x4ac>
 8008692:	2b16      	cmp	r3, #22
 8008694:	dc5f      	bgt.n	8008756 <_strtod_l+0x47e>
 8008696:	4974      	ldr	r1, [pc, #464]	@ (8008868 <_strtod_l+0x590>)
 8008698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800869c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a0:	4652      	mov	r2, sl
 80086a2:	465b      	mov	r3, fp
 80086a4:	f7f7 ffb8 	bl	8000618 <__aeabi_dmul>
 80086a8:	4682      	mov	sl, r0
 80086aa:	468b      	mov	fp, r1
 80086ac:	e64d      	b.n	800834a <_strtod_l+0x72>
 80086ae:	4b6e      	ldr	r3, [pc, #440]	@ (8008868 <_strtod_l+0x590>)
 80086b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80086b8:	f7f7 ffae 	bl	8000618 <__aeabi_dmul>
 80086bc:	4682      	mov	sl, r0
 80086be:	9808      	ldr	r0, [sp, #32]
 80086c0:	468b      	mov	fp, r1
 80086c2:	f7f7 ff2f 	bl	8000524 <__aeabi_ui2d>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4650      	mov	r0, sl
 80086cc:	4659      	mov	r1, fp
 80086ce:	f7f7 fded 	bl	80002ac <__adddf3>
 80086d2:	2d0f      	cmp	r5, #15
 80086d4:	4682      	mov	sl, r0
 80086d6:	468b      	mov	fp, r1
 80086d8:	ddd5      	ble.n	8008686 <_strtod_l+0x3ae>
 80086da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086dc:	1b2c      	subs	r4, r5, r4
 80086de:	441c      	add	r4, r3
 80086e0:	2c00      	cmp	r4, #0
 80086e2:	f340 8096 	ble.w	8008812 <_strtod_l+0x53a>
 80086e6:	f014 030f 	ands.w	r3, r4, #15
 80086ea:	d00a      	beq.n	8008702 <_strtod_l+0x42a>
 80086ec:	495e      	ldr	r1, [pc, #376]	@ (8008868 <_strtod_l+0x590>)
 80086ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086fa:	f7f7 ff8d 	bl	8000618 <__aeabi_dmul>
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	f034 040f 	bics.w	r4, r4, #15
 8008706:	d073      	beq.n	80087f0 <_strtod_l+0x518>
 8008708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800870c:	dd48      	ble.n	80087a0 <_strtod_l+0x4c8>
 800870e:	2400      	movs	r4, #0
 8008710:	46a0      	mov	r8, r4
 8008712:	940a      	str	r4, [sp, #40]	@ 0x28
 8008714:	46a1      	mov	r9, r4
 8008716:	9a05      	ldr	r2, [sp, #20]
 8008718:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008870 <_strtod_l+0x598>
 800871c:	2322      	movs	r3, #34	@ 0x22
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	f04f 0a00 	mov.w	sl, #0
 8008724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008726:	2b00      	cmp	r3, #0
 8008728:	f43f ae0f 	beq.w	800834a <_strtod_l+0x72>
 800872c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800872e:	9805      	ldr	r0, [sp, #20]
 8008730:	f003 fe84 	bl	800c43c <_Bfree>
 8008734:	9805      	ldr	r0, [sp, #20]
 8008736:	4649      	mov	r1, r9
 8008738:	f003 fe80 	bl	800c43c <_Bfree>
 800873c:	9805      	ldr	r0, [sp, #20]
 800873e:	4641      	mov	r1, r8
 8008740:	f003 fe7c 	bl	800c43c <_Bfree>
 8008744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008746:	9805      	ldr	r0, [sp, #20]
 8008748:	f003 fe78 	bl	800c43c <_Bfree>
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	4621      	mov	r1, r4
 8008750:	f003 fe74 	bl	800c43c <_Bfree>
 8008754:	e5f9      	b.n	800834a <_strtod_l+0x72>
 8008756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800875c:	4293      	cmp	r3, r2
 800875e:	dbbc      	blt.n	80086da <_strtod_l+0x402>
 8008760:	4c41      	ldr	r4, [pc, #260]	@ (8008868 <_strtod_l+0x590>)
 8008762:	f1c5 050f 	rsb	r5, r5, #15
 8008766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800876a:	4652      	mov	r2, sl
 800876c:	465b      	mov	r3, fp
 800876e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008772:	f7f7 ff51 	bl	8000618 <__aeabi_dmul>
 8008776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008778:	1b5d      	subs	r5, r3, r5
 800877a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800877e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008782:	e78f      	b.n	80086a4 <_strtod_l+0x3cc>
 8008784:	3316      	adds	r3, #22
 8008786:	dba8      	blt.n	80086da <_strtod_l+0x402>
 8008788:	4b37      	ldr	r3, [pc, #220]	@ (8008868 <_strtod_l+0x590>)
 800878a:	eba9 0808 	sub.w	r8, r9, r8
 800878e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008792:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008796:	4650      	mov	r0, sl
 8008798:	4659      	mov	r1, fp
 800879a:	f7f8 f867 	bl	800086c <__aeabi_ddiv>
 800879e:	e783      	b.n	80086a8 <_strtod_l+0x3d0>
 80087a0:	4b32      	ldr	r3, [pc, #200]	@ (800886c <_strtod_l+0x594>)
 80087a2:	9308      	str	r3, [sp, #32]
 80087a4:	2300      	movs	r3, #0
 80087a6:	1124      	asrs	r4, r4, #4
 80087a8:	4650      	mov	r0, sl
 80087aa:	4659      	mov	r1, fp
 80087ac:	461e      	mov	r6, r3
 80087ae:	2c01      	cmp	r4, #1
 80087b0:	dc21      	bgt.n	80087f6 <_strtod_l+0x51e>
 80087b2:	b10b      	cbz	r3, 80087b8 <_strtod_l+0x4e0>
 80087b4:	4682      	mov	sl, r0
 80087b6:	468b      	mov	fp, r1
 80087b8:	492c      	ldr	r1, [pc, #176]	@ (800886c <_strtod_l+0x594>)
 80087ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80087be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80087c2:	4652      	mov	r2, sl
 80087c4:	465b      	mov	r3, fp
 80087c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ca:	f7f7 ff25 	bl	8000618 <__aeabi_dmul>
 80087ce:	4b28      	ldr	r3, [pc, #160]	@ (8008870 <_strtod_l+0x598>)
 80087d0:	460a      	mov	r2, r1
 80087d2:	400b      	ands	r3, r1
 80087d4:	4927      	ldr	r1, [pc, #156]	@ (8008874 <_strtod_l+0x59c>)
 80087d6:	428b      	cmp	r3, r1
 80087d8:	4682      	mov	sl, r0
 80087da:	d898      	bhi.n	800870e <_strtod_l+0x436>
 80087dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf86      	itte	hi
 80087e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008878 <_strtod_l+0x5a0>
 80087e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80087ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80087f0:	2300      	movs	r3, #0
 80087f2:	9308      	str	r3, [sp, #32]
 80087f4:	e07a      	b.n	80088ec <_strtod_l+0x614>
 80087f6:	07e2      	lsls	r2, r4, #31
 80087f8:	d505      	bpl.n	8008806 <_strtod_l+0x52e>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f7f7 ff0a 	bl	8000618 <__aeabi_dmul>
 8008804:	2301      	movs	r3, #1
 8008806:	9a08      	ldr	r2, [sp, #32]
 8008808:	3208      	adds	r2, #8
 800880a:	3601      	adds	r6, #1
 800880c:	1064      	asrs	r4, r4, #1
 800880e:	9208      	str	r2, [sp, #32]
 8008810:	e7cd      	b.n	80087ae <_strtod_l+0x4d6>
 8008812:	d0ed      	beq.n	80087f0 <_strtod_l+0x518>
 8008814:	4264      	negs	r4, r4
 8008816:	f014 020f 	ands.w	r2, r4, #15
 800881a:	d00a      	beq.n	8008832 <_strtod_l+0x55a>
 800881c:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <_strtod_l+0x590>)
 800881e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008822:	4650      	mov	r0, sl
 8008824:	4659      	mov	r1, fp
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f8 f81f 	bl	800086c <__aeabi_ddiv>
 800882e:	4682      	mov	sl, r0
 8008830:	468b      	mov	fp, r1
 8008832:	1124      	asrs	r4, r4, #4
 8008834:	d0dc      	beq.n	80087f0 <_strtod_l+0x518>
 8008836:	2c1f      	cmp	r4, #31
 8008838:	dd20      	ble.n	800887c <_strtod_l+0x5a4>
 800883a:	2400      	movs	r4, #0
 800883c:	46a0      	mov	r8, r4
 800883e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008840:	46a1      	mov	r9, r4
 8008842:	9a05      	ldr	r2, [sp, #20]
 8008844:	2322      	movs	r3, #34	@ 0x22
 8008846:	f04f 0a00 	mov.w	sl, #0
 800884a:	f04f 0b00 	mov.w	fp, #0
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	e768      	b.n	8008724 <_strtod_l+0x44c>
 8008852:	bf00      	nop
 8008854:	0800f136 	.word	0x0800f136
 8008858:	0800efd8 	.word	0x0800efd8
 800885c:	0800f12e 	.word	0x0800f12e
 8008860:	0800f217 	.word	0x0800f217
 8008864:	0800e920 	.word	0x0800e920
 8008868:	0800f390 	.word	0x0800f390
 800886c:	0800f368 	.word	0x0800f368
 8008870:	7ff00000 	.word	0x7ff00000
 8008874:	7ca00000 	.word	0x7ca00000
 8008878:	7fefffff 	.word	0x7fefffff
 800887c:	f014 0310 	ands.w	r3, r4, #16
 8008880:	bf18      	it	ne
 8008882:	236a      	movne	r3, #106	@ 0x6a
 8008884:	4ea9      	ldr	r6, [pc, #676]	@ (8008b2c <_strtod_l+0x854>)
 8008886:	9308      	str	r3, [sp, #32]
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	2300      	movs	r3, #0
 800888e:	07e2      	lsls	r2, r4, #31
 8008890:	d504      	bpl.n	800889c <_strtod_l+0x5c4>
 8008892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008896:	f7f7 febf 	bl	8000618 <__aeabi_dmul>
 800889a:	2301      	movs	r3, #1
 800889c:	1064      	asrs	r4, r4, #1
 800889e:	f106 0608 	add.w	r6, r6, #8
 80088a2:	d1f4      	bne.n	800888e <_strtod_l+0x5b6>
 80088a4:	b10b      	cbz	r3, 80088aa <_strtod_l+0x5d2>
 80088a6:	4682      	mov	sl, r0
 80088a8:	468b      	mov	fp, r1
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	b1b3      	cbz	r3, 80088dc <_strtod_l+0x604>
 80088ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80088b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	4659      	mov	r1, fp
 80088ba:	dd0f      	ble.n	80088dc <_strtod_l+0x604>
 80088bc:	2b1f      	cmp	r3, #31
 80088be:	dd55      	ble.n	800896c <_strtod_l+0x694>
 80088c0:	2b34      	cmp	r3, #52	@ 0x34
 80088c2:	bfde      	ittt	le
 80088c4:	f04f 33ff 	movle.w	r3, #4294967295
 80088c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80088cc:	4093      	lslle	r3, r2
 80088ce:	f04f 0a00 	mov.w	sl, #0
 80088d2:	bfcc      	ite	gt
 80088d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80088d8:	ea03 0b01 	andle.w	fp, r3, r1
 80088dc:	2200      	movs	r2, #0
 80088de:	2300      	movs	r3, #0
 80088e0:	4650      	mov	r0, sl
 80088e2:	4659      	mov	r1, fp
 80088e4:	f7f8 f900 	bl	8000ae8 <__aeabi_dcmpeq>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1a6      	bne.n	800883a <_strtod_l+0x562>
 80088ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088f2:	9805      	ldr	r0, [sp, #20]
 80088f4:	462b      	mov	r3, r5
 80088f6:	463a      	mov	r2, r7
 80088f8:	f003 fe08 	bl	800c50c <__s2b>
 80088fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f af05 	beq.w	800870e <_strtod_l+0x436>
 8008904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008906:	2a00      	cmp	r2, #0
 8008908:	eba9 0308 	sub.w	r3, r9, r8
 800890c:	bfa8      	it	ge
 800890e:	2300      	movge	r3, #0
 8008910:	9312      	str	r3, [sp, #72]	@ 0x48
 8008912:	2400      	movs	r4, #0
 8008914:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008918:	9316      	str	r3, [sp, #88]	@ 0x58
 800891a:	46a0      	mov	r8, r4
 800891c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800891e:	9805      	ldr	r0, [sp, #20]
 8008920:	6859      	ldr	r1, [r3, #4]
 8008922:	f003 fd4b 	bl	800c3bc <_Balloc>
 8008926:	4681      	mov	r9, r0
 8008928:	2800      	cmp	r0, #0
 800892a:	f43f aef4 	beq.w	8008716 <_strtod_l+0x43e>
 800892e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	3202      	adds	r2, #2
 8008934:	f103 010c 	add.w	r1, r3, #12
 8008938:	0092      	lsls	r2, r2, #2
 800893a:	300c      	adds	r0, #12
 800893c:	f002 faf0 	bl	800af20 <memcpy>
 8008940:	ec4b ab10 	vmov	d0, sl, fp
 8008944:	9805      	ldr	r0, [sp, #20]
 8008946:	aa1c      	add	r2, sp, #112	@ 0x70
 8008948:	a91b      	add	r1, sp, #108	@ 0x6c
 800894a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800894e:	f004 f919 	bl	800cb84 <__d2b>
 8008952:	901a      	str	r0, [sp, #104]	@ 0x68
 8008954:	2800      	cmp	r0, #0
 8008956:	f43f aede 	beq.w	8008716 <_strtod_l+0x43e>
 800895a:	9805      	ldr	r0, [sp, #20]
 800895c:	2101      	movs	r1, #1
 800895e:	f003 fe6b 	bl	800c638 <__i2b>
 8008962:	4680      	mov	r8, r0
 8008964:	b948      	cbnz	r0, 800897a <_strtod_l+0x6a2>
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	e6d4      	b.n	8008716 <_strtod_l+0x43e>
 800896c:	f04f 32ff 	mov.w	r2, #4294967295
 8008970:	fa02 f303 	lsl.w	r3, r2, r3
 8008974:	ea03 0a0a 	and.w	sl, r3, sl
 8008978:	e7b0      	b.n	80088dc <_strtod_l+0x604>
 800897a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800897c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800897e:	2d00      	cmp	r5, #0
 8008980:	bfab      	itete	ge
 8008982:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008984:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008986:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008988:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800898a:	bfac      	ite	ge
 800898c:	18ef      	addge	r7, r5, r3
 800898e:	1b5e      	sublt	r6, r3, r5
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	1aed      	subs	r5, r5, r3
 8008994:	4415      	add	r5, r2
 8008996:	4b66      	ldr	r3, [pc, #408]	@ (8008b30 <_strtod_l+0x858>)
 8008998:	3d01      	subs	r5, #1
 800899a:	429d      	cmp	r5, r3
 800899c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80089a0:	da50      	bge.n	8008a44 <_strtod_l+0x76c>
 80089a2:	1b5b      	subs	r3, r3, r5
 80089a4:	2b1f      	cmp	r3, #31
 80089a6:	eba2 0203 	sub.w	r2, r2, r3
 80089aa:	f04f 0101 	mov.w	r1, #1
 80089ae:	dc3d      	bgt.n	8008a2c <_strtod_l+0x754>
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089b6:	2300      	movs	r3, #0
 80089b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80089ba:	18bd      	adds	r5, r7, r2
 80089bc:	9b08      	ldr	r3, [sp, #32]
 80089be:	42af      	cmp	r7, r5
 80089c0:	4416      	add	r6, r2
 80089c2:	441e      	add	r6, r3
 80089c4:	463b      	mov	r3, r7
 80089c6:	bfa8      	it	ge
 80089c8:	462b      	movge	r3, r5
 80089ca:	42b3      	cmp	r3, r6
 80089cc:	bfa8      	it	ge
 80089ce:	4633      	movge	r3, r6
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfc2      	ittt	gt
 80089d4:	1aed      	subgt	r5, r5, r3
 80089d6:	1af6      	subgt	r6, r6, r3
 80089d8:	1aff      	subgt	r7, r7, r3
 80089da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dd16      	ble.n	8008a0e <_strtod_l+0x736>
 80089e0:	4641      	mov	r1, r8
 80089e2:	9805      	ldr	r0, [sp, #20]
 80089e4:	461a      	mov	r2, r3
 80089e6:	f003 fee7 	bl	800c7b8 <__pow5mult>
 80089ea:	4680      	mov	r8, r0
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d0ba      	beq.n	8008966 <_strtod_l+0x68e>
 80089f0:	4601      	mov	r1, r0
 80089f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089f4:	9805      	ldr	r0, [sp, #20]
 80089f6:	f003 fe35 	bl	800c664 <__multiply>
 80089fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f43f ae8a 	beq.w	8008716 <_strtod_l+0x43e>
 8008a02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a04:	9805      	ldr	r0, [sp, #20]
 8008a06:	f003 fd19 	bl	800c43c <_Bfree>
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a0e:	2d00      	cmp	r5, #0
 8008a10:	dc1d      	bgt.n	8008a4e <_strtod_l+0x776>
 8008a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd23      	ble.n	8008a60 <_strtod_l+0x788>
 8008a18:	4649      	mov	r1, r9
 8008a1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a1c:	9805      	ldr	r0, [sp, #20]
 8008a1e:	f003 fecb 	bl	800c7b8 <__pow5mult>
 8008a22:	4681      	mov	r9, r0
 8008a24:	b9e0      	cbnz	r0, 8008a60 <_strtod_l+0x788>
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	e674      	b.n	8008716 <_strtod_l+0x43e>
 8008a2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a38:	35e2      	adds	r5, #226	@ 0xe2
 8008a3a:	fa01 f305 	lsl.w	r3, r1, r5
 8008a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a42:	e7ba      	b.n	80089ba <_strtod_l+0x6e2>
 8008a44:	2300      	movs	r3, #0
 8008a46:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a48:	2301      	movs	r3, #1
 8008a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a4c:	e7b5      	b.n	80089ba <_strtod_l+0x6e2>
 8008a4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a50:	9805      	ldr	r0, [sp, #20]
 8008a52:	462a      	mov	r2, r5
 8008a54:	f003 ff0a 	bl	800c86c <__lshift>
 8008a58:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d1d9      	bne.n	8008a12 <_strtod_l+0x73a>
 8008a5e:	e65a      	b.n	8008716 <_strtod_l+0x43e>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd07      	ble.n	8008a74 <_strtod_l+0x79c>
 8008a64:	4649      	mov	r1, r9
 8008a66:	9805      	ldr	r0, [sp, #20]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	f003 feff 	bl	800c86c <__lshift>
 8008a6e:	4681      	mov	r9, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0d8      	beq.n	8008a26 <_strtod_l+0x74e>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	dd08      	ble.n	8008a8a <_strtod_l+0x7b2>
 8008a78:	4641      	mov	r1, r8
 8008a7a:	9805      	ldr	r0, [sp, #20]
 8008a7c:	463a      	mov	r2, r7
 8008a7e:	f003 fef5 	bl	800c86c <__lshift>
 8008a82:	4680      	mov	r8, r0
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f43f ae46 	beq.w	8008716 <_strtod_l+0x43e>
 8008a8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a8c:	9805      	ldr	r0, [sp, #20]
 8008a8e:	464a      	mov	r2, r9
 8008a90:	f003 ff74 	bl	800c97c <__mdiff>
 8008a94:	4604      	mov	r4, r0
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f43f ae3d 	beq.w	8008716 <_strtod_l+0x43e>
 8008a9c:	68c3      	ldr	r3, [r0, #12]
 8008a9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60c3      	str	r3, [r0, #12]
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	f003 ff4d 	bl	800c944 <__mcmp>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	da46      	bge.n	8008b3c <_strtod_l+0x864>
 8008aae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ab4:	d16c      	bne.n	8008b90 <_strtod_l+0x8b8>
 8008ab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d168      	bne.n	8008b90 <_strtod_l+0x8b8>
 8008abe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ac2:	0d1b      	lsrs	r3, r3, #20
 8008ac4:	051b      	lsls	r3, r3, #20
 8008ac6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008aca:	d961      	bls.n	8008b90 <_strtod_l+0x8b8>
 8008acc:	6963      	ldr	r3, [r4, #20]
 8008ace:	b913      	cbnz	r3, 8008ad6 <_strtod_l+0x7fe>
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	dd5c      	ble.n	8008b90 <_strtod_l+0x8b8>
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	2201      	movs	r2, #1
 8008ada:	9805      	ldr	r0, [sp, #20]
 8008adc:	f003 fec6 	bl	800c86c <__lshift>
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	f003 ff2e 	bl	800c944 <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dd51      	ble.n	8008b90 <_strtod_l+0x8b8>
 8008aec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008af0:	9a08      	ldr	r2, [sp, #32]
 8008af2:	0d1b      	lsrs	r3, r3, #20
 8008af4:	051b      	lsls	r3, r3, #20
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	d06b      	beq.n	8008bd2 <_strtod_l+0x8fa>
 8008afa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008afe:	d868      	bhi.n	8008bd2 <_strtod_l+0x8fa>
 8008b00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b04:	f67f ae9d 	bls.w	8008842 <_strtod_l+0x56a>
 8008b08:	4b0a      	ldr	r3, [pc, #40]	@ (8008b34 <_strtod_l+0x85c>)
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f7f7 fd82 	bl	8000618 <__aeabi_dmul>
 8008b14:	4b08      	ldr	r3, [pc, #32]	@ (8008b38 <_strtod_l+0x860>)
 8008b16:	400b      	ands	r3, r1
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f ae05 	bne.w	800872c <_strtod_l+0x454>
 8008b22:	9a05      	ldr	r2, [sp, #20]
 8008b24:	2322      	movs	r3, #34	@ 0x22
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	e600      	b.n	800872c <_strtod_l+0x454>
 8008b2a:	bf00      	nop
 8008b2c:	0800f000 	.word	0x0800f000
 8008b30:	fffffc02 	.word	0xfffffc02
 8008b34:	39500000 	.word	0x39500000
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b40:	d165      	bne.n	8008c0e <_strtod_l+0x936>
 8008b42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b48:	b35a      	cbz	r2, 8008ba2 <_strtod_l+0x8ca>
 8008b4a:	4a9f      	ldr	r2, [pc, #636]	@ (8008dc8 <_strtod_l+0xaf0>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d12b      	bne.n	8008ba8 <_strtod_l+0x8d0>
 8008b50:	9b08      	ldr	r3, [sp, #32]
 8008b52:	4651      	mov	r1, sl
 8008b54:	b303      	cbz	r3, 8008b98 <_strtod_l+0x8c0>
 8008b56:	4b9d      	ldr	r3, [pc, #628]	@ (8008dcc <_strtod_l+0xaf4>)
 8008b58:	465a      	mov	r2, fp
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	d81b      	bhi.n	8008b9e <_strtod_l+0x8c6>
 8008b66:	0d1b      	lsrs	r3, r3, #20
 8008b68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d119      	bne.n	8008ba8 <_strtod_l+0x8d0>
 8008b74:	4b96      	ldr	r3, [pc, #600]	@ (8008dd0 <_strtod_l+0xaf8>)
 8008b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d102      	bne.n	8008b82 <_strtod_l+0x8aa>
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	f43f adca 	beq.w	8008716 <_strtod_l+0x43e>
 8008b82:	4b92      	ldr	r3, [pc, #584]	@ (8008dcc <_strtod_l+0xaf4>)
 8008b84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b86:	401a      	ands	r2, r3
 8008b88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b8c:	f04f 0a00 	mov.w	sl, #0
 8008b90:	9b08      	ldr	r3, [sp, #32]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1b8      	bne.n	8008b08 <_strtod_l+0x830>
 8008b96:	e5c9      	b.n	800872c <_strtod_l+0x454>
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	e7e8      	b.n	8008b70 <_strtod_l+0x898>
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	e7e6      	b.n	8008b70 <_strtod_l+0x898>
 8008ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ba6:	d0a1      	beq.n	8008aec <_strtod_l+0x814>
 8008ba8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008baa:	b1db      	cbz	r3, 8008be4 <_strtod_l+0x90c>
 8008bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bae:	4213      	tst	r3, r2
 8008bb0:	d0ee      	beq.n	8008b90 <_strtod_l+0x8b8>
 8008bb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bb4:	9a08      	ldr	r2, [sp, #32]
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4659      	mov	r1, fp
 8008bba:	b1bb      	cbz	r3, 8008bec <_strtod_l+0x914>
 8008bbc:	f7ff fb6c 	bl	8008298 <sulp>
 8008bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bc4:	ec53 2b10 	vmov	r2, r3, d0
 8008bc8:	f7f7 fb70 	bl	80002ac <__adddf3>
 8008bcc:	4682      	mov	sl, r0
 8008bce:	468b      	mov	fp, r1
 8008bd0:	e7de      	b.n	8008b90 <_strtod_l+0x8b8>
 8008bd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008bd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008bda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008bde:	f04f 3aff 	mov.w	sl, #4294967295
 8008be2:	e7d5      	b.n	8008b90 <_strtod_l+0x8b8>
 8008be4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008be6:	ea13 0f0a 	tst.w	r3, sl
 8008bea:	e7e1      	b.n	8008bb0 <_strtod_l+0x8d8>
 8008bec:	f7ff fb54 	bl	8008298 <sulp>
 8008bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf4:	ec53 2b10 	vmov	r2, r3, d0
 8008bf8:	f7f7 fb56 	bl	80002a8 <__aeabi_dsub>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4682      	mov	sl, r0
 8008c02:	468b      	mov	fp, r1
 8008c04:	f7f7 ff70 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d0c1      	beq.n	8008b90 <_strtod_l+0x8b8>
 8008c0c:	e619      	b.n	8008842 <_strtod_l+0x56a>
 8008c0e:	4641      	mov	r1, r8
 8008c10:	4620      	mov	r0, r4
 8008c12:	f004 f80f 	bl	800cc34 <__ratio>
 8008c16:	ec57 6b10 	vmov	r6, r7, d0
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 ff74 	bl	8000b10 <__aeabi_dcmple>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d06f      	beq.n	8008d0c <_strtod_l+0xa34>
 8008c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d17a      	bne.n	8008d28 <_strtod_l+0xa50>
 8008c32:	f1ba 0f00 	cmp.w	sl, #0
 8008c36:	d158      	bne.n	8008cea <_strtod_l+0xa12>
 8008c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d15a      	bne.n	8008cf8 <_strtod_l+0xa20>
 8008c42:	4b64      	ldr	r3, [pc, #400]	@ (8008dd4 <_strtod_l+0xafc>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	f7f7 ff57 	bl	8000afc <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d159      	bne.n	8008d06 <_strtod_l+0xa2e>
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	4b60      	ldr	r3, [pc, #384]	@ (8008dd8 <_strtod_l+0xb00>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f7f7 fcdd 	bl	8000618 <__aeabi_dmul>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c66:	9606      	str	r6, [sp, #24]
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c6e:	4d57      	ldr	r5, [pc, #348]	@ (8008dcc <_strtod_l+0xaf4>)
 8008c70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c76:	401d      	ands	r5, r3
 8008c78:	4b58      	ldr	r3, [pc, #352]	@ (8008ddc <_strtod_l+0xb04>)
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	f040 80b2 	bne.w	8008de4 <_strtod_l+0xb0c>
 8008c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c86:	ec4b ab10 	vmov	d0, sl, fp
 8008c8a:	f003 ff0b 	bl	800caa4 <__ulp>
 8008c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c92:	ec51 0b10 	vmov	r0, r1, d0
 8008c96:	f7f7 fcbf 	bl	8000618 <__aeabi_dmul>
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	f7f7 fb05 	bl	80002ac <__adddf3>
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4949      	ldr	r1, [pc, #292]	@ (8008dcc <_strtod_l+0xaf4>)
 8008ca6:	4a4e      	ldr	r2, [pc, #312]	@ (8008de0 <_strtod_l+0xb08>)
 8008ca8:	4019      	ands	r1, r3
 8008caa:	4291      	cmp	r1, r2
 8008cac:	4682      	mov	sl, r0
 8008cae:	d942      	bls.n	8008d36 <_strtod_l+0xa5e>
 8008cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cb2:	4b47      	ldr	r3, [pc, #284]	@ (8008dd0 <_strtod_l+0xaf8>)
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d103      	bne.n	8008cc0 <_strtod_l+0x9e8>
 8008cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f43f ad2b 	beq.w	8008716 <_strtod_l+0x43e>
 8008cc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008dd0 <_strtod_l+0xaf8>
 8008cc4:	f04f 3aff 	mov.w	sl, #4294967295
 8008cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cca:	9805      	ldr	r0, [sp, #20]
 8008ccc:	f003 fbb6 	bl	800c43c <_Bfree>
 8008cd0:	9805      	ldr	r0, [sp, #20]
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	f003 fbb2 	bl	800c43c <_Bfree>
 8008cd8:	9805      	ldr	r0, [sp, #20]
 8008cda:	4641      	mov	r1, r8
 8008cdc:	f003 fbae 	bl	800c43c <_Bfree>
 8008ce0:	9805      	ldr	r0, [sp, #20]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f003 fbaa 	bl	800c43c <_Bfree>
 8008ce8:	e618      	b.n	800891c <_strtod_l+0x644>
 8008cea:	f1ba 0f01 	cmp.w	sl, #1
 8008cee:	d103      	bne.n	8008cf8 <_strtod_l+0xa20>
 8008cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f43f ada5 	beq.w	8008842 <_strtod_l+0x56a>
 8008cf8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008da8 <_strtod_l+0xad0>
 8008cfc:	4f35      	ldr	r7, [pc, #212]	@ (8008dd4 <_strtod_l+0xafc>)
 8008cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d02:	2600      	movs	r6, #0
 8008d04:	e7b1      	b.n	8008c6a <_strtod_l+0x992>
 8008d06:	4f34      	ldr	r7, [pc, #208]	@ (8008dd8 <_strtod_l+0xb00>)
 8008d08:	2600      	movs	r6, #0
 8008d0a:	e7aa      	b.n	8008c62 <_strtod_l+0x98a>
 8008d0c:	4b32      	ldr	r3, [pc, #200]	@ (8008dd8 <_strtod_l+0xb00>)
 8008d0e:	4630      	mov	r0, r6
 8008d10:	4639      	mov	r1, r7
 8008d12:	2200      	movs	r2, #0
 8008d14:	f7f7 fc80 	bl	8000618 <__aeabi_dmul>
 8008d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d09f      	beq.n	8008c62 <_strtod_l+0x98a>
 8008d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d26:	e7a0      	b.n	8008c6a <_strtod_l+0x992>
 8008d28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008db0 <_strtod_l+0xad8>
 8008d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d30:	ec57 6b17 	vmov	r6, r7, d7
 8008d34:	e799      	b.n	8008c6a <_strtod_l+0x992>
 8008d36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1c1      	bne.n	8008cc8 <_strtod_l+0x9f0>
 8008d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d48:	0d1b      	lsrs	r3, r3, #20
 8008d4a:	051b      	lsls	r3, r3, #20
 8008d4c:	429d      	cmp	r5, r3
 8008d4e:	d1bb      	bne.n	8008cc8 <_strtod_l+0x9f0>
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 ffa8 	bl	8000ca8 <__aeabi_d2lz>
 8008d58:	f7f7 fc30 	bl	80005bc <__aeabi_l2d>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 faa0 	bl	80002a8 <__aeabi_dsub>
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d76:	ea46 060a 	orr.w	r6, r6, sl
 8008d7a:	431e      	orrs	r6, r3
 8008d7c:	d06f      	beq.n	8008e5e <_strtod_l+0xb86>
 8008d7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008db8 <_strtod_l+0xae0>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 feba 	bl	8000afc <__aeabi_dcmplt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f47f accf 	bne.w	800872c <_strtod_l+0x454>
 8008d8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008dc0 <_strtod_l+0xae8>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d98:	f7f7 fece 	bl	8000b38 <__aeabi_dcmpgt>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d093      	beq.n	8008cc8 <_strtod_l+0x9f0>
 8008da0:	e4c4      	b.n	800872c <_strtod_l+0x454>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	00000000 	.word	0x00000000
 8008dac:	bff00000 	.word	0xbff00000
 8008db0:	00000000 	.word	0x00000000
 8008db4:	3ff00000 	.word	0x3ff00000
 8008db8:	94a03595 	.word	0x94a03595
 8008dbc:	3fdfffff 	.word	0x3fdfffff
 8008dc0:	35afe535 	.word	0x35afe535
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	000fffff 	.word	0x000fffff
 8008dcc:	7ff00000 	.word	0x7ff00000
 8008dd0:	7fefffff 	.word	0x7fefffff
 8008dd4:	3ff00000 	.word	0x3ff00000
 8008dd8:	3fe00000 	.word	0x3fe00000
 8008ddc:	7fe00000 	.word	0x7fe00000
 8008de0:	7c9fffff 	.word	0x7c9fffff
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	b323      	cbz	r3, 8008e32 <_strtod_l+0xb5a>
 8008de8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008dec:	d821      	bhi.n	8008e32 <_strtod_l+0xb5a>
 8008dee:	a328      	add	r3, pc, #160	@ (adr r3, 8008e90 <_strtod_l+0xbb8>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 fe8a 	bl	8000b10 <__aeabi_dcmple>
 8008dfc:	b1a0      	cbz	r0, 8008e28 <_strtod_l+0xb50>
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7f7 fee1 	bl	8000bc8 <__aeabi_d2uiz>
 8008e06:	2801      	cmp	r0, #1
 8008e08:	bf38      	it	cc
 8008e0a:	2001      	movcc	r0, #1
 8008e0c:	f7f7 fb8a 	bl	8000524 <__aeabi_ui2d>
 8008e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e12:	4606      	mov	r6, r0
 8008e14:	460f      	mov	r7, r1
 8008e16:	b9fb      	cbnz	r3, 8008e58 <_strtod_l+0xb80>
 8008e18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008e24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008e2e:	1b5b      	subs	r3, r3, r5
 8008e30:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e3a:	f003 fe33 	bl	800caa4 <__ulp>
 8008e3e:	4650      	mov	r0, sl
 8008e40:	ec53 2b10 	vmov	r2, r3, d0
 8008e44:	4659      	mov	r1, fp
 8008e46:	f7f7 fbe7 	bl	8000618 <__aeabi_dmul>
 8008e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e4e:	f7f7 fa2d 	bl	80002ac <__adddf3>
 8008e52:	4682      	mov	sl, r0
 8008e54:	468b      	mov	fp, r1
 8008e56:	e770      	b.n	8008d3a <_strtod_l+0xa62>
 8008e58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e5c:	e7e0      	b.n	8008e20 <_strtod_l+0xb48>
 8008e5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e98 <_strtod_l+0xbc0>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f7f7 fe4a 	bl	8000afc <__aeabi_dcmplt>
 8008e68:	e798      	b.n	8008d9c <_strtod_l+0xac4>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	f7ff ba6d 	b.w	8008352 <_strtod_l+0x7a>
 8008e78:	2a65      	cmp	r2, #101	@ 0x65
 8008e7a:	f43f ab66 	beq.w	800854a <_strtod_l+0x272>
 8008e7e:	2a45      	cmp	r2, #69	@ 0x45
 8008e80:	f43f ab63 	beq.w	800854a <_strtod_l+0x272>
 8008e84:	2301      	movs	r3, #1
 8008e86:	f7ff bb9e 	b.w	80085c6 <_strtod_l+0x2ee>
 8008e8a:	bf00      	nop
 8008e8c:	f3af 8000 	nop.w
 8008e90:	ffc00000 	.word	0xffc00000
 8008e94:	41dfffff 	.word	0x41dfffff
 8008e98:	94a03595 	.word	0x94a03595
 8008e9c:	3fcfffff 	.word	0x3fcfffff

08008ea0 <_strtod_r>:
 8008ea0:	4b01      	ldr	r3, [pc, #4]	@ (8008ea8 <_strtod_r+0x8>)
 8008ea2:	f7ff ba19 	b.w	80082d8 <_strtod_l>
 8008ea6:	bf00      	nop
 8008ea8:	20000034 	.word	0x20000034

08008eac <strtod>:
 8008eac:	460a      	mov	r2, r1
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4802      	ldr	r0, [pc, #8]	@ (8008ebc <strtod+0x10>)
 8008eb2:	4b03      	ldr	r3, [pc, #12]	@ (8008ec0 <strtod+0x14>)
 8008eb4:	6800      	ldr	r0, [r0, #0]
 8008eb6:	f7ff ba0f 	b.w	80082d8 <_strtod_l>
 8008eba:	bf00      	nop
 8008ebc:	200001a0 	.word	0x200001a0
 8008ec0:	20000034 	.word	0x20000034

08008ec4 <_strtol_l.constprop.0>:
 8008ec4:	2b24      	cmp	r3, #36	@ 0x24
 8008ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eca:	4686      	mov	lr, r0
 8008ecc:	4690      	mov	r8, r2
 8008ece:	d801      	bhi.n	8008ed4 <_strtol_l.constprop.0+0x10>
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d106      	bne.n	8008ee2 <_strtol_l.constprop.0+0x1e>
 8008ed4:	f001 fff2 	bl	800aebc <__errno>
 8008ed8:	2316      	movs	r3, #22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	2000      	movs	r0, #0
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	4834      	ldr	r0, [pc, #208]	@ (8008fb4 <_strtol_l.constprop.0+0xf0>)
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eec:	5d06      	ldrb	r6, [r0, r4]
 8008eee:	f016 0608 	ands.w	r6, r6, #8
 8008ef2:	d1f8      	bne.n	8008ee6 <_strtol_l.constprop.0+0x22>
 8008ef4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ef6:	d12d      	bne.n	8008f54 <_strtol_l.constprop.0+0x90>
 8008ef8:	782c      	ldrb	r4, [r5, #0]
 8008efa:	2601      	movs	r6, #1
 8008efc:	1c95      	adds	r5, r2, #2
 8008efe:	f033 0210 	bics.w	r2, r3, #16
 8008f02:	d109      	bne.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f04:	2c30      	cmp	r4, #48	@ 0x30
 8008f06:	d12a      	bne.n	8008f5e <_strtol_l.constprop.0+0x9a>
 8008f08:	782a      	ldrb	r2, [r5, #0]
 8008f0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f0e:	2a58      	cmp	r2, #88	@ 0x58
 8008f10:	d125      	bne.n	8008f5e <_strtol_l.constprop.0+0x9a>
 8008f12:	786c      	ldrb	r4, [r5, #1]
 8008f14:	2310      	movs	r3, #16
 8008f16:	3502      	adds	r5, #2
 8008f18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008f1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f20:	2200      	movs	r2, #0
 8008f22:	fbbc f9f3 	udiv	r9, ip, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f30:	2f09      	cmp	r7, #9
 8008f32:	d81b      	bhi.n	8008f6c <_strtol_l.constprop.0+0xa8>
 8008f34:	463c      	mov	r4, r7
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	dd27      	ble.n	8008f8a <_strtol_l.constprop.0+0xc6>
 8008f3a:	1c57      	adds	r7, r2, #1
 8008f3c:	d007      	beq.n	8008f4e <_strtol_l.constprop.0+0x8a>
 8008f3e:	4581      	cmp	r9, r0
 8008f40:	d320      	bcc.n	8008f84 <_strtol_l.constprop.0+0xc0>
 8008f42:	d101      	bne.n	8008f48 <_strtol_l.constprop.0+0x84>
 8008f44:	45a2      	cmp	sl, r4
 8008f46:	db1d      	blt.n	8008f84 <_strtol_l.constprop.0+0xc0>
 8008f48:	fb00 4003 	mla	r0, r0, r3, r4
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f52:	e7eb      	b.n	8008f2c <_strtol_l.constprop.0+0x68>
 8008f54:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f56:	bf04      	itt	eq
 8008f58:	782c      	ldrbeq	r4, [r5, #0]
 8008f5a:	1c95      	addeq	r5, r2, #2
 8008f5c:	e7cf      	b.n	8008efe <_strtol_l.constprop.0+0x3a>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1da      	bne.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f62:	2c30      	cmp	r4, #48	@ 0x30
 8008f64:	bf0c      	ite	eq
 8008f66:	2308      	moveq	r3, #8
 8008f68:	230a      	movne	r3, #10
 8008f6a:	e7d5      	b.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f70:	2f19      	cmp	r7, #25
 8008f72:	d801      	bhi.n	8008f78 <_strtol_l.constprop.0+0xb4>
 8008f74:	3c37      	subs	r4, #55	@ 0x37
 8008f76:	e7de      	b.n	8008f36 <_strtol_l.constprop.0+0x72>
 8008f78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f7c:	2f19      	cmp	r7, #25
 8008f7e:	d804      	bhi.n	8008f8a <_strtol_l.constprop.0+0xc6>
 8008f80:	3c57      	subs	r4, #87	@ 0x57
 8008f82:	e7d8      	b.n	8008f36 <_strtol_l.constprop.0+0x72>
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	e7e1      	b.n	8008f4e <_strtol_l.constprop.0+0x8a>
 8008f8a:	1c53      	adds	r3, r2, #1
 8008f8c:	d108      	bne.n	8008fa0 <_strtol_l.constprop.0+0xdc>
 8008f8e:	2322      	movs	r3, #34	@ 0x22
 8008f90:	f8ce 3000 	str.w	r3, [lr]
 8008f94:	4660      	mov	r0, ip
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	d0a0      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008f9c:	1e69      	subs	r1, r5, #1
 8008f9e:	e006      	b.n	8008fae <_strtol_l.constprop.0+0xea>
 8008fa0:	b106      	cbz	r6, 8008fa4 <_strtol_l.constprop.0+0xe0>
 8008fa2:	4240      	negs	r0, r0
 8008fa4:	f1b8 0f00 	cmp.w	r8, #0
 8008fa8:	d099      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1f6      	bne.n	8008f9c <_strtol_l.constprop.0+0xd8>
 8008fae:	f8c8 1000 	str.w	r1, [r8]
 8008fb2:	e794      	b.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008fb4:	0800f029 	.word	0x0800f029

08008fb8 <_strtol_r>:
 8008fb8:	f7ff bf84 	b.w	8008ec4 <_strtol_l.constprop.0>

08008fbc <strtol>:
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	4802      	ldr	r0, [pc, #8]	@ (8008fcc <strtol+0x10>)
 8008fc4:	6800      	ldr	r0, [r0, #0]
 8008fc6:	f7ff bf7d 	b.w	8008ec4 <_strtol_l.constprop.0>
 8008fca:	bf00      	nop
 8008fcc:	200001a0 	.word	0x200001a0

08008fd0 <__cvt>:
 8008fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	ec57 6b10 	vmov	r6, r7, d0
 8008fd8:	2f00      	cmp	r7, #0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4619      	mov	r1, r3
 8008fde:	463b      	mov	r3, r7
 8008fe0:	bfbb      	ittet	lt
 8008fe2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008fe6:	461f      	movlt	r7, r3
 8008fe8:	2300      	movge	r3, #0
 8008fea:	232d      	movlt	r3, #45	@ 0x2d
 8008fec:	700b      	strb	r3, [r1, #0]
 8008fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ff4:	4691      	mov	r9, r2
 8008ff6:	f023 0820 	bic.w	r8, r3, #32
 8008ffa:	bfbc      	itt	lt
 8008ffc:	4632      	movlt	r2, r6
 8008ffe:	4616      	movlt	r6, r2
 8009000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009004:	d005      	beq.n	8009012 <__cvt+0x42>
 8009006:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800900a:	d100      	bne.n	800900e <__cvt+0x3e>
 800900c:	3401      	adds	r4, #1
 800900e:	2102      	movs	r1, #2
 8009010:	e000      	b.n	8009014 <__cvt+0x44>
 8009012:	2103      	movs	r1, #3
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	ab02      	add	r3, sp, #8
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	ec47 6b10 	vmov	d0, r6, r7
 8009020:	4653      	mov	r3, sl
 8009022:	4622      	mov	r2, r4
 8009024:	f002 f82c 	bl	800b080 <_dtoa_r>
 8009028:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800902c:	4605      	mov	r5, r0
 800902e:	d119      	bne.n	8009064 <__cvt+0x94>
 8009030:	f019 0f01 	tst.w	r9, #1
 8009034:	d00e      	beq.n	8009054 <__cvt+0x84>
 8009036:	eb00 0904 	add.w	r9, r0, r4
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4630      	mov	r0, r6
 8009040:	4639      	mov	r1, r7
 8009042:	f7f7 fd51 	bl	8000ae8 <__aeabi_dcmpeq>
 8009046:	b108      	cbz	r0, 800904c <__cvt+0x7c>
 8009048:	f8cd 900c 	str.w	r9, [sp, #12]
 800904c:	2230      	movs	r2, #48	@ 0x30
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	454b      	cmp	r3, r9
 8009052:	d31e      	bcc.n	8009092 <__cvt+0xc2>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009058:	1b5b      	subs	r3, r3, r5
 800905a:	4628      	mov	r0, r5
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	b004      	add	sp, #16
 8009060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009068:	eb00 0904 	add.w	r9, r0, r4
 800906c:	d1e5      	bne.n	800903a <__cvt+0x6a>
 800906e:	7803      	ldrb	r3, [r0, #0]
 8009070:	2b30      	cmp	r3, #48	@ 0x30
 8009072:	d10a      	bne.n	800908a <__cvt+0xba>
 8009074:	2200      	movs	r2, #0
 8009076:	2300      	movs	r3, #0
 8009078:	4630      	mov	r0, r6
 800907a:	4639      	mov	r1, r7
 800907c:	f7f7 fd34 	bl	8000ae8 <__aeabi_dcmpeq>
 8009080:	b918      	cbnz	r0, 800908a <__cvt+0xba>
 8009082:	f1c4 0401 	rsb	r4, r4, #1
 8009086:	f8ca 4000 	str.w	r4, [sl]
 800908a:	f8da 3000 	ldr.w	r3, [sl]
 800908e:	4499      	add	r9, r3
 8009090:	e7d3      	b.n	800903a <__cvt+0x6a>
 8009092:	1c59      	adds	r1, r3, #1
 8009094:	9103      	str	r1, [sp, #12]
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e7d9      	b.n	800904e <__cvt+0x7e>

0800909a <__exponent>:
 800909a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909c:	2900      	cmp	r1, #0
 800909e:	bfba      	itte	lt
 80090a0:	4249      	neglt	r1, r1
 80090a2:	232d      	movlt	r3, #45	@ 0x2d
 80090a4:	232b      	movge	r3, #43	@ 0x2b
 80090a6:	2909      	cmp	r1, #9
 80090a8:	7002      	strb	r2, [r0, #0]
 80090aa:	7043      	strb	r3, [r0, #1]
 80090ac:	dd29      	ble.n	8009102 <__exponent+0x68>
 80090ae:	f10d 0307 	add.w	r3, sp, #7
 80090b2:	461d      	mov	r5, r3
 80090b4:	270a      	movs	r7, #10
 80090b6:	461a      	mov	r2, r3
 80090b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80090bc:	fb07 1416 	mls	r4, r7, r6, r1
 80090c0:	3430      	adds	r4, #48	@ 0x30
 80090c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80090c6:	460c      	mov	r4, r1
 80090c8:	2c63      	cmp	r4, #99	@ 0x63
 80090ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ce:	4631      	mov	r1, r6
 80090d0:	dcf1      	bgt.n	80090b6 <__exponent+0x1c>
 80090d2:	3130      	adds	r1, #48	@ 0x30
 80090d4:	1e94      	subs	r4, r2, #2
 80090d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80090da:	1c41      	adds	r1, r0, #1
 80090dc:	4623      	mov	r3, r4
 80090de:	42ab      	cmp	r3, r5
 80090e0:	d30a      	bcc.n	80090f8 <__exponent+0x5e>
 80090e2:	f10d 0309 	add.w	r3, sp, #9
 80090e6:	1a9b      	subs	r3, r3, r2
 80090e8:	42ac      	cmp	r4, r5
 80090ea:	bf88      	it	hi
 80090ec:	2300      	movhi	r3, #0
 80090ee:	3302      	adds	r3, #2
 80090f0:	4403      	add	r3, r0
 80090f2:	1a18      	subs	r0, r3, r0
 80090f4:	b003      	add	sp, #12
 80090f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80090fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009100:	e7ed      	b.n	80090de <__exponent+0x44>
 8009102:	2330      	movs	r3, #48	@ 0x30
 8009104:	3130      	adds	r1, #48	@ 0x30
 8009106:	7083      	strb	r3, [r0, #2]
 8009108:	70c1      	strb	r1, [r0, #3]
 800910a:	1d03      	adds	r3, r0, #4
 800910c:	e7f1      	b.n	80090f2 <__exponent+0x58>
	...

08009110 <_printf_float>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	b08d      	sub	sp, #52	@ 0x34
 8009116:	460c      	mov	r4, r1
 8009118:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800911c:	4616      	mov	r6, r2
 800911e:	461f      	mov	r7, r3
 8009120:	4605      	mov	r5, r0
 8009122:	f001 fe1b 	bl	800ad5c <_localeconv_r>
 8009126:	6803      	ldr	r3, [r0, #0]
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	4618      	mov	r0, r3
 800912c:	f7f7 f8b0 	bl	8000290 <strlen>
 8009130:	2300      	movs	r3, #0
 8009132:	930a      	str	r3, [sp, #40]	@ 0x28
 8009134:	f8d8 3000 	ldr.w	r3, [r8]
 8009138:	9005      	str	r0, [sp, #20]
 800913a:	3307      	adds	r3, #7
 800913c:	f023 0307 	bic.w	r3, r3, #7
 8009140:	f103 0208 	add.w	r2, r3, #8
 8009144:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009148:	f8d4 b000 	ldr.w	fp, [r4]
 800914c:	f8c8 2000 	str.w	r2, [r8]
 8009150:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009154:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	f8cd 8018 	str.w	r8, [sp, #24]
 800915e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009166:	4b9c      	ldr	r3, [pc, #624]	@ (80093d8 <_printf_float+0x2c8>)
 8009168:	f04f 32ff 	mov.w	r2, #4294967295
 800916c:	f7f7 fcee 	bl	8000b4c <__aeabi_dcmpun>
 8009170:	bb70      	cbnz	r0, 80091d0 <_printf_float+0xc0>
 8009172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009176:	4b98      	ldr	r3, [pc, #608]	@ (80093d8 <_printf_float+0x2c8>)
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	f7f7 fcc8 	bl	8000b10 <__aeabi_dcmple>
 8009180:	bb30      	cbnz	r0, 80091d0 <_printf_float+0xc0>
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800918e:	b110      	cbz	r0, 8009196 <_printf_float+0x86>
 8009190:	232d      	movs	r3, #45	@ 0x2d
 8009192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009196:	4a91      	ldr	r2, [pc, #580]	@ (80093dc <_printf_float+0x2cc>)
 8009198:	4b91      	ldr	r3, [pc, #580]	@ (80093e0 <_printf_float+0x2d0>)
 800919a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800919e:	bf94      	ite	ls
 80091a0:	4690      	movls	r8, r2
 80091a2:	4698      	movhi	r8, r3
 80091a4:	2303      	movs	r3, #3
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	f02b 0304 	bic.w	r3, fp, #4
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	f04f 0900 	mov.w	r9, #0
 80091b2:	9700      	str	r7, [sp, #0]
 80091b4:	4633      	mov	r3, r6
 80091b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091b8:	4621      	mov	r1, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	f000 f9d2 	bl	8009564 <_printf_common>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f040 808d 	bne.w	80092e0 <_printf_float+0x1d0>
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	b00d      	add	sp, #52	@ 0x34
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	4642      	mov	r2, r8
 80091d2:	464b      	mov	r3, r9
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 fcb8 	bl	8000b4c <__aeabi_dcmpun>
 80091dc:	b140      	cbz	r0, 80091f0 <_printf_float+0xe0>
 80091de:	464b      	mov	r3, r9
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bfbc      	itt	lt
 80091e4:	232d      	movlt	r3, #45	@ 0x2d
 80091e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80091ea:	4a7e      	ldr	r2, [pc, #504]	@ (80093e4 <_printf_float+0x2d4>)
 80091ec:	4b7e      	ldr	r3, [pc, #504]	@ (80093e8 <_printf_float+0x2d8>)
 80091ee:	e7d4      	b.n	800919a <_printf_float+0x8a>
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80091f6:	9206      	str	r2, [sp, #24]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	d13b      	bne.n	8009274 <_printf_float+0x164>
 80091fc:	2306      	movs	r3, #6
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009204:	2300      	movs	r3, #0
 8009206:	6022      	str	r2, [r4, #0]
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	ab0a      	add	r3, sp, #40	@ 0x28
 800920c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009210:	ab09      	add	r3, sp, #36	@ 0x24
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	ec49 8b10 	vmov	d0, r8, r9
 800921a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff fed6 	bl	8008fd0 <__cvt>
 8009224:	9b06      	ldr	r3, [sp, #24]
 8009226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009228:	2b47      	cmp	r3, #71	@ 0x47
 800922a:	4680      	mov	r8, r0
 800922c:	d129      	bne.n	8009282 <_printf_float+0x172>
 800922e:	1cc8      	adds	r0, r1, #3
 8009230:	db02      	blt.n	8009238 <_printf_float+0x128>
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	4299      	cmp	r1, r3
 8009236:	dd41      	ble.n	80092bc <_printf_float+0x1ac>
 8009238:	f1aa 0a02 	sub.w	sl, sl, #2
 800923c:	fa5f fa8a 	uxtb.w	sl, sl
 8009240:	3901      	subs	r1, #1
 8009242:	4652      	mov	r2, sl
 8009244:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009248:	9109      	str	r1, [sp, #36]	@ 0x24
 800924a:	f7ff ff26 	bl	800909a <__exponent>
 800924e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009250:	1813      	adds	r3, r2, r0
 8009252:	2a01      	cmp	r2, #1
 8009254:	4681      	mov	r9, r0
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	dc02      	bgt.n	8009260 <_printf_float+0x150>
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	07d2      	lsls	r2, r2, #31
 800925e:	d501      	bpl.n	8009264 <_printf_float+0x154>
 8009260:	3301      	adds	r3, #1
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0a2      	beq.n	80091b2 <_printf_float+0xa2>
 800926c:	232d      	movs	r3, #45	@ 0x2d
 800926e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009272:	e79e      	b.n	80091b2 <_printf_float+0xa2>
 8009274:	9a06      	ldr	r2, [sp, #24]
 8009276:	2a47      	cmp	r2, #71	@ 0x47
 8009278:	d1c2      	bne.n	8009200 <_printf_float+0xf0>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1c0      	bne.n	8009200 <_printf_float+0xf0>
 800927e:	2301      	movs	r3, #1
 8009280:	e7bd      	b.n	80091fe <_printf_float+0xee>
 8009282:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009286:	d9db      	bls.n	8009240 <_printf_float+0x130>
 8009288:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800928c:	d118      	bne.n	80092c0 <_printf_float+0x1b0>
 800928e:	2900      	cmp	r1, #0
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	dd0b      	ble.n	80092ac <_printf_float+0x19c>
 8009294:	6121      	str	r1, [r4, #16]
 8009296:	b913      	cbnz	r3, 800929e <_printf_float+0x18e>
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	07d0      	lsls	r0, r2, #31
 800929c:	d502      	bpl.n	80092a4 <_printf_float+0x194>
 800929e:	3301      	adds	r3, #1
 80092a0:	440b      	add	r3, r1
 80092a2:	6123      	str	r3, [r4, #16]
 80092a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092a6:	f04f 0900 	mov.w	r9, #0
 80092aa:	e7db      	b.n	8009264 <_printf_float+0x154>
 80092ac:	b913      	cbnz	r3, 80092b4 <_printf_float+0x1a4>
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	07d2      	lsls	r2, r2, #31
 80092b2:	d501      	bpl.n	80092b8 <_printf_float+0x1a8>
 80092b4:	3302      	adds	r3, #2
 80092b6:	e7f4      	b.n	80092a2 <_printf_float+0x192>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e7f2      	b.n	80092a2 <_printf_float+0x192>
 80092bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80092c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092c2:	4299      	cmp	r1, r3
 80092c4:	db05      	blt.n	80092d2 <_printf_float+0x1c2>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	6121      	str	r1, [r4, #16]
 80092ca:	07d8      	lsls	r0, r3, #31
 80092cc:	d5ea      	bpl.n	80092a4 <_printf_float+0x194>
 80092ce:	1c4b      	adds	r3, r1, #1
 80092d0:	e7e7      	b.n	80092a2 <_printf_float+0x192>
 80092d2:	2900      	cmp	r1, #0
 80092d4:	bfd4      	ite	le
 80092d6:	f1c1 0202 	rsble	r2, r1, #2
 80092da:	2201      	movgt	r2, #1
 80092dc:	4413      	add	r3, r2
 80092de:	e7e0      	b.n	80092a2 <_printf_float+0x192>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	055a      	lsls	r2, r3, #21
 80092e4:	d407      	bmi.n	80092f6 <_printf_float+0x1e6>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	4642      	mov	r2, r8
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	d12b      	bne.n	800934c <_printf_float+0x23c>
 80092f4:	e767      	b.n	80091c6 <_printf_float+0xb6>
 80092f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092fa:	f240 80dd 	bls.w	80094b8 <_printf_float+0x3a8>
 80092fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009302:	2200      	movs	r2, #0
 8009304:	2300      	movs	r3, #0
 8009306:	f7f7 fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 800930a:	2800      	cmp	r0, #0
 800930c:	d033      	beq.n	8009376 <_printf_float+0x266>
 800930e:	4a37      	ldr	r2, [pc, #220]	@ (80093ec <_printf_float+0x2dc>)
 8009310:	2301      	movs	r3, #1
 8009312:	4631      	mov	r1, r6
 8009314:	4628      	mov	r0, r5
 8009316:	47b8      	blx	r7
 8009318:	3001      	adds	r0, #1
 800931a:	f43f af54 	beq.w	80091c6 <_printf_float+0xb6>
 800931e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009322:	4543      	cmp	r3, r8
 8009324:	db02      	blt.n	800932c <_printf_float+0x21c>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	07d8      	lsls	r0, r3, #31
 800932a:	d50f      	bpl.n	800934c <_printf_float+0x23c>
 800932c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f af45 	beq.w	80091c6 <_printf_float+0xb6>
 800933c:	f04f 0900 	mov.w	r9, #0
 8009340:	f108 38ff 	add.w	r8, r8, #4294967295
 8009344:	f104 0a1a 	add.w	sl, r4, #26
 8009348:	45c8      	cmp	r8, r9
 800934a:	dc09      	bgt.n	8009360 <_printf_float+0x250>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	f100 8103 	bmi.w	800955a <_printf_float+0x44a>
 8009354:	68e0      	ldr	r0, [r4, #12]
 8009356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009358:	4298      	cmp	r0, r3
 800935a:	bfb8      	it	lt
 800935c:	4618      	movlt	r0, r3
 800935e:	e734      	b.n	80091ca <_printf_float+0xba>
 8009360:	2301      	movs	r3, #1
 8009362:	4652      	mov	r2, sl
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f af2b 	beq.w	80091c6 <_printf_float+0xb6>
 8009370:	f109 0901 	add.w	r9, r9, #1
 8009374:	e7e8      	b.n	8009348 <_printf_float+0x238>
 8009376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc39      	bgt.n	80093f0 <_printf_float+0x2e0>
 800937c:	4a1b      	ldr	r2, [pc, #108]	@ (80093ec <_printf_float+0x2dc>)
 800937e:	2301      	movs	r3, #1
 8009380:	4631      	mov	r1, r6
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	f43f af1d 	beq.w	80091c6 <_printf_float+0xb6>
 800938c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009390:	ea59 0303 	orrs.w	r3, r9, r3
 8009394:	d102      	bne.n	800939c <_printf_float+0x28c>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	07d9      	lsls	r1, r3, #31
 800939a:	d5d7      	bpl.n	800934c <_printf_float+0x23c>
 800939c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af0d 	beq.w	80091c6 <_printf_float+0xb6>
 80093ac:	f04f 0a00 	mov.w	sl, #0
 80093b0:	f104 0b1a 	add.w	fp, r4, #26
 80093b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b6:	425b      	negs	r3, r3
 80093b8:	4553      	cmp	r3, sl
 80093ba:	dc01      	bgt.n	80093c0 <_printf_float+0x2b0>
 80093bc:	464b      	mov	r3, r9
 80093be:	e793      	b.n	80092e8 <_printf_float+0x1d8>
 80093c0:	2301      	movs	r3, #1
 80093c2:	465a      	mov	r2, fp
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	f43f aefb 	beq.w	80091c6 <_printf_float+0xb6>
 80093d0:	f10a 0a01 	add.w	sl, sl, #1
 80093d4:	e7ee      	b.n	80093b4 <_printf_float+0x2a4>
 80093d6:	bf00      	nop
 80093d8:	7fefffff 	.word	0x7fefffff
 80093dc:	0800f129 	.word	0x0800f129
 80093e0:	0800f12d 	.word	0x0800f12d
 80093e4:	0800f131 	.word	0x0800f131
 80093e8:	0800f135 	.word	0x0800f135
 80093ec:	0800f47f 	.word	0x0800f47f
 80093f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093f6:	4553      	cmp	r3, sl
 80093f8:	bfa8      	it	ge
 80093fa:	4653      	movge	r3, sl
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	4699      	mov	r9, r3
 8009400:	dc36      	bgt.n	8009470 <_printf_float+0x360>
 8009402:	f04f 0b00 	mov.w	fp, #0
 8009406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800940a:	f104 021a 	add.w	r2, r4, #26
 800940e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009410:	9306      	str	r3, [sp, #24]
 8009412:	eba3 0309 	sub.w	r3, r3, r9
 8009416:	455b      	cmp	r3, fp
 8009418:	dc31      	bgt.n	800947e <_printf_float+0x36e>
 800941a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800941c:	459a      	cmp	sl, r3
 800941e:	dc3a      	bgt.n	8009496 <_printf_float+0x386>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	07da      	lsls	r2, r3, #31
 8009424:	d437      	bmi.n	8009496 <_printf_float+0x386>
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	ebaa 0903 	sub.w	r9, sl, r3
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	ebaa 0303 	sub.w	r3, sl, r3
 8009432:	4599      	cmp	r9, r3
 8009434:	bfa8      	it	ge
 8009436:	4699      	movge	r9, r3
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	dc33      	bgt.n	80094a6 <_printf_float+0x396>
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009446:	f104 0b1a 	add.w	fp, r4, #26
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	ebaa 0303 	sub.w	r3, sl, r3
 8009450:	eba3 0309 	sub.w	r3, r3, r9
 8009454:	4543      	cmp	r3, r8
 8009456:	f77f af79 	ble.w	800934c <_printf_float+0x23c>
 800945a:	2301      	movs	r3, #1
 800945c:	465a      	mov	r2, fp
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f aeae 	beq.w	80091c6 <_printf_float+0xb6>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	e7ec      	b.n	800944a <_printf_float+0x33a>
 8009470:	4642      	mov	r2, r8
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	d1c2      	bne.n	8009402 <_printf_float+0x2f2>
 800947c:	e6a3      	b.n	80091c6 <_printf_float+0xb6>
 800947e:	2301      	movs	r3, #1
 8009480:	4631      	mov	r1, r6
 8009482:	4628      	mov	r0, r5
 8009484:	9206      	str	r2, [sp, #24]
 8009486:	47b8      	blx	r7
 8009488:	3001      	adds	r0, #1
 800948a:	f43f ae9c 	beq.w	80091c6 <_printf_float+0xb6>
 800948e:	9a06      	ldr	r2, [sp, #24]
 8009490:	f10b 0b01 	add.w	fp, fp, #1
 8009494:	e7bb      	b.n	800940e <_printf_float+0x2fe>
 8009496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	d1c0      	bne.n	8009426 <_printf_float+0x316>
 80094a4:	e68f      	b.n	80091c6 <_printf_float+0xb6>
 80094a6:	9a06      	ldr	r2, [sp, #24]
 80094a8:	464b      	mov	r3, r9
 80094aa:	4442      	add	r2, r8
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	d1c3      	bne.n	800943e <_printf_float+0x32e>
 80094b6:	e686      	b.n	80091c6 <_printf_float+0xb6>
 80094b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094bc:	f1ba 0f01 	cmp.w	sl, #1
 80094c0:	dc01      	bgt.n	80094c6 <_printf_float+0x3b6>
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d536      	bpl.n	8009534 <_printf_float+0x424>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4642      	mov	r2, r8
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f ae78 	beq.w	80091c6 <_printf_float+0xb6>
 80094d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae70 	beq.w	80091c6 <_printf_float+0xb6>
 80094e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094ea:	2200      	movs	r2, #0
 80094ec:	2300      	movs	r3, #0
 80094ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094f2:	f7f7 faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80094f6:	b9c0      	cbnz	r0, 800952a <_printf_float+0x41a>
 80094f8:	4653      	mov	r3, sl
 80094fa:	f108 0201 	add.w	r2, r8, #1
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d10c      	bne.n	8009522 <_printf_float+0x412>
 8009508:	e65d      	b.n	80091c6 <_printf_float+0xb6>
 800950a:	2301      	movs	r3, #1
 800950c:	465a      	mov	r2, fp
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae56 	beq.w	80091c6 <_printf_float+0xb6>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	45d0      	cmp	r8, sl
 8009520:	dbf3      	blt.n	800950a <_printf_float+0x3fa>
 8009522:	464b      	mov	r3, r9
 8009524:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009528:	e6df      	b.n	80092ea <_printf_float+0x1da>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	f104 0b1a 	add.w	fp, r4, #26
 8009532:	e7f4      	b.n	800951e <_printf_float+0x40e>
 8009534:	2301      	movs	r3, #1
 8009536:	4642      	mov	r2, r8
 8009538:	e7e1      	b.n	80094fe <_printf_float+0x3ee>
 800953a:	2301      	movs	r3, #1
 800953c:	464a      	mov	r2, r9
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f ae3e 	beq.w	80091c6 <_printf_float+0xb6>
 800954a:	f108 0801 	add.w	r8, r8, #1
 800954e:	68e3      	ldr	r3, [r4, #12]
 8009550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009552:	1a5b      	subs	r3, r3, r1
 8009554:	4543      	cmp	r3, r8
 8009556:	dcf0      	bgt.n	800953a <_printf_float+0x42a>
 8009558:	e6fc      	b.n	8009354 <_printf_float+0x244>
 800955a:	f04f 0800 	mov.w	r8, #0
 800955e:	f104 0919 	add.w	r9, r4, #25
 8009562:	e7f4      	b.n	800954e <_printf_float+0x43e>

08009564 <_printf_common>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	4616      	mov	r6, r2
 800956a:	4698      	mov	r8, r3
 800956c:	688a      	ldr	r2, [r1, #8]
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009574:	4293      	cmp	r3, r2
 8009576:	bfb8      	it	lt
 8009578:	4613      	movlt	r3, r2
 800957a:	6033      	str	r3, [r6, #0]
 800957c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009580:	4607      	mov	r7, r0
 8009582:	460c      	mov	r4, r1
 8009584:	b10a      	cbz	r2, 800958a <_printf_common+0x26>
 8009586:	3301      	adds	r3, #1
 8009588:	6033      	str	r3, [r6, #0]
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	0699      	lsls	r1, r3, #26
 800958e:	bf42      	ittt	mi
 8009590:	6833      	ldrmi	r3, [r6, #0]
 8009592:	3302      	addmi	r3, #2
 8009594:	6033      	strmi	r3, [r6, #0]
 8009596:	6825      	ldr	r5, [r4, #0]
 8009598:	f015 0506 	ands.w	r5, r5, #6
 800959c:	d106      	bne.n	80095ac <_printf_common+0x48>
 800959e:	f104 0a19 	add.w	sl, r4, #25
 80095a2:	68e3      	ldr	r3, [r4, #12]
 80095a4:	6832      	ldr	r2, [r6, #0]
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	dc26      	bgt.n	80095fa <_printf_common+0x96>
 80095ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	3b00      	subs	r3, #0
 80095b4:	bf18      	it	ne
 80095b6:	2301      	movne	r3, #1
 80095b8:	0692      	lsls	r2, r2, #26
 80095ba:	d42b      	bmi.n	8009614 <_printf_common+0xb0>
 80095bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095c0:	4641      	mov	r1, r8
 80095c2:	4638      	mov	r0, r7
 80095c4:	47c8      	blx	r9
 80095c6:	3001      	adds	r0, #1
 80095c8:	d01e      	beq.n	8009608 <_printf_common+0xa4>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	6922      	ldr	r2, [r4, #16]
 80095ce:	f003 0306 	and.w	r3, r3, #6
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	bf02      	ittt	eq
 80095d6:	68e5      	ldreq	r5, [r4, #12]
 80095d8:	6833      	ldreq	r3, [r6, #0]
 80095da:	1aed      	subeq	r5, r5, r3
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	bf0c      	ite	eq
 80095e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e4:	2500      	movne	r5, #0
 80095e6:	4293      	cmp	r3, r2
 80095e8:	bfc4      	itt	gt
 80095ea:	1a9b      	subgt	r3, r3, r2
 80095ec:	18ed      	addgt	r5, r5, r3
 80095ee:	2600      	movs	r6, #0
 80095f0:	341a      	adds	r4, #26
 80095f2:	42b5      	cmp	r5, r6
 80095f4:	d11a      	bne.n	800962c <_printf_common+0xc8>
 80095f6:	2000      	movs	r0, #0
 80095f8:	e008      	b.n	800960c <_printf_common+0xa8>
 80095fa:	2301      	movs	r3, #1
 80095fc:	4652      	mov	r2, sl
 80095fe:	4641      	mov	r1, r8
 8009600:	4638      	mov	r0, r7
 8009602:	47c8      	blx	r9
 8009604:	3001      	adds	r0, #1
 8009606:	d103      	bne.n	8009610 <_printf_common+0xac>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009610:	3501      	adds	r5, #1
 8009612:	e7c6      	b.n	80095a2 <_printf_common+0x3e>
 8009614:	18e1      	adds	r1, r4, r3
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	2030      	movs	r0, #48	@ 0x30
 800961a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800961e:	4422      	add	r2, r4
 8009620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009628:	3302      	adds	r3, #2
 800962a:	e7c7      	b.n	80095bc <_printf_common+0x58>
 800962c:	2301      	movs	r3, #1
 800962e:	4622      	mov	r2, r4
 8009630:	4641      	mov	r1, r8
 8009632:	4638      	mov	r0, r7
 8009634:	47c8      	blx	r9
 8009636:	3001      	adds	r0, #1
 8009638:	d0e6      	beq.n	8009608 <_printf_common+0xa4>
 800963a:	3601      	adds	r6, #1
 800963c:	e7d9      	b.n	80095f2 <_printf_common+0x8e>
	...

08009640 <_printf_i>:
 8009640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	7e0f      	ldrb	r7, [r1, #24]
 8009646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009648:	2f78      	cmp	r7, #120	@ 0x78
 800964a:	4691      	mov	r9, r2
 800964c:	4680      	mov	r8, r0
 800964e:	460c      	mov	r4, r1
 8009650:	469a      	mov	sl, r3
 8009652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009656:	d807      	bhi.n	8009668 <_printf_i+0x28>
 8009658:	2f62      	cmp	r7, #98	@ 0x62
 800965a:	d80a      	bhi.n	8009672 <_printf_i+0x32>
 800965c:	2f00      	cmp	r7, #0
 800965e:	f000 80d2 	beq.w	8009806 <_printf_i+0x1c6>
 8009662:	2f58      	cmp	r7, #88	@ 0x58
 8009664:	f000 80b9 	beq.w	80097da <_printf_i+0x19a>
 8009668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800966c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009670:	e03a      	b.n	80096e8 <_printf_i+0xa8>
 8009672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009676:	2b15      	cmp	r3, #21
 8009678:	d8f6      	bhi.n	8009668 <_printf_i+0x28>
 800967a:	a101      	add	r1, pc, #4	@ (adr r1, 8009680 <_printf_i+0x40>)
 800967c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096ed 	.word	0x080096ed
 8009688:	08009669 	.word	0x08009669
 800968c:	08009669 	.word	0x08009669
 8009690:	08009669 	.word	0x08009669
 8009694:	08009669 	.word	0x08009669
 8009698:	080096ed 	.word	0x080096ed
 800969c:	08009669 	.word	0x08009669
 80096a0:	08009669 	.word	0x08009669
 80096a4:	08009669 	.word	0x08009669
 80096a8:	08009669 	.word	0x08009669
 80096ac:	080097ed 	.word	0x080097ed
 80096b0:	08009717 	.word	0x08009717
 80096b4:	080097a7 	.word	0x080097a7
 80096b8:	08009669 	.word	0x08009669
 80096bc:	08009669 	.word	0x08009669
 80096c0:	0800980f 	.word	0x0800980f
 80096c4:	08009669 	.word	0x08009669
 80096c8:	08009717 	.word	0x08009717
 80096cc:	08009669 	.word	0x08009669
 80096d0:	08009669 	.word	0x08009669
 80096d4:	080097af 	.word	0x080097af
 80096d8:	6833      	ldr	r3, [r6, #0]
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6032      	str	r2, [r6, #0]
 80096e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096e8:	2301      	movs	r3, #1
 80096ea:	e09d      	b.n	8009828 <_printf_i+0x1e8>
 80096ec:	6833      	ldr	r3, [r6, #0]
 80096ee:	6820      	ldr	r0, [r4, #0]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	6031      	str	r1, [r6, #0]
 80096f4:	0606      	lsls	r6, r0, #24
 80096f6:	d501      	bpl.n	80096fc <_printf_i+0xbc>
 80096f8:	681d      	ldr	r5, [r3, #0]
 80096fa:	e003      	b.n	8009704 <_printf_i+0xc4>
 80096fc:	0645      	lsls	r5, r0, #25
 80096fe:	d5fb      	bpl.n	80096f8 <_printf_i+0xb8>
 8009700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009704:	2d00      	cmp	r5, #0
 8009706:	da03      	bge.n	8009710 <_printf_i+0xd0>
 8009708:	232d      	movs	r3, #45	@ 0x2d
 800970a:	426d      	negs	r5, r5
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009710:	4859      	ldr	r0, [pc, #356]	@ (8009878 <_printf_i+0x238>)
 8009712:	230a      	movs	r3, #10
 8009714:	e011      	b.n	800973a <_printf_i+0xfa>
 8009716:	6821      	ldr	r1, [r4, #0]
 8009718:	6833      	ldr	r3, [r6, #0]
 800971a:	0608      	lsls	r0, r1, #24
 800971c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009720:	d402      	bmi.n	8009728 <_printf_i+0xe8>
 8009722:	0649      	lsls	r1, r1, #25
 8009724:	bf48      	it	mi
 8009726:	b2ad      	uxthmi	r5, r5
 8009728:	2f6f      	cmp	r7, #111	@ 0x6f
 800972a:	4853      	ldr	r0, [pc, #332]	@ (8009878 <_printf_i+0x238>)
 800972c:	6033      	str	r3, [r6, #0]
 800972e:	bf14      	ite	ne
 8009730:	230a      	movne	r3, #10
 8009732:	2308      	moveq	r3, #8
 8009734:	2100      	movs	r1, #0
 8009736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800973a:	6866      	ldr	r6, [r4, #4]
 800973c:	60a6      	str	r6, [r4, #8]
 800973e:	2e00      	cmp	r6, #0
 8009740:	bfa2      	ittt	ge
 8009742:	6821      	ldrge	r1, [r4, #0]
 8009744:	f021 0104 	bicge.w	r1, r1, #4
 8009748:	6021      	strge	r1, [r4, #0]
 800974a:	b90d      	cbnz	r5, 8009750 <_printf_i+0x110>
 800974c:	2e00      	cmp	r6, #0
 800974e:	d04b      	beq.n	80097e8 <_printf_i+0x1a8>
 8009750:	4616      	mov	r6, r2
 8009752:	fbb5 f1f3 	udiv	r1, r5, r3
 8009756:	fb03 5711 	mls	r7, r3, r1, r5
 800975a:	5dc7      	ldrb	r7, [r0, r7]
 800975c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009760:	462f      	mov	r7, r5
 8009762:	42bb      	cmp	r3, r7
 8009764:	460d      	mov	r5, r1
 8009766:	d9f4      	bls.n	8009752 <_printf_i+0x112>
 8009768:	2b08      	cmp	r3, #8
 800976a:	d10b      	bne.n	8009784 <_printf_i+0x144>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	07df      	lsls	r7, r3, #31
 8009770:	d508      	bpl.n	8009784 <_printf_i+0x144>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6861      	ldr	r1, [r4, #4]
 8009776:	4299      	cmp	r1, r3
 8009778:	bfde      	ittt	le
 800977a:	2330      	movle	r3, #48	@ 0x30
 800977c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009784:	1b92      	subs	r2, r2, r6
 8009786:	6122      	str	r2, [r4, #16]
 8009788:	f8cd a000 	str.w	sl, [sp]
 800978c:	464b      	mov	r3, r9
 800978e:	aa03      	add	r2, sp, #12
 8009790:	4621      	mov	r1, r4
 8009792:	4640      	mov	r0, r8
 8009794:	f7ff fee6 	bl	8009564 <_printf_common>
 8009798:	3001      	adds	r0, #1
 800979a:	d14a      	bne.n	8009832 <_printf_i+0x1f2>
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	b004      	add	sp, #16
 80097a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	f043 0320 	orr.w	r3, r3, #32
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	4833      	ldr	r0, [pc, #204]	@ (800987c <_printf_i+0x23c>)
 80097b0:	2778      	movs	r7, #120	@ 0x78
 80097b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	6831      	ldr	r1, [r6, #0]
 80097ba:	061f      	lsls	r7, r3, #24
 80097bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80097c0:	d402      	bmi.n	80097c8 <_printf_i+0x188>
 80097c2:	065f      	lsls	r7, r3, #25
 80097c4:	bf48      	it	mi
 80097c6:	b2ad      	uxthmi	r5, r5
 80097c8:	6031      	str	r1, [r6, #0]
 80097ca:	07d9      	lsls	r1, r3, #31
 80097cc:	bf44      	itt	mi
 80097ce:	f043 0320 	orrmi.w	r3, r3, #32
 80097d2:	6023      	strmi	r3, [r4, #0]
 80097d4:	b11d      	cbz	r5, 80097de <_printf_i+0x19e>
 80097d6:	2310      	movs	r3, #16
 80097d8:	e7ac      	b.n	8009734 <_printf_i+0xf4>
 80097da:	4827      	ldr	r0, [pc, #156]	@ (8009878 <_printf_i+0x238>)
 80097dc:	e7e9      	b.n	80097b2 <_printf_i+0x172>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	f023 0320 	bic.w	r3, r3, #32
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	e7f6      	b.n	80097d6 <_printf_i+0x196>
 80097e8:	4616      	mov	r6, r2
 80097ea:	e7bd      	b.n	8009768 <_printf_i+0x128>
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	6961      	ldr	r1, [r4, #20]
 80097f2:	1d18      	adds	r0, r3, #4
 80097f4:	6030      	str	r0, [r6, #0]
 80097f6:	062e      	lsls	r6, r5, #24
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	d501      	bpl.n	8009800 <_printf_i+0x1c0>
 80097fc:	6019      	str	r1, [r3, #0]
 80097fe:	e002      	b.n	8009806 <_printf_i+0x1c6>
 8009800:	0668      	lsls	r0, r5, #25
 8009802:	d5fb      	bpl.n	80097fc <_printf_i+0x1bc>
 8009804:	8019      	strh	r1, [r3, #0]
 8009806:	2300      	movs	r3, #0
 8009808:	6123      	str	r3, [r4, #16]
 800980a:	4616      	mov	r6, r2
 800980c:	e7bc      	b.n	8009788 <_printf_i+0x148>
 800980e:	6833      	ldr	r3, [r6, #0]
 8009810:	1d1a      	adds	r2, r3, #4
 8009812:	6032      	str	r2, [r6, #0]
 8009814:	681e      	ldr	r6, [r3, #0]
 8009816:	6862      	ldr	r2, [r4, #4]
 8009818:	2100      	movs	r1, #0
 800981a:	4630      	mov	r0, r6
 800981c:	f7f6 fce8 	bl	80001f0 <memchr>
 8009820:	b108      	cbz	r0, 8009826 <_printf_i+0x1e6>
 8009822:	1b80      	subs	r0, r0, r6
 8009824:	6060      	str	r0, [r4, #4]
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	2300      	movs	r3, #0
 800982c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009830:	e7aa      	b.n	8009788 <_printf_i+0x148>
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	4632      	mov	r2, r6
 8009836:	4649      	mov	r1, r9
 8009838:	4640      	mov	r0, r8
 800983a:	47d0      	blx	sl
 800983c:	3001      	adds	r0, #1
 800983e:	d0ad      	beq.n	800979c <_printf_i+0x15c>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	079b      	lsls	r3, r3, #30
 8009844:	d413      	bmi.n	800986e <_printf_i+0x22e>
 8009846:	68e0      	ldr	r0, [r4, #12]
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	4298      	cmp	r0, r3
 800984c:	bfb8      	it	lt
 800984e:	4618      	movlt	r0, r3
 8009850:	e7a6      	b.n	80097a0 <_printf_i+0x160>
 8009852:	2301      	movs	r3, #1
 8009854:	4632      	mov	r2, r6
 8009856:	4649      	mov	r1, r9
 8009858:	4640      	mov	r0, r8
 800985a:	47d0      	blx	sl
 800985c:	3001      	adds	r0, #1
 800985e:	d09d      	beq.n	800979c <_printf_i+0x15c>
 8009860:	3501      	adds	r5, #1
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	9903      	ldr	r1, [sp, #12]
 8009866:	1a5b      	subs	r3, r3, r1
 8009868:	42ab      	cmp	r3, r5
 800986a:	dcf2      	bgt.n	8009852 <_printf_i+0x212>
 800986c:	e7eb      	b.n	8009846 <_printf_i+0x206>
 800986e:	2500      	movs	r5, #0
 8009870:	f104 0619 	add.w	r6, r4, #25
 8009874:	e7f5      	b.n	8009862 <_printf_i+0x222>
 8009876:	bf00      	nop
 8009878:	0800f139 	.word	0x0800f139
 800987c:	0800f14a 	.word	0x0800f14a

08009880 <_scanf_float>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	b087      	sub	sp, #28
 8009886:	4617      	mov	r7, r2
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	688b      	ldr	r3, [r1, #8]
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009892:	bf81      	itttt	hi
 8009894:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009898:	eb03 0b05 	addhi.w	fp, r3, r5
 800989c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80098a0:	608b      	strhi	r3, [r1, #8]
 80098a2:	680b      	ldr	r3, [r1, #0]
 80098a4:	460a      	mov	r2, r1
 80098a6:	f04f 0500 	mov.w	r5, #0
 80098aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80098ae:	f842 3b1c 	str.w	r3, [r2], #28
 80098b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098b6:	4680      	mov	r8, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	bf98      	it	ls
 80098bc:	f04f 0b00 	movls.w	fp, #0
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	4616      	mov	r6, r2
 80098c4:	46aa      	mov	sl, r5
 80098c6:	46a9      	mov	r9, r5
 80098c8:	9502      	str	r5, [sp, #8]
 80098ca:	68a2      	ldr	r2, [r4, #8]
 80098cc:	b152      	cbz	r2, 80098e4 <_scanf_float+0x64>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80098d4:	d864      	bhi.n	80099a0 <_scanf_float+0x120>
 80098d6:	2b40      	cmp	r3, #64	@ 0x40
 80098d8:	d83c      	bhi.n	8009954 <_scanf_float+0xd4>
 80098da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80098de:	b2c8      	uxtb	r0, r1
 80098e0:	280e      	cmp	r0, #14
 80098e2:	d93a      	bls.n	800995a <_scanf_float+0xda>
 80098e4:	f1b9 0f00 	cmp.w	r9, #0
 80098e8:	d003      	beq.n	80098f2 <_scanf_float+0x72>
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098f6:	f1ba 0f01 	cmp.w	sl, #1
 80098fa:	f200 8117 	bhi.w	8009b2c <_scanf_float+0x2ac>
 80098fe:	9b01      	ldr	r3, [sp, #4]
 8009900:	429e      	cmp	r6, r3
 8009902:	f200 8108 	bhi.w	8009b16 <_scanf_float+0x296>
 8009906:	2001      	movs	r0, #1
 8009908:	b007      	add	sp, #28
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009912:	2a0d      	cmp	r2, #13
 8009914:	d8e6      	bhi.n	80098e4 <_scanf_float+0x64>
 8009916:	a101      	add	r1, pc, #4	@ (adr r1, 800991c <_scanf_float+0x9c>)
 8009918:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800991c:	08009a63 	.word	0x08009a63
 8009920:	080098e5 	.word	0x080098e5
 8009924:	080098e5 	.word	0x080098e5
 8009928:	080098e5 	.word	0x080098e5
 800992c:	08009ac3 	.word	0x08009ac3
 8009930:	08009a9b 	.word	0x08009a9b
 8009934:	080098e5 	.word	0x080098e5
 8009938:	080098e5 	.word	0x080098e5
 800993c:	08009a71 	.word	0x08009a71
 8009940:	080098e5 	.word	0x080098e5
 8009944:	080098e5 	.word	0x080098e5
 8009948:	080098e5 	.word	0x080098e5
 800994c:	080098e5 	.word	0x080098e5
 8009950:	08009a29 	.word	0x08009a29
 8009954:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009958:	e7db      	b.n	8009912 <_scanf_float+0x92>
 800995a:	290e      	cmp	r1, #14
 800995c:	d8c2      	bhi.n	80098e4 <_scanf_float+0x64>
 800995e:	a001      	add	r0, pc, #4	@ (adr r0, 8009964 <_scanf_float+0xe4>)
 8009960:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009964:	08009a19 	.word	0x08009a19
 8009968:	080098e5 	.word	0x080098e5
 800996c:	08009a19 	.word	0x08009a19
 8009970:	08009aaf 	.word	0x08009aaf
 8009974:	080098e5 	.word	0x080098e5
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099ff 	.word	0x080099ff
 8009980:	080099ff 	.word	0x080099ff
 8009984:	080099ff 	.word	0x080099ff
 8009988:	080099ff 	.word	0x080099ff
 800998c:	080099ff 	.word	0x080099ff
 8009990:	080099ff 	.word	0x080099ff
 8009994:	080099ff 	.word	0x080099ff
 8009998:	080099ff 	.word	0x080099ff
 800999c:	080099ff 	.word	0x080099ff
 80099a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80099a2:	d809      	bhi.n	80099b8 <_scanf_float+0x138>
 80099a4:	2b60      	cmp	r3, #96	@ 0x60
 80099a6:	d8b2      	bhi.n	800990e <_scanf_float+0x8e>
 80099a8:	2b54      	cmp	r3, #84	@ 0x54
 80099aa:	d07b      	beq.n	8009aa4 <_scanf_float+0x224>
 80099ac:	2b59      	cmp	r3, #89	@ 0x59
 80099ae:	d199      	bne.n	80098e4 <_scanf_float+0x64>
 80099b0:	2d07      	cmp	r5, #7
 80099b2:	d197      	bne.n	80098e4 <_scanf_float+0x64>
 80099b4:	2508      	movs	r5, #8
 80099b6:	e02c      	b.n	8009a12 <_scanf_float+0x192>
 80099b8:	2b74      	cmp	r3, #116	@ 0x74
 80099ba:	d073      	beq.n	8009aa4 <_scanf_float+0x224>
 80099bc:	2b79      	cmp	r3, #121	@ 0x79
 80099be:	e7f6      	b.n	80099ae <_scanf_float+0x12e>
 80099c0:	6821      	ldr	r1, [r4, #0]
 80099c2:	05c8      	lsls	r0, r1, #23
 80099c4:	d51b      	bpl.n	80099fe <_scanf_float+0x17e>
 80099c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80099ca:	6021      	str	r1, [r4, #0]
 80099cc:	f109 0901 	add.w	r9, r9, #1
 80099d0:	f1bb 0f00 	cmp.w	fp, #0
 80099d4:	d003      	beq.n	80099de <_scanf_float+0x15e>
 80099d6:	3201      	adds	r2, #1
 80099d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099dc:	60a2      	str	r2, [r4, #8]
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	60a3      	str	r3, [r4, #8]
 80099e4:	6923      	ldr	r3, [r4, #16]
 80099e6:	3301      	adds	r3, #1
 80099e8:	6123      	str	r3, [r4, #16]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	607b      	str	r3, [r7, #4]
 80099f2:	f340 8087 	ble.w	8009b04 <_scanf_float+0x284>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	3301      	adds	r3, #1
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	e765      	b.n	80098ca <_scanf_float+0x4a>
 80099fe:	eb1a 0105 	adds.w	r1, sl, r5
 8009a02:	f47f af6f 	bne.w	80098e4 <_scanf_float+0x64>
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	460d      	mov	r5, r1
 8009a10:	468a      	mov	sl, r1
 8009a12:	f806 3b01 	strb.w	r3, [r6], #1
 8009a16:	e7e2      	b.n	80099de <_scanf_float+0x15e>
 8009a18:	6822      	ldr	r2, [r4, #0]
 8009a1a:	0610      	lsls	r0, r2, #24
 8009a1c:	f57f af62 	bpl.w	80098e4 <_scanf_float+0x64>
 8009a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	e7f4      	b.n	8009a12 <_scanf_float+0x192>
 8009a28:	f1ba 0f00 	cmp.w	sl, #0
 8009a2c:	d10e      	bne.n	8009a4c <_scanf_float+0x1cc>
 8009a2e:	f1b9 0f00 	cmp.w	r9, #0
 8009a32:	d10e      	bne.n	8009a52 <_scanf_float+0x1d2>
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a3a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a3e:	d108      	bne.n	8009a52 <_scanf_float+0x1d2>
 8009a40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	f04f 0a01 	mov.w	sl, #1
 8009a4a:	e7e2      	b.n	8009a12 <_scanf_float+0x192>
 8009a4c:	f1ba 0f02 	cmp.w	sl, #2
 8009a50:	d055      	beq.n	8009afe <_scanf_float+0x27e>
 8009a52:	2d01      	cmp	r5, #1
 8009a54:	d002      	beq.n	8009a5c <_scanf_float+0x1dc>
 8009a56:	2d04      	cmp	r5, #4
 8009a58:	f47f af44 	bne.w	80098e4 <_scanf_float+0x64>
 8009a5c:	3501      	adds	r5, #1
 8009a5e:	b2ed      	uxtb	r5, r5
 8009a60:	e7d7      	b.n	8009a12 <_scanf_float+0x192>
 8009a62:	f1ba 0f01 	cmp.w	sl, #1
 8009a66:	f47f af3d 	bne.w	80098e4 <_scanf_float+0x64>
 8009a6a:	f04f 0a02 	mov.w	sl, #2
 8009a6e:	e7d0      	b.n	8009a12 <_scanf_float+0x192>
 8009a70:	b97d      	cbnz	r5, 8009a92 <_scanf_float+0x212>
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	f47f af38 	bne.w	80098ea <_scanf_float+0x6a>
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a84:	f040 8108 	bne.w	8009c98 <_scanf_float+0x418>
 8009a88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a8c:	6022      	str	r2, [r4, #0]
 8009a8e:	2501      	movs	r5, #1
 8009a90:	e7bf      	b.n	8009a12 <_scanf_float+0x192>
 8009a92:	2d03      	cmp	r5, #3
 8009a94:	d0e2      	beq.n	8009a5c <_scanf_float+0x1dc>
 8009a96:	2d05      	cmp	r5, #5
 8009a98:	e7de      	b.n	8009a58 <_scanf_float+0x1d8>
 8009a9a:	2d02      	cmp	r5, #2
 8009a9c:	f47f af22 	bne.w	80098e4 <_scanf_float+0x64>
 8009aa0:	2503      	movs	r5, #3
 8009aa2:	e7b6      	b.n	8009a12 <_scanf_float+0x192>
 8009aa4:	2d06      	cmp	r5, #6
 8009aa6:	f47f af1d 	bne.w	80098e4 <_scanf_float+0x64>
 8009aaa:	2507      	movs	r5, #7
 8009aac:	e7b1      	b.n	8009a12 <_scanf_float+0x192>
 8009aae:	6822      	ldr	r2, [r4, #0]
 8009ab0:	0591      	lsls	r1, r2, #22
 8009ab2:	f57f af17 	bpl.w	80098e4 <_scanf_float+0x64>
 8009ab6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009aba:	6022      	str	r2, [r4, #0]
 8009abc:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ac0:	e7a7      	b.n	8009a12 <_scanf_float+0x192>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009ac8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009acc:	d006      	beq.n	8009adc <_scanf_float+0x25c>
 8009ace:	0550      	lsls	r0, r2, #21
 8009ad0:	f57f af08 	bpl.w	80098e4 <_scanf_float+0x64>
 8009ad4:	f1b9 0f00 	cmp.w	r9, #0
 8009ad8:	f000 80de 	beq.w	8009c98 <_scanf_float+0x418>
 8009adc:	0591      	lsls	r1, r2, #22
 8009ade:	bf58      	it	pl
 8009ae0:	9902      	ldrpl	r1, [sp, #8]
 8009ae2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ae6:	bf58      	it	pl
 8009ae8:	eba9 0101 	subpl.w	r1, r9, r1
 8009aec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009af0:	bf58      	it	pl
 8009af2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	f04f 0900 	mov.w	r9, #0
 8009afc:	e789      	b.n	8009a12 <_scanf_float+0x192>
 8009afe:	f04f 0a03 	mov.w	sl, #3
 8009b02:	e786      	b.n	8009a12 <_scanf_float+0x192>
 8009b04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4798      	blx	r3
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f aedb 	beq.w	80098ca <_scanf_float+0x4a>
 8009b14:	e6e6      	b.n	80098e4 <_scanf_float+0x64>
 8009b16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b1e:	463a      	mov	r2, r7
 8009b20:	4640      	mov	r0, r8
 8009b22:	4798      	blx	r3
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	e6e8      	b.n	80098fe <_scanf_float+0x7e>
 8009b2c:	1e6b      	subs	r3, r5, #1
 8009b2e:	2b06      	cmp	r3, #6
 8009b30:	d824      	bhi.n	8009b7c <_scanf_float+0x2fc>
 8009b32:	2d02      	cmp	r5, #2
 8009b34:	d836      	bhi.n	8009ba4 <_scanf_float+0x324>
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	429e      	cmp	r6, r3
 8009b3a:	f67f aee4 	bls.w	8009906 <_scanf_float+0x86>
 8009b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b46:	463a      	mov	r2, r7
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4798      	blx	r3
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	6123      	str	r3, [r4, #16]
 8009b52:	e7f0      	b.n	8009b36 <_scanf_float+0x2b6>
 8009b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009b5c:	463a      	mov	r2, r7
 8009b5e:	4640      	mov	r0, r8
 8009b60:	4798      	blx	r3
 8009b62:	6923      	ldr	r3, [r4, #16]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b6c:	fa5f fa8a 	uxtb.w	sl, sl
 8009b70:	f1ba 0f02 	cmp.w	sl, #2
 8009b74:	d1ee      	bne.n	8009b54 <_scanf_float+0x2d4>
 8009b76:	3d03      	subs	r5, #3
 8009b78:	b2ed      	uxtb	r5, r5
 8009b7a:	1b76      	subs	r6, r6, r5
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	05da      	lsls	r2, r3, #23
 8009b80:	d530      	bpl.n	8009be4 <_scanf_float+0x364>
 8009b82:	055b      	lsls	r3, r3, #21
 8009b84:	d511      	bpl.n	8009baa <_scanf_float+0x32a>
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	f67f aebc 	bls.w	8009906 <_scanf_float+0x86>
 8009b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b96:	463a      	mov	r2, r7
 8009b98:	4640      	mov	r0, r8
 8009b9a:	4798      	blx	r3
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	6123      	str	r3, [r4, #16]
 8009ba2:	e7f0      	b.n	8009b86 <_scanf_float+0x306>
 8009ba4:	46aa      	mov	sl, r5
 8009ba6:	46b3      	mov	fp, r6
 8009ba8:	e7de      	b.n	8009b68 <_scanf_float+0x2e8>
 8009baa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	2965      	cmp	r1, #101	@ 0x65
 8009bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bb6:	f106 35ff 	add.w	r5, r6, #4294967295
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	d00c      	beq.n	8009bd8 <_scanf_float+0x358>
 8009bbe:	2945      	cmp	r1, #69	@ 0x45
 8009bc0:	d00a      	beq.n	8009bd8 <_scanf_float+0x358>
 8009bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4798      	blx	r3
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	1eb5      	subs	r5, r6, #2
 8009bd6:	6123      	str	r3, [r4, #16]
 8009bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bdc:	463a      	mov	r2, r7
 8009bde:	4640      	mov	r0, r8
 8009be0:	4798      	blx	r3
 8009be2:	462e      	mov	r6, r5
 8009be4:	6822      	ldr	r2, [r4, #0]
 8009be6:	f012 0210 	ands.w	r2, r2, #16
 8009bea:	d001      	beq.n	8009bf0 <_scanf_float+0x370>
 8009bec:	2000      	movs	r0, #0
 8009bee:	e68b      	b.n	8009908 <_scanf_float+0x88>
 8009bf0:	7032      	strb	r2, [r6, #0]
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bfc:	d11c      	bne.n	8009c38 <_scanf_float+0x3b8>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	454b      	cmp	r3, r9
 8009c02:	eba3 0209 	sub.w	r2, r3, r9
 8009c06:	d123      	bne.n	8009c50 <_scanf_float+0x3d0>
 8009c08:	9901      	ldr	r1, [sp, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	f7ff f947 	bl	8008ea0 <_strtod_r>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	6821      	ldr	r1, [r4, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f011 0f02 	tst.w	r1, #2
 8009c1c:	ec57 6b10 	vmov	r6, r7, d0
 8009c20:	f103 0204 	add.w	r2, r3, #4
 8009c24:	d01f      	beq.n	8009c66 <_scanf_float+0x3e6>
 8009c26:	9903      	ldr	r1, [sp, #12]
 8009c28:	600a      	str	r2, [r1, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	e9c3 6700 	strd	r6, r7, [r3]
 8009c30:	68e3      	ldr	r3, [r4, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60e3      	str	r3, [r4, #12]
 8009c36:	e7d9      	b.n	8009bec <_scanf_float+0x36c>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0e4      	beq.n	8009c08 <_scanf_float+0x388>
 8009c3e:	9905      	ldr	r1, [sp, #20]
 8009c40:	230a      	movs	r3, #10
 8009c42:	3101      	adds	r1, #1
 8009c44:	4640      	mov	r0, r8
 8009c46:	f7ff f9b7 	bl	8008fb8 <_strtol_r>
 8009c4a:	9b04      	ldr	r3, [sp, #16]
 8009c4c:	9e05      	ldr	r6, [sp, #20]
 8009c4e:	1ac2      	subs	r2, r0, r3
 8009c50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009c54:	429e      	cmp	r6, r3
 8009c56:	bf28      	it	cs
 8009c58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009c5c:	4910      	ldr	r1, [pc, #64]	@ (8009ca0 <_scanf_float+0x420>)
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f990 	bl	8009f84 <siprintf>
 8009c64:	e7d0      	b.n	8009c08 <_scanf_float+0x388>
 8009c66:	f011 0f04 	tst.w	r1, #4
 8009c6a:	9903      	ldr	r1, [sp, #12]
 8009c6c:	600a      	str	r2, [r1, #0]
 8009c6e:	d1dc      	bne.n	8009c2a <_scanf_float+0x3aa>
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	4632      	mov	r2, r6
 8009c74:	463b      	mov	r3, r7
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	f7f6 ff67 	bl	8000b4c <__aeabi_dcmpun>
 8009c7e:	b128      	cbz	r0, 8009c8c <_scanf_float+0x40c>
 8009c80:	4808      	ldr	r0, [pc, #32]	@ (8009ca4 <_scanf_float+0x424>)
 8009c82:	f001 f965 	bl	800af50 <nanf>
 8009c86:	ed85 0a00 	vstr	s0, [r5]
 8009c8a:	e7d1      	b.n	8009c30 <_scanf_float+0x3b0>
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 ffba 	bl	8000c08 <__aeabi_d2f>
 8009c94:	6028      	str	r0, [r5, #0]
 8009c96:	e7cb      	b.n	8009c30 <_scanf_float+0x3b0>
 8009c98:	f04f 0900 	mov.w	r9, #0
 8009c9c:	e629      	b.n	80098f2 <_scanf_float+0x72>
 8009c9e:	bf00      	nop
 8009ca0:	0800f15b 	.word	0x0800f15b
 8009ca4:	0800e920 	.word	0x0800e920

08009ca8 <std>:
 8009ca8:	2300      	movs	r3, #0
 8009caa:	b510      	push	{r4, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	e9c0 3300 	strd	r3, r3, [r0]
 8009cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cb6:	6083      	str	r3, [r0, #8]
 8009cb8:	8181      	strh	r1, [r0, #12]
 8009cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cbc:	81c2      	strh	r2, [r0, #14]
 8009cbe:	6183      	str	r3, [r0, #24]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	2208      	movs	r2, #8
 8009cc4:	305c      	adds	r0, #92	@ 0x5c
 8009cc6:	f000 fa81 	bl	800a1cc <memset>
 8009cca:	4b0d      	ldr	r3, [pc, #52]	@ (8009d00 <std+0x58>)
 8009ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cce:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <std+0x5c>)
 8009cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <std+0x60>)
 8009cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <std+0x64>)
 8009cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <std+0x68>)
 8009cdc:	6224      	str	r4, [r4, #32]
 8009cde:	429c      	cmp	r4, r3
 8009ce0:	d006      	beq.n	8009cf0 <std+0x48>
 8009ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ce6:	4294      	cmp	r4, r2
 8009ce8:	d002      	beq.n	8009cf0 <std+0x48>
 8009cea:	33d0      	adds	r3, #208	@ 0xd0
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d105      	bne.n	8009cfc <std+0x54>
 8009cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf8:	f7f9 b999 	b.w	800302e <__retarget_lock_init_recursive>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800a019 	.word	0x0800a019
 8009d04:	0800a03f 	.word	0x0800a03f
 8009d08:	0800a077 	.word	0x0800a077
 8009d0c:	0800a09b 	.word	0x0800a09b
 8009d10:	20009478 	.word	0x20009478

08009d14 <stdio_exit_handler>:
 8009d14:	4a02      	ldr	r2, [pc, #8]	@ (8009d20 <stdio_exit_handler+0xc>)
 8009d16:	4903      	ldr	r1, [pc, #12]	@ (8009d24 <stdio_exit_handler+0x10>)
 8009d18:	4803      	ldr	r0, [pc, #12]	@ (8009d28 <stdio_exit_handler+0x14>)
 8009d1a:	f000 b869 	b.w	8009df0 <_fwalk_sglue>
 8009d1e:	bf00      	nop
 8009d20:	20000020 	.word	0x20000020
 8009d24:	0800da9d 	.word	0x0800da9d
 8009d28:	200001a4 	.word	0x200001a4

08009d2c <cleanup_stdio>:
 8009d2c:	6841      	ldr	r1, [r0, #4]
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d60 <cleanup_stdio+0x34>)
 8009d30:	4299      	cmp	r1, r3
 8009d32:	b510      	push	{r4, lr}
 8009d34:	4604      	mov	r4, r0
 8009d36:	d001      	beq.n	8009d3c <cleanup_stdio+0x10>
 8009d38:	f003 feb0 	bl	800da9c <_fflush_r>
 8009d3c:	68a1      	ldr	r1, [r4, #8]
 8009d3e:	4b09      	ldr	r3, [pc, #36]	@ (8009d64 <cleanup_stdio+0x38>)
 8009d40:	4299      	cmp	r1, r3
 8009d42:	d002      	beq.n	8009d4a <cleanup_stdio+0x1e>
 8009d44:	4620      	mov	r0, r4
 8009d46:	f003 fea9 	bl	800da9c <_fflush_r>
 8009d4a:	68e1      	ldr	r1, [r4, #12]
 8009d4c:	4b06      	ldr	r3, [pc, #24]	@ (8009d68 <cleanup_stdio+0x3c>)
 8009d4e:	4299      	cmp	r1, r3
 8009d50:	d004      	beq.n	8009d5c <cleanup_stdio+0x30>
 8009d52:	4620      	mov	r0, r4
 8009d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d58:	f003 bea0 	b.w	800da9c <_fflush_r>
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	bf00      	nop
 8009d60:	20009478 	.word	0x20009478
 8009d64:	200094e0 	.word	0x200094e0
 8009d68:	20009548 	.word	0x20009548

08009d6c <global_stdio_init.part.0>:
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d9c <global_stdio_init.part.0+0x30>)
 8009d70:	4c0b      	ldr	r4, [pc, #44]	@ (8009da0 <global_stdio_init.part.0+0x34>)
 8009d72:	4a0c      	ldr	r2, [pc, #48]	@ (8009da4 <global_stdio_init.part.0+0x38>)
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	4620      	mov	r0, r4
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2104      	movs	r1, #4
 8009d7c:	f7ff ff94 	bl	8009ca8 <std>
 8009d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d84:	2201      	movs	r2, #1
 8009d86:	2109      	movs	r1, #9
 8009d88:	f7ff ff8e 	bl	8009ca8 <std>
 8009d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d90:	2202      	movs	r2, #2
 8009d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d96:	2112      	movs	r1, #18
 8009d98:	f7ff bf86 	b.w	8009ca8 <std>
 8009d9c:	200095b0 	.word	0x200095b0
 8009da0:	20009478 	.word	0x20009478
 8009da4:	08009d15 	.word	0x08009d15

08009da8 <__sfp_lock_acquire>:
 8009da8:	4801      	ldr	r0, [pc, #4]	@ (8009db0 <__sfp_lock_acquire+0x8>)
 8009daa:	f7f9 b95c 	b.w	8003066 <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	2000433c 	.word	0x2000433c

08009db4 <__sfp_lock_release>:
 8009db4:	4801      	ldr	r0, [pc, #4]	@ (8009dbc <__sfp_lock_release+0x8>)
 8009db6:	f7f9 b962 	b.w	800307e <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	2000433c 	.word	0x2000433c

08009dc0 <__sinit>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	f7ff fff0 	bl	8009da8 <__sfp_lock_acquire>
 8009dc8:	6a23      	ldr	r3, [r4, #32]
 8009dca:	b11b      	cbz	r3, 8009dd4 <__sinit+0x14>
 8009dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd0:	f7ff bff0 	b.w	8009db4 <__sfp_lock_release>
 8009dd4:	4b04      	ldr	r3, [pc, #16]	@ (8009de8 <__sinit+0x28>)
 8009dd6:	6223      	str	r3, [r4, #32]
 8009dd8:	4b04      	ldr	r3, [pc, #16]	@ (8009dec <__sinit+0x2c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f5      	bne.n	8009dcc <__sinit+0xc>
 8009de0:	f7ff ffc4 	bl	8009d6c <global_stdio_init.part.0>
 8009de4:	e7f2      	b.n	8009dcc <__sinit+0xc>
 8009de6:	bf00      	nop
 8009de8:	08009d2d 	.word	0x08009d2d
 8009dec:	200095b0 	.word	0x200095b0

08009df0 <_fwalk_sglue>:
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	4607      	mov	r7, r0
 8009df6:	4688      	mov	r8, r1
 8009df8:	4614      	mov	r4, r2
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e00:	f1b9 0901 	subs.w	r9, r9, #1
 8009e04:	d505      	bpl.n	8009e12 <_fwalk_sglue+0x22>
 8009e06:	6824      	ldr	r4, [r4, #0]
 8009e08:	2c00      	cmp	r4, #0
 8009e0a:	d1f7      	bne.n	8009dfc <_fwalk_sglue+0xc>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e12:	89ab      	ldrh	r3, [r5, #12]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d907      	bls.n	8009e28 <_fwalk_sglue+0x38>
 8009e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	d003      	beq.n	8009e28 <_fwalk_sglue+0x38>
 8009e20:	4629      	mov	r1, r5
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c0      	blx	r8
 8009e26:	4306      	orrs	r6, r0
 8009e28:	3568      	adds	r5, #104	@ 0x68
 8009e2a:	e7e9      	b.n	8009e00 <_fwalk_sglue+0x10>

08009e2c <iprintf>:
 8009e2c:	b40f      	push	{r0, r1, r2, r3}
 8009e2e:	b507      	push	{r0, r1, r2, lr}
 8009e30:	4906      	ldr	r1, [pc, #24]	@ (8009e4c <iprintf+0x20>)
 8009e32:	ab04      	add	r3, sp, #16
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e3a:	6881      	ldr	r1, [r0, #8]
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f003 fb43 	bl	800d4c8 <_vfiprintf_r>
 8009e42:	b003      	add	sp, #12
 8009e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e48:	b004      	add	sp, #16
 8009e4a:	4770      	bx	lr
 8009e4c:	200001a0 	.word	0x200001a0

08009e50 <putchar>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	@ (8009e5c <putchar+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	6882      	ldr	r2, [r0, #8]
 8009e58:	f003 beaa 	b.w	800dbb0 <_putc_r>
 8009e5c:	200001a0 	.word	0x200001a0

08009e60 <_puts_r>:
 8009e60:	6a03      	ldr	r3, [r0, #32]
 8009e62:	b570      	push	{r4, r5, r6, lr}
 8009e64:	6884      	ldr	r4, [r0, #8]
 8009e66:	4605      	mov	r5, r0
 8009e68:	460e      	mov	r6, r1
 8009e6a:	b90b      	cbnz	r3, 8009e70 <_puts_r+0x10>
 8009e6c:	f7ff ffa8 	bl	8009dc0 <__sinit>
 8009e70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e72:	07db      	lsls	r3, r3, #31
 8009e74:	d405      	bmi.n	8009e82 <_puts_r+0x22>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	0598      	lsls	r0, r3, #22
 8009e7a:	d402      	bmi.n	8009e82 <_puts_r+0x22>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e7e:	f7f9 f8f2 	bl	8003066 <__retarget_lock_acquire_recursive>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	0719      	lsls	r1, r3, #28
 8009e86:	d502      	bpl.n	8009e8e <_puts_r+0x2e>
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d135      	bne.n	8009efa <_puts_r+0x9a>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 f945 	bl	800a120 <__swsetup_r>
 8009e96:	b380      	cbz	r0, 8009efa <_puts_r+0x9a>
 8009e98:	f04f 35ff 	mov.w	r5, #4294967295
 8009e9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e9e:	07da      	lsls	r2, r3, #31
 8009ea0:	d405      	bmi.n	8009eae <_puts_r+0x4e>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	059b      	lsls	r3, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_puts_r+0x4e>
 8009ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009eaa:	f7f9 f8e8 	bl	800307e <__retarget_lock_release_recursive>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	da04      	bge.n	8009ec0 <_puts_r+0x60>
 8009eb6:	69a2      	ldr	r2, [r4, #24]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	dc17      	bgt.n	8009eec <_puts_r+0x8c>
 8009ebc:	290a      	cmp	r1, #10
 8009ebe:	d015      	beq.n	8009eec <_puts_r+0x8c>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	7019      	strb	r1, [r3, #0]
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	60a3      	str	r3, [r4, #8]
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	d1ed      	bne.n	8009eb2 <_puts_r+0x52>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da11      	bge.n	8009efe <_puts_r+0x9e>
 8009eda:	4622      	mov	r2, r4
 8009edc:	210a      	movs	r1, #10
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 f8df 	bl	800a0a2 <__swbuf_r>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0d7      	beq.n	8009e98 <_puts_r+0x38>
 8009ee8:	250a      	movs	r5, #10
 8009eea:	e7d7      	b.n	8009e9c <_puts_r+0x3c>
 8009eec:	4622      	mov	r2, r4
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 f8d7 	bl	800a0a2 <__swbuf_r>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d1e7      	bne.n	8009ec8 <_puts_r+0x68>
 8009ef8:	e7ce      	b.n	8009e98 <_puts_r+0x38>
 8009efa:	3e01      	subs	r6, #1
 8009efc:	e7e4      	b.n	8009ec8 <_puts_r+0x68>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	6022      	str	r2, [r4, #0]
 8009f04:	220a      	movs	r2, #10
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e7ee      	b.n	8009ee8 <_puts_r+0x88>
	...

08009f0c <puts>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <puts+0xc>)
 8009f0e:	4601      	mov	r1, r0
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f7ff bfa5 	b.w	8009e60 <_puts_r>
 8009f16:	bf00      	nop
 8009f18:	200001a0 	.word	0x200001a0

08009f1c <sniprintf>:
 8009f1c:	b40c      	push	{r2, r3}
 8009f1e:	b530      	push	{r4, r5, lr}
 8009f20:	4b17      	ldr	r3, [pc, #92]	@ (8009f80 <sniprintf+0x64>)
 8009f22:	1e0c      	subs	r4, r1, #0
 8009f24:	681d      	ldr	r5, [r3, #0]
 8009f26:	b09d      	sub	sp, #116	@ 0x74
 8009f28:	da08      	bge.n	8009f3c <sniprintf+0x20>
 8009f2a:	238b      	movs	r3, #139	@ 0x8b
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	b01d      	add	sp, #116	@ 0x74
 8009f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f38:	b002      	add	sp, #8
 8009f3a:	4770      	bx	lr
 8009f3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f44:	bf14      	ite	ne
 8009f46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f4a:	4623      	moveq	r3, r4
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	9307      	str	r3, [sp, #28]
 8009f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f54:	9002      	str	r0, [sp, #8]
 8009f56:	9006      	str	r0, [sp, #24]
 8009f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009f5e:	ab21      	add	r3, sp, #132	@ 0x84
 8009f60:	a902      	add	r1, sp, #8
 8009f62:	4628      	mov	r0, r5
 8009f64:	9301      	str	r3, [sp, #4]
 8009f66:	f002 ffbd 	bl	800cee4 <_svfiprintf_r>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	bfbc      	itt	lt
 8009f6e:	238b      	movlt	r3, #139	@ 0x8b
 8009f70:	602b      	strlt	r3, [r5, #0]
 8009f72:	2c00      	cmp	r4, #0
 8009f74:	d0dd      	beq.n	8009f32 <sniprintf+0x16>
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	701a      	strb	r2, [r3, #0]
 8009f7c:	e7d9      	b.n	8009f32 <sniprintf+0x16>
 8009f7e:	bf00      	nop
 8009f80:	200001a0 	.word	0x200001a0

08009f84 <siprintf>:
 8009f84:	b40e      	push	{r1, r2, r3}
 8009f86:	b500      	push	{lr}
 8009f88:	b09c      	sub	sp, #112	@ 0x70
 8009f8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f8c:	9002      	str	r0, [sp, #8]
 8009f8e:	9006      	str	r0, [sp, #24]
 8009f90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f94:	4809      	ldr	r0, [pc, #36]	@ (8009fbc <siprintf+0x38>)
 8009f96:	9107      	str	r1, [sp, #28]
 8009f98:	9104      	str	r1, [sp, #16]
 8009f9a:	4909      	ldr	r1, [pc, #36]	@ (8009fc0 <siprintf+0x3c>)
 8009f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa0:	9105      	str	r1, [sp, #20]
 8009fa2:	6800      	ldr	r0, [r0, #0]
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	a902      	add	r1, sp, #8
 8009fa8:	f002 ff9c 	bl	800cee4 <_svfiprintf_r>
 8009fac:	9b02      	ldr	r3, [sp, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	b01c      	add	sp, #112	@ 0x70
 8009fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb8:	b003      	add	sp, #12
 8009fba:	4770      	bx	lr
 8009fbc:	200001a0 	.word	0x200001a0
 8009fc0:	ffff0208 	.word	0xffff0208

08009fc4 <siscanf>:
 8009fc4:	b40e      	push	{r1, r2, r3}
 8009fc6:	b530      	push	{r4, r5, lr}
 8009fc8:	b09c      	sub	sp, #112	@ 0x70
 8009fca:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009fcc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009fd0:	f854 5b04 	ldr.w	r5, [r4], #4
 8009fd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009fd8:	9002      	str	r0, [sp, #8]
 8009fda:	9006      	str	r0, [sp, #24]
 8009fdc:	f7f6 f958 	bl	8000290 <strlen>
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	@ (800a010 <siscanf+0x4c>)
 8009fe2:	9003      	str	r0, [sp, #12]
 8009fe4:	9007      	str	r0, [sp, #28]
 8009fe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe8:	480a      	ldr	r0, [pc, #40]	@ (800a014 <siscanf+0x50>)
 8009fea:	9401      	str	r4, [sp, #4]
 8009fec:	2300      	movs	r3, #0
 8009fee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ff0:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ff6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	a902      	add	r1, sp, #8
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	f003 f8c3 	bl	800d18c <__ssvfiscanf_r>
 800a006:	b01c      	add	sp, #112	@ 0x70
 800a008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a00c:	b003      	add	sp, #12
 800a00e:	4770      	bx	lr
 800a010:	0800a03b 	.word	0x0800a03b
 800a014:	200001a0 	.word	0x200001a0

0800a018 <__sread>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a020:	f000 ff18 	bl	800ae54 <_read_r>
 800a024:	2800      	cmp	r0, #0
 800a026:	bfab      	itete	ge
 800a028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a02a:	89a3      	ldrhlt	r3, [r4, #12]
 800a02c:	181b      	addge	r3, r3, r0
 800a02e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a032:	bfac      	ite	ge
 800a034:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a036:	81a3      	strhlt	r3, [r4, #12]
 800a038:	bd10      	pop	{r4, pc}

0800a03a <__seofread>:
 800a03a:	2000      	movs	r0, #0
 800a03c:	4770      	bx	lr

0800a03e <__swrite>:
 800a03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a042:	461f      	mov	r7, r3
 800a044:	898b      	ldrh	r3, [r1, #12]
 800a046:	05db      	lsls	r3, r3, #23
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	4616      	mov	r6, r2
 800a04e:	d505      	bpl.n	800a05c <__swrite+0x1e>
 800a050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a054:	2302      	movs	r3, #2
 800a056:	2200      	movs	r2, #0
 800a058:	f000 feea 	bl	800ae30 <_lseek_r>
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	4628      	mov	r0, r5
 800a06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a072:	f000 bf11 	b.w	800ae98 <_write_r>

0800a076 <__sseek>:
 800a076:	b510      	push	{r4, lr}
 800a078:	460c      	mov	r4, r1
 800a07a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07e:	f000 fed7 	bl	800ae30 <_lseek_r>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	bf15      	itete	ne
 800a088:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a08a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a08e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a092:	81a3      	strheq	r3, [r4, #12]
 800a094:	bf18      	it	ne
 800a096:	81a3      	strhne	r3, [r4, #12]
 800a098:	bd10      	pop	{r4, pc}

0800a09a <__sclose>:
 800a09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09e:	f000 be61 	b.w	800ad64 <_close_r>

0800a0a2 <__swbuf_r>:
 800a0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	b118      	cbz	r0, 800a0b4 <__swbuf_r+0x12>
 800a0ac:	6a03      	ldr	r3, [r0, #32]
 800a0ae:	b90b      	cbnz	r3, 800a0b4 <__swbuf_r+0x12>
 800a0b0:	f7ff fe86 	bl	8009dc0 <__sinit>
 800a0b4:	69a3      	ldr	r3, [r4, #24]
 800a0b6:	60a3      	str	r3, [r4, #8]
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	071a      	lsls	r2, r3, #28
 800a0bc:	d501      	bpl.n	800a0c2 <__swbuf_r+0x20>
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	b943      	cbnz	r3, 800a0d4 <__swbuf_r+0x32>
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 f82b 	bl	800a120 <__swsetup_r>
 800a0ca:	b118      	cbz	r0, 800a0d4 <__swbuf_r+0x32>
 800a0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	6922      	ldr	r2, [r4, #16]
 800a0d8:	1a98      	subs	r0, r3, r2
 800a0da:	6963      	ldr	r3, [r4, #20]
 800a0dc:	b2f6      	uxtb	r6, r6
 800a0de:	4283      	cmp	r3, r0
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	dc05      	bgt.n	800a0f0 <__swbuf_r+0x4e>
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f003 fcd8 	bl	800da9c <_fflush_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1ed      	bne.n	800a0cc <__swbuf_r+0x2a>
 800a0f0:	68a3      	ldr	r3, [r4, #8]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	60a3      	str	r3, [r4, #8]
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	6022      	str	r2, [r4, #0]
 800a0fc:	701e      	strb	r6, [r3, #0]
 800a0fe:	6962      	ldr	r2, [r4, #20]
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	429a      	cmp	r2, r3
 800a104:	d004      	beq.n	800a110 <__swbuf_r+0x6e>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	07db      	lsls	r3, r3, #31
 800a10a:	d5e1      	bpl.n	800a0d0 <__swbuf_r+0x2e>
 800a10c:	2e0a      	cmp	r6, #10
 800a10e:	d1df      	bne.n	800a0d0 <__swbuf_r+0x2e>
 800a110:	4621      	mov	r1, r4
 800a112:	4628      	mov	r0, r5
 800a114:	f003 fcc2 	bl	800da9c <_fflush_r>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0d9      	beq.n	800a0d0 <__swbuf_r+0x2e>
 800a11c:	e7d6      	b.n	800a0cc <__swbuf_r+0x2a>
	...

0800a120 <__swsetup_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4b29      	ldr	r3, [pc, #164]	@ (800a1c8 <__swsetup_r+0xa8>)
 800a124:	4605      	mov	r5, r0
 800a126:	6818      	ldr	r0, [r3, #0]
 800a128:	460c      	mov	r4, r1
 800a12a:	b118      	cbz	r0, 800a134 <__swsetup_r+0x14>
 800a12c:	6a03      	ldr	r3, [r0, #32]
 800a12e:	b90b      	cbnz	r3, 800a134 <__swsetup_r+0x14>
 800a130:	f7ff fe46 	bl	8009dc0 <__sinit>
 800a134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a138:	0719      	lsls	r1, r3, #28
 800a13a:	d422      	bmi.n	800a182 <__swsetup_r+0x62>
 800a13c:	06da      	lsls	r2, r3, #27
 800a13e:	d407      	bmi.n	800a150 <__swsetup_r+0x30>
 800a140:	2209      	movs	r2, #9
 800a142:	602a      	str	r2, [r5, #0]
 800a144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	e033      	b.n	800a1b8 <__swsetup_r+0x98>
 800a150:	0758      	lsls	r0, r3, #29
 800a152:	d512      	bpl.n	800a17a <__swsetup_r+0x5a>
 800a154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a156:	b141      	cbz	r1, 800a16a <__swsetup_r+0x4a>
 800a158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a15c:	4299      	cmp	r1, r3
 800a15e:	d002      	beq.n	800a166 <__swsetup_r+0x46>
 800a160:	4628      	mov	r0, r5
 800a162:	f001 fd51 	bl	800bc08 <_free_r>
 800a166:	2300      	movs	r3, #0
 800a168:	6363      	str	r3, [r4, #52]	@ 0x34
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	2300      	movs	r3, #0
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	f043 0308 	orr.w	r3, r3, #8
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	b94b      	cbnz	r3, 800a19a <__swsetup_r+0x7a>
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a18c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a190:	d003      	beq.n	800a19a <__swsetup_r+0x7a>
 800a192:	4621      	mov	r1, r4
 800a194:	4628      	mov	r0, r5
 800a196:	f003 fccf 	bl	800db38 <__smakebuf_r>
 800a19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19e:	f013 0201 	ands.w	r2, r3, #1
 800a1a2:	d00a      	beq.n	800a1ba <__swsetup_r+0x9a>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	60a2      	str	r2, [r4, #8]
 800a1a8:	6962      	ldr	r2, [r4, #20]
 800a1aa:	4252      	negs	r2, r2
 800a1ac:	61a2      	str	r2, [r4, #24]
 800a1ae:	6922      	ldr	r2, [r4, #16]
 800a1b0:	b942      	cbnz	r2, 800a1c4 <__swsetup_r+0xa4>
 800a1b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1b6:	d1c5      	bne.n	800a144 <__swsetup_r+0x24>
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	0799      	lsls	r1, r3, #30
 800a1bc:	bf58      	it	pl
 800a1be:	6962      	ldrpl	r2, [r4, #20]
 800a1c0:	60a2      	str	r2, [r4, #8]
 800a1c2:	e7f4      	b.n	800a1ae <__swsetup_r+0x8e>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7f7      	b.n	800a1b8 <__swsetup_r+0x98>
 800a1c8:	200001a0 	.word	0x200001a0

0800a1cc <memset>:
 800a1cc:	4402      	add	r2, r0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d100      	bne.n	800a1d6 <memset+0xa>
 800a1d4:	4770      	bx	lr
 800a1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1da:	e7f9      	b.n	800a1d0 <memset+0x4>

0800a1dc <strchr>:
 800a1dc:	b2c9      	uxtb	r1, r1
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e6:	b112      	cbz	r2, 800a1ee <strchr+0x12>
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	d1f9      	bne.n	800a1e0 <strchr+0x4>
 800a1ec:	4770      	bx	lr
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	bf18      	it	ne
 800a1f2:	2000      	movne	r0, #0
 800a1f4:	4770      	bx	lr

0800a1f6 <strncmp>:
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	b16a      	cbz	r2, 800a216 <strncmp+0x20>
 800a1fa:	3901      	subs	r1, #1
 800a1fc:	1884      	adds	r4, r0, r2
 800a1fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a202:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a206:	429a      	cmp	r2, r3
 800a208:	d103      	bne.n	800a212 <strncmp+0x1c>
 800a20a:	42a0      	cmp	r0, r4
 800a20c:	d001      	beq.n	800a212 <strncmp+0x1c>
 800a20e:	2a00      	cmp	r2, #0
 800a210:	d1f5      	bne.n	800a1fe <strncmp+0x8>
 800a212:	1ad0      	subs	r0, r2, r3
 800a214:	bd10      	pop	{r4, pc}
 800a216:	4610      	mov	r0, r2
 800a218:	e7fc      	b.n	800a214 <strncmp+0x1e>

0800a21a <strncpy>:
 800a21a:	b510      	push	{r4, lr}
 800a21c:	3901      	subs	r1, #1
 800a21e:	4603      	mov	r3, r0
 800a220:	b132      	cbz	r2, 800a230 <strncpy+0x16>
 800a222:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a226:	f803 4b01 	strb.w	r4, [r3], #1
 800a22a:	3a01      	subs	r2, #1
 800a22c:	2c00      	cmp	r4, #0
 800a22e:	d1f7      	bne.n	800a220 <strncpy+0x6>
 800a230:	441a      	add	r2, r3
 800a232:	2100      	movs	r1, #0
 800a234:	4293      	cmp	r3, r2
 800a236:	d100      	bne.n	800a23a <strncpy+0x20>
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	f803 1b01 	strb.w	r1, [r3], #1
 800a23e:	e7f9      	b.n	800a234 <strncpy+0x1a>

0800a240 <strrchr>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800a246:	4603      	mov	r3, r0
 800a248:	d10e      	bne.n	800a268 <strrchr+0x28>
 800a24a:	4621      	mov	r1, r4
 800a24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a250:	f7ff bfc4 	b.w	800a1dc <strchr>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	4605      	mov	r5, r0
 800a258:	4621      	mov	r1, r4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff ffbe 	bl	800a1dc <strchr>
 800a260:	2800      	cmp	r0, #0
 800a262:	d1f7      	bne.n	800a254 <strrchr+0x14>
 800a264:	4628      	mov	r0, r5
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	2500      	movs	r5, #0
 800a26a:	e7f5      	b.n	800a258 <strrchr+0x18>

0800a26c <strstr>:
 800a26c:	780a      	ldrb	r2, [r1, #0]
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	b96a      	cbnz	r2, 800a28e <strstr+0x22>
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	429a      	cmp	r2, r3
 800a276:	d109      	bne.n	800a28c <strstr+0x20>
 800a278:	460c      	mov	r4, r1
 800a27a:	4605      	mov	r5, r0
 800a27c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0f6      	beq.n	800a272 <strstr+0x6>
 800a284:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a288:	429e      	cmp	r6, r3
 800a28a:	d0f7      	beq.n	800a27c <strstr+0x10>
 800a28c:	3001      	adds	r0, #1
 800a28e:	7803      	ldrb	r3, [r0, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1ef      	bne.n	800a274 <strstr+0x8>
 800a294:	4618      	mov	r0, r3
 800a296:	e7ec      	b.n	800a272 <strstr+0x6>

0800a298 <validate_structure>:
 800a298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29a:	6801      	ldr	r1, [r0, #0]
 800a29c:	293b      	cmp	r1, #59	@ 0x3b
 800a29e:	4604      	mov	r4, r0
 800a2a0:	d911      	bls.n	800a2c6 <validate_structure+0x2e>
 800a2a2:	223c      	movs	r2, #60	@ 0x3c
 800a2a4:	4668      	mov	r0, sp
 800a2a6:	f000 fe59 	bl	800af5c <div>
 800a2aa:	9a01      	ldr	r2, [sp, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	9900      	ldr	r1, [sp, #0]
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	440b      	add	r3, r1
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	bfbb      	ittet	lt
 800a2b8:	323c      	addlt	r2, #60	@ 0x3c
 800a2ba:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a2be:	6022      	strge	r2, [r4, #0]
 800a2c0:	6022      	strlt	r2, [r4, #0]
 800a2c2:	bfb8      	it	lt
 800a2c4:	6063      	strlt	r3, [r4, #4]
 800a2c6:	6861      	ldr	r1, [r4, #4]
 800a2c8:	293b      	cmp	r1, #59	@ 0x3b
 800a2ca:	d911      	bls.n	800a2f0 <validate_structure+0x58>
 800a2cc:	223c      	movs	r2, #60	@ 0x3c
 800a2ce:	4668      	mov	r0, sp
 800a2d0:	f000 fe44 	bl	800af5c <div>
 800a2d4:	9a01      	ldr	r2, [sp, #4]
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	9900      	ldr	r1, [sp, #0]
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	440b      	add	r3, r1
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	bfbb      	ittet	lt
 800a2e2:	323c      	addlt	r2, #60	@ 0x3c
 800a2e4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a2e8:	6062      	strge	r2, [r4, #4]
 800a2ea:	6062      	strlt	r2, [r4, #4]
 800a2ec:	bfb8      	it	lt
 800a2ee:	60a3      	strlt	r3, [r4, #8]
 800a2f0:	68a1      	ldr	r1, [r4, #8]
 800a2f2:	2917      	cmp	r1, #23
 800a2f4:	d911      	bls.n	800a31a <validate_structure+0x82>
 800a2f6:	2218      	movs	r2, #24
 800a2f8:	4668      	mov	r0, sp
 800a2fa:	f000 fe2f 	bl	800af5c <div>
 800a2fe:	9a01      	ldr	r2, [sp, #4]
 800a300:	68e3      	ldr	r3, [r4, #12]
 800a302:	9900      	ldr	r1, [sp, #0]
 800a304:	2a00      	cmp	r2, #0
 800a306:	440b      	add	r3, r1
 800a308:	60e3      	str	r3, [r4, #12]
 800a30a:	bfbb      	ittet	lt
 800a30c:	3218      	addlt	r2, #24
 800a30e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a312:	60a2      	strge	r2, [r4, #8]
 800a314:	60a2      	strlt	r2, [r4, #8]
 800a316:	bfb8      	it	lt
 800a318:	60e3      	strlt	r3, [r4, #12]
 800a31a:	6921      	ldr	r1, [r4, #16]
 800a31c:	290b      	cmp	r1, #11
 800a31e:	d911      	bls.n	800a344 <validate_structure+0xac>
 800a320:	220c      	movs	r2, #12
 800a322:	4668      	mov	r0, sp
 800a324:	f000 fe1a 	bl	800af5c <div>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	9900      	ldr	r1, [sp, #0]
 800a32e:	2a00      	cmp	r2, #0
 800a330:	440b      	add	r3, r1
 800a332:	6163      	str	r3, [r4, #20]
 800a334:	bfbb      	ittet	lt
 800a336:	320c      	addlt	r2, #12
 800a338:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800a33c:	6122      	strge	r2, [r4, #16]
 800a33e:	6122      	strlt	r2, [r4, #16]
 800a340:	bfb8      	it	lt
 800a342:	6163      	strlt	r3, [r4, #20]
 800a344:	6963      	ldr	r3, [r4, #20]
 800a346:	079a      	lsls	r2, r3, #30
 800a348:	d11c      	bne.n	800a384 <validate_structure+0xec>
 800a34a:	2164      	movs	r1, #100	@ 0x64
 800a34c:	fb93 f2f1 	sdiv	r2, r3, r1
 800a350:	fb01 3212 	mls	r2, r1, r2, r3
 800a354:	b9c2      	cbnz	r2, 800a388 <validate_structure+0xf0>
 800a356:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800a35a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a35e:	fb93 f1f2 	sdiv	r1, r3, r2
 800a362:	fb02 3311 	mls	r3, r2, r1, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	bf14      	ite	ne
 800a36a:	231c      	movne	r3, #28
 800a36c:	231d      	moveq	r3, #29
 800a36e:	68e2      	ldr	r2, [r4, #12]
 800a370:	2a00      	cmp	r2, #0
 800a372:	dc0b      	bgt.n	800a38c <validate_structure+0xf4>
 800a374:	4d31      	ldr	r5, [pc, #196]	@ (800a43c <validate_structure+0x1a4>)
 800a376:	200b      	movs	r0, #11
 800a378:	2164      	movs	r1, #100	@ 0x64
 800a37a:	68e6      	ldr	r6, [r4, #12]
 800a37c:	2e00      	cmp	r6, #0
 800a37e:	dd30      	ble.n	800a3e2 <validate_structure+0x14a>
 800a380:	b003      	add	sp, #12
 800a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a384:	231c      	movs	r3, #28
 800a386:	e7f2      	b.n	800a36e <validate_structure+0xd6>
 800a388:	231d      	movs	r3, #29
 800a38a:	e7f0      	b.n	800a36e <validate_structure+0xd6>
 800a38c:	4d2b      	ldr	r5, [pc, #172]	@ (800a43c <validate_structure+0x1a4>)
 800a38e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800a392:	2a01      	cmp	r2, #1
 800a394:	bf14      	ite	ne
 800a396:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800a39a:	4618      	moveq	r0, r3
 800a39c:	4281      	cmp	r1, r0
 800a39e:	ddef      	ble.n	800a380 <validate_structure+0xe8>
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	1a09      	subs	r1, r1, r0
 800a3a4:	2a0c      	cmp	r2, #12
 800a3a6:	60e1      	str	r1, [r4, #12]
 800a3a8:	6122      	str	r2, [r4, #16]
 800a3aa:	d1f0      	bne.n	800a38e <validate_structure+0xf6>
 800a3ac:	6963      	ldr	r3, [r4, #20]
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	6121      	str	r1, [r4, #16]
 800a3b4:	0791      	lsls	r1, r2, #30
 800a3b6:	6162      	str	r2, [r4, #20]
 800a3b8:	d13c      	bne.n	800a434 <validate_structure+0x19c>
 800a3ba:	2164      	movs	r1, #100	@ 0x64
 800a3bc:	fb92 f0f1 	sdiv	r0, r2, r1
 800a3c0:	fb01 2210 	mls	r2, r1, r0, r2
 800a3c4:	2a00      	cmp	r2, #0
 800a3c6:	d137      	bne.n	800a438 <validate_structure+0x1a0>
 800a3c8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800a3cc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a3d0:	fb93 f1f2 	sdiv	r1, r3, r2
 800a3d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf14      	ite	ne
 800a3dc:	231c      	movne	r3, #28
 800a3de:	231d      	moveq	r3, #29
 800a3e0:	e7d5      	b.n	800a38e <validate_structure+0xf6>
 800a3e2:	6922      	ldr	r2, [r4, #16]
 800a3e4:	3a01      	subs	r2, #1
 800a3e6:	6122      	str	r2, [r4, #16]
 800a3e8:	3201      	adds	r2, #1
 800a3ea:	d116      	bne.n	800a41a <validate_structure+0x182>
 800a3ec:	6963      	ldr	r3, [r4, #20]
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	0797      	lsls	r7, r2, #30
 800a3f2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800a3f6:	d119      	bne.n	800a42c <validate_structure+0x194>
 800a3f8:	fb92 f7f1 	sdiv	r7, r2, r1
 800a3fc:	fb01 2217 	mls	r2, r1, r7, r2
 800a400:	b9b2      	cbnz	r2, 800a430 <validate_structure+0x198>
 800a402:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800a406:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a40a:	fb93 f7f2 	sdiv	r7, r3, r2
 800a40e:	fb02 3317 	mls	r3, r2, r7, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	bf14      	ite	ne
 800a416:	231c      	movne	r3, #28
 800a418:	231d      	moveq	r3, #29
 800a41a:	6922      	ldr	r2, [r4, #16]
 800a41c:	2a01      	cmp	r2, #1
 800a41e:	bf14      	ite	ne
 800a420:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800a424:	461a      	moveq	r2, r3
 800a426:	4432      	add	r2, r6
 800a428:	60e2      	str	r2, [r4, #12]
 800a42a:	e7a6      	b.n	800a37a <validate_structure+0xe2>
 800a42c:	231c      	movs	r3, #28
 800a42e:	e7f4      	b.n	800a41a <validate_structure+0x182>
 800a430:	231d      	movs	r3, #29
 800a432:	e7f2      	b.n	800a41a <validate_structure+0x182>
 800a434:	231c      	movs	r3, #28
 800a436:	e7aa      	b.n	800a38e <validate_structure+0xf6>
 800a438:	231d      	movs	r3, #29
 800a43a:	e7a8      	b.n	800a38e <validate_structure+0xf6>
 800a43c:	0800f190 	.word	0x0800f190

0800a440 <mktime>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	b085      	sub	sp, #20
 800a446:	4607      	mov	r7, r0
 800a448:	f003 fc74 	bl	800dd34 <__gettzinfo>
 800a44c:	4681      	mov	r9, r0
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff22 	bl	800a298 <validate_structure>
 800a454:	e9d7 4300 	ldrd	r4, r3, [r7]
 800a458:	223c      	movs	r2, #60	@ 0x3c
 800a45a:	fb02 4403 	mla	r4, r2, r3, r4
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	697d      	ldr	r5, [r7, #20]
 800a462:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a466:	fb02 4403 	mla	r4, r2, r3, r4
 800a46a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800a46e:	4ac1      	ldr	r2, [pc, #772]	@ (800a774 <mktime+0x334>)
 800a470:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a474:	3e01      	subs	r6, #1
 800a476:	2b01      	cmp	r3, #1
 800a478:	4416      	add	r6, r2
 800a47a:	dd11      	ble.n	800a4a0 <mktime+0x60>
 800a47c:	07a9      	lsls	r1, r5, #30
 800a47e:	d10f      	bne.n	800a4a0 <mktime+0x60>
 800a480:	2264      	movs	r2, #100	@ 0x64
 800a482:	fb95 f3f2 	sdiv	r3, r5, r2
 800a486:	fb02 5313 	mls	r3, r2, r3, r5
 800a48a:	b943      	cbnz	r3, 800a49e <mktime+0x5e>
 800a48c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800a490:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a494:	fb93 f1f2 	sdiv	r1, r3, r2
 800a498:	fb02 3311 	mls	r3, r2, r1, r3
 800a49c:	b903      	cbnz	r3, 800a4a0 <mktime+0x60>
 800a49e:	3601      	adds	r6, #1
 800a4a0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	61fe      	str	r6, [r7, #28]
 800a4ae:	f200 8167 	bhi.w	800a780 <mktime+0x340>
 800a4b2:	2d46      	cmp	r5, #70	@ 0x46
 800a4b4:	f340 808e 	ble.w	800a5d4 <mktime+0x194>
 800a4b8:	2346      	movs	r3, #70	@ 0x46
 800a4ba:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800a4be:	2164      	movs	r1, #100	@ 0x64
 800a4c0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a4c4:	079a      	lsls	r2, r3, #30
 800a4c6:	d17f      	bne.n	800a5c8 <mktime+0x188>
 800a4c8:	fb93 f2f1 	sdiv	r2, r3, r1
 800a4cc:	fb01 3212 	mls	r2, r1, r2, r3
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	d17c      	bne.n	800a5ce <mktime+0x18e>
 800a4d4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800a4d8:	fb92 fef0 	sdiv	lr, r2, r0
 800a4dc:	fb00 221e 	mls	r2, r0, lr, r2
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	bf14      	ite	ne
 800a4e4:	4662      	movne	r2, ip
 800a4e6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	429d      	cmp	r5, r3
 800a4ee:	4416      	add	r6, r2
 800a4f0:	d1e8      	bne.n	800a4c4 <mktime+0x84>
 800a4f2:	4ba1      	ldr	r3, [pc, #644]	@ (800a778 <mktime+0x338>)
 800a4f4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800a4f8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800a4fc:	f000 f9fa 	bl	800a8f4 <__tz_lock>
 800a500:	f000 fa04 	bl	800a90c <_tzset_unlocked>
 800a504:	4b9d      	ldr	r3, [pc, #628]	@ (800a77c <mktime+0x33c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 8140 	beq.w	800a78e <mktime+0x34e>
 800a50e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	4653      	mov	r3, sl
 800a516:	2b01      	cmp	r3, #1
 800a518:	bfa8      	it	ge
 800a51a:	2301      	movge	r3, #1
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a522:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800a526:	4283      	cmp	r3, r0
 800a528:	f040 8096 	bne.w	800a658 <mktime+0x218>
 800a52c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800a530:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800a534:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800a538:	1a13      	subs	r3, r2, r0
 800a53a:	9303      	str	r3, [sp, #12]
 800a53c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	9a02      	ldr	r2, [sp, #8]
 800a544:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a548:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800a54c:	ebb2 0e03 	subs.w	lr, r2, r3
 800a550:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800a554:	4574      	cmp	r4, lr
 800a556:	eb78 0201 	sbcs.w	r2, r8, r1
 800a55a:	f280 8085 	bge.w	800a668 <mktime+0x228>
 800a55e:	f8d9 2000 	ldr.w	r2, [r9]
 800a562:	2a00      	cmp	r2, #0
 800a564:	f000 808d 	beq.w	800a682 <mktime+0x242>
 800a568:	9a03      	ldr	r2, [sp, #12]
 800a56a:	4294      	cmp	r4, r2
 800a56c:	eb78 020b 	sbcs.w	r2, r8, fp
 800a570:	f2c0 810a 	blt.w	800a788 <mktime+0x348>
 800a574:	4574      	cmp	r4, lr
 800a576:	eb78 0101 	sbcs.w	r1, r8, r1
 800a57a:	bfb4      	ite	lt
 800a57c:	f04f 0b01 	movlt.w	fp, #1
 800a580:	f04f 0b00 	movge.w	fp, #0
 800a584:	f1ba 0f00 	cmp.w	sl, #0
 800a588:	f280 8087 	bge.w	800a69a <mktime+0x25a>
 800a58c:	f1bb 0f01 	cmp.w	fp, #1
 800a590:	f040 80ff 	bne.w	800a792 <mktime+0x352>
 800a594:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800a598:	191c      	adds	r4, r3, r4
 800a59a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a59e:	f04f 0b01 	mov.w	fp, #1
 800a5a2:	f000 f9ad 	bl	800a900 <__tz_unlock>
 800a5a6:	3604      	adds	r6, #4
 800a5a8:	2307      	movs	r3, #7
 800a5aa:	fb96 f3f3 	sdiv	r3, r6, r3
 800a5ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a5b2:	1af6      	subs	r6, r6, r3
 800a5b4:	f100 80db 	bmi.w	800a76e <mktime+0x32e>
 800a5b8:	f8c7 b020 	str.w	fp, [r7, #32]
 800a5bc:	61be      	str	r6, [r7, #24]
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	b005      	add	sp, #20
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c8:	f240 126d 	movw	r2, #365	@ 0x16d
 800a5cc:	e78d      	b.n	800a4ea <mktime+0xaa>
 800a5ce:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a5d2:	e78a      	b.n	800a4ea <mktime+0xaa>
 800a5d4:	d08d      	beq.n	800a4f2 <mktime+0xb2>
 800a5d6:	2345      	movs	r3, #69	@ 0x45
 800a5d8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800a5dc:	2164      	movs	r1, #100	@ 0x64
 800a5de:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800a5e2:	e012      	b.n	800a60a <mktime+0x1ca>
 800a5e4:	bb62      	cbnz	r2, 800a640 <mktime+0x200>
 800a5e6:	fb93 f2f1 	sdiv	r2, r3, r1
 800a5ea:	fb01 3212 	mls	r2, r1, r2, r3
 800a5ee:	bb52      	cbnz	r2, 800a646 <mktime+0x206>
 800a5f0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800a5f4:	fb92 fef0 	sdiv	lr, r2, r0
 800a5f8:	fb00 221e 	mls	r2, r0, lr, r2
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	bf14      	ite	ne
 800a600:	4662      	movne	r2, ip
 800a602:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800a606:	1ab6      	subs	r6, r6, r2
 800a608:	3b01      	subs	r3, #1
 800a60a:	429d      	cmp	r5, r3
 800a60c:	f003 0203 	and.w	r2, r3, #3
 800a610:	dbe8      	blt.n	800a5e4 <mktime+0x1a4>
 800a612:	b9da      	cbnz	r2, 800a64c <mktime+0x20c>
 800a614:	2264      	movs	r2, #100	@ 0x64
 800a616:	fb95 f3f2 	sdiv	r3, r5, r2
 800a61a:	fb02 5313 	mls	r3, r2, r3, r5
 800a61e:	b9c3      	cbnz	r3, 800a652 <mktime+0x212>
 800a620:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800a624:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a628:	fb93 f1f2 	sdiv	r1, r3, r2
 800a62c:	fb02 3311 	mls	r3, r2, r1, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	f240 136d 	movw	r3, #365	@ 0x16d
 800a636:	bf08      	it	eq
 800a638:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800a63c:	1af6      	subs	r6, r6, r3
 800a63e:	e758      	b.n	800a4f2 <mktime+0xb2>
 800a640:	f240 126d 	movw	r2, #365	@ 0x16d
 800a644:	e7df      	b.n	800a606 <mktime+0x1c6>
 800a646:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800a64a:	e7dc      	b.n	800a606 <mktime+0x1c6>
 800a64c:	f240 136d 	movw	r3, #365	@ 0x16d
 800a650:	e7f4      	b.n	800a63c <mktime+0x1fc>
 800a652:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800a656:	e7f1      	b.n	800a63c <mktime+0x1fc>
 800a658:	f000 f8a2 	bl	800a7a0 <__tzcalc_limits>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f47f af65 	bne.w	800a52c <mktime+0xec>
 800a662:	f8dd b004 	ldr.w	fp, [sp, #4]
 800a666:	e791      	b.n	800a58c <mktime+0x14c>
 800a668:	9a02      	ldr	r2, [sp, #8]
 800a66a:	1a12      	subs	r2, r2, r0
 800a66c:	9202      	str	r2, [sp, #8]
 800a66e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800a672:	eb6c 0c02 	sbc.w	ip, ip, r2
 800a676:	9a02      	ldr	r2, [sp, #8]
 800a678:	4294      	cmp	r4, r2
 800a67a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800a67e:	dbf0      	blt.n	800a662 <mktime+0x222>
 800a680:	e76d      	b.n	800a55e <mktime+0x11e>
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	4294      	cmp	r4, r2
 800a686:	eb78 020b 	sbcs.w	r2, r8, fp
 800a68a:	f6ff af73 	blt.w	800a574 <mktime+0x134>
 800a68e:	f1ba 0f00 	cmp.w	sl, #0
 800a692:	f6ff af7f 	blt.w	800a594 <mktime+0x154>
 800a696:	f04f 0b01 	mov.w	fp, #1
 800a69a:	9a01      	ldr	r2, [sp, #4]
 800a69c:	ea82 020b 	eor.w	r2, r2, fp
 800a6a0:	2a01      	cmp	r2, #1
 800a6a2:	f47f af73 	bne.w	800a58c <mktime+0x14c>
 800a6a6:	f1bb 0f00 	cmp.w	fp, #0
 800a6aa:	d035      	beq.n	800a718 <mktime+0x2d8>
 800a6ac:	1a1b      	subs	r3, r3, r0
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800a6b4:	441a      	add	r2, r3
 800a6b6:	191c      	adds	r4, r3, r4
 800a6b8:	603a      	str	r2, [r7, #0]
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a6c0:	f7ff fdea 	bl	800a298 <validate_structure>
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	ebb2 020a 	subs.w	r2, r2, sl
 800a6ca:	f43f af5f 	beq.w	800a58c <mktime+0x14c>
 800a6ce:	2a01      	cmp	r2, #1
 800a6d0:	dc24      	bgt.n	800a71c <mktime+0x2dc>
 800a6d2:	1c93      	adds	r3, r2, #2
 800a6d4:	bfd8      	it	le
 800a6d6:	2201      	movle	r2, #1
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	18d3      	adds	r3, r2, r3
 800a6dc:	d527      	bpl.n	800a72e <mktime+0x2ee>
 800a6de:	1e6b      	subs	r3, r5, #1
 800a6e0:	0798      	lsls	r0, r3, #30
 800a6e2:	d11e      	bne.n	800a722 <mktime+0x2e2>
 800a6e4:	2164      	movs	r1, #100	@ 0x64
 800a6e6:	fb93 f0f1 	sdiv	r0, r3, r1
 800a6ea:	fb01 3310 	mls	r3, r1, r0, r3
 800a6ee:	b9db      	cbnz	r3, 800a728 <mktime+0x2e8>
 800a6f0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a6f4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800a6f8:	fb95 f1f3 	sdiv	r1, r5, r3
 800a6fc:	fb03 5511 	mls	r5, r3, r1, r5
 800a700:	2d00      	cmp	r5, #0
 800a702:	f240 136d 	movw	r3, #365	@ 0x16d
 800a706:	bf18      	it	ne
 800a708:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800a70c:	61fb      	str	r3, [r7, #28]
 800a70e:	4416      	add	r6, r2
 800a710:	e73c      	b.n	800a58c <mktime+0x14c>
 800a712:	f04f 0b00 	mov.w	fp, #0
 800a716:	e7c0      	b.n	800a69a <mktime+0x25a>
 800a718:	1ac3      	subs	r3, r0, r3
 800a71a:	e7c8      	b.n	800a6ae <mktime+0x26e>
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295
 800a720:	e7da      	b.n	800a6d8 <mktime+0x298>
 800a722:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800a726:	e7f1      	b.n	800a70c <mktime+0x2cc>
 800a728:	f240 136d 	movw	r3, #365	@ 0x16d
 800a72c:	e7ee      	b.n	800a70c <mktime+0x2cc>
 800a72e:	07a9      	lsls	r1, r5, #30
 800a730:	d117      	bne.n	800a762 <mktime+0x322>
 800a732:	2064      	movs	r0, #100	@ 0x64
 800a734:	fb95 f1f0 	sdiv	r1, r5, r0
 800a738:	fb00 5111 	mls	r1, r0, r1, r5
 800a73c:	b9a1      	cbnz	r1, 800a768 <mktime+0x328>
 800a73e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a742:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800a746:	fb95 f0f1 	sdiv	r0, r5, r1
 800a74a:	fb01 5510 	mls	r5, r1, r0, r5
 800a74e:	2d00      	cmp	r5, #0
 800a750:	f240 116d 	movw	r1, #365	@ 0x16d
 800a754:	bf08      	it	eq
 800a756:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800a75a:	428b      	cmp	r3, r1
 800a75c:	bfa8      	it	ge
 800a75e:	1a5b      	subge	r3, r3, r1
 800a760:	e7d4      	b.n	800a70c <mktime+0x2cc>
 800a762:	f240 116d 	movw	r1, #365	@ 0x16d
 800a766:	e7f8      	b.n	800a75a <mktime+0x31a>
 800a768:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800a76c:	e7f5      	b.n	800a75a <mktime+0x31a>
 800a76e:	3607      	adds	r6, #7
 800a770:	e722      	b.n	800a5b8 <mktime+0x178>
 800a772:	bf00      	nop
 800a774:	0800f160 	.word	0x0800f160
 800a778:	00015180 	.word	0x00015180
 800a77c:	200095d4 	.word	0x200095d4
 800a780:	f04f 34ff 	mov.w	r4, #4294967295
 800a784:	46a0      	mov	r8, r4
 800a786:	e71a      	b.n	800a5be <mktime+0x17e>
 800a788:	f1ba 0f00 	cmp.w	sl, #0
 800a78c:	dac1      	bge.n	800a712 <mktime+0x2d2>
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800a796:	191c      	adds	r4, r3, r4
 800a798:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800a79c:	e701      	b.n	800a5a2 <mktime+0x162>
 800a79e:	bf00      	nop

0800a7a0 <__tzcalc_limits>:
 800a7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	f003 fac5 	bl	800dd34 <__gettzinfo>
 800a7aa:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	f340 8099 	ble.w	800a8e6 <__tzcalc_limits+0x146>
 800a7b4:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800a7b8:	19e5      	adds	r5, r4, r7
 800a7ba:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800a7be:	f240 126d 	movw	r2, #365	@ 0x16d
 800a7c2:	10ad      	asrs	r5, r5, #2
 800a7c4:	fb02 5503 	mla	r5, r2, r3, r5
 800a7c8:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800a7cc:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800a7d0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800a7d4:	4f45      	ldr	r7, [pc, #276]	@ (800a8ec <__tzcalc_limits+0x14c>)
 800a7d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7da:	441d      	add	r5, r3
 800a7dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a7e0:	eb04 030c 	add.w	r3, r4, ip
 800a7e4:	6044      	str	r4, [r0, #4]
 800a7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	441d      	add	r5, r3
 800a7ee:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800a7f2:	7a0b      	ldrb	r3, [r1, #8]
 800a7f4:	694a      	ldr	r2, [r1, #20]
 800a7f6:	2b4a      	cmp	r3, #74	@ 0x4a
 800a7f8:	d133      	bne.n	800a862 <__tzcalc_limits+0xc2>
 800a7fa:	07a6      	lsls	r6, r4, #30
 800a7fc:	eb05 0302 	add.w	r3, r5, r2
 800a800:	d106      	bne.n	800a810 <__tzcalc_limits+0x70>
 800a802:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800a806:	fb94 f6fe 	sdiv	r6, r4, lr
 800a80a:	fb0e 4616 	mls	r6, lr, r6, r4
 800a80e:	b936      	cbnz	r6, 800a81e <__tzcalc_limits+0x7e>
 800a810:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800a814:	fb94 f6fe 	sdiv	r6, r4, lr
 800a818:	fb0e 4616 	mls	r6, lr, r6, r4
 800a81c:	b9fe      	cbnz	r6, 800a85e <__tzcalc_limits+0xbe>
 800a81e:	2a3b      	cmp	r2, #59	@ 0x3b
 800a820:	bfd4      	ite	le
 800a822:	2200      	movle	r2, #0
 800a824:	2201      	movgt	r2, #1
 800a826:	4413      	add	r3, r2
 800a828:	3b01      	subs	r3, #1
 800a82a:	698a      	ldr	r2, [r1, #24]
 800a82c:	17d6      	asrs	r6, r2, #31
 800a82e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800a832:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a834:	18d2      	adds	r2, r2, r3
 800a836:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800a83a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800a83e:	3128      	adds	r1, #40	@ 0x28
 800a840:	458c      	cmp	ip, r1
 800a842:	d1d6      	bne.n	800a7f2 <__tzcalc_limits+0x52>
 800a844:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800a848:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800a84c:	428c      	cmp	r4, r1
 800a84e:	4193      	sbcs	r3, r2
 800a850:	bfb4      	ite	lt
 800a852:	2301      	movlt	r3, #1
 800a854:	2300      	movge	r3, #0
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	2001      	movs	r0, #1
 800a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85e:	2200      	movs	r2, #0
 800a860:	e7e1      	b.n	800a826 <__tzcalc_limits+0x86>
 800a862:	2b44      	cmp	r3, #68	@ 0x44
 800a864:	d101      	bne.n	800a86a <__tzcalc_limits+0xca>
 800a866:	18ab      	adds	r3, r5, r2
 800a868:	e7df      	b.n	800a82a <__tzcalc_limits+0x8a>
 800a86a:	07a3      	lsls	r3, r4, #30
 800a86c:	d105      	bne.n	800a87a <__tzcalc_limits+0xda>
 800a86e:	2664      	movs	r6, #100	@ 0x64
 800a870:	fb94 f3f6 	sdiv	r3, r4, r6
 800a874:	fb06 4313 	mls	r3, r6, r3, r4
 800a878:	bb7b      	cbnz	r3, 800a8da <__tzcalc_limits+0x13a>
 800a87a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a87e:	fb94 f6f3 	sdiv	r6, r4, r3
 800a882:	fb03 4616 	mls	r6, r3, r6, r4
 800a886:	fab6 f686 	clz	r6, r6
 800a88a:	0976      	lsrs	r6, r6, #5
 800a88c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800a8f0 <__tzcalc_limits+0x150>
 800a890:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800a894:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800a898:	462b      	mov	r3, r5
 800a89a:	f04f 0800 	mov.w	r8, #0
 800a89e:	fb0a e606 	mla	r6, sl, r6, lr
 800a8a2:	f108 0801 	add.w	r8, r8, #1
 800a8a6:	45c1      	cmp	r9, r8
 800a8a8:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800a8ac:	dc17      	bgt.n	800a8de <__tzcalc_limits+0x13e>
 800a8ae:	f103 0804 	add.w	r8, r3, #4
 800a8b2:	2607      	movs	r6, #7
 800a8b4:	fb98 f6f6 	sdiv	r6, r8, r6
 800a8b8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800a8bc:	eba8 0606 	sub.w	r6, r8, r6
 800a8c0:	1b92      	subs	r2, r2, r6
 800a8c2:	690e      	ldr	r6, [r1, #16]
 800a8c4:	f106 36ff 	add.w	r6, r6, #4294967295
 800a8c8:	bf48      	it	mi
 800a8ca:	3207      	addmi	r2, #7
 800a8cc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800a8d0:	4432      	add	r2, r6
 800a8d2:	4572      	cmp	r2, lr
 800a8d4:	da05      	bge.n	800a8e2 <__tzcalc_limits+0x142>
 800a8d6:	4413      	add	r3, r2
 800a8d8:	e7a7      	b.n	800a82a <__tzcalc_limits+0x8a>
 800a8da:	2601      	movs	r6, #1
 800a8dc:	e7d6      	b.n	800a88c <__tzcalc_limits+0xec>
 800a8de:	4473      	add	r3, lr
 800a8e0:	e7df      	b.n	800a8a2 <__tzcalc_limits+0x102>
 800a8e2:	3a07      	subs	r2, #7
 800a8e4:	e7f5      	b.n	800a8d2 <__tzcalc_limits+0x132>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e7b7      	b.n	800a85a <__tzcalc_limits+0xba>
 800a8ea:	bf00      	nop
 800a8ec:	00015180 	.word	0x00015180
 800a8f0:	0800f480 	.word	0x0800f480

0800a8f4 <__tz_lock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	@ (800a8fc <__tz_lock+0x8>)
 800a8f6:	f7f8 bbae 	b.w	8003056 <__retarget_lock_acquire>
 800a8fa:	bf00      	nop
 800a8fc:	20004318 	.word	0x20004318

0800a900 <__tz_unlock>:
 800a900:	4801      	ldr	r0, [pc, #4]	@ (800a908 <__tz_unlock+0x8>)
 800a902:	f7f8 bbb2 	b.w	800306a <__retarget_lock_release>
 800a906:	bf00      	nop
 800a908:	20004318 	.word	0x20004318

0800a90c <_tzset_unlocked>:
 800a90c:	4b01      	ldr	r3, [pc, #4]	@ (800a914 <_tzset_unlocked+0x8>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	f000 b802 	b.w	800a918 <_tzset_unlocked_r>
 800a914:	200001a0 	.word	0x200001a0

0800a918 <_tzset_unlocked_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	b08d      	sub	sp, #52	@ 0x34
 800a91e:	4607      	mov	r7, r0
 800a920:	f003 fa08 	bl	800dd34 <__gettzinfo>
 800a924:	49bc      	ldr	r1, [pc, #752]	@ (800ac18 <_tzset_unlocked_r+0x300>)
 800a926:	4dbd      	ldr	r5, [pc, #756]	@ (800ac1c <_tzset_unlocked_r+0x304>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4638      	mov	r0, r7
 800a92c:	f001 fd2c 	bl	800c388 <_getenv_r>
 800a930:	4606      	mov	r6, r0
 800a932:	bb10      	cbnz	r0, 800a97a <_tzset_unlocked_r+0x62>
 800a934:	4bba      	ldr	r3, [pc, #744]	@ (800ac20 <_tzset_unlocked_r+0x308>)
 800a936:	4abb      	ldr	r2, [pc, #748]	@ (800ac24 <_tzset_unlocked_r+0x30c>)
 800a938:	6018      	str	r0, [r3, #0]
 800a93a:	4bbb      	ldr	r3, [pc, #748]	@ (800ac28 <_tzset_unlocked_r+0x310>)
 800a93c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800a93e:	6018      	str	r0, [r3, #0]
 800a940:	4bba      	ldr	r3, [pc, #744]	@ (800ac2c <_tzset_unlocked_r+0x314>)
 800a942:	6520      	str	r0, [r4, #80]	@ 0x50
 800a944:	e9c3 2200 	strd	r2, r2, [r3]
 800a948:	214a      	movs	r1, #74	@ 0x4a
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
 800a94e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800a952:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800a956:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800a95a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a95e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a962:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a966:	6828      	ldr	r0, [r5, #0]
 800a968:	7221      	strb	r1, [r4, #8]
 800a96a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a96e:	f7fd fbdd 	bl	800812c <free>
 800a972:	602e      	str	r6, [r5, #0]
 800a974:	b00d      	add	sp, #52	@ 0x34
 800a976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97a:	6829      	ldr	r1, [r5, #0]
 800a97c:	2900      	cmp	r1, #0
 800a97e:	f040 808e 	bne.w	800aa9e <_tzset_unlocked_r+0x186>
 800a982:	6828      	ldr	r0, [r5, #0]
 800a984:	f7fd fbd2 	bl	800812c <free>
 800a988:	4630      	mov	r0, r6
 800a98a:	f7f5 fc81 	bl	8000290 <strlen>
 800a98e:	1c41      	adds	r1, r0, #1
 800a990:	4638      	mov	r0, r7
 800a992:	f7fd fbf5 	bl	8008180 <_malloc_r>
 800a996:	6028      	str	r0, [r5, #0]
 800a998:	2800      	cmp	r0, #0
 800a99a:	f040 8086 	bne.w	800aaaa <_tzset_unlocked_r+0x192>
 800a99e:	4aa2      	ldr	r2, [pc, #648]	@ (800ac28 <_tzset_unlocked_r+0x310>)
 800a9a0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800ac2c <_tzset_unlocked_r+0x314>
 800a9a4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800ac20 <_tzset_unlocked_r+0x308>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	4aa0      	ldr	r2, [pc, #640]	@ (800ac30 <_tzset_unlocked_r+0x318>)
 800a9ae:	f8ca 3000 	str.w	r3, [sl]
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	e9c8 2200 	strd	r2, r2, [r8]
 800a9ba:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a9be:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a9c2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a9c6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a9ca:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a9ce:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a9d2:	224a      	movs	r2, #74	@ 0x4a
 800a9d4:	7222      	strb	r2, [r4, #8]
 800a9d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9d8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a9dc:	6523      	str	r3, [r4, #80]	@ 0x50
 800a9de:	7833      	ldrb	r3, [r6, #0]
 800a9e0:	2b3a      	cmp	r3, #58	@ 0x3a
 800a9e2:	bf08      	it	eq
 800a9e4:	3601      	addeq	r6, #1
 800a9e6:	7833      	ldrb	r3, [r6, #0]
 800a9e8:	2b3c      	cmp	r3, #60	@ 0x3c
 800a9ea:	d162      	bne.n	800aab2 <_tzset_unlocked_r+0x19a>
 800a9ec:	1c75      	adds	r5, r6, #1
 800a9ee:	4a91      	ldr	r2, [pc, #580]	@ (800ac34 <_tzset_unlocked_r+0x31c>)
 800a9f0:	4991      	ldr	r1, [pc, #580]	@ (800ac38 <_tzset_unlocked_r+0x320>)
 800a9f2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f7ff fae5 	bl	8009fc4 <siscanf>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	ddba      	ble.n	800a974 <_tzset_unlocked_r+0x5c>
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa00:	1eda      	subs	r2, r3, #3
 800aa02:	2a07      	cmp	r2, #7
 800aa04:	d8b6      	bhi.n	800a974 <_tzset_unlocked_r+0x5c>
 800aa06:	5ceb      	ldrb	r3, [r5, r3]
 800aa08:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa0a:	d1b3      	bne.n	800a974 <_tzset_unlocked_r+0x5c>
 800aa0c:	3602      	adds	r6, #2
 800aa0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa10:	18f5      	adds	r5, r6, r3
 800aa12:	5cf3      	ldrb	r3, [r6, r3]
 800aa14:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa16:	d15a      	bne.n	800aace <_tzset_unlocked_r+0x1b6>
 800aa18:	3501      	adds	r5, #1
 800aa1a:	f04f 39ff 	mov.w	r9, #4294967295
 800aa1e:	2300      	movs	r3, #0
 800aa20:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aa24:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aa28:	af08      	add	r7, sp, #32
 800aa2a:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa2c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800aa30:	9303      	str	r3, [sp, #12]
 800aa32:	f10d 031e 	add.w	r3, sp, #30
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	4980      	ldr	r1, [pc, #512]	@ (800ac3c <_tzset_unlocked_r+0x324>)
 800aa3a:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa3c:	aa07      	add	r2, sp, #28
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7ff fac0 	bl	8009fc4 <siscanf>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	dd95      	ble.n	800a974 <_tzset_unlocked_r+0x5c>
 800aa48:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800aa4c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800aa50:	223c      	movs	r2, #60	@ 0x3c
 800aa52:	fb02 6603 	mla	r6, r2, r3, r6
 800aa56:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800aa5a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800aa5e:	fb02 6603 	mla	r6, r2, r3, r6
 800aa62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa64:	fb09 f606 	mul.w	r6, r9, r6
 800aa68:	eb05 0903 	add.w	r9, r5, r3
 800aa6c:	5ceb      	ldrb	r3, [r5, r3]
 800aa6e:	2b3c      	cmp	r3, #60	@ 0x3c
 800aa70:	f040 80ee 	bne.w	800ac50 <_tzset_unlocked_r+0x338>
 800aa74:	f109 0501 	add.w	r5, r9, #1
 800aa78:	4a71      	ldr	r2, [pc, #452]	@ (800ac40 <_tzset_unlocked_r+0x328>)
 800aa7a:	496f      	ldr	r1, [pc, #444]	@ (800ac38 <_tzset_unlocked_r+0x320>)
 800aa7c:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f7ff faa0 	bl	8009fc4 <siscanf>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	dc28      	bgt.n	800aada <_tzset_unlocked_r+0x1c2>
 800aa88:	f899 3001 	ldrb.w	r3, [r9, #1]
 800aa8c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa8e:	d124      	bne.n	800aada <_tzset_unlocked_r+0x1c2>
 800aa90:	4b68      	ldr	r3, [pc, #416]	@ (800ac34 <_tzset_unlocked_r+0x31c>)
 800aa92:	62a6      	str	r6, [r4, #40]	@ 0x28
 800aa94:	e9c8 3300 	strd	r3, r3, [r8]
 800aa98:	f8ca 6000 	str.w	r6, [sl]
 800aa9c:	e76a      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800aa9e:	f7f5 fb97 	bl	80001d0 <strcmp>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	f47f af6d 	bne.w	800a982 <_tzset_unlocked_r+0x6a>
 800aaa8:	e764      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	f000 fa30 	bl	800af10 <strcpy>
 800aab0:	e775      	b.n	800a99e <_tzset_unlocked_r+0x86>
 800aab2:	4a60      	ldr	r2, [pc, #384]	@ (800ac34 <_tzset_unlocked_r+0x31c>)
 800aab4:	4963      	ldr	r1, [pc, #396]	@ (800ac44 <_tzset_unlocked_r+0x32c>)
 800aab6:	ab0a      	add	r3, sp, #40	@ 0x28
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff fa83 	bl	8009fc4 <siscanf>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f77f af58 	ble.w	800a974 <_tzset_unlocked_r+0x5c>
 800aac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aac6:	3b03      	subs	r3, #3
 800aac8:	2b07      	cmp	r3, #7
 800aaca:	d9a0      	bls.n	800aa0e <_tzset_unlocked_r+0xf6>
 800aacc:	e752      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800aace:	2b2b      	cmp	r3, #43	@ 0x2b
 800aad0:	bf08      	it	eq
 800aad2:	3501      	addeq	r5, #1
 800aad4:	f04f 0901 	mov.w	r9, #1
 800aad8:	e7a1      	b.n	800aa1e <_tzset_unlocked_r+0x106>
 800aada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aadc:	1eda      	subs	r2, r3, #3
 800aade:	2a07      	cmp	r2, #7
 800aae0:	f63f af48 	bhi.w	800a974 <_tzset_unlocked_r+0x5c>
 800aae4:	5ceb      	ldrb	r3, [r5, r3]
 800aae6:	2b3e      	cmp	r3, #62	@ 0x3e
 800aae8:	f47f af44 	bne.w	800a974 <_tzset_unlocked_r+0x5c>
 800aaec:	f109 0902 	add.w	r9, r9, #2
 800aaf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf2:	eb09 0503 	add.w	r5, r9, r3
 800aaf6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aafa:	2b2d      	cmp	r3, #45	@ 0x2d
 800aafc:	f040 80b7 	bne.w	800ac6e <_tzset_unlocked_r+0x356>
 800ab00:	3501      	adds	r5, #1
 800ab02:	f04f 39ff 	mov.w	r9, #4294967295
 800ab06:	2300      	movs	r3, #0
 800ab08:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ab0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ab10:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ab14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab16:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab18:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	f10d 031e 	add.w	r3, sp, #30
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	4945      	ldr	r1, [pc, #276]	@ (800ac3c <_tzset_unlocked_r+0x324>)
 800ab26:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab28:	aa07      	add	r2, sp, #28
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f7ff fa4a 	bl	8009fc4 <siscanf>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f300 80a2 	bgt.w	800ac7a <_tzset_unlocked_r+0x362>
 800ab36:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab3e:	4627      	mov	r7, r4
 800ab40:	441d      	add	r5, r3
 800ab42:	f04f 0b00 	mov.w	fp, #0
 800ab46:	782b      	ldrb	r3, [r5, #0]
 800ab48:	2b2c      	cmp	r3, #44	@ 0x2c
 800ab4a:	bf08      	it	eq
 800ab4c:	3501      	addeq	r5, #1
 800ab4e:	f895 9000 	ldrb.w	r9, [r5]
 800ab52:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800ab56:	f040 80a3 	bne.w	800aca0 <_tzset_unlocked_r+0x388>
 800ab5a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab5c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800ab60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ab64:	aa09      	add	r2, sp, #36	@ 0x24
 800ab66:	9200      	str	r2, [sp, #0]
 800ab68:	4937      	ldr	r1, [pc, #220]	@ (800ac48 <_tzset_unlocked_r+0x330>)
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800ab70:	4628      	mov	r0, r5
 800ab72:	f7ff fa27 	bl	8009fc4 <siscanf>
 800ab76:	2803      	cmp	r0, #3
 800ab78:	f47f aefc 	bne.w	800a974 <_tzset_unlocked_r+0x5c>
 800ab7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ab80:	1e4b      	subs	r3, r1, #1
 800ab82:	2b0b      	cmp	r3, #11
 800ab84:	f63f aef6 	bhi.w	800a974 <_tzset_unlocked_r+0x5c>
 800ab88:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800ab8c:	1e53      	subs	r3, r2, #1
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	f63f aef0 	bhi.w	800a974 <_tzset_unlocked_r+0x5c>
 800ab94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800ab98:	2b06      	cmp	r3, #6
 800ab9a:	f63f aeeb 	bhi.w	800a974 <_tzset_unlocked_r+0x5c>
 800ab9e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800aba2:	f887 9008 	strb.w	r9, [r7, #8]
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abaa:	eb05 0903 	add.w	r9, r5, r3
 800abae:	2500      	movs	r5, #0
 800abb0:	f04f 0302 	mov.w	r3, #2
 800abb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800abb8:	f8ad 501e 	strh.w	r5, [sp, #30]
 800abbc:	f8ad 5020 	strh.w	r5, [sp, #32]
 800abc0:	950a      	str	r5, [sp, #40]	@ 0x28
 800abc2:	f899 3000 	ldrb.w	r3, [r9]
 800abc6:	2b2f      	cmp	r3, #47	@ 0x2f
 800abc8:	f040 8096 	bne.w	800acf8 <_tzset_unlocked_r+0x3e0>
 800abcc:	ab0a      	add	r3, sp, #40	@ 0x28
 800abce:	aa08      	add	r2, sp, #32
 800abd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800abd4:	f10d 021e 	add.w	r2, sp, #30
 800abd8:	9200      	str	r2, [sp, #0]
 800abda:	491c      	ldr	r1, [pc, #112]	@ (800ac4c <_tzset_unlocked_r+0x334>)
 800abdc:	9303      	str	r3, [sp, #12]
 800abde:	aa07      	add	r2, sp, #28
 800abe0:	4648      	mov	r0, r9
 800abe2:	f7ff f9ef 	bl	8009fc4 <siscanf>
 800abe6:	42a8      	cmp	r0, r5
 800abe8:	f300 8086 	bgt.w	800acf8 <_tzset_unlocked_r+0x3e0>
 800abec:	214a      	movs	r1, #74	@ 0x4a
 800abee:	2200      	movs	r2, #0
 800abf0:	2300      	movs	r3, #0
 800abf2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800abf6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800abfa:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800abfe:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800ac02:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800ac06:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800ac0a:	7221      	strb	r1, [r4, #8]
 800ac0c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800ac0e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800ac12:	6525      	str	r5, [r4, #80]	@ 0x50
 800ac14:	e6ae      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800ac16:	bf00      	nop
 800ac18:	0800f1c0 	.word	0x0800f1c0
 800ac1c:	200095b4 	.word	0x200095b4
 800ac20:	200095d0 	.word	0x200095d0
 800ac24:	0800f1c3 	.word	0x0800f1c3
 800ac28:	200095d4 	.word	0x200095d4
 800ac2c:	2000002c 	.word	0x2000002c
 800ac30:	0800e920 	.word	0x0800e920
 800ac34:	200095c4 	.word	0x200095c4
 800ac38:	0800f1c7 	.word	0x0800f1c7
 800ac3c:	0800f1fc 	.word	0x0800f1fc
 800ac40:	200095b8 	.word	0x200095b8
 800ac44:	0800f1da 	.word	0x0800f1da
 800ac48:	0800f1e8 	.word	0x0800f1e8
 800ac4c:	0800f1fb 	.word	0x0800f1fb
 800ac50:	4a3e      	ldr	r2, [pc, #248]	@ (800ad4c <_tzset_unlocked_r+0x434>)
 800ac52:	493f      	ldr	r1, [pc, #252]	@ (800ad50 <_tzset_unlocked_r+0x438>)
 800ac54:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac56:	4648      	mov	r0, r9
 800ac58:	f7ff f9b4 	bl	8009fc4 <siscanf>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f77f af17 	ble.w	800aa90 <_tzset_unlocked_r+0x178>
 800ac62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac64:	3b03      	subs	r3, #3
 800ac66:	2b07      	cmp	r3, #7
 800ac68:	f67f af42 	bls.w	800aaf0 <_tzset_unlocked_r+0x1d8>
 800ac6c:	e682      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800ac6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac70:	bf08      	it	eq
 800ac72:	3501      	addeq	r5, #1
 800ac74:	f04f 0901 	mov.w	r9, #1
 800ac78:	e745      	b.n	800ab06 <_tzset_unlocked_r+0x1ee>
 800ac7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ac7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ac82:	213c      	movs	r1, #60	@ 0x3c
 800ac84:	fb01 3302 	mla	r3, r1, r2, r3
 800ac88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ac8c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ac90:	fb01 3302 	mla	r3, r1, r2, r3
 800ac94:	fb09 f303 	mul.w	r3, r9, r3
 800ac98:	e74f      	b.n	800ab3a <_tzset_unlocked_r+0x222>
 800ac9a:	f04f 0b01 	mov.w	fp, #1
 800ac9e:	e752      	b.n	800ab46 <_tzset_unlocked_r+0x22e>
 800aca0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800aca4:	bf06      	itte	eq
 800aca6:	3501      	addeq	r5, #1
 800aca8:	464b      	moveq	r3, r9
 800acaa:	2344      	movne	r3, #68	@ 0x44
 800acac:	220a      	movs	r2, #10
 800acae:	a90b      	add	r1, sp, #44	@ 0x2c
 800acb0:	4628      	mov	r0, r5
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	f002 f8a4 	bl	800ce00 <strtoul>
 800acb8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800acbc:	9b05      	ldr	r3, [sp, #20]
 800acbe:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800acc2:	45a9      	cmp	r9, r5
 800acc4:	d114      	bne.n	800acf0 <_tzset_unlocked_r+0x3d8>
 800acc6:	234d      	movs	r3, #77	@ 0x4d
 800acc8:	f1bb 0f00 	cmp.w	fp, #0
 800accc:	d107      	bne.n	800acde <_tzset_unlocked_r+0x3c6>
 800acce:	7223      	strb	r3, [r4, #8]
 800acd0:	2103      	movs	r1, #3
 800acd2:	2302      	movs	r3, #2
 800acd4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800acd8:	f8c4 b014 	str.w	fp, [r4, #20]
 800acdc:	e767      	b.n	800abae <_tzset_unlocked_r+0x296>
 800acde:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800ace2:	220b      	movs	r2, #11
 800ace4:	2301      	movs	r3, #1
 800ace6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800acea:	2300      	movs	r3, #0
 800acec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800acee:	e75e      	b.n	800abae <_tzset_unlocked_r+0x296>
 800acf0:	b280      	uxth	r0, r0
 800acf2:	723b      	strb	r3, [r7, #8]
 800acf4:	6178      	str	r0, [r7, #20]
 800acf6:	e75a      	b.n	800abae <_tzset_unlocked_r+0x296>
 800acf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800acfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ad00:	213c      	movs	r1, #60	@ 0x3c
 800ad02:	fb01 3302 	mla	r3, r1, r2, r3
 800ad06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ad0a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ad0e:	fb01 3302 	mla	r3, r1, r2, r3
 800ad12:	61bb      	str	r3, [r7, #24]
 800ad14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ad16:	3728      	adds	r7, #40	@ 0x28
 800ad18:	444d      	add	r5, r9
 800ad1a:	f1bb 0f00 	cmp.w	fp, #0
 800ad1e:	d0bc      	beq.n	800ac9a <_tzset_unlocked_r+0x382>
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	6523      	str	r3, [r4, #80]	@ 0x50
 800ad24:	4b0b      	ldr	r3, [pc, #44]	@ (800ad54 <_tzset_unlocked_r+0x43c>)
 800ad26:	f8c8 3000 	str.w	r3, [r8]
 800ad2a:	6860      	ldr	r0, [r4, #4]
 800ad2c:	4b07      	ldr	r3, [pc, #28]	@ (800ad4c <_tzset_unlocked_r+0x434>)
 800ad2e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ad30:	f8c8 3004 	str.w	r3, [r8, #4]
 800ad34:	f7ff fd34 	bl	800a7a0 <__tzcalc_limits>
 800ad38:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ad3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ad3c:	f8ca 2000 	str.w	r2, [sl]
 800ad40:	1a9b      	subs	r3, r3, r2
 800ad42:	4a05      	ldr	r2, [pc, #20]	@ (800ad58 <_tzset_unlocked_r+0x440>)
 800ad44:	bf18      	it	ne
 800ad46:	2301      	movne	r3, #1
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e613      	b.n	800a974 <_tzset_unlocked_r+0x5c>
 800ad4c:	200095b8 	.word	0x200095b8
 800ad50:	0800f1da 	.word	0x0800f1da
 800ad54:	200095c4 	.word	0x200095c4
 800ad58:	200095d4 	.word	0x200095d4

0800ad5c <_localeconv_r>:
 800ad5c:	4800      	ldr	r0, [pc, #0]	@ (800ad60 <_localeconv_r+0x4>)
 800ad5e:	4770      	bx	lr
 800ad60:	20000124 	.word	0x20000124

0800ad64 <_close_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	@ (800ad80 <_close_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f8 f8bc 	bl	8002eec <_close>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_close_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_close_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200095d8 	.word	0x200095d8

0800ad84 <_reclaim_reent>:
 800ad84:	4b29      	ldr	r3, [pc, #164]	@ (800ae2c <_reclaim_reent+0xa8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4283      	cmp	r3, r0
 800ad8a:	b570      	push	{r4, r5, r6, lr}
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	d04b      	beq.n	800ae28 <_reclaim_reent+0xa4>
 800ad90:	69c3      	ldr	r3, [r0, #28]
 800ad92:	b1ab      	cbz	r3, 800adc0 <_reclaim_reent+0x3c>
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	b16b      	cbz	r3, 800adb4 <_reclaim_reent+0x30>
 800ad98:	2500      	movs	r5, #0
 800ad9a:	69e3      	ldr	r3, [r4, #28]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	5959      	ldr	r1, [r3, r5]
 800ada0:	2900      	cmp	r1, #0
 800ada2:	d13b      	bne.n	800ae1c <_reclaim_reent+0x98>
 800ada4:	3504      	adds	r5, #4
 800ada6:	2d80      	cmp	r5, #128	@ 0x80
 800ada8:	d1f7      	bne.n	800ad9a <_reclaim_reent+0x16>
 800adaa:	69e3      	ldr	r3, [r4, #28]
 800adac:	4620      	mov	r0, r4
 800adae:	68d9      	ldr	r1, [r3, #12]
 800adb0:	f000 ff2a 	bl	800bc08 <_free_r>
 800adb4:	69e3      	ldr	r3, [r4, #28]
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	b111      	cbz	r1, 800adc0 <_reclaim_reent+0x3c>
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 ff24 	bl	800bc08 <_free_r>
 800adc0:	6961      	ldr	r1, [r4, #20]
 800adc2:	b111      	cbz	r1, 800adca <_reclaim_reent+0x46>
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 ff1f 	bl	800bc08 <_free_r>
 800adca:	69e1      	ldr	r1, [r4, #28]
 800adcc:	b111      	cbz	r1, 800add4 <_reclaim_reent+0x50>
 800adce:	4620      	mov	r0, r4
 800add0:	f000 ff1a 	bl	800bc08 <_free_r>
 800add4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800add6:	b111      	cbz	r1, 800adde <_reclaim_reent+0x5a>
 800add8:	4620      	mov	r0, r4
 800adda:	f000 ff15 	bl	800bc08 <_free_r>
 800adde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ade0:	b111      	cbz	r1, 800ade8 <_reclaim_reent+0x64>
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 ff10 	bl	800bc08 <_free_r>
 800ade8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800adea:	b111      	cbz	r1, 800adf2 <_reclaim_reent+0x6e>
 800adec:	4620      	mov	r0, r4
 800adee:	f000 ff0b 	bl	800bc08 <_free_r>
 800adf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800adf4:	b111      	cbz	r1, 800adfc <_reclaim_reent+0x78>
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 ff06 	bl	800bc08 <_free_r>
 800adfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800adfe:	b111      	cbz	r1, 800ae06 <_reclaim_reent+0x82>
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 ff01 	bl	800bc08 <_free_r>
 800ae06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae08:	b111      	cbz	r1, 800ae10 <_reclaim_reent+0x8c>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fefc 	bl	800bc08 <_free_r>
 800ae10:	6a23      	ldr	r3, [r4, #32]
 800ae12:	b14b      	cbz	r3, 800ae28 <_reclaim_reent+0xa4>
 800ae14:	4620      	mov	r0, r4
 800ae16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae1a:	4718      	bx	r3
 800ae1c:	680e      	ldr	r6, [r1, #0]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fef2 	bl	800bc08 <_free_r>
 800ae24:	4631      	mov	r1, r6
 800ae26:	e7bb      	b.n	800ada0 <_reclaim_reent+0x1c>
 800ae28:	bd70      	pop	{r4, r5, r6, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200001a0 	.word	0x200001a0

0800ae30 <_lseek_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	4d07      	ldr	r5, [pc, #28]	@ (800ae50 <_lseek_r+0x20>)
 800ae34:	4604      	mov	r4, r0
 800ae36:	4608      	mov	r0, r1
 800ae38:	4611      	mov	r1, r2
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	602a      	str	r2, [r5, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	f7f8 f85e 	bl	8002f00 <_lseek>
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	d102      	bne.n	800ae4e <_lseek_r+0x1e>
 800ae48:	682b      	ldr	r3, [r5, #0]
 800ae4a:	b103      	cbz	r3, 800ae4e <_lseek_r+0x1e>
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	200095d8 	.word	0x200095d8

0800ae54 <_read_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d07      	ldr	r5, [pc, #28]	@ (800ae74 <_read_r+0x20>)
 800ae58:	4604      	mov	r4, r0
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f7f8 f826 	bl	8002eb4 <_read>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_read_r+0x1e>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_read_r+0x1e>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	200095d8 	.word	0x200095d8

0800ae78 <_sbrk_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d06      	ldr	r5, [pc, #24]	@ (800ae94 <_sbrk_r+0x1c>)
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	f7f8 f83e 	bl	8002f04 <_sbrk>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_sbrk_r+0x1a>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_sbrk_r+0x1a>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	200095d8 	.word	0x200095d8

0800ae98 <_write_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d07      	ldr	r5, [pc, #28]	@ (800aeb8 <_write_r+0x20>)
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	4608      	mov	r0, r1
 800aea0:	4611      	mov	r1, r2
 800aea2:	2200      	movs	r2, #0
 800aea4:	602a      	str	r2, [r5, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	f7f8 f812 	bl	8002ed0 <_write>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_write_r+0x1e>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_write_r+0x1e>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	200095d8 	.word	0x200095d8

0800aebc <__errno>:
 800aebc:	4b01      	ldr	r3, [pc, #4]	@ (800aec4 <__errno+0x8>)
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	200001a0 	.word	0x200001a0

0800aec8 <__libc_init_array>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	4d0d      	ldr	r5, [pc, #52]	@ (800af00 <__libc_init_array+0x38>)
 800aecc:	4c0d      	ldr	r4, [pc, #52]	@ (800af04 <__libc_init_array+0x3c>)
 800aece:	1b64      	subs	r4, r4, r5
 800aed0:	10a4      	asrs	r4, r4, #2
 800aed2:	2600      	movs	r6, #0
 800aed4:	42a6      	cmp	r6, r4
 800aed6:	d109      	bne.n	800aeec <__libc_init_array+0x24>
 800aed8:	4d0b      	ldr	r5, [pc, #44]	@ (800af08 <__libc_init_array+0x40>)
 800aeda:	4c0c      	ldr	r4, [pc, #48]	@ (800af0c <__libc_init_array+0x44>)
 800aedc:	f003 f8a0 	bl	800e020 <_init>
 800aee0:	1b64      	subs	r4, r4, r5
 800aee2:	10a4      	asrs	r4, r4, #2
 800aee4:	2600      	movs	r6, #0
 800aee6:	42a6      	cmp	r6, r4
 800aee8:	d105      	bne.n	800aef6 <__libc_init_array+0x2e>
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef0:	4798      	blx	r3
 800aef2:	3601      	adds	r6, #1
 800aef4:	e7ee      	b.n	800aed4 <__libc_init_array+0xc>
 800aef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aefa:	4798      	blx	r3
 800aefc:	3601      	adds	r6, #1
 800aefe:	e7f2      	b.n	800aee6 <__libc_init_array+0x1e>
 800af00:	0800f528 	.word	0x0800f528
 800af04:	0800f528 	.word	0x0800f528
 800af08:	0800f528 	.word	0x0800f528
 800af0c:	0800f52c 	.word	0x0800f52c

0800af10 <strcpy>:
 800af10:	4603      	mov	r3, r0
 800af12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af16:	f803 2b01 	strb.w	r2, [r3], #1
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d1f9      	bne.n	800af12 <strcpy+0x2>
 800af1e:	4770      	bx	lr

0800af20 <memcpy>:
 800af20:	440a      	add	r2, r1
 800af22:	4291      	cmp	r1, r2
 800af24:	f100 33ff 	add.w	r3, r0, #4294967295
 800af28:	d100      	bne.n	800af2c <memcpy+0xc>
 800af2a:	4770      	bx	lr
 800af2c:	b510      	push	{r4, lr}
 800af2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af36:	4291      	cmp	r1, r2
 800af38:	d1f9      	bne.n	800af2e <memcpy+0xe>
 800af3a:	bd10      	pop	{r4, pc}
 800af3c:	0000      	movs	r0, r0
	...

0800af40 <nan>:
 800af40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af48 <nan+0x8>
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	00000000 	.word	0x00000000
 800af4c:	7ff80000 	.word	0x7ff80000

0800af50 <nanf>:
 800af50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af58 <nanf+0x8>
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	7fc00000 	.word	0x7fc00000

0800af5c <div>:
 800af5c:	b510      	push	{r4, lr}
 800af5e:	fb91 f4f2 	sdiv	r4, r1, r2
 800af62:	fb02 1114 	mls	r1, r2, r4, r1
 800af66:	6004      	str	r4, [r0, #0]
 800af68:	6041      	str	r1, [r0, #4]
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <quorem>:
 800af6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	6903      	ldr	r3, [r0, #16]
 800af72:	690c      	ldr	r4, [r1, #16]
 800af74:	42a3      	cmp	r3, r4
 800af76:	4607      	mov	r7, r0
 800af78:	db7e      	blt.n	800b078 <quorem+0x10c>
 800af7a:	3c01      	subs	r4, #1
 800af7c:	f101 0814 	add.w	r8, r1, #20
 800af80:	00a3      	lsls	r3, r4, #2
 800af82:	f100 0514 	add.w	r5, r0, #20
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af96:	3301      	adds	r3, #1
 800af98:	429a      	cmp	r2, r3
 800af9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800afa2:	d32e      	bcc.n	800b002 <quorem+0x96>
 800afa4:	f04f 0a00 	mov.w	sl, #0
 800afa8:	46c4      	mov	ip, r8
 800afaa:	46ae      	mov	lr, r5
 800afac:	46d3      	mov	fp, sl
 800afae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afb2:	b298      	uxth	r0, r3
 800afb4:	fb06 a000 	mla	r0, r6, r0, sl
 800afb8:	0c02      	lsrs	r2, r0, #16
 800afba:	0c1b      	lsrs	r3, r3, #16
 800afbc:	fb06 2303 	mla	r3, r6, r3, r2
 800afc0:	f8de 2000 	ldr.w	r2, [lr]
 800afc4:	b280      	uxth	r0, r0
 800afc6:	b292      	uxth	r2, r2
 800afc8:	1a12      	subs	r2, r2, r0
 800afca:	445a      	add	r2, fp
 800afcc:	f8de 0000 	ldr.w	r0, [lr]
 800afd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afde:	b292      	uxth	r2, r2
 800afe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afe4:	45e1      	cmp	r9, ip
 800afe6:	f84e 2b04 	str.w	r2, [lr], #4
 800afea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afee:	d2de      	bcs.n	800afae <quorem+0x42>
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	58eb      	ldr	r3, [r5, r3]
 800aff4:	b92b      	cbnz	r3, 800b002 <quorem+0x96>
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	3b04      	subs	r3, #4
 800affa:	429d      	cmp	r5, r3
 800affc:	461a      	mov	r2, r3
 800affe:	d32f      	bcc.n	800b060 <quorem+0xf4>
 800b000:	613c      	str	r4, [r7, #16]
 800b002:	4638      	mov	r0, r7
 800b004:	f001 fc9e 	bl	800c944 <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	db25      	blt.n	800b058 <quorem+0xec>
 800b00c:	4629      	mov	r1, r5
 800b00e:	2000      	movs	r0, #0
 800b010:	f858 2b04 	ldr.w	r2, [r8], #4
 800b014:	f8d1 c000 	ldr.w	ip, [r1]
 800b018:	fa1f fe82 	uxth.w	lr, r2
 800b01c:	fa1f f38c 	uxth.w	r3, ip
 800b020:	eba3 030e 	sub.w	r3, r3, lr
 800b024:	4403      	add	r3, r0
 800b026:	0c12      	lsrs	r2, r2, #16
 800b028:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b02c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b030:	b29b      	uxth	r3, r3
 800b032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b036:	45c1      	cmp	r9, r8
 800b038:	f841 3b04 	str.w	r3, [r1], #4
 800b03c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b040:	d2e6      	bcs.n	800b010 <quorem+0xa4>
 800b042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b04a:	b922      	cbnz	r2, 800b056 <quorem+0xea>
 800b04c:	3b04      	subs	r3, #4
 800b04e:	429d      	cmp	r5, r3
 800b050:	461a      	mov	r2, r3
 800b052:	d30b      	bcc.n	800b06c <quorem+0x100>
 800b054:	613c      	str	r4, [r7, #16]
 800b056:	3601      	adds	r6, #1
 800b058:	4630      	mov	r0, r6
 800b05a:	b003      	add	sp, #12
 800b05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	3b04      	subs	r3, #4
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1cb      	bne.n	800b000 <quorem+0x94>
 800b068:	3c01      	subs	r4, #1
 800b06a:	e7c6      	b.n	800affa <quorem+0x8e>
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	3b04      	subs	r3, #4
 800b070:	2a00      	cmp	r2, #0
 800b072:	d1ef      	bne.n	800b054 <quorem+0xe8>
 800b074:	3c01      	subs	r4, #1
 800b076:	e7ea      	b.n	800b04e <quorem+0xe2>
 800b078:	2000      	movs	r0, #0
 800b07a:	e7ee      	b.n	800b05a <quorem+0xee>
 800b07c:	0000      	movs	r0, r0
	...

0800b080 <_dtoa_r>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	69c7      	ldr	r7, [r0, #28]
 800b086:	b099      	sub	sp, #100	@ 0x64
 800b088:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b08c:	ec55 4b10 	vmov	r4, r5, d0
 800b090:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b092:	9109      	str	r1, [sp, #36]	@ 0x24
 800b094:	4683      	mov	fp, r0
 800b096:	920e      	str	r2, [sp, #56]	@ 0x38
 800b098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b09a:	b97f      	cbnz	r7, 800b0bc <_dtoa_r+0x3c>
 800b09c:	2010      	movs	r0, #16
 800b09e:	f7fd f83d 	bl	800811c <malloc>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0a8:	b920      	cbnz	r0, 800b0b4 <_dtoa_r+0x34>
 800b0aa:	4ba7      	ldr	r3, [pc, #668]	@ (800b348 <_dtoa_r+0x2c8>)
 800b0ac:	21ef      	movs	r1, #239	@ 0xef
 800b0ae:	48a7      	ldr	r0, [pc, #668]	@ (800b34c <_dtoa_r+0x2cc>)
 800b0b0:	f002 fe66 	bl	800dd80 <__assert_func>
 800b0b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0b8:	6007      	str	r7, [r0, #0]
 800b0ba:	60c7      	str	r7, [r0, #12]
 800b0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	b159      	cbz	r1, 800b0dc <_dtoa_r+0x5c>
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	604a      	str	r2, [r1, #4]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4093      	lsls	r3, r2
 800b0cc:	608b      	str	r3, [r1, #8]
 800b0ce:	4658      	mov	r0, fp
 800b0d0:	f001 f9b4 	bl	800c43c <_Bfree>
 800b0d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	1e2b      	subs	r3, r5, #0
 800b0de:	bfb9      	ittee	lt
 800b0e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0e4:	9303      	strlt	r3, [sp, #12]
 800b0e6:	2300      	movge	r3, #0
 800b0e8:	6033      	strge	r3, [r6, #0]
 800b0ea:	9f03      	ldr	r7, [sp, #12]
 800b0ec:	4b98      	ldr	r3, [pc, #608]	@ (800b350 <_dtoa_r+0x2d0>)
 800b0ee:	bfbc      	itt	lt
 800b0f0:	2201      	movlt	r2, #1
 800b0f2:	6032      	strlt	r2, [r6, #0]
 800b0f4:	43bb      	bics	r3, r7
 800b0f6:	d112      	bne.n	800b11e <_dtoa_r+0x9e>
 800b0f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b104:	4323      	orrs	r3, r4
 800b106:	f000 854d 	beq.w	800bba4 <_dtoa_r+0xb24>
 800b10a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b10c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b364 <_dtoa_r+0x2e4>
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 854f 	beq.w	800bbb4 <_dtoa_r+0xb34>
 800b116:	f10a 0303 	add.w	r3, sl, #3
 800b11a:	f000 bd49 	b.w	800bbb0 <_dtoa_r+0xb30>
 800b11e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b122:	2200      	movs	r2, #0
 800b124:	ec51 0b17 	vmov	r0, r1, d7
 800b128:	2300      	movs	r3, #0
 800b12a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b12e:	f7f5 fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b132:	4680      	mov	r8, r0
 800b134:	b158      	cbz	r0, 800b14e <_dtoa_r+0xce>
 800b136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b138:	2301      	movs	r3, #1
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b13e:	b113      	cbz	r3, 800b146 <_dtoa_r+0xc6>
 800b140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b142:	4b84      	ldr	r3, [pc, #528]	@ (800b354 <_dtoa_r+0x2d4>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b368 <_dtoa_r+0x2e8>
 800b14a:	f000 bd33 	b.w	800bbb4 <_dtoa_r+0xb34>
 800b14e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b152:	aa16      	add	r2, sp, #88	@ 0x58
 800b154:	a917      	add	r1, sp, #92	@ 0x5c
 800b156:	4658      	mov	r0, fp
 800b158:	f001 fd14 	bl	800cb84 <__d2b>
 800b15c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b160:	4681      	mov	r9, r0
 800b162:	2e00      	cmp	r6, #0
 800b164:	d077      	beq.n	800b256 <_dtoa_r+0x1d6>
 800b166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b168:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b17c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b180:	4619      	mov	r1, r3
 800b182:	2200      	movs	r2, #0
 800b184:	4b74      	ldr	r3, [pc, #464]	@ (800b358 <_dtoa_r+0x2d8>)
 800b186:	f7f5 f88f 	bl	80002a8 <__aeabi_dsub>
 800b18a:	a369      	add	r3, pc, #420	@ (adr r3, 800b330 <_dtoa_r+0x2b0>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	f7f5 fa42 	bl	8000618 <__aeabi_dmul>
 800b194:	a368      	add	r3, pc, #416	@ (adr r3, 800b338 <_dtoa_r+0x2b8>)
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	f7f5 f887 	bl	80002ac <__adddf3>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	f7f5 f9ce 	bl	8000544 <__aeabi_i2d>
 800b1a8:	a365      	add	r3, pc, #404	@ (adr r3, 800b340 <_dtoa_r+0x2c0>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f7f5 fa33 	bl	8000618 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7f5 f877 	bl	80002ac <__adddf3>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460d      	mov	r5, r1
 800b1c2:	f7f5 fcd9 	bl	8000b78 <__aeabi_d2iz>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4607      	mov	r7, r0
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 fc94 	bl	8000afc <__aeabi_dcmplt>
 800b1d4:	b140      	cbz	r0, 800b1e8 <_dtoa_r+0x168>
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7f5 f9b4 	bl	8000544 <__aeabi_i2d>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	462b      	mov	r3, r5
 800b1e0:	f7f5 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1e4:	b900      	cbnz	r0, 800b1e8 <_dtoa_r+0x168>
 800b1e6:	3f01      	subs	r7, #1
 800b1e8:	2f16      	cmp	r7, #22
 800b1ea:	d851      	bhi.n	800b290 <_dtoa_r+0x210>
 800b1ec:	4b5b      	ldr	r3, [pc, #364]	@ (800b35c <_dtoa_r+0x2dc>)
 800b1ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1fa:	f7f5 fc7f 	bl	8000afc <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d048      	beq.n	800b294 <_dtoa_r+0x214>
 800b202:	3f01      	subs	r7, #1
 800b204:	2300      	movs	r3, #0
 800b206:	9312      	str	r3, [sp, #72]	@ 0x48
 800b208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b20a:	1b9b      	subs	r3, r3, r6
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	bf44      	itt	mi
 800b210:	f1c3 0801 	rsbmi	r8, r3, #1
 800b214:	2300      	movmi	r3, #0
 800b216:	9208      	str	r2, [sp, #32]
 800b218:	bf54      	ite	pl
 800b21a:	f04f 0800 	movpl.w	r8, #0
 800b21e:	9308      	strmi	r3, [sp, #32]
 800b220:	2f00      	cmp	r7, #0
 800b222:	db39      	blt.n	800b298 <_dtoa_r+0x218>
 800b224:	9b08      	ldr	r3, [sp, #32]
 800b226:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b228:	443b      	add	r3, r7
 800b22a:	9308      	str	r3, [sp, #32]
 800b22c:	2300      	movs	r3, #0
 800b22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	2b09      	cmp	r3, #9
 800b234:	d864      	bhi.n	800b300 <_dtoa_r+0x280>
 800b236:	2b05      	cmp	r3, #5
 800b238:	bfc4      	itt	gt
 800b23a:	3b04      	subgt	r3, #4
 800b23c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	f1a3 0302 	sub.w	r3, r3, #2
 800b244:	bfcc      	ite	gt
 800b246:	2400      	movgt	r4, #0
 800b248:	2401      	movle	r4, #1
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d863      	bhi.n	800b316 <_dtoa_r+0x296>
 800b24e:	e8df f003 	tbb	[pc, r3]
 800b252:	372a      	.short	0x372a
 800b254:	5535      	.short	0x5535
 800b256:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b25a:	441e      	add	r6, r3
 800b25c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b260:	2b20      	cmp	r3, #32
 800b262:	bfc1      	itttt	gt
 800b264:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b268:	409f      	lslgt	r7, r3
 800b26a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b26e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b272:	bfd6      	itet	le
 800b274:	f1c3 0320 	rsble	r3, r3, #32
 800b278:	ea47 0003 	orrgt.w	r0, r7, r3
 800b27c:	fa04 f003 	lslle.w	r0, r4, r3
 800b280:	f7f5 f950 	bl	8000524 <__aeabi_ui2d>
 800b284:	2201      	movs	r2, #1
 800b286:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b28a:	3e01      	subs	r6, #1
 800b28c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b28e:	e777      	b.n	800b180 <_dtoa_r+0x100>
 800b290:	2301      	movs	r3, #1
 800b292:	e7b8      	b.n	800b206 <_dtoa_r+0x186>
 800b294:	9012      	str	r0, [sp, #72]	@ 0x48
 800b296:	e7b7      	b.n	800b208 <_dtoa_r+0x188>
 800b298:	427b      	negs	r3, r7
 800b29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b29c:	2300      	movs	r3, #0
 800b29e:	eba8 0807 	sub.w	r8, r8, r7
 800b2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2a4:	e7c4      	b.n	800b230 <_dtoa_r+0x1b0>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dc35      	bgt.n	800b31c <_dtoa_r+0x29c>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	9307      	str	r3, [sp, #28]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2ba:	e00b      	b.n	800b2d4 <_dtoa_r+0x254>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e7f3      	b.n	800b2a8 <_dtoa_r+0x228>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2c6:	18fb      	adds	r3, r7, r3
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	bfb8      	it	lt
 800b2d2:	2301      	movlt	r3, #1
 800b2d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	2204      	movs	r2, #4
 800b2dc:	f102 0514 	add.w	r5, r2, #20
 800b2e0:	429d      	cmp	r5, r3
 800b2e2:	d91f      	bls.n	800b324 <_dtoa_r+0x2a4>
 800b2e4:	6041      	str	r1, [r0, #4]
 800b2e6:	4658      	mov	r0, fp
 800b2e8:	f001 f868 	bl	800c3bc <_Balloc>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d13c      	bne.n	800b36c <_dtoa_r+0x2ec>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b360 <_dtoa_r+0x2e0>)
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2fa:	e6d8      	b.n	800b0ae <_dtoa_r+0x2e>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e7e0      	b.n	800b2c2 <_dtoa_r+0x242>
 800b300:	2401      	movs	r4, #1
 800b302:	2300      	movs	r3, #0
 800b304:	9309      	str	r3, [sp, #36]	@ 0x24
 800b306:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b308:	f04f 33ff 	mov.w	r3, #4294967295
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	9307      	str	r3, [sp, #28]
 800b310:	2200      	movs	r2, #0
 800b312:	2312      	movs	r3, #18
 800b314:	e7d0      	b.n	800b2b8 <_dtoa_r+0x238>
 800b316:	2301      	movs	r3, #1
 800b318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b31a:	e7f5      	b.n	800b308 <_dtoa_r+0x288>
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	9307      	str	r3, [sp, #28]
 800b322:	e7d7      	b.n	800b2d4 <_dtoa_r+0x254>
 800b324:	3101      	adds	r1, #1
 800b326:	0052      	lsls	r2, r2, #1
 800b328:	e7d8      	b.n	800b2dc <_dtoa_r+0x25c>
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w
 800b330:	636f4361 	.word	0x636f4361
 800b334:	3fd287a7 	.word	0x3fd287a7
 800b338:	8b60c8b3 	.word	0x8b60c8b3
 800b33c:	3fc68a28 	.word	0x3fc68a28
 800b340:	509f79fb 	.word	0x509f79fb
 800b344:	3fd34413 	.word	0x3fd34413
 800b348:	0800f221 	.word	0x0800f221
 800b34c:	0800f238 	.word	0x0800f238
 800b350:	7ff00000 	.word	0x7ff00000
 800b354:	0800f480 	.word	0x0800f480
 800b358:	3ff80000 	.word	0x3ff80000
 800b35c:	0800f390 	.word	0x0800f390
 800b360:	0800f290 	.word	0x0800f290
 800b364:	0800f21d 	.word	0x0800f21d
 800b368:	0800f47f 	.word	0x0800f47f
 800b36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b370:	6018      	str	r0, [r3, #0]
 800b372:	9b07      	ldr	r3, [sp, #28]
 800b374:	2b0e      	cmp	r3, #14
 800b376:	f200 80a4 	bhi.w	800b4c2 <_dtoa_r+0x442>
 800b37a:	2c00      	cmp	r4, #0
 800b37c:	f000 80a1 	beq.w	800b4c2 <_dtoa_r+0x442>
 800b380:	2f00      	cmp	r7, #0
 800b382:	dd33      	ble.n	800b3ec <_dtoa_r+0x36c>
 800b384:	4bad      	ldr	r3, [pc, #692]	@ (800b63c <_dtoa_r+0x5bc>)
 800b386:	f007 020f 	and.w	r2, r7, #15
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	ed93 7b00 	vldr	d7, [r3]
 800b392:	05f8      	lsls	r0, r7, #23
 800b394:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b39c:	d516      	bpl.n	800b3cc <_dtoa_r+0x34c>
 800b39e:	4ba8      	ldr	r3, [pc, #672]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3a8:	f7f5 fa60 	bl	800086c <__aeabi_ddiv>
 800b3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3b0:	f004 040f 	and.w	r4, r4, #15
 800b3b4:	2603      	movs	r6, #3
 800b3b6:	4da2      	ldr	r5, [pc, #648]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3b8:	b954      	cbnz	r4, 800b3d0 <_dtoa_r+0x350>
 800b3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c2:	f7f5 fa53 	bl	800086c <__aeabi_ddiv>
 800b3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ca:	e028      	b.n	800b41e <_dtoa_r+0x39e>
 800b3cc:	2602      	movs	r6, #2
 800b3ce:	e7f2      	b.n	800b3b6 <_dtoa_r+0x336>
 800b3d0:	07e1      	lsls	r1, r4, #31
 800b3d2:	d508      	bpl.n	800b3e6 <_dtoa_r+0x366>
 800b3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3dc:	f7f5 f91c 	bl	8000618 <__aeabi_dmul>
 800b3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e4:	3601      	adds	r6, #1
 800b3e6:	1064      	asrs	r4, r4, #1
 800b3e8:	3508      	adds	r5, #8
 800b3ea:	e7e5      	b.n	800b3b8 <_dtoa_r+0x338>
 800b3ec:	f000 80d2 	beq.w	800b594 <_dtoa_r+0x514>
 800b3f0:	427c      	negs	r4, r7
 800b3f2:	4b92      	ldr	r3, [pc, #584]	@ (800b63c <_dtoa_r+0x5bc>)
 800b3f4:	4d92      	ldr	r5, [pc, #584]	@ (800b640 <_dtoa_r+0x5c0>)
 800b3f6:	f004 020f 	and.w	r2, r4, #15
 800b3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b406:	f7f5 f907 	bl	8000618 <__aeabi_dmul>
 800b40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40e:	1124      	asrs	r4, r4, #4
 800b410:	2300      	movs	r3, #0
 800b412:	2602      	movs	r6, #2
 800b414:	2c00      	cmp	r4, #0
 800b416:	f040 80b2 	bne.w	800b57e <_dtoa_r+0x4fe>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1d3      	bne.n	800b3c6 <_dtoa_r+0x346>
 800b41e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b420:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80b7 	beq.w	800b598 <_dtoa_r+0x518>
 800b42a:	4b86      	ldr	r3, [pc, #536]	@ (800b644 <_dtoa_r+0x5c4>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f5 fb63 	bl	8000afc <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f000 80ae 	beq.w	800b598 <_dtoa_r+0x518>
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 80aa 	beq.w	800b598 <_dtoa_r+0x518>
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd37      	ble.n	800b4ba <_dtoa_r+0x43a>
 800b44a:	1e7b      	subs	r3, r7, #1
 800b44c:	9304      	str	r3, [sp, #16]
 800b44e:	4620      	mov	r0, r4
 800b450:	4b7d      	ldr	r3, [pc, #500]	@ (800b648 <_dtoa_r+0x5c8>)
 800b452:	2200      	movs	r2, #0
 800b454:	4629      	mov	r1, r5
 800b456:	f7f5 f8df 	bl	8000618 <__aeabi_dmul>
 800b45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b45e:	9c00      	ldr	r4, [sp, #0]
 800b460:	3601      	adds	r6, #1
 800b462:	4630      	mov	r0, r6
 800b464:	f7f5 f86e 	bl	8000544 <__aeabi_i2d>
 800b468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b46c:	f7f5 f8d4 	bl	8000618 <__aeabi_dmul>
 800b470:	4b76      	ldr	r3, [pc, #472]	@ (800b64c <_dtoa_r+0x5cc>)
 800b472:	2200      	movs	r2, #0
 800b474:	f7f4 ff1a 	bl	80002ac <__adddf3>
 800b478:	4605      	mov	r5, r0
 800b47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b47e:	2c00      	cmp	r4, #0
 800b480:	f040 808d 	bne.w	800b59e <_dtoa_r+0x51e>
 800b484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b488:	4b71      	ldr	r3, [pc, #452]	@ (800b650 <_dtoa_r+0x5d0>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	f7f4 ff0c 	bl	80002a8 <__aeabi_dsub>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b498:	462a      	mov	r2, r5
 800b49a:	4633      	mov	r3, r6
 800b49c:	f7f5 fb4c 	bl	8000b38 <__aeabi_dcmpgt>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	f040 828b 	bne.w	800b9bc <_dtoa_r+0x93c>
 800b4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4b0:	f7f5 fb24 	bl	8000afc <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f040 8128 	bne.w	800b70a <_dtoa_r+0x68a>
 800b4ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f2c0 815a 	blt.w	800b77e <_dtoa_r+0x6fe>
 800b4ca:	2f0e      	cmp	r7, #14
 800b4cc:	f300 8157 	bgt.w	800b77e <_dtoa_r+0x6fe>
 800b4d0:	4b5a      	ldr	r3, [pc, #360]	@ (800b63c <_dtoa_r+0x5bc>)
 800b4d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4d6:	ed93 7b00 	vldr	d7, [r3]
 800b4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	ed8d 7b00 	vstr	d7, [sp]
 800b4e2:	da03      	bge.n	800b4ec <_dtoa_r+0x46c>
 800b4e4:	9b07      	ldr	r3, [sp, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f340 8101 	ble.w	800b6ee <_dtoa_r+0x66e>
 800b4ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4f0:	4656      	mov	r6, sl
 800b4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7f5 f9b7 	bl	800086c <__aeabi_ddiv>
 800b4fe:	f7f5 fb3b 	bl	8000b78 <__aeabi_d2iz>
 800b502:	4680      	mov	r8, r0
 800b504:	f7f5 f81e 	bl	8000544 <__aeabi_i2d>
 800b508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b50c:	f7f5 f884 	bl	8000618 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b51c:	f7f4 fec4 	bl	80002a8 <__aeabi_dsub>
 800b520:	f806 4b01 	strb.w	r4, [r6], #1
 800b524:	9d07      	ldr	r5, [sp, #28]
 800b526:	eba6 040a 	sub.w	r4, r6, sl
 800b52a:	42a5      	cmp	r5, r4
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	f040 8117 	bne.w	800b762 <_dtoa_r+0x6e2>
 800b534:	f7f4 feba 	bl	80002ac <__adddf3>
 800b538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b53c:	4604      	mov	r4, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	f7f5 fafa 	bl	8000b38 <__aeabi_dcmpgt>
 800b544:	2800      	cmp	r0, #0
 800b546:	f040 80f9 	bne.w	800b73c <_dtoa_r+0x6bc>
 800b54a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b556:	b118      	cbz	r0, 800b560 <_dtoa_r+0x4e0>
 800b558:	f018 0f01 	tst.w	r8, #1
 800b55c:	f040 80ee 	bne.w	800b73c <_dtoa_r+0x6bc>
 800b560:	4649      	mov	r1, r9
 800b562:	4658      	mov	r0, fp
 800b564:	f000 ff6a 	bl	800c43c <_Bfree>
 800b568:	2300      	movs	r3, #0
 800b56a:	7033      	strb	r3, [r6, #0]
 800b56c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b56e:	3701      	adds	r7, #1
 800b570:	601f      	str	r7, [r3, #0]
 800b572:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 831d 	beq.w	800bbb4 <_dtoa_r+0xb34>
 800b57a:	601e      	str	r6, [r3, #0]
 800b57c:	e31a      	b.n	800bbb4 <_dtoa_r+0xb34>
 800b57e:	07e2      	lsls	r2, r4, #31
 800b580:	d505      	bpl.n	800b58e <_dtoa_r+0x50e>
 800b582:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b586:	f7f5 f847 	bl	8000618 <__aeabi_dmul>
 800b58a:	3601      	adds	r6, #1
 800b58c:	2301      	movs	r3, #1
 800b58e:	1064      	asrs	r4, r4, #1
 800b590:	3508      	adds	r5, #8
 800b592:	e73f      	b.n	800b414 <_dtoa_r+0x394>
 800b594:	2602      	movs	r6, #2
 800b596:	e742      	b.n	800b41e <_dtoa_r+0x39e>
 800b598:	9c07      	ldr	r4, [sp, #28]
 800b59a:	9704      	str	r7, [sp, #16]
 800b59c:	e761      	b.n	800b462 <_dtoa_r+0x3e2>
 800b59e:	4b27      	ldr	r3, [pc, #156]	@ (800b63c <_dtoa_r+0x5bc>)
 800b5a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5aa:	4454      	add	r4, sl
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d053      	beq.n	800b658 <_dtoa_r+0x5d8>
 800b5b0:	4928      	ldr	r1, [pc, #160]	@ (800b654 <_dtoa_r+0x5d4>)
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7f5 f95a 	bl	800086c <__aeabi_ddiv>
 800b5b8:	4633      	mov	r3, r6
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	f7f4 fe74 	bl	80002a8 <__aeabi_dsub>
 800b5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5c4:	4656      	mov	r6, sl
 800b5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ca:	f7f5 fad5 	bl	8000b78 <__aeabi_d2iz>
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	f7f4 ffb8 	bl	8000544 <__aeabi_i2d>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5dc:	f7f4 fe64 	bl	80002a8 <__aeabi_dsub>
 800b5e0:	3530      	adds	r5, #48	@ 0x30
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5ea:	f806 5b01 	strb.w	r5, [r6], #1
 800b5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f2:	f7f5 fa83 	bl	8000afc <__aeabi_dcmplt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d171      	bne.n	800b6de <_dtoa_r+0x65e>
 800b5fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5fe:	4911      	ldr	r1, [pc, #68]	@ (800b644 <_dtoa_r+0x5c4>)
 800b600:	2000      	movs	r0, #0
 800b602:	f7f4 fe51 	bl	80002a8 <__aeabi_dsub>
 800b606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b60a:	f7f5 fa77 	bl	8000afc <__aeabi_dcmplt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f040 8095 	bne.w	800b73e <_dtoa_r+0x6be>
 800b614:	42a6      	cmp	r6, r4
 800b616:	f43f af50 	beq.w	800b4ba <_dtoa_r+0x43a>
 800b61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b61e:	4b0a      	ldr	r3, [pc, #40]	@ (800b648 <_dtoa_r+0x5c8>)
 800b620:	2200      	movs	r2, #0
 800b622:	f7f4 fff9 	bl	8000618 <__aeabi_dmul>
 800b626:	4b08      	ldr	r3, [pc, #32]	@ (800b648 <_dtoa_r+0x5c8>)
 800b628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b62c:	2200      	movs	r2, #0
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	f7f4 fff1 	bl	8000618 <__aeabi_dmul>
 800b636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63a:	e7c4      	b.n	800b5c6 <_dtoa_r+0x546>
 800b63c:	0800f390 	.word	0x0800f390
 800b640:	0800f368 	.word	0x0800f368
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	40240000 	.word	0x40240000
 800b64c:	401c0000 	.word	0x401c0000
 800b650:	40140000 	.word	0x40140000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	f7f4 ffdc 	bl	8000618 <__aeabi_dmul>
 800b660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b664:	9415      	str	r4, [sp, #84]	@ 0x54
 800b666:	4656      	mov	r6, sl
 800b668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66c:	f7f5 fa84 	bl	8000b78 <__aeabi_d2iz>
 800b670:	4605      	mov	r5, r0
 800b672:	f7f4 ff67 	bl	8000544 <__aeabi_i2d>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b67e:	f7f4 fe13 	bl	80002a8 <__aeabi_dsub>
 800b682:	3530      	adds	r5, #48	@ 0x30
 800b684:	f806 5b01 	strb.w	r5, [r6], #1
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	42a6      	cmp	r6, r4
 800b68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	d124      	bne.n	800b6e2 <_dtoa_r+0x662>
 800b698:	4bac      	ldr	r3, [pc, #688]	@ (800b94c <_dtoa_r+0x8cc>)
 800b69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b69e:	f7f4 fe05 	bl	80002ac <__adddf3>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6aa:	f7f5 fa45 	bl	8000b38 <__aeabi_dcmpgt>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d145      	bne.n	800b73e <_dtoa_r+0x6be>
 800b6b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6b6:	49a5      	ldr	r1, [pc, #660]	@ (800b94c <_dtoa_r+0x8cc>)
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f7f4 fdf5 	bl	80002a8 <__aeabi_dsub>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c6:	f7f5 fa19 	bl	8000afc <__aeabi_dcmplt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f43f aef5 	beq.w	800b4ba <_dtoa_r+0x43a>
 800b6d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b6d2:	1e73      	subs	r3, r6, #1
 800b6d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6da:	2b30      	cmp	r3, #48	@ 0x30
 800b6dc:	d0f8      	beq.n	800b6d0 <_dtoa_r+0x650>
 800b6de:	9f04      	ldr	r7, [sp, #16]
 800b6e0:	e73e      	b.n	800b560 <_dtoa_r+0x4e0>
 800b6e2:	4b9b      	ldr	r3, [pc, #620]	@ (800b950 <_dtoa_r+0x8d0>)
 800b6e4:	f7f4 ff98 	bl	8000618 <__aeabi_dmul>
 800b6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ec:	e7bc      	b.n	800b668 <_dtoa_r+0x5e8>
 800b6ee:	d10c      	bne.n	800b70a <_dtoa_r+0x68a>
 800b6f0:	4b98      	ldr	r3, [pc, #608]	@ (800b954 <_dtoa_r+0x8d4>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f8:	f7f4 ff8e 	bl	8000618 <__aeabi_dmul>
 800b6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b700:	f7f5 fa10 	bl	8000b24 <__aeabi_dcmpge>
 800b704:	2800      	cmp	r0, #0
 800b706:	f000 8157 	beq.w	800b9b8 <_dtoa_r+0x938>
 800b70a:	2400      	movs	r4, #0
 800b70c:	4625      	mov	r5, r4
 800b70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b710:	43db      	mvns	r3, r3
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	4656      	mov	r6, sl
 800b716:	2700      	movs	r7, #0
 800b718:	4621      	mov	r1, r4
 800b71a:	4658      	mov	r0, fp
 800b71c:	f000 fe8e 	bl	800c43c <_Bfree>
 800b720:	2d00      	cmp	r5, #0
 800b722:	d0dc      	beq.n	800b6de <_dtoa_r+0x65e>
 800b724:	b12f      	cbz	r7, 800b732 <_dtoa_r+0x6b2>
 800b726:	42af      	cmp	r7, r5
 800b728:	d003      	beq.n	800b732 <_dtoa_r+0x6b2>
 800b72a:	4639      	mov	r1, r7
 800b72c:	4658      	mov	r0, fp
 800b72e:	f000 fe85 	bl	800c43c <_Bfree>
 800b732:	4629      	mov	r1, r5
 800b734:	4658      	mov	r0, fp
 800b736:	f000 fe81 	bl	800c43c <_Bfree>
 800b73a:	e7d0      	b.n	800b6de <_dtoa_r+0x65e>
 800b73c:	9704      	str	r7, [sp, #16]
 800b73e:	4633      	mov	r3, r6
 800b740:	461e      	mov	r6, r3
 800b742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b746:	2a39      	cmp	r2, #57	@ 0x39
 800b748:	d107      	bne.n	800b75a <_dtoa_r+0x6da>
 800b74a:	459a      	cmp	sl, r3
 800b74c:	d1f8      	bne.n	800b740 <_dtoa_r+0x6c0>
 800b74e:	9a04      	ldr	r2, [sp, #16]
 800b750:	3201      	adds	r2, #1
 800b752:	9204      	str	r2, [sp, #16]
 800b754:	2230      	movs	r2, #48	@ 0x30
 800b756:	f88a 2000 	strb.w	r2, [sl]
 800b75a:	781a      	ldrb	r2, [r3, #0]
 800b75c:	3201      	adds	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e7bd      	b.n	800b6de <_dtoa_r+0x65e>
 800b762:	4b7b      	ldr	r3, [pc, #492]	@ (800b950 <_dtoa_r+0x8d0>)
 800b764:	2200      	movs	r2, #0
 800b766:	f7f4 ff57 	bl	8000618 <__aeabi_dmul>
 800b76a:	2200      	movs	r2, #0
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	460d      	mov	r5, r1
 800b772:	f7f5 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b776:	2800      	cmp	r0, #0
 800b778:	f43f aebb 	beq.w	800b4f2 <_dtoa_r+0x472>
 800b77c:	e6f0      	b.n	800b560 <_dtoa_r+0x4e0>
 800b77e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b780:	2a00      	cmp	r2, #0
 800b782:	f000 80db 	beq.w	800b93c <_dtoa_r+0x8bc>
 800b786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b788:	2a01      	cmp	r2, #1
 800b78a:	f300 80bf 	bgt.w	800b90c <_dtoa_r+0x88c>
 800b78e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b790:	2a00      	cmp	r2, #0
 800b792:	f000 80b7 	beq.w	800b904 <_dtoa_r+0x884>
 800b796:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b79a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b79c:	4646      	mov	r6, r8
 800b79e:	9a08      	ldr	r2, [sp, #32]
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	441a      	add	r2, r3
 800b7a4:	4658      	mov	r0, fp
 800b7a6:	4498      	add	r8, r3
 800b7a8:	9208      	str	r2, [sp, #32]
 800b7aa:	f000 ff45 	bl	800c638 <__i2b>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b15e      	cbz	r6, 800b7ca <_dtoa_r+0x74a>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dd08      	ble.n	800b7ca <_dtoa_r+0x74a>
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	9a08      	ldr	r2, [sp, #32]
 800b7bc:	bfa8      	it	ge
 800b7be:	4633      	movge	r3, r6
 800b7c0:	eba8 0803 	sub.w	r8, r8, r3
 800b7c4:	1af6      	subs	r6, r6, r3
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	9308      	str	r3, [sp, #32]
 800b7ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7cc:	b1f3      	cbz	r3, 800b80c <_dtoa_r+0x78c>
 800b7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 80b7 	beq.w	800b944 <_dtoa_r+0x8c4>
 800b7d6:	b18c      	cbz	r4, 800b7fc <_dtoa_r+0x77c>
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4622      	mov	r2, r4
 800b7dc:	4658      	mov	r0, fp
 800b7de:	f000 ffeb 	bl	800c7b8 <__pow5mult>
 800b7e2:	464a      	mov	r2, r9
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 ff3b 	bl	800c664 <__multiply>
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	9004      	str	r0, [sp, #16]
 800b7f2:	4658      	mov	r0, fp
 800b7f4:	f000 fe22 	bl	800c43c <_Bfree>
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	4699      	mov	r9, r3
 800b7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7fe:	1b1a      	subs	r2, r3, r4
 800b800:	d004      	beq.n	800b80c <_dtoa_r+0x78c>
 800b802:	4649      	mov	r1, r9
 800b804:	4658      	mov	r0, fp
 800b806:	f000 ffd7 	bl	800c7b8 <__pow5mult>
 800b80a:	4681      	mov	r9, r0
 800b80c:	2101      	movs	r1, #1
 800b80e:	4658      	mov	r0, fp
 800b810:	f000 ff12 	bl	800c638 <__i2b>
 800b814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b816:	4604      	mov	r4, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81cf 	beq.w	800bbbc <_dtoa_r+0xb3c>
 800b81e:	461a      	mov	r2, r3
 800b820:	4601      	mov	r1, r0
 800b822:	4658      	mov	r0, fp
 800b824:	f000 ffc8 	bl	800c7b8 <__pow5mult>
 800b828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	4604      	mov	r4, r0
 800b82e:	f300 8095 	bgt.w	800b95c <_dtoa_r+0x8dc>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f040 8087 	bne.w	800b948 <_dtoa_r+0x8c8>
 800b83a:	9b03      	ldr	r3, [sp, #12]
 800b83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8089 	bne.w	800b958 <_dtoa_r+0x8d8>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b84c:	0d1b      	lsrs	r3, r3, #20
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	b12b      	cbz	r3, 800b85e <_dtoa_r+0x7de>
 800b852:	9b08      	ldr	r3, [sp, #32]
 800b854:	3301      	adds	r3, #1
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	f108 0801 	add.w	r8, r8, #1
 800b85c:	2301      	movs	r3, #1
 800b85e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 81b0 	beq.w	800bbc8 <_dtoa_r+0xb48>
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b86e:	6918      	ldr	r0, [r3, #16]
 800b870:	f000 fe96 	bl	800c5a0 <__hi0bits>
 800b874:	f1c0 0020 	rsb	r0, r0, #32
 800b878:	9b08      	ldr	r3, [sp, #32]
 800b87a:	4418      	add	r0, r3
 800b87c:	f010 001f 	ands.w	r0, r0, #31
 800b880:	d077      	beq.n	800b972 <_dtoa_r+0x8f2>
 800b882:	f1c0 0320 	rsb	r3, r0, #32
 800b886:	2b04      	cmp	r3, #4
 800b888:	dd6b      	ble.n	800b962 <_dtoa_r+0x8e2>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	f1c0 001c 	rsb	r0, r0, #28
 800b890:	4403      	add	r3, r0
 800b892:	4480      	add	r8, r0
 800b894:	4406      	add	r6, r0
 800b896:	9308      	str	r3, [sp, #32]
 800b898:	f1b8 0f00 	cmp.w	r8, #0
 800b89c:	dd05      	ble.n	800b8aa <_dtoa_r+0x82a>
 800b89e:	4649      	mov	r1, r9
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	4658      	mov	r0, fp
 800b8a4:	f000 ffe2 	bl	800c86c <__lshift>
 800b8a8:	4681      	mov	r9, r0
 800b8aa:	9b08      	ldr	r3, [sp, #32]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	dd05      	ble.n	800b8bc <_dtoa_r+0x83c>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 ffd9 	bl	800c86c <__lshift>
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d059      	beq.n	800b976 <_dtoa_r+0x8f6>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f001 f83d 	bl	800c944 <__mcmp>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	da53      	bge.n	800b976 <_dtoa_r+0x8f6>
 800b8ce:	1e7b      	subs	r3, r7, #1
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	220a      	movs	r2, #10
 800b8d8:	4658      	mov	r0, fp
 800b8da:	f000 fdd1 	bl	800c480 <__multadd>
 800b8de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e0:	4681      	mov	r9, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8172 	beq.w	800bbcc <_dtoa_r+0xb4c>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	220a      	movs	r2, #10
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f000 fdc6 	bl	800c480 <__multadd>
 800b8f4:	9b00      	ldr	r3, [sp, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	dc67      	bgt.n	800b9cc <_dtoa_r+0x94c>
 800b8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	dc41      	bgt.n	800b986 <_dtoa_r+0x906>
 800b902:	e063      	b.n	800b9cc <_dtoa_r+0x94c>
 800b904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b90a:	e746      	b.n	800b79a <_dtoa_r+0x71a>
 800b90c:	9b07      	ldr	r3, [sp, #28]
 800b90e:	1e5c      	subs	r4, r3, #1
 800b910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b912:	42a3      	cmp	r3, r4
 800b914:	bfbf      	itttt	lt
 800b916:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b918:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b91a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b91c:	1ae3      	sublt	r3, r4, r3
 800b91e:	bfb4      	ite	lt
 800b920:	18d2      	addlt	r2, r2, r3
 800b922:	1b1c      	subge	r4, r3, r4
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	bfbc      	itt	lt
 800b928:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b92a:	2400      	movlt	r4, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	bfb5      	itete	lt
 800b930:	eba8 0603 	sublt.w	r6, r8, r3
 800b934:	9b07      	ldrge	r3, [sp, #28]
 800b936:	2300      	movlt	r3, #0
 800b938:	4646      	movge	r6, r8
 800b93a:	e730      	b.n	800b79e <_dtoa_r+0x71e>
 800b93c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b93e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b940:	4646      	mov	r6, r8
 800b942:	e735      	b.n	800b7b0 <_dtoa_r+0x730>
 800b944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b946:	e75c      	b.n	800b802 <_dtoa_r+0x782>
 800b948:	2300      	movs	r3, #0
 800b94a:	e788      	b.n	800b85e <_dtoa_r+0x7de>
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	40240000 	.word	0x40240000
 800b954:	40140000 	.word	0x40140000
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	e780      	b.n	800b85e <_dtoa_r+0x7de>
 800b95c:	2300      	movs	r3, #0
 800b95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b960:	e782      	b.n	800b868 <_dtoa_r+0x7e8>
 800b962:	d099      	beq.n	800b898 <_dtoa_r+0x818>
 800b964:	9a08      	ldr	r2, [sp, #32]
 800b966:	331c      	adds	r3, #28
 800b968:	441a      	add	r2, r3
 800b96a:	4498      	add	r8, r3
 800b96c:	441e      	add	r6, r3
 800b96e:	9208      	str	r2, [sp, #32]
 800b970:	e792      	b.n	800b898 <_dtoa_r+0x818>
 800b972:	4603      	mov	r3, r0
 800b974:	e7f6      	b.n	800b964 <_dtoa_r+0x8e4>
 800b976:	9b07      	ldr	r3, [sp, #28]
 800b978:	9704      	str	r7, [sp, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	dc20      	bgt.n	800b9c0 <_dtoa_r+0x940>
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	2b02      	cmp	r3, #2
 800b984:	dd1e      	ble.n	800b9c4 <_dtoa_r+0x944>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f47f aec0 	bne.w	800b70e <_dtoa_r+0x68e>
 800b98e:	4621      	mov	r1, r4
 800b990:	2205      	movs	r2, #5
 800b992:	4658      	mov	r0, fp
 800b994:	f000 fd74 	bl	800c480 <__multadd>
 800b998:	4601      	mov	r1, r0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 ffd1 	bl	800c944 <__mcmp>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	f77f aeb3 	ble.w	800b70e <_dtoa_r+0x68e>
 800b9a8:	4656      	mov	r6, sl
 800b9aa:	2331      	movs	r3, #49	@ 0x31
 800b9ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	e6ae      	b.n	800b716 <_dtoa_r+0x696>
 800b9b8:	9c07      	ldr	r4, [sp, #28]
 800b9ba:	9704      	str	r7, [sp, #16]
 800b9bc:	4625      	mov	r5, r4
 800b9be:	e7f3      	b.n	800b9a8 <_dtoa_r+0x928>
 800b9c0:	9b07      	ldr	r3, [sp, #28]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 8104 	beq.w	800bbd4 <_dtoa_r+0xb54>
 800b9cc:	2e00      	cmp	r6, #0
 800b9ce:	dd05      	ble.n	800b9dc <_dtoa_r+0x95c>
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	4658      	mov	r0, fp
 800b9d6:	f000 ff49 	bl	800c86c <__lshift>
 800b9da:	4605      	mov	r5, r0
 800b9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d05a      	beq.n	800ba98 <_dtoa_r+0xa18>
 800b9e2:	6869      	ldr	r1, [r5, #4]
 800b9e4:	4658      	mov	r0, fp
 800b9e6:	f000 fce9 	bl	800c3bc <_Balloc>
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	b928      	cbnz	r0, 800b9fa <_dtoa_r+0x97a>
 800b9ee:	4b84      	ldr	r3, [pc, #528]	@ (800bc00 <_dtoa_r+0xb80>)
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b9f6:	f7ff bb5a 	b.w	800b0ae <_dtoa_r+0x2e>
 800b9fa:	692a      	ldr	r2, [r5, #16]
 800b9fc:	3202      	adds	r2, #2
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	f105 010c 	add.w	r1, r5, #12
 800ba04:	300c      	adds	r0, #12
 800ba06:	f7ff fa8b 	bl	800af20 <memcpy>
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4658      	mov	r0, fp
 800ba10:	f000 ff2c 	bl	800c86c <__lshift>
 800ba14:	f10a 0301 	add.w	r3, sl, #1
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	9b00      	ldr	r3, [sp, #0]
 800ba1c:	4453      	add	r3, sl
 800ba1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	462f      	mov	r7, r5
 800ba28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	9b07      	ldr	r3, [sp, #28]
 800ba2e:	4621      	mov	r1, r4
 800ba30:	3b01      	subs	r3, #1
 800ba32:	4648      	mov	r0, r9
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	f7ff fa99 	bl	800af6c <quorem>
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	9002      	str	r0, [sp, #8]
 800ba3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba42:	4648      	mov	r0, r9
 800ba44:	f000 ff7e 	bl	800c944 <__mcmp>
 800ba48:	462a      	mov	r2, r5
 800ba4a:	9008      	str	r0, [sp, #32]
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f000 ff94 	bl	800c97c <__mdiff>
 800ba54:	68c2      	ldr	r2, [r0, #12]
 800ba56:	4606      	mov	r6, r0
 800ba58:	bb02      	cbnz	r2, 800ba9c <_dtoa_r+0xa1c>
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f000 ff71 	bl	800c944 <__mcmp>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4631      	mov	r1, r6
 800ba66:	4658      	mov	r0, fp
 800ba68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba6a:	f000 fce7 	bl	800c43c <_Bfree>
 800ba6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba72:	9e07      	ldr	r6, [sp, #28]
 800ba74:	ea43 0102 	orr.w	r1, r3, r2
 800ba78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7a:	4319      	orrs	r1, r3
 800ba7c:	d110      	bne.n	800baa0 <_dtoa_r+0xa20>
 800ba7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba82:	d029      	beq.n	800bad8 <_dtoa_r+0xa58>
 800ba84:	9b08      	ldr	r3, [sp, #32]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd02      	ble.n	800ba90 <_dtoa_r+0xa10>
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba90:	9b00      	ldr	r3, [sp, #0]
 800ba92:	f883 8000 	strb.w	r8, [r3]
 800ba96:	e63f      	b.n	800b718 <_dtoa_r+0x698>
 800ba98:	4628      	mov	r0, r5
 800ba9a:	e7bb      	b.n	800ba14 <_dtoa_r+0x994>
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	e7e1      	b.n	800ba64 <_dtoa_r+0x9e4>
 800baa0:	9b08      	ldr	r3, [sp, #32]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	db04      	blt.n	800bab0 <_dtoa_r+0xa30>
 800baa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800baa8:	430b      	orrs	r3, r1
 800baaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800baac:	430b      	orrs	r3, r1
 800baae:	d120      	bne.n	800baf2 <_dtoa_r+0xa72>
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	dded      	ble.n	800ba90 <_dtoa_r+0xa10>
 800bab4:	4649      	mov	r1, r9
 800bab6:	2201      	movs	r2, #1
 800bab8:	4658      	mov	r0, fp
 800baba:	f000 fed7 	bl	800c86c <__lshift>
 800babe:	4621      	mov	r1, r4
 800bac0:	4681      	mov	r9, r0
 800bac2:	f000 ff3f 	bl	800c944 <__mcmp>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	dc03      	bgt.n	800bad2 <_dtoa_r+0xa52>
 800baca:	d1e1      	bne.n	800ba90 <_dtoa_r+0xa10>
 800bacc:	f018 0f01 	tst.w	r8, #1
 800bad0:	d0de      	beq.n	800ba90 <_dtoa_r+0xa10>
 800bad2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bad6:	d1d8      	bne.n	800ba8a <_dtoa_r+0xa0a>
 800bad8:	9a00      	ldr	r2, [sp, #0]
 800bada:	2339      	movs	r3, #57	@ 0x39
 800badc:	7013      	strb	r3, [r2, #0]
 800bade:	4633      	mov	r3, r6
 800bae0:	461e      	mov	r6, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bae8:	2a39      	cmp	r2, #57	@ 0x39
 800baea:	d052      	beq.n	800bb92 <_dtoa_r+0xb12>
 800baec:	3201      	adds	r2, #1
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	e612      	b.n	800b718 <_dtoa_r+0x698>
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	dd07      	ble.n	800bb06 <_dtoa_r+0xa86>
 800baf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bafa:	d0ed      	beq.n	800bad8 <_dtoa_r+0xa58>
 800bafc:	9a00      	ldr	r2, [sp, #0]
 800bafe:	f108 0301 	add.w	r3, r8, #1
 800bb02:	7013      	strb	r3, [r2, #0]
 800bb04:	e608      	b.n	800b718 <_dtoa_r+0x698>
 800bb06:	9b07      	ldr	r3, [sp, #28]
 800bb08:	9a07      	ldr	r2, [sp, #28]
 800bb0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d028      	beq.n	800bb66 <_dtoa_r+0xae6>
 800bb14:	4649      	mov	r1, r9
 800bb16:	2300      	movs	r3, #0
 800bb18:	220a      	movs	r2, #10
 800bb1a:	4658      	mov	r0, fp
 800bb1c:	f000 fcb0 	bl	800c480 <__multadd>
 800bb20:	42af      	cmp	r7, r5
 800bb22:	4681      	mov	r9, r0
 800bb24:	f04f 0300 	mov.w	r3, #0
 800bb28:	f04f 020a 	mov.w	r2, #10
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	4658      	mov	r0, fp
 800bb30:	d107      	bne.n	800bb42 <_dtoa_r+0xac2>
 800bb32:	f000 fca5 	bl	800c480 <__multadd>
 800bb36:	4607      	mov	r7, r0
 800bb38:	4605      	mov	r5, r0
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	e774      	b.n	800ba2c <_dtoa_r+0x9ac>
 800bb42:	f000 fc9d 	bl	800c480 <__multadd>
 800bb46:	4629      	mov	r1, r5
 800bb48:	4607      	mov	r7, r0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	220a      	movs	r2, #10
 800bb4e:	4658      	mov	r0, fp
 800bb50:	f000 fc96 	bl	800c480 <__multadd>
 800bb54:	4605      	mov	r5, r0
 800bb56:	e7f0      	b.n	800bb3a <_dtoa_r+0xaba>
 800bb58:	9b00      	ldr	r3, [sp, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	bfcc      	ite	gt
 800bb5e:	461e      	movgt	r6, r3
 800bb60:	2601      	movle	r6, #1
 800bb62:	4456      	add	r6, sl
 800bb64:	2700      	movs	r7, #0
 800bb66:	4649      	mov	r1, r9
 800bb68:	2201      	movs	r2, #1
 800bb6a:	4658      	mov	r0, fp
 800bb6c:	f000 fe7e 	bl	800c86c <__lshift>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4681      	mov	r9, r0
 800bb74:	f000 fee6 	bl	800c944 <__mcmp>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	dcb0      	bgt.n	800bade <_dtoa_r+0xa5e>
 800bb7c:	d102      	bne.n	800bb84 <_dtoa_r+0xb04>
 800bb7e:	f018 0f01 	tst.w	r8, #1
 800bb82:	d1ac      	bne.n	800bade <_dtoa_r+0xa5e>
 800bb84:	4633      	mov	r3, r6
 800bb86:	461e      	mov	r6, r3
 800bb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb8c:	2a30      	cmp	r2, #48	@ 0x30
 800bb8e:	d0fa      	beq.n	800bb86 <_dtoa_r+0xb06>
 800bb90:	e5c2      	b.n	800b718 <_dtoa_r+0x698>
 800bb92:	459a      	cmp	sl, r3
 800bb94:	d1a4      	bne.n	800bae0 <_dtoa_r+0xa60>
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	9304      	str	r3, [sp, #16]
 800bb9c:	2331      	movs	r3, #49	@ 0x31
 800bb9e:	f88a 3000 	strb.w	r3, [sl]
 800bba2:	e5b9      	b.n	800b718 <_dtoa_r+0x698>
 800bba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bba6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc04 <_dtoa_r+0xb84>
 800bbaa:	b11b      	cbz	r3, 800bbb4 <_dtoa_r+0xb34>
 800bbac:	f10a 0308 	add.w	r3, sl, #8
 800bbb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbb2:	6013      	str	r3, [r2, #0]
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	b019      	add	sp, #100	@ 0x64
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	f77f ae37 	ble.w	800b832 <_dtoa_r+0x7b2>
 800bbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbc8:	2001      	movs	r0, #1
 800bbca:	e655      	b.n	800b878 <_dtoa_r+0x7f8>
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f77f aed6 	ble.w	800b980 <_dtoa_r+0x900>
 800bbd4:	4656      	mov	r6, sl
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4648      	mov	r0, r9
 800bbda:	f7ff f9c7 	bl	800af6c <quorem>
 800bbde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbe2:	f806 8b01 	strb.w	r8, [r6], #1
 800bbe6:	9b00      	ldr	r3, [sp, #0]
 800bbe8:	eba6 020a 	sub.w	r2, r6, sl
 800bbec:	4293      	cmp	r3, r2
 800bbee:	ddb3      	ble.n	800bb58 <_dtoa_r+0xad8>
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	f000 fc42 	bl	800c480 <__multadd>
 800bbfc:	4681      	mov	r9, r0
 800bbfe:	e7ea      	b.n	800bbd6 <_dtoa_r+0xb56>
 800bc00:	0800f290 	.word	0x0800f290
 800bc04:	0800f214 	.word	0x0800f214

0800bc08 <_free_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	2900      	cmp	r1, #0
 800bc0e:	d041      	beq.n	800bc94 <_free_r+0x8c>
 800bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc14:	1f0c      	subs	r4, r1, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bfb8      	it	lt
 800bc1a:	18e4      	addlt	r4, r4, r3
 800bc1c:	f7fc fb30 	bl	8008280 <__malloc_lock>
 800bc20:	4a1d      	ldr	r2, [pc, #116]	@ (800bc98 <_free_r+0x90>)
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	b933      	cbnz	r3, 800bc34 <_free_r+0x2c>
 800bc26:	6063      	str	r3, [r4, #4]
 800bc28:	6014      	str	r4, [r2, #0]
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc30:	f7fc bb2c 	b.w	800828c <__malloc_unlock>
 800bc34:	42a3      	cmp	r3, r4
 800bc36:	d908      	bls.n	800bc4a <_free_r+0x42>
 800bc38:	6820      	ldr	r0, [r4, #0]
 800bc3a:	1821      	adds	r1, r4, r0
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	bf01      	itttt	eq
 800bc40:	6819      	ldreq	r1, [r3, #0]
 800bc42:	685b      	ldreq	r3, [r3, #4]
 800bc44:	1809      	addeq	r1, r1, r0
 800bc46:	6021      	streq	r1, [r4, #0]
 800bc48:	e7ed      	b.n	800bc26 <_free_r+0x1e>
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	b10b      	cbz	r3, 800bc54 <_free_r+0x4c>
 800bc50:	42a3      	cmp	r3, r4
 800bc52:	d9fa      	bls.n	800bc4a <_free_r+0x42>
 800bc54:	6811      	ldr	r1, [r2, #0]
 800bc56:	1850      	adds	r0, r2, r1
 800bc58:	42a0      	cmp	r0, r4
 800bc5a:	d10b      	bne.n	800bc74 <_free_r+0x6c>
 800bc5c:	6820      	ldr	r0, [r4, #0]
 800bc5e:	4401      	add	r1, r0
 800bc60:	1850      	adds	r0, r2, r1
 800bc62:	4283      	cmp	r3, r0
 800bc64:	6011      	str	r1, [r2, #0]
 800bc66:	d1e0      	bne.n	800bc2a <_free_r+0x22>
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	6053      	str	r3, [r2, #4]
 800bc6e:	4408      	add	r0, r1
 800bc70:	6010      	str	r0, [r2, #0]
 800bc72:	e7da      	b.n	800bc2a <_free_r+0x22>
 800bc74:	d902      	bls.n	800bc7c <_free_r+0x74>
 800bc76:	230c      	movs	r3, #12
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	e7d6      	b.n	800bc2a <_free_r+0x22>
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	1821      	adds	r1, r4, r0
 800bc80:	428b      	cmp	r3, r1
 800bc82:	bf04      	itt	eq
 800bc84:	6819      	ldreq	r1, [r3, #0]
 800bc86:	685b      	ldreq	r3, [r3, #4]
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	bf04      	itt	eq
 800bc8c:	1809      	addeq	r1, r1, r0
 800bc8e:	6021      	streq	r1, [r4, #0]
 800bc90:	6054      	str	r4, [r2, #4]
 800bc92:	e7ca      	b.n	800bc2a <_free_r+0x22>
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	20009474 	.word	0x20009474

0800bc9c <rshift>:
 800bc9c:	6903      	ldr	r3, [r0, #16]
 800bc9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bca6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcaa:	f100 0414 	add.w	r4, r0, #20
 800bcae:	dd45      	ble.n	800bd3c <rshift+0xa0>
 800bcb0:	f011 011f 	ands.w	r1, r1, #31
 800bcb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcbc:	d10c      	bne.n	800bcd8 <rshift+0x3c>
 800bcbe:	f100 0710 	add.w	r7, r0, #16
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	42b1      	cmp	r1, r6
 800bcc6:	d334      	bcc.n	800bd32 <rshift+0x96>
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	1eea      	subs	r2, r5, #3
 800bcce:	4296      	cmp	r6, r2
 800bcd0:	bf38      	it	cc
 800bcd2:	2300      	movcc	r3, #0
 800bcd4:	4423      	add	r3, r4
 800bcd6:	e015      	b.n	800bd04 <rshift+0x68>
 800bcd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcdc:	f1c1 0820 	rsb	r8, r1, #32
 800bce0:	40cf      	lsrs	r7, r1
 800bce2:	f105 0e04 	add.w	lr, r5, #4
 800bce6:	46a1      	mov	r9, r4
 800bce8:	4576      	cmp	r6, lr
 800bcea:	46f4      	mov	ip, lr
 800bcec:	d815      	bhi.n	800bd1a <rshift+0x7e>
 800bcee:	1a9a      	subs	r2, r3, r2
 800bcf0:	0092      	lsls	r2, r2, #2
 800bcf2:	3a04      	subs	r2, #4
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	42ae      	cmp	r6, r5
 800bcf8:	bf38      	it	cc
 800bcfa:	2200      	movcc	r2, #0
 800bcfc:	18a3      	adds	r3, r4, r2
 800bcfe:	50a7      	str	r7, [r4, r2]
 800bd00:	b107      	cbz	r7, 800bd04 <rshift+0x68>
 800bd02:	3304      	adds	r3, #4
 800bd04:	1b1a      	subs	r2, r3, r4
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd0c:	bf08      	it	eq
 800bd0e:	2300      	moveq	r3, #0
 800bd10:	6102      	str	r2, [r0, #16]
 800bd12:	bf08      	it	eq
 800bd14:	6143      	streq	r3, [r0, #20]
 800bd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	f8dc c000 	ldr.w	ip, [ip]
 800bd1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd22:	ea4c 0707 	orr.w	r7, ip, r7
 800bd26:	f849 7b04 	str.w	r7, [r9], #4
 800bd2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd2e:	40cf      	lsrs	r7, r1
 800bd30:	e7da      	b.n	800bce8 <rshift+0x4c>
 800bd32:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd36:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd3a:	e7c3      	b.n	800bcc4 <rshift+0x28>
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	e7e1      	b.n	800bd04 <rshift+0x68>

0800bd40 <__hexdig_fun>:
 800bd40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bd44:	2b09      	cmp	r3, #9
 800bd46:	d802      	bhi.n	800bd4e <__hexdig_fun+0xe>
 800bd48:	3820      	subs	r0, #32
 800bd4a:	b2c0      	uxtb	r0, r0
 800bd4c:	4770      	bx	lr
 800bd4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d801      	bhi.n	800bd5a <__hexdig_fun+0x1a>
 800bd56:	3847      	subs	r0, #71	@ 0x47
 800bd58:	e7f7      	b.n	800bd4a <__hexdig_fun+0xa>
 800bd5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bd5e:	2b05      	cmp	r3, #5
 800bd60:	d801      	bhi.n	800bd66 <__hexdig_fun+0x26>
 800bd62:	3827      	subs	r0, #39	@ 0x27
 800bd64:	e7f1      	b.n	800bd4a <__hexdig_fun+0xa>
 800bd66:	2000      	movs	r0, #0
 800bd68:	4770      	bx	lr
	...

0800bd6c <__gethex>:
 800bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd70:	b085      	sub	sp, #20
 800bd72:	468a      	mov	sl, r1
 800bd74:	9302      	str	r3, [sp, #8]
 800bd76:	680b      	ldr	r3, [r1, #0]
 800bd78:	9001      	str	r0, [sp, #4]
 800bd7a:	4690      	mov	r8, r2
 800bd7c:	1c9c      	adds	r4, r3, #2
 800bd7e:	46a1      	mov	r9, r4
 800bd80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bd84:	2830      	cmp	r0, #48	@ 0x30
 800bd86:	d0fa      	beq.n	800bd7e <__gethex+0x12>
 800bd88:	eba9 0303 	sub.w	r3, r9, r3
 800bd8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bd90:	f7ff ffd6 	bl	800bd40 <__hexdig_fun>
 800bd94:	4605      	mov	r5, r0
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d168      	bne.n	800be6c <__gethex+0x100>
 800bd9a:	49a0      	ldr	r1, [pc, #640]	@ (800c01c <__gethex+0x2b0>)
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	4648      	mov	r0, r9
 800bda0:	f7fe fa29 	bl	800a1f6 <strncmp>
 800bda4:	4607      	mov	r7, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d167      	bne.n	800be7a <__gethex+0x10e>
 800bdaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bdae:	4626      	mov	r6, r4
 800bdb0:	f7ff ffc6 	bl	800bd40 <__hexdig_fun>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d062      	beq.n	800be7e <__gethex+0x112>
 800bdb8:	4623      	mov	r3, r4
 800bdba:	7818      	ldrb	r0, [r3, #0]
 800bdbc:	2830      	cmp	r0, #48	@ 0x30
 800bdbe:	4699      	mov	r9, r3
 800bdc0:	f103 0301 	add.w	r3, r3, #1
 800bdc4:	d0f9      	beq.n	800bdba <__gethex+0x4e>
 800bdc6:	f7ff ffbb 	bl	800bd40 <__hexdig_fun>
 800bdca:	fab0 f580 	clz	r5, r0
 800bdce:	096d      	lsrs	r5, r5, #5
 800bdd0:	f04f 0b01 	mov.w	fp, #1
 800bdd4:	464a      	mov	r2, r9
 800bdd6:	4616      	mov	r6, r2
 800bdd8:	3201      	adds	r2, #1
 800bdda:	7830      	ldrb	r0, [r6, #0]
 800bddc:	f7ff ffb0 	bl	800bd40 <__hexdig_fun>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d1f8      	bne.n	800bdd6 <__gethex+0x6a>
 800bde4:	498d      	ldr	r1, [pc, #564]	@ (800c01c <__gethex+0x2b0>)
 800bde6:	2201      	movs	r2, #1
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7fe fa04 	bl	800a1f6 <strncmp>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d13f      	bne.n	800be72 <__gethex+0x106>
 800bdf2:	b944      	cbnz	r4, 800be06 <__gethex+0x9a>
 800bdf4:	1c74      	adds	r4, r6, #1
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	3201      	adds	r2, #1
 800bdfc:	7830      	ldrb	r0, [r6, #0]
 800bdfe:	f7ff ff9f 	bl	800bd40 <__hexdig_fun>
 800be02:	2800      	cmp	r0, #0
 800be04:	d1f8      	bne.n	800bdf8 <__gethex+0x8c>
 800be06:	1ba4      	subs	r4, r4, r6
 800be08:	00a7      	lsls	r7, r4, #2
 800be0a:	7833      	ldrb	r3, [r6, #0]
 800be0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be10:	2b50      	cmp	r3, #80	@ 0x50
 800be12:	d13e      	bne.n	800be92 <__gethex+0x126>
 800be14:	7873      	ldrb	r3, [r6, #1]
 800be16:	2b2b      	cmp	r3, #43	@ 0x2b
 800be18:	d033      	beq.n	800be82 <__gethex+0x116>
 800be1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800be1c:	d034      	beq.n	800be88 <__gethex+0x11c>
 800be1e:	1c71      	adds	r1, r6, #1
 800be20:	2400      	movs	r4, #0
 800be22:	7808      	ldrb	r0, [r1, #0]
 800be24:	f7ff ff8c 	bl	800bd40 <__hexdig_fun>
 800be28:	1e43      	subs	r3, r0, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b18      	cmp	r3, #24
 800be2e:	d830      	bhi.n	800be92 <__gethex+0x126>
 800be30:	f1a0 0210 	sub.w	r2, r0, #16
 800be34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be38:	f7ff ff82 	bl	800bd40 <__hexdig_fun>
 800be3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800be40:	fa5f fc8c 	uxtb.w	ip, ip
 800be44:	f1bc 0f18 	cmp.w	ip, #24
 800be48:	f04f 030a 	mov.w	r3, #10
 800be4c:	d91e      	bls.n	800be8c <__gethex+0x120>
 800be4e:	b104      	cbz	r4, 800be52 <__gethex+0xe6>
 800be50:	4252      	negs	r2, r2
 800be52:	4417      	add	r7, r2
 800be54:	f8ca 1000 	str.w	r1, [sl]
 800be58:	b1ed      	cbz	r5, 800be96 <__gethex+0x12a>
 800be5a:	f1bb 0f00 	cmp.w	fp, #0
 800be5e:	bf0c      	ite	eq
 800be60:	2506      	moveq	r5, #6
 800be62:	2500      	movne	r5, #0
 800be64:	4628      	mov	r0, r5
 800be66:	b005      	add	sp, #20
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	2500      	movs	r5, #0
 800be6e:	462c      	mov	r4, r5
 800be70:	e7b0      	b.n	800bdd4 <__gethex+0x68>
 800be72:	2c00      	cmp	r4, #0
 800be74:	d1c7      	bne.n	800be06 <__gethex+0x9a>
 800be76:	4627      	mov	r7, r4
 800be78:	e7c7      	b.n	800be0a <__gethex+0x9e>
 800be7a:	464e      	mov	r6, r9
 800be7c:	462f      	mov	r7, r5
 800be7e:	2501      	movs	r5, #1
 800be80:	e7c3      	b.n	800be0a <__gethex+0x9e>
 800be82:	2400      	movs	r4, #0
 800be84:	1cb1      	adds	r1, r6, #2
 800be86:	e7cc      	b.n	800be22 <__gethex+0xb6>
 800be88:	2401      	movs	r4, #1
 800be8a:	e7fb      	b.n	800be84 <__gethex+0x118>
 800be8c:	fb03 0002 	mla	r0, r3, r2, r0
 800be90:	e7ce      	b.n	800be30 <__gethex+0xc4>
 800be92:	4631      	mov	r1, r6
 800be94:	e7de      	b.n	800be54 <__gethex+0xe8>
 800be96:	eba6 0309 	sub.w	r3, r6, r9
 800be9a:	3b01      	subs	r3, #1
 800be9c:	4629      	mov	r1, r5
 800be9e:	2b07      	cmp	r3, #7
 800bea0:	dc0a      	bgt.n	800beb8 <__gethex+0x14c>
 800bea2:	9801      	ldr	r0, [sp, #4]
 800bea4:	f000 fa8a 	bl	800c3bc <_Balloc>
 800bea8:	4604      	mov	r4, r0
 800beaa:	b940      	cbnz	r0, 800bebe <__gethex+0x152>
 800beac:	4b5c      	ldr	r3, [pc, #368]	@ (800c020 <__gethex+0x2b4>)
 800beae:	4602      	mov	r2, r0
 800beb0:	21e4      	movs	r1, #228	@ 0xe4
 800beb2:	485c      	ldr	r0, [pc, #368]	@ (800c024 <__gethex+0x2b8>)
 800beb4:	f001 ff64 	bl	800dd80 <__assert_func>
 800beb8:	3101      	adds	r1, #1
 800beba:	105b      	asrs	r3, r3, #1
 800bebc:	e7ef      	b.n	800be9e <__gethex+0x132>
 800bebe:	f100 0a14 	add.w	sl, r0, #20
 800bec2:	2300      	movs	r3, #0
 800bec4:	4655      	mov	r5, sl
 800bec6:	469b      	mov	fp, r3
 800bec8:	45b1      	cmp	r9, r6
 800beca:	d337      	bcc.n	800bf3c <__gethex+0x1d0>
 800becc:	f845 bb04 	str.w	fp, [r5], #4
 800bed0:	eba5 050a 	sub.w	r5, r5, sl
 800bed4:	10ad      	asrs	r5, r5, #2
 800bed6:	6125      	str	r5, [r4, #16]
 800bed8:	4658      	mov	r0, fp
 800beda:	f000 fb61 	bl	800c5a0 <__hi0bits>
 800bede:	016d      	lsls	r5, r5, #5
 800bee0:	f8d8 6000 	ldr.w	r6, [r8]
 800bee4:	1a2d      	subs	r5, r5, r0
 800bee6:	42b5      	cmp	r5, r6
 800bee8:	dd54      	ble.n	800bf94 <__gethex+0x228>
 800beea:	1bad      	subs	r5, r5, r6
 800beec:	4629      	mov	r1, r5
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fef5 	bl	800ccde <__any_on>
 800bef4:	4681      	mov	r9, r0
 800bef6:	b178      	cbz	r0, 800bf18 <__gethex+0x1ac>
 800bef8:	1e6b      	subs	r3, r5, #1
 800befa:	1159      	asrs	r1, r3, #5
 800befc:	f003 021f 	and.w	r2, r3, #31
 800bf00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bf04:	f04f 0901 	mov.w	r9, #1
 800bf08:	fa09 f202 	lsl.w	r2, r9, r2
 800bf0c:	420a      	tst	r2, r1
 800bf0e:	d003      	beq.n	800bf18 <__gethex+0x1ac>
 800bf10:	454b      	cmp	r3, r9
 800bf12:	dc36      	bgt.n	800bf82 <__gethex+0x216>
 800bf14:	f04f 0902 	mov.w	r9, #2
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f7ff febe 	bl	800bc9c <rshift>
 800bf20:	442f      	add	r7, r5
 800bf22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf26:	42bb      	cmp	r3, r7
 800bf28:	da42      	bge.n	800bfb0 <__gethex+0x244>
 800bf2a:	9801      	ldr	r0, [sp, #4]
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	f000 fa85 	bl	800c43c <_Bfree>
 800bf32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf34:	2300      	movs	r3, #0
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	25a3      	movs	r5, #163	@ 0xa3
 800bf3a:	e793      	b.n	800be64 <__gethex+0xf8>
 800bf3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bf40:	2a2e      	cmp	r2, #46	@ 0x2e
 800bf42:	d012      	beq.n	800bf6a <__gethex+0x1fe>
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	d104      	bne.n	800bf52 <__gethex+0x1e6>
 800bf48:	f845 bb04 	str.w	fp, [r5], #4
 800bf4c:	f04f 0b00 	mov.w	fp, #0
 800bf50:	465b      	mov	r3, fp
 800bf52:	7830      	ldrb	r0, [r6, #0]
 800bf54:	9303      	str	r3, [sp, #12]
 800bf56:	f7ff fef3 	bl	800bd40 <__hexdig_fun>
 800bf5a:	9b03      	ldr	r3, [sp, #12]
 800bf5c:	f000 000f 	and.w	r0, r0, #15
 800bf60:	4098      	lsls	r0, r3
 800bf62:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf66:	3304      	adds	r3, #4
 800bf68:	e7ae      	b.n	800bec8 <__gethex+0x15c>
 800bf6a:	45b1      	cmp	r9, r6
 800bf6c:	d8ea      	bhi.n	800bf44 <__gethex+0x1d8>
 800bf6e:	492b      	ldr	r1, [pc, #172]	@ (800c01c <__gethex+0x2b0>)
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	2201      	movs	r2, #1
 800bf74:	4630      	mov	r0, r6
 800bf76:	f7fe f93e 	bl	800a1f6 <strncmp>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d1e1      	bne.n	800bf44 <__gethex+0x1d8>
 800bf80:	e7a2      	b.n	800bec8 <__gethex+0x15c>
 800bf82:	1ea9      	subs	r1, r5, #2
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 feaa 	bl	800ccde <__any_on>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d0c2      	beq.n	800bf14 <__gethex+0x1a8>
 800bf8e:	f04f 0903 	mov.w	r9, #3
 800bf92:	e7c1      	b.n	800bf18 <__gethex+0x1ac>
 800bf94:	da09      	bge.n	800bfaa <__gethex+0x23e>
 800bf96:	1b75      	subs	r5, r6, r5
 800bf98:	4621      	mov	r1, r4
 800bf9a:	9801      	ldr	r0, [sp, #4]
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	f000 fc65 	bl	800c86c <__lshift>
 800bfa2:	1b7f      	subs	r7, r7, r5
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	f100 0a14 	add.w	sl, r0, #20
 800bfaa:	f04f 0900 	mov.w	r9, #0
 800bfae:	e7b8      	b.n	800bf22 <__gethex+0x1b6>
 800bfb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bfb4:	42bd      	cmp	r5, r7
 800bfb6:	dd6f      	ble.n	800c098 <__gethex+0x32c>
 800bfb8:	1bed      	subs	r5, r5, r7
 800bfba:	42ae      	cmp	r6, r5
 800bfbc:	dc34      	bgt.n	800c028 <__gethex+0x2bc>
 800bfbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d022      	beq.n	800c00c <__gethex+0x2a0>
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d024      	beq.n	800c014 <__gethex+0x2a8>
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d115      	bne.n	800bffa <__gethex+0x28e>
 800bfce:	42ae      	cmp	r6, r5
 800bfd0:	d113      	bne.n	800bffa <__gethex+0x28e>
 800bfd2:	2e01      	cmp	r6, #1
 800bfd4:	d10b      	bne.n	800bfee <__gethex+0x282>
 800bfd6:	9a02      	ldr	r2, [sp, #8]
 800bfd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfdc:	6013      	str	r3, [r2, #0]
 800bfde:	2301      	movs	r3, #1
 800bfe0:	6123      	str	r3, [r4, #16]
 800bfe2:	f8ca 3000 	str.w	r3, [sl]
 800bfe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfe8:	2562      	movs	r5, #98	@ 0x62
 800bfea:	601c      	str	r4, [r3, #0]
 800bfec:	e73a      	b.n	800be64 <__gethex+0xf8>
 800bfee:	1e71      	subs	r1, r6, #1
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fe74 	bl	800ccde <__any_on>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d1ed      	bne.n	800bfd6 <__gethex+0x26a>
 800bffa:	9801      	ldr	r0, [sp, #4]
 800bffc:	4621      	mov	r1, r4
 800bffe:	f000 fa1d 	bl	800c43c <_Bfree>
 800c002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c004:	2300      	movs	r3, #0
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	2550      	movs	r5, #80	@ 0x50
 800c00a:	e72b      	b.n	800be64 <__gethex+0xf8>
 800c00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1f3      	bne.n	800bffa <__gethex+0x28e>
 800c012:	e7e0      	b.n	800bfd6 <__gethex+0x26a>
 800c014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1dd      	bne.n	800bfd6 <__gethex+0x26a>
 800c01a:	e7ee      	b.n	800bffa <__gethex+0x28e>
 800c01c:	0800e45d 	.word	0x0800e45d
 800c020:	0800f290 	.word	0x0800f290
 800c024:	0800f2a1 	.word	0x0800f2a1
 800c028:	1e6f      	subs	r7, r5, #1
 800c02a:	f1b9 0f00 	cmp.w	r9, #0
 800c02e:	d130      	bne.n	800c092 <__gethex+0x326>
 800c030:	b127      	cbz	r7, 800c03c <__gethex+0x2d0>
 800c032:	4639      	mov	r1, r7
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fe52 	bl	800ccde <__any_on>
 800c03a:	4681      	mov	r9, r0
 800c03c:	117a      	asrs	r2, r7, #5
 800c03e:	2301      	movs	r3, #1
 800c040:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c044:	f007 071f 	and.w	r7, r7, #31
 800c048:	40bb      	lsls	r3, r7
 800c04a:	4213      	tst	r3, r2
 800c04c:	4629      	mov	r1, r5
 800c04e:	4620      	mov	r0, r4
 800c050:	bf18      	it	ne
 800c052:	f049 0902 	orrne.w	r9, r9, #2
 800c056:	f7ff fe21 	bl	800bc9c <rshift>
 800c05a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c05e:	1b76      	subs	r6, r6, r5
 800c060:	2502      	movs	r5, #2
 800c062:	f1b9 0f00 	cmp.w	r9, #0
 800c066:	d047      	beq.n	800c0f8 <__gethex+0x38c>
 800c068:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d015      	beq.n	800c09c <__gethex+0x330>
 800c070:	2b03      	cmp	r3, #3
 800c072:	d017      	beq.n	800c0a4 <__gethex+0x338>
 800c074:	2b01      	cmp	r3, #1
 800c076:	d109      	bne.n	800c08c <__gethex+0x320>
 800c078:	f019 0f02 	tst.w	r9, #2
 800c07c:	d006      	beq.n	800c08c <__gethex+0x320>
 800c07e:	f8da 3000 	ldr.w	r3, [sl]
 800c082:	ea49 0903 	orr.w	r9, r9, r3
 800c086:	f019 0f01 	tst.w	r9, #1
 800c08a:	d10e      	bne.n	800c0aa <__gethex+0x33e>
 800c08c:	f045 0510 	orr.w	r5, r5, #16
 800c090:	e032      	b.n	800c0f8 <__gethex+0x38c>
 800c092:	f04f 0901 	mov.w	r9, #1
 800c096:	e7d1      	b.n	800c03c <__gethex+0x2d0>
 800c098:	2501      	movs	r5, #1
 800c09a:	e7e2      	b.n	800c062 <__gethex+0x2f6>
 800c09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c09e:	f1c3 0301 	rsb	r3, r3, #1
 800c0a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0f0      	beq.n	800c08c <__gethex+0x320>
 800c0aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0ae:	f104 0314 	add.w	r3, r4, #20
 800c0b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c0b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c0ba:	f04f 0c00 	mov.w	ip, #0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c0c8:	d01b      	beq.n	800c102 <__gethex+0x396>
 800c0ca:	3201      	adds	r2, #1
 800c0cc:	6002      	str	r2, [r0, #0]
 800c0ce:	2d02      	cmp	r5, #2
 800c0d0:	f104 0314 	add.w	r3, r4, #20
 800c0d4:	d13c      	bne.n	800c150 <__gethex+0x3e4>
 800c0d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c0da:	3a01      	subs	r2, #1
 800c0dc:	42b2      	cmp	r2, r6
 800c0de:	d109      	bne.n	800c0f4 <__gethex+0x388>
 800c0e0:	1171      	asrs	r1, r6, #5
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0e8:	f006 061f 	and.w	r6, r6, #31
 800c0ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c0f0:	421e      	tst	r6, r3
 800c0f2:	d13a      	bne.n	800c16a <__gethex+0x3fe>
 800c0f4:	f045 0520 	orr.w	r5, r5, #32
 800c0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0fa:	601c      	str	r4, [r3, #0]
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	601f      	str	r7, [r3, #0]
 800c100:	e6b0      	b.n	800be64 <__gethex+0xf8>
 800c102:	4299      	cmp	r1, r3
 800c104:	f843 cc04 	str.w	ip, [r3, #-4]
 800c108:	d8d9      	bhi.n	800c0be <__gethex+0x352>
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	459b      	cmp	fp, r3
 800c10e:	db17      	blt.n	800c140 <__gethex+0x3d4>
 800c110:	6861      	ldr	r1, [r4, #4]
 800c112:	9801      	ldr	r0, [sp, #4]
 800c114:	3101      	adds	r1, #1
 800c116:	f000 f951 	bl	800c3bc <_Balloc>
 800c11a:	4681      	mov	r9, r0
 800c11c:	b918      	cbnz	r0, 800c126 <__gethex+0x3ba>
 800c11e:	4b1a      	ldr	r3, [pc, #104]	@ (800c188 <__gethex+0x41c>)
 800c120:	4602      	mov	r2, r0
 800c122:	2184      	movs	r1, #132	@ 0x84
 800c124:	e6c5      	b.n	800beb2 <__gethex+0x146>
 800c126:	6922      	ldr	r2, [r4, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	f104 010c 	add.w	r1, r4, #12
 800c12e:	0092      	lsls	r2, r2, #2
 800c130:	300c      	adds	r0, #12
 800c132:	f7fe fef5 	bl	800af20 <memcpy>
 800c136:	4621      	mov	r1, r4
 800c138:	9801      	ldr	r0, [sp, #4]
 800c13a:	f000 f97f 	bl	800c43c <_Bfree>
 800c13e:	464c      	mov	r4, r9
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c148:	6122      	str	r2, [r4, #16]
 800c14a:	2201      	movs	r2, #1
 800c14c:	615a      	str	r2, [r3, #20]
 800c14e:	e7be      	b.n	800c0ce <__gethex+0x362>
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	455a      	cmp	r2, fp
 800c154:	dd0b      	ble.n	800c16e <__gethex+0x402>
 800c156:	2101      	movs	r1, #1
 800c158:	4620      	mov	r0, r4
 800c15a:	f7ff fd9f 	bl	800bc9c <rshift>
 800c15e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c162:	3701      	adds	r7, #1
 800c164:	42bb      	cmp	r3, r7
 800c166:	f6ff aee0 	blt.w	800bf2a <__gethex+0x1be>
 800c16a:	2501      	movs	r5, #1
 800c16c:	e7c2      	b.n	800c0f4 <__gethex+0x388>
 800c16e:	f016 061f 	ands.w	r6, r6, #31
 800c172:	d0fa      	beq.n	800c16a <__gethex+0x3fe>
 800c174:	4453      	add	r3, sl
 800c176:	f1c6 0620 	rsb	r6, r6, #32
 800c17a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c17e:	f000 fa0f 	bl	800c5a0 <__hi0bits>
 800c182:	42b0      	cmp	r0, r6
 800c184:	dbe7      	blt.n	800c156 <__gethex+0x3ea>
 800c186:	e7f0      	b.n	800c16a <__gethex+0x3fe>
 800c188:	0800f290 	.word	0x0800f290

0800c18c <L_shift>:
 800c18c:	f1c2 0208 	rsb	r2, r2, #8
 800c190:	0092      	lsls	r2, r2, #2
 800c192:	b570      	push	{r4, r5, r6, lr}
 800c194:	f1c2 0620 	rsb	r6, r2, #32
 800c198:	6843      	ldr	r3, [r0, #4]
 800c19a:	6804      	ldr	r4, [r0, #0]
 800c19c:	fa03 f506 	lsl.w	r5, r3, r6
 800c1a0:	432c      	orrs	r4, r5
 800c1a2:	40d3      	lsrs	r3, r2
 800c1a4:	6004      	str	r4, [r0, #0]
 800c1a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1aa:	4288      	cmp	r0, r1
 800c1ac:	d3f4      	bcc.n	800c198 <L_shift+0xc>
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}

0800c1b0 <__match>:
 800c1b0:	b530      	push	{r4, r5, lr}
 800c1b2:	6803      	ldr	r3, [r0, #0]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ba:	b914      	cbnz	r4, 800c1c2 <__match+0x12>
 800c1bc:	6003      	str	r3, [r0, #0]
 800c1be:	2001      	movs	r0, #1
 800c1c0:	bd30      	pop	{r4, r5, pc}
 800c1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c1ca:	2d19      	cmp	r5, #25
 800c1cc:	bf98      	it	ls
 800c1ce:	3220      	addls	r2, #32
 800c1d0:	42a2      	cmp	r2, r4
 800c1d2:	d0f0      	beq.n	800c1b6 <__match+0x6>
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	e7f3      	b.n	800c1c0 <__match+0x10>

0800c1d8 <__hexnan>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	680b      	ldr	r3, [r1, #0]
 800c1de:	6801      	ldr	r1, [r0, #0]
 800c1e0:	115e      	asrs	r6, r3, #5
 800c1e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1e6:	f013 031f 	ands.w	r3, r3, #31
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	bf18      	it	ne
 800c1ee:	3604      	addne	r6, #4
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	1f37      	subs	r7, r6, #4
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	4690      	mov	r8, r2
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1fe:	46b9      	mov	r9, r7
 800c200:	463c      	mov	r4, r7
 800c202:	9502      	str	r5, [sp, #8]
 800c204:	46ab      	mov	fp, r5
 800c206:	784a      	ldrb	r2, [r1, #1]
 800c208:	1c4b      	adds	r3, r1, #1
 800c20a:	9303      	str	r3, [sp, #12]
 800c20c:	b342      	cbz	r2, 800c260 <__hexnan+0x88>
 800c20e:	4610      	mov	r0, r2
 800c210:	9105      	str	r1, [sp, #20]
 800c212:	9204      	str	r2, [sp, #16]
 800c214:	f7ff fd94 	bl	800bd40 <__hexdig_fun>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d151      	bne.n	800c2c0 <__hexnan+0xe8>
 800c21c:	9a04      	ldr	r2, [sp, #16]
 800c21e:	9905      	ldr	r1, [sp, #20]
 800c220:	2a20      	cmp	r2, #32
 800c222:	d818      	bhi.n	800c256 <__hexnan+0x7e>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	459b      	cmp	fp, r3
 800c228:	dd13      	ble.n	800c252 <__hexnan+0x7a>
 800c22a:	454c      	cmp	r4, r9
 800c22c:	d206      	bcs.n	800c23c <__hexnan+0x64>
 800c22e:	2d07      	cmp	r5, #7
 800c230:	dc04      	bgt.n	800c23c <__hexnan+0x64>
 800c232:	462a      	mov	r2, r5
 800c234:	4649      	mov	r1, r9
 800c236:	4620      	mov	r0, r4
 800c238:	f7ff ffa8 	bl	800c18c <L_shift>
 800c23c:	4544      	cmp	r4, r8
 800c23e:	d952      	bls.n	800c2e6 <__hexnan+0x10e>
 800c240:	2300      	movs	r3, #0
 800c242:	f1a4 0904 	sub.w	r9, r4, #4
 800c246:	f844 3c04 	str.w	r3, [r4, #-4]
 800c24a:	f8cd b008 	str.w	fp, [sp, #8]
 800c24e:	464c      	mov	r4, r9
 800c250:	461d      	mov	r5, r3
 800c252:	9903      	ldr	r1, [sp, #12]
 800c254:	e7d7      	b.n	800c206 <__hexnan+0x2e>
 800c256:	2a29      	cmp	r2, #41	@ 0x29
 800c258:	d157      	bne.n	800c30a <__hexnan+0x132>
 800c25a:	3102      	adds	r1, #2
 800c25c:	f8ca 1000 	str.w	r1, [sl]
 800c260:	f1bb 0f00 	cmp.w	fp, #0
 800c264:	d051      	beq.n	800c30a <__hexnan+0x132>
 800c266:	454c      	cmp	r4, r9
 800c268:	d206      	bcs.n	800c278 <__hexnan+0xa0>
 800c26a:	2d07      	cmp	r5, #7
 800c26c:	dc04      	bgt.n	800c278 <__hexnan+0xa0>
 800c26e:	462a      	mov	r2, r5
 800c270:	4649      	mov	r1, r9
 800c272:	4620      	mov	r0, r4
 800c274:	f7ff ff8a 	bl	800c18c <L_shift>
 800c278:	4544      	cmp	r4, r8
 800c27a:	d936      	bls.n	800c2ea <__hexnan+0x112>
 800c27c:	f1a8 0204 	sub.w	r2, r8, #4
 800c280:	4623      	mov	r3, r4
 800c282:	f853 1b04 	ldr.w	r1, [r3], #4
 800c286:	f842 1f04 	str.w	r1, [r2, #4]!
 800c28a:	429f      	cmp	r7, r3
 800c28c:	d2f9      	bcs.n	800c282 <__hexnan+0xaa>
 800c28e:	1b3b      	subs	r3, r7, r4
 800c290:	f023 0303 	bic.w	r3, r3, #3
 800c294:	3304      	adds	r3, #4
 800c296:	3401      	adds	r4, #1
 800c298:	3e03      	subs	r6, #3
 800c29a:	42b4      	cmp	r4, r6
 800c29c:	bf88      	it	hi
 800c29e:	2304      	movhi	r3, #4
 800c2a0:	4443      	add	r3, r8
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f843 2b04 	str.w	r2, [r3], #4
 800c2a8:	429f      	cmp	r7, r3
 800c2aa:	d2fb      	bcs.n	800c2a4 <__hexnan+0xcc>
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	b91b      	cbnz	r3, 800c2b8 <__hexnan+0xe0>
 800c2b0:	4547      	cmp	r7, r8
 800c2b2:	d128      	bne.n	800c306 <__hexnan+0x12e>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	2005      	movs	r0, #5
 800c2ba:	b007      	add	sp, #28
 800c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c0:	3501      	adds	r5, #1
 800c2c2:	2d08      	cmp	r5, #8
 800c2c4:	f10b 0b01 	add.w	fp, fp, #1
 800c2c8:	dd06      	ble.n	800c2d8 <__hexnan+0x100>
 800c2ca:	4544      	cmp	r4, r8
 800c2cc:	d9c1      	bls.n	800c252 <__hexnan+0x7a>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2d4:	2501      	movs	r5, #1
 800c2d6:	3c04      	subs	r4, #4
 800c2d8:	6822      	ldr	r2, [r4, #0]
 800c2da:	f000 000f 	and.w	r0, r0, #15
 800c2de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c2e2:	6020      	str	r0, [r4, #0]
 800c2e4:	e7b5      	b.n	800c252 <__hexnan+0x7a>
 800c2e6:	2508      	movs	r5, #8
 800c2e8:	e7b3      	b.n	800c252 <__hexnan+0x7a>
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0dd      	beq.n	800c2ac <__hexnan+0xd4>
 800c2f0:	f1c3 0320 	rsb	r3, r3, #32
 800c2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f8:	40da      	lsrs	r2, r3
 800c2fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c2fe:	4013      	ands	r3, r2
 800c300:	f846 3c04 	str.w	r3, [r6, #-4]
 800c304:	e7d2      	b.n	800c2ac <__hexnan+0xd4>
 800c306:	3f04      	subs	r7, #4
 800c308:	e7d0      	b.n	800c2ac <__hexnan+0xd4>
 800c30a:	2004      	movs	r0, #4
 800c30c:	e7d5      	b.n	800c2ba <__hexnan+0xe2>
	...

0800c310 <_findenv_r>:
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800c384 <_findenv_r+0x74>
 800c318:	4606      	mov	r6, r0
 800c31a:	4689      	mov	r9, r1
 800c31c:	4617      	mov	r7, r2
 800c31e:	f001 fd61 	bl	800dde4 <__env_lock>
 800c322:	f8da 4000 	ldr.w	r4, [sl]
 800c326:	b134      	cbz	r4, 800c336 <_findenv_r+0x26>
 800c328:	464b      	mov	r3, r9
 800c32a:	4698      	mov	r8, r3
 800c32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c330:	b13a      	cbz	r2, 800c342 <_findenv_r+0x32>
 800c332:	2a3d      	cmp	r2, #61	@ 0x3d
 800c334:	d1f9      	bne.n	800c32a <_findenv_r+0x1a>
 800c336:	4630      	mov	r0, r6
 800c338:	f001 fd5a 	bl	800ddf0 <__env_unlock>
 800c33c:	2000      	movs	r0, #0
 800c33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	eba8 0809 	sub.w	r8, r8, r9
 800c346:	46a3      	mov	fp, r4
 800c348:	f854 0b04 	ldr.w	r0, [r4], #4
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d0f2      	beq.n	800c336 <_findenv_r+0x26>
 800c350:	4642      	mov	r2, r8
 800c352:	4649      	mov	r1, r9
 800c354:	f7fd ff4f 	bl	800a1f6 <strncmp>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d1f4      	bne.n	800c346 <_findenv_r+0x36>
 800c35c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c360:	eb03 0508 	add.w	r5, r3, r8
 800c364:	f813 3008 	ldrb.w	r3, [r3, r8]
 800c368:	2b3d      	cmp	r3, #61	@ 0x3d
 800c36a:	d1ec      	bne.n	800c346 <_findenv_r+0x36>
 800c36c:	f8da 3000 	ldr.w	r3, [sl]
 800c370:	ebab 0303 	sub.w	r3, fp, r3
 800c374:	109b      	asrs	r3, r3, #2
 800c376:	4630      	mov	r0, r6
 800c378:	603b      	str	r3, [r7, #0]
 800c37a:	f001 fd39 	bl	800ddf0 <__env_unlock>
 800c37e:	1c68      	adds	r0, r5, #1
 800c380:	e7dd      	b.n	800c33e <_findenv_r+0x2e>
 800c382:	bf00      	nop
 800c384:	2000000c 	.word	0x2000000c

0800c388 <_getenv_r>:
 800c388:	b507      	push	{r0, r1, r2, lr}
 800c38a:	aa01      	add	r2, sp, #4
 800c38c:	f7ff ffc0 	bl	800c310 <_findenv_r>
 800c390:	b003      	add	sp, #12
 800c392:	f85d fb04 	ldr.w	pc, [sp], #4

0800c396 <__ascii_mbtowc>:
 800c396:	b082      	sub	sp, #8
 800c398:	b901      	cbnz	r1, 800c39c <__ascii_mbtowc+0x6>
 800c39a:	a901      	add	r1, sp, #4
 800c39c:	b142      	cbz	r2, 800c3b0 <__ascii_mbtowc+0x1a>
 800c39e:	b14b      	cbz	r3, 800c3b4 <__ascii_mbtowc+0x1e>
 800c3a0:	7813      	ldrb	r3, [r2, #0]
 800c3a2:	600b      	str	r3, [r1, #0]
 800c3a4:	7812      	ldrb	r2, [r2, #0]
 800c3a6:	1e10      	subs	r0, r2, #0
 800c3a8:	bf18      	it	ne
 800c3aa:	2001      	movne	r0, #1
 800c3ac:	b002      	add	sp, #8
 800c3ae:	4770      	bx	lr
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	e7fb      	b.n	800c3ac <__ascii_mbtowc+0x16>
 800c3b4:	f06f 0001 	mvn.w	r0, #1
 800c3b8:	e7f8      	b.n	800c3ac <__ascii_mbtowc+0x16>
	...

0800c3bc <_Balloc>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	69c6      	ldr	r6, [r0, #28]
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	460d      	mov	r5, r1
 800c3c4:	b976      	cbnz	r6, 800c3e4 <_Balloc+0x28>
 800c3c6:	2010      	movs	r0, #16
 800c3c8:	f7fb fea8 	bl	800811c <malloc>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	61e0      	str	r0, [r4, #28]
 800c3d0:	b920      	cbnz	r0, 800c3dc <_Balloc+0x20>
 800c3d2:	4b18      	ldr	r3, [pc, #96]	@ (800c434 <_Balloc+0x78>)
 800c3d4:	4818      	ldr	r0, [pc, #96]	@ (800c438 <_Balloc+0x7c>)
 800c3d6:	216b      	movs	r1, #107	@ 0x6b
 800c3d8:	f001 fcd2 	bl	800dd80 <__assert_func>
 800c3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e0:	6006      	str	r6, [r0, #0]
 800c3e2:	60c6      	str	r6, [r0, #12]
 800c3e4:	69e6      	ldr	r6, [r4, #28]
 800c3e6:	68f3      	ldr	r3, [r6, #12]
 800c3e8:	b183      	cbz	r3, 800c40c <_Balloc+0x50>
 800c3ea:	69e3      	ldr	r3, [r4, #28]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3f2:	b9b8      	cbnz	r0, 800c424 <_Balloc+0x68>
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c3fa:	1d72      	adds	r2, r6, #5
 800c3fc:	0092      	lsls	r2, r2, #2
 800c3fe:	4620      	mov	r0, r4
 800c400:	f001 fcdc 	bl	800ddbc <_calloc_r>
 800c404:	b160      	cbz	r0, 800c420 <_Balloc+0x64>
 800c406:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c40a:	e00e      	b.n	800c42a <_Balloc+0x6e>
 800c40c:	2221      	movs	r2, #33	@ 0x21
 800c40e:	2104      	movs	r1, #4
 800c410:	4620      	mov	r0, r4
 800c412:	f001 fcd3 	bl	800ddbc <_calloc_r>
 800c416:	69e3      	ldr	r3, [r4, #28]
 800c418:	60f0      	str	r0, [r6, #12]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1e4      	bne.n	800c3ea <_Balloc+0x2e>
 800c420:	2000      	movs	r0, #0
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	6802      	ldr	r2, [r0, #0]
 800c426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c42a:	2300      	movs	r3, #0
 800c42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c430:	e7f7      	b.n	800c422 <_Balloc+0x66>
 800c432:	bf00      	nop
 800c434:	0800f221 	.word	0x0800f221
 800c438:	0800f301 	.word	0x0800f301

0800c43c <_Bfree>:
 800c43c:	b570      	push	{r4, r5, r6, lr}
 800c43e:	69c6      	ldr	r6, [r0, #28]
 800c440:	4605      	mov	r5, r0
 800c442:	460c      	mov	r4, r1
 800c444:	b976      	cbnz	r6, 800c464 <_Bfree+0x28>
 800c446:	2010      	movs	r0, #16
 800c448:	f7fb fe68 	bl	800811c <malloc>
 800c44c:	4602      	mov	r2, r0
 800c44e:	61e8      	str	r0, [r5, #28]
 800c450:	b920      	cbnz	r0, 800c45c <_Bfree+0x20>
 800c452:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <_Bfree+0x3c>)
 800c454:	4809      	ldr	r0, [pc, #36]	@ (800c47c <_Bfree+0x40>)
 800c456:	218f      	movs	r1, #143	@ 0x8f
 800c458:	f001 fc92 	bl	800dd80 <__assert_func>
 800c45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c460:	6006      	str	r6, [r0, #0]
 800c462:	60c6      	str	r6, [r0, #12]
 800c464:	b13c      	cbz	r4, 800c476 <_Bfree+0x3a>
 800c466:	69eb      	ldr	r3, [r5, #28]
 800c468:	6862      	ldr	r2, [r4, #4]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c470:	6021      	str	r1, [r4, #0]
 800c472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	0800f221 	.word	0x0800f221
 800c47c:	0800f301 	.word	0x0800f301

0800c480 <__multadd>:
 800c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c484:	690d      	ldr	r5, [r1, #16]
 800c486:	4607      	mov	r7, r0
 800c488:	460c      	mov	r4, r1
 800c48a:	461e      	mov	r6, r3
 800c48c:	f101 0c14 	add.w	ip, r1, #20
 800c490:	2000      	movs	r0, #0
 800c492:	f8dc 3000 	ldr.w	r3, [ip]
 800c496:	b299      	uxth	r1, r3
 800c498:	fb02 6101 	mla	r1, r2, r1, r6
 800c49c:	0c1e      	lsrs	r6, r3, #16
 800c49e:	0c0b      	lsrs	r3, r1, #16
 800c4a0:	fb02 3306 	mla	r3, r2, r6, r3
 800c4a4:	b289      	uxth	r1, r1
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4ac:	4285      	cmp	r5, r0
 800c4ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c4b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4b6:	dcec      	bgt.n	800c492 <__multadd+0x12>
 800c4b8:	b30e      	cbz	r6, 800c4fe <__multadd+0x7e>
 800c4ba:	68a3      	ldr	r3, [r4, #8]
 800c4bc:	42ab      	cmp	r3, r5
 800c4be:	dc19      	bgt.n	800c4f4 <__multadd+0x74>
 800c4c0:	6861      	ldr	r1, [r4, #4]
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	3101      	adds	r1, #1
 800c4c6:	f7ff ff79 	bl	800c3bc <_Balloc>
 800c4ca:	4680      	mov	r8, r0
 800c4cc:	b928      	cbnz	r0, 800c4da <__multadd+0x5a>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c504 <__multadd+0x84>)
 800c4d2:	480d      	ldr	r0, [pc, #52]	@ (800c508 <__multadd+0x88>)
 800c4d4:	21ba      	movs	r1, #186	@ 0xba
 800c4d6:	f001 fc53 	bl	800dd80 <__assert_func>
 800c4da:	6922      	ldr	r2, [r4, #16]
 800c4dc:	3202      	adds	r2, #2
 800c4de:	f104 010c 	add.w	r1, r4, #12
 800c4e2:	0092      	lsls	r2, r2, #2
 800c4e4:	300c      	adds	r0, #12
 800c4e6:	f7fe fd1b 	bl	800af20 <memcpy>
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	f7ff ffa5 	bl	800c43c <_Bfree>
 800c4f2:	4644      	mov	r4, r8
 800c4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4f8:	3501      	adds	r5, #1
 800c4fa:	615e      	str	r6, [r3, #20]
 800c4fc:	6125      	str	r5, [r4, #16]
 800c4fe:	4620      	mov	r0, r4
 800c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c504:	0800f290 	.word	0x0800f290
 800c508:	0800f301 	.word	0x0800f301

0800c50c <__s2b>:
 800c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c510:	460c      	mov	r4, r1
 800c512:	4615      	mov	r5, r2
 800c514:	461f      	mov	r7, r3
 800c516:	2209      	movs	r2, #9
 800c518:	3308      	adds	r3, #8
 800c51a:	4606      	mov	r6, r0
 800c51c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c520:	2100      	movs	r1, #0
 800c522:	2201      	movs	r2, #1
 800c524:	429a      	cmp	r2, r3
 800c526:	db09      	blt.n	800c53c <__s2b+0x30>
 800c528:	4630      	mov	r0, r6
 800c52a:	f7ff ff47 	bl	800c3bc <_Balloc>
 800c52e:	b940      	cbnz	r0, 800c542 <__s2b+0x36>
 800c530:	4602      	mov	r2, r0
 800c532:	4b19      	ldr	r3, [pc, #100]	@ (800c598 <__s2b+0x8c>)
 800c534:	4819      	ldr	r0, [pc, #100]	@ (800c59c <__s2b+0x90>)
 800c536:	21d3      	movs	r1, #211	@ 0xd3
 800c538:	f001 fc22 	bl	800dd80 <__assert_func>
 800c53c:	0052      	lsls	r2, r2, #1
 800c53e:	3101      	adds	r1, #1
 800c540:	e7f0      	b.n	800c524 <__s2b+0x18>
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	6143      	str	r3, [r0, #20]
 800c546:	2d09      	cmp	r5, #9
 800c548:	f04f 0301 	mov.w	r3, #1
 800c54c:	6103      	str	r3, [r0, #16]
 800c54e:	dd16      	ble.n	800c57e <__s2b+0x72>
 800c550:	f104 0909 	add.w	r9, r4, #9
 800c554:	46c8      	mov	r8, r9
 800c556:	442c      	add	r4, r5
 800c558:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c55c:	4601      	mov	r1, r0
 800c55e:	3b30      	subs	r3, #48	@ 0x30
 800c560:	220a      	movs	r2, #10
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ff8c 	bl	800c480 <__multadd>
 800c568:	45a0      	cmp	r8, r4
 800c56a:	d1f5      	bne.n	800c558 <__s2b+0x4c>
 800c56c:	f1a5 0408 	sub.w	r4, r5, #8
 800c570:	444c      	add	r4, r9
 800c572:	1b2d      	subs	r5, r5, r4
 800c574:	1963      	adds	r3, r4, r5
 800c576:	42bb      	cmp	r3, r7
 800c578:	db04      	blt.n	800c584 <__s2b+0x78>
 800c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57e:	340a      	adds	r4, #10
 800c580:	2509      	movs	r5, #9
 800c582:	e7f6      	b.n	800c572 <__s2b+0x66>
 800c584:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c588:	4601      	mov	r1, r0
 800c58a:	3b30      	subs	r3, #48	@ 0x30
 800c58c:	220a      	movs	r2, #10
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff ff76 	bl	800c480 <__multadd>
 800c594:	e7ee      	b.n	800c574 <__s2b+0x68>
 800c596:	bf00      	nop
 800c598:	0800f290 	.word	0x0800f290
 800c59c:	0800f301 	.word	0x0800f301

0800c5a0 <__hi0bits>:
 800c5a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	bf36      	itet	cc
 800c5a8:	0403      	lslcc	r3, r0, #16
 800c5aa:	2000      	movcs	r0, #0
 800c5ac:	2010      	movcc	r0, #16
 800c5ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5b2:	bf3c      	itt	cc
 800c5b4:	021b      	lslcc	r3, r3, #8
 800c5b6:	3008      	addcc	r0, #8
 800c5b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5bc:	bf3c      	itt	cc
 800c5be:	011b      	lslcc	r3, r3, #4
 800c5c0:	3004      	addcc	r0, #4
 800c5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c6:	bf3c      	itt	cc
 800c5c8:	009b      	lslcc	r3, r3, #2
 800c5ca:	3002      	addcc	r0, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	db05      	blt.n	800c5dc <__hi0bits+0x3c>
 800c5d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5d4:	f100 0001 	add.w	r0, r0, #1
 800c5d8:	bf08      	it	eq
 800c5da:	2020      	moveq	r0, #32
 800c5dc:	4770      	bx	lr

0800c5de <__lo0bits>:
 800c5de:	6803      	ldr	r3, [r0, #0]
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	f013 0007 	ands.w	r0, r3, #7
 800c5e6:	d00b      	beq.n	800c600 <__lo0bits+0x22>
 800c5e8:	07d9      	lsls	r1, r3, #31
 800c5ea:	d421      	bmi.n	800c630 <__lo0bits+0x52>
 800c5ec:	0798      	lsls	r0, r3, #30
 800c5ee:	bf49      	itett	mi
 800c5f0:	085b      	lsrmi	r3, r3, #1
 800c5f2:	089b      	lsrpl	r3, r3, #2
 800c5f4:	2001      	movmi	r0, #1
 800c5f6:	6013      	strmi	r3, [r2, #0]
 800c5f8:	bf5c      	itt	pl
 800c5fa:	6013      	strpl	r3, [r2, #0]
 800c5fc:	2002      	movpl	r0, #2
 800c5fe:	4770      	bx	lr
 800c600:	b299      	uxth	r1, r3
 800c602:	b909      	cbnz	r1, 800c608 <__lo0bits+0x2a>
 800c604:	0c1b      	lsrs	r3, r3, #16
 800c606:	2010      	movs	r0, #16
 800c608:	b2d9      	uxtb	r1, r3
 800c60a:	b909      	cbnz	r1, 800c610 <__lo0bits+0x32>
 800c60c:	3008      	adds	r0, #8
 800c60e:	0a1b      	lsrs	r3, r3, #8
 800c610:	0719      	lsls	r1, r3, #28
 800c612:	bf04      	itt	eq
 800c614:	091b      	lsreq	r3, r3, #4
 800c616:	3004      	addeq	r0, #4
 800c618:	0799      	lsls	r1, r3, #30
 800c61a:	bf04      	itt	eq
 800c61c:	089b      	lsreq	r3, r3, #2
 800c61e:	3002      	addeq	r0, #2
 800c620:	07d9      	lsls	r1, r3, #31
 800c622:	d403      	bmi.n	800c62c <__lo0bits+0x4e>
 800c624:	085b      	lsrs	r3, r3, #1
 800c626:	f100 0001 	add.w	r0, r0, #1
 800c62a:	d003      	beq.n	800c634 <__lo0bits+0x56>
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	4770      	bx	lr
 800c630:	2000      	movs	r0, #0
 800c632:	4770      	bx	lr
 800c634:	2020      	movs	r0, #32
 800c636:	4770      	bx	lr

0800c638 <__i2b>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	460c      	mov	r4, r1
 800c63c:	2101      	movs	r1, #1
 800c63e:	f7ff febd 	bl	800c3bc <_Balloc>
 800c642:	4602      	mov	r2, r0
 800c644:	b928      	cbnz	r0, 800c652 <__i2b+0x1a>
 800c646:	4b05      	ldr	r3, [pc, #20]	@ (800c65c <__i2b+0x24>)
 800c648:	4805      	ldr	r0, [pc, #20]	@ (800c660 <__i2b+0x28>)
 800c64a:	f240 1145 	movw	r1, #325	@ 0x145
 800c64e:	f001 fb97 	bl	800dd80 <__assert_func>
 800c652:	2301      	movs	r3, #1
 800c654:	6144      	str	r4, [r0, #20]
 800c656:	6103      	str	r3, [r0, #16]
 800c658:	bd10      	pop	{r4, pc}
 800c65a:	bf00      	nop
 800c65c:	0800f290 	.word	0x0800f290
 800c660:	0800f301 	.word	0x0800f301

0800c664 <__multiply>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	4614      	mov	r4, r2
 800c66a:	690a      	ldr	r2, [r1, #16]
 800c66c:	6923      	ldr	r3, [r4, #16]
 800c66e:	429a      	cmp	r2, r3
 800c670:	bfa8      	it	ge
 800c672:	4623      	movge	r3, r4
 800c674:	460f      	mov	r7, r1
 800c676:	bfa4      	itt	ge
 800c678:	460c      	movge	r4, r1
 800c67a:	461f      	movge	r7, r3
 800c67c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c680:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c684:	68a3      	ldr	r3, [r4, #8]
 800c686:	6861      	ldr	r1, [r4, #4]
 800c688:	eb0a 0609 	add.w	r6, sl, r9
 800c68c:	42b3      	cmp	r3, r6
 800c68e:	b085      	sub	sp, #20
 800c690:	bfb8      	it	lt
 800c692:	3101      	addlt	r1, #1
 800c694:	f7ff fe92 	bl	800c3bc <_Balloc>
 800c698:	b930      	cbnz	r0, 800c6a8 <__multiply+0x44>
 800c69a:	4602      	mov	r2, r0
 800c69c:	4b44      	ldr	r3, [pc, #272]	@ (800c7b0 <__multiply+0x14c>)
 800c69e:	4845      	ldr	r0, [pc, #276]	@ (800c7b4 <__multiply+0x150>)
 800c6a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6a4:	f001 fb6c 	bl	800dd80 <__assert_func>
 800c6a8:	f100 0514 	add.w	r5, r0, #20
 800c6ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4543      	cmp	r3, r8
 800c6b6:	d321      	bcc.n	800c6fc <__multiply+0x98>
 800c6b8:	f107 0114 	add.w	r1, r7, #20
 800c6bc:	f104 0214 	add.w	r2, r4, #20
 800c6c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6c8:	9302      	str	r3, [sp, #8]
 800c6ca:	1b13      	subs	r3, r2, r4
 800c6cc:	3b15      	subs	r3, #21
 800c6ce:	f023 0303 	bic.w	r3, r3, #3
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	f104 0715 	add.w	r7, r4, #21
 800c6d8:	42ba      	cmp	r2, r7
 800c6da:	bf38      	it	cc
 800c6dc:	2304      	movcc	r3, #4
 800c6de:	9301      	str	r3, [sp, #4]
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	9103      	str	r1, [sp, #12]
 800c6e4:	428b      	cmp	r3, r1
 800c6e6:	d80c      	bhi.n	800c702 <__multiply+0x9e>
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	dd03      	ble.n	800c6f4 <__multiply+0x90>
 800c6ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05b      	beq.n	800c7ac <__multiply+0x148>
 800c6f4:	6106      	str	r6, [r0, #16]
 800c6f6:	b005      	add	sp, #20
 800c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fc:	f843 2b04 	str.w	r2, [r3], #4
 800c700:	e7d8      	b.n	800c6b4 <__multiply+0x50>
 800c702:	f8b1 a000 	ldrh.w	sl, [r1]
 800c706:	f1ba 0f00 	cmp.w	sl, #0
 800c70a:	d024      	beq.n	800c756 <__multiply+0xf2>
 800c70c:	f104 0e14 	add.w	lr, r4, #20
 800c710:	46a9      	mov	r9, r5
 800c712:	f04f 0c00 	mov.w	ip, #0
 800c716:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c71a:	f8d9 3000 	ldr.w	r3, [r9]
 800c71e:	fa1f fb87 	uxth.w	fp, r7
 800c722:	b29b      	uxth	r3, r3
 800c724:	fb0a 330b 	mla	r3, sl, fp, r3
 800c728:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c72c:	f8d9 7000 	ldr.w	r7, [r9]
 800c730:	4463      	add	r3, ip
 800c732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c736:	fb0a c70b 	mla	r7, sl, fp, ip
 800c73a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c73e:	b29b      	uxth	r3, r3
 800c740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c744:	4572      	cmp	r2, lr
 800c746:	f849 3b04 	str.w	r3, [r9], #4
 800c74a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c74e:	d8e2      	bhi.n	800c716 <__multiply+0xb2>
 800c750:	9b01      	ldr	r3, [sp, #4]
 800c752:	f845 c003 	str.w	ip, [r5, r3]
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c75c:	3104      	adds	r1, #4
 800c75e:	f1b9 0f00 	cmp.w	r9, #0
 800c762:	d021      	beq.n	800c7a8 <__multiply+0x144>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	f104 0c14 	add.w	ip, r4, #20
 800c76a:	46ae      	mov	lr, r5
 800c76c:	f04f 0a00 	mov.w	sl, #0
 800c770:	f8bc b000 	ldrh.w	fp, [ip]
 800c774:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c778:	fb09 770b 	mla	r7, r9, fp, r7
 800c77c:	4457      	add	r7, sl
 800c77e:	b29b      	uxth	r3, r3
 800c780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c784:	f84e 3b04 	str.w	r3, [lr], #4
 800c788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c78c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c790:	f8be 3000 	ldrh.w	r3, [lr]
 800c794:	fb09 330a 	mla	r3, r9, sl, r3
 800c798:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c79c:	4562      	cmp	r2, ip
 800c79e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7a2:	d8e5      	bhi.n	800c770 <__multiply+0x10c>
 800c7a4:	9f01      	ldr	r7, [sp, #4]
 800c7a6:	51eb      	str	r3, [r5, r7]
 800c7a8:	3504      	adds	r5, #4
 800c7aa:	e799      	b.n	800c6e0 <__multiply+0x7c>
 800c7ac:	3e01      	subs	r6, #1
 800c7ae:	e79b      	b.n	800c6e8 <__multiply+0x84>
 800c7b0:	0800f290 	.word	0x0800f290
 800c7b4:	0800f301 	.word	0x0800f301

0800c7b8 <__pow5mult>:
 800c7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	4615      	mov	r5, r2
 800c7be:	f012 0203 	ands.w	r2, r2, #3
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	460e      	mov	r6, r1
 800c7c6:	d007      	beq.n	800c7d8 <__pow5mult+0x20>
 800c7c8:	4c25      	ldr	r4, [pc, #148]	@ (800c860 <__pow5mult+0xa8>)
 800c7ca:	3a01      	subs	r2, #1
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7d2:	f7ff fe55 	bl	800c480 <__multadd>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	10ad      	asrs	r5, r5, #2
 800c7da:	d03d      	beq.n	800c858 <__pow5mult+0xa0>
 800c7dc:	69fc      	ldr	r4, [r7, #28]
 800c7de:	b97c      	cbnz	r4, 800c800 <__pow5mult+0x48>
 800c7e0:	2010      	movs	r0, #16
 800c7e2:	f7fb fc9b 	bl	800811c <malloc>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	61f8      	str	r0, [r7, #28]
 800c7ea:	b928      	cbnz	r0, 800c7f8 <__pow5mult+0x40>
 800c7ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c864 <__pow5mult+0xac>)
 800c7ee:	481e      	ldr	r0, [pc, #120]	@ (800c868 <__pow5mult+0xb0>)
 800c7f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7f4:	f001 fac4 	bl	800dd80 <__assert_func>
 800c7f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7fc:	6004      	str	r4, [r0, #0]
 800c7fe:	60c4      	str	r4, [r0, #12]
 800c800:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c808:	b94c      	cbnz	r4, 800c81e <__pow5mult+0x66>
 800c80a:	f240 2171 	movw	r1, #625	@ 0x271
 800c80e:	4638      	mov	r0, r7
 800c810:	f7ff ff12 	bl	800c638 <__i2b>
 800c814:	2300      	movs	r3, #0
 800c816:	f8c8 0008 	str.w	r0, [r8, #8]
 800c81a:	4604      	mov	r4, r0
 800c81c:	6003      	str	r3, [r0, #0]
 800c81e:	f04f 0900 	mov.w	r9, #0
 800c822:	07eb      	lsls	r3, r5, #31
 800c824:	d50a      	bpl.n	800c83c <__pow5mult+0x84>
 800c826:	4631      	mov	r1, r6
 800c828:	4622      	mov	r2, r4
 800c82a:	4638      	mov	r0, r7
 800c82c:	f7ff ff1a 	bl	800c664 <__multiply>
 800c830:	4631      	mov	r1, r6
 800c832:	4680      	mov	r8, r0
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff fe01 	bl	800c43c <_Bfree>
 800c83a:	4646      	mov	r6, r8
 800c83c:	106d      	asrs	r5, r5, #1
 800c83e:	d00b      	beq.n	800c858 <__pow5mult+0xa0>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	b938      	cbnz	r0, 800c854 <__pow5mult+0x9c>
 800c844:	4622      	mov	r2, r4
 800c846:	4621      	mov	r1, r4
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ff0b 	bl	800c664 <__multiply>
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	f8c0 9000 	str.w	r9, [r0]
 800c854:	4604      	mov	r4, r0
 800c856:	e7e4      	b.n	800c822 <__pow5mult+0x6a>
 800c858:	4630      	mov	r0, r6
 800c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85e:	bf00      	nop
 800c860:	0800f35c 	.word	0x0800f35c
 800c864:	0800f221 	.word	0x0800f221
 800c868:	0800f301 	.word	0x0800f301

0800c86c <__lshift>:
 800c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	6849      	ldr	r1, [r1, #4]
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c87a:	68a3      	ldr	r3, [r4, #8]
 800c87c:	4607      	mov	r7, r0
 800c87e:	4691      	mov	r9, r2
 800c880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c884:	f108 0601 	add.w	r6, r8, #1
 800c888:	42b3      	cmp	r3, r6
 800c88a:	db0b      	blt.n	800c8a4 <__lshift+0x38>
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7ff fd95 	bl	800c3bc <_Balloc>
 800c892:	4605      	mov	r5, r0
 800c894:	b948      	cbnz	r0, 800c8aa <__lshift+0x3e>
 800c896:	4602      	mov	r2, r0
 800c898:	4b28      	ldr	r3, [pc, #160]	@ (800c93c <__lshift+0xd0>)
 800c89a:	4829      	ldr	r0, [pc, #164]	@ (800c940 <__lshift+0xd4>)
 800c89c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c8a0:	f001 fa6e 	bl	800dd80 <__assert_func>
 800c8a4:	3101      	adds	r1, #1
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	e7ee      	b.n	800c888 <__lshift+0x1c>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f100 0114 	add.w	r1, r0, #20
 800c8b0:	f100 0210 	add.w	r2, r0, #16
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	4553      	cmp	r3, sl
 800c8b8:	db33      	blt.n	800c922 <__lshift+0xb6>
 800c8ba:	6920      	ldr	r0, [r4, #16]
 800c8bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8c0:	f104 0314 	add.w	r3, r4, #20
 800c8c4:	f019 091f 	ands.w	r9, r9, #31
 800c8c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8d0:	d02b      	beq.n	800c92a <__lshift+0xbe>
 800c8d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8d6:	468a      	mov	sl, r1
 800c8d8:	2200      	movs	r2, #0
 800c8da:	6818      	ldr	r0, [r3, #0]
 800c8dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c8e0:	4310      	orrs	r0, r2
 800c8e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ea:	459c      	cmp	ip, r3
 800c8ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8f0:	d8f3      	bhi.n	800c8da <__lshift+0x6e>
 800c8f2:	ebac 0304 	sub.w	r3, ip, r4
 800c8f6:	3b15      	subs	r3, #21
 800c8f8:	f023 0303 	bic.w	r3, r3, #3
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	f104 0015 	add.w	r0, r4, #21
 800c902:	4584      	cmp	ip, r0
 800c904:	bf38      	it	cc
 800c906:	2304      	movcc	r3, #4
 800c908:	50ca      	str	r2, [r1, r3]
 800c90a:	b10a      	cbz	r2, 800c910 <__lshift+0xa4>
 800c90c:	f108 0602 	add.w	r6, r8, #2
 800c910:	3e01      	subs	r6, #1
 800c912:	4638      	mov	r0, r7
 800c914:	612e      	str	r6, [r5, #16]
 800c916:	4621      	mov	r1, r4
 800c918:	f7ff fd90 	bl	800c43c <_Bfree>
 800c91c:	4628      	mov	r0, r5
 800c91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c922:	f842 0f04 	str.w	r0, [r2, #4]!
 800c926:	3301      	adds	r3, #1
 800c928:	e7c5      	b.n	800c8b6 <__lshift+0x4a>
 800c92a:	3904      	subs	r1, #4
 800c92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c930:	f841 2f04 	str.w	r2, [r1, #4]!
 800c934:	459c      	cmp	ip, r3
 800c936:	d8f9      	bhi.n	800c92c <__lshift+0xc0>
 800c938:	e7ea      	b.n	800c910 <__lshift+0xa4>
 800c93a:	bf00      	nop
 800c93c:	0800f290 	.word	0x0800f290
 800c940:	0800f301 	.word	0x0800f301

0800c944 <__mcmp>:
 800c944:	690a      	ldr	r2, [r1, #16]
 800c946:	4603      	mov	r3, r0
 800c948:	6900      	ldr	r0, [r0, #16]
 800c94a:	1a80      	subs	r0, r0, r2
 800c94c:	b530      	push	{r4, r5, lr}
 800c94e:	d10e      	bne.n	800c96e <__mcmp+0x2a>
 800c950:	3314      	adds	r3, #20
 800c952:	3114      	adds	r1, #20
 800c954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c95c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c964:	4295      	cmp	r5, r2
 800c966:	d003      	beq.n	800c970 <__mcmp+0x2c>
 800c968:	d205      	bcs.n	800c976 <__mcmp+0x32>
 800c96a:	f04f 30ff 	mov.w	r0, #4294967295
 800c96e:	bd30      	pop	{r4, r5, pc}
 800c970:	42a3      	cmp	r3, r4
 800c972:	d3f3      	bcc.n	800c95c <__mcmp+0x18>
 800c974:	e7fb      	b.n	800c96e <__mcmp+0x2a>
 800c976:	2001      	movs	r0, #1
 800c978:	e7f9      	b.n	800c96e <__mcmp+0x2a>
	...

0800c97c <__mdiff>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	4689      	mov	r9, r1
 800c982:	4606      	mov	r6, r0
 800c984:	4611      	mov	r1, r2
 800c986:	4648      	mov	r0, r9
 800c988:	4614      	mov	r4, r2
 800c98a:	f7ff ffdb 	bl	800c944 <__mcmp>
 800c98e:	1e05      	subs	r5, r0, #0
 800c990:	d112      	bne.n	800c9b8 <__mdiff+0x3c>
 800c992:	4629      	mov	r1, r5
 800c994:	4630      	mov	r0, r6
 800c996:	f7ff fd11 	bl	800c3bc <_Balloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__mdiff+0x2e>
 800c99e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca9c <__mdiff+0x120>)
 800c9a0:	f240 2137 	movw	r1, #567	@ 0x237
 800c9a4:	483e      	ldr	r0, [pc, #248]	@ (800caa0 <__mdiff+0x124>)
 800c9a6:	f001 f9eb 	bl	800dd80 <__assert_func>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	b003      	add	sp, #12
 800c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b8:	bfbc      	itt	lt
 800c9ba:	464b      	movlt	r3, r9
 800c9bc:	46a1      	movlt	r9, r4
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9c4:	bfba      	itte	lt
 800c9c6:	461c      	movlt	r4, r3
 800c9c8:	2501      	movlt	r5, #1
 800c9ca:	2500      	movge	r5, #0
 800c9cc:	f7ff fcf6 	bl	800c3bc <_Balloc>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	b918      	cbnz	r0, 800c9dc <__mdiff+0x60>
 800c9d4:	4b31      	ldr	r3, [pc, #196]	@ (800ca9c <__mdiff+0x120>)
 800c9d6:	f240 2145 	movw	r1, #581	@ 0x245
 800c9da:	e7e3      	b.n	800c9a4 <__mdiff+0x28>
 800c9dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9e0:	6926      	ldr	r6, [r4, #16]
 800c9e2:	60c5      	str	r5, [r0, #12]
 800c9e4:	f109 0310 	add.w	r3, r9, #16
 800c9e8:	f109 0514 	add.w	r5, r9, #20
 800c9ec:	f104 0e14 	add.w	lr, r4, #20
 800c9f0:	f100 0b14 	add.w	fp, r0, #20
 800c9f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	46d9      	mov	r9, fp
 800ca00:	f04f 0c00 	mov.w	ip, #0
 800ca04:	9b01      	ldr	r3, [sp, #4]
 800ca06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	fa1f f38a 	uxth.w	r3, sl
 800ca14:	4619      	mov	r1, r3
 800ca16:	b283      	uxth	r3, r0
 800ca18:	1acb      	subs	r3, r1, r3
 800ca1a:	0c00      	lsrs	r0, r0, #16
 800ca1c:	4463      	add	r3, ip
 800ca1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca2c:	4576      	cmp	r6, lr
 800ca2e:	f849 3b04 	str.w	r3, [r9], #4
 800ca32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca36:	d8e5      	bhi.n	800ca04 <__mdiff+0x88>
 800ca38:	1b33      	subs	r3, r6, r4
 800ca3a:	3b15      	subs	r3, #21
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	3415      	adds	r4, #21
 800ca42:	3304      	adds	r3, #4
 800ca44:	42a6      	cmp	r6, r4
 800ca46:	bf38      	it	cc
 800ca48:	2304      	movcc	r3, #4
 800ca4a:	441d      	add	r5, r3
 800ca4c:	445b      	add	r3, fp
 800ca4e:	461e      	mov	r6, r3
 800ca50:	462c      	mov	r4, r5
 800ca52:	4544      	cmp	r4, r8
 800ca54:	d30e      	bcc.n	800ca74 <__mdiff+0xf8>
 800ca56:	f108 0103 	add.w	r1, r8, #3
 800ca5a:	1b49      	subs	r1, r1, r5
 800ca5c:	f021 0103 	bic.w	r1, r1, #3
 800ca60:	3d03      	subs	r5, #3
 800ca62:	45a8      	cmp	r8, r5
 800ca64:	bf38      	it	cc
 800ca66:	2100      	movcc	r1, #0
 800ca68:	440b      	add	r3, r1
 800ca6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca6e:	b191      	cbz	r1, 800ca96 <__mdiff+0x11a>
 800ca70:	6117      	str	r7, [r2, #16]
 800ca72:	e79d      	b.n	800c9b0 <__mdiff+0x34>
 800ca74:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca78:	46e6      	mov	lr, ip
 800ca7a:	0c08      	lsrs	r0, r1, #16
 800ca7c:	fa1c fc81 	uxtah	ip, ip, r1
 800ca80:	4471      	add	r1, lr
 800ca82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca86:	b289      	uxth	r1, r1
 800ca88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca8c:	f846 1b04 	str.w	r1, [r6], #4
 800ca90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca94:	e7dd      	b.n	800ca52 <__mdiff+0xd6>
 800ca96:	3f01      	subs	r7, #1
 800ca98:	e7e7      	b.n	800ca6a <__mdiff+0xee>
 800ca9a:	bf00      	nop
 800ca9c:	0800f290 	.word	0x0800f290
 800caa0:	0800f301 	.word	0x0800f301

0800caa4 <__ulp>:
 800caa4:	b082      	sub	sp, #8
 800caa6:	ed8d 0b00 	vstr	d0, [sp]
 800caaa:	9a01      	ldr	r2, [sp, #4]
 800caac:	4b0f      	ldr	r3, [pc, #60]	@ (800caec <__ulp+0x48>)
 800caae:	4013      	ands	r3, r2
 800cab0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dc08      	bgt.n	800caca <__ulp+0x26>
 800cab8:	425b      	negs	r3, r3
 800caba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cabe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cac2:	da04      	bge.n	800cace <__ulp+0x2a>
 800cac4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cac8:	4113      	asrs	r3, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	e008      	b.n	800cae0 <__ulp+0x3c>
 800cace:	f1a2 0314 	sub.w	r3, r2, #20
 800cad2:	2b1e      	cmp	r3, #30
 800cad4:	bfda      	itte	le
 800cad6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cada:	40da      	lsrle	r2, r3
 800cadc:	2201      	movgt	r2, #1
 800cade:	2300      	movs	r3, #0
 800cae0:	4619      	mov	r1, r3
 800cae2:	4610      	mov	r0, r2
 800cae4:	ec41 0b10 	vmov	d0, r0, r1
 800cae8:	b002      	add	sp, #8
 800caea:	4770      	bx	lr
 800caec:	7ff00000 	.word	0x7ff00000

0800caf0 <__b2d>:
 800caf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf4:	6906      	ldr	r6, [r0, #16]
 800caf6:	f100 0814 	add.w	r8, r0, #20
 800cafa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cafe:	1f37      	subs	r7, r6, #4
 800cb00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb04:	4610      	mov	r0, r2
 800cb06:	f7ff fd4b 	bl	800c5a0 <__hi0bits>
 800cb0a:	f1c0 0320 	rsb	r3, r0, #32
 800cb0e:	280a      	cmp	r0, #10
 800cb10:	600b      	str	r3, [r1, #0]
 800cb12:	491b      	ldr	r1, [pc, #108]	@ (800cb80 <__b2d+0x90>)
 800cb14:	dc15      	bgt.n	800cb42 <__b2d+0x52>
 800cb16:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb1a:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb1e:	45b8      	cmp	r8, r7
 800cb20:	ea43 0501 	orr.w	r5, r3, r1
 800cb24:	bf34      	ite	cc
 800cb26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb2a:	2300      	movcs	r3, #0
 800cb2c:	3015      	adds	r0, #21
 800cb2e:	fa02 f000 	lsl.w	r0, r2, r0
 800cb32:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb36:	4303      	orrs	r3, r0
 800cb38:	461c      	mov	r4, r3
 800cb3a:	ec45 4b10 	vmov	d0, r4, r5
 800cb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb42:	45b8      	cmp	r8, r7
 800cb44:	bf3a      	itte	cc
 800cb46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb4a:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb4e:	2300      	movcs	r3, #0
 800cb50:	380b      	subs	r0, #11
 800cb52:	d012      	beq.n	800cb7a <__b2d+0x8a>
 800cb54:	f1c0 0120 	rsb	r1, r0, #32
 800cb58:	fa23 f401 	lsr.w	r4, r3, r1
 800cb5c:	4082      	lsls	r2, r0
 800cb5e:	4322      	orrs	r2, r4
 800cb60:	4547      	cmp	r7, r8
 800cb62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb66:	bf8c      	ite	hi
 800cb68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb6c:	2200      	movls	r2, #0
 800cb6e:	4083      	lsls	r3, r0
 800cb70:	40ca      	lsrs	r2, r1
 800cb72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb76:	4313      	orrs	r3, r2
 800cb78:	e7de      	b.n	800cb38 <__b2d+0x48>
 800cb7a:	ea42 0501 	orr.w	r5, r2, r1
 800cb7e:	e7db      	b.n	800cb38 <__b2d+0x48>
 800cb80:	3ff00000 	.word	0x3ff00000

0800cb84 <__d2b>:
 800cb84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb88:	460f      	mov	r7, r1
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	ec59 8b10 	vmov	r8, r9, d0
 800cb90:	4616      	mov	r6, r2
 800cb92:	f7ff fc13 	bl	800c3bc <_Balloc>
 800cb96:	4604      	mov	r4, r0
 800cb98:	b930      	cbnz	r0, 800cba8 <__d2b+0x24>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	4b23      	ldr	r3, [pc, #140]	@ (800cc2c <__d2b+0xa8>)
 800cb9e:	4824      	ldr	r0, [pc, #144]	@ (800cc30 <__d2b+0xac>)
 800cba0:	f240 310f 	movw	r1, #783	@ 0x30f
 800cba4:	f001 f8ec 	bl	800dd80 <__assert_func>
 800cba8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbb0:	b10d      	cbz	r5, 800cbb6 <__d2b+0x32>
 800cbb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	f1b8 0300 	subs.w	r3, r8, #0
 800cbbc:	d023      	beq.n	800cc06 <__d2b+0x82>
 800cbbe:	4668      	mov	r0, sp
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	f7ff fd0c 	bl	800c5de <__lo0bits>
 800cbc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbca:	b1d0      	cbz	r0, 800cc02 <__d2b+0x7e>
 800cbcc:	f1c0 0320 	rsb	r3, r0, #32
 800cbd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd4:	430b      	orrs	r3, r1
 800cbd6:	40c2      	lsrs	r2, r0
 800cbd8:	6163      	str	r3, [r4, #20]
 800cbda:	9201      	str	r2, [sp, #4]
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	61a3      	str	r3, [r4, #24]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	bf0c      	ite	eq
 800cbe4:	2201      	moveq	r2, #1
 800cbe6:	2202      	movne	r2, #2
 800cbe8:	6122      	str	r2, [r4, #16]
 800cbea:	b1a5      	cbz	r5, 800cc16 <__d2b+0x92>
 800cbec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cbf0:	4405      	add	r5, r0
 800cbf2:	603d      	str	r5, [r7, #0]
 800cbf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cbf8:	6030      	str	r0, [r6, #0]
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	b003      	add	sp, #12
 800cbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc02:	6161      	str	r1, [r4, #20]
 800cc04:	e7ea      	b.n	800cbdc <__d2b+0x58>
 800cc06:	a801      	add	r0, sp, #4
 800cc08:	f7ff fce9 	bl	800c5de <__lo0bits>
 800cc0c:	9b01      	ldr	r3, [sp, #4]
 800cc0e:	6163      	str	r3, [r4, #20]
 800cc10:	3020      	adds	r0, #32
 800cc12:	2201      	movs	r2, #1
 800cc14:	e7e8      	b.n	800cbe8 <__d2b+0x64>
 800cc16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc1e:	6038      	str	r0, [r7, #0]
 800cc20:	6918      	ldr	r0, [r3, #16]
 800cc22:	f7ff fcbd 	bl	800c5a0 <__hi0bits>
 800cc26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc2a:	e7e5      	b.n	800cbf8 <__d2b+0x74>
 800cc2c:	0800f290 	.word	0x0800f290
 800cc30:	0800f301 	.word	0x0800f301

0800cc34 <__ratio>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	e9cd 1000 	strd	r1, r0, [sp]
 800cc3e:	a902      	add	r1, sp, #8
 800cc40:	f7ff ff56 	bl	800caf0 <__b2d>
 800cc44:	9800      	ldr	r0, [sp, #0]
 800cc46:	a903      	add	r1, sp, #12
 800cc48:	ec55 4b10 	vmov	r4, r5, d0
 800cc4c:	f7ff ff50 	bl	800caf0 <__b2d>
 800cc50:	9b01      	ldr	r3, [sp, #4]
 800cc52:	6919      	ldr	r1, [r3, #16]
 800cc54:	9b00      	ldr	r3, [sp, #0]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	1ac9      	subs	r1, r1, r3
 800cc5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	ec5b ab10 	vmov	sl, fp, d0
 800cc64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bfce      	itee	gt
 800cc6c:	462a      	movgt	r2, r5
 800cc6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc72:	465a      	movle	r2, fp
 800cc74:	462f      	mov	r7, r5
 800cc76:	46d9      	mov	r9, fp
 800cc78:	bfcc      	ite	gt
 800cc7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cc82:	464b      	mov	r3, r9
 800cc84:	4652      	mov	r2, sl
 800cc86:	4620      	mov	r0, r4
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 fdef 	bl	800086c <__aeabi_ddiv>
 800cc8e:	ec41 0b10 	vmov	d0, r0, r1
 800cc92:	b005      	add	sp, #20
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc98 <__copybits>:
 800cc98:	3901      	subs	r1, #1
 800cc9a:	b570      	push	{r4, r5, r6, lr}
 800cc9c:	1149      	asrs	r1, r1, #5
 800cc9e:	6914      	ldr	r4, [r2, #16]
 800cca0:	3101      	adds	r1, #1
 800cca2:	f102 0314 	add.w	r3, r2, #20
 800cca6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccae:	1f05      	subs	r5, r0, #4
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	d30c      	bcc.n	800ccce <__copybits+0x36>
 800ccb4:	1aa3      	subs	r3, r4, r2
 800ccb6:	3b11      	subs	r3, #17
 800ccb8:	f023 0303 	bic.w	r3, r3, #3
 800ccbc:	3211      	adds	r2, #17
 800ccbe:	42a2      	cmp	r2, r4
 800ccc0:	bf88      	it	hi
 800ccc2:	2300      	movhi	r3, #0
 800ccc4:	4418      	add	r0, r3
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	4288      	cmp	r0, r1
 800ccca:	d305      	bcc.n	800ccd8 <__copybits+0x40>
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccd2:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccd6:	e7eb      	b.n	800ccb0 <__copybits+0x18>
 800ccd8:	f840 3b04 	str.w	r3, [r0], #4
 800ccdc:	e7f4      	b.n	800ccc8 <__copybits+0x30>

0800ccde <__any_on>:
 800ccde:	f100 0214 	add.w	r2, r0, #20
 800cce2:	6900      	ldr	r0, [r0, #16]
 800cce4:	114b      	asrs	r3, r1, #5
 800cce6:	4298      	cmp	r0, r3
 800cce8:	b510      	push	{r4, lr}
 800ccea:	db11      	blt.n	800cd10 <__any_on+0x32>
 800ccec:	dd0a      	ble.n	800cd04 <__any_on+0x26>
 800ccee:	f011 011f 	ands.w	r1, r1, #31
 800ccf2:	d007      	beq.n	800cd04 <__any_on+0x26>
 800ccf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccf8:	fa24 f001 	lsr.w	r0, r4, r1
 800ccfc:	fa00 f101 	lsl.w	r1, r0, r1
 800cd00:	428c      	cmp	r4, r1
 800cd02:	d10b      	bne.n	800cd1c <__any_on+0x3e>
 800cd04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d803      	bhi.n	800cd14 <__any_on+0x36>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	bd10      	pop	{r4, pc}
 800cd10:	4603      	mov	r3, r0
 800cd12:	e7f7      	b.n	800cd04 <__any_on+0x26>
 800cd14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd18:	2900      	cmp	r1, #0
 800cd1a:	d0f5      	beq.n	800cd08 <__any_on+0x2a>
 800cd1c:	2001      	movs	r0, #1
 800cd1e:	e7f6      	b.n	800cd0e <__any_on+0x30>

0800cd20 <_strtoul_l.constprop.0>:
 800cd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd24:	4e34      	ldr	r6, [pc, #208]	@ (800cdf8 <_strtoul_l.constprop.0+0xd8>)
 800cd26:	4686      	mov	lr, r0
 800cd28:	460d      	mov	r5, r1
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd30:	5d37      	ldrb	r7, [r6, r4]
 800cd32:	f017 0708 	ands.w	r7, r7, #8
 800cd36:	d1f8      	bne.n	800cd2a <_strtoul_l.constprop.0+0xa>
 800cd38:	2c2d      	cmp	r4, #45	@ 0x2d
 800cd3a:	d12f      	bne.n	800cd9c <_strtoul_l.constprop.0+0x7c>
 800cd3c:	782c      	ldrb	r4, [r5, #0]
 800cd3e:	2701      	movs	r7, #1
 800cd40:	1c85      	adds	r5, r0, #2
 800cd42:	f033 0010 	bics.w	r0, r3, #16
 800cd46:	d109      	bne.n	800cd5c <_strtoul_l.constprop.0+0x3c>
 800cd48:	2c30      	cmp	r4, #48	@ 0x30
 800cd4a:	d12c      	bne.n	800cda6 <_strtoul_l.constprop.0+0x86>
 800cd4c:	7828      	ldrb	r0, [r5, #0]
 800cd4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cd52:	2858      	cmp	r0, #88	@ 0x58
 800cd54:	d127      	bne.n	800cda6 <_strtoul_l.constprop.0+0x86>
 800cd56:	786c      	ldrb	r4, [r5, #1]
 800cd58:	2310      	movs	r3, #16
 800cd5a:	3502      	adds	r5, #2
 800cd5c:	f04f 38ff 	mov.w	r8, #4294967295
 800cd60:	2600      	movs	r6, #0
 800cd62:	fbb8 f8f3 	udiv	r8, r8, r3
 800cd66:	fb03 f908 	mul.w	r9, r3, r8
 800cd6a:	ea6f 0909 	mvn.w	r9, r9
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cd74:	f1bc 0f09 	cmp.w	ip, #9
 800cd78:	d81c      	bhi.n	800cdb4 <_strtoul_l.constprop.0+0x94>
 800cd7a:	4664      	mov	r4, ip
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	dd2a      	ble.n	800cdd6 <_strtoul_l.constprop.0+0xb6>
 800cd80:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cd84:	d007      	beq.n	800cd96 <_strtoul_l.constprop.0+0x76>
 800cd86:	4580      	cmp	r8, r0
 800cd88:	d322      	bcc.n	800cdd0 <_strtoul_l.constprop.0+0xb0>
 800cd8a:	d101      	bne.n	800cd90 <_strtoul_l.constprop.0+0x70>
 800cd8c:	45a1      	cmp	r9, r4
 800cd8e:	db1f      	blt.n	800cdd0 <_strtoul_l.constprop.0+0xb0>
 800cd90:	fb00 4003 	mla	r0, r0, r3, r4
 800cd94:	2601      	movs	r6, #1
 800cd96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd9a:	e7e9      	b.n	800cd70 <_strtoul_l.constprop.0+0x50>
 800cd9c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd9e:	bf04      	itt	eq
 800cda0:	782c      	ldrbeq	r4, [r5, #0]
 800cda2:	1c85      	addeq	r5, r0, #2
 800cda4:	e7cd      	b.n	800cd42 <_strtoul_l.constprop.0+0x22>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1d8      	bne.n	800cd5c <_strtoul_l.constprop.0+0x3c>
 800cdaa:	2c30      	cmp	r4, #48	@ 0x30
 800cdac:	bf0c      	ite	eq
 800cdae:	2308      	moveq	r3, #8
 800cdb0:	230a      	movne	r3, #10
 800cdb2:	e7d3      	b.n	800cd5c <_strtoul_l.constprop.0+0x3c>
 800cdb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cdb8:	f1bc 0f19 	cmp.w	ip, #25
 800cdbc:	d801      	bhi.n	800cdc2 <_strtoul_l.constprop.0+0xa2>
 800cdbe:	3c37      	subs	r4, #55	@ 0x37
 800cdc0:	e7dc      	b.n	800cd7c <_strtoul_l.constprop.0+0x5c>
 800cdc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cdc6:	f1bc 0f19 	cmp.w	ip, #25
 800cdca:	d804      	bhi.n	800cdd6 <_strtoul_l.constprop.0+0xb6>
 800cdcc:	3c57      	subs	r4, #87	@ 0x57
 800cdce:	e7d5      	b.n	800cd7c <_strtoul_l.constprop.0+0x5c>
 800cdd0:	f04f 36ff 	mov.w	r6, #4294967295
 800cdd4:	e7df      	b.n	800cd96 <_strtoul_l.constprop.0+0x76>
 800cdd6:	1c73      	adds	r3, r6, #1
 800cdd8:	d106      	bne.n	800cde8 <_strtoul_l.constprop.0+0xc8>
 800cdda:	2322      	movs	r3, #34	@ 0x22
 800cddc:	f8ce 3000 	str.w	r3, [lr]
 800cde0:	4630      	mov	r0, r6
 800cde2:	b932      	cbnz	r2, 800cdf2 <_strtoul_l.constprop.0+0xd2>
 800cde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cde8:	b107      	cbz	r7, 800cdec <_strtoul_l.constprop.0+0xcc>
 800cdea:	4240      	negs	r0, r0
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	d0f9      	beq.n	800cde4 <_strtoul_l.constprop.0+0xc4>
 800cdf0:	b106      	cbz	r6, 800cdf4 <_strtoul_l.constprop.0+0xd4>
 800cdf2:	1e69      	subs	r1, r5, #1
 800cdf4:	6011      	str	r1, [r2, #0]
 800cdf6:	e7f5      	b.n	800cde4 <_strtoul_l.constprop.0+0xc4>
 800cdf8:	0800f029 	.word	0x0800f029

0800cdfc <_strtoul_r>:
 800cdfc:	f7ff bf90 	b.w	800cd20 <_strtoul_l.constprop.0>

0800ce00 <strtoul>:
 800ce00:	4613      	mov	r3, r2
 800ce02:	460a      	mov	r2, r1
 800ce04:	4601      	mov	r1, r0
 800ce06:	4802      	ldr	r0, [pc, #8]	@ (800ce10 <strtoul+0x10>)
 800ce08:	6800      	ldr	r0, [r0, #0]
 800ce0a:	f7ff bf89 	b.w	800cd20 <_strtoul_l.constprop.0>
 800ce0e:	bf00      	nop
 800ce10:	200001a0 	.word	0x200001a0

0800ce14 <__ascii_wctomb>:
 800ce14:	4603      	mov	r3, r0
 800ce16:	4608      	mov	r0, r1
 800ce18:	b141      	cbz	r1, 800ce2c <__ascii_wctomb+0x18>
 800ce1a:	2aff      	cmp	r2, #255	@ 0xff
 800ce1c:	d904      	bls.n	800ce28 <__ascii_wctomb+0x14>
 800ce1e:	228a      	movs	r2, #138	@ 0x8a
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	4770      	bx	lr
 800ce28:	700a      	strb	r2, [r1, #0]
 800ce2a:	2001      	movs	r0, #1
 800ce2c:	4770      	bx	lr

0800ce2e <__ssputs_r>:
 800ce2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce32:	688e      	ldr	r6, [r1, #8]
 800ce34:	461f      	mov	r7, r3
 800ce36:	42be      	cmp	r6, r7
 800ce38:	680b      	ldr	r3, [r1, #0]
 800ce3a:	4682      	mov	sl, r0
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	4690      	mov	r8, r2
 800ce40:	d82d      	bhi.n	800ce9e <__ssputs_r+0x70>
 800ce42:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce46:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce4a:	d026      	beq.n	800ce9a <__ssputs_r+0x6c>
 800ce4c:	6965      	ldr	r5, [r4, #20]
 800ce4e:	6909      	ldr	r1, [r1, #16]
 800ce50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce54:	eba3 0901 	sub.w	r9, r3, r1
 800ce58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce5c:	1c7b      	adds	r3, r7, #1
 800ce5e:	444b      	add	r3, r9
 800ce60:	106d      	asrs	r5, r5, #1
 800ce62:	429d      	cmp	r5, r3
 800ce64:	bf38      	it	cc
 800ce66:	461d      	movcc	r5, r3
 800ce68:	0553      	lsls	r3, r2, #21
 800ce6a:	d527      	bpl.n	800cebc <__ssputs_r+0x8e>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7fb f987 	bl	8008180 <_malloc_r>
 800ce72:	4606      	mov	r6, r0
 800ce74:	b360      	cbz	r0, 800ced0 <__ssputs_r+0xa2>
 800ce76:	6921      	ldr	r1, [r4, #16]
 800ce78:	464a      	mov	r2, r9
 800ce7a:	f7fe f851 	bl	800af20 <memcpy>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce88:	81a3      	strh	r3, [r4, #12]
 800ce8a:	6126      	str	r6, [r4, #16]
 800ce8c:	6165      	str	r5, [r4, #20]
 800ce8e:	444e      	add	r6, r9
 800ce90:	eba5 0509 	sub.w	r5, r5, r9
 800ce94:	6026      	str	r6, [r4, #0]
 800ce96:	60a5      	str	r5, [r4, #8]
 800ce98:	463e      	mov	r6, r7
 800ce9a:	42be      	cmp	r6, r7
 800ce9c:	d900      	bls.n	800cea0 <__ssputs_r+0x72>
 800ce9e:	463e      	mov	r6, r7
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	4632      	mov	r2, r6
 800cea4:	4641      	mov	r1, r8
 800cea6:	f000 ff2a 	bl	800dcfe <memmove>
 800ceaa:	68a3      	ldr	r3, [r4, #8]
 800ceac:	1b9b      	subs	r3, r3, r6
 800ceae:	60a3      	str	r3, [r4, #8]
 800ceb0:	6823      	ldr	r3, [r4, #0]
 800ceb2:	4433      	add	r3, r6
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebc:	462a      	mov	r2, r5
 800cebe:	f000 ff9d 	bl	800ddfc <_realloc_r>
 800cec2:	4606      	mov	r6, r0
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d1e0      	bne.n	800ce8a <__ssputs_r+0x5c>
 800cec8:	6921      	ldr	r1, [r4, #16]
 800ceca:	4650      	mov	r0, sl
 800cecc:	f7fe fe9c 	bl	800bc08 <_free_r>
 800ced0:	230c      	movs	r3, #12
 800ced2:	f8ca 3000 	str.w	r3, [sl]
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	f04f 30ff 	mov.w	r0, #4294967295
 800cee2:	e7e9      	b.n	800ceb8 <__ssputs_r+0x8a>

0800cee4 <_svfiprintf_r>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	4698      	mov	r8, r3
 800ceea:	898b      	ldrh	r3, [r1, #12]
 800ceec:	061b      	lsls	r3, r3, #24
 800ceee:	b09d      	sub	sp, #116	@ 0x74
 800cef0:	4607      	mov	r7, r0
 800cef2:	460d      	mov	r5, r1
 800cef4:	4614      	mov	r4, r2
 800cef6:	d510      	bpl.n	800cf1a <_svfiprintf_r+0x36>
 800cef8:	690b      	ldr	r3, [r1, #16]
 800cefa:	b973      	cbnz	r3, 800cf1a <_svfiprintf_r+0x36>
 800cefc:	2140      	movs	r1, #64	@ 0x40
 800cefe:	f7fb f93f 	bl	8008180 <_malloc_r>
 800cf02:	6028      	str	r0, [r5, #0]
 800cf04:	6128      	str	r0, [r5, #16]
 800cf06:	b930      	cbnz	r0, 800cf16 <_svfiprintf_r+0x32>
 800cf08:	230c      	movs	r3, #12
 800cf0a:	603b      	str	r3, [r7, #0]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	b01d      	add	sp, #116	@ 0x74
 800cf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf16:	2340      	movs	r3, #64	@ 0x40
 800cf18:	616b      	str	r3, [r5, #20]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf1e:	2320      	movs	r3, #32
 800cf20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf28:	2330      	movs	r3, #48	@ 0x30
 800cf2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0c8 <_svfiprintf_r+0x1e4>
 800cf2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf32:	f04f 0901 	mov.w	r9, #1
 800cf36:	4623      	mov	r3, r4
 800cf38:	469a      	mov	sl, r3
 800cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3e:	b10a      	cbz	r2, 800cf44 <_svfiprintf_r+0x60>
 800cf40:	2a25      	cmp	r2, #37	@ 0x25
 800cf42:	d1f9      	bne.n	800cf38 <_svfiprintf_r+0x54>
 800cf44:	ebba 0b04 	subs.w	fp, sl, r4
 800cf48:	d00b      	beq.n	800cf62 <_svfiprintf_r+0x7e>
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ff6c 	bl	800ce2e <__ssputs_r>
 800cf56:	3001      	adds	r0, #1
 800cf58:	f000 80a7 	beq.w	800d0aa <_svfiprintf_r+0x1c6>
 800cf5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf5e:	445a      	add	r2, fp
 800cf60:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf62:	f89a 3000 	ldrb.w	r3, [sl]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 809f 	beq.w	800d0aa <_svfiprintf_r+0x1c6>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf76:	f10a 0a01 	add.w	sl, sl, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	9307      	str	r3, [sp, #28]
 800cf7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf82:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf84:	4654      	mov	r4, sl
 800cf86:	2205      	movs	r2, #5
 800cf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf8c:	484e      	ldr	r0, [pc, #312]	@ (800d0c8 <_svfiprintf_r+0x1e4>)
 800cf8e:	f7f3 f92f 	bl	80001f0 <memchr>
 800cf92:	9a04      	ldr	r2, [sp, #16]
 800cf94:	b9d8      	cbnz	r0, 800cfce <_svfiprintf_r+0xea>
 800cf96:	06d0      	lsls	r0, r2, #27
 800cf98:	bf44      	itt	mi
 800cf9a:	2320      	movmi	r3, #32
 800cf9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa0:	0711      	lsls	r1, r2, #28
 800cfa2:	bf44      	itt	mi
 800cfa4:	232b      	movmi	r3, #43	@ 0x2b
 800cfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cfae:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb0:	d015      	beq.n	800cfde <_svfiprintf_r+0xfa>
 800cfb2:	9a07      	ldr	r2, [sp, #28]
 800cfb4:	4654      	mov	r4, sl
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	f04f 0c0a 	mov.w	ip, #10
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfc2:	3b30      	subs	r3, #48	@ 0x30
 800cfc4:	2b09      	cmp	r3, #9
 800cfc6:	d94b      	bls.n	800d060 <_svfiprintf_r+0x17c>
 800cfc8:	b1b0      	cbz	r0, 800cff8 <_svfiprintf_r+0x114>
 800cfca:	9207      	str	r2, [sp, #28]
 800cfcc:	e014      	b.n	800cff8 <_svfiprintf_r+0x114>
 800cfce:	eba0 0308 	sub.w	r3, r0, r8
 800cfd2:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	9304      	str	r3, [sp, #16]
 800cfda:	46a2      	mov	sl, r4
 800cfdc:	e7d2      	b.n	800cf84 <_svfiprintf_r+0xa0>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	1d19      	adds	r1, r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	9103      	str	r1, [sp, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	bfbb      	ittet	lt
 800cfea:	425b      	neglt	r3, r3
 800cfec:	f042 0202 	orrlt.w	r2, r2, #2
 800cff0:	9307      	strge	r3, [sp, #28]
 800cff2:	9307      	strlt	r3, [sp, #28]
 800cff4:	bfb8      	it	lt
 800cff6:	9204      	strlt	r2, [sp, #16]
 800cff8:	7823      	ldrb	r3, [r4, #0]
 800cffa:	2b2e      	cmp	r3, #46	@ 0x2e
 800cffc:	d10a      	bne.n	800d014 <_svfiprintf_r+0x130>
 800cffe:	7863      	ldrb	r3, [r4, #1]
 800d000:	2b2a      	cmp	r3, #42	@ 0x2a
 800d002:	d132      	bne.n	800d06a <_svfiprintf_r+0x186>
 800d004:	9b03      	ldr	r3, [sp, #12]
 800d006:	1d1a      	adds	r2, r3, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	9203      	str	r2, [sp, #12]
 800d00c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d010:	3402      	adds	r4, #2
 800d012:	9305      	str	r3, [sp, #20]
 800d014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0d8 <_svfiprintf_r+0x1f4>
 800d018:	7821      	ldrb	r1, [r4, #0]
 800d01a:	2203      	movs	r2, #3
 800d01c:	4650      	mov	r0, sl
 800d01e:	f7f3 f8e7 	bl	80001f0 <memchr>
 800d022:	b138      	cbz	r0, 800d034 <_svfiprintf_r+0x150>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	eba0 000a 	sub.w	r0, r0, sl
 800d02a:	2240      	movs	r2, #64	@ 0x40
 800d02c:	4082      	lsls	r2, r0
 800d02e:	4313      	orrs	r3, r2
 800d030:	3401      	adds	r4, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d038:	4824      	ldr	r0, [pc, #144]	@ (800d0cc <_svfiprintf_r+0x1e8>)
 800d03a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d03e:	2206      	movs	r2, #6
 800d040:	f7f3 f8d6 	bl	80001f0 <memchr>
 800d044:	2800      	cmp	r0, #0
 800d046:	d036      	beq.n	800d0b6 <_svfiprintf_r+0x1d2>
 800d048:	4b21      	ldr	r3, [pc, #132]	@ (800d0d0 <_svfiprintf_r+0x1ec>)
 800d04a:	bb1b      	cbnz	r3, 800d094 <_svfiprintf_r+0x1b0>
 800d04c:	9b03      	ldr	r3, [sp, #12]
 800d04e:	3307      	adds	r3, #7
 800d050:	f023 0307 	bic.w	r3, r3, #7
 800d054:	3308      	adds	r3, #8
 800d056:	9303      	str	r3, [sp, #12]
 800d058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05a:	4433      	add	r3, r6
 800d05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05e:	e76a      	b.n	800cf36 <_svfiprintf_r+0x52>
 800d060:	fb0c 3202 	mla	r2, ip, r2, r3
 800d064:	460c      	mov	r4, r1
 800d066:	2001      	movs	r0, #1
 800d068:	e7a8      	b.n	800cfbc <_svfiprintf_r+0xd8>
 800d06a:	2300      	movs	r3, #0
 800d06c:	3401      	adds	r4, #1
 800d06e:	9305      	str	r3, [sp, #20]
 800d070:	4619      	mov	r1, r3
 800d072:	f04f 0c0a 	mov.w	ip, #10
 800d076:	4620      	mov	r0, r4
 800d078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07c:	3a30      	subs	r2, #48	@ 0x30
 800d07e:	2a09      	cmp	r2, #9
 800d080:	d903      	bls.n	800d08a <_svfiprintf_r+0x1a6>
 800d082:	2b00      	cmp	r3, #0
 800d084:	d0c6      	beq.n	800d014 <_svfiprintf_r+0x130>
 800d086:	9105      	str	r1, [sp, #20]
 800d088:	e7c4      	b.n	800d014 <_svfiprintf_r+0x130>
 800d08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08e:	4604      	mov	r4, r0
 800d090:	2301      	movs	r3, #1
 800d092:	e7f0      	b.n	800d076 <_svfiprintf_r+0x192>
 800d094:	ab03      	add	r3, sp, #12
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	462a      	mov	r2, r5
 800d09a:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d4 <_svfiprintf_r+0x1f0>)
 800d09c:	a904      	add	r1, sp, #16
 800d09e:	4638      	mov	r0, r7
 800d0a0:	f7fc f836 	bl	8009110 <_printf_float>
 800d0a4:	1c42      	adds	r2, r0, #1
 800d0a6:	4606      	mov	r6, r0
 800d0a8:	d1d6      	bne.n	800d058 <_svfiprintf_r+0x174>
 800d0aa:	89ab      	ldrh	r3, [r5, #12]
 800d0ac:	065b      	lsls	r3, r3, #25
 800d0ae:	f53f af2d 	bmi.w	800cf0c <_svfiprintf_r+0x28>
 800d0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b4:	e72c      	b.n	800cf10 <_svfiprintf_r+0x2c>
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	462a      	mov	r2, r5
 800d0bc:	4b05      	ldr	r3, [pc, #20]	@ (800d0d4 <_svfiprintf_r+0x1f0>)
 800d0be:	a904      	add	r1, sp, #16
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f7fc fabd 	bl	8009640 <_printf_i>
 800d0c6:	e7ed      	b.n	800d0a4 <_svfiprintf_r+0x1c0>
 800d0c8:	0800f458 	.word	0x0800f458
 800d0cc:	0800f462 	.word	0x0800f462
 800d0d0:	08009111 	.word	0x08009111
 800d0d4:	0800ce2f 	.word	0x0800ce2f
 800d0d8:	0800f45e 	.word	0x0800f45e

0800d0dc <_sungetc_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	1c4b      	adds	r3, r1, #1
 800d0e0:	4614      	mov	r4, r2
 800d0e2:	d103      	bne.n	800d0ec <_sungetc_r+0x10>
 800d0e4:	f04f 35ff 	mov.w	r5, #4294967295
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	8993      	ldrh	r3, [r2, #12]
 800d0ee:	f023 0320 	bic.w	r3, r3, #32
 800d0f2:	8193      	strh	r3, [r2, #12]
 800d0f4:	6853      	ldr	r3, [r2, #4]
 800d0f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d0f8:	b2cd      	uxtb	r5, r1
 800d0fa:	b18a      	cbz	r2, 800d120 <_sungetc_r+0x44>
 800d0fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d0fe:	429a      	cmp	r2, r3
 800d100:	dd08      	ble.n	800d114 <_sungetc_r+0x38>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	6022      	str	r2, [r4, #0]
 800d108:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	3301      	adds	r3, #1
 800d110:	6063      	str	r3, [r4, #4]
 800d112:	e7e9      	b.n	800d0e8 <_sungetc_r+0xc>
 800d114:	4621      	mov	r1, r4
 800d116:	f000 fdb8 	bl	800dc8a <__submore>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d0f1      	beq.n	800d102 <_sungetc_r+0x26>
 800d11e:	e7e1      	b.n	800d0e4 <_sungetc_r+0x8>
 800d120:	6921      	ldr	r1, [r4, #16]
 800d122:	6822      	ldr	r2, [r4, #0]
 800d124:	b141      	cbz	r1, 800d138 <_sungetc_r+0x5c>
 800d126:	4291      	cmp	r1, r2
 800d128:	d206      	bcs.n	800d138 <_sungetc_r+0x5c>
 800d12a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d12e:	42a9      	cmp	r1, r5
 800d130:	d102      	bne.n	800d138 <_sungetc_r+0x5c>
 800d132:	3a01      	subs	r2, #1
 800d134:	6022      	str	r2, [r4, #0]
 800d136:	e7ea      	b.n	800d10e <_sungetc_r+0x32>
 800d138:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d13c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d140:	6363      	str	r3, [r4, #52]	@ 0x34
 800d142:	2303      	movs	r3, #3
 800d144:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d146:	4623      	mov	r3, r4
 800d148:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	2301      	movs	r3, #1
 800d150:	e7de      	b.n	800d110 <_sungetc_r+0x34>

0800d152 <__ssrefill_r>:
 800d152:	b510      	push	{r4, lr}
 800d154:	460c      	mov	r4, r1
 800d156:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d158:	b169      	cbz	r1, 800d176 <__ssrefill_r+0x24>
 800d15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d15e:	4299      	cmp	r1, r3
 800d160:	d001      	beq.n	800d166 <__ssrefill_r+0x14>
 800d162:	f7fe fd51 	bl	800bc08 <_free_r>
 800d166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d168:	6063      	str	r3, [r4, #4]
 800d16a:	2000      	movs	r0, #0
 800d16c:	6360      	str	r0, [r4, #52]	@ 0x34
 800d16e:	b113      	cbz	r3, 800d176 <__ssrefill_r+0x24>
 800d170:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	bd10      	pop	{r4, pc}
 800d176:	6923      	ldr	r3, [r4, #16]
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	2300      	movs	r3, #0
 800d17c:	6063      	str	r3, [r4, #4]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	f043 0320 	orr.w	r3, r3, #32
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	f04f 30ff 	mov.w	r0, #4294967295
 800d18a:	e7f3      	b.n	800d174 <__ssrefill_r+0x22>

0800d18c <__ssvfiscanf_r>:
 800d18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d190:	460c      	mov	r4, r1
 800d192:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d196:	2100      	movs	r1, #0
 800d198:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d19c:	49a5      	ldr	r1, [pc, #660]	@ (800d434 <__ssvfiscanf_r+0x2a8>)
 800d19e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d1a0:	f10d 0804 	add.w	r8, sp, #4
 800d1a4:	49a4      	ldr	r1, [pc, #656]	@ (800d438 <__ssvfiscanf_r+0x2ac>)
 800d1a6:	4fa5      	ldr	r7, [pc, #660]	@ (800d43c <__ssvfiscanf_r+0x2b0>)
 800d1a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	7813      	ldrb	r3, [r2, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 8158 	beq.w	800d46a <__ssvfiscanf_r+0x2de>
 800d1ba:	5cf9      	ldrb	r1, [r7, r3]
 800d1bc:	f011 0108 	ands.w	r1, r1, #8
 800d1c0:	f102 0501 	add.w	r5, r2, #1
 800d1c4:	d019      	beq.n	800d1fa <__ssvfiscanf_r+0x6e>
 800d1c6:	6863      	ldr	r3, [r4, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	dd0f      	ble.n	800d1ec <__ssvfiscanf_r+0x60>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	781a      	ldrb	r2, [r3, #0]
 800d1d0:	5cba      	ldrb	r2, [r7, r2]
 800d1d2:	0712      	lsls	r2, r2, #28
 800d1d4:	d401      	bmi.n	800d1da <__ssvfiscanf_r+0x4e>
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	e7eb      	b.n	800d1b2 <__ssvfiscanf_r+0x26>
 800d1da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d1dc:	3201      	adds	r2, #1
 800d1de:	9245      	str	r2, [sp, #276]	@ 0x114
 800d1e0:	6862      	ldr	r2, [r4, #4]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	3a01      	subs	r2, #1
 800d1e6:	6062      	str	r2, [r4, #4]
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	e7ec      	b.n	800d1c6 <__ssvfiscanf_r+0x3a>
 800d1ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4798      	blx	r3
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d0e9      	beq.n	800d1cc <__ssvfiscanf_r+0x40>
 800d1f8:	e7ed      	b.n	800d1d6 <__ssvfiscanf_r+0x4a>
 800d1fa:	2b25      	cmp	r3, #37	@ 0x25
 800d1fc:	d012      	beq.n	800d224 <__ssvfiscanf_r+0x98>
 800d1fe:	4699      	mov	r9, r3
 800d200:	6863      	ldr	r3, [r4, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	f340 8093 	ble.w	800d32e <__ssvfiscanf_r+0x1a2>
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	7813      	ldrb	r3, [r2, #0]
 800d20c:	454b      	cmp	r3, r9
 800d20e:	f040 812c 	bne.w	800d46a <__ssvfiscanf_r+0x2de>
 800d212:	6863      	ldr	r3, [r4, #4]
 800d214:	3b01      	subs	r3, #1
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d21a:	3201      	adds	r2, #1
 800d21c:	3301      	adds	r3, #1
 800d21e:	6022      	str	r2, [r4, #0]
 800d220:	9345      	str	r3, [sp, #276]	@ 0x114
 800d222:	e7d8      	b.n	800d1d6 <__ssvfiscanf_r+0x4a>
 800d224:	9141      	str	r1, [sp, #260]	@ 0x104
 800d226:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d228:	7853      	ldrb	r3, [r2, #1]
 800d22a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d22c:	bf02      	ittt	eq
 800d22e:	2310      	moveq	r3, #16
 800d230:	1c95      	addeq	r5, r2, #2
 800d232:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d234:	220a      	movs	r2, #10
 800d236:	46a9      	mov	r9, r5
 800d238:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d23c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d240:	2b09      	cmp	r3, #9
 800d242:	d91e      	bls.n	800d282 <__ssvfiscanf_r+0xf6>
 800d244:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800d440 <__ssvfiscanf_r+0x2b4>
 800d248:	2203      	movs	r2, #3
 800d24a:	4650      	mov	r0, sl
 800d24c:	f7f2 ffd0 	bl	80001f0 <memchr>
 800d250:	b138      	cbz	r0, 800d262 <__ssvfiscanf_r+0xd6>
 800d252:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d254:	eba0 000a 	sub.w	r0, r0, sl
 800d258:	2301      	movs	r3, #1
 800d25a:	4083      	lsls	r3, r0
 800d25c:	4313      	orrs	r3, r2
 800d25e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d260:	464d      	mov	r5, r9
 800d262:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d266:	2b78      	cmp	r3, #120	@ 0x78
 800d268:	d806      	bhi.n	800d278 <__ssvfiscanf_r+0xec>
 800d26a:	2b57      	cmp	r3, #87	@ 0x57
 800d26c:	d810      	bhi.n	800d290 <__ssvfiscanf_r+0x104>
 800d26e:	2b25      	cmp	r3, #37	@ 0x25
 800d270:	d0c5      	beq.n	800d1fe <__ssvfiscanf_r+0x72>
 800d272:	d857      	bhi.n	800d324 <__ssvfiscanf_r+0x198>
 800d274:	2b00      	cmp	r3, #0
 800d276:	d065      	beq.n	800d344 <__ssvfiscanf_r+0x1b8>
 800d278:	2303      	movs	r3, #3
 800d27a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d27c:	230a      	movs	r3, #10
 800d27e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d280:	e078      	b.n	800d374 <__ssvfiscanf_r+0x1e8>
 800d282:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d284:	fb02 1103 	mla	r1, r2, r3, r1
 800d288:	3930      	subs	r1, #48	@ 0x30
 800d28a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d28c:	464d      	mov	r5, r9
 800d28e:	e7d2      	b.n	800d236 <__ssvfiscanf_r+0xaa>
 800d290:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d294:	2a20      	cmp	r2, #32
 800d296:	d8ef      	bhi.n	800d278 <__ssvfiscanf_r+0xec>
 800d298:	a101      	add	r1, pc, #4	@ (adr r1, 800d2a0 <__ssvfiscanf_r+0x114>)
 800d29a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d29e:	bf00      	nop
 800d2a0:	0800d353 	.word	0x0800d353
 800d2a4:	0800d279 	.word	0x0800d279
 800d2a8:	0800d279 	.word	0x0800d279
 800d2ac:	0800d3ad 	.word	0x0800d3ad
 800d2b0:	0800d279 	.word	0x0800d279
 800d2b4:	0800d279 	.word	0x0800d279
 800d2b8:	0800d279 	.word	0x0800d279
 800d2bc:	0800d279 	.word	0x0800d279
 800d2c0:	0800d279 	.word	0x0800d279
 800d2c4:	0800d279 	.word	0x0800d279
 800d2c8:	0800d279 	.word	0x0800d279
 800d2cc:	0800d3c3 	.word	0x0800d3c3
 800d2d0:	0800d3a9 	.word	0x0800d3a9
 800d2d4:	0800d32b 	.word	0x0800d32b
 800d2d8:	0800d32b 	.word	0x0800d32b
 800d2dc:	0800d32b 	.word	0x0800d32b
 800d2e0:	0800d279 	.word	0x0800d279
 800d2e4:	0800d365 	.word	0x0800d365
 800d2e8:	0800d279 	.word	0x0800d279
 800d2ec:	0800d279 	.word	0x0800d279
 800d2f0:	0800d279 	.word	0x0800d279
 800d2f4:	0800d279 	.word	0x0800d279
 800d2f8:	0800d3d3 	.word	0x0800d3d3
 800d2fc:	0800d36d 	.word	0x0800d36d
 800d300:	0800d34b 	.word	0x0800d34b
 800d304:	0800d279 	.word	0x0800d279
 800d308:	0800d279 	.word	0x0800d279
 800d30c:	0800d3cf 	.word	0x0800d3cf
 800d310:	0800d279 	.word	0x0800d279
 800d314:	0800d3a9 	.word	0x0800d3a9
 800d318:	0800d279 	.word	0x0800d279
 800d31c:	0800d279 	.word	0x0800d279
 800d320:	0800d353 	.word	0x0800d353
 800d324:	3b45      	subs	r3, #69	@ 0x45
 800d326:	2b02      	cmp	r3, #2
 800d328:	d8a6      	bhi.n	800d278 <__ssvfiscanf_r+0xec>
 800d32a:	2305      	movs	r3, #5
 800d32c:	e021      	b.n	800d372 <__ssvfiscanf_r+0x1e6>
 800d32e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d330:	4621      	mov	r1, r4
 800d332:	4630      	mov	r0, r6
 800d334:	4798      	blx	r3
 800d336:	2800      	cmp	r0, #0
 800d338:	f43f af66 	beq.w	800d208 <__ssvfiscanf_r+0x7c>
 800d33c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d33e:	2800      	cmp	r0, #0
 800d340:	f040 808b 	bne.w	800d45a <__ssvfiscanf_r+0x2ce>
 800d344:	f04f 30ff 	mov.w	r0, #4294967295
 800d348:	e08b      	b.n	800d462 <__ssvfiscanf_r+0x2d6>
 800d34a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d34c:	f042 0220 	orr.w	r2, r2, #32
 800d350:	9241      	str	r2, [sp, #260]	@ 0x104
 800d352:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d358:	9241      	str	r2, [sp, #260]	@ 0x104
 800d35a:	2210      	movs	r2, #16
 800d35c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d35e:	9242      	str	r2, [sp, #264]	@ 0x108
 800d360:	d902      	bls.n	800d368 <__ssvfiscanf_r+0x1dc>
 800d362:	e005      	b.n	800d370 <__ssvfiscanf_r+0x1e4>
 800d364:	2300      	movs	r3, #0
 800d366:	9342      	str	r3, [sp, #264]	@ 0x108
 800d368:	2303      	movs	r3, #3
 800d36a:	e002      	b.n	800d372 <__ssvfiscanf_r+0x1e6>
 800d36c:	2308      	movs	r3, #8
 800d36e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d370:	2304      	movs	r3, #4
 800d372:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d374:	6863      	ldr	r3, [r4, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	dd39      	ble.n	800d3ee <__ssvfiscanf_r+0x262>
 800d37a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d37c:	0659      	lsls	r1, r3, #25
 800d37e:	d404      	bmi.n	800d38a <__ssvfiscanf_r+0x1fe>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	5cba      	ldrb	r2, [r7, r2]
 800d386:	0712      	lsls	r2, r2, #28
 800d388:	d438      	bmi.n	800d3fc <__ssvfiscanf_r+0x270>
 800d38a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	dc47      	bgt.n	800d420 <__ssvfiscanf_r+0x294>
 800d390:	466b      	mov	r3, sp
 800d392:	4622      	mov	r2, r4
 800d394:	a941      	add	r1, sp, #260	@ 0x104
 800d396:	4630      	mov	r0, r6
 800d398:	f000 f9ae 	bl	800d6f8 <_scanf_chars>
 800d39c:	2801      	cmp	r0, #1
 800d39e:	d064      	beq.n	800d46a <__ssvfiscanf_r+0x2de>
 800d3a0:	2802      	cmp	r0, #2
 800d3a2:	f47f af18 	bne.w	800d1d6 <__ssvfiscanf_r+0x4a>
 800d3a6:	e7c9      	b.n	800d33c <__ssvfiscanf_r+0x1b0>
 800d3a8:	220a      	movs	r2, #10
 800d3aa:	e7d7      	b.n	800d35c <__ssvfiscanf_r+0x1d0>
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f000 fc32 	bl	800dc18 <__sccl>
 800d3b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	9341      	str	r3, [sp, #260]	@ 0x104
 800d3bc:	4605      	mov	r5, r0
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e7d7      	b.n	800d372 <__ssvfiscanf_r+0x1e6>
 800d3c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d3c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c8:	9341      	str	r3, [sp, #260]	@ 0x104
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e7d1      	b.n	800d372 <__ssvfiscanf_r+0x1e6>
 800d3ce:	2302      	movs	r3, #2
 800d3d0:	e7cf      	b.n	800d372 <__ssvfiscanf_r+0x1e6>
 800d3d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d3d4:	06c3      	lsls	r3, r0, #27
 800d3d6:	f53f aefe 	bmi.w	800d1d6 <__ssvfiscanf_r+0x4a>
 800d3da:	9b00      	ldr	r3, [sp, #0]
 800d3dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d3de:	1d19      	adds	r1, r3, #4
 800d3e0:	9100      	str	r1, [sp, #0]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	07c0      	lsls	r0, r0, #31
 800d3e6:	bf4c      	ite	mi
 800d3e8:	801a      	strhmi	r2, [r3, #0]
 800d3ea:	601a      	strpl	r2, [r3, #0]
 800d3ec:	e6f3      	b.n	800d1d6 <__ssvfiscanf_r+0x4a>
 800d3ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	4798      	blx	r3
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d0bf      	beq.n	800d37a <__ssvfiscanf_r+0x1ee>
 800d3fa:	e79f      	b.n	800d33c <__ssvfiscanf_r+0x1b0>
 800d3fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d3fe:	3201      	adds	r2, #1
 800d400:	9245      	str	r2, [sp, #276]	@ 0x114
 800d402:	6862      	ldr	r2, [r4, #4]
 800d404:	3a01      	subs	r2, #1
 800d406:	2a00      	cmp	r2, #0
 800d408:	6062      	str	r2, [r4, #4]
 800d40a:	dd02      	ble.n	800d412 <__ssvfiscanf_r+0x286>
 800d40c:	3301      	adds	r3, #1
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	e7b6      	b.n	800d380 <__ssvfiscanf_r+0x1f4>
 800d412:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d414:	4621      	mov	r1, r4
 800d416:	4630      	mov	r0, r6
 800d418:	4798      	blx	r3
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0b0      	beq.n	800d380 <__ssvfiscanf_r+0x1f4>
 800d41e:	e78d      	b.n	800d33c <__ssvfiscanf_r+0x1b0>
 800d420:	2b04      	cmp	r3, #4
 800d422:	dc0f      	bgt.n	800d444 <__ssvfiscanf_r+0x2b8>
 800d424:	466b      	mov	r3, sp
 800d426:	4622      	mov	r2, r4
 800d428:	a941      	add	r1, sp, #260	@ 0x104
 800d42a:	4630      	mov	r0, r6
 800d42c:	f000 f9be 	bl	800d7ac <_scanf_i>
 800d430:	e7b4      	b.n	800d39c <__ssvfiscanf_r+0x210>
 800d432:	bf00      	nop
 800d434:	0800d0dd 	.word	0x0800d0dd
 800d438:	0800d153 	.word	0x0800d153
 800d43c:	0800f029 	.word	0x0800f029
 800d440:	0800f45e 	.word	0x0800f45e
 800d444:	4b0a      	ldr	r3, [pc, #40]	@ (800d470 <__ssvfiscanf_r+0x2e4>)
 800d446:	2b00      	cmp	r3, #0
 800d448:	f43f aec5 	beq.w	800d1d6 <__ssvfiscanf_r+0x4a>
 800d44c:	466b      	mov	r3, sp
 800d44e:	4622      	mov	r2, r4
 800d450:	a941      	add	r1, sp, #260	@ 0x104
 800d452:	4630      	mov	r0, r6
 800d454:	f7fc fa14 	bl	8009880 <_scanf_float>
 800d458:	e7a0      	b.n	800d39c <__ssvfiscanf_r+0x210>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	065b      	lsls	r3, r3, #25
 800d45e:	f53f af71 	bmi.w	800d344 <__ssvfiscanf_r+0x1b8>
 800d462:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d46a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d46c:	e7f9      	b.n	800d462 <__ssvfiscanf_r+0x2d6>
 800d46e:	bf00      	nop
 800d470:	08009881 	.word	0x08009881

0800d474 <__sfputc_r>:
 800d474:	6893      	ldr	r3, [r2, #8]
 800d476:	3b01      	subs	r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	b410      	push	{r4}
 800d47c:	6093      	str	r3, [r2, #8]
 800d47e:	da08      	bge.n	800d492 <__sfputc_r+0x1e>
 800d480:	6994      	ldr	r4, [r2, #24]
 800d482:	42a3      	cmp	r3, r4
 800d484:	db01      	blt.n	800d48a <__sfputc_r+0x16>
 800d486:	290a      	cmp	r1, #10
 800d488:	d103      	bne.n	800d492 <__sfputc_r+0x1e>
 800d48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d48e:	f7fc be08 	b.w	800a0a2 <__swbuf_r>
 800d492:	6813      	ldr	r3, [r2, #0]
 800d494:	1c58      	adds	r0, r3, #1
 800d496:	6010      	str	r0, [r2, #0]
 800d498:	7019      	strb	r1, [r3, #0]
 800d49a:	4608      	mov	r0, r1
 800d49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <__sfputs_r>:
 800d4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	460f      	mov	r7, r1
 800d4a8:	4614      	mov	r4, r2
 800d4aa:	18d5      	adds	r5, r2, r3
 800d4ac:	42ac      	cmp	r4, r5
 800d4ae:	d101      	bne.n	800d4b4 <__sfputs_r+0x12>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e007      	b.n	800d4c4 <__sfputs_r+0x22>
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	463a      	mov	r2, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7ff ffda 	bl	800d474 <__sfputc_r>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d1f3      	bne.n	800d4ac <__sfputs_r+0xa>
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4c8 <_vfiprintf_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	b09d      	sub	sp, #116	@ 0x74
 800d4d0:	4614      	mov	r4, r2
 800d4d2:	4698      	mov	r8, r3
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	b118      	cbz	r0, 800d4e0 <_vfiprintf_r+0x18>
 800d4d8:	6a03      	ldr	r3, [r0, #32]
 800d4da:	b90b      	cbnz	r3, 800d4e0 <_vfiprintf_r+0x18>
 800d4dc:	f7fc fc70 	bl	8009dc0 <__sinit>
 800d4e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4e2:	07d9      	lsls	r1, r3, #31
 800d4e4:	d405      	bmi.n	800d4f2 <_vfiprintf_r+0x2a>
 800d4e6:	89ab      	ldrh	r3, [r5, #12]
 800d4e8:	059a      	lsls	r2, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_vfiprintf_r+0x2a>
 800d4ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ee:	f7f5 fdba 	bl	8003066 <__retarget_lock_acquire_recursive>
 800d4f2:	89ab      	ldrh	r3, [r5, #12]
 800d4f4:	071b      	lsls	r3, r3, #28
 800d4f6:	d501      	bpl.n	800d4fc <_vfiprintf_r+0x34>
 800d4f8:	692b      	ldr	r3, [r5, #16]
 800d4fa:	b99b      	cbnz	r3, 800d524 <_vfiprintf_r+0x5c>
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7fc fe0e 	bl	800a120 <__swsetup_r>
 800d504:	b170      	cbz	r0, 800d524 <_vfiprintf_r+0x5c>
 800d506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d508:	07dc      	lsls	r4, r3, #31
 800d50a:	d504      	bpl.n	800d516 <_vfiprintf_r+0x4e>
 800d50c:	f04f 30ff 	mov.w	r0, #4294967295
 800d510:	b01d      	add	sp, #116	@ 0x74
 800d512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	0598      	lsls	r0, r3, #22
 800d51a:	d4f7      	bmi.n	800d50c <_vfiprintf_r+0x44>
 800d51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d51e:	f7f5 fdae 	bl	800307e <__retarget_lock_release_recursive>
 800d522:	e7f3      	b.n	800d50c <_vfiprintf_r+0x44>
 800d524:	2300      	movs	r3, #0
 800d526:	9309      	str	r3, [sp, #36]	@ 0x24
 800d528:	2320      	movs	r3, #32
 800d52a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d532:	2330      	movs	r3, #48	@ 0x30
 800d534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d6e4 <_vfiprintf_r+0x21c>
 800d538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d53c:	f04f 0901 	mov.w	r9, #1
 800d540:	4623      	mov	r3, r4
 800d542:	469a      	mov	sl, r3
 800d544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d548:	b10a      	cbz	r2, 800d54e <_vfiprintf_r+0x86>
 800d54a:	2a25      	cmp	r2, #37	@ 0x25
 800d54c:	d1f9      	bne.n	800d542 <_vfiprintf_r+0x7a>
 800d54e:	ebba 0b04 	subs.w	fp, sl, r4
 800d552:	d00b      	beq.n	800d56c <_vfiprintf_r+0xa4>
 800d554:	465b      	mov	r3, fp
 800d556:	4622      	mov	r2, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ffa1 	bl	800d4a2 <__sfputs_r>
 800d560:	3001      	adds	r0, #1
 800d562:	f000 80a7 	beq.w	800d6b4 <_vfiprintf_r+0x1ec>
 800d566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d568:	445a      	add	r2, fp
 800d56a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d56c:	f89a 3000 	ldrb.w	r3, [sl]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 809f 	beq.w	800d6b4 <_vfiprintf_r+0x1ec>
 800d576:	2300      	movs	r3, #0
 800d578:	f04f 32ff 	mov.w	r2, #4294967295
 800d57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d580:	f10a 0a01 	add.w	sl, sl, #1
 800d584:	9304      	str	r3, [sp, #16]
 800d586:	9307      	str	r3, [sp, #28]
 800d588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d58c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d58e:	4654      	mov	r4, sl
 800d590:	2205      	movs	r2, #5
 800d592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d596:	4853      	ldr	r0, [pc, #332]	@ (800d6e4 <_vfiprintf_r+0x21c>)
 800d598:	f7f2 fe2a 	bl	80001f0 <memchr>
 800d59c:	9a04      	ldr	r2, [sp, #16]
 800d59e:	b9d8      	cbnz	r0, 800d5d8 <_vfiprintf_r+0x110>
 800d5a0:	06d1      	lsls	r1, r2, #27
 800d5a2:	bf44      	itt	mi
 800d5a4:	2320      	movmi	r3, #32
 800d5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5aa:	0713      	lsls	r3, r2, #28
 800d5ac:	bf44      	itt	mi
 800d5ae:	232b      	movmi	r3, #43	@ 0x2b
 800d5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ba:	d015      	beq.n	800d5e8 <_vfiprintf_r+0x120>
 800d5bc:	9a07      	ldr	r2, [sp, #28]
 800d5be:	4654      	mov	r4, sl
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	f04f 0c0a 	mov.w	ip, #10
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5cc:	3b30      	subs	r3, #48	@ 0x30
 800d5ce:	2b09      	cmp	r3, #9
 800d5d0:	d94b      	bls.n	800d66a <_vfiprintf_r+0x1a2>
 800d5d2:	b1b0      	cbz	r0, 800d602 <_vfiprintf_r+0x13a>
 800d5d4:	9207      	str	r2, [sp, #28]
 800d5d6:	e014      	b.n	800d602 <_vfiprintf_r+0x13a>
 800d5d8:	eba0 0308 	sub.w	r3, r0, r8
 800d5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	46a2      	mov	sl, r4
 800d5e6:	e7d2      	b.n	800d58e <_vfiprintf_r+0xc6>
 800d5e8:	9b03      	ldr	r3, [sp, #12]
 800d5ea:	1d19      	adds	r1, r3, #4
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	9103      	str	r1, [sp, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	bfbb      	ittet	lt
 800d5f4:	425b      	neglt	r3, r3
 800d5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d5fa:	9307      	strge	r3, [sp, #28]
 800d5fc:	9307      	strlt	r3, [sp, #28]
 800d5fe:	bfb8      	it	lt
 800d600:	9204      	strlt	r2, [sp, #16]
 800d602:	7823      	ldrb	r3, [r4, #0]
 800d604:	2b2e      	cmp	r3, #46	@ 0x2e
 800d606:	d10a      	bne.n	800d61e <_vfiprintf_r+0x156>
 800d608:	7863      	ldrb	r3, [r4, #1]
 800d60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d60c:	d132      	bne.n	800d674 <_vfiprintf_r+0x1ac>
 800d60e:	9b03      	ldr	r3, [sp, #12]
 800d610:	1d1a      	adds	r2, r3, #4
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	9203      	str	r2, [sp, #12]
 800d616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d61a:	3402      	adds	r4, #2
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d6f4 <_vfiprintf_r+0x22c>
 800d622:	7821      	ldrb	r1, [r4, #0]
 800d624:	2203      	movs	r2, #3
 800d626:	4650      	mov	r0, sl
 800d628:	f7f2 fde2 	bl	80001f0 <memchr>
 800d62c:	b138      	cbz	r0, 800d63e <_vfiprintf_r+0x176>
 800d62e:	9b04      	ldr	r3, [sp, #16]
 800d630:	eba0 000a 	sub.w	r0, r0, sl
 800d634:	2240      	movs	r2, #64	@ 0x40
 800d636:	4082      	lsls	r2, r0
 800d638:	4313      	orrs	r3, r2
 800d63a:	3401      	adds	r4, #1
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d642:	4829      	ldr	r0, [pc, #164]	@ (800d6e8 <_vfiprintf_r+0x220>)
 800d644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d648:	2206      	movs	r2, #6
 800d64a:	f7f2 fdd1 	bl	80001f0 <memchr>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d03f      	beq.n	800d6d2 <_vfiprintf_r+0x20a>
 800d652:	4b26      	ldr	r3, [pc, #152]	@ (800d6ec <_vfiprintf_r+0x224>)
 800d654:	bb1b      	cbnz	r3, 800d69e <_vfiprintf_r+0x1d6>
 800d656:	9b03      	ldr	r3, [sp, #12]
 800d658:	3307      	adds	r3, #7
 800d65a:	f023 0307 	bic.w	r3, r3, #7
 800d65e:	3308      	adds	r3, #8
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d664:	443b      	add	r3, r7
 800d666:	9309      	str	r3, [sp, #36]	@ 0x24
 800d668:	e76a      	b.n	800d540 <_vfiprintf_r+0x78>
 800d66a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d66e:	460c      	mov	r4, r1
 800d670:	2001      	movs	r0, #1
 800d672:	e7a8      	b.n	800d5c6 <_vfiprintf_r+0xfe>
 800d674:	2300      	movs	r3, #0
 800d676:	3401      	adds	r4, #1
 800d678:	9305      	str	r3, [sp, #20]
 800d67a:	4619      	mov	r1, r3
 800d67c:	f04f 0c0a 	mov.w	ip, #10
 800d680:	4620      	mov	r0, r4
 800d682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d686:	3a30      	subs	r2, #48	@ 0x30
 800d688:	2a09      	cmp	r2, #9
 800d68a:	d903      	bls.n	800d694 <_vfiprintf_r+0x1cc>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d0c6      	beq.n	800d61e <_vfiprintf_r+0x156>
 800d690:	9105      	str	r1, [sp, #20]
 800d692:	e7c4      	b.n	800d61e <_vfiprintf_r+0x156>
 800d694:	fb0c 2101 	mla	r1, ip, r1, r2
 800d698:	4604      	mov	r4, r0
 800d69a:	2301      	movs	r3, #1
 800d69c:	e7f0      	b.n	800d680 <_vfiprintf_r+0x1b8>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4b12      	ldr	r3, [pc, #72]	@ (800d6f0 <_vfiprintf_r+0x228>)
 800d6a6:	a904      	add	r1, sp, #16
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7fb fd31 	bl	8009110 <_printf_float>
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	1c78      	adds	r0, r7, #1
 800d6b2:	d1d6      	bne.n	800d662 <_vfiprintf_r+0x19a>
 800d6b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6b6:	07d9      	lsls	r1, r3, #31
 800d6b8:	d405      	bmi.n	800d6c6 <_vfiprintf_r+0x1fe>
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	059a      	lsls	r2, r3, #22
 800d6be:	d402      	bmi.n	800d6c6 <_vfiprintf_r+0x1fe>
 800d6c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6c2:	f7f5 fcdc 	bl	800307e <__retarget_lock_release_recursive>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	065b      	lsls	r3, r3, #25
 800d6ca:	f53f af1f 	bmi.w	800d50c <_vfiprintf_r+0x44>
 800d6ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6d0:	e71e      	b.n	800d510 <_vfiprintf_r+0x48>
 800d6d2:	ab03      	add	r3, sp, #12
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4b05      	ldr	r3, [pc, #20]	@ (800d6f0 <_vfiprintf_r+0x228>)
 800d6da:	a904      	add	r1, sp, #16
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f7fb ffaf 	bl	8009640 <_printf_i>
 800d6e2:	e7e4      	b.n	800d6ae <_vfiprintf_r+0x1e6>
 800d6e4:	0800f458 	.word	0x0800f458
 800d6e8:	0800f462 	.word	0x0800f462
 800d6ec:	08009111 	.word	0x08009111
 800d6f0:	0800d4a3 	.word	0x0800d4a3
 800d6f4:	0800f45e 	.word	0x0800f45e

0800d6f8 <_scanf_chars>:
 800d6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6fc:	4615      	mov	r5, r2
 800d6fe:	688a      	ldr	r2, [r1, #8]
 800d700:	4680      	mov	r8, r0
 800d702:	460c      	mov	r4, r1
 800d704:	b932      	cbnz	r2, 800d714 <_scanf_chars+0x1c>
 800d706:	698a      	ldr	r2, [r1, #24]
 800d708:	2a00      	cmp	r2, #0
 800d70a:	bf14      	ite	ne
 800d70c:	f04f 32ff 	movne.w	r2, #4294967295
 800d710:	2201      	moveq	r2, #1
 800d712:	608a      	str	r2, [r1, #8]
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d7a8 <_scanf_chars+0xb0>
 800d71a:	06d1      	lsls	r1, r2, #27
 800d71c:	bf5f      	itttt	pl
 800d71e:	681a      	ldrpl	r2, [r3, #0]
 800d720:	1d11      	addpl	r1, r2, #4
 800d722:	6019      	strpl	r1, [r3, #0]
 800d724:	6816      	ldrpl	r6, [r2, #0]
 800d726:	2700      	movs	r7, #0
 800d728:	69a0      	ldr	r0, [r4, #24]
 800d72a:	b188      	cbz	r0, 800d750 <_scanf_chars+0x58>
 800d72c:	2801      	cmp	r0, #1
 800d72e:	d107      	bne.n	800d740 <_scanf_chars+0x48>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	6963      	ldr	r3, [r4, #20]
 800d736:	5c9b      	ldrb	r3, [r3, r2]
 800d738:	b953      	cbnz	r3, 800d750 <_scanf_chars+0x58>
 800d73a:	2f00      	cmp	r7, #0
 800d73c:	d031      	beq.n	800d7a2 <_scanf_chars+0xaa>
 800d73e:	e022      	b.n	800d786 <_scanf_chars+0x8e>
 800d740:	2802      	cmp	r0, #2
 800d742:	d120      	bne.n	800d786 <_scanf_chars+0x8e>
 800d744:	682b      	ldr	r3, [r5, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d74c:	071b      	lsls	r3, r3, #28
 800d74e:	d41a      	bmi.n	800d786 <_scanf_chars+0x8e>
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	06da      	lsls	r2, r3, #27
 800d754:	bf5e      	ittt	pl
 800d756:	682b      	ldrpl	r3, [r5, #0]
 800d758:	781b      	ldrbpl	r3, [r3, #0]
 800d75a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d75e:	682a      	ldr	r2, [r5, #0]
 800d760:	686b      	ldr	r3, [r5, #4]
 800d762:	3201      	adds	r2, #1
 800d764:	602a      	str	r2, [r5, #0]
 800d766:	68a2      	ldr	r2, [r4, #8]
 800d768:	3b01      	subs	r3, #1
 800d76a:	3a01      	subs	r2, #1
 800d76c:	606b      	str	r3, [r5, #4]
 800d76e:	3701      	adds	r7, #1
 800d770:	60a2      	str	r2, [r4, #8]
 800d772:	b142      	cbz	r2, 800d786 <_scanf_chars+0x8e>
 800d774:	2b00      	cmp	r3, #0
 800d776:	dcd7      	bgt.n	800d728 <_scanf_chars+0x30>
 800d778:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d77c:	4629      	mov	r1, r5
 800d77e:	4640      	mov	r0, r8
 800d780:	4798      	blx	r3
 800d782:	2800      	cmp	r0, #0
 800d784:	d0d0      	beq.n	800d728 <_scanf_chars+0x30>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	f013 0310 	ands.w	r3, r3, #16
 800d78c:	d105      	bne.n	800d79a <_scanf_chars+0xa2>
 800d78e:	68e2      	ldr	r2, [r4, #12]
 800d790:	3201      	adds	r2, #1
 800d792:	60e2      	str	r2, [r4, #12]
 800d794:	69a2      	ldr	r2, [r4, #24]
 800d796:	b102      	cbz	r2, 800d79a <_scanf_chars+0xa2>
 800d798:	7033      	strb	r3, [r6, #0]
 800d79a:	6923      	ldr	r3, [r4, #16]
 800d79c:	443b      	add	r3, r7
 800d79e:	6123      	str	r3, [r4, #16]
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800f029 	.word	0x0800f029

0800d7ac <_scanf_i>:
 800d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b0:	4698      	mov	r8, r3
 800d7b2:	4b74      	ldr	r3, [pc, #464]	@ (800d984 <_scanf_i+0x1d8>)
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	4682      	mov	sl, r0
 800d7b8:	4616      	mov	r6, r2
 800d7ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7be:	b087      	sub	sp, #28
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d7c6:	4b70      	ldr	r3, [pc, #448]	@ (800d988 <_scanf_i+0x1dc>)
 800d7c8:	69a1      	ldr	r1, [r4, #24]
 800d7ca:	4a70      	ldr	r2, [pc, #448]	@ (800d98c <_scanf_i+0x1e0>)
 800d7cc:	2903      	cmp	r1, #3
 800d7ce:	bf08      	it	eq
 800d7d0:	461a      	moveq	r2, r3
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	9201      	str	r2, [sp, #4]
 800d7d6:	1e5a      	subs	r2, r3, #1
 800d7d8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d7dc:	bf88      	it	hi
 800d7de:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d7e2:	4627      	mov	r7, r4
 800d7e4:	bf82      	ittt	hi
 800d7e6:	eb03 0905 	addhi.w	r9, r3, r5
 800d7ea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d7ee:	60a3      	strhi	r3, [r4, #8]
 800d7f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d7f4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d7f8:	bf98      	it	ls
 800d7fa:	f04f 0900 	movls.w	r9, #0
 800d7fe:	6023      	str	r3, [r4, #0]
 800d800:	463d      	mov	r5, r7
 800d802:	f04f 0b00 	mov.w	fp, #0
 800d806:	6831      	ldr	r1, [r6, #0]
 800d808:	ab03      	add	r3, sp, #12
 800d80a:	7809      	ldrb	r1, [r1, #0]
 800d80c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d810:	2202      	movs	r2, #2
 800d812:	f7f2 fced 	bl	80001f0 <memchr>
 800d816:	b328      	cbz	r0, 800d864 <_scanf_i+0xb8>
 800d818:	f1bb 0f01 	cmp.w	fp, #1
 800d81c:	d159      	bne.n	800d8d2 <_scanf_i+0x126>
 800d81e:	6862      	ldr	r2, [r4, #4]
 800d820:	b92a      	cbnz	r2, 800d82e <_scanf_i+0x82>
 800d822:	6822      	ldr	r2, [r4, #0]
 800d824:	2108      	movs	r1, #8
 800d826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d82a:	6061      	str	r1, [r4, #4]
 800d82c:	6022      	str	r2, [r4, #0]
 800d82e:	6822      	ldr	r2, [r4, #0]
 800d830:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d834:	6022      	str	r2, [r4, #0]
 800d836:	68a2      	ldr	r2, [r4, #8]
 800d838:	1e51      	subs	r1, r2, #1
 800d83a:	60a1      	str	r1, [r4, #8]
 800d83c:	b192      	cbz	r2, 800d864 <_scanf_i+0xb8>
 800d83e:	6832      	ldr	r2, [r6, #0]
 800d840:	1c51      	adds	r1, r2, #1
 800d842:	6031      	str	r1, [r6, #0]
 800d844:	7812      	ldrb	r2, [r2, #0]
 800d846:	f805 2b01 	strb.w	r2, [r5], #1
 800d84a:	6872      	ldr	r2, [r6, #4]
 800d84c:	3a01      	subs	r2, #1
 800d84e:	2a00      	cmp	r2, #0
 800d850:	6072      	str	r2, [r6, #4]
 800d852:	dc07      	bgt.n	800d864 <_scanf_i+0xb8>
 800d854:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d858:	4631      	mov	r1, r6
 800d85a:	4650      	mov	r0, sl
 800d85c:	4790      	blx	r2
 800d85e:	2800      	cmp	r0, #0
 800d860:	f040 8085 	bne.w	800d96e <_scanf_i+0x1c2>
 800d864:	f10b 0b01 	add.w	fp, fp, #1
 800d868:	f1bb 0f03 	cmp.w	fp, #3
 800d86c:	d1cb      	bne.n	800d806 <_scanf_i+0x5a>
 800d86e:	6863      	ldr	r3, [r4, #4]
 800d870:	b90b      	cbnz	r3, 800d876 <_scanf_i+0xca>
 800d872:	230a      	movs	r3, #10
 800d874:	6063      	str	r3, [r4, #4]
 800d876:	6863      	ldr	r3, [r4, #4]
 800d878:	4945      	ldr	r1, [pc, #276]	@ (800d990 <_scanf_i+0x1e4>)
 800d87a:	6960      	ldr	r0, [r4, #20]
 800d87c:	1ac9      	subs	r1, r1, r3
 800d87e:	f000 f9cb 	bl	800dc18 <__sccl>
 800d882:	f04f 0b00 	mov.w	fp, #0
 800d886:	68a3      	ldr	r3, [r4, #8]
 800d888:	6822      	ldr	r2, [r4, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d03d      	beq.n	800d90a <_scanf_i+0x15e>
 800d88e:	6831      	ldr	r1, [r6, #0]
 800d890:	6960      	ldr	r0, [r4, #20]
 800d892:	f891 c000 	ldrb.w	ip, [r1]
 800d896:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d035      	beq.n	800d90a <_scanf_i+0x15e>
 800d89e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d8a2:	d124      	bne.n	800d8ee <_scanf_i+0x142>
 800d8a4:	0510      	lsls	r0, r2, #20
 800d8a6:	d522      	bpl.n	800d8ee <_scanf_i+0x142>
 800d8a8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ac:	f1b9 0f00 	cmp.w	r9, #0
 800d8b0:	d003      	beq.n	800d8ba <_scanf_i+0x10e>
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800d8b8:	60a3      	str	r3, [r4, #8]
 800d8ba:	6873      	ldr	r3, [r6, #4]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	6073      	str	r3, [r6, #4]
 800d8c2:	dd1b      	ble.n	800d8fc <_scanf_i+0x150>
 800d8c4:	6833      	ldr	r3, [r6, #0]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	6033      	str	r3, [r6, #0]
 800d8ca:	68a3      	ldr	r3, [r4, #8]
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	60a3      	str	r3, [r4, #8]
 800d8d0:	e7d9      	b.n	800d886 <_scanf_i+0xda>
 800d8d2:	f1bb 0f02 	cmp.w	fp, #2
 800d8d6:	d1ae      	bne.n	800d836 <_scanf_i+0x8a>
 800d8d8:	6822      	ldr	r2, [r4, #0]
 800d8da:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d8de:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d8e2:	d1bf      	bne.n	800d864 <_scanf_i+0xb8>
 800d8e4:	2110      	movs	r1, #16
 800d8e6:	6061      	str	r1, [r4, #4]
 800d8e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d8ec:	e7a2      	b.n	800d834 <_scanf_i+0x88>
 800d8ee:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	780b      	ldrb	r3, [r1, #0]
 800d8f6:	f805 3b01 	strb.w	r3, [r5], #1
 800d8fa:	e7de      	b.n	800d8ba <_scanf_i+0x10e>
 800d8fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d900:	4631      	mov	r1, r6
 800d902:	4650      	mov	r0, sl
 800d904:	4798      	blx	r3
 800d906:	2800      	cmp	r0, #0
 800d908:	d0df      	beq.n	800d8ca <_scanf_i+0x11e>
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	05d9      	lsls	r1, r3, #23
 800d90e:	d50d      	bpl.n	800d92c <_scanf_i+0x180>
 800d910:	42bd      	cmp	r5, r7
 800d912:	d909      	bls.n	800d928 <_scanf_i+0x17c>
 800d914:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d91c:	4632      	mov	r2, r6
 800d91e:	4650      	mov	r0, sl
 800d920:	4798      	blx	r3
 800d922:	f105 39ff 	add.w	r9, r5, #4294967295
 800d926:	464d      	mov	r5, r9
 800d928:	42bd      	cmp	r5, r7
 800d92a:	d028      	beq.n	800d97e <_scanf_i+0x1d2>
 800d92c:	6822      	ldr	r2, [r4, #0]
 800d92e:	f012 0210 	ands.w	r2, r2, #16
 800d932:	d113      	bne.n	800d95c <_scanf_i+0x1b0>
 800d934:	702a      	strb	r2, [r5, #0]
 800d936:	6863      	ldr	r3, [r4, #4]
 800d938:	9e01      	ldr	r6, [sp, #4]
 800d93a:	4639      	mov	r1, r7
 800d93c:	4650      	mov	r0, sl
 800d93e:	47b0      	blx	r6
 800d940:	f8d8 3000 	ldr.w	r3, [r8]
 800d944:	6821      	ldr	r1, [r4, #0]
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	f8c8 2000 	str.w	r2, [r8]
 800d94c:	f011 0f20 	tst.w	r1, #32
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	d00f      	beq.n	800d974 <_scanf_i+0x1c8>
 800d954:	6018      	str	r0, [r3, #0]
 800d956:	68e3      	ldr	r3, [r4, #12]
 800d958:	3301      	adds	r3, #1
 800d95a:	60e3      	str	r3, [r4, #12]
 800d95c:	6923      	ldr	r3, [r4, #16]
 800d95e:	1bed      	subs	r5, r5, r7
 800d960:	445d      	add	r5, fp
 800d962:	442b      	add	r3, r5
 800d964:	6123      	str	r3, [r4, #16]
 800d966:	2000      	movs	r0, #0
 800d968:	b007      	add	sp, #28
 800d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96e:	f04f 0b00 	mov.w	fp, #0
 800d972:	e7ca      	b.n	800d90a <_scanf_i+0x15e>
 800d974:	07ca      	lsls	r2, r1, #31
 800d976:	bf4c      	ite	mi
 800d978:	8018      	strhmi	r0, [r3, #0]
 800d97a:	6018      	strpl	r0, [r3, #0]
 800d97c:	e7eb      	b.n	800d956 <_scanf_i+0x1aa>
 800d97e:	2001      	movs	r0, #1
 800d980:	e7f2      	b.n	800d968 <_scanf_i+0x1bc>
 800d982:	bf00      	nop
 800d984:	0800e038 	.word	0x0800e038
 800d988:	08008fb9 	.word	0x08008fb9
 800d98c:	0800cdfd 	.word	0x0800cdfd
 800d990:	0800f479 	.word	0x0800f479

0800d994 <__sflush_r>:
 800d994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d99c:	0716      	lsls	r6, r2, #28
 800d99e:	4605      	mov	r5, r0
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	d454      	bmi.n	800da4e <__sflush_r+0xba>
 800d9a4:	684b      	ldr	r3, [r1, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	dc02      	bgt.n	800d9b0 <__sflush_r+0x1c>
 800d9aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	dd48      	ble.n	800da42 <__sflush_r+0xae>
 800d9b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9b2:	2e00      	cmp	r6, #0
 800d9b4:	d045      	beq.n	800da42 <__sflush_r+0xae>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d9bc:	682f      	ldr	r7, [r5, #0]
 800d9be:	6a21      	ldr	r1, [r4, #32]
 800d9c0:	602b      	str	r3, [r5, #0]
 800d9c2:	d030      	beq.n	800da26 <__sflush_r+0x92>
 800d9c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	0759      	lsls	r1, r3, #29
 800d9ca:	d505      	bpl.n	800d9d8 <__sflush_r+0x44>
 800d9cc:	6863      	ldr	r3, [r4, #4]
 800d9ce:	1ad2      	subs	r2, r2, r3
 800d9d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9d2:	b10b      	cbz	r3, 800d9d8 <__sflush_r+0x44>
 800d9d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9d6:	1ad2      	subs	r2, r2, r3
 800d9d8:	2300      	movs	r3, #0
 800d9da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9dc:	6a21      	ldr	r1, [r4, #32]
 800d9de:	4628      	mov	r0, r5
 800d9e0:	47b0      	blx	r6
 800d9e2:	1c43      	adds	r3, r0, #1
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	d106      	bne.n	800d9f6 <__sflush_r+0x62>
 800d9e8:	6829      	ldr	r1, [r5, #0]
 800d9ea:	291d      	cmp	r1, #29
 800d9ec:	d82b      	bhi.n	800da46 <__sflush_r+0xb2>
 800d9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800da98 <__sflush_r+0x104>)
 800d9f0:	410a      	asrs	r2, r1
 800d9f2:	07d6      	lsls	r6, r2, #31
 800d9f4:	d427      	bmi.n	800da46 <__sflush_r+0xb2>
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	6062      	str	r2, [r4, #4]
 800d9fa:	04d9      	lsls	r1, r3, #19
 800d9fc:	6922      	ldr	r2, [r4, #16]
 800d9fe:	6022      	str	r2, [r4, #0]
 800da00:	d504      	bpl.n	800da0c <__sflush_r+0x78>
 800da02:	1c42      	adds	r2, r0, #1
 800da04:	d101      	bne.n	800da0a <__sflush_r+0x76>
 800da06:	682b      	ldr	r3, [r5, #0]
 800da08:	b903      	cbnz	r3, 800da0c <__sflush_r+0x78>
 800da0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800da0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da0e:	602f      	str	r7, [r5, #0]
 800da10:	b1b9      	cbz	r1, 800da42 <__sflush_r+0xae>
 800da12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da16:	4299      	cmp	r1, r3
 800da18:	d002      	beq.n	800da20 <__sflush_r+0x8c>
 800da1a:	4628      	mov	r0, r5
 800da1c:	f7fe f8f4 	bl	800bc08 <_free_r>
 800da20:	2300      	movs	r3, #0
 800da22:	6363      	str	r3, [r4, #52]	@ 0x34
 800da24:	e00d      	b.n	800da42 <__sflush_r+0xae>
 800da26:	2301      	movs	r3, #1
 800da28:	4628      	mov	r0, r5
 800da2a:	47b0      	blx	r6
 800da2c:	4602      	mov	r2, r0
 800da2e:	1c50      	adds	r0, r2, #1
 800da30:	d1c9      	bne.n	800d9c6 <__sflush_r+0x32>
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d0c6      	beq.n	800d9c6 <__sflush_r+0x32>
 800da38:	2b1d      	cmp	r3, #29
 800da3a:	d001      	beq.n	800da40 <__sflush_r+0xac>
 800da3c:	2b16      	cmp	r3, #22
 800da3e:	d11e      	bne.n	800da7e <__sflush_r+0xea>
 800da40:	602f      	str	r7, [r5, #0]
 800da42:	2000      	movs	r0, #0
 800da44:	e022      	b.n	800da8c <__sflush_r+0xf8>
 800da46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da4a:	b21b      	sxth	r3, r3
 800da4c:	e01b      	b.n	800da86 <__sflush_r+0xf2>
 800da4e:	690f      	ldr	r7, [r1, #16]
 800da50:	2f00      	cmp	r7, #0
 800da52:	d0f6      	beq.n	800da42 <__sflush_r+0xae>
 800da54:	0793      	lsls	r3, r2, #30
 800da56:	680e      	ldr	r6, [r1, #0]
 800da58:	bf08      	it	eq
 800da5a:	694b      	ldreq	r3, [r1, #20]
 800da5c:	600f      	str	r7, [r1, #0]
 800da5e:	bf18      	it	ne
 800da60:	2300      	movne	r3, #0
 800da62:	eba6 0807 	sub.w	r8, r6, r7
 800da66:	608b      	str	r3, [r1, #8]
 800da68:	f1b8 0f00 	cmp.w	r8, #0
 800da6c:	dde9      	ble.n	800da42 <__sflush_r+0xae>
 800da6e:	6a21      	ldr	r1, [r4, #32]
 800da70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da72:	4643      	mov	r3, r8
 800da74:	463a      	mov	r2, r7
 800da76:	4628      	mov	r0, r5
 800da78:	47b0      	blx	r6
 800da7a:	2800      	cmp	r0, #0
 800da7c:	dc08      	bgt.n	800da90 <__sflush_r+0xfc>
 800da7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	f04f 30ff 	mov.w	r0, #4294967295
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	4407      	add	r7, r0
 800da92:	eba8 0800 	sub.w	r8, r8, r0
 800da96:	e7e7      	b.n	800da68 <__sflush_r+0xd4>
 800da98:	dfbffffe 	.word	0xdfbffffe

0800da9c <_fflush_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	690b      	ldr	r3, [r1, #16]
 800daa0:	4605      	mov	r5, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	b913      	cbnz	r3, 800daac <_fflush_r+0x10>
 800daa6:	2500      	movs	r5, #0
 800daa8:	4628      	mov	r0, r5
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	b118      	cbz	r0, 800dab6 <_fflush_r+0x1a>
 800daae:	6a03      	ldr	r3, [r0, #32]
 800dab0:	b90b      	cbnz	r3, 800dab6 <_fflush_r+0x1a>
 800dab2:	f7fc f985 	bl	8009dc0 <__sinit>
 800dab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d0f3      	beq.n	800daa6 <_fflush_r+0xa>
 800dabe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dac0:	07d0      	lsls	r0, r2, #31
 800dac2:	d404      	bmi.n	800dace <_fflush_r+0x32>
 800dac4:	0599      	lsls	r1, r3, #22
 800dac6:	d402      	bmi.n	800dace <_fflush_r+0x32>
 800dac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daca:	f7f5 facc 	bl	8003066 <__retarget_lock_acquire_recursive>
 800dace:	4628      	mov	r0, r5
 800dad0:	4621      	mov	r1, r4
 800dad2:	f7ff ff5f 	bl	800d994 <__sflush_r>
 800dad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dad8:	07da      	lsls	r2, r3, #31
 800dada:	4605      	mov	r5, r0
 800dadc:	d4e4      	bmi.n	800daa8 <_fflush_r+0xc>
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	059b      	lsls	r3, r3, #22
 800dae2:	d4e1      	bmi.n	800daa8 <_fflush_r+0xc>
 800dae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dae6:	f7f5 faca 	bl	800307e <__retarget_lock_release_recursive>
 800daea:	e7dd      	b.n	800daa8 <_fflush_r+0xc>

0800daec <__swhatbuf_r>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	460c      	mov	r4, r1
 800daf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf4:	2900      	cmp	r1, #0
 800daf6:	b096      	sub	sp, #88	@ 0x58
 800daf8:	4615      	mov	r5, r2
 800dafa:	461e      	mov	r6, r3
 800dafc:	da0d      	bge.n	800db1a <__swhatbuf_r+0x2e>
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db04:	f04f 0100 	mov.w	r1, #0
 800db08:	bf14      	ite	ne
 800db0a:	2340      	movne	r3, #64	@ 0x40
 800db0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db10:	2000      	movs	r0, #0
 800db12:	6031      	str	r1, [r6, #0]
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	b016      	add	sp, #88	@ 0x58
 800db18:	bd70      	pop	{r4, r5, r6, pc}
 800db1a:	466a      	mov	r2, sp
 800db1c:	f000 f90e 	bl	800dd3c <_fstat_r>
 800db20:	2800      	cmp	r0, #0
 800db22:	dbec      	blt.n	800dafe <__swhatbuf_r+0x12>
 800db24:	9901      	ldr	r1, [sp, #4]
 800db26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db2e:	4259      	negs	r1, r3
 800db30:	4159      	adcs	r1, r3
 800db32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db36:	e7eb      	b.n	800db10 <__swhatbuf_r+0x24>

0800db38 <__smakebuf_r>:
 800db38:	898b      	ldrh	r3, [r1, #12]
 800db3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db3c:	079d      	lsls	r5, r3, #30
 800db3e:	4606      	mov	r6, r0
 800db40:	460c      	mov	r4, r1
 800db42:	d507      	bpl.n	800db54 <__smakebuf_r+0x1c>
 800db44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	2301      	movs	r3, #1
 800db4e:	6163      	str	r3, [r4, #20]
 800db50:	b003      	add	sp, #12
 800db52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db54:	ab01      	add	r3, sp, #4
 800db56:	466a      	mov	r2, sp
 800db58:	f7ff ffc8 	bl	800daec <__swhatbuf_r>
 800db5c:	9f00      	ldr	r7, [sp, #0]
 800db5e:	4605      	mov	r5, r0
 800db60:	4639      	mov	r1, r7
 800db62:	4630      	mov	r0, r6
 800db64:	f7fa fb0c 	bl	8008180 <_malloc_r>
 800db68:	b948      	cbnz	r0, 800db7e <__smakebuf_r+0x46>
 800db6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db6e:	059a      	lsls	r2, r3, #22
 800db70:	d4ee      	bmi.n	800db50 <__smakebuf_r+0x18>
 800db72:	f023 0303 	bic.w	r3, r3, #3
 800db76:	f043 0302 	orr.w	r3, r3, #2
 800db7a:	81a3      	strh	r3, [r4, #12]
 800db7c:	e7e2      	b.n	800db44 <__smakebuf_r+0xc>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	6020      	str	r0, [r4, #0]
 800db82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db86:	81a3      	strh	r3, [r4, #12]
 800db88:	9b01      	ldr	r3, [sp, #4]
 800db8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db8e:	b15b      	cbz	r3, 800dba8 <__smakebuf_r+0x70>
 800db90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db94:	4630      	mov	r0, r6
 800db96:	f000 f8e3 	bl	800dd60 <_isatty_r>
 800db9a:	b128      	cbz	r0, 800dba8 <__smakebuf_r+0x70>
 800db9c:	89a3      	ldrh	r3, [r4, #12]
 800db9e:	f023 0303 	bic.w	r3, r3, #3
 800dba2:	f043 0301 	orr.w	r3, r3, #1
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	431d      	orrs	r5, r3
 800dbac:	81a5      	strh	r5, [r4, #12]
 800dbae:	e7cf      	b.n	800db50 <__smakebuf_r+0x18>

0800dbb0 <_putc_r>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	4614      	mov	r4, r2
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	b118      	cbz	r0, 800dbc2 <_putc_r+0x12>
 800dbba:	6a03      	ldr	r3, [r0, #32]
 800dbbc:	b90b      	cbnz	r3, 800dbc2 <_putc_r+0x12>
 800dbbe:	f7fc f8ff 	bl	8009dc0 <__sinit>
 800dbc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbc4:	07d8      	lsls	r0, r3, #31
 800dbc6:	d405      	bmi.n	800dbd4 <_putc_r+0x24>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	0599      	lsls	r1, r3, #22
 800dbcc:	d402      	bmi.n	800dbd4 <_putc_r+0x24>
 800dbce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbd0:	f7f5 fa49 	bl	8003066 <__retarget_lock_acquire_recursive>
 800dbd4:	68a3      	ldr	r3, [r4, #8]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	60a3      	str	r3, [r4, #8]
 800dbdc:	da05      	bge.n	800dbea <_putc_r+0x3a>
 800dbde:	69a2      	ldr	r2, [r4, #24]
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	db12      	blt.n	800dc0a <_putc_r+0x5a>
 800dbe4:	b2eb      	uxtb	r3, r5
 800dbe6:	2b0a      	cmp	r3, #10
 800dbe8:	d00f      	beq.n	800dc0a <_putc_r+0x5a>
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	6022      	str	r2, [r4, #0]
 800dbf0:	701d      	strb	r5, [r3, #0]
 800dbf2:	b2ed      	uxtb	r5, r5
 800dbf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf6:	07da      	lsls	r2, r3, #31
 800dbf8:	d405      	bmi.n	800dc06 <_putc_r+0x56>
 800dbfa:	89a3      	ldrh	r3, [r4, #12]
 800dbfc:	059b      	lsls	r3, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_putc_r+0x56>
 800dc00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc02:	f7f5 fa3c 	bl	800307e <__retarget_lock_release_recursive>
 800dc06:	4628      	mov	r0, r5
 800dc08:	bd70      	pop	{r4, r5, r6, pc}
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f7fc fa47 	bl	800a0a2 <__swbuf_r>
 800dc14:	4605      	mov	r5, r0
 800dc16:	e7ed      	b.n	800dbf4 <_putc_r+0x44>

0800dc18 <__sccl>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	780b      	ldrb	r3, [r1, #0]
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	2b5e      	cmp	r3, #94	@ 0x5e
 800dc20:	bf0b      	itete	eq
 800dc22:	784b      	ldrbeq	r3, [r1, #1]
 800dc24:	1c4a      	addne	r2, r1, #1
 800dc26:	1c8a      	addeq	r2, r1, #2
 800dc28:	2100      	movne	r1, #0
 800dc2a:	bf08      	it	eq
 800dc2c:	2101      	moveq	r1, #1
 800dc2e:	3801      	subs	r0, #1
 800dc30:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800dc34:	f800 1f01 	strb.w	r1, [r0, #1]!
 800dc38:	42a8      	cmp	r0, r5
 800dc3a:	d1fb      	bne.n	800dc34 <__sccl+0x1c>
 800dc3c:	b90b      	cbnz	r3, 800dc42 <__sccl+0x2a>
 800dc3e:	1e50      	subs	r0, r2, #1
 800dc40:	bd70      	pop	{r4, r5, r6, pc}
 800dc42:	f081 0101 	eor.w	r1, r1, #1
 800dc46:	54e1      	strb	r1, [r4, r3]
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dc50:	2d2d      	cmp	r5, #45	@ 0x2d
 800dc52:	d005      	beq.n	800dc60 <__sccl+0x48>
 800dc54:	2d5d      	cmp	r5, #93	@ 0x5d
 800dc56:	d016      	beq.n	800dc86 <__sccl+0x6e>
 800dc58:	2d00      	cmp	r5, #0
 800dc5a:	d0f1      	beq.n	800dc40 <__sccl+0x28>
 800dc5c:	462b      	mov	r3, r5
 800dc5e:	e7f2      	b.n	800dc46 <__sccl+0x2e>
 800dc60:	7846      	ldrb	r6, [r0, #1]
 800dc62:	2e5d      	cmp	r6, #93	@ 0x5d
 800dc64:	d0fa      	beq.n	800dc5c <__sccl+0x44>
 800dc66:	42b3      	cmp	r3, r6
 800dc68:	dcf8      	bgt.n	800dc5c <__sccl+0x44>
 800dc6a:	3002      	adds	r0, #2
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	3201      	adds	r2, #1
 800dc70:	4296      	cmp	r6, r2
 800dc72:	54a1      	strb	r1, [r4, r2]
 800dc74:	dcfb      	bgt.n	800dc6e <__sccl+0x56>
 800dc76:	1af2      	subs	r2, r6, r3
 800dc78:	3a01      	subs	r2, #1
 800dc7a:	1c5d      	adds	r5, r3, #1
 800dc7c:	42b3      	cmp	r3, r6
 800dc7e:	bfa8      	it	ge
 800dc80:	2200      	movge	r2, #0
 800dc82:	18ab      	adds	r3, r5, r2
 800dc84:	e7e1      	b.n	800dc4a <__sccl+0x32>
 800dc86:	4610      	mov	r0, r2
 800dc88:	e7da      	b.n	800dc40 <__sccl+0x28>

0800dc8a <__submore>:
 800dc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8e:	460c      	mov	r4, r1
 800dc90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dc92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc96:	4299      	cmp	r1, r3
 800dc98:	d11d      	bne.n	800dcd6 <__submore+0x4c>
 800dc9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dc9e:	f7fa fa6f 	bl	8008180 <_malloc_r>
 800dca2:	b918      	cbnz	r0, 800dcac <__submore+0x22>
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcb0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dcb2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800dcb6:	6360      	str	r0, [r4, #52]	@ 0x34
 800dcb8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800dcbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dcc0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800dcc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dcc8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800dccc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800dcd0:	6020      	str	r0, [r4, #0]
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	e7e8      	b.n	800dca8 <__submore+0x1e>
 800dcd6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800dcd8:	0077      	lsls	r7, r6, #1
 800dcda:	463a      	mov	r2, r7
 800dcdc:	f000 f88e 	bl	800ddfc <_realloc_r>
 800dce0:	4605      	mov	r5, r0
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d0de      	beq.n	800dca4 <__submore+0x1a>
 800dce6:	eb00 0806 	add.w	r8, r0, r6
 800dcea:	4601      	mov	r1, r0
 800dcec:	4632      	mov	r2, r6
 800dcee:	4640      	mov	r0, r8
 800dcf0:	f7fd f916 	bl	800af20 <memcpy>
 800dcf4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800dcf8:	f8c4 8000 	str.w	r8, [r4]
 800dcfc:	e7e9      	b.n	800dcd2 <__submore+0x48>

0800dcfe <memmove>:
 800dcfe:	4288      	cmp	r0, r1
 800dd00:	b510      	push	{r4, lr}
 800dd02:	eb01 0402 	add.w	r4, r1, r2
 800dd06:	d902      	bls.n	800dd0e <memmove+0x10>
 800dd08:	4284      	cmp	r4, r0
 800dd0a:	4623      	mov	r3, r4
 800dd0c:	d807      	bhi.n	800dd1e <memmove+0x20>
 800dd0e:	1e43      	subs	r3, r0, #1
 800dd10:	42a1      	cmp	r1, r4
 800dd12:	d008      	beq.n	800dd26 <memmove+0x28>
 800dd14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd18:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd1c:	e7f8      	b.n	800dd10 <memmove+0x12>
 800dd1e:	4402      	add	r2, r0
 800dd20:	4601      	mov	r1, r0
 800dd22:	428a      	cmp	r2, r1
 800dd24:	d100      	bne.n	800dd28 <memmove+0x2a>
 800dd26:	bd10      	pop	{r4, pc}
 800dd28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd30:	e7f7      	b.n	800dd22 <memmove+0x24>
	...

0800dd34 <__gettzinfo>:
 800dd34:	4800      	ldr	r0, [pc, #0]	@ (800dd38 <__gettzinfo+0x4>)
 800dd36:	4770      	bx	lr
 800dd38:	200001f0 	.word	0x200001f0

0800dd3c <_fstat_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	4d07      	ldr	r5, [pc, #28]	@ (800dd5c <_fstat_r+0x20>)
 800dd40:	2300      	movs	r3, #0
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	4611      	mov	r1, r2
 800dd48:	602b      	str	r3, [r5, #0]
 800dd4a:	f7f5 f8d2 	bl	8002ef2 <_fstat>
 800dd4e:	1c43      	adds	r3, r0, #1
 800dd50:	d102      	bne.n	800dd58 <_fstat_r+0x1c>
 800dd52:	682b      	ldr	r3, [r5, #0]
 800dd54:	b103      	cbz	r3, 800dd58 <_fstat_r+0x1c>
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	bd38      	pop	{r3, r4, r5, pc}
 800dd5a:	bf00      	nop
 800dd5c:	200095d8 	.word	0x200095d8

0800dd60 <_isatty_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d06      	ldr	r5, [pc, #24]	@ (800dd7c <_isatty_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	602b      	str	r3, [r5, #0]
 800dd6c:	f7f5 f8c6 	bl	8002efc <_isatty>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_isatty_r+0x1a>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_isatty_r+0x1a>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	200095d8 	.word	0x200095d8

0800dd80 <__assert_func>:
 800dd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd82:	4614      	mov	r4, r2
 800dd84:	461a      	mov	r2, r3
 800dd86:	4b09      	ldr	r3, [pc, #36]	@ (800ddac <__assert_func+0x2c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	68d8      	ldr	r0, [r3, #12]
 800dd8e:	b954      	cbnz	r4, 800dda6 <__assert_func+0x26>
 800dd90:	4b07      	ldr	r3, [pc, #28]	@ (800ddb0 <__assert_func+0x30>)
 800dd92:	461c      	mov	r4, r3
 800dd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd98:	9100      	str	r1, [sp, #0]
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	4905      	ldr	r1, [pc, #20]	@ (800ddb4 <__assert_func+0x34>)
 800dd9e:	f000 f85b 	bl	800de58 <fiprintf>
 800dda2:	f000 f86b 	bl	800de7c <abort>
 800dda6:	4b04      	ldr	r3, [pc, #16]	@ (800ddb8 <__assert_func+0x38>)
 800dda8:	e7f4      	b.n	800dd94 <__assert_func+0x14>
 800ddaa:	bf00      	nop
 800ddac:	200001a0 	.word	0x200001a0
 800ddb0:	0800e920 	.word	0x0800e920
 800ddb4:	0800f4f1 	.word	0x0800f4f1
 800ddb8:	0800f4e4 	.word	0x0800f4e4

0800ddbc <_calloc_r>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	fba1 5402 	umull	r5, r4, r1, r2
 800ddc2:	b93c      	cbnz	r4, 800ddd4 <_calloc_r+0x18>
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	f7fa f9db 	bl	8008180 <_malloc_r>
 800ddca:	4606      	mov	r6, r0
 800ddcc:	b928      	cbnz	r0, 800ddda <_calloc_r+0x1e>
 800ddce:	2600      	movs	r6, #0
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	220c      	movs	r2, #12
 800ddd6:	6002      	str	r2, [r0, #0]
 800ddd8:	e7f9      	b.n	800ddce <_calloc_r+0x12>
 800ddda:	462a      	mov	r2, r5
 800dddc:	4621      	mov	r1, r4
 800ddde:	f7fc f9f5 	bl	800a1cc <memset>
 800dde2:	e7f5      	b.n	800ddd0 <_calloc_r+0x14>

0800dde4 <__env_lock>:
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <__env_lock+0x8>)
 800dde6:	f7f5 b93e 	b.w	8003066 <__retarget_lock_acquire_recursive>
 800ddea:	bf00      	nop
 800ddec:	20004324 	.word	0x20004324

0800ddf0 <__env_unlock>:
 800ddf0:	4801      	ldr	r0, [pc, #4]	@ (800ddf8 <__env_unlock+0x8>)
 800ddf2:	f7f5 b944 	b.w	800307e <__retarget_lock_release_recursive>
 800ddf6:	bf00      	nop
 800ddf8:	20004324 	.word	0x20004324

0800ddfc <_realloc_r>:
 800ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de00:	4680      	mov	r8, r0
 800de02:	4615      	mov	r5, r2
 800de04:	460c      	mov	r4, r1
 800de06:	b921      	cbnz	r1, 800de12 <_realloc_r+0x16>
 800de08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0c:	4611      	mov	r1, r2
 800de0e:	f7fa b9b7 	b.w	8008180 <_malloc_r>
 800de12:	b92a      	cbnz	r2, 800de20 <_realloc_r+0x24>
 800de14:	f7fd fef8 	bl	800bc08 <_free_r>
 800de18:	2400      	movs	r4, #0
 800de1a:	4620      	mov	r0, r4
 800de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de20:	f000 f833 	bl	800de8a <_malloc_usable_size_r>
 800de24:	4285      	cmp	r5, r0
 800de26:	4606      	mov	r6, r0
 800de28:	d802      	bhi.n	800de30 <_realloc_r+0x34>
 800de2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de2e:	d8f4      	bhi.n	800de1a <_realloc_r+0x1e>
 800de30:	4629      	mov	r1, r5
 800de32:	4640      	mov	r0, r8
 800de34:	f7fa f9a4 	bl	8008180 <_malloc_r>
 800de38:	4607      	mov	r7, r0
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d0ec      	beq.n	800de18 <_realloc_r+0x1c>
 800de3e:	42b5      	cmp	r5, r6
 800de40:	462a      	mov	r2, r5
 800de42:	4621      	mov	r1, r4
 800de44:	bf28      	it	cs
 800de46:	4632      	movcs	r2, r6
 800de48:	f7fd f86a 	bl	800af20 <memcpy>
 800de4c:	4621      	mov	r1, r4
 800de4e:	4640      	mov	r0, r8
 800de50:	f7fd feda 	bl	800bc08 <_free_r>
 800de54:	463c      	mov	r4, r7
 800de56:	e7e0      	b.n	800de1a <_realloc_r+0x1e>

0800de58 <fiprintf>:
 800de58:	b40e      	push	{r1, r2, r3}
 800de5a:	b503      	push	{r0, r1, lr}
 800de5c:	4601      	mov	r1, r0
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	4805      	ldr	r0, [pc, #20]	@ (800de78 <fiprintf+0x20>)
 800de62:	f853 2b04 	ldr.w	r2, [r3], #4
 800de66:	6800      	ldr	r0, [r0, #0]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	f7ff fb2d 	bl	800d4c8 <_vfiprintf_r>
 800de6e:	b002      	add	sp, #8
 800de70:	f85d eb04 	ldr.w	lr, [sp], #4
 800de74:	b003      	add	sp, #12
 800de76:	4770      	bx	lr
 800de78:	200001a0 	.word	0x200001a0

0800de7c <abort>:
 800de7c:	b508      	push	{r3, lr}
 800de7e:	2006      	movs	r0, #6
 800de80:	f000 f834 	bl	800deec <raise>
 800de84:	2001      	movs	r0, #1
 800de86:	f7f5 f80f 	bl	8002ea8 <_exit>

0800de8a <_malloc_usable_size_r>:
 800de8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8e:	1f18      	subs	r0, r3, #4
 800de90:	2b00      	cmp	r3, #0
 800de92:	bfbc      	itt	lt
 800de94:	580b      	ldrlt	r3, [r1, r0]
 800de96:	18c0      	addlt	r0, r0, r3
 800de98:	4770      	bx	lr

0800de9a <_raise_r>:
 800de9a:	291f      	cmp	r1, #31
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4605      	mov	r5, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	d904      	bls.n	800deae <_raise_r+0x14>
 800dea4:	2316      	movs	r3, #22
 800dea6:	6003      	str	r3, [r0, #0]
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800deb0:	b112      	cbz	r2, 800deb8 <_raise_r+0x1e>
 800deb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800deb6:	b94b      	cbnz	r3, 800decc <_raise_r+0x32>
 800deb8:	4628      	mov	r0, r5
 800deba:	f000 f831 	bl	800df20 <_getpid_r>
 800debe:	4622      	mov	r2, r4
 800dec0:	4601      	mov	r1, r0
 800dec2:	4628      	mov	r0, r5
 800dec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec8:	f000 b818 	b.w	800defc <_kill_r>
 800decc:	2b01      	cmp	r3, #1
 800dece:	d00a      	beq.n	800dee6 <_raise_r+0x4c>
 800ded0:	1c59      	adds	r1, r3, #1
 800ded2:	d103      	bne.n	800dedc <_raise_r+0x42>
 800ded4:	2316      	movs	r3, #22
 800ded6:	6003      	str	r3, [r0, #0]
 800ded8:	2001      	movs	r0, #1
 800deda:	e7e7      	b.n	800deac <_raise_r+0x12>
 800dedc:	2100      	movs	r1, #0
 800dede:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dee2:	4620      	mov	r0, r4
 800dee4:	4798      	blx	r3
 800dee6:	2000      	movs	r0, #0
 800dee8:	e7e0      	b.n	800deac <_raise_r+0x12>
	...

0800deec <raise>:
 800deec:	4b02      	ldr	r3, [pc, #8]	@ (800def8 <raise+0xc>)
 800deee:	4601      	mov	r1, r0
 800def0:	6818      	ldr	r0, [r3, #0]
 800def2:	f7ff bfd2 	b.w	800de9a <_raise_r>
 800def6:	bf00      	nop
 800def8:	200001a0 	.word	0x200001a0

0800defc <_kill_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	@ (800df1c <_kill_r+0x20>)
 800df00:	2300      	movs	r3, #0
 800df02:	4604      	mov	r4, r0
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	f7f4 ffc5 	bl	8002e98 <_kill>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	d102      	bne.n	800df18 <_kill_r+0x1c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b103      	cbz	r3, 800df18 <_kill_r+0x1c>
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop
 800df1c:	200095d8 	.word	0x200095d8

0800df20 <_getpid_r>:
 800df20:	f7f4 bfb8 	b.w	8002e94 <_getpid>
 800df24:	0000      	movs	r0, r0
	...

0800df28 <floor>:
 800df28:	ec51 0b10 	vmov	r0, r1, d0
 800df2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800df38:	2e13      	cmp	r6, #19
 800df3a:	460c      	mov	r4, r1
 800df3c:	4605      	mov	r5, r0
 800df3e:	4680      	mov	r8, r0
 800df40:	dc34      	bgt.n	800dfac <floor+0x84>
 800df42:	2e00      	cmp	r6, #0
 800df44:	da17      	bge.n	800df76 <floor+0x4e>
 800df46:	a332      	add	r3, pc, #200	@ (adr r3, 800e010 <floor+0xe8>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f7f2 f9ae 	bl	80002ac <__adddf3>
 800df50:	2200      	movs	r2, #0
 800df52:	2300      	movs	r3, #0
 800df54:	f7f2 fdf0 	bl	8000b38 <__aeabi_dcmpgt>
 800df58:	b150      	cbz	r0, 800df70 <floor+0x48>
 800df5a:	2c00      	cmp	r4, #0
 800df5c:	da55      	bge.n	800e00a <floor+0xe2>
 800df5e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800df62:	432c      	orrs	r4, r5
 800df64:	2500      	movs	r5, #0
 800df66:	42ac      	cmp	r4, r5
 800df68:	4c2b      	ldr	r4, [pc, #172]	@ (800e018 <floor+0xf0>)
 800df6a:	bf08      	it	eq
 800df6c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800df70:	4621      	mov	r1, r4
 800df72:	4628      	mov	r0, r5
 800df74:	e023      	b.n	800dfbe <floor+0x96>
 800df76:	4f29      	ldr	r7, [pc, #164]	@ (800e01c <floor+0xf4>)
 800df78:	4137      	asrs	r7, r6
 800df7a:	ea01 0307 	and.w	r3, r1, r7
 800df7e:	4303      	orrs	r3, r0
 800df80:	d01d      	beq.n	800dfbe <floor+0x96>
 800df82:	a323      	add	r3, pc, #140	@ (adr r3, 800e010 <floor+0xe8>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f7f2 f990 	bl	80002ac <__adddf3>
 800df8c:	2200      	movs	r2, #0
 800df8e:	2300      	movs	r3, #0
 800df90:	f7f2 fdd2 	bl	8000b38 <__aeabi_dcmpgt>
 800df94:	2800      	cmp	r0, #0
 800df96:	d0eb      	beq.n	800df70 <floor+0x48>
 800df98:	2c00      	cmp	r4, #0
 800df9a:	bfbe      	ittt	lt
 800df9c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800dfa0:	4133      	asrlt	r3, r6
 800dfa2:	18e4      	addlt	r4, r4, r3
 800dfa4:	ea24 0407 	bic.w	r4, r4, r7
 800dfa8:	2500      	movs	r5, #0
 800dfaa:	e7e1      	b.n	800df70 <floor+0x48>
 800dfac:	2e33      	cmp	r6, #51	@ 0x33
 800dfae:	dd0a      	ble.n	800dfc6 <floor+0x9e>
 800dfb0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800dfb4:	d103      	bne.n	800dfbe <floor+0x96>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	f7f2 f977 	bl	80002ac <__adddf3>
 800dfbe:	ec41 0b10 	vmov	d0, r0, r1
 800dfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800dfca:	f04f 37ff 	mov.w	r7, #4294967295
 800dfce:	40df      	lsrs	r7, r3
 800dfd0:	4207      	tst	r7, r0
 800dfd2:	d0f4      	beq.n	800dfbe <floor+0x96>
 800dfd4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e010 <floor+0xe8>)
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	f7f2 f967 	bl	80002ac <__adddf3>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f7f2 fda9 	bl	8000b38 <__aeabi_dcmpgt>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0c2      	beq.n	800df70 <floor+0x48>
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	da0a      	bge.n	800e004 <floor+0xdc>
 800dfee:	2e14      	cmp	r6, #20
 800dff0:	d101      	bne.n	800dff6 <floor+0xce>
 800dff2:	3401      	adds	r4, #1
 800dff4:	e006      	b.n	800e004 <floor+0xdc>
 800dff6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800dffa:	2301      	movs	r3, #1
 800dffc:	40b3      	lsls	r3, r6
 800dffe:	441d      	add	r5, r3
 800e000:	4545      	cmp	r5, r8
 800e002:	d3f6      	bcc.n	800dff2 <floor+0xca>
 800e004:	ea25 0507 	bic.w	r5, r5, r7
 800e008:	e7b2      	b.n	800df70 <floor+0x48>
 800e00a:	2500      	movs	r5, #0
 800e00c:	462c      	mov	r4, r5
 800e00e:	e7af      	b.n	800df70 <floor+0x48>
 800e010:	8800759c 	.word	0x8800759c
 800e014:	7e37e43c 	.word	0x7e37e43c
 800e018:	bff00000 	.word	0xbff00000
 800e01c:	000fffff 	.word	0x000fffff

0800e020 <_init>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	bf00      	nop
 800e024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e026:	bc08      	pop	{r3}
 800e028:	469e      	mov	lr, r3
 800e02a:	4770      	bx	lr

0800e02c <_fini>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	bf00      	nop
 800e030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e032:	bc08      	pop	{r3}
 800e034:	469e      	mov	lr, r3
 800e036:	4770      	bx	lr
